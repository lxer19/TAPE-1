URL: http://polaris.cs.uiuc.edu/reports/1294.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: VASE User's Manual Version 1.0  
Author: David Jablonowski Brian Bliss John Bruner Robert Haber 
Date: June 15, 1994  
Abstract-found: 0
Intro-found: 0
Reference: [Bli91] <author> Brian Bliss. </author> <title> The Application Executive, Version II. </title> <booktitle> Presented at Supercomputing Debugging Workshop, </booktitle> <address> Albuquerque, NM, Novem-ber 14-16, </address> <year> 1991. </year>
Reference-contexts: The next step is to configure a vase session using the vase Configuration & Execution Tool (vase), as described in Section 6. Each vase application is linked with the application executive <ref> [Bli91, Bli93] </ref> command interpreter, libae.a, which has direct access to the application process address space. The interpreted command language, a variant of the C language, is described in Section 7. <p> Here we will show a few example scripts, document the language's deviations from ansi C, and explain the extensions that allow the interpreter to operate effectively within the vase environment. (Consult <ref> [Bli91] </ref> for complete documentation.) It is important to mention that the C preprocessor (cpp) is not invoked on vase scripts. 22 The C preprocessor is capable of macro substitution, conditional compilation, and inclusion of named files. <p> Those specific to the vase Environment are listed here, along with a few very useful features inherent to the application executive (i.e., a stand-alone version of the interpreter). Other features inherent to the application executive also exist in the context of vase and are cited in <ref> [Bli91] </ref>, but we do not document them here. 35 7.4.1 Predefined Data Types In order to understand the following sections, it is first necessary to explain several data types predefined within the interpreter: struct bp PORT, or bp port When a port is created using the Configuration & Execution Tool as
Reference: [Bli93] <author> Brian Bliss. </author> <title> Interactive Steering Using the Application Executive. </title> <type> Technical report, </type> <institution> Univ. of Illinois at Urbana-Champaign, Center for Supercomputing Res. & Dev., </institution> <year> 1993. </year>
Reference-contexts: The next step is to configure a vase session using the vase Configuration & Execution Tool (vase), as described in Section 6. Each vase application is linked with the application executive <ref> [Bli91, Bli93] </ref> command interpreter, libae.a, which has direct access to the application process address space. The interpreted command language, a variant of the C language, is described in Section 7.
Reference: [DMBS79] <author> J. J. Dongarra, C. B. Moler, J. R. Bunch, and G. W. Stewart. </author> <title> Linpack Users' Guide. </title> <publisher> SIAM, </publisher> <year> 1979. </year>
Reference-contexts: These variables are declared as INTEGER n, ipvt (1000) The program is compiled and executed, and halts at the aforementioned breakpoint. As is documented in <ref> [DMBS79] </ref>, it is standard practice physically to switch rows of the matrix a when pivoting, and to introduce a level of indirection (the pivot vector ipvt) to reference them, rather than vice-versa.
Reference: [GLS + 92] <author> Dennis Gannon, Jenq Kuen Lee, Bruce Shei, Sekhar Sarukkai, Srinivas Narayana, Neelakantan Sundaresan, Daya Attapatu, and Francois Bodin. </author> <title> SIGMA II: A Tool Kit for Building Parallelizing Compilers and Performance Analysis Systems. </title> <booktitle> In Programming Environments for Parallel Computing, </booktitle> <pages> pages 17-36, </pages> <month> April, </month> <year> 1992. </year>
Reference-contexts: Many of the vase utilities invoked by the vmake generated makefile are from the sigma <ref> [GLS + 92] </ref> collection of parsing and dependency analysis utilities 3 (cfp, unparse), or are vase utilities operating based upon sigma (build cfg, bp cg). 3.2 Annotating the Original Source Code The first step in creating a vase Application is to define the program abstraction that is to be used to
Reference: [Hab91] <author> Bob Haber. </author> <title> The Visualization and Application-Steering Environment. </title> <type> Technical report, </type> <institution> Univ. of Illinois at Urbana-Champaign, Center for Superco mputing Res. & Dev., </institution> <month> December </month> <year> 1991. </year> <note> CSRD Report No. 1188, Proposal/Confidential. </note>
Reference-contexts: Run-time visualization and steering effectively eliminate the current artificial divisions between simulation and data analysis, enabling new scientific insight and gains in productivity. vase <ref> [HBJJ92, Hab91] </ref> (the Visualization and Application Steering Environment) is a collection of programming tools and system software that support the development and execution of distributed visualization and application steering applications. vase uses a control-flow abstraction to describe the complex internal structure of large-scale scientific applications and an integrated communications mechanism to
Reference: [HBJJ92] <author> R. Haber, B. Bliss, D. Jablonowski, and C. Jog. </author> <title> A Distributed Environment for Run-Time Visualization and Appli cation Steering in Computational Mechanics. Invited paper at the Symposium on High-Performance Computing for Flight Vehicles, </title> <address> Washington, DC, </address> <month> December 7-9, </month> <year> 1992. </year>
Reference-contexts: Run-time visualization and steering effectively eliminate the current artificial divisions between simulation and data analysis, enabling new scientific insight and gains in productivity. vase <ref> [HBJJ92, Hab91] </ref> (the Visualization and Application Steering Environment) is a collection of programming tools and system software that support the development and execution of distributed visualization and application steering applications. vase uses a control-flow abstraction to describe the complex internal structure of large-scale scientific applications and an integrated communications mechanism to
Reference: [KR88] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year>
Reference-contexts: a case. 31 facility, the appropriate control character (usually "^C") may be typed from the terminal. 32 7 Breakpoint Scripts 7.1 Syntax and Semantics The vase interpreter, also referred to as the application executive, accepts an extended subset of the ansi C programming language as defined by Kernighan and Ritchie <ref> [KR88] </ref>. <p> Alas, the specification of array dimension bounds with comma expressions is quite rare. 40 7.5 Standard C Language Constants, Data Types, Data Objects, and Library Routines Definitions/Declarations for the following are automatically recognized by the interpreter. Refer to <ref> [KR88] </ref> for their complete documentation. * The constant NULL and the type name FILE are predefined. * The stdin, stdout, and stderr FILE pointers are predefined. These refer to, respectively, the standard input, standard output, and standard error output.
Reference: [Ter90] <author> Jeff Terstriep. </author> <title> DTM Data Transfer Mechanism. </title> <type> Technical report, </type> <institution> Univ. of Illinois at Urbana-Champaign, National Center for Supercomputing Applications, </institution> <month> December </month> <year> 1990. </year> <month> 100 </month>
Reference-contexts: The user may define breakpoint scripts for the interpreter to execute at specified breakpoints, and modify them as the program runs. A breakpoint script may reference vase ports, endpoints for data communication between vase applications. vase ports are based upon the dtm <ref> [Ter90] </ref> library (libdtm.a). 1 The Configuration & Execution Tool's interface (explained in Section 6) displays the status of vase applications and allows significant interaction with them, including pausing at a specific breakpoint or the next breakpoint, creating ports and data flow connections, and selective execution of breakpoint scripts.
References-found: 8

