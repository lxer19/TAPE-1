URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/red.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: A Semantics for Static Type Inference in a Nondeterministic Language  
Author: Martin Abadi 
Date: November 6, 1992  
Affiliation: Systems Research Center Digital Equipment Corporation  
Abstract: Plotkin used the models of reduction in order to obtain a semantic characterization of static type inference in the pure -calculus. Here we apply these models to the study of a nondeterministic language, obtaining results analogous to Plotkin's. 
Abstract-found: 1
Intro-found: 1
Reference: [Bou91] <author> Gerard Boudol. </author> <title> Lambda-calculi for (strict) parallel functions. </title> <note> To appear in Information and Computation, </note> <year> 1991. </year>
Reference-contexts: A more sophisticated rule is possible, using union types: ` M : ff ` N : fi For simplicity, we do not consider union types; they seem to lead to significant complications. A similar rule appears in Boudol's work <ref> [Bou91] </ref>: ` M : ff ` N : fi Here ff and fi are logical assertions (rather than types), ff ^ fi is their conjunction, and jj is a parallel-composition operator.
Reference: [dL92] <author> Ugo de' Liguoro. </author> <title> Nondeterministic untyped -calculus: A study about explicit non determinism in higher-order functional calculi. </title> <type> PhD thesis, </type> <institution> Universita di Roma "La Sapienza", </institution> <year> 1992. </year>
Reference-contexts: Sharma and de' Liguoro studied this language in their theses <ref> [Sha84, dL92] </ref>, obtaining interesting results about its operational and denotational semantics.
Reference: [HA80] <author> M.C.B. Hennessy and E.A. Ashcroft. </author> <title> A mathematical semantics for a nondeterministic typed -calculus. </title> <journal> Theoretical Computer Science, </journal> <volume> 11 </volume> <pages> 227-245, </pages> <year> 1980. </year>
Reference-contexts: The type inference rules are Curry's: ` x : ff (if x : ff is in ) ` x:M : ff ! fi ` M : ff ! fi ` N : ff with one additional rule, introduced by Hennessy and Ashcroft in the study of a nondeterministic typed -calculus <ref> [HA80] </ref>: ` M : ff ` N : ff This rule says that if M and N both have the type ff then so does their sum.
Reference: [Plo92] <author> Gordon Plotkin. </author> <title> A semantics for static type inference. </title> <journal> Information and Computation, </journal> <note> 1992. In this issue. A preliminary version appeared in Theoretical Aspects of Computer Software, Springer-Verlag LNCS 526. </note>
Reference-contexts: 1 Introduction The models of reduction are a generalization of the usual syntactic -models for the pure -calculus (see <ref> [Plo92] </ref> and the references therein). If a term M reduces to a term N then its interpretation in a model of reduction is "smaller than" or equal to the interpretation of N (and not necessarily equal as in -models). <p> Sharma and de' Liguoro studied this language in their theses [Sha84, dL92], obtaining interesting results about its operational and denotational semantics. The basic reduction relation !! fi+ is axiomatized by a set of rules that contains the expected rules from <ref> [Plo92] </ref>, in particular the fi rule: (x:M )N !! fi+ [N=x]M The novelties are the rules for choice: M + N !! fi+ M M + N !! fi+ N M + N !! fi+ M 0 + N 0 Some of the propositions below concern an extended reduction relation, !! <p> The interpretation X ff of the type expression ff is the set of classes [M ] such that B ` M : ff, where B is a certain fixed extension of , defined as in <ref> [Plo92] </ref>. (This is a good definition by Subject Reduction.) We need to check that these interpretations of types are closed under ^: suppose that [M ] 2 X ff and [N ] 2 X ff , then B ` M : ff and B ` N : ff; the type inference
Reference: [Sha84] <author> Keshav Sharma. </author> <title> Syntactic aspects of the non-deterministic lambda calculus. </title> <type> Technical Report CS-84-127, </type> <institution> Washington State University, </institution> <month> September </month> <year> 1984. </year> <note> Thesis. See also the references in [Plo92] and [dL92]. 8 </note>
Reference-contexts: Sharma and de' Liguoro studied this language in their theses <ref> [Sha84, dL92] </ref>, obtaining interesting results about its operational and denotational semantics. <p> Note that the analogous condition for M (N + N 0 ) and (M N ) + (M N 0 ) is not sensible, since these two terms behave differently (at least for some calling mechanisms; see <ref> [Sha84] </ref>). And the condition for (M + M 0 )N and (M N ) + (M 0 N ) would not work, since although these two terms behave identically the latter can be easier to type.
References-found: 5

