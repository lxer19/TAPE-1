URL: ftp://ftp.cs.washington.edu/tr/1995/03/UW-CSE-95-03-06.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Note: c Copyright 1995 Donald D. Chinn  
Abstract-found: 0
Intro-found: 1
Reference: [BAS94] <author> I. Ben-Aroya and A. Schuster. </author> <title> A CLT-type lower bound for hot-potato permutation routing. </title> <type> Technical Report LPCR #9405, </type> <institution> CS Department, Technion, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: For example, deterministic destination-exchangeable routing algorithms that allow packets to have nonminimal behavior before reaching the edge of the i-box, but are otherwise minimal, do not contradict the proofs of this chapter. Ben-Aroya and Schuster <ref> [BAS94] </ref> give a precise characterization of the kinds of nonminimal algorithms for which the technique applies. Although they describe the lower bound in the context of hot potato algorithms, the technique applies more generally to the model described in Section 2.1.
Reference: [Bat80] <author> K. E. Batcher. </author> <title> Design of a massively parallel processor. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29(9) </volume> <pages> 836-840, </pages> <month> September </month> <year> 1980. </year>
Reference-contexts: The mesh and torus topologies have attracted much attention in multiprocessor network design because of their simplicity and their efficient use of space when physically realized. Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace <ref> [Bat80] </ref>, the MP-1 from MasPar [MP-87], the Paragon from Intel Scientific, the J-machine from MIT [ND90], the Touchstone DELTA from Intel [Int91], the DASH from Stanford [LLJ + 92], and the Mosaic from Cal Tech [SBSS93]. 3 This thesis focuses on the time to transmit messages once they are in the
Reference: [BC91] <author> J. T. Brassil and R. L. Cruz. </author> <title> Bounds on maximum delay in networks with deflection routing. </title> <booktitle> In 29th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 571-580, </pages> <year> 1991. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths.
Reference: [BDHS93] <author> A. Ben-Dor, S. Halevi, and A. Schuster. </author> <title> On greedy hot-potatoe routing. </title> <type> Technical Report PCL Report #9204, </type> <institution> CS Department, Technion, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: Chaos performed no better than 3% better than the results of than in Experiments 1 and 2, so the initial random state has less impact on delivery time than in the previous experiments. 64 4.3 A Greedy Hot Potato Algorithm Hot potato or deflection routing <ref> [BNRST93, BDHS93, FR92, Haj91, KKR93] </ref>, where a node must send on the next step any packets it receives in the current step, offers the possibility of simple logic and simple algorithms. <p> Greedy hot potato routing <ref> [BDHS93] </ref>, where packets use profitable outlinks whenever they are available, might be a nonminimal adaptive solution to route arbitrary permutations in time linear in n on the n fi n mesh.
Reference: [BFS94] <author> K. Bolding, M. Fulgham, and L. Snyder. </author> <title> The case for chaotic adaptive routing. </title> <type> Technical Report TR 94-02-04, </type> <institution> University of Washington Department of Computer Science and Engineering, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Nonminimal routing allows the most flexibility in packet paths, but at a cost of more complex logic to avoid livelock, the situation in which a packet never reaches its destination because it is derouted frequently. Examples of adaptive routers include the Chaos router <ref> [BFS94, KS90, KS91] </ref> and the Ngai and Seitz router [NS89, NS91]. <p> We can explore the difference between minimal adaptive algorithms and nonminimal adaptive algorithms in the worst case setting by running permutations constructed in the lower bound (hereafter called CLT permutations) on nonminimal adaptive algorithms. Chaotic routing <ref> [BFS94, KS91, KS94] </ref> is a randomized, nonminimal adaptive algorithm that is competitive with state-of-the-art oblivious routers. Recall that a packet is said to be derouted if it makes a move that places it farther from its destination.
Reference: [BH85] <author> A. Borodin and J. E. Hopcroft. </author> <title> Routing, merging, and sorting on parallel models of computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30 </volume> <pages> 130-145, </pages> <year> 1985. </year>
Reference-contexts: A preliminary version of portions of Chapters 2 and 3 has appeared previously [CLT94]. A preliminary version of portions of Chapter 4 has also appeared previously [Chi]. This chapter concludes by surveying some of the known results for permutation routing. 1.1 Routing with Unbounded Queues Borodin and Hopcroft <ref> [BH85] </ref> prove an ( p N =d 3=2 ) time bound for routing the worst case permutation on any N -node, degree d network using any oblivious routing algorithm. Kaklamanis et al. [KKT90] improve the bound to ( p N =d). <p> After this greedy scheduling, any unscheduled packets are assigned to available outlinks in an arbitrary way. Let us call our algorithm GreedyHP. GreedyHP is destination-exchangeable, and it is intended to approximate the hot potato algorithm (suggested by Borodin and Hopcroft <ref> [BH85] </ref>) that for each node randomly picks a scheduling of the outlinks that maximizes the number of packets that advance. This latter algorithm is currently impractical because computing a random maximal matching is expensive, either in time or in hardware complexity.
Reference: [BNRST93] <author> A. Bar-Noy, P. Raghavan, B. Schieber, and H. Tamaki. </author> <title> Fast deflection routing for packets and worms. </title> <booktitle> In Proceedings of the Twelfth Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 75-86, </pages> <year> 1993. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. <p> In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. Newman and Schuster [NS92] give an algorithm that routes any permutation in 7n + o (n) steps, but the algorithm uses sorting. Bar-Noy et al. <ref> [BNRST93] </ref> provide a deterministic hot potato routing algorithm not based on sorting that routes any permutation in n2 O ( p log 2 n log 2 log 2 n) steps. In the same paper, they provide a simpler O (n 3=2 ) algorithm. <p> Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim [CK92] and Cypher and Gravano [CG92]. An example of a non-minimal destination-exchangeable algorithm is the O (n 3=2 ) hot potato algorithm of Bar-Noy et al. <ref> [BNRST93] </ref>. 12 cn 6 cn-1+i cn-1+i - N i -column - E i -row = 1-box Definitions Number the columns of the mesh 1 to n from west to east and the rows 1 to n from south to north. <p> Although they describe the lower bound in the context of hot potato algorithms, the technique applies more generally to the model described in Section 2.1. Since the O (n 3=2 ) time hot potato algorithm of Bar-Noy et al. <ref> [BNRST93] </ref> is destination-exchangeable, the restriction in Theorem 2.14 of minimal routing cannot be eliminated entirely. 2.4.5 Dimension Order Routing Destination-exchangeability. The arguments presented in Sections 2.2 and 2.3 also apply to dimension order routing. <p> Chaos performed no better than 3% better than the results of than in Experiments 1 and 2, so the initial random state has less impact on delivery time than in the previous experiments. 64 4.3 A Greedy Hot Potato Algorithm Hot potato or deflection routing <ref> [BNRST93, BDHS93, FR92, Haj91, KKR93] </ref>, where a node must send on the next step any packets it receives in the current step, offers the possibility of simple logic and simple algorithms.
Reference: [Bol93] <author> K. Bolding. </author> <title> Chaotic Routing: Design and Implementation of an Adaptive Multicomputer Network Router. </title> <type> PhD thesis, </type> <institution> University of Wash-ington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1993. </year> <month> 73 </month>
Reference-contexts: This chapter also describes a similar experiment for a randomized, destination-exchangeable hot potato algorithm. The running time of this algorithm also appears to be superlinear in n. 4.1 The Chaos Router A more detailed description of its operation can be found elsewhere <ref> [Bol93, KS94] </ref>, but we briefly describe it here. A node consists of four input frames and four output frames, one for each of the four neighbors of a node. Input and output frames can be paired by the associated neighboring nodes. <p> However, the Chaos algorithm is probabilistically livelock-free: the probability that a packet has not been delivered after T time tends to zero as T tends to infinity. (A proof of this can be found in [KS90] for the hypercube; the proof for the mesh is almost identical <ref> [Bol93] </ref>.) The Chaos router has a mechanism called virtual cut-through, which allows the head of a packet to move from frame to frame (either the input frames, the output 56 frames, or the central queue) without waiting for the tail to arrive in the same buffer space.
Reference: [BRSU93] <author> A. Borodin, P. Raghavan, B. Schieber, and E. Upfal. </author> <booktitle> How much can hardware help routing? In Proceedings of the Twenty Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 573-582, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: When a packet reaches its destination, it is considered delivered and removed from the network. This is a multi-port model, in the terminology of Borodin et al. <ref> [BRSU93] </ref>. For consistency with the existing literature, we use the word "queue" to denote the 10 set of waiting packets in a node. The packets do not have to be served in a first-in first-out (FIFO) fashion.
Reference: [BS92] <author> K. Bolding and L. Snyder. </author> <title> Mesh and torus chaotic routing. </title> <booktitle> In Advanced Research in VLSI and Parallel Systems: Proceedings of the 1992 Brown/MIT Conference, </booktitle> <pages> pages 333-347, </pages> <month> March </month> <year> 1992. </year>
Reference: [CG92] <author> R. Cypher and L. Gravano. </author> <title> Adaptive, deadlock-free packet routing in torus networks with minimal storage. </title> <booktitle> In 1992 International Conference on Parallel Processing, </booktitle> <pages> pages 204-211, </pages> <year> 1992. </year>
Reference-contexts: Intuitively, adaptive routers potentially can use the available bandwidth to relieve the congestion or to route around faults. In minimal adaptive routing, the path a packet takes is a shortest one. An example of a minimal adaptive algorithm is the one of Cypher and Gravano <ref> [CG92] </ref> or of Chien and Kim [CK92]. In nonminimal adaptive routing, a packet may take any path between its source and its destination, possibly making moves in the network that place it farther from its destination than before the move. <p> Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim [CK92] and Cypher and Gravano <ref> [CG92] </ref>. <p> Minimal Chaos is, in a sense, an idealized minimal adaptive algorithm, since it has no mechanism to prevent deadlock. Mechanisms to prevent deadlock, such as virtual channels [DA93] or that of Cypher and Gravano <ref> [CG92] </ref>, complicate the logic needed to implement the algorithm. 57 4.2 The Experiments We now describe the experiments we performed on the minimal Chaos and Chaos routers. 4.2.1 Experiment 1 Minimal Chaos falls into the class of algorithms in the lower bound of Chapter 2: it is deterministic and minimal adaptive,
Reference: [Chi] <author> D. D. Chinn. </author> <title> The performance of minimal adaptive algorithms on worst case permutations. To appear in Parallel Computer Routing and Communication Workshop. </title>
Reference-contexts: A preliminary version of portions of Chapters 2 and 3 has appeared previously [CLT94]. A preliminary version of portions of Chapter 4 has also appeared previously <ref> [Chi] </ref>.
Reference: [CK92] <author> A. Chien and J. H. Kim. </author> <title> Planar-adaptive routing: Low-cost adaptive networks for multiprocessors. </title> <booktitle> In Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <pages> pages 268-277, </pages> <year> 1992. </year>
Reference-contexts: In minimal adaptive routing, the path a packet takes is a shortest one. An example of a minimal adaptive algorithm is the one of Cypher and Gravano [CG92] or of Chien and Kim <ref> [CK92] </ref>. In nonminimal adaptive routing, a packet may take any path between its source and its destination, possibly making moves in the network that place it farther from its destination than before the move. When a packet makes such a move, the packet 4 is said to have been derouted. <p> Other minimal adaptive algorithms that could be implemented with a destination-exchangeable algorithm include those of Chien and Kim <ref> [CK92] </ref> and Cypher and Gravano [CG92].
Reference: [CLT94] <author> D. D. Chinn, T. Leighton, and M. Tompa. </author> <title> Minimal adaptive routing on the mesh with bounded queue size. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <address> Cape May, NJ, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Chapter 4 describes a series of experiments on nonminimal adaptive algorithms and gives the results, which suggest that perhaps none of those discussed can route arbitrary permutations in O (n) time. A preliminary version of portions of Chapters 2 and 3 has appeared previously <ref> [CLT94] </ref>. A preliminary version of portions of Chapter 4 has also appeared previously [Chi].
Reference: [DA93] <author> W. Dally and H. Aoki. </author> <title> Deadlock-free adaptive routing in multicom-puter networks using virtual channels. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(4) </volume> <pages> 466-75, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Thus, no cyclic dependencies for resources can exist, and so the network never gets into a deadlocked situation. Minimal Chaos is, in a sense, an idealized minimal adaptive algorithm, since it has no mechanism to prevent deadlock. Mechanisms to prevent deadlock, such as virtual channels <ref> [DA93] </ref> or that of Cypher and Gravano [CG92], complicate the logic needed to implement the algorithm. 57 4.2 The Experiments We now describe the experiments we performed on the minimal Chaos and Chaos routers. 4.2.1 Experiment 1 Minimal Chaos falls into the class of algorithms in the lower bound of Chapter
Reference: [Fel93] <author> E. Felten. </author> <title> Protocol Compilation: High-Performance Communication for Parallel Programs. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle, WA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: As machines get bigger, messages will have to travel through a greater number of nodes to reach their destinations, incurring a greater delay. Also, the time it takes to create a message (a one-time cost per message) will decrease as more sophisticated techniques are employed (e.g., see <ref> [Fel93] </ref>). The interconnection network is composed of nodes, which usually correspond to processing elements, and links, the wires that connect nodes. In one time step, a node can transmit one message along each of its links.
Reference: [FR92] <author> U. Feige and P. Raghavan. </author> <title> Exact analysis of hot-potato routing. </title> <booktitle> In Proceedings 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 553-562, </pages> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1992. </year> <month> 74 </month>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. <p> Chaos performed no better than 3% better than the results of than in Experiments 1 and 2, so the initial random state has less impact on delivery time than in the previous experiments. 64 4.3 A Greedy Hot Potato Algorithm Hot potato or deflection routing <ref> [BNRST93, BDHS93, FR92, Haj91, KKR93] </ref>, where a node must send on the next step any packets it receives in the current step, offers the possibility of simple logic and simple algorithms.
Reference: [Haj91] <author> B. Hajek. </author> <title> Bounds for evacuation time for deflection routing. </title> <journal> Distributed Computing, </journal> <volume> 5 </volume> <pages> 1-6, </pages> <year> 1991. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. <p> Chaos performed no better than 3% better than the results of than in Experiments 1 and 2, so the initial random state has less impact on delivery time than in the previous experiments. 64 4.3 A Greedy Hot Potato Algorithm Hot potato or deflection routing <ref> [BNRST93, BDHS93, FR92, Haj91, KKR93] </ref>, where a node must send on the next step any packets it receives in the current step, offers the possibility of simple logic and simple algorithms.
Reference: [HS90] <author> T. Han and D. Stanat. </author> <title> "Move and smooth" routing algorithms on mesh-connected computers. </title> <booktitle> In 28th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <pages> pages 236-245, </pages> <year> 1990. </year>
Reference-contexts: However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general 8 routing. Han and Stanat <ref> [HS90] </ref> provide routing algorithms for the mesh that are not based on sorting, but do use nonminimal paths and knowledge of full destination addresses. Their algorithms can route any permutation in O (n) time and require constant sized queues per node. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions.
Reference: [Int91] <author> Intel. </author> <title> A Touchstone DELTA system description. </title> <type> Technical report, </type> <institution> Intel, </institution> <address> Portland, OR, </address> <year> 1991. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [Bat80], the MP-1 from MasPar [MP-87], the Paragon from Intel Scientific, the J-machine from MIT [ND90], the Touchstone DELTA from Intel <ref> [Int91] </ref>, the DASH from Stanford [LLJ + 92], and the Mosaic from Cal Tech [SBSS93]. 3 This thesis focuses on the time to transmit messages once they are in the network. The method by which messages are sent through the network is called the routing algorithm. <p> That is, although there might be unused links in the network at a given time, oblivious algorithms are unable to alter the paths of packets to use these available links. Machines that use oblivious algorithms include the Intel Touchstone <ref> [Int91] </ref> and Paragon, the MIT J-machine [ND90], and the Mosaic from Cal Tech [SBSS93]. Adaptive routing is an alternative to oblivious routing. In adaptive algorithms, the path a message takes from its source to its destination may depend on packets it encounters.
Reference: [KKR93] <author> C. Kaklamanis, D. Krizanc, and S. Rao. </author> <title> Hot-potato routing on processor arrays. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 273-282, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. <p> Chaos performed no better than 3% better than the results of than in Experiments 1 and 2, so the initial random state has less impact on delivery time than in the previous experiments. 64 4.3 A Greedy Hot Potato Algorithm Hot potato or deflection routing <ref> [BNRST93, BDHS93, FR92, Haj91, KKR93] </ref>, where a node must send on the next step any packets it receives in the current step, offers the possibility of simple logic and simple algorithms.
Reference: [KKT90] <author> C. Kaklamanis, D. Krizanc, and T. Tsantilas. </author> <title> Tight bounds for oblivious routing in the hypercube. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 31-36, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Kaklamanis et al. <ref> [KKT90] </ref> improve the bound to ( p N =d). These results are useful for networks such as the hypercube, whose diameter and degree are log 2 N , but are no better asymptotically than the diameter lower bound of 2 N 2 on the two-dimensional mesh.
Reference: [Kri91] <author> D. Krizanc. </author> <title> Oblivious routing with limited buffer capacity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 317-327, </pages> <year> 1991. </year>
Reference-contexts: Krizanc <ref> [Kri91] </ref> proves such a bound for any source-oblivious routing algorithm, which is one where the path a packet takes only depends on its current location and destination.
Reference: [KRT88] <author> D. Krizanc, S. Rajasekaran, and T. Tsantilas. </author> <title> Optimal routing for mesh-connected processor arrays. </title> <booktitle> In 3rd Aegean Workshop on Computing (AWOC), volume 319 of Lecture Notes in Computer Science, </booktitle> <pages> pages 411-422. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Conjecture 5.2 There is no destination-exchangeable algorithm with bounded queues that can route arbitrary permutations in O (n) time (expected, for randomized algorithms) on the n fi n mesh. 70 Krizanc, Rajasekaran, and Tsantilas <ref> [KRT88] </ref> give an algorithm that is almost a counterexample to the conjecture above.
Reference: [KS90] <author> S. Konstantinidou and L. Snyder. </author> <title> The chaos router: A practical application of randomization in network routing. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 21-30, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Nonminimal routing allows the most flexibility in packet paths, but at a cost of more complex logic to avoid livelock, the situation in which a packet never reaches its destination because it is derouted frequently. Examples of adaptive routers include the Chaos router <ref> [BFS94, KS90, KS91] </ref> and the Ngai and Seitz router [NS89, NS91]. <p> However, the Chaos algorithm is probabilistically livelock-free: the probability that a packet has not been delivered after T time tends to zero as T tends to infinity. (A proof of this can be found in <ref> [KS90] </ref> for the hypercube; the proof for the mesh is almost identical [Bol93].) The Chaos router has a mechanism called virtual cut-through, which allows the head of a packet to move from frame to frame (either the input frames, the output 56 frames, or the central queue) without waiting for the
Reference: [KS91] <author> S. Konstantinidou and L. Snyder. </author> <title> Chaos router: Architecture and performance. </title> <booktitle> In Proceedings of the 18th International Symposium on Computer Architecture, </booktitle> <pages> pages 212-221, </pages> <month> May </month> <year> 1991. </year> <month> 75 </month>
Reference-contexts: Nonminimal routing allows the most flexibility in packet paths, but at a cost of more complex logic to avoid livelock, the situation in which a packet never reaches its destination because it is derouted frequently. Examples of adaptive routers include the Chaos router <ref> [BFS94, KS90, KS91] </ref> and the Ngai and Seitz router [NS89, NS91]. <p> We can explore the difference between minimal adaptive algorithms and nonminimal adaptive algorithms in the worst case setting by running permutations constructed in the lower bound (hereafter called CLT permutations) on nonminimal adaptive algorithms. Chaotic routing <ref> [BFS94, KS91, KS94] </ref> is a randomized, nonminimal adaptive algorithm that is competitive with state-of-the-art oblivious routers. Recall that a packet is said to be derouted if it makes a move that places it farther from its destination.
Reference: [KS94] <author> S. Konstantinidou and L. Snyder. </author> <title> The Chaos Router. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43(12) </volume> <pages> 1386-1397, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: We can explore the difference between minimal adaptive algorithms and nonminimal adaptive algorithms in the worst case setting by running permutations constructed in the lower bound (hereafter called CLT permutations) on nonminimal adaptive algorithms. Chaotic routing <ref> [BFS94, KS91, KS94] </ref> is a randomized, nonminimal adaptive algorithm that is competitive with state-of-the-art oblivious routers. Recall that a packet is said to be derouted if it makes a move that places it farther from its destination. <p> This chapter also describes a similar experiment for a randomized, destination-exchangeable hot potato algorithm. The running time of this algorithm also appears to be superlinear in n. 4.1 The Chaos Router A more detailed description of its operation can be found elsewhere <ref> [Bol93, KS94] </ref>, but we briefly describe it here. A node consists of four input frames and four output frames, one for each of the four neighbors of a node. Input and output frames can be paired by the associated neighboring nodes.
Reference: [Kun88] <author> M. Kunde. </author> <title> Routing and sorting on mesh-connected arrays. </title> <booktitle> In 3rd Aegean Workshop on Computing (AWOC), volume 319 of Lecture Notes in Computer Science, </booktitle> <pages> pages 423-433. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: Packets in these algorithms may take paths that are nonminimal (i.e., make moves that place them farther away from their destination during the sorting phases). For the n fi n mesh, Kunde <ref> [Kun88] </ref> shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis [LMT89] and Rajasekaran and Overholt [RO92] improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [Kun88, LMT89, NS92, RO92] </ref>, but those algorithms do not use minimal routes. 3.1 The Algorithm Without loss of generality, we assume that we are routing just packets that need to move either northeast or directly north to get to their destination.
Reference: [Lei] <author> T. Leighton. </author> <type> Personal communication. </type>
Reference-contexts: There are p N such packets, and since the node labelled 0 : : : 0 can transmit at most log N packets per time step, the lower bound follows. On the N -node three-dimensional mesh (n fi n fi n, N = n 3 ), Leighton <ref> [Lei] </ref> observes that the dimension order algorithm routes all packets in the bit-reversal permutation (where the packet at source b 1 b 2 : : : b 3 log n is sent to destination b 3 log n : : : b 2 b 1 ) in (n 2 ) steps,
Reference: [Lei90] <author> T. Leighton. </author> <title> Average case analysis of greedy routing algorithms on arrays. </title> <booktitle> In Proceedings of the 1990 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 2-10, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: It is well known that dimension order paths can be used to route any permutation on the n fi n mesh in 2n 2 steps, matching the diameter lower bound (see Leighton [Lei92, pages 159-162]). Unfortunately, this algorithm requires fi (n) size queues at each node. (Leighton <ref> [Lei90] </ref> proves that if each packet has a random destination | i.e., the routing problem is not necessarily a permutation | then 7 with high probability all packets will be delivered in 2n + O (log 2 n) steps and none of the queues ever contains more than four packets.
Reference: [Lei92] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: It is well known that dimension order paths can be used to route any permutation on the n fi n mesh in 2n 2 steps, matching the diameter lower bound (see Leighton <ref> [Lei92, pages 159-162] </ref>). <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions. <p> The outqueue policy of a node is the method by which a node decides which packets, of all the packets in its queue, to attempt to send out its outlinks. No more than one packet can be scheduled to each outlink. Examples of outqueue policies are FIFO or farthest-first <ref> [Lei92, page 159] </ref>. The inqueue policy of a node determines which packets, of all the packets that attempt to enter a node, will be accepted. The inqueue policy must guarantee that the queue does not overflow (i.e., accept more packets than it is capable of holding). <p> Let us call an algorithm that obeys this last restriction a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredictive algorithm, given by Ranade [Ran87], Leighton <ref> [Lei92, page 556] </ref>, and Maggs and Sitaraman [MS92]. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy. <p> In this case the lower bound holds even though this algorithm makes use of the entire destination address, and hence is not destination-exchangeable. The dimension order algorithm with farthest-first policy and unbounded queues can route any permutation on the mesh in 2n 2 steps <ref> [Lei92, pages 159-162] </ref>. The construction is similar to the one above, except that we define p = (2k + 1)cn + dn and l = cn 2 =p.
Reference: [LLJ + 92] <author> D. Lenoski, J. Laudon, T. Joe, D. Nakahira, L. Stevens, A. Gupta, and J. Hennessy. </author> <title> The DASH prototype: Implementation and performance. </title> <booktitle> In Proc. 19th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 92-103, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [Bat80], the MP-1 from MasPar [MP-87], the Paragon from Intel Scientific, the J-machine from MIT [ND90], the Touchstone DELTA from Intel [Int91], the DASH from Stanford <ref> [LLJ + 92] </ref>, and the Mosaic from Cal Tech [SBSS93]. 3 This thesis focuses on the time to transmit messages once they are in the network. The method by which messages are sent through the network is called the routing algorithm.
Reference: [LMT89] <author> T. Leighton, F. Makedon, and I. Tollis. </author> <title> A 2n 2 step algorithm for routing in an n fi n array with constant size queues. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 328-335, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: For the n fi n mesh, Kunde [Kun88] shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis <ref> [LMT89] </ref> and Rajasekaran and Overholt [RO92] improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general 8 routing. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [Kun88, LMT89, NS92, RO92] </ref>, but those algorithms do not use minimal routes. 3.1 The Algorithm Without loss of generality, we assume that we are routing just packets that need to move either northeast or directly north to get to their destination.
Reference: [MP-87] <institution> MP-1 family data-parallel computers. </institution> <type> Technical report, </type> <institution> MasPar Computer Corporation, 749 North Mary Ave., </institution> <address> Sunnyvale, CA., </address> <year> 1987. </year>
Reference-contexts: The mesh and torus topologies have attracted much attention in multiprocessor network design because of their simplicity and their efficient use of space when physically realized. Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [Bat80], the MP-1 from MasPar <ref> [MP-87] </ref>, the Paragon from Intel Scientific, the J-machine from MIT [ND90], the Touchstone DELTA from Intel [Int91], the DASH from Stanford [LLJ + 92], and the Mosaic from Cal Tech [SBSS93]. 3 This thesis focuses on the time to transmit messages once they are in the network.
Reference: [MS92] <author> B. Maggs and R. Sitaraman. </author> <title> Simple algorithms for routing on butterfly networks with bounded queues. </title> <booktitle> In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 150-161, </pages> <month> May </month> <year> 1992. </year> <month> 76 </month>
Reference-contexts: A more realistic model would allow the node to detect the state of its neighbor and not send the packet. Maggs and Sitaraman <ref> [MS92] </ref> prove that for any nonpredictive routing algorithm on an N -node butterfly with queues of size k at each node, there exists a permutation that requires (N=(k log 2 N )) time to route. <p> Let us call an algorithm that obeys this last restriction a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredictive algorithm, given by Ranade [Ran87], Leighton [Lei92, page 556], and Maggs and Sitaraman <ref> [MS92] </ref>. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy.
Reference: [MS93] <author> F. Makedon and A. Symvonis. </author> <title> An efficient hueristic for permutation on meshes with low buffer requirements. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(3) </volume> <pages> 270-6, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Greedy hot potato routing [BDHS93], where packets use profitable outlinks whenever they are available, might be a nonminimal adaptive solution to route arbitrary permutations in time linear in n on the n fi n mesh. Makedon and Symvonis <ref> [MS93] </ref> give an algorithm that is based on odd-even transposition and behaves much like a hot potato algorithm. Their algorithm uses a small amount of buffer space and is simple.
Reference: [ND90] <author> M. Noakes and W. Dally. </author> <title> System design of the J-Machine. </title> <booktitle> In Proceedings of the 6th MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 179-194, </pages> <year> 1990. </year>
Reference-contexts: Examples of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [Bat80], the MP-1 from MasPar [MP-87], the Paragon from Intel Scientific, the J-machine from MIT <ref> [ND90] </ref>, the Touchstone DELTA from Intel [Int91], the DASH from Stanford [LLJ + 92], and the Mosaic from Cal Tech [SBSS93]. 3 This thesis focuses on the time to transmit messages once they are in the network. <p> That is, although there might be unused links in the network at a given time, oblivious algorithms are unable to alter the paths of packets to use these available links. Machines that use oblivious algorithms include the Intel Touchstone [Int91] and Paragon, the MIT J-machine <ref> [ND90] </ref>, and the Mosaic from Cal Tech [SBSS93]. Adaptive routing is an alternative to oblivious routing. In adaptive algorithms, the path a message takes from its source to its destination may depend on packets it encounters.
Reference: [NS89] <author> J. Y. Ngai and C. L. Seitz. </author> <title> A framework for adaptive routing in mul-ticomputer networks. </title> <booktitle> In Proceedings of the Symposium of Parallel Algorithms and Architectures, </booktitle> <pages> pages 1-9. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: Examples of adaptive routers include the Chaos router [BFS94, KS90, KS91] and the Ngai and Seitz router <ref> [NS89, NS91] </ref>.
Reference: [NS91] <author> J. Y. Ngai and C. L. Seitz. </author> <title> A framework for adaptive routing in multi-computer networks. </title> <journal> Computer Architecture News, </journal> <volume> 19(1) </volume> <pages> 6-14, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Examples of adaptive routers include the Chaos router [BFS94, KS90, KS91] and the Ngai and Seitz router <ref> [NS89, NS91] </ref>.
Reference: [NS92] <author> I. Newman and A. Schuster. </author> <title> Hot-potato algorithms for permutation routing. </title> <type> Technical Report PCL Report #9201, </type> <institution> CS Department, Tech-nion, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: However, like the sorting-based algorithms, their algorithms may be too specifically tailored to static permutations and synchronous networks to be practical. The desire to have simple routing algorithms with constant sized queues per node has led to the growing body of literature on hot potato (or deflection) routing <ref> [BNRST93, BC91, FR92, Haj91, KKR93, NS92] </ref>, where at each step every node in the network must send all packets it received during the previous step. In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. <p> In these algorithms, no extra queues are needed, and packets again typically take nonminimal paths. Newman and Schuster <ref> [NS92] </ref> give an algorithm that routes any permutation in 7n + o (n) steps, but the algorithm uses sorting. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [Kun88, LMT89, NS92, RO92] </ref>, but those algorithms do not use minimal routes. 3.1 The Algorithm Without loss of generality, we assume that we are routing just packets that need to move either northeast or directly north to get to their destination.
Reference: [Ran87] <author> A. Ranade. </author> <title> Equivalence of message scheduling algorithms for parallel communication. </title> <type> Technical Report YALEU/DCS/TR-511, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, CT, </address> <year> 1987. </year>
Reference-contexts: Let us call an algorithm that obeys this last restriction a destination-exchangeable routing algorithm. Note that the restriction to profitable outlinks is similar to the definition of a nonpredictive algorithm, given by Ranade <ref> [Ran87] </ref>, Leighton [Lei92, page 556], and Maggs and Sitaraman [MS92]. One example of a destination-exchangeable algorithm is the dimension order algorithm with FIFO queues and round-robin inqueue policy.
Reference: [RO92] <author> S. Rajasekaran and R. Overholt. </author> <title> Constant queue routing on a mesh. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 15(2) </volume> <pages> 160-166, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For the n fi n mesh, Kunde [Kun88] shows that such a deterministic algorithm can route every permutation in 2n + O (n=k) time using queues of size k. Using Kunde's approach, Leighton, Makedon, and Tollis [LMT89] and Rajasekaran and Overholt <ref> [RO92] </ref> improve the bound to 2n 2 steps using constant (albeit large) sized queues per node. However, these algorithms may be too complicated, and too specifically tailored to static permutations and synchronous networks to be practical for general 8 routing. <p> In the same paper, they provide a simpler O (n 3=2 ) algorithm. Because the known O (n) time routing algorithms on the mesh may not be practical, there is still considerable interest in finding practical ones. Notice that the O (n) time bounds mentioned earlier <ref> [HS90, Kun88, Lei92, LMT89, NS92, RO92] </ref> each violate either the assumption of bounded queues, or both the assumptions of minimal paths and using only preferred directions. We will see in Chapter 2 that there is no O (n) time algorithm that obeys all of these restrictions. <p> It uses the distance each packet has to travel in the vertical and horizontal dimensions to make routing decisions and is thus not destination-exchangeable. These same bounds were known for routing algorithms based on sorting <ref> [Kun88, LMT89, NS92, RO92] </ref>, but those algorithms do not use minimal routes. 3.1 The Algorithm Without loss of generality, we assume that we are routing just packets that need to move either northeast or directly north to get to their destination.
Reference: [SBSS93] <author> C. Sietz, N. Boden, J. Seizovic, and W. Su. </author> <title> The design of the Cal-tech Mosaic C multicomputer. </title> <booktitle> In Proceedings of the Symposium on Integrated Systems, </booktitle> <pages> pages 1-22, </pages> <year> 1993. </year>
Reference-contexts: of machines that use the mesh or torus topology include the MPP from Goodyear Aerospace [Bat80], the MP-1 from MasPar [MP-87], the Paragon from Intel Scientific, the J-machine from MIT [ND90], the Touchstone DELTA from Intel [Int91], the DASH from Stanford [LLJ + 92], and the Mosaic from Cal Tech <ref> [SBSS93] </ref>. 3 This thesis focuses on the time to transmit messages once they are in the network. The method by which messages are sent through the network is called the routing algorithm. <p> Machines that use oblivious algorithms include the Intel Touchstone [Int91] and Paragon, the MIT J-machine [ND90], and the Mosaic from Cal Tech <ref> [SBSS93] </ref>. Adaptive routing is an alternative to oblivious routing. In adaptive algorithms, the path a message takes from its source to its destination may depend on packets it encounters. Intuitively, adaptive routers potentially can use the available bandwidth to relieve the congestion or to route around faults.
Reference: [SWG92] <author> J. Singh, W.-D. Weber, and A. Gupta. </author> <title> SPLASH: Stanford Parallel Applications for Shared Memory. </title> <booktitle> Computer Architecture News, </booktitle> <pages> pages 5-44, </pages> <month> March </month> <year> 1992. </year> <month> 77 </month>
Reference-contexts: The permutation problem models real-time systems where the communication pattern among processors is unknown, yet performance guarantees must be satisfied. It also models problems, such as scientific problems, that have "bursty" communication behavior, where processors compute locally for some time and then simultaneously communicate with each other (see <ref> [SWG92] </ref>). An appealing feature of this metric of performance is that the traffic generated by a static permutation does not contain any "delivery hot spots," where one node is the destination of many packets. When there are delivery hot spots, performance can be limited trivially by delivery bandwidth.
Reference: [VB81] <author> L. G. Valiant and G. J. Brebner. </author> <title> Universal schemes for parallel communication. </title> <booktitle> In Conference Proceedings of the Thirteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 263-277, </pages> <address> Milwaukee, WI, </address> <month> May </month> <year> 1981. </year>
Reference-contexts: Their algorithm is a simple variant of Valiant and Brebner's randomized routing result on the hypercube <ref> [VB81] </ref>, where a packet is first sent to a random intermediate node using the dimension order algorithm, and then sent from the intermediate node to its destination.
References-found: 45

