URL: http://www.almaden.ibm.com/cs/quest/papers/de97_rj.ps
Refering-URL: http://www.almaden.ibm.com/cs/quest/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: High-dimensional Proximity Joins  
Author: Kyuseok Shim Ramakrishnan Srikant Rakesh Agrawal 
Address: 650 Harry Road, San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Abstract: Many emerging data mining applications require a proximity (similarity) join between points in a high-dimensional domain. We present a new algorithm that utilizes a new data structure, called the *-kd tree, for fast spatial proximity joins on high-dimensional points. This data structure reduces the number of neighboring leaf nodes that are considered for the join test, as well as the traversal cost of finding appropriate branches in the internal nodes. The storage cost for internal nodes is independent of the number of dimensions. Hence the proposed data structure scales to high-dimensional data. We analyze the cost of the join for the *-kd tree and the R-tree family, and show that the *-kd tree will perform better for high-dimensional joins. Empirical evaluation, using synthetic and real-life datasets, shows that proximity join using the *-kd tree is typically 2 to 40 times faster than the R + tree, with the performance gap increasing with the number of dimensions. We also discuss how some of the ideas of the *-kd tree can be applied to the R-tree family. These biased R-trees perform better than the corresponding traditional R-trees for high dimensional proximity joins, but do not match the performance of the *-kd tree.
Abstract-found: 1
Intro-found: 1
Reference: [ACF + 93] <author> Manish Arya, William Cody, Christos Faloutsos, Joel Richardson, and Arthur Toga. QBISM: </author> <title> A prototype 3-d medical image database system. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 16(1) </volume> <pages> 38-42, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases [Jag94, NBE + 93, NC91], medical databases <ref> [ACF + 93, TBS90] </ref>, and scientific databases [Vas93]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
Reference: [AFS93] <author> Rakesh Agrawal, Christos Faloutsos, and Arun Swami. </author> <title> Efficient similarity search in sequence databases. </title> <booktitle> In Proc. of the Fourth Int'l Conference on Foundations of Data Organization and Algorithms, </booktitle> <address> Chicago, </address> <month> October </month> <year> 1993. </year> <booktitle> Also in Lecture Notes in Computer Science 730, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993, </year> <pages> 69-84. </pages>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases <ref> [AFS93, ALSS95] </ref>, multimedia databases [Jag94, NBE + 93, NC91], medical databases [ACF + 93, TBS90], and scientific databases [Vas93].
Reference: [ALSS95] <author> Rakesh Agrawal, King-Ip Lin, Harpreet S. Sawhney, and Kyuseok Shim. </author> <title> Fast similarity search in the presence of noise, scaling, and translation in time-series databases. </title> <booktitle> In Proc. of the 21st Int'l Conference on Very Large Databases, </booktitle> <pages> pages 490-501, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases <ref> [AFS93, ALSS95] </ref>, multimedia databases [Jag94, NBE + 93, NC91], medical databases [ACF + 93, TBS90], and scientific databases [Vas93]. <p> For example, given all pairs of similar images, the images can be clustered into groups such that the images in each group are similar. To motivate the need for multidimensional indices in such applications, consider the problem of finding all pairs of similar time-sequences. The technique in <ref> [ALSS95] </ref> solves this problem by breaking each time-sequences into a set of contiguous subsequences, and finding all subsequences similar to each other. If two sequences have "enough" similar subsequences, they are considered similar. <p> Similar Time Sequences Consider the problem of finding similar time sequences. The algorithm proposed in <ref> [ALSS95] </ref> first finds similar "atomic" subsequences, and then stitches together the atomic subsequence matches to get similar subsequences or similar sequences. Each sequence is broken into atomic subsequences by using a sliding window of size w. The atomic subsequences are then mapped to points in a w-dimensional space. <p> The atomic subsequences are then mapped to points in a w-dimensional space. The problem of finding similar atomic subsequences now corresponds to the problem of finding pairs of w-dimensional points within * distance of each other, using the L 1 norm. (See <ref> [ALSS95] </ref> for the rationale behind this approach.) The time sequences in our experiment were the daily closing prices of 795 U.S. mutual funds, from Jan 4, 1993 to March 3, 1995. There were around 400,000 points for the experiment (since each sequence is broken using a sliding window).
Reference: [Ben75] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Communication of ACM, </journal> <volume> 18(9), </volume> <year> 1975. </year>
Reference-contexts: The main difference is that the bounding rectangles cover the entire space, unlike the MBRs of the R + tree. hB-tree [LS09] is similar to the kdB tree except that bounding rectangles of the children of an internal node are organized as a K-D tree <ref> [Ben75] </ref> rather than as a list of MBRs. (The K-D-tree is a binary tree for multi-dimensional points. In each level of the K-D-tree, only one dimension, chosen cyclically, is used to decide the subtree for traversal.) Further, the bounding regions may have rectangular holes in them.
Reference: [BKK96] <author> S. Berchtold, D.A. Kiem, and H. Kriegel. </author> <title> The x-tree: An index structure for high-dimensional data. </title> <booktitle> In Proc. of the 22nd Int'l Conference on Very Large Databases, </booktitle> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: R + tree [SRF87] imposes the constraint that no two bounding regions of a non-leaf node overlap. Thus, except for the boundary surfaces, there will be only one path to every leaf region, which can reduce search and join costs. X-tree <ref> [BKK96] </ref> avoids splits that could result in high degree of overlap of bounding regions for R fl -tree. Their experiments show that the overlap of bounding regions increases significantly for high dimensional data resulting in performance deterioration in the R fl -tree. <p> Experiments show that X-tree improves the performance of point query and nearest-neighbor query compared to R fl -tree and TV-tree (described below). No comparison with R + -tree is given in <ref> [BKK96] </ref> for point data. However, since the R + - tree does not have any overlap, and the gains for the X-tree are obtained by avoiding overlap, one would not expect the X-tree to be better than the R + -tree for point data.
Reference: [BKSS90] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: an efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: proximity join problem: * Self-join: Given a set of N high-dimensional points and a distance metric, find all pairs of points that are within * distance of each other. 1 Our experiments indicated that the R + tree was better than the R tree [Gut84] or the R fl tree <ref> [BKSS90] </ref> tree for high-dimensional proximity joins. 2 * Non-self-join: Given two sets S 1 and S 2 of high-dimensional points and a distance metric, find pairs of points, one each from S 1 and S 2 , that are within * distance of each other. <p> Figure 1 shows an example of R-tree. This tree 3 consists of 4 leaf nodes and 3 internal nodes. The MBRs are N1,N2,L1,L2,L3 and L4. The root node has two children whose MBRs are N1 and N2. R fl tree <ref> [BKSS90] </ref> added two major enhancements to R-tree. First, rather than just considering the area, the node splitting heuristic in R fl tree also minimizes the perimeter and overlap of the bounding regions.
Reference: [FL95] <author> Christos Faloutsos and King-Ip Lin. </author> <title> Fastmap: A fast algorithm for indexing, data-mining and visualization of traditional and multimedia datasets. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 163-174, </pages> <address> San Jose, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: This translates to finding all points close to a query point. Even if there is no direct mapping from an object to a point in a multi-dimensional space, this paradigm can still be used if a distance function between objects is available. An algorithm is presented in <ref> [FL95] </ref> for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see [Sam89, Gut84] for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space.
Reference: [Gut84] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 47-57, </pages> <address> Boston, Mass, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: An algorithm is presented in [FL95] for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see <ref> [Sam89, Gut84] </ref> for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space. While they work well with low dimensional data points, the time and space for these indices grow rapidly with dimensionality. <p> consider two versions of the spatial proximity join problem: * Self-join: Given a set of N high-dimensional points and a distance metric, find all pairs of points that are within * distance of each other. 1 Our experiments indicated that the R + tree was better than the R tree <ref> [Gut84] </ref> or the R fl tree [BKSS90] tree for high-dimensional proximity joins. 2 * Non-self-join: Given two sets S 1 and S 2 of high-dimensional points and a distance metric, find pairs of points, one each from S 1 and S 2 , that are within * distance of each other. <p> We also give a brief overview of other indices. We then discuss problems of the current index structures for high-dimensional proximity joins. 2.1 The R-tree family R-tree <ref> [Gut84] </ref> is a balanced tree in which each node represents a rectangular region. Each internal node in a R-tree stores a minimum bounding rectangle (MBR) for each of its children. The MBR covers the space of the points in the child node. The MBRs of siblings can overlap.
Reference: [Jag94] <author> H. V. Jagadish. </author> <title> A retrieval technique for similar shapes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 208-217, </pages> <address> Denver, </address> <month> May </month> <year> 1994. </year> <month> 27 </month>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases <ref> [Jag94, NBE + 93, NC91] </ref>, medical databases [ACF + 93, TBS90], and scientific databases [Vas93]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [LJF94] <author> King-Ip Lin, H. V. Jagadish, and Christos Faloutsos. </author> <title> The TV-Tree: An index structure for high-dimensional data. </title> <journal> VLDB Journal, </journal> <volume> 3(4) </volume> <pages> 517-542, </pages> <year> 1994. </year>
Reference-contexts: In each level of the K-D-tree, only one dimension, chosen cyclically, is used to decide the subtree for traversal.) Further, the bounding regions may have rectangular holes in them. This reduces the cost of splitting a node compared to the kdB tree. TV-tree <ref> [LJF94] </ref> uses a variable number of dimensions for indexing. TV-tree has a design parameter ff ("active dimension") which is typically a small integer (1 or 2). For any node, only ff dimensions are used to represent bounding regions and to split nodes.
Reference: [LR94] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Spatial joins using seeded trees. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 209-220, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This problem is mitigated for the hB-tree or the TV-tree. This is not a problem for the 6 grid-file. Build Time. The set of objects participating in a spatial join may often be pruned by selection predicates <ref> [LR94] </ref> (e.g. find all similar international funds). In those cases, it may be faster to perform the non-spatial selection predicate first (select international funds) and then perform spatial join on the result. Thus it is sometimes necessary to build a spatial index on-the-fly.
Reference: [LS09] <author> D. Lomet and B. Salzberg. </author> <title> The hB-tree: A multiattribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4), </volume> <year> 1909. </year>
Reference-contexts: The shaded area contains screened points. 2.2 Other Index Structures kdB tree [Rob81] is similar to the R + tree. The main difference is that the bounding rectangles cover the entire space, unlike the MBRs of the R + tree. hB-tree <ref> [LS09] </ref> is similar to the kdB tree except that bounding rectangles of the children of an internal node are organized as a K-D tree [Ben75] rather than as a list of MBRs. (The K-D-tree is a binary tree for multi-dimensional points.
Reference: [NBE + 93] <author> Wayne Niblack, Ron Barber, Will Equitz, Myron Flickner, Eduardo Glasman, Dragutin Petkovic, Peter Yanker, Christos Faloutsos, and Gabriel Taubin. </author> <title> The qbic project: Querying images by content using color, texture and shape. </title> <booktitle> In SPIE 1993 Int'l Symposium on Electronic Imaging: Science and Technology, Conference 1908, Storage and Retrieval for Image and Video Databases, </booktitle> <month> Feb </month> <year> 1993. </year> <note> Also available as IBM Reseach Report RJ 9203 (81511), </note> <month> Feb 1, </month> <year> 1993, </year> <institution> Computer Science. </institution>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases <ref> [Jag94, NBE + 93, NC91] </ref>, medical databases [ACF + 93, TBS90], and scientific databases [Vas93]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [NC91] <author> A Desai Narasimhalu and Stavros Christodoulakis. </author> <title> Multimedia information systems: the unfolding of a reality. </title> <journal> IEEE Computer, </journal> <volume> 24(10) </volume> <pages> 6-8, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases <ref> [Jag94, NBE + 93, NC91] </ref>, medical databases [ACF + 93, TBS90], and scientific databases [Vas93]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score.
Reference: [NHS84] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <year> 1984. </year>
Reference-contexts: Since the first k dimensions can no longer distinguish the points in those nodes, the next ff dimensions (after the k dimensions) are used to store bounding regions and for splitting. This reduces the storage and traversal cost for internal nodes. Grid-file <ref> [NHS84] </ref> partitions the k-dimensional space as a grid; multiple grid buckets may be placed in a single disk page. A directory structure keeps track of the mapping from grid buckets to disk pages. A grid bucket must fit within a leaf page.
Reference: [PD96] <author> Jignesh M. Patel and David J. DeWitt. </author> <title> Partition Based Spatial-Merge Join. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Thus it is sometimes necessary to build a spatial index on-the-fly. Current indices are designed to be built once; the cost of building them can be more than the cost of the join <ref> [PD96] </ref>. Skewed Data. Handling skewed data is a problem for the grid-file. In a k-dimensional space, a single data page overflow may result in a k1 dimensional slice being added to the grid-file directory.
Reference: [Rob81] <author> J. T. Robinson. </author> <title> The k-D-B-tree: A search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. of the ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, MI, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: The shaded area contains screened points. 2.2 Other Index Structures kdB tree <ref> [Rob81] </ref> is similar to the R + tree.
Reference: [Sam89] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: An algorithm is presented in [FL95] for generating a mapping from an object to a multi-dimensional point, given a set of objects and a distance function. Current spatial access methods (see <ref> [Sam89, Gut84] </ref> for an overview) have mainly concentrated on storing map information, which is a 2-dimensional or 3-dimensional space. While they work well with low dimensional data points, the time and space for these indices grow rapidly with dimensionality.
Reference: [SRF87] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + tree: a dynamic index for multidimensional objects. </title> <booktitle> In Proc. 13th Int'l Conference on Very Large Databases, </booktitle> <pages> pages 507-518, </pages> <address> Brighton, England, </address> <year> 1987. </year>
Reference-contexts: This lets the *-kd tree use the proximity distance limit * as a parameter in building the tree. Empirical evaluation shows that the build plus join time for the *-kd tree is typically 2 to 40 times less than the join time for the R + tree <ref> [SRF87] </ref>, 1 with the performance gap increasing with the number of dimensions. A pure main-memory data structure would not be very useful, since the data in many applications will not fit in memory. <p> When a node becomes full, it is not split immediately, but a portion of the node is reinserted from the top level. With these two enhancements, the R fl tree generally outperforms R-tree. R + tree <ref> [SRF87] </ref> imposes the constraint that no two bounding regions of a non-leaf node overlap. Thus, except for the boundary surfaces, there will be only one path to every leaf region, which can reduce search and join costs.
Reference: [TBS90] <author> A. W. Toga, P. K. Banerjee, and E. M. Santori. </author> <title> Warping 3d models for interbrain comparisons. </title> <address> Neurosc. Abs. 16:247, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases [Jag94, NBE + 93, NC91], medical databases <ref> [ACF + 93, TBS90] </ref>, and scientific databases [Vas93]. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
Reference: [Vas93] <author> Dimitris Vassiliadis. </author> <title> The input-state space approach to the prediction of auroral ge-omagnetic activity from solar wind variables. </title> <booktitle> In Int'l Workshop on Applications of Artificial Intelligence in Solar Terrestrial Physics, </booktitle> <month> Sept </month> <year> 1993. </year> <month> 28 </month>
Reference-contexts: 1 Introduction Many emerging data mining applications require efficient processing of proximity (similarity) joins on high-dimensional points. Examples include applications in time-series databases [AFS93, ALSS95], multimedia databases [Jag94, NBE + 93, NC91], medical databases [ACF + 93, TBS90], and scientific databases <ref> [Vas93] </ref>. Some typical queries in these applications include: (1) discover all stocks with similar price movements; (2) find all pairs of similar images; (3) retrieve music scores similar to a target music score. These queries are often a prelude to clustering the objects.
References-found: 21

