URL: http://www.cs.unm.edu/~kapur/abstracts/hol.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/hol.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  
Title: Rewriting, Decision Procedures and Lemma Speculation for Automated Hardware Verification  
Author: Deepak Kapur 
Note: Preliminary Version  
Address: New York Albany, NY 12222.  
Affiliation: Institute for Programming and Logics State University of  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> R.S. Boyer and J. Moore, </author> <title> A Computational Logic Handbook. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: (x; y) x)) Assume that among other rules, the following rewrite rules for max; f; g; p are already in the data base. 1: min (x; y) ! y if max (x; y) = x; 2: f (x) g (x) ! true if p (x): 1 Boyer and Moore's prover <ref> [1] </ref> may also be able to prove this conjecture without any user guidance. In RRL, the conjecture is negated and Skolemized to give: p (A) ^ (A max (A; B)) ^ (L f (max (A; B))) ^ (0 &lt; min (A; B))^ This goal must be shown to be unsatisfiable. <p> This requires integrating decision procedures with rewriting mechanisms as supported in <ref> [1, 13] </ref>. Decision procedures can also be used for determining appropriate induction schemes, ranking them based on analyses of different induction schemes, analyzing possible failure of induction schemes as well as speculating intermediate lemmas.
Reference: 2. <author> R.E. Bryant, </author> <title> "Graph-based algorithms for boolean function manipulation," </title> <journal> IEEE trans. on Computers, </journal> <volume> C-35(8), </volume> <year> 1986. </year>
Reference-contexts: The correctness is demonstrated with respect to the circuits realizing the respective number theoretic functions, and not defining boolean functions as is typically done using OBDD based methods <ref> [2] </ref>. Proofs are done by induction, without making any assumption about the length of the bit vectors on which a circuit operates. 3.1 Adders As illustrated in [10], the ripple-carry adder can be verified automatically using RRL without any user guidance at all. <p> We are planning to implement in RRL decision procedures for other frequently used data structures including finite arrays, bit vectors, finite sets and finite lists. Since for large circuits with complex control, OBDD based methods have been found to be more effective <ref> [2, 4] </ref> than traditional theorem proving methods for propositional reasoning and word-level reasoning, it might also be necessary to integrate an OBDD method and word-level reasoning with rewriting.
Reference: 3. <author> R. E. Bryant, and Y.-A. Chen, </author> <title> "Verification of arithmetic functions with binary moment diagrams," </title> <type> Tech. Rep. </type> <institution> CMU-CS-94-160, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: All intermediate lemmas needed in the proofs are generated using this heuristic and other heuristics in RRL. This heuristic is discussed in more detail in a later section. Multiplier circuits, in contrast, cannot be handled easily by OBDD based approaches because of the state explosion problem; see however <ref> [3] </ref> where OB-DDs are generalized as binary moment diagrams for multiplier circuits.
Reference: 4. <author> J. R. Burch, E.M. Clarke, K. L. Mcmillan and D.L. Dill, </author> <title> "Sequential circuit verification using symbolic model checking," </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conference, </booktitle> <year> 1990. </year>
Reference-contexts: We are planning to implement in RRL decision procedures for other frequently used data structures including finite arrays, bit vectors, finite sets and finite lists. Since for large circuits with complex control, OBDD based methods have been found to be more effective <ref> [2, 4] </ref> than traditional theorem proving methods for propositional reasoning and word-level reasoning, it might also be necessary to integrate an OBDD method and word-level reasoning with rewriting.
Reference: 5. <author> E.M. Clarke, S.M. German and X. Zhao, </author> <title> "Verifying the SRT division algorithm using theorem proving techniques," </title> <booktitle> Proc. Computer Aided Verification, 8th Intl. Conf. </booktitle> - <address> CAV'96, New Brunswick, July/August 1996, </address> <publisher> Springer LNCS 1102 (eds. Alur and Henzinger), </publisher> <pages> 111-122. </pages>
Reference-contexts: Such a lemma speculation heuristic is likely to be more widely applicable on a large class of circuits with regular structure [11]. Finally, it is shown that the invariant properties of an SRT division circuit described by Clarke, German and Zhao <ref> [5] </ref> can also be established automatically by RRL using its linear arithmetic procedure, rewriting and case analysis mechanisms [12]. This shows that verification of such a circuit does not need sophisticated capabilities of computer algebra systems such as Maple and Math-ematica. <p> reviewed: particularly, (a) contextual rewriting that combines congruence closure on ground terms with conditional rewriting, (b) the integration of a linear arithmetic procedure with rewriting, and (c) a lemma speculation heuristic. 2 SRT Division Recently, Kapur and Subramaniam used RRL to mechanically verify an SRT division circuit as discussed in <ref> [5] </ref>. It is generally believed that a circuit similar to this one in the Pentium chip had a bug in its table. Below, a summary of the verification of the SRT division circuit description, highlighting the main ideas, is given. A more detailed report will be available soon [12]. <p> The function nqd uses a table for determining the next digit. From the circuit description and the Analytica/Mathematica input given in <ref> [5] </ref>, we derived an equational specification of the SRT division. Since rational numbers are not supported in RRL, all specifications are written using integers. <p> * xqt - nqd (xrt1, xd1, xw, 1) if nqsign (xrt1, xd1) nquot (xqt, xrt1, xd1, xw) := 4 * xqt + nqd (xrt1, xd1, xw, 0) if not (nqsign (xrt1, xd1)) The formalization of the subcircuit guessing the quotient digit and the sign is based on the description in <ref> [5] </ref>, using functions getbi' to implement the boundary value list fb 1 ; b 2 ; b 3 ; b 4 ; b 5 ; b 6 g given in [5]. <p> (xrt1, xd1)) The formalization of the subcircuit guessing the quotient digit and the sign is based on the description in <ref> [5] </ref>, using functions getbi' to implement the boundary value list fb 1 ; b 2 ; b 3 ; b 4 ; b 5 ; b 6 g given in [5]. <p> (x &lt; getb3 (y))) table_lookup (x, y, 1, 0) := ((getb4 (y) &lt;= x) and (x &lt; getb5 (y))) table_lookup (x, y, 0, 1) := false table_lookup (x, y, 0, 0) := (x &lt; getb4 (y)) The correctness of the circuit is established by proving the invariants as discussed in <ref> [5] </ref>. The first invariant expressing that during each iteration, the quotient and remainder are correct, can be automatically verified. <p> The whole proof is done easily and automatically using the contextual rewriting integrated with the linear arithmetic procedure in RRL. No additional mechanism is found necessary. No extensions had to be made to RRL. This is in contrast to a proof attempt using Analytica <ref> [5] </ref> built on top of Mathematica, a powerful computer algebra system, as well as a proof attempt on PVS which supports higher-order specifications, module facility, a special data type table as well as the linear arithmetic procedure [15].
Reference: 6. <author> D. Kapur, </author> <title> "Shostak's congruence closure as completion," </title> <booktitle> Proc. Intl. Conf. on Rewriting Techniques and Applications (RTA-97), </booktitle> <address> Barcelona, Spain, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: Theoretical issues related to the development of decision procedures and their interaction with rewriting are under investigation <ref> [6] </ref>. 5 Intermediate Lemma Speculation Based on our experience in verifying arithmetic circuits, we have been developing a heuristic for speculating intermediate lemmas as guided by the circuit structure and the behavioral specification of different components in the circuit. A naive version of this heuristic has been implemented in RRL.
Reference: 7. <author> D. Kapur and X. Nie, </author> <title> "Reasoning about numbers in Tecton," </title> <booktitle> Proc. 8th Intl. Symp. Methodologies for Intelligent Systems, </booktitle> <address> (ISMIS'94), Charlotte, North Carolina, </address> <month> Oc-tober </month> <year> 1994, </year> <pages> 57-70. </pages>
Reference-contexts: 1 Introduction The use of a rewrite-based, induction theorem prover, Rewrite Rule Laboratory (RRL) [13] is discussed for verifying arithmetic circuits at the gate level. It is shown that the induction scheme generation heuristic in RRL based on the cover set method [18], the integration of decision procedures <ref> [7] </ref> with contextual rewriting [17], and the intermediate lemma speculation heuristics can help, with minimal user guidance, in finding verification proofs of arithmetic circuits RRL has been used to verify that the ripple-carry, carry-save, and the more sophisticated carry-lookahead adders perform addition on numbers represented by bit vectors of any length <p> Currently, RRL supports decision procedures for (i) equality on ground terms using completion/rewriting, (ii) propositional reasoning, (iii) bits, (iv) freely generated data structures as canonical rewrite rules, as well as a linear arithmetic procedure over integers and naturals <ref> [7] </ref>. A distinguishing feature of these decision procedures is that if a formula cannot be found unsatisfiable, then equalities are generated as consequences to be used as rewrite rules for simplification. As illustrated below, these decision procedures are tightly integrated with rewriting.
Reference: 8. <author> D. Kapur and M. Subramaniam, </author> <title> "New uses of linear arithmetic in automated theorem proving for induction," </title> <editor> J. </editor> <booktitle> Automated Reasoning, </booktitle> <pages> 16(1-2), </pages> <year> 1996, </year> <pages> 39-78. </pages>
Reference-contexts: Decision procedures can also be used for determining appropriate induction schemes, ranking them based on analyses of different induction schemes, analyzing possible failure of induction schemes as well as speculating intermediate lemmas. Some of such new uses of decision procedures are discussed in <ref> [8] </ref>. 7 Concluding Remarks Based on our limited experience, it appears that a theorem prover such as RRL can be effectively used for verifying properties of (at least, simple) arithmetic circuits. The theorem prover has worked essentially in the push-button mode. <p> At the time of the submission of this extended abstract, Subu was unavailable to approve it, that is why his name does not appear as a coauthor. I apologize for not citing the related work. Some of the relevant citations can be found in <ref> [10, 9, 13, 8] </ref>.
Reference: 9. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanically verifying a family of multiplier circuits," </title> <booktitle> Proc. Computer Aided Verification (CAV'96), </booktitle> <address> New Jersey, </address> <publisher> Springer LNCS 1102 (eds. </publisher> <editor> Alur and Henzinger), </editor> <year> 1996, </year> <pages> 135-146. </pages>
Reference-contexts: The verification of multiplier circuits is established generically and parametrically in RRL. It is shown that a family of multiplier circuits including the linear multiplier, Wallace multiplier, 7-3 multiplier as well as Dadda multiplier can all be done in the same way <ref> [9] </ref>. Intermediate lemmas, needed for verifying that the multipliers perform multiplication on numbers represented by bit vectors of any length, can be mechanically generated from the circuit structure, repetitive use of carry-save adders and the fact that bit vectors represent numbers. <p> For a detailed discussion, see [10]. Adders Definitions Lemmas Time (secs.) RCP-CLA (numbers) 15 2 14.00 RCL-RCP (numbers) 23 3 17.73 RCL-RCP (bits) 21 3 14.40 RCL (numbers) 11 0 10.25 RCL (bits) 9 0 7.75 3.2 Multipliers In <ref> [9] </ref>, a methodology for mechanically verifying a family of multiplier circuits, including the linear array, the Wallace tree and the 7-3 multiplier is discussed. A top level specification for these multipliers is obtained by abstracting the commonality in their behavior. <p> The computation of partial sums is done in the same manner in these circuits, and these circuits differ only in the addition of partial sums. A common top level specification for the family of multiplier circuits based on this observation is developed in <ref> [9] </ref>. A linear array multiplier performs the multiplication of two n bit vectors in linear time by successively adding the partial sums one by one. A Wallace multiplier, in contrast, does partial sum addition of n n-bit vectors in logarithmic time by considering three partial sums for addition together. <p> For each multiplier circuit, only two definitions specific to the circuit are needed. Multiplier Common Common Specific Specific Time Circuits Definitions Lemmas Definitions Lemmas (secs) Linear Array 2 0 2.5 Wallace Tree 12 0 2 0 2.5 7-3 2 0 6.25 In <ref> [9] </ref>, it is reported that the generic proof required 5 intermediate lemmas. Subsequently, we have developed a heuristic for speculating intermediate lemmas based on circuit structure and the fact that bit vectors represent numbers. This heuristic was implemented in RRL. <p> No intermediate lemmas have to be supplied by the user; in that sense, RRL can be run in the pushbutton mode. Without this heuristic, the verification of the Wallace multiplier needed 5 intermediate lemmas from the user <ref> [9] </ref>. Below, we illustrate some of the main ideas of this new heuristic using the Wallace multiplier circuit below in Figure 1. A paper giving all the details is under preparation [11]. The Wallace multiplier circuit can be decomposed into four subcircuits. <p> A paper giving all the details is under preparation [11]. The Wallace multiplier circuit can be decomposed into four subcircuits. A detailed specification of Wallace multiplier circuit and its verification are discussed in <ref> [9] </ref>. 1. circuit doing partial sum computation, Psum-All, 2. carry-save adder circuit, CSA, for performing addition, which takes three bit vectors as input, and outputs two bit vectors, 3. replication of the carry-save adders to add n bit vectors, considering them three at a time (relating 3-at-a-time-addrepeat to 3-at-a-time-addonce), and 4. <p> At the time of the submission of this extended abstract, Subu was unavailable to approve it, that is why his name does not appear as a coauthor. I apologize for not citing the related work. Some of the relevant citations can be found in <ref> [10, 9, 13, 8] </ref>.
Reference: 10. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanical verification of adder circuits using powerlists," </title> <institution> Dept. of Computer Science Tech. </institution> <type> Report, </type> <institution> SUNY Albany, </institution> <month> November </month> <year> 1995. </year> <note> Accepted for publication in J. of Formal Methods in System Design. </note>
Reference-contexts: with contextual rewriting [17], and the intermediate lemma speculation heuristics can help, with minimal user guidance, in finding verification proofs of arithmetic circuits RRL has been used to verify that the ripple-carry, carry-save, and the more sophisticated carry-lookahead adders perform addition on numbers represented by bit vectors of any length <ref> [10] </ref>. While doing a proof of the carry-lookahead adder, the parallel-prefix operator, commonly used in data-parallel algorithms, is equationally axiomatized. The verification of multiplier circuits is established generically and parametrically in RRL. <p> Proofs are done by induction, without making any assumption about the length of the bit vectors on which a circuit operates. 3.1 Adders As illustrated in <ref> [10] </ref>, the ripple-carry adder can be verified automatically using RRL without any user guidance at all. Attempting a correctness proof of carry-lookahead adder was, however, a challenge. It is unclear whether an automatic proof can be carried out directly. <p> RCL stands for the ripple-carry circuit description using linear lists. Proofs in which 0 and 1 are represented as bits in contrast to natural numbers can be found slightly faster. For a detailed discussion, see <ref> [10] </ref>. <p> At the time of the submission of this extended abstract, Subu was unavailable to approve it, that is why his name does not appear as a coauthor. I apologize for not citing the related work. Some of the relevant citations can be found in <ref> [10, 9, 13, 8] </ref>.
Reference: 11. <author> D. Kapur and M. Subramaniam, </author> <title> "Intermediate lemma generation from circuit descriptions," under preparation, </title> <institution> State University of New York, Albany, </institution> <address> NY, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Such a lemma speculation heuristic is likely to be more widely applicable on a large class of circuits with regular structure <ref> [11] </ref>. Finally, it is shown that the invariant properties of an SRT division circuit described by Clarke, German and Zhao [5] can also be established automatically by RRL using its linear arithmetic procedure, rewriting and case analysis mechanisms [12]. <p> Without this heuristic, the verification of the Wallace multiplier needed 5 intermediate lemmas from the user [9]. Below, we illustrate some of the main ideas of this new heuristic using the Wallace multiplier circuit below in Figure 1. A paper giving all the details is under preparation <ref> [11] </ref>. The Wallace multiplier circuit can be decomposed into four subcircuits.
Reference: 12. <author> D. Kapur and M. Subramaniam, </author> <title> "An automatic proof of properties of an SRT division circuit," under preparation, </title> <institution> State University of New York, Albany, </institution> <address> NY, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Finally, it is shown that the invariant properties of an SRT division circuit described by Clarke, German and Zhao [5] can also be established automatically by RRL using its linear arithmetic procedure, rewriting and case analysis mechanisms <ref> [12] </ref>. This shows that verification of such a circuit does not need sophisticated capabilities of computer algebra systems such as Maple and Math-ematica. This proof, in fact, turned out to be straightforward, and considerably simpler than proofs for multiplier and adder circuits. <p> It is generally believed that a circuit similar to this one in the Pentium chip had a bug in its table. Below, a summary of the verification of the SRT division circuit description, highlighting the main ideas, is given. A more detailed report will be available soon <ref> [12] </ref>. The SRT division circuit implements an algorithm due to Sweeney, Robertson and Tocher, essentially mimicking the third grade division algorithm with at least two major differences: 1. Quotient digit is approximately computed by considering only a first few digits in the divisor and dividend, which makes the computation faster.
Reference: 13. <author> D. Kapur, and H. Zhang, </author> <title> "An overview of Rewrite Rule Laboratory (RRL)," </title> <journal> J. of Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <year> 1995, </year> <pages> 91-114. </pages>
Reference-contexts: 1 Introduction The use of a rewrite-based, induction theorem prover, Rewrite Rule Laboratory (RRL) <ref> [13] </ref> is discussed for verifying arithmetic circuits at the gate level. <p> This requires integrating decision procedures with rewriting mechanisms as supported in <ref> [1, 13] </ref>. Decision procedures can also be used for determining appropriate induction schemes, ranking them based on analyses of different induction schemes, analyzing possible failure of induction schemes as well as speculating intermediate lemmas. <p> At the time of the submission of this extended abstract, Subu was unavailable to approve it, that is why his name does not appear as a coauthor. I apologize for not citing the related work. Some of the relevant citations can be found in <ref> [10, 9, 13, 8] </ref>.
Reference: 14. <author> G. Nelson, </author> <title> and D.C. Oppen, "Simplification by cooperating decision procedures," </title> <booktitle> ACM Tran. on Programming Languages and Systems 1 (2), </booktitle> <year> 1979, </year> <pages> 245-257. </pages>
Reference-contexts: are expressed using two homomorphisms: bton relating a bit vector to the number it represents, and btonlist, relating a list of bit vectors to the number the list represents. 6 New Uses of Decision Procedures The view taken towards the role of decision procedures in both Nelson and Op-pen's approach <ref> [14] </ref> as well as Shostak's approach [16] is that of determining whether a formula is valid or not. For combining decision procedures, Nelson and Oppen required that each decision procedure be able to report equalities among constants which are used for communication among decision procedures.
Reference: 15. <author> H. Ruess, N. Shankar and M.K. Srivas, </author> <title> "Modular verification of SRT division," </title> <booktitle> Proc. Computer Aided Verification, 8th Intl. Conf. </booktitle> - <address> CAV'96, New Brunswick, July/August 1996, </address> <publisher> Springer LNCS 1102 (eds. Alur and Henzinger), </publisher> <pages> 123-134. </pages>
Reference-contexts: This is in contrast to a proof attempt using Analytica [5] built on top of Mathematica, a powerful computer algebra system, as well as a proof attempt on PVS which supports higher-order specifications, module facility, a special data type table as well as the linear arithmetic procedure <ref> [15] </ref>. Even the total execution time taken by RRL to do these proofs seems to be much less than the time taken to do such proofs on Analytica and PVS, because of the tight integration of rewriting with the linear arithmetic procedure in RRL.
Reference: 16. <author> R.E. Shostak, </author> <title> "Deciding combination of theories," </title> <journal> Journal of ACM 31 (1), </journal> <year> 1984, </year> <pages> 1-12. </pages>
Reference-contexts: relating a bit vector to the number it represents, and btonlist, relating a list of bit vectors to the number the list represents. 6 New Uses of Decision Procedures The view taken towards the role of decision procedures in both Nelson and Op-pen's approach [14] as well as Shostak's approach <ref> [16] </ref> is that of determining whether a formula is valid or not. For combining decision procedures, Nelson and Oppen required that each decision procedure be able to report equalities among constants which are used for communication among decision procedures.
Reference: 17. <author> H. Zhang, </author> <title> "Implementing contextual rewriting," </title> <booktitle> Proc. 3rd Intl. Workshop on Conditional Term Rewriting Systems, </booktitle> <publisher> Springer LNCS 656, </publisher> <editor> (eds. Remy and Rusinow-itch), </editor> <year> 1992, </year> <pages> 363-377. </pages>
Reference-contexts: It is shown that the induction scheme generation heuristic in RRL based on the cover set method [18], the integration of decision procedures [7] with contextual rewriting <ref> [17] </ref>, and the intermediate lemma speculation heuristics can help, with minimal user guidance, in finding verification proofs of arithmetic circuits RRL has been used to verify that the ripple-carry, carry-save, and the more sophisticated carry-lookahead adders perform addition on numbers represented by bit vectors of any length [10].
Reference: 18. <author> H. Zhang, D. Kapur, </author> <title> and M.S. Krishnamoorthy, "A mechanizable induction principle for equational specifications," </title> <booktitle> Proc. 9th Intl. Conf. Automated Deduction (CADE), </booktitle> <publisher> Springer LNCS 310, </publisher> <editor> (eds. Lusk and Overbeek), </editor> <address> Chicago, </address> <year> 1988, </year> <pages> 250-265. </pages>
Reference-contexts: 1 Introduction The use of a rewrite-based, induction theorem prover, Rewrite Rule Laboratory (RRL) [13] is discussed for verifying arithmetic circuits at the gate level. It is shown that the induction scheme generation heuristic in RRL based on the cover set method <ref> [18] </ref>, the integration of decision procedures [7] with contextual rewriting [17], and the intermediate lemma speculation heuristics can help, with minimal user guidance, in finding verification proofs of arithmetic circuits RRL has been used to verify that the ripple-carry, carry-save, and the more sophisticated carry-lookahead adders perform addition on numbers represented
References-found: 18

