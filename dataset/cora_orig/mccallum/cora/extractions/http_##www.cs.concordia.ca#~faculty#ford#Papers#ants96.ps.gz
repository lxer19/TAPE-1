URL: http://www.cs.concordia.ca/~faculty/ford/Papers/ants96.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/ford/
Root-URL: http://www.cs.concordia.ca
Title: A new algorithm and refined bounds for extended gcd computation  
Author: David Ford and George Havas and 
Address: Montreal, Quebec, Canada H3G 1M8  4072, Australia  
Affiliation: Department of Computer Science, Concordia University,  Department of Computer Science, The University of Queensland, Queensland  
Abstract: Extended gcd computation is interesting itself. It also plays a fundamental role in other calculations. We present a new algorithm for solving the extended gcd problem. This algorithm has a particularly simple description and is practical. It also provides refined bounds on the size of the multipliers obtained. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> W.A. Blankinship. </author> <title> A new version of the Euclidean algorithm. </title> <journal> Amer. Math. Mon., </journal> <volume> 70 </volume> <pages> 742-745, </pages> <year> 1963. </year>
Reference-contexts: Furthermore, it has important applications in its extended form where corresponding multipliers are required, for example in computing canonical normal forms of integer matrices ([3, 4, 7]). Some earlier algorithms for computing the greatest common divisor of more than two numbers include those of <ref> [1, 2, 7, 14] </ref>. More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available [5, 9].
Reference: 2. <author> G.H. Bradley. </author> <title> Algorithm and bound for the greatest common divisor of n integers. </title> <journal> Commun. ACM, </journal> <volume> 13 </volume> <pages> 433-436, </pages> <year> 1970. </year>
Reference-contexts: Furthermore, it has important applications in its extended form where corresponding multipliers are required, for example in computing canonical normal forms of integer matrices ([3, 4, 7]). Some earlier algorithms for computing the greatest common divisor of more than two numbers include those of <ref> [1, 2, 7, 14] </ref>. More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available [5, 9].
Reference: 3. <author> G. Havas and B.S. Majewski. </author> <title> Integer matrix diagonalization. </title> <journal> J. Symbolic Comput., </journal> <note> to appear. </note>
Reference: 4. <author> G. Havas and B.S. Majewski. </author> <title> Hermite normal form computation for integer matrices. </title> <journal> Congressus Numerantium, </journal> <volume> 105 </volume> <pages> 184-193, </pages> <year> 1994. </year>
Reference: 5. <author> G. Havas and B.S. Majewski. </author> <title> A hard problem which is almost always easy. </title> <booktitle> In Algorithms and Computation, Lecture Notes in Computer Science 1004, </booktitle> <pages> 216-223, </pages> <year> 1995. </year>
Reference-contexts: More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available <ref> [5, 9] </ref>. <p> how many of them do we need to take to obtain the gcd of all of them? how can we efficiently find `good' multipliers in an extended gcd computation? how quickly can we obtain the result? On the other hand we have a selection of theoretical [9] and practical algorithms <ref> [5, 6, 10, 11] </ref> which have been analysed and used in various applications. We present a new algorithm with a particularly simple description. The algorithm is readily implemented. It also provides refined bounds on the size of the multipliers obtained.
Reference: 6. <author> G. Havas, B.S. Majewski and K.R. Matthews. </author> <title> Extended gcd algorithms. </title> <type> Technical Report TR0302, </type> <institution> The University of Queensland, Brisbane, </institution> <year> 1994. </year>
Reference-contexts: how many of them do we need to take to obtain the gcd of all of them? how can we efficiently find `good' multipliers in an extended gcd computation? how quickly can we obtain the result? On the other hand we have a selection of theoretical [9] and practical algorithms <ref> [5, 6, 10, 11] </ref> which have been analysed and used in various applications. We present a new algorithm with a particularly simple description. The algorithm is readily implemented. It also provides refined bounds on the size of the multipliers obtained. <p> We also point out that this bound is not worse than about the square of the best possible bound for distinct numbers, since it is shown in <ref> [6] </ref> that a general lower bound for the Euclidean norm of the multiplier vector in terms of the initial numbers a i must be at least O ( p maxfa i g). Furthermore we also provide bounds for the size of entries in the basis for the associated null space.
Reference: 7. <author> C.S. Iliopoulos. </author> <title> Worst case complexity bounds on algorithms for computing the canonical structure of finite abelian groups and the Hermite and Smith normal forms of an integer matrix. </title> <journal> SIAM J. Computing, </journal> <volume> 18 </volume> <pages> 658-669, </pages> <year> 1989. </year>
Reference-contexts: Furthermore, it has important applications in its extended form where corresponding multipliers are required, for example in computing canonical normal forms of integer matrices ([3, 4, 7]). Some earlier algorithms for computing the greatest common divisor of more than two numbers include those of <ref> [1, 2, 7, 14] </ref>. More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available [5, 9].
Reference: 8. <author> D.E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. 2: </volume> <booktitle> Seminumerical Algorithms. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., 2nd edition, </address> <year> 1973. </year>
Reference-contexts: 1 Introduction The gcd problem for more than two numbers is interesting in its own right (see, for example, the research level problem in <ref> [8] </ref>). Furthermore, it has important applications in its extended form where corresponding multipliers are required, for example in computing canonical normal forms of integer matrices ([3, 4, 7]). Some earlier algorithms for computing the greatest common divisor of more than two numbers include those of [1, 2, 7, 14].
Reference: 9. <author> B.S. Majewski and G. Havas. </author> <title> The complexity of greatest common divisor computations. In Algorithmic Number Theory, </title> <booktitle> Lecture Notes in Computer Science 877, </booktitle> <pages> 184-193, </pages> <year> 1994. </year>
Reference-contexts: More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available <ref> [5, 9] </ref>. <p> a multiset of numbers, how many of them do we need to take to obtain the gcd of all of them? how can we efficiently find `good' multipliers in an extended gcd computation? how quickly can we obtain the result? On the other hand we have a selection of theoretical <ref> [9] </ref> and practical algorithms [5, 6, 10, 11] which have been analysed and used in various applications. We present a new algorithm with a particularly simple description. The algorithm is readily implemented. It also provides refined bounds on the size of the multipliers obtained. <p> Thus, given a column vector A we wish to find a row vector X such that XA = gcd i (a i ). The difficulty arises in finding "good" vectors X. In particular we have the following result <ref> [9] </ref>: finding an optimal solution X with respect to either the L 0 metric or the L 1 norm is NP-hard. (The L 0 metric measures sparsity while the L 1 norm is the max norm.) 2 The new algorithm The new algorithm arises from a study of the gcd-tree method <p> an optimal solution X with respect to either the L 0 metric or the L 1 norm is NP-hard. (The L 0 metric measures sparsity while the L 1 norm is the max norm.) 2 The new algorithm The new algorithm arises from a study of the gcd-tree method in <ref> [9] </ref>. Basically we construct a matrix P which has a solution to the extended gcd problem for A as its first row and a basis for the null space of A as its remaining rows. <p> Next, extend this to the 3 fi 3 matrix comprising the rightmost entries of the top and the bottom two rows, and so on. 3 Analysis A general upper bound on the size of the multipliers (with respect to the max norm) is given by a theorem in <ref> [9] </ref>. Theorem 1. There is an optimal time, optimal space algorithm for computing the extended gcd of n integers fa 1 ; : : : ; a n g, which guarantees that no multiplier is larger than the largest of the numbers divided by 2.
Reference: 10. <author> B.S. Majewski and G. Havas. </author> <title> A solution to the extended gcd problem. </title> <booktitle> In ISSAC'95 (Proc. 1995 Internat. Sympos. Symbolic Algebraic Comput.), </booktitle> <publisher> ACM Press, </publisher> <address> New York, 248-253, </address> <year> 1995. </year>
Reference-contexts: how many of them do we need to take to obtain the gcd of all of them? how can we efficiently find `good' multipliers in an extended gcd computation? how quickly can we obtain the result? On the other hand we have a selection of theoretical [9] and practical algorithms <ref> [5, 6, 10, 11] </ref> which have been analysed and used in various applications. We present a new algorithm with a particularly simple description. The algorithm is readily implemented. It also provides refined bounds on the size of the multipliers obtained.
Reference: 11. <author> B.S. Majewski and G. Havas. </author> <title> Extended gcd calculation. </title> <journal> Congressus Numerantium, </journal> <volume> 111 </volume> <pages> 104-114, </pages> <year> 1995. </year>
Reference-contexts: how many of them do we need to take to obtain the gcd of all of them? how can we efficiently find `good' multipliers in an extended gcd computation? how quickly can we obtain the result? On the other hand we have a selection of theoretical [9] and practical algorithms <ref> [5, 6, 10, 11] </ref> which have been analysed and used in various applications. We present a new algorithm with a particularly simple description. The algorithm is readily implemented. It also provides refined bounds on the size of the multipliers obtained.
Reference: 12. <author> M-H. Mathieu and D. Ford. </author> <title> On p-adic Computation of the Rational Form of a Matrix, </title> <journal> J. Symbolic Comput., </journal> <volume> 10 </volume> <pages> 453-464, </pages> <year> 1990. </year>
Reference-contexts: The problem is that the values a 1 =g; : : : ; a n =g must appear in T 1 , and so the maximum size of the entries of A can double at each step. The p-adic method of <ref> [12] </ref> avoids this difficulty, as does the exact method of Ozello [13]. The Ozello algorithm relies on the computation of dependence relations among integer vectors, and hence might be subject to improvement by application of our extended gcd algorithm. This possibility remains to be investigated.
Reference: 13. <author> P. Ozello. </author> <title> Calcul Exact des formes de Jordan et de Frobenius d'une Matrice. </title> <type> Doc--toral Thesis, </type> <institution> University of Grenoble, </institution> <year> 1987. </year>
Reference-contexts: The p-adic method of [12] avoids this difficulty, as does the exact method of Ozello <ref> [13] </ref>. The Ozello algorithm relies on the computation of dependence relations among integer vectors, and hence might be subject to improvement by application of our extended gcd algorithm. This possibility remains to be investigated.
Reference: 14. <author> M.S. Waterman. </author> <title> Multidimensional greatest common divisor and Lehmer algorithms. </title> <journal> BIT, </journal> <volume> 17 </volume> <pages> 465-478, </pages> <year> 1977. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Furthermore, it has important applications in its extended form where corresponding multipliers are required, for example in computing canonical normal forms of integer matrices ([3, 4, 7]). Some earlier algorithms for computing the greatest common divisor of more than two numbers include those of <ref> [1, 2, 7, 14] </ref>. More recent algorithms and analyses provide a much better understanding of the area. On the one hand we have complexity results which show that there are a number of problems for which efficient solutions are not always readily available [5, 9].
References-found: 14

