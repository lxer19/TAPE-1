URL: http://www.cs.virginia.edu/~gjf2a/research/papers/senet.ps
Refering-URL: http://www.ai.univie.ac.at/~juffi/lig/lig-bib.html
Root-URL: 
Email: fferrer, marting@virginia.edu  
Title: Using Genetic Programming to Evolve Board Evaluation Functions  
Author: Gabriel J. Ferrer and W. N. Martin Thornton Hall 
Address: Charlottesville, Virginia 22903  
Affiliation: Department of Computer Science  University of Virginia  
Abstract: In this paper, we employ the genetic programming paradigm to enable a computer to learn to play strategies for the ancient Egyptian boardgame Senet by evolving board evaluation functions. Formulating the problem in terms of board evaluation functions made it feasible to evaluate the fitness of game playing strategies by using tournament-style fitness evaluation. The game has elements of both strategy and chance. Our approach learns strategies which enable the computer to play consistently at a reasonably skillful level. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Peter J. Angeline and Jordan B. Pollack. </author> <title> Competitive environments evolve better solutions for complex tasks. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 264-270, </pages> <year> 1993. </year>
Reference-contexts: A population of individuals is evolved in the following manner. A competition scheme modeled on a sports tournament is used to determine fitness, similar to that used for the game of tic-tac-toe by Angeline and Pollack <ref> [1] </ref>. The individuals in the population are paired off arbitrarily and then play three games against each other. The individual who wins two games is declared the winner and progresses to the next round of the tournament. The losers at each level all have the same fitness. <p> But how do we know that the overall winner, that is, the tournament winner in the last generation, has any objective value whatsoever? Unlike previous efforts to implement computer game players (such as <ref> [1] </ref> [7] [8]), Senet is not a well-understood game. There is no literature describing good Senet strategy, not even from the ancient Egyptians. We have nevertheless attempted to develop and use a series of baseline players.
Reference: [2] <author> J. E. Baker. </author> <title> Reducing bias and inefficiency in the selection algorithm. </title> <booktitle> In Proceedings of an International Conference on Genetic Algorithms and Their Applications, </booktitle> <year> 1985. </year>
Reference-contexts: The tournament approach is well suited for use with a board evaluation function representation for the players. Se- lection for both reproduction and crossover is done in a rank-proportionate manner <ref> [2] </ref>. One-eighth of the new population is reproduced from the original population at each new generation, with the remainder of the new population being generated via crossover.
Reference: [3] <author> John E. Freund and Ronald E. Walpole. </author> <title> Mathematical Statistics. </title> <publisher> Prentice Hall, </publisher> <year> 1980. </year>
Reference-contexts: In order to quantify the performance of the evolved individuals against the baseline players, we used a statistical confidence interval method <ref> [3] </ref> to enable us to state with 95% certainty how frequently an evolved individual will win against a particular baseline strategy, with a margin of error of plus or minus 5%.
Reference: [4] <author> J. Grefenstette. </author> <title> Incorporating problem specific knowledge into genetic algorithms. </title> <editor> In L. Davis, editor, </editor> <booktitle> Genetic Algorithms and Simulated Annealing, </booktitle> <year> 1987. </year>
Reference-contexts: Overall, though, they consistently match or exceed the performance of the handcrafted baseline players. We wanted to see how population seeding would work in the context of genetic programming, since it has been used successfully before with more standard genetic algorithms <ref> [4] </ref>. Our expectation was that incorporating some of our knowledge about the game would likely improve the results of the search process, as the baseline individuals provide promising directions for where the search might proceed.
Reference: [5] <author> Timothy Kendall. </author> <title> Passing Through the Netherworld. Kirk Game Company, 1978. Fig. 2: Evolved Players vs. Handcrafted Heuristics </title>
Reference-contexts: Murals depicting Senet games in progress were common decorations on the walls of the tombs as well. Its position in ancient Egyptian culture was akin to the position of chess in our culture, the timeless game of strategy. <ref> [5] </ref> Unlike chess, checkers, and similar games with perfect knowledge, but like backgammon, the play of Senet involves both strategic planning and thought as well as an element of probability that controls what moves are possible on a turn. <p> The player then gets to select the sequence in which the moves in the constructed set are executed. (A summary of the rules can be found in Appendix A, while the detailed rules can be found in <ref> [5] </ref>.) We have chosen to represent each individual player as a board evaluation function [7] [8].
Reference: [6] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: This paper examines using the genetic programming paradigm <ref> [6] </ref> in the context of Senet, a strategy game popular in ancient Egypt. As early as 3100 B.C., Senet boards and pieces were among the standard furnishings found in tombs. Murals depicting Senet games in progress were common decorations on the walls of the tombs as well. <p> The rules of the game of Senet are described in Appendix A. 2. Genetic Programming The basic idea of genetic programming is to breed computer programs to solve a particular problem. John R. Koza formalized these principles of genetic programming <ref> [6] </ref> into a unified paradigm for designing algorithms. The basic outline of the paradigm is roughly as follows. The first generation of computer programs is randomly generated and generally rather low in fitness. <p> Over a large number of generations, the average individual fitness should improve. The single best program in the population at the time of termination is designated to be the result, which may be a solution (or approximate solution <ref> [6] </ref>) to the problem posed. 3. Evolving Evaluation Functions In using the genetic programming paradigm a major consideration is the formulation of the problem as evaluable programs. In the game of Senet each turn begins with a randomized construction (by the use of throw sticks) of a set of moves. <p> Note that with this formulation any function that returns a number whenever executed thus becomes a feasible player. Our system will maintain this property for individuals and thereby avoids the potential complications of introducing individuals into the population who do not play the game legally. In Koza's paradigm <ref> [6] </ref> the programs are expressed as LISP functions constructed from a predetermined (and application specific) set of function templates and constants (referred to as terminals). This brings us to the issue of precisely which terminals and functions should be available as components of the player. <p> We evolved four different populations in order to determine whether this collection of techniques would produce interesting Senet players. All of the populations were of size 512 (the power of two slightly simplifies the tournament process). The creation and crossover mechanisms described above are slightly different than Koza's <ref> [6] </ref>. The primary implication of this difference is that the size of the individuals is not limited. In a future study, we plan to investigate the importance, if any, of this difference. 4.
Reference: [7] <author> Arthur Samuel. </author> <title> Some studies in machine learn-ing using the game of checkers. </title> <journal> IBM Journal of Research and Development 3, </journal> <pages> pages 210-229, </pages> <year> 1959. </year>
Reference-contexts: This probabilistic element makes a straightforward lookahead search process difficult to implement and evaluate. We use the genetic programming paradigm to evolve board evaluation functions (e.g. Samuel's checkers player <ref> [7] </ref>) from an initial population of randomly generated functions. Evolution proceeds through the mechanism of the-survival-of-the-fittest and in our formulation the fitness of individuals is estimated by having a Senet tournament among the members of the population. <p> player then gets to select the sequence in which the moves in the constructed set are executed. (A summary of the rules can be found in Appendix A, while the detailed rules can be found in [5].) We have chosen to represent each individual player as a board evaluation function <ref> [7] </ref> [8]. The system can then simulate the play of an individual by constructing the set of moves, applying the represented evaluation function to each move in the set, and executing the moves in the order of preference indicated by the resulting evaluation numbers. <p> But how do we know that the overall winner, that is, the tournament winner in the last generation, has any objective value whatsoever? Unlike previous efforts to implement computer game players (such as [1] <ref> [7] </ref> [8]), Senet is not a well-understood game. There is no literature describing good Senet strategy, not even from the ancient Egyptians. We have nevertheless attempted to develop and use a series of baseline players.

References-found: 7

