URL: ftp://ftp.cs.pitt.edu/panos/PMDBnet/pdcs_95.ps
Refering-URL: http://www.cs.pitt.edu/~panos/publications/articles.html
Root-URL: 
Title: Two-Phase Commit in Gigabit-Networked Distributed Databases  
Author: Yousef J. Al-Houmaily Panos K. Chrysanthis 
Address: Pittsburgh Pittsburgh, PA 15261 Pittsburgh, PA 15260  
Affiliation: Dept. of Electrical Engineering Dept. of Computer Science University of Pittsburgh University of  
Abstract: In the future, different database sites will be interconnected via gigabit networks, forming a very powerful distributed database system. In such an environment, the propagation latency will be the dominant component of the overall communication cost while the migration of large amount of data will not pose a problem. Furthermore, computer systems are expected to become highly reliable. In this paper, we present a two-phase commit variant that exploits these new domain characteristics to minimize the cost of distributed transaction commitment. Although the protocol trades off efficiency during normal processing for slower recovery, it supports forward recovery that potentially reduces the overall cost of recovery. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Banerjee and P. K. Chrysanthis. </author> <title> "Data Sharing and Recovery in Gigabit-Networked Databases," </title> <booktitle> Proc. of the 4th International Conference on Computer Communications and Networks, </booktitle> <year> 1995. </year>
Reference-contexts: In such gigabit-networked DDBSs, the propagation latency will be the dominant component of the overall communication cost while the migration of large amounts of data will not pose a problem <ref> [6, 1] </ref>. In other words, the size of messages in a database protocol is of less concern than the required number of rounds or sequential phases of message passing.
Reference: [2] <author> P. A. Bernstein, V. Hadzilacos and N. Goodman, </author> <title> Concurrency Control and Recovery in Database Systems, </title> <address> Adison-Wesley, Reading, MA, </address> <year> 1987. </year>
Reference-contexts: We assume that each site employs page-level logging and uses a traditional undo-redo recovery techniques <ref> [2] </ref> in which the undo phase precedes the redo phase.
Reference: [3] <author> D. DeWitt, et al., </author> <title> "The Gamma Database Machine Project," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 2, No. 1, </volume> <pages> pp. 44-69, </pages> <year> 1990. </year>
Reference-contexts: CL eliminates the need for any (force-write) logging at the participants' sites by having the coordinators maintain the logs and using distributed write-ahead logging (DWAL) <ref> [3] </ref>. That is, the log of a participant is distributed among multiple coordinator sites. CL also eliminates the initiation record of EP.
Reference: [4] <author> K. P. Eswaran, et al., </author> <title> "The Notion of Consistency and Predicate Locks in a Database System," </title> <journal> Communications of the ACM, </journal> <volume> Vol. </volume> <pages> 19, </pages> <address> No.11, pp.624-633, </address> <year> 1976. </year>
Reference-contexts: This is achieved by logging the read locks and the redo records that are generated during the execution of operations at both the coordinator and the participants. The underlying assumption in IYV is that all sites employ strict two-phase locking protocol (2PL) <ref> [4] </ref>. In Section 2, IYV is introduced and its behavior in the presence of failures is discussed in detail. We also apply to IYV the presume abort (PrA) optimization [9, 10] which has been adopted by the OSI-TP and X/Open standards.
Reference: [5] <author> J. Gray, </author> <booktitle> "Notes on Data Base Operating Systems," In Operating Systems: An Advanced Course, LNCS, </booktitle> <volume> Vol. 60, </volume> <pages> pp. 393-481, </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: This is achieved by employing an atomic commitment protocol (ACP) that executes a commit or an abort operation across multiple sites as a single logical operation. The simplest and most used ACP is the two-phase commit protocol (2PC) <ref> [5, 7] </ref>. 2PC consists of a voting phase during which the coordinator of a distributed transaction requests all the sites participating in the transaction's execution to prepare to commit, and of a decision phase during which the coordinator either decides to commit the transaction if all the participants are prepared to
Reference: [6] <author> L. Kleinrock, </author> <title> "The Latency/Bandwidth Tradeoff in Gigabit Networks," </title> <journal> IEEE Communications Magazine, </journal> <volume> Vol. 30, No. 4, </volume> <pages> pp. 36-40, </pages> <year> 1992. </year>
Reference-contexts: In such gigabit-networked DDBSs, the propagation latency will be the dominant component of the overall communication cost while the migration of large amounts of data will not pose a problem <ref> [6, 1] </ref>. In other words, the size of messages in a database protocol is of less concern than the required number of rounds or sequential phases of message passing.
Reference: [7] <author> B. W. Lampson, </author> <title> "Atomic Transactions," In Distributed Systems: Architecture and Implementation An Advanced Course, </title> <booktitle> LNCS, </booktitle> <volume> Vol. 105, </volume> <pages> pp. 246-265, </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: This is achieved by employing an atomic commitment protocol (ACP) that executes a commit or an abort operation across multiple sites as a single logical operation. The simplest and most used ACP is the two-phase commit protocol (2PC) <ref> [5, 7] </ref>. 2PC consists of a voting phase during which the coordinator of a distributed transaction requests all the sites participating in the transaction's execution to prepare to commit, and of a decision phase during which the coordinator either decides to commit the transaction if all the participants are prepared to
Reference: [8] <author> C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz, </author> <title> "ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 17, No. 1, </volume> <pages> pp. 94-162, </pages> <year> 1992. </year>
Reference-contexts: We assume that each site employs page-level logging and uses a traditional undo-redo recovery techniques [2] in which the undo phase precedes the redo phase. As it will become apparent in Section 2.2, recovery schemes such as ARIES <ref> [8] </ref> which are in general highly efficient, may not offer the same efficiency in the context of dual logs adopted by IYV, because their redo phase precedes the undo phase. In IYV, dual logging works as follows. <p> For the abort case, four messages are needed to be exchanged between the participant and the coordinator of an aborted transaction. This is because undoing an operation using ARIES <ref> [8] </ref>, the recovery scheme of CL is another write operation that has to be logged. Since CL uses a DWAL logging protocol, undoing an operation requires two more explicit messages to be exchanged between the coordinator and the participant in the worst case scenario.
Reference: [9] <author> C. Mohan, B. Lindsay and R. Obermarck, </author> <title> "Transaction Management in the R fl Distributed Database Management System," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 378-596, </pages> <year> 1986. </year>
Reference-contexts: The underlying assumption in IYV is that all sites employ strict two-phase locking protocol (2PL) [4]. In Section 2, IYV is introduced and its behavior in the presence of failures is discussed in detail. We also apply to IYV the presume abort (PrA) optimization <ref> [9, 10] </ref> which has been adopted by the OSI-TP and X/Open standards. <p> During the recovery of a coordinator, not finding a decision record pertaining to a transaction is interpreted as an abort decision. This presumption is made more explicit in the presume abort protocol (PrA) <ref> [9, 10] </ref>. Implicit yes-vote presume abort (IYV-PrA), and in a manner similar to PrA, adopts the abort presumption. In IYV-PrA, the coordinator of a transaction needs only to force write a commit record. Any missing information about a transaction is presumed to mean that the transaction has been aborted. <p> Thus, IYV is more general compared to UV. In the special cases in which UV is applicable, IYV and UV would exhibit the similar behavior during normal processing. The early prepare protocol (EP) [11, 12] combines UV with presume commit (PrC) <ref> [9, 10] </ref>. PrC requires the identities of the participants to be explicitly recorded by the coordinator in a forced initiation log record, to ensure that an aborted transaction is not presumed as committed after a failure.
Reference: [10] <author> G. Samaras, K. Britton, A. Citron and C. Mohan, </author> <title> "Two-Phase Commit Optimizations and Tradeoffs in the Commercial Environment," </title> <booktitle> Proc. of the 9th International Conference on Data Engineering, </booktitle> <pages> pp. 520-529, </pages> <year> 1993. </year>
Reference-contexts: The underlying assumption in IYV is that all sites employ strict two-phase locking protocol (2PL) [4]. In Section 2, IYV is introduced and its behavior in the presence of failures is discussed in detail. We also apply to IYV the presume abort (PrA) optimization <ref> [9, 10] </ref> which has been adopted by the OSI-TP and X/Open standards. <p> During the recovery of a coordinator, not finding a decision record pertaining to a transaction is interpreted as an abort decision. This presumption is made more explicit in the presume abort protocol (PrA) <ref> [9, 10] </ref>. Implicit yes-vote presume abort (IYV-PrA), and in a manner similar to PrA, adopts the abort presumption. In IYV-PrA, the coordinator of a transaction needs only to force write a commit record. Any missing information about a transaction is presumed to mean that the transaction has been aborted. <p> Thus, IYV is more general compared to UV. In the special cases in which UV is applicable, IYV and UV would exhibit the similar behavior during normal processing. The early prepare protocol (EP) [11, 12] combines UV with presume commit (PrC) <ref> [9, 10] </ref>. PrC requires the identities of the participants to be explicitly recorded by the coordinator in a forced initiation log record, to ensure that an aborted transaction is not presumed as committed after a failure.
Reference: [11] <author> J. Stamos and F. Cristian, </author> <title> "A Low-Cost Atomic Commit Protocol," </title> <booktitle> Proc. of the 9th Symposium on Reliable Distributed Systems, </booktitle> <pages> pp. 66-75, </pages> <year> 1990. </year>
Reference-contexts: A remaining question is how to ensure that a transaction can be correctly recovered after a failure without having to force-write the log records that are generated during the processing of each operation prior to acknowledging its completion as in the case of early prepare <ref> [11, 12] </ref>. Notice that a force-write involves a disk access that suspends the protocol until the disk access is completed. Also, unlike the unsolicited vote optimization [13], the participants in IYV have no knowledge about when their parts in a transaction execution have been completed. <p> Thus, IYV is more general compared to UV. In the special cases in which UV is applicable, IYV and UV would exhibit the similar behavior during normal processing. The early prepare protocol (EP) <ref> [11, 12] </ref> combines UV with presume commit (PrC) [9, 10]. PrC requires the identities of the participants to be explicitly recorded by the coordinator in a forced initiation log record, to ensure that an aborted transaction is not presumed as committed after a failure. <p> In the next section we evaluate the IYV variant which eliminates the start record at the expense of slower recovery. Another non-2PC atomic protocol behaving similar to EP is the coordinator log protocol (CL) which assumes that transactions are short and most probably going to commit <ref> [11, 12] </ref>. CL eliminates the need for any (force-write) logging at the participants' sites by having the coordinators maintain the logs and using distributed write-ahead logging (DWAL) [3]. That is, the log of a participant is distributed among multiple coordinator sites. CL also eliminates the initiation record of EP. <p> This means that when a participant aborts a transaction, it cannot release the resources held by the transaction until it communicates with the transaction's coordinator and receives the undo log records pertaining to the transaction. Another problem with CL, as presented in <ref> [11, 12] </ref>, is that the log records of transactions cannot be garbage collected by the coordinators and have to be remembered forever. <p> In our evaluation, we use best and worst case scenarios as in <ref> [11, 12] </ref> to highlight the performance differences among the various ACPs protocols and we consider the number of coordination messages and forced log writes that are due to the protocols only (e.g., we do not con 2PC PrC PrA EP CL IYV IYV-PrA IYV IYV-PrA With Start Without Start log records
Reference: [12] <author> J. Stamos, and F. Cristian, </author> <title> "Coordinator Log Transaction Execution Protocol," </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> Vol. 1, </volume> <pages> pp. 383-408, </pages> <year> 1993. </year>
Reference-contexts: A remaining question is how to ensure that a transaction can be correctly recovered after a failure without having to force-write the log records that are generated during the processing of each operation prior to acknowledging its completion as in the case of early prepare <ref> [11, 12] </ref>. Notice that a force-write involves a disk access that suspends the protocol until the disk access is completed. Also, unlike the unsolicited vote optimization [13], the participants in IYV have no knowledge about when their parts in a transaction execution have been completed. <p> Thus, IYV is more general compared to UV. In the special cases in which UV is applicable, IYV and UV would exhibit the similar behavior during normal processing. The early prepare protocol (EP) <ref> [11, 12] </ref> combines UV with presume commit (PrC) [9, 10]. PrC requires the identities of the participants to be explicitly recorded by the coordinator in a forced initiation log record, to ensure that an aborted transaction is not presumed as committed after a failure. <p> In the next section we evaluate the IYV variant which eliminates the start record at the expense of slower recovery. Another non-2PC atomic protocol behaving similar to EP is the coordinator log protocol (CL) which assumes that transactions are short and most probably going to commit <ref> [11, 12] </ref>. CL eliminates the need for any (force-write) logging at the participants' sites by having the coordinators maintain the logs and using distributed write-ahead logging (DWAL) [3]. That is, the log of a participant is distributed among multiple coordinator sites. CL also eliminates the initiation record of EP. <p> This means that when a participant aborts a transaction, it cannot release the resources held by the transaction until it communicates with the transaction's coordinator and receives the undo log records pertaining to the transaction. Another problem with CL, as presented in <ref> [11, 12] </ref>, is that the log records of transactions cannot be garbage collected by the coordinators and have to be remembered forever. <p> In our evaluation, we use best and worst case scenarios as in <ref> [11, 12] </ref> to highlight the performance differences among the various ACPs protocols and we consider the number of coordination messages and forced log writes that are due to the protocols only (e.g., we do not con 2PC PrC PrA EP CL IYV IYV-PrA IYV IYV-PrA With Start Without Start log records
Reference: [13] <author> M. Stonebraker, </author> <title> "Concurrency Control and Consistency of Multiple Copies of Data in Distributed IN-GRES," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 5, No. 3, </volume> <pages> pp. 188-194, </pages> <year> 1979. </year>
Reference-contexts: Notice that a force-write involves a disk access that suspends the protocol until the disk access is completed. Also, unlike the unsolicited vote optimization <ref> [13] </ref>, the participants in IYV have no knowledge about when their parts in a transaction execution have been completed. Thus, participants cannot tell when to force their logs into the stable storage.
References-found: 13

