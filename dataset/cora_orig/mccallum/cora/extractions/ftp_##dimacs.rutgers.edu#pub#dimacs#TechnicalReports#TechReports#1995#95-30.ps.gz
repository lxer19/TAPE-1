URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1995/95-30.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1995.html
Root-URL: http://www.cs.rutgers.edu
Title: for matrix groups and the Tits alternative  
Author: by Robert Beals ; ; 
Address: Olden Lane Princeton, New Jersey, 08540  
Affiliation: 2 School of Mathematics Institute For Advanced Study  
Note: Algorithms  3 Research supported by: NSF Mathematical Sciences Posdoctoral Fellowship, Institute for Advanced Study, and the Sloan Foundation DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 95-30 August 1995 
Abstract-found: 1
Intro-found: 1
Reference: [Atk75] <author> M.D. Atkinson: </author> <title> An algorithm for finding the blocks of a permutation group, </title> <journal> Math. Comp. </journal> <volume> 29 (1975), </volume> <pages> 911-913. </pages>
Reference-contexts: However, no general imprimitivity algorithm is known (although Holt et al [H+94b] have developed practical methods for matrix groups over finite fields). A natural combinatorial approach to matrix group imprimitivity is suggested by Atkin-son's algorithm for permutation group imprimitivity <ref> [Atk75] </ref>. For permutation groups, a system of imprimitivity can be found by considering the orbits of a representation of degree n 2 .
Reference: [Atk84] <editor> M. D. Atkinson, ed.: </editor> <booktitle> Computational Group Theory (Proceedings of the London Mathematical Society Symposium on Computational Group Theory), </booktitle> <publisher> Academic Press, </publisher> <address> London 1984. </address>
Reference-contexts: 1 Introduction 1.1 Groups and computation For several decades, computers have been used for group theoretic investigations. The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. <ref> [Atk84] </ref>). Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups [NP, HR, H+94a, H+94b].
Reference: [Ba79] <author> L. Babai: </author> <title> Monte-Carlo Algorithms in Graph Isomorphism Testing, </title> <note> unpublished manuscript (1979). </note>
Reference-contexts: Methods for handling infinite matrix groups, particularly abelian, nilpotent, and solvable groups, are currently being developed by G. Ostheimer [Os]. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years <ref> [Ba79, FHL] </ref>. As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. <p> This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms <ref> [Ba79, FHL, Lu82] </ref>. Numerous applications have been found in cryptography [BCY, BY, IY, M, MM89, MM92]. Asymptotic complexity theory has also benefited computational group theory.
Reference: [Ba85] <author> L. Babai: </author> <title> Trading group theory for randomness, </title> <booktitle> Proc. 17th ACM STOC, </booktitle> <address> Providence RI, </address> <year> 1985, </year> <pages> 421-429. - 13 </pages> - 
Reference-contexts: Polynomial time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago <ref> [BSz, Ba85] </ref>.) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups [KLi, Ge93a, Ge93b, CLZ, BBCIL]. This research has benefited theoretical computer science in several ways. <p> This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups <ref> [Ba85] </ref>. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography [BCY, BY, IY, M, MM89, MM92]. Asymptotic complexity theory has also benefited computational group theory.
Reference: [Ba91a] <author> L. Babai: </author> <title> Computational complexity in finite groups, </title> <booktitle> Proc. International Congress of Mathematicians, </booktitle> <address> Kyoto 1990, </address> <publisher> Springer-Verlag, </publisher> <address> Hong Kong 1991, </address> <pages> 1479-1489. </pages>
Reference-contexts: Ostheimer [Os]. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years [Ba79, FHL]. As is the case with computational group theory, the area of permutation groups is particularly well studied <ref> [Ba91a, KLu, Lu93] </ref>.
Reference: [Ba92] <author> L. Babai: </author> <title> Deciding finiteness of matrix groups in Las Vegas polynomial time, </title> <booktitle> Proc. 3rd ACM-SIAM SODA (Symp. on Discrete Algorithms), </booktitle> <year> 1992, </year> <pages> 33-40. </pages>
Reference-contexts: In working with matrix groups in characteristic 0, a problem even more basic than membership testing is estimating bit lengths of elements. This is nontrivial even for finite groups <ref> [Ba92, BBR] </ref>. In general, it is often desirable to represent elements of a group using an encoding other than the standard encoding (in which an element of GL (n; F ) is represented as an n fi n array of elements of F ).
Reference: [BBCIL] <author> L. Babai, R. Beals, J-y. Cai, G. Ivanyos, E. M. Luks: </author> <title> Multiplicative equations over commuting matrices, </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups <ref> [KLi, Ge93a, Ge93b, CLZ, BBCIL] </ref>. This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. <p> For finite groups, Beals and Babai [BB] give Las Vegas algorithms for constructive membership and computing a presentation. Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks <ref> [BBCIL] </ref> give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein [CLZ] and Ge [Ge93a, Ge93b] (G. Ostheimer [Os] has developed similar methods independently). We extend both of these lines of research, giving Las Vegas algorithms for groups with abelian subgroups of finite index. <p> Constructive membership testing in (G) can be performed in Las Vegas polynomial time. In addition, normal generators for ker () can be computed in Las Vegas polynomial time. For finitely generated abelian unipotent groups, <ref> [BBCIL] </ref> show how to compute an isomor-phism to a lattice. This, combined with known polynomial time algorithms for lattices (cf. [Schr]), gives: Corollary 1.6 Constructive membership testing for abelian-by-finite matrix groups over number fields is in Las Vegas polynomial time. <p> In particular, the degree of the polynomial does not depend on S. Previously, it was known how to compute such a for finite matrix groups [BBR] and for abelian matrix groups <ref> [BBCIL] </ref>. 1.4 Methods A matrix group G GL (V ) is primitive if there is no direct sum decomposition V 1 + : : : + V r of V such that G permutes the V i . <p> We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. This allows a reduction of the abelian-by-finite case to the abelian and the finite cases separately, for which algorithms exist (cf. <ref> [BBCIL, Ge93a, Os, BBR, BB] </ref>). 2 Preliminaries and background 2.1 Building blocks We say that a group G, together with an encoding of elements of G satisfying conditions 1-4 of Theorem 1.7 is an effective slow-growth encoding. <p> Then there exist ideals A 1 ; : : : ; A r such that A is the direct sum of the A i and each A i =Rad (A i ) is simple. We quote two results of <ref> [BBCIL] </ref>, which we prove in Appendix A.
Reference: [BBR] <author> L. Babai, R. Beals, D. Rockmore: </author> <title> Deciding finiteness of matrix groups in deterministic polynomial time, </title> <journal> Israel J. Math., </journal> <note> to appear. </note>
Reference-contexts: As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. Polynomial time algorithms for several classes of finite matrix groups have been obtained in the last few years <ref> [Lu92, BBR, BB] </ref>. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups [KLi, Ge93a, Ge93b, CLZ, BBCIL]. This research has benefited theoretical computer science in several ways. <p> In recent years, algorithms have been obtained for two important classes of groups: finite groups and abelian groups. For finite groups, Beals and Babai [BB] give Las Vegas algorithms for constructive membership and computing a presentation. Also, Babai, Beals, and Rockmore <ref> [BBR] </ref> have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks [BBCIL] give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein [CLZ] and Ge [Ge93a, Ge93b] (G. Ostheimer [Os] has developed similar methods independently). <p> In working with matrix groups in characteristic 0, a problem even more basic than membership testing is estimating bit lengths of elements. This is nontrivial even for finite groups <ref> [Ba92, BBR] </ref>. In general, it is often desirable to represent elements of a group using an encoding other than the standard encoding (in which an element of GL (n; F ) is represented as an n fi n array of elements of F ). <p> In particular, the degree of the polynomial does not depend on S. Previously, it was known how to compute such a for finite matrix groups <ref> [BBR] </ref> and for abelian matrix groups [BBCIL]. 1.4 Methods A matrix group G GL (V ) is primitive if there is no direct sum decomposition V 1 + : : : + V r of V such that G permutes the V i . <p> The analogous approach for matrix groups would consider the invariant subspaces of a representation of dimension n 2 , but it is not clear that this works in all cases. Nevertheless, by using a novel application of finiteness testing <ref> [BBR] </ref>, we obtain a method which is sufficiently general for our purposes. We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. <p> We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. This allows a reduction of the abelian-by-finite case to the abelian and the finite cases separately, for which algorithms exist (cf. <ref> [BBCIL, Ge93a, Os, BBR, BB] </ref>). 2 Preliminaries and background 2.1 Building blocks We say that a group G, together with an encoding of elements of G satisfying conditions 1-4 of Theorem 1.7 is an effective slow-growth encoding. <p> These conditions guarantee that any computation involving polynomially many group operations runs in polynomial time. We give some simple examples of such encodings, as well as some methods by which such encodings may be combined to create new ones. Babai, Beals, and Rockmore <ref> [BBR] </ref> have shown: Theorem 2.1 Let G GL (n; Q) be given by a finite list of generators. Then it is decidable in deterministic polynomial time whether or not G is finite. <p> Let W i = A i M n (F ), and let i be the conjugation action of G on W i . Using the finiteness algorithm of Babai, Beals, and Rockmore <ref> [BBR] </ref>, we determine the set of i such that i (G) is a finite group. Let B be the sum of the W i such that i (G) is finite. Note that B is a subalgebra of M n (F ) (the W i are merely subspaces).
Reference: [BLS87] <author> L. Babai, E. M. Luks, A. Seress, </author> <title> Permutation groups in N C, </title> <booktitle> in: Proc. 19th ACM STOC, </booktitle> <year> 1987, </year> <pages> 409-420. </pages>
Reference-contexts: For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group [Lu87] introduced the basic approach used by several improved algorithms <ref> [BLS87, BLS88, BS] </ref>. An implementation of the [BS] algorithm is included with the group theory package GAP [Sch+]. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups. We give a number of polynomial time algorithms for problems which were not previously known to be decidable.
Reference: [BLS88] <author> L. Babai, E. Luks, A. Seress: </author> <title> Fast management of permutation groups, </title> <booktitle> Proc. 28th IEEE FOCS, </booktitle> <year> 1988, </year> <pages> 272-282. </pages>
Reference-contexts: For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group [Lu87] introduced the basic approach used by several improved algorithms <ref> [BLS87, BLS88, BS] </ref>. An implementation of the [BS] algorithm is included with the group theory package GAP [Sch+]. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups. We give a number of polynomial time algorithms for problems which were not previously known to be decidable.
Reference: [BSz] <author> L. Babai, E. Szemeredi: </author> <title> On the complexity of matrix group problems I, </title> <booktitle> Proc. 25th IEEE FOCS, </booktitle> <year> 1984, </year> <pages> 229-240. </pages>
Reference-contexts: Polynomial time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago <ref> [BSz, Ba85] </ref>.) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups [KLi, Ge93a, Ge93b, CLZ, BBCIL]. This research has benefited theoretical computer science in several ways.
Reference: [BB] <author> R. Beals, L. Babai: </author> <title> Las Vegas algorithms for matrix groups, </title> <booktitle> Proc. 34th IEEE FOCS (1993), </booktitle> <pages> 427-436. </pages>
Reference-contexts: As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. Polynomial time algorithms for several classes of finite matrix groups have been obtained in the last few years <ref> [Lu92, BBR, BB] </ref>. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups [KLi, Ge93a, Ge93b, CLZ, BBCIL]. This research has benefited theoretical computer science in several ways. <p> These two problems are naturally occurring subproblems for many group computations, including (nonconstructive) membership testing (see, for example, [Lu92]). In recent years, algorithms have been obtained for two important classes of groups: finite groups and abelian groups. For finite groups, Beals and Babai <ref> [BB] </ref> give Las Vegas algorithms for constructive membership and computing a presentation. Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. <p> We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. This allows a reduction of the abelian-by-finite case to the abelian and the finite cases separately, for which algorithms exist (cf. <ref> [BBCIL, Ge93a, Os, BBR, BB] </ref>). 2 Preliminaries and background 2.1 Building blocks We say that a group G, together with an encoding of elements of G satisfying conditions 1-4 of Theorem 1.7 is an effective slow-growth encoding. <p> For the first three, the standard encoding suffices (for (G) this is Theorem 2.1, for (G) this is Lemma 2.3). For det (G) F fl , we use Ge's multiplicative encoding [Ge93a]. To prove Theorem 1.5, let (g) = ((g); (g); det (g)). The group (G) is managed by <ref> [BB] </ref>, and the group det (G) is handled with [Ge93a]. The group (ker () " ker (det)) has order n, and poses no problem. The [Ge93a, BB] algorithms give a polynomial length straight-line program to compute normal generators for ker (). <p> To prove Theorem 1.5, let (g) = ((g); (g); det (g)). The group (G) is managed by [BB], and the group det (G) is handled with [Ge93a]. The group (ker () " ker (det)) has order n, and poses no problem. The <ref> [Ge93a, BB] </ref> algorithms give a polynomial length straight-line program to compute normal generators for ker (). By using the slow growth encoding of Theorem 1.7, such a straight-line program can be evaluated in polynomial time.
Reference: [BS] <author> R. Beals, A. Seress: </author> <title> Structure forest and composition factors in nearly linear time for small base groups, </title> <booktitle> Proc. 24th ACM STOC, </booktitle> <year> 1992, </year> <pages> 116-125. </pages>
Reference-contexts: For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group [Lu87] introduced the basic approach used by several improved algorithms <ref> [BLS87, BLS88, BS] </ref>. An implementation of the [BS] algorithm is included with the group theory package GAP [Sch+]. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups. We give a number of polynomial time algorithms for problems which were not previously known to be decidable. <p> For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group [Lu87] introduced the basic approach used by several improved algorithms [BLS87, BLS88, BS]. An implementation of the <ref> [BS] </ref> algorithm is included with the group theory package GAP [Sch+]. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups. We give a number of polynomial time algorithms for problems which were not previously known to be decidable.
Reference: [BCY] <author> G. Brassard, C. Crepeau, M. Yung: </author> <title> Everything in NP can be argued in perfect zero-knowledge in a bounded number of rounds, </title> <booktitle> Proc. of the 16th ICALP, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1989, </address> <pages> 123-136. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [BY] <author> G. Brassard, M. Yung: </author> <title> One-Way Group Actions, </title> <booktitle> Advances in Cryptology: CRYPTO '90 proceedings, Lecture Notes in Computer Science 537, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 94-107. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [Bu] <author> G. Butler: </author> <title> Fundamental Algorithms for Permutation Groups, </title> <booktitle> Lecture Notes in Computer Science 559, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction 1.1 Groups and computation For several decades, computers have been used for group theoretic investigations. The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups [Si1] (cf. <ref> [Bu] </ref>), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups [NP, HR, H+94a, H+94b]. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas.
Reference: [CLZ] <author> J-y. Cai, R. J. Lipton, Y. Zalcstein: </author> <title> The complexity of the membership problem for 2-generated commutative semigroups of rational matrices, </title> <booktitle> Proc. 35th IEEE FOCS (1994), </booktitle> <pages> 135-142. </pages>
Reference-contexts: time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups <ref> [KLi, Ge93a, Ge93b, CLZ, BBCIL] </ref>. This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. <p> Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks [BBCIL] give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein <ref> [CLZ] </ref> and Ge [Ge93a, Ge93b] (G. Ostheimer [Os] has developed similar methods independently). We extend both of these lines of research, giving Las Vegas algorithms for groups with abelian subgroups of finite index.
Reference: [Can] <author> J. J. Cannon: </author> <title> An Introduction to the Group Theory Language, Cayley, </title> <booktitle> Computational Group Theory (Proceedings of the London Mathematical Society Symposium on Computational Group Theory), </booktitle> <editor> M. D. Atkinson, ed., </editor> <publisher> Academic Press, </publisher> <address> London 1984, </address> <pages> 145-184. - 14 </pages> - 
Reference-contexts: Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups [NP, HR, H+94a, H+94b]. Many of these algorithms have been implemented in popular programming packages <ref> [Can, Sch+] </ref>, which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas. Methods for handling infinite matrix groups, particularly abelian, nilpotent, and solvable groups, are currently being developed by G. Ostheimer [Os].
Reference: [FHL] <author> M. L. Furst, J. Hopcroft, E. M. Luks: </author> <title> Polynomial-time algorithms for permutation groups, </title> <booktitle> in: 21st IEEE FOCS, </booktitle> <year> 1980, </year> <pages> 36-41. </pages>
Reference-contexts: Methods for handling infinite matrix groups, particularly abelian, nilpotent, and solvable groups, are currently being developed by G. Ostheimer [Os]. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years <ref> [Ba79, FHL] </ref>. As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. <p> This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms <ref> [Ba79, FHL, Lu82] </ref>. Numerous applications have been found in cryptography [BCY, BY, IY, M, MM89, MM92]. Asymptotic complexity theory has also benefited computational group theory. <p> We wish to "lift" these central idempotents of Env (N)=Rad (Env (N )) to central idempotents of Env (N). Let G i G consist of all elements g such that (g) fixes V i . Schreier generators (cf. <ref> [Si1, FHL] </ref>) for G i can be found in polynomial time. Note that extends naturally to an algebra homomorphism from Env (G) to Env ((G)), which we will also denote . <p> Let V i = e i F n . The V i are permuted by G, and G is easily represented as a subdirect product of subgroups of wreath products. Standard techniques <ref> [Si1, FHL] </ref>, together with Propositions 2.4 and 2.5, now allow us to reduce our computational problems to the case r = 1. We assume now that r = 1, so C is a field E of degree d over F for some d dividing n. <p> The action of G on C corresponds to F -automorphisms of C (i.e. automorphisms which fix F ). Therefore the centralizer in G of C has index at most d. Again, techniques of <ref> [Si1, FHL] </ref> allow us to reduce to the case that G acts trivially on C. We now assume that G acts trivially on C, and we wish to embed E = C in the center of Env (G). Such an embedding exists iff G is nilpotent-by-finite.
Reference: [FR] <author> K. Friedl, L. Ronyai: </author> <title> Polynomial time solutions of some problems in abstract algebra, </title> <booktitle> Proc. 17th ACM STOC (1985), </booktitle> <pages> 153-162. </pages>
Reference-contexts: In addition, the action of G is completely reducible (i.e., F n is the direct sum of G-invariant subspaces on which G acts irreducibly) iff Env (G) is semisimple. We require the following result of Friedl and Ronyai <ref> [FR] </ref>: Theorem 2.6 Let A be a subalgebra of M n (F ), given by a list of generators. Then Rad (A) can be calculated in polynomial time, along with the minimal ideals of A=Rad (A). <p> By using the Friedl-Ronyai algorithm <ref> [FR] </ref>, it suffices to consider the case that Env (G) is semisimple (otherwise, let be the homomorphism described after Theorem 2.6, and replace G by (G)).
Reference: [Ga] <author> F. R. Gantmacher: </author> <title> Matrix Theory, </title> <publisher> Chelsea Publishing, </publisher> <address> New York, </address> <year> 1959. </year>
Reference: [Ge93a] <author> G. Ge: </author> <title> Algorithms related to multiplicative representations of algebraic numbers, </title> <type> PhD thesis, </type> <institution> Math Dept, </institution> <address> U. C. Berkeley, </address> <year> 1993. </year>
Reference-contexts: time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups <ref> [KLi, Ge93a, Ge93b, CLZ, BBCIL] </ref>. This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. <p> Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks [BBCIL] give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein [CLZ] and Ge <ref> [Ge93a, Ge93b] </ref> (G. Ostheimer [Os] has developed similar methods independently). We extend both of these lines of research, giving Las Vegas algorithms for groups with abelian subgroups of finite index. <p> We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. This allows a reduction of the abelian-by-finite case to the abelian and the finite cases separately, for which algorithms exist (cf. <ref> [BBCIL, Ge93a, Os, BBR, BB] </ref>). 2 Preliminaries and background 2.1 Building blocks We say that a group G, together with an encoding of elements of G satisfying conditions 1-4 of Theorem 1.7 is an effective slow-growth encoding. <p> For the first three, the standard encoding suffices (for (G) this is Theorem 2.1, for (G) this is Lemma 2.3). For det (G) F fl , we use Ge's multiplicative encoding <ref> [Ge93a] </ref>. To prove Theorem 1.5, let (g) = ((g); (g); det (g)). The group (G) is managed by [BB], and the group det (G) is handled with [Ge93a]. The group (ker () " ker (det)) has order n, and poses no problem. <p> For det (G) F fl , we use Ge's multiplicative encoding <ref> [Ge93a] </ref>. To prove Theorem 1.5, let (g) = ((g); (g); det (g)). The group (G) is managed by [BB], and the group det (G) is handled with [Ge93a]. The group (ker () " ker (det)) has order n, and poses no problem. The [Ge93a, BB] algorithms give a polynomial length straight-line program to compute normal generators for ker (). By using the slow growth encoding of Theorem 1.7, such a straight-line program can be evaluated in polynomial time. <p> To prove Theorem 1.5, let (g) = ((g); (g); det (g)). The group (G) is managed by [BB], and the group det (G) is handled with [Ge93a]. The group (ker () " ker (det)) has order n, and poses no problem. The <ref> [Ge93a, BB] </ref> algorithms give a polynomial length straight-line program to compute normal generators for ker (). By using the slow growth encoding of Theorem 1.7, such a straight-line program can be evaluated in polynomial time.
Reference: [Ge93b] <author> G. Ge: </author> <title> Testing equalities of multiplicative representations in polynomial time, </title> <booktitle> Proc. 34th IEEE FOCS (1993), </booktitle> <pages> 422-426. </pages>
Reference-contexts: time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups <ref> [KLi, Ge93a, Ge93b, CLZ, BBCIL] </ref>. This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. <p> Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks [BBCIL] give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein [CLZ] and Ge <ref> [Ge93a, Ge93b] </ref> (G. Ostheimer [Os] has developed similar methods independently). We extend both of these lines of research, giving Las Vegas algorithms for groups with abelian subgroups of finite index.
Reference: [HR] <author> D. F. Holt, S. Rees: </author> <title> Testing modules for irreducibility, </title> <journal> J. Austral. Math. Soc. Ser. </journal> <note> A 57 (1994). </note>
Reference-contexts: The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups <ref> [NP, HR, H+94a, H+94b] </ref>. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas.
Reference: [H+94a] <author> D. F. Holt, C. R. Leedham-Green, E. A. O'Brien, S. Rees: </author> <title> Computing matrix group decompositions with respect to a normal subgroup, </title> <note> submitted to London Math. Soc., </note> <year> 1994. </year>
Reference-contexts: The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups <ref> [NP, HR, H+94a, H+94b] </ref>. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas.
Reference: [H+94b] <author> D. F. Holt, C. R. Leedham-Green, E. A. O'Brien, S. Rees: </author> <title> Primitivity testing for matrix groups, </title> <note> submitted to London Math. Soc., </note> <year> 1994. </year>
Reference-contexts: The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups <ref> [NP, HR, H+94a, H+94b] </ref>. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas. <p> If such direct sum decompositions could be found for imprimitive groups, many computational problems would be reduced to the primitive case. Much is known about the structure of primitive solvable matrix groups [Su63, Su76]. However, no general imprimitivity algorithm is known (although Holt et al <ref> [H+94b] </ref> have developed practical methods for matrix groups over finite fields). A natural combinatorial approach to matrix group imprimitivity is suggested by Atkin-son's algorithm for permutation group imprimitivity [Atk75].
Reference: [IY] <author> R. Impagliazzo, M. Yung: </author> <title> Direct minimum-knowledge computations, </title> <booktitle> Advances in Cryptology: CRYPTO '87 proceedings, Lecture Notes in Computer Science 293, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin 1988, </address> <pages> 40-51. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [KLi] <author> R. Kannan, R. Lipton: </author> <title> Polynomial-time algorithms for the orbit problem, </title> <journal> J. ACM 33, </journal> <volume> No. 4 (1986), </volume> <pages> 808-821. </pages>
Reference-contexts: time algorithms for several classes of finite matrix groups have been obtained in the last few years [Lu92, BBR, BB]. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups <ref> [KLi, Ge93a, Ge93b, CLZ, BBCIL] </ref>. This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85].
Reference: [KLu] <author> W. M. Kantor, E. M. Luks: </author> <title> Computing in quotient groups, </title> <booktitle> in: Proc. 22nd ACM STOC, </booktitle> <year> 1990, </year> <pages> pp. 524-534. </pages>
Reference-contexts: Ostheimer [Os]. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years [Ba79, FHL]. As is the case with computational group theory, the area of permutation groups is particularly well studied <ref> [Ba91a, KLu, Lu93] </ref>.
Reference: [Lu82] <author> E. M. Luks: </author> <title> Isomorphism of graphs of bounded valence can be tested in polynomial time, </title> <journal> J. Comp. Syst. Sci. </journal> <volume> 25 (1982), </volume> <pages> 42-65. </pages>
Reference-contexts: This research has benefited theoretical computer science in several ways. One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms <ref> [Ba79, FHL, Lu82] </ref>. Numerous applications have been found in cryptography [BCY, BY, IY, M, MM89, MM92]. Asymptotic complexity theory has also benefited computational group theory.
Reference: [Lu87] <author> E. M. Luks: </author> <title> Computing the composition factors of a permutation group in polynomial time, </title> <booktitle> Combinatorica 7 (1987), </booktitle> <pages> 87-99. </pages>
Reference-contexts: While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm. For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group <ref> [Lu87] </ref> introduced the basic approach used by several improved algorithms [BLS87, BLS88, BS]. An implementation of the [BS] algorithm is included with the group theory package GAP [Sch+]. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups.
Reference: [Lu92] <author> E. M. Luks: </author> <title> Computing in solvable matrix groups, </title> <booktitle> Proc. 33rd IEEE FOCS (1992), </booktitle> <pages> 111-120. </pages>
Reference-contexts: As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. Polynomial time algorithms for several classes of finite matrix groups have been obtained in the last few years <ref> [Lu92, BBR, BB] </ref>. (Some important complexity results for these groups were obtained ten years ago [BSz, Ba85].) For infinite matrix groups, polynomial time algorithms are known only for the class of abelian groups [KLi, Ge93a, Ge93b, CLZ, BBCIL]. This research has benefited theoretical computer science in several ways. <p> A presentation for a group is a set of abstract generators and relations which define the group. These two problems are naturally occurring subproblems for many group computations, including (nonconstructive) membership testing (see, for example, <ref> [Lu92] </ref>). In recent years, algorithms have been obtained for two important classes of groups: finite groups and abelian groups. For finite groups, Beals and Babai [BB] give Las Vegas algorithms for constructive membership and computing a presentation. <p> By considering the image of , this reduces the problem of determining whether or not G is solvable to the finite case. Luks <ref> [Lu92] </ref> has given deterministic polynomial time algorithms for a host of problems relating to finite solvable matrix groups, including solvability testing. Thus, we have: Corollary 1.4 Solvability of finitely generated matrix groups over number fields is decidable in polynomial time.
Reference: [Lu93] <author> E. M. Luks: </author> <title> Permutation Groups and Polynomial-Time Computation, in Groups and Computation, </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science 11 (1993), </booktitle> <pages> 139-175. - 15 </pages> - 
Reference-contexts: Ostheimer [Os]. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years [Ba79, FHL]. As is the case with computational group theory, the area of permutation groups is particularly well studied <ref> [Ba91a, KLu, Lu93] </ref>.
Reference: [M] <author> S. Magliveras: </author> <title> A cryptosystem from logarithmic signatures of finite groups, </title> <booktitle> in Proc. 29th Midwest Symposium on Circuits and Systems (1986), </booktitle> <pages> 972-975. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [MM89] <author> S. Magliveras, N. Memon: </author> <title> Properties of Cryptosystem PGM, </title> <booktitle> in Advences in Cryptology | CRYPTO '89, Lecture Notes in Computer Science 435, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin (1989), </address> <pages> 447-460. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [MM92] <author> S. Magliveras, N. Memon: </author> <title> Algebraic Properties of Cryptosystem PGM, </title> <journal> Journal of Cryptology 5 (1992), </journal> <pages> pp. 167-183. </pages>
Reference-contexts: One of the motivations for the invention of interactive proofs was Babai's investigation of complexity in finite matrix groups [Ba85]. Much of our understanding of the complexity of graph isomor-phism comes from research in permutation group algorithms [Ba79, FHL, Lu82]. Numerous applications have been found in cryptography <ref> [BCY, BY, IY, M, MM89, MM92] </ref>. Asymptotic complexity theory has also benefited computational group theory. While "polynomial time" and "practical" are two different notions, often the structure used to design a polynomial time algorithm can be refined to yield a practical algorithm.
Reference: [Mih] <author> K. A. Mihalova: </author> <title> The occurrence problem for a direct product of groups (in Rus-sian), </title> <journal> Dokl. Akad. </journal> <volume> Nauk 119 (1958), </volume> <pages> 1103-1105. </pages>
Reference-contexts: For general matrix groups, the membership problem is undecidable, even for 4 fi 4 integer matrix groups <ref> [Mih] </ref>. Also, the problem of testing membership in a normal subgroup given by normal generators is undecidable for 2 fi 2 matrix groups. These undecidability results stem from the presence of nonabelian free subgroups of GL (n; Z).
Reference: [Mil] <author> J. Milnor: </author> <title> Growth of finitely generated solvable groups, </title> <editor> J. </editor> <booktitle> Differential Geometry 2 (1968), </booktitle> <pages> 447-449. </pages>
Reference-contexts: We say that G has polynomial growth if g S (m) = O (m c ) for some constant c, and we say that G has exponential growth if g S (m) = (c m ) for some constant c &gt; 1. Milnor and Wolf (cf. <ref> [Mil, Wo] </ref>) have shown that a solvable-by-finite group G has polynomial growth if G is nilpotent-by-finite, and has exponential growth otherwise. Combined with the Tits alternative, this shows that a finitely generated linear group G has polynomial growth if G is nilpotent-by-finite, and has exponential growth otherwise.
Reference: [NP] <author> P. M. Neumann, Cheryl E. Praeger: </author> <title> A recognition algorithm for the special linear groups, </title> <type> manuscript, </type> <year> 1990. </year>
Reference-contexts: The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups <ref> [NP, HR, H+94a, H+94b] </ref>. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas.
Reference: [New] <author> M. Newman: </author> <title> Integral Matrices, </title> <journal> Pure and Applied Mathematics, </journal> <volume> vol. 45, </volume> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: By <ref> [New, Theorem IX.7] </ref>, will act faithfully on any subgroup H of G such that (H) is finite. We claim that G is isomorphic to the semidirect product ((G) fi (G)) fi (G) fi det (G).
Reference: [Os] <author> G. </author> <title> Ostheimer: </title> <type> PhD thesis, </type> <institution> Dept. of Mathematics, Rutgers University, </institution> <note> in preparation. </note>
Reference-contexts: Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas. Methods for handling infinite matrix groups, particularly abelian, nilpotent, and solvable groups, are currently being developed by G. Ostheimer <ref> [Os] </ref>. The study of the asymptotic complexity of group theoretic algorithms is much newer than computational group theory, with the oldest papers dating back only 15 years [Ba79, FHL]. As is the case with computational group theory, the area of permutation groups is particularly well studied [Ba91a, KLu, Lu93]. <p> Also, Babai, Beals, and Rockmore [BBR] have given a deterministic polynomial time algorithm to test finiteness. For abelian groups, Babai, Beals, Cai, Ivanyos, and Luks [BBCIL] give deterministic algorithms for both problems, building on work of Cai, Lipton, and Zalcstein [CLZ] and Ge [Ge93a, Ge93b] (G. Ostheimer <ref> [Os] </ref> has developed similar methods independently). We extend both of these lines of research, giving Las Vegas algorithms for groups with abelian subgroups of finite index. <p> We find enough of the imprimitivity structure to decide the Tits alternative, and with some further refinements, we obtain our results for nilpotent-by-finite groups as well. This allows a reduction of the abelian-by-finite case to the abelian and the finite cases separately, for which algorithms exist (cf. <ref> [BBCIL, Ge93a, Os, BBR, BB] </ref>). 2 Preliminaries and background 2.1 Building blocks We say that a group G, together with an encoding of elements of G satisfying conditions 1-4 of Theorem 1.7 is an effective slow-growth encoding.
Reference: [Sch+] <author> Martin Schonert et al.: </author> <title> GAP Groups, Algorithms, and Programming, </title> <institution> Lehrstuhl D fur Mathematik, Rheinisch Westfalische Technische Hochschule, Aachen, Ger-many, </institution> <note> first edition, </note> <year> 1992. </year>
Reference-contexts: Such algorithms have been developed for permutation groups [Si1] (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups [NP, HR, H+94a, H+94b]. Many of these algorithms have been implemented in popular programming packages <ref> [Can, Sch+] </ref>, which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas. Methods for handling infinite matrix groups, particularly abelian, nilpotent, and solvable groups, are currently being developed by G. Ostheimer [Os]. <p> For example, Luks's polynomial time algorithm for computing the composition factors of a permutation group [Lu87] introduced the basic approach used by several improved algorithms [BLS87, BLS88, BS]. An implementation of the [BS] algorithm is included with the group theory package GAP <ref> [Sch+] </ref>. This paper is an initial investigation into algorithms for infinite nonabelian matrix groups. We give a number of polynomial time algorithms for problems which were not previously known to be decidable. These algorithms are unlikely to be practical in their current form except for small dimension.
Reference: [Schr] <author> A. Schrijver: </author> <title> Theory of Linear and Integer Programming, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: In addition, normal generators for ker () can be computed in Las Vegas polynomial time. For finitely generated abelian unipotent groups, [BBCIL] show how to compute an isomor-phism to a lattice. This, combined with known polynomial time algorithms for lattices (cf. <ref> [Schr] </ref>), gives: Corollary 1.6 Constructive membership testing for abelian-by-finite matrix groups over number fields is in Las Vegas polynomial time. In working with matrix groups in characteristic 0, a problem even more basic than membership testing is estimating bit lengths of elements.
Reference: [Si1] <author> C. C. Sims: </author> <title> Computation with Permutation Groups, </title> <booktitle> in: Proc. Second Symposium on Symbolic and Algebraic Manipulation, </booktitle> <editor> (S.R. Petrick, ed.), </editor> <publisher> ACM, </publisher> <address> New York 1971, </address> <pages> 23-28. </pages>
Reference-contexts: 1 Introduction 1.1 Groups and computation For several decades, computers have been used for group theoretic investigations. The design and implementation of practical algorithms for group theory is the domain of computational group theory (cf. [Atk84]). Such algorithms have been developed for permutation groups <ref> [Si1] </ref> (cf. [Bu]), finitely presented groups (cf.[Si2]), and, more recently, finite matrix groups [NP, HR, H+94a, H+94b]. Many of these algorithms have been implemented in popular programming packages [Can, Sch+], which are used by hundreds of researchers in group theory, design theory, coding theory, and other areas. <p> We wish to "lift" these central idempotents of Env (N)=Rad (Env (N )) to central idempotents of Env (N). Let G i G consist of all elements g such that (g) fixes V i . Schreier generators (cf. <ref> [Si1, FHL] </ref>) for G i can be found in polynomial time. Note that extends naturally to an algebra homomorphism from Env (G) to Env ((G)), which we will also denote . <p> Let V i = e i F n . The V i are permuted by G, and G is easily represented as a subdirect product of subgroups of wreath products. Standard techniques <ref> [Si1, FHL] </ref>, together with Propositions 2.4 and 2.5, now allow us to reduce our computational problems to the case r = 1. We assume now that r = 1, so C is a field E of degree d over F for some d dividing n. <p> The action of G on C corresponds to F -automorphisms of C (i.e. automorphisms which fix F ). Therefore the centralizer in G of C has index at most d. Again, techniques of <ref> [Si1, FHL] </ref> allow us to reduce to the case that G acts trivially on C. We now assume that G acts trivially on C, and we wish to embed E = C in the center of Env (G). Such an embedding exists iff G is nilpotent-by-finite.
Reference: [Si2] <author> C. C. Sims: </author> <title> Computation with finitely presented groups, </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference: [Su63] <author> D. Suprunenko: </author> <title> Soluble and nilpotent linear groups, </title> <journal> Transl. of Math. Monographs, </journal> <volume> vol. 9, </volume> <publisher> AMS, </publisher> <address> Rhode Island, </address> <year> 1963. </year>
Reference-contexts: If such direct sum decompositions could be found for imprimitive groups, many computational problems would be reduced to the primitive case. Much is known about the structure of primitive solvable matrix groups <ref> [Su63, Su76] </ref>. However, no general imprimitivity algorithm is known (although Holt et al [H+94b] have developed practical methods for matrix groups over finite fields). A natural combinatorial approach to matrix group imprimitivity is suggested by Atkin-son's algorithm for permutation group imprimitivity [Atk75].
Reference: [Su76] <author> D. Suprunenko: </author> <title> Matrix Groups, </title> <journal> Transl. of Math. Monographs, </journal> <volume> vol. 45, </volume> <publisher> AMS, </publisher> <address> Rhode Island, </address> <year> 1976. </year>
Reference-contexts: If such direct sum decompositions could be found for imprimitive groups, many computational problems would be reduced to the primitive case. Much is known about the structure of primitive solvable matrix groups <ref> [Su63, Su76] </ref>. However, no general imprimitivity algorithm is known (although Holt et al [H+94b] have developed practical methods for matrix groups over finite fields). A natural combinatorial approach to matrix group imprimitivity is suggested by Atkin-son's algorithm for permutation group imprimitivity [Atk75]. <p> These simple components are precisely the minimal ideals found by the Friedl-Ronyai algorithm. If A is the enveloping algebra of a nilpotent group, then something more can be said. We first quote the following result of Suprunenko <ref> [Su76, p. 223, Theorem 2] </ref>: Theorem 2.7 Let F be an arbitrary field. The irreducible components of a nilpotent inde composable subgroup of GL (n; F ) are pairwise equivalent. Corollary 2.8 Let G GL (n; F ) be nilpotent, and let A = Env (G). <p> We now consider the r = 1 case (i.e., we focus our attention on G 1 ). In this case Env (N )=Rad (Env (N )) is a field E, of finite degree d over F . By <ref> [Su76, page 228, Theorem 3] </ref>, there is an embedding of E in M n (F ) such that N acts as E-linear transformations (the embedding of E in M n (F ) gives a natural way of interpreting F n as an n=d-dimensional vector space over E).
Reference: [Ti] <author> J. </author> <title> Tits: Free subgroups in linear groups, </title> <editor> J. </editor> <booktitle> Algebra 20 (1972), </booktitle> <pages> 250-270. </pages>
Reference-contexts: the generators and their inverses represents the identity. (A word is reduced if it contains no substrings of the form gg 1 or g 1 g.) An important question, then, from the point of view of decidability, is which matrix groups contain nonabelian free subgroups? In a celebrated result, Tits <ref> [Ti] </ref> has shown that a finitely generated matrix group either has a nonabelian free subgroup or a solvable subgroup of finite index (the two conditions are mutually exclusive). This dichotomy is known as the "Tits alternative". 1.3 Main results We give an algorithm to decide the Tits alternative.
Reference: [We] <author> B. A. F. Wehrfritz: </author> <title> Infinite linear groups, </title> <journal> Ergebnisse der Math. und ihrer Gren-zgebiete, </journal> <volume> Band 76, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1973. </year> <month> - 16 </month> - 
Reference-contexts: Note that K is an extension field of F . This Corollary will allow us to view F n as a vector space (of smaller dimension) over K. We quote below some well-known results on group algebras (cf. <ref> [We, Chapter 1] </ref>): Theorem 2.11 Suppose that H G GL (n; F ), and G : H is finite. Then if Env (H) is semisimple, so is Env (G). Theorem 2.12 (Clifford) Suppose that G GL (n; F ) with Env (G) semisimple. <p> A linear group is triangularizable if, over some extension field K of F , all elements of the group may be simultaneously put in upper triangular form. A theorem of Mal'cev (cf. <ref> [We, Theorem 3.6] </ref>) states that a solvable linear group has a triangularizable normal subgroup of finite index. Let T be a triangularizable normal subgroup of N of finite index. Then the intersection of the G-conjugates of T is a triangularizable normal subgroup M of G of finite index in G.
Reference: [Wo] <author> J. A. Wolf: </author> <title> Growth of finitely generated solvable groups and curvature of Rieman-nian manifolds, </title> <editor> J. </editor> <booktitle> Differential Geometry 2 (1968), </booktitle> <pages> 421-446. </pages>
Reference-contexts: We say that G has polynomial growth if g S (m) = O (m c ) for some constant c, and we say that G has exponential growth if g S (m) = (c m ) for some constant c &gt; 1. Milnor and Wolf (cf. <ref> [Mil, Wo] </ref>) have shown that a solvable-by-finite group G has polynomial growth if G is nilpotent-by-finite, and has exponential growth otherwise. Combined with the Tits alternative, this shows that a finitely generated linear group G has polynomial growth if G is nilpotent-by-finite, and has exponential growth otherwise.
References-found: 50

