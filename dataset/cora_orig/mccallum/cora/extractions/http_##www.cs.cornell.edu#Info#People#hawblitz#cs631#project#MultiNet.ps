URL: http://www.cs.cornell.edu/Info/People/hawblitz/cs631/project/MultiNet.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/hawblitz/cs631/project/project.html
Root-URL: http://www.cs.cornell.edu
Title: MultiNet A flexible system for distributed multimedia applications  
Author: Chris Hawblitzel Frederick Smith 
Affiliation: Introduction(Description)  
Abstract: A distributed multimedia application consists of a number of endpoints, such as participants in a video conference, and a network joining these endpoints together. Traditional distributed multimedia applications place all of their computing power at the endpoints and treat the network as a black box that passes data from place to place without processing it. In this paper, we present a new system that makes the network an active participant in the application. Nodes in the network can process streams of data as they flow through the network. For instance, an application can use a network node to combine two audio streams, or to change the format of a video stream. Network nodes can also handle control requests (such as join and leave requests) from endpoints in a completely customizable, decentralized way. The MultiNet system allows applications to dynamically reserve CPU time in network nodes and bandwidth along links between nodes. The application can then load Java code into the network nodes to process the applications data as it moves through the network. In order to account for resources (and limit excessive use of resources), MultiNet includes a system of electronic payment. This payment system, along with the type safety of Java, forms a secure environment that ensures system integrity and prevents denial of service attacks. Traditional wide area network distributed applications are limited to commonly available protocols such as TCP/IP. Introducing new protocols over a wide area is a long and arduous task. MultiNet greatly eases the introduction of new protocols, because applications are not limited to a single protocol. Instead, applications can make use of specialized protocols wherever they are available and fall back on more common protocols over links that do not support special protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [AN] <institution> Active Networks(http://www.tns.lcs.mit.edu/activeware) </institution>
Reference-contexts: For example, the mix operation is done at the node where the two streams meet, and only one stream is forwarded to the listeners machine. SoundStream showcases many of the features of active networks. Related Work MIT is leading an effort to deploy a wide area ActiveNet <ref> [AN] </ref>. This project involves many research groups, and is still in the planning stages. A broad ranges of approaches are being considered. MIT have also developed an active-IP option that allows code to be embedded in IP packets.
Reference: [DA] <institution> Delegated Agents(http://www.cs.columbia.edu/dcc/publications/thesis/german/goldszmidt.ps) </institution>
Reference-contexts: At one end of the spectrum, broadcasting companies might be interested in leasing entire computers on a long term basis (perhaps in conjunction with leasing communication lines), and the accounting for this could be done off-line. Delegated Agents <ref> [DA] </ref> (which is being considered as the deployment mechanism for NetScript programs) would be a useful technique for doing the remote code installation and maintenance in this case. MultiNet takes a more dynamic approach, so that resources can be acquired and released by different (possibly anonymous) parties on demand.
Reference: [NS] <institution> NetScript(http://www.cs.columbia.edu/~dasilva/content/netscript) </institution>
Reference-contexts: MIT have also developed an active-IP option that allows code to be embedded in IP packets. This may be extremely flexible but it still requires a considerable amount of structure built on top of it to be useful for the classes of applications we have considered. The NetScript <ref> [NS] </ref> project takes a different approach to multimedia active networks. NetScript is currently based on a specialized scripting language, rather than a general purpose language like Java, and does not track resource usage the way MultiNet does.
Reference: [UN] <institution> U-Net(http://www2.cs.cornell.edu/U-Net/Default.html) </institution>
Reference-contexts: In addition, we have structured our libraries to minimize copying of data to enable low-overhead communication primitives such as U-Net <ref> [UN] </ref>. Finally, native C libraries could be installed on machines ahead of time and presented to applications as resources. Prototype Implementation MultiNet is a prototype system that tries to address the above issues, and enable the motivating applications. MultiNet ships Java bytecode to intermediate nodes.
Reference: [ZD] <author> L. Zhang, S. Deering, et. al., RSVP: </author> <title> A New Resource ReSerVation Protocol, </title> <journal> IEEE Network, </journal> <volume> vol. 7, no. 5, </volume> <pages> pp. 8-18, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Instead, applications can make use of specialized protocols wherever they are available and fall back on more common protocols over links that do not support special protocols. Current multicast protocols and reservation systems, such as IP-multicast and RSVP <ref> [ZD] </ref>, provide some support for distributed multimedia applications, but there is a wide range of applications that could benefit from a more active approach. Motivating Applications Active networks enable many new applications, and are well suited to many others.
References-found: 5

