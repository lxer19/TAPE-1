URL: ftp://ftp.cs.dartmouth.edu/TR/TR94-215.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR94-215/
Root-URL: http://www.cs.dartmouth.edu
Title: Fast Greedy Triangulation Algorithms  
Author: Matthew T. Dickerson Robert L. Scot Drysdale Scott A. McElfresh Emo Welzl 
Date: May 3, 1994  
Address: Middlebury College, Middlebury VT 05753  College, Hanover NH 03755  Berlin  
Affiliation: Department of Mathematics and Computer Science  Department of Mathematics and Computer Science Dartmouth  Institut fur Informatik Freie Universitat  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aggarwal and L. J. Guibas and J. Saxe and P. Shor, </author> <title> "A linear time algorithm for computing the Voronoi diagram of a convex polygon ." Discrete Comput. </title> <journal> Geom. </journal> <month> 4 </month> <year> (1989) </year> <month> 591-604. </month>
Reference-contexts: Recently Levcopoulos and Lingas, and independently Wang, have shown how to do the update step in O (n) time, using a modification of the linear-time algorithm for computing the Voronoi diagram of a convex polygon <ref> [1] </ref>, leading to an O (n 2 ) time and O (n) space algorithm in the worst case [20, 33]. More recently Levcopoulos and Lingas give a modification of this algorithm that is expected to take O (n) time for points uniformly distributed in a square [21].
Reference: [2] <author> J. Bentley, D. Stanat and E. William Jr., </author> <title> "The complexity of finding fixed-radius near neighbors." </title> <note> Information Processing Letters 6 (1977) 209-213. </note>
Reference-contexts: To do this, we generate all pairs of points separated by a distance of at most 2B=fl. This is the fixed-radius-near-neighbors problem <ref> [2, 7] </ref>. In this case a bucketing algorithm by Bentley, Stanat, and Williams can solve the problem in time O (n + m), where m is the number of pairs that lie within 2B=fl of one another.
Reference: [3] <author> R. C. Chang and R. C. T. Lee, </author> <title> "On the average length of Delaunay triangulations." </title> <note> BIT 24 (1984) 269-213. </note>
Reference-contexts: For points lying on a convex polygon or uniformly distributed points in a square, both the GT and the DT are expected to be within a constant factor of the MWT <ref> [21, 3] </ref>. For these reasons a large amount of effort has gone into finding efficient methods for computing the greedy triangulation. Other heuristics for approximating the MWT have also been developed.
Reference: [4] <author> P. L. Chew, </author> <title> "Constrained Delaunay triangulations." </title> <booktitle> Proceedings of the Third Annual ACM Symposium on Computational Geometry (1987) 215-222. </booktitle>
Reference-contexts: An alternate approach to "generate and test" is to generate only compatible edges. One way to do this was discovered independently by Goldman [11] and by Lingas [25]. The method uses the generalized or constrained 2 Delaunay triangulation <ref> [4, 16, 35] </ref>. The constrained Delaunay triangulation is required to include a set of edges E. The rest of the edges in the triangulation have the property that the circumcircle of the vertices of any triangle contains no point visible from all three vertices.
Reference: [5] <author> Dehen, Flach, Sack, and Valiveti, </author> <title> "Analog Parallel Computational Geometry." </title> <booktitle> Proceedings of the 5th Canadian Conference on Computational Geometry (1993) 143-153. </booktitle>
Reference-contexts: A number of the properties of the GT have been discovered [19, 23, 27, 28] and the greedy algorithm has been used in applications <ref> [5, 28] </ref>. A straightforward approach to computing the GT is to compute all n distances, sort them, and then build the GT an edge at a time by examining each pair in order of length and adding or discarding it based on its compatibility with the edges already added.
Reference: [6] <author> M. Dickerson, </author> <title> "Expected rank of the longest edge in the greedy triangulation." </title> <booktitle> Proc. of the 4th Canadian Conference on Computational Geometry (1992) 182-187. </booktitle>
Reference-contexts: Note that our approach also uses this "generate and test" paradigm, and that we gain improvements over previous results by generating fewer edges and supplying more efficient tests. Our approach can be viewed as an extension of Dickerson's <ref> [6] </ref>. He examined the idea of enumerating pairs of points in increasing order by distance, attempting to add them to the greedy triangulation, and quitting when the triangulation is complete. His hope was that only a small fraction of the n edges would have to be examined. <p> Since edge pw 1 cuts off ab and w 1 is outside C, it follows that d (p; w 1 ) ff. 1 an earlier false version of this lemma with ffi = d (p; q)=2 was given in <ref> [6] </ref>. We give the corrected version here. 9 For notational convenience, we also label all the GT edges intersecting segment ab.
Reference: [7] <author> M. Dickerson and R. S. Drysdale, </author> <title> "Fixed-radius near neighbors search algorithms for points and segments." </title> <note> Information Processing Letters 35 (1990) 269-273. 15 </note>
Reference-contexts: To do this, we generate all pairs of points separated by a distance of at most 2B=fl. This is the fixed-radius-near-neighbors problem <ref> [2, 7] </ref>. In this case a bucketing algorithm by Bentley, Stanat, and Williams can solve the problem in time O (n + m), where m is the number of pairs that lie within 2B=fl of one another.
Reference: [8] <author> M. Dickerson, R.L. Drysdale, and J-R Sack, </author> <title> "Simple Algorithms for enumerating interpoint distances and finding k nearest neighbors." </title> <note> International Journal of Computational Geometry and Applications 3 (1992) 221-239. </note>
Reference-contexts: It will dynamically decide when to switch from one phase to the next in an attempt to balance the amount of work done in each phase. In the first phase it generates possible edges in increasing order using an algorithm of Dickerson, Drysdale, and Sack <ref> [8] </ref>. (Algorithms to enumerate the k closest interpoint pairs have been invented by Salowe and by Lenhof and Smid, but because they need to know k in advance they are less appropriate in this context [32, 17].) When the number of pairs of not closed points is proportional to the number
Reference: [9] <author> R. D. Duppe and H. J. Gottschalk, </author> <title> "Automatische Interpolation von Isolinien bei willkuerlich verteilten Stutzpunkten." </title> <note> Allgemeine Vermessungsnachrichten 77 (1970) 423-426. </note>
Reference-contexts: Our algorithms not only work efficiently for more general compact convex regions, but the simplicity of our algorithms and smaller constant factors would make them preferable for most practical-sized problems. 1.2 Background Efficiently computing the greedy triangulation is a problem of long standing, going back at least to 1970 <ref> [9] </ref>. A number of the properties of the GT have been discovered [19, 23, 27, 28] and the greedy algorithm has been used in applications [5, 28].
Reference: [10] <author> P. Gilbert, </author> <title> "New results in planar triangulations." </title> <type> MS Thesis, </type> <institution> University of Illinois, Urbana, IL, </institution> <year> 1979. </year>
Reference-contexts: Our method therefore provides a fi (1) time edge test that requires only fi (1) time to update the structure, fi (n) time for initialization, and fi (n) space. This compares favorably with the previous method of Gilbert <ref> [10] </ref>, which requires fi (log n) time for an edge test, fi (n log n) time for an update, fi (n 2 log n) time for initialization, and fi (n 2 ) space. <p> A naive test would compare each new potential edge to each of the existing edges (of which there are at most O (n)) for an O (n 3 ) time algorithm. Gilbert <ref> [10] </ref> presented a data structure allowing an O (log n) time compatibility test and an O (n log n) time update, thus improving the algorithm's overall time complexity to O (n 2 log n), without adversely affecting space complexity. <p> These approaches make use of the convex hull and a spanning tree to create a single cell, and then use an optimal cell triangulation algorithm generalized from Gilbert's dynamic programming approach for computing the MWT of points on a convex polygon <ref> [10] </ref>. Lingas' method begins with a minimum spanning tree derived from the convex hull and the DT, and provably produces a triangulation at least as good as the DT. <p> Thus we have a data structure that requires O (1) time for an edge test or an update, O (n) time to initialize, and O (n) space. For comparison, we end this subsection by noting that the method of Gilbert <ref> [10] </ref> requires O (n 2 log n) time for initialization, O (n log n) time for update, and O (n 2 ) space. 3 A Necessary Condition for an Edge to be in the Greedy Trian gulation We begin by stating a simple and obvious lemma.
Reference: [11] <author> S. Goldman, </author> <title> "A Space Efficient Greedy Triangulation Algorithm." </title> <note> Information Processing Letters 31 (1989) 191-196. </note>
Reference-contexts: This paper suggested using Gilbert's edge test, so because of intialization and update costs was not able to achieve an asymptotic speedup in the algorithm. An alternate approach to "generate and test" is to generate only compatible edges. One way to do this was discovered independently by Goldman <ref> [11] </ref> and by Lingas [25]. The method uses the generalized or constrained 2 Delaunay triangulation [4, 16, 35]. The constrained Delaunay triangulation is required to include a set of edges E.
Reference: [12] <author> L. Heath and S. Pemmaraju, </author> <title> "New results for the minimum weight triangulation problem." </title> <institution> Virginia Polytechnic Institute and State University, Department of Computer Science, </institution> <note> TR 92-30 (1992). To appear in Algorithmica. </note>
Reference-contexts: Plaisted and Hong have developed a complicated polynomial-time heuristic that is guaranteed to be within a factor of O (log n) of the MWT [29]. The best heuristics known so far are those of Lingas [24] and Heath and Pemmaraju <ref> [12] </ref>. These approaches make use of the convex hull and a spanning tree to create a single cell, and then use an optimal cell triangulation algorithm generalized from Gilbert's dynamic programming approach for computing the MWT of points on a convex polygon [10]. <p> In practice, both methods work extremely well, with that of Heath and Pemmaraju proving slightly better. However, though both methods appear empirically to produce triangulations much better than the GT, both of these algorithms require O (n 3 ) time which is impractical for large point sets. In <ref> [12] </ref>, the authors only report on data for sets of size 50 and smaller. <p> Assume d (r; s) &lt; d (p; q). Then edge (r; s) would have been chosen first and added to the triangulation, and edge (p; q) would not have been added. 2 Heath and Pemmaraju <ref> [12] </ref> describe this as the property of "local optimality." We now give an important (though less obvious) lemma 1 that states a necessary (but not sufficient) condition for an edge to be a greedy triangulation edge. This is a variant of Lemma 3.1 in [21].
Reference: [13] <author> R. Jarvis, </author> <title> "On the identification of the convex hull of a finite set of points in the plane." </title> <note> Information Processing Letters 2 (1973) 18-21. </note>
Reference-contexts: We now show how to construct the CCW chain in a fashion similar to a Jarvis march <ref> [13] </ref>. Let v 1 2 S be the point in triangle 4pov k that minimizes the counterclockwise angle of pv 1 with respect to pq. (If 4pov k is empty, then we have v 1 = v k ). We know that d (p; v 1 ) ffi.
Reference: [14] <author> D. Kirkpatrick, </author> <title> "A note on Delaunay and optimal triangulations." </title> <note> Information Processing Letters 10 (1980) 127-128. </note>
Reference-contexts: For general point sets, the DT can be a factor of (n) larger than the MWT, but the best lower bound for the GT is ( p n) <ref> [14, 18] </ref>. For points lying on a convex polygon or uniformly distributed points in a square, both the GT and the DT are expected to be within a constant factor of the MWT [21, 3].
Reference: [15] <author> G. Klincsek, </author> <title> "Minimal triangulations of polygonal domains." </title> <journal> Ann. Discrete Math. </journal> <pages> 9 121-123. </pages>
Reference-contexts: Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours [34]. Though it has been shown how to compute the MWT in time O (n 3 ) for the special case of n-vertex polygons <ref> [15] </ref>, there are no known efficiently computable algorithms for the MWT in the general case [30]. We therefore seek efficiently computable approximations to the MWT.
Reference: [16] <author> D. T. Lee and A. K. Lin, </author> <title> "Generalized Delaunay triangulations for planar graphs." </title> <journal> Discrete Comput. Geom. </journal> <month> 1 </month> <year> (1986) </year> <month> 201-217. </month>
Reference-contexts: An alternate approach to "generate and test" is to generate only compatible edges. One way to do this was discovered independently by Goldman [11] and by Lingas [25]. The method uses the generalized or constrained 2 Delaunay triangulation <ref> [4, 16, 35] </ref>. The constrained Delaunay triangulation is required to include a set of edges E. The rest of the edges in the triangulation have the property that the circumcircle of the vertices of any triangle contains no point visible from all three vertices.
Reference: [17] <author> H. P. Lenhof, M. Smid, </author> <title> "Enumerating the k-closest pairs optimally." </title> <booktitle> Proceedings of the 33rd FOCS , (1992) 380-386. </booktitle>
Reference-contexts: it generates possible edges in increasing order using an algorithm of Dickerson, Drysdale, and Sack [8]. (Algorithms to enumerate the k closest interpoint pairs have been invented by Salowe and by Lenhof and Smid, but because they need to know k in advance they are less appropriate in this context <ref> [32, 17] </ref>.) When the number of pairs of not closed points is proportional to the number of pairs already examined, it starts over, enumerating pairs of not closed points in increasing order (similar to Step 2 0 above).
Reference: [18] <author> C. Levcopoulos, </author> <title> "An ( p n) Lower Bound for the Nonoptimality of the Greedy Triangulation." </title> <note> Information Processing Letters 25 (1987) 247-251. </note>
Reference-contexts: For general point sets, the DT can be a factor of (n) larger than the MWT, but the best lower bound for the GT is ( p n) <ref> [14, 18] </ref>. For points lying on a convex polygon or uniformly distributed points in a square, both the GT and the DT are expected to be within a constant factor of the MWT [21, 3].
Reference: [19] <author> C. Levcopoulos and A. Lingas, </author> <title> "On Approximating Behavior of the Greedy Triangulation for Convex Polygons." </title> <note> Algorithmica 2 (1987) 175-193. </note>
Reference-contexts: A number of the properties of the GT have been discovered <ref> [19, 23, 27, 28] </ref> and the greedy algorithm has been used in applications [5, 28]. <p> In fact, for convex polygons the GT approximates the MWT to with a constant factor while the DT can be a factor of (n) larger <ref> [19] </ref>. For general point sets, the DT can be a factor of (n) larger than the MWT, but the best lower bound for the GT is ( p n) [14, 18].
Reference: [20] <author> C. Levcopoulos and A. Lingas, </author> <title> "Fast Algorithms for Greedy Triangulation." </title> <note> BIT 32 (1992) 280-296. </note>
Reference-contexts: Lingas, and independently Wang, have shown how to do the update step in O (n) time, using a modification of the linear-time algorithm for computing the Voronoi diagram of a convex polygon [1], leading to an O (n 2 ) time and O (n) space algorithm in the worst case <ref> [20, 33] </ref>. More recently Levcopoulos and Lingas give a modification of this algorithm that is expected to take O (n) time for points uniformly distributed in a square [21]. These methods are elegant, but are significantly more complicated to implement than our methods and should be slower for practical-sized problems.
Reference: [21] <author> C. Levcopoulos and A. Lingas, </author> <title> "Greedy Triangulation Approximates the Minimum Weight Triangulation and Can be Computed in Linear Time in the Average Case." </title> <type> Tech. Report LU-CS-TR:92-105, </type> <institution> Dept. of Computer Science, Lund University, </institution> <year> 1992. </year> <note> A preliminary version of this report appeared in Proc. ICCI '91, LCNS 497. </note>
Reference-contexts: It runs in expected time O (n log 2 n) time on uniformly distributed points, and O (n 2 log n) in the worst case. These algorithms should be compared to an algorithm by Levcopolous and Lingas <ref> [21] </ref>. For the more restricted case of points uniformly distributed in the unit square, their algorithm runs in expected time O (n). Extending it to rectangles is straightforward. Extending it to non-rectangular convex shapes seems doable, but would require non-trivial modications of the algorithm and the analysis. <p> More recently Levcopoulos and Lingas give a modification of this algorithm that is expected to take O (n) time for points uniformly distributed in a square <ref> [21] </ref>. These methods are elegant, but are significantly more complicated to implement than our methods and should be slower for practical-sized problems. One use of the greedy triangulation is as an approximation to the minimum weight triangulation (MWT). <p> For points lying on a convex polygon or uniformly distributed points in a square, both the GT and the DT are expected to be within a constant factor of the MWT <ref> [21, 3] </ref>. For these reasons a large amount of effort has gone into finding efficient methods for computing the greedy triangulation. Other heuristics for approximating the MWT have also been developed. <p> This is a variant of Lemma 3.1 in <ref> [21] </ref>. Lemma 3 Let p; q be a pair of points in a set S. Consider the disc D of radius ffi = d (p; q)=(2 p 5) centered at the midpoint of pq. Let pq divide the disc into two half-disks.
Reference: [22] <author> A. Lingas, </author> <title> "The greedy and Delaunay triangulations are not bad in the average case." </title> <note> Information Processing Letters 22 (1986) 25-31. </note>
Reference: [23] <author> A. Lingas, </author> <title> "On Approximating Behavior and Implementation of the Greedy Triangulation for Convex Planar Point Sets." </title> <booktitle> Proceedings of the Second Annual ACM Symposium on Computational Geometry (1986) 72-79. </booktitle>
Reference-contexts: A number of the properties of the GT have been discovered <ref> [19, 23, 27, 28] </ref> and the greedy algorithm has been used in applications [5, 28]. <p> Given a set S of n points in the plane, a Minimum Weight Triangulation (MWT) of S is a triangulation that minimizes the total length of all edges in the triangulation. The MWT arises in numerical analysis <ref> [23, 26, 30] </ref>. In a method suggested by Yoeli [36] for numerical approximation of bivariate data, the MWT provides a good approximation of the sought-after function surface. Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours [34].
Reference: [24] <author> A. Lingas, </author> <title> "A new heuristic for the minimum weight triangulation." </title> <note> SIAM Journal of Algebraic and Discrete Methods 8 (1987) 646-658. </note>
Reference-contexts: Other heuristics for approximating the MWT have also been developed. Plaisted and Hong have developed a complicated polynomial-time heuristic that is guaranteed to be within a factor of O (log n) of the MWT [29]. The best heuristics known so far are those of Lingas <ref> [24] </ref> and Heath and Pemmaraju [12]. These approaches make use of the convex hull and a spanning tree to create a single cell, and then use an optimal cell triangulation algorithm generalized from Gilbert's dynamic programming approach for computing the MWT of points on a convex polygon [10].
Reference: [25] <author> A. Lingas, </author> <title> "Greedy triangulation can be efficiently implemented in the average case." </title> <booktitle> Proceedings of Graph-Theoretic Concepts in Computer Science (1988) 253-261. </booktitle>
Reference-contexts: An alternate approach to "generate and test" is to generate only compatible edges. One way to do this was discovered independently by Goldman [11] and by Lingas <ref> [25] </ref>. The method uses the generalized or constrained 2 Delaunay triangulation [4, 16, 35]. The constrained Delaunay triangulation is required to include a set of edges E. <p> This gives an O (n 2 log n) time and O (n) space algorithm, thus improving the space complexity of Gilbert's algorithm without affecting the worst case time. Lingas <ref> [25] </ref> shows that his method runs in O (n log 1:5 n) for points chosen uniformly from the unit square.
Reference: [26] <author> E. Lloyd, </author> <title> "On triangulations of a set of points in the plane." </title> <booktitle> Proceedings of the 18th FOCS (1977) 228-240. </booktitle>
Reference-contexts: Given a set S of n points in the plane, a Minimum Weight Triangulation (MWT) of S is a triangulation that minimizes the total length of all edges in the triangulation. The MWT arises in numerical analysis <ref> [23, 26, 30] </ref>. In a method suggested by Yoeli [36] for numerical approximation of bivariate data, the MWT provides a good approximation of the sought-after function surface. Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours [34]. <p> We therefore seek efficiently computable approximations to the MWT. Although neither the GT nor the Delaunay triangulation (DT) yields the MWT <ref> [27, 26] </ref>, the GT appears to be the better of the two at approximating it. In fact, for convex polygons the GT approximates the MWT to with a constant factor while the DT can be a factor of (n) larger [19].
Reference: [27] <author> G. Manacher and A. Zobrist, </author> <title> "Neither the greedy nor the Delaunay triangulation of the planar set approximates the optimal triangulation." </title> <note> IPL 9 (1979) 31-34. 16 </note>
Reference-contexts: A number of the properties of the GT have been discovered <ref> [19, 23, 27, 28] </ref> and the greedy algorithm has been used in applications [5, 28]. <p> We therefore seek efficiently computable approximations to the MWT. Although neither the GT nor the Delaunay triangulation (DT) yields the MWT <ref> [27, 26] </ref>, the GT appears to be the better of the two at approximating it. In fact, for convex polygons the GT approximates the MWT to with a constant factor while the DT can be a factor of (n) larger [19].
Reference: [28] <author> G. Manacher and A. Zobrist, </author> <title> "Probabilistic methods with heaps for fast-average-case greedy algorithms." </title> <booktitle> Advances in Computing Research vol. </booktitle> <month> 1 </month> <year> (1983) </year> <month> 261-278. </month>
Reference-contexts: It is also faster than the probabilistic edge pretest of Manacher and Zobrist <ref> [28] </ref>, and it deterministically decides if a conflict exists rather than just finding a conflict with high probability. We next prove that an edge cannot be greedy if a small disk centered at its midpoint contains a point from S in both half-disks. <p> A number of the properties of the GT have been discovered <ref> [19, 23, 27, 28] </ref> and the greedy algorithm has been used in applications [5, 28]. <p> A number of the properties of the GT have been discovered [19, 23, 27, 28] and the greedy algorithm has been used in applications <ref> [5, 28] </ref>. A straightforward approach to computing the GT is to compute all n distances, sort them, and then build the GT an edge at a time by examining each pair in order of length and adding or discarding it based on its compatibility with the edges already added. <p> He does this by building a segment tree for each point in the set, where the endpoints of the "segments" are the polar angles between the given point and every other point in the set. Manacher and Zobrist <ref> [28] </ref> have since given an O (n 2 ) expected time and O (n) space greedy triangulation algorithm that makes use of a probabilistic method for pretesting compatibility of new edges.
Reference: [29] <author> D. A. Plaisted and J. Hong, </author> <title> "A heuristic triangulation algorithm." </title> <journal> J. </journal> <note> Algorithms 8 (1987) 405-437. </note>
Reference-contexts: Other heuristics for approximating the MWT have also been developed. Plaisted and Hong have developed a complicated polynomial-time heuristic that is guaranteed to be within a factor of O (log n) of the MWT <ref> [29] </ref>. The best heuristics known so far are those of Lingas [24] and Heath and Pemmaraju [12].
Reference: [30] <author> F. Preparata and M. Shamos, </author> <title> "Computational Geometry: an introduction." </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: (1) where O (n 2 log n) is the time required for an optimal comparison-based sort on n distances, f (n) is the time required to test new edges for compatibility, and g (n) is the time required to update the data structure when a new greedy edge is added <ref> [30] </ref>. A naive test would compare each new potential edge to each of the existing edges (of which there are at most O (n)) for an O (n 3 ) time algorithm. <p> Given a set S of n points in the plane, a Minimum Weight Triangulation (MWT) of S is a triangulation that minimizes the total length of all edges in the triangulation. The MWT arises in numerical analysis <ref> [23, 26, 30] </ref>. In a method suggested by Yoeli [36] for numerical approximation of bivariate data, the MWT provides a good approximation of the sought-after function surface. Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours [34]. <p> Though it has been shown how to compute the MWT in time O (n 3 ) for the special case of n-vertex polygons [15], there are no known efficiently computable algorithms for the MWT in the general case <ref> [30] </ref>. We therefore seek efficiently computable approximations to the MWT. Although neither the GT nor the Delaunay triangulation (DT) yields the MWT [27, 26], the GT appears to be the better of the two at approximating it.
Reference: [31] <author> A. Renyi and R. Sulanke, " Uber die konvexe Hulle von n zufallig gewahlten Punkten, I." Z. </author> <note> Wahrsch Verw Gebiete 2 (1963) 75-84. </note>
Reference: [32] <author> J.S. Salowe, </author> <title> "Enumerating distances in space." </title> <journal> Internat. J. Comput. Geometry Appl. </journal> <month> 2 </month> <year> (1992) </year> <month> 49-59 </month>
Reference-contexts: it generates possible edges in increasing order using an algorithm of Dickerson, Drysdale, and Sack [8]. (Algorithms to enumerate the k closest interpoint pairs have been invented by Salowe and by Lenhof and Smid, but because they need to know k in advance they are less appropriate in this context <ref> [32, 17] </ref>.) When the number of pairs of not closed points is proportional to the number of pairs already examined, it starts over, enumerating pairs of not closed points in increasing order (similar to Step 2 0 above).
Reference: [33] <author> C. A. Wang, </author> <title> "Efficiently updating the constrained Delaunay triangulations." </title> <note> BIT 33 (1993) 238-252. </note>
Reference-contexts: Lingas, and independently Wang, have shown how to do the update step in O (n) time, using a modification of the linear-time algorithm for computing the Voronoi diagram of a convex polygon [1], leading to an O (n 2 ) time and O (n) space algorithm in the worst case <ref> [20, 33] </ref>. More recently Levcopoulos and Lingas give a modification of this algorithm that is expected to take O (n) time for points uniformly distributed in a square [21]. These methods are elegant, but are significantly more complicated to implement than our methods and should be slower for practical-sized problems.
Reference: [34] <author> Y.F. Wang and J.K. Aggarwal, </author> <title> "Surface reconstruction and representation of 3-D scenes." </title> <booktitle> Pattern Recognition 19 (1986) 197-207. </booktitle>
Reference-contexts: The MWT arises in numerical analysis [23, 26, 30]. In a method suggested by Yoeli [36] for numerical approximation of bivariate data, the MWT provides a good approximation of the sought-after function surface. Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours <ref> [34] </ref>. Though it has been shown how to compute the MWT in time O (n 3 ) for the special case of n-vertex polygons [15], there are no known efficiently computable algorithms for the MWT in the general case [30]. We therefore seek efficiently computable approximations to the MWT.
Reference: [35] <author> C. A. Wang and L. Schubert, </author> <title> "An optimal algorithm for constructing the Delaunay triangulation of a set of line segment." </title> <booktitle> Proceedings of the Third Annual ACM Symposium on Computational Geometry (1987) 223-232. </booktitle>
Reference-contexts: An alternate approach to "generate and test" is to generate only compatible edges. One way to do this was discovered independently by Goldman [11] and by Lingas [25]. The method uses the generalized or constrained 2 Delaunay triangulation <ref> [4, 16, 35] </ref>. The constrained Delaunay triangulation is required to include a set of edges E. The rest of the edges in the triangulation have the property that the circumcircle of the vertices of any triangle contains no point visible from all three vertices.
Reference: [36] <author> P. Yoeli, </author> <title> "Compilation of data for computer-assisted relief cartography." In Display and Analysis of Spatial Data J.C.Davis and M.J. McCullagh, </title> <editor> editors, </editor> <publisher> John Wiley & Sons, </publisher> <address> NY (1975). </address> <month> 17 </month>
Reference-contexts: Given a set S of n points in the plane, a Minimum Weight Triangulation (MWT) of S is a triangulation that minimizes the total length of all edges in the triangulation. The MWT arises in numerical analysis [23, 26, 30]. In a method suggested by Yoeli <ref> [36] </ref> for numerical approximation of bivariate data, the MWT provides a good approximation of the sought-after function surface. Wang and Aggarwal use a minimum-weight triangulation in their algorithm to reconstruct surfaces from contours [34].
References-found: 36

