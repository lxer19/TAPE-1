URL: ftp://ftp.cs.arizona.edu/schooner/papers/spe-11-97.ps.Z
Refering-URL: http://www.cs.arizona.edu/schooner/html-files/publications.html
Root-URL: http://www.cs.arizona.edu
Email: SUMMARY  
Title: Interconnecting Interactive and Remote Parallel Components Using Schooner  
Author: Zhanliang Chen and Richard D. Schlichting 
Keyword: Key words: parallel computations, distributed systems, interactive program steering, het erogeneous computing, scientific applications  
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: In scientific applications where parallel computation is used to model physical processes, enhancing the user's ability to monitor and control programs executing on remote parallel machines can improve the overall experimental process. Here, a simple approach to providing such facilities is presented in which a scientific visualization system and a remote parallel computation are incorporated into a single metacomputation using the Schooner software interconnection system. This scheme gives the user the ability to, for example, select dynamically the parallel platform to be used, monitor the progress of the computation, and modify parameters. To illustrate this approach, a series of experiments is described in which the AVS scientific visualization system and a parallel neural net code executing on either an Intel Paragon, Sequent Symmetry, or PVM-based Sun Sparcstation cluster are interconnected. These experiments demonstrate not just the feasibility of structuring parallel computations as part of a larger metacomputation using Schooner, but also that these benefits can be achieved with an adjustable cost that can be tuned to the specific needs of the application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Gu, J. Vetter, and K. Schwan, </author> <title> `An annotated bibliography of interactive program steering', </title> <type> Technical Report Technical Report GIT-CC-94-15, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: Another important factor, however, is the degree to which the computation can be monitored and controlled during its execution, sometimes called interactive program steering <ref> [1] </ref>. The ability to fl This work supported in part by the National Science Foundation under grants ASC-9204021 and ASC-9318169. monitor a computationusing a scientific visualization tool, for exampleallows the user to examine intermediate results and parameters related to performance as the computation proceeds. <p> Other systems, such as the Pablo performance analysis environment [13] and ParaGraph [10], are oriented towards analyzing trace data following execution in order to improve performance. Surveys of different aspects of interactive steering can be found in <ref> [32, 1] </ref>. 5.3 Scalability and performance An issue that is largely unaddressed in the current study is how this approach to monitoring and controlling remote computations might scale to parallel computations that have a large number of computational processes and/or generate large amounts of data for display.
Reference: [2] <author> AVS, </author> <title> AVS Developer's Guide (Release 4.0), Advanced Visual Systems Inc., </title> <address> Waltham, MA, </address> <month> May </month> <year> 1992. </year> <title> Part number: </title> <publisher> 320-0013-02, Rev B. </publisher>
Reference-contexts: This paper describes a simple approach to monitoring and controlling parallel computations executing on remote machines. This approach involves incorporating one or more parallel computations and a scientific visualization system such as AVS <ref> [2] </ref> into a single heterogeneous distributed program or metacomputation [3] using the Schooner software interconnection system [4, 5, 6].
Reference: [3] <author> A. Khokhar, V. Prasanna, M. Shaaban, and C. Wang, </author> <title> `Heterogeneous computing: Challenges and opportunities', </title> <journal> IEEE Computer, </journal> <volume> 26(6), </volume> <month> 18-27 </month> <year> (1993). </year>
Reference-contexts: This paper describes a simple approach to monitoring and controlling parallel computations executing on remote machines. This approach involves incorporating one or more parallel computations and a scientific visualization system such as AVS [2] into a single heterogeneous distributed program or metacomputation <ref> [3] </ref> using the Schooner software interconnection system [4, 5, 6]. With this scheme, Schooner is used to transfer data and control transparently with remote procedure call (RPC) semantics between the visualization system executing on a workstation and parallel computations running on a variety of remote platforms. <p> Research on heterogeneity in scientific computing has also addressed related issues such as identifying the optimal partitioning of an application over a given collection of heterogeneous machines <ref> [21, 22, 3, 23, 24] </ref>. Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis [25], which supports a hierarchical composition model for software modules written in C++.
Reference: [4] <author> P. Homer and R.D. Schlichting, </author> <title> `A software platform for constructing scientific applications from heterogeneous resources', </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3), </volume> <month> 301-315 </month> <year> (1994). </year> <note> (Special Issue on Heterogeneous Processing). </note>
Reference-contexts: This paper describes a simple approach to monitoring and controlling parallel computations executing on remote machines. This approach involves incorporating one or more parallel computations and a scientific visualization system such as AVS [2] into a single heterogeneous distributed program or metacomputation [3] using the Schooner software interconnection system <ref> [4, 5, 6] </ref>. With this scheme, Schooner is used to transfer data and control transparently with remote procedure call (RPC) semantics between the visualization system executing on a workstation and parallel computations running on a variety of remote platforms. <p> This paper makes several contributions. First, it demonstrates the validity of this approach by reporting on a series of experiments conducted using a parallel code implementing a short-cut version of the Kohonen self-organizing neural network; these elaborate on early tests reported in <ref> [4] </ref>. These experiments illustrate the steps required to execute the application as a metacomputation, a process that can be applied to a wide variety of parallel computations. Second, it quantifies the performance cost associated with using this approach to achieve improved interaction capabilities. <p> At a lower level, unlike Polylith, UTS is based on a tagged data representation that includes type information, which is useful for dynamic type checking and debugging <ref> [4] </ref>. A number of other projects provide facilities for monitoring and controlling computations during execution.
Reference: [5] <author> P. Homer and R.D. Schlichting, </author> <title> `Using Schooner to support distribution and heterogeneity in the Numerical Propulsion System Simulation project', </title> <journal> Concurrency-Practice and Experience, </journal> <volume> 6(4), </volume> <month> 271-287 </month> <year> (1994). </year>
Reference-contexts: This paper describes a simple approach to monitoring and controlling parallel computations executing on remote machines. This approach involves incorporating one or more parallel computations and a scientific visualization system such as AVS [2] into a single heterogeneous distributed program or metacomputation [3] using the Schooner software interconnection system <ref> [4, 5, 6] </ref>. With this scheme, Schooner is used to transfer data and control transparently with remote procedure call (RPC) semantics between the visualization system executing on a workstation and parallel computations running on a variety of remote platforms. <p> Components can be written in Fortran, C, or C++. The system has been used to handle distribution and heterogeneity in a number of realistic scientific applications. These include the numerical simulation of a jet engine propulsion system <ref> [5, 15] </ref>, a near real-time data analysis program for prototype jet engine hardware [16], and fine-grain modeling of large ecosystems [17]. <p> To support this symmetric strategy, Schooner provides the abstraction of lines, where each line includes a thread of control and naming scope analogous to a normal Schooner metacomputation <ref> [5] </ref>. Lines allow the type of independent communication needed here, but still limit interaction patterns relative to arbitrary message passing to preserve ease of use and implementation simplicity.
Reference: [6] <author> P. Homer and R. Schlichting, </author> <title> The Schooner software distribution, </title> <note> 1995. Software available at URL http://www.cs.arizona.edu/schooner. </note>
Reference-contexts: This paper describes a simple approach to monitoring and controlling parallel computations executing on remote machines. This approach involves incorporating one or more parallel computations and a scientific visualization system such as AVS [2] into a single heterogeneous distributed program or metacomputation [3] using the Schooner software interconnection system <ref> [4, 5, 6] </ref>. With this scheme, Schooner is used to transfer data and control transparently with remote procedure call (RPC) semantics between the visualization system executing on a workstation and parallel computations running on a variety of remote platforms.
Reference: [7] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam, </author> <title> PVM: Parallel Virtual Machine, a Users' Guide and Tutorial for Networked Parallel Computing, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1995. </year> <month> 21 </month>
Reference-contexts: The experiments reported here have involve AVS and a parallel computation running on either an Intel Paragon, a Sequent Symmetry, or a collection of Sun Sparcstations using PVM <ref> [7, 8] </ref> (Figure 1). Although only a single parallel computation is used in this case, the approach generalizes easily to metacomputations in which multiple computational components execute on multiple parallel platforms. <p> Libraries such as PVM <ref> [7, 8] </ref>, p4 [18], MPI [19], and Zipcode [20] provide general message-passing facilities for constructing parallel and distributed programs across collections of machines.
Reference: [8] <author> V.S. Sunderam, </author> <title> `PVM: A framework for parallel distributed computing', </title> <journal> Concurrency-Practice and Expe--rience, </journal> <volume> 2(4), </volume> <month> 315-339 </month> <year> (1990). </year>
Reference-contexts: The experiments reported here have involve AVS and a parallel computation running on either an Intel Paragon, a Sequent Symmetry, or a collection of Sun Sparcstations using PVM <ref> [7, 8] </ref> (Figure 1). Although only a single parallel computation is used in this case, the approach generalizes easily to metacomputations in which multiple computational components execute on multiple parallel platforms. <p> Libraries such as PVM <ref> [7, 8] </ref>, p4 [18], MPI [19], and Zipcode [20] provide general message-passing facilities for constructing parallel and distributed programs across collections of machines.
Reference: [9] <author> G. Eisenhauer, W. Gu, K. Schwan, and N. Mallavarupu, </author> <title> `Falcontowards interactive parallel programs: The on-line steering of a molecular dynamics application', </title> <booktitle> Proceedings of the 3rd Symposium on High Performance Distributed Computing, </booktitle> <address> San Francisco, </address> <month> April </month> <year> 1994, </year> <pages> pp. 26-33. </pages>
Reference-contexts: This includes the ability to select dynamically the parallel platforms to be used, to monitor the progress of the computational components, and to modify parameters as needed. Moreover, while this approach does not support the extensive system and performance monitoring capabilities of other approaches <ref> [9, 10, 11, 12, 13] </ref>, it leverages existing tools and requires only modest effort on the part of the programmer. In short, it represents a potentially large improvement in functionality for only a small investment. This paper makes several contributions. <p> A number of other projects provide facilities for monitoring and controlling computations during execution. These include systems primarily intended for controlling sequential programs on a single machine such as Dynascope [31], as well as systems more oriented towards remote control of scientific applications such as Falcon <ref> [9] </ref>, VASE [11], and Paradyn [12]. When compared to such systems, our approach focuses exclusively on making it easier to display intermediate and final results of a remote parallel computation rather than on collecting and displaying additional data such as system or application performance metrics.
Reference: [10] <author> M. Heath and J. </author> <title> Finger, `Visualizing the performance of parallel programs', </title> <journal> IEEE Software, </journal> <volume> 8(5), </volume> <month> 29-39 </month> <year> (1991). </year>
Reference-contexts: This includes the ability to select dynamically the parallel platforms to be used, to monitor the progress of the computational components, and to modify parameters as needed. Moreover, while this approach does not support the extensive system and performance monitoring capabilities of other approaches <ref> [9, 10, 11, 12, 13] </ref>, it leverages existing tools and requires only modest effort on the part of the programmer. In short, it represents a potentially large improvement in functionality for only a small investment. This paper makes several contributions. <p> These factors make it exceptionally easy to employ by scientific programmers and leverages the existence of standard tools such as AVS. Other systems, such as the Pablo performance analysis environment [13] and ParaGraph <ref> [10] </ref>, are oriented towards analyzing trace data following execution in order to improve performance.
Reference: [11] <author> D. Jablonowski, J. Bruner, B. Bliss, and R. Haber, `VASE: </author> <title> The visualization and application steering environment', </title> <booktitle> Proceedings of Supercomputing '93, </booktitle> <address> Portland, OR, </address> <month> November </month> <year> 1993, </year> <pages> pp. 560-569. </pages>
Reference-contexts: This includes the ability to select dynamically the parallel platforms to be used, to monitor the progress of the computational components, and to modify parameters as needed. Moreover, while this approach does not support the extensive system and performance monitoring capabilities of other approaches <ref> [9, 10, 11, 12, 13] </ref>, it leverages existing tools and requires only modest effort on the part of the programmer. In short, it represents a potentially large improvement in functionality for only a small investment. This paper makes several contributions. <p> A number of other projects provide facilities for monitoring and controlling computations during execution. These include systems primarily intended for controlling sequential programs on a single machine such as Dynascope [31], as well as systems more oriented towards remote control of scientific applications such as Falcon [9], VASE <ref> [11] </ref>, and Paradyn [12]. When compared to such systems, our approach focuses exclusively on making it easier to display intermediate and final results of a remote parallel computation rather than on collecting and displaying additional data such as system or application performance metrics.
Reference: [12] <author> B. Miller, M. Callaghan, J. Cargille, J. Hollingsworth, R.B. Irvin, K. Karavanic, K. Kunchithapadam, and T. Newhall, </author> <title> `The Paradyn parallel performance measurement tool', </title> <journal> IEEE Computer, </journal> <volume> 28(11), </volume> <month> 37-46 </month> <year> (1995). </year>
Reference-contexts: This includes the ability to select dynamically the parallel platforms to be used, to monitor the progress of the computational components, and to modify parameters as needed. Moreover, while this approach does not support the extensive system and performance monitoring capabilities of other approaches <ref> [9, 10, 11, 12, 13] </ref>, it leverages existing tools and requires only modest effort on the part of the programmer. In short, it represents a potentially large improvement in functionality for only a small investment. This paper makes several contributions. <p> These include systems primarily intended for controlling sequential programs on a single machine such as Dynascope [31], as well as systems more oriented towards remote control of scientific applications such as Falcon [9], VASE [11], and Paradyn <ref> [12] </ref>. When compared to such systems, our approach focuses exclusively on making it easier to display intermediate and final results of a remote parallel computation rather than on collecting and displaying additional data such as system or application performance metrics.
Reference: [13] <author> D. Reed, R. Aydt, R. Noe, P. Roth, K. Shields, B. Schwartz, and L. Tavera, </author> <title> `Scalable performance analysis: The Pablo performance analysis environment', </title> <booktitle> Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <year> 1993. </year>
Reference-contexts: This includes the ability to select dynamically the parallel platforms to be used, to monitor the progress of the computational components, and to modify parameters as needed. Moreover, while this approach does not support the extensive system and performance monitoring capabilities of other approaches <ref> [9, 10, 11, 12, 13] </ref>, it leverages existing tools and requires only modest effort on the part of the programmer. In short, it represents a potentially large improvement in functionality for only a small investment. This paper makes several contributions. <p> These factors make it exceptionally easy to employ by scientific programmers and leverages the existence of standard tools such as AVS. Other systems, such as the Pablo performance analysis environment <ref> [13] </ref> and ParaGraph [10], are oriented towards analyzing trace data following execution in order to improve performance.
Reference: [14] <author> R. Hayes, `UTS: </author> <title> A type system for facilitating data communication', </title> <type> Ph.D. Thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1989. </year>
Reference-contexts: An intermediate data representation, which specifies how data is represented as it is transmitted from one component to another. The interface specification language and the intermediate data representation used in Schooner are collectively called the Universal Type System (UTS) <ref> [14] </ref>. 3. Stub compilers, which convert the import and export specifications into C or Fortran stub routines. These stub routines automatically handle the encoding and decoding of data between the UTS intermediate representation and the representation of the host machine. 4.
Reference: [15] <author> A. Afjeh, P. Homer, H. Lewandowski, J. Reed, and R. Schlichting, </author> <title> `Implementing monitoring and zooming in a distributed jet engine simulation', </title> <journal> International Journal of Simulation (1996). </journal> <note> To appear. </note>
Reference-contexts: Components can be written in Fortran, C, or C++. The system has been used to handle distribution and heterogeneity in a number of realistic scientific applications. These include the numerical simulation of a jet engine propulsion system <ref> [5, 15] </ref>, a near real-time data analysis program for prototype jet engine hardware [16], and fine-grain modeling of large ecosystems [17].
Reference: [16] <author> D. Clark, </author> <title> `Development of an on-line platform for test-cell integrated computational fluids and visualization', </title> <booktitle> Proceedings of the 1995 International Advanced Visual Systems Users Group Conference, </booktitle> <address> Boston, </address> <month> April </month> <year> 1995, </year> <pages> pp. 300-320. </pages>
Reference-contexts: The system has been used to handle distribution and heterogeneity in a number of realistic scientific applications. These include the numerical simulation of a jet engine propulsion system [5, 15], a near real-time data analysis program for prototype jet engine hardware <ref> [16] </ref>, and fine-grain modeling of large ecosystems [17]. The last is an on-going project that involves multiple parallel components, and is discussed further in section 5. 2.2 AVS Scientific Visualization System AVS is a graphics system for visualizing results from scientific computations. <p> Note, however, that this overhead has not proved to be an issue in other experiments, even in cases where large amounts of data have been transferred under near real-time conditions <ref> [16] </ref>. In addition, other aspects of Schooner are designed to support scalability. For example, communication between metacomputation components is done directly rather than through an intermediate process, except on the first call to an exported procedure when the Manager is invoked to determine the location of the exporting component.
Reference: [17] <author> G. Ball, B. Zeigler, M. Marefat, P. Guertin, and R. Schlichting, </author> <title> `Problems of multi-resolution integration in dynamic simulation', </title> <booktitle> Proceedings of the 3rd International Conference/Workshop on Integrating GIS and Environmental Modeling, </booktitle> <address> Sante Fe, NM, </address> <month> January </month> <year> 1996. </year> <title> CD-ROM published by National Center for Geographic Information and Analysis, </title> <address> Santa Barbara, CA. </address>
Reference-contexts: The system has been used to handle distribution and heterogeneity in a number of realistic scientific applications. These include the numerical simulation of a jet engine propulsion system [5, 15], a near real-time data analysis program for prototype jet engine hardware [16], and fine-grain modeling of large ecosystems <ref> [17] </ref>. The last is an on-going project that involves multiple parallel components, and is discussed further in section 5. 2.2 AVS Scientific Visualization System AVS is a graphics system for visualizing results from scientific computations.
Reference: [18] <author> R. Butler and E. Lusk, </author> <title> `User's guide to the p4 parallel programming system', </title> <type> Technical Report ANL-92/17, </type> <institution> Argonne National Laboratory, </institution> <month> Oct </month> <year> 1992. </year>
Reference-contexts: Libraries such as PVM [7, 8], p4 <ref> [18] </ref>, MPI [19], and Zipcode [20] provide general message-passing facilities for constructing parallel and distributed programs across collections of machines. While their inherent flexibility makes it possible to connect visualization tools and parallel computations as done here, in general, their orientation is towards constructing parallel codes rather than higher-level metacomputations.
Reference: [19] <author> Message Passing Interface Forum, </author> <title> Document for a Standard Message-Passing Interface, </title> <month> March </month> <year> 1994. </year>
Reference-contexts: Libraries such as PVM [7, 8], p4 [18], MPI <ref> [19] </ref>, and Zipcode [20] provide general message-passing facilities for constructing parallel and distributed programs across collections of machines. While their inherent flexibility makes it possible to connect visualization tools and parallel computations as done here, in general, their orientation is towards constructing parallel codes rather than higher-level metacomputations.
Reference: [20] <author> A. Skjellum, </author> <title> `Scalable libraries in a heterogeneous environment', </title> <booktitle> Proceedings of the 2nd International Symposium on High-Performance Distributed Computing, </booktitle> <address> Spokane, WA, </address> <month> July </month> <year> 1993, </year> <pages> pp. 13-20. </pages>
Reference-contexts: Libraries such as PVM [7, 8], p4 [18], MPI [19], and Zipcode <ref> [20] </ref> provide general message-passing facilities for constructing parallel and distributed programs across collections of machines. While their inherent flexibility makes it possible to connect visualization tools and parallel computations as done here, in general, their orientation is towards constructing parallel codes rather than higher-level metacomputations.
Reference: [21] <author> S. Chen, M. Eshaghian, A. Khokhar, and M. Shaaban, </author> <title> `A selection theory and methodology for heterogeneous supercomputing', </title> <booktitle> Proceedings of the Workshop on Heterogeneous Processing '93, </booktitle> <address> Newport Beach, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 15-22. </pages>
Reference-contexts: Research on heterogeneity in scientific computing has also addressed related issues such as identifying the optimal partitioning of an application over a given collection of heterogeneous machines <ref> [21, 22, 3, 23, 24] </ref>. Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis [25], which supports a hierarchical composition model for software modules written in C++.
Reference: [22] <author> R. F. Freund and H. J. Siegel, </author> <title> `Guest editors' introduction: Heterogeneous processing', </title> <journal> IEEE Computer, </journal> <volume> 26(6), </volume> <month> 13-17 </month> <year> (1993). </year>
Reference-contexts: Research on heterogeneity in scientific computing has also addressed related issues such as identifying the optimal partitioning of an application over a given collection of heterogeneous machines <ref> [21, 22, 3, 23, 24] </ref>. Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis [25], which supports a hierarchical composition model for software modules written in C++.
Reference: [23] <author> S. Scott and J. Potter, </author> <title> `A selection theory and methodology for heterogeneous supercomputing', </title> <booktitle> Proceedings of the Workshop on Heterogeneous Processing '94, </booktitle> <address> Cancun, Mexico, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Research on heterogeneity in scientific computing has also addressed related issues such as identifying the optimal partitioning of an application over a given collection of heterogeneous machines <ref> [21, 22, 3, 23, 24] </ref>. Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis [25], which supports a hierarchical composition model for software modules written in C++.
Reference: [24] <author> M. Wang, S. Kim, M. Nichols, R. Freund, H. Siegel, and W. Nation, </author> <title> `Augmenting the optimal selection theory for superconcurrency.', </title> <booktitle> Proceedings of the Workshop on Heterogeneous Processing '92, </booktitle> <address> Beverly Hills, CA, </address> <month> March </month> <year> 1992, </year> <pages> pp. 13-21. </pages>
Reference-contexts: Research on heterogeneity in scientific computing has also addressed related issues such as identifying the optimal partitioning of an application over a given collection of heterogeneous machines <ref> [21, 22, 3, 23, 24] </ref>. Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis [25], which supports a hierarchical composition model for software modules written in C++.
Reference: [25] <author> J. Magee, N. Dulay, and J. Kramer, `Regis: </author> <title> A constructive development environment for distributed programs', </title> <journal> Distributed Systems Engineering, </journal> <volume> 1(5), </volume> <month> 304-312 </month> <year> (1994). </year> <month> 22 </month>
Reference-contexts: Schooner is also related to programming environments and configuration management systems that allow the user to construct higher-level distributed applications from collections of individual components. One such system is Regis <ref> [25] </ref>, which supports a hierarchical composition model for software modules written in C++. Regis uses the Darwin specification language and is oriented towards static configuration, although lazy instantiation is used to provide some dynamic aspects.
Reference: [26] <author> M. Zimmermann and O. Drobnik, </author> <title> `Specification and implementation of reconfigurable distributed applica-tions', </title> <booktitle> Proceedings of the Second International Workshop on Configurable Distributed Systems, </booktitle> <address> Pittsburgh, PA, </address> <year> 1994, </year> <pages> pp. 23-34. </pages>
Reference-contexts: Unlike Schooner, however, such systems provide only limited support for heterogeneity and are not designed for integrating existing tools such as AVS with remote parallel computations. A similar system is described in <ref> [26] </ref>. The Polylith [27], Polygen [28] and Surgeon [29] family of systems also supports heterogeneous interconnectivity of the type implemented by Schooner. Polylith provides a software bus that can be viewed abstractly as a backplane into which different software modules are plugged.
Reference: [27] <author> J. Purtilo, </author> <title> `The Polylith software bus', </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(1), </volume> <month> 151-174 </month> <year> (1994). </year>
Reference-contexts: Unlike Schooner, however, such systems provide only limited support for heterogeneity and are not designed for integrating existing tools such as AVS with remote parallel computations. A similar system is described in [26]. The Polylith <ref> [27] </ref>, Polygen [28] and Surgeon [29] family of systems also supports heterogeneous interconnectivity of the type implemented by Schooner. Polylith provides a software bus that can be viewed abstractly as a backplane into which different software modules are plugged.
Reference: [28] <author> J. Callahan and J. Purtilo, </author> <title> `A packaging system for heterogeneous execution environments', </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(6), </volume> <month> 626-635 </month> <year> (1991). </year>
Reference-contexts: Unlike Schooner, however, such systems provide only limited support for heterogeneity and are not designed for integrating existing tools such as AVS with remote parallel computations. A similar system is described in [26]. The Polylith [27], Polygen <ref> [28] </ref> and Surgeon [29] family of systems also supports heterogeneous interconnectivity of the type implemented by Schooner. Polylith provides a software bus that can be viewed abstractly as a backplane into which different software modules are plugged.
Reference: [29] <author> C. Hofmeister, E. White, and J. Purtilo, `Surgeon: </author> <title> A packager for dynamically reconfigurable distributed applications', </title> <journal> IEE Software Engineering Journal, </journal> <volume> 8(2), </volume> <month> 95-101 </month> <year> (1993). </year>
Reference-contexts: Unlike Schooner, however, such systems provide only limited support for heterogeneity and are not designed for integrating existing tools such as AVS with remote parallel computations. A similar system is described in [26]. The Polylith [27], Polygen [28] and Surgeon <ref> [29] </ref> family of systems also supports heterogeneous interconnectivity of the type implemented by Schooner. Polylith provides a software bus that can be viewed abstractly as a backplane into which different software modules are plugged.
Reference: [30] <author> J. Purtilo, R. Snodgrass, and A. Wolf, </author> <title> `Software bus organization: Reference model and comparison of two existing systems', </title> <type> Technical Report 59113-911122-13TM, </type> <institution> Bell Laboratories, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Surgeon extends these concepts with support for dynamic reconfiguration. In both cases, a module interconnection language (MIL) is used to describe various aspects of the modules, including invocation interfaces. 18 Schooner provides many of the properties of a software bus <ref> [30] </ref>, although in general it is simpler and more focused on interconnection issues in scientific applications than Polylith and its associated systems. For example, Schooner does not support automatic compilation, and the UTS interface description language is simpler than the Polylith MIL.
Reference: [31] <author> R. Sosic, `Dynascope: </author> <title> A tool for program directing', </title> <booktitle> Proceedings of the SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1992, </year> <pages> pp. 12-21. </pages>
Reference-contexts: A number of other projects provide facilities for monitoring and controlling computations during execution. These include systems primarily intended for controlling sequential programs on a single machine such as Dynascope <ref> [31] </ref>, as well as systems more oriented towards remote control of scientific applications such as Falcon [9], VASE [11], and Paradyn [12].
Reference: [32] <author> M. Burnett, R. Hossli, T. Pulliam, B. VanVoorst, and X. Yang, </author> <title> `Toward visual programming languages for steering scientific computations', </title> <journal> IEEE Computational Science and Engineering, </journal> <volume> 1(4), </volume> <month> 44-62 </month> <year> (1994). </year> <month> 23 </month>
Reference-contexts: Other systems, such as the Pablo performance analysis environment [13] and ParaGraph [10], are oriented towards analyzing trace data following execution in order to improve performance. Surveys of different aspects of interactive steering can be found in <ref> [32, 1] </ref>. 5.3 Scalability and performance An issue that is largely unaddressed in the current study is how this approach to monitoring and controlling remote computations might scale to parallel computations that have a large number of computational processes and/or generate large amounts of data for display.
References-found: 32

