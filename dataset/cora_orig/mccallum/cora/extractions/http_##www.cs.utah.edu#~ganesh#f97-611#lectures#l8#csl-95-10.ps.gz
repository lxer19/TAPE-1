URL: http://www.cs.utah.edu/~ganesh/f97-611/lectures/l8/csl-95-10.ps.gz
Refering-URL: http://www.cs.utah.edu/~ganesh/f97-611/lectures/l8/
Root-URL: 
Email: fRushby,Dave SCg@csl.sri.com  
Title: A Less Elementary Tutorial for the PVS Specification and Verification System 1  
Author: J. M. Rushby and D. W. J. Stringer-Calvert 
Note: 1 This work was partially sponsored by NASA Langley under Contract NAS1-20334. 2 Main affiliation:  
Date: August 22, 1996  
Address: Menlo Park CA 94025 USA  York, U.K.  
Affiliation: Computer Science Laboratory SRI International  Department of Computer Science, University of  
Pubnum: Technical Report CSL-95-10  
Abstract-found: 0
Intro-found: 1
Reference: [AH96] <author> M. Archer and C. Heitmeyer. </author> <title> Mechanical verification of timed automata: A case study. </title> <booktitle> In IEEE Real-Time Technology and Applications Symp. </booktitle> <address> (RTAS'96), Boston MA, June 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification [CRSS94, RSS96, SM96] (including integration with model checking [RSS95]), and for concurrent and real-time systems <ref> [Sha93b, Hoo94, AH96] </ref> (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [ALW93] <author> M. Aagaard, M. E. Leeser, and P. J. Windley. </author> <title> Toward a super duper hardware tactic. </title> <editor> In Jeffrey J. Joyce and Carl-Johan H. Seger, editors, </editor> <booktitle> Higher Order Logic Theorem Proving and its Applications (6th International Workshop, </booktitle> <volume> HUG '93), </volume> <pages> pages 399-412, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1993. </year> <booktitle> Number 780 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Here . . . IF-MATCH is either NIL (no instantiation), T (yes instantiation), ALL (all instances) or BEST (best instance) depending on which version of INST? is required. a The term ``super-duper" here is a reference to <ref> [ALW93] </ref>. This tells us that the optional arguments to grind are defs, theories, rewrites, exclude, if-match, and updates? (upper/lower case distinctions are not important). Parentheses are used to indicate default values (so the default value for if-match is t).
Reference: [But93] <author> Ricky W. Butler. </author> <title> An elementary tutorial on formal specification and verification using PVS 2. </title> <type> NASA Technical Memorandum 108991, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> June </month> <year> 1993. </year> <month> Revised June </month> <year> 1995. </year> <title> Available, with PVS specification files, from http://atb-www.larc.nasa.gov/ftp/larc/PVS-tutorial; use only files marked "revised.". </title>
Reference-contexts: This tutorial introduces some of the higher-level PVS proof strategies and explains, by example, how to use them effectively. The remainder of this chapter provides a brief introduction to the PVS verification system. Chapter two presents an extension to a tutorial by Ricky Butler <ref> [But93] </ref>, describing how more automated proofs can be developed for his examples. <p> PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction <ref> [But93, COR + 95] </ref>, plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95]. <p> Chapter 2 Seat Reservation Problem This chapter develops proofs for an example due to Ricky Butler <ref> [But93] </ref>. Butler's tutorial also develops proofs for the same theorems, but in a low level, step-by-step manner. Here, we show how the more powerful rules and strategies of PVS may be used to produce higher level, more automated proofs.
Reference: [CD96] <author> Judith Crow and Ben L. Di Vito. </author> <title> Formalizing Space Shuttle software requirements. </title> <booktitle> In First Workshop on Formal Methods in Software Practice (FMSP '96), </booktitle> <pages> pages 40-48, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year> <institution> Association for Computing Machinery. </institution>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements <ref> [Di 96, CD96] </ref>, IEEE standards for floating point [CM95] and multimedia collaborations [RRV95]. A comprehensive bibliography of applications performed in PVS is available [Rus]. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations.
Reference: [CM95] <author> Victor A. Carre~no and Paul S. Miner. </author> <title> Specification of the IEEE-854 floating-point standard in HOL and PVS. </title> <booktitle> In HOL95: Eighth International Workshop on Higher-Order Logic Theorem Proving and Its Applications, </booktitle> <address> Aspen Grove, UT, </address> <month> September </month> <year> 1995. </year> <title> Category B proceedings, </title> <note> available from http://lal.cs.byu.edu/lal/hol95/Bprocs/ indexB.html. </note>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point <ref> [CM95] </ref> and multimedia collaborations [RRV95]. A comprehensive bibliography of applications performed in PVS is available [Rus]. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations. Versions in Allegro Lisp for Sun and IBM workstations are available by anonymous ftp.
Reference: [COR + 95] <author> Judy Crow, Sam Owre, John Rushby, Natarajan Shankar, and Mandayam Srivas. </author> <title> A tutorial introduction to PVS. </title> <booktitle> Presented at WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida, </address> <month> April </month> <year> 1995. </year> <title> Available, with specification files, </title> <note> from http://www.csl.sri.com/wift-tutorial.html. </note>
Reference-contexts: PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction <ref> [But93, COR + 95] </ref>, plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [Cou93] <author> Costas Courcoubetis, </author> <title> editor. Computer-Aided Verification, </title> <booktitle> CAV '93, volume 697 of Lecture Notes in Computer Science, </booktitle> <address> Elounda, Greece, June/July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference: [CRSS94] <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> Effective theorem proving for hardware verification. </title> <booktitle> In Kumar and Kropf [KK94], </booktitle> <pages> pages 203-222. </pages>
Reference-contexts: PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification <ref> [CRSS94, RSS96, SM96] </ref> (including integration with model checking [RSS95]), and for concurrent and real-time systems [Sha93b, Hoo94, AH96] (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [Di 96] <author> Ben L. Di Vito. </author> <title> Formalizing new navigation requirements for NASA's space shuttle. </title> <booktitle> In Formal Methods Europe FME '96, </booktitle> <pages> pages 160-178, </pages> <address> Oxford, UK, </address> <month> March </month> <year> 1996. </year> <booktitle> Number 1051 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements <ref> [Di 96, CD96] </ref>, IEEE standards for floating point [CM95] and multimedia collaborations [RRV95]. A comprehensive bibliography of applications performed in PVS is available [Rus]. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations.
Reference: [EGMS79] <author> B. Elspas, M. Green, M. Moriconi, and R. Shostak. </author> <title> A JOVIAL verifier. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> January </month> <year> 1979. </year> <note> 83 84 Bibliography </note>
Reference-contexts: That line includes the Jovial Verification System <ref> [EGMS79] </ref>, the Hierarchical Development Methodology (HDM) [RLS79, SLR78], STP [SSMS82], and Ehdm [MSR85, RvHO91]. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
Reference: [GM82] <author> J. A. Goguen and J. Meseguer. </author> <title> Security policies and security models. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <address> Oakland, CA, April 1982. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Using automation to reduce labor, we are able to verify this example with just seven user-supplied proof commands. Noninterference was introduced by Goguen and Meseguer <ref> [GM82] </ref> to provide a formal foundation for the specification and analysis of security policies that are concerned with "information flow," rather than mere access control.
Reference: [GM84] <author> J. A. Goguen and J. Meseguer. </author> <title> Inference control and unwinding. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 75-86, </pages> <address> Oakland, CA, April 1984. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Chapter two presents an extension to a tutorial by Ricky Butler [But93], describing how more automated proofs can be developed for his examples. The third and final chapter uses a verification of Goguen and Meseguer's unwinding theorem for noninterference security policies <ref> [GM84] </ref> to illustrate some PVS induction strategies, and also demonstrates how PVS can be used to formalize a pencil-and-paper development. 1.2 PVS PVS is the most recent in a line of specification languages, theorem provers, and verification systems developed at SRI, dating back over 20 years. <p> (APPLY-EXTENSIONALITY :HIDE? T) (STEW :LAZY-MATCH T)) ops.Cancel_putative: proved complete ("" (GRIND)) ops.Make_putative: proved complete ("" (GRIND)) ops.Lookup_putative: proved complete ("" (STEW :LEMMAS ("Next_seat_ax_3" "epsilon_ax [seat_assignment]"))) 52 Chapter 3 Noninterference and the Unwinding Theorem The example undertaken in this chapter is a verification of the unwinding theorem for noninterference security policies <ref> [GM84] </ref>. One purpose of this example is to demonstrate use of PVS for a specification involving recursive functions and a proof by induction, neither of which were required for the previous example. <p> Noninterference and the Unwinding Theorem We now have the local conditions on individual state transitions that are sufficient to guarantee security. This result is a version of the unwinding theorem of Goguen and Meseguer <ref> [GM84] </ref>. Theorem 1 (Unwinding Theorem) Let ; be a policy and M a view-partitioned system that is 1. output-consistent, 2. step-consistent, and 3. locally respects ;. Then M is secure for ;.
Reference: [Har96] <author> John Harrison. </author> <title> A Mizar mode for HOL. </title> <editor> In Joakim von Wright, Jim Grundy, and John Harrison, editors, </editor> <title> Theorem Proving in Higher Order Logics: </title> <booktitle> 9th International Conference, </booktitle> <volume> TPHOLs '96, </volume> <pages> pages 203-220, </pages> <address> Turku, Finland, </address> <month> August </month> <year> 1996. </year> <note> Number 1125 in Lecture Notes in Computer Science, Springer-Verlag. To appear. </note>
Reference: [Hoo94] <author> Jozef Hooman. </author> <title> Correctness of real time systems by construction. </title> <editor> In Langmaack et al. </editor> <booktitle> [LdV94], </booktitle> <pages> pages 19-40. </pages>
Reference-contexts: PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification [CRSS94, RSS96, SM96] (including integration with model checking [RSS95]), and for concurrent and real-time systems <ref> [Sha93b, Hoo94, AH96] </ref> (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [HY87] <author> J. Thomas Haigh and William D. Young. </author> <title> Extending the noninterference version of MLS for SAT. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(2):141-150, </volume> <month> February </month> <year> 1987. </year>
Reference-contexts: Each definition or proof is followed by its corresponding treatment in PVS. Our derivation is not based on the original presentation of Goguen and Meseguer, but rather follows that of Haigh and Young <ref> [HY87] </ref>. 3.1 Machines We model a computer system by a conventional finite-state automaton. Definition 1 A system (or machine) M is composed of 53 54 Chapter 3.
Reference: [KK94] <editor> Ramayya Kumar and Thomas Kropf, editors. </editor> <booktitle> Theorem Provers in Circuit Design (TPCD '94), volume 910 of Lecture Notes in Computer Science, </booktitle> <address> Bad Herrenalb, Germany, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [LdV94] <editor> H. Langmaack, W.-P. de Roever, and J. Vytopil, editors. </editor> <booktitle> Formal Techniques in Real-Time and Fault-Tolerant Systems, volume 863 of Lecture Notes in Computer Science, Lubeck, </booktitle> <address> Germany, </address> <month> September </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [Lei69] <author> A. C. Leisenring. </author> <title> Mathematical Logic and Hilbert's "-Symbol. </title> <publisher> Gordon and Breach Science Publishers, </publisher> <address> New York, NY, </address> <year> 1969. </year>
Reference-contexts: This is specified in the defining axiom for epsilon, given in the PVS prelude as follows. 4 Drew Dean of Princeton University first reported this. 5 The name comes from Hilbert's use of the symbol " (epsilon) for this operator <ref> [Lei69] </ref>. 14 Chapter 2. Seat Reservation Problem epsilon_ax: AXIOM (EXISTS x: p (x)) =&gt; p (epsilon (p)) Notice that if p is unsatisfiable (or, interpreted as a set, is empty), then epsilon (p) is some arbitrary value of type T.
Reference: [LR93] <author> Patrick Lincoln and John Rushby. </author> <title> Formal verification of an algorithm for interactive consistency under a hybrid fault model. </title> <booktitle> In Courcoubetis [Cou93], </booktitle> <pages> pages 292-304. </pages>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms <ref> [LR93, LR94] </ref> and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95].
Reference: [LR94] <author> Patrick Lincoln and John Rushby. </author> <title> Formal verification of an interactive consistency algorithm for the Draper FTP architecture under a hybrid fault model. </title> <booktitle> In COMPASS '94 (Proceedings of the Ninth Annual Conference on Computer Assurance), </booktitle> <pages> pages 107-120, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1994. </year> <institution> IEEE Washington Section. </institution>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms <ref> [LR93, LR94] </ref> and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95].
Reference: [MSR85] <author> P. Michael Melliar-Smith and John Rushby. </author> <title> The Enhanced HDM system for specification and verification. </title> <booktitle> In Proc. VerkShop III, </booktitle> <pages> pages 41-43, </pages> <address> Watsonville, CA, </address> <month> February </month> <year> 1985. </year> <booktitle> Published as ACM Software Engineering Notes, </booktitle> <volume> Vol. 10, No. 4, </volume> <month> Aug. 85. </month>
Reference-contexts: That line includes the Jovial Verification System [EGMS79], the Hierarchical Development Methodology (HDM) [RLS79, SLR78], STP [SSMS82], and Ehdm <ref> [MSR85, RvHO91] </ref>. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
Reference: [ORS95] <author> Sam Owre, John Rushby, and Natarajan Shankar. </author> <title> Analyzing tabular and state-transition specifications in PVS. </title> <type> Technical Report SRI-CSL-95-12, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> July </month> <year> 1995. </year> <title> Available, with specification files, </title> <note> from http://www.csl.sri.com/csl-95-12.html. </note>
Reference-contexts: PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications <ref> [ORS95] </ref>.
Reference: [ORSS94] <author> S. Owre, J. M. Rushby, N. Shankar, and M. K. Srivas. </author> <title> A tutorial on using PVS for hardware verification. </title> <booktitle> In Kumar and Kropf [KK94], </booktitle> <pages> pages 258-279. </pages>
Reference-contexts: PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware <ref> [ORSS94] </ref>, abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [OSR93a] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> The PVS Specification Language. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in early 1996. </note>
Reference-contexts: This allows many similar theorems to be proved efficiently, permits proofs to be adjusted economically to follow changes in requirements or design, and encourages the development of readable proofs. PVS is fully documented in separate manuals for the language <ref> [OSR93a] </ref>, prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [OSR93b] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> User Guide for the PVS Specification and Verification System. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in early 1996. Bibliography 85 </note>
Reference-contexts: This allows many similar theorems to be proved efficiently, permits proofs to be adjusted economically to follow changes in requirements or design, and encourages the development of readable proofs. PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system <ref> [OSR93b] </ref>, and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [PD96] <author> Seungjoon Park and David L. Dill. </author> <title> Verification of the FLASH cache coherence protocol by aggregation of distributed transactions. </title> <booktitle> In 8th ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 288-296, </pages> <address> Padua, Italy, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: This is simply infeasible without massively automated theorem proving. Advances over the last few years have brought theorem proving to the point where it is now feasible to tackle such industrial-scale problems <ref> [SM96, RSS96, PD96] </ref>. The third motivation is prompted by the observation that formal specifications are seldom static: they change as flaws are corrected, as new requirements emerge, and as improved approaches and designs are discovered. <p> Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol <ref> [PD96] </ref>, and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95]. A comprehensive bibliography of applications performed in PVS is available [Rus]. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations.
Reference: [RLS79] <author> L. Robinson, K. N. Levitt, and B. A. Silverberg. </author> <title> The HDM Handbook. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> June </month> <year> 1979. </year> <title> Three Volumes. </title>
Reference-contexts: That line includes the Jovial Verification System [EGMS79], the Hierarchical Development Methodology (HDM) <ref> [RLS79, SLR78] </ref>, STP [SSMS82], and Ehdm [MSR85, RvHO91]. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
Reference: [RRV95] <author> Sreeranga Rajan, P. Venkat Rangan, and Harrick M. Vin. </author> <title> A formal basis for structured multimedia collaborations. </title> <booktitle> In Proceedings of the 2nd IEEE International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 194-201, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations <ref> [RRV95] </ref>. A comprehensive bibliography of applications performed in PVS is available [Rus]. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations. Versions in Allegro Lisp for Sun and IBM workstations are available by anonymous ftp.
Reference: [RSS95] <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas. An integration of model-checking with automated proof checking. </title> <editor> In Pierre Wolper, editor, </editor> <booktitle> Computer-Aided Verification, CAV '95, </booktitle> <pages> pages 84-97, </pages> <address> Liege, Belgium, </address> <month> June </month> <year> 1995. </year> <booktitle> Volume 939 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification [CRSS94, RSS96, SM96] (including integration with model checking <ref> [RSS95] </ref>), and for concurrent and real-time systems [Sha93b, Hoo94, AH96] (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [RSS96] <author> H. Rue, N. Shankar, and M. K. Srivas. </author> <title> Modular verification of SRT division. </title> <editor> In Rajeev Alur and Thomas A. Henzinger, editors, </editor> <booktitle> Computer-Aided Verification, CAV '96, </booktitle> <pages> pages 123-134, </pages> <address> New Brunswick, NJ, </address> <booktitle> July/August 1996. Number 1102 in Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This is simply infeasible without massively automated theorem proving. Advances over the last few years have brought theorem proving to the point where it is now feasible to tackle such industrial-scale problems <ref> [SM96, RSS96, PD96] </ref>. The third motivation is prompted by the observation that formal specifications are seldom static: they change as flaws are corrected, as new requirements emerge, and as improved approaches and designs are discovered. <p> PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification <ref> [CRSS94, RSS96, SM96] </ref> (including integration with model checking [RSS95]), and for concurrent and real-time systems [Sha93b, Hoo94, AH96] (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [Rud92] <author> Piotr Rudnicki. </author> <title> An overview of the MIZAR project. </title> <booktitle> In Proceedings of the 1992 Workshop on Types for Proofs and Programs, </booktitle> <pages> pages 311-330, </pages> <address> B-astad, Sweden, </address> <month> June </month> <year> 1992. </year> <note> The complete proccedings are available from http://www.cs.chalmers.se/ pub/cs-reports/baastad.92/, this particular paper is also available separately at http://web.cs.ualberta.ca/~piotr/Mizar/MizarOverview.ps. </note>
Reference: [Rus] <author> John Rushby. </author> <title> PVS Bibliography. </title> <address> Menlo Park, CA. </address> <note> Constantly updated; available at http://www.csl.sri.com/pvs-bib.html. </note>
Reference-contexts: Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95]. A comprehensive bibliography of applications performed in PVS is available <ref> [Rus] </ref>. 1.3 Obtaining PVS PVS is implemented in Common Lisp and runs on several modern Unix workstations. Versions in Allegro Lisp for Sun and IBM workstations are available by anonymous ftp.
Reference: [Rus92] <author> John Rushby. Noninterference, </author> <title> transitivity, and channel-control security policies. </title> <type> Technical Report SRI-CSL-92-2, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: It turns out that the specification we will construct for security only makes sense if the security policy ; is transitive, in addition to reflexive. (This point is discussed at length in <ref> [Rus92] </ref>.) Thus, we really need to amend the declaration of security policy to read something like the following. 2 6 refl_trans_rel: TYPE = (reflexive?[domain] AND transitive?[domain]) CONTAINING eq [domain] security_policy: refl_trans_rel Unfortunately, the specification of refl trans rel is not type-correct: the AND connective properly applies to booleans whereas here we <p> As mentioned earlier, this definition of security (and in particular, the definition of the purge function) only makes sense if the relation ; is transitive. See <ref> [Rus92] </ref> for an extended discussion of this topic and a formally verified treatment of intransitive interference policies. 2 PVS Treatment We introduce dom as an uninterpreted function, then define a recursive function that performs the "purge" operation; in order to reproduce the traditional notation, we overload the infix operator / to
Reference: [RvHO91] <author> John Rushby, Friedrich von Henke, and Sam Owre. </author> <title> An introduction to formal specification and verification using Ehdm. </title> <type> Technical Report SRI-CSL-91-2, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: That line includes the Jovial Verification System [EGMS79], the Hierarchical Development Methodology (HDM) [RLS79, SLR78], STP [SSMS82], and Ehdm <ref> [MSR85, RvHO91] </ref>. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
Reference: [Sha93a] <author> N. Shankar. </author> <title> Abstract datatypes in PVS. </title> <type> Technical Report SRI-CSL-93-9, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1993. </year> <month> Revised July </month> <year> 1996. </year>
Reference-contexts: PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types <ref> [Sha93a] </ref>, and tabular and requirements specifications [ORS95]. <p> PVS datatypes such as this are a convenient way to specify certain data structures that are "freely generated" by a collection of constructor operations <ref> [Sha93a] </ref>. Here, lists are freely generated by the constructors null and cons. Similarly, the abstract datatype stacks is freely generated by the constructors empty and push (in fact, stacks and lists are isomorphic).
Reference: [Sha93b] <author> Natarajan Shankar. </author> <title> Verification of real-time systems using PVS. </title> <booktitle> In Courcoubetis [Cou93], </booktitle> <pages> pages 280-291. </pages>
Reference-contexts: PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification [CRSS94, RSS96, SM96] (including integration with model checking [RSS95]), and for concurrent and real-time systems <ref> [Sha93b, Hoo94, AH96] </ref> (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [SLR78] <author> Jay M. Spitzen, Karl N. Levitt, and Lawrence Robinson. </author> <title> An example of hierarchical design and proof. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 1064-1075, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: That line includes the Jovial Verification System [EGMS79], the Hierarchical Development Methodology (HDM) <ref> [RLS79, SLR78] </ref>, STP [SSMS82], and Ehdm [MSR85, RvHO91]. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
Reference: [SM95] <author> Mandayam K. Srivas and Steven P. Miller. </author> <title> Formal verification of the AAMP5 microprocessor. </title> <editor> In Michael G. Hinchey and Jonathan P. Bowen, editors, </editor> <booktitle> Applications of Formal Methods, Prentice Hall International Series in Computer Science, chapter 7, </booktitle> <pages> pages 125-180. </pages> <publisher> Prentice Hall, </publisher> <address> Hemel Hempstead, UK, </address> <year> 1995. </year>
Reference-contexts: Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor <ref> [SM95] </ref>, verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95].
Reference: [SM96] <author> Mandayam K. Srivas and Steven P. Miller. </author> <title> Applying formal verification to the AAMP5 microprocessor: A case study in the industrial use of formal methods. </title> <booktitle> Formal Methods in Systems Design, </booktitle> <volume> 8(2) </volume> <pages> 153-188, </pages> <month> March </month> <year> 1996. </year> <note> 86 Bibliography </note>
Reference-contexts: This is simply infeasible without massively automated theorem proving. Advances over the last few years have brought theorem proving to the point where it is now feasible to tackle such industrial-scale problems <ref> [SM96, RSS96, PD96] </ref>. The third motivation is prompted by the observation that formal specifications are seldom static: they change as flaws are corrected, as new requirements emerge, and as improved approaches and designs are discovered. <p> PVS has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification <ref> [CRSS94, RSS96, SM96] </ref> (including integration with model checking [RSS95]), and for concurrent and real-time systems [Sha93b, Hoo94, AH96] (including a transparent embedding of the duration calculus [SS94]). Applications have included microcode 4 Chapter 1.
Reference: [SO96] <author> N. Shankar and Sam Owre. </author> <title> PVS Semantics. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1996. </year> <note> In preparation. </note>
Reference-contexts: This allows many similar theorems to be proved efficiently, permits proofs to be adjusted economically to follow changes in requirements or design, and encourages the development of readable proofs. PVS is fully documented in separate manuals for the language [OSR93a], prover [SOR93], system [OSR93b], and semantics <ref> [SO96] </ref>. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [SOR93] <author> N. Shankar, S. Owre, and J. M. Rushby. </author> <title> The PVS Proof Checker: A Reference Manual. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <note> A new edition for PVS Version 2 is expected in early 1996. </note>
Reference-contexts: This allows many similar theorems to be proved efficiently, permits proofs to be adjusted economically to follow changes in requirements or design, and encourages the development of readable proofs. PVS is fully documented in separate manuals for the language [OSR93a], prover <ref> [SOR93] </ref>, system [OSR93b], and semantics [SO96]. Tutorials provide a general introduction [But93, COR + 95], plus more specialized treatments for hardware [ORSS94], abstract data types [Sha93a], and tabular and requirements specifications [ORS95].
Reference: [SS94] <author> Jens U. Skakkebk and N. Shankar. </author> <title> Towards a Duration Calculus proof assistant in PVS. </title> <editor> In Langmaack et al. </editor> <booktitle> [LdV94], </booktitle> <pages> pages 660-679. </pages>
Reference-contexts: has been installed at hundreds of sites in North America, Europe, and Asia; recent work has developed PVS methodologies for highly automated hardware verification [CRSS94, RSS96, SM96] (including integration with model checking [RSS95]), and for concurrent and real-time systems [Sha93b, Hoo94, AH96] (including a transparent embedding of the duration calculus <ref> [SS94] </ref>). Applications have included microcode 4 Chapter 1. Introduction verification for a commercial microprocessor [SM95], verification of fault-tolerant algorithms [LR93, LR94] and a cache-coherence protocol [PD96], and formalization of Space Shuttle requirements [Di 96, CD96], IEEE standards for floating point [CM95] and multimedia collaborations [RRV95].
Reference: [SSMS82] <author> R. E. Shostak, R. Schwartz, and P. M. Melliar-Smith. STP: </author> <title> A mechanized logic for specification and verification. </title> <editor> In D. Loveland, editor, </editor> <booktitle> 6th International Conference on Automated Deduction (CADE), </booktitle> <address> New York, NY, </address> <year> 1982. </year> <booktitle> Volume 138 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: That line includes the Jovial Verification System [EGMS79], the Hierarchical Development Methodology (HDM) [RLS79, SLR78], STP <ref> [SSMS82] </ref>, and Ehdm [MSR85, RvHO91]. PVS stands for "Prototype Verification System," because it was built partly as a lightweight prototype to explore "next generation" technology for Ehdm, though it has now outgrown that role.
References-found: 43

