URL: http://www.cs.ucsd.edu/users/mihir/papers/kc.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/complexity-papers.html
Root-URL: http://www.cs.ucsd.edu
Email: E-mail: faiello,venkieg@bellcore.com  E-mail: mihir@cs.ucsd.edu  
Title: Average| Perfect, Statistical and Logarithmic  in the average or oracle entropy senses, is in BPP NP  
Author: William Aiello Mihir Bellare Ramarathnam Venkatesan* 
Address: 445 South St. Morristown, NJ 07960.  San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  
Affiliation: Group, Bellcore,  Department of Computer Science Engineering, Mail Code 0114, University of California at  
Date: March 22, 1995  
Note: Knowledge on the  Math and Cryptography Research  
Abstract: An abridged version of this paper appears in Proceedings of the Twenty Seventh Annual Symposium Abstract We initiate a broad investigation of the average measure of knowledge complexity suggested by Goldreich and Petrank [GP], and of a new and related measure of oracle entropy that we suggest here. Our main results are as follows. We provide a new characterization of statistical zero-knowledge, as the class of languages leaking at most a negligible amount of perfect knowledge under the oracle entropy measure. We show that the oracle entropy of a language is always within an additive constant of its average knowledge complexity, thereby relating the new measure in a strong way to the older one. Finally, we show that the class of languages having proofs of logarithmic knowledge complexity, In addition, we bound the amount of (perfect) knowledge leaked by perfect zero-knowledge proofs in which the simulator runs in expected polynomial time by 1=p(n) for an arbitrarily large polynomial p(n). We also note some relations of oracle entropy to free bits in PCP. Finally, we provide protocols to prove highly accurate estimates of set sizes in constant rounds| these may be useful in other contexts. on the Theory of Computing, ACM, 1995.
Abstract-found: 1
Intro-found: 1
Reference: [AH] <author> W. Aiello and J. H -astad. </author> <title> Perfect Zero-Knowledge can be Recognized in Two Rounds. </title> <journal> J. Computer and System Sciences 42, </journal> <pages> 327-345, </pages> <year> 1991. </year>
Reference-contexts: Thus P x (R) is at least 2 3m leading to the claimed bound on the oracle entropy. 8 Protocols for set sizes Background. The theorems of <ref> [F, AH] </ref> show that SZK hv AM [2] " coAM [2]. We know that SKC av hv [O (log n)] BPP NP . Can this be extended to SKC av hv [O (log n)] AM [2] " coAM [2]? The proofs of [F, AH] involve constant round protocols in which the <p> The theorems of <ref> [F, AH] </ref> show that SZK hv AM [2] " coAM [2]. We know that SKC av hv [O (log n)] BPP NP . Can this be extended to SKC av hv [O (log n)] AM [2] " coAM [2]? The proofs of [F, AH] involve constant round protocols in which the prover claims and proves bounds on the sizes of certain sets defined by the protocol, with a certain amount of precision. <p> If 4e=(k + 1) 1 * 2, then the probability that the verifier accepts is at most 1 1=e (1 2=e)* + 1=k + 1=2 k . To cover the entire range of 1 * we can use the bound in <ref> [AH] </ref> who showed that the probability that the verifier accepts when it uses a pair-wise independent hash function is at most gU=(fi 1) g 0 U=fi, where g = 3 + 5 and g 0 = g + 0:1.
Reference: [B] <author> L. Babai. </author> <title> Trading Group Theory for Randomness. </title> <booktitle> Proceedings of the Seventeenth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1985. </year>
Reference-contexts: We let supp (Q) denote the support of Q, namely the set of all strings appearing with positive probability. A simple observation which will be useful later is: Lemma 6.1 If B supp (Q) then Pr 1 <ref> [ B ] </ref> Pr 2 [ B ]. Proof: Just note that Q (!) 2 q for all ! 2 supp (Q). The key fact about Q is that its support is quite large: it has density at least 2 . <p> We let supp (Q) denote the support of Q, namely the set of all strings appearing with positive probability. A simple observation which will be useful later is: Lemma 6.1 If B supp (Q) then Pr 1 <ref> [ B ] </ref> Pr 2 [ B ]. Proof: Just note that Q (!) 2 q for all ! 2 supp (Q). The key fact about Q is that its support is quite large: it has density at least 2 . <p> For any *(n) and q (n) satisfying 1=*(n); log (1=q (n)) poly (n) there exists a (*; q)-lower bound protocol. (The standard protocol of Babai <ref> [B] </ref> works for 1=*(n) = O (1). A protocol for the general case can be derived by applying the Stockmeyer's cross product trick [St]. Alternatively, Babai and Moran provide appropriate protocols more directly [BM].) Upper bound protocol.
Reference: [BM] <author> L. Babai and S. Moran. Arthur Merlin Games: </author> <title> a Randomized Proof System and a Hierarchy of Complexity Classes. </title> <journal> JCSS, </journal> <volume> Vol. 36, 1988, No. 2, </volume> <pages> pp 254-276. </pages>
Reference-contexts: A protocol for the general case can be derived by applying the Stockmeyer's cross product trick [St]. Alternatively, Babai and Moran provide appropriate protocols more directly <ref> [BM] </ref>.) Upper bound protocol. The following is a slight variation on the upper bound protocol of Fortnow [F]. We assume here that all sets have size at least 2 n fl for some fl &gt; 0.
Reference: [BP] <author> M. Bellare and E. Petrank. </author> <title> Making Zero-Knowledge Provers Efficient. </title> <booktitle> Proceedings of the Twenty Fourth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1992. </year>
Reference-contexts: Proofs of logarithmic KC. We investigate the (time) complexity of languages of logarithmic knowledge complexity in the average or oracle entropy senses. We show that such languages are in BPP NP . This extends <ref> [BP, GOP] </ref> who showed the same containment for the smaller class of languages of logarithmic KC in the strict, or worst case sense. <p> to our work| it was conceivable that a cheating verifier could extract a polynomial amount of perfect knowledge from a statistical ZK proof, under any measure. 4 As indicated above, Theorem 1.4 extends the result SKC wc hv [O (log n)] BPP NP of [GOP], which in turn built on <ref> [BP] </ref>. Our proof will exploit several techniques underlying the previous works. In particular, the BPP NP complexity comes again from the use of the uniform generation procedure of [BP], and part of our analysis will extend an elegant argument of [GOP]. 1.5 Discussion Researchers have always considered perfect and statistical knowledge <p> indicated above, Theorem 1.4 extends the result SKC wc hv [O (log n)] BPP NP of [GOP], which in turn built on <ref> [BP] </ref>. Our proof will exploit several techniques underlying the previous works. In particular, the BPP NP complexity comes again from the use of the uniform generation procedure of [BP], and part of our analysis will extend an elegant argument of [GOP]. 1.5 Discussion Researchers have always considered perfect and statistical knowledge complexity as inherently different, reflected in the the two hierarchies corresponding to these notions. <p> We then follow the paradigm of the proof of <ref> [BP, GOP] </ref>. Namely, we consider the simulation based prover P fl corresponding to M . We generalize the main lemma of [GOP] to see that (P fl ; V ) accepts with probability O (2 2 (n) ) when x 2 L. <p> Namely, we consider the simulation based prover P fl corresponding to M . We generalize the main lemma of [GOP] to see that (P fl ; V ) accepts with probability O (2 2 (n) ) when x 2 L. We conclude by applying the uniform generation procedure of <ref> [BP] </ref> to emulate the (P fl ; V ) system in BPP NP . More notation. Let r (n) be the number of coins tossed by the simulator S fl . <p> Now, notice that P fl 's computation can be viewed as follows. Pick ! at random from h and compute the conversation c = M 1 (!). This has the form h : m : s for some m; s. Now return m. Thus the uniform generation procedure of <ref> [BP] </ref> can be used to implement P fl in probabilistic polynomial time with an NP oracle. (There is some error, but it is exponentially small and can be neglected.) Thus in BPP NP we can run the (P fl ; V ) system on an input x and see whether or
Reference: [BS] <author> M. Bellare and M. Sudan. </author> <title> Improved non-approximability results. </title> <booktitle> Proceedings of the Twenty Sixth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: We observe that the oracle entropy is related not to the amount of communication, as measured by the number of query bits, but can be bounded by the number of free bits (cf. <ref> [FK, BS] </ref>) used in the checking. In particular, [BS] show that for any NP language L there is a PCP verifier V such that the following is true. V takes input x and a parameter m, and achieves error O (2 m ) using 3m free bits. <p> We observe that the oracle entropy is related not to the amount of communication, as measured by the number of query bits, but can be bounded by the number of free bits (cf. [FK, BS]) used in the checking. In particular, <ref> [BS] </ref> show that for any NP language L there is a PCP verifier V such that the following is true. V takes input x and a parameter m, and achieves error O (2 m ) using 3m free bits. <p> We claim that Info fl!V L (n) 3m. Thus, roughly, the verifier gets about 3 bits of knowledge per 1=2 factor of the error, on inputs in the language. To prove our claim we need to exhibit an appropriate oracle simulator V 0 for the <ref> [BS] </ref> verifier V . On input x 2 L and a random string R of V , the oracle simulator will pick 3m bits at random and view these as the free bits.
Reference: [DDPY] <author> A. De Santis, G. Di Crescenzo, G. Persiano and M. Yung. </author> <title> On monotone formula closure of SZK. </title> <booktitle> Proceedings of the Thirty Fifth Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1994. </year>
Reference: [FK] <author> U. Feige and J. Kilian. </author> <title> Two prover protocols Low error at affordable rates. </title> <booktitle> Proceedings of the Twenty Sixth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: We observe that the oracle entropy is related not to the amount of communication, as measured by the number of query bits, but can be bounded by the number of free bits (cf. <ref> [FK, BS] </ref>) used in the checking. In particular, [BS] show that for any NP language L there is a PCP verifier V such that the following is true. V takes input x and a parameter m, and achieves error O (2 m ) using 3m free bits.
Reference: [F] <author> L. Fortnow. </author> <title> The Complexity of Perfect Zero-Knowledge. </title> <booktitle> Advances in Computing Re--search Vol. </booktitle> <volume> 18, </volume> <editor> Ed. S. Micali, </editor> <year> 1989. </year>
Reference-contexts: Thus P x (R) is at least 2 3m leading to the claimed bound on the oracle entropy. 8 Protocols for set sizes Background. The theorems of <ref> [F, AH] </ref> show that SZK hv AM [2] " coAM [2]. We know that SKC av hv [O (log n)] BPP NP . Can this be extended to SKC av hv [O (log n)] AM [2] " coAM [2]? The proofs of [F, AH] involve constant round protocols in which the <p> The theorems of <ref> [F, AH] </ref> show that SZK hv AM [2] " coAM [2]. We know that SKC av hv [O (log n)] BPP NP . Can this be extended to SKC av hv [O (log n)] AM [2] " coAM [2]? The proofs of [F, AH] involve constant round protocols in which the prover claims and proves bounds on the sizes of certain sets defined by the protocol, with a certain amount of precision. <p> Lower bound protocols of sufficiently high accuracy exist, but the existing upper bound protocol of <ref> [F] </ref> only provides constant factor accuracy. Here we provide a constant round protocol for upper bounding the size of a set with 1 + 1= poly (n) factor precision. <p> A protocol for the general case can be derived by applying the Stockmeyer's cross product trick [St]. Alternatively, Babai and Moran provide appropriate protocols more directly [BM].) Upper bound protocol. The following is a slight variation on the upper bound protocol of Fortnow <ref> [F] </ref>. We assume here that all sets have size at least 2 n fl for some fl &gt; 0. This ensures that there is at least one prime between fi and fi (1 + *) for 1=* = n O (1) . k-Upper Bound Protocol 18 Input: s, U .
Reference: [GP] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying Knowledge Complexity. </title> <booktitle> Proceedings of the Thirty Second Annual Symposium on the Foundations of Computer Science, IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction The study of zero-knowledge [GMR] has proven to be fruitful for both complexity theory and cryptography. Quantifying knowledge above zero was suggested by [GMR]. Definitions for knowledge complexity (KC) emerged more recently, in the work of Goldreich and Petrank <ref> [GP] </ref>. Two measures of KC where defined in [GP]| a worst case measure and an average measure. Subsequent work has concentrated on the former. This paper launches a broad investigation of the latter. <p> 1 Introduction The study of zero-knowledge [GMR] has proven to be fruitful for both complexity theory and cryptography. Quantifying knowledge above zero was suggested by [GMR]. Definitions for knowledge complexity (KC) emerged more recently, in the work of Goldreich and Petrank <ref> [GP] </ref>. Two measures of KC where defined in [GP]| a worst case measure and an average measure. Subsequent work has concentrated on the former. This paper launches a broad investigation of the latter. <p> amount of perfect knowledge, in the oracle entropy sense. (Roughly, this means that a perfect simulation can be produced at the cost of revealing a negligible amount of information.) We also show that the amount of perfect knowledge revealed by a statistical ZK proof under the average oracle measure of <ref> [GP] </ref> is about one bit. These results capture a basic intuition about the notion of statistical zero-knowledge, namely that statistical is "almost perfect." Oracle entropy. The new measure of oracle entropy is defined in the oracle framework of [GP] by appropriately blending Shannon type measures with simulation. <p> revealed by a statistical ZK proof under the average oracle measure of <ref> [GP] </ref> is about one bit. These results capture a basic intuition about the notion of statistical zero-knowledge, namely that statistical is "almost perfect." Oracle entropy. The new measure of oracle entropy is defined in the oracle framework of [GP] by appropriately blending Shannon type measures with simulation. Our main theorem concerning it shows that the new measure is within an additive constant of the more familiar average measure, which is important in indicating that we have not strayed too far from older notions. <p> Obviously SZK SZK hv and PZK PZK hv . 2 Knowledge complexity. We will consider three types, or measures, of knowledge complex-ity: the strict (or worst case) measure, the average measure, and the entropy based measure. (The first two are due to <ref> [GP] </ref> and the third is defined in this paper). Like zero-knowledge, each has its statistical and perfect versions. For (n) poly (n) and type 2 fwc; av; eng we let PKC type [(n)] (resp. <p> Discussion. As the above indicates, whether one considers knowledge which is zero or above, one has two kinds: statistical and perfect. The key ingredient in defining these is the simulator. In the zero-knowledge case it is a probabilistic, polynomial time machine [GMR]; to measure knowledge complexity, <ref> [GP] </ref> equip it with an oracle and then measure how much information the simulator gets from the oracle. When the output distribution of the simulator is exactly the view of a verifier the knowledge is perfect; when the two distributions have negligible statistical difference the knowledge is statistical. <p> Theorem 4.5 considers similar questions for knowledge complexity greater than zero. The proofs of Theorems 1.1 and 1.2 are in Section 4. Oracle entropy. Recall that the intuition for measuring knowledge in the oracle framework of <ref> [GP] </ref> is that the knowledge leaked in a proof is measured by the information that a simulator needs from an oracle to provide a simulation. The strict and average KC measures of [GP] are obtained by measuring the oracle information by the number, and average number, of bits communicated to the <p> Oracle entropy. Recall that the intuition for measuring knowledge in the oracle framework of <ref> [GP] </ref> is that the knowledge leaked in a proof is measured by the information that a simulator needs from an oracle to provide a simulation. The strict and average KC measures of [GP] are obtained by measuring the oracle information by the number, and average number, of bits communicated to the simulator, respectively. We use instead an approach akin to Shannon's for defining the entropy of a source. <p> A simulator is a PPT machine S, which, following <ref> [GP] </ref>, is required to produce an output with probability at least 1=2, and otherwise indicate failure by outputting a special symbol fail. <p> An interactive proof (P; V ) for L is SZK (resp. PZK) if for every verifier V 0 there is a statistical (resp. perfect) ZK (P; V 0 ) simulator. The oracle framework of KC. In the knowledge complexity setting, the simulator is allowed access to an oracle <ref> [GP] </ref>. It is instructive to make the discussion of oracle interaction independent of the setting; in particular this will help when we discuss oracle entropy. So consider a PPT machine A () which takes an input x and has access to an oracle fl. <p> PKC) in a particular sense if each verifier V 0 possesses a SKC (resp. PKC) (n) simulator in this sense. The notation for the complexity classes corresponding to all these definitions was provided in Section 1.2. On conventions about oracles. The formal definition in <ref> [GP] </ref> asks that the oracle answers be bits. Here we allow any non-empty string. Allowing only bits seems restrictive. For example, suppose the oracle is returning an integer i whose length we don't know a priori. <p> In the latter approach, one measures only the information content of the oracle's reply, so that the manner in which the communication is encoded does not affect the knowledge complexity. 6 3 Oracle entropy As previous discussions have indicated, the motivation that <ref> [GP] </ref> provided for the oracle framework is that it provides a "reduction:" the task of measuring how much "knowledge" P gave V 0 is reduced to the task of measuring how much "information" S needed from fl in order to reproduce the view of V 0 . <p> Hopefully, the latter measuring task is simpler than the former, due to the simpler setting. In this light, <ref> [GP] </ref> have chosen the simplest measures of the amount of information provided by the oracle, namely the number of bits communicated, or the average of this, as defined above. <p> We present a perfect (P; V 0 ) simulator S fl 1 1 such that AvCom fl 1 !S 1 4 + (n). Our construction uses universal hash functions and is influenced by the proof of <ref> [GP, Proposition 3.2] </ref>. By assumption there is an oracle simulator S 0 such that Info fl!S r 0 (n) be the number of coins it tosses, and let r (n) be the number of coins tossed by S. <p> We transform the system so that the above is true. We first simplify the simulator in two ways. First, it can be made to produce an output with probability one, rather than one-half, by <ref> [GP, Proposition 3.8] </ref>. Second, the oracle can be made deterministic, by having the simulator supply it with coins. The KC after these transformations increases but is still O (log n), and the simulation is still statistical. <p> In particular an important fact will be that the support of the simulator induced distribution Q has density at least 2 . Based on Q we will define a PPT machine called a "guessing simulator" M which is a generalization of the simulator in the fraction definition of <ref> [GP] </ref>| rather than producing the right distribution on a set of density 2 , it produces the right distribution when its coins are drawn according to Q. We then follow the paradigm of the proof of [BP, GOP].
Reference: [GOP] <author> O. Goldreich, R. Ostrovsky and E. Petrank. </author> <title> Computational complexity and knowledge complexity. </title> <booktitle> Proceedings of the Twenty Sixth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Proofs of logarithmic KC. We investigate the (time) complexity of languages of logarithmic knowledge complexity in the average or oracle entropy senses. We show that such languages are in BPP NP . This extends <ref> [BP, GOP] </ref> who showed the same containment for the smaller class of languages of logarithmic KC in the strict, or worst case sense. <p> See Section 8 for discussion of the motivations and the protocols. 1.4 Previous work Our consideration of the perfect KC of statistical ZK was motivated by a result of <ref> [GOP] </ref> which implies that SZK hv PKC wc hv [O (log n)]. As the notation indicates, this result is about the worst case measure but only for the honest verifier. Moving to oracle entropy and the average measure have provided two gains. <p> Here nothing was known prior to our work| it was conceivable that a cheating verifier could extract a polynomial amount of perfect knowledge from a statistical ZK proof, under any measure. 4 As indicated above, Theorem 1.4 extends the result SKC wc hv [O (log n)] BPP NP of <ref> [GOP] </ref>, which in turn built on [BP]. Our proof will exploit several techniques underlying the previous works. In particular, the BPP NP complexity comes again from the use of the uniform generation procedure of [BP], and part of our analysis will extend an elegant argument of [GOP]. 1.5 Discussion Researchers have <p> n)] BPP NP of <ref> [GOP] </ref>, which in turn built on [BP]. Our proof will exploit several techniques underlying the previous works. In particular, the BPP NP complexity comes again from the use of the uniform generation procedure of [BP], and part of our analysis will extend an elegant argument of [GOP]. 1.5 Discussion Researchers have always considered perfect and statistical knowledge complexity as inherently different, reflected in the the two hierarchies corresponding to these notions. This dichotomy which treats knowledge lost and the imperfectness of the simulation as inherently different is in some ways non-intuitive. <p> The following is a simple fact about probability distributions, noted also in <ref> [GOP] </ref>. Lemma 4.2 Suppose (P 1 ; V ) is a SZK proof for L with error *(n). Then there exists a samplable prover P 2 such that (P 2 ; V ) is a SZK proof for L with error *(n) + n !(1) . <p> We then follow the paradigm of the proof of <ref> [BP, GOP] </ref>. Namely, we consider the simulation based prover P fl corresponding to M . We generalize the main lemma of [GOP] to see that (P fl ; V ) accepts with probability O (2 2 (n) ) when x 2 L. <p> We then follow the paradigm of the proof of [BP, GOP]. Namely, we consider the simulation based prover P fl corresponding to M . We generalize the main lemma of <ref> [GOP] </ref> to see that (P fl ; V ) accepts with probability O (2 2 (n) ) when x 2 L. We conclude by applying the uniform generation procedure of [BP] to emulate the (P fl ; V ) system in BPP NP . More notation. <p> So instead we prove that things work relatively well even under the uniform distribution. Specifically, the following lemma considers the interaction of P fl with the given (honest) verifier V and provides an analogue of <ref> [GOP, Lemma 3.1] </ref>. Lemma 6.4 If x 2 L then the probability that P fl can convince V to accept is at least (1=4) 2 2 . Note that (1=4) 2 2 1= poly (n) by assumption. <p> We are now ready to begin the proof of Lemma 6.4. We follow and generalize the argument of <ref> [GOP, Lemma 3.1] </ref>. The idea is to replace their ratios of sets with ratios of probabilities which involve the two different distributions, the uniform and Q.
Reference: [GMR] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <journal> SIAM J. Comput. </journal> <volume> 18(1), </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The study of zero-knowledge <ref> [GMR] </ref> has proven to be fruitful for both complexity theory and cryptography. Quantifying knowledge above zero was suggested by [GMR]. Definitions for knowledge complexity (KC) emerged more recently, in the work of Goldreich and Petrank [GP]. <p> 1 Introduction The study of zero-knowledge <ref> [GMR] </ref> has proven to be fruitful for both complexity theory and cryptography. Quantifying knowledge above zero was suggested by [GMR]. Definitions for knowledge complexity (KC) emerged more recently, in the work of Goldreich and Petrank [GP]. Two measures of KC where defined in [GP]| a worst case measure and an average measure. Subsequent work has concentrated on the former. This paper launches a broad investigation of the latter. <p> Discussion. As the above indicates, whether one considers knowledge which is zero or above, one has two kinds: statistical and perfect. The key ingredient in defining these is the simulator. In the zero-knowledge case it is a probabilistic, polynomial time machine <ref> [GMR] </ref>; to measure knowledge complexity, [GP] equip it with an oracle and then measure how much information the simulator gets from the oracle.
Reference: [M] <author> H. Maier, </author> <title> Primes in Short Intervals, </title> <journal> Michigan Math, </journal> <volume> J 32, </volume> <year> 1985, </year> <month> pp:221-225. </month>
Reference-contexts: Protocols for set sizes. We provide constant round protocols for proving bounds on the size of sets to within much higher precision than that achieved by previous protocols. Our protocol uses higher independence. The analysis relies on a theorem of Maier about the distribution of primes in small intervals <ref> [M] </ref> and on the Bonferroni inequalities. See Section 8 for discussion of the motivations and the protocols. 1.4 Previous work Our consideration of the perfect KC of statistical ZK was motivated by a result of [GOP] which implies that SZK hv PKC wc hv [O (log n)].
Reference: [St] <author> L. Stockmeyer. </author> <title> The Complexity of Approximate Counting. </title> <booktitle> Proceedings of the Fifteenth Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1983. </year>
Reference-contexts: For any *(n) and q (n) satisfying 1=*(n); log (1=q (n)) poly (n) there exists a (*; q)-lower bound protocol. (The standard protocol of Babai [B] works for 1=*(n) = O (1). A protocol for the general case can be derived by applying the Stockmeyer's cross product trick <ref> [St] </ref>. Alternatively, Babai and Moran provide appropriate protocols more directly [BM].) Upper bound protocol. The following is a slight variation on the upper bound protocol of Fortnow [F]. We assume here that all sets have size at least 2 n fl for some fl &gt; 0.
References-found: 13

