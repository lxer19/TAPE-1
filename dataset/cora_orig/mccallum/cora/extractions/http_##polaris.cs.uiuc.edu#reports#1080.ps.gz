URL: http://polaris.cs.uiuc.edu/reports/1080.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: Experimental Evaluation of Some Data Dependence Tests (Extended Abstract)  
Author: Paul M. Petersen and David A. Padua 
Address: Urbana, Illinois, 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Abstract-found: 0
Intro-found: 1
Reference: [Ban79] <author> Utpal Banerjee. </author> <title> Speedup of Ordinary Programs. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1979. </year>
Reference-contexts: Of course, using such incorrect assumptions never leads to wrong object code, but they could preclude some optimizations. Approximate techniques, especially those developed by U. Banerjee in his PhD thesis <ref> [Ban79] </ref> have been adopted widely. There has also been in the last few years a renewed interest in the subject, and techniques that are in some cases more accurate than Banerjee's have been developed [LYZ89, KKP90].
Reference: [Ban88] <author> Utpal Banerjee. </author> <title> Dependence Analysis for Supercomputing. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: this test. 5 A (2 fl I) and A (2 fl J + 1) A (2 fl I) and A (6 fl J + 4) GCD (2; 2) = 2 GCD (2; 6) = 2 2 does not divide 1 2 divides 4 The generalized GCD method is described in <ref> [Ban88] </ref>, and is an extension of the GCD method that considers all subscripts in a multiply dimensioned array simultaneously. 3.3 Banerjee's Test Banerjee's test uses the intermediate value theorem to disprove dependence.
Reference: [CKPK90] <author> George Cybenko, Lyle Kipp, Lynn Pointer, and David Kuck. </author> <title> Supercomputer performance evaluation and the perfect benchmarks. </title> <type> Technical Report 965, </type> <institution> University of Illinois at Urbana-Champaign, Center for Supercomp. Res.&Dev., </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: The current implementation of the integer programming algorithm requires that all variables have non-negative values, and that the iteration space be bounded. 5 Description of the Experiments To evaluate the dependence tests just described, we used the Perfect Club Benchmark <ref> [CKPK90] </ref>, which is a collection of thirteen Fortran programs that are representative of the applications most frequently run on parallel and vector computers.
Reference: [KKP90] <author> Xiangyun Kong, David Klappholz, and Kleanthis Psarris. </author> <title> The I test: A new test for subscript data dependence. </title> <booktitle> In Proc. 1990 International Conf. on Parallel Processing, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Approximate techniques, especially those developed by U. Banerjee in his PhD thesis [Ban79] have been adopted widely. There has also been in the last few years a renewed interest in the subject, and techniques that are in some cases more accurate than Banerjee's have been developed <ref> [LYZ89, KKP90] </ref>. Despite their importance, there is almost no experimental analysis of the accuracy of these approximate techniques. Such analysis could be useful to guide research and also help compiler writers decide what approach to take and the risks involved.
Reference: [LYZ89] <author> Zhiyuan Li, Pen-Chung Yew, and Chuan-Qi Zhu. </author> <title> Data dependence analysis on multi-dimensional array references. </title> <booktitle> In Proc. 3rd International Conf. on Supercomputing, </booktitle> <pages> pages 215-224, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Approximate techniques, especially those developed by U. Banerjee in his PhD thesis [Ban79] have been adopted widely. There has also been in the last few years a renewed interest in the subject, and techniques that are in some cases more accurate than Banerjee's have been developed <ref> [LYZ89, KKP90] </ref>. Despite their importance, there is almost no experimental analysis of the accuracy of these approximate techniques. Such analysis could be useful to guide research and also help compiler writers decide what approach to take and the risks involved.
Reference: [Pad89] <author> David A. Padua. </author> <title> The Delta Program Manipulation system | Preliminary design. </title> <type> CSRD Report no. 808, </type> <institution> University of Illinois at Urbana-Champaign, Center for Supercomp. Res.&Dev., </institution> <month> June </month> <year> 1989. </year> <month> 17 </month>
Reference-contexts: These programs were processed, one subroutine at a time, through the Delta system <ref> [Pad89] </ref> in which we implemented the dependence tests. We ran two experiments corresponding to two different sequences of dependence tests. In both cases, the dependence tests were applied to each potential dependence in the order specified by the sequence.
Reference: [SLY90] <author> Zhiyu Shen, Zhiyuan Li, and Pen-Chung Yew. </author> <title> An Empirical Study of FORTRAN programs for Parallelizing Compilers. </title> <type> CSRD Report no. 983, </type> <institution> University of Illinois at Urbana-Champaign, Center for Supercomp. Res.&Dev., </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: The stride or step of the loop was defined to be 1 if it was not an integer constant. The choice of 40 as the upper bound is fairly arbitrary and was chosen for historical reasons to maintain consistency with earlier experiments such as <ref> [SLY90] </ref>. A condition for the chosen upper bound is that it should not significantly change the set of dependences present in the program. Therefore a reasonable criteria is that the upper limit should be larger than the maximal dependence distance present in a loop. <p> A single dependence may be responsible for prohibiting the parallelization of a loop. But we believe that statistical information is useful for determining areas in which to concentrate further research. In <ref> [SLY90] </ref> a statistical study using a different set of Fortran routines collected by the original Parafrase effort was reported. However, many of the results obtained rather different conclusions.
Reference: [SM89] <author> Harvey M. Salkin and Kamlesh Mathur. </author> <title> Foundations of Integer Programming. </title> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: More will be said about this in the conclusions. 8 4 The Integer Programming Test When loop bounds are known and the subscript functions are linear, all dependence tests discussed above are approximations of the integer programming technique <ref> [SM89] </ref>. For this reason we use integer programming as the basis with which to compare the dependence tests that require complete knowledge of the loop limits.
Reference: [Tow76] <author> R. Towle. </author> <title> Control and Data Dependence for Program Transformations. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: As discussed in more detail below, the main problem of data dependence analysis is to detect whether or not a system of equations has an integer solution inside a given region of ZZ n . One of the first techniques used answered the question accurately <ref> [Tow76] </ref>. However, this method was too expensive to use in any practical compiler. For this reason, faster but approximated techniques have been developed which will sometimes wrongly assume the existence of a solution to the system of equations.
Reference: [WB87] <author> Michael Wolfe and Utpal Banerjee. </author> <title> Data dependence and its application to parallel processing. </title> <journal> International Journal of Parallel Processing, </journal> <month> October </month> <year> 1987. </year> <month> 18 </month>
Reference-contexts: However, it does make the test inexact because some potential dependences which have a real valued solution but no integer solution are not broken by this test. Banerjee's test is then defined as follows <ref> [WB87] </ref>. Given functions f and g and a direction vector , we try to show whether f ( I 0 ) = g ( I 00 ) can hold for any I 0 , I 00 under the constraints of the direction vector and the loop bounds.
References-found: 10

