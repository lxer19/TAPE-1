URL: http://www.cs.arizona.edu/people/gene/PAPERS/cfl.diff.ps
Refering-URL: http://www.cs.arizona.edu/people/gene/vita.html
Root-URL: http://www.cs.arizona.edu
Title: APPROXIMATELY MATCHING CONTEXT-FREE LANGUAGES  
Author: Gene Myers 
Keyword: design of algorithms, pattern matching, sequence comparison.  
Address: Tucson, AZ 85721  
Affiliation: Dept. of Computer Science, University of Arizona,  
Abstract: Given a string w and a pattern p, approximate pattern matching merges traditional sequence comparison and pattern matching by asking for the minimum difference between w and a string exactly matched by p. We give an O(P N 2 (N + log P )) algorithm for approximately matching a string of length N and a context-free language specified by a grammar of size P . The algorithm generalizes the Cocke-Younger-Kasami algorithm for determining membership in a context-free language. We further sketch an O(P 5 N 8 8 P ) algorithm for the problem where gap costs are concave and pose two open problems for such general comparison cost models. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A.V. and T.G. Peterson, </author> <title> "A minimum distance error-correcting parser for context-free languages," </title> <note> SIAM J. on Computing 1 (4) (1972), 305-312. </note>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance. <p> This note generalizes the exact matching, dynamic programming "CYK-algorithm" of Cocke, Younger, & Kasami [8, 14] to efficient algorithms for context-free languages under comparison models permitting weighted alignment scores and gap costs of several varieties. The most relevant earlier work is by Aho & Peterson <ref> [1] </ref> and Lyons [10] who gave O (P 2 N 3 ) algorithms for approximate matching under the edit-distance model that are based on generalizations of Earley's algorithm [5]. <p> Theorem 2: After O (P N 2 (N + log P )) time the algorithm of Figure 2 concludes with C [A; i; j] = C (A; i; j) for all A, i, j. Also ffi (G; w) = minfC <ref> [S; 1; N ] </ref>; G (0; N ) if S ! "g. <p> For B 2 H and B ! A 2 do 12. f C [B; i; j] minfC [B; i; j]; C [A; i; j]g, reheap (H; B) g 13. g 15. Print "ffi (G; w) is" minfC <ref> [S; 1; N] </ref>; G (0; N ) if S ! "g algorithm. Finally, either the empty string is closest to w (if " 2 L (G)) or some non-empty string is closest to w. <p> Finally, either the empty string is closest to w (if " 2 L (G)) or some non-empty string is closest to w. By construction the former is G (0; N ) and the latter is C <ref> [S; 1; N ] </ref>. Thus line 15 correctly reports ffi (G; w). <p> As a final note, observe that the best alignment between a non-empty string v and its derivation from S can be obtained with a traceback from C <ref> [S; 1; N ] </ref> through the C-values in O (P (M + N )) time where M is the length of v. 2 Theorem 2 requires that E (A) 0 for all A, which is true whenever (a) 0 for all a 2 . <p> gap extensions modeled by aligning an A-string with the empty string be explicitly represented in the recurrence using the auxiliary quantity: L (t) = f A : A ) ? v and jvj = t g which is the set of non-terminals that can derive strings of length t 2 <ref> [1; N P 2 P ] </ref>. This has the compensatory effect of removing the need for the boundary case j = i 1, since it is now explicitly represented in the recurrence of Theorem 4.
Reference: [2] <author> Akutsu, T., </author> <title> "Approximate string matching with don't care symbols," </title> <booktitle> Proc. 5th Combinatorial Pattern Matching Conference (Asilomar, CA 1994). Published as Lecture Notes in Computer Science, </booktitle> <publisher> #807 (Springer Verlag, </publisher> <address> New York, NY), </address> <pages> 240-249. </pages>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance.
Reference: [3] <author> Bellman, R.E., </author> <title> "On a routing problem," </title> <journal> Quant. Appl. Math 16, </journal> <volume> 1 (1958), </volume> <pages> 87-90. </pages>
Reference: [4] <author> Dijkstra, </author> <title> E.W., "A note on two problems in connexion with graphs," </title> <booktitle> Numerische Math-ematik 1 (1959), </booktitle> <pages> 269-271. </pages>
Reference-contexts: Moreover, since is positive, E (A) is positive for every non-terminal, and so every edge weight is positive. Thus Dijkstra's shortest path algorithm <ref> [4] </ref> may be applied directly as detailed in lines 4-12 of Figure 2. Theorem 2: After O (P N 2 (N + log P )) time the algorithm of Figure 2 concludes with C [A; i; j] = C (A; i; j) for all A, i, j.
Reference: [5] <author> Earley, J., </author> <title> "An efficient context-free parsing algorithm," </title> <booktitle> Comm. of the ACM 13 (1970), </booktitle> <pages> 94-102. </pages>
Reference-contexts: The most relevant earlier work is by Aho & Peterson [1] and Lyons [10] who gave O (P 2 N 3 ) algorithms for approximate matching under the edit-distance model that are based on generalizations of Earley's algorithm <ref> [5] </ref>. Their results are only applicable to edit distance, taking advantage of the unit-cost scores in a way that does not generalize, and their algorithms are not as efficient as a function of grammar size.
Reference: [6] <author> Fitch, W., and T. Smith, </author> <title> "Optimal sequence alignments," </title> <booktitle> Proc. </booktitle> <institution> Natl Acad. Sci. </institution> <address> USA 80 (1983), </address> <pages> 1382-1386. </pages>
Reference-contexts: For affine gap costs <ref> [6] </ref>, i.e., gap (h) = r + sh for constants r and s, a simple extension gives an algorithm with the same complexity as that of the previous section.
Reference: [7] <author> Hopcroft, J.E. and J.D. Ullman, </author> <title> Introduction to Automata Theory, Languages, </title> <publisher> and Computations (Addison-Wesley, </publisher> <year> 1979). </year>
Reference-contexts: The language accepted by G, L (G) is the set of all w 2 ? such that S ) ? w, i.e., all terminal strings derivable from S. We assume without loss of generality that G does not contain any useless productions <ref> [7, pages 88-90] </ref>. We consider the size, P , of a grammar to be, P A!ff (jffj + 1), the sum of the lengths of all productions. <p> We consider the size, P , of a grammar to be, P A!ff (jffj + 1), the sum of the lengths of all productions. For reasons of both simplicity and algorithmic complexity, we first transform this grammar into Chomsky Normal Form (CNF) <ref> [7, pages 92-94] </ref> save for the removal of unit productions.
Reference: [8] <author> Kasami, T., </author> <title> "An efficient recognition and syntax analysis algorithm for context-free languages," </title> <institution> AFCRL-65-758, Air Force Cambridge Reserach Laboratory, Bedford, </institution> <address> MA (1963). </address>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history [1, 10, 12, 11, 9, 2] but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance. This note generalizes the exact matching, dynamic programming "CYK-algorithm" of Cocke, Younger, & Kasami <ref> [8, 14] </ref> to efficient algorithms for context-free languages under comparison models permitting weighted alignment scores and gap costs of several varieties.
Reference: [9] <author> Knight, J.R., and E.W. Myers, </author> <title> "Approximate regular expression pattern matching with concave gap costs," </title> <booktitle> Proc. 3rd Combinatorial Pattern Matching Conference (Tucson, AZ 1992). Published as Lecture Notes in Computer Science, </booktitle> <publisher> #644 (Springer Verlag, </publisher> <address> New York, NY), 67-76. </address> <note> To appear in Algorithmica. </note>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance.
Reference: [10] <author> Lyon, G, </author> <title> "Syntax-directed least-errors analysis for context-free languages: A practical approach," </title> <journal> Comm. of the ACM 17, </journal> <volume> 1 (1974), </volume> <pages> 3-14. </pages>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance. <p> This note generalizes the exact matching, dynamic programming "CYK-algorithm" of Cocke, Younger, & Kasami [8, 14] to efficient algorithms for context-free languages under comparison models permitting weighted alignment scores and gap costs of several varieties. The most relevant earlier work is by Aho & Peterson [1] and Lyons <ref> [10] </ref> who gave O (P 2 N 3 ) algorithms for approximate matching under the edit-distance model that are based on generalizations of Earley's algorithm [5].
Reference: [11] <author> Myers, E.W. and W. Miller, </author> <title> "Approximate matching of regular expressions," </title> <journal> Bull. of Math. Biol. </journal> <volume> 51, 1 (1989), </volume> <pages> 5-37. </pages>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance.
Reference: [12] <author> Wagner, R.A., and J.I. Seiferas, </author> <title> "Correcting counter automaton recognizable languages," </title> <journal> SIAM J. on Computing 7, </journal> <volume> 3 (1978), </volume> <pages> 357-375. </pages>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history <ref> [1, 10, 12, 11, 9, 2] </ref> but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance.
Reference: [13] <author> Waterman, </author> <title> M.S., "General methods of sequence comparison," </title> <journal> Bull. Math. Biol. </journal> <volume> 46 (1984), </volume> <pages> 473-501. </pages>
Reference-contexts: When gap (h) is negative for some h then we can develop an O (P N 2 (N + P )) algorithm by an appeal to a more powerful shortest paths algorithm as noted earlier. 4 Concave Gap Costs Concave gap costs <ref> [13] </ref> are characterized as having non-increasing forward differences, i.e., gap (h) gap (h + 1) for all h 1 where gap (h) = gap (h + 1) gap (h). In this more general case we first have to be concerned with whether or not gap (h) is non-decreasing.
Reference: [14] <author> Younger, D.H., </author> <title> "Recognition and parsing of context-free languages in time n 3 ," Information and Control 10, </title> <booktitle> 2 (1967), </booktitle> <pages> 189-208. </pages>
Reference-contexts: 1 Introduction. Approximate pattern matching has a long history [1, 10, 12, 11, 9, 2] but most work has focused on simple patterns such as keywords and simple, unit-cost comparison models such as edit distance. This note generalizes the exact matching, dynamic programming "CYK-algorithm" of Cocke, Younger, & Kasami <ref> [8, 14] </ref> to efficient algorithms for context-free languages under comparison models permitting weighted alignment scores and gap costs of several varieties.
References-found: 14

