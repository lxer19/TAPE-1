URL: http://hampshire.edu/~lasCCS/pubs/culture-cogsci-e.ps
Refering-URL: http://hampshire.edu/~lasCCS/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Culture Enhances the Evolvability of Cognition  
Author: by Lee Spector and Sean Luke Spector, L., and S. Luke. 
Note: Full citation:  1996. Culture Enhances the Evolvability of Cognition. In Proceedings of the 1996 Cognitive Science Society Meeting. To appear.  
Abstract-found: 0
Intro-found: 1
Reference: <author> Andre, D. </author> <year> (1995). </year> <title> The Evolution of Agents that Build Mental Models and Create Simple Plans Using Genetic Programming. </title> <booktitle> In Proceedings of the Sixth International Conference on Genetic Algorithms (pp. </booktitle> <pages> 248-255). </pages> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Bankes, S. </author> <year> (1995). </year> <title> Evolving Social Structure in Communities of Agents Through Meme Evolution. </title> <booktitle> In Proceedings of the Fourth Annual Conference on Evolutionary Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Bonner, J.T. </author> <year> (1980). </year> <title> The Evolution of Culture in Animals. </title> <publisher> Princeton, </publisher> <address> NJ: </address> <publisher> Princeton University Press. </publisher>
Reference-contexts: Introduction Interactions between cultural and evolutionary processes are discussed in the literatures of several fields, including cognitive science (Donald, 1991), ethology <ref> (Bonner, 1980) </ref>, so-ciobiology (Lumsden and Wilson, 1981), and primatology (Quiatt and Itani, 1994). This paper reports related work in the field of evolutionary computation, in which problems are solved by use of computational mechanisms that have been derived from evolutionary processes.
Reference: <author> Donald, M. </author> <year> (1991). </year> <title> Origins of the Modern Mind: Three Stages in the Evolution of Culture and Cognition. </title> <address> Cam-bridge, MA: </address> <publisher> Harvard University Press. </publisher>
Reference-contexts: Introduction Interactions between cultural and evolutionary processes are discussed in the literatures of several fields, including cognitive science <ref> (Donald, 1991) </ref>, ethology (Bonner, 1980), so-ciobiology (Lumsden and Wilson, 1981), and primatology (Quiatt and Itani, 1994). This paper reports related work in the field of evolutionary computation, in which problems are solved by use of computational mechanisms that have been derived from evolutionary processes.
Reference: <author> Hutchins, E. & Hazlehurst, B. </author> <year> (1993). </year> <title> Learning in the Cultural Process. In C.G. </title> <editor> Langton, C. Taylor, J.D. Farmer, & S. Rasmussen (Eds.), </editor> <booktitle> Artificial Life II. </booktitle> <publisher> Addison-Wesley Publishing Company. </publisher>
Reference: <author> Koza, J.R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cam-bridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: In particular, results are presented for genetic programming systems, in which executable computer programs are automatically produced through processes of recombination and natural selection <ref> (Koza, 1992) </ref>. Genetic programming systems can automatically produce computer programs for a variety of interesting cognitive tasks including circuit design, grammar induction, block stacking, and action selection (Koza, 1992; Spector, 1994, 1996). <p> Results are then presented in the form of computational effort measurements, and the meaning and generality of the results are discussed. Method Genetic Programming Genetic programming is a technique for the automatic generation of computer programs by means of natural selection <ref> (Koza, 1992) </ref>. The genetic programming process starts by creating a large initial population of programs that are random combinations of elements from problem-specific function and terminal sets. <p> Details of program representation and algorithms for all genetic operators, along with full source code for genetic programming systems, can be found in <ref> (Koza, 1992) </ref> and (Koza, 1994). Computational Effort Koza has developed a technique for measuring the computational effort required to solve a problem with genetic programming (Koza, 1994). Because the genetic programming algorithm includes random choices at several steps, data is collected from a large number of independent runs. <p> For the described experiments data points were obtained from the equation y = x 4 + x 3 + x 2 + x (see Figure 1), which is a standard example from the literature <ref> (Koza, 1992) </ref>. One can view the task of the genetic programming system as that of rediscovering or inducing this formula from the data points used as fitness cases. 20 fitness cases were used for the data presented here, with randomly selected x values between -1 and 1. <p> that could be used in evolved programs were the 2-argument addition function +, the 2-argument subtraction function -, the 2-argument multiplication function *, the 2-argument protected division function %, two 1-argument trigonometric functions SIN and COS, the 1-argument exponential function EXP, and the 1-argument protected logarithm function RLOG (as in <ref> (Koza, 1992) </ref>). Programs could also refer to the independent variable X, and to ephemeral random constants between -1 and 1 (also as in (Koza, 1992)). <p> the 2-argument protected division function %, two 1-argument trigonometric functions SIN and COS, the 1-argument exponential function EXP, and the 1-argument protected logarithm function RLOG (as in <ref> (Koza, 1992) </ref>). Programs could also refer to the independent variable X, and to ephemeral random constants between -1 and 1 (also as in (Koza, 1992)). Tournament selection was used (tournament size = 5), along with a 90% crossover rate, a 10% reproduction rate, no mutation, a population size of 1000, and a maximum of 51 generations per run. Detailed descriptions of the meanings of these parameters can be found in (Koza, 1992); it suffices <p> (also as in <ref> (Koza, 1992) </ref>). Tournament selection was used (tournament size = 5), along with a 90% crossover rate, a 10% reproduction rate, no mutation, a population size of 1000, and a maximum of 51 generations per run. Detailed descriptions of the meanings of these parameters can be found in (Koza, 1992); it suffices here to note that these values are reasonably standard. For the runs with indexed-memory and for those with culture a 100-element memory array was added, along with READ and WRITE functions that behave as described above. <p> 100 points are awarded for obtaining the gold, there is a 1-point penalty for each action taken, and there is a 100-point penalty for each unit of distance between the agent and the gold at the end of the run. 3 Standardized fitness values (for which lower values are better <ref> (Koza, 1992) </ref>) are the average of the scores from the four random worlds, subtracted from 100. Agents are not explicitly rewarded for climbing out of the cave, although less action penalties are accumulated if an agent climbs out and thereby ends the simulation.
Reference: <author> Koza, J.R. </author> <year> (1994). </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Details of program representation and algorithms for all genetic operators, along with full source code for genetic programming systems, can be found in (Koza, 1992) and <ref> (Koza, 1994) </ref>. Computational Effort Koza has developed a technique for measuring the computational effort required to solve a problem with genetic programming (Koza, 1994). Because the genetic programming algorithm includes random choices at several steps, data is collected from a large number of independent runs. <p> Details of program representation and algorithms for all genetic operators, along with full source code for genetic programming systems, can be found in (Koza, 1992) and <ref> (Koza, 1994) </ref>. Computational Effort Koza has developed a technique for measuring the computational effort required to solve a problem with genetic programming (Koza, 1994). Because the genetic programming algorithm includes random choices at several steps, data is collected from a large number of independent runs. One first calculates P (M,i), the cumulative probability of success by generation i using a population of size M. <p> I (M,i,z) is calculated using the formula: I (M; i; z) = M fl (i + 1) fl log (1 z) The minimum of I (M,i,z) over the range of i is defined as the computational effort required to solve the problem with the given system <ref> (Koza, 1994) </ref>. Indexed Memory Indexed memory is a mechanism that allows programs developed by genetic programming to make use of runtime memory (Teller, 1994).
Reference: <author> Lumsden, C.J., & Wilson, E.O. </author> <year> (1981). </year> <title> Genes, Mind, and Culture. </title> <address> Cambridge, MA: </address> <publisher> Harvard University Press. </publisher>
Reference-contexts: Introduction Interactions between cultural and evolutionary processes are discussed in the literatures of several fields, including cognitive science (Donald, 1991), ethology (Bonner, 1980), so-ciobiology <ref> (Lumsden and Wilson, 1981) </ref>, and primatology (Quiatt and Itani, 1994). This paper reports related work in the field of evolutionary computation, in which problems are solved by use of computational mechanisms that have been derived from evolutionary processes.
Reference: <editor> Quiatt, D. & Itani, J. (Eds.). </editor> <year> (1994). </year> <title> Hominid Culture in Primate Perspective. </title> <publisher> Niwot, CO: University Press of Col-orado. </publisher>
Reference-contexts: Introduction Interactions between cultural and evolutionary processes are discussed in the literatures of several fields, including cognitive science (Donald, 1991), ethology (Bonner, 1980), so-ciobiology (Lumsden and Wilson, 1981), and primatology <ref> (Quiatt and Itani, 1994) </ref>. This paper reports related work in the field of evolutionary computation, in which problems are solved by use of computational mechanisms that have been derived from evolutionary processes.
Reference: <author> Reynolds, R.G. </author> <year> (1994). </year> <title> An Introduction to Cultural Algorithms. </title> <booktitle> In Proceedings of the Third Annual Conference on Evolutionary Programming (pp. </booktitle> <pages> 131-139). </pages> <address> River Edge, NJ: </address> <publisher> World Scientific. </publisher>
Reference: <author> Russell, S.J., & Norvig, P. </author> <year> 1995. </year> <title> Artificial Intelligence, A Modern Approach. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: The index arguments of these functions were coerced to the proper range ([0-99]) by multiplying them by 100 and by then taking them modulo 100. Wumpus World Wumpus world <ref> (Russell and Norvig, 1995) </ref> is a problem environment within which an agent must select actions to navigate within a dangerous world to achieve goals. The use of genetic programming for the evolution of Wumpus world agents has been described elsewhere (Spec-tor, 1996).
Reference: <author> Spector, L. </author> <year> (1994). </year> <title> Genetic Programming and AI Planning Systems. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence (pp. </booktitle> <pages> 1329-1334). </pages> <address> Cam-bridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Spector, L. </author> <year> (1996). </year> <title> Simultaneous Evolution of Programs and their Control Structures. </title> <editor> In P. Angeline & K. Kinnear (Eds.), </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. In press. </publisher>
Reference-contexts: The use of genetic programming for the evolution of Wumpus world agents has been described elsewhere (Spec-tor, 1996). This section describes the problem informally; see <ref> (Spector, 1996) </ref> for a detailed description of the Wumpus world simulator, the function set, and other parameters. Wumpus world is cave represented as a grid of squares surrounded by walls. <p> The wumpus still produces a stench when dead, but it is harmless. The cave also contains bottomless pits that will trap unwary agents. Pits produce breezes that can be felt in adjacent (but not diagonal) squares. The agent perceives 2 Although the experiments described in <ref> (Spector, 1996) </ref> also used a 6-by-6 grid, the world's walls occupied space in the simulator used for those experiments. <p> Agents are not explicitly rewarded for climbing out of the cave, although less action penalties are accumulated if an agent climbs out and thereby ends the simulation. An agent 3 In the experiments described in <ref> (Spector, 1996) </ref> agents were also charged an explicit 100-point penalty for dying. <p> We are currently conducting experiments with several variants and it is clear from the preliminary results that culture is not always beneficial in Wumpus world. In particular, for a configuration similar to that of <ref> (Spector, 1996) </ref> it appears that ordinary indexed memory is best, followed by culture. Here we may gain insights from biological examples; not all animals use culture, and there are presumably many niches in which culture confers no adaptive advantage.
Reference: <author> Teller, A. </author> <year> (1994). </year> <title> The Evolution of Mental Models. </title> <booktitle> In K.E. </booktitle>
Reference-contexts: Indexed Memory Indexed memory is a mechanism that allows programs developed by genetic programming to make use of runtime memory <ref> (Teller, 1994) </ref>. The mechanism consists of a linear array of memory locations and two functions, READ and WRITE, that are added to the set of functions from which programs are created. The memory is initialized at the start of each program execution.
Reference: <editor> Kinnear Jr. (Ed.), </editor> <booktitle> Advances in Genetic Programming (pp. </booktitle> <pages> 199-219). </pages> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
References-found: 15

