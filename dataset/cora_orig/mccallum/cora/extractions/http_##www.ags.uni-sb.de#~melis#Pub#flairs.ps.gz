URL: http://www.ags.uni-sb.de/~melis/Pub/flairs.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Email: melis@cs.uni-sb.de  jonathw@dai.ed.ac.uk  
Title: Analogy as a Control Strategy in Theorem Proving  
Author: Erica Melis Jon Whittle 
Address: Informatik,  Edinburgh University,  
Affiliation: Universitat des Saarlandes, FB  Dept of AI,  
Abstract: We investigate analogy-driven proof plan construction as a control strategy in proof planning. The decisions taken in planning a source theorem are replayed for planning a similar target theorem. Our analogy procedure, ABALONE, implemented on top of the proof planner CL A M , is capable of a controlled replay of the source planning process. ABALONE provides additional control at key points of the target planning process by suggesting induction schemes, speculating lemmas, and patching failed plans. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bundy, F. van Harmelen, J. Hesketh, and A. Smaill. </author> <title> Experiments with proof plans for induction. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 7 </volume> <pages> 303-324, </pages> <year> 1991. </year>
Reference-contexts: ABALONE is implemented on top of the Edin-burgh proof planner CL A M <ref> [1] </ref> which deals with theorem proving by induction. Instead of searching for a method to be introduced in the proof plan, ABALONE suggests a method by analogy to a (reformulated) source plan.
Reference: [2] <author> J.G. Carbonell. </author> <title> Learning by analogy: Formulating and generalizing plans from past experience. In R.S. </title> <editor> Michalsky, J.G. Carbonell, and T.M. Mitchell, editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, </booktitle> <pages> pages 137-162. </pages> <publisher> Tioga, </publisher> <address> Palo Alto, </address> <year> 1983. </year>
Reference-contexts: 1 Introduction Theorem proving by analogy is a process in which the experience of proving a source theorem guides the search for a proof of a similar target theorem. There are at least two different paradigms for analogy: transformational analogy and derivational analogy <ref> [2] </ref>. Transformational analogy maps a final source solution to the target and may involve additional transformations so the constraints of the target problem are satisfied.
Reference: [3] <author> J.G. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. In R.S. </title> <editor> Michalsky, J.G. Carbonell, and T.M. Mitchell, editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, </booktitle> <pages> pages 371-392. </pages> <publisher> Morgan Kaufmann Publ., </publisher> <address> Los Altos, </address> <year> 1986. </year>
Reference-contexts: Transformational analogy maps a final source solution to the target and may involve additional transformations so the constraints of the target problem are satisfied. Derivational analogy instead maps the problem solving decisions made in the source case <ref> [3] </ref> and uses these mapped decisions as a guide to construct a target solution. That is, derivational analogy works as a control strategy in problem solving. Analogy-driven proof plan construction [8] employs derivational analogy for theorem proving. <p> For example, ABALONE produces a partial plan for assuni-assinter where only the base-case needs to be completed. 7 Related Work Our analogy has many additional features compared to Carbonell's derivational analogy <ref> [3] </ref>, and it is ap 7 that is, planning without analogy. plied to theorem proving. In theorem proving, the work closest to our own is that of [6] which also uses indexed functions and second-order mappings restricted by heuristics.
Reference: [4] <author> A. Ireland and A. Bundy. </author> <title> Productive use of failure in inductive proof. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 16(1-2):79-111, </volume> <year> 1996. </year>
Reference-contexts: By these general mechanisms CL A M 's default control can be overridden in the following way. Lemma Speculation. Finding a lemma that will successfully complete a proof is a major and search intensive task for theorem provers <ref> [4, 5] </ref>. It is also one of the most search-intensive tasks in CL A M . ABALONE speculates lemmas by applying m e to lemmas or rewrites used in the source plan.
Reference: [5] <author> D. Kapur and M. Subramaniam. </author> <title> Lemma discovery in automating induction. In M.A. </title> <editor> McRobbie and J.K. Slaney, editors, </editor> <booktitle> Automated Deduction CADE-13, volume 1104 of LNAI, </booktitle> <pages> pages 538-552, </pages> <address> Berlin, 1996. </address> <publisher> Springer. </publisher>
Reference-contexts: By these general mechanisms CL A M 's default control can be overridden in the following way. Lemma Speculation. Finding a lemma that will successfully complete a proof is a major and search intensive task for theorem provers <ref> [4, 5] </ref>. It is also one of the most search-intensive tasks in CL A M . ABALONE speculates lemmas by applying m e to lemmas or rewrites used in the source plan.
Reference: [6] <author> Th. Kolbe and Ch. Walther. </author> <title> Reusing proofs. </title> <booktitle> In Proceedings of 11th European Conference on Ar-tifi-cial Intelligence (ECAI-94), </booktitle> <address> Amsterdam, </address> <year> 1994. </year> <note> http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/ kolbe/. </note>
Reference-contexts: In theorem proving, the work closest to our own is that of <ref> [6] </ref> which also uses indexed functions and second-order mappings restricted by heuristics. The approaches differs, however, significantly in that PLAGIATOR [6] * does not use derivational analogy and justifica tions, * PLAGIATOR has restricted patchings compared to our reformulations. <p> In theorem proving, the work closest to our own is that of <ref> [6] </ref> which also uses indexed functions and second-order mappings restricted by heuristics. The approaches differs, however, significantly in that PLAGIATOR [6] * does not use derivational analogy and justifica tions, * PLAGIATOR has restricted patchings compared to our reformulations. <p> This allows greater flexibility as it can override the default control if a strict analogical replay fails at some part of the proof. * We can also yield partial proof plans that have to be completed by base-level planning, whereas <ref> [6] </ref> only produce complete proofs. * ABALONE is embedded into a generic (proof planning) system whereas PLAGIATOR stands alone. Other analogy systems, including [6, 9], work at the object-level. <p> Other analogy systems, including <ref> [6, 9] </ref>, work at the object-level. By moving to the more abstract plan level, more global control is realized. 8 Conclusion We have described analogy as a means of controlling the construction of proof plans for proofs by induction. We consider a replay of proof planning decisions.
Reference: [7] <author> E. Melis. </author> <title> Analogy in CLAM. </title> <type> Technical Report DAI Research Paper No 766, </type> <institution> University of Edinburgh, AI Dept, Dept. of Artificial Intelligence, Edinburgh, </institution> <year> 1995. </year> <note> available from http://jswww.cs.uni-sb.de/~melis/. </note>
Reference-contexts: We shall mainly address the control functions of analogy. Space precludes us from describing all features of the procedure and from going into detail, e.g., about the restrictions of the mappings (Aspects of our system not covered here can be found in <ref> [7] </ref>). The article is organized as follows. We first present some background and an example to introduce the main ideas. Then we describe the analogical replay and the control of search-intensive subtasks such as the selection of an induction scheme. 2 Some Background CL A M is a backward-planner.
Reference: [8] <author> E. Melis. </author> <title> A model of analogy-driven proof-plan construction. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 182-189, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: Derivational analogy instead maps the problem solving decisions made in the source case [3] and uses these mapped decisions as a guide to construct a target solution. That is, derivational analogy works as a control strategy in problem solving. Analogy-driven proof plan construction <ref> [8] </ref> employs derivational analogy for theorem proving. Briefly, the new ideas of analogy-driven proof plan construction compared to other analogy approaches in theorem proving can be summarized as follows. Analogy-driven proof plan construction works at the proof plan 0 level.
Reference: [9] <author> S. Vadera. </author> <title> Proof by analogy in mural. </title> <journal> Formal Aspects of Computing, </journal> <volume> 7 </volume> <pages> 183-206, </pages> <year> 1995. </year>
Reference-contexts: Other analogy systems, including <ref> [6, 9] </ref>, work at the object-level. By moving to the more abstract plan level, more global control is realized. 8 Conclusion We have described analogy as a means of controlling the construction of proof plans for proofs by induction. We consider a replay of proof planning decisions.
Reference: [10] <author> J. Whittle. </author> <title> Analogy in CL A M . Technical Report MSc.thesis, </title> <institution> University of Edinburgh, Dept. of AI, Edinburgh, </institution> <year> 1995. </year>
Reference-contexts: This induction-specific abstraction guarantees the source and the target step-case subplans to be identical modulo reformulations. This is a novel contribution that goes beyond known matching heuristics. In addition, a series of domain-independent evaluation heuristics was devised to rate the second-order mappings involved in m b and m e <ref> [10] </ref>. <p> Our main example lenapp-halfplus is an example where lemmata speculations are guided by the use of analogy - note the wave (lemma) step in Figure 2. The speculation of lemma is covered in x3.2. <ref> [10] </ref> lists another 3 zerotimes3 normally needs a generalisation but we can avoid this by using analogy. 20 or so examples of successful lemma speculations. Override Default Configuration. Theorem provers generally have a set library of methods to apply. <p> ABALONE is implemented in Quintus Prolog as an extension to CL A M . It has been tested on a wide range of examples. We include a selection in Table 1. In addition to these, <ref> [10] </ref> gives another 30 examples. Each entry in the table gives the source theorem in the first row and the target in the second. The third column describes whether ABALONE produces a complete plan (C) or a partial plan (P) with gaps that should be completed by base-level planning.
References-found: 10

