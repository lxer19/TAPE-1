URL: http://www.cs.tamu.edu/research/robotics/Sean/Papers/asiago_tr.ps.gz
Refering-URL: http://www.cs.tamu.edu/research/robotics/Sean/Papers/sean_bib.html
Root-URL: http://www.cs.tamu.edu
Title: Action Selection in Teleautonomous Systems  
Author: Sean Graves Richard Volz 
Affiliation: Department of Computer Science, Texas A&M University  
Abstract: Telerobotic techniques enable the performance of tasks which may be hazardous or impossible for humans to perform directly and provide the operator considerable flexibility. Autonomous systems are intended to operate without human intervention; however, they are brittle and have limited functionality at present. Teleautonomous systems attempt to combine the advantages of telerobotics with those of autonomous systems. Numerous generalized architectures for telerobotic systems have been proposed; however, most are hard-wired instantiations of a specific approach, and the interactions between human and autonomous elements of teleau-tonomous systems have rarely been addressed by these systems. The work described here provides a much more general, easily extensible and modifiable architecture. Specific issues addressed include methods that fuse decisions from multiple sources (such as human, reactive, or deliberative), that integrate multiple command sources, and that accommodate multi-purpose event recognizers to change operating modes. These methods may be dynamically altered to generate a variety of control modes and generate reliable dextrous telerobot motion. A result of this research is a modifiable, extensible framework for the unification of the many modes of control, such as shared, traded, and supervisory, which are described in the telerobotics literature. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Conway, R. A. Volz, and M. W. Walker, </author> <title> "Teleautonomous systems: Projecting and coordinating intelligent action at a distance," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 146-158, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Teleautonomous systems (TaS's) <ref> [1] </ref> attempt to combine the advantages of telerobotics with those of autonomous systems by including the projection of cognitive processing. By placing intelligent functions at the work site, operator performance can be increased [2]. <p> F r (20; 19; (100; 100; 25)) ! (100; 100; 25 + (20 19)) (30) As shown by Equation 19, the gripper command is supplied by fi g : c 4 = <ref> [*; *; *; 1] </ref> (32) The input matrix C may be given as C = 6 6 4 c 2 c s 7 7 5 2 6 6 10 15 20 * 100 100 26 * 3 7 7 k h i Column j of C, labeled ~ c j ,
Reference: [2] <author> L. Conway, R. A. Volz, and M. W. Walker, </author> <booktitle> "Teleautonomous systems: Methods and architectures for intermingling autonomous and telerobotics technology," In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <address> Raleigh, NC, </address> <month> April </month> <year> 1987, </year> <note> IEEE. </note>
Reference-contexts: 1 Introduction Teleautonomous systems (TaS's) [1] attempt to combine the advantages of telerobotics with those of autonomous systems by including the projection of cognitive processing. By placing intelligent functions at the work site, operator performance can be increased <ref> [2] </ref>. Also, communication delays between the robot and its control site can be tolerated more readily; indeed, a total loss of communication to the robot does not necessarily mean it must stop functioning.
Reference: [3] <author> J. S. Albus, H. G. McCain, and R. Lumia, </author> <title> "NASA/NBS standard reference model for telerobot control system architecture (NASREM)," </title> <type> Technical Report NIST Technical Note 1235, </type> <note> 1989 Edition, </note> <institution> National Institute of Standards and Technology, Robot Systems Division, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: The authors may be contacted via Internet at sean@cs.tamu.edu. Generalized architectures for telerobotic systems have been proposed, e.g., most notably the NASREM (NASA/ NBS Standard Reference Model for Telerobot Control System Architecture) specification <ref> [3] </ref>. However, the interaction between human and autonomous elements of TaS's has not been addressed, e.g., the method by which the operator may switch between autonomous functions, or the techniques that might be used to specify when and how mode transitions should occur. <p> Although their system supports five different control modes, a method of automatically selecting and sequencing mode changes is not supported. Instead, mode switches are initiated explicitly by the operator. The need for multi-level operator interaction is also discussed by Albus <ref> [3] </ref>, but the manner in which this interaction should be performed or sequenced is not described. The telerobotics work conducted by JPL has been described in numerous publications [10, 11, 4].
Reference: [4] <author> P. Backes, M. Long, and R. Steele, </author> <title> "The modular telerobot task execution system for space telerobotics," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 524 - 530, </pages> <address> Atlanta, GA, </address> <month> May </month> <year> 1993, </year> <journal> IEEE. </journal> <volume> Vol. </volume> <pages> 3. </pages>
Reference-contexts: Specific limitations of previous teleautonomous architectures addressed by this work include: * Improved flexibility in command sequencing. Previous teleautonomous systems, such as the MOTES system <ref> [4] </ref> of the Jet Propulsion Lab (JPL) execute commands from the control site in a strictly sequential fashion. Our design adds the capability of conditional and iterative execution of task commands. <p> Instead, mode switches are initiated explicitly by the operator. The need for multi-level operator interaction is also discussed by Albus [3], but the manner in which this interaction should be performed or sequenced is not described. The telerobotics work conducted by JPL has been described in numerous publications <ref> [10, 11, 4] </ref>. Their work includes MOTES (Modular Telerobot Task Execution System), which is a software architecture for sequencing commands for a telerobotic system. MOTES allows supervisory, teleoperated, and shared control. In supervisory control, the operator specifies task primitives or sequences of primitives for autonomous execution.
Reference: [5] <author> T. Tyrrell, </author> <title> Computational Mechanisms for Action Selection, </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <year> 1993. </year>
Reference-contexts: JPL's MOTES system includes reflex actions, but their execution subsumes commands from the operator. We seek greater flexibility in reflex action execution, by allowing reflex actions to adjust the system state without terminating the current task. * User-configurable action selection. Action selection <ref> [5] </ref> refers to the operation of combining task commands from multiple sources into actions which a robot may perform. The method used to perform action selection should be configurable by the user. <p> For instance, a reactive controller typically has multiple low-level behaviors which generate (possibly conflicting) commands. Similarly, a TaS must integrate commands from the operator (s) with those from autonomous agents. How this arbitration is performed is a crucial problem. Tyrrell <ref> [5] </ref> compared a number of action selection mechanisms (ASM's), primarily from the field of reactive control, including the techniques used by Maes [14], Rosenblatt and Payton [15], and Brooks [7]. The comparison was done using an elaborate simulated environment, which uncovered flaws in each of the ASM's. <p> Ongoing work includes the analysis of algorithm performance, deadlocks, and synchronization issues. We also plan to work toward completion of the implementation of ASIAGO and baseline testing of ASM performance using a quantitative approach similar to Tyrrell <ref> [5] </ref>. Possible extensions include the addition of a generalized Event Recognizer object which the operator may reconfigure during task execution and implementation of fuzzy or neural controllers to study their interactions with operator task commands.
Reference: [6] <author> S. Hayati and S. T. Venkataraman, </author> <title> "Design and implementation of a robot control system with traded and shared control capability," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 1310-1315, </pages> <address> Scottsdale, AZ, </address> <month> May </month> <year> 1989, </year> <note> IEEE. </note>
Reference-contexts: Action selection [5] refers to the operation of combining task commands from multiple sources into actions which a robot may perform. The method used to perform action selection should be configurable by the user. The shared control technique described by Hayati <ref> [6] </ref> used a mixing matrix which combined commands from an autonomous agent (a force controller) with commands from an operator. <p> The method used to build C will be described in Section 7. Given an input matrix C, we may define a matrix M called the blending matrix. The blending matrix is similar in purpose to the mixing matrix described in <ref> [6] </ref>. A blending matrix M is a s fi d matrix of coefficients m ij which regulate the contribution of inputs towards generating a particular degree of freedom of the action vector.
Reference: [7] <author> R. A. Brooks, </author> <title> "Intelligence without reason," </title> <type> Technical Report AIM-1293, </type> <institution> MIT Artificial Intelligence Lab, </institution> <month> April </month> <year> 1991. </year> <note> Also appears in Proc. IJCAI91. </note>
Reference-contexts: While most of the systems surveyed have some element of reactive control, most do not have provisions for directly coupling sensing to acting the hallmark of reactive control <ref> [7] </ref>. Without this capability, it is difficult to ensure that the real-time constraints of the reactive controller will be met. This is due to the fact that reactive control systems forgo modeling in favor of acting and sensing and use the world as its own model. <p> How this arbitration is performed is a crucial problem. Tyrrell [5] compared a number of action selection mechanisms (ASM's), primarily from the field of reactive control, including the techniques used by Maes [14], Rosenblatt and Payton [15], and Brooks <ref> [7] </ref>. The comparison was done using an elaborate simulated environment, which uncovered flaws in each of the ASM's. By making minor additions and modifications to the various ASM's, Tyrrell was able to achieve improved results, particularly in the case of Rosenblatt and Payton's system.
Reference: [8] <author> T. B. Sheridan, </author> <title> "Human supervisory control of robot systems," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 808-812, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1986, </year> <note> IEEE. </note>
Reference-contexts: Teleautonomous architectures have typically consisted of a tightly coupled set of processes which generate task commands. Improved flexibility results by allowing command sources to be distributed across multiple processors on a network. The basic problems that must be addressed by telerobotic systems are well described by Sheridan <ref> [8] </ref>. Of particular interest are the stability problems created by time delay in the telerobotic system. The inclusion of autonomous agents provides one of the most obvious solutions to the time delay problem, and motivates our system design.
Reference: [9] <author> T. Sato and S. Hirai, "MEISTER: </author> <title> A model enhanced intelligent and skillful teleoperation robot system," </title> <booktitle> In Robotics Research The Fourth International Symposium, </booktitle> <pages> pp. 155 - 162, </pages> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: The problem of providing an intuitive and powerful interface between the operator and autonomous functions is exacerbated by the use of many control modes and functionalities. Sato and Hirai <ref> [9] </ref> discuss the need for the operator to interact with the telerobot system at various levels, such as the servo level (master/slave control of robot motions) and task level (task execution by programmed control).
Reference: [10] <author> S. Hayati, T. Lee, et al., </author> <title> "A unified teleoperated autonomous dual-arm robotic system," </title> <journal> IEEE Transactions on Control Systems, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 3 - 8, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Instead, mode switches are initiated explicitly by the operator. The need for multi-level operator interaction is also discussed by Albus [3], but the manner in which this interaction should be performed or sequenced is not described. The telerobotics work conducted by JPL has been described in numerous publications <ref> [10, 11, 4] </ref>. Their work includes MOTES (Modular Telerobot Task Execution System), which is a software architecture for sequencing commands for a telerobotic system. MOTES allows supervisory, teleoperated, and shared control. In supervisory control, the operator specifies task primitives or sequences of primitives for autonomous execution. <p> In cases where a buffer does not supply commands for all degrees of freedom, a null command is placed in the appropriate position in the command vector. c 1 is constructed according to ffi 1 as given in Equation 16. That is: c 1 = <ref> [10; 15; 20; *] </ref> (28) where * represents the null command for the gripper. c 2 is similar to c 1 , except that the data from fi q must be transformed according to the homogeneous transform of Equation 17 giving: c 2 = [22; 20; 100; *] (29) c 3
Reference: [11] <author> B. Bon and J. Beahan, </author> <title> "A graphics-based operator control station for local/remote telerobotics," </title> <booktitle> In Proceedings of the SPIE Applications of Artificial Intelligence X: Machine Vision and Robotics Conference, </booktitle> <address> Orlando, FL, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Instead, mode switches are initiated explicitly by the operator. The need for multi-level operator interaction is also discussed by Albus [3], but the manner in which this interaction should be performed or sequenced is not described. The telerobotics work conducted by JPL has been described in numerous publications <ref> [10, 11, 4] </ref>. Their work includes MOTES (Modular Telerobot Task Execution System), which is a software architecture for sequencing commands for a telerobotic system. MOTES allows supervisory, teleoperated, and shared control. In supervisory control, the operator specifies task primitives or sequences of primitives for autonomous execution. <p> The use of reactive control in a telerobotic scenario is briefly described by Bon and Beahan in <ref> [11] </ref>. This system allows the user to specify the parameters of a motion or sensing command to be performed at the remote site, together with a set of reflexes and monitoring functions to be executed in real time during the motion.
Reference: [12] <author> G. Hirzinger, B. Brunner, J. Dietrich, and J. Heindl, </author> <title> "Sensor-based space robotics | ROTEX and its telerobotic features," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 9, no. 5, </volume> <pages> pp. 649 - 663, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: When a reflex action is executed, the Task Command Queue is cleared. Thus, reflexive actions cannot be integrated with task commands. Also, since Reflex Command Queues are tied to specific monitor events, all possible exceptional conditions requiring reflex action must be pre-determined. The German ROTEX telerobotic experiment <ref> [12] </ref> is another example of shared human-autonomous control. This space robot technology experiment flew in Spacelab mission D2 in 1993. A sophisticated 6-axis robot was placed inside a Spacelab rack where it performed assembly, connection/disconnection and grasping operations.
Reference: [13] <author> J. Connell and P. Viola, </author> <title> "Cooperative control of a semi-autonomous mobile robot," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pp. 1118 - 1121, </pages> <address> Cincinnati, OH, </address> <month> May </month> <year> 1990, </year> <note> IEEE. </note>
Reference-contexts: Task planning is performed manually a-priori by the system designer. While an excellent demonstration of telerobotics, control modes in ROTEX were predetermined and inflexible. An open question is the scalability of the technology demonstrated. The interaction of a human with a reactive wheelchair system is described in <ref> [13] </ref>. Because of ergonomic constraints, the operator did not have direct control of many system parameters; however, this system gave a very `hands-on' demonstration of the power of coupling human intelligence with autonomous capability.
Reference: [14] <author> P. Maes, </author> <title> "Situated agents can have goals," In Designing Autonomous Agents: Theory and Practice from Biology to Engineering and Back, </title> <editor> P. Maes, </editor> <booktitle> editor, </booktitle> <pages> pp. 49-70, </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Similarly, a TaS must integrate commands from the operator (s) with those from autonomous agents. How this arbitration is performed is a crucial problem. Tyrrell [5] compared a number of action selection mechanisms (ASM's), primarily from the field of reactive control, including the techniques used by Maes <ref> [14] </ref>, Rosenblatt and Payton [15], and Brooks [7]. The comparison was done using an elaborate simulated environment, which uncovered flaws in each of the ASM's.
Reference: [15] <author> J. K. Rosenblatt and D. W. Payton, </author> <title> "A fine-grained alternative to the subsumption architecture," </title> <booktitle> In Proc. AAAI Stanford Spring Symposium Series, </booktitle> <pages> pp. 70 - 74, </pages> <year> 1989. </year>
Reference-contexts: How this arbitration is performed is a crucial problem. Tyrrell [5] compared a number of action selection mechanisms (ASM's), primarily from the field of reactive control, including the techniques used by Maes [14], Rosenblatt and Payton <ref> [15] </ref>, and Brooks [7]. The comparison was done using an elaborate simulated environment, which uncovered flaws in each of the ASM's. By making minor additions and modifications to the various ASM's, Tyrrell was able to achieve improved results, particularly in the case of Rosenblatt and Payton's system. <p> In cases where a buffer does not supply commands for all degrees of freedom, a null command is placed in the appropriate position in the command vector. c 1 is constructed according to ffi 1 as given in Equation 16. That is: c 1 = <ref> [10; 15; 20; *] </ref> (28) where * represents the null command for the gripper. c 2 is similar to c 1 , except that the data from fi q must be transformed according to the homogeneous transform of Equation 17 giving: c 2 = [22; 20; 100; *] (29) c 3
Reference: [16] <author> J. Rumbaugh et al., </author> <title> Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1987. </year>
Reference-contexts: This model is built according to the Object Modeling Technique (OMT) of Rumbaugh <ref> [16] </ref>. OMT is an object-oriented modeling technique which was developed to improve the front-end tasks of systems development (requirements analysis, system design, and implementation). <p> It is the use of object-oriented techniques that allows us to realize the capabilities claimed in Section 1. For further information on OMT, the reader is referred to Rumbaugh's text <ref> [16] </ref>. The teleautonomous system is comprised of at least the following elements: control sources, communication links, robots, sensors, and humans. A set of control sources must be tied to a particular robot through some mechanism, which we refer to as the Action Selection Mechanism (ASM).
Reference: [17] <author> B. S. Graves, </author> <title> Situation-Based Action Selection in Teleautonomous Systems, </title> <type> PhD thesis, </type> <institution> Texas A&M University, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: Suffice it to say that these models provided a clearer picture of the architectural requirements for teleautonomy, and eased the design and implementation phases. Further details of the object, dynamic, and functional models will be documented in <ref> [17] </ref> 4 System Design Overview of Action Selection The design of the action selection mechanism is dictated by the analysis given in the previous section. This section will describe details of the system design. Figure 3 shows the relationships between the components of connected regions. the ASM design.
Reference: [18] <author> G. V. Kondraske, R. A. Volz, et al., </author> <title> "Network-based infrastructure for distributed remote operations and robotics research," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 9, no. 5, </volume> <pages> pp. 702 - 704, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: ASIAGO is intended to be integrated with other elements of the Telerobotic Construction Set (TCS), a modular telerobotic system, which has been developed by the Universities Space Automation/Robotics Consortium (USARC) <ref> [18] </ref>. TelRIP [19], an object-oriented data exchange mechanism, is used for communication between ASIAGO and the other TCS components. TelRIP runs above TCP/IP, and provides an event-driven application programmer's interface.
Reference: [19] <author> J. D. Wise and L. Ciscon, </author> <title> "TelRIP distributed applications environment operating manual," </title> <type> Technical Report 9103, </type> <institution> Rice University, 1992. Universites Space Automation/Robotics Consortium. </institution>
Reference-contexts: ASIAGO is intended to be integrated with other elements of the Telerobotic Construction Set (TCS), a modular telerobotic system, which has been developed by the Universities Space Automation/Robotics Consortium (USARC) [18]. TelRIP <ref> [19] </ref>, an object-oriented data exchange mechanism, is used for communication between ASIAGO and the other TCS components. TelRIP runs above TCP/IP, and provides an event-driven application programmer's interface.
Reference: [20] <author> V. Hayward and R. Paul, </author> <title> "Robot manipulator control under UNIX: RCCL, a robot control C library," </title> <journal> International Journal of Robotics Research, </journal> <volume> vol. 5, no. 4, </volume> <pages> pp. 94-111, </pages> <year> 1986. </year>
Reference-contexts: In cases where a buffer does not supply commands for all degrees of freedom, a null command is placed in the appropriate position in the command vector. c 1 is constructed according to ffi 1 as given in Equation 16. That is: c 1 = <ref> [10; 15; 20; *] </ref> (28) where * represents the null command for the gripper. c 2 is similar to c 1 , except that the data from fi q must be transformed according to the homogeneous transform of Equation 17 giving: c 2 = [22; 20; 100; *] (29) c 3 <p> That is: c 1 = [10; 15; 20; *] (28) where * represents the null command for the gripper. c 2 is similar to c 1 , except that the data from fi q must be transformed according to the homogeneous transform of Equation 17 giving: c 2 = <ref> [22; 20; 100; *] </ref> (29) c 3 is derived from buffers fi m and fi s , as shown in Equation 18. The contents of these buffers, as well as the constant value of 20 are passed to transformation function F r which returns c 3 . <p> ASIAGO will be initially used to control a Puma-560 and an American Robot Merlin manipulator. These robots are interfaced to ISA bus computers running LynxOS and RCCL <ref> [20] </ref>. ASIAGO's Integrators will contain a standardized RCCL interface which will be used to issue motion commands and receive sensor data. Ongoing work includes the analysis of algorithm performance, deadlocks, and synchronization issues.
References-found: 20

