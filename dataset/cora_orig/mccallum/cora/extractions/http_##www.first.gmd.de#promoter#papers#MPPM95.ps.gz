URL: http://www.first.gmd.de/promoter/papers/MPPM95.ps.gz
Refering-URL: http://www.first.gmd.de/promoter/papers/index.html
Root-URL: 
Title: Irregular Applications in PROMOTER  
Author: A. Schramm 
Keyword: programming model, massive parallelism, distributed memory, architecture independence, data parallelism, irregular applications.  
Address: Berlin, Germany  
Affiliation: RWCP Massively Parallel Systems GMD Laboratory  
Abstract: Parallel computers with distributed memory are gaining popularity on account of their optimal scalability. However, their efficient use requires a locality-preserving mapping of the application's underlying graph structure onto the physical topology of the target platform. PROMOTER is a parallel programming model which supports an automatic mapping by the compiler by making the graph structures explicit and thus processable by the implementation. This article describes how this is done for applications with irregular and dynamic spatial structures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. E. Blelloch. NESL: </author> <title> A nested data-parallel language. </title> <type> Technical report CMU-CS-93-129, </type> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types. (e.g., CDT [7], NESL <ref> [1] </ref>, Powerlist [6].) There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
Reference: [2] <author> W. K. Giloi and A. Schramm. </author> <title> PROMOTER, an application-oriented programming model for massive parallelism. </title> <booktitle> In Proceedings of the Massively Parallel Programming Model Working Conference, </booktitle> <pages> pages 198-205. </pages> <publisher> IEEE, </publisher> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Doing this by hand is usually considered low-level, circumstantial, and error-prone. In order to automatize this process, the high-level parallel programming model PROMOTER has been developed, whose primary principle is to make the logical graph structures of an application explicit <ref> [2] </ref>. To give an idea how this works even in the case of irregular and dynamic spatial structures is the purpose of this paper. Of course, other requirements of the envisaged scientific and numeric applications had also to be taken into account.
Reference: [3] <author> L. Greengard. </author> <title> The Rapid Evaluation of Potential Fields in Particle Systems. </title> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: Two cells (on the same level) are considered "sufficiently apart" if their distance is equal or greater than their edge length. This subdivision is repeated where necessary so that the cells at the finest level contain no more than n max (say, 40 <ref> [3] </ref>) particles. This is a classic multi-level approach, which leads to a complexity reduction from O (n 2 ) to O (n log n), or even to O (n) in the case of uniform distributions. <p> The method sketched so far is more or less the "Fast Mul-tipole Method" (FMM); see <ref> [3] </ref>. The nature of the application implies that (i) the distribution of particles is usually not uniform, and (ii) it can change substantially over the simulation time.
Reference: [4] <author> M. Griebel. </author> <title> Sparse grid multilevel methods, their parallelization, and their application to CFD. </title> <booktitle> In Parallel Computational Fluid Dynamics 1992, </booktitle> <pages> pages 161-174, </pages> <publisher> North-Holland, </publisher> <address> 1993. </address> <publisher> Elsevier Science Publishers B.V. </publisher>
Reference-contexts: Global forming rules. This means that a spatial structure is constructed systematically according to certain underlying forming rules. Such structures range from simple (e.g., regular grids) to complicated (e.g., sparse grids <ref> [4] </ref>; complex linear operators like Fast Fourier Transform or hierarchical preconditioners). The forming rules can often be easily expressed by index arithmetic. The fact that in PROMOTER the resulting index spaces need not be rectangular is the key for facilitating this task in the complex cases. 2. Enumerative unions.
Reference: [5] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran language specification. </title> <journal> Scientific Programming, </journal> <volume> 2 </volume> <pages> 1-170, </pages> <year> 1993. </year>
Reference-contexts: PROMOTER, on the other hand, expresses the spatial structures of an application explicitly and thus allows for a direct generation of a message-passing translation. High Performance Fortran. The conceptual differences between PROMOTER and HPF <ref> [5] </ref> become evident especially when it comes to irregular applications, a field which is admittedly problematic in HPF. HPF provides only "regular" data structures (i.e., arrays with rectangular index spaces), whose mapping is controlled by the user. Communication patterns are dispersed over index expressions and a few simple array intrinsics.
Reference: [6] <author> J. Misra. Powerlist: </author> <title> A structure for parallel recursion. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(6) </volume> <pages> 1737-1767, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types. (e.g., CDT [7], NESL [1], Powerlist <ref> [6] </ref>.) There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
Reference: [7] <author> D. B. Skillicorn. </author> <title> Practical parallel computation, II. categorical data types. </title> <type> External technical report, </type> <institution> Queen's University, Kingston, </institution> <address> Ontario, </address> <year> 1991. </year> <month> ISSN-0836-0227-91-313. </month>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types. (e.g., CDT <ref> [7] </ref>, NESL [1], Powerlist [6].) There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
References-found: 7

