URL: http://www.orie.cornell.edu/~shmoys/multicut.ps
Refering-URL: http://www.orie.cornell.edu/~shmoys/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: C H A P T E R CUT PROBLEMS AND THEIR APPLICATION TO DIVIDE-AND-CONQUER Divide-and-conquer
Author: David B. Shmoys 
Abstract-found: 0
Intro-found: 1
Reference: [AKR93] <author> A. Agrawal, P. Klein, and R. Ravi. </author> <title> Cutting down on fill using nested dissection: provably good elimination orderings. </title> <editor> In: J.A. George, J.R. Gilbert, and J. Liu, editors. </editor> <title> Sparse Matrix Computations: Graph Theory Issues and Algorithms, IMA Volumes in Mathematics and Its Applications, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993, </year> <pages> pages 31-55. </pages>
Reference-contexts: We shall call this the minimum chordal extension problem. Yannakakis [Yan81] showed that this problem is NP-complete. Agrawal, Klein, & Ravi <ref> [AKR93] </ref> focus on the case in which the maximum degree in the given graph is a constant 1, or equivalently, there are a constant number of non-zeroes in each row of the given matrix. <p> This result relies on several sophisticated results on the structure of chordal graphs, and it is beyond the scope of this chapter to prove the correctness and performance of this algorithm. For these results, and for a concise history of research on this problem, the reader is referred to <ref> [AKR93] </ref>. For a given ordering of the vertices v 1 ; : : : ; v n , we compute a sequence of graphs G i , i D 0; : : : ; n. The graph G 0 is the input graph G. <p> Let C ff denote the minimum size of an ff-balanced node separator. THEOREM 5.7 There exists a polynomial-time algorithm to find a 1/3-balanced node separator of a graph of size O.log nC 1=2 /. While the algorithm of Agrawal, Klein, & Ravi <ref> [AKR93] </ref> is a quite natural one, its analysis relies on a number of structural characterizations of chordal graphs that are beyond the scope of this chapter.
Reference: [AMO93] <author> R.K. Ahuja, T.L. Magnanti, and J.B. Orlin. </author> <title> Network flows: theory, algorithms, and applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: Furthermore, this optimal solution can be converted, in polynomial time, to an optimal solution to the linear program (5.6)-(5.8) by standard flow decomposition methods (see, e.g., Ahuja, Mag-nanti, & Orlin <ref> [AMO93] </ref>). Hence, we can find an optimal solution to the maximum mul-ticommodity flow problem in polynomial time. If we consider the dual linear program of this more compact formulation of the maximum multicommodity flow, then we obtain a linear program equivalent to (5.3), (5.4), & (5.9).
Reference: [AR95] <author> Y. Aumann and Y. Rabani. </author> <title> An O.log k/ approximate min-cut max-flow theorem and approximation algorithm. </title> <note> SIAM J. Comput., to appear. </note>
Reference-contexts: Plotkin & Tardos [PT95] gave a sophisticated rounding technique that yields an improved performance guarantee of O.log 2 k/. Finally, work of London, Linial, & Rabinovich [LLR95] and Aumann & Rabani <ref> [AR95] </ref> led to a much simpler O.log k/-approximation algorithm for the general case, thereby matching the performance of Leighton & Rao for the all-pairs unit-demand problem. 5.3.2 REDUCING THE SPARSEST CUT PROBLEM TO THE MINIMUM MULTICUT PROBLEM We will show how to use the information given by an optimal fractional solution <p> X d.i /y.i / &lt; iD1 H.D/ D.i / 1 k X D.i / D.i 1/ H.D/ iD1 sDD.i1/C1 s which contradicts (5.19). 5.3.3 EMBEDDINGS AND THE SPARSEST CUT PROBLEM In this section, we give an improved rounding method due to Linial, London, & Rabi-novich [LLR95] and Aumann & Rabani <ref> [AR95] </ref>; this yields an O.log k/-approximation algorithm for the sparsest cut problem. In Section 5.2, we viewed the fractional multicut x as specifying a length function on the edges. <p> The application of this embedding algorithm to the sparsest cut problem was discovered by Aumann & Rabani <ref> [AR95] </ref>, based on a preliminary version of [LLR95], and an essentially identical result was independently discovered by Linial, London, & Rabinovich [LLR95], and published together with their embedding algorithm.
Reference: [AvisD91] <author> D. Avis and M. Deza. </author> <title> The cut cone, L 1 embeddability, complexity, and multicommodity flows. </title> <journal> Networks, </journal> <volume> 21 </volume> <pages> 595-617, </pages> <year> 1991. </year>
Reference-contexts: For much more information the cut cone, and its relationship to embeddings and multicommodity flows, the reader is referred to the expository paper of Avis and Deza <ref> [AvisD91] </ref>. However, we shall now see that (5.26) easily implies the lemma. Let D P as in (5.26), where S &gt; 0 for each S 2 S.
Reference: [Bak94] <author> B. S. Baker. </author> <title> Approximation algorithms for NP-complete problems on planar graphs. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 41 </volume> <pages> 153-180, </pages> <year> 1994. </year>
Reference-contexts: However, in the subsequent years, Baker <ref> [Bak94] </ref> has given a better approach for exploiting planarity, and her work is discussed in Chapter 9.
Reference: [BTV95] <author> D. Bertsimas, C. Teo, and R. Vohra. </author> <title> Nonlinear formulations and improved randomized approximation algorithms for multicut problems. </title> <editor> In E. Balas and J. Clausen, editors, </editor> <title> Integer Programming and Combinatorial Optimization, </title> <booktitle> Lecture Notes in Computer Science 920, </booktitle> <pages> pages 29-40. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra <ref> [BV94, BTV95] </ref> have given other mathematical programming formulations which are more amenable to this approach. However, the bounds obtained from this approach do not dominate the ones presented here, and in some sense, build on the earlier work. Randomized rounding is extensively discussed in Chapter 11.
Reference: [BV94] <author> D. Bertsimas and R. Vohra. </author> <title> Linear programming relaxations, approximation algorithms, and randomized rounding: a unified approach to covering problems. </title> <note> Working paper #-3654-94 MSA, </note> <institution> Sloan School of Management, MIT, </institution> <address> Cambridge, MA, </address> <year> 1993. </year>
Reference-contexts: Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra <ref> [BV94, BTV95] </ref> have given other mathematical programming formulations which are more amenable to this approach. However, the bounds obtained from this approach do not dominate the ones presented here, and in some sense, build on the earlier work. Randomized rounding is extensively discussed in Chapter 11.
Reference: [BL84] <author> S.N. Bhatt and F.T. Leighton. </author> <title> A framework for solving VLSI graph layout problems. </title> <journal> J. Comput. Sys. Sciences, </journal> <volume> 28 </volume> <pages> 300-343, </pages> <year> 1984. </year>
Reference-contexts: In Section 5.5 we will discuss a variety of balanced cut theorems and their application to several different optimization problems. It is important to note that this framework for obtaining approximation algorithms by divide-and-conquer was proposed by Bhatt & Leighton <ref> [BL84] </ref>, who focused attention on designing an approximation algorithms for the graph bisection problem. We shall next try to motivate the mathematical ideas underlying Leighton & Rao's algorithm to find a good balanced cut. <p> Many of these applications were first proposed by Bhatt & Leighton <ref> [BL84] </ref> who focused attention on obtaining approximation algorithms for the graph bisection problem.
Reference: [Bou85] <author> J. Bourgain. </author> <title> On Lipschitz embedding of finite metric spaces in Hilbert space. </title> <journal> Israel J. Math., </journal> <pages> pages 46-52, </pages> <year> 1985. </year>
Reference-contexts: The crux of the approximation algorithm for the sparsest cut problem is an algorithm to find an embedding that roughly corresponds to the distances. The embedding algorithm that we shall give is due to Linial, London, & Rabinovich [LLR95], which is based on a result of Bourgain <ref> [Bou85] </ref>, which gives an exponential algorithm to find an embedding. <p> This is the crucial observation that drives the embedding-based proof of Bourgain <ref> [Bou85] </ref> and Linial, London, & Rabinovich [LLR95], and its proof is rather involved. We first focus on one particular commodity i , and prove that with probability at least 1 .1=2k/, k f .s i / f .t i /k 1 D .L y.i //.
Reference: [CY94] <author> F. R. K. Chung and S. T. Yau. </author> <title> A near optimal algorithm for edge separators. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-8, </pages> <year> 1994. </year>
Reference-contexts: Even more importantly, for each of the problems discussed, there is no complexity-theoretic evidence that a significantly better performance guarantee cannot be obtained; in fact, there may well be approximation algorithms with constant performance guarantees. In fact, Chung & Yau <ref> [CY94] </ref> gave an algorithm for which they claimed such a performance guarantee for the balanced cut problem, but the proof contained in [CY94] is not correct, and a correct proof of this claim has not been published. <p> In fact, Chung & Yau <ref> [CY94] </ref> gave an algorithm for which they claimed such a performance guarantee for the balanced cut problem, but the proof contained in [CY94] is not correct, and a correct proof of this claim has not been published. Finally, it is ironic that the pivotal result in this chapter, Corollary 5.3, which finds a good balanced cut, is not an approximation algorithm in the traditional sense.
Reference: [Chv83] <author> V. Chvatal. </author> <title> Linear programming. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: Of course, the strong duality theorem of linear programming states that the optimal value of the primal is equal to the optimal value of the dual, provided that an optimal solution exists (see, for example, Chvatal <ref> [Chv83] </ref>); hence, the minimum feasible pipe-system volume is equal to the total value of the maximum multicommodity flow. 5.2.3 SOLVING THE LINEAR PROGRAMS We have already indicated that the approximation algorithm of Garg, Vazirani, & Yan-nakakis will first find an optimal fractional multicut.
Reference: [CLR90] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press and McGraw Hill, </publisher> <address> Cambridge, MA and New York, </address> <year> 1990. </year>
Reference-contexts: we can give a much better implementation of Feedback-Cut by considering the vertices v in order of their distance from Ov; this implies that the algorithm is just a slight modification to Dijkstra's algorithm for the single-source shortest path problem (see, for example, the textbook of Cormen, Leiserson, and Rivest <ref> [CLR90] </ref>): Dijkstra's algorithm repeatedly identifies the next closest vertex to a given vertex Ov, and hence continually maintains a cut S of the appropriate form; after finding the next closest vertex to Ov, we need only check if the current S satisfies the conditions of Lemma 5.7.
Reference: [DJP C 92] <author> E. Dahlhaus, D.S. Johnson, C.H. Papadimitriou, P.D. Seymour, and M. Yannakakis. </author> <title> The complexity of multiway cuts. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 241-251, </pages> <year> 1992. </year> <title> 42 CHAPTER 5 CUT PROBLEMS AND DIVIDE-AND-CONQUER </title>
Reference-contexts: Unfortunately, the more general problem is NP-hard <ref> [DJP C 92] </ref>, and hence we shall consider approximation algorithms for it.
Reference: [ENRS95] <author> G. Even, J. Naor, S. Rao, and B. Schieber. </author> <title> Divide-and-conquer approximation algorithms via spreading metrics. </title> <booktitle> In Proceedings of the 36th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 62-71, </pages> <year> 1995. </year>
Reference-contexts: We shall present a more intuitive description of Seymour's result that is due to <ref> [ENRS95] </ref>. Even, Naor, Rao, & Schieber [ENRS95] have also extended this approach to yield similarly improved performance guarantees for a number of other problems. 5.4.1 AN LP-BASED APPROXIMATION ALGORITHM A feedback arc set in a directed graph G D .V ; A/ is a subset of arcs F A, such that <p> We shall present a more intuitive description of Seymour's result that is due to <ref> [ENRS95] </ref>. Even, Naor, Rao, & Schieber [ENRS95] have also extended this approach to yield similarly improved performance guarantees for a number of other problems. 5.4.1 AN LP-BASED APPROXIMATION ALGORITHM A feedback arc set in a directed graph G D .V ; A/ is a subset of arcs F A, such that if all arcs in F are
Reference: [ENSS95] <author> G. Even, J. Naor, B. Schieber, and M. Sudan. </author> <title> Approximating minimum feedback sets and multi-cuts in directed graphs. </title> <editor> In E. Balas and J. Clausen, editors, </editor> <title> Integer Programming and Combinatorial Optimization, </title> <booktitle> Lecture Notes in Computer Science 920, </booktitle> <pages> pages 14-28. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: As was observed in <ref> [ENSS95] </ref>, the following standard ideas allow this to be converted to an O.log n log log n/-approximation algorithm.
Reference: [FF56] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Maximal flow through a network. </title> <journal> Canadian J. Math, </journal> <volume> 8 </volume> <pages> 399-404, </pages> <year> 1956. </year>
Reference-contexts: The key ingredient to their approach is the design of approximation algorithms for certain cut problems. These algorithms, which are of independent interest, provide approximate max-flow min-cut theorems for multicommodity flow problems that are analogous to the famous max-flow min-cut theorem for (single-commodity) network flow of Ford and Fulkerson <ref> [FF56] </ref>. In this chapter, we will survey the techniques that were introduced by Leighton and Rao, as well as a number of advances that have been obtained subsequently in the area. <p> One of the most fundamental results in combinatorial optimization is the max-flow min-cut theorem of Ford and Fulkerson <ref> [FF56] </ref>, which states that the total cost of the minimum cut is exactly equal to the maximum flow value in the graph between s and t.
Reference: [Gar95] <author> N. Garg. </author> <title> A deterministic O.log k/-approximation algorithm for the sparsest cut problem. </title> <type> Preprint, </type> <year> 1995. </year>
Reference-contexts: Linial, London, & Rabinovich and, independently, Garg <ref> [Gar95] </ref> have subsequently shown that, like many other randomized algorithms whose analysis is based on Chernoff-type calculations, this algorithm can be derandomized. However, this deterministic version does not simply follow from an application of standard derandomization techniques to this algorithm; we shall omit the details.
Reference: [GSV94] <author> N. Garg, H. Saran, and V.V. Vazirani. </author> <title> Finding separator cuts in planar graphs within twice the optimal. </title> <booktitle> In Proceedings of the 35th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 14-23, </pages> <year> 1994. </year>
Reference-contexts: Furthermore, we have also omitted discussion of work on better performance guarantees of approximation algorithms for these cut problems when restricted to planar graphs, which includes results of Rao [Rao87], Garg, Saran, & Vazirani <ref> [GSV94] </ref>, Tardos & Vazirani [TV93], and Klein, Plotkin, & Rao [KPR91]. Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra [BV94, BTV95] have given other mathematical programming formulations which are more amenable to this approach.
Reference: [GK94] <author> M. D. Grigoriadis and L. G. Khachiyan. </author> <title> Fast approximation schemes for convex programs with many blocks and coupling constraints. </title> <journal> SIAM J. Optimization, </journal> <volume> 4 </volume> <pages> 86-107, </pages> <year> 1994. </year>
Reference-contexts: This was generalized by Plotkin, Shmoys, & Tardos [PST95] to yield a fully polynomial approximation scheme for a wide range of combinatorially defined linear programming problems, called fractional packing and covering problems. Results similar to those in [PST95] were independently obtained by Grigoriadis & Khachiyan <ref> [GK94] </ref>. We will explain the main ideas behind the framework proposed in [PST95] and show how it can be applied to the problem of computing a maximum multicommodity flow.
Reference: [GLS88] <author> M. Grotschel, L. Lovasz, and A. Schrijver. </author> <title> Geometric algorithms and combinatorial optimization. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: that in order to obtain a polynomial-time algorithm for a linear program with an exponential number of constraints, we need only provide a polynomial-time subroutine that, given a solution x , either proves that x is feasible, or else finds a violated constraint (see, for example, Grotschel, Lovasz, & Schrijver <ref> [GLS88] </ref>). This subroutine is said to solve the separation problem for this linear program. <p> Of course, in order to initiate this approach, one must observe that the linear program can be solved 28 CHAPTER 5 CUT PROBLEMS AND DIVIDE-AND-CONQUER in polynomial time by the ellipsoid algorithm, since the separation problem required is essentially an all-pairs shortest path computation <ref> [GLS88] </ref>. Alternatively, one can obtain a more efficient algorithm by formulating the problem as a fractional covering problem, and then applying the algorithm of Plotkin, Shmoys, & Tardos [PST95].
Reference: [Gol80] <author> M.C. Golumbic. </author> <title> Algorithmic Graph Theory and Perfect Graphs. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: These graphs are also commonly called triangulated graphs. It is beyond the scope of this chapter to prove this characterization of chordal graphs, and the reader is referred to the textbook of Golumbic <ref> [Gol80] </ref>. However, not all graphs are chordal, and hence in some cases, non-zeroes must be introduced in the process of performing Gaussian elimination. We shall be interested in finding an ordering of pivot elements so that the resulting number of non-zeroes is minimized.
Reference: [GRE84] <author> J.R. Gilbert, D.J. Rose, and A. Edenbrandt. </author> <title> A separator theorem for chordal graphs. </title> <journal> SIAM J. Alg. Discrete Methods, </journal> <volume> 5 </volume> <pages> 306-313, </pages> <year> 1984. </year>
Reference-contexts: For example, one key ingredient for the performance guarantee of this approximation algorithm is a result of Gilbert, Rose, and Edenbrandt <ref> [GRE84] </ref> that states that for each m-edge chordal graph, C 1=2 p 2m. Agrawal, Klein, & Ravi show that for graphs in which the maximum degree is bounded by a constant, the resulting nested dissection algorithm has a polylogarithmic performance guarantee.
Reference: [GVY93] <author> N. Garg, V. V. Vazirani, and M. Yannakakis. </author> <title> Approximate max-flow min-(multi)cut theorems and their applications. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 698-707, </pages> <year> 1993. </year>
Reference-contexts: LEMMA 5.1 For any input to the maximum multicommodity flow and the minimum multicut problems, the total flow value of any feasible flow is at most the cost of any multicut. 5.2.2 FRACTIONAL MULTICUTS, PIPE SYSTEMS, AND A STRONG DUALITY THEOREM Garg, Vazirani, & Yannakakis <ref> [GVY93] </ref> give an approximation algorithm for the minimum multicut problem that first solves the linear relaxation of (5.3)-(5.5), in which the constraints (5.5) are replaced by x .e/ 0; for each e 2 E ; (5.9) and then uses this optimal fractional multicut to guide the search for a good (integer) <p> that there exist more sophisticated approaches to formulate the maximum multicommodity flow problem as fractional packing problem, which lead to improved running times, but we shall instead discuss these ideas in the context of the maximum concurrent flow in Section 5.3. 5.2.4 FINDING A GOOD MULTICUT Garg, Vazirani, & Yannakakis <ref> [GVY93] </ref> gave an algorithm that takes as input a pipe system of volume , and computes a multicut of cost O.log k/. <p> Hence, the cost of the multicut is no more than X 2 ln.2k/V x .s i. j/ ; j / 4 ln.2k/; and we have obtained the result of Garg, Vazirani, & Yannakakis <ref> [GVY93] </ref>. THEOREM 5.1 The algorithm Pipe-Cut, when applied to an optimal fractional mul-ticut x fl , is a 4 ln.2k/-approximation algorithm for the minimum multicut problem.
Reference: [Han89] <author> M. Hansen. </author> <title> Approximation algorithms for geometric embeddings in the plane with applications to parallel processing problems. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 604-609, </pages> <year> 1989. </year>
Reference-contexts: This somewhat more general approach to using a balanced cut as a lower bound was first introduced in a different context by Hansen <ref> [Han89] </ref>. Although we have only given a few examples, there are quite a number of applications for which this approach has led to the first approximation algorithm with polylog-arithmic performance guarantee.
Reference: [Hu63] <author> T.C. Hu. </author> <title> Multicommodity network flows. </title> <journal> Operations Res., </journal> <volume> 11 </volume> <pages> 344-360, </pages> <year> 1963. </year>
Reference-contexts: Finally, it is not hard show that if there are only two commodities, then there exists an optimal length function .x fl ; y fl / for which a suitable embedding f is easy to construct; by applying Lemma 5.4, one obtains the min-max theorem of Hu <ref> [Hu63] </ref>. 5.3 SPARSEST CUTS AND MAXIMUM CONCURRENT FLOW 21 5.3.4 FINDING A GOOD EMBEDDING We can view equations (5.24) and (5.25) as taking an embedding f , and from the embedding constructing a fractional solution .x ; y/.
Reference: [Kah93] <author> N. Kahale. </author> <title> On reducing the cut ratio to the multicut problem. </title> <type> Technical Report 93-78, </type> <institution> DIMACS, </institution> <year> 1993. </year>
Reference-contexts: Klein, Rao, Agrawal & Ravi [KRAR95] considered the general case, and gave an O.log C log D/-approximation algorithm, where C denotes the sum of the edge costs in the graph and D denotes the total demand; Tragoudas [Tra91] subsequently improved this performance guarantee to O.log n log D/. Kahale <ref> [Kah93] </ref> showed how to obtain a bound of O.log k log D/ by showing, in effect, how to reduce the sparsest cut problem to the minimum multicut problem. Plotkin & Tardos [PT95] gave a sophisticated rounding technique that yields an improved performance guarantee of O.log 2 k/. <p> We shall actually give two algorithms to do this. In this subsection, we will present the result of Kahale <ref> [Kah93] </ref>, which relies on Theorem 5.1 to produce a cut of sparsity ratio within a factor of O.log D log k/ of the fractional optimum, where D denotes the total demand P k The main idea of this algorithm is quite simple.
Reference: [Kar84] <author> N. Karmarkar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <type> Combinatorica 4 </type> <pages> 373-395, </pages> <year> 1984. </year>
Reference-contexts: The more compact version has O.km/ variables and O.m C kn/ constraints, and hence can be solved in polynomial time, using any polynomial-time linear programming algorithm (e.g., that of Khachiyan [Kha79] or Karmarkar <ref> [Kar84] </ref>). Furthermore, this optimal solution can be converted, in polynomial time, to an optimal solution to the linear program (5.6)-(5.8) by standard flow decomposition methods (see, e.g., Ahuja, Mag-nanti, & Orlin [AMO93]). Hence, we can find an optimal solution to the maximum mul-ticommodity flow problem in polynomial time.
Reference: [Kha79] <author> L.G. Khachiyan. </author> <title> A polynomial algorithm in linear programming (in Russian). </title> <journal> Doklady Akademiia Nauk SSSR, </journal> <volume> 244 </volume> <pages> 1093-1096, </pages> <year> 1979. </year> <title> English translation: </title> <journal> Soviet Mathematics Doklady </journal> 20:191-194. 
Reference-contexts: It is not hard to show that this more compact linear program is equivalent to (5.6)- (5.8). The more compact version has O.km/ variables and O.m C kn/ constraints, and hence can be solved in polynomial time, using any polynomial-time linear programming algorithm (e.g., that of Khachiyan <ref> [Kha79] </ref> or Karmarkar [Kar84]). Furthermore, this optimal solution can be converted, in polynomial time, to an optimal solution to the linear program (5.6)-(5.8) by standard flow decomposition methods (see, e.g., Ahuja, Mag-nanti, & Orlin [AMO93]).
Reference: [KPR91] <author> P. Klein, S. Plotkin, and S. Rao. </author> <title> Planar graphs, multicommodity flow, and network decomposition. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 682-690, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, we have also omitted discussion of work on better performance guarantees of approximation algorithms for these cut problems when restricted to planar graphs, which includes results of Rao [Rao87], Garg, Saran, & Vazirani [GSV94], Tardos & Vazirani [TV93], and Klein, Plotkin, & Rao <ref> [KPR91] </ref>. Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra [BV94, BTV95] have given other mathematical programming formulations which are more amenable to this approach.
Reference: [KPST94] <author> P. Klein, S. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <journal> SIAM J. on Computing, </journal> <volume> 23 </volume> <pages> 310-321, </pages> <year> 1994. </year>
Reference-contexts: The key to analyzing the running time of this algorithm is an exponential potential function, which has been the basis for several subsequent papers as well. Klein, Plotkin, Stein, & Tardos <ref> [KPST94] </ref> and Leighton, Makedon, Plotkin, Stein, Tardos, & Tragoudas [LMP C 95] subsequently improved and extended this result to derive an algorithm for the maximum concurrent flow problem for which the running time for a k-commodity problem is competitive with the running time for k single-commodity maximum flow computations. <p> Furthermore, the required subroutine to optimize over Q is still relatively easy: it requires k (single-commodity) maximum flow computations. By incorporating randomization as first proposed by Klein, Plotkin, Stein, & Tardos <ref> [KPST94] </ref>, the effort for this step can be reduced to, in effect, a single max flow computation. This algorithm for the maximum concurrent flow problem is due to Leighton, Makedon, Plotkin, Stein, Tardos, & Tragoudas [LMP C 95].
Reference: [KRAR95] <author> P. Klein, S. Rao, A. Agrawal, and R. Ravi. </author> <title> An approximate max-flow min-cut relation for undirected multicommodity flow, with applications. </title> <journal> Combinatorica, </journal> <volume> REFERENCES 43 15 </volume> <pages> 187-202, </pages> <year> 1995. </year>
Reference-contexts: For this case, they showed how to construct a cut of sparsity ratio within a O.log n/ factor of the optimal value of the linear relaxation. Klein, Rao, Agrawal & Ravi <ref> [KRAR95] </ref> considered the general case, and gave an O.log C log D/-approximation algorithm, where C denotes the sum of the edge costs in the graph and D denotes the total demand; Tragoudas [Tra91] subsequently improved this performance guarantee to O.log n log D/.
Reference: [LLR95] <author> N. Linial, E. London, and Y. Rabinovich. </author> <title> The geometry of graphs and some of its algorithmic applications. </title> <journal> Combinatorica, </journal> <volume> 15 </volume> <pages> 215-246, </pages> <year> 1995. </year>
Reference-contexts: Plotkin & Tardos [PT95] gave a sophisticated rounding technique that yields an improved performance guarantee of O.log 2 k/. Finally, work of London, Linial, & Rabinovich <ref> [LLR95] </ref> and Aumann & Rabani [AR95] led to a much simpler O.log k/-approximation algorithm for the general case, thereby matching the performance of Leighton & Rao for the all-pairs unit-demand problem. 5.3.2 REDUCING THE SPARSEST CUT PROBLEM TO THE MINIMUM MULTICUT PROBLEM We will show how to use the information given <p> This would imply that k X d.i /y.i / &lt; iD1 H.D/ D.i / 1 k X D.i / D.i 1/ H.D/ iD1 sDD.i1/C1 s which contradicts (5.19). 5.3.3 EMBEDDINGS AND THE SPARSEST CUT PROBLEM In this section, we give an improved rounding method due to Linial, London, & Rabi-novich <ref> [LLR95] </ref> and Aumann & Rabani [AR95]; this yields an O.log k/-approximation algorithm for the sparsest cut problem. In Section 5.2, we viewed the fractional multicut x as specifying a length function on the edges. <p> The crux of the approximation algorithm for the sparsest cut problem is an algorithm to find an embedding that roughly corresponds to the distances. The embedding algorithm that we shall give is due to Linial, London, & Rabinovich <ref> [LLR95] </ref>, which is based on a result of Bourgain [Bou85], which gives an exponential algorithm to find an embedding. The application of this embedding algorithm to the sparsest cut problem was discovered by Aumann & Rabani [AR95], based on a preliminary version of [LLR95], and an essentially identical result was independently <p> is due to Linial, London, & Rabinovich <ref> [LLR95] </ref>, which is based on a result of Bourgain [Bou85], which gives an exponential algorithm to find an embedding. The application of this embedding algorithm to the sparsest cut problem was discovered by Aumann & Rabani [AR95], based on a preliminary version of [LLR95], and an essentially identical result was independently discovered by Linial, London, & Rabinovich [LLR95], and published together with their embedding algorithm. <p> The application of this embedding algorithm to the sparsest cut problem was discovered by Aumann & Rabani [AR95], based on a preliminary version of <ref> [LLR95] </ref>, and an essentially identical result was independently discovered by Linial, London, & Rabinovich [LLR95], and published together with their embedding algorithm. <p> This is the crucial observation that drives the embedding-based proof of Bourgain [Bou85] and Linial, London, & Rabinovich <ref> [LLR95] </ref>, and its proof is rather involved. We first focus on one particular commodity i , and prove that with probability at least 1 .1=2k/, k f .s i / f .t i /k 1 D .L y.i //.
Reference: [LMP C 95] <author> T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, and S. Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problems. </title> <journal> J. Comput. Sys. Sciences, </journal> <volume> 50 </volume> <pages> 228-243, </pages> <year> 1995. </year>
Reference-contexts: The key to analyzing the running time of this algorithm is an exponential potential function, which has been the basis for several subsequent papers as well. Klein, Plotkin, Stein, & Tardos [KPST94] and Leighton, Makedon, Plotkin, Stein, Tardos, & Tragoudas <ref> [LMP C 95] </ref> subsequently improved and extended this result to derive an algorithm for the maximum concurrent flow problem for which the running time for a k-commodity problem is competitive with the running time for k single-commodity maximum flow computations. <p> By incorporating randomization as first proposed by Klein, Plotkin, Stein, & Tardos [KPST94], the effort for this step can be reduced to, in effect, a single max flow computation. This algorithm for the maximum concurrent flow problem is due to Leighton, Makedon, Plotkin, Stein, Tardos, & Tragoudas <ref> [LMP C 95] </ref>. Finally, the dual variables maintained by this algorithm can be easily adapted to yield the required near-optimal solution for (5.18)-(5.22). MINIMUM FEEDBACK ARC SETS AND RELATED PROBLEMS 5.4 The techniques described in the previous two sections were limited to undirected graphs.
Reference: [LR88] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: In one of the most important breakthroughs in the design and analysis of approximation algorithms in the past decade, Leighton and Rao <ref> [LR88, LR94] </ref> devised an elegant approach for using 1 2 CHAPTER 5 CUT PROBLEMS AND DIVIDE-AND-CONQUER divide-and-conquer in a way that produced superior performance guarantees for a wide range of problems. The key ingredient to their approach is the design of approximation algorithms for certain cut problems. <p> Furthermore, whereas both multicommodity generalizations of the flow problem can be solved (via linear programming algorithms) in polynomial time, the minimum multicut and sparsest cut problems are NP-hard. (In contrast, the variants of these multicommodity flow problems in which we restrict attention to integer-valued flows in NP-hard.) Leighton & Rao <ref> [LR88] </ref> gave an approximate multicommodity max-flow min-cut theorem, by giving an algorithm that finds a feasible concurrent flow and a corresponding sparse cut for which the objective function values are within a logarithmic factor of each other. <p> Leighton & Rao <ref> [LR88] </ref> considered arbitrary graphs, but restricted attention to the case in which there is a commodity for each pair of vertices, and each demand d.i / D 1. <p> Finally, the dual variables maintained by this algorithm can be easily adapted to yield the required near-optimal solution for (5.18)-(5.22). MINIMUM FEEDBACK ARC SETS AND RELATED PROBLEMS 5.4 The techniques described in the previous two sections were limited to undirected graphs. Leighton & Rao <ref> [LR88] </ref> also considered a rather special case in which the graphs are directed: they were able to extend Theorem 5.4, which bounds the ratio between the optimal values to the maximum concurrent flow and the sparsest cut problems, to the case in which there is a unit-demand commodity between each (ordered) <p> N S/ iD1 ` X C fi s i .fi ff/ The relationship between the sparsest cut problem and obtaining a balanced cut was independently discovered by Leighton & Rao <ref> [LR88] </ref> and Plaisted [Pla90]. By combining Theorem 5.6 with the O.log k/-approximation algorithm for the sparsest cut problem that was given in Section 5.3, we obtain the following corollary.
Reference: [LR94] <author> F. T. Leighton and S. Rao. </author> <title> An approximation max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <type> Unpublished manuscript, </type> <year> 1994. </year>
Reference-contexts: In one of the most important breakthroughs in the design and analysis of approximation algorithms in the past decade, Leighton and Rao <ref> [LR88, LR94] </ref> devised an elegant approach for using 1 2 CHAPTER 5 CUT PROBLEMS AND DIVIDE-AND-CONQUER divide-and-conquer in a way that produced superior performance guarantees for a wide range of problems. The key ingredient to their approach is the design of approximation algorithms for certain cut problems. <p> Such a separator was known to be computable (Leighton & Rao <ref> [LR94] </ref> and Tragoudas [Tra91]). A subset of nodes S is an ff-balanced node separator of an n-vertex graph G D .V ; E / if each connected component of V X has at most .1 ff/n vertices. Let C ff denote the minimum size of an ff-balanced node separator.
Reference: [LT80] <author> R.J. Lipton and R.E. Tarjan. </author> <title> Applications of a planar separator theorem. </title> <journal> SIAM J. Comput., </journal> <volume> 9 </volume> <pages> 615-627, </pages> <year> 1980. </year>
Reference-contexts: However, we will briefly mention two of the most prominent areas that we have omitted. The first success in applying divide-and-conquer based on finding good cuts was for the restricted case of planar graphs; as one of the initial applications of their planar separator theorem, Lipton & Tarjan <ref> [LT80] </ref> observed that one could derive polynomial approximation schemes for a wide variety of combinatorial problems. However, in the subsequent years, Baker [Bak94] has given a better approach for exploiting planarity, and her work is discussed in Chapter 9.
Reference: [MR95] <author> R. Motwani and P. Raghavan. </author> <title> Randomized algorithms. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1995. </year>
Reference-contexts: Randomized approximation algorithms are discussed in much greater detail in Chapter 11 of this volume, and we shall rely on basic tools of analysis that are developed in that chapter. Alternatively, the reader can consult the recent book of Motwani & Raghavan <ref> [MR95] </ref> for an even more thorough investigation of this area. <p> In particular, we shall use the following statement of the Chernoff bound: if E [ P ` X ` ] D , then Pr [ ` X ` &lt; =2] exp.=8/: (This follows, for example, from Theorem 4.2 of <ref> [MR95] </ref>.) Since L=11 D q log k=11, we see that if we set q to be, say, 200, then this probability is less than 1 .2k/log.2k/ .
Reference: [Pla90] <author> D. Plaisted. </author> <title> A heuristic algorithm for small separators in planar graphs. </title> <journal> SIAM J. Comput., </journal> <volume> 19 </volume> <pages> 267-280, </pages> <year> 1990. </year>
Reference-contexts: N S/ iD1 ` X C fi s i .fi ff/ The relationship between the sparsest cut problem and obtaining a balanced cut was independently discovered by Leighton & Rao [LR88] and Plaisted <ref> [Pla90] </ref>. By combining Theorem 5.6 with the O.log k/-approximation algorithm for the sparsest cut problem that was given in Section 5.3, we obtain the following corollary.
Reference: [PST95] <author> S. A. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Math. Oper. Res., </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: This was generalized by Plotkin, Shmoys, & Tardos <ref> [PST95] </ref> to yield a fully polynomial approximation scheme for a wide range of combinatorially defined linear programming problems, called fractional packing and covering problems. Results similar to those in [PST95] were independently obtained by Grigoriadis & Khachiyan [GK94]. We will explain the main ideas behind the framework proposed in [PST95] and <p> This was generalized by Plotkin, Shmoys, & Tardos <ref> [PST95] </ref> to yield a fully polynomial approximation scheme for a wide range of combinatorially defined linear programming problems, called fractional packing and covering problems. Results similar to those in [PST95] were independently obtained by Grigoriadis & Khachiyan [GK94]. We will explain the main ideas behind the framework proposed in [PST95] and show how it can be applied to the problem of computing a maximum multicommodity flow. <p> Tardos <ref> [PST95] </ref> to yield a fully polynomial approximation scheme for a wide range of combinatorially defined linear programming problems, called fractional packing and covering problems. Results similar to those in [PST95] were independently obtained by Grigoriadis & Khachiyan [GK94]. We will explain the main ideas behind the framework proposed in [PST95] and show how it can be applied to the problem of computing a maximum multicommodity flow. <p> This can be done, for example, by Dijkstra's algorithm, starting at each source node s i , i D 1; : : : ; k, and then choosing the minimum-length path found over all k computations. Hence, the maximum multicommodity flow problem can be cast into the framework of <ref> [PST95] </ref>. The main idea of the algorithm of [PST95] is as follows: iteratively maintain a solution z (or in our case, a flow of value f ). <p> Hence, the maximum multicommodity flow problem can be cast into the framework of <ref> [PST95] </ref>. The main idea of the algorithm of [PST95] is as follows: iteratively maintain a solution z (or in our case, a flow of value f ). This solution is feasible for some choice of , and we wish to change z so that the corresponding minimal choice of decreases over the execution of the algorithm. <p> Alternatively, one can obtain a more efficient algorithm by formulating the problem as a fractional covering problem, and then applying the algorithm of Plotkin, Shmoys, & Tardos <ref> [PST95] </ref>. From this outline, it is clear that the key to the performance bound is the way in which the graph is partitioned. Let denote the value of the optimal fractional solution x fl .
Reference: [PT95] <author> S. Plotkin and E. Tardos. </author> <title> Improved bounds on the max-flow min-cut ratio for multicommodity flows. </title> <journal> Combinatorica, </journal> <volume> 15 </volume> <pages> 425-434, </pages> <year> 1995. </year>
Reference-contexts: Kahale [Kah93] showed how to obtain a bound of O.log k log D/ by showing, in effect, how to reduce the sparsest cut problem to the minimum multicut problem. Plotkin & Tardos <ref> [PT95] </ref> gave a sophisticated rounding technique that yields an improved performance guarantee of O.log 2 k/.
Reference: [RAK91] <author> R. Ravi, A. Agrawal, and P. Klein. </author> <title> Ordering problems approximated: single-processor scheduling and interval graph completion. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages, and Processing, Lecture Notes in Computer Science 510, </booktitle> <pages> pages 751-762, </pages> <year> 1991. </year>
Reference-contexts: Then the cost associated with this solution is X c.e/ . kDi that is, the total storage-time product needed to maintain intermediate results. That is, the storage-time product problem is to compute the ordering of V consistent with for which the cost (5.56) is minimized. Ravi, Agrawal, & Klein <ref> [RAK91] </ref> have given an O.log n log P/-approximation algorithm for this problem, where P denotes the total processing time. For ease of exposition, we will present their algorithm for the special case in which each processing time p.v/ D 1.
Reference: [Rao87] <author> S. Rao. </author> <title> Finding near optimal separators in planar graphs. </title> <booktitle> In Proceedings of the 28th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 225-237, </pages> <year> 1987. </year>
Reference-contexts: 1; : : : ; k; (5.20) y.i / 0; for each i D 1; : : : ; k; (5.21) x .e/ 0; for each e 2 E : (5.22) This linear program can be solved in polynomial time; we defer further discussion of this until Section 5.3.5 Rao <ref> [Rao87] </ref> focused attention on the sparsest cut problem, and showed its importance in computing a balanced cut (albeit only in the context of planar graphs). <p> Furthermore, we have also omitted discussion of work on better performance guarantees of approximation algorithms for these cut problems when restricted to planar graphs, which includes results of Rao <ref> [Rao87] </ref>, Garg, Saran, & Vazirani [GSV94], Tardos & Vazirani [TV93], and Klein, Plotkin, & Rao [KPR91]. Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra [BV94, BTV95] have given other mathematical programming formulations which are more amenable to this approach.
Reference: [Sey95] <author> P.D. Seymour. </author> <title> Packing directed circuits fractionally. </title> <journal> Combinatorica, </journal> <volume> 15 </volume> <pages> 281-288, </pages> <year> 1995. </year>
Reference-contexts: One 5.4 MINIMUM FEEDBACK ARC SETS AND RELATED PROBLEMS 27 of the primary applications of this generalization is an O.log 2 n/-approximation algorithm for the minimum-cost feedback arc set in directed graphs. This was improved by Seymour <ref> [Sey95] </ref>, who gave an O.log n log log n/-approximation algorithm. His algorithm is quite similar in spirit to the techniques that we have described in the previous two sections, and hence we shall give his result, even though it does not explicitly rely on any connection to multicommodity flow problems. <p> One corollary of Theorem 5.5 is that the ratio between the optimal value of the integer program (5.42)-(5.44), and its linear relaxation is O.log fl log log fl /. Alon and Seymour <ref> [Sey95] </ref> have shown that there are instances for which this ratio is .log fl /.
Reference: [SM90] <author> F. Shahrokhi and D.W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 37 </volume> <pages> 318-334, </pages> <year> 1990. </year>
Reference-contexts: Since we are losing a logarithmic factor in finding a multicut from the LP solution, it makes sense to relax our aim to finding a near-optimal LP solution, especially since this appears to be an easier computational problem. Shahrokhi & Matula <ref> [SM90] </ref> have proposed a combinatorial algorithm for a rather special case of the maximum concurrent flow problem that delivers a flow of objective function value within a factor of .1 C */ of optimal in time bounded by a polynomial in the size of the graph and 1=*.
Reference: [Tra91] <author> S. Tragoudas. </author> <title> VLSI partitioning approximation algorithms based on multicommodity flow and other techniques. </title> <type> PhD thesis, </type> <institution> University of Texas, Dallas, </institution> <year> 1991. </year>
Reference-contexts: Klein, Rao, Agrawal & Ravi [KRAR95] considered the general case, and gave an O.log C log D/-approximation algorithm, where C denotes the sum of the edge costs in the graph and D denotes the total demand; Tragoudas <ref> [Tra91] </ref> subsequently improved this performance guarantee to O.log n log D/. Kahale [Kah93] showed how to obtain a bound of O.log k log D/ by showing, in effect, how to reduce the sparsest cut problem to the minimum multicut problem. <p> Such a separator was known to be computable (Leighton & Rao [LR94] and Tragoudas <ref> [Tra91] </ref>). A subset of nodes S is an ff-balanced node separator of an n-vertex graph G D .V ; E / if each connected component of V X has at most .1 ff/n vertices. Let C ff denote the minimum size of an ff-balanced node separator.
Reference: [TV93] <author> E. Tardos and V. V. Vazirani. </author> <title> Improved bounds for the max-flow min-multicut ratio for planar and K r;r -free graphs. </title> <journal> Inform. Proc. Lett., </journal> <volume> 47 </volume> <pages> 77-80, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, we have also omitted discussion of work on better performance guarantees of approximation algorithms for these cut problems when restricted to planar graphs, which includes results of Rao [Rao87], Garg, Saran, & Vazirani [GSV94], Tardos & Vazirani <ref> [TV93] </ref>, and Klein, Plotkin, & Rao [KPR91]. Randomized rounding has also been applied in the context multicut approximation algorithms; Bertsimas, Teo, & Vohra [BV94, BTV95] have given other mathematical programming formulations which are more amenable to this approach.
Reference: [Yan81] <author> M. Yannakakis. </author> <title> Computing the minimum fill-in is NP-complete. </title> <journal> SIAM J. Alg. Discrete Methods, </journal> <volume> 2 </volume> <pages> 77-79, </pages> <year> 1981. </year>
Reference-contexts: We shall call this the minimum chordal extension problem. Yannakakis <ref> [Yan81] </ref> showed that this problem is NP-complete. Agrawal, Klein, & Ravi [AKR93] focus on the case in which the maximum degree in the given graph is a constant 1, or equivalently, there are a constant number of non-zeroes in each row of the given matrix.
References-found: 47

