URL: http://www.cs.uoregon.edu/~sabry/papers/reflection.ps
Refering-URL: http://www.cs.uoregon.edu/~sabry/papers/index.html
Root-URL: http://www.cs.uoregon.edu
Email: sabry@cs.uoregon.edu  wadler@dcs.glasgow.ac.uk  
Title: A Reflection on Call-by-Value  
Author: Amr Sabry Philip Wadler 
Address: Eugene, OR 97403  Glasgow G12 8QQ, Scotland  
Affiliation: University of Oregon  University of Glasgow  
Abstract: A number of compilers exploit the following strategy: translate a term to continuation-passing style (CPS) and optimize the resulting term using a sequence of reductions. Recent work suggests that an alternative strategy is superior: optimize directly in an extended source calculus. We suggest that the appropriate relation between the source and target calculi may be captured by a special case of a Galois connection known as a reflection. Previous work has focused on the weaker notion of an equational correspondence, which is based on equality rather than reduction. We show that Moggi's monad translation and Plotkin's CPS translation can both be regarded as reflections, and thereby strengthen a number of results in the literature. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Appel, A. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [2] <author> Ariola, Z., Felleisen, M., Maraist, J., Odersky, M., and Wadler, P. </author> <title> A call-by-need lambda calculus. </title> <booktitle> In ACM Symposium on Principles of Programming Languages (1995), </booktitle> <pages> pp. 233-246. </pages>
Reference: [3] <author> Davey, B. A., and Priestley, H. A. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [4] <author> Fischer, M. </author> <title> Lambda calculus schemata. In ACM Conference on Proving Assertions about Programs (1972), </title> <journal> SIGPLAN Notices, </journal> <volume> bf 7, 1, </volume> <pages> 11 pp. 104-109. </pages> <note> Revised version in Lisp and Sym--bolic Computation, 6, 3/4, </note> <year> (1993) </year> <month> 259-287. </month>
Reference: [5] <author> Flanagan, C., Sabry, A., Duba, B., and Felleisen, M. </author> <title> The essence of compiling with continuations. </title> <booktitle> In ACM SIGPLAN Conference on Programming Language Design and Implementation (1993), </booktitle> <pages> pp. 237-247. </pages>
Reference: [6] <author> Hatcliff, J., and Danvy, O. </author> <title> A generic account of continuation-passing styles. </title> <booktitle> In Proceedings of the 21th ACM Symposium on Principles of Programming Languages (1994), </booktitle> <pages> pp. 458-471. </pages>
Reference: [7] <author> Kranz, D., et al. </author> <title> Orbit: An optimizing compiler for Scheme. </title> <booktitle> In ACM SIGPLAN Symposium on Compiler Construction (1986), SIG-PLAN Notices, </booktitle> <volume> 21, 7, </volume> <pages> pp. 219-233. </pages>
Reference: [8] <author> Landin, P. </author> <title> The mechanical evaluation of expressions. </title> <journal> Computer Journal 6, </journal> <volume> 4 (1964), </volume> <pages> 308-320. </pages>
Reference: [9] <author> Lane, S. M. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer-Verlag, </publisher> <year> 1971. </year>
Reference: [10] <author> Lawall, J., and Danvy, O. </author> <title> Separating stages in the continuation-passing transform. </title> <booktitle> In Proceedings of the 20th ACM Symposium on Principles of Programming Languages (1993), </booktitle> <pages> pp. 124-136. </pages>
Reference: [11] <author> Maraist, J., et al. </author> <title> Call-by-name, call-by-value, call-by-need and the linear lambda calculus. </title> <booktitle> In Conference on Mathematical Foundations of Programming Semantics (1995). </booktitle>
Reference: [12] <author> Moggi, E. </author> <title> Computational lambda-calculus and monads. </title> <type> Tech. Rep. </type> <institution> ECS-LFCS-88-86, University of Edinburgh, </institution> <year> 1988. </year>
Reference: [13] <author> Moggi, E. </author> <title> Computational lambda-calculus and monads. </title> <booktitle> In Proceedings of the Symposium on Logic in Computer Science (1989), </booktitle> <pages> pp. 14-23. </pages>
Reference: [14] <author> Moggi, E. </author> <title> Notions of computation and mon-ads. </title> <booktitle> Information and Computation 93 (1991), </booktitle> <pages> 55-92. </pages>
Reference: [15] <author> Plotkin, G. </author> <title> Call-by-name, call-by-value, and the -calculus. </title> <booktitle> Theoretical Computer Science 1 (1975), </booktitle> <pages> 125-159. </pages>
Reference: [16] <author> Reynolds, J. C. </author> <title> The discoveries of continuations. </title> <booktitle> Lisp and Symbolic Computation 6, 3/4 (1993), </booktitle> <pages> 233-247. </pages>
Reference: [17] <author> Sabry, A., and Felleisen, M. </author> <title> Reasoning about programs in continuation-passing style. </title> <booktitle> Lisp and Symbolic Computation 6, 3/4 (1993), </booktitle> <pages> 289-360. </pages>
Reference: [18] <author> Steele, G. L. Rabbit: </author> <title> A compiler for Scheme. MIT AI Memo 474, </title> <institution> Massachusetts Institute of Technology, </institution> <year> 1978. </year> <month> 12 </month>
References-found: 18

