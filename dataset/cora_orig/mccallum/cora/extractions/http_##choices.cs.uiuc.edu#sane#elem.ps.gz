URL: http://choices.cs.uiuc.edu/sane/elem.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/sane/home.html
Root-URL: http://www.cs.uiuc.edu
Email: email: sane@cs.uiuc.edu  
Title: DRAFT The Elements of Pattern Style  
Author: Aamod Sane 
Date: Dec 28 1995  
Web: www: http://choices.cs.uiuc.edu/sane/home.html  
Affiliation: University of Illinois at Urbana-Champaign  
Abstract: Design patterns codify "good" existing practice by documenting the assumptions, structure, dynamics and consequences of a design decision. The primary purpose of a pattern is communicating design insights, so clear exposition is necessary for a good pattern. This paper presents guidelines that help a writer avoid common errors, making patterns coherent and easier to understand. The guidelines are inspired by discussions during a session at the Pattern Languages of Programs conference in 1995.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kent Beck and Ralph Johnson. </author> <title> Patterns generate architectures. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming (ECOOP'94), </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Design patterns are a rational reconstruction of existing programming practice. Such rational reconstruction is vital, because this allows us to reuse designs, standardizes notation, and may help us approximate a rational design process <ref> [3, 1] </ref>. A pattern identifies key assumptions that govern a design decision, informs a designer about non-functional consequences (e.g., extensibility, portability) of the design, and discusses alternative solutions. Since patterns are about communicating designs, much of the value of a pattern is determined by the quality of exposition.
Reference: [2] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Object-Oriented Software Architecture. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1994. </year> <note> 6 DRAFT </note>
Reference-contexts: In the following, we first consider basic parts of a pattern and then list general guidelines, and some alternative forms. 2 Parts of a Pattern Title Commonly, pattern titles appear to be noun phrases describing attributes like: * Design Decision: The central design decision, as in Chain of Responsibility <ref> [2] </ref>. * Participants: Names of the main objects of the pattern, such as Publisher-Subscriber. * Function: What the pattern does, e.g., Abstract Factory [2]. Think about the name carefully. Consider its origins | names that describe concepts well-known in the Smalltalk community may not be apparent to C++ readers. <p> of a Pattern Title Commonly, pattern titles appear to be noun phrases describing attributes like: * Design Decision: The central design decision, as in Chain of Responsibility <ref> [2] </ref>. * Participants: Names of the main objects of the pattern, such as Publisher-Subscriber. * Function: What the pattern does, e.g., Abstract Factory [2]. Think about the name carefully. Consider its origins | names that describe concepts well-known in the Smalltalk community may not be apparent to C++ readers. You should also consider the tradeoff between short and long names. <p> If your pattern is a combination of previously well known patterns, or a small variation, this is the place to indicate it. I like equations like 2 : MyPattern = GOF-Pattern-X + Feature Y. 2 GOF = Gang of Four, the authors of <ref> [2] </ref> 2 DRAFT Your advanced audience will benefit from this. A construction like this, especially if has been encountered at least twice (hopefully under apparently unrelated circumstances), might indicate an important special case. Motivation/Problem Say something about a prototypical problem, and motivate your solution.
Reference: [3] <author> David Lorge Parnas and Paul C. Clements. </author> <title> A rational design process: How and why to fake it. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(2) </volume> <pages> 251-257, </pages> <month> February </month> <year> 1986. </year> <month> 7 </month>
Reference-contexts: 1 Introduction Design patterns are a rational reconstruction of existing programming practice. Such rational reconstruction is vital, because this allows us to reuse designs, standardizes notation, and may help us approximate a rational design process <ref> [3, 1] </ref>. A pattern identifies key assumptions that govern a design decision, informs a designer about non-functional consequences (e.g., extensibility, portability) of the design, and discusses alternative solutions. Since patterns are about communicating designs, much of the value of a pattern is determined by the quality of exposition.
References-found: 3

