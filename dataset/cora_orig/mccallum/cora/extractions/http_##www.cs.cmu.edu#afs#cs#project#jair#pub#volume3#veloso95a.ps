URL: http://www.cs.cmu.edu/afs/cs/project/jair/pub/volume3/veloso95a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/veloso95a.html
Root-URL: 
Email: veloso@cs.cmu.edu  Stone pstone@cs.cmu.edu  
Title: FLECS: Planning with a Flexible Commitment Strategy  
Author: Manuela Veloso Peter 
Address: Pittsburgh, PA 15213-3891 USA  
Affiliation: Department of Computer Science, Carnegie Mellon University  
Note: Journal of Artificial Intelligence Research 3 (1995) 25-52 Submitted 8/94; published 6/95  
Abstract: There has been evidence that least-commitment planners can efficiently handle planning problems that involve difficult goal interactions. This evidence has led to the common belief that delayed-commitment is the "best" possible planning strategy. However, we recently found evidence that eager-commitment planners can handle a variety of planning problems more efficiently, in particular those with difficult operator choices. Resigned to the futility of trying to find a universally successful planning strategy, we devised a planner that can be used to study which domains and problems are best for which planning strategies. In this article we introduce this new planning algorithm, flecs, which uses a FLExible Commitment Strategy with respect to plan-step orderings. It is able to use any strategy from delayed-commitment to eager-commitment. The combination of delayed and eager operator-ordering commitments allows flecs to take advantage of the benefits of explicitly using a simulated execution state and reasoning about planning constraints. flecs can vary its commitment strategy across different problems and domains, and also during the course of a single planning problem. flecs represents a novel contribution to planning in that it explicitly provides the choice of which commitment strategy to use while planning. flecs provides a framework to investigate the mapping from planning domains and problems to efficient planning strategies.
Abstract-found: 1
Intro-found: 1
Reference: <author> Ambros-Ingerson, J., & Steel, S. </author> <year> (1988). </year> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 83-88 St. Paul, MN. </address>
Reference: <author> Barrett, A., & Weld, D. S. </author> <year> (1994). </year> <title> Partial-order planning: Evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67, </volume> <pages> 71-112. </pages>
Reference-contexts: This painting domain is a real-world interpretation of the artificial domain D m S 1 introduced in <ref> (Barrett & Weld, 1994) </ref>.
Reference: <author> Blythe, J., & Veloso, M. M. </author> <year> (1992). </year> <title> An analysis of search techniques for a totally-ordered nonlinear planner. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> pp. </pages> <address> 13-19 College Park, MD. </address>
Reference-contexts: Fourth, flecs can use its state to choose an operator and bindings that are most likely to achieve a particular goal with a minimum of planning effort <ref> (Blythe & Veloso, 1992) </ref>. <p> The choice of operator is a backtrack point. Unless some other heuristic is provided, the minimum conspiracy number heuristic is used to determine which operator should be tried first <ref> (Blythe & Veloso, 1992) </ref>. In short, this heuristic selects the instantiated operator that appears to be achievable with the least amount of planning. Before returning to the top of the loop, all of the affected variables are updated.
Reference: <author> Carbonell, J. G., Blythe, J., Etzioni, O., Gil, Y., Joseph, R., Kahn, D., Knoblock, C., Minton, S., Perez, A., Reilly, S., Veloso, M., & Wang, X. </author> <year> (1992). </year> <title> PRODIGY4.0: The manual and tutorial. </title> <type> Tech. rep. </type> <institution> CMU-CS-92-150, Department of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: Second, for a given operator O, pre (O), add (O), and del (O) are its instantiated preconditions, add-list, and delete-list respectively. flecs takes these values straight from the domain representation, which may include disjunctions, negations, existentially and universally quantified preconditions and effects, and conditional effects <ref> (Carbonell et al., 1992) </ref>. When O has conditional effects, add (O) and del (O) are determined dynamically, using the state at the time O is applied. <p> As presented, the algorithm only terminates unsuccessfully if the entire search space has been exhausted. Other causes for failure, such as goal loops, state loops, depth bounds, and time limits, are incorporated in the same manner as in prodigy4.0 <ref> (Carbonell et al., 1992) </ref>. At each choice point, there is some heuristic to determine which branch to try (first). In step 6, the goal is chosen using means-ends analysis, and the operator with the minimum conspiracy number is chosen to achieve that goal.
Reference: <author> Carbonell, J. G., Knoblock, C. A., & Minton, S. </author> <year> (1990). </year> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In VanLehn, K. (Ed.), </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ. </address> <note> Also Technical Report CMU-CS-89-189. </note>
Reference-contexts: The final plan is O 4 , O 2 , O 3 , which is the sequence of operators applied in the head-plan (not shown) corresponding to the steps in Figures 7, 8, and 9. An a posteriori algorithm <ref> (Veloso, Perez, & Carbonell, 1990) </ref> can convert the sequence into a partially ordered plan capturing the dependencies: O 4 ; fO 2 ; O 3 g.
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32, </volume> <pages> 333-378. </pages> <month> 50 flecs: </month> <title> Planning with a Flexible Commitment Strategy Ernst, </title> <editor> G. W., & Newell, A. </editor> <year> (1969). </year> <title> GPS: A Case Study in Generality and Problem Solving. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press, </publisher> <address> New York, NY. </address>
Reference-contexts: However different planners use different means to this end. Faced with a variety of different planning algorithms, some planning researchers, including these authors, have been increasingly curious to compare different planning methodologies. Although general-purpose planning is known to be undecidable <ref> (Chapman, 1987) </ref>, it has been a common belief that least-commitment planning is the "best," i.e., the most efficient planning strategy for most planning problems. <p> One may argue that the requirement that operators be applied in an explicit order opens up the possibility of exponential backtracking. However this argument is vacuous, as planning is undecidable <ref> (Chapman, 1987) </ref>. Due to the use of state, flecs can reduce the likelihood of requiring backtracking at the operator choice point. In so doing, it may increase the likelihood of backtracking at the operator-ordering choice point.
Reference: <author> Fikes, R. E., & Nilsson, N. J. </author> <year> (1971). </year> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2, </volume> <pages> 189-208. </pages>
Reference: <author> Fink, E., & Veloso, M. </author> <year> (1994). </year> <title> PRODIGY planning algorithm. </title> <type> Technical report CMU-CS-94-123, </type> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: NoLimit and prodigy4.0, as opposed to prodigy2.0, do not require the linearity assumption of goal independence and their search spaces are complete <ref> (Fink & Veloso, 1994) </ref>. They also have some control over their commitment choices as opposed to the other earlier total-order planners. 4. We found that we needed a new name for our algorithm as flecs represents a significant change in philosophy and implementation from prodigy4.0. 27 Veloso & Stone 2. <p> A Top-Level View of flecs prodigy4.0 and flecs differ most significantly from other state-of-the-art planning systems in that they search for a solution to a planning problem by combining backward-chaining (or regression) and simulation of plan execution <ref> (Fink & Veloso, 1994) </ref>. While back-chaining, they can commit to a total-ordering of plan steps so as to make use of a uniquely specified world state.
Reference: <author> Kambhampati, S. </author> <year> (1994). </year> <title> Desing tradeoffs in partial order (plan space) planning. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, AIPS-94, </booktitle> <pages> pp. </pages> <address> 92-97 Chicago, IL. </address>
Reference: <author> Knoblock, C. A. </author> <year> (1994). </year> <title> Automatically generating abstractions for planning. </title> <journal> Artificial Intelligence, </journal> <volume> 68. </volume>
Reference-contexts: This process is equivalent to starting a new and smaller planning problem as all the previous choices will be embedded in the state. The situation described above is similar to that which arises in the alpine system which constructs efficient abstraction hierarchies <ref> (Knoblock, 1994) </ref>. alpine can guarantee that 40 flecs: Planning with a Flexible Commitment Strategy planning hierarchically using its generated abstraction hierarchies will not lead to backtracking across refinement spaces. Figure 10 illustrates how flecs can use this abstraction planning information to control the value of toggle.
Reference: <author> Korf, R. E. </author> <year> (1985). </year> <title> Depth-first iterative-deepening: An optimal admissible tree search. </title> <journal> Artificial Intelligence, </journal> <volume> 27 (1), </volume> <pages> 97-109. </pages>
Reference-contexts: The planning algorithm we present is both sound and complete if it searches the entire search space, using a technique such as iterative deepening <ref> (Korf, 1985) </ref>. flecs is sound because it only terminates when it has reached the goal statement as a result of applying operators. That is, the application of the operator sequence returned as the final plan has been entirely simulated by the time the planner terminates. <p> We show that flecs's search space is complete and that flecs's search algorithm is complete as long as it explores all branches of the search space, for example using iterative deepening <ref> (Korf, 1985) </ref>. 11 Iterative deepening involves searching with a bound on the number of search steps that may be performed before a particular search path is suspended from further expansion; if no solution is found for a particular depth bound, the search is repeated with a larger depth bound.
Reference: <author> McAllester, D., & Rosenblitt, D. </author> <year> (1991). </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 634-639. </pages>
Reference-contexts: 1. Introduction General-purpose planning has a long history of research in Artificial Intelligence. Several different planning algorithms have been developed ranging from the pioneering GPS (Ernst & Newell, 1969) to a variety of recent algorithms in the SNLP <ref> (McAllester & Rosenblitt, 1991) </ref> family. At the most basic level, the purpose of planning is to find a sequence of actions that change an initial state into a state that satisfies a goal statement. Planners use the actions provided in their domain representations to try to achieve the goal.
Reference: <author> McDermott, D. V. </author> <year> (1978). </year> <title> Planning and acting. </title> <booktitle> Cognitive Science, </booktitle> <pages> 2-2, 71-109. </pages>
Reference: <author> Minton, S. </author> <year> (1993). </year> <title> Integrating heuristics for constraint satisfaction problems: A case study. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 120-126. </pages>
Reference-contexts: Throughout this article we use the term delayed commitment to contrast with eager commitment in the context of step orderings. 2. Similar concerns regarding different constraint satisfaction algorithms have led recently to the design of the Multi-Tac architecture <ref> (Minton, 1993) </ref>.
Reference: <author> Minton, S., Bresina, J., & Drummond, M. </author> <year> (1991). </year> <title> Commitment strategies in planning: A comparative analysis. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 259-265. </pages>
Reference: <author> Minton, S., Knoblock, C. A., Kuokka, D. R., Gil, Y., Joseph, R. L., & Carbonell, J. G. </author> <year> (1989). </year> <title> prodigy 2.0: The manual and tutorial. </title> <type> Technical report CMU-CS-89-146, </type> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: We performed an empirical analysis on planning performance in these domains. The corresponding empirical results demonstrate the tradeoffs discussed and show evidence that flexible commitment is necessary. Finally Section 6 draws conclusions from this work. 3. Planners in the prodigy family include prodigy2.0 <ref> (Minton, Knoblock, Kuokka, Gil, Joseph, & Car-bonell, 1989) </ref>, NoLimit (Veloso, 1989), and prodigy4.0 (Carbonell, Blythe, Etzioni, Gil, Joseph, Kahn, Knoblock, Minton, Perez, Reilly, Veloso, & Wang, 1992).
Reference: <author> Rosenbloom, P. S., Newell, A., & Laird, J. E. </author> <year> (1990). </year> <title> Towards the knowledge level in SOAR: The role of the architecture in the use of knowledge. </title> <editor> In VanLehn, K. (Ed.), </editor> <booktitle> Architectures for Intelligence. </booktitle> <publisher> Erlbaum, </publisher> <address> Hillsdale, NJ. </address>
Reference: <author> Sacerdoti, E. D. </author> <year> (1977). </year> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier, </publisher> <address> New York. </address>
Reference: <author> Stone, P., Veloso, M., & Blythe, J. </author> <year> (1994). </year> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pp. 164-169. </pages>
Reference-contexts: We designed sets of planning domains and problems to test different planning strategies. While studying the impact of these different strategies in different kinds of planning problems, we came across evidence that eager-commitment planners can efficiently handle a variety of planning problems, in particular those with difficult operator choices <ref> (Stone, Veloso, & Blythe, 1994) </ref>. The up-to-date state allows them to make informed planning choices, particularly in terms of the operator alternatives available. In similar situations, delayed-commitment planners may need to backtrack over incorrect operator choices (Veloso & Blythe, 1994). <p> This feature is the most significant improvement in flecs over prodigy4.0 and its predecessors. Since we saw evidence that neither delayed-commitment nor eager-commitment search strategies were consistently effective <ref> (Stone et al., 1994) </ref>, we felt the need to provide flecs with the toggle. Thus, flecs can combine the advantages of delayed commitments and eager commitments. 6 3. <p> When applying an operator (step 7), an applicable operator A is chosen from A. A heuristic that analyzes the applicable operators can be used to choose the best possible operator. One such heuristic analyzes interactions between operators by identifying negative threats, similarly to the saba heuristic in <ref> (Stone et al., 1994) </ref>. In short, this heuristic prefers operators that do not delete any preconditions of, and whose effects are not deleted by, other operators. This choice of an applicable operator is a backtrack point where all orderings of interacting applicable operators are considered. <p> In this section we show empirical results that demonstrate that both of these extremes can lead to highly sub-optimal search in particular domains. Indeed, we believe that no single domain-independent search heuristic can perform well in all domains <ref> (Stone et al., 1994) </ref>. <p> All of the raw data is contained in the online appendix. We graph the average time that flecs took to solve the problems versus the number of goals. As shown in <ref> (Stone et al., 1994) </ref>, 9 eagerly applying leads to exponential behavior (as a function of the number of goals) in this domain, while eagerly subgoaling, when using 9. We began the study of our new planning algorithm | now named flecs| on prodigy4.0. <p> We began the study of our new planning algorithm | now named flecs| on prodigy4.0. We consider the version of prodigy used in <ref> (Stone et al., 1994) </ref> to be a preliminary implementation of flecs. 43 Veloso & Stone an operator choice heuristic from the same study, leads to approximately linear behavior and no backtracking.
Reference: <author> Tate, A. </author> <year> (1977). </year> <title> Generating project networks. </title> <booktitle> In Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 888-900. </pages> <note> 51 Veloso & Stone Veloso, </note> <author> M., & Blythe, J. </author> <year> (1994). </year> <title> Linkability: Examining causal link commitments in partial-order planning. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <pages> pp. 170-175. </pages>
Reference: <author> Veloso, M. M. </author> <year> (1989). </year> <title> Nonlinear problem solving using intelligent casual-commitment. </title> <type> Technical report CMU-CS-89-210, </type> <institution> School of Computer Science, Carnegie Mellon University. </institution>
Reference-contexts: The corresponding empirical results demonstrate the tradeoffs discussed and show evidence that flexible commitment is necessary. Finally Section 6 draws conclusions from this work. 3. Planners in the prodigy family include prodigy2.0 (Minton, Knoblock, Kuokka, Gil, Joseph, & Car-bonell, 1989), NoLimit <ref> (Veloso, 1989) </ref>, and prodigy4.0 (Carbonell, Blythe, Etzioni, Gil, Joseph, Kahn, Knoblock, Minton, Perez, Reilly, Veloso, & Wang, 1992). NoLimit and prodigy4.0, as opposed to prodigy2.0, do not require the linearity assumption of goal independence and their search spaces are complete (Fink & Veloso, 1994).
Reference: <author> Veloso, M. M., & Carbonell, J. G. </author> <year> (1993). </year> <title> Derivational analogy in prodigy: Automating case acquisition, storage, and utilization. </title> <journal> Machine Learning, </journal> <volume> 10, </volume> <pages> 249-278. </pages>
Reference-contexts: One representative of this class is the one-way rocket domain introduced in <ref> (Veloso & Carbonell, 1993) </ref>. For the sake of consistency, however, we will present a representative of this class of domains in the painting context. Suppose that we are painting walls with rollers.
Reference: <author> Veloso, M. M., Perez, M. A., & Carbonell, J. G. </author> <year> (1990). </year> <title> Nonlinear planning with parallel resource allocation. </title> <booktitle> In Proceedings of the DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control, </booktitle> <pages> pp. </pages> <address> 207-212 San Diego, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The final plan is O 4 , O 2 , O 3 , which is the sequence of operators applied in the head-plan (not shown) corresponding to the steps in Figures 7, 8, and 9. An a posteriori algorithm <ref> (Veloso, Perez, & Carbonell, 1990) </ref> can convert the sequence into a partially ordered plan capturing the dependencies: O 4 ; fO 2 ; O 3 g.
Reference: <author> Wilkins, D. E. </author> <year> (1984). </year> <title> Domain-independent planning: Representation and plan generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22, </volume> <pages> 269-301. 52 </pages>
References-found: 24

