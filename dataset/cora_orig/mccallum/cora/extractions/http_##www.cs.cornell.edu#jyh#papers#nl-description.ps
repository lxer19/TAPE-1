URL: http://www.cs.cornell.edu/jyh/papers/nl-description.ps
Refering-URL: http://www.cs.cornell.edu/jyh/cornell-papers.html
Root-URL: 
Email: Email: jyh@cs.cornell.edu.  
Phone: Tel: (607) 255-1372  
Title: Nuprl-Light: An Implementation Framework for Higher-Order Logics  a primitive level for modular proof automation.  
Author: Jason J. Hickey 
Note: Support is provided at  
Address: Ithaca, NY 14853, USA.  
Affiliation: Department of Computer Science Cornell University  
Abstract: In this paper we describe a new theorem prover architecture that is intended to facilitate mathematical sharing and modularity in formal mathematics and programming. This system provides an implementation framework in which multiple logics, including the Nuprl type theory and the Edinburgh Logical Framework (LF) can be specified, and even related. The system provides formal, object-oriented modules, in which multiple (perhaps mutually inconsistent) logics can be specified. Logical correctness is enforced and derived from module dependencies. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Martn Abadi and Luca Cardelli. </author> <title> A Theory of Objects. </title> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Our object interpretation in this paper is closely modeled on the interpretation of Hofmann, Pierce, and Turner [14, 27], where objects are abstracted over a "state" type. We also draw on the interpretation of Abadi, Cardelli, and Viswanathan <ref> [1, 2] </ref>, where objects contain only methods and state update is provided by method override. There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4].
Reference: 2. <author> Martn Abadi, Luca Cardelli, and Ramesh Viswanathan. </author> <title> An Interpretation of Objects and Object Types. </title> <booktitle> In ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1996. </year>
Reference-contexts: Our object interpretation in this paper is closely modeled on the interpretation of Hofmann, Pierce, and Turner [14, 27], where objects are abstracted over a "state" type. We also draw on the interpretation of Abadi, Cardelli, and Viswanathan <ref> [1, 2] </ref>, where objects contain only methods and state update is provided by method override. There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4].
Reference: 3. <author> Stuart F. Allen, Robert L. Constable, Douglas J. Howe, and Willaim Aitken. </author> <title> The semantics of reflected proof. </title> <booktitle> In Proceedings of the Fifth Conference on Logic in Computer Science, </booktitle> <pages> pages 195-197, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: The underlying term language is uniform, based on the encoding of Allen et. al. <ref> [3] </ref>, where every term has this form. opnamefparams g (bterms) Every class of terms has a unique name (the opname). The parameters are used to specify the term constants, such as the numbers, and the bterms is a sequence of subterms with optional binding occurrences.
Reference: 4. <author> David A. Basin and Robert L. Constable. </author> <booktitle> Metalogical Frameworks, </booktitle> <pages> pages 1-29. </pages> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: We also draw on the interpretation of Abadi, Cardelli, and Viswanathan [1, 2], where objects contain only methods and state update is provided by method override. There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin <ref> [4] </ref>. Nuprl itself was developed out of the early work of Martin-Lof [20, 21], as well as the Automath logical framework [22]. Our framework has much in common with the Isabelle generic theorem prover [23, 25], which is based on hereditary Harrop formulas.
Reference: 5. <author> R.L. Constable et.al. </author> <title> Implementing Mathematics in the NuPRL Proof Development System. </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: There is potential for more rapid advance if theorem provers of the future provide a means to relate logics formally, while providing adequate protection between logics with differing assumptions. In this paper we describe Nuprl-Light, a descendent of the Nuprl <ref> [5] </ref> theorem prover, that addresses the issues of diversity and sharing by providing a modular, object-oriented framework for specifying, relating, and developing type theories and mathematical domains.
Reference: 6. <author> F. Giunchiglia, P. Pecchiari, and C. Talcott. </author> <title> Reasoning Theories: Towards an Architecture for Open Mechanized Reasoning Systems. </title> <type> Technical Report 9409-15, IRST, </type> <address> Trento, Italy, </address> <year> 1994. </year>
Reference-contexts: However, we place an additional emphasis on relations between logics through object-oriented techniques. On this theme, Mart-Oliet and Meseguer [19] propose rewriting logics a solution to the proliferation of logics; they also propose object-oriented theories. Guinchiglia et. al. <ref> [6] </ref> are also exploring a general architecture where provers can be combined in a "plug-and-play" manner.
Reference: 7. <author> M.J.C. Gordon and T.F. Melham. </author> <title> Introduction to HOL. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Guinchiglia et. al. [6] are also exploring a general architecture where provers can be combined in a "plug-and-play" manner. As this task proceeds, we need a semantic basis for relating theories, as Howe [16] provides in his semantics for HOL <ref> [7] </ref> and Nuprl. 6 Conclusion We have described the Nuprl-Light framework, which extends the results of generic theorem provers by adding formal, first-class theories. First-class theories enable a new style of reasoning where multiple type theories and theorem provers participate in large scale reasoning.
Reference: 8. <author> Timothy G. Griffin. </author> <title> Notational Definition and Top-Down Refinement for Interactive Proof Development Systems. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <year> 1988. </year>
Reference-contexts: Like the Isabelle [25] generic theorem prover, Nuprl-Light uses generalized Horn clauses for logical specification. Indeed, specifications in Nuprl-Light appear quite similar to those in Isabelle. However, where Isabelle uses higher order unification and resolution, Nuprl-Light retains a tactic-tree <ref> [8] </ref> of LCF [24] style reasoning based on tactics and tacticals, and Nuprl-Light also allows theories to contain specifications of rewrites, using the computational congruence of Howe [15].
Reference: 9. <author> Rober Harper, Furio Honsell, and Gordon Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the ACM, </journal> <volume> 40(1), </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: The framework itself assumes (and provides) no type theory or logic, as in LF <ref> [9] </ref>, which is why we call it an implementation framework. <p> A difference of the two is that logics in Nuprl-Light are intended to be related. If, for instance, an interpretation of type theory is available in set theory, the interpretation should be formalizable. We can also compare Nuprl-Light to the (Edinburgh) Logical Framework <ref> [9] </ref> (which is implemented in ELF [26], for instance). In a sense, our framework has a different purpose than LF|where LF provides a framework for logics, our framework is for their implementations.
Reference: 10. <author> Robert Harper and Mark Lillibridge. </author> <title> A type-theoretic approach to higher-order modules with sharing. </title> <booktitle> In 21st Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 123-137. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: The main supplement to the language is the definition of a formal term language, and a method for including and deriving formal assertions in the module calcu-lus. In the following, we will assume a working knowledge of ML modules <ref> [10] </ref>. The presentation is in four parts. First we will cover the formal language and syntax, and then we we will cover the rules for combining and deriving formal judgments.
Reference: 11. <author> Robert Harper and Frank Pfenning. </author> <title> A module system for a programming language based on the LF logical framework. </title> <journal> Journal of Logic and Computation, </journal> <note> To appear. A preliminary version is available as Technical Report CMU-CS-92-191. </note>
Reference-contexts: In a sense, our framework has a different purpose than LF|where LF provides a framework for logics, our framework is for their implementations. Our basic logic is much weaker, and type theories, including LF, are implemented by asserting their inference rules, much like Isabelle. Harper and Pfenning <ref> [11] </ref> propose a module system for LF, which is similar to ours in some ways. However, we place an additional emphasis on relations between logics through object-oriented techniques. On this theme, Mart-Oliet and Meseguer [19] propose rewriting logics a solution to the proliferation of logics; they also propose object-oriented theories.
Reference: 12. <author> Jason J. Hickey. Nuprl-light. </author> <note> http://www.cs.cornell.edu/home/jyh. </note>
Reference-contexts: Due to space limitations, these examples are quite brief. However, we have developed significant examples, including a specification of LF and the Nuprl type theory in the framework. More examples can be found at the WWW site <ref> [12] </ref>. 3.1 Intuitionistic Propositional Logic (IPL) The first example defines an intuitionistic propositional logic with only implication and falsehood. This a simple example, but it covers many of steps in defining a logic, including the construction of a modular decision procedure.
Reference: 13. <author> Jason J. Hickey. </author> <title> Formal objects in type theory using very dependent types. </title> <booktitle> In Foundations of Object Oriented Languages 3, </booktitle> <year> 1996. </year> <note> Available electronically through the FOOL 3 home page at Williams College. </note>
Reference-contexts: These are the results we present in the paper: An implementation framework for specifying and relating type theories, and their rules, theorems, and proofs. A method for constructing formal types from module signatures, and formal object for module implementations, based on recent theoretical work with very-dependent function types <ref> [13] </ref>. An architecture for incrementally implementing algorithms for automated reasoning. A mechanism for generic shared tactics and derived rules. Nuprl-Light is implemented in Caml-Light, and we have implemented the Nuprl type theory and tactics, as well as a formalization of LF. <p> A more complete description is given in Hickey <ref> [13] </ref>. 2.4 Proof Automation Because of the undecidability of higher-order logics, higher order theorem provers are typically designed to be interactive. The goals are presented to the user and interaction is typically by "refinement" (backward-chaining). <p> A deeper encoding would use existential types to hide the value of the car method. More detail of this interpretation is given in Hickey <ref> [13] </ref>. In this example, the bumpX method must be polymorphic over subobjects. Subobjects are specified with the relation, part of the type theory, and the polymorphism is expressed using an intersection type, quantified over all subob-jects.
Reference: 14. <author> Martin Hofmann and Benjamin Pierce. </author> <title> A unifying type-theoretic framework for objects. </title> <journal> Journal of Functional Programming, </journal> <volume> 5(4) </volume> <pages> 593-635, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: This led to the use of object-oriented techniques where higher order modules are formalized as objects, and the expected subtyping properties are fulfilled by object subsumption. Our object interpretation in this paper is closely modeled on the interpretation of Hofmann, Pierce, and Turner <ref> [14, 27] </ref>, where objects are abstracted over a "state" type. We also draw on the interpretation of Abadi, Cardelli, and Viswanathan [1, 2], where objects contain only methods and state update is provided by method override. There has been a great deal of research on logical frameworks.
Reference: 15. <author> Douglas J. Howe. </author> <title> Equality in Lazy Computation Systems. </title> <booktitle> In Fourth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 198-203. </pages> <publisher> IEEE Computyer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: However, where Isabelle uses higher order unification and resolution, Nuprl-Light retains a tactic-tree [8] of LCF [24] style reasoning based on tactics and tacticals, and Nuprl-Light also allows theories to contain specifications of rewrites, using the computational congruence of Howe <ref> [15] </ref>. Like LF, the Nuprl-Light meta-logic also relies on the judgments-as-types principle (an extension of propositions-as-type), where proofs are terms that inhabit the clauses. The main departure from Isabelle and LF is in the module system.
Reference: 16. <author> Douglas J. Howe. </author> <title> Semantic foundations for embedding HOL in Nuprl. </title> <booktitle> In AMAST '96, </booktitle> <year> 1996. </year>
Reference-contexts: Guinchiglia et. al. [6] are also exploring a general architecture where provers can be combined in a "plug-and-play" manner. As this task proceeds, we need a semantic basis for relating theories, as Howe <ref> [16] </ref> provides in his semantics for HOL [7] and Nuprl. 6 Conclusion We have described the Nuprl-Light framework, which extends the results of generic theorem provers by adding formal, first-class theories.
Reference: 17. <author> Paul Jackson. </author> <title> Exploring Abstract Algebra in Constructive Type Theory. </title> <booktitle> In 12th International Conference on Automated Deduction, </booktitle> <pages> pages 590-604. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Our plans for the future include further development of the tactic collection and improvements to proof search algorithms. 5 Related Work Our framework draws on the work of Jackson <ref> [18, 17] </ref>, who formulated a great deal of abstract constructive algebra in the Nuprl system. Jackson's system formalized algebraic objects in the type theory using dependent Cartesian products, which suffered from the lack of convenient subtyping properties.
Reference: 18. <author> Paul Bernard Jackson. </author> <title> Enhancing the NuPRL Proof Development System and Applying it to Computational Abstract Algebra. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Our plans for the future include further development of the tactic collection and improvements to proof search algorithms. 5 Related Work Our framework draws on the work of Jackson <ref> [18, 17] </ref>, who formulated a great deal of abstract constructive algebra in the Nuprl system. Jackson's system formalized algebraic objects in the type theory using dependent Cartesian products, which suffered from the lack of convenient subtyping properties.
Reference: 19. <author> Narciso Mart-Oliet and Jose Meseguer. </author> <title> Rewriting logic as a logical and semantic framework. </title> <type> Technical Report SRI-CSL-93-05, </type> <institution> SRI International, </institution> <year> 1993. </year>
Reference-contexts: Harper and Pfenning [11] propose a module system for LF, which is similar to ours in some ways. However, we place an additional emphasis on relations between logics through object-oriented techniques. On this theme, Mart-Oliet and Meseguer <ref> [19] </ref> propose rewriting logics a solution to the proliferation of logics; they also propose object-oriented theories. Guinchiglia et. al. [6] are also exploring a general architecture where provers can be combined in a "plug-and-play" manner.
Reference: 20. <author> Per Martin-Lof. </author> <title> An intuitionistic theory of types: Predicative part. </title> <booktitle> In Logic Colloquium '73, </booktitle> <pages> pages 73-118. </pages> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference-contexts: There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4]. Nuprl itself was developed out of the early work of Martin-Lof <ref> [20, 21] </ref>, as well as the Automath logical framework [22]. Our framework has much in common with the Isabelle generic theorem prover [23, 25], which is based on hereditary Harrop formulas.
Reference: 21. <author> Per Martin-Lof. </author> <title> Intutionistic Type Theory. </title> <type> Bibliopolis, </type> <institution> Napoli, </institution> <year> 1984. </year>
Reference-contexts: There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4]. Nuprl itself was developed out of the early work of Martin-Lof <ref> [20, 21] </ref>, as well as the Automath logical framework [22]. Our framework has much in common with the Isabelle generic theorem prover [23, 25], which is based on hereditary Harrop formulas.
Reference: 22. <editor> R.P. Nederpelt, J.H. Geuvers, and editors R.C. ~ de Vrijer. </editor> <booktitle> Selected Papers on Au-tomath, </booktitle> <volume> volume 133. </volume> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: There has been a great deal of research on logical frameworks. Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4]. Nuprl itself was developed out of the early work of Martin-Lof [20, 21], as well as the Automath logical framework <ref> [22] </ref>. Our framework has much in common with the Isabelle generic theorem prover [23, 25], which is based on hereditary Harrop formulas. Both Nuprl-Light and Isabelle provide a theorem prover framework that can be used to formalize generic logics, and in practice the logical specification is quite similar.
Reference: 23. <author> Tobias Nipkow and Lawrence C. Paulson. Isabelle-91. </author> <booktitle> In Proceedings of the 11th International Conference on Automated Deduction, </booktitle> <pages> pages 673-676, </pages> <year> 1992. </year>
Reference-contexts: Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4]. Nuprl itself was developed out of the early work of Martin-Lof [20, 21], as well as the Automath logical framework [22]. Our framework has much in common with the Isabelle generic theorem prover <ref> [23, 25] </ref>, which is based on hereditary Harrop formulas. Both Nuprl-Light and Isabelle provide a theorem prover framework that can be used to formalize generic logics, and in practice the logical specification is quite similar. A difference of the two is that logics in Nuprl-Light are intended to be related.
Reference: 24. <author> Lawrence C. Paulson. </author> <title> Logic and Computation: Interactive proof with Cambridge LCF. </title> <publisher> Cambridge Univ. Press, </publisher> <year> 1987. </year>
Reference-contexts: Like the Isabelle [25] generic theorem prover, Nuprl-Light uses generalized Horn clauses for logical specification. Indeed, specifications in Nuprl-Light appear quite similar to those in Isabelle. However, where Isabelle uses higher order unification and resolution, Nuprl-Light retains a tactic-tree [8] of LCF <ref> [24] </ref> style reasoning based on tactics and tacticals, and Nuprl-Light also allows theories to contain specifications of rewrites, using the computational congruence of Howe [15]. Like LF, the Nuprl-Light meta-logic also relies on the judgments-as-types principle (an extension of propositions-as-type), where proofs are terms that inhabit the clauses.
Reference: 25. <author> Lawrence C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover. </title> <publisher> Springer LNCS 828, </publisher> <year> 1994. </year>
Reference-contexts: Since proof automation is such a critical part of theorem proving in these log-ics, the implementation framework is tied closely to a programming language (in this case Caml-Light) and the formal module system is tied closely to the programming language modules. Like the Isabelle <ref> [25] </ref> generic theorem prover, Nuprl-Light uses generalized Horn clauses for logical specification. Indeed, specifications in Nuprl-Light appear quite similar to those in Isabelle. <p> Our work develops the meta-logical framework (in Nuprl) of Constable and Basin [4]. Nuprl itself was developed out of the early work of Martin-Lof [20, 21], as well as the Automath logical framework [22]. Our framework has much in common with the Isabelle generic theorem prover <ref> [23, 25] </ref>, which is based on hereditary Harrop formulas. Both Nuprl-Light and Isabelle provide a theorem prover framework that can be used to formalize generic logics, and in practice the logical specification is quite similar. A difference of the two is that logics in Nuprl-Light are intended to be related.
Reference: 26. <author> Frank Pfenning. </author> <title> Elf: A meta-language for deductive systems. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Proceedings of the 12th International Conference on Automated Deduction, </booktitle> <pages> pages 811-815. </pages> <publisher> Springer LNAI 814, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: A difference of the two is that logics in Nuprl-Light are intended to be related. If, for instance, an interpretation of type theory is available in set theory, the interpretation should be formalizable. We can also compare Nuprl-Light to the (Edinburgh) Logical Framework [9] (which is implemented in ELF <ref> [26] </ref>, for instance). In a sense, our framework has a different purpose than LF|where LF provides a framework for logics, our framework is for their implementations. Our basic logic is much weaker, and type theories, including LF, are implemented by asserting their inference rules, much like Isabelle.
Reference: 27. <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(2) </volume> <pages> 207-247, </pages> <month> April </month> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: In addition, the Point object contains the specification that the getX and bumpX have the correct behavior. In this example, we give only the signatures (although implementation can be shown to exist). This example follows an encoding of object similar to the existential interpretation of Pierce and Turner <ref> [27] </ref>, with the exception that the "state" or "carrier" of the object (car) is not abstract. A deeper encoding would use existential types to hide the value of the car method. More detail of this interpretation is given in Hickey [13]. <p> This led to the use of object-oriented techniques where higher order modules are formalized as objects, and the expected subtyping properties are fulfilled by object subsumption. Our object interpretation in this paper is closely modeled on the interpretation of Hofmann, Pierce, and Turner <ref> [14, 27] </ref>, where objects are abstracted over a "state" type. We also draw on the interpretation of Abadi, Cardelli, and Viswanathan [1, 2], where objects contain only methods and state update is provided by method override. There has been a great deal of research on logical frameworks.
References-found: 27

