URL: http://www.cs.columbia.edu/robotics/publications/timcenko-ias93.ps.gz
Refering-URL: http://www.cs.columbia.edu/~abrams/
Root-URL: http://www.cs.columbia.edu
Title: APHRODITE: Intelligent Planning, Control and Sensing in a Distributed Robotic System  
Author: Aleksandar Timcenko Steven Abrams Peter K. Allen 
Address: New York, NY 10027  
Affiliation: Center for Research in Intelligent Systems Department of Computer Science Columbia University  
Abstract: In this paper we describe a general-purpose robot programming environment APHRODITE 1 built at Columbia University's Center for Research in Intelligent Systems. The environment is based on a distributed multiprocessor architecture that offers great flexibility and computing strength, and provides a reliable real-time response, while using off-the-shelf software tools. The supporting software that we developed supports transparent operation across the network and distributed interupt handling, We define the interface between main hierarchical levels in the system and describe the implementation as it has been used to create a distributed, multi-tasking application. We have implemented a test task that consists of assembly operation that includes compliant motion planning in an uncertain environment and the intelligent monitoring of the assembly process.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steven Abrams and Peter K. Allen. </author> <title> Sensor planning in an active robotic work cell. </title> <booktitle> In Proceedings SPIE Intelligent Robotic Systems Conference on Sensor Fusion IV: Control Paradigms and Data Structures, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: The trajectory planner was originally developed as part of another project [15]. The second robotic arm (Arm 2) has a camera attached to its end effector and is used for surveillance. The MVP sensor planning system, which is also part of a separate, ongoing research project <ref> [1, 13, 14] </ref>, is used to plan the approach vector of Arm1 and the sequence of viewpoints used to observe the task.
Reference: [2] <author> C. Geschke. </author> <title> A system for programming and controlling sensor-based robot manipulators. </title> <journal> IEEE Transaction on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-5(1):1-7, </volume> <year> 1983. </year>
Reference-contexts: This is due, in part to the lack of a standard hardware platform and underlying operating system for distributed robot control. Nevertheless, there have been many important advances in this area. The idea of embodying a robot controller in a multitasking environment is not new <ref> [2, 9] </ref>. Since the early 1980s, it has been steadily pursued, resulting in implementations of very complex multi-robot multi-CPU systems. One example of such a system is given in [3].
Reference: [3] <author> S. Hayati, T. Lee, K. Tso, P. Backes, and J. Lloyd. </author> <title> A unified teleoperated-autonomous dual-arm robotic system. </title> <journal> IEEE Control Systems, </journal> <year> 1991. </year>
Reference-contexts: The idea of embodying a robot controller in a multitasking environment is not new [2, 9]. Since the early 1980s, it has been steadily pursued, resulting in implementations of very complex multi-robot multi-CPU systems. One example of such a system is given in <ref> [3] </ref>. Another very complex robotic system (described in [12]) utilizes a special-purpose concurrent programming environment that combines vision, motion planning and control functions. Results presented in [16] demonstrate differences in real-time characteristics which depend on the software structure of interprocess communication.
Reference: [4] <author> V. Hayward and R. P. Paul. </author> <title> Robot manipulator control under unix: RCCL, A Robot Control C Library. </title> <journal> Intl. J. of Robotic Res., </journal> <volume> 5(4) </volume> <pages> 94-111, </pages> <year> 1986. </year>
Reference-contexts: Not all of these three components are equally developed in all approaches; by including more functionality in one, another may be left rudimentary. For example, RCCL <ref> [4, 5] </ref> augments an existing general-purpose operating system (UNIX) to support real-time functions. However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors.
Reference: [5] <author> J. Lloyd. </author> <note> Multi-RCCL Reference Manual, Release 4.0 - Multi-robot version. </note> <institution> McGill University, </institution> <year> 1988. </year>
Reference-contexts: Not all of these three components are equally developed in all approaches; by including more functionality in one, another may be left rudimentary. For example, RCCL <ref> [4, 5] </ref> augments an existing general-purpose operating system (UNIX) to support real-time functions. However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors.
Reference: [6] <author> T. Lozano-P erez. </author> <title> Robot programming. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 71(7), </volume> <year> 1983. </year>
Reference-contexts: In addition, there is a need to express concurrency and synchronization within these systems comprised of interacting parts. The development of robot programming environments has been recognized to be lagging behind the advances in hardware architectures and programming environments in general <ref> [6] </ref>. Many complex robot control systems employ multiprocessing; supporting software environments need address the issues of interprocessor communications and software abstractions to fully utilize the potential of multiprocessor systems in robotics, yet relatively few robot programming systems do this in a coherent fashion.
Reference: [7] <author> D. J. Miller and R. C. Lennox. RIPE: </author> <title> A robot independent programming environment. </title> <booktitle> In SPIE Vol. 1607: Intelligent Robots and Computer Vision, </booktitle> <pages> pages 518-529, </pages> <year> 1991. </year>
Reference-contexts: Results presented in [16] demonstrate differences in real-time characteristics which depend on the software structure of interprocess communication. The problems that developers of complex software systems for robotic applications usually face were recognized in <ref> [7] </ref>. Some of them are the difficulty (or, quite frequently, inability) to reuse and extend the existing software, and hence the high cost of software development. Another problem is the management of a system's growing complexity.
Reference: [8] <institution> Motorola, Inc. </institution> <note> VMEexec User's Guide, </note> <year> 1990. </year>
Reference-contexts: However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors. On the other side of the spectrum are so-called real-time operating systems (examples of which include CHAOS [11], VxWorks [17], CHIMERA [10] and VMEexec <ref> [8] </ref>) that provide full--feature operating system's kernels with provisions for strict timing, scheduling and interrupt handling, required by real-time applications.
Reference: [9] <author> C. F. Ruoff. </author> <title> An advanced multitasking robot system. Industrial Robot, </title> <year> 1980. </year>
Reference-contexts: This is due, in part to the lack of a standard hardware platform and underlying operating system for distributed robot control. Nevertheless, there have been many important advances in this area. The idea of embodying a robot controller in a multitasking environment is not new <ref> [2, 9] </ref>. Since the early 1980s, it has been steadily pursued, resulting in implementations of very complex multi-robot multi-CPU systems. One example of such a system is given in [3].
Reference: [10] <author> D. Schmitz, R. Hoffman, P. K. Khosla, and T. Kanade. </author> <title> Chimera: A real-time program-ming environment for manipulator control. </title> <booktitle> In Proceedings of the IEEE Conference on Robotics and Automation, </booktitle> <pages> pages 846-852, </pages> <year> 1989. </year>
Reference-contexts: However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors. On the other side of the spectrum are so-called real-time operating systems (examples of which include CHAOS [11], VxWorks [17], CHIMERA <ref> [10] </ref> and VMEexec [8]) that provide full--feature operating system's kernels with provisions for strict timing, scheduling and interrupt handling, required by real-time applications.
Reference: [11] <author> K. Schwan, P. Gopinath, and W. Bo. </author> <title> CHAOS kernel support for objects in the real-time domain. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(8) </volume> <pages> 904-916, </pages> <year> 1987. </year>
Reference-contexts: However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors. On the other side of the spectrum are so-called real-time operating systems (examples of which include CHAOS <ref> [11] </ref>, VxWorks [17], CHIMERA [10] and VMEexec [8]) that provide full--feature operating system's kernels with provisions for strict timing, scheduling and interrupt handling, required by real-time applications.
Reference: [12] <author> R. Simmons. </author> <title> Concurrent planning and execution for autonomous robots. </title> <journal> IEEE Control Systems, </journal> <pages> pages 46-49, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Since the early 1980s, it has been steadily pursued, resulting in implementations of very complex multi-robot multi-CPU systems. One example of such a system is given in [3]. Another very complex robotic system (described in <ref> [12] </ref>) utilizes a special-purpose concurrent programming environment that combines vision, motion planning and control functions. Results presented in [16] demonstrate differences in real-time characteristics which depend on the software structure of interprocess communication. The problems that developers of complex software systems for robotic applications usually face were recognized in [7].
Reference: [13] <author> K. Tarabanis. </author> <title> Sensor Planning and Modeling for machine vision tasks. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: The trajectory planner was originally developed as part of another project [15]. The second robotic arm (Arm 2) has a camera attached to its end effector and is used for surveillance. The MVP sensor planning system, which is also part of a separate, ongoing research project <ref> [1, 13, 14] </ref>, is used to plan the approach vector of Arm1 and the sequence of viewpoints used to observe the task.
Reference: [14] <author> K. Tarabanis, Roger Tsai, and Peter K. Allen. </author> <title> Automated sensor planning for robotic vision tasks. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, </address> <month> April 9-11 </month> <year> 1991. </year>
Reference-contexts: The trajectory planner was originally developed as part of another project [15]. The second robotic arm (Arm 2) has a camera attached to its end effector and is used for surveillance. The MVP sensor planning system, which is also part of a separate, ongoing research project <ref> [1, 13, 14] </ref>, is used to plan the approach vector of Arm1 and the sequence of viewpoints used to observe the task.
Reference: [15] <author> Aleksandar Timcenko and Peter K. Allen. </author> <title> Modeling uncertainties in robot motions. </title> <booktitle> In AAAI Workshop on Real-World Autonomous Robots, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: The task constraints are that we minimize the approach time for the trajectory while not exceeding a specified impact force. The trajectory planner was originally developed as part of another project <ref> [15] </ref>. The second robotic arm (Arm 2) has a camera attached to its end effector and is used for surveillance.
Reference: [16] <author> L. Whitcomb and D. Koditschek. </author> <title> Robot control in a message passing environment: Theoretical questions and preliminary experiments. </title> <booktitle> In IEEE International conference on Robotics and Automation, </booktitle> <pages> pages 1198-1203, </pages> <year> 1990. </year>
Reference-contexts: One example of such a system is given in [3]. Another very complex robotic system (described in [12]) utilizes a special-purpose concurrent programming environment that combines vision, motion planning and control functions. Results presented in <ref> [16] </ref> demonstrate differences in real-time characteristics which depend on the software structure of interprocess communication. The problems that developers of complex software systems for robotic applications usually face were recognized in [7].
Reference: [17] <institution> Wind River Systems, Inc. </institution> <note> VxWorks Reference Manual. </note>
Reference-contexts: However, RCCL supplies just the rudimentary real-time kernel to the robot controller, whose job is to merely convey the joint coordinates to per-joint processors. On the other side of the spectrum are so-called real-time operating systems (examples of which include CHAOS [11], VxWorks <ref> [17] </ref>, CHIMERA [10] and VMEexec [8]) that provide full--feature operating system's kernels with provisions for strict timing, scheduling and interrupt handling, required by real-time applications.
References-found: 17

