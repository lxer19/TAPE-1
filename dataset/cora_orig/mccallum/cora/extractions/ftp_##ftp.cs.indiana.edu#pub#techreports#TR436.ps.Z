URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR436.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Title: A Uniform Data Model for Relational Data and Meta-Data Query Processing  
Author: Manoj Jain, Anurag Mendhekar, and Dirk Van Gucht 
Affiliation: Indiana University  
Abstract: We introduce the uniform data model to reason about relational data and meta-data query processing. The principal property of the uniform data model is that both meta-data and data are organized in uniformly shaped information objects. This uniform treatment of meta-data and data allows for the design of query languages that are independent of the meta-data/data separation. We present two query languages that are designed in this manner: the uniform calculus and the uniform algebra, which are a logical and algebraic query languages, respectively, for the uniform data model. We establish that the uniform calculus has at least the expressive power of the uniform algebra and prove that, besides providing meta-data query processing capabilities, these languages can efficiently simulate conventional relational query languages. We also give upper-bounds on the expressive power of these languages and since these languages have higher data complexity than the relational calculus and algebra, we introduce sublanguages that have AC 0 data complexity.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, R. Hull, and V. Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year>
Reference-contexts: This language can be viewed as a generalization of the relational tuple calculus and also as a specialization of complex object calculus <ref> [1] </ref>. 7 UC has two different types of variables, namely, name variables (which range over the name space N ) and information object variables (which are also called object variables and range over the information object space IO (N )).
Reference: [2] <editor> ACM. </editor> <booktitle> ACM Computing Surveys, </booktitle> <volume> volume 22, </volume> <month> September </month> <year> 1990. </year> <note> Special issue on HDBS. </note>
Reference-contexts: Another area of database research, though we will not emphasize it here in this paper, that our paper addresses relates to the heterogeneous database systems (HDBS) <ref> [2, 18, 13, 7, 20] </ref>. An HDBS is a distributed database system that includes component databases which may be different at the database level (such as data model, query language, and schema).
Reference: [3] <author> A.K. Chandra and D. Harel. </author> <title> Computable queries for relational data bases. </title> <journal> Journal of Com puter and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-178, </pages> <year> 1980. </year>
Reference-contexts: In particular, Schemalog allows the specification of queries which have an relational output schema that can depend on the database instance, i.e. when applied to two different database instances, the same query can yield differently 19 typed output schemas. This notion of query, though considered in <ref> [3] </ref> in the context of complete relational query languages, is strictly broader than that of Codd [5] for the relational model and as it is used in conventional relational database systems.
Reference: [4] <author> W. Chen, M. Kifer, and D.S. Warren. </author> <title> Hilog as a platform for database languages. </title> <booktitle> In Proc. </booktitle> <month> DBPL </month> <year> 1989. </year>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. Here we only want to state that the solutions advocated in <ref> [11, 10, 4] </ref>, though elegant, are embedded in very powerful object-oriented query languages, whereas the solution in [16], on the contrary, does not go far enough because certain reasonable meta-data/data queries still cannot be expressed in a meta-data independent way. <p> Several subsequent papers by Chen, Kifer, Lausen, Warren, and Wu <ref> [4, 9] </ref> further elaborated on Krishnamurthy and Naqvi's work. In [10], Krishnamurthy, Litwin, and Kent extended the language presented in [11] and demonstrated its relational schema integration capabilities. <p> On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross [16], and subsequently, Lakshmanan, Sadri and Subramanian [12], proposed tractable query languages based on the principles introduced in <ref> [11, 4, 9] </ref>. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. In particular, meta-data queries that produce a dynamic number of relations (e.g, Example 4.2 query 3) can not be specified.
Reference: [5] <author> E.F. Codd. </author> <title> Relational completeness of data base sublanguages. In Data Base Systems, </title> <editor> R. Rustin, ed., </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1972. </year>
Reference-contexts: The approach adopted in [12] is the most advanced and comes the closest to solving the meta-data dependence problem while remaining in the low data complexity class. This approach, however, allows untyped relational queries, thereby moving away from the conventional definition of relational query <ref> [5] </ref> as it is used in relational database management systems. Finally, the solution advocated in [26], which relies on adding reflection to the query language and is sufficiently powerful, is too complex for the task at hand. <p> This notion of query, though considered in [3] in the context of complete relational query languages, is strictly broader than that of Codd <ref> [5] </ref> for the relational model and as it is used in conventional relational database systems. As a consequence, to extend a relational database system with a query language such as Schemalog, one will need to strongly couple it with the database system's data definition sublanguage.
Reference: [6] <author> L.S. Colby. </author> <title> Query Languages and a Unifying Framework for Non-Traditional Data Model. </title> <type> PhD dissertation, </type> <institution> Indiana University, </institution> <year> 1992. </year>
Reference-contexts: This can always be accomplished because we assumed N to be a denumerable set. (It is also useful to observe that it is possible, via constraint specification, to ensure that a uniform database encodes a relational database. For work along these lines, we refer the reader to Colby's dissertation <ref> [6] </ref>.) Remark 3.5 (Dual Nature of Information Objects.) The uniform model has a built-in dualism, which the relational model lacks, that allows it to overcome the meta-data/data separation. 6 Type Key RelationName Course KeyAttributeName Cno and Type SubsetConstraint LeftRelationName Takes RightRelationName Course LeftAttributeName Cno RightAttributeName Cno This dualism is manifested in
Reference: [7] <author> D. Hsiao. </author> <title> Federated databases and systems: Part-one a tutorial on their data sharing. </title> <journal> VLDB Journal, </journal> <volume> 1 </volume> <pages> 127-179, </pages> <year> 1992. </year>
Reference-contexts: Another area of database research, though we will not emphasize it here in this paper, that our paper addresses relates to the heterogeneous database systems (HDBS) <ref> [2, 18, 13, 7, 20] </ref>. An HDBS is a distributed database system that includes component databases which may be different at the database level (such as data model, query language, and schema).
Reference: [8] <author> W. Kent. </author> <title> The breakdown of the information model in multidatabase systems. </title> <booktitle> SIGMOD Record, special issue on Semantic Issues in Multidatabases, </booktitle> <editor> A. Sheth, ed., </editor> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: The problem is how to integrate data with semantic heterogeneity and semantic discrepancy in a HDBS. In <ref> [8] </ref>, Kent gives a introduction to the factors that cause semantic heterogeneity and semantic discrepancy in a HDBS, and also presents some approaches to solve these problems.
Reference: [9] <author> M. Kifer, G. Lausen, and J. Wu. </author> <title> Logical foundations of object-oriented and frame-based languages. </title> <type> Tech. Rep. 90/14, </type> <institution> Department of Computer Science, SUNY at Stony Brook, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> Several subsequent papers by Chen, Kifer, Lausen, Warren, and Wu <ref> [4, 9] </ref> further elaborated on Krishnamurthy and Naqvi's work. In [10], Krishnamurthy, Litwin, and Kent extended the language presented in [11] and demonstrated its relational schema integration capabilities. <p> On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross [16], and subsequently, Lakshmanan, Sadri and Subramanian [12], proposed tractable query languages based on the principles introduced in <ref> [11, 4, 9] </ref>. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. In particular, meta-data queries that produce a dynamic number of relations (e.g, Example 4.2 query 3) can not be specified.
Reference: [10] <author> R. Krishnamurthy, W. Litwin, and W. Kent. </author> <title> Language features for interoperability of databases with schematic discrepancies. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 40-49, </pages> <year> 1991. </year>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. Here we only want to state that the solutions advocated in <ref> [11, 10, 4] </ref>, though elegant, are embedded in very powerful object-oriented query languages, whereas the solution in [16], on the contrary, does not go far enough because certain reasonable meta-data/data queries still cannot be expressed in a meta-data independent way. <p> It is well-known that these two problems exist even when all the component databases in a HDBS follow the same data model and query language <ref> [10] </ref>. <p> Several subsequent papers by Chen, Kifer, Lausen, Warren, and Wu [4, 9] further elaborated on Krishnamurthy and Naqvi's work. In <ref> [10] </ref>, Krishnamurthy, Litwin, and Kent extended the language presented in [11] and demonstrated its relational schema integration capabilities. An essential feature of the query languages proposed in these papers is that they allow predicate symbols and ordinary constants to be mixed. <p> Hence, in this language, there still is a sharp separation in the treatment of data and meta-data. As a framework to study relational data and meta-data query processing, the uniform data model fits in between the approach advocated by Krishnamurthy et.al. <ref> [11, 10] </ref> and that advocated by Lakshmanan et.al. [12]. In the Lakshmanan approach, the data model is relational, but untyped relational queries can be expressed in the logic that they present.
Reference: [11] <author> R. Krishnamurthy and S. Naqvi. </author> <title> Towards a real horn clause languages. </title> <booktitle> In Proc. of the 14th VLDB Conf., </booktitle> <pages> pp. 252-263, </pages> <year> 1988. </year>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. Here we only want to state that the solutions advocated in <ref> [11, 10, 4] </ref>, though elegant, are embedded in very powerful object-oriented query languages, whereas the solution in [16], on the contrary, does not go far enough because certain reasonable meta-data/data queries still cannot be expressed in a meta-data independent way. <p> For instance, all the examples of meta-data queries given in this paper can be expressed in safe UA. This provides evidence that a significant number of meta-data queries can already be formulated in AC 0 . 4.4 Related Work In an influential paper, Krishnamurthy and Naqvi <ref> [11] </ref> proposed a variety of syntactic extensions to datalog-like languages to make these languages more powerful with respect to complex-object manipulation and meta-data querying. Several subsequent papers by Chen, Kifer, Lausen, Warren, and Wu [4, 9] further elaborated on Krishnamurthy and Naqvi's work. <p> Several subsequent papers by Chen, Kifer, Lausen, Warren, and Wu [4, 9] further elaborated on Krishnamurthy and Naqvi's work. In [10], Krishnamurthy, Litwin, and Kent extended the language presented in <ref> [11] </ref> and demonstrated its relational schema integration capabilities. An essential feature of the query languages proposed in these papers is that they allow predicate symbols and ordinary constants to be mixed. <p> On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross [16], and subsequently, Lakshmanan, Sadri and Subramanian [12], proposed tractable query languages based on the principles introduced in <ref> [11, 4, 9] </ref>. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. In particular, meta-data queries that produce a dynamic number of relations (e.g, Example 4.2 query 3) can not be specified. <p> Hence, in this language, there still is a sharp separation in the treatment of data and meta-data. As a framework to study relational data and meta-data query processing, the uniform data model fits in between the approach advocated by Krishnamurthy et.al. <ref> [11, 10] </ref> and that advocated by Lakshmanan et.al. [12]. In the Lakshmanan approach, the data model is relational, but untyped relational queries can be expressed in the logic that they present.
Reference: [12] <author> L.V.S. Lakshmanan, F. Sadri, </author> <title> and I.N. Subramanian. On the logical foundations of schema integration and evolution in heterogeneous database systems. </title> <booktitle> In Proc. DOOD 1993. </booktitle> <pages> 22 </pages>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> The approach adopted in <ref> [12] </ref> is the most advanced and comes the closest to solving the meta-data dependence problem while remaining in the low data complexity class. This approach, however, allows untyped relational queries, thereby moving away from the conventional definition of relational query [5] as it is used in relational database management systems. <p> On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross [16], and subsequently, Lakshmanan, Sadri and Subramanian <ref> [12] </ref>, proposed tractable query languages based on the principles introduced in [11, 4, 9]. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. In particular, meta-data queries that produce a dynamic number of relations (e.g, Example 4.2 query 3) can not be specified. <p> Hence, in this language, there still is a sharp separation in the treatment of data and meta-data. As a framework to study relational data and meta-data query processing, the uniform data model fits in between the approach advocated by Krishnamurthy et.al. [11, 10] and that advocated by Lakshmanan et.al. <ref> [12] </ref>. In the Lakshmanan approach, the data model is relational, but untyped relational queries can be expressed in the logic that they present. <p> As a consequence, to extend a relational database system with a query language such as Schemalog, one will need to strongly couple it with the database system's data definition sublanguage. So even though Schemalog is to a large degree consistent with the relational database approach, the claim in <ref> [12] </ref> about the simplicity of the integration of Schemalog in a relational system has to be considered in view of untypedness of their notion of query. In the Krishnamurthy approach, the data model is the complex object data model which is very powerful.
Reference: [13] <author> W. Litwin, M. Leo, and N. Roussopoulos. </author> <title> Interoperability of multiple autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 267-293, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Another area of database research, though we will not emphasize it here in this paper, that our paper addresses relates to the heterogeneous database systems (HDBS) <ref> [2, 18, 13, 7, 20] </ref>. An HDBS is a distributed database system that includes component databases which may be different at the database level (such as data model, query language, and schema).
Reference: [14] <author> F. Olken, D. Rotem, A. Shoshani, and H. Wong. </author> <title> Scientific and statistical data management research at LBL. </title> <booktitle> In Proceedings of 3rd International Workshop on Statistical Database Management, </booktitle> <pages> pages 1-20, </pages> <year> 1986. </year>
Reference-contexts: the representation of meta-data and data is a desirable conceptual property to have, however, in the implementation of this model we can employ any of several structures and techniques that have been used in some advanced database applications to solve the problem of redundancy at the physical data representation level <ref> [19, 14] </ref>.
Reference: [15] <author> C. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Thus, the uniform calculus forms a (strict) subset of second-order logic. It is well-known that second-order logic queries can be evaluated in PSPACE <ref> [15] </ref>. Theorem 4.4 reveals that the uniform query languages are more powerful than their relational counterparts. 12 There exist however natural sublanguages of the uniform query languages which are in AC 0 .
Reference: [16] <author> K. Ross. </author> <title> Relations with relation names as arguments: Algebra and calculus. </title> <booktitle> In Proceedings 11th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 346-353, </pages> <year> 1992. </year>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> In Section 4.4, we will review these papers. Here we only want to state that the solutions advocated in [11, 10, 4], though elegant, are embedded in very powerful object-oriented query languages, whereas the solution in <ref> [16] </ref>, on the contrary, does not go far enough because certain reasonable meta-data/data queries still cannot be expressed in a meta-data independent way. The approach adopted in [12] is the most advanced and comes the closest to solving the meta-data dependence problem while remaining in the low data complexity class. <p> An essential feature of the query languages proposed in these papers is that they allow predicate symbols and ordinary constants to be mixed. On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross <ref> [16] </ref>, and subsequently, Lakshmanan, Sadri and Subramanian [12], proposed tractable query languages based on the principles introduced in [11, 4, 9]. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. <p> On the other hand, all these query languages have very high complexity bounds (in some cases they are even Turing complete). Ross <ref> [16] </ref>, and subsequently, Lakshmanan, Sadri and Subramanian [12], proposed tractable query languages based on the principles introduced in [11, 4, 9]. The language in [16], however, has limitations which prevent it from expressing natural meta-data queries. In particular, meta-data queries that produce a dynamic number of relations (e.g, Example 4.2 query 3) can not be specified. In other words, queries wherein ordinary data need to be promoted to meta-data status can not be expressed.
Reference: [17] <author> A. Sheth. </author> <title> Semantic issues in multidatabase systems. SIGMOD Record, special issue on Se mantic Issues in Multidatabases, </title> <editor> A. Sheth, ed., </editor> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: This paper can also provide some insights in solving a major problem inherent in the development of heterogeneous databases due to the semantic issues <ref> [17] </ref> concerning semantic heterogeneity (which occurs when two objects that represent the same real world entity are represented differently), and semantic discrepancy (which occurs when two objects that represent the same real world entity have inconsistent information for example, one component database's data corresponds to meta-data in other component databases).
Reference: [18] <author> A. Sheth and J. Larson. </author> <title> Federated database system for managing distributed, heterogeneous and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Another area of database research, though we will not emphasize it here in this paper, that our paper addresses relates to the heterogeneous database systems (HDBS) <ref> [2, 18, 13, 7, 20] </ref>. An HDBS is a distributed database system that includes component databases which may be different at the database level (such as data model, query language, and schema).
Reference: [19] <author> A. Shoshani and H. Wong. </author> <title> Statistical and scientific database issues. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(10):1040-1047, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: the representation of meta-data and data is a desirable conceptual property to have, however, in the implementation of this model we can employ any of several structures and techniques that have been used in some advanced database applications to solve the problem of redundancy at the physical data representation level <ref> [19, 14] </ref>.
Reference: [20] <editor> Sigmod. </editor> <booktitle> SIGMOD Record. Special issue on Semantic Issues in Multidatabases, </booktitle> <editor> A. Sheth, ed., </editor> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: Another area of database research, though we will not emphasize it here in this paper, that our paper addresses relates to the heterogeneous database systems (HDBS) <ref> [2, 18, 13, 7, 20] </ref>. An HDBS is a distributed database system that includes component databases which may be different at the database level (such as data model, query language, and schema).
Reference: [21] <author> B.C. Smith. </author> <title> Reflection and semantics in LISP. </title> <booktitle> In Proceedings 11th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 23-35, </pages> <year> 1984. </year>
Reference-contexts: Even though our approach has more in common with that just described, it also has affinities with that of Van den Bussche, Van Gucht and Vossen [26]. These authors extended the relational algebra with reflection <ref> [21, 22] </ref> mechanisms, i.e. reification (i.e., associating data with the meaning of a program) and evaluation (i.e., associating the meaning of a program with data). In a typical reflective-RA program, one dynamically constructs relational algebra queries with reification tools and subsequently evaluates these queries.
Reference: [22] <author> D. Stemple et al. </author> <title> Type-safe linguistic reflection: a generator technology. </title> <institution> Research report CS/92/6, Univ. St Andrews, </institution> <year> 1992. </year>
Reference-contexts: Even though our approach has more in common with that just described, it also has affinities with that of Van den Bussche, Van Gucht and Vossen [26]. These authors extended the relational algebra with reflection <ref> [21, 22] </ref> mechanisms, i.e. reification (i.e., associating data with the meaning of a program) and evaluation (i.e., associating the meaning of a program with data). In a typical reflective-RA program, one dynamically constructs relational algebra queries with reification tools and subsequently evaluates these queries.
Reference: [23] <author> D. Suciu. </author> <title> Fixpoints and bounded fixpoints for complex objects. </title> <booktitle> In Proc. DBPL 1993, </booktitle> <pages> pages 263-281. </pages>
Reference-contexts: We do this in the full paper. 18 Proof (sketch). The safe UA can easily be seen to be a sublanguage of the nested relational algebra [25]. In a recent paper, Suciu <ref> [23] </ref> established that nested relational algebra expressions can be evaluated in AC 0 . The simulation of the relational algebra in safe UA uses techniques similar to the ones used to define derived UA operators such as ", , fi, etc. <p> A natural direction for future research is to adapt relational query languages with iteration constructs (such as datalog, FO + IFP, and FO + PFP) to uniform query languages with corresponding iteration mechanisms. (Technically, to limit the expressiveness of such languages one can use the ideas of Suciu <ref> [23] </ref> related to bounded fixpoints in nested relational query languages.) Such query languages will enable the formulation of meta-data queries which need to be expressed in terms of the path-structure of the meta-data space.
Reference: [24] <author> A. Tarski. </author> <title> On the calculus of relations. </title> <journal> The Journal of Symbolic Logic, </journal> <volume> 6(3) </volume> <pages> 73-89, </pages> <year> 1941. </year>
Reference-contexts: Complex objects are relations in which the entries are not required to be atomic domain elements (as in the relational model) but are allowed to be themselves relations. 8 Since information objects are binary relations, we have adopted Tarski's well known binary relation algebra <ref> [24] </ref> as our object term algebra. Tarski's algebra consists of four operations: inversion of a relation, relative complementation of a relation, union of two relations, and composition of two relations.
Reference: [25] <author> S.J. Thomas and P.C. Fischer. </author> <title> Nested relational structures. In The Theory of Databases, P.C. </title> <editor> Kanellakis, ed., </editor> <publisher> JAI Press, </publisher> <year> 1986, </year> <pages> pp. 269-307. </pages>
Reference-contexts: We do this in the full paper. 18 Proof (sketch). The safe UA can easily be seen to be a sublanguage of the nested relational algebra <ref> [25] </ref>. In a recent paper, Suciu [23] established that nested relational algebra expressions can be evaluated in AC 0 . The simulation of the relational algebra in safe UA uses techniques similar to the ones used to define derived UA operators such as ", , fi, etc.
Reference: [26] <author> J. Van den Bussche, D. Van Gucht, and G. Vossen. </author> <title> Reflective programming in the relational algebra. </title> <booktitle> In Proc. Twelth PODS , 1993, </booktitle> <pages> pp. 17-25. 23 </pages>
Reference-contexts: We will call this phenomenon the meta-data dependence problem of relational query languages. In recent years, several papers have appeared in the literature that address the meta-data dependence problem <ref> [11, 10, 4, 16, 12, 26, 9] </ref>. The solutions proposed there augment the query language with mechanisms that allow it to query both meta-data and ordinary data. In Section 4.4, we will review these papers. <p> This approach, however, allows untyped relational queries, thereby moving away from the conventional definition of relational query [5] as it is used in relational database management systems. Finally, the solution advocated in <ref> [26] </ref>, which relies on adding reflection to the query language and is sufficiently powerful, is too complex for the task at hand. In this paper we present another approach to overcome the meta-data dependence problem in relational data processing. <p> They explicitly represent the relational database objects as complex objects and we use relatively lightweight information objects. Even though our approach has more in common with that just described, it also has affinities with that of Van den Bussche, Van Gucht and Vossen <ref> [26] </ref>. These authors extended the relational algebra with reflection [21, 22] mechanisms, i.e. reification (i.e., associating data with the meaning of a program) and evaluation (i.e., associating the meaning of a program with data). <p> In a typical reflective-RA program, one dynamically constructs relational algebra queries with reification tools and subsequently evaluates these queries. The crucial observation in <ref> [26] </ref> was that, while a reflective-RA program is static, the relational algebra queries it creates can depend on the current data and meta-data status of the database. Thus reflection admits another mechanism to break the meta-data dependence problem.
References-found: 26

