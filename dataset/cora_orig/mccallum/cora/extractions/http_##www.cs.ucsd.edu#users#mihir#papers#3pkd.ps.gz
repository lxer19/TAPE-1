URL: http://www.cs.ucsd.edu/users/mihir/papers/3pkd.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/key-distribution.html
Root-URL: http://www.cs.ucsd.edu
Title: Provably Secure Session Key Distribution| The Three Party Case  
Author: Mihir Bellare Phillip Rogaway 
Abstract: We study session key distribution in the three-party setting of Needham and Schroeder. (This is the trust model assumed by the popular Kerberos authentication system.) Such protocols are basic building blocks for contemporary distributed systems|yet the underlying problem has, up until now, lacked a definition or provably-good solution. One consequence is that incorrect protocols have proliferated. This paper provides the first treatment of this problem in the complexity-theoretic framework of modern cryptography. We present a definition, protocol, and a proof that the protocol satisfies the definition, assuming the (minimal) assumption of a pseudorandom function. When this assumption is appropriately instantiated, our protocols are simple and efficient. Abstract appearing in Proceedings of the 27th ACM Symposium on the Theory of Computing, May 1995. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Beimel and B. Chor, </author> <title> "Interaction in key distribution schemes," </title> <type> Crypto 93. </type>
Reference-contexts: Many protocols aim to distribute a key whose value depends only on the initially distributed set of long-lived keys and on the identities of those who want to have the shared key. Such key distributions can be noninteractive and information-theoretically secure. This approach begins with [5]; additional work includes <ref> [19, 6, 1, 16] </ref>. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner. <p> The advantage has been scaled to be in the range <ref> [1; 1] </ref>. This scaling is only significant in an "exact" treatment of security; here we give an asymptotic treatment. 4.3 Main definition Fixing a particular partner function f induces a notion of which keys will be considered fresh.
Reference: [2] <author> M. Bellare and P. Rogaway, </author> <title> "Entity authentication and key distribution," </title> <type> Crypto 93. </type>
Reference-contexts: pseudorandom functions with arbitrary domain and range lengths, and these constructions are themselves provably secure given plausible as sumptions about DES and MD5. 2 1.5 Related work The most closely related work to the present one is a previous paper of ours on two-party entity authentication and authenticated key exchange <ref> [2] </ref>, which provided the first provably-secure solutions for these goals. This in turn built on the work of [3, 10] for the same problem. The work of [2] was the first to formalize the notion of instances, and our model, with the framework of an adversary talking to its oracles, extends <p> The most closely related work to the present one is a previous paper of ours on two-party entity authentication and authenticated key exchange <ref> [2] </ref>, which provided the first provably-secure solutions for these goals. This in turn built on the work of [3, 10] for the same problem. The work of [2] was the first to formalize the notion of instances, and our model, with the framework of an adversary talking to its oracles, extends that of [2]. Differences lie in the goals. <p> This in turn built on the work of [3, 10] for the same problem. The work of <ref> [2] </ref> was the first to formalize the notion of instances, and our model, with the framework of an adversary talking to its oracles, extends that of [2]. Differences lie in the goals. Entity authentication is the process by which parties can become convinced that they are talking to one another, while authenticated key exchange entails piggybacking a two-party key distribution on top of a two-party entity authentication. <p> One of our contributions is to disentangle these problems and identify one of them |key distribution| as the "right" goal for most applications. We comment that a definition for three-party entity authentication can be obtained by modifying the notion of two-party entity authentication given in <ref> [2] </ref>. (If desired, this definition can then be extended to demand a key be distributed in the process, mimicking the treatment of authenticated key exchange [2].) But we believe that the above is not the best approach in the current setting. <p> We comment that a definition for three-party entity authentication can be obtained by modifying the notion of two-party entity authentication given in <ref> [2] </ref>. (If desired, this definition can then be extended to demand a key be distributed in the process, mimicking the treatment of authenticated key exchange [2].) But we believe that the above is not the best approach in the current setting. <p> The situation we address is one where communication between players is entirely controlled by the adversary. We build on and extend the model of <ref> [2] </ref>. The adversary is a probabilistic machine E which we equip with an infinite collection of oracles| s i;j i;j , for i; j 2 I and s 2 N. Oracle s i;j models instance s of player i attempting to agree on a shared session key with player j. <p> We note that this definition of a partner function is less stringent than the idea of partnering by matching conversations given in <ref> [2] </ref>. In the latter, the partner of 6 an oracle is identified by looking at the bits which flow among the oracles. Such a notion is not possible here, since we wish to define key distribution independently of authentication. Freshness.
Reference: [3] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva and M. Yung, </author> <title> "Systematic design of two-party authentication protocols," </title> <type> Crypto 91. </type>
Reference-contexts: This in turn built on the work of <ref> [3, 10] </ref> for the same problem. The work of [2] was the first to formalize the notion of instances, and our model, with the framework of an adversary talking to its oracles, extends that of [2]. Differences lie in the goals.
Reference: [4] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva and M. Yung, </author> <title> "The KryptoKnight family of light-weight protocols for authentication and key distribution," </title> <journal> IEEE/ACM T. on Networking, </journal> <volume> 3(1), </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: It is impossible to survey here the large body of suggested protocols for three-party session key distribution. One recent solution which influenced our thinking is IBM's KryptoKnight family of protocols <ref> [4] </ref>. These avoid many earlier pitfalls, but they still fall short of our definition of correctness. 1.6 Authentication versus key distribu tion The tendency to link the entity authentication goal and the key distribution one is so entrenched that it is worth emphasizing that these problems are very different.
Reference: [5] <author> R. Blom, </author> <title> "An optimal class of symmetric key generation systems," </title> <booktitle> Eurocrypt 84. </booktitle>
Reference-contexts: Many protocols aim to distribute a key whose value depends only on the initially distributed set of long-lived keys and on the identities of those who want to have the shared key. Such key distributions can be noninteractive and information-theoretically secure. This approach begins with <ref> [5] </ref>; additional work includes [19, 6, 1, 16]. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner.
Reference: [6] <author> C. Blundo, A. De Santis, A. Herzberg, S. Kutten and M. Yung, </author> <title> "Perfectly-secure key distribution for dynamic conferences," </title> <type> Crypto 92. </type>
Reference-contexts: Many protocols aim to distribute a key whose value depends only on the initially distributed set of long-lived keys and on the identities of those who want to have the shared key. Such key distributions can be noninteractive and information-theoretically secure. This approach begins with [5]; additional work includes <ref> [19, 6, 1, 16] </ref>. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner.
Reference: [7] <author> M. Burrows, M. Abadi and R. Needham, </author> <title> "A logic for authentication," </title> <journal> ACM Transactions on computer systems, </journal> <volume> Vol. 8, No. </volume> <pages> 1. </pages>
Reference-contexts: As a result of a long history of such attacks there is finally a general consensus that session key distribution is not a goal adequately addressed by giving a protocol for which the authors can find no attacks. A large body of work, beginning with Burrows, Abadi and Needham <ref> [7] </ref>, aims to improve on this situation via the use of special-purpose logics. The aim is to demonstrate a lack of "reasoning problems" in a protocol being analyzed.
Reference: [8] <author> D. Denning and G. Sacco, </author> <title> "Timestamps in key distribution protocols," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 24, No. 8, </volume> <pages> pp. 533-536, </pages> <year> 1981. </year>
Reference-contexts: The need for techniques to verify the correctness of such protocols is great : : :". Evidence of the authors' claim came unexpectedly when a bug was pointed out in their own "Protocol 1" (Denning and Sacco, <ref> [8] </ref>). 2 Many related protocols were eventually to suffer the same fate. As a result of a long history of such attacks there is finally a general consensus that session key distribution is not a goal adequately addressed by giving a protocol for which the authors can find no attacks. <p> We allow the adversary to expose this key with a (Reveal; i; j; s) query. What does this model? One of the main purposes of session keys is that the loss of one should only compromise the session which that key protects <ref> [8, 21] </ref>. (Indeed, failure to achieve security in the face of such a loss of session keys is the basis of the well-known "bug" of [17].) The session using the key will be using it for some purpose about which we known nothing.
Reference: [9] <author> W. Diffie and M. E. Hellman, </author> <title> "New directions in cryptography," </title> <journal> IEEE Trans. Info. Theory IT-22, </journal> <month> 644-654 (November </month> <year> 1976). </year>
Reference-contexts: This approach begins with [5]; additional work includes [19, 6, 1, 16]. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner. The classic secret key exchange problem <ref> [9] </ref> is again entirely different: the adversary there is passive, and there is no notion of sessions or instances. It is impossible to survey here the large body of suggested protocols for three-party session key distribution. One recent solution which influenced our thinking is IBM's KryptoKnight family of protocols [4].
Reference: [10] <author> W. Diffie, P. van Oorschot and M. Wiener, </author> <title> "Authentication and authenticated key exchanges," Designs, Codes and Cryptography, </title> <type> 2, </type> <month> 107-125 </month> <year> (1992). </year>
Reference-contexts: This in turn built on the work of <ref> [3, 10] </ref> for the same problem. The work of [2] was the first to formalize the notion of instances, and our model, with the framework of an adversary talking to its oracles, extends that of [2]. Differences lie in the goals.
Reference: [11] <author> O. Goldreich, S. Goldwasser and S. Micali, </author> <title> "How to construct random functions," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 33, No. 4, </volume> <pages> 210-217, </pages> <year> (1986). </year>
Reference-contexts: A second definitional element is the partner function. Our protocol's starting point, a pseudorandom function family, exists if one-way functions exist <ref> [14, 11] </ref>. Exploiting techniques of [15] we show (Theorem 7) that the existence of a secure three-party session key distribution implies the existence of a one-way function, and so our assumption is minimal. 1.4 Design for practice Provably-secure protocols are not usually efficient. Ours is an exception to this rule. <p> The MAC scheme is secure if for every polynomial-time adversary E, success E (k) is negligible. A pseudorandom function family ff a (x)g makes a good MAC: define MAC a (x) = f a (x) and define VF (x; ) by the predicate ( = MAC a (x)) <ref> [11] </ref>. A (private key) encryption scheme is a pair of polynomial-time functions (E a (x); D a (y)), the first of 7 which is probabilistic and the second of which is deter-ministic. We may explicitly indicate the coins of E by writing E a (x; r). <p> Then protocol 3PKD [(MAC; VF); (E; D); Sn] is a secure key distribution protocol, distributing Sn-distributed keys. The proof appears in Appendix A. Using well-known results <ref> [14, 11] </ref> we obtain the following corollary. Corollary 4 If there exists a one-way function then for any generator Sn there exists a secure key distribution protocol, distributing Sn-distributed keys. Comments.
Reference: [12] <author> S. Goldwasser and S. Micali, </author> <title> "Probabilistic encryption," </title> <journal> Journal of Computer and System Sciences Vol. </journal> <volume> 28, </volume> <month> 270-299 (April </month> <year> 1984). </year>
Reference-contexts: We emphasize that freshness depends on the partner function f . Test Queries. Now we are ready to formalize the secrecy of fresh keys. We do this along the lines of the definition of polynomial security of encryption <ref> [12] </ref>. We emphasize that it is not enough to say that the adversary doesn't know fresh session keys; we expect all properties of these keys to be well-hidden, too. Fix a generator Sn and a partner function f . <p> We may explicitly indicate the coins of E by writing E a (x; r). We require that D (y) = x for every y output with positive probability by E a (x). For security we use a definition slightly weaker than the natural adaptation of the definition of <ref> [12] </ref> to the private key setting; this is all we need, and a weaker notion of security only strengthens our results. For any adversary E and generator G we consider the experiment defined as follows.
Reference: [13] <author> S. Goldwasser, S. Micali and R. Rivest, </author> <title> "A digital signature scheme secure against adaptive chosen-message attacks," </title> <journal> SIAM Journal of Computing, </journal> <volume> Vol. 17, No. 2, </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: We require that for any output with positive probability by MAC a (x), it is the case that VF a (x; ) = 1. For security we adapt the definition of <ref> [13] </ref>. An adversary E for a MAC scheme is an algorithm with a MAC a () oracle.
Reference: [14] <author> J. H -astad, R. Impagliazzo, L. Levin, and M. Luby, </author> <title> "Construction of a pseudo-random generator from any one-way function." </title> <type> Manuscript. </type> <note> Earlier versions in STOC 89, STOC 90. </note>
Reference-contexts: A second definitional element is the partner function. Our protocol's starting point, a pseudorandom function family, exists if one-way functions exist <ref> [14, 11] </ref>. Exploiting techniques of [15] we show (Theorem 7) that the existence of a secure three-party session key distribution implies the existence of a one-way function, and so our assumption is minimal. 1.4 Design for practice Provably-secure protocols are not usually efficient. Ours is an exception to this rule. <p> Then protocol 3PKD [(MAC; VF); (E; D); Sn] is a secure key distribution protocol, distributing Sn-distributed keys. The proof appears in Appendix A. Using well-known results <ref> [14, 11] </ref> we obtain the following corollary. Corollary 4 If there exists a one-way function then for any generator Sn there exists a secure key distribution protocol, distributing Sn-distributed keys. Comments.
Reference: [15] <author> R. Impagliazzo and M. Luby, </author> <title> "One-way functions are essential for complexity based cryptography," </title> <type> FOCS 89. </type>
Reference-contexts: A second definitional element is the partner function. Our protocol's starting point, a pseudorandom function family, exists if one-way functions exist [14, 11]. Exploiting techniques of <ref> [15] </ref> we show (Theorem 7) that the existence of a secure three-party session key distribution implies the existence of a one-way function, and so our assumption is minimal. 1.4 Design for practice Provably-secure protocols are not usually efficient. Ours is an exception to this rule. <p> A family of distributions D k is called non-degenerate if for some c &gt; 0 we have that 1 h D k &gt; k c for all large enough k. The following theorem can be established using techniques of <ref> [15] </ref>. Theorem 7 Suppose there exists a secure key distribution protocol which distributes Sn ()-distributed keys, where Sn is non-degenerate. Then there exists a one-way function. Acknowledgments Work done while the first author was at the IBM T.J. Watson Research Center.
Reference: [16] <author> T. Leighton and S. Micali, </author> <title> "Secret-key agreement without public-key cryptography," </title> <booktitle> Crypto 93. </booktitle> <pages> 9 </pages>
Reference-contexts: Many protocols aim to distribute a key whose value depends only on the initially distributed set of long-lived keys and on the identities of those who want to have the shared key. Such key distributions can be noninteractive and information-theoretically secure. This approach begins with [5]; additional work includes <ref> [19, 6, 1, 16] </ref>. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner.
Reference: [17] <author> R. Needham and M. Schroeder, </author> <title> "Using en-cryption for authentication in large networks of computers," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 21, No. 12, </volume> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: Perhaps the following will help indicate that this is not really so. 1.2 A troubled history The earliest and most influential articulation of the three-party session key distribution problem is by Need-ham and Schroeder in 1978 <ref> [17] </ref>. They talk about the use of such protocols and describe a number of candidate ones. In the years following their paper tens of session-key distribution protocols appeared and were implemented. <p> this model? One of the main purposes of session keys is that the loss of one should only compromise the session which that key protects [8, 21]. (Indeed, failure to achieve security in the face of such a loss of session keys is the basis of the well-known "bug" of <ref> [17] </ref>.) The session using the key will be using it for some purpose about which we known nothing. <p> connectivity; in this case flow 3A should be "routed through" B. (In other words, the protocol 3PKD is changed so that S sends only one message, to B, and B forwards half of this message along to A.) Alternatively, one might prefer S $ A $ B connectivity, as in <ref> [17, 20] </ref>); in this case the protocol 3PKD is changed so that messages are routed as A ! B ! A ! S ! A ! B. Changes in a protocol's message routing (to accommodate a desired connectivity graph) do not impact a protocol's provable security in any way.
Reference: [18] <author> R. Needham and M. Schroeder, </author> <title> "Authentication revisited," </title> <journal> Operating Systems Review, </journal> <volume> Vol. 21, No. 1, </volume> <editor> p. </editor> <volume> 7, </volume> <month> January </month> <year> 1987. </year>
Reference-contexts: parties know, and for which P i holds the secret counterpart. 2 Insofar as there were no formal statements of what this protocol was supposed to do, it is not entirely fair to call it buggy; but the authors themselves regarded the protocol as having a problem worthy of fixing <ref> [18] </ref>. trast, we seek methods for which a proof of a protocol's correctness means a great deal more. 1.3 Provable security for three-party session key distribution In this paper we bring provable security to three-party key distribution.
Reference: [19] <author> A. Shamir, </author> <title> "Identity-based cryptosystems and signature schemes," </title> <type> Crypto 91. </type>
Reference-contexts: Many protocols aim to distribute a key whose value depends only on the initially distributed set of long-lived keys and on the identities of those who want to have the shared key. Such key distributions can be noninteractive and information-theoretically secure. This approach begins with [5]; additional work includes <ref> [19, 6, 1, 16] </ref>. In these works the model does not recognize multiple instances of players: in effect, they distribute long-lived keys given long-lived keys stored in a more convenient manner.
Reference: [20] <author> J. Steiner, C. Newman and J. Schiller, </author> <title> "Kerberos: an authentication service for open network systems," </title> <booktitle> Proceedings of the USENIX Winter Conference, </booktitle> <pages> pp. 191-202, </pages> <year> 1988 </year>
Reference-contexts: This paper provides provable security for the three-party case of session key distribution. The ideas extend to treat other settings, but the three-party one is the most prevalent in present-day systems. In particular three-party session key distribution is the problem which the well-known Kerberos authentication system attempts to solve <ref> [20] </ref>. 1.1 The problem: an informal descrip tion In a distributed system communication between parties typically takes place in "sessions." A session is a relatively short period of interaction between two parties which has an associated "session key" used to protect it. <p> connectivity; in this case flow 3A should be "routed through" B. (In other words, the protocol 3PKD is changed so that S sends only one message, to B, and B forwards half of this message along to A.) Alternatively, one might prefer S $ A $ B connectivity, as in <ref> [17, 20] </ref>); in this case the protocol 3PKD is changed so that messages are routed as A ! B ! A ! S ! A ! B. Changes in a protocol's message routing (to accommodate a desired connectivity graph) do not impact a protocol's provable security in any way.
Reference: [21] <author> Y. Yacobi and Z. Shmuely. </author> <title> "On key distribution systems." </title> <type> Crypto 89. </type>
Reference-contexts: We allow the adversary to expose this key with a (Reveal; i; j; s) query. What does this model? One of the main purposes of session keys is that the loss of one should only compromise the session which that key protects <ref> [8, 21] </ref>. (Indeed, failure to achieve security in the face of such a loss of session keys is the basis of the well-known "bug" of [17].) The session using the key will be using it for some purpose about which we known nothing.
References-found: 21

