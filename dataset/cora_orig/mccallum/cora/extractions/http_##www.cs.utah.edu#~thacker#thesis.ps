URL: http://www.cs.utah.edu/~thacker/thesis.ps
Refering-URL: http://www.cs.utah.edu/~thacker/
Root-URL: 
Title: IMPLICIT METHODS FOR TIMED CIRCUIT SYNTHESIS  
Author: by Robert Thacker 
Degree: A thesis submitted to the faculty of The University of Utah in partial fulfillment of the requirements for the degree of Master of Science  
Date: June 1998  
Affiliation: Department of Computer Science The University of Utah  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Alur, R. </author> <title> Techniques for Automatic Verification of Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: The system is unable to analyze large models due to the complexity of the discrete time model used. The COSPAN tool also uses implicit methods to perform state space analysis, but uses the unit-cube algorithm <ref> [1] </ref>. This method also suffers from state space explosion when used on relatively small designs. 4 1.2 Contributions been to apply implicit methods to timed state space exploration and the synthesis of timed circuits within this tool framework. <p> Rules that enable transitions on li are given a delay range [l L ; u L ], which indicates that this range is set depending on what the lapb element is communicating with. If it is communicating with another similar lapb circuit, this range is <ref> [1; 5] </ref> like the rest of the ranges. If the circuit is communicating with a dissimilar circuit, these ranges are set to [100; 1], since the behavior of the environment is assumed to be slow. <p> If it is communicating with another similar lapb circuit, this range is [1; 5] like the rest of the ranges. If the circuit is communicating with a dissimilar circuit, these ranges are set to <ref> [100; 1] </ref>, since the behavior of the environment is assumed to be slow. The [l R ; u R ] delay ranges used on rules enabling transitions in ri are assigned in a similar way.
Reference: [2] <author> Beerel, P., and Meng, T.-Y. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 581-587. </pages>
Reference-contexts: Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27]. Speed-independent circuits are similar, but assume that wire delays are negligible <ref> [2, 12, 26] </ref>. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice. Many models have been proposed for the analysis of timed systems.
Reference: [3] <author> Beerel, P. A., Myers, C. J., and Meng, T. H.-Y. </author> <title> Automatic synthesis of gate-level speed-independent circuits. </title> <type> Tech. Rep. </type> <institution> CSL-TR-94-648, Stanford University, </institution> <month> Novermber </month> <year> 1994. </year>
Reference-contexts: BDDs are constructed for each necessary row and column index, and stored in arrays r and c. The BDD for the i th column index is stored in c [i] and the BDD for the i th row index is stored in r [i]. For example, r <ref> [3] </ref> represents the value "3" using a set of variables which indicate that it is a row index. Each augmented matrix is then transformed into a MTBDD. Figure 2.8 shows the algorithm used to accomplish the transformation. First, fi is initialized to FALSE. <p> In a gC implementation, any state where the signal is enabled in the same direction or stable at the final value may be included. In a SC circuit, some of those states may need to be excluded to guarantee hazard-freedom. The correctness constraints discussed here were developed in <ref> [3] </ref> for speed-independent circuits and extended to timed circuits in [30]. 3.3.1 gC cover violations In a gC implementation, the allowed growth regions include the remainder of the excitation space and the entire quiescent space for the corresponding signal transition.
Reference: [4] <author> Belluomini, W., and Myers, C. J. </author> <title> Efficient timing analysis algorithms for timed state space exploration. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems (Apr. 1997), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The timed circuit synthesis method used in ATACS [29] allows a lower and an upper bound to be assigned to the causal relationships between signals. Timing analysis is performed using geometric regions, which have been shown to be an efficient method for representing information about timed state spaces <ref> [4] </ref>. Unfortunately, large state spaces are still generated when the method is applied to large, complex designs, and memory size can be prohibitive. BDDs have been shown to be an efficient way to represent design information and large state spaces. <p> The geometric region method, where timing information is stored as a constraint matrix representing relationships between signal transition times, has been shown to be an efficient way to represent a timed state space <ref> [4, 30, 35, 36] </ref>. However, even with a region based representation, the memory required to store such a state space explicitly can be prohibitive for large designs. In many domains, implicit methods have been shown to significantly reduce memory usage [9]. <p> The timing annotated handshaking expansion for this circuit is shown in Figure 2.2. 2.2 Explicit timed state space exploration The state space exploration procedure used by ATACS begins with a timed event-rule (ER) structure, described formally in <ref> [4, 29] </ref>. Timed ER structures can represent a set of specifications equivalent to those represented by both time and timed Petri nets, as well as others that are quite difficult to represent with a Petri net. <p> Table 2.1 shows the results of applying both explicit and implicit state space representation techniques to the various examples. The partial order method for state exploration discussed in <ref> [4] </ref> is used to generate the timed state space. The 28 29 examples shown were run on an Sparc20 with 128Mb of physical memory.
Reference: [5] <author> Berthomieu, B., and Diaz, M. </author> <title> Modeling and verification of time dependent systems using time petri nets. </title> <journal> IEEE Transactions on Software Engineering 17, </journal> <month> 3 (March </month> <year> 1991). </year>
Reference-contexts: The timing information, T I, is represented with geometric regions, which were first introduced in <ref> [5, 19, 24] </ref>. When the geometric region approach is used for timing analysis, a constraint matrix M specifies the maximum difference in time between the enabling times of all the currently enabled rules. <p> Rules that enable transitions on li are given a delay range [l L ; u L ], which indicates that this range is set depending on what the lapb element is communicating with. If it is communicating with another similar lapb circuit, this range is <ref> [1; 5] </ref> like the rest of the ranges. If the circuit is communicating with a dissimilar circuit, these ranges are set to [100; 1], since the behavior of the environment is assumed to be slow.
Reference: [6] <author> Bozga, M., Maler, O., Pnueli, A., and Yovine, S. </author> <title> Some progress in the symbolic verification of timed automata. </title> <booktitle> In Proc. International Conference on Computer Aided Verification (1997). </booktitle>
Reference-contexts: BDDs have been shown to be an efficient way to represent design information and large state spaces. In [11], BDD techniques are developed to decompose generalized C-element circuits in a hazard free manner, the result being a parameterized description of all hazard free decompositions. In <ref> [6] </ref>, implicit methods are applied to the analysis of timed systems. BDDs are used to perform discrete time analysis, with timing values represented as binary vectors. The system is unable to analyze large models due to the complexity of the discrete time model used. <p> A slightly better representation would be to attach a clock to each signal transition that advances only in discrete time steps [10]. This does make the state space finite, but it still explodes [36]. A BDD method has been proposed in <ref> [6] </ref>, to improve discrete time memory performance, but it does not address the state explosion problem inherent in discrete time.
Reference: [7] <author> Brunvand, E., and Sproull, R. F. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1989), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 262-265. </pages>
Reference-contexts: Another possibility is burst-mode circuits [17, 31, 40], where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded <ref> [7, 20, 27] </ref>. Speed-independent circuits are similar, but assume that wire delays are negligible [2, 12, 26]. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice.
Reference: [8] <author> Bryant, R. E. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers 35, </journal> <month> 8 (Aug. </month> <year> 1986), </year> <pages> 677-691. </pages>
Reference-contexts: Equations are derived to represent all possible circuit implementations which conform to these behaviors. We have adapted the ATACS tool to use implicit methods to improve memory performance. Binary Decision Diagrams (BDDs) <ref> [8] </ref> are used throughout circuit synthesis. Where appropriate, Multi-terminal Binary Decision Diagrams [16] (MTBDDs, also known as Algebraic Decision Diagrams or ADDs [34]) are used to store integer valued data. BDDs are a highly effective way to store and manipulate boolean functions. <p> Since much of the data compiled during state space exploration consists of simple bit vectors, we have chosen to use BDDs, which have been shown to be a highly efficient method for storing and manipulating Boolean functions <ref> [8] </ref>. Because geometric region information is integer-valued, MTBDDs have been chosen to store the region matrices. MTBDDs are a type of BDDs which allow terminal nodes to contain numerical data, rather than just the constants TRUE and FALSE. Geometric region matrices only have entries for currently enabled rules.
Reference: [9] <author> Bryant, R. E. </author> <title> Binary decision diagrams and beyond: Enabling technologies for formal verification. </title> <booktitle> In International Conference on Computer-Aided Design (1995), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, even with a region based representation, the memory required to store such a state space explicitly can be prohibitive for large designs. In many domains, implicit methods have been shown to significantly reduce memory usage <ref> [9] </ref>. Since state space exploration is such a memory intensive process, it is an excellent candidate 7 for such an approach. 2.1 Motivating example The circuit shown in Figure 2.1 is a self-precharging dynamic OR gate (SPDOR) and is used as an example throughout this chapter.
Reference: [10] <author> Burch, J. R. </author> <title> Modeling timing assumptions with trace theory. </title> <booktitle> In ICCD (1989). </booktitle>
Reference-contexts: In fact, in a naive algorithm where a continuous timer is associated with each signal transition, the timed state space is infinite. A slightly better representation would be to attach a clock to each signal transition that advances only in discrete time steps <ref> [10] </ref>. This does make the state space finite, but it still explodes [36]. A BDD method has been proposed in [6], to improve discrete time memory performance, but it does not address the state explosion problem inherent in discrete time.
Reference: [11] <author> Burns, S. M. </author> <title> General condition for the decomposition of state holding elements. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems (Mar. 1996), </booktitle> <publisher> IEEE Computer Society Press. </publisher> <pages> 51 </pages>
Reference-contexts: Unfortunately, large state spaces are still generated when the method is applied to large, complex designs, and memory size can be prohibitive. BDDs have been shown to be an efficient way to represent design information and large state spaces. In <ref> [11] </ref>, BDD techniques are developed to decompose generalized C-element circuits in a hazard free manner, the result being a parameterized description of all hazard free decompositions. In [6], implicit methods are applied to the analysis of timed systems. <p> It may also be created using a complex gate known as a generalized C-element (gC) [25]. and Figure 3.3 (c) shows a fully static design. 3.2.1 Single cube covers In <ref> [11] </ref>, a parametrized family of decompositions of high-fanin gates is investigated at one time by adding additional variables. We extend this idea to synthesis by representing our covers by a series of implications of the form ( i ) x i )^( n+i ) :x i ). <p> Considering all possible valid implementations will greatly facilitate technology mapping. In the future, we plan to extend BDD based technology mapping algorithms for speed-independent circuits <ref> [11, 18] </ref> to timed circuits.
Reference: [12] <author> Chu, T.-A. </author> <title> Synthesis of Self-Timed VLSI Circuits from Graph-Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27]. Speed-independent circuits are similar, but assume that wire delays are negligible <ref> [2, 12, 26] </ref>. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice. Many models have been proposed for the analysis of timed systems. <p> Our synthesis procedure also requires that the state graph be complete state coded, defined to be that for any two states in which all signals have the same value, any output signal enabled in one state is also enabled in the other <ref> [12] </ref>. initial state (RR10) both i1 and i2 are enabled to rise, while a is stable low and x is stable high. This state may be exited either on the transition i1 " or i2 ". <p> A state variable a is also included in the specification to allow it to have complete state coding (CSC) <ref> [12] </ref>. A number of timing assumptions are made in the specification to optimize the circuit and are shown as ranges attached to each rule.
Reference: [13] <author> Chu, T.-A., and Glasser, L. A. </author> <title> Synthesis of self-timed control circuits form graphs: An example. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (1986), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 565-571. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [14] <author> Chung, E., and Kleeman, L. </author> <title> An optimal approach to implementing self-timed logic circuits from signal transition graphs. </title> <booktitle> Australian Telecommunications Research 27, 2 (1993), </booktitle> <pages> 41-56. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [15] <author> Clarke, E., Fujita, M., and Zhao, X. </author> <title> Application of multi-terminal binary decision diagrams. </title> <type> Tech. Rep. </type> <institution> CMU-CS-95-160, Carnegie-Mellon University, </institution> <year> 1995. </year>
Reference-contexts: MTBDDs are an ideal way to represent this type of function <ref> [15] </ref>. BDDs are constructed for each necessary row and column index, and stored in arrays r and c. The BDD for the i th column index is stored in c [i] and the BDD for the i th row index is stored in r [i].
Reference: [16] <author> Clarke, E., MacMillan, K., Zhao, X., Fujita, M., and Yang, J.-Y. </author> <title> Spectral transforms for large boolean functions with application to technology mapping. </title> <booktitle> In 30th Design Automation Conference (June 1993), </booktitle> <pages> pp. 54-60. </pages>
Reference-contexts: Equations are derived to represent all possible circuit implementations which conform to these behaviors. We have adapted the ATACS tool to use implicit methods to improve memory performance. Binary Decision Diagrams (BDDs) [8] are used throughout circuit synthesis. Where appropriate, Multi-terminal Binary Decision Diagrams <ref> [16] </ref> (MTBDDs, also known as Algebraic Decision Diagrams or ADDs [34]) are used to store integer valued data. BDDs are a highly effective way to store and manipulate boolean functions. MTBDDs allow this methodology to be extended to integer valued functions with boolean inputs.
Reference: [17] <author> Coates, B., Davis, A., and Stevens, K. </author> <title> The Post Office experience: Designing a large asynchronous chip. Integration, </title> <journal> the VLSI journal 15, </journal> <month> 3 (Oct. </month> <year> 1993), </year> <pages> 341-366. </pages>
Reference-contexts: One methodology is the use of fundamental mode designs [37], where signals are constrained to change one at a time, and must give the system time to settle before other signals may change. Another possibility is burst-mode circuits <ref> [17, 31, 40] </ref>, where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27].
Reference: [18] <author> Cortadella, J., Kishinevsky, M., Kondratyev, A., Lavagno, L., and Yakovlev, A. </author> <title> Technology mapping of speed-independent circuits based on combinational decomposition and resynthesis. </title> <booktitle> In Proc. European Design and Test Conference (1997), </booktitle> <pages> pp. 98-105. </pages>
Reference-contexts: Considering all possible valid implementations will greatly facilitate technology mapping. In the future, we plan to extend BDD based technology mapping algorithms for speed-independent circuits <ref> [11, 18] </ref> to timed circuits.
Reference: [19] <author> Dill, D. L. </author> <title> Timing assumptions and verification of finite-state concurrent systems. </title> <booktitle> In Proceedings of the Workshop on Automatic Verification Methods for Finite-State Systems (1989). </booktitle>
Reference-contexts: The timing information, T I, is represented with geometric regions, which were first introduced in <ref> [5, 19, 24] </ref>. When the geometric region approach is used for timing analysis, a constraint matrix M specifies the maximum difference in time between the enabling times of all the currently enabled rules.
Reference: [20] <author> Ebergen, J. C. </author> <title> Translating Programs into Delay-Insensitive Circuits. </title> <type> PhD thesis, </type> <institution> Dept. of Math. and C.S., Eindhoven Univ. of Technology, </institution> <year> 1987. </year>
Reference-contexts: Another possibility is burst-mode circuits [17, 31, 40], where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded <ref> [7, 20, 27] </ref>. Speed-independent circuits are similar, but assume that wire delays are negligible [2, 12, 26]. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice.
Reference: [21] <author> Hauck, S. </author> <title> Asynchronous design methodologies: An overview. </title> <type> Tech. Rep. TR 93-05-07, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, </address> <year> 1993. </year>
Reference-contexts: MTBDDs allow this methodology to be extended to integer valued functions with boolean inputs. We have found the (MT)BDD representation to be much smaller than an equivalent explicit representation. 3 1.1 Related work Many systems exist for the synthesis of untimed asynchronous circuits <ref> [21] </ref>. One methodology is the use of fundamental mode designs [37], where signals are constrained to change one at a time, and must give the system time to settle before other signals may change.
Reference: [22] <author> Kondratyev, A., Kishinevsky, M., Lin, B., Vanbekbergen, P., and Yakovlev, A. </author> <title> Basic gate implementation of speed-independent circuits. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 56-62. </pages>
Reference-contexts: The ER for c " is the set f (1RR),(R1R),(11R)g. The state (RR0), however, cannot be included, because c is stable low. Therefore, no single cube will describe the entire region. A possible solution is to add state variables to change the state coding <ref> [22] </ref>. Our approach is to create a SOP block to represent this region, instead of a simple "AND" gate design. To accomplish this, the algorithm tests each cover BDD to see if it is identically FALSE.
Reference: [23] <author> Lavagno, L. </author> <title> Synthesis and Testing of Bounded Wire Delay Asynchronous Circuits from Signal Transition Graphs. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> Nov. </month> <year> 1992. </year> <note> Technical report UCB/ERL M92/140. </note>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [24] <author> Lewis, H. R. </author> <title> Finite-state analysis of asynchronous circuits with bounded temporal uncertainty. </title> <type> Tech. rep., </type> <institution> Harvard University, </institution> <month> July </month> <year> 1989. </year> <month> 52 </month>
Reference-contexts: The timing information, T I, is represented with geometric regions, which were first introduced in <ref> [5, 19, 24] </ref>. When the geometric region approach is used for timing analysis, a constraint matrix M specifies the maximum difference in time between the enabling times of all the currently enabled rules.
Reference: [25] <author> Martin, A. J. </author> <title> Programming in VLSI: from communicating processes to delay-insensitive VLSI circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming, </booktitle> <editor> C. Hoare, Ed. </editor> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: The circuit may be implemented using a standard C-element (SC) structure using discrete gates, as shown in Figure 3.3 (a). It may also be created using a complex gate known as a generalized C-element (gC) <ref> [25] </ref>. and Figure 3.3 (c) shows a fully static design. 3.2.1 Single cube covers In [11], a parametrized family of decompositions of high-fanin gates is investigated at one time by adding additional variables.
Reference: [26] <author> Meng, T. H.-Y., Brodersen, R. W., and Messerschmitt, D. G. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design 8, </journal> <volume> 11 (Nov. </volume> <year> 1989), </year> <pages> 1185-1205. </pages>
Reference-contexts: Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27]. Speed-independent circuits are similar, but assume that wire delays are negligible <ref> [2, 12, 26] </ref>. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice. Many models have been proposed for the analysis of timed systems. <p> That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [27] <author> Molnar, C. E., Fang, T.-P., and Rosenberger, F. U. </author> <title> Synthesis of delay-insensitive modules. In 1985 Chapel Hill Conference on Very Large Scale Integration (1985), </title> <editor> H. Fuchs, Ed., </editor> <publisher> Computer Science Press, </publisher> <pages> pp. 67-86. </pages>
Reference-contexts: Another possibility is burst-mode circuits [17, 31, 40], where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded <ref> [7, 20, 27] </ref>. Speed-independent circuits are similar, but assume that wire delays are negligible [2, 12, 26]. These synthesis methods use little or no timing information, and therefore can lead to inefficient circuits because they need to correctly handle cases which never occur in practice.
Reference: [28] <author> Molnar, C. E., Jones, I. W., Coates, B., and Lexau, J. </author> <title> A FIFO ring oscillator performance experiment. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems (Apr. 1997), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The [l R ; u R ] delay ranges used on rules enabling transitions in ri are assigned in a similar way. Both this FIFO and the one described in <ref> [28] </ref>, are very concurrent when parameterized and generate an extremely large number of geometric regions which correspond to the number of regions necessary to synthesize a large complex design. Table 2.1 shows the results of applying both explicit and implicit state space representation techniques to the various examples.
Reference: [29] <author> Myers, C. J. </author> <title> Computer-Aided Synthesis and Verification of Gate-Level Timed Circuits. </title> <type> PhD thesis, </type> <institution> Dept. of Elec. Eng., Stanford University, </institution> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: These timing assumptions can then be formally verified after synthesis when the actual timing values are known. This design style can lead to significant gains in circuit performance over asynchronous circuits designed without timing assumptions <ref> [29] </ref>. Timed circuit synthesis consists of two phases. The first stage involves the exploration of the timed state space to determine which untimed states are reachable by the system. <p> Many models have been proposed for the analysis of timed systems. These range from continuous timers on individual events to large equivalence classes representing groups of events. The timed circuit synthesis method used in ATACS <ref> [29] </ref> allows a lower and an upper bound to be assigned to the causal relationships between signals. Timing analysis is performed using geometric regions, which have been shown to be an efficient method for representing information about timed state spaces [4]. <p> The timing annotated handshaking expansion for this circuit is shown in Figure 2.2. 2.2 Explicit timed state space exploration The state space exploration procedure used by ATACS begins with a timed event-rule (ER) structure, described formally in <ref> [4, 29] </ref>. Timed ER structures can represent a set of specifications equivalent to those represented by both time and timed Petri nets, as well as others that are quite difficult to represent with a Petri net. <p> State graphs are a common intermediate form for most asynchronous CAD tools [13, 14, 23, 26, 32, 33, 38, 39], and can be derived from many higher-level languages such as CHP and STGs <ref> [29] </ref>, as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [30] <author> Myers, C. J., Rokicki, T. G., and Meng, T. H.-Y. </author> <title> Automatic synthesis of gate-level timed circuits with choice. </title> <booktitle> In Proc. 16th Conf. on Advanced Research in VLSI (1995), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 42-58. </pages>
Reference-contexts: The geometric region method, where timing information is stored as a constraint matrix representing relationships between signal transition times, has been shown to be an efficient way to represent a timed state space <ref> [4, 30, 35, 36] </ref>. However, even with a region based representation, the memory required to store such a state space explicitly can be prohibitive for large designs. In many domains, implicit methods have been shown to significantly reduce memory usage [9]. <p> In a SC circuit, some of those states may need to be excluded to guarantee hazard-freedom. The correctness constraints discussed here were developed in [3] for speed-independent circuits and extended to timed circuits in <ref> [30] </ref>. 3.3.1 gC cover violations In a gC implementation, the allowed growth regions include the remainder of the excitation space and the entire quiescent space for the corresponding signal transition.
Reference: [31] <author> Nowick, S. M., and Dill, D. L. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 318-321. </pages>
Reference-contexts: One methodology is the use of fundamental mode designs [37], where signals are constrained to change one at a time, and must give the system time to settle before other signals may change. Another possibility is burst-mode circuits <ref> [17, 31, 40] </ref>, where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27].
Reference: [32] <author> Pastor, E., and Cortadella, J. </author> <title> Polynomial algorithms for the synthesis of hazard-free circuits from signal transition graphs. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1993), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 250-254. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [33] <author> Puri, R., and Gu, J. </author> <title> Asynchronous circuit synthesis; persistency and complete state coding constraints in signal transition graphs. </title> <journal> Int. Journal Electronics 75, </journal> <volume> 5 (1993), </volume> <pages> 933-940. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [34] <author> R.I.Bahar, Frohm, E. A., Gaona, C. M., Hachtel, G., Macii, E., Pardo, A., and Somenzi, F. </author> <title> Algebraic decision diagrams and their applications. </title> <booktitle> In International Conference on Computer Design (Nov. 1993), IEEE, </booktitle> <pages> pp. 188-191. </pages>
Reference-contexts: We have adapted the ATACS tool to use implicit methods to improve memory performance. Binary Decision Diagrams (BDDs) [8] are used throughout circuit synthesis. Where appropriate, Multi-terminal Binary Decision Diagrams [16] (MTBDDs, also known as Algebraic Decision Diagrams or ADDs <ref> [34] </ref>) are used to store integer valued data. BDDs are a highly effective way to store and manipulate boolean functions. MTBDDs allow this methodology to be extended to integer valued functions with boolean inputs.
Reference: [35] <author> Rokicki, T. G. </author> <title> Representing and Modeling Circuits. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1993. </year>
Reference-contexts: The geometric region method, where timing information is stored as a constraint matrix representing relationships between signal transition times, has been shown to be an efficient way to represent a timed state space <ref> [4, 30, 35, 36] </ref>. However, even with a region based representation, the memory required to store such a state space explicitly can be prohibitive for large designs. In many domains, implicit methods have been shown to significantly reduce memory usage [9].
Reference: [36] <author> Rokicki, T. G., and Myers, C. J. </author> <title> Automatic verificaton of timed circuits. </title> <booktitle> In International Conference on Computer-Aided Verification (1994), </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 468-480. 53 </pages>
Reference-contexts: A slightly better representation would be to attach a clock to each signal transition that advances only in discrete time steps [10]. This does make the state space finite, but it still explodes <ref> [36] </ref>. A BDD method has been proposed in [6], to improve discrete time memory performance, but it does not address the state explosion problem inherent in discrete time. <p> The geometric region method, where timing information is stored as a constraint matrix representing relationships between signal transition times, has been shown to be an efficient way to represent a timed state space <ref> [4, 30, 35, 36] </ref>. However, even with a region based representation, the memory required to store such a state space explicitly can be prohibitive for large designs. In many domains, implicit methods have been shown to significantly reduce memory usage [9].
Reference: [37] <author> Unger, S. H. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: We have found the (MT)BDD representation to be much smaller than an equivalent explicit representation. 3 1.1 Related work Many systems exist for the synthesis of untimed asynchronous circuits [21]. One methodology is the use of fundamental mode designs <ref> [37] </ref>, where signals are constrained to change one at a time, and must give the system time to settle before other signals may change.
Reference: [38] <author> Vanbekbergen, P., Lin, B., Goossens, G., and de Man, H. </author> <title> A generalized state assignment theory for transformations on signal transition graphs. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 112-117. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [39] <author> Yakovlev, A. V., Petrov, A., and Rosenblum, L. </author> <title> Synthesis of asynchronous control circuits from symbolic signal transition graphs. In Asynchronous Design Methodologies (1993), </title> <editor> S. Furber and M. Edwards, Eds., </editor> <volume> vol. </volume> <booktitle> A-28 of IFIP Transactions, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 71-85. </pages>
Reference-contexts: That's logic." -Lewis Carroll, Through the Looking Glass The synthesis stage starts with a reduced state graph (RSG), as described in the preceding chapter. State graphs are a common intermediate form for most asynchronous CAD tools <ref> [13, 14, 23, 26, 32, 33, 38, 39] </ref>, and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL [41]. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
Reference: [40] <author> Yun, K. Y., Dill, D. L., and Nowick, S. M. </author> <title> Synthesis of 3D asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 346-350. </pages>
Reference-contexts: One methodology is the use of fundamental mode designs [37], where signals are constrained to change one at a time, and must give the system time to settle before other signals may change. Another possibility is burst-mode circuits <ref> [17, 31, 40] </ref>, where this limitation is extended to allow a set (or burst) of inputs to arrive concurrently, followed by a burst of outputs. Delay-insensitive circuits are a third method, with the assumption that the delays of both wires and gates are unbounded [7, 20, 27].
Reference: [41] <author> Zheng, H. </author> <title> Specification and compilation of timed systems. </title> <type> Master's thesis, </type> <institution> University of Utah, </institution> <year> 1998. </year>
Reference-contexts: State graphs are a common intermediate form for most asynchronous CAD tools [13, 14, 23, 26, 32, 33, 38, 39], and can be derived from many higher-level languages such as CHP and STGs [29], as well as more recently VHDL <ref> [41] </ref>. Because of this commonality, support has been included in the tool to import SGs derived from other CAD tools.
References-found: 41

