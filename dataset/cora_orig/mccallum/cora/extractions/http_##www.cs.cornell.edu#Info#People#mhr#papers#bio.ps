URL: http://www.cs.cornell.edu/Info/People/mhr/papers/bio.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/mhr/project.html
Root-URL: 
Email: Email: mhr@cs.cornell.edu.  Email: val@csr.uvic.ca.  Email: tandy@central.cis.upenn.edu.  
Title: Constructing a Tree from Homeomorphic Subtrees, with Applications to Computational Evolutionary Biology  
Author: Monika Rauch Henzinger Valerie King and Tandy Warnow 
Keyword: P  
Note: This work was done in part which visiting at the International  This research was supported by the NSF CAREER award CCR-9501712.  This research was supported by an NSERC Grant.  This work was supported in part by a National Young Investigator Award from NSF.  
Address: NY.  Berkeley, CA.  Victoria, Vic-toria, BC.  Philadelphia, PA.  
Affiliation: Department of Computer Science, Cornell University, Ithaca,  Computer Science Institute,  Department of Computer Science, University of  Department of Computer and Information Science, University of Pennsylvania  
Abstract: We are given a set T = fT 1 ; T 2 ; : : :; T k g of rooted binary trees, each T i leaf-labeled by a subset L(T i ) f1; 2; : : :; ng. If T is a tree on f1; 2; : : :; ng, we let T jL denote the subtree of T induced by the nodes of L and all their ancestors. The consensus tree problem asks whether there exists a tree T fl such that for every i, T fl jL(T i ) is homeomorphic to T i . We present algorithms which test if a given set of trees has a consensus tree and if so, construct one. The deterministic algorithm takes time minfO(mn 1=2 ); O(m + n 2 log n)g, where m = and uses linear space. The randomized algorithm takes time O(m log 3 n) and uses linear space. The previous best for this problem was an 1981 O(mn) algorithm by Aho et al. Our faster deterministic algorithm uses a new efficient algorithm for the following interesting dynamic graph problem: Given a graph G with n nodes and m edges and a sequence of b batches of one or more edge deletions, then after each batch, either find a new component that has just been created or determine that there is no such component. For this problem, we have a simple algorithm with running time O(n 2 log n + b 0 minfn 2 ; m log ng), where b 0 is the number of batches which do not result in a new component. For our particular application, b 0 1. If all edges are deleted, then the best previously known deterministic algorithm requires time O(m p We will also present two applications of these con sensus tree algorithms which solve other problems in computational evolutionary biology. The first application is in the problem of inferring consensus of trees when there can be disagreement[16]. There have been several models suggested for this problem[2, 3, 4, 8, 11, 17, 18], of which one is called the Local Consensus Tree[15]. The local consensus tree model presumes that the user provides a local consensus rule which determines the form of the output tree on (perhaps) each triple of leaves, and the objective is to determine whether a tree exists which is consistent with each of the constraints. We will show that we can construct the local consensus tree of k trees on n species in O(kn 3 ) time, improving on the O(kn 3 + n 4 ) running time if we use the Aho et al algorithm. The second application is a heuristic for constructing the maximum likelihood tree based upon combining solutions to small subproblems. This is a simple and yet potentially significantly interesting approach to the evolutionary tree construction problem. Key words: Algorithms, Data Structures, Evolutionary Biology, and Theory of Databases. n) to solve this problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, Y. Sagiv, T.G. Szymanski, and J.D. Ull-man. </author> <title> Inferring a tree from lowest common ancestors with an application to the optimization of relational expressions, </title> <journal> SIAM J. of Computing, </journal> <volume> Vol 10, No. 3, </volume> <year> 1981, </year> <pages> pp. 405-421. </pages>
Reference-contexts: By contrast, the best previous algorithm for this problem was given in the 1981 paper by Aho et al <ref> [1] </ref>, and had running time O (mn). <p> Output: Tree T consistent with the rooted triples if such a tree exists. 4.1 Previous results.In 1981, Aho, Sagiv, Szyman-ski, and Ullman <ref> [1] </ref> addressed the problem of consistency of homeomorphic subtrees in a paper motivated by an application to relational databases. <p> They presented an O (mn) algorithm to solve the case where each subtree is a rooted resolved tree on three leaves, where m is the number of rooted subtrees and n is the number of leaves. Given the set of subtrees, T , the algorithm in <ref> [1] </ref> constructs a graph U = (V; E) as follows. Let V = f1; 2; : : :; ng, and E = f (p; q) : 9 ((p; q); r) 2 T g. The connected components of U are computed using any linear time algorithm. <p> Then the consensus tree for the input is given by adding edges from the roots of the T 0 i to a new parent node. The proof of correctness of the Aho et al. paper may be found in their paper <ref> [1] </ref>. Note that, as stated, the algorithm may require fi (nm) time since it repeatedly computes connectivity on a graph of up to m edges. <p> Proof. It is clear that the tree constructed by Algorithm A' is identical to the tree constructed by the algorithm in <ref> [1] </ref>, and hence it is minimal. For the same reason, Algorithm A' determines correctly whether the set of triples is consistent. Thus, it remains only for us to show that the running time is as stated.
Reference: [2] <author> A. Amir and D. Keselman, </author> <title> Maximum agreement sub-tree in a set of evolutionary trees - metrics and efficient algorithms, </title> <type> FOCS '94. </type>
Reference: [3] <author> J.P. Barthelemy, and F.R. McMorris, </author> <title> The median procedure for n-trees, </title> <journal> Journal of Classification 3, </journal> <pages> pp. 329-334, </pages> <year> 1986. </year>
Reference: [4] <author> W.H.E. Day, </author> <title> Optimal algorithms for comparing trees with labelled leaves, </title> <journal> Journal of Classification 2, </journal> <pages> pp. 7-28, </pages> <year> 1985. </year>
Reference: [5] <author> D. Eppstein, Z. Galil, and G. F. </author> <title> Italiano. Improved Sparsification, </title> <type> Tech. Report 93-20, </type> <institution> Department of Information and Computer Science, University of Cali-fornia, </institution> <address> Irvine, CA 92717. </address>
Reference-contexts: Adjustments to the data structure following each deletion can be done O ( p n) time per edge deterministically <ref> [5] </ref>, [10] or in O (log 3 n) expected time per edge, using the randomized algorithm of [12]. Theorem 3.1.
Reference: [6] <author> S. Even and Y. Shiloach, </author> <title> An on-line edge deletion problem, </title> <journal> J. ACM, </journal> <volume> Vol. 28, No. 1 (1981), </volume> <pages> pp. 1-4. </pages>
Reference-contexts: The batch deletion problem can be solved by computing connectivity from scratch after each batch. If there were b batches of deletions, this would result in bm running time, regardless of the value of b 0 . A 1981 algorithm by Even and Shiloach <ref> [6] </ref> considered the dynamic graph problem for individual deletions only. Over the course of deleting every edge from a graph, their algorithm spends O (m log n) time processing individual deletions each of which results in a new component and O (mn) time processing the remaining deletions. <p> After each edge is deleted, we query the edge. If its endpoints are no longer connected, we search from each endpoint, alternating between the two searches, until one component is completely visited (this technique derives from <ref> [6] </ref>). We relabel its nodes. The length of the search is thus proportional to the number of edges incident to the component with the fewer number of edges.
Reference: [7] <author> M. Farach, S. Kannan and T. Warnow, </author> <title> A Robust Model for Finding Optimal Evolutionary Trees, </title> <journal> Algorithmica, special issue on Computational Biology, </journal> <volume> Vol. 13, No. 1, </volume> <year> 1995, </year> <pages> pp. 155-179. </pages>
Reference-contexts: In this section we will present two uses of tree consistency algorithms which can be used to solve these two problems. For general information of evolutionary tree construction problems and methods, see <ref> [9, 7, 14] </ref>. 2.1 Terminology.When the form of a tree on a triple a; b; c is not binary, but rather has all three leaves being children of the root, then the tree is said to be unresolved on a; b; c.
Reference: [8] <author> M. Farach, T. Przytycka, and M. </author> <title> Thorup, On the agreement of many trees, </title> <journal> Information Processing Letters, </journal> <note> to appear. </note>
Reference: [9] <author> J. Felsenstein, </author> <title> Numerical methods for inferring evolutionary trees, </title> <journal> The Quarterly Review of Biology, </journal> <volume> Vol. 57, No. 4, </volume> <year> (1982), </year> <pages> pp. 379-404. </pages>
Reference-contexts: In this section we will present two uses of tree consistency algorithms which can be used to solve these two problems. For general information of evolutionary tree construction problems and methods, see <ref> [9, 7, 14] </ref>. 2.1 Terminology.When the form of a tree on a triple a; b; c is not binary, but rather has all three leaves being children of the root, then the tree is said to be unresolved on a; b; c. <p> It is this case which is applicable to the problem we address here. We direct the interested reader to <ref> [9] </ref> for a review article in the problem of inferring evolutionary trees under a number of different methods.
Reference: [10] <author> G. N. Frederickson, </author> <title> Data Structures for On-line Updating of Minimum Spanning Trees SIAM J. </title> <journal> Comput. </journal> <volume> 14:781 - 798, </volume> <year> 1985. </year>
Reference-contexts: Adjustments to the data structure following each deletion can be done O ( p n) time per edge deterministically [5], <ref> [10] </ref> or in O (log 3 n) expected time per edge, using the randomized algorithm of [12]. Theorem 3.1.
Reference: [11] <author> D. Gusfield, </author> <title> Efficient algorithms for inferring evolutionary trees, </title> <booktitle> Networks 21, </booktitle> <pages> pp. 19-28, </pages> <year> 1991. </year>
Reference: [12] <author> M. Henzinger and V. King, </author> <title> Randomized Dynamic Algorithms with Polylogarithmic Time per Operation, </title> <booktitle> Proceedings, STOC '95. </booktitle>
Reference-contexts: Our deterministic algorithm runs in time minfO (mn 1=2 ); O (m + n 2 log n)g, where m = P the randomized fully dynamic connectivity data struc 1 ture of <ref> [12] </ref> is used, the resulting algorithm takes time O (m log 3 n). By contrast, the best previous algorithm for this problem was given in the 1981 paper by Aho et al [1], and had running time O (mn). <p> Adjustments to the data structure following each deletion can be done O ( p n) time per edge deterministically [5], [10] or in O (log 3 n) expected time per edge, using the randomized algorithm of <ref> [12] </ref>. Theorem 3.1. <p> If we use the best deterministic deletions-only dynamic algorithm for connectivity, then the m queries and O (m) updates cost O (m p n) time; while if we use the randomized fully dynamic algorithm of <ref> [12] </ref>, we can perform all the queries and updates in O (m log 3 n) time. 3.2 Algorithm B: A faster batch deletion algorithm.In this section we will describe an algorithm which uses O (n 2 log n+b 0 minfn 2 ; m log ng) time for the batch deletion problem
Reference: [13] <author> S. Kannan, E. Lawler, and T. Warnow, </author> <title> Determining the Evolutionary Tree, </title> <note> to appear, Journal of Algorithms. </note>
Reference-contexts: be answered correctly (i.e. consistently with the true evolutionary tree T ), it is possible to construct T in only O (n 2 ) time (if the rooted subtrees are not restricted to be binary), and O (n log n) time if the rooted subtrees are restricted to be binary <ref> [13] </ref>. When perhaps not all triples are able to be resolved with complete confidence, the biologist will need methods for reconstructing the evolutionary tree which consider only those triples for which we have complete (or high enough) confidence. <p> When the local consensus rule is entire, so that the form on each triple is specified, it is possible to construct the local consensus tree by using the algorithms of <ref> [13] </ref>. In the case where the local consensus rule is not entire (i.e. most of the time), we can instead use a tree consistency algorithm. As a result, a biologically relevant local consensus rule will not, in general, require that the output tree be unresolved on a triple.
Reference: [14] <author> S. Kannan and T. Warnow, </author> <title> A fast algorithm to find and enumerate perfect phylogenies, </title> <booktitle> Proceedings, SODA '95. </booktitle>
Reference-contexts: In this section we will present two uses of tree consistency algorithms which can be used to solve these two problems. For general information of evolutionary tree construction problems and methods, see <ref> [9, 7, 14] </ref>. 2.1 Terminology.When the form of a tree on a triple a; b; c is not binary, but rather has all three leaves being children of the root, then the tree is said to be unresolved on a; b; c.
Reference: [15] <author> S. Kannan, T. Warnow, and S. Yooseph, </author> <title> Computing the local consensus of trees, </title> <booktitle> Proceedings, SODA '95. </booktitle>
Reference-contexts: Resolving the disagreements between the trees is therefore an important problem. In <ref> [15] </ref>, a model for problem of computing consensus trees was presented, based upon the concept of a local consensus rule.
Reference: [16] <author> R.D.M. </author> <title> Page, Genes, Organisms and Areas: The problem of multiple lineages, </title> <booktitle> Systematic Biology 42(1), </booktitle> <pages> pp. 77-84, </pages> <year> 1993. </year>
Reference: [17] <author> M. Steel and T. Warnow, </author> <title> Kaikoura Tree Theorems: Computing the maximum agreement subtree, </title> <journal> Information Processing Letters 48, </journal> <pages> pp. 72-82, </pages> <year> 1993. </year>
Reference: [18] <author> T. Warnow, </author> <title> Tree Compatibility and Inferring Evolutionary History, </title> <journal> Journal of Algorithms, </journal> <volume> 16, </volume> <pages> pp. 388-407, </pages> <year> 1994. </year>
References-found: 18

