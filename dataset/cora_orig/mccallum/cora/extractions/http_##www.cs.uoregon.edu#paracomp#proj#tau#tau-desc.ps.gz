URL: http://www.cs.uoregon.edu/paracomp/proj/tau/tau-desc.ps.gz
Refering-URL: http://www.cs.uoregon.edu/paracomp/proj/tau/papers.html
Root-URL: http://www.cs.uoregon.edu
Title: A Brief Technical Overview of the TAU Tools  
Author: Kurt Windisch, Bernd Mohr, Al Malony 
Address: OR 97403-1202  
Affiliation: Dept. of Computer Science University of Oregon, Eugene,  
Abstract-found: 0
Intro-found: 1
Reference: [BB95] <editor> H. Beilner and F. Bause, editors. Speedy: </editor> <title> An Integrated Performance Extrapolation Tool for pC++ Programs, </title> <booktitle> number 977 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference: [BBG + 93] <author> F. Bodin, P. Beckman, D. Gannon, S. Yang, K. Shanmugam, A. Malony, and B. Mohr. </author> <title> Implementing a Parallel C++ Runtime System for Scalable Parallel Systems. </title> <booktitle> In Proceedings of Supercomputing 1993, </booktitle> <pages> pages 588-597, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: TAU is also integrated with the runtime system for profiling and tracing support. The pC++ implementation of TAU uses the Sage++ [BBG + 94] parser toolkit and the Tulip runtime system <ref> [BBG + 93] </ref>. 2 Design Overview * The TAU Daemon: Serves as a central coordinator and repository for global information for all the individual TAU tools.
Reference: [BBG + 94] <author> F. Bodin, P. Beckman, D. Gannon, J. Gotwals, S. Narayana, S. Srinivas, and B. Winnicka. Sage++: </author> <title> An Object Oriented Toolkit and Class Library for Building Fortran and C++ Restructuring Tools. </title> <editor> In M. Chapman and A. Vermeulen, editors, </editor> <booktitle> Proceedings of the Second Annual Object-Oriented Numerics Conference, </booktitle> <address> Corvallis, OR, </address> <year> 1994. </year> <title> Rogue Wave Software. </title>
Reference-contexts: To interface with the compiler, TAU relies on language-dependent parser/unparser toolkits for instrumenting and accessing properties of program objects. TAU is also integrated with the runtime system for profiling and tracing support. The pC++ implementation of TAU uses the Sage++ <ref> [BBG + 94] </ref> parser toolkit and the Tulip runtime system [BBG + 93]. 2 Design Overview * The TAU Daemon: Serves as a central coordinator and repository for global information for all the individual TAU tools.
Reference: [BHMM94] <author> D. Brown, S. Hackstadt, A. Malony, and B. Mohr. </author> <title> Program Analysis Environments for Parallel Language Systems: The TAU Environment. </title> <editor> In J.J. Dongarra and B. Tourancheau, editors, </editor> <booktitle> Proceedings of the 2nd Workshop on Environments and Tools for Parallel Scientific Computing, </booktitle> <pages> pages 162-171. </pages> <publisher> SIAM, </publisher> <month> May </month> <year> 1994. </year>
Reference: [BMM95] <author> D. Brown, A. Malony, and B. Mohr. </author> <title> Language-based Parallel Program Interaction: the Breezy Approach. </title> <booktitle> In Proceedings of the International Conference on High Performance Computing (HiPC'95), </booktitle> <address> New Delhi, India, </address> <month> December </month> <year> 1995. </year> <booktitle> IEEE Computer Society, </booktitle> <publisher> Tata McGraw-Hill. </publisher>
Reference-contexts: The modular design of BREEZY allows for the sockets to be replaced by other communication protocols such as CORBA or IDL. The BREEZY infrastruction is discussed at length in <ref> [BMM95] </ref>. Furthermore, we have developed SNEEZY, a new infrastructure for dynamic runtime interaction, which will be the basis for future dynamic tools, such as the SNEAKY debugger [Han96]. 5 Further Information Refer to [MMC96] for a much more detailed look at the TAU environment.
Reference: [Han96] <author> Lars Hansen. </author> <note> The sneezy manifesto. http://www.cs.uoregon.edu/research/paracomp/proj/tau/sneezy/, 1996. </note>
Reference-contexts: The BREEZY infrastruction is discussed at length in [BMM95]. Furthermore, we have developed SNEEZY, a new infrastructure for dynamic runtime interaction, which will be the basis for future dynamic tools, such as the SNEAKY debugger <ref> [Han96] </ref>. 5 Further Information Refer to [MMC96] for a much more detailed look at the TAU environment. Most of the technical papers listed below are available from the TAU pages on the World Wide Web (WWW): http://www.cs.uoregon.edu/research/paracomp/proj/tau/papers.html
Reference: [MBM94] <author> B. Mohr, D. Brown, and A. Malony. </author> <title> TAU: A Portable Parallel Program Analysis Environment for pC++. </title> <editor> In B. Buchberger and J. Volkert, editors, </editor> <booktitle> Proceedings of CONPAR 94-VAPP VI, volume 854 of Lecture Notes in Computer Science, </booktitle> <pages> pages 29-40. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1994. </year>
Reference: [MMB + 94] <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, and F. Bodin. </author> <title> Performance Analysis of pC++: A Portable Data-Parallel Programming System for Scalable Parallel Computers. </title> <editor> In H.J. Siegel, editor, </editor> <booktitle> Proc. Eighth International Parallel Processing Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994. </year>
Reference: [MMBG94] <author> A. Malony, B. Mohr, P. Beckman, and D. Gannon. </author> <title> Program Analysis and Tuning Tools for a Parallel Object Oriented Language: An Experiment with the TAU System. </title> <booktitle> In Proceedings of the Workshop on Parallel Scientific Computing, </booktitle> <month> October </month> <year> 1994. </year>
Reference: [MMC96] <author> Bernd Mohr, Allen D. Malony, and Janice E. Cuny. </author> <title> Tau. In G Wilson, editor, Parallel Programming using C++. </title> <publisher> M.I.T. Press, </publisher> <year> 1996. </year> <note> http://www.cs.uoregon.edu/research/paracomp/proj/tau/papers.html. </note>
Reference-contexts: The BREEZY infrastruction is discussed at length in [BMM95]. Furthermore, we have developed SNEEZY, a new infrastructure for dynamic runtime interaction, which will be the basis for future dynamic tools, such as the SNEAKY debugger [Han96]. 5 Further Information Refer to <ref> [MMC96] </ref> for a much more detailed look at the TAU environment. Most of the technical papers listed below are available from the TAU pages on the World Wide Web (WWW): http://www.cs.uoregon.edu/research/paracomp/proj/tau/papers.html
Reference: [Moh92] <author> B. Mohr. </author> <title> Standardization of Event Traces Considered Harmful or Is an Implementation of Object-Independent Event Trace Monitoring and Analysis Systems Possible? In J.J. </title> <editor> Dongarra and B. Tourancheau, editors, </editor> <booktitle> Proceedings of the CNRS-NSF Workshop on Environments and Tools For Parallel Scientific Computing, volume 6 of Advances in Parallel Computing, </booktitle> <pages> pages 103-124. </pages> <publisher> Elsevier, </publisher> <month> September </month> <year> 1992. </year>
Reference: [SM95] <author> K. Shanmugam and A. Malony. </author> <title> Performance Extrapolation of Parallel Programs. </title> <editor> In C. Polychronopoulos, editor, </editor> <booktitle> Proceedings of the 1995 International Conference on Parallel Processing (ICPP), volume II Software, </booktitle> <pages> pages 117-120. </pages> <publisher> CRC Press, </publisher> <month> August </month> <year> 1995. </year>
Reference: [SMM95] <author> K. Shanmugam, A. Malony, and B. Mohr. </author> <title> Performance Extrapolation of Parallel Programs. </title> <type> Technical Report CIS-TR-95-14, </type> <institution> University of Oregon, Department of Computer and Information Science, </institution> <month> May </month> <year> 1995. </year>
References-found: 13

