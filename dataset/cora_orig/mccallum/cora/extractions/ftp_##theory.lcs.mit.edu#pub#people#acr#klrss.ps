URL: ftp://theory.lcs.mit.edu/pub/people/acr/klrss.ps
Refering-URL: http://theory.lcs.mit.edu:80/~acr/
Root-URL: 
Title: Alternation in Interaction  recognize languages in NEXPTIME, and, with restrictions on communica  
Author: M. Kiwi C. Lund A. Russell D. Spielman R. Sundaram 
Keyword: k1 Alternating oracle proof systems  
Note: to make the verifier reject  are also examined.  Partially supported by an NSF Graduate Fellowship and NSF 92-12184, AFOSR F49620-92-J-0125, and DARPA N0014-92-J-1799  Research supported by DARPA contract N0014-92-J-1799 and NSF 92-12184 CCR.  
Address: Chile  Room 2C324, 600 Mountain Avenue, P. O. Box 636, Murray Hill, NJ 07974-0636 USA,  Cambridge, MA 02139.  Cambridge, MA 02139.  
Affiliation: MIT U.  AT&T  MIT  MIT  AT&T Bell Laboratories,  Dept. of Applied Mathematics, Massachusetts Institute of Technology,  Laboratory for Computer Science, Massachusetts Institute of Technology,  
Pubnum: MIT  
Email: lund@research.att.com.  acr@theory.lcs.mit.edu.  koods@theory.lcs.mit.edu.  
Date: November 27, 1995  
Abstract: We study competing-prover one-round interactive proof systems. We show that one-round proof sys tion and randomness, languages in NP. We extended the restricted model to an alternating sequence of k competing provers, which we show characterizes P fl Dept. of Applied Mathematics, Massachusetts Institute of Technology, Cambridge, MA 02139. mkiwi@math.mit.edu. On leave of absence from Dept. de Ingeniera Matematica, U. de Chile. Supported by an AT&T Bell Laboratories PhD Scholarship. Part of this work was done while the author was at Bell Laboratories. x Dept. of Applied Mathematics, Massachusetts Institute of Technology, Cambridge, MA 02139. spielman@math.mit.edu. Partially supported by the Fannie and John Hertz Foundation, Air Force Contract F49620-92-J-0125 and NSF grant 9212184CCR. Part of this work was done while the author was at Bell Laboratories. tems in which the first prover is trying to convince a verifier to accept and the second prover is trying
Abstract-found: 1
Intro-found: 1
Reference: [ALMSS92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> "Proof verification and intractability of approximation problems". </title> <booktitle> Proc. of the 33rd IEEE FOCS, </booktitle> <pages> pages 14-23, </pages> <year> 1992. </year>
Reference-contexts: AOP Systems for P Feige and Kilian's proof of Theorem 5 uses an amplification of the main result of <ref> [AS92, ALMSS92] </ref>, which states that NP = PCP (log n; 1). In our terminology, this says that NP languages have 1-AOP proof systems. In order to extend our results beyond NP, we will need analogous tools that we can apply to languages in P k . <p> If each player actually wrote down codewords, then, using the techniques from <ref> [ALMSS92] </ref>, the verifier would read a constant number of random bits from each oracle and a constant number of bits to check the P CP (log n; 1) proof and accept if V (!; X 1 ; : : : ; X k ) would have accepted, or reject with high
Reference: [AS92] <author> S. Arora, and S. Safra. </author> <title> "Probabilistic checking of proofs". </title> <booktitle> In Proc. of the 33rd IEEE FOCS, </booktitle> <pages> pages 2-13, </pages> <year> 1992. </year>
Reference-contexts: AOP Systems for P Feige and Kilian's proof of Theorem 5 uses an amplification of the main result of <ref> [AS92, ALMSS92] </ref>, which states that NP = PCP (log n; 1). In our terminology, this says that NP languages have 1-AOP proof systems. In order to extend our results beyond NP, we will need analogous tools that we can apply to languages in P k .
Reference: [BFL91] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> "Nondeterministic exponential time has two-prover interactive protocols". </title> <journal> Computational Complexity, </journal> <volume> 1 </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: The framework of cooperating provers has received much attention. Babai, Fortnow and Lund <ref> [BFL91] </ref> showed that NEXPTIME is the set of languages that have two-cooperating-prover multi-round proof systems. This characterization was strengthened when [LS91, FL92] showed that NEXPTIME languages have two-cooperating-prover one-round proof systems.
Reference: [CFLS93a] <author> A. Condon, J. Feigenbaum, C. Lund, and P. Shor. </author> <title> "Probabilistically checkable debate systems and approximation algorithms for PSPACE-hard functions". </title> <booktitle> In Proc. of the 25th ACM STOC, </booktitle> <pages> pages 305-314, </pages> <year> 1993. </year>
Reference-contexts: Other uses of competing players to study complexity classes include [Reif84, PR79]. Feige, Shamir and Tennenholtz [FST88] proposed an interactive proof system in which the notion of competition is present. Recently, Condon, Feigenbaum, Lund and Shor <ref> [CFLS93a, CFLS93b] </ref> characterized PSPACE by systems in which a verifier with O (log n) random bits can read only a constant number of bits of a polynomial-round debate between two players. <p> We will begin by showing that languages in P k have k-AOP proof systems. We consider from now on only the case in which k is odd. Our results have analogous statements for even k. The next theorem is implicit in <ref> [CFLS93a] </ref>. Theorem 10 (k odd). For any constant * &gt; 0. Every language L in P k has a k-AOP system with error (0; *). In the proof of this theorem, we will make use of some facts about Justesen codes. <p> That is, there exists a polynomial-time Turing machine V such that ! 2 L if and only if 9X 1 ; 8X 2 ; : : : ; 9X k V (!; X 1 ; : : : ; X k ) accepts [CKS81]. As in <ref> [CFLS93a] </ref>, we will view the acceptance condition as a game between an 9 player and a 8 player who take turns writing down polynomial-length strings X i , with the 9 player writing on the odd rounds.
Reference: [CFLS93b] <author> A. Condon, J. Feigenbaum, C. Lund, and P. Shor. </author> <title> "Random debaters and the hardness of approximating stochastic functions". </title> <type> DIMACS TR 93-79, </type> <institution> Rutgers University, </institution> <address> Piscataway NJ, </address> <year> 1993. </year>
Reference-contexts: Other uses of competing players to study complexity classes include [Reif84, PR79]. Feige, Shamir and Tennenholtz [FST88] proposed an interactive proof system in which the notion of competition is present. Recently, Condon, Feigenbaum, Lund and Shor <ref> [CFLS93a, CFLS93b] </ref> characterized PSPACE by systems in which a verifier with O (log n) random bits can read only a constant number of bits of a polynomial-round debate between two players.
Reference: [CKS81] <author> A. K. Chandra, D. C. Kozen, and L. J. Stockmeyer. </author> <title> "Alternation". </title> <journal> Journal of the ACM, </journal> <volume> 28 </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: That is, there exists a polynomial-time Turing machine V such that ! 2 L if and only if 9X 1 ; 8X 2 ; : : : ; 9X k V (!; X 1 ; : : : ; X k ) accepts <ref> [CKS81] </ref>. As in [CFLS93a], we will view the acceptance condition as a game between an 9 player and a 8 player who take turns writing down polynomial-length strings X i , with the 9 player writing on the odd rounds.
Reference: [FST88] <author> U. Feige, A. Shamir, and M. Tennenholtz. </author> <title> "The Noisy Oracle Problem". </title> <booktitle> Proc. Crypto 88, </booktitle> <pages> pages 284-296, </pages> <year> 1988". </year>
Reference-contexts: We show that two-competing-prover proof systems have similar power. Stockmeyer [St77] used games between competing players to characterize languages in the polynomial-time hierarchy. Other uses of competing players to study complexity classes include [Reif84, PR79]. Feige, Shamir and Tennenholtz <ref> [FST88] </ref> proposed an interactive proof system in which the notion of competition is present. <p> We define the class k-APP to be the set of languages that have a k-APP system with error 1/3. Proof systems related to the one given in Definition 1, but where the provers do not have access to each others' strategies, have been studied in <ref> [FST88, FKS93] </ref>. We define k-alternating-oracle proof systems analogously: Definition 2.
Reference: [FK94] <author> U. Feige and J. Kilian, </author> <title> "Two prover protocols Low error at affordable rates". </title> <booktitle> Proc. of the 26th ACM STOC, </booktitle> <pages> pages 284-296, </pages> <year> 1988". </year>
Reference-contexts: The framework of cooperating provers has received much attention. Babai, Fortnow and Lund [BFL91] showed that NEXPTIME is the set of languages that have two-cooperating-prover multi-round proof systems. This characterization was strengthened when [LS91, FL92] showed that NEXPTIME languages have two-cooperating-prover one-round proof systems. Recently, Feige and Kilian <ref> [FK94] </ref> have proved that NP is characterized by two-cooperating-prover one-round proof systems in which the verifier has access to only O (log n) random bits and the provers' responses are constant size. We show that two-competing-prover proof systems have similar power. <p> This requirement was labeled in [FRS88] as the oracle requirement. It follows that a k-AOP system can be viewed as a k-APP system in which we have imposed the oracle requirement on the provers, and are allowed to ask many questions of each. The results of <ref> [LS91, FL92, FK94] </ref> show that, in many different scenarios, two-cooperating-prover one-round proof systems are equivalent in power to oracle proof systems. In this work we establish conditions under which alternating-prover proof systems are equivalent in power to alternating-oracle proof systems. <p> In Section 3, we show that k-alternating oracle systems characterize P k . We use Section 4 to summarize work of Feige and Kilian <ref> [FK94] </ref> that we will need to prove our main theorem. In Section 5 we show that the class of languages that have a k-alternating-prover proof systems does not depend on the error parameter *, and conclude that Theorem 3. P k1 = k-APP. 2. <p> If ! 62 L, then the probability that V accepts is at most * for each k, and ~- such that (~-) k 6= (~|) k , for a total error of m2 m1 *. 2 We will combine this Lemma with a Theorem of Feige and Kilian <ref> [FK94] </ref> which proves a weak version of the parallel repetition conjecture [FL92]. (For a formal statement of the parallel repetition conjecture see [FL92]). Theorem 5 ([FK94]). For any constant * &gt; 0. <p> In the next two sections we present some of the necessary ideas that we need to achieve these goals. 4. Previous Work In Section 5, we will prove an analogue of the theorem of Feige and Kilian <ref> [FK94] </ref> which applies to k competing provers. The techniques used in [FK94] provide a deep insight into how a few random variables influence the value of a multi-variate function. <p> In the next two sections we present some of the necessary ideas that we need to achieve these goals. 4. Previous Work In Section 5, we will prove an analogue of the theorem of Feige and Kilian <ref> [FK94] </ref> which applies to k competing provers. The techniques used in [FK94] provide a deep insight into how a few random variables influence the value of a multi-variate function. In order to prove our analogue of their theorem, we will need a better understanding of some of their results, which we will summarize in this section. <p> The labels of the edges of T l at level s, s 2 S l , can now be required to be consistent with the labels that P s assigns to the leaves of T s . Combining this modified protocol, the protocol that Feige and Kilian <ref> [FK94] </ref> use in their proof of Theorem 5, and the protocol described in Remark 8, we can prove: Lemma 17. For any constant *, 0 &lt; * &lt; 1=2.
Reference: [FKS93] <author> J. Feigenbaum, D. Koller, and P. Shor. </author> <title> Private communication. </title>
Reference-contexts: We define the class k-APP to be the set of languages that have a k-APP system with error 1/3. Proof systems related to the one given in Definition 1, but where the provers do not have access to each others' strategies, have been studied in <ref> [FST88, FKS93] </ref>. We define k-alternating-oracle proof systems analogously: Definition 2. <p> Since in our case jA 0 j; jA 1 j = O (1), jRj = 2 O (log n) , and linear programming is polynomial-time solvable, the lemma follows. 2 An analogous result for EXPTIME, for the only if part, was independently obtained in <ref> [FKS93] </ref>. 3. AOP Systems for P Feige and Kilian's proof of Theorem 5 uses an amplification of the main result of [AS92, ALMSS92], which states that NP = PCP (log n; 1). In our terminology, this says that NP languages have 1-AOP proof systems.
Reference: [FL92] <author> U. Feige, and L. Lovasz. </author> <title> "Two-provers one-round proof systems: their power and their problems". </title> <booktitle> Proc. of the 24th ACM STOC, </booktitle> <pages> pages 733-744, </pages> <year> 1992. </year>
Reference-contexts: The framework of cooperating provers has received much attention. Babai, Fortnow and Lund [BFL91] showed that NEXPTIME is the set of languages that have two-cooperating-prover multi-round proof systems. This characterization was strengthened when <ref> [LS91, FL92] </ref> showed that NEXPTIME languages have two-cooperating-prover one-round proof systems. Recently, Feige and Kilian [FK94] have proved that NP is characterized by two-cooperating-prover one-round proof systems in which the verifier has access to only O (log n) random bits and the provers' responses are constant size. <p> This requirement was labeled in [FRS88] as the oracle requirement. It follows that a k-AOP system can be viewed as a k-APP system in which we have imposed the oracle requirement on the provers, and are allowed to ask many questions of each. The results of <ref> [LS91, FL92, FK94] </ref> show that, in many different scenarios, two-cooperating-prover one-round proof systems are equivalent in power to oracle proof systems. In this work we establish conditions under which alternating-prover proof systems are equivalent in power to alternating-oracle proof systems. <p> accepts is at most * for each k, and ~- such that (~-) k 6= (~|) k , for a total error of m2 m1 *. 2 We will combine this Lemma with a Theorem of Feige and Kilian [FK94] which proves a weak version of the parallel repetition conjecture <ref> [FL92] </ref>. (For a formal statement of the parallel repetition conjecture see [FL92]). Theorem 5 ([FK94]). For any constant * &gt; 0. A language L is in NP iff L has a 2-APP system with parameters ([9; 9]) and error (0; *). Corollary 6. <p> that (~-) k 6= (~|) k , for a total error of m2 m1 *. 2 We will combine this Lemma with a Theorem of Feige and Kilian [FK94] which proves a weak version of the parallel repetition conjecture <ref> [FL92] </ref>. (For a formal statement of the parallel repetition conjecture see [FL92]). Theorem 5 ([FK94]). For any constant * &gt; 0. A language L is in NP iff L has a 2-APP system with parameters ([9; 9]) and error (0; *). Corollary 6. For any constant *, 0 &lt; * &lt; 1=2. <p> A language L is in NEXPTIME iff L has a 2-APPsystem with parameters (poly (n); poly (n); [9;8]) and error (1=poly (n); 1=exp (n)) 1 . Proof: Again, the reverse implication is trivial. To prove the forward direction, observe that in <ref> [FL92] </ref> it is shown that a language in NEXPTIME has a 2-APP system with parameters (poly (n); poly (n); [9; 9]) and error (0; 1=exp (n)). Hence the corollary follows again from Lemma 4. 2 Remark 8. <p> be equal to 1 if on input !, random string r, and provers' responses a 0 and a 1 the verifier accepts, and 0 otherwise. 1 poly (n) and exp (n) refer to O (n c ) and O respectively, for some positive constant c. 5 Applying the technique of <ref> [FL92] </ref>, it follows that: p ! = max C (~ 0 ); subject to 8q 0 a 0 where, C (~ 0 ) = min X r V r;a 0 ;a 1 0 (q 0 (r); a 0 ) 1 (q 1 (r); a 1 ) subject to 8q 1 a
Reference: [FRS88] <author> L. Fortnow, J. Rompel, and M. Sipser. </author> <title> "On the power of multi-prover interactive protocols". </title> <booktitle> Proc. of the 3rd Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 156-161, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, V uses O (r (n)) coin flips and the provers' responses are of size O (q (n)). As in <ref> [FRS88] </ref>, no prover has access to the communication generated by or directed to any other prover. <p> The fundamental difference between an alternating-prover proof system and an alternating-oracle proof system is that provers are asked only one question, whereas oracles may be asked many questions but their answers may not depend on the order in which those questions are asked. This requirement was labeled in <ref> [FRS88] </ref> as the oracle requirement. It follows that a k-AOP system can be viewed as a k-APP system in which we have imposed the oracle requirement on the provers, and are allowed to ask many questions of each. <p> Using Theorem 10 and the standard technique of <ref> [FRS88] </ref> for simulating an oracle by a pair of provers, we can transform a k-alternating-oracle proof system into a (k + 1)-alternating-prover proof system. Corollary 11 (k odd).
Reference: [LS91] <author> D. Lapidot, and A. Shamir. </author> <title> "Fully parallelized multi prover protocols for NEXP-time". </title> <booktitle> In Proc. of the 32nd IEEE FOCS, </booktitle> <pages> pages 13-18, </pages> <year> 1991. </year>
Reference-contexts: The framework of cooperating provers has received much attention. Babai, Fortnow and Lund [BFL91] showed that NEXPTIME is the set of languages that have two-cooperating-prover multi-round proof systems. This characterization was strengthened when <ref> [LS91, FL92] </ref> showed that NEXPTIME languages have two-cooperating-prover one-round proof systems. Recently, Feige and Kilian [FK94] have proved that NP is characterized by two-cooperating-prover one-round proof systems in which the verifier has access to only O (log n) random bits and the provers' responses are constant size. <p> This requirement was labeled in [FRS88] as the oracle requirement. It follows that a k-AOP system can be viewed as a k-APP system in which we have imposed the oracle requirement on the provers, and are allowed to ask many questions of each. The results of <ref> [LS91, FL92, FK94] </ref> show that, in many different scenarios, two-cooperating-prover one-round proof systems are equivalent in power to oracle proof systems. In this work we establish conditions under which alternating-prover proof systems are equivalent in power to alternating-oracle proof systems.
Reference: [MS77] <author> F. J. MacWilliams, and N. J. A. Sloane. </author> <title> The Theory of Error-Correcting Codes. </title> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: For any constant * &gt; 0. Every language L in P k has a k-AOP system with error (0; *). In the proof of this theorem, we will make use of some facts about Justesen codes. For a string x, let E (x) denote the Justesen encoding of x <ref> [MS77] </ref>.
Reference: [PR79] <author> G. Peterson, and J. Reif. </author> <title> "Multiple-person alternation". </title> <booktitle> In Proc. of the 20th IEEE FOCS, </booktitle> <pages> pages 348-363, </pages> <year> 1979. </year>
Reference-contexts: We show that two-competing-prover proof systems have similar power. Stockmeyer [St77] used games between competing players to characterize languages in the polynomial-time hierarchy. Other uses of competing players to study complexity classes include <ref> [Reif84, PR79] </ref>. Feige, Shamir and Tennenholtz [FST88] proposed an interactive proof system in which the notion of competition is present.
Reference: [Reif84] <author> J. H. Reif. </author> <title> "The complexity of two-player games of incomplete information". </title> <journal> J. Comput. System Science, </journal> <volume> 29, </volume> <pages> pages 274-301, </pages> <year> 1984. </year>
Reference-contexts: We show that two-competing-prover proof systems have similar power. Stockmeyer [St77] used games between competing players to characterize languages in the polynomial-time hierarchy. Other uses of competing players to study complexity classes include <ref> [Reif84, PR79] </ref>. Feige, Shamir and Tennenholtz [FST88] proposed an interactive proof system in which the notion of competition is present.
Reference: [Sc86] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> Wiley, </publisher> <address> Chicester, </address> <year> 1986. </year>
Reference-contexts: By strong duality (see <ref> [Sc86] </ref>), C (~ 0 ) can be expressed as the optimum of a linear program in max form. Thus, to compute p ! it is enough to solve a linear program of poly (n; jA 0 j; jA 1 j; jRj) size.
Reference: [St77] <author> L.J. Stockmeyer. </author> <title> "The polynomial-time hierarchy". </title> <booktitle> In Theoretical Computer Science 3, </booktitle> <pages> pages 1-22, </pages> <year> 1977. </year>
Reference-contexts: Recently, Feige and Kilian [FK94] have proved that NP is characterized by two-cooperating-prover one-round proof systems in which the verifier has access to only O (log n) random bits and the provers' responses are constant size. We show that two-competing-prover proof systems have similar power. Stockmeyer <ref> [St77] </ref> used games between competing players to characterize languages in the polynomial-time hierarchy. Other uses of competing players to study complexity classes include [Reif84, PR79]. Feige, Shamir and Tennenholtz [FST88] proposed an interactive proof system in which the notion of competition is present.
References-found: 17

