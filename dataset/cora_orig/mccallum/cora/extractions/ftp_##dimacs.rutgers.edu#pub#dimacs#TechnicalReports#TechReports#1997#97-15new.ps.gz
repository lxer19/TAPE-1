URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-15new.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Email: freiter,rubing@research.att.com  
Title: Crowds: Anonymity for Web Transactions  
Author: by Michael K. Reiter Aviel D. Rubin 
Note: 2 Permanent Member DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Address: Murray Hill, New Jersey, USA  
Affiliation: AT&T Labs|Research,  
Abstract: DIMACS Technical Report 97-15 April 1997 (Revised August 1997) 
Abstract-found: 1
Intro-found: 1
Reference: [Bri97] <author> S. Brier. </author> <title> How to keep your privacy: Battle lines get clearer. </title> <address> The New York Times, </address> <month> January 13, </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Every man should know that his conversations, his correspondence, and his personal life are private. | Lyndon B. Johnson, president of the United States, 1963-69 The lack of privacy for transactions on the world-wide-web, or the Internet in general, is a well-documented fact <ref> [Bri97, Mil97] </ref>.
Reference: [Cha81] <author> D. Chaum. </author> <title> Untraceable electronic mail, return addresses, and digital pseudonyms. </title> <journal> Communications of the ACM 24(2) </journal> <pages> 84-88, </pages> <month> February </month> <year> 1981. </year>
Reference-contexts: In addition, a proxy is typically a single point of failure; i.e., if the proxy fails, then anonymous browsing cannot continue. In Crowds, no single failure discontinues all ongoing web transactions. A second approach to anonymous web transactions is to use a mix <ref> [Cha81] </ref>. A mix is actually an enhanced proxy that, in addition to hiding the sender from the receiver, also takes measures to provide sender and receiver unlinkability against a global eavesdropper. <p> These techniques make it difficult for an eavesdropper to determine which output messages correspond to which input messages. A natural extension is to interpose a sequence of mixes between the sender and receiver <ref> [Cha81] </ref>. A sequence of mixes can tolerate colluding mixes, as any single correctly-behaving mix server in the sequence prevents an eavesdropper from linking the sender and receiver. <p> As discussed in Section 3, performance is one of the motivating factors behind the design of Crowds and, we believe, a strength of our approach relative to mixes <ref> [Cha81] </ref> (though there are few published performance results for mix implementations to which to compare our results). And, while Crowds performance is already encouraging, it could be improved further by re-implementing it in a compiled language such as C.
Reference: [CB94] <author> W. Cheswick and S. Bellovin. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Crowds offers other informational pages to the user via the browser, similar to Figure 6. In particular, Crowds alerts the user when a join commit occurs. 8.3 Firewalls Firewalls <ref> [CB94] </ref> present a problem for Crowds. Like all network servers, jondos are identified by their IP address and port number. Unfortunately, most corporate firewalls do not allow incoming connections on ports other than a few well-known ones. Thus, firewalls represent a barrier to wide-scale inter-corporation adoption of Crowds.
Reference: [Cri91] <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <booktitle> Distributed Computing 4 </booktitle> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: We discuss mechanisms for maintaining crowd membership in Section 8.1.1, and policies regarding who can join a crowd in Section 8.1.2. 8.1.1 Mechanism There are many schemes that could be adopted to manage membership of the crowd. Existing group membership protocols, tolerant either of benign (e.g., <ref> [Cri91, RB91, MMA91] </ref>) or malicious [Rei96a] faults, can be used for maintaining a consistent view of the membership among all jondos, and the members could use voting to determine whether an authenticated prospective member should be admitted to the crowd.
Reference: [DBF91] <author> Y. Deswarte, L. Blain and J. Fabre. </author> <title> Intrusion tolerance in distributed computing systems. </title> <booktitle> In Proceedings of the 1991 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 110-121, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Techniques exist for distributing trust in such a third party among many "third party replicas", in a way that the corruption of some fraction of the replicas can be tolerated (e.g., <ref> [DBF91, Gon93, Rei96b] </ref>). In its present, non-replicated form, however, the blender is best executed on a secure machine, e.g., with login access available only at the console.
Reference: [DH76] <author> W. Diffie and M. E. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory IT-22(6):644-654, </journal> <month> November </month> <year> 1976. </year>
Reference-contexts: Moreover, the failure of the blender does not interfere with ongoing web transactions (again unlike the Anonymizer). In future versions of Crowds, jondos will establish shared keys using Diffie-Hellman key exchange <ref> [DH76] </ref>, where the blender serves only to distribute the Diffie-Hellman public keys of crowd members. This will eliminate the present reliance on the blender for key generation. 8.1.2 Policy It is important in light of Section 5 that some degree of control over crowd membership be maintained.
Reference: [Gon93] <author> L. Gong. </author> <title> Increasing availability and security of an authentication service. </title> <journal> IEEE Journal on Selected Areas in Communications 11(5) </journal> <pages> 657-662, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Techniques exist for distributing trust in such a third party among many "third party replicas", in a way that the corruption of some fraction of the replicas can be tolerated (e.g., <ref> [DBF91, Gon93, Rei96b] </ref>). In its present, non-replicated form, however, the blender is best executed on a secure machine, e.g., with login access available only at the console.
Reference: [GT96] <author> C. Gulcu and G. Tsudik. </author> <title> Mixing email with Babel. </title> <booktitle> In Proceedings of the 1996 Internet Society Symposium on Network and Distributed System Security, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: A sequence of mixes can tolerate colluding mixes, as any single correctly-behaving mix server in the sequence prevents an eavesdropper from linking the sender and receiver. Mixes have been implemented to support many types of communication, for example electronic mail (e.g., <ref> [GT96] </ref>), ISDN service [PPW91], and general synchronous communication (including web browsing) [SGR97]. The properties offered by Crowds is different from those offered by mixes. As described above, Crowds provide (probable innocence) sender anonymity against collaborating crowd members.
Reference: [HE95] <author> Kipp E. B. Hickman and Taher Elgamal. </author> <title> The SSL Protocol. Internet draft draft-hickman-netscape-ssl-01.txt, </title> <year> 1995. </year>
Reference-contexts: Johnson, president of the United States, 1963-69 The lack of privacy for transactions on the world-wide-web, or the Internet in general, is a well-documented fact [Bri97, Mil97]. While encrypting communication to and from web servers (e.g., using SSL <ref> [HE95] </ref>) can hide the content of the transaction from an eavesdropper (e.g., an Internet service provider, or a local system administrator), the eavesdropper can still learn the IP address of the client and server machines, the length of the data being exchanged, and the time and frequency of exchanges.
Reference: [Mil97] <author> L. Miller. </author> <title> No solitude in cyberspace. </title> <booktitle> USA Today, </booktitle> <month> June 9, </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Every man should know that his conversations, his correspondence, and his personal life are private. | Lyndon B. Johnson, president of the United States, 1963-69 The lack of privacy for transactions on the world-wide-web, or the Internet in general, is a well-documented fact <ref> [Bri97, Mil97] </ref>. <p> Some consequences of such privacy abuses are described in <ref> [Mil97] </ref>. In this paper we introduce a new approach for increasing the privacy of web transactions and a system, called Crowds, that implements it. Our approach is based on the idea of "blending into a crowd", i.e., hiding one's actions within the actions of many others. <p> Which degree of anonymity suffices for a user obviously depends on the user and her circumstances. Probable innocence sender anonymity should prevent many types of attackers from acting on their suspicions - 3 - (therefore avoiding many abuses, e.g., cited in <ref> [Mil97] </ref>) due to the high probability that those suspicions are incorrect. However, if the user wishes to avoid any suspicion whatsoever|including even suspicions not sufficiently certain for the attacker to act upon|then she should insist on beyond suspicion sender anonymity.
Reference: [MMA91] <author> L. E. Moser, P. M. Melliar-Smith and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 480-488, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: We discuss mechanisms for maintaining crowd membership in Section 8.1.1, and policies regarding who can join a crowd in Section 8.1.2. 8.1.1 Mechanism There are many schemes that could be adopted to manage membership of the crowd. Existing group membership protocols, tolerant either of benign (e.g., <ref> [Cri91, RB91, MMA91] </ref>) or malicious [Rei96a] faults, can be used for maintaining a consistent view of the membership among all jondos, and the members could use voting to determine whether an authenticated prospective member should be admitted to the crowd.
Reference: [MR95] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: By Chernoff bounds, the probability that the first collaborator is immediately preceded by the initiator on substantially fewer of these paths is small: the first collaborator is immediately preceded by the path initiator on fewer than (1 ffi) paths with probability only e ffi 2 =2 (see <ref> [MR95, Theorem 4.2] </ref>). Thus, the initiator would be identified with high probability. Again, it is for this reason that a jondo sets up one path for all its users' communications, and this path - 11 - is altered only under two circumstances.
Reference: [PP90] <author> A. Pfitzmann and B. Pfitzmann. </author> <title> How to break the direct RSA-implementation of MIXes. </title> <booktitle> In Advances in Cryptology|EUROCRYPT '89, </booktitle> <pages> pages 373-381, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: However, our intention is for a crowd to span multiple administrative domains, where the existence of a global eavesdropper is unlikely. Another difference is that mixes typically rely on public key encryption, the algebraic properties of which have been exploited to break some implementations <ref> [PP90] </ref>. Crowds' unique properties admit very efficient implementations that typically outperform mixes.
Reference: [PPW91] <author> A. Pfitzmann, B. Pfitzmann, and M. Waidner. ISDN-Mixes: </author> <title> Untraceable communication with very small bandwidth overhead. </title> <booktitle> In GI/ITG Conference: Communication in Distributed Systems, </booktitle> <pages> pages 451-463, </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: A sequence of mixes can tolerate colluding mixes, as any single correctly-behaving mix server in the sequence prevents an eavesdropper from linking the sender and receiver. Mixes have been implemented to support many types of communication, for example electronic mail (e.g., [GT96]), ISDN service <ref> [PPW91] </ref>, and general synchronous communication (including web browsing) [SGR97]. The properties offered by Crowds is different from those offered by mixes. As described above, Crowds provide (probable innocence) sender anonymity against collaborating crowd members.
Reference: [PW87] <author> A. Pfitzmann and M. Waidner. </author> <title> Networks without user observability. </title> <booktitle> Computers & Security 6(2) </booktitle> <pages> 158-166, </pages> <year> 1987. </year>
Reference-contexts: implementation issues in Section 8, and conclude in Section 9. - 2 - possible innocence probable exposedinnocence beyond suspicion exposed privacy absolute provably the presence of communication, to provably exposed, where the attacker can prove the sender, receiver, or their relationship to others. 2 Goals 2.1 Anonymity As discussed in <ref> [PW87] </ref>, there are three types of anonymous communication properties that can be provided: sender anonymity, receiver anonymity, and unlinkability of sender and receiver. Sender anonymity means that the identity of the party who sent a message is hidden, while its receiver (and the message itself) might not be. <p> A second aspect of anonymous communication is the attackers against which these properties are achieved. The attacker might be an eavesdropper that can observe some or all messages sent and received, collaborations consisting of some senders, receivers, and other parties, or variations of these <ref> [PW87] </ref>. To these two aspects of anonymous communication, we add a third: the degree of anonymity. As shown in this continuum with respect to sender anonymity, but it can naturally be extended to receiver anonymity and unlinkability as well. <p> As described above, Crowds provide (probable innocence) sender anonymity against collaborating crowd members. In contrast, in the closest analog to this attack in the mix model|i.e., a group of collaborating mix servers|mixes do not - 5 - provide sender anonymity but do ensure sender and receiver unlinkability <ref> [PW87] </ref>. Another difference is that mixes provide sender and receiver unlinkability against a global eavesdropper. Crowds does not provide anonymity against global eavesdroppers. However, our intention is for a crowd to span multiple administrative domains, where the existence of a global eavesdropper is unlikely.
Reference: [Rei96a] <author> M. K. Reiter. </author> <title> A secure group membership protocol. </title> <journal> IEEE Transactions on Software Engineering 22(1) </journal> <pages> 31-42, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Existing group membership protocols, tolerant either of benign (e.g., [Cri91, RB91, MMA91]) or malicious <ref> [Rei96a] </ref> faults, can be used for maintaining a consistent view of the membership among all jondos, and the members could use voting to determine whether an authenticated prospective member should be admitted to the crowd. Indeed, a similar approach has been adopted in prior work on secure process groups [RBvR94].
Reference: [Rei96b] <author> M. K. Reiter. </author> <title> Distributing trust with the Rampart toolkit. </title> <journal> Communications of the ACM 39(4) </journal> <pages> 71-74, </pages> <month> April </month> <year> 1996. </year> <month> - 19 </month> - 
Reference-contexts: Techniques exist for distributing trust in such a third party among many "third party replicas", in a way that the corruption of some fraction of the replicas can be tolerated (e.g., <ref> [DBF91, Gon93, Rei96b] </ref>). In its present, non-replicated form, however, the blender is best executed on a secure machine, e.g., with login access available only at the console.
Reference: [RBvR94] <author> M. K. Reiter, K. P. Birman, and R. van Renesse. </author> <title> A security architecture for fault-tolerant systems. </title> <journal> ACM Transactions on Computer Systems 12(4) </journal> <pages> 340-371, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Indeed, a similar approach has been adopted in prior work on secure process groups <ref> [RBvR94] </ref>. While providing robust distributed solutions, these approaches have the disadvantages of incurring significant overhead and of providing semantics that are arguably too strong for the application at hand.
Reference: [RB91] <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-351, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: We discuss mechanisms for maintaining crowd membership in Section 8.1.1, and policies regarding who can join a crowd in Section 8.1.2. 8.1.1 Mechanism There are many schemes that could be adopted to manage membership of the crowd. Existing group membership protocols, tolerant either of benign (e.g., <ref> [Cri91, RB91, MMA91] </ref>) or malicious [Rei96a] faults, can be used for maintaining a consistent view of the membership among all jondos, and the members could use voting to determine whether an authenticated prospective member should be admitted to the crowd.
Reference: [SGR97] <author> P. F. Syverson, D. M. Goldschlag, and M. G. Reed. </author> <title> Anonymous connections and onion routing. </title> <booktitle> In Proceedings of the 1997 IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Mixes have been implemented to support many types of communication, for example electronic mail (e.g., [GT96]), ISDN service [PPW91], and general synchronous communication (including web browsing) <ref> [SGR97] </ref>. The properties offered by Crowds is different from those offered by mixes. As described above, Crowds provide (probable innocence) sender anonymity against collaborating crowd members.
Reference: [SS83] <author> R. D. Schlichting and F. B. Schneider. </author> <title> Fail-stop processors: An approach to designing fault-tolerant computing systems. </title> <journal> ACM Transactions on Computer Systems 3(1) </journal> <pages> 222-238, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: First, a path is altered when failures are detected in the path. More specifically, paths are only rerouted when the failure of a jondo is unmistakenly detected, i.e., when the jondo executes a fail-stop failure <ref> [SS83] </ref>. In our present implementation, such failures are detected by the TCP/IP connection to the jondo breaking or being refused; a jondo does not reroute a path based on simply timing out on the subsequent jondo in the path (see line 23 of Figure 3).
References-found: 21

