URL: http://euler.mcs.utulsa.edu/~corcoran/ps/sac93.ps
Refering-URL: http://euler.mcs.utulsa.edu/~corcoran/pubs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: LIBGA: A USER-FRIENDLY WORKBENCH FOR ORDER-BASED GENETIC ALGORITHM RESEARCH  
Author: Arthur L. Corcoran Roger L. Wainwright 
Affiliation: Department of Mathematical and Computer Sciences The University of Tulsa  
Note: Proceedings of the 1993 ACM/SIGAPP Symposium on Applied Computing, ACM Press: New York (1993).  
Abstract: Over the years there has been several packages developed that provide a workbench for genetic algorithm (GA) research. Most of these packages use the generational model inspired by GENESIS. A few have adopted the steady-state model used in Genitor. Unfortunately, they have some deficiencies when working with order-based problems such as packing, routing, and scheduling. This paper describes LibGA, which was developed specifically for order-based problems, but which also works easily with other kinds of problems. It offers an easy to use `user-friendly' interface and allows comparisons to be made between both generational and steady-state genetic algorithms for a particular problem. It includes a variety of genetic operators for reproduction, crossover, and mutation. LibGA makes it easy to use these operators in new ways for particular applications or to develop and include new operators. Finally, it offers the unique new feature of a dynamic generation gap. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. L. Corcoran and R. L. Wainwright. </author> <title> A genetic algorithm for packing in three dimensions. </title> <editor> In H. Berghel, E. Deaton, G. Hedrick, D. Roach, and R. Wainwright, editors, </editor> <booktitle> Proceedings of the 1992 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pages 1021-1030, </pages> <address> New York, 1992. </address> <publisher> ACM Press. </publisher>
Reference-contexts: It has the ability to work with bit, integer and floating point types. It includes an example GA for the traveling salesman problem with order, PMX and edge-based crossover operators. It can also perform subpopulation modeling. Genitor has been used successfully by the authors <ref> [1] </ref> in the past for order-based problems. However, steady-state genetic algorithms can converge prematurely. They require large pool sizes and many trials to ensure the best solution is found. LibGA LibGA was inspired by the authors frustration at the deficiencies of existing GA packages. <p> That is, how the GA is effected by varying the generation gap while the algorithm is running. LibGA Applied The authors are particularly interested in applying genetic algorithms to packing, routing, and scheduling problems <ref> [1] </ref>. These `NP-complete' problems have no known polynomial time solution. It is hoped that genetic algorithms can provide an acceptable approximation for these problems. The following is a description of an example use of LibGA on a two-dimensional packing problem.
Reference: [2] <author> K. A. De Jong and J. Sarma. </author> <title> Generation gaps revisited. </title> <editor> In D. Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2. </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, Cali-fornia, </address> <year> 1993. </year>
Reference-contexts: Clearly, these two cases represent the two extremes of overlap between the generations. Consequently, the authors have included `generation gap' with LibGA. Generation gap is a parameter used in genetic algorithms to specify the amount of overlap desired. In a recent paper, De Jong <ref> [2] </ref> concluded that generation gap has little importance in a genetic algorithm. He further concluded that the choice of selection and replacement strategies have the most profound effect. However, De Jong based his results on tests performed on genetic algorithms without crossover or mutation.
Reference: [3] <author> D. E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization, and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: ACM-SAC '93/2/93/IN, USA ical selection and reproduction. Over the years there has been several genetic algorithm packages developed by researchers. The majority of these use the `generational' model first described by Holland [5] and later made more popularly known by Goldberg <ref> [3] </ref>. The first widely available implementation of a generational GA was in GENESIS [4]. A few GA packages use the newer `steady-state' model first used in Genitor [9]. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [3, 5] </ref> or a `steady-state' [9] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replaces the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. <p> Uniform-random selection simply picks a member of the pool at random, completely ignoring fitness or other factors. Each chromosome in the pool is equally likely to be selected. Roulette selection is the classical selection operator for generational genetic algorithms as described in Gold-berg <ref> [3] </ref>. Each member of the pool is assigned space on a roulette wheel proportional to its fitness. The members with the greatest fitness have the highest probability of selection. This selection technique works only for a genetic algorithm which maximizes its objective function.
Reference: [4] <author> J. J. Grefenstette. </author> <title> GENESIS: A system for using genetic search procedures. </title> <booktitle> In Proceedings of the Conference on Intelligent Systems and Machines, </booktitle> <pages> pages 161-165, </pages> <year> 1984. </year>
Reference-contexts: Over the years there has been several genetic algorithm packages developed by researchers. The majority of these use the `generational' model first described by Holland [5] and later made more popularly known by Goldberg [3]. The first widely available implementation of a generational GA was in GENESIS <ref> [4] </ref>. A few GA packages use the newer `steady-state' model first used in Genitor [9]. The problem with existing GA packages is that they are very difficult to use in one way or another for performing research into order-based problems. These problems include packing, routing, scheduling, and other `NP-complete' problems. <p> There are also several techniques for introducing some random changes to a chromosome (i.e., mutation). Existing GA Packages The first widely available genetic algorithm was GENESIS <ref> [4] </ref>, written by John Grefenstette in 1984. Since that time, a variety of genetic algorithm packages have been developed. Most of these use the generational model. However, a few use the steady-state model introduced with Genitor [9] in 1988. The following is an overview of existing GA packages.
Reference: [5] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The University of Michigan Press, </publisher> <address> Ann Arbor, Michigan, </address> <year> 1975. </year>
Reference-contexts: To copy otherwise, or to republish, requires a fee and/or specific permission. ACM-SAC '93/2/93/IN, USA ical selection and reproduction. Over the years there has been several genetic algorithm packages developed by researchers. The majority of these use the `generational' model first described by Holland <ref> [5] </ref> and later made more popularly known by Goldberg [3]. The first widely available implementation of a generational GA was in GENESIS [4]. A few GA packages use the newer `steady-state' model first used in Genitor [9]. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' <ref> [3, 5] </ref> or a `steady-state' [9] genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replaces the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population.
Reference: [6] <author> N. N. Schraudolph. </author> <title> Genetic algorithm software survey. </title> <note> Available by anonymous ftp from cs.ucsd.edu as /pub/GAucsd/GAsoft.txt, </note> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: Most of these use the generational model. However, a few use the steady-state model introduced with Genitor [9] in 1988. The following is an overview of existing GA packages. For a current list of GA packages, the reader is referred to the GA Software Survey <ref> [6] </ref>. It contains more detailed information concerning what is available and how to obtain GA packages. GAucsd [7] is a GENESIS-based genetic algorithm. It offers several bug fixes and an improved user interface. It can additionally distribute experiments over a network of machines. <p> While GAucsd can encode the integers using grey-code bit strings, it does not ensure that order is preserved. This can produce chromosomes with invalid allele orderings or alleles with meaningless bit patterns. GAucsd uses a variant of roulette for selection, a two-point crossover, and a bit inverting mutation. GENEsYs <ref> [6] </ref> is another notable generational genetic algorithm. It is based on GENESIS and includes selection schemes such as linear ranking, Boltzmann, (mu,lambda)-selection, and general extinctive selection variants. Uniform and n-point crossover as well as discrete and intermediate recombination are included. Mutation can be self-adaptive.
Reference: [7] <author> N. N. Schraudolph and J. J. Grefenstette. </author> <title> A user's guide to GAucsd 1.4. </title> <type> Technical Report CS 92-249, </type> <institution> University of California, </institution> <address> San Diego, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: The following is an overview of existing GA packages. For a current list of GA packages, the reader is referred to the GA Software Survey [6]. It contains more detailed information concerning what is available and how to obtain GA packages. GAucsd <ref> [7] </ref> is a GENESIS-based genetic algorithm. It offers several bug fixes and an improved user interface. It can additionally distribute experiments over a network of machines. Perhaps the most notable feature is Dynamic Parameter Encoding (DPE). DPE is a technique which is used in continuous search spaces.
Reference: [8] <author> T. Starkweather, S. McDaniel, K. Mathias, D. Whit-ley, and C. Whitley. </author> <title> A comparison of genetic sequencing operators. </title> <editor> In R. K. Belew and L. B. Booker, editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 69-76, </pages> <address> San Mateo, California, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This is also known as single point crossover. This does not work for order-based problems since order is not preserved. The other crossover operators will preserve order information. The order1, order2, position, cycle, and PMX operators are described in Starkweather et al. <ref> [8] </ref>. The asexual operator is a simple swap of two randomly selected genes, which also is suitable for order-based problems. Mutation LibGA currently offers the mutation operators: simple-invert, simple-random, and swap. The simple-invert and simple-random operators are used in bit string chromosome representations.
Reference: [9] <author> D. Whitley and J. Kauth. </author> <title> GENITOR: A different genetic algorithm. </title> <booktitle> In Proceedings of the Rocky Mountain Conference on Artificial Intelligence, </booktitle> <pages> pages 118-130, </pages> <address> Denver, Colorado, </address> <year> 1988. </year> <month> 117 </month>
Reference-contexts: The majority of these use the `generational' model first described by Holland [5] and later made more popularly known by Goldberg [3]. The first widely available implementation of a generational GA was in GENESIS [4]. A few GA packages use the newer `steady-state' model first used in Genitor <ref> [9] </ref>. The problem with existing GA packages is that they are very difficult to use in one way or another for performing research into order-based problems. These problems include packing, routing, scheduling, and other `NP-complete' problems. <p> Offspring are generated through a process called crossover, which can be augmented by mutation. The offspring are then placed back in the pool, perhaps replacing other members of the pool. This process can be modeled using either a `generational' [3, 5] or a `steady-state' <ref> [9] </ref> genetic algorithm. The generational GA saves offspring in a temporary location until the end of a generation. At that time the offspring replaces the entire current population. Conversely, the steady-state GA immediately places offspring back into the current population. <p> Existing GA Packages The first widely available genetic algorithm was GENESIS [4], written by John Grefenstette in 1984. Since that time, a variety of genetic algorithm packages have been developed. Most of these use the generational model. However, a few use the steady-state model introduced with Genitor <ref> [9] </ref> in 1988. The following is an overview of existing GA packages. For a current list of GA packages, the reader is referred to the GA Software Survey [6]. It contains more detailed information concerning what is available and how to obtain GA packages.
References-found: 9

