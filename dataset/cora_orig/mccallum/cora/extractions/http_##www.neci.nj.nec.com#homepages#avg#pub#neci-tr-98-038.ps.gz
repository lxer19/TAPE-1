URL: http://www.neci.nj.nec.com/homepages/avg/pub/neci-tr-98-038.ps.gz
Refering-URL: http://www.neci.nj.nec.com/homepages/avg/webpub/node5.html
Root-URL: 
Email: avg@research.nj.nec.com.  oldham@cs.stanford.edu.  ttplotkin@cs.stan-ford.edu.  cliff@cs.dartmouth.edu.  
Title: An Implementation of a Combinatorial Approximation Algorithm for Minimum-Cost Multicommodity Flow  
Author: Andrew V. Goldberg Jeffrey D. Oldham Serge Plotkin Cliff Stein 
Note: Research partially supported by an NSF Graduate Research Fellowship, ARO Grant DAAH04-95-1-0121, and NSF Grants CCR-9304971 and CCR-9307045.  Research supported by Research supported by ARO Grant DAAH04-95-1-0121, NSF Grants CCR-9304971 and CCR-9307045, and a Terman Fellowship.  Research partly supported by NSF Award CCR-9308701 and NSF Career Award CCR-9624828. Some of this work was done while this author was visiting Stanford University.  
Address: Princeton, NJ 08540,  Stanford, CA 94305-9045,  Stanford, CA 94305-9045,  College, Hanover, NH 03755,  
Date: April 1998  
Affiliation: NEC Research Institute, Inc.  NEC Research Institute, Inc.,  Department of Computer Science, Stanford University,  Department of Computer Science, Stanford University,  Department of Computer Science, Dartmouth  
Pubnum: Technical report 98-038  
Abstract: Multicommodity flow problems can be expressed as linear programs, and most theoretical and practical algorithms use linear-programming algorithms specialized for the problems' structures. Combinatorial approximation algorithms in [11, 16, 24] yield flows with costs slightly larger than the minimum cost and use capacities slightly larger than the given capacities. Theoretically, the running times of these algorithms are much less than that of linear-programming-based algorithms. We combine and modify the theoretical ideas in these approximation algorithms to yield a fast, practical implementation solving the minimum-cost multicommodity flow problem. Experimentally, the algorithm solved our problem instances (to 1% accuracy) two to three orders of magnitude faster than the linear-programming package CPLEX [6] and the linear programming based multicommodity flow program PPRN [5]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ilan Adler, Mauricio G. C. Resende, Geraldo Veiga, and Narendra Karmarkar. </author> <title> An implementation of Karmarkar's algorithm for linear programming. </title> <journal> Mathematical Programming A, </journal> <volume> 44(3) </volume> <pages> 297-335, </pages> <year> 1989. </year>
Reference-contexts: Much experimentation helped us select among the different theoretical insights of [16, 22, 23, 24, 26] to achieve good practical performance. We compare our implementation with CPLEX [6] and PPRN [5]. (Several other efficient minimum-cost multicommodity flow implementations, e.g., <ref> [1] </ref>, are proprietary so we were unable to use these programs in our study.) Both are based on the simplex method [7] and both find exact solutions. <p> Even for instances having as few as fifty commodities, MCMCF required less running time. Furthermore, its dependence on the number k of commodities was much smaller. For the left side of Figure4, the arc costs were randomly chosen from the range <ref> [1; 100] </ref>. For these problems, CPLEX's running time is roughly quadratic in k, while MCMCF's is roughly linear. Although for problems with few commodities, CPLEX is somewhat faster, for larger problems MCMCF is faster by an order of magnitude. PPRN is about five times slower than CPLEX for these problems.
Reference: [2] <author> Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. </author> <title> Network Flows: Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction The minimum-cost multicommodity flow problem involves simultaneously shipping multiple commodities through a single network so the total flow obeys the arc capacity constraints and has minimum cost. The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems <ref> [2, 13, 12] </ref>. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based [2, 3, 5, 18]. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. <p> The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based <ref> [2, 3, 5, 18] </ref>. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29].
Reference: [3] <author> A. A. Assad. </author> <title> Multicommodity network flows|a survey. </title> <journal> Networks, </journal> <volume> 8(1) </volume> <pages> 37-91, </pages> <month> Spring </month> <year> 1978. </year>
Reference-contexts: The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based <ref> [2, 3, 5, 18] </ref>. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29].
Reference: [4] <author> Tamas Badics. genrmf. ftp://dimacs.rutgers.edu/pub/netflow/generators/network/- genrmf/, </author> <year> 1991. </year>
Reference-contexts: To test our implementation, we produced several families of random problem instances using three generators, multigrid, rmfgen, and tripartite. Our implementation, like most combinatorial algorithms, is sensitive to graph structure. MCMCF solves the multigrid problem instances (based on [21]) very quickly, while rmfgen instances (based on <ref> [4] </ref>) are more difficult. We wrote the tripartite generator to produce instances that are especially difficult for our implementation to solve. More data will appear in the full paper.
Reference: [5] <author> J. Castro and N. Nabona. </author> <title> An implementation of linear and nonlinear multicommodity network flows. </title> <journal> European Journal of Operational Research, </journal> <volume> 92(1) </volume> <pages> 37-53, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based <ref> [2, 3, 5, 18] </ref>. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29]. <p> A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of [16, 22, 23, 24, 26] to achieve good practical performance. We compare our implementation with CPLEX [6] and PPRN <ref> [5] </ref>. (Several other efficient minimum-cost multicommodity flow implementations, e.g., [1], are proprietary so we were unable to use these programs in our study.) Both are based on the simplex method [7] and both find exact solutions. <p> flows depends more on the network's congestion than on the instance's size so the lines flatten. 5 Comparisons with Other Implementations 5.1 The Other Implementations: CPLEX and PPRN We compared MCMCF (solving to 1% accuracy) with a commercial linear-programming package CPLEX [6] and the primal partitioning multicommodity flow implementation PPRN <ref> [5] </ref>. 11 of commodity groups for rmfgen and multigrid instances CPLEX (version 4.0.9) yields exact solutions to multicommodity flow linear programs. When forming the linear programs, we group the commodities since MCMCF computes these groups at run-time. <p> Despite this fact, we compared MCMCF with CPLEX's dual simplex method because it is an order of magnitude faster than its primal simplex for the problems we tested. PPRN <ref> [5] </ref> specializes the primal partitioning linear programming technique to solve multi-commodity problems. The primal partitioning method splits the instance's basis into bases for the commodities and another basis for the joint capacity constraints. Network simplex methods then solve each commodity's subproblem.
Reference: [6] <institution> CPLEX Optimization, Inc., </institution> <address> Incline Village, NV. Using the CPLEX Callable Library, 4.0 edition, </address> <year> 1995. </year>
Reference-contexts: A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of [16, 22, 23, 24, 26] to achieve good practical performance. We compare our implementation with CPLEX <ref> [6] </ref> and PPRN [5]. (Several other efficient minimum-cost multicommodity flow implementations, e.g., [1], are proprietary so we were unable to use these programs in our study.) Both are based on the simplex method [7] and both find exact solutions. <p> 3.1) increase the lower bound and the algorithm decreases the congestion and cost until an *-optimal flow is found. 3 Translating Theory into Practice The algorithmic framework described in the previous section is theoretically efficient, but a direct implementation requires orders of magnitude larger running time than commercial linear-programming packages <ref> [6] </ref>. Guided by the theoretical ideas of [16, 22, 24], we converted the theoretically correct but practically slow implementation to a theoretically correct and practically fast implementation. In some cases, we differentiated between theoretically equivalent implementation choices that differ in practicality, e.g, see Sect. 3.1. <p> The number of minimum-cost flows depends more on the network's congestion than on the instance's size so the lines flatten. 5 Comparisons with Other Implementations 5.1 The Other Implementations: CPLEX and PPRN We compared MCMCF (solving to 1% accuracy) with a commercial linear-programming package CPLEX <ref> [6] </ref> and the primal partitioning multicommodity flow implementation PPRN [5]. 11 of commodity groups for rmfgen and multigrid instances CPLEX (version 4.0.9) yields exact solutions to multicommodity flow linear programs. When forming the linear programs, we group the commodities since MCMCF computes these groups at run-time.
Reference: [7] <author> George Bernard Dantzig. </author> <title> Linear Programming and Extensions. </title> <publisher> Princeton University Press, </publisher> <address> Prince-ton, NJ, </address> <year> 1963. </year>
Reference-contexts: We compare our implementation with CPLEX [6] and PPRN [5]. (Several other efficient minimum-cost multicommodity flow implementations, e.g., [1], are proprietary so we were unable to use these programs in our study.) Both are based on the simplex method <ref> [7] </ref> and both find exact solutions. CPLEX is a state-of-the-art commercial linear programming package, and PPRN uses a primal partitioning technique to take advantage of the multicommodity flow problem structure. Our results indicate that the theoretical advantages of approximation algorithms over 1 linear-programming-based algorithms can be translated into practice.
Reference: [8] <author> Andrew Goldberg, Jeffrey D. Oldham, Serge Plotkin, and Cliff Stein. </author> <title> An implementation of a combinatorial approximation algorithm for minimum-cost multicommodity flow. </title> <type> Technical Report CS-TR-97-1600, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: We wrote the tripartite generator to produce instances that are especially difficult for our implementation to solve. More data will appear in the full paper. Brief descriptions of our problem generators and families will appear in <ref> [8] </ref>. 3.1 The Termination Condition Theoretically, a small potential function value and a sufficiently large value of the constant ff indicates the flow is *-optimal [16], but this pessimistic indicator leads to poor performance.
Reference: [9] <author> Andrew V. Goldberg. </author> <title> A natural randomization strategy for multicommodity flow and related algorithms. </title> <journal> Information Processing Letters, </journal> <volume> 42(5) </volume> <pages> 249-256, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: See Table2. 3.4 Choosing a Commodity to Reroute Several strategies for selecting the next commodity to reroute, proposed for concurrent flows, also apply to the minimum-cost multicommodity flow problem. These strategies include weighted [20] and uniform <ref> [9] </ref> randomization and round-robin [26] selection.
Reference: [10] <author> M. D. Grigoriadis. </author> <title> An efficient implementation of the network simplex method. </title> <journal> Mathematical Programming Study, </journal> <volume> 26 </volume> <pages> 83-111, </pages> <year> 1986. </year>
Reference-contexts: This led us to decide to use the primal network simplex method. We use the current flow and a basis from a previous minimum-cost flow to "warm-start" each minimum-cost flow computation. Excepting the warm-start idea, our primal simplex code is similar to that of Grigoriadis <ref> [10] </ref>. In the rest of this paper, we first introduce the theoretical ideas behind the implementation.
Reference: [11] <author> Michael D. Grigoriadis and Leonid G. Khachiyan. </author> <title> Approximate minimum-cost multicommodity flows in ~ O(* 2 knm) time. </title> <journal> Mathematical Programming, </journal> <volume> 75(3) </volume> <pages> 477-482, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Algorithms for computing approximate solutions to the multicommodity flow problem were developed in [22] (no-cost case) and <ref> [11, 16, 24] </ref> (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented [23] and was shown that indeed it often outperforms the more traditional approaches. <p> The commodity's flow f i is changed to the convex combination (1 )f i + f fl i . An appropriate choice of values for ff and lead to ~ O (* 3 nmk) running time (suppressing logarithmic terms). Grigoriadis and Khachiyan <ref> [11] </ref> decreased the dependence on * to * 2 . Since these minimum-cost algorithms compute a multiflow having arc cost at most a bud get bound B, we use binary search on B to determine an *-optimal cost. <p> Karger and Plotkin [16] decreased the running time by m=n using minimum-cost flow subroutines and adding a linear-cost term to the gradient to ensure each flow's arc cost is bounded. This change increases the *-dependence of [24] by 1=* to * 3 . Grigoriadis and Khachiyan <ref> [11] </ref> improved the [16] technique, reducing the *-dependence back to * 2 . MCMCF implements the linear-cost term, but experimentation showed the minimum-cost flows' arc costs were bounded even without using the linear-cost term. Furthermore, running times usually decrease when omitting the term.
Reference: [12] <author> Ali Haghani and Sei-Chang Oh. </author> <title> Formulation and solution of a multi-commodity, multi-modal network flow model for disaster relief operations. Transportation Research|A, </title> <address> 30A(3):231-250, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The minimum-cost multicommodity flow problem involves simultaneously shipping multiple commodities through a single network so the total flow obeys the arc capacity constraints and has minimum cost. The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems <ref> [2, 13, 12] </ref>. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based [2, 3, 5, 18]. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time.
Reference: [13] <author> Randolph W. Hall and David Lotspeich. </author> <title> Optimized lane assignment on an automated highway. Transportation Research|C, </title> <address> 4C(4):211-229, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: 1 Introduction The minimum-cost multicommodity flow problem involves simultaneously shipping multiple commodities through a single network so the total flow obeys the arc capacity constraints and has minimum cost. The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems <ref> [2, 13, 12] </ref>. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based [2, 3, 5, 18]. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time.
Reference: [14] <author> Anil Kamath and Omri Palmon. </author> <title> Improved interior point algorithms for exact and approximate solution of multicommodity flow problems. </title> <booktitle> In Proceedings of the 6th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <volume> volume 6, </volume> <pages> pages 502-511. </pages> <institution> Association for Computing Machinery, </institution> <month> January </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method <ref> [14, 15, 29] </ref>. In practice, solutions to within, say 1%, often suffice. More precisely, we say that a flow is *-optimal if it overflows the capacities by at most 1 + * factor and has cost that is within 1 + * of the optimum.
Reference: [15] <author> Sanjiv Kapoor and Pravin M. Vaidya. </author> <title> Fast algorithms for convex quadratic programming and mul--ticommodity flows. </title> <booktitle> In Proceedings of the 18th Annual ACM Symposium on Theory of Computing, </booktitle> <volume> volume 18, </volume> <pages> pages 147-159. </pages> <institution> Association for Computing Machinery, </institution> <year> 1986. </year>
Reference-contexts: Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method <ref> [14, 15, 29] </ref>. In practice, solutions to within, say 1%, often suffice. More precisely, we say that a flow is *-optimal if it overflows the capacities by at most 1 + * factor and has cost that is within 1 + * of the optimum.
Reference: [16] <author> David Karger and Serge Plotkin. </author> <title> Adding multiple cost constraints to combinatorial optimization problems, with applications to multicommodity flows. </title> <booktitle> In Symposium on the Theory of Computing, </booktitle> <volume> volume 27, </volume> <pages> pages 18-25. </pages> <publisher> Association for Computing Machinery, ACM Press, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: Algorithms for computing approximate solutions to the multicommodity flow problem were developed in [22] (no-cost case) and <ref> [11, 16, 24] </ref> (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented [23] and was shown that indeed it often outperforms the more traditional approaches. <p> Prior to our work, it was not known whether the combinatorial approximation algorithms for the minimum-cost case could be implemented to run quickly. In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of <ref> [16] </ref> yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of [16, 22, 23, 24, 26] to achieve good practical performance. <p> In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of <ref> [16, 22, 23, 24, 26] </ref> to achieve good practical performance. <p> A fraction of the commodity's flow is then rerouted to the corresponding minimum-cost flow. Each rerouting decreases a certain potential function. The algorithm iterates this process until it finds an *-optimal flow. As we have mentioned above, a direct implementation of <ref> [16] </ref>, while theoretically fast, is very slow in practice. <p> Our adaptive scheme for choosing ff leads to significantly better performance than using the theoretical value. Importantly, this heuristic does not invalidate the worst-case performance guarantees proved for algorithms using fixed ff. Stopping Condition: Theoretically, the algorithm yields an *-optimal flow when the potential function becomes sufficiently small <ref> [16] </ref>. Alternative algorithms, e.g., [24], explicitly compute lower bounds. Although these stopping conditions lead to the same asymptotic running time, the latter one leads to much better performance in our experiments. Step Size: Theory specifies the rerouting fraction as a fixed function of ff. <p> Thus, the number k of commodity groups may be smaller than the number k 0 of simple commodities in the input. 2.2 The Algorithmic Framework Our algorithm is mostly based on <ref> [16] </ref>. Roughly speaking, the approach in that paper is as follows. The algorithm first finds an initial flow satisfying demands but which may violate capacities and may be too expensive. The algorithm repeatedly modifies the flow until it becomes O (*)-optimal. <p> Guided by the theoretical ideas of <ref> [16, 22, 24] </ref>, we converted the theoretically correct but practically slow implementation to a theoretically correct and practically fast implementation. In some cases, we differentiated between theoretically equivalent implementation choices that differ in practicality, e.g, see Sect. 3.1. <p> More data will appear in the full paper. Brief descriptions of our problem generators and families will appear in [8]. 3.1 The Termination Condition Theoretically, a small potential function value and a sufficiently large value of the constant ff indicates the flow is *-optimal <ref> [16] </ref>, but this pessimistic indicator leads to poor performance. Instead, we periodically compute the lower bound on the optimal congestion fl as found in [22, 24]. Since the problem instance is assumed to be feasible, the computation indicates when the current guess for the minimum flow cost is too low. <p> Unfortunately, ff must be large enough to produce an *-optimal flow. Thus, we developed heuristics for slowly increasing its value. There are two different theoretical explanations for ff than can be used to develop two different heuristics. Karger and Plotkin <ref> [16] </ref> choose ff so that, when the potential function is less than a constant factor of its minimum, the flow is *-optimal. The heuristic of starting with a small ff and increasing it when the potential function's value became too small experimentally failed to decrease significantly the running time. <p> After limited experimentation, we decided to use the golden ratio for both fi and fl. The ff values are frequently much lower than those from [24]. Using this heuristic rather than using the theoretical value of ln (3m)=* <ref> [16] </ref> usually decreases the running time by a factor of between two and six. See Table2. 3.4 Choosing a Commodity to Reroute Several strategies for selecting the next commodity to reroute, proposed for concurrent flows, also apply to the minimum-cost multicommodity flow problem. <p> Plotkin, Shmoys, and Tar-dos [24] solve the minimum-cost multicommodity flow problem using shortest-paths as a basic subroutine. Karger and Plotkin <ref> [16] </ref> decreased the running time by m=n using minimum-cost flow subroutines and adding a linear-cost term to the gradient to ensure each flow's arc cost is bounded. This change increases the *-dependence of [24] by 1=* to * 3 . Grigoriadis and Khachiyan [11] improved the [16] technique, reducing the *-dependence <p> Karger and Plotkin <ref> [16] </ref> decreased the running time by m=n using minimum-cost flow subroutines and adding a linear-cost term to the gradient to ensure each flow's arc cost is bounded. This change increases the *-dependence of [24] by 1=* to * 3 . Grigoriadis and Khachiyan [11] improved the [16] technique, reducing the *-dependence back to * 2 . MCMCF implements the linear-cost term, but experimentation showed the minimum-cost flows' arc costs were bounded even without using the linear-cost term. Furthermore, running times usually decrease when omitting the term. <p> We believe many of these techniques can be extended to other problems solved using the fractional packing and covering framework of [24]. We conclude with two unanswered questions. Since our implementation never needs to use the linear-cost term <ref> [16] </ref>, it is interesting to prove whether the term is indeed unnecessary. Also, it is interesting to try to prove the experimental O (* 1:5 ) dependence of Sect. 4.1.
Reference: [17] <author> N. Karmarkar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <journal> Combinatorica, </journal> <volume> 4(4) </volume> <pages> 373-395, </pages> <year> 1984. </year>
Reference-contexts: The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based [2, 3, 5, 18]. Using the ellipsoid [19] or the interior-point <ref> [17] </ref> methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29]. In practice, solutions to within, say 1%, often suffice.
Reference: [18] <author> Jeff L. Kennington and Richard V. Helgason. </author> <title> Algorithms for Network Programming. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based <ref> [2, 3, 5, 18] </ref>. Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29].
Reference: [19] <author> L. G. Khachiyan. </author> <title> Polynomial algorithms in linear programming. </title> <journal> Zhurnal Vychislitel'noi Matem-atiki i Matematicheskoi Fiziki (Journal of Computational Mathematics and Mathematical Physics), </journal> <volume> 20(1) </volume> <pages> 51-68, </pages> <month> January-February </month> <year> 1980. </year>
Reference-contexts: The problem occurs in many contexts where different items share the same resource, e.g., communication networks, transportation, and scheduling problems [2, 13, 12]. Traditional methods for solving minimum-cost and no-cost multicommodity flow problems are linear-programming based [2, 3, 5, 18]. Using the ellipsoid <ref> [19] </ref> or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method [14, 15, 29]. In practice, solutions to within, say 1%, often suffice.
Reference: [20] <author> Philip Klein, Serge Plotkin, Clifford Stein, and Eva Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 466-487, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: See Table2. 3.4 Choosing a Commodity to Reroute Several strategies for selecting the next commodity to reroute, proposed for concurrent flows, also apply to the minimum-cost multicommodity flow problem. These strategies include weighted <ref> [20] </ref> and uniform [9] randomization and round-robin [26] selection.
Reference: [21] <author> Y. Lee and J. Orlin. gridgen. ftp://dimacs.rutgers.edu/pub/netflow/generators/- network/gridgen/, </author> <year> 1991. </year>
Reference-contexts: To test our implementation, we produced several families of random problem instances using three generators, multigrid, rmfgen, and tripartite. Our implementation, like most combinatorial algorithms, is sensitive to graph structure. MCMCF solves the multigrid problem instances (based on <ref> [21] </ref>) very quickly, while rmfgen instances (based on [4]) are more difficult. We wrote the tripartite generator to produce instances that are especially difficult for our implementation to solve. More data will appear in the full paper.
Reference: [22] <author> Tom Leighton, Fillia Makedon, Serge Plotkin, Clifford Stein, Eva Tardos, and Spyros Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 50(2) </volume> <pages> 228-243, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: More precisely, we say that a flow is *-optimal if it overflows the capacities by at most 1 + * factor and has cost that is within 1 + * of the optimum. Algorithms for computing approximate solutions to the multicommodity flow problem were developed in <ref> [22] </ref> (no-cost case) and [11, 16, 24] (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented [23] and was shown that indeed it often outperforms the more traditional approaches. <p> Algorithms for computing approximate solutions to the multicommodity flow problem were developed in <ref> [22] </ref> (no-cost case) and [11, 16, 24] (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented [23] and was shown that indeed it often outperforms the more traditional approaches. Prior to our work, it was not known whether the combinatorial approximation algorithms for the minimum-cost case could be implemented to run quickly. <p> In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of <ref> [16, 22, 23, 24, 26] </ref> to achieve good practical performance. <p> Guided by the theoretical ideas of <ref> [16, 22, 24] </ref>, we converted the theoretically correct but practically slow implementation to a theoretically correct and practically fast implementation. In some cases, we differentiated between theoretically equivalent implementation choices that differ in practicality, e.g, see Sect. 3.1. <p> Instead, we periodically compute the lower bound on the optimal congestion fl as found in <ref> [22, 24] </ref>. Since the problem instance is assumed to be feasible, the computation indicates when the current guess for the minimum flow cost is too low. The weak duality inequalities yield a lower bound.
Reference: [23] <author> Tishya Leong, Peter Shor, and Clifford Stein. </author> <title> Implementation of a combinatorial multicommodity flow algorithm. </title> <editor> In David S. Johnson and Catherine C. McGeoch, editors, </editor> <title> Network Flows and Matching, </title> <booktitle> volume 12 of Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pages 387-405. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: Algorithms for computing approximate solutions to the multicommodity flow problem were developed in [22] (no-cost case) and [11, 16, 24] (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented <ref> [23] </ref> and was shown that indeed it often outperforms the more traditional approaches. Prior to our work, it was not known whether the combinatorial approximation algorithms for the minimum-cost case could be implemented to run quickly. <p> In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of <ref> [16, 22, 23, 24, 26] </ref> to achieve good practical performance. <p> In the longer version of this paper, we will also show that a slightly modified MCMCF solves the concurrent flow problem, i.e., the optimization version of the no-cost multicommodity flow problem, two to twenty times faster than Leong et al.'s approximation implementation <ref> [23] </ref>. 2 Theoretical Background 2.1 Definitions The minimum-cost multicommodity flow problem consists of a directed network G = (V; A), a positive arc capacity function u, a nonnegative arc cost function c, and a specification (s i ; t i ; d i ) for each commodity i, i 2 f1; <p> Because we can choose * arbitrarily small, we can find a solution arbitrarily close to the optimal. We combine commodities with the same source nodes to form commodities with one source and (possibly) many sinks (see <ref> [23, 28] </ref>). Thus, the number k of commodity groups may be smaller than the number k 0 of simple commodities in the input. 2.2 The Algorithmic Framework Our algorithm is mostly based on [16]. Roughly speaking, the approach in that paper is as follows. <p> Brent's method and similar strategies, e.g., see <ref> [23] </ref>, are natural strategies to maximize the function's reduction. We implemented Brent's method [25], but the special structure of the potential function allows us to compute the function's first and second derivatives. Thus, we can use the Newton-Raphson method [25, 27], which is faster.
Reference: [24] <author> Serge A. Plotkin, David B. Shmoys, and Eva Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Mathematics of Operations Research, </journal> <volume> 20(2) </volume> <pages> 257-301, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Algorithms for computing approximate solutions to the multicommodity flow problem were developed in [22] (no-cost case) and <ref> [11, 16, 24] </ref> (minimum-cost case). Theoretically, these algorithms are much faster than interior-point method based algorithms for constant *. The algorithm in [22] was implemented [23] and was shown that indeed it often outperforms the more traditional approaches. <p> In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of <ref> [16, 22, 23, 24, 26] </ref> to achieve good practical performance. <p> Importantly, this heuristic does not invalidate the worst-case performance guarantees proved for algorithms using fixed ff. Stopping Condition: Theoretically, the algorithm yields an *-optimal flow when the potential function becomes sufficiently small [16]. Alternative algorithms, e.g., <ref> [24] </ref>, explicitly compute lower bounds. Although these stopping conditions lead to the same asymptotic running time, the latter one leads to much better performance in our experiments. Step Size: Theory specifies the rerouting fraction as a fixed function of ff. <p> Guided by the theoretical ideas of <ref> [16, 22, 24] </ref>, we converted the theoretically correct but practically slow implementation to a theoretically correct and practically fast implementation. In some cases, we differentiated between theoretically equivalent implementation choices that differ in practicality, e.g, see Sect. 3.1. <p> Instead, we periodically compute the lower bound on the optimal congestion fl as found in <ref> [22, 24] </ref>. Since the problem instance is assumed to be feasible, the computation indicates when the current guess for the minimum flow cost is too low. The weak duality inequalities yield a lower bound. <p> Since the problem instance is assumed to be feasible, the computation indicates when the current guess for the minimum flow cost is too low. The weak duality inequalities yield a lower bound. Using the notation from <ref> [24] </ref>, r X comm. i C i ( A ) comm. i C fl For commodity i, C i ( A ) represents the cost of the current flow f i with respect to arc capacities A u and the cost function y t A, where A is the km fi <p> The heuristic of starting with a small ff and increasing it when the potential function's value became too small experimentally failed to decrease significantly the running time. Plotkin, Shmoys, and Tardos <ref> [24] </ref> use the weak duality inequalities (1) upon which we base a different heuristic. The product of the gaps bounds the distance between the potential function and the optimal flow. The algorithm's improvement is proportional to the size of the right gap, and increasing ff decreases the left gap's size. <p> We increase ff by factor fi if the ratio is larger than 0.5 and otherwise decrease it by fl. After limited experimentation, we decided to use the golden ratio for both fi and fl. The ff values are frequently much lower than those from <ref> [24] </ref>. Using this heuristic rather than using the theoretical value of ln (3m)=* [16] usually decreases the running time by a factor of between two and six. <p> Plotkin, Shmoys, and Tar-dos <ref> [24] </ref> solve the minimum-cost multicommodity flow problem using shortest-paths as a basic subroutine. Karger and Plotkin [16] decreased the running time by m=n using minimum-cost flow subroutines and adding a linear-cost term to the gradient to ensure each flow's arc cost is bounded. This change increases the *-dependence of [24] by <p> Tar-dos <ref> [24] </ref> solve the minimum-cost multicommodity flow problem using shortest-paths as a basic subroutine. Karger and Plotkin [16] decreased the running time by m=n using minimum-cost flow subroutines and adding a linear-cost term to the gradient to ensure each flow's arc cost is bounded. This change increases the *-dependence of [24] by 1=* to * 3 . Grigoriadis and Khachiyan [11] improved the [16] technique, reducing the *-dependence back to * 2 . MCMCF implements the linear-cost term, but experimentation showed the minimum-cost flows' arc costs were bounded even without using the linear-cost term. <p> This is strong evidence the approximate problem is simpler, and that combinatorial-based methods, 14 appropriately implemented, should be considered for this problem. We believe many of these techniques can be extended to other problems solved using the fractional packing and covering framework of <ref> [24] </ref>. We conclude with two unanswered questions. Since our implementation never needs to use the linear-cost term [16], it is interesting to prove whether the term is indeed unnecessary. Also, it is interesting to try to prove the experimental O (* 1:5 ) dependence of Sect. 4.1.
Reference: [25] <author> William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1988. </year>
Reference-contexts: Brent's method and similar strategies, e.g., see [23], are natural strategies to maximize the function's reduction. We implemented Brent's method <ref> [25] </ref>, but the special structure of the potential function allows us to compute the function's first and second derivatives. Thus, we can use the Newton-Raphson method [25, 27], which is faster. <p> Brent's method and similar strategies, e.g., see [23], are natural strategies to maximize the function's reduction. We implemented Brent's method [25], but the special structure of the potential function allows us to compute the function's first and second derivatives. Thus, we can use the Newton-Raphson method <ref> [25, 27] </ref>, which is faster. Given the current flow f and the minimum-cost flow f fl i for commodity i, the potential function () is a convex function (with positive second derivative) of the step size .
Reference: [26] <author> Tomasz Radzik. </author> <title> Fast deterministic approximation for the multicommodity flow problem. </title> <journal> Mathematical Programming, </journal> <volume> 78(1) </volume> <pages> 43-58, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: In this paper we describe MCMCF, our implementation of a combinatorial approximation algorithm for the minimum-cost multicommodity flow problem. A direct implementation of [16] yielded a correct but practically slow implementation. Much experimentation helped us select among the different theoretical insights of <ref> [16, 22, 23, 24, 26] </ref> to achieve good practical performance. <p> It then computes the dual variables y r = e ff ( r 1) , where r ranges over the arcs A and the arc cost function c, and a potential function (f) = P algorithm chooses a commodity i to reroute in a round robin order, as in <ref> [26] </ref>. It computes, for that commodity, a minimum-cost flow f fl i in a graph with arc costs related to the gradient r (f) of the potential function and arc capacities A u. <p> See Table2. 3.4 Choosing a Commodity to Reroute Several strategies for selecting the next commodity to reroute, proposed for concurrent flows, also apply to the minimum-cost multicommodity flow problem. These strategies include weighted [20] and uniform [9] randomization and round-robin <ref> [26] </ref> selection.
Reference: [27] <author> Joseph Raphson. </author> <title> Analysis quationum Universalis, </title> <editor> seu, Ad quationes Algebraicas Resolvendas Methodus Generalis, et Expedita. Prostant venales apud Abelem Swalle, </editor> <address> London, </address> <month> 1690. </month>
Reference-contexts: Step Size: Theory specifies the rerouting fraction as a fixed function of ff. Computing that maximizes the exponential potential function reduction experimentally decreases 2 the running time. We show that is it possible to use the Newton-Raphson method <ref> [27] </ref> to quickly find a near-optimal value of for every rerouting. Additionally, a commodity's flow usually differs from its minimum-cost flow on only a few arcs. We use this fact to speed up these computations. <p> Brent's method and similar strategies, e.g., see [23], are natural strategies to maximize the function's reduction. We implemented Brent's method [25], but the special structure of the potential function allows us to compute the function's first and second derivatives. Thus, we can use the Newton-Raphson method <ref> [25, 27] </ref>, which is faster. Given the current flow f and the minimum-cost flow f fl i for commodity i, the potential function () is a convex function (with positive second derivative) of the step size .
Reference: [28] <author> R. Schneur. </author> <title> Scaling Algorithms for Multicommodity Flow Problems and Network Flow Problems with Side Constraints. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: Because we can choose * arbitrarily small, we can find a solution arbitrarily close to the optimal. We combine commodities with the same source nodes to form commodities with one source and (possibly) many sinks (see <ref> [23, 28] </ref>). Thus, the number k of commodity groups may be smaller than the number k 0 of simple commodities in the input. 2.2 The Algorithmic Framework Our algorithm is mostly based on [16]. Roughly speaking, the approach in that paper is as follows.
Reference: [29] <author> Pravin M. Vaidya. </author> <title> Speeding up linear programming using fast matrix multiplication. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <volume> volume 30, </volume> <pages> pages 332-337. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year> <month> 16 </month>
Reference-contexts: Using the ellipsoid [19] or the interior-point [17] methods, linear-programming problems can be solved in polynomial time. Theoretically, the fastest algorithms for solving the minimum-cost multicommodity flow problem exactly use the problem structure to speed up the interior-point method <ref> [14, 15, 29] </ref>. In practice, solutions to within, say 1%, often suffice. More precisely, we say that a flow is *-optimal if it overflows the capacities by at most 1 + * factor and has cost that is within 1 + * of the optimum.
References-found: 29

