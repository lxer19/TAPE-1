URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR60.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: E-mail: lai@cis.ohio-state.edu  
Title: Bipartite Permutation Graphs with Application to the Minimum Buffer Size Problem  
Author: Ten-Hwang Lai and Shu-Shang Wei 
Date: September 23, 1994  
Address: Columbus, Ohio 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: This paper presents a new characterizations of bipartite permutation graphs and a structure theorem for (0,1)-matrices with a special consecutive 1's property. These results lead to a linear time algorithm for the minimum buffer size problem when restricted to bipartite permutation graphs; this problem arises in relational database systems and is NP-hard for a general graph. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. S. Booth and G. S. Lueker, </author> <title> "Testing for the Consecutive Ones Property, Interval Graphs, and Graph Planarity Using PQ-Tree Algorithms," </title> <editor> J. </editor> <booktitle> of Computer and System Sciences 13 (1976), </booktitle> <pages> 335-379. </pages>
Reference-contexts: The term convex on U is similarly defined. A convex graph is a bipartite graph that is convex on at least one node set. A biconvex graph is one that is convex on both node sets. Booth and Lueker <ref> [1] </ref> described an algorithm that determines whether a given bipartite graph G = (U; V; E) is convex on U (or V ) and if so, generates a convex labeling for the node set.
Reference: [2] <author> F. Fotouhi and S. Pramanik, </author> <title> "Optimal Secondary Storage Access Sequence for Performing Relational Join," </title> <journal> IEEE Trans. on Knowledge and Data Engineering 1, </journal> <month> 3 (Sept. </month> <year> 1989), </year> <pages> 318-328. </pages>
Reference-contexts: Such a labeling is called a forward-convex labeling. in the figure is a forward-convex labeling. Recently, while studying database systems, we observed [11] that those bipartite graphs (called page connectivity graphs in <ref> [2, 6, 5] </ref>) which are used to model certain join operations in relational database systems are often forward-convex. This motivated our interests in studying forward-convex graphs. It turns out that forward-convex graphs and bipartite permutation graphs are the same class of graphs. <p> The page connectivity graph of a join operation is a graph in which each node represents a data page and there is an edge between two nodes if and only if their corresponding data pages possibly contain tuples that need to be joined <ref> [2, 6, 5] </ref>. Only those pages (nodes) with at least an edge in the graph need to be accessed, and two data pages need to be in the main memory simultaneously if they are connected by an edge. <p> Given a page connectivity graph G, the minimum buffer size problem is to determine the minimum amount of buffer required to perform the join operation represented by G. This problem is NP-hard if G is an arbitrary graph <ref> [2] </ref>. As was mentioned in the introduction, the page connectivity graphs for many join operations are forward-convex [11]. This motivates us to look for an efficient algorithm for the minimum buffer size problem with problem instances restricted to forward-convex graphs. We report a linear time algorithm here. <p> in U [ V into a sequence S = (w 1 ; : : : ; w m+n ) so as to minimize Cost (S) = maxfjM em (S i )j : 1 i m + ng: As remarked earlier, this problem is NP-hard if G is an arbitrary graph <ref> [2] </ref>. It can be solved efficiently if the page connectivity graph is forward-convex, which is the main result of this section. We shall assume that the given page connectivity graph is not only forward-convex but also connected. <p> Step 4 obviously can be done in O (jEj) time. So the overall time complexity is O (jEj). The above algorithm always produces optimal solutions for forward-convex graphs. In <ref> [2] </ref> there are two heuristic algorithms that produce near-optimal solutions for forward-convex as well non-forward-convex graphs. 5.2 Proof of Theorem 2 We now prove Theorem 3, which was stated and used in Section 5.1. To this aim, we establish some properties of forward-convex graphs and retrieved-once sequences.
Reference: [3] <author> M. C. Golumbic, </author> <title> Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: pair of labelings of the nodes such that an edge fl This work was supported in part by National Science Foundation under Grant CCR-9010589. 1 exists between nodes x and y if and only if x precedes y in one of the labelings while y precedes x in the other <ref> [3, 8] </ref>.
Reference: [4] <author> T. H. Lai and S. S. Wei, </author> <title> "Algorithms for Page Retrieval and Hamiltonian Paths on Forward-Convex Line Graphs," </title> <journal> Journal of Algorithms, </journal> <note> in press. </note>
Reference-contexts: A number of NP-complete problems can be solved in polynomial time when the input instances are restricted to forward-convex graphs. We have reported one such result here. Other results of this type can be found in <ref> [4, 7, 8, 9] </ref>.
Reference: [5] <author> E. R. Omiecinski, </author> <title> "Heuristics for Join Processing Using Nonclustered Indexes," </title> <journal> IEEE Trans. on Software Engineering 15, </journal> <month> 1 (Jan. </month> <year> 1989), </year> <pages> 18-25. </pages>
Reference-contexts: Such a labeling is called a forward-convex labeling. in the figure is a forward-convex labeling. Recently, while studying database systems, we observed [11] that those bipartite graphs (called page connectivity graphs in <ref> [2, 6, 5] </ref>) which are used to model certain join operations in relational database systems are often forward-convex. This motivated our interests in studying forward-convex graphs. It turns out that forward-convex graphs and bipartite permutation graphs are the same class of graphs. <p> The page connectivity graph of a join operation is a graph in which each node represents a data page and there is an edge between two nodes if and only if their corresponding data pages possibly contain tuples that need to be joined <ref> [2, 6, 5] </ref>. Only those pages (nodes) with at least an edge in the graph need to be accessed, and two data pages need to be in the main memory simultaneously if they are connected by an edge.
Reference: [6] <author> S. Pramanik and D. Ittner, </author> <title> "Use of Graph-Theoretic Models for Optimal Relational Database Accesses to Perform Join," </title> <journal> ACM Trans. on Database Systems 10, </journal> <month> 1 (March </month> <year> 1985), </year> <pages> 57-74. </pages>
Reference-contexts: Such a labeling is called a forward-convex labeling. in the figure is a forward-convex labeling. Recently, while studying database systems, we observed [11] that those bipartite graphs (called page connectivity graphs in <ref> [2, 6, 5] </ref>) which are used to model certain join operations in relational database systems are often forward-convex. This motivated our interests in studying forward-convex graphs. It turns out that forward-convex graphs and bipartite permutation graphs are the same class of graphs. <p> The page connectivity graph of a join operation is a graph in which each node represents a data page and there is an edge between two nodes if and only if their corresponding data pages possibly contain tuples that need to be joined <ref> [2, 6, 5] </ref>. Only those pages (nodes) with at least an edge in the graph need to be accessed, and two data pages need to be in the main memory simultaneously if they are connected by an edge.
Reference: [7] <author> J. Spinrad, </author> <title> Two Dimensional Partial Orders, </title> <type> Ph.D. Thesis, </type> <institution> Princeton University, Dept. of EECS, </institution> <year> 1982. </year>
Reference-contexts: A number of NP-complete problems can be solved in polynomial time when the input instances are restricted to forward-convex graphs. We have reported one such result here. Other results of this type can be found in <ref> [4, 7, 8, 9] </ref>.
Reference: [8] <author> J. Spinrad, A. Brandstadt, L. Stewart, </author> <title> "Bipartite Permutation Graphs," </title> <booktitle> Discrete Applied Mathematics 18 (1987), </booktitle> <pages> 279-292. </pages>
Reference-contexts: pair of labelings of the nodes such that an edge fl This work was supported in part by National Science Foundation under Grant CCR-9010589. 1 exists between nodes x and y if and only if x precedes y in one of the labelings while y precedes x in the other <ref> [3, 8] </ref>. <p> The fact that bipartite permutation graphs are biconvex is a direct result from a Characterization Theorem <ref> [8] </ref> that indicates that the following statements are equivalent for a bipartite graph G = (U; V; E): (i) G is a bipartite permutation graph. (ii) There is a strong ordering of U [ V . (A strong ordering is a labeling of U and a labeling of V such that <p> Second, we show that an NP-hard problem | the Minimum Buffer Size Problem | that has applications in relational database systems can be efficiently solved when restricted to bipartite permutation graphs. Our recognition algorithm has the same time complexity as the recognition algorithm of <ref> [8] </ref>. These two algorithms are different in approach, and they generate different labelings. If the graph in question is a bipartite permutation graph, the Spinrad et al. algorithm will generate a labeling with convex and enclosure properties, while our algorithm will generate a forward-convex labeling. <p> Throughout this paper, let G 1 and G 2 be the two graphs depicted in Fig. 2. Neither of them is forward-convex. The main result of this section is the following theorem that characterizes the 3 class of forward-convex graphs. This theorem augments Spinrad et al.'s theorem <ref> [8] </ref> in characterizing bipartite permutation graphs. <p> This motivates us to look for an efficient algorithm for the minimum buffer size problem with problem instances restricted to forward-convex graphs. We report a linear time algorithm here. Several other NP-complete problems are known to be polynomially solvable for bipartite permutation graphs <ref> [8] </ref>. We start our discussion by formally formulating the problem. Let G = (U; V; E) be the page connectivity graph of a join operation. Without loss of generality, assume that G contains no isolated nodes as such nodes can be deleted. <p> A number of NP-complete problems can be solved in polynomial time when the input instances are restricted to forward-convex graphs. We have reported one such result here. Other results of this type can be found in <ref> [4, 7, 8, 9] </ref>.
Reference: [9] <author> L. K. Stewart, </author> <title> Permutation Graph Structure and Algorithms, </title> <type> Ph.D. Thesis, </type> <institution> University of Toronto, Dept. of Computer Science, </institution> <year> 1985. </year> <month> 25 </month>
Reference-contexts: A number of NP-complete problems can be solved in polynomial time when the input instances are restricted to forward-convex graphs. We have reported one such result here. Other results of this type can be found in <ref> [4, 7, 8, 9] </ref>.
Reference: [10] <author> A. Tucker, </author> <title> "A Structure Theorem for the Consecutive 1's Property," </title> <journal> Journal of Combinatorial Theory 12(B) (1972), </journal> <pages> 153-162. </pages>
Reference-contexts: With this representation, properties of bipartite graphs can be translated to properties of (0,1)-matrices, and vice versa. A (0; 1)-matrix M is said to have the consecutive 1's property for rows if the columns of M can be permuted so that the 1's in each row appear consecutively <ref> [10] </ref>. It is clear that G is convex on V (U ) if and only if its adjacency matrix has the consecutive 1's property for rows (columns). <p> It is also clear that the following lemma is true. Lemma 1 A bipartite graph G = (U; V; E) is forward-convex if and only if its adjacency matrix is forward-convex (for rows and columns). Tucker <ref> [10] </ref> proved a structure theorem for (0,1)-matrices with the consecutive 1's property: a (0,1)-matrix M has the consecutive 1's property for columns if and only if no submatrix of M is a member of five specific configurations.
Reference: [11] <author> S. S. Wei, </author> <title> Design and Analysis of Algorithms for Processing Queries in Database Systems, </title> <type> Ph.D. Thesis, </type> <institution> Department of CIS, The Ohio State University, </institution> <year> 1992. </year> <month> 26 </month>
Reference-contexts: Such a labeling is called a forward-convex labeling. in the figure is a forward-convex labeling. Recently, while studying database systems, we observed <ref> [11] </ref> that those bipartite graphs (called page connectivity graphs in [2, 6, 5]) which are used to model certain join operations in relational database systems are often forward-convex. This motivated our interests in studying forward-convex graphs. <p> This problem is NP-hard if G is an arbitrary graph [2]. As was mentioned in the introduction, the page connectivity graphs for many join operations are forward-convex <ref> [11] </ref>. This motivates us to look for an efficient algorithm for the minimum buffer size problem with problem instances restricted to forward-convex graphs. We report a linear time algorithm here. Several other NP-complete problems are known to be polynomially solvable for bipartite permutation graphs [8].
References-found: 11

