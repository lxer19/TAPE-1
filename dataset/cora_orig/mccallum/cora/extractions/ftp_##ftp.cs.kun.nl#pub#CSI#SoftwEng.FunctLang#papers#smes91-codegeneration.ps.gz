URL: ftp://ftp.cs.kun.nl/pub/CSI/SoftwEng.FunctLang/papers/smes91-codegeneration.ps.gz
Refering-URL: http://www.cs.kun.nl/~clean/Clean.Papers.html
Root-URL: 
Title: aaaaaaa Generating Efficient Code for Lazy Functional Languages  
Author: Sjaak Smetsers, Eric Nocker, John van Groningen, Rinus Plasmeijer 
Affiliation: University of Nijmegen  
Abstract: In this paper we will discuss how a good code generator can be built for (lazy) functional languages. Starting from Concurrent Clean, an experimental lazy functional programming language, code is generated for an intermediate abstract machine: the ABC machine. In this first pass many well-known optimisation techniques are included. However, we will also present some new ideas in this area, like the way in which strictness can be incorporated, and the implementation of higher order functions. In a second pass, the ABC code is translated to concrete target code for the Motorola MC680x0 processor. Again many optimisation methods appear to be applicable. Some of them (for example register allocation algorithms) are common for the implementation of other types of languages, but have to be adapted because of the specific properties of both source language and target machine. Other optimisations are specific for lazy functional languages, e.g. the implementation of higher order functions, efficient memory management and the optimised graph reduction. Measurements demonstrate that due to the optimisations of both passes very fast code can be generated. We have compared Concurrent Clean with two other functional languages, namely Lml and Hope, and also with the imperative language C. With respect to both functional languages this comparison clearly goes in favour of Concurrent Clean. Furthermore, we can conclude that, when using the presented compilation techniques, a lazy functional language is able to compete even with an imperative language such as C.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A.V., R. Sethi and J.D. </author> <title> Ullman (1986). Compilers, Principles, Techniques and Tools, Bell Telephone Laboratories, </title> <publisher> Incorporated, Addison-Wesley. </publisher>
Reference: <author> Augustsson, L. and T. </author> <note> Johnsson (1989). The chalmers lazy-ml compiler, The Computer Journal </note> . 
Reference: <author> Barendregt, H.P., M.C.J.D. van Eekelen, J.R.W. Glauert, J.R. Kennaway, M.J. </author> <title> Plas-meijer and M.R. Sleep (1987). Term graph reduction, </title> <booktitle> Proc. of Parallel Architectures and Languages Europe (PARLE), </booktitle> <address> Eindhoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 259 II, </publisher> <pages> pp. 141-158. </pages>
Reference: <author> Barendsen, Erik and Sjaak Smetsers (1992). </author> <title> Graph rewriting and copying, </title> <institution> Technical Report 92-20 , University of Nijmegen. </institution>
Reference: <author> Brus, T., M.C.J.D. van Eekelen, M. van Leer, M.J. </author> <title> Plasmeijer and H.P. Barendregt (1987). Clean a language for functional graph rewriting, </title> <booktitle> Proc. of Conference on Functional Programming Languages and Computer Architecture (FPCA '87), </booktitle> <address> Portland, Oregon, USA, </address> <publisher> Springer Verlag, LNCS 274, </publisher> <pages> pp. 364-384. </pages>
Reference: <author> Burstall, R.M., D.B. MacQueen and D.T. </author> <month> Sanella </month> <year> (1980). </year> <title> Hope: An experimental applicative language, </title> <booktitle> Proc. of The 1980 LISP Conference, </booktitle> <pages> pp. 136-143. </pages>
Reference: <author> Eekelen, M.C.J.D. </author> <title> van (1988). Parallel Graph Rewriting, Some Contributions to its Theory, its Implementation and its Application, </title> <type> Dissertation, </type> <institution> University of Ni-jmegen. </institution>
Reference: <author> Eekelen, M.C.J.D. van, E.G.J.M.H. Nocker, M.J. Plasmeijer and J.E.W. </author> <month> Smetsers </month> <year> (1990). </year> <note> Concurrent clean, version 0.6, Technical Report 90-21 , University of Ni-jmegen. </note>
Reference: <author> Eekelen, M.C.J.D. van, M.J. Plasmeijer and J.E.W. </author> <month> Smetsers </month> <year> (1991). </year> <title> Parallel graph rewriting on loosely coupled machine architectures, </title> <editor> in: Kaplan and Okada (eds.), </editor> <booktitle> Proc. of Conditional and Typed Rewriting Systems (CTRS'90), </booktitle> <address> Montreal, Canada, </address> <publisher> Springer Verlag, LNCS 516, </publisher> <pages> pp. 354-369. </pages>
Reference: <author> Groningen, J.H.G. </author> <title> van (1990). Implementing the abc-machine on m680x0 based architectures, </title> <type> Master's thesis, </type> <institution> University of Nijmegen. </institution>
Reference: <author> Johnsson, Th. </author> <year> (1987). </year> <title> Compiling Lazy Functional Programming Languages, </title> <type> Dissertation, </type> <institution> Chalmers University, Goteborg, Sweden. </institution>
Reference: <author> Kesseler, M. </author> <year> (1990). </year> <title> Concurrent clean on transputers. 33 Koopman, </title> <editor> P.W.M., M.C.J.D. van Eekelen, E.G.J.M.H. Nocker, M.J. Plasmeijer and J.E.W. </editor> <month> Smetsers </month> <year> (1990). </year> <title> The abc-machine: A sequential stack-based abstract machine for graph rewriting, </title> <institution> Technical Report 90-22 , University of Nijmegen, The Netherlands. </institution>
Reference: <author> McBurney, D. and R. </author> <title> Sleep (1990). Concurrent clean on zapp, </title> <booktitle> Proc. of Second International Workshop on Implementation of Functional Languages on Parallel Architectures, </booktitle> <institution> University of Nijmegen, the Netherlands, </institution> <type> Technical Report 90-16. </type>
Reference: <author> Milner, R.A. </author> <year> (1978). </year> <title> Theory of type polymorphism in programming, </title> <journal> Journal of Computer and System Sciences. </journal> <note> Motorola (1985/6). MC68020 32-Bit Microprocessor User's Manual , Prentice Hall. </note>
Reference: <author> Mycroft, A. </author> <year> (1984). </year> <title> Polymorphic type schemes and recursive definitions, </title> <booktitle> Proc. of 6th Int. Conf. on Programming, </booktitle> <address> Eindhoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 167, </publisher> <pages> pp. 217-239. </pages>
Reference: <author> Nocker, E.G.J.M.H. </author> <year> (1989). </year> <title> The pabc simulator, v0.5. implementation manual, </title> <institution> Technical Report 89-19 , University of Nijmegen. </institution>
Reference: <author> Nocker, E.G.J.M.H. </author> <year> (1990). </year> <title> Strictness analysis based on abstract reduction, </title> <booktitle> Proc. of Second International Workshop on Implementation of Functional Languages on Parallel Architectures , University of Nijmegen, </booktitle> <institution> the Netherlands, </institution> <type> Technical Report 90-16, </type> <pages> pp. 297-321. </pages>
Reference: <author> Nocker, E.G.J.M.H. and J.E.W. </author> <month> Smetsers </month> <year> (1990). </year> <title> Partially strict data types, </title> <booktitle> Proc. of Second International Workshop on Implementation of Functional Languages on Parallel Architectures , University of Nijmegen, </booktitle> <institution> the Netherlands, </institution> <type> Technical Report 90-16, </type> <pages> pp. 237-255. </pages>
Reference: <author> Nocker, E.G.J.M.H., J.E.W. Smetsers, M.C.J.D. van Eekelen and M.J. </author> <title> Plasmeijer (1991). Concurrent clean, </title> <booktitle> Proc. of Parallel Architectures and Languages Europe (PARLE'91), </booktitle> <address> Eindhoven, The Netherlands, </address> <publisher> Springer Verlag, LNCS 505, </publisher> <pages> pp. 202-219. </pages>
Reference: <editor> Peyton Jones, S.L. and J. </editor> <booktitle> Salkild (1989). The spineless tagless g-machine, Proc. of Conference on Functional Programming Languages and Computer Architecture (FPCA'89), </booktitle> <address> London, UK, </address> <publisher> Addison Wesley, </publisher> <pages> pp. 184-201. </pages>
Reference: <author> Plasmeijer, M.J. and M.C.J.D. </author> <title> van Eekelen (1993). Functional Programming and Parallel Graph Rewriting, </title> <type> Addison Wesley, </type> <institution> University of Nijmegen, The Netherlands. </institution>
Reference: <author> Smetsers, J.E.W. </author> <year> (1989). </year> <title> Compiling clean to abstract abc-machine code, </title> <institution> Technical Report 89-20 , University of Nijmegen. </institution> <month> 34 </month>
References-found: 22

