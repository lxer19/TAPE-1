URL: http://www.cs.wisc.edu/~cs640-1/papers/high-speed-lookups.ps
Refering-URL: http://www.cs.wisc.edu/~cs640-1/740.syllabus.html
Root-URL: http://www.cs.wisc.edu
Email: fwaldvogel,plattnerg@tik.ee.ethz.ch  fvarghese,jstg@ccrc.wustl.edu  
Title: Scalable High Speed IP Routing Lookups  
Author: Marcel Waldvogel George Varghese Jon Turner Bernhard Plattner 
Address: urich, Switzerland  in St. Louis, USA  
Affiliation: Computer Engineering and Networks Laboratory ETH Z  Computer and Communications Research Center Washington University  
Abstract: Internet address lookup is a challenging problem because of increasing routing table sizes, increased traffic, higher speed links, and the migration to 128 bit IPv6 addresses. IP routing lookup requires computing the best matching prefix, for which standard solutions like hashing were believed to be inapplicable. The best existing solution we know of, BSD radix tries, scales badly as IP moves to 128 bit addresses. Our paper describes a new algorithm for best matching prefix using binary search on hash tables organized by prefix lengths. Our scheme scales very well as address and routing table sizes increase: independent of the table size, it requires a worst case time of log 2 (address bits) hash lookups. Thus only 5 hash lookups are needed for IPv4 and 7 for IPv6. We also introduce Mutating Binary Search and other optimizations that, for a typical IPv4 backbone router with over 33,000 entries, considerably reduce the average number of hashes to less than 2, of which one hash can be simplified to an indexed array access. We expect similar average case behavior for IPv6. 
Abstract-found: 1
Intro-found: 1
Reference: [CV95] <author> Girish Chandranmenon and George Varghese. </author> <title> Trading packet headers for packet processing. </title> <booktitle> In Proceedings of SIGCOMM 95, </booktitle> <address> Boston, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Protocol Based Solutions One way to get around the problems of IP lookup is to have extra information sent along with the packet to simplify or even totally get rid of IP lookups at routers. Two major proposals along these lines are IP Switching [NMH97] and Tag Switching <ref> [CV95, CV96, R + 96] </ref>. Both schemes require large, contiguous parts of the network to adopt their protocol changes before they will show a major improvement. The speedup is achieved by adding information on the destination to every IP packet.
Reference: [CV96] <author> Girish Chandranmenon and George Varghese. </author> <title> Trading packet headers for packet processing. </title> <journal> IEEE Transactions on Networking, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: Protocol Based Solutions One way to get around the problems of IP lookup is to have extra information sent along with the packet to simplify or even totally get rid of IP lookups at routers. Two major proposals along these lines are IP Switching [NMH97] and Tag Switching <ref> [CV95, CV96, R + 96] </ref>. Both schemes require large, contiguous parts of the network to adopt their protocol changes before they will show a major improvement. The speedup is achieved by adding information on the destination to every IP packet.
Reference: [D + 97] <author> Dan Decasper et al. </author> <title> Crossbow a toolkit for integrated services over cell switched IPv6. </title> <booktitle> In Proceedings of the IEEE ATM'97 workshop, </booktitle> <address> Lisboa, Portugal, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: In spite of potential improvements, we believe our algorithm is ready for practical use. To prove this, it will be incorporated into the Crossbow project <ref> [D + 97] </ref>, a joint project between ETH and Washington University. The goal of Crossbow is to build a extensible framework for IPv6 as well as a high-speed IPv6 cell-switched router with QoS guarantees.
Reference: [DH96] <author> Steven Deering and Robert Hinden. </author> <title> Internet protocol, </title> <note> version 6 (IPv6) specification (RFC1883). ftp:// ds.internic.net/rfc/rfc1883.txt, </note> <year> 1996. </year>
Reference-contexts: But with massive growth of the Internet together with the increasing forces for connectivity to multiple ISPs (mul-tihoming) and meshing between the ISPs, we expect the routing tables to grow. Another new feature of IPv6, Anycast addresses <ref> [HD96, DH96] </ref>, may (depending on how popular they will become) add a very large number of host routes and other routes with very long prefixes. So most sites will still have to cope with a large number of rout-ing entries at different prefix lengths.
Reference: [Dig95] <institution> Digital. GIGAswitch/FDDI networking switch. </institution> <note> http:// www.networks.europe.digital.com/html/products guide/ hp-swch3.html, </note> <year> 1995. </year>
Reference-contexts: While there are other chores, such as updating TTL fields, these are computationally inexpensive compared to the major task of address lookup. Data link Bridges have been doing address lookups at 100 Mbps <ref> [Dig95] </ref> for many years. However, bridges only do exact matching on the destination (MAC) address, while Internet routers have to search their database for the longest prefix matching a destination IP address. <p> The inner component, most likely done as a hash table in software implementations, can be implemented using (perfect) hashing hardware such as described in <ref> [Dig95] </ref>. Alternatively, a fast CAM could be used. The outer loop in the Rope scheme can be implemented as a shift register.
Reference: [F + 93] <author> Vince Fuller et al. </author> <title> Classless Inter-Domain Routing (CIDR): an address assignment and aggregation strategy (RFC1519). </title> <address> ftp://ds.internic.net/rfc/rfc1519.txt, </address> <year> 1993. </year>
Reference: [HD96] <author> Robert Hinden and Steven Deering. </author> <title> IP version 6 addressing architecture (RFC1884). </title> <address> ftp://ds.internic.net/ rfc/rfc1884.txt, </address> <year> 1996. </year>
Reference-contexts: But with massive growth of the Internet together with the increasing forces for connectivity to multiple ISPs (mul-tihoming) and meshing between the ISPs, we expect the routing tables to grow. Another new feature of IPv6, Anycast addresses <ref> [HD96, DH96] </ref>, may (depending on how popular they will become) add a very large number of host routes and other routes with very long prefixes. So most sites will still have to cope with a large number of rout-ing entries at different prefix lengths.
Reference: [Lab96] <author> Craig Labovitz. </author> <title> Routing analysis. </title> <address> http://www.merit.edu/ ipma/analysis/routing.html, </address> <year> 1996. </year>
Reference: [Mer96] <author> Merit Network, Inc. </author> <title> 12/19/96 routing table snapshot at Mae-East NAP. http://www.merit.edu/ipma/ routing table/, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: In addition, we use several optimizations to significantly reduce the average number of hashes needed. For example, our analysis of an IPv4 forwarding table from an Internet backbone router at the Mae-East network access point (NAP) <ref> [Mer96] </ref> show an average case performance of less than two hashes, where the first hash can be replaced by a simple index table lookup. The rest of the paper is organized as follows. Section 2 describes drawbacks with existing approaches to IP lookups. <p> In fact, the number of marker nodes is limited by the number of 1 bits in Level (P ). Clearly this results in a logarithmic number of markers. In the typical case, many prefixes will share markers (Table 1), reducing the marker storage further. In our sample routing database <ref> [Mer96] </ref>, the storage required will increase by 25%. <p> Usually, the performance of general algorithms can be improved by tailoring them to the particular datasets they will be applied to. As can be seen in Figure 7, the distribution of a typical backbone router's forwarding table as obtained from <ref> [Mer96] </ref>, the entries are not equally distributed over the different prefix lengths. All the concepts we described below apply to any set of addresses; however, we will quantify the potential improvements using the existing table. <p> To do so, we ran the following experiments on a 200 MHz Pentium Pro from C code using the compiler's maximum optimization (Table 6). The forwarding table was the same 33,000 entry forwarding table <ref> [Mer96] </ref> used before.
Reference: [MF93] <author> A. McAuley and P. Francis. </author> <title> Fast routing table lookup using CAMs. </title> <booktitle> In Proceedings of INFOCOM, </booktitle> <pages> pages 1382 1391, </pages> <month> March-April </month> <year> 1993. </year>
Reference-contexts: Some CAMs allow a mask of bits that must be matched. Although there are expensive so-called ternary CAMs available allowing a mask to be specified per word, the mask must typically be specified in advance. It has been shown that these CAMs can be used to do BMP lookups <ref> [MF93, MTW95] </ref>, but the solutions are usually expensive. Large CAMs are usually slower and much more expensive than ordinary memory. Typical CAMs are small, both in the number of bits per entry and the number of entries.
Reference: [MTW95] <author> Anthony J. McAuley, Paul F. Tsuchiya, and Daniel V. Wilson. </author> <title> Fast multilevel hierarchical routing table using content-addressable memory. </title> <type> U.S. Patent serial number 034444. </type> <institution> Assignee Bell Communications research Inc Livingston NJ, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Some CAMs allow a mask of bits that must be matched. Although there are expensive so-called ternary CAMs available allowing a mask to be specified per word, the mask must typically be specified in advance. It has been shown that these CAMs can be used to do BMP lookups <ref> [MF93, MTW95] </ref>, but the solutions are usually expensive. Large CAMs are usually slower and much more expensive than ordinary memory. Typical CAMs are small, both in the number of bits per entry and the number of entries.
Reference: [NMH97] <author> Peter Newman, Greg Minshall, and Larry Huston. </author> <title> IP Switching and gigabit routers. </title> <journal> IEEE Communications Magazine, </journal> <month> January </month> <year> 1997. </year>
Reference-contexts: Protocol Based Solutions One way to get around the problems of IP lookup is to have extra information sent along with the packet to simplify or even totally get rid of IP lookups at routers. Two major proposals along these lines are IP Switching <ref> [NMH97] </ref> and Tag Switching [CV95, CV96, R + 96]. Both schemes require large, contiguous parts of the network to adopt their protocol changes before they will show a major improvement. The speedup is achieved by adding information on the destination to every IP packet. <p> Second, a typical backbone router of the future may have hundreds of thousands of prefixes and be expected to forward packets at Gigabit rates. Although studies have shown that caching in the backbone can result in hit ratios up to and exceeding 90 percent <ref> [Par96, NMH97] </ref>, the simulations of cache behavior were done on large, fully associative caches which commonly are implemented using CAMs. CAMs, as already mentioned, are usually expensive.
Reference: [O'D97] <author> Mike O'Dell. GSE analternate addressing architec-ture for IPv6. ftp://ds.internic.net/internet-drafts/draft-ietf-ipngwg-gseaddr-00.txt, </author> <year> 1997. </year>
Reference-contexts: However, three methods are currently being discussed in the IPng working group of the Internet Engineering Task Force (IETF). All of them use hierarchical schemes to provide as much routing aggregation as possible: provider-based addressing [R + 97], geographical addressing, and GSE (Global, Site, End-system) <ref> [O'D97] </ref>. All these schemes help to reduce routing information. In the optimal case of a strictly hierarchical environment, it can go down to a handful of entries.
Reference: [Par96] <author> Craig Partridge. </author> <title> Locality and route caches. </title> <booktitle> In NSF Workshop on Internet Statistics Measurement and Analysis, </booktitle> <address> San Diego, CA, USA, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Second, a typical backbone router of the future may have hundreds of thousands of prefixes and be expected to forward packets at Gigabit rates. Although studies have shown that caching in the backbone can result in hit ratios up to and exceeding 90 percent <ref> [Par96, NMH97] </ref>, the simulations of cache behavior were done on large, fully associative caches which commonly are implemented using CAMs. CAMs, as already mentioned, are usually expensive.
Reference: [Per92] <author> Radia Perlman. </author> <title> Interconnections, Bridges and Routers. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Modifications of Exact Matching Schemes Classical fast lookup techniques such hashing and binary search do not directly apply to the best matching prefix (BMP) problem since they only do exact matches. A modified binary search technique, originally due to Butler Lampson, is described in <ref> [Per92] </ref>. However, this method requires log 2 2N steps, with N being the number of routing table entries. With current routing table sizes, the worst case would be 17 data lookups, each requiring at least one costly memory access.
Reference: [R + 96] <editor> Yakov Rekhter et al. </editor> <title> Tag switching architecture overview. </title> <address> ftp://ds.internic.net/internet-drafts/draft-rfced-info-rekhter-00.txt, </address> <year> 1996. </year> <institution> [R 97] Yakov Rekhter et al. An IPv6 provider-based uni-cast address format (RFC2073). ftp://ds.internic.net/rfc/ rfc2073.txt, </institution> <year> 1997. </year>
Reference-contexts: Protocol Based Solutions One way to get around the problems of IP lookup is to have extra information sent along with the packet to simplify or even totally get rid of IP lookups at routers. Two major proposals along these lines are IP Switching [NMH97] and Tag Switching <ref> [CV95, CV96, R + 96] </ref>. Both schemes require large, contiguous parts of the network to adopt their protocol changes before they will show a major improvement. The speedup is achieved by adding information on the destination to every IP packet. <p> Tag switching is based on a concept originally described by Chandranmenon and Varghese ([CV95, CV96]) using the name threaded indices. The current tag switching proposal <ref> [R + 96] </ref> goes further than threaded indices by adding a stack of indices to deal with hierarchies. Neither scheme can completely avoid ordinary IP lookups. Both schemes require the ingress router (to the portions of the network implementing their protoocol) to perform a full routing decision.
Reference: [Rob97] <author> Erica Roberts. </author> <title> IP on speed. </title> <journal> Data Communications Mag azine, </journal> <pages> pages 8496, </pages> <month> March </month> <year> 1997. </year>
Reference: [Skl93] <author> Keith Sklower. </author> <title> A tree-based routing table for Berkeley Unix. </title> <type> Technical report, </type> <institution> University of California, Berke-ley, </institution> <year> 1993. </year>
Reference-contexts: However, for several years now, it was considered not to be apparent how to accommodate hierarchies while using hashing, other than rehashing for each level of hierarchy possible <ref> [Skl93] </ref>. Our paper describes a novel algorithmic solution to longest prefix match, using binary search over hash tables organized by the length of the prefix. Our solution requires a worst case complexity 3 of O (log 2 W ), with W being the length of the address in bits. <p> As with any binary search scheme, the average number of accesses is log 2 (2N ) 1. A second classical solution would be to reapply any exact match scheme for each possible prefix length <ref> [Skl93] </ref>. This is even more expensive, requiring W iterations of the exact match scheme used (e.g. W = 128 for IPv6). 3 This assumes assuming O (1) for hashing, which can be achieved using perfect hashing, although limited collisions do not affect performance significantly. <p> Trie Based Schemes The most commonly available IP lookup implementation is found in the BSD kernel, and is a radix trie implementation <ref> [Skl93] </ref>. If W is the length of an address, the worst-case time in the basic implementation can be shown to be O (W 2 ). Current implementations have made a number of improvements on Sklower's original implementation. <p> The best matching prefix problem has been around for twenty years in theoretical computer science; to the best of our knowledge, the best theoretical algorithms are based on tries. While inefficient algorithms based on hashing <ref> [Skl93] </ref> were known, we have discovered an extremely efficient algorithm that scales with the logarithm of the address size and so is very close to the theoretical limit of O (log log N ). Our algorithm contains both intellectual and practical contributions.
References-found: 18

