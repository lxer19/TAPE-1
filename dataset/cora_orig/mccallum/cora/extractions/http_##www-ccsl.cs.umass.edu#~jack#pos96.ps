URL: http://www-ccsl.cs.umass.edu/~jack/pos96.ps
Refering-URL: http://www-ccsl.cs.umass.edu/~jack/
Root-URL: 
Email: fkaplan,wiledeng@cs.umass.edu  
Title: Toward Painless Polylingual Persistence  
Author: Alan Kaplan and Jack C. Wileden 
Date: February 29, 1996  May, 1996.  
Note: PREPRINT  Appeared in Proceedings of the Seventh International Workshop on Persistent  
Address: Amherst, Massachusetts 01003 USA  NJ,  
Affiliation: Department of Computer Science University of Massachusetts  Object Systems, Cape,  
Abstract: Heterogeneity in persistent object systems gives rise to a range of interoperability problems. For instance, a given object-oriented database (OODB) may contain data objects originally defined, created and persistently stored using the capabilities provided by several distinct programming languages, and an application may need to uniformly process those data objects. We call such a database polylingual and term the corresponding interoperability problem the polylingual access problem. While many of today's OODBs support multiple programming language interfaces (we term such systems multilingual), none provide transparent polylingual access to persistent data. Instead, present day interoperability mechanisms generally rely on external data definition languages (such as ODMG's ODL), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language interface mechanisms provided in individual programming languages. Using such mechanisms make polylingual access painful. In this paper we introduce PolySPIN, an approach supporting polylingual persistence, interoperability and naming for object-oriented databases. We describe our 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Butterworth, A. Otis, and J. Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: We term this interoperability problem the polylingual access problem. Existing interoperability approaches provide little or no support for polylingual access, so new approaches must evolve to provide such support. While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [6], GemStone <ref> [1] </ref>), none provide transparent polylingual access to persistent 2 data.
Reference: [2] <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [6], GemStone [1]), none provide transparent polylingual access to persistent 2 data. Instead, present day interoperability mechanisms generally rely on external data definition languages (such as ODMG's ODL <ref> [2] </ref> or CORBA's IDL [8]), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language interface mechanisms provided in individual programming languages.
Reference: [3] <author> A. Kaplan and J. Wileden. Conch: </author> <title> Experimenting with enhanced name management for persistent object systems. </title> <booktitle> In Sixth International Workshop on Persistent Object Systems, </booktitle> <address> Tarascon, Provence, France, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: its interface are beyond the scope of this paper, the name management mechanism in PolySPIN allows names to be assigned to objects in binding spaces (where binding spaces are collections of name-object pairs) and names for objects to be resolved in contexts (where contexts are constructed from existing binding spaces) <ref> [3] </ref>.
Reference: [4] <author> A. Kaplan and J. C. Wileden. PolySPINner 1.0: </author> <title> Automating support for interoperability in polylingual software systems. </title> <note> In Preparation. </note>
Reference-contexts: As a step toward automating this process, we have developed a tool called PolySPINner. (A more detailed description of PolySPINner can be found in <ref> [4] </ref>.) The overall objective of PolySPINner is to provide transparent polylingual access to objects with minimal programmer intervention as well as minimal re-engineering of existing source code. The current prototype uses an exact signature matching rule [12] in determining the compatibility between C++ and CLOS classes.
Reference: [5] <author> A. Kaplan and J. C. Wileden. </author> <title> Name management and object technology for advanced software. </title> <booktitle> In International Symposium on Object Technologies for Advanced Software, number 742 in Lecture Notes in Computer Science, </booktitle> <pages> pages 371-392, </pages> <address> Kanazawa, Japan, </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Typically provided by a name management mechanism, existing approaches in OODBs can be characterized as being relatively ad hoc and weak <ref> [5] </ref>. PolySPIN addresses these various shortcomings by providing a uniform, flexible and powerful approach to name management.
Reference: [6] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: We term this interoperability problem the polylingual access problem. Existing interoperability approaches provide little or no support for polylingual access, so new approaches must evolve to provide such support. While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore <ref> [6] </ref>, GemStone [1]), none provide transparent polylingual access to persistent 2 data.
Reference: [7] <author> R. Morrison, F. Brown, R. Connor, Q. Cutts, A. Dearle, G. Kirby, and D. Munro. </author> <title> The Napier88 Reference Manual (Release 2.0). </title> <institution> University of St. Andrews, </institution> <month> Nov. </month> <year> 1993. </year> <month> (CS/93/15). </month>
Reference-contexts: Coupled with the persistent store, this approach results in a name-based persistence mechanism where any object (including those in its transitive closure) bound to a name in a binding space reachable from a specially designated root binding space automatically persists. The approach is based on Napier <ref> [7] </ref>, where environments correspond to binding spaces. The name management mechanism in PolySPIN is more general, however, since it supports objects defined in multiple languages. To participate in this mechanism, an object's class definition must inherit from a common base class, designated the NameableObject class.
Reference: [8] <author> OMG. </author> <title> Object management architecture guide, revision 2.0. OMG TC Document 92.11.1, Object Management Group, Framingham, </title> <address> MA, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: While many of today's OODBs support multiple programming language interfaces (e.g., ObjectStore [6], GemStone [1]), none provide transparent polylingual access to persistent 2 data. Instead, present day interoperability mechanisms generally rely on external data definition languages (such as ODMG's ODL [2] or CORBA's IDL <ref> [8] </ref>), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language interface mechanisms provided in individual programming languages.
Reference: [9] <institution> Texas Instruments, Inc., Dallas, </institution> <month> TX. </month> <title> Open OODB Query Language User Manual, release 0.2 (alpha) edition, </title> <year> 1993. </year>
Reference-contexts: They would also like to be able to employ either navigational access or associative access in processing the personnel information from the various colleges. An example of an OQL-style query (based on <ref> [9] </ref>) that might be part of a C++ application, in this case seeking candidates for early retirement incentives, is shown in Figure 2.
Reference: [10] <author> D. L. Wells, J. A. Blakely, and C. W. Thompson. </author> <title> Architecture of an open object-oriented management system. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-82, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: We then describe PolySPIN, a framework supporting persistence, interoperability and naming for polylingual object-oriented databases, and its current realization as extensions to the TI/Arpa Open Object-Oriented Database <ref> [10] </ref>. In addition, we show how PolySPIN can facilitate aspects of interoperability in polylingual object-oriented databases, returning to our earlier example to illustrate PolySPIN's capabilities. It is our assertion that PolySPIN represents an initial step toward painless polylingual persistence. 2. <p> Throughout this section, we will refer to the scenario presented in Section 2. as a means of explicating various aspects of PolySPIN. All the PolySPIN features described in this section have been implemented as extensions to the TI/Arpa Open Object-Oriented Database <ref> [10] </ref>, using Sun C++ and the Lucid Common Lisp Object System (CLOS). 4.1 Name Management and Persistence in PolySPIN While the benefits of orthogonal persistence capabilities offered by OODBs are widely known, relatively little attention has been to paid to how persistent objects should be organized (from an application's perspective) in
Reference: [11] <author> J. C. Wileden, A. L. Wolf, W. R. Rosenblatt, and P. L. Tarr. </author> <title> Specification level interoperability. </title> <journal> Communications of the ACM, </journal> <volume> 34(5) </volume> <pages> 73-87, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In the next section, we briefly discuss interoperability goals and issues in general. Later sections then indicate how these goals and issues are addressed in our PolySPIN approach. 3. OODB Heterogeneity and Interoperability: Goals and Issues Our work on interoperability is, and has for several years <ref> [11] </ref> been, motivated by a primary concern for the impact of an interoperability approach on applications developers. In our view, among the most important objectives for any approach to interoperability are the following: * Developers should have maximum freedom to define types of objects that their programs manipulate. <p> Typing How do developers determine whether the types of objects that they wish to share are of compatible types? For object-oriented database technology, most approaches to addressing this question have been based on use of a unifying type model <ref> [11] </ref>, such 6 as the ODMG ODL. While such approaches may suffice for the easiest and common interoperability scenarios, however, they are inadequate for the megaprogramming case.
Reference: [12] <author> A. M. Zaremski and J. M. Wing. </author> <title> Signature matching, a tool for using software libraries. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 4(2), </volume> <month> Apr. </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: The current prototype uses an exact signature matching rule <ref> [12] </ref> in determining the compatibility between C++ and CLOS classes. It also encapsulates the foreign function interface mechanism for both Sun C++ and Lucid CLOS, as well as the various internal features of PolySPIN.
References-found: 12

