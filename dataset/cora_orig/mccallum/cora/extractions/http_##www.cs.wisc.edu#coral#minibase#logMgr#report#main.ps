URL: http://www.cs.wisc.edu/coral/minibase/logMgr/report/main.ps
Refering-URL: http://www.cs.wisc.edu/coral/minibase/logMgr/report/
Root-URL: http://www.cs.wisc.edu
Title: An ARIES Log Manager for Minirel  
Author: Ajitkumar Natarajan (ajitk) Cjin Pheow Lee (cjin) 
Date: May 13, 1995  
Pubnum: CS 764 Project Report  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Mohan et al. 92] <author> C Mohan, D Haderle, B Lindsay, H Pirahesh, </author> <title> P Schwarz. ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging. </title> <journal> ACM Transactions on Database Systems. </journal> <volume> 17(1) </volume> <pages> 94-162. </pages> <year> 1992. </year>
Reference-contexts: It is clear that logging is an integral part of the recovery subsystem. This project report describes the design and implementation of a log manager for a recovery subsystem based on ARIES <ref> [Mohan et al. 92] </ref>. The recovery subsystem is a part of a simple, multi-user RDBMS called Minirel. 1 Section 2 briefly describes how ARIES recovery works. This section also introduces the features expected of a log manager based on ARIES. <p> Redo. Starting at the earliest LSN determined in pass (1) above, the log is read forward and each update redone. 3. Undo. The log is scanned backward and updates corresponding to loser transactions are undone. For further details of the recovery process, see <ref> [Mohan et al. 92, Ramamurthy & Tsoi 95] </ref>. It is clear from this description of ARIES that the following features are required for a log manager: 1. Ability to write log records. The log manager should maintain a log tail in main memory and write log records to it.
Reference: [Murthy & Narasimhan 95] <author> R Murthy, S Narasimhan. </author> <title> Heap File and Space Management in Minirel. </title> <type> CS 764 Project Report. </type> <year> 1995. </year>
Reference-contexts: We also need the forced write semantics when a write succeeds, it should be guaranteed that the changes have made it to disk. Further, changing over to a duplex-disk setup or to a raw disk interface should change the least amount of code. Class DB <ref> [Murthy & Narasimhan 95] </ref> was a candidate for this low level file maintenance. It provided pagefile semantics and provided a forced-write semantics. However, it also managed a space map and allowed multiple page files to reside within the DB.
Reference: [Qiu & Su 95] <author> K Qiu, F Su. </author> <title> Minirel Buffer Manager Report. </title> <type> CS 764 Project Report. </type> <year> 1995. </year>
Reference-contexts: Read the log record that immediately follows the supplied log record. 4. Append a log record to the end of the log. 5. Flush the log tail to disk. Anyone who wants the log tail flushed (except the buffer manager) will call log::flush. The buffer manager <ref> [Qiu & Su 95] </ref> will call log::bufmgr flush. When log::flush is invoked, it will flush the log tail and inform the buffer manager of the last LSN that made it to disk. The buffer manager can use this information to enforce WAL efficiently.
Reference: [Ramamurthy & Tsoi 95] <author> R Ramamurthy, </author> <title> K Tsoi. An ARIES Recovery Manager for Minirel. </title> <type> CS 764 Project Report. </type> <year> 1995. </year> <month> 16 </month>
Reference-contexts: Redo. Starting at the earliest LSN determined in pass (1) above, the log is read forward and each update redone. 3. Undo. The log is scanned backward and updates corresponding to loser transactions are undone. For further details of the recovery process, see <ref> [Mohan et al. 92, Ramamurthy & Tsoi 95] </ref>. It is clear from this description of ARIES that the following features are required for a log manager: 1. Ability to write log records. The log manager should maintain a log tail in main memory and write log records to it. <p> The derived class object shown corresponds to a normal update log record. For exact representation and details, see <ref> [Ramamurthy & Tsoi 95] </ref>. 4.2 Log records The log consists of a sequence of log records. Each log record has a fixed header portion and a variable data portion. Class logrecord (header file: logrecord.h) declares the basic log record.
References-found: 4

