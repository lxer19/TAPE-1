URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/chrislee/www/icra98.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/chrislee/www/publications.html
Root-URL: 
Title: Message-based evaluation for high-level robot control  
Author: Christopher Lee Yangsheng Xu yz 
Address: Pittsburgh, PA, USA  Hong Kong, Hong Kong  
Affiliation: Robotics Institute, Carnegie Mellon University  Department of Mechanical and Automation Engineering The Chinese University of  
Abstract: In this paper, we present a method for high-level control of robots whose low-level software is based on dynamically reconfigurable, reusable real-time software modules. Our approach is to use an embedded interpreter for a general-purpose programming language to direct the operation of the low-level modules toward meeting the task-level goals of the robot. To this end, we present RSK, a virtual-machine kernel implementing a Scheme interpreter capable of hard real-time operation, and employing a method of code execution we call message-based evaluation (MBE). MBE is a novel combination of a traditional code execution model and a message-passing architecture, which simplifies the process of writing code for managing the robot's reconfigurable subsystem. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Stewart, R. Volpe, and P. Khosla, </author> <title> Integration of real-time software modules for reconfigurable sensor-based control systems, </title> <booktitle> in Proceedings of IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <pages> pp. 325332, </pages> <year> 1992. </year>
Reference-contexts: For this purpose, they provide standard interface specifications for implementing reusable real-time software modules, and a library of functions for building and using configurations of these modules <ref> [1] </ref>. A well-written and debugged library of real-time modules thus facilitates rapid development of reliable sensor-based control systems. In Chimera, these modules or port-based objects, typically cycle at some fixed frequency and communicate their inputs and outputs through a global state-variable table.
Reference: [2] <author> J. D. Morrow, </author> <title> Sensorimotor primitives for programming robotic assembly skills. </title> <type> PhD thesis, </type> <institution> Robotics Institute, Carnegie Mellon University, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: Several strategies have previously been used for managing such dynamically reconfigurable subsystems, including on-line state machines, and separate high-level programs running on host workstations. In several Chimera-based robot architectures <ref> [2, 3] </ref>, the high-level process reconfigures the real-time subsystem based on an on-line state machine interpreter responding to messages sent from modules in the reconfigurable subsystem. Con-trolShell [4] for the VxWorks operating system also uses a state machine for managing dynamically reconfigurable real-time subsystems.
Reference: [3] <author> A. Douglas and Y. Xu, </author> <title> Real-time shared control system for space telerobotics, </title> <journal> Journal of Intelligent and Robotic Systems: Theory and Applications, </journal> <volume> vol. 13, </volume> <pages> pp. 24762, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Several strategies have previously been used for managing such dynamically reconfigurable subsystems, including on-line state machines, and separate high-level programs running on host workstations. In several Chimera-based robot architectures <ref> [2, 3] </ref>, the high-level process reconfigures the real-time subsystem based on an on-line state machine interpreter responding to messages sent from modules in the reconfigurable subsystem. Con-trolShell [4] for the VxWorks operating system also uses a state machine for managing dynamically reconfigurable real-time subsystems.
Reference: [4] <author> S. Schneider, V. Chen, J. Steele, and G. Pardo-Castellote, </author> <title> The ControlShell component-based real-time programming system, and its application to the Marsokhod Martian rover, </title> <booktitle> in ACM SIGPLAN 1995 Workshop on Languages, Compilers, and Tools for Real-Time Systems, vol. 30 of SIGPLAN Notices, </booktitle> <pages> pp. 14655, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In several Chimera-based robot architectures [2, 3], the high-level process reconfigures the real-time subsystem based on an on-line state machine interpreter responding to messages sent from modules in the reconfigurable subsystem. Con-trolShell <ref> [4] </ref> for the VxWorks operating system also uses a state machine for managing dynamically reconfigurable real-time subsystems. Implementing interpreters for state machines is fairly straightforward, and state-machines are well understood and amenable to design through graphical user interfaces.
Reference: [5] <author> F. Boussinot and R. D. Simone, </author> <booktitle> The Esterel language, Proceedings of the IEEE, </booktitle> <volume> vol. 79, </volume> <pages> pp. 12931304, </pages> <year> 1991. </year>
Reference-contexts: Con-trolShell [4] for the VxWorks operating system also uses a state machine for managing dynamically reconfigurable real-time subsystems. Implementing interpreters for state machines is fairly straightforward, and state-machines are well understood and amenable to design through graphical user interfaces. Synchronous languages such as Esterel <ref> [5] </ref> which is used in the ORCCAD [6] robot application development system, may also be useful for this purpose.
Reference: [6] <author> D. Simon, B. Espiau, K. Kapellos, and R. Pissard-Gibollet, ORCCAD: </author> <title> software engineering for real-time robotics; a technical insight, </title> <journal> Robotica, </journal> <volume> vol. 15, no. 1, </volume> <pages> pp. 1115, </pages> <year> 1997. </year>
Reference-contexts: Implementing interpreters for state machines is fairly straightforward, and state-machines are well understood and amenable to design through graphical user interfaces. Synchronous languages such as Esterel [5] which is used in the ORCCAD <ref> [6] </ref> robot application development system, may also be useful for this purpose.
Reference: [7] <author> M. Gertz, D. Stewart, and P. Khosla, </author> <title> A software architecture-based human-machine interface for reconfigurable sensor-based control systems, </title> <booktitle> in Proceedings of 8th IEEE International Symposium on Intelligent Control, </booktitle> <address> (Chicago, IL), </address> <pages> pp. 7580, </pages> <publisher> IEEE, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: Another approach for managing reconfigurable subsystems of real-time control modules is represented by Onika, a visual programming environment for designing control systems as configurations of modules, and for controlling the reconfiguration of these control systems during execution of Chimera applications <ref> [7] </ref>. Onika's visual programming language is limited in terms of the algorithms it can represent, however, and because it manages dynamic reconfiguration of the low-level Chimera modules from a non real-time workstation, it is inappropriate for managing reconfigurations which must occur in hard real-time.
Reference: [8] <author> Y. Xu, C. Lee, and H. B. Brown, Jr., </author> <title> A separable combination of wheeled rover and arm mechanism: </title> <booktitle> (DM) 2 , in Proceedings of the 1996 IEEE International Conference on Robotics and Automation, </booktitle> <volume> vol. 3, </volume> <pages> pp. 23838, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1996. </year>
Reference-contexts: Development of a robot architecture for the Dual-use Mobile Detachable Manipulator, (DM) 2 , motivated our adoption of this strategy. (DM) 2 , shown in Figure 2, is a mobile robot consisting of a mobile base and a detachable manipulator arm <ref> [8] </ref>. The manipulator is a symmetric 5-DOF arm with a gripper at each end, and may either grasp the mobile base with one gripper to become a mobile manipulator system, or detach from the base and walk hand-over hand by grasping special handles with its grippers.
Reference: [9] <author> C. Lee and Y. Xu, </author> <title> (DM) 2 : A modular solution for robotic lunar missions, </title> <journal> International Journal of Space Technology, </journal> <volume> vol. 16, no. 1, </volume> <pages> pp. 4958, </pages> <year> 1996. </year>
Reference-contexts: In all these cases, we need to specify alternative actions to be taken if any individual operation fails. In developing a software architecture for (DM) 2 , we initially built an interpreter for a simple, custom-designed scripting language to manage the dynamic reconfigura-tions of the low-level real-time subsystem <ref> [9] </ref>. After some experience programming this system, however, we decided that a more powerful, general-purpose language would be better suited to our needs and chose Scheme. Scheme is a Lisp dialect with a concise specification for which small, efficient interpreters can be written.
Reference: [10] <author> H. Abelson et al., </author> <title> Revised 4 report on the algorithmic language Scheme, </title> <booktitle> ACM Lisp Pointers IV, </booktitle> <volume> vol. 4, </volume> <month> July-September </month> <year> 1991. </year>
Reference-contexts: Scheme is a Lisp dialect with a concise specification for which small, efficient interpreters can be written. It is also a powerful language commonly used for writing artificial-intelligence algorithms and for programming in a functional style <ref> [10] </ref>. It is simple to use for writing descriptions of the operations necessary for high-level control of our robot, and we felt it easier to write more complex approaches to such task-level needs with a general-purpose programming language than with a state-machine description.
Reference: [11] <author> J. Rees and B. Donald, </author> <title> Program mobile robots in Scheme, </title> <booktitle> in Proceedings of 1992 IEEE International Conference on Robotics and Automation, (Nice, France), </booktitle> <pages> pp. 26818, </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: Because this determination involves a global analysis of the interpreter's memory pool, most commonly used garbage collection algorithms require that the interpreter be stopped during the collection in ways which are incompatible with real-time operation. Rees and Donald <ref> [11] </ref> use an embedded Scheme interpreter for control of small mobile robots. This interpreter is appropriate for their work, but garbage collection pauses make it inappropriate for use in real-time applications.
Reference: [12] <author> D. Friedman and D. Wise, </author> <title> Reference counting can manage the circular invironments of mutual recursion, </title> <journal> Information Processing Letters, </journal> <volume> vol. 8, </volume> <pages> pp. 4145, </pages> <month> Janary </month> <year> 1979. </year>
Reference-contexts: This is a local strategy rather than a global strategy for analysis of memory usage, and can be done in small increments which preserve the overall responsiveness of the interpreter. Although this strategy can be made to work for managing the interpreter's own use of data structures <ref> [12] </ref>, and though this strategy has been successful for control-ling our robot without memory leaks, reference-counting cannot reclaim data-structures which point to themselves even when they are not referenced by any data structures in use by the interpreter.
Reference: [13] <author> P. Wilson, </author> <title> Uniprocessor garbage collection techniques, </title> <booktitle> in International Workshop on Memory Management, no. 637 in Springer-Verlag Lecture Notes in Computer Science, </booktitle> <address> (St. Malo, France), </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Fortunately, there are now methods which allow garbage collectors to run efficiently on stock hardware in hard real-time <ref> [13] </ref>, in addition to those which run on specialized hardware [14].
Reference: [14] <author> K. Nilsen, </author> <title> Reliable real-time garbage collection in C++, </title> <journal> Computing Systems, </journal> <volume> vol. 7, no. 4, </volume> <pages> pp. 467504, </pages> <year> 1994. </year>
Reference-contexts: Fortunately, there are now methods which allow garbage collectors to run efficiently on stock hardware in hard real-time [13], in addition to those which run on specialized hardware <ref> [14] </ref>.
Reference: [15] <author> P. Wilson and M. Johnstone, </author> <title> Real-time non-copying garbage collection, </title> <booktitle> in ACM OOPSLA Workshop on Memory Management and Garbage Collection, </booktitle> <address> (Washington D.C.), </address> <publisher> ACM, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: To allow programmers to use RSK for code which may use cyclic data structures, and to simplify the interpreter, we are implementing a real-time garbage collector based on the write-barrier strategy used in Wilson and Johnstone's real-time collector <ref> [15] </ref>. 5 Conclusion We have described dynamically reconfigurable subsystems for sensor-based control of robot systems, and presented the Robot Scheme Kernel (RSK), an embedded Scheme interpreter designed for high-level management of these subsystems.
References-found: 15

