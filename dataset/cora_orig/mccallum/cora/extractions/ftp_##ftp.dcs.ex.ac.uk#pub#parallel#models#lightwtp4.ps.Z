URL: ftp://ftp.dcs.ex.ac.uk/pub/parallel/models/lightwtp4.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: 
Email: Email: steve@dcs.exeter.ac.uk  
Title: PORTABILITY AND PARALLELISM WITH "LIGHTWEIGHT p4"  
Author: Adam Back and Stephen Turner, 
Date: November 29, 1993  
Address: Road, Exeter EX4 4PT England  
Affiliation: Department of Computer Science, University of Exeter, Prince of Wales  
Abstract: In this paper we discuss the use of cluster based computing as a basis for portable, heterogeneous parallel computing. We describe p4, a cluster based communications library which originates from Argonne National Laboratory, and our implementation of p4 on the transputer architecture. We present an extension to p4, "lightweight p4", which we designed for use in our research into automatic program parallelisation based on optimistic execution. We briefly discuss this research and the underlying techniques which are drawn from parallel discrete event simulation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D.F. Bacon and R.E. Strom. </author> <title> Optimistic parallelization of communicating sequential processes. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 26(7) </volume> <pages> 155-166, </pages> <year> 1991. </year>
Reference-contexts: The aims are to make use of more of the available parallelism than is possible with automatic parallelisation schemes based on static program analysis. Some work has been done by Bacon <ref> [1] </ref> on the optimistic execution of CSP (Communicating Sequential Processes) [11], but the use of optimistic execution as a parallelisation tool has been largely unexplored. The optimistic execution of a program can parallelise some code which static program analysis would indicate was sequential.
Reference: [2] <author> R. Butler and E. Lusk. </author> <title> User's guide to the p4 parallel programming system. </title> <type> Technical report, </type> <institution> ANL-92/17, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction The p4 parallel library <ref> [2, 3] </ref>, which originates from Argonne National Laboratory, provides a portable programming model for a large set of parallel machines. The model combines message passing with shared memory to form a cluster based model of parallel computing.
Reference: [3] <author> R. Butler and E. Lusk. </author> <title> Monitors, messages, and clusters: the p4 parallel programming system. </title> <type> Technical report, </type> <institution> Argonne National Laboratory, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction The p4 parallel library <ref> [2, 3] </ref>, which originates from Argonne National Laboratory, provides a portable programming model for a large set of parallel machines. The model combines message passing with shared memory to form a cluster based model of parallel computing.
Reference: [4] <author> K. M. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> S.E.5(5):440-452, </volume> <year> 1979. </year>
Reference-contexts: There are two approaches to ensuring that causality is not violated in the simulation: conservative and optimistic. 9 5.2 Conservative vs Optimistic Simulation Conservative approaches <ref> [4] </ref> avoid the possibility of any causality error ever occurring. These approaches rely on some strategy to determine when it is safe to process an event. This will be when all events which could affect the event in question have been processed.
Reference: [5] <author> L. Clarke and G. Wilson. </author> <title> Tiny: an efficient routing harness for the Inmos transputer. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(3) </volume> <pages> 221-245, </pages> <year> 1991. </year> <month> 11 </month>
Reference-contexts: Furthermore, the hardware provides no facilities to send a message which would have to traverse several hardware links. The T9000 transputer/C104 router provides a hardware solution to these problems [10, 19, 14]. On the current generation of transputers, several software solutions exist: Tiny <ref> [5] </ref>, the Southampton VCR (Virtual Channel Router) software [6] and the Inmos VCR [12].
Reference: [6] <author> M. Debbage, M.B. Hill, D. Nicole, and A. Sturges. </author> <title> The virtual channel router. </title> <journal> Transputer Communications, </journal> <volume> 1(1) </volume> <pages> 1-16, </pages> <year> 1993. </year>
Reference-contexts: The T9000 transputer/C104 router provides a hardware solution to these problems [10, 19, 14]. On the current generation of transputers, several software solutions exist: Tiny [5], the Southampton VCR (Virtual Channel Router) software <ref> [6] </ref> and the Inmos VCR [12].
Reference: [7] <author> J.J. Dongarra, R. Hempel, A.J.G. Hey, and D.W. Walker. </author> <title> A proposal for a user-level message passing interface in a distributed memory environment. </title> <type> Technical report, </type> <institution> ORNL/TM-12231, Oak Ridge National Laboratory, </institution> <year> 1993. </year>
Reference-contexts: We are closely following the efforts to define a message passing interface standard <ref> [7] </ref>, but this work is still at a draft stage. 1 The "lightweight p4" library also forms the basis of other research projects at Exeter University. 1 1.1 Clusters The cluster model in p4 groups together processes into clusters.
Reference: [8] <author> C.C. Douglas, T.G. Mattson, and M.H. Schultz. </author> <title> Parallel programming systems for workstation clusters. </title> <type> Technical report, </type> <institution> Yale University, </institution> <year> 1993. </year>
Reference-contexts: Our reasons for choosing p4 (which is related to PARMACS [9]) rather than other message passing systems such as PVM [18] were based on performance <ref> [8] </ref> and the suitability of the p4 programming model for our research.
Reference: [9] <author> R. Hempel. </author> <title> The ANL/GMD macros (PARMACS) in fortran for portable parallel programming using the message passing programming model users' guide and reference manual. </title> <type> Technical report, </type> <institution> GMD, </institution> <address> Sankt Augustin, Germany, </address> <year> 1991. </year>
Reference-contexts: These features are required for our research into the use of optimistic mechanisms, based on the virtual time paradigm [13], in general purpose parallel computing 1 . Our reasons for choosing p4 (which is related to PARMACS <ref> [9] </ref>) rather than other message passing systems such as PVM [18] were based on performance [8] and the suitability of the p4 programming model for our research.
Reference: [10] <author> A. Hipperson. </author> <title> T9000 virtual link performance: A comparison of short message performance on T805s and T9000s. </title> <type> Technical report, </type> <institution> PARSYS Limited, </institution> <address> England, </address> <year> 1993. </year>
Reference-contexts: Furthermore, the hardware provides no facilities to send a message which would have to traverse several hardware links. The T9000 transputer/C104 router provides a hardware solution to these problems <ref> [10, 19, 14] </ref>. On the current generation of transputers, several software solutions exist: Tiny [5], the Southampton VCR (Virtual Channel Router) software [6] and the Inmos VCR [12].
Reference: [11] <author> C. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: The aims are to make use of more of the available parallelism than is possible with automatic parallelisation schemes based on static program analysis. Some work has been done by Bacon [1] on the optimistic execution of CSP (Communicating Sequential Processes) <ref> [11] </ref>, but the use of optimistic execution as a parallelisation tool has been largely unexplored. The optimistic execution of a program can parallelise some code which static program analysis would indicate was sequential.
Reference: [12] <author> Inmos. </author> <title> ANSI C Toolset User Guide, </title> <year> 1992. </year>
Reference-contexts: The T9000 transputer/C104 router provides a hardware solution to these problems [10, 19, 14]. On the current generation of transputers, several software solutions exist: Tiny [5], the Southampton VCR (Virtual Channel Router) software [6] and the Inmos VCR <ref> [12] </ref>. We have implemented the p4 message passing calls in terms of the Inmos 4 VCR system, which provides virtual channels which can be placed between processes on any processor in a transputer network, the necessary through routing and multiplexing being performed by the VCR software.
Reference: [13] <author> D. R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <year> 1985. </year>
Reference-contexts: We present an extension to p4, "lightweight p4", designed to allow programming using lightweight pre-emptive processes while retaining portability. These features are required for our research into the use of optimistic mechanisms, based on the virtual time paradigm <ref> [13] </ref>, in general purpose parallel computing 1 . Our reasons for choosing p4 (which is related to PARMACS [9]) rather than other message passing systems such as PVM [18] were based on performance [8] and the suitability of the p4 programming model for our research. <p> These approaches rely on some strategy to determine when it is safe to process an event. This will be when all events which could affect the event in question have been processed. Optimistic methods <ref> [13] </ref> use a detection and recovery approach: causality errors are detected, and a roll-back mechanism is invoked to recover. A roll-back will be required when a causality violation is detected due to an event message arriving too late (this is known as a straggler).
Reference: [14] <author> M.D. May, P.W. Thompson, and P.H. Welch. </author> <title> Networks, Routers and Transputers. </title> <publisher> IOS Press, </publisher> <year> 1993. </year>
Reference-contexts: However there are two costs incurred here: the overhead of the software emulated segments, and the memory and time overhead of copying forks. The T9000 series transputers 3 <ref> [14, 19] </ref> have a segmented architecture, and will remove the need for software segment emulation. The code generation model the current Inmos C compiler provides allows us to construct a fork function which has a subset of the standard Unix fork functionality. <p> Furthermore, the hardware provides no facilities to send a message which would have to traverse several hardware links. The T9000 transputer/C104 router provides a hardware solution to these problems <ref> [10, 19, 14] </ref>. On the current generation of transputers, several software solutions exist: Tiny [5], the Southampton VCR (Virtual Channel Router) software [6] and the Inmos VCR [12].
Reference: [15] <author> SUN Microsystems. </author> <title> Network Programming Guide, </title> <year> 1990. </year>
Reference-contexts: To allow messages to be passed between machines of different architectures, p4 uses the XDR (eXternal Data Representation) library. XDR <ref> [15] </ref> provides a standard representation for float, double, int, long into which messages must be translated on send and from which they must be translated on receive.
Reference: [16] <author> Perihelion. </author> <title> The helios parallel operating system. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: The Unix fork does not fit well with the T805 transputer architecture as that architecture is unsegmented. It is possible to provide a fork using a compiler which generates extra code to emulate segmented memory, as is done in the Helios operating system <ref> [16] </ref>. However there are two costs incurred here: the overhead of the software emulated segments, and the memory and time overhead of copying forks. The T9000 series transputers 3 [14, 19] have a segmented architecture, and will remove the need for software segment emulation.
Reference: [17] <author> K.M. Shea, M.H. Cheung, and F.C.M. Lau. </author> <title> An efficient multi-priority scheduler for the transputer. </title> <booktitle> In Proc. 15th WoTUG Technical Meeting (Aberdeen), </booktitle> <pages> pages 139-153. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: The library provides facilities to suspend, resume, and kill processes. It also allows the priority of each process to be altered at run time. 7 4.1 Scheduler: Transputer implementation A multi-priority scheduler with the capability of pre-emptively descheduling processes was constructed based on the work of Shea et. al. <ref> [17] </ref>. A library was constructed which allows processes to be externally suspended, resumed and killed, and allows control over each process's priority. Each process has an id and an entry in a process table containing information about the process's priority, workspace start and workspace size.
Reference: [18] <author> V. Sunderam. </author> <title> PVM: a framework for parallel distributed computing. </title> <journal> Concurency: Practice and Experiencs, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <year> 1990. </year>
Reference-contexts: These features are required for our research into the use of optimistic mechanisms, based on the virtual time paradigm [13], in general purpose parallel computing 1 . Our reasons for choosing p4 (which is related to PARMACS [9]) rather than other message passing systems such as PVM <ref> [18] </ref> were based on performance [8] and the suitability of the p4 programming model for our research.
Reference: [19] <institution> University of Kent. T9000 Systems Workshop, </institution> <year> 1992. </year>
Reference-contexts: However there are two costs incurred here: the overhead of the software emulated segments, and the memory and time overhead of copying forks. The T9000 series transputers 3 <ref> [14, 19] </ref> have a segmented architecture, and will remove the need for software segment emulation. The code generation model the current Inmos C compiler provides allows us to construct a fork function which has a subset of the standard Unix fork functionality. <p> Furthermore, the hardware provides no facilities to send a message which would have to traverse several hardware links. The T9000 transputer/C104 router provides a hardware solution to these problems <ref> [10, 19, 14] </ref>. On the current generation of transputers, several software solutions exist: Tiny [5], the Southampton VCR (Virtual Channel Router) software [6] and the Inmos VCR [12].
Reference: [20] <author> L.G. Valiant. </author> <title> A bridging model for parallel computation. </title> <journal> Comm. A.C.M., </journal> <volume> 33(8) </volume> <pages> 103-111, </pages> <year> 1990. </year>
Reference-contexts: With the cluster barrier mechanism, it is possible to wait for all, or a subset of the cluster processes to synchronize. With these facilities, it is possible to use p4 in a similar way to the Bulk Synchronous 2 Parallel model <ref> [20] </ref>. However, the p4 model emphasises locality based computation, whereas the BSP model assumes a global memory with uniform access.
Reference: [21] <author> E.L. White, J.R. Callahan, and J.M. Purtilo. </author> <title> The NewYacc User's Manual. </title> <type> 12 </type>
Reference-contexts: This preprocessor was developed using NewYacc <ref> [21] </ref> and takes C source code as input and outputs a modified program with all global and static variables grouped in a structure. This structure can then be placed in a shared memory segment which is shared by a set of Unix processes created by fork.
References-found: 21

