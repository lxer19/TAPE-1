URL: http://www.cse.ogi.edu/~hongwei/academic/papers/AlgEta.ps
Refering-URL: http://www.cse.ogi.edu/~hongwei/academic/manuscripts.html
Root-URL: http://www.cse.ogi.edu
Email: Email: hwxi+@cs.cmu.edu  
Phone: Telephone: +1 412 268 1439 Fax: +1 412 268 6380  
Title: Combining Algebraic Rewriting with the Second-Order Extensional Polymorphic Lambda Calculus  
Author: Hongwei Xi 
Keyword: Category: Lambda Calculi, Term Rewriting Systems  
Address: Pittsburgh, PA 15213, USA  
Affiliation: Carnegie Mellon University,  
Abstract: We prove that strong normalisation and confluence properties are conserved when a left-linear canonical first-order algebraic rewriting system is combined with the second-order polymorphic -calculus with a restricted version of -expansions. This strengthens many results in [4, 5, 8, 11]. We achieve this through an approach which simulates -expansions with fi-reductions in the second-order polymorphic -calculus. This immediately yields a modular proof showing that the second-order extensional polymorphic -calculus is strongly normalis-ing. Our work supports the adoption of -expansions as rewrite rules in typed settings.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. </author> <title> Akama (1993), On Mints' reduction for ccc-calculus. In Typed lambda-calculi and applications, </title> <booktitle> vol. 664 of LNCS, </booktitle> <pages> pp 1-12. </pages>
Reference-contexts: Mints [19] presented a proof for the confluence and (weak) normalisation of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y. Akama <ref> [1] </ref> proved the confluence and strong normali-sation of the above system, which is also given by C.B. Jay and N. Ghani [17]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9].
Reference: 2. <author> H.P. </author> <title> Barendregt (1984), The Lambda Calculus: Its Syntax and Semantics, </title> <publisher> North-Holland publishing company, Amsterdam. </publisher>
Reference: 3. <author> H.P. </author> <title> Barendregt (1992), Lambda calculi with types, </title> <booktitle> Handbook of Logic in Computer Science edited by S. </booktitle> <editor> Abramsky, Dov M. Gabbay and T.S.E. Maibaum, </editor> <publisher> Clarendon Press, Oxford, </publisher> <pages> pp. 117-414. </pages>
Reference: 4. <author> Val Breazu-Tannen and Jean Gallier (1991), </author> <title> Polymorphic rewriting conserves strong normalisation, </title> <journal> Theoretic Computer Science, </journal> <volume> vol. 83, </volume> <pages> pp 3-28. </pages>
Reference-contexts: It is interesting to explore the possibility of showing directly the confluence of ! fifi 2 fl 2 fl from that of ! fifi 2 . 6 Conservation of Strong Normalisation and Confluence The theorem below follows immediately from the main results in <ref> [4, 5] </ref>. Theorem 19. Given a many sorted first-order algebraic rewriting system h; Ri which is confluent and strongly normalising; then R fifi 2 is strongly normalising and confluent on all 2 ()-terms. <p> Breazu-Tannen and Gallier actually proved that strong normalisation is conserved when R is combined with fi; fi 2 -reduction and ; 2 -contraction <ref> [4] </ref>. They also showed that confluence is conserved when R is combined with fi; fi 2 -reduction and 2 -contraction. As mentioned in the introduction, confluence cannot be conserved if -contraction is added. The next theorem supports the adoption of -expansions as rewrite rules in typed rewriting systems. Theorem 20.
Reference: 5. <author> Val Breazu-Tannen and Jean Gallier (1994), </author> <title> Polymorphic rewriting conserves algebraic confluence, </title> <journal> Information and Computation, </journal> <volume> vol. 114(1), </volume> <pages> pp. 1-29. </pages>
Reference-contexts: It is interesting to explore the possibility of showing directly the confluence of ! fifi 2 fl 2 fl from that of ! fifi 2 . 6 Conservation of Strong Normalisation and Confluence The theorem below follows immediately from the main results in <ref> [4, 5] </ref>. Theorem 19. Given a many sorted first-order algebraic rewriting system h; Ri which is confluent and strongly normalising; then R fifi 2 is strongly normalising and confluent on all 2 ()-terms. <p> Proof. Let M and N be reduced to R fifi 2 fl 2 fl -normal forms and compare them syntactically. ut A corresponding result without R being left-linear is given <ref> [5] </ref>. In the case where R is left-linear, the proof of Corollary 21 states that one can reduce 2 ()- terms to R fifi 2 fl 2 fl -normal forms through any R fifi 2 fl 2 fl -reduction sequences. This cannot be derived from the result in [5], which needs <p> is given <ref> [5] </ref>. In the case where R is left-linear, the proof of Corollary 21 states that one can reduce 2 ()- terms to R fifi 2 fl 2 fl -normal forms through any R fifi 2 fl 2 fl -reduction sequences. This cannot be derived from the result in [5], which needs to expand 2 ()-terms to long normal forms [5] before reducing them to R-normal forms. <p> This cannot be derived from the result in <ref> [5] </ref>, which needs to expand 2 ()-terms to long normal forms [5] before reducing them to R-normal forms.
Reference: 6. <author> D. </author> <month> Cubric </month> <year> (1992), </year> <title> On free ccc, </title> <type> Manuscripts. </type>
Reference-contexts: Mints [19] presented a proof for the confluence and (weak) normalisation of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in <ref> [6] </ref>. Y. Akama [1] proved the confluence and strong normali-sation of the above system, which is also given by C.B. Jay and N. Ghani [17]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9].
Reference: 7. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1993), </year> <title> A confluent reduction for the exten-sional typed lambda-calculus with pairs, sums, recursion and terminal object. </title> <editor> In Andrzej Lingas, editor, </editor> <booktitle> Intern. Conf. on Automata, Languages and Programming (ICALP), vol. 700 of LNCS pp. </booktitle> <pages> 645-656, </pages> <year> 1993 </year>
Reference: 8. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1994), </year> <title> Combining the first order algebraic rewriting systems, recursion and extensional lambda calculi. </title> <editor> In Serge Abite-boul and Eli Shamir, editors, </editor> <booktitle> International Conference on Automata, Languages and Programming, vol. 820 of LNCS, </booktitle> <pages> pp. 462-472. </pages>
Reference-contexts: Di Cosmo and Kesner discovered a translation which can simulate -expansion with fi-reduction in simply typed settings [9]. This provides a modular approach to proving that many rewriting systems are still strong normalising and confluent after augmented with restricted versions of -expansion <ref> [8] </ref>. Unfortunately, their translation cannot be applied to polymorphic settings directly. Although they have proven that the second-order polymorphic -calculus with surjective pairing and a version of -expansions is strongly normalising and confluent, their proof is not modular. <p> Jay and N. Ghani [17]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9]. An application of this translation can also be found in <ref> [8] </ref>. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in [11] and [15], but none of these proofs are modular. They are established upon the well-known reducibility candidates method due to Tait [23] and Girard [16].
Reference: 9. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1994), </year> <title> Simulating expansions without expansions, </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 4 </volume> <pages> 1-48. </pages> <note> (A preliminary version is available as Technical Report LIENS-93-11/INRIA 1911) </note>
Reference-contexts: Systems with such restricted -expansions have been receiving attentions of a growing number of researchers [Aka93, Cub92, Dou93, DCK94a, DCK94b, DCP95, JG96]. Di Cosmo and Kesner discovered a translation which can simulate -expansion with fi-reduction in simply typed settings <ref> [9] </ref>. This provides a modular approach to proving that many rewriting systems are still strong normalising and confluent after augmented with restricted versions of -expansion [8]. Unfortunately, their translation cannot be applied to polymorphic settings directly. <p> Since it is well-known that 2 j= SN (! fifi 2 ), we obtain the next corollary. Corollary 17. Every 2 -term is strongly ! fifi 2 fl 2 fl -normalising. Roberto Di Cosmo and Delia Kesner have also proven Corollary 17 in <ref> [9] </ref> with a method involving reducibility candidates [16], but their proof is not modular. It is can be readily verified that ! fifi 2 fl 2 fl is weakly confluent [9]. Therefore, we obtain the following by Newman's Lemma. <p> Roberto Di Cosmo and Delia Kesner have also proven Corollary 17 in <ref> [9] </ref> with a method involving reducibility candidates [16], but their proof is not modular. It is can be readily verified that ! fifi 2 fl 2 fl is weakly confluent [9]. Therefore, we obtain the following by Newman's Lemma. Corollary 18. ! fifi 2 fl 2 fl is confluent on all 2 -terms. Notice that we need the strong normalisation of ! fifi 2 fl 2 fl to show the conflu ence of ! fifi 2 fl 2 fl . <p> Y. Akama [1] proved the confluence and strong normali-sation of the above system, which is also given by C.B. Jay and N. Ghani [17]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting <ref> [9] </ref>. An application of this translation can also be found in [8]. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in [11] and [15], but none of these proofs are modular.
Reference: 10. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1995), </year> <title> Combining algebraic rewriting, extensional lambda calculi and fixpoints, </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1995. </year>
Reference: 11. <author> R. Di Cosmo and D. </author> <month> Kesner </month> <year> (1996), </year> <title> Rewriting with extensional polymorphic lambda-calculus. </title> <booktitle> In Proc. Conf. Computer Science Logic '95, vol. 1092 of LNCS, </booktitle> <pages> pp 215-232. </pages>
Reference-contexts: Ghani [17]. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9]. An application of this translation can also be found in [8]. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in <ref> [11] </ref> and [15], but none of these proofs are modular. They are established upon the well-known reducibility candidates method due to Tait [23] and Girard [16].
Reference: 12. <author> R. Di Cosmo and A. </author> <month> Piperno </month> <year> (1995), </year> <title> Expanding Extensional Polymorphism, In Typed lambda-calculi and applications, </title> <booktitle> vol. 902 of LNCS, </booktitle> <pages> pp. 139-153. </pages>
Reference: 13. <author> Daniel J. </author> <title> Dougherty (1993), Some lambda calculi with categorical sums and products. </title> <booktitle> In Proceedings of the 5th International Conference on Rewriting Techniques and Applications. </booktitle>
Reference: 14. <author> N. </author> <title> Ghani (1995), fi-equality for coproducts. In Typed lambda-calculi and applications, </title> <booktitle> vol. 902 of LNCS, </booktitle> <pages> pp. 171-185. </pages>
Reference: 15. <author> N. </author> <title> Ghani (1996), Eta Expansions in System F. </title>
Reference-contexts: Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9]. An application of this translation can also be found in [8]. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in [11] and <ref> [15] </ref>, but none of these proofs are modular. They are established upon the well-known reducibility candidates method due to Tait [23] and Girard [16]. It is interesting to point out that the author learned the use -expansion while studying the equivalence between strong and weak normalisations in various typed -calculi.
Reference: 16. <institution> J.-Y. Girard (1972), Interpretation fonctionnelle et elimination des coupures de l'arithmetique d'ordre superieur, These de doctorat d'etat, Universite Paris VII. </institution>
Reference-contexts: We write f : (s 1 ; : : : ; s n ) ! s for a function symbol in with arity (s 1 ; : : : ; s n ) and sort s. The second-order polymorphic typed -calculus 2 is originally introduced in <ref> [16] </ref> and [21], where Church typing is involved. We now give a formulation of 2 (). <p> Corollary 17. Every 2 -term is strongly ! fifi 2 fl 2 fl -normalising. Roberto Di Cosmo and Delia Kesner have also proven Corollary 17 in [9] with a method involving reducibility candidates <ref> [16] </ref>, but their proof is not modular. It is can be readily verified that ! fifi 2 fl 2 fl is weakly confluent [9]. Therefore, we obtain the following by Newman's Lemma. Corollary 18. ! fifi 2 fl 2 fl is confluent on all 2 -terms. <p> Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in [11] and [15], but none of these proofs are modular. They are established upon the well-known reducibility candidates method due to Tait [23] and Girard <ref> [16] </ref>. It is interesting to point out that the author learned the use -expansion while studying the equivalence between strong and weak normalisations in various typed -calculi.
Reference: 17. <author> C.B. Jay and N. </author> <title> Ghani (1996), The virtues of eta-expansion, </title> <journal> Journal of Functional Programming, </journal> <volume> vol. 5(2), </volume> <pages> pp. 135-154. </pages>
Reference-contexts: A flaw in Mints's proof was later corrected in [6]. Y. Akama [1] proved the confluence and strong normali-sation of the above system, which is also given by C.B. Jay and N. Ghani <ref> [17] </ref>. Di Cosmo and Kesner discovered a translation () ffi which simulates -expansion with fi-reduction in a simply typed setting [9]. An application of this translation can also be found in [8]. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96].
Reference: 18. <author> J. Lambek and P.J. </author> <title> Scott (1986), An introduction to higher order categorical logic, </title> <publisher> Cambridge University Press. </publisher>
Reference: 19. <author> G.E. </author> <title> Mints (1979), Theory of categories and theory of proofs (I). </title> <booktitle> In Urgent Question of Logic and the Methodology of Science [In Russian], </booktitle> <address> Kiev. </address>
Reference-contexts: Mints <ref> [19] </ref> presented a proof for the confluence and (weak) normalisation of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y. Akama [1] proved the confluence and strong normali-sation of the above system, which is also given by C.B.
Reference: 20. <author> D. </author> <title> Prawitz (1971), Ideas and results of proof theory, </title> <booktitle> Proceedings of the 2nd Scandinavia logic symposium, </booktitle> <editor> editor J.E. Fenstad, </editor> <publisher> North-Holland Publishing Company, Amsterdam. </publisher>
Reference-contexts: Note that both f and x:fl cannot be contracted further. This is a serious drawback since it can easily occur when one adds -contraction to algebraic rewriting systems. Prawitz suggested that -expansion be used as a rewrite rule <ref> [20] </ref>. Mints also realised this option. <p> with R being left-linear, we may have more freedom to design a decision procedure verifying if hM; N i 2 R fifi 2 fl 2 fl for every pair of 2 ()-terms M and N . 7 Related Work The use of -expansion as a rewrite rule was suggested in <ref> [20] </ref>. Mints [19] presented a proof for the confluence and (weak) normalisation of a simply typed -calculus with surjective pairing and -expansion. A flaw in Mints's proof was later corrected in [6]. Y.
Reference: 21. <author> J. </author> <title> Reynolds (1974), Towards a theory of type structure, </title> <booktitle> Colloquium sur la Progrmmation, vol. 19 of LNCS, </booktitle> <pages> pp. 408-423. </pages>
Reference-contexts: We write f : (s 1 ; : : : ; s n ) ! s for a function symbol in with arity (s 1 ; : : : ; s n ) and sort s. The second-order polymorphic typed -calculus 2 is originally introduced in [16] and <ref> [21] </ref>, where Church typing is involved. We now give a formulation of 2 ().
Reference: 22. <author> H. </author> <title> Schwichtenberg (1991), An upper bound for reduction sequences in the typed lambda-calculus, </title> <journal> Archive for Mathematical Logic, </journal> <volume> 30 </volume> <pages> 405-408. </pages>
Reference-contexts: They are established upon the well-known reducibility candidates method due to Tait [23] and Girard [16]. It is interesting to point out that the author learned the use -expansion while studying the equivalence between strong and weak normalisations in various typed -calculi. Schwichtenberg <ref> [22] </ref> used -expansion to translate simply typed -terms into simply typed I-terms such that fi-reduction sequences from the former can be simulated by those from the latter. This can yield a bound for the lengths of fi-reduction sequences from simply typed -terms.
Reference: 23. <author> W. </author> <title> Tait (1967), Intensional Interpretations of funtionals of finite type I, </title> <journal> J. symbolic logic 32, </journal> <pages> pp. 198-212. </pages>
Reference-contexts: An application of this translation can also be found in [8]. Extensional polymorphism is studied in [BTG94, DCK95, DCK96, DCP95, Gha96]. Corollary 17 has been proven in [11] and [15], but none of these proofs are modular. They are established upon the well-known reducibility candidates method due to Tait <ref> [23] </ref> and Girard [16]. It is interesting to point out that the author learned the use -expansion while studying the equivalence between strong and weak normalisations in various typed -calculi.
Reference: 24. <author> H. </author> <title> Xi (1996), Upper bounds for standardisations and an application, </title> <type> Research Report 96-189, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pittsburgh. </institution>
Reference-contexts: Schwichtenberg [22] used -expansion to translate simply typed -terms into simply typed I-terms such that fi-reduction sequences from the former can be simulated by those from the latter. This can yield a bound for the lengths of fi-reduction sequences from simply typed -terms. Details can also be founded in <ref> [24] </ref>. 8 Conclusions and Future Work We have demonstrated how to simulate -expansion with fi-reduction in the second-order polymorphic -calculus 2 .
Reference: 25. <author> H. </author> <title> Xi (1996), Simulating eta-expansions with beta-reductions in the second-order polymorphic lambda-Calculus, </title> <type> Research Report, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, </institution> <month> Pittsburgh. </month> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 25

