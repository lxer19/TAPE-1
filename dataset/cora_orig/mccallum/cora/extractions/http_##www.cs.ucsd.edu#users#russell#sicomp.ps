URL: http://www.cs.ucsd.edu/users/russell/sicomp.ps
Refering-URL: http://www.cs.ucsd.edu/users/russell/
Root-URL: http://www.cs.ucsd.edu
Title: Construction of a pseudo-random generator from any one-way function  
Author: Johan H-astad Russell Impagliazzo Leonid A. Levin Michael Luby 
Address: Stockholm, Sweden  San Diego  Berkeley, California  
Affiliation: Royal Institute of Technology  Department of Computer Science University of California at  Computer Science Department Boston University  International Computer Science Institute  
Abstract: There are many natural examples of conjectured one-way functions, whereas pseudorandom generators have a number of important applications, including the construction of a private key cryptosystem that is provably secure. We show how to construct a pseudo-random generator from any one-way function. Our constructions make ex tensive use of hashing to extract and smooth entropy from a one-way function.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexi, W., Chor, B., Goldreich, O., Schnorr, </author> <title> C.P., "RSA Rabin Functions: Certain Parts Are As Hard As the Whole", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 17, </volume> <year> 1988, </year> <pages> pp. 194-209. </pages> <note> A preliminary version appeared in 25 th FOCS, </note> <year> 1984, </year> <pages> pp. 449-457. </pages>
Reference-contexts: problems from coding theory (see, e.g., [11, Goldreich, Krawczyk, Luby]), and the subset sum problem for appropriately chosen parameters (see, e.g., [20, Impagliazzo, Naor]). 2 There are several important works that have contributed to the expansion of the condi-tions on one-way functions under which a pseudo-random generator can be constructed. <ref> [1, Alexi, Chor, Goldreich, Schnorr] </ref> show how to construct a pseudo-random generator based on the difficulty of factoring. Up to this point, attention focused only on one-way permutations, in which case the task of inverting f (x) is to find x uniquely.
Reference: [2] <author> Bennett, C., Brassard, G., Robert, J., </author> <title> "Privacy Amplification by Public Discussion", </title> <journal> Siam J. on Computing, </journal> <volume> Vol. 17, No. 2, </volume> <year> 1988, </year> <pages> pp. 210-229. </pages>
Reference-contexts: For two equal length strings x 2 f0; 1g n and y 2 f0; 1g n , define x y = i2f1;:::;ng If x 2 f0; 1g lfim and y 2 f0; 1g mfin are matrices then x y indicates matrix multiplication over GF <ref> [2] </ref>, i.e., xy is the lfin bit matrix, where the (i; j) entry is r i c j , where r i 2 f0; 1g m is the i th row of x and c j 2 f0; 1g m is the j th column of y. 2.1 Standard functions Definition <p> There, D n is the uniform distribution on a set S f0; 1g n with ]S = 2 m (n) . [27, McInnes] and <ref> [2, Bennett, Brassard, Robert] </ref> also proved similar lemmas. The lemma can be interpreted as follows: The Renyi entropy of X is smoothed out to the almost uniform distribution on bit strings of length almost m (n) by using the hash function h Y as a catalyst.
Reference: [3] <author> Blum, M., </author> <title> "Independent Unbiased Coin Flips From a Correlated Biased Source: A Finite State Markov Chain", </title> <booktitle> 25 th FOCS, </booktitle> <year> 1984, </year> <pages> pp. 425-433. </pages>
Reference-contexts: various studies for extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See <ref> [3, Blum] </ref>, [36, Santha, Vazirani], [38, Vazirani], [40, Vazirani, Vazirani], [7, Chor, Goldreich] [27, McInnes].) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for
Reference: [4] <author> Blum, M., and Micali, S., </author> <title> "How to Generate Cryptographically Strong Sequences of Pseudo-Random Bits", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 13, </volume> <year> 1984, </year> <pages> pp. 850-864. </pages> <note> A preliminary version appeared in 23 rd FOCS 1982. </note>
Reference-contexts: Thus, a pseudo-random generator can be used to efficiently convert a small amount of true randomness into a much larger number of seemingly random bits. The robust notion of a pseudo-random generator, due to <ref> [4, Blum, Micali] </ref>, [41, Yao], should be contrasted with the classical methods of generating random looking bits as described in, e.g., [22, Knuth]. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. <p> This is a primary motivation for the seminal paper of <ref> [4, Blum, Micali] </ref>, which is the first to define a generator as pseudo-random if it passes all feasible tests, and shows there is a pseudo-random generator based on the presumed difficulty of the discrete logarithm problem. <p> The current paper is a combination of the results announced in the conference papers [19, Impagliazzo, Levin, Luby] and [16, H-astad]. 1.1 Concepts Previous methods, following <ref> [4, Blum, Micali] </ref>, rely on constructing a function that has a "hidden" but "meaningful" bit of the output from one-way functions with special structural properties. <p> The notion of computational indistinguishability, originally defined by [14, Goldwasser, Micali] and [41, Yao], restricts the computational resources available to adversaries. Definition 3.4 (computationally indistinguishable) X and Y are R-secure computation-ally indistinguishable if there is no R-breaking adversary for distinguishing X and Y . 8 3.3 Pseudo-random generator <ref> [4, Blum, Micali] </ref>, [41, Yao] originally gave the definition of a pseudo-random generator as below, except that we parameterize security more precisely. Definition 3.5 (pseudo-random generator) Let g (x) be a (n; `(n))-standard function where `(n) &gt; n. The stretching parameter of g (x) is `(n) n 1. <p> The idea of a function that hides a meaningful output bit is used implicitly in the original construction of a pseudo-random generator from the discrete logarithm problem <ref> [4, Blum, Micali] </ref> and has been central to all such constructions since that time. 10 Definition 3.13 (hidden and meaningful bit) Let f (x) be a (n; `(n))-standard function and let b (x) be a (n; 1)-standard function.
Reference: [5] <author> Boppana, R., Hirschfeld, R., </author> <title> "Pseudo-random generators and complexity classes", </title> <editor> S. Micali, ed., </editor> <booktitle> Advances in Computer Research, </booktitle> <volume> vol. 5, </volume> <pages> pp. 1-26, </pages> <publisher> JAI Press, </publisher> <year> 1989. </year>
Reference-contexts: The results on deterministic simulation were subsequently considerably generalized in <ref> [5, Boppana, Hirschfeld] </ref>. Since the conditions are rather stringent, it is not easy to come up with a natural candidate for a pseudo-random generator. On the other hand, there seem to be a variety of natural examples of another basic primitive; the one-way function. <p> This proposition appears in <ref> [5, Boppana, Hirschfeld] </ref> and is due to O. Goldreich and S. Micali. Proposition 11 There is a linear-preserving reduction that takes a pseudo-random generator g with stretching parameter one and produces a pseudo-random generator g 0 with stretching parameter polynomial in the input length.
Reference: [6] <author> Carter, J., and M. Wegman, </author> <title> "Universal Classes of Hash Functions", </title> <journal> JCSS, 1979, </journal> <volume> Vol. 18, </volume> <pages> pp. 143-154. </pages>
Reference-contexts: below are used to construct a one-way function with these two properties from a general one-way function. 14 6 Manipulating entropy via hashing We provide the main definitions and technical tools for manipulations of entropy using hashing. 6.1 Universal hash functions The concept of a universal hash function, introduced in <ref> [6, Carter, Wegman] </ref>, has proved to have far reaching and a broad spectrum of applications in the theory of computation. Definition 6.1 (universal hash functions) Let h (x; y) be a (n; `(n); m (n))-standard function.
Reference: [7] <author> Chor, B., and O. Goldreich, </author> <title> "Unbiased Bits from Sources of Weak Randomness and Probabilistic Communication Complexity", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 17, </volume> <year> 1988. </year> <note> A preliminary version appeared in 25 th FOCS 1985. </note>
Reference-contexts: sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [3, Blum], [36, Santha, Vazirani], [38, Vazirani], [40, Vazirani, Vazirani], <ref> [7, Chor, Goldreich] </ref> [27, McInnes].) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source <p> Proposition 2 Ent (f (X)) Ent (X). Definition 3.7 (degeneracy of f ) The degeneracy of f is Ent (X) Ent (f (X)), where X 2 U f0; 1g n . We also use a variant definition of entropy used in <ref> [7, Chor, Goldreich] </ref>. Definition 3.8 (min-entropy) The min-entropy of D n is min x2f0;1g n Inf D n (x). Intuitively, if a distribution has min-entropy k, it is "at least as random" as the uniform distribution on k bit strings.
Reference: [8] <author> W. Diffie and M. Hellman, </author> <title> "New directions in cryptography", </title> <journal> IEEE Trans. Inform. Theory, </journal> <volume> Vol. 22, </volume> <year> 1976, </year> <pages> pp. 644-654. </pages>
Reference-contexts: However, there are many examples of functions that seem to be one-way in practice and that are conjectured to be provably one-way. Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., <ref> [8, Diffie, Hellman] </ref>), quadratic residuosity (see, e.g., [14, Goldwasser, Micali]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [33, Rivest, Shamir, Adleman]), problems from coding theory (see, e.g., [11, Goldreich, Krawczyk, Luby]), and the subset sum problem for appropriately chosen parameters (see, e.g., [20,
Reference: [9] <author> Goldreich, O., S. Goldwasser, and S. Micali, </author> <title> "How to Construct Random Functions", </title> <journal> J. of ACM, </journal> <volume> Vol. 33, No. 4, </volume> <year> 1986, </year> <pages> pp. 792-807. </pages> <note> A preliminary version appeared in 24 th FOCS, 1984. 32 </note>
Reference: [10] <author> Goldreich, O., Impagliazzo, R., Levin, L., Venketesan, R., Zuckerman, D., </author> <title> "Security Preserving Amplification of Hardness", </title> <booktitle> Proceedings of the 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 318-326, </pages> <year> 1990. </year>
Reference: [11] <author> Goldreich, O., Krawczyk, H. and Luby, M., </author> <title> "On the Existence of Pseudorandom Generators", </title> <note> preliminary version in 29 th FOCS, </note> <year> 1988, </year> <pages> pp. 12-24. </pages> <note> journal version in SIAM J. on Computing, Vol. 22, No. 6, </note> <month> December, </month> <year> 1993, </year> <pages> pp. 1163-1175. </pages>
Reference-contexts: one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [8, Diffie, Hellman]), quadratic residuosity (see, e.g., [14, Goldwasser, Micali]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [33, Rivest, Shamir, Adleman]), problems from coding theory (see, e.g., <ref> [11, Goldreich, Krawczyk, Luby] </ref>), and the subset sum problem for appropriately chosen parameters (see, e.g., [20, Impagliazzo, Naor]). 2 There are several important works that have contributed to the expansion of the condi-tions on one-way functions under which a pseudo-random generator can be constructed. [1, Alexi, Chor, Goldreich, Schnorr] show how <p> is not a permutation, the natural extension of successful inversion to finding any x 0 such that f (x 0 ) = f (x). [24, Levin] introduces one-way functions which remain one-way after several iterations and shows them to be necessary and sufficient for the construction of a pseudo-random generator. <ref> [11, Goldreich, Krawczyk, Luby] </ref> show how to construct a pseudo-random generator from any one-way function with the property that each value in the range of the function has roughly the same number of preimages. <p> We use hashing functions and their analysis in a fundamental way in our constructions. This approach has its roots in <ref> [11, Goldreich, Krawczyk, Luby] </ref>. In [12, Goldreich, Levin], it turns out that the easily computable bit that is hidden is the parity of a random subset of the input bits, i.e., the inner product of the input and a random string. <p> This construction, together with Theorem 1 (page 19), yields a pseudorandom generator from any one-to-one one-way function. The overall construction is quite different in spirit than the original construction of <ref> [11, Goldreich, Krawczyk, Luby] </ref>: it illustrates how to construct a pseudo-entropy generator in a particularly simple way using [12, Goldreich, Levin]. The construction is the same as described in Proposition 8 (page 14). Lemma 4 Let f (x) be a R-secure one-to-one (n; `(n)) one-way function. <p> An easy corollary of the main result is the construction of a pseudo-random generator from a regular one-way function. This corollary was previously obtained by <ref> [11, Goldreich, Krawczyk, Luby] </ref> using a different construction and proof techniques. Throughout this subsection, let f (x) be a (n; `(n))-standard function and let X 2 U f0; 1g n .
Reference: [12] <author> Goldreich, O., and L.A. Levin, </author> <title> "A Hard-Core Predicate for any One-way Function", </title> <booktitle> 21 rst STOC, </booktitle> <year> 1989, </year> <pages> pp 25-32. </pages>
Reference-contexts: output bit of a function is hidden if it is unpredictable by an algorithm that runs in a reasonable amount of time given all the other output bits, and the bit is meaningful if it can be predicted from the other output bits by an algorithm without any time restrictions. <ref> [12, Goldreich, Levin] </ref> provide a simple and natural input bit which is hidden from (a padded version of) any one-way function. Their result radically simplifies the previous constructions of pseudo-random generator from one-way permutations, and in addition makes all previous constructions substantially more efficient. <p> show how to construct a false entropy generator from any one-way function, a pseudo-entropy generator from any false entropy generator and finally a pseudo-random generator from any pseudo-entropy generator. (The presentation of these results in the paper is in reverse order.) We use in a fundamental way the work of <ref> [12, Goldreich, Levin] </ref>. We use hashing functions and their analysis in a fundamental way in our constructions. This approach has its roots in [11, Goldreich, Krawczyk, Luby]. In [12, Goldreich, Levin], it turns out that the easily computable bit that is hidden is the parity of a random subset of the <p> generator. (The presentation of these results in the paper is in reverse order.) We use in a fundamental way the work of <ref> [12, Goldreich, Levin] </ref>. We use hashing functions and their analysis in a fundamental way in our constructions. This approach has its roots in [11, Goldreich, Krawczyk, Luby]. In [12, Goldreich, Levin], it turns out that the easily computable bit that is hidden is the parity of a random subset of the input bits, i.e., the inner product of the input and a random string. <p> almost all of the conjectured one-way functions used in practice. (Almost all conjectured one-way functions are either regular or nearly regular.) 5 Constructing a hidden and meaningful bit How do we go about constructing a function that hides a meaningful bit from a one-way function? The following fundamental proposition of <ref> [12, Goldreich, Levin] </ref> provides the answer. Let f (x) be a (n; `(n))-standard function. Let X 2 U f0; 1g n , R 2 U f0; 1g n and fi 2 U f0; 1g n . <p> Proposition 4 If f is a R-secure one-way function then X R is P (R)-secure hidden given hf (X); Ri. Proposition 4 presents an elegant, simple and general method of obtaining a hidden bit from a one-way function. We need the following stronger proposition of <ref> [12, Goldreich, Levin] </ref> in some of our proofs. Proposition 5 There is an oracle Turing Machine M with the following properties. <p> The construction and proof described here is due to <ref> [12, Goldreich, Levin] </ref>. Proposition 8 Let f (x) be a R-secure one-way permutation. Let r 2 f0; 1g n and define standard function g (x; r) = hf (x); r; x ri. Then g is P (R)-secure pseudo-random generator. <p> This construction, together with Theorem 1 (page 19), yields a pseudorandom generator from any one-to-one one-way function. The overall construction is quite different in spirit than the original construction of [11, Goldreich, Krawczyk, Luby]: it illustrates how to construct a pseudo-entropy generator in a particularly simple way using <ref> [12, Goldreich, Levin] </ref>. The construction is the same as described in Proposition 8 (page 14). Lemma 4 Let f (x) be a R-secure one-to-one (n; `(n)) one-way function.
Reference: [13] <author> Goldreich, O., Micali, M. and Wigderson, A., </author> <title> "Proofs that Yield Nothing but Their Validity and a Methodology of Cryptographic Protocol Design", </title> <booktitle> 27 th FOCS, </booktitle> <year> 1986, </year> <pages> pp. 174-187, </pages> <note> Tech. Report TR498, Comp. </note> <institution> Sci. Dept., Technion, </institution> <note> submitted to JACM. </note>
Reference-contexts: For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudo-random generator, e.g., the work of ([9, Goldreich, Goldwasser, Micali], [26, Luby, Rackoff], <ref> [13, Goldreich, Micali, Wigderson] </ref>, [28, Naor]), show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudo-random generator.
Reference: [14] <author> Goldwasser, S. and Micali, S., </author> <title> "Probabilistic Encryption," </title> <journal> JCSS, </journal> <volume> Vol. 28, No. 2, </volume> <month> April </month> <year> 1984, </year> <pages> pp. 270-299. </pages> <note> A preliminary version appeared in 14 th STOC, </note> <year> 1982. </year>
Reference-contexts: However, there are many examples of functions that seem to be one-way in practice and that are conjectured to be provably one-way. Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [8, Diffie, Hellman]), quadratic residuosity (see, e.g., <ref> [14, Goldwasser, Micali] </ref>), factoring a number that is the product of two large randomly chosen primes (see, e.g., [33, Rivest, Shamir, Adleman]), problems from coding theory (see, e.g., [11, Goldreich, Krawczyk, Luby]), and the subset sum problem for appropriately chosen parameters (see, e.g., [20, Impagliazzo, Naor]). 2 There are several important <p> For example, because X has n bits of entropy, g (X) can also have at most n bits of entropy (see Proposition 2 on page 9). The notion of a pseudo-random generator is intuitively the following. Following <ref> [14, Gold-wasser, Micali] </ref> and [41, Yao], we say that g (X) and Y are computationally indistinguishable if no feasible adversary can distinguish g (X) from Y , in which case we say that g is a pseudo-random generator. <p> The notion of computational indistinguishability, originally defined by <ref> [14, Goldwasser, Micali] </ref> and [41, Yao], restricts the computational resources available to adversaries. <p> If X and Y are R-secure computationally indistinguishable then f (X) and f (Y ) are L (R)-secure computationally indistinguishable. The following proposition first appears in <ref> [14, Goldwasser, Micali] </ref>. Proposition 10 Let k (n) be a length parameter. If D n and E n are R-secure computa-tionally indistinguishable then D n k (n) and E n k (n) are S (R)-secure computationally indistinguishable.
Reference: [15] <author> Goldwasser, S., Micali, S. and Rackoff, C., </author> <title> "The Knowledge Complexity of Interactive Proof Systems," </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 18, No. 1, </volume> <year> 1989, </year> <pages> pp. 186-208. </pages> <note> A preliminary version appeared in 17 th STOC, </note> <year> 1985. </year>
Reference: [16] <author> H-astad, J. </author> <title> "Pseudo-Random Generators under Uniform Assumptions", </title> <booktitle> 22 nd STOC, </booktitle> <year> 1990, </year> <pages> pp 395-404. </pages>
Reference-contexts: The current paper is a combination of the results announced in the conference papers [19, Impagliazzo, Levin, Luby] and <ref> [16, H-astad] </ref>. 1.1 Concepts Previous methods, following [4, Blum, Micali], rely on constructing a function that has a "hidden" but "meaningful" bit of the output from one-way functions with special structural properties.
Reference: [17] <author> Herzberg, A., Luby, M., </author> <title> "Public Randomness in Cryptography", proceedings of CRYPTO 1992, </title> <type> ICSI technical report TR-92-068, </type> <month> October, </month> <year> 1992. </year>
Reference-contexts: Also, if A is a Turing machine then so is M A . We need the following definitions to quantify the strength of reductions. The particular parameterization of security and the different quantitative measures of the security preserving properties of a reduction are taken from [25, Luby], <ref> [17, Herzberg, Luby] </ref>. Definition 4.2 (comparison measures for achievement ratios) Let R (t) and R 0 (t) be achievement ratios.
Reference: [18] <author> Impagliazzo, R. and Luby, M., </author> <title> "One-way functions are essential for information based cryptography," </title> <booktitle> 30 th FOCS, </booktitle> <year> 1989. </year>
Reference-contexts: Then, Proposition 4 (page 13) can be applied to the new function to obtain a pseudo-entropy generator. This technique of extracting entropy out of the input to f equal to the degeneracy of f using techniques similar to that of Lemma 1 (page 16) has many applications in <ref> [18, Impagliazzo, Luby] </ref>. For the remainder of this subsection, we make the assumption that the function d defined below is computable in time polynomial in n given f (x). <p> The results presented in this paper show that these same protocols can be based on any one-way function. [29, Naor, Yung], give a signature scheme that can be based on any one-way permutation, and [34, Rompel], substantially improves this by basing such a scheme on any one-way function. <ref> [18, Impagliazzo, Luby] </ref> provides complementary results; a one-way function can be constructed from a secure protocol for any one of a variety of cryptographic applications, including private key encryption, identification/authentication, bit commitment and coin flipping by telephone. [30, Ostrovsky, Wigderson] show that a one-way function can be constructed from any non-trivial
Reference: [19] <author> Impagliazzo, R., Levin, L. and Luby, M, </author> <title> "Pseudo-random number generation from one-way functions", </title> <booktitle> 21 rst STOC, </booktitle> <year> 1989, </year> <pages> pp 12-24. </pages>
Reference-contexts: We give several successively more intricate constructions, starting with constructions for one-way functions with a lot of structure and finishing with the constructions for one-way functions with no required structural properties. The current paper is a combination of the results announced in the conference papers <ref> [19, Impagliazzo, Levin, Luby] </ref> and [16, H-astad]. 1.1 Concepts Previous methods, following [4, Blum, Micali], rely on constructing a function that has a "hidden" but "meaningful" bit of the output from one-way functions with special structural properties.
Reference: [20] <author> Impagliazzo, R., Naor, M., </author> <title> "Efficient Cryptographic Schemes Provably as Secure as Subset Sum", </title> <booktitle> 30 th FOCS, </booktitle> <year> 1989, </year> <pages> pp. 236-241. </pages>
Reference-contexts: [8, Diffie, Hellman]), quadratic residuosity (see, e.g., [14, Goldwasser, Micali]), factoring a number that is the product of two large randomly chosen primes (see, e.g., [33, Rivest, Shamir, Adleman]), problems from coding theory (see, e.g., [11, Goldreich, Krawczyk, Luby]), and the subset sum problem for appropriately chosen parameters (see, e.g., <ref> [20, Impagliazzo, Naor] </ref>). 2 There are several important works that have contributed to the expansion of the condi-tions on one-way functions under which a pseudo-random generator can be constructed. [1, Alexi, Chor, Goldreich, Schnorr] show how to construct a pseudo-random generator based on the difficulty of factoring.
Reference: [21] <author> Impagliazzo, R. and Rudich, S., </author> <title> "Limits on the Provable Consequences of One-way Functions", </title> <booktitle> 21 rst STOC, </booktitle> <year> 1989, </year> <pages> pp 44-56. </pages>
Reference-contexts: Thus, secure protocols for any of these applications is equivalent to the existence of one-way functions. Some applications seem unlikely to be shown possible based on any one-way function, e.g., <ref> [21, Impagliazzo, Rudich] </ref> give strong evidence that exchanging secrets over a public channel is an application of this kind.
Reference: [22] <author> Knuth, D., </author> <title> Semi-Numerical Algorithm, </title> <booktitle> The Art of Computer Programming, Addison-Wesley, Second Edition, </booktitle> <volume> Vol. 2, </volume> <year> 1981. </year>
Reference-contexts: The robust notion of a pseudo-random generator, due to [4, Blum, Micali], [41, Yao], should be contrasted with the classical methods of generating random looking bits as described in, e.g., <ref> [22, Knuth] </ref>. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests.
Reference: [23] <author> Krawczyk, H., </author> <title> "How to Predict Congruential Generators," </title> <note> accepted for publication in J. of Algorithms, presented at CRYTPO, 1989. 33 </note>
Reference-contexts: The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests. However, [31, Plumstead] and <ref> [23, Krawczyk] </ref> show that there is a polynomial time statistical test which the output from this generator does not pass.
Reference: [24] <author> Levin, L.A., </author> <title> "One-way Function and Pseudorandom Generators", </title> <journal> Combinatorica, </journal> <volume> Vol. 7, No. 4, </volume> <year> 1987, </year> <pages> pp. 357-363. </pages> <note> A preliminary version appeared in 17 th STOC, </note> <year> 1985. </year>
Reference-contexts: In the case when f (x) is not a permutation, the natural extension of successful inversion to finding any x 0 such that f (x 0 ) = f (x). <ref> [24, Levin] </ref> introduces one-way functions which remain one-way after several iterations and shows them to be necessary and sufficient for the construction of a pseudo-random generator. [11, Goldreich, Krawczyk, Luby] show how to construct a pseudo-random generator from any one-way function with the property that each value in the range of <p> Claim (2) follows from (a) and (b), and then Lemma 11 follows from Claims (1) and (2). 30 Theorem 7 There are one-way functions iff there are pseudo-random generators. PROOF: That pseudo-random generators imply one-way functions follows from <ref> [24, Levin] </ref>. The converse now follows from Theorem 6 and Theorem 5, except for the assumption about knowing the exact value of (n).
Reference: [25] <author> Luby, M., </author> <note> "Pseudo-randomness and Applications", monograph in preparation for publication by Princeton University Press. </note>
Reference-contexts: Also, if A is a Turing machine then so is M A . We need the following definitions to quantify the strength of reductions. The particular parameterization of security and the different quantitative measures of the security preserving properties of a reduction are taken from <ref> [25, Luby] </ref>, [17, Herzberg, Luby]. Definition 4.2 (comparison measures for achievement ratios) Let R (t) and R 0 (t) be achievement ratios. <p> The following theorem follows directly from Theorem 2. Theorem 3 If f is a R-secure reg (n)-regular one-way function and ilog (reg (n)) can be computed in polynomial time then a S (R)-secure pseudo-random generator can be constructed from f . 22 Based on the ideas presented above, <ref> [25, Luby] </ref> gives versions of both Theorem 2 and Theorem 3 where the reduction is polynomial-preserving. Theorem 4 below is a stronger version of Theorem 3: it does not assume that ilog (reg (n)) can be computed in polynomial time.
Reference: [26] <author> Luby M., and Rackoff, C., </author> <title> "How to Construct Pseudorandom Permutations From Pseudorandom Functions", </title> <journal> SIAM J. on Computing, </journal> <volume> Vol. 17, No. 2, </volume> <year> 1988, </year> <pages> pp. 373-386. </pages> <note> A preliminary version appeared in 18 th STOC, </note> <year> 1986. </year>
Reference-contexts: Examples of cryptographic applications are private key cryptography, identification/authentication, digital signatures, bit commitment, exchanging secrets, coin flipping over the telephone, etc. For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudo-random generator, e.g., the work of ([9, Goldreich, Goldwasser, Micali], <ref> [26, Luby, Rackoff] </ref>, [13, Goldreich, Micali, Wigderson], [28, Naor]), show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudo-random generator.
Reference: [27] <author> McInnes, J., </author> <title> "Cryptography Using Weak Sources of Randomness," </title> <type> Tech. Report 194/87, </type> <institution> U. of Toronto, </institution> <year> 1987. </year>
Reference-contexts: possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [3, Blum], [36, Santha, Vazirani], [38, Vazirani], [40, Vazirani, Vazirani], [7, Chor, Goldreich] <ref> [27, McInnes] </ref>.) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from a slightly-random source using random bits <p> Then, dist (hh Y (X); Y i; hZ; Y i) 2 (e (n)+1) : This lemma is a generalization of a lemma that appears in [37, Sipser]. There, D n is the uniform distribution on a set S f0; 1g n with ]S = 2 m (n) . <ref> [27, McInnes] </ref> and [2, Bennett, Brassard, Robert] also proved similar lemmas. The lemma can be interpreted as follows: The Renyi entropy of X is smoothed out to the almost uniform distribution on bit strings of length almost m (n) by using the hash function h Y as a catalyst.
Reference: [28] <author> Naor, M., </author> <type> personal communication, </type> <year> 1988. </year>
Reference-contexts: For a variety of cryptographic applications it is known that a secure protocol can be constructed from a pseudo-random generator, e.g., the work of ([9, Goldreich, Goldwasser, Micali], [26, Luby, Rackoff], [13, Goldreich, Micali, Wigderson], <ref> [28, Naor] </ref>), show that applications ranging from private key encryption to zero-knowledge proofs can be based on a pseudo-random generator.
Reference: [29] <author> Naor, M. and Yung, M., </author> <title> "Universal One-way Hash Functions and Their Applications", </title> <booktitle> 21 rst STOC, </booktitle> <year> 1989, </year> <pages> pp 33-43. </pages>
Reference-contexts: The results presented in this paper show that these same protocols can be based on any one-way function. <ref> [29, Naor, Yung] </ref>, give a signature scheme that can be based on any one-way permutation, and [34, Rompel], substantially improves this by basing such a scheme on any one-way function. [18, Impagliazzo, Luby] provides complementary results; a one-way function can be constructed from a secure protocol for any one of a
Reference: [30] <author> Ostrovsky, R and Wigderson, A., </author> <title> "One-way Functions are Essential for Non-Trivial Zero-Knowledge", </title> <booktitle> 2 nd Israel Symposium on the Theory of Computing and Systems, </booktitle> <year> 1993, </year> <pages> pp. 3-17. </pages>
Reference-contexts: Rompel], substantially improves this by basing such a scheme on any one-way function. [18, Impagliazzo, Luby] provides complementary results; a one-way function can be constructed from a secure protocol for any one of a variety of cryptographic applications, including private key encryption, identification/authentication, bit commitment and coin flipping by telephone. <ref> [30, Ostrovsky, Wigderson] </ref> show that a one-way function can be constructed from any non-trivial zero-knowledge proof protocol. Thus, secure protocols for any of these applications is equivalent to the existence of one-way functions.
Reference: [31] <author> Plumstead, J., </author> <title> "Inferring a Sequence Generated by a Linear Congruence", </title> <booktitle> 23 rd FOCS, </booktitle> <year> 1982, </year> <pages> pp 153-159. </pages>
Reference-contexts: In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. The linear congruential generator is an example of a classical method for generating random looking bits that pass a variety of standard statistical tests. However, <ref> [31, Plumstead] </ref> and [23, Krawczyk] show that there is a polynomial time statistical test which the output from this generator does not pass.
Reference: [32] <author> Renyi, A., </author> <title> Probability Theory, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1970. </year>
Reference-contexts: Intuitively, if a distribution has min-entropy k, it is "at least as random" as the uniform distribution on k bit strings. There are distributions that have arbitrarily large entropy but have only one bit of min-entropy. The following definition of entropy is due to <ref> [32, Renyi] </ref>. Definition 3.9 (Renyi entropy) The Renyi entropy of D n is log (Pr [X = Y ]), where X 2 D n f0; 1g n and Y 2 D n f0; 1g n are independent.
Reference: [33] <author> R. Rivest, A. Shamir and L. Adleman, </author> <title> "A method for obtaining digital signatures and public-key cryptosystems", </title> <journal> Comm. of the ACM, </journal> <volume> Vol. 21, </volume> <year> 1978, </year> <pages> pp. 120-126. </pages>
Reference-contexts: Some examples of conjectured one-way functions are the discrete logarithm problem modulo a large randomly chosen prime (see, e.g., [8, Diffie, Hellman]), quadratic residuosity (see, e.g., [14, Goldwasser, Micali]), factoring a number that is the product of two large randomly chosen primes (see, e.g., <ref> [33, Rivest, Shamir, Adleman] </ref>), problems from coding theory (see, e.g., [11, Goldreich, Krawczyk, Luby]), and the subset sum problem for appropriately chosen parameters (see, e.g., [20, Impagliazzo, Naor]). 2 There are several important works that have contributed to the expansion of the condi-tions on one-way functions under which a pseudo-random generator
Reference: [34] <author> Rompel, J., </author> <title> "One-way Functions are Necessary and Sufficient for Secure Signatures", </title> <booktitle> 22 nd STOC, </booktitle> <year> 1990, </year> <pages> pp 387-394. </pages>
Reference-contexts: The results presented in this paper show that these same protocols can be based on any one-way function. [29, Naor, Yung], give a signature scheme that can be based on any one-way permutation, and <ref> [34, Rompel] </ref>, substantially improves this by basing such a scheme on any one-way function. [18, Impagliazzo, Luby] provides complementary results; a one-way function can be constructed from a secure protocol for any one of a variety of cryptographic applications, including private key encryption, identification/authentication, bit commitment and coin flipping by telephone.
Reference: [35] <author> Shannon, C., </author> <title> "A Mathematical Theory of Communication", </title> <journal> Bell Systems Technical Journal, </journal> <volume> 27, </volume> <year> 1948, </year> <pages> pp. 379-423 and pp. 623-656. </pages>
Reference-contexts: Let X 2 U f0; 1g n and Z 2 U f0; 1g `(n) . Then, g is a R-secure pseudo-random generator if g (X) and Z are R-secure computationally indistinguishable. 3.4 Entropy The following definition of entropy is from <ref> [35, Shannon] </ref>. Let D n be an ensemble with support contained in f0; 1g n , and let X 2 D n f0; 1g n .
Reference: [36] <author> Santha, M. and Vazirani, U., </author> <title> "Generating Quasi-random Sequences from Slightly-random Sources", </title> <journal> JCSS, </journal> <volume> Vol. 33, No. 1, </volume> <year> 1986. </year> <note> A preliminary version appeared in 25 th FOCS, </note> <year> 1984, </year> <pages> pp. 434-440, </pages>
Reference-contexts: for extracting good random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [3, Blum], <ref> [36, Santha, Vazirani] </ref>, [38, Vazirani], [40, Vazirani, Vazirani], [7, Chor, Goldreich] [27, McInnes].) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close
Reference: [37] <author> Sipser, M., </author> <title> "A Complexity Theoretic Approach to Randomness", </title> <booktitle> 15 th STOC, </booktitle> <year> 1983, </year> <pages> pp. 330-335. </pages>
Reference-contexts: Let Y 2 U f0; 1g `(n) and let Z 2 U f0; 1g m (n)2e (n) . Then, dist (hh Y (X); Y i; hZ; Y i) 2 (e (n)+1) : This lemma is a generalization of a lemma that appears in <ref> [37, Sipser] </ref>. There, D n is the uniform distribution on a set S f0; 1g n with ]S = 2 m (n) . [27, McInnes] and [2, Bennett, Brassard, Robert] also proved similar lemmas.
Reference: [38] <author> Vazirani, U., </author> <title> "Towards a Strong Communication Complexity Theory or Generating Quasi-random Sequences from Two Communicating Slightly-random Sources", </title> <journal> Com-binatorica, </journal> <volume> Vol. 7, No.4, </volume> <year> 1987. </year> <note> A preliminary version appeared in 17 th STOC, </note> <year> 1985, </year> <pages> pp. 366-378. </pages>
Reference-contexts: random bits from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [3, Blum], [36, Santha, Vazirani], <ref> [38, Vazirani] </ref>, [40, Vazirani, Vazirani], [7, Chor, Goldreich] [27, McInnes].) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random
Reference: [39] <author> Vazirani, U. and Vazirani, V., </author> <title> "Efficient and Secure Pseudo-Random Number Gen--eration", </title> <booktitle> 25 th FOCS, </booktitle> <year> 1984, </year> <pages> pp. 417-428. </pages>
Reference: [40] <author> Vazirani, U. and Vazirani, V., </author> <title> "Random Polynomial Time is Equal to Slightly-random Polynomial Time", </title> <booktitle> 26 th FOCS, </booktitle> <year> 1985, </year> <pages> pp. 417-428. </pages> <note> Submitted to JACM. </note>
Reference-contexts: from biased "slightly-random" sources that nevertheless possess a certain amount of entropy have been made; these sources model the imperfect physical sources of randomness, such as Geiger counter noise and Zener diodes, that would have to actually be utilized in real life. (See [3, Blum], [36, Santha, Vazirani], [38, Vazirani], <ref> [40, Vazirani, Vazirani] </ref>, [7, Chor, Goldreich] [27, McInnes].) One of our main 4 technical lemmas, (Lemma 1 on page 16), can be viewed as a hashing lemma which is used to manipulate entropy in various ways: it can be viewed as a method for extracting close to uniform random bits from
Reference: [41] <author> Yao, </author> <title> A.C., "Theory and Applications of Trapdoor Functions", </title> <booktitle> 23 rd FOCS, </booktitle> <year> 1982, </year> <pages> pp. 80-91. </pages>
Reference-contexts: Thus, a pseudo-random generator can be used to efficiently convert a small amount of true randomness into a much larger number of seemingly random bits. The robust notion of a pseudo-random generator, due to [4, Blum, Micali], <ref> [41, Yao] </ref>, should be contrasted with the classical methods of generating random looking bits as described in, e.g., [22, Knuth]. In studies of classical methods, the output of the generator is considered good if it passes a particular set of standard statistical tests. <p> This is a primary motivation for the seminal paper of [4, Blum, Micali], which is the first to define a generator as pseudo-random if it passes all feasible tests, and shows there is a pseudo-random generator based on the presumed difficulty of the discrete logarithm problem. The fundamental paper <ref> [41, Yao] </ref> modified this original definition of a pseudo-random generator to the generally used form, shows the two forms are equivalent, and shows how to to construct a pseudo-random generator from any one-way permutation (i.e., f is length preserving and injective). Furthermore, [41, Yao] shows how pseudo-random generators can be used <p> The fundamental paper <ref> [41, Yao] </ref> modified this original definition of a pseudo-random generator to the generally used form, shows the two forms are equivalent, and shows how to to construct a pseudo-random generator from any one-way permutation (i.e., f is length preserving and injective). Furthermore, [41, Yao] shows how pseudo-random generators can be used to reduce the number of random bits needed for any probabilistic polynomial time algorithm, and thus shows how to perform a deterministic simulation of any polynomial time probabilistic algorithm in subexponential time based on a pseudorandom generator. <p> For example, because X has n bits of entropy, g (X) can also have at most n bits of entropy (see Proposition 2 on page 9). The notion of a pseudo-random generator is intuitively the following. Following [14, Gold-wasser, Micali] and <ref> [41, Yao] </ref>, we say that g (X) and Y are computationally indistinguishable if no feasible adversary can distinguish g (X) from Y , in which case we say that g is a pseudo-random generator. <p> The notion of computational indistinguishability, originally defined by [14, Goldwasser, Micali] and <ref> [41, Yao] </ref>, restricts the computational resources available to adversaries. Definition 3.4 (computationally indistinguishable) X and Y are R-secure computation-ally indistinguishable if there is no R-breaking adversary for distinguishing X and Y . 8 3.3 Pseudo-random generator [4, Blum, Micali], [41, Yao] originally gave the definition of a pseudo-random generator as below, <p> notion of computational indistinguishability, originally defined by [14, Goldwasser, Micali] and <ref> [41, Yao] </ref>, restricts the computational resources available to adversaries. Definition 3.4 (computationally indistinguishable) X and Y are R-secure computation-ally indistinguishable if there is no R-breaking adversary for distinguishing X and Y . 8 3.3 Pseudo-random generator [4, Blum, Micali], [41, Yao] originally gave the definition of a pseudo-random generator as below, except that we parameterize security more precisely. Definition 3.5 (pseudo-random generator) Let g (x) be a (n; `(n))-standard function where `(n) &gt; n. The stretching parameter of g (x) is `(n) n 1. <p> The corollary follows because this implies that R 0 = P (R). 5.1 One-way permutation to a pseudo-random generator We describe a way to construct a pseudo-random generator from any one-way permutation which is substantially simpler (and has stronger security preserving properties) than the original construction of <ref> [41, Yao] </ref>. The construction and proof described here is due to [12, Goldreich, Levin]. Proposition 8 Let f (x) be a R-secure one-way permutation. Let r 2 f0; 1g n and define standard function g (x; r) = hf (x); r; x ri. Then g is P (R)-secure pseudo-random generator.
References-found: 41

