URL: ftp://ftp.eecs.umich.edu/people/jaeho/sss95-scs-design.ps
Refering-URL: http://ai.eecs.umich.edu/people/jaeho/jaeho.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: jaeho@eecs.umich.edu  
Title: AAAI Spring Symposium on Lessons Learned from Implemented Software Architectures for Physical Agents, p. 127-134
Author: Jaeho Lee 
Address: 1101 Beal Avenue Ann Arbor, Michigan 48109-2110  
Affiliation: Artificial Intelligence Laboratory The University of Michigan  
Abstract: Structured Circuit Semantics (SCS) is a formal semantics of robotic languages that can be used to explicitly represent the control behavior of various robotic control systems. Our approach to the design of SCS has been to incorporate the most essential features of other reactive plan execution systems in a compact, yet rich formal semantics. A formal specification of a reactive plan is essential for us to be able to generate a plan, reason about it, and communicate it among possibly multiple agents. Major design decisions include how to handle continuous actions and how to represent various agent behaviors such as nondeterministic behavior, best-first behavior, and persistent behavior. Metalevel reasoning and multiple threads of execution are also important design factors. Currently our effort is directed toward a semantics of multiagent robotic languages. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Drummond, M. </author> <year> (1989). </year> <title> Situated control rules. </title> <editor> In R. J. Brachman, H. J. Levesque, and R. Re-iter (Eds.), </editor> <booktitle> KR'89: Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pp. 103-113. </pages> <address> Toronto, Ontario, Canada: </address> <publisher> Kaufmann. </publisher>
Reference-contexts: In developing SCS, we have attempted to collect the essential and best features of the robotic reactive plan execution system. Because SCS embodies circuit semantics (see Ap pendix B), previous comparisons (Nilsson 1992; Nils--son 1994) between T-R programs and reactive plan execution systems such as SCR <ref> (Drummond 1989) </ref>, GAPPS (Pack Kaelbling 1988), PRS (Georgeff and Lansky 1987), and Universal Plans (Schoppers 1987), are applicable here as well. In this section, we concentrate on comparisons which specifically deal with SCS.
Reference: <author> Firby, R. J. </author> <year> (1989, </year> <month> January). </month> <title> Adaptive execution in complex dynamic worlds. </title> <type> Technical Note YALE/DCS/RR #672, </type> <institution> Department of Computer Science, Yale University. </institution>
Reference: <author> Firby, R. J. </author> <year> (1992, </year> <month> June). </month> <title> Building symbolic primitives with continuous control routines. </title> <editor> In J. Hendler (Ed.), </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the First International Conference, </booktitle> <address> College Park, Maryland, </address> <pages> pp. 62-68. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Georgeff, M. P. and A. L. </author> <title> Lansky (1987). Reactive reasoning and planning. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, Washington, </address> <pages> pp. 677-682. </pages> <note> (Also published in Readings in Planning, </note> <editor> James Allen, James Hendler and Austin Tate, editors, </editor> <address> pages 729-734, </address> <publisher> Morgan Kaufmann, 1990.). </publisher>
Reference-contexts: Because SCS embodies circuit semantics (see Ap pendix B), previous comparisons (Nilsson 1992; Nils--son 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS (Pack Kaelbling 1988), PRS <ref> (Georgeff and Lansky 1987) </ref>, and Universal Plans (Schoppers 1987), are applicable here as well. In this section, we concentrate on comparisons which specifically deal with SCS. As illustrated in the previous section, the do first construct and the capability of defining a step covers the circuit semantics of T-R programs.
Reference: <author> Ingrand, F. F., M. P. Georgeff, and A. S. Rao (1992, </author> <month> December). </month> <title> An architecture for real-time reasoning and system control. </title> <booktitle> IEEE Expert 7 (6), </booktitle> <pages> 34-44. </pages>
Reference-contexts: 1 Introduction The Procedural Reasoning System (PRS) <ref> (Ingrand, Georgeff, and Rao 1992) </ref> is a general purpose reasoning system particularly suited for use in domains in which there are predetermined procedures for handling the situations that might arise.
Reference: <author> Lee, J. and E. H. Durfee (1994, </author> <month> July). </month> <title> Structured circuit semantics for reactive plan execution systems. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seat-tle, Washington, </address> <pages> pp. 1232-1237. </pages>
Reference-contexts: Specifically, UM-PRS has been used to control a real outdoor vehicle that chooses its behavior based on what it senses from its environment <ref> (Lee, Huber, Dur-fee, and Kenny 1994) </ref>. Our UM-PRS implementation and applications to outdoor vehicle control motivated the development of 0 This research was sponsored in part by ARPA under contract DAAE-07-92-C-R012. Structured Circuit Semantics (SCS) 1 as the need for clean execution semantics arose. <p> In this section, we will describe major components of the SCS plan execution system. Expressions The SCS language supports that expressions that can be evaluated at runtime. Values and variables are expressions. A value can be either an integer number, 1 Readers can see Appendix C or refer to <ref> (Lee and Durfee 1994) </ref> for the details of SCS. a floating point number, an address (an integer), or a string. A variable can be bound to any value. A function is also an expression. The syntax of function expressions follows the Lisp function format closely.
Reference: <author> Lee, J., M. J. Huber, E. H. Durfee, and P. </author> <note> G. </note>
Reference: <author> Kenny (1994, </author> <month> March). </month> <title> UM-PRS: an implementation of the procedural reasoning system for multi-robot applications. </title> <booktitle> In Conference on Intelligent Robotics in Field, Factory, Service, and Space (CIRFFSS '94), </booktitle> <address> Houston, Texas, </address> <pages> pp. 842-849. </pages>
Reference-contexts: Specifically, UM-PRS has been used to control a real outdoor vehicle that chooses its behavior based on what it senses from its environment <ref> (Lee, Huber, Dur-fee, and Kenny 1994) </ref>. Our UM-PRS implementation and applications to outdoor vehicle control motivated the development of 0 This research was sponsored in part by ARPA under contract DAAE-07-92-C-R012. Structured Circuit Semantics (SCS) 1 as the need for clean execution semantics arose.
Reference: <author> McDermott, D. </author> <year> (1991, </year> <month> June). </month> <title> A reactive plan language. </title> <type> Technical Note YALEU/CSD/RR #864, </type> <institution> Department of Computer Science, Yale University. </institution>
Reference: <author> McDermott, D. </author> <year> (1992, </year> <month> December). </month> <title> Transformational planning of reactive behavior. </title> <type> Technical Note YALEU/CSD/RR #941, </type> <institution> Department of Computer Science, Yale University. </institution>
Reference: <author> Nilsson, N. J. </author> <year> (1992, </year> <month> January). </month> <title> Toward agent programs with circuit semantics. </title> <type> Technical Report STAN-CS-92-1412, </type> <institution> Department of Computer Science, Stanford University. </institution>
Reference-contexts: The real utility then updates the discount factor to reflects the applicability of the action. B Circuit Semantics When executing on a computational system, a program is said to have circuit semantics when it produces (at least conceptually) electrical circuits that are in turn used for control <ref> (Nilsson 1992) </ref>. In particular, a teleo-reactive (T-R) sequence is an agent control program based on circuit semantics. T-R programs combine the notions of continuous feedback with more conventional computational mechanisms such as runtime parameter binding and passing, and hierarchical and recursive invocation structures.
Reference: <author> Nilsson, N. J. </author> <year> (1994). </year> <title> Teleo-reactive programs for agent control. </title> <journal> Journal of Artificial Intelligence Research 1, </journal> <pages> 139-158. </pages>
Reference-contexts: In contrast with some of the behavior-based approaches, T-R programs are responsive to stored models of the environment as well as to their immediate sensory inputs <ref> (Nilsson 1994) </ref>. In its simplest form, a T-R program consists of an ordered set of production K 1 ! a 1 rules (Figure 2). The K i are conditions, and the a i are actions.
Reference: <author> Pack Kaelbling, L. </author> <year> (1988). </year> <title> Goals as parallel program specifications. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <address> St. Paul, </address> <publisher> Minnesota, </publisher> <pages> pp. 60-65. </pages>
Reference-contexts: In developing SCS, we have attempted to collect the essential and best features of the robotic reactive plan execution system. Because SCS embodies circuit semantics (see Ap pendix B), previous comparisons (Nilsson 1992; Nils--son 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS <ref> (Pack Kaelbling 1988) </ref>, PRS (Georgeff and Lansky 1987), and Universal Plans (Schoppers 1987), are applicable here as well. In this section, we concentrate on comparisons which specifically deal with SCS.
Reference: <author> Schoppers, M. J. </author> <year> (1987). </year> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Milan, Italy, </address> <pages> pp. 1039-1046. </pages>
Reference-contexts: If the decision for multi-threading should be made at run-time, that decision making process could be combined with the above mentioned embedded metalevel decision mechanism. 4 Related Work and Future Work A variety of languages for robotic systems have been developed in recent years, including PRS, Teleo-Reactive Programs, Universal Plans <ref> (Schoppers 1987) </ref>, and RAPs (Firby 1989; Firby 1992). Each of these approaches attempts to solve the problem of taking reasonable courses of action fast enough in response to a dynamically changing environment. These competing approaches have diverse representations and (sometimes implicit) control structures. <p> Because SCS embodies circuit semantics (see Ap pendix B), previous comparisons (Nilsson 1992; Nils--son 1994) between T-R programs and reactive plan execution systems such as SCR (Drummond 1989), GAPPS (Pack Kaelbling 1988), PRS (Georgeff and Lansky 1987), and Universal Plans <ref> (Schoppers 1987) </ref>, are applicable here as well. In this section, we concentrate on comparisons which specifically deal with SCS. As illustrated in the previous section, the do first construct and the capability of defining a step covers the circuit semantics of T-R programs.
References-found: 14

