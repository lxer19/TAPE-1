URL: http://www.cs.umd.edu/projects/plus/UMT/umt.ps
Refering-URL: http://www.cs.umd.edu/projects/plus/UMT/
Root-URL: 
Title: UM Translog: A Planning Domain for the Development and Benchmarking of Planning Systems  
Author: Scott Andrews, Brian Kettler, Kutluhan Erol, and James Hendler 
Affiliation: Institute for Systems Research and the Institute for Advanced Computer Studies.  
Note: This research was supported in part by grants from NSF (IRI-8907890), ONR (N00014-J-91-1451), AFOSR (F49620-93-1-0065), the ARPA/Rome Laboratory Planning Initiative (F30602-93-C-0039) and by ARI (MDA-903-92-R-0035), subcontract through Microelectronics and Design, Inc. Dr. Hendler is also affiliated with the  
Abstract: Department of Computer Science, Institute for Advanced Computer Studies, and Institute for Systems Research University of Maryland College Park, MD 20742 E-mail: hendler@cs.umd.edu June 1995 Technical Report CS-TR-3487 (UMIACS TR-95-69) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Erol, J. Hendler, D. S. Nau, and R. Tsuneto. </author> <title> UMCP User Manual. </title> <type> Technical report, </type> <institution> Institute for Advanced Computer Studies, University of Maryland, </institution> <year> 1995. </year>
Reference-contexts: For details on how to use UMCP, see the UMCP user manual <ref> [1] </ref>. Documentation and code for UMCP/UM Translog are available on the WWW at URL http://www.cs.umd.edu/plus/projects/UMCP/. Note that neither UMCP, nor the UM Translog domain specification for UMCP have been fully tested at the time of this technical report.
Reference: [2] <author> K. Erol. </author> <title> HTN Planning: Formalization, Analysis, and Implementation. </title> <type> PhD thesis, </type> <year> 1995. </year>
Reference-contexts: UM Translog is currently being used in the evaluation of a case-based planning system, CaPER [6, 5], and a hierarchical task network planning system, UMCP <ref> [3, 2] </ref>. It is also being used by UM Nonlin [4], a common lisp implementation of Austin Tate's Nonlin HTN planning system, to generate a plan library for plan reuse by CaPER.
Reference: [3] <author> K. Erol, J. Hendler, D. S. Nau, and R. Tsuneto. </author> <title> A critical look at critics in htn planning. </title> <booktitle> In IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: UM Translog is currently being used in the evaluation of a case-based planning system, CaPER [6, 5], and a hierarchical task network planning system, UMCP <ref> [3, 2] </ref>. It is also being used by UM Nonlin [4], a common lisp implementation of Austin Tate's Nonlin HTN planning system, to generate a plan library for plan reuse by CaPER.
Reference: [4] <author> Subrata Ghosh, James Hendler, Subbarao Kambhampati, and Brian Kettler. </author> <title> UM Nonlin | A Common Lisp Implementation of Nonlin: User Manual. </title> <institution> University of Maryland at College Park, Department of Computer Science, </institution> <address> 1.2.2 edition, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: UM Translog is currently being used in the evaluation of a case-based planning system, CaPER [6, 5], and a hierarchical task network planning system, UMCP [3, 2]. It is also being used by UM Nonlin <ref> [4] </ref>, a common lisp implementation of Austin Tate's Nonlin HTN planning system, to generate a plan library for plan reuse by CaPER. Due to the complexity and size of the domain, it is not easy to define UM Translog problems manually. <p> For details on how to use UM Nonlin, see the UM Nonlin user manual <ref> [4] </ref>. Documentation and code for UM Nonlin/UM Translog are available on the WWW at URL http://www.cs.umd.edu/plus/projects/Nonlin/ or by anonymous ftp from ftp.cs.umd.edu 6 UM Translog operators for UM Nonlin are divided into 3 files that can be FTPed.
Reference: [5] <author> Brian P. Kettler. </author> <title> Case-based Planning with a Massively Parallel Memory. </title> <type> Doctoral dissertation, </type> <institution> University of Maryland at College Park, Dept. of Computer Science, </institution> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: UM Translog is currently being used in the evaluation of a case-based planning system, CaPER <ref> [6, 5] </ref>, and a hierarchical task network planning system, UMCP [3, 2]. It is also being used by UM Nonlin [4], a common lisp implementation of Austin Tate's Nonlin HTN planning system, to generate a plan library for plan reuse by CaPER.
Reference: [6] <author> Brian P. Kettler, James A. Hendler, William A. Andersen, and Matthew P. Evett. </author> <title> Massively parallel support for case-based planning. </title> <journal> IEEE Expert, </journal> <pages> pages 8-14, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: UM Translog is currently being used in the evaluation of a case-based planning system, CaPER <ref> [6, 5] </ref>, and a hierarchical task network planning system, UMCP [3, 2]. It is also being used by UM Nonlin [4], a common lisp implementation of Austin Tate's Nonlin HTN planning system, to generate a plan library for plan reuse by CaPER.
Reference: [7] <author> Manuela M. Veloso. </author> <title> Learning By Analogical Reasoning in General Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: UM Translog is a planning domain designed specifically for this purpose. UM Translog was inspired by the CMU Transport Logistics domain developed by Manuela Veloso <ref> [7] </ref>. UM Translog is an order of magnitude larger in size (41 actions versus 6), number of features and types interactions. It provides a rich set of entities, attributes, actions and conditions, which can be used to specify rather complex planning problems with a variety of plan interactions.
Reference: [8] <author> D. McAllester, and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. AAAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: These techniques have been implemented in numerous planning systems (e.g., <ref> [12, 8, 9, 10, 11] </ref>). Initially, a number of simple toy domains have been devised to assist in the analysis and evaluation of planning systems and techniques.
Reference: [9] <author> J. Penberthy, and D. S. Weld. UCPOP: </author> <title> A Sound, Complete, </title> <booktitle> Partial Order Planner for ADL Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992 </year>
Reference-contexts: These techniques have been implemented in numerous planning systems (e.g., <ref> [12, 8, 9, 10, 11] </ref>). Initially, a number of simple toy domains have been devised to assist in the analysis and evaluation of planning systems and techniques.
Reference: [10] <author> Austin Tate. </author> <title> Generating Project Networks In Proc. </title> <address> IJCAI-77, </address> <year> 1977. </year> <pages> pp. 888-893. </pages>
Reference-contexts: These techniques have been implemented in numerous planning systems (e.g., <ref> [12, 8, 9, 10, 11] </ref>). Initially, a number of simple toy domains have been devised to assist in the analysis and evaluation of planning systems and techniques.
Reference: [11] <author> David Wilkins Practical Planning: </author> <title> Extending the classical AI planning paradigm, </title> <publisher> Morgan-Kaufmann, </publisher> <address> CA. </address> <year> 1988. </year>
Reference-contexts: These techniques have been implemented in numerous planning systems (e.g., <ref> [12, 8, 9, 10, 11] </ref>). Initially, a number of simple toy domains have been devised to assist in the analysis and evaluation of planning systems and techniques.
Reference: [12] <author> R. E. Fikes, and N. J. Nilsson. </author> <title> STRIPS: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. <volume> 26 </volume>
Reference-contexts: These techniques have been implemented in numerous planning systems (e.g., <ref> [12, 8, 9, 10, 11] </ref>). Initially, a number of simple toy domains have been devised to assist in the analysis and evaluation of planning systems and techniques.
References-found: 12

