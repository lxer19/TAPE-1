URL: ftp://ftp.cs.huji.ac.il/users/transis/dagstuhl95.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts95.html
Root-URL: http://www.cs.huji.ac.il
Title: The Design of the Transis System  
Author: Danny Dolev and Dalia Malki 
Address: Jerusalem Israel  
Affiliation: Computer Science Institute Hebrew University  
Abstract: Transis is a high availability distributed system, being developed in the Hebrew University. It supports reliable group communication for high availability applications. The system provides enhanced services for information dissemination and replication in a dynamic environment where machines may crash, for arbitrarily long periods, and may recover; where the network may partition and re-merge. Transis contains novel protocols for reliable message delivery, it optimizes the performance for existing network hardware, and offers a variety of different handles to upper applications. The paper presents the experience gained in the design and the implementation of the Transis communication subsystem.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. In Proceedings of the Hardware and Software Architectures for Fault Tolerance Workshop, </title> <institution> at Le Mont Saint-Michel, France (LNCS 774), </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In this way, the membership service associates a membership-context with each message. The application can use this to perform consistent operations on received messages, and to merge the histories of joined components. For example, <ref> [1] </ref> describes a replicated mail server that exploits the Transis membership for efficiently implementing a partitionable service. Intuitively, at the basis of our membership protocol, there are two stages: (1) suggest a new membership set, (2) wait for agreement &gt;from every machine in the set.
Reference: 2. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership Algorithms for Mul-ticast Communication Groups. </title> <booktitle> In 6th Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (LCNS, </booktitle> <volume> 647), </volume> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Transis contains a membership protocol that is integrated in the communication system, such that the notifications of membership changes are delivered to the application among the stream of regular messages <ref> [2, 13] </ref>. Changes to the membership are coordinated with the delivery of regular messages in the system. Most membership protocols allow only one component to continue operation, in case of network partitions [27, 11].
Reference: 3. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication SubSystem for High Availability. </title> <booktitle> In 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction This paper presents the design and implementation of the Transis communication subsystem <ref> [3] </ref>. Transis supports reliable group communication for high availability applications. The system provides enhanced services for information dissemination and replication in a dynamic environment where machines may crash, for arbitrarily long periods, and may recover; where the network may partition and re-merge. <p> Early detection saves on buffer space by allowing prompt garbage collection, regulates the flow better, and prevents cascading losses. In the Transis project, this principle led to two separate versions of the system: One, based on the Trans protocol [22], relies on causal relationships among messages (see <ref> [3] </ref>), and the other relies on a revolving token that forms a total order on message transmission events (see [5]). Our protocols rely on very low message loss rates of the networks. However, under high communication loads, the networks and the underlying protocols can be driven to high loss rates.
Reference: 4. <author> Y. Amir, D. Dolev, P. M. Melliar-Smith, and L. E. Moser. </author> <title> Robust and Efficient Replication using Group Communication. </title> <type> Technical Report CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: The PRSL provides various levels of consistency guarantees, such as message ordering and stability. PRSL contains two algorithms implementing persistent and ordered message replication, optimized for two extremes: Minimizing end-to-end communication. In this optimization, applications re quire to exchange end-to-end acknowledgment only after a group membership change (see <ref> [4] </ref>). Thus, as long as no changes take place,the overhead is min imized. Guaranteed majority progress. In this optimization, a primary partition service guarantees that whenever a primary partition of machines is connected for sufficiently long, they will be able to proceed, despite all past failures (see [17]). <p> To the best of our knowledge, this is the only existing protocol that has this desirable property. Within each connected component, CoRel requires an application-level acknowledgment for each message before it can be delivered in total-order. Another protocol implementing persistent total ordering in partitionable groups is provided in <ref> [4] </ref>. Their protocol does not require application level acknowledgments for reaching total ordering decisions, and thus does not need to delay the delivery of totally ordered messages until the application handles them.
Reference: 5. <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella. </author> <title> Fast Message Ordering and Membership Using a Logical Token-Passing Ring. </title> <booktitle> In Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: When partitions recover, Transis implements a novel methodology for providing consistent merging. The principles that underlie the Transis approach for handling partitions have been adopted by several additional projects already: Totem <ref> [5] </ref> and Horus [28]. The system regulates the flow of messages in the network to prevent message loss, as much as possible, and avoid flooding. <p> The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem <ref> [5] </ref>, Psync [25] and Consul [23], Amoeba [15], [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy. <p> In the Transis project, this principle led to two separate versions of the system: One, based on the Trans protocol [22], relies on causal relationships among messages (see [3]), and the other relies on a revolving token that forms a total order on message transmission events (see <ref> [5] </ref>). Our protocols rely on very low message loss rates of the networks. However, under high communication loads, the networks and the underlying protocols can be driven to high loss rates. <p> The Agreed multicast service guarantees that messages arrive reliably and in the same total-order to all their destinations. Since we currently have three versions of Transis that differ in their implementation of the Agreed multicast service <ref> [12, 5] </ref>, we chose to present the tradeoffs in this issue. There are several completely distributed algorithms that build a total order &gt;from the local information and reach agreement [22, 12, 25]. It is perhaps easiest to understand the all-ack algorithm of Transis, that is also completely distributed. <p> On the other hand, these methods can sustain steady transmission loads that are close to the network limits, when all the machines are fairly uniformly active. A different family of protocols orders the messages in a total order by contending for an ordering capability to order messages <ref> [9, 5, 16] </ref>. The Isis AB-CAST protocol [9] employs a token-holder within each group of communicating processes. ABCAST messages are multicast at will, and their delivery is delayed by all the receiving processes except for the token holder. <p> A sequencer kernel is designated as the central controller. Every message is sent to it via point to point communication, and the sequencer multicasts it to all the machines. The FIFO order of sequencer-transmissions determines a total order for all the messages. The Totem protocol <ref> [5] </ref> uses a revolving token that holds a sequence-number for messages. The holder of the token can emit one or more multicast messages, and update the token sequence accordingly. In order to transmit a multicast message, a processor must obtain the token. <p> This cost is apparent both in the delay occurring until the control is obtained, and in extra messages exchanged. Once it is obtained, transmission and ordering is done immediately. Therefore, we say that they have a pre-transmission delay. The advantage of a control scheme like the revolving token of <ref> [5] </ref> is that it regulates the flow of messages efficiently. It is not entirely clear what are the tradeoffs between pre-transmission ordering and post-transmission ordering in these protocols.
Reference: 6. <author> K. P. Birman. </author> <title> The Process Group Approach to Reliable Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12), </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: In case no regular message is transmitted, then periodically, an empty message containing only acknowledgment and an "I am alive" indication will go out. These ideas are not new, and are utilized also, in various forms, in <ref> [25, 22, 16, 6] </ref>. Their importance is great in today's networks, that exhibit extremely low message loss rates. Detection of message losses must be made as soon as possible. Suppose that machines A, B and C send successive messages.
Reference: 7. <author> K. P. Birman. </author> <title> Reliable Distributed Computing with the Isis Toolkit, chapter Virtual Synchrony Model. </title> <publisher> IEEE Press, </publisher> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: the virtual synchrony programming model, and its extension to partitionable operation, see below (Section 2.3). 2.3 Virtual Synchrony and Partitionable Operation Transis provides the application programmer with a programming environment that is conceptually Virtually Synchronous, as defined by Ken Birman et. al in the early work on the Isis system <ref> [7] </ref>, and extended into partitionable environments in [24]. The virtual synchrony model and its extension to partitionable operation encompasses the relation between message passing operations in a process-group, and between control messages provided by the system about process failures and joins in the group. <p> In this sense, membership changes are virtually synchronous, as the processes have identical contexts when messages arrive. This allows the processes to act upon the messages they receive in a consistent way. For a formal definition of the virtual synchrony model, refer to <ref> [7] </ref>. As an important extension to the Isis virtual synchrony model, Transis allows partitionable operation: If a group partitions into two components, such that communication between the components is impossible, then each component continues observing the virtual synchrony model separately.
Reference: 8. <author> K. P. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with Process Groups: Group and Multicast Semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: This might sound chaotic, at first. However, we require that: Every pair of machines that go through two consecutive membership changes, receive the same set of messages between the two changes. (This is a gener alization of the principle called virtual synchrony, see <ref> [8] </ref>). Upon re-merging, all the machines in the new membership start with a consistent view of the membership, and agree on the messages that immediately follow it. In this way, the membership service associates a membership-context with each message.
Reference: 9. <author> K. P. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <year> 1991. </year>
Reference-contexts: On the other hand, these methods can sustain steady transmission loads that are close to the network limits, when all the machines are fairly uniformly active. A different family of protocols orders the messages in a total order by contending for an ordering capability to order messages <ref> [9, 5, 16] </ref>. The Isis AB-CAST protocol [9] employs a token-holder within each group of communicating processes. ABCAST messages are multicast at will, and their delivery is delayed by all the receiving processes except for the token holder. <p> A different family of protocols orders the messages in a total order by contending for an ordering capability to order messages [9, 5, 16]. The Isis AB-CAST protocol <ref> [9] </ref> employs a token-holder within each group of communicating processes. ABCAST messages are multicast at will, and their delivery is delayed by all the receiving processes except for the token holder.
Reference: 10. <author> K. P. Birman and R. van Renesse. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis <ref> [10] </ref>, Horus [29], Totem [5], Psync [25] and Consul [23], Amoeba [15], [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
Reference: 11. <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4(4) </volume> <pages> 175-187, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Changes to the membership are coordinated with the delivery of regular messages in the system. Most membership protocols allow only one component to continue operation, in case of network partitions <ref> [27, 11] </ref>. In large and critical systems, this approach is not realistic, and it is essential to enable operation in face of partitions.
Reference: 12. <author> D. Dolev, S. Kramer, and D. Malki. </author> <title> Early Delivery Totally Ordered Broadcast in Asynchronous Environments. </title> <booktitle> In 23rd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 544-553, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The Agreed multicast service guarantees that messages arrive reliably and in the same total-order to all their destinations. Since we currently have three versions of Transis that differ in their implementation of the Agreed multicast service <ref> [12, 5] </ref>, we chose to present the tradeoffs in this issue. There are several completely distributed algorithms that build a total order &gt;from the local information and reach agreement [22, 12, 25]. It is perhaps easiest to understand the all-ack algorithm of Transis, that is also completely distributed. <p> Since we currently have three versions of Transis that differ in their implementation of the Agreed multicast service [12, 5], we chose to present the tradeoffs in this issue. There are several completely distributed algorithms that build a total order &gt;from the local information and reach agreement <ref> [22, 12, 25] </ref>. It is perhaps easiest to understand the all-ack algorithm of Transis, that is also completely distributed. The above referred algorithms are essentially optimizations on this principle. The all-ack idea is: Wait until at least one message is received from each machine.
Reference: 13. <author> D. Dolev, D. Malki, and H. R. </author> <title> Strong. An Asynchronous Membership Protocol that Tolerates Partitions. </title> <note> submitted for publication. Available as CS TR94-6, </note> <institution> Institute of Computer Science, the Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: Transis contains a membership protocol that is integrated in the communication system, such that the notifications of membership changes are delivered to the application among the stream of regular messages <ref> [2, 13] </ref>. Changes to the membership are coordinated with the delivery of regular messages in the system. Most membership protocols allow only one component to continue operation, in case of network partitions [27, 11]. <p> In our protocol, the context of regular messages that are sent during membership transitions is determined by their order with respect to the messages used within the membership protocol. In <ref> [13] </ref>, we present the full solution that supports partitioned operation and rejoining. Joining is done multi-way, in a completely symmetrical fashion. In this way, the joining provides a solution to the startup problem as well: Each machine starts up as a singleton set on its own.
Reference: 14. <author> J. Y. Halpern and Y. Moses. </author> <title> Knowledge and Common Knowledge in a Distributed Environment. </title> <booktitle> In 3rd Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 50-61, </pages> <year> 1984. </year>
Reference-contexts: If it could, the act of message-delivery would require common-knowledge, which is impossible to attain in an asynchronous environment <ref> [14] </ref>. In Transis, we therefore provide two levels of reliable service: Atomic: An Atomic message delivered at any member is guaranteed to be delivered at all the currently operational members of the application, despite message omissions.
Reference: 15. <author> M. F. Kaashoek and A. S. Tanenbaum. </author> <title> Group Communication in the Amoeba Distributed Operating System. </title> <booktitle> In 11th Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pages 882-891, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem [5], Psync [25] and Consul [23], Amoeba <ref> [15] </ref>, [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
Reference: 16. <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An Efficient Reliable Broadcast Protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In case no regular message is transmitted, then periodically, an empty message containing only acknowledgment and an "I am alive" indication will go out. These ideas are not new, and are utilized also, in various forms, in <ref> [25, 22, 16, 6] </ref>. Their importance is great in today's networks, that exhibit extremely low message loss rates. Detection of message losses must be made as soon as possible. Suppose that machines A, B and C send successive messages. <p> On the other hand, these methods can sustain steady transmission loads that are close to the network limits, when all the machines are fairly uniformly active. A different family of protocols orders the messages in a total order by contending for an ordering capability to order messages <ref> [9, 5, 16] </ref>. The Isis AB-CAST protocol [9] employs a token-holder within each group of communicating processes. ABCAST messages are multicast at will, and their delivery is delayed by all the receiving processes except for the token holder. <p> Periodically, the token holder sends a message indicating its order of delivery for all received ABCAST messages, and all the other processes comply with it. The Token may also migrate to the sender. The Amoeba system contains a different variation of this scheme, implemented within the operating system kernel <ref> [16] </ref>. A sequencer kernel is designated as the central controller. Every message is sent to it via point to point communication, and the sequencer multicasts it to all the machines. The FIFO order of sequencer-transmissions determines a total order for all the messages.
Reference: 17. <author> I. Keidar. </author> <title> A Highly Available Paradigm for Consistent Object Replication. </title> <type> Master's thesis, </type> <institution> Inst. of Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year> <note> Also available as Technical Report CS95-5. submitted for publication. </note>
Reference-contexts: Thus, as long as no changes take place,the overhead is min imized. Guaranteed majority progress. In this optimization, a primary partition service guarantees that whenever a primary partition of machines is connected for sufficiently long, they will be able to proceed, despite all past failures (see <ref> [17] </ref>). <p> Typically, this requires a majority of the processes (or, in more general terms, a primary component ) to be able to reach a consensus decision. The CoRel replication protocol <ref> [17] </ref>, developed for the Transis project, supports total ordering within a primary-component, and provides automatic merging of message-histories upon recovery of partitions. The protocol guarantees that progress of total-ordering decisions is always possible within a primary-component.
Reference: 18. <author> R. Ladin, B. Liskov, L. Shrira, and S. Ghemawat. </author> <title> Lazy Replication: Exploiting the Semantics of Distributed Services. </title> <booktitle> In 9th Ann. Symp. Principles of Distributed Computing, </booktitle> <pages> pages 43-58, </pages> <month> August 90. </month>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem [5], Psync [25] and Consul [23], Amoeba [15], <ref> [18] </ref>, Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
Reference: 19. <author> L. Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Comm. ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: Thus, in case detached components continue operating shortly after a partition occurs, consistency is preserved. For applications that do not utilize totally ordered multicast, Transis provides a weaker form of ordering: Causal: A causally ordered multicast service preserves the causal order of mes sages (see <ref> [19] </ref>). Intuitively, causal communication guarantees that a response to a certain message will never be delivered before the message.
Reference: 20. <author> D. Malki, Y. Amir, D. Dolev, and S. Kramer. </author> <title> The Transis Approach to High Availability Cluster Communication. </title> <type> TR 94-14, </type> <institution> Inst. of Comp. Sci., The Hebrew University of Jerusalem, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: It employs a highly efficient multicast protocol, based on the Trans proto col [22], that utilizes available hardware multicast. 2. It can sustain extremely high communication throughput due to its effective flow control mechanism, and its simple group design (for performance results, see <ref> [20] </ref>). 3. Is supports partitionable operation, and provides the means for consistently merging components upon recovery. As of approximately two years ago, Transis has been operational at the He-brew University, and supports various applications as well as the "Distributed Algorithms" course. Acknowledgements The Transis project started in early 1991.
Reference: 21. <author> D. Malki and R. van Renesse. </author> <title> The Replication Service Layer. </title> <type> internal manuscript, </type> <year> 1994. </year>
Reference-contexts: We do not elaborate further on WAN protocols in this paper. Transis is a modular and extendible system. Many higher level services can benefit from the underlying transport services. For example, in the current prototype, Transis supports a Persistent Replication Service, designed in collaboration with the Horus project <ref> [21] </ref>. The Persistent Replication Service Layer (PRSL) provides the application builder with long term services such as message logging and replaying, and reconciliation of states among recovered and reconnected endpoints. <p> We envision many higher level services that can benefit from the underlying transport services. In this section, we describe the Persistent Replication Service designed for Transis in collaboration with the Horus project <ref> [21] </ref>. The Persistent Replication Service Layer (PRSL) provides the application builder with long term services such as message logging and replaying, and reconciliation of states among recovered and reconnected endpoints. The PRSL supports multicast messages among members of a designated group.
Reference: 22. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: This paper will appear in the proceedings of Dagstuhl Workshop on Unifying Theory and Practice in Distributed Computing, September 1995. ??? Elec mail: dolev@cs.huji.ac.il y Elec mail: dalia@cs.huji.ac.il ?? This work was supported in part by GIF I-207-199.6/91 - Transis employs a reliable multicast protocol, based on the Trans proto-col <ref> [22] </ref>, that utilizes the available hardware broadcast or multicast, in order to disseminate messages to multiple destinations with minimal overhead. Performance results show that, indeed, the protocol can sustain extremely high communication rates among a large number of participants. <p> In case no regular message is transmitted, then periodically, an empty message containing only acknowledgment and an "I am alive" indication will go out. These ideas are not new, and are utilized also, in various forms, in <ref> [25, 22, 16, 6] </ref>. Their importance is great in today's networks, that exhibit extremely low message loss rates. Detection of message losses must be made as soon as possible. Suppose that machines A, B and C send successive messages. <p> Early detection saves on buffer space by allowing prompt garbage collection, regulates the flow better, and prevents cascading losses. In the Transis project, this principle led to two separate versions of the system: One, based on the Trans protocol <ref> [22] </ref>, relies on causal relationships among messages (see [3]), and the other relies on a revolving token that forms a total order on message transmission events (see [5]). Our protocols rely on very low message loss rates of the networks. <p> Since we currently have three versions of Transis that differ in their implementation of the Agreed multicast service [12, 5], we chose to present the tradeoffs in this issue. There are several completely distributed algorithms that build a total order &gt;from the local information and reach agreement <ref> [22, 12, 25] </ref>. It is perhaps easiest to understand the all-ack algorithm of Transis, that is also completely distributed. The above referred algorithms are essentially optimizations on this principle. The all-ack idea is: Wait until at least one message is received from each machine. <p> The Transis approach to advanced group communication has acquired a wide recognition in the academic community, mainly due to the following desirable properties: 1. It employs a highly efficient multicast protocol, based on the Trans proto col <ref> [22] </ref>, that utilizes available hardware multicast. 2. It can sustain extremely high communication throughput due to its effective flow control mechanism, and its simple group design (for performance results, see [20]). 3. Is supports partitionable operation, and provides the means for consistently merging components upon recovery.
Reference: 23. <author> S. Mishra, L. L. Peterson, and R. L. Schlichting. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <type> TR 91-32, </type> <institution> dept. of Computer Science, University of Arizona, </institution> <year> 1991. </year>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem [5], Psync [25] and Consul <ref> [23] </ref>, Amoeba [15], [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
Reference: 24. <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended virtual synchrony. </title> <booktitle> In Proceedings of the Fourteenth Intl. Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year> <note> IEEE. Also available as technical report ECE93-22, </note> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <address> CA. </address>
Reference-contexts: extension to partitionable operation, see below (Section 2.3). 2.3 Virtual Synchrony and Partitionable Operation Transis provides the application programmer with a programming environment that is conceptually Virtually Synchronous, as defined by Ken Birman et. al in the early work on the Isis system [7], and extended into partitionable environments in <ref> [24] </ref>. The virtual synchrony model and its extension to partitionable operation encompasses the relation between message passing operations in a process-group, and between control messages provided by the system about process failures and joins in the group.
Reference: 25. <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and Using Context Information in Interprocess Communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem [5], Psync <ref> [25] </ref> and Consul [23], Amoeba [15], [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy. <p> In case no regular message is transmitted, then periodically, an empty message containing only acknowledgment and an "I am alive" indication will go out. These ideas are not new, and are utilized also, in various forms, in <ref> [25, 22, 16, 6] </ref>. Their importance is great in today's networks, that exhibit extremely low message loss rates. Detection of message losses must be made as soon as possible. Suppose that machines A, B and C send successive messages. <p> Since we currently have three versions of Transis that differ in their implementation of the Agreed multicast service [12, 5], we chose to present the tradeoffs in this issue. There are several completely distributed algorithms that build a total order &gt;from the local information and reach agreement <ref> [22, 12, 25] </ref>. It is perhaps easiest to understand the all-ack algorithm of Transis, that is also completely distributed. The above referred algorithms are essentially optimizations on this principle. The all-ack idea is: Wait until at least one message is received from each machine.
Reference: 26. <author> D. Powell. Delta-4: </author> <title> A Generic Architecture for Dependable Distributed Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus [29], Totem [5], Psync [25] and Consul [23], Amoeba [15], [18], Delta-4 <ref> [26] </ref>, and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
Reference: 27. <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using Process Groups to Implement Failure Detection in Asynchronous Environments. </title> <booktitle> In proc. annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-352, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Changes to the membership are coordinated with the delivery of regular messages in the system. Most membership protocols allow only one component to continue operation, in case of network partitions <ref> [27, 11] </ref>. In large and critical systems, this approach is not realistic, and it is essential to enable operation in face of partitions.
Reference: 28. <author> R. van Renesse, R. Cooper, B. Glade, and P. Stephenson. </author> <title> A RISC Approach to Process Groups. </title> <booktitle> In Proceedings of the 5th ACM SIGOPS Workshop, </booktitle> <pages> pages 21-23, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: When partitions recover, Transis implements a novel methodology for providing consistent merging. The principles that underlie the Transis approach for handling partitions have been adopted by several additional projects already: Totem [5] and Horus <ref> [28] </ref>. The system regulates the flow of messages in the network to prevent message loss, as much as possible, and avoid flooding.
Reference: 29. <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and Performance of Horus: A Lightweight Group Communications System. </title> <type> Technical Report 94-1442, </type> <institution> Cornell University, Dept. of Computer Science, </institution> <month> Aug. </month> <year> 1994. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The merits of group communication services is substantiated by vast research in this area in recent years (e.g., Isis [10], Horus <ref> [29] </ref>, Totem [5], Psync [25] and Consul [23], Amoeba [15], [18], Delta-4 [26], and many others). The idea is that a communication substrate can be made to work on new networks, making the porting of the applications easy.
References-found: 29

