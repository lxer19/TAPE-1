URL: http://www.win.tue.nl/win/cs/csr/csr94/94.32.ps
Refering-URL: http://www.win.tue.nl/win/cs/csr/csr94.html
Root-URL: http://www.win.tue.nl
Title: Fischer's Protocol in Timed Process Algebra  
Author: Jan Joris Vereijken 
Keyword: Fischer's protocol, process algebra, real time, discrete time, ACP, mutual exclusion, verification.  
Note: 1991 Mathematics Subject Classification: 68Q10, 68Q22, 68Q60. 1991 CR Categories:  Note: These investigations were supported by the Netherlands Computer Science Research Foundation (SION) with financial support from the Netherlands Organisation for Scientific Re search (NWO). Contents  
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands  
Affiliation: Department of Computing Science, Eindhoven University of Technology,  
Email: email: janjoris@acm.org  
Date: August 18, 1994  
Web: D.1.3, D.2.4, D.3.1, F.1.2, F.3.1.  
Abstract: Timed algebraic process theories can be developed with quite different purposes in mind. One can aim for theoretical results about the theory itself (completeness, expressiveness, decidability), or one can aim for practical applicability to non-trivial protocols. Unfortunately, these aims do not go well together. In this paper we take two theories, which are probably of the first kind, and try to find out how well suited they are for practical verifications. We verify Fischer's protocol for mutual exclusion in the settings of discrete-time process algebra (ACP dt ) and real-time process algebra (ACP ur ). We do this by transforming the recursive specification into an equivalent linear specification, and then dividing out the maximal bisimulation relation. The required mutual exclusion result can then be found by reasoning about the obtained process graph. Finally, we consider the ease of the verification, and ways to adapt the theory to make it more practical. It will turn out that the theories investigated are quite unsatisfactory when verifying real-life protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [Aba94] <author> M. Abadi, </author> <year> 1994. </year> <type> Personal communication. </type>
Reference-contexts: When it would be written out in full detail, that proof would be about as long and tedious as ours is [Sch94], and the same probably holds for a detailed temporal logic proof <ref> [Aba94] </ref>. Looking at our proof one observes that, although conceptually very clear and easy, the inner workings required a lot of bothersome and failure-prone computations. It seems valid to doubt whether all these calculations were really necessary.
Reference: [AL92a] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <note> Technical Report Systems Research Center 91, </note> <institution> Digital Equipment Corporation, </institution> <note> Octo-ber 1992. To appear in ACM Transactions on Programming Languages and Systems. An earlier version appeared as [AL92b]. </note>
Reference-contexts: After that an informal description of the protocol is given, together with an informal correctness argument. 2.1 History of the protocol The protocol we examine is a mutual exclusion protocol, first proposed by Fischer [Fis85], and later studied in <ref> [Lam87, SBM92, AL92a, JPXZ94] </ref>. None of these studies uses process algebra to prove correctness, they all rely on some form of temporal logic or Floyd-Hoare logic.
Reference: [AL92b] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time, </title> <booktitle> 1992. In [dBHdRR92], </booktitle> <pages> pages 1-27. 36 </pages>
Reference: [Bae90] <editor> J.C.M. Baeten, editor. </editor> <booktitle> Applications of Process Algebra. Number 18 in Cam--bridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [BB91] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Real time process algebra. </title> <journal> Journal of Formal Aspects of Computing, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: Secondly, a verification is done in a setting of dense time, using the theory ACP ur . This theory was devised by Klusener [Klu93], and is closely related to ACP ae , the standard real-time extension of ACP by Baeten and Bergstra <ref> [BB91] </ref>. 2 The whole point of this exercise lies in the following two questions. <p> While this is all very intuitive, the exact semantics of ACP ur is still quite intricate, and we will make no attempt at making it formal here. Please see [Klu93] and <ref> [BB91] </ref>. The single most important construct in ACP ur is the integral construct. It is a generalized sum over an interval of time. For example, R 2 v1 av denotes the process that can do the action a at any time between 1 and 2 time units from now, inclusively.
Reference: [BB92a] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Discrete time process algebra. </title> <type> Technical Report CSN 92/06, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1992. </year> <note> An extended abstract appeared as [BB92b]. </note>
Reference-contexts: We will try to prove the correctness of this protocol, which relies heavily on time aspects, using two timed ACP theories. First, we do a verification in a setting of discrete time, using the theory ACP dt devised by Baeten and Bergstra <ref> [BB92a] </ref>. Secondly, a verification is done in a setting of dense time, using the theory ACP ur . <p> We will use (a subset of) the discrete-time process algebra ACP dt as described in <ref> [BB92a] </ref>. This is the simplest special case one can imagine. The resulting proof provides a clear illustration of all key issues, without becoming too cluttered with technicalities. 3.1 A short note on ACP dt First, we briefly describe the essential extensions that ACP dt has to model time. <p> In Table 1 the operational semantics of BPA dt is given. BPA dt is the subset of ACP dt that only has , , and oe d as operators. For the full axiomatization and semantics of ACP dt see <ref> [BB92a] </ref>.
Reference: [BB92b] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Discrete time process algebra. </title> <booktitle> In [Cle92], </booktitle> <pages> pages 401-420, </pages> <year> 1992. </year> <note> Extended abstract. </note>
Reference: [BBB93] <author> J.C.M. Baeten, J.A. Bergstra, and R.N. Bol. </author> <title> A real-time process logic. </title> <type> Technical Report CSN 93/15, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1993. </year> <note> An extended abstract appeared as [BBB94]. </note>
Reference-contexts: Or, on a conceptually higher level: the calculations get complicated because we do not have adequate tools for denoting the precise flow of time. When working with a hybrid process algebra-temporal logic theory (still predominantly algebraic!), these complications would probably not have arisen. See for example <ref> [BBB93] </ref>, where this approach is investigated. * Thirdly, we might just as well admit that real-time verifications are difficult, and probably will remain so for some years to come. Therefore, it may be advisable 17 to have computer tools at our disposal.
Reference: [BBB94] <author> J.C.M. Baeten, J.A. Bergstra, and R.N. Bol. </author> <title> A real-time process logic. </title> <booktitle> In [GO94], </booktitle> <pages> pages 30-47, </pages> <year> 1994. </year>
Reference: [BM94] <author> J.C.M. Baeten and S. Mauw. </author> <title> Delayed choice: an operator for joining message sequence charts, </title> <booktitle> 1994. To appear in the proceedings of FORTE '94, Berne, </booktitle> <address> Switzerland, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: A more sophisticated and subtle approach could be to abstract only from those internal moments of choice we really want to abstract from. This could be implemented by introducing a special choice operator next to the ordinary . For example, the delayed choice of <ref> [BM94] </ref> or a o-angelic choice. * Secondly, it might be profitable to augment process algebra with a (limited) form of temporal logic.
Reference: [BW90] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Number 18 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction In the past decade a lot of research has been done on algebraic process theories, the three most prominent ones being CCS [Mil89], CSP [Hoa85], and ACP <ref> [BW90] </ref>. Although these theories are well established in their untimed version, there is no consensus regarding versions of CCS, CSP, and ACP extended with time. Admitted, there have been many proposals, some of them quite successful. But most of these timed theories were geared towards theoretical results. <p> The resulting proof provides a clear illustration of all key issues, without becoming too cluttered with technicalities. 3.1 A short note on ACP dt First, we briefly describe the essential extensions that ACP dt has to model time. Intuitively, ACP dt is very much like plain ACP <ref> [BW90] </ref>, with the exception that a process may have the ability to let time pass for one time unit. If in an ACP dt process some component still wants to do an action, it can, and no time passes. <p> This is disappointing; although the algebraic advantage manifests itself very clearly when verifying protocols that do not exhibit much internal parallelism, such as the Alternating Bit Protocol (see for example <ref> [BW90] </ref>), it seems to be lost in the verification of Fischer's protocol, which has very much internal parallelism.
Reference: [Cle92] <editor> W.R. Cleaveland, editor. </editor> <booktitle> CONCUR '92, Third International Conference on Concurrency Theory. Number 630 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <booktitle> Proceedings of CONCUR '92, </booktitle> <address> Stony Brook, NY, USA, </address> <month> August </month> <year> 1992. </year>
Reference: [dB67] <author> N.G. de Bruijn. </author> <title> Additional comments on a problem in concurrent programming control. </title> <journal> Communications of the ACM, </journal> <volume> 10(3) </volume> <pages> 137-138, </pages> <year> 1967. </year>
Reference-contexts: Instead of using atomic test-and-set instructions or semaphores, as is nowadays often done to assure mutual exclusion, Fischer's protocol only assumes atomic reads and writes to a shared variable (when the first mutual exclusion protocols were developed in the late 1960s all exclusion protocols were of the shared variable kind <ref> [Dij65, Knu66, dB67, Lam74] </ref>, later on researchers have more concentrated on the semaphore kind of protocol). Mutual exclusion in Fischer's Protocol is guaranteed by carefully placing bounds on the execution times of the instructions, leading to a protocol which is very simple, and relies heavily on time aspects.
Reference: [dBHdRR92] <editor> J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors. </editor> <booktitle> Real-Time: Theory in Practice. Number 600 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <booktitle> Proceedings of the REX Workshop, Mook, </booktitle> <address> The Netherlands, </address> <month> June </month> <year> 1991. </year>
Reference: [Dij65] <author> E.W. Dijkstra. </author> <title> Solution of a problem in concurrent programming control. </title> <journal> Communications of the ACM, </journal> <volume> 8(9):569, </volume> <year> 1965. </year>
Reference-contexts: Instead of using atomic test-and-set instructions or semaphores, as is nowadays often done to assure mutual exclusion, Fischer's protocol only assumes atomic reads and writes to a shared variable (when the first mutual exclusion protocols were developed in the late 1960s all exclusion protocols were of the shared variable kind <ref> [Dij65, Knu66, dB67, Lam74] </ref>, later on researchers have more concentrated on the semaphore kind of protocol). Mutual exclusion in Fischer's Protocol is guaranteed by carefully placing bounds on the execution times of the instructions, leading to a protocol which is very simple, and relies heavily on time aspects. <p> Some of these requirements are related (for example: symmetry guarantees most kinds of fairness), and each paper about mutual exclusion seems to have its own favorite subset of which ones to prove. In the case of Fischer's protocol we choose, mostly following the earliest paper on mutual exclusion <ref> [Dij65] </ref>, to prove the following three properties: * Actual mutual exclusion between the two critical sections, * Symmetry between the two components, * No starvation. We will not try to formalize these properties algebraically, as they do not lend themselves easily to this.
Reference: [Fis85] <author> M. Fischer. Re: </author> <title> where are you? Electronic mail message from Michael Fis-cher to Leslie Lamport. Arpanet message sent on June 25, </title> <booktitle> 1985 18:56:29 EDT, number 8506252257.AA07636@yale-bulldog.yale.arpa (47 lines), </booktitle> <year> 1985. </year>
Reference-contexts: In this paper we will present such a more-or-less real system, namely Fischer's protocol for mutual exclusion <ref> [Fis85, Lam87] </ref>. We will try to prove the correctness of this protocol, which relies heavily on time aspects, using two timed ACP theories. First, we do a verification in a setting of discrete time, using the theory ACP dt devised by Baeten and Bergstra [BB92a]. <p> After that an informal description of the protocol is given, together with an informal correctness argument. 2.1 History of the protocol The protocol we examine is a mutual exclusion protocol, first proposed by Fischer <ref> [Fis85] </ref>, and later studied in [Lam87, SBM92, AL92a, JPXZ94]. None of these studies uses process algebra to prove correctness, they all rely on some form of temporal logic or Floyd-Hoare logic.
Reference: [GO94] <editor> D.M. Gabbay and H.J. Ohlbach, editors. </editor> <booktitle> Temporal Logic, First International Conference. Number 827 in Lecture Notes in Artificial Intelligence (Subseries of Lecture Notes in Computer Science). </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <booktitle> Proceedings of ICTL' 94, </booktitle> <address> Bonn, Germany, </address> <month> July </month> <year> 1994. </year> <month> 37 </month>
Reference: [Gro91] <author> J.F. Groote. </author> <title> Process Algebra and Structured Operational Semantics. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1991. </year>
Reference-contexts: 2 w X 5 Acknowledgments We would like to thank Martn Abadi, Jos Baeten, Roland Bol, Jozef Hooman, Hans Mulder, Michel Reniers, and Fred Schneider for their various comments and fruitful discussions, and Jan Friso Groote for kindly providing the PASCAL source of his bisimulation-checking tool (which is described in <ref> [Gro91, x3] </ref>).
Reference: [Hil94] <author> J. Hillebrand. </author> <title> The ABP and the CABPa comparison of performances in real time process algebra. </title> <booktitle> In [PVvV94], </booktitle> <pages> pages 123-157, </pages> <year> 1994. </year>
Reference-contexts: Admitted, there have been many proposals, some of them quite successful. But most of these timed theories were geared towards theoretical results. As a consequence, a lot of papers have been published regarding completeness results, expressivity results, decidability results, and so on, but almost no paper (one exception is <ref> [Hil94] </ref>) gives an actual verification of a real system, not even a toy system. In this paper we will present such a more-or-less real system, namely Fischer's protocol for mutual exclusion [Fis85, Lam87].
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction In the past decade a lot of research has been done on algebraic process theories, the three most prominent ones being CCS [Mil89], CSP <ref> [Hoa85] </ref>, and ACP [BW90]. Although these theories are well established in their untimed version, there is no consensus regarding versions of CCS, CSP, and ACP extended with time. Admitted, there have been many proposals, some of them quite successful. But most of these timed theories were geared towards theoretical results.
Reference: [JPXZ94] <author> W. Janssen, M. Poel, Q. Xu, and J. Zwiers. </author> <booktitle> Layering of real-time distributed processes, 1994. To appear in the proceedings of the Third International School and Symposium on Formal Techniques in Real Time and Fault Tolerant Systems, Lubeck, </booktitle> <address> Germany, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: After that an informal description of the protocol is given, together with an informal correctness argument. 2.1 History of the protocol The protocol we examine is a mutual exclusion protocol, first proposed by Fischer [Fis85], and later studied in <ref> [Lam87, SBM92, AL92a, JPXZ94] </ref>. None of these studies uses process algebra to prove correctness, they all rely on some form of temporal logic or Floyd-Hoare logic.
Reference: [Klu93] <author> A.S. Klusener. </author> <title> Models and Axioms for a Fragment of Real Time Process Algebra. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, Computing Science Department, </institution> <year> 1993. </year>
Reference-contexts: First, we do a verification in a setting of discrete time, using the theory ACP dt devised by Baeten and Bergstra [BB92a]. Secondly, a verification is done in a setting of dense time, using the theory ACP ur . This theory was devised by Klusener <ref> [Klu93] </ref>, and is closely related to ACP ae , the standard real-time extension of ACP by Baeten and Bergstra [BB91]. 2 The whole point of this exercise lies in the following two questions. <p> We will use (a subset of) the real-time process algebra ACP ur (ACP with urgent actions and relative time) as described in <ref> [Klu93] </ref>. 10 4.1 A short note on ACP ur Again, we briefly describe the essential extensions that ACP ur has to model time. To begin with, every action is postfixed with a non-negative real number between square brackets. <p> While this is all very intuitive, the exact semantics of ACP ur is still quite intricate, and we will make no attempt at making it formal here. Please see <ref> [Klu93] </ref> and [BB91]. The single most important construct in ACP ur is the integral construct. It is a generalized sum over an interval of time.
Reference: [Knu66] <author> D.E. Knuth. </author> <title> Additional comments on a problem in concurrent programming control. </title> <journal> Communications of the ACM, </journal> <volume> 9(5) </volume> <pages> 321-322, </pages> <year> 1966. </year>
Reference-contexts: Instead of using atomic test-and-set instructions or semaphores, as is nowadays often done to assure mutual exclusion, Fischer's protocol only assumes atomic reads and writes to a shared variable (when the first mutual exclusion protocols were developed in the late 1960s all exclusion protocols were of the shared variable kind <ref> [Dij65, Knu66, dB67, Lam74] </ref>, later on researchers have more concentrated on the semaphore kind of protocol). Mutual exclusion in Fischer's Protocol is guaranteed by carefully placing bounds on the execution times of the instructions, leading to a protocol which is very simple, and relies heavily on time aspects.
Reference: [Lam74] <author> L. Lamport. </author> <title> A new solution of Dijkstra's concurrent programming problem. </title> <journal> Communications of the ACM, </journal> <volume> 17(8) </volume> <pages> 453-455, </pages> <year> 1974. </year>
Reference-contexts: Instead of using atomic test-and-set instructions or semaphores, as is nowadays often done to assure mutual exclusion, Fischer's protocol only assumes atomic reads and writes to a shared variable (when the first mutual exclusion protocols were developed in the late 1960s all exclusion protocols were of the shared variable kind <ref> [Dij65, Knu66, dB67, Lam74] </ref>, later on researchers have more concentrated on the semaphore kind of protocol). Mutual exclusion in Fischer's Protocol is guaranteed by carefully placing bounds on the execution times of the instructions, leading to a protocol which is very simple, and relies heavily on time aspects.
Reference: [Lam87] <author> L. Lamport. </author> <title> A fast mutual exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <year> 1987. </year>
Reference-contexts: In this paper we will present such a more-or-less real system, namely Fischer's protocol for mutual exclusion <ref> [Fis85, Lam87] </ref>. We will try to prove the correctness of this protocol, which relies heavily on time aspects, using two timed ACP theories. First, we do a verification in a setting of discrete time, using the theory ACP dt devised by Baeten and Bergstra [BB92a]. <p> After that an informal description of the protocol is given, together with an informal correctness argument. 2.1 History of the protocol The protocol we examine is a mutual exclusion protocol, first proposed by Fischer [Fis85], and later studied in <ref> [Lam87, SBM92, AL92a, JPXZ94] </ref>. None of these studies uses process algebra to prove correctness, they all rely on some form of temporal logic or Floyd-Hoare logic.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction In the past decade a lot of research has been done on algebraic process theories, the three most prominent ones being CCS <ref> [Mil89] </ref>, CSP [Hoa85], and ACP [BW90]. Although these theories are well established in their untimed version, there is no consensus regarding versions of CCS, CSP, and ACP extended with time. Admitted, there have been many proposals, some of them quite successful.
Reference: [Nie90] <author> E.R. Nieuwland. </author> <title> Proving mutual exclusion with process algebra, </title> <booktitle> 1990. In [Bae90], </booktitle> <pages> pages 45-51. </pages>
Reference-contexts: If it wants to check if x has the value i, it performs the action rx i. (The idea to construct the variable server in this way was taken from <ref> [Nie90] </ref>.) The process A is constructed as follows. First (in state A 0 ) it waits for an undetermined amount of time till x is 0 (brx 0c ! ). Then (in state A 1 ) it sets x to 1 (sx 1).
Reference: [PVvV94] <editor> A. Ponse, C. Verhoef, and S.F.M. van Vlijmen, editors. ACP94, </editor> <title> workshop on algebra of communicating processes. </title> <type> Technical Report P9413, </type> <institution> University of Amsterdam, Programming Research Group, </institution> <month> May </month> <year> 1994. </year>
Reference: [SBM92] <author> F. Schneider, B. Bloom, and K. Marzullo. </author> <title> Putting time into proof outlines. </title> <booktitle> In [dBHdRR92], </booktitle> <pages> pages 618-639, </pages> <year> 1992. </year>
Reference-contexts: After that an informal description of the protocol is given, together with an informal correctness argument. 2.1 History of the protocol The protocol we examine is a mutual exclusion protocol, first proposed by Fischer [Fis85], and later studied in <ref> [Lam87, SBM92, AL92a, JPXZ94] </ref>. None of these studies uses process algebra to prove correctness, they all rely on some form of temporal logic or Floyd-Hoare logic. <p> This however does not mean too much; it is an almost trivial protocol, 16 that has been solved time and time again using all kinds of formalisms. But it is not all that bad either; see for example <ref> [SBM92] </ref> where an (incomplete) proof is given of Fischer's protocol. When it would be written out in full detail, that proof would be about as long and tedious as ours is [Sch94], and the same probably holds for a detailed temporal logic proof [Aba94].
Reference: [Sch94] <author> F. Schneider, </author> <year> 1994. </year> <title> Personal communication. Typeset by L A T E X 2 " in Lucida Bright. </title> <type> 38 </type>
Reference-contexts: But it is not all that bad either; see for example [SBM92] where an (incomplete) proof is given of Fischer's protocol. When it would be written out in full detail, that proof would be about as long and tedious as ours is <ref> [Sch94] </ref>, and the same probably holds for a detailed temporal logic proof [Aba94]. Looking at our proof one observes that, although conceptually very clear and easy, the inner workings required a lot of bothersome and failure-prone computations. It seems valid to doubt whether all these calculations were really necessary.
References-found: 30

