URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-049.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Email: phlipp  
Title: Imperative Concurrent Object-Oriented Languages: An Annotated Bibliography  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Michael Philippsen 
Date: 0, August 1995  
Note: Version  On leave from  
Web: icsi.berkeley.edu TR-95-049  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Department of Computer Science, University of Karlsruhe, Germany  
Abstract: The title says it all. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bruno Achauer. </author> <title> The DOWL distributed object-oriented language. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 48-55, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: See Trellis/Owl (section 2.96). fault tolerance. Availability: DOWL is running on VAXen and DEC statations under Ultrix. Email address: Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de References: <ref> [1] </ref> [2] 2.43 dpSather Developer: CSIRO, Australia + Monash University, Australia Description: oo. The language dpSather is an extension of Sather 0.5 [167, 145]. The language has a bulk data type. When declaring objects of that type, a given number of instance is created.
Reference: [2] <author> Bruno Achauer. </author> <title> Implementation of distributed Trellis. </title> <booktitle> In Proc. of ECOOP'93 7th European Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 103-117, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: See Trellis/Owl (section 2.96). fault tolerance. Availability: DOWL is running on VAXen and DEC statations under Ultrix. Email address: Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de References: [1] <ref> [2] </ref> 2.43 dpSather Developer: CSIRO, Australia + Monash University, Australia Description: oo. The language dpSather is an extension of Sather 0.5 [167, 145]. The language has a bulk data type. When declaring objects of that type, a given number of instance is created.
Reference: [3] <author> Gul Agha and Christian J. Callsen. ActorSpaces: </author> <title> An open distributed programming paradigm. </title> <booktitle> In Proc. of the 4th ACM Symp. on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 23-32, </pages> <month> May </month> <year> 1993. </year> <note> Appears also as ACM SIGPLAN Notices 28(7), </note> <month> July </month> <year> 1993. </year>
Reference-contexts: Availability: Papers on ActorSpace are available via anonymous ftp from: ftp://biobio.cs.uiuc.edu/pub/papers ftp://biobio.cs.uiuc.edu/pub/theses Currently a prototype is operational, but it is not yet freely available, since the main focus is to prove the concept, not an efficient implementation. Email addresses: Christian J. Callseen ! chris@iesd.auc.dk Gul Agha ! agha@cs.uiuc.edu References: <ref> [3] </ref> [41] 2.10 Actra Developer: Defense Research Establishment and Car leton University, Ottawa, Canada. Description: oo. Extension of Smalltalk based on Actors. memory model. Based on shared memory ma chine. parallelism. Post-processing. Synchronous message passing only. In contrast to the Actor model, there is no asynchronous message passing. scheduling. mapping.
Reference: [4] <author> Gul A. Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems. </title> <booktitle> Series in Artificial Intelligence. </booktitle> <publisher> MIT Press Cambridge, </publisher> <address> Mas-sachusetts, London, England, </address> <year> 1986. </year>
Reference-contexts: The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha <ref> [4, 5] </ref> The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper [175] give an first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. <p> When classes are in the language in addition to objects, such a language is called class-based. Only if inheritance is expressible as well, the language is called object-oriented. 2 Languages 2.1 ABCL/1 Developer: University of Tokyo, Japan Description: Actor <ref> [4, 5] </ref> language. oo. Inheritance by delegation. Objects are active when they process an incoming message. They are waiting if they explicitly issue an receipt statement and the message did not arrive. Ob jects are dormant otherwise. memory model. <p> Availability: The Yonezawa Lab WWW Server can be reached and the ABCL/1 software can be retrieved from: http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: [224] 2.2 ABCL/f Developer: University of Tokyo, Japan Description: oo. ABCL/f is based on the Actor model <ref> [4, 5] </ref> and is an extension of ABCL/1 (see section 2.1). Unlike its predecessor, ABCL/f is typed and is class-based, i.e., methods for classes can be defined. ABCL/f does not provide inheritance but inherits the delegation mechanism of ABCL/1. memory model. In ABCL/f the programmer faces a purely object-based approach. <p> Whereas ABCL/R was implemented on top to ABCL/1, ABCL/R2 is implemented directly in Common Lisp. Actor <ref> [4, 5] </ref> language. oo. As in ABCL/R, each object has its own meta-object. In addition, each object always belongs to some group. A group represents a shared resource. Since there is no explicit receipt state ment, objects are either active or dormant. 2 memory model. See ABCL/1 (section 2.1). parallelism. <p> Locality is not an issue. synchronization. Default behavior is one-activity at a time. The programmer can specify methods to be unserialized methods, similar to ASK (see section 2.14). fault tolerance. Availability: References: [154] 2.6 ACT++ Developer: Virginia Tech Description: oo. C++ library; based on the Actor model <ref> [4, 5] </ref>. Compared to the Actor model there are some extensions. The main extensions are the following: Whereas the pure Actor model requires that messages that arrive at an Actor are processed in FIFO order, one can implement so-called behavior sets in ACT++. <p> Availability: Version 3 of Acttalk is implemented in Smalltalk-80 4.1 and is available from: http://web.yl.is.s.u-tokyo.ac.jp/members/briot/actalk/actalk.html ftp://camille.is.s.u-tokyo.ac.jp/pub/members/briot/actalk ftp://ftp.ibp.fr/ibp/softs/litp/actalk Email address: Jean-Pierre Briot ! briot@is.s.u-tokyo.ac.jp 4 References: [37] 2.9 ActorSpace Developer: University of Illinois, Urbana-Champaign and Aalborg University, Denmark Description: oo. parallelism. ActorSpace is based on the Actor model <ref> [4, 5] </ref> and extends this model by the ability to address groups of actors at once. In contrast to Concurrent Aggregates (see section 2.28), groups of actors can be addressed by using pattern instead of explicit actor mail addresses. <p> However, the software is not maintained anymore. Email addresses: Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu References: [130] [131] 2.28 Concurrent Aggregates, CA Developer: University of Illinois, Urbana-Champaign. Concurrent Aggregates is part of the Concert project. Description: oo. Extension of the Actor model <ref> [4, 5] </ref> for massively parallel programming. The main extension is that actors can be grouped together to aggregates, and can then be addressed with messages at once. CA has single inheritance. Invocation of member functions can be forwarded by delegation and continuations. <p> Availability: At the moment, the language is only im plemented on a uniprocessor. Email address: Dietrich Boles ! boles@informatik.uni-oldenburg.de References: [33] 2.88 Rosette Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Rosette is based on the Actor model <ref> [104, 4, 5] </ref>. It incorporates multiple inheritance and reflection. Messages that cannot be processed by an actor are passed on to its "father". memory model. As introduced in the Actor model.
Reference: [5] <author> Gul A. Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha <ref> [4, 5] </ref> The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper [175] give an first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. <p> When classes are in the language in addition to objects, such a language is called class-based. Only if inheritance is expressible as well, the language is called object-oriented. 2 Languages 2.1 ABCL/1 Developer: University of Tokyo, Japan Description: Actor <ref> [4, 5] </ref> language. oo. Inheritance by delegation. Objects are active when they process an incoming message. They are waiting if they explicitly issue an receipt statement and the message did not arrive. Ob jects are dormant otherwise. memory model. <p> Availability: The Yonezawa Lab WWW Server can be reached and the ABCL/1 software can be retrieved from: http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: [224] 2.2 ABCL/f Developer: University of Tokyo, Japan Description: oo. ABCL/f is based on the Actor model <ref> [4, 5] </ref> and is an extension of ABCL/1 (see section 2.1). Unlike its predecessor, ABCL/f is typed and is class-based, i.e., methods for classes can be defined. ABCL/f does not provide inheritance but inherits the delegation mechanism of ABCL/1. memory model. In ABCL/f the programmer faces a purely object-based approach. <p> Whereas ABCL/R was implemented on top to ABCL/1, ABCL/R2 is implemented directly in Common Lisp. Actor <ref> [4, 5] </ref> language. oo. As in ABCL/R, each object has its own meta-object. In addition, each object always belongs to some group. A group represents a shared resource. Since there is no explicit receipt state ment, objects are either active or dormant. 2 memory model. See ABCL/1 (section 2.1). parallelism. <p> Locality is not an issue. synchronization. Default behavior is one-activity at a time. The programmer can specify methods to be unserialized methods, similar to ASK (see section 2.14). fault tolerance. Availability: References: [154] 2.6 ACT++ Developer: Virginia Tech Description: oo. C++ library; based on the Actor model <ref> [4, 5] </ref>. Compared to the Actor model there are some extensions. The main extensions are the following: Whereas the pure Actor model requires that messages that arrive at an Actor are processed in FIFO order, one can implement so-called behavior sets in ACT++. <p> Availability: Version 3 of Acttalk is implemented in Smalltalk-80 4.1 and is available from: http://web.yl.is.s.u-tokyo.ac.jp/members/briot/actalk/actalk.html ftp://camille.is.s.u-tokyo.ac.jp/pub/members/briot/actalk ftp://ftp.ibp.fr/ibp/softs/litp/actalk Email address: Jean-Pierre Briot ! briot@is.s.u-tokyo.ac.jp 4 References: [37] 2.9 ActorSpace Developer: University of Illinois, Urbana-Champaign and Aalborg University, Denmark Description: oo. parallelism. ActorSpace is based on the Actor model <ref> [4, 5] </ref> and extends this model by the ability to address groups of actors at once. In contrast to Concurrent Aggregates (see section 2.28), groups of actors can be addressed by using pattern instead of explicit actor mail addresses. <p> However, the software is not maintained anymore. Email addresses: Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu References: [130] [131] 2.28 Concurrent Aggregates, CA Developer: University of Illinois, Urbana-Champaign. Concurrent Aggregates is part of the Concert project. Description: oo. Extension of the Actor model <ref> [4, 5] </ref> for massively parallel programming. The main extension is that actors can be grouped together to aggregates, and can then be addressed with messages at once. CA has single inheritance. Invocation of member functions can be forwarded by delegation and continuations. <p> Availability: At the moment, the language is only im plemented on a uniprocessor. Email address: Dietrich Boles ! boles@informatik.uni-oldenburg.de References: [33] 2.88 Rosette Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Rosette is based on the Actor model <ref> [104, 4, 5] </ref>. It incorporates multiple inheritance and reflection. Messages that cannot be processed by an actor are passed on to its "father". memory model. As introduced in the Actor model.
Reference: [6] <author> Paulo Amaral, Christian Jacquemot, Peter Jensen, Rodger Lea, and Adam Mirowski. </author> <title> Transparent object migration in COOL2. </title> <booktitle> In Proc. of the Workshop on Dynamic Object Placement and Load Balancing in Parallel and Distributed Systems, </booktitle> <address> ECOOP'92, Utrecht, The Netherlands, </address> <month> June 29, </month> <year> 1992. </year>
Reference-contexts: Persistent objects. Availability: The only implementation reported so far runs on Intel 80386 based machines runing a Chrous UNIX clone. ftp://ftp.chorus.fr/pub news:comp.os.chorus Email addresses: group ! info@chorus.com Rodger Lea ! rjl@hplb.hpl.hp.com Christian Jacquemot ! chris@chorus.fr Eric Pillevesse ! pillevesse@sept.fr References: <ref> [6] </ref> [140] [141] 2.32 COOL (NTT), ACOOL Since the are some collisions in language name space, the authors consider to rename their language to ACOOL. Developer: NTT communication switching laboratories, Japan Description: oo. The language offers active and passive objects which can be declared using single inheritance.
Reference: [7] <author> P. </author> <title> America. Inheritance and subtyping in a parallel object-oriented language. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 234-242, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: <ref> [7] </ref> [8] [9] [10] [198] [218] 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [8] <author> Pierre America. POOL-T: </author> <title> A parallel object-oriented language. </title> <editor> In A. Yonezawa and M. Tokoro, editors, </editor> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <pages> pages 199-220. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1987. </year>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: [7] <ref> [8] </ref> [9] [10] [198] [218] 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [9] <author> Pierre America. </author> <title> A parallel object-oriented languag with inheritance and subtyping. </title> <booktitle> In Proc. of ECOOP OOPSLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 161-168, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: [7] [8] <ref> [9] </ref> [10] [198] [218] 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [10] <author> Pierre America. </author> <title> POOL: Design and experience. </title> <booktitle> In Proc. of the ECOOP OOPSLA Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 16-20, </pages> <address> Ot-tawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: [7] [8] [9] <ref> [10] </ref> [198] [218] 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [11] <author> Birger Andersen. </author> <title> Ellie a general, fine-grained, first class object based language. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 5(2) </volume> <pages> 35-42, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Availability: Ellie is not available outside the Distributed Systems research group in Copenhagen. Platforms are MS-DOS and transputers (with IN-MOS C toolkit). Some papers and reports are available via anonymous ftp from ftp://ftp.diku.dk/diku/dists/ellie/papers Email address: Birger Andersen ! andersen@informatik.uni-kl.de References: <ref> [11] </ref> [12] 2.48 Emerald Developer: University of Washington, Seattle, =) DIKU at University of Copenhagen, Denkmark. Description: oo. Emerald is an object-based without classes and inheritance. memory model. The programmer has the impression of a shared address space.
Reference: [12] <author> Birger Andersen. </author> <title> Efficiency by type-guided compilation. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages e1-e5, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: Availability: Ellie is not available outside the Distributed Systems research group in Copenhagen. Platforms are MS-DOS and transputers (with IN-MOS C toolkit). Some papers and reports are available via anonymous ftp from ftp://ftp.diku.dk/diku/dists/ellie/papers Email address: Birger Andersen ! andersen@informatik.uni-kl.de References: [11] <ref> [12] </ref> 2.48 Emerald Developer: University of Washington, Seattle, =) DIKU at University of Copenhagen, Denkmark. Description: oo. Emerald is an object-based without classes and inheritance. memory model. The programmer has the impression of a shared address space. Local and remote objects can be referenced via their unique and network-wide identifiers.
Reference: [13] <author> Jean-Marc Andreoli, Remo Pareschi, and Marc Bourgois. </author> <title> Dynamic programming as multiagent programming. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proc. of the ECOOP'91 Workshop on Object-Based Concurrent Computing, </booktitle> <pages> pages 163-176, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Description: oo. Declarative state transitions. memory model. parallelism. The transition rules can split up into several successors, which can then be processed concurrently. A similar construct is available to combine those successors again. scheduling. mapping. synchronization. fault tolerance. Availability: References: <ref> [13] </ref> 2.63 Maude Developer: Description: oo. memory model. parallelism. scheduling. mapping. synchronization. fault tolerance. Availability: Email addresses: ! References: 2.64 Mediators Developer: Description: oo. memory model. parallelism. A mediated object has its own thread which is dedicated to executing its synchronization code.
Reference: [14] <author> Gregory R. Andrews. </author> <title> Synchronizing resources. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 405-430, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: The addressed resource can either explicitly accept an incoming message (rendezvous) or can start an corresponding operation. If concurrent processes access shared data, the programmer must use basic synchronization mechanisms, e.g. semaphores or blocking com munication, to synchronize access. fault tolerance. Availability: SR appeared first in 1981 <ref> [14] </ref> (SR version 0), changed in 1986 [16] (SR version 1) and is now available in its version 2. Version 2.3 of SR works on one or more networked machines of the same architecture. <p> Multiprocessing is simulated on other platforms, which include SunOS 4.x, HP RISC, DEC Alpha and Ul-trix, IBM AIX, and Linux. Documentation and more is available from ftp://ftp.cs.arizona.edu//sr http://www.cs.arizona.edu/sr/www Email addresses: group ! sr-project@cs.arizona.edu Ronald A. Olsson ! olsson@cs.ucdavis.edu Gregory R. Andrews ! greg@cs.arizona.edu References: [15] <ref> [14] </ref> [173] 2.95 Tool Developer: Pontificia University, Rio de Janeiro, Brazil. Description: 39 oo. This is an object-oriented language that is in-tended to be used on top of Windows 3.1. to offer a graphical user interface to object-oriented programming. Single inheritance. memory model. parallelism.
Reference: [15] <author> Gregory R. Andrews and Ronald A. Olsson. </author> <title> The SR Programming Language: Concurrency in Practice. </title> <publisher> Benjamin/Cummings Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: Multiprocessing is simulated on other platforms, which include SunOS 4.x, HP RISC, DEC Alpha and Ul-trix, IBM AIX, and Linux. Documentation and more is available from ftp://ftp.cs.arizona.edu//sr http://www.cs.arizona.edu/sr/www Email addresses: group ! sr-project@cs.arizona.edu Ronald A. Olsson ! olsson@cs.ucdavis.edu Gregory R. Andrews ! greg@cs.arizona.edu References: <ref> [15] </ref> [14] [173] 2.95 Tool Developer: Pontificia University, Rio de Janeiro, Brazil. Description: 39 oo. This is an object-oriented language that is in-tended to be used on top of Windows 3.1. to offer a graphical user interface to object-oriented programming. Single inheritance. memory model. parallelism.
Reference: [16] <author> Gregory R. Andrews, Ronald A. Olsson, Michael Coffin, Irving Elshoff, Kelvin Nilsen, Titus Purin, and Gregg M. Townsend. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: If concurrent processes access shared data, the programmer must use basic synchronization mechanisms, e.g. semaphores or blocking com munication, to synchronize access. fault tolerance. Availability: SR appeared first in 1981 [14] (SR version 0), changed in 1986 <ref> [16] </ref> (SR version 1) and is now available in its version 2. Version 2.3 of SR works on one or more networked machines of the same architecture. True multiprocessing is supported on Silicon Graphics, Intel Paragon, and Sequent Symmetry systems, and on Sun systems running Solaris 2.3.
Reference: [17] <author> Gregory R. Andrews and Fred B. Schneider. </author> <title> Concepts and notations for concurrent programming. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(1) </volume> <pages> 3-43, </pages> <month> March </month> <year> 1983. </year> <month> 41 </month>
Reference-contexts: There is no object migration in COBRA. RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: <ref> [17] </ref> [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [18] <author> H. Assenmacher, T. Breitbach, P. Buhler, V. Hubsch, and R. Schwarz. </author> <title> PANDA supporting distributed programming in C++. </title> <booktitle> In Proc. of ECOOP'93 7th European Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 361-383, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Sources and some documentation are available via anonymous ftp from ftp://ftp.uni-kl.de/reports uni-kl/computer science/system software http://www.uni-kl.de/AG-Nehmer/panda/panda.html Email addresses: Holger Assenmacher ! assen@informatik.uni-kl.de Thomas Breitbach ! breitbac@informatik.uni-kl.de Peter Buhler ! buhler@informatik.uni-kl.de Volker Hubsch ! huebsch@informatik.uni-kl.de Holger Peine ! peine@informatik.uni-kl.de Reinhard Schwarz ! schwarz@informatik.uni-kl.de 32 References: <ref> [18] </ref> 2.77 Parallel C++, pC++ Developer: University of Indiana Description: oo. The language is an extension of C++ for data-parallel programming. The language has a aggregate data type. When declaring objects of that type, a number of instance is created.
Reference: [19] <author> W. C. Athas and N. J. Boden. Cantor: </author> <title> An Actor programming system for scientific computing. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 66-68, </pages> <address> San Diego, CA, Septem-ber 26-27, </address> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Post-processing (early be come). scheduling. mapping. Assignment of objects to nodes and the routine of messages between nodes is jointly handled by the compiler and runtime system. synchronization. Actor language. fault tolerance. Availability: Implemented in the Reactive Kerner of the Ametek 2010 series multicomputer. References: <ref> [19] </ref> 2.21 CEiffel Developer: Institut fur Informatik, Freie Universitat Berlin, Germany Description: oo. Concurrency is expressed by means of annotations. Programs have two different semantics: a sequential one, if annotations are ignored, and a concurrent one, if annotations are obeyed.
Reference: [20] <author> Colin Atkinson, Stephen Goldsack, Andrea Di Maio, and Rami Bayan. </author> <title> Object-oriented concurrency and distribution in DRAGOON. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 4(1) </volume> <pages> 11-20, </pages> <month> March/April </month> <year> 1991. </year>
Reference-contexts: However, as it did not prove a financial success, it has been dropped. Due to Colin Atkinson TXT might be willing to donate a copy to an academic institution. Contact Marco De Michele. Email addresses: Colin Atkinson ! atkinson@cl.uh.edu Marco De Michele ! demichel@txt.it References: <ref> [20] </ref> [21] 2.45 DROL Developer: Keio University, Japan. Description: oo. Extension of C++. memory model. parallelism. Parallelism is introduced by asynchronous message passing. There is a blocking receive which can be used to implement rendezvous and synchronous message passing.
Reference: [21] <author> Colin Atkinson, Andrea Di Maio, and Rami Bayan. Dragoon: </author> <title> an object-oriented notation supporting the reuse and distribution of ada software. </title> <booktitle> In Ada Letters, </booktitle> <pages> pages 50-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: However, as it did not prove a financial success, it has been dropped. Due to Colin Atkinson TXT might be willing to donate a copy to an academic institution. Contact Marco De Michele. Email addresses: Colin Atkinson ! atkinson@cl.uh.edu Marco De Michele ! demichel@txt.it References: [20] <ref> [21] </ref> 2.45 DROL Developer: Keio University, Japan. Description: oo. Extension of C++. memory model. parallelism. Parallelism is introduced by asynchronous message passing. There is a blocking receive which can be used to implement rendezvous and synchronous message passing.
Reference: [22] <author> Henri E. Bal. </author> <title> A comparative study of five parallel programming languages. </title> <booktitle> In proc. of Spring '91 Conf. on Open Distributed Systems, EurOpen, </booktitle> <pages> pages 209-228, </pages> <address> Tromso, Norway, </address> <month> May 20-24 </month> <year> 1991. </year>
Reference-contexts: There is no object migration in COBRA. RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] <ref> [22] </ref> [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. <p> Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: <ref> [22] </ref> [23] [25] [24] [102] [201] 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [23] <author> Henri E. Bal. </author> <title> Comparing data synchronization in Ada9X and Orca. </title> <type> Technical Report IR-345, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, The Netherlands, </address> <month> Decem-ber </month> <year> 1993. </year>
Reference-contexts: Orca is object-based. There are no inheritance and no dynamic binding. memory model. Distributed Shared Memory. Communication is based on shared data-objects. Other than shared data objects there no globally shared objects. (Orca's shared objects are similar to protected objects as introduced in Ada9x. See <ref> [23] </ref> for a comparison.) parallelism. Parallelism is introduced by forking processes on a processor which can be specified optionally. Shared objects are parameters to process invocation. scheduling. Done by the run-time system. mapping. The Orca compiler determines the access patterns of processes to shared objects. <p> Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: [22] <ref> [23] </ref> [25] [24] [102] [201] 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [24] <author> Henri E. Bal and M. Frans Kaashoek. </author> <title> Object distribution in Orca using compile-time and run-time techniques. </title> <booktitle> In Proc. of OOPSLA'93, 8th Annual Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 162-177, </pages> <address> Washington D.C., </address> <month> 26 September - 1 October, </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices 28(10). </journal>
Reference-contexts: Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: [22] [23] [25] <ref> [24] </ref> [102] [201] 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [25] <author> Henri E. Bal, M. Frans Kaashoek, and Andrew S. Tanenbaum. Orca: </author> <title> A language for parallel programming of distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 190-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: [22] [23] <ref> [25] </ref> [24] [102] [201] 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [26] <author> Henry E. Bal, Jennifer S. Steiner, and Andrew S. Tanenbaum. </author> <title> Programming languages for distributed computing systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 261-322, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: There is no object migration in COBRA. RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] <ref> [26] </ref> [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [27] <author> John K. Bennet. </author> <title> The design and implementation of distributed Smalltalk. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 318-330, </pages> <address> Or-lando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: Whereas Decouchant and the system of Schelvis and Ble-doeg (Oce Netherland) extended the Smalltalk virtual machine, the other projects chose to add proxy and message objects at the virtual image level. synchronization. fault tolerance. Availability: References: <ref> [27] </ref> [77] [159] [168] [189] 2.40 Distributed Smalltalk Process Developer: Description: Extension of Goldberg and Robson's Smalltalk (see section 2.92). oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). The "fork" message can handle the node number. scheduling. mapping.
Reference: [28] <author> Marc Benveniste and Valerie Issarny. </author> <title> Concurrent programming notations in the object-oriented language Arche. </title> <type> Technical Report 690, </type> <institution> IRISA, Institut de Recherche en Informatique et Systems Aleatoires, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Availability: A compiler for the Arche language has been implemented in the framework of the IN-RIA/Bull project Gothic at the research institute IRISA (Rennes, France). The compiler generates C code. Email addresses: Marc Benveniste ! mbenveni@irisa.fr Valerie Issarny ! issarny@irisa.fr References: <ref> [28] </ref> 2.14 ASK Developer: University of Salerno, Italy. Description: oo. Based on Actor model. memory model. Distributed memory machine (Transputers). parallelism. Based on Actor model. At the point of the method declaration, the programmer can distinguish between serialized and unserialized methods.
Reference: [29] <author> B. N. Bershad, E. D. Lazowska, and H. M. Levy. </author> <title> Presto: A system for object-oriented parallel programming. </title> <journal> Software Practice and Experience, </journal> <year> 1998. </year>
Reference-contexts: If post-processing is used, the Actor may not change its state after the become statement. fault tolerance. None. Availability: ACT++ version 3.0 has been implemented on a Sequent Symmetry multiprocessor with shared memory using the PRESTO thread package <ref> [29, 30] </ref>, see section 2.82. A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] [122] [123] [124] [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. <p> For synchronization Presto offers a variety of primitives, e.g., spin-locks, locks, mutex objects, and condition variables, and co ordination futures. fault tolerance. Availability: The source code (Presto 1.0) is available via anonymous ftp from ftp://ftp.cs.washington.edu/pub References: <ref> [29] </ref> [30] 2.83 Procol Developer: University of Leiden, The Netherlands Description: oo. Procol is an object-based language without in heritance. memory model. parallelism. Message passing only. Return values, if any, must be passed back by separate messages. Rendezvous.
Reference: [30] <author> Brian. N. Bershad. </author> <title> The PRESTO user's manual. </title> <type> Technical Report 88-01-04, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: If post-processing is used, the Actor may not change its state after the become statement. fault tolerance. None. Availability: ACT++ version 3.0 has been implemented on a Sequent Symmetry multiprocessor with shared memory using the PRESTO thread package <ref> [29, 30] </ref>, see section 2.82. A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] [122] [123] [124] [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. <p> For synchronization Presto offers a variety of primitives, e.g., spin-locks, locks, mutex objects, and condition variables, and co ordination futures. fault tolerance. Availability: The source code (Presto 1.0) is available via anonymous ftp from ftp://ftp.cs.washington.edu/pub References: [29] <ref> [30] </ref> 2.83 Procol Developer: University of Leiden, The Netherlands Description: oo. Procol is an object-based language without in heritance. memory model. parallelism. Message passing only. Return values, if any, must be passed back by separate messages. Rendezvous.
Reference: [31] <author> Fran~cois Bodin, Peter Beckman, Dennis Gannon, Srinivas Narayana, and Shelby X. Yang. </author> <title> Distributed pC++: Basic ideas for an object parallel language. </title> <journal> Scientific Programming, </journal> <volume> 2(3), </volume> <year> 1993. </year>
Reference-contexts: A lot of papers, the program files, and additional information are available from http://www.extreme.indiana.edu/sage Email address: Dennis Gannon ! gannon@cs.indiana.edu References: <ref> [31] </ref> [32] [143] [84] [153] 2.78 Parallel Computing Action Developer: Rank Xerox France, University of Paris VI Description: oo. Extension of C++. Library. memory model. Hierarchical memory model. The programmer understands the difference between local objects and remote objects.
Reference: [32] <author> Fran~cois Bodin, Peter Beckman, Dennis Gannon, Shelby X. Yang, S. Kesavan, A. Malony, and B. Mohr. </author> <title> Implementing a parallel C++ runtime system for scalable parallel systems. </title> <booktitle> In Proc. of Supercomputing'93, </booktitle> <pages> pages 588-597, </pages> <address> Portland, Oregon, </address> <month> November 15-19, </month> <year> 1993. </year>
Reference-contexts: A lot of papers, the program files, and additional information are available from http://www.extreme.indiana.edu/sage Email address: Dennis Gannon ! gannon@cs.indiana.edu References: [31] <ref> [32] </ref> [143] [84] [153] 2.78 Parallel Computing Action Developer: Rank Xerox France, University of Paris VI Description: oo. Extension of C++. Library. memory model. Hierarchical memory model. The programmer understands the difference between local objects and remote objects.
Reference: [33] <author> Dietrich Boles. </author> <title> Parallel object-oriented programming with QPC++. </title> <journal> Structured Programming, </journal> <volume> 14 </volume> <pages> 158-172, </pages> <year> 1993. </year>
Reference-contexts: The accept statement can be used in a select statement. fault tolerance. Availability: At the moment, the language is only im plemented on a uniprocessor. Email address: Dietrich Boles ! boles@informatik.uni-oldenburg.de References: <ref> [33] </ref> 2.88 Rosette Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Rosette is based on the Actor model [104, 4, 5]. It incorporates multiple inheritance and reflection. Messages that cannot be processed by an actor are passed on to its "father". memory model. As introduced in the Actor model.
Reference: [34] <author> A. H. Borning. </author> <title> Classes versus prototypes in object-oriented languages. </title> <booktitle> In Proc. of the ACM/IEEE Fall Joint Computer Conf., </booktitle> <year> 1986. </year>
Reference-contexts: Availability: The language has been implemented on a 32 node nCUBE2. References: [142] 2.73 Obliq Developer: Digital Equipment Corporation, Palo Alto Description: oo. Object based language, related to Modula3. There are no classes. Inheritance is implemented by object cloning, i.e., Obliq is a prototype-based language. (See <ref> [34] </ref> for the orig inal prototype based language proposal.) memory model. parallelism. Additional activities are introduced by fork and join commands. The join command can wait upon the completion of names threads and returns the return value of the forked procedure. scheduling. A thread can decide to pause. mapping. synchronization.
Reference: [35] <author> Jan van den Bos and Chris Laffra. </author> <title> PROCOL: A parallel object language with protocols. </title> <booktitle> In Proc. of OOPSLA'89, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 95-102, </pages> <address> New Orleans, Louisiana, </address> <month> October 1-6, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices 24(10). </journal>
Reference-contexts: Per object one action can be performed at a time. 35 fault tolerance. None. Availability: After completing the thesis work, Procol has ceased to exist. The University of Leiden, The Netherlands, can be reached under: http://www.leidenuniv.nl References: <ref> [35] </ref> [135] [136] 2.84 Proof Developer: University of Florida, Gainesville. Description: oo. Inheritance and other oo features. Separation of class interface and class implementation. memory model. parallelism. Autonomous routines. cobegin. scheduling. mapping. Automatic object clustering. synchronization. Synchronization with guards per method.
Reference: [36] <author> Soren Brandt and Ole Lehrmann Madsen. </author> <title> Object-oriented distributed programming in BETA. </title> <editor> In R. Guerraoui, O. Nierstrasz, and M. Riveill, editors, </editor> <booktitle> Proc. of the ECOOPO'93 Workshop on Object-Based Distributed Programming, number 791 in Lecture Notes in Computer Science, </booktitle> <pages> pages 185-212, </pages> <address> Kaiser-slautern, Germany, July 26-27, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Exceptions. Availability: The beta home page can be found on http://www.daimi.aaudk/ beta A wealth of information can be found in the newsgroup: news:comp.lang.beta A commercially available BETA system can be found under http://www.mjolner.dk Email address: information ! info@mjolner.dk References: <ref> [36] </ref> [151] [150] 2.17 Blaze 2 Developer: Purdue University, West Lafayette and ICASE, NASA Langeley Research Center. Description: oo. This is an object oriented extension of BLAZE, a parallel language for scientific programming. memory model. parallelism.
Reference: [37] <author> Jean-Pierre Briot. </author> <title> From objects to Actors: Study of a limited symbiosis in Smalltalk-80. </title> <type> Technical Report 88-58, </type> <institution> Laboratoire Informatique Theorique et Programmation, LITP, Paris, France, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: After a become the state can no longer be changed. fault tolerance. Availability: Version 3 of Acttalk is implemented in Smalltalk-80 4.1 and is available from: http://web.yl.is.s.u-tokyo.ac.jp/members/briot/actalk/actalk.html ftp://camille.is.s.u-tokyo.ac.jp/pub/members/briot/actalk ftp://ftp.ibp.fr/ibp/softs/litp/actalk Email address: Jean-Pierre Briot ! briot@is.s.u-tokyo.ac.jp 4 References: <ref> [37] </ref> 2.9 ActorSpace Developer: University of Illinois, Urbana-Champaign and Aalborg University, Denmark Description: oo. parallelism. ActorSpace is based on the Actor model [4, 5] and extends this model by the ability to address groups of actors at once.
Reference: [38] <author> Peter A. Buhr and Glen Ditchfield. </author> <title> Adding con-currency to a programming language. </title> <booktitle> In Proc. of 42 USENIX C++ Technical Conference, </booktitle> <pages> pages 207-223, </pages> <address> Portland, OR, </address> <month> August 10-13, </month> <year> 1992. </year>
Reference-contexts: Availability: C++ has been implemented on single processor workstations and shared memory multiprocessors. Version 4.1 is available via anonymous ftp from ftp://plg.uwaterloo.ca/pub/uSystem Email addresses: group ! usystem@maytag.uwaterloo.ca Peter A. Buhr ! References: [39] <ref> [38] </ref> [40] 29 2.69 Modula-3* Developer: University of Karlsruhe, Germany. Description: oo. Extension of Modula-3. memory model. Global address space. parallelism. Modula-3* introduces a forall state ment to spawn new activities. scheduling. mapping. It is intended to automatically map objects and concurrent activities to the parallel target machines. synchronization.
Reference: [39] <author> Peter A. Buhr, Glen Ditchfield, Richard A. Stroo-bosscher, B. M. Younger, and C. R. Zarnke. </author> <title> C++: concurrency in the object-oriented language C++. </title> <journal> Software Practice and Experience, </journal> <volume> 22(2) </volume> <pages> 137-172, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Availability: C++ has been implemented on single processor workstations and shared memory multiprocessors. Version 4.1 is available via anonymous ftp from ftp://plg.uwaterloo.ca/pub/uSystem Email addresses: group ! usystem@maytag.uwaterloo.ca Peter A. Buhr ! References: <ref> [39] </ref> [38] [40] 29 2.69 Modula-3* Developer: University of Karlsruhe, Germany. Description: oo. Extension of Modula-3. memory model. Global address space. parallelism. Modula-3* introduces a forall state ment to spawn new activities. scheduling. mapping. It is intended to automatically map objects and concurrent activities to the parallel target machines. synchronization.
Reference: [40] <author> Peter A. Buhr and Richard A. Stroobosscher. </author> <title> C++ Annotated Reference Manual, </title> <type> Version 3.7. </type> <institution> University of Waterloo, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Availability: C++ has been implemented on single processor workstations and shared memory multiprocessors. Version 4.1 is available via anonymous ftp from ftp://plg.uwaterloo.ca/pub/uSystem Email addresses: group ! usystem@maytag.uwaterloo.ca Peter A. Buhr ! References: [39] [38] <ref> [40] </ref> 29 2.69 Modula-3* Developer: University of Karlsruhe, Germany. Description: oo. Extension of Modula-3. memory model. Global address space. parallelism. Modula-3* introduces a forall state ment to spawn new activities. scheduling. mapping. It is intended to automatically map objects and concurrent activities to the parallel target machines. synchronization.
Reference: [41] <author> Christian J. Callsen and Gul Agha. </author> <title> Open heterogeneous computing in ActorSpace. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 289-300, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Email addresses: Christian J. Callseen ! chris@iesd.auc.dk Gul Agha ! agha@cs.uiuc.edu References: [3] <ref> [41] </ref> 2.10 Actra Developer: Defense Research Establishment and Car leton University, Ottawa, Canada. Description: oo. Extension of Smalltalk based on Actors. memory model. Based on shared memory ma chine. parallelism. Post-processing. Synchronous message passing only. In contrast to the Actor model, there is no asynchronous message passing. scheduling. mapping.
Reference: [42] <author> R. H. Campbell and A. N. Habermann. </author> <title> The specification of process synchronization by path expressions. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 16 </volume> <pages> 89-102, </pages> <month> April </month> <year> 1974. </year>
Reference-contexts: Dynamic interface. The interface is 1st class, Ellie offers explicit include/exclude operations to modify the interface. Calls to excluded methods block until these methods are included into the dynamic interface again. This mechanisms has similar expressive power as path expressions introduced by Campbell and Habermann in <ref> [42] </ref>. fault tolerance. Availability: Ellie is not available outside the Distributed Systems research group in Copenhagen. Platforms are MS-DOS and transputers (with IN-MOS C toolkit). <p> Since Procol is translated for a single workstation, mapping is not an issue. synchronization. The synchronization mechanism of Procol is based on path expressions as introduced by Campbell and Habermann <ref> [42] </ref>. The programmer uses regular expressions and guarding conditions to express the acceptable order, i.e. the protocol, of message arrival. Per object one action can be performed at a time. 35 fault tolerance. None. Availability: After completing the thesis work, Procol has ceased to exist.
Reference: [43] <author> Luca Cardelli. Obliq: </author> <title> A language with distributed scope. </title> <type> Technical Report 122, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1994. </year>
Reference-contexts: Availability: A version of Obliq which is implemented on top of Modula-3 Network Objects has been available since 1994 and has been used in several projects. The implementation and documentation are available from http://www.research.digital.com/SRC/home.html Email address: Luca Cardelli ! luca@src.dec.com References: <ref> [43] </ref> [44] 2.74 Orca Developer: Vrije Universiteit, Amsterdam, The Nether lands Description: oo. Orca is object-based. There are no inheritance and no dynamic binding. memory model. Distributed Shared Memory. Communication is based on shared data-objects.
Reference: [44] <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <journal> Computing System, </journal> <volume> 8(1) </volume> <pages> 27-59, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: Availability: A version of Obliq which is implemented on top of Modula-3 Network Objects has been available since 1994 and has been used in several projects. The implementation and documentation are available from http://www.research.digital.com/SRC/home.html Email address: Luca Cardelli ! luca@src.dec.com References: [43] <ref> [44] </ref> 2.74 Orca Developer: Vrije Universiteit, Amsterdam, The Nether lands Description: oo. Orca is object-based. There are no inheritance and no dynamic binding. memory model. Distributed Shared Memory. Communication is based on shared data-objects.
Reference: [45] <author> Peter Carlin, Mani Chandy, and Carl Kesselman. </author> <title> The Compositional C++ Language Definition, Revision 0.9. </title> <institution> California Institute of Technology, Pasadena, </institution> <month> March 1, </month> <year> 1993. </year>
Reference-contexts: They use a self-made thread package that is based on quick-threads from the University of Washington. The authors claim that this package can easily be ported to new machines. Available from: ftp://csvax.cs.caltech.edu/comp/CC++ 11 Email addresses: K. Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu References: <ref> [45] </ref> [58] [59] [82] 2.27 Concurrency Class for Eiffel Developer: University of California, Santa Barbara Description: oo. This is an Eiffel library. The base language is not altered. memory model. Each active object has its own address space.
Reference: [46] <author> Denis Caromel. </author> <title> A general model for concurrent and distributed object-oriented programming. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 102-104, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Each language process is mapped to a Unix process. A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: <ref> [46] </ref> [47] [48] [49] [50] [51] 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism.
Reference: [47] <author> Denis Caromel. </author> <title> Service, asynchrony and wait-by-necessity. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 2(4) </volume> <pages> 12-22, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: In Eiffel// there is at most one active process per object. This holds both for process objects that work on at most one request at a time and for passive objects, that can be accessed by at most one process object. The synchronization principle is wait-by-necessity <ref> [47] </ref>. A process blocks when it attempts to use the result of a feature call that has not been returned yet. This mechanism is automatic and transparent, i.e., there is no need to explicitly declared future data type or CBoxes. The principle of Eiffel// is to prohibit shared passive objects. <p> Each language process is mapped to a Unix process. A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: [46] <ref> [47] </ref> [48] [49] [50] [51] 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism.
Reference: [48] <author> Denis Caromel. </author> <title> Programming abstractions for concurrent programming. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS Pacific'90, </booktitle> <pages> pages 245-253, </pages> <address> Sydney, Aus-tralia, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Each language process is mapped to a Unix process. A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: [46] [47] <ref> [48] </ref> [49] [50] [51] 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism. Method invocation is synchronous.
Reference: [49] <author> Denis Caromel. </author> <title> A solution to the explicit/implicit control dilemma. </title> <booktitle> In Proc. of ECOOP OOPSLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 21-25, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: Each language process is mapped to a Unix process. A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: [46] [47] [48] <ref> [49] </ref> [50] [51] 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism. Method invocation is synchronous.
Reference: [50] <author> Denis Caromel. </author> <title> Toward a method of object-oriented concurrent programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 90-102, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Each language process is mapped to a Unix process. A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: [46] [47] [48] [49] <ref> [50] </ref> [51] 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism. Method invocation is synchronous.
Reference: [51] <author> Denis Caromel and Manuel Rebuffel. </author> <title> Object-based concurrency: Ten language features to achieve reuse. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS USA'93, </booktitle> <pages> pages 205-214, </pages> <address> Santa Barbara, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: A forthcoming implementation will target both network or cluster of workstations, and parallel machines, with the language processes being implemented with both operating system processes, and light weight processes. Email address: Denis Caromel ! caromel@mimosa.unice.fr References: [46] [47] [48] [49] [50] <ref> [51] </ref> 2.47 Ellie Developer: University of Copenhagen, Denmark Description: oo. In Ellie everything is an object, e.g., classes, types, blocks, and methods. Multiple inheri tance. memory model. All objects communicate solely through method invocation. There are no glob ally accessible shared variables. parallelism. Method invocation is synchronous.
Reference: [52] <author> H. Carr, R. R. Kessler, and M. Swanson. </author> <title> Distributed C++. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(1):81, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: The runtime system is stable and usable on HP Series 9000 Model 3x0 or Model 7x0 running either BSD, HP-UX, or OSF/1. The author claims that it could be ported fairly easily to other UNIX machines. Email address: Harold Carr ! carr@cs.utah.edu References: <ref> [52] </ref> [53] 2.38 Distributed Eiffel Developer: College of Computing, Georgia Institute of Technology Description: oo. This is an extension of Eiffel. memory model. parallelism. The programmer can declare persistent objects which are implemented on top of the Clouds operating system. These large grain objects can comprise several Eiffel objects.
Reference: [53] <author> Harold Carr, Robert R. Kessler, and Mark Swanson. </author> <title> Compiling distributed C++. </title> <booktitle> In Proc. 5th Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 496-503. </pages> <publisher> IEEE Computer Society, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: The runtime system is stable and usable on HP Series 9000 Model 3x0 or Model 7x0 running either BSD, HP-UX, or OSF/1. The author claims that it could be ported fairly easily to other UNIX machines. Email address: Harold Carr ! carr@cs.utah.edu References: [52] <ref> [53] </ref> 2.38 Distributed Eiffel Developer: College of Computing, Georgia Institute of Technology Description: oo. This is an extension of Eiffel. memory model. parallelism. The programmer can declare persistent objects which are implemented on top of the Clouds operating system. These large grain objects can comprise several Eiffel objects.
Reference: [54] <author> Sergio E. R. de Carvalho. </author> <title> The object and event oriented language TOOL. </title> <type> Technical Report MCC06-93, </type> <institution> Pontificia University, Rio de Janeiro, Brazil, </institution> <year> 1993. </year>
Reference-contexts: In fact, there is only one method actively working at an object at any given time. fault tolerance. Availability: TOOL has been implemented on top of Windows 3.1. Additional information can be found on: http://www.inf.puc-rio.br/~sergio/tool Email addresses: Sergio E. R. de Carvalho ! sergio@inf.puc-rio.br References: <ref> [54] </ref> 2.96 Trellis/Owl Developer: Eastern Research Lab, Digital Equipment Corporation. Description: oo. Multiple inheritance. memory model. parallelism. There are 1st class thread objects ("activities") to be dynamically created by the programmer. In addition there is a join-like construct (wait).
Reference: [55] <author> Rohit Chandra, Anoop Gupta, and John L. Hen-nessy. </author> <title> COOL: A language for parallel programming. </title> <editor> In David Gelernter, Alexandru Nicolau, and David Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 126-148. </pages> <publisher> MIT Press Cam-bridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1990. </year>
Reference-contexts: None. Availability: COOL is available for the following architectures: Stanford Dash, silicon Graphics 4D-380, and Encore Multimax. Sources and Documentation can be found on anonymous ftp://cool.stanford.edu Email address: Rohit Chandra ! rohit@cool.stanford.edu References: <ref> [55] </ref> [56] [57] 2.34 Coral Developer: IBM Palo Alto Scientific Center Description: oo. Multiple inheritance. memory model. parallelism. Asynchronous message passing. scheduling. mapping. Nothing is published about object/thread placement, alignment etc. synchronization.
Reference: [56] <author> Rohit Chandra, Anoop Gupta, and John L. Hen-nessy. </author> <title> Data locality and load balancing in COOL. </title> <booktitle> In ACM Sigplan Symp. on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 249-259. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <month> September 7-8, </month> <year> 1993. </year>
Reference-contexts: None. Availability: COOL is available for the following architectures: Stanford Dash, silicon Graphics 4D-380, and Encore Multimax. Sources and Documentation can be found on anonymous ftp://cool.stanford.edu Email address: Rohit Chandra ! rohit@cool.stanford.edu References: [55] <ref> [56] </ref> [57] 2.34 Coral Developer: IBM Palo Alto Scientific Center Description: oo. Multiple inheritance. memory model. parallelism. Asynchronous message passing. scheduling. mapping. Nothing is published about object/thread placement, alignment etc. synchronization.
Reference: [57] <author> Rohit Chandra, Anoop Gupta, and John L. Hen-nessy. </author> <title> COOL: An object-based language for parallel programming. </title> <journal> IEEE Computer, </journal> <volume> 27(8) </volume> <pages> 13-26, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: None. Availability: COOL is available for the following architectures: Stanford Dash, silicon Graphics 4D-380, and Encore Multimax. Sources and Documentation can be found on anonymous ftp://cool.stanford.edu Email address: Rohit Chandra ! rohit@cool.stanford.edu References: [55] [56] <ref> [57] </ref> 2.34 Coral Developer: IBM Palo Alto Scientific Center Description: oo. Multiple inheritance. memory model. parallelism. Asynchronous message passing. scheduling. mapping. Nothing is published about object/thread placement, alignment etc. synchronization.
Reference: [58] <author> K. Mani Chandy and C. Kesselman. </author> <title> Compositional C++: Compositional parallel programming. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 124-144, </pages> <address> New Haven, Connecticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: They use a self-made thread package that is based on quick-threads from the University of Washington. The authors claim that this package can easily be ported to new machines. Available from: ftp://csvax.cs.caltech.edu/comp/CC++ 11 Email addresses: K. Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu References: [45] <ref> [58] </ref> [59] [82] 2.27 Concurrency Class for Eiffel Developer: University of California, Santa Barbara Description: oo. This is an Eiffel library. The base language is not altered. memory model. Each active object has its own address space.
Reference: [59] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 281-313. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, Eng-land, </address> <year> 1993. </year>
Reference-contexts: They use a self-made thread package that is based on quick-threads from the University of Washington. The authors claim that this package can easily be ported to new machines. Available from: ftp://csvax.cs.caltech.edu/comp/CC++ 11 Email addresses: K. Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu References: [45] [58] <ref> [59] </ref> [82] 2.27 Concurrency Class for Eiffel Developer: University of California, Santa Barbara Description: oo. This is an Eiffel library. The base language is not altered. memory model. Each active object has its own address space.
Reference: [60] <author> Daniel T. Chang. </author> <title> CORAL: A concurrent object-oriented system for constructing and executing sequential, </title> <booktitle> parallel and distributed applications. In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 26-30, </pages> <address> Ot-tawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. 43 </note>
Reference-contexts: Nothing is published about object/thread placement, alignment etc. synchronization. The author states the existence of a synchronization mechanism, however does not give any details, because a patent application is pending. fault tolerance. Availability: A first experimental version seems to be running on top of sequential AIX. References: <ref> [60] </ref> 15 2.35 CST, Concurrent Smalltalk (MIT) Developer: MIT Description: oo. Based on Smalltalk-80. Multiple inheritance. memory model. Global virtual address space ma chine. parallelism. Asynchronous method calls, futures. distinction between objects and distributed ob jects. scheduling. mapping. Nothing is published about distribution, locality etc. synchronization. Objects: one-activity-at-a-time.
Reference: [61] <author> Jeffrey S. Chase, Franz G. Amador, Edward D. La--zowska, Henry M. Levy, and Richard J. Littlefield. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <type> Technical Report 89-04-01, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: Synchronization of object access is thus left to the programmer. For synchronization of concurrent threads there is a join construct. fault tolerance. Availability: Amber is implemented on the Topaz operating system for the DEC FireFly [203], a multipro cessor workstation based on VAX microprocessors. References: <ref> [61] </ref> 5 2.12 A-NETL Developer: Utsunomiya University, Japan. Description: oo. The language differentiates between dynamic objects and indexed objects, where multiple in stances are created at once. No inheritance. memory model. parallelism. Asynchronous method call, futures, post-processing. Synchronous method call.
Reference: [62] <author> Arun Chatterjee. </author> <title> Distributed execution of C++ programs. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages b1-b6, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: Availability: ESP is available for a network of Sun SPARC stations and for the Motorola Pleiades mul ticomputer. Email addresses: David Croley ! croley@mcc.com Arun Chatterjee ! arun@mcc.com References: <ref> [62] </ref> 2.52 Fleng++ Developer: University of Tokyo, Japan Description: oo. Multiple Inheritance. Based on logic. Classes have methods which are used in an imperative way. memory model. parallelism. And/Or-parallelism scheduling. mapping. The location of objects is visible (each PE is visible). synchronization.
Reference: [63] <author> Doreen Y. Cheng. </author> <title> A survey of parallel programming languages and tools. </title> <type> Technical Report RND-93-005, </type> <institution> NASA, Ames Research Center, Moffett Field, </institution> <address> CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] <ref> [63] </ref> [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [64] <author> P. Y. Chevalier, A. Freyssinet, D. Hagimont, S. Krakowiak, S. Lacourte, and X. Rousset de Pina. </author> <title> Experience with shared object support in the Guide system. </title> <booktitle> Symp. on Experiences on Distributed Systems and Multiprocessors, </booktitle> <pages> 93. </pages>
Reference-contexts: Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: <ref> [64] </ref> [78] [98] [133] [134] [182] 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine.
Reference: [65] <author> Andrew A. Chien. </author> <title> Concurrent Aggregates: Using multiple-access data abstractions to manage complexity in concurrent programs. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 31-36, </pages> <address> Ottawa, Canada, Octo-ber 21-22, </address> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: <ref> [65] </ref> [66] [67] [68] [69] [70] [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization.
Reference: [66] <author> Andrew A. Chien, </author> <title> editor. Concurrent Aggregates: Supporting Modularity in Massively-Parallel Programs. </title> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, Lon-don, England, </address> <year> 1993. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] <ref> [66] </ref> [67] [68] [69] [70] [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [67] <author> Andrew A. Chien. </author> <title> Supporting modularity in highly-parallel programs. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 175-194. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1993. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] <ref> [67] </ref> [68] [69] [70] [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [68] <author> Andrew A. Chien. </author> <title> Concurrent Aggregates (CA): Design and experience with a concurrent object-oriented language based on aggregates. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 25(2) </volume> <pages> 174-106, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] <ref> [68] </ref> [69] [70] [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [69] <author> Andrew A. Chien and William J. Dally. </author> <title> Experience with Concurrent Aggregates (CA): </title> <booktitle> Implementation and programming. In Proc. of the 5th Distributed Memory Computer Conf., </booktitle> <address> Charleston, SC, </address> <month> April 9-12, </month> <year> 1990. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] [68] <ref> [69] </ref> [70] [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [70] <author> Andrew A. Chien, Vijay Karamcheti, and John Plevyak. </author> <title> The Concert system compiler and runtime support for efficient, fine-grained concurrent object-oriented programs. </title> <type> Technical Report UIUCDCS-R-93-1815, </type> <institution> University of Illinois at Urbana-Champaign, Urbana, IL, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] [68] [69] <ref> [70] </ref> [71] [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [71] <author> Andrew A. Chien, Vijay Karamcheti, John Plevyak, and Xingbim Zhang. </author> <title> Concurrent Aggregates (CA) Language Report. Concurrent Systems Architecture Group, </title> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] [68] [69] [70] <ref> [71] </ref> [129] [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [72] <author> Roger S. Chin and Samuel T. Chanson. </author> <title> Distributed object-based programming system. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 91-127, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: There are a lot of systems for distributed object-based programming and a huge body of active research is directed to problems from this context. A good survey is given in <ref> [72] </ref>. But before proceeding, we would like to name and shortly characterize some of the more influential systems in that area, in particular those where there is not a static relation between objects and processes that work on them.
Reference: [73] <author> Antonio Corradi and Letizia Leonardi. </author> <title> PO an object model to express parallelism. </title> <booktitle> In ACM SIG-PLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 152-155, </pages> <address> San Diego, CA, Septem-ber 26-27, </address> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: The programmer however can supply constraints to the methods or even explicit scheduling methods to alleviate the re strictions of the monitor behavior. fault tolerance. Availability: PO and the mapping algorithm is implemented for a MEIKO Computing Surface Machine, which is based on T8 Transputer technology. References: <ref> [73] </ref> [74] 2.81 POOL, POOL-T, POOL-I Developer: Philips Research Laboratories, Eindhoven, The Netherlands. Description: oo. The POOL family of languages has several members. Whereas POOL-T does not have inheritance, POOL-I is an extension thereof that has multiple inheritance and subtyping.
Reference: [74] <author> Antonio Corradi, Letizia Leonardi, and Daniele Vigo. </author> <title> Massively parallel programming environments: How to map parallel objects on transputers. </title> <editor> In M. Becker, L. Litzler, and M. Trehel, editors, </editor> <booktitle> Proc. of Transputers '92, Advanced Research and Industrial Applications, </booktitle> <pages> pages 125-141, </pages> <address> Arc et Senans, France, May 20-22, 1992. </address> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands. </address>
Reference-contexts: The programmer however can supply constraints to the methods or even explicit scheduling methods to alleviate the re strictions of the monitor behavior. fault tolerance. Availability: PO and the mapping algorithm is implemented for a MEIKO Computing Surface Machine, which is based on T8 Transputer technology. References: [73] <ref> [74] </ref> 2.81 POOL, POOL-T, POOL-I Developer: Philips Research Laboratories, Eindhoven, The Netherlands. Description: oo. The POOL family of languages has several members. Whereas POOL-T does not have inheritance, POOL-I is an extension thereof that has multiple inheritance and subtyping. In POOL-T every data item is considered to be an object.
Reference: [75] <author> William J. Dally and Andrew A. Chien. </author> <title> Object-oriented concurrent programming in CST. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 28-31, </pages> <address> San Diego, CA, Septem-ber 26-27, </address> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: There are special addressing mechanisms for communication inside of a group. fault tolerance. Availability: A simple programming environment has been implemented on a Symbolics 3600 system. A back-end is MIT's J-machine, a message driven parallel architecture. Email addresses: William Dally ! dally@ai.mit.edu Andrew Chien ! achien@cs.uiuc.edu References: <ref> [75] </ref> [106] 2.36 Demeter Developer: Description: oo. memory model. parallelism. Thread library. scheduling. mapping. synchronization. Synchronization patterns can be specified separate from the any classes. Then the class code is fitted in and the final code is generated.
Reference: [76] <author> Peter de Jong. </author> <title> Concurrent organizational objects. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 40-44, </pages> <address> Ot-tawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Actor language. Asynchronous message passing only. Early become for postpro-cessing. Return values, if any, have to be passed back by a separate message. scheduling. mapping. synchronization. Typical Actor language. fault tolerance. Availability: Email address: Peter De Jong ! pdjong@vnet.ibm.com References: <ref> [76] </ref> 2.98 UC++ Developer: University College London Description: oo. Parallel version of C++. memory model. Global shared address space. Pointers to local and remote objects are iden tical. parallelism. When an object is created it can be labeled "active".
Reference: [77] <author> D. Decouchant. </author> <title> Design of a distributed object manager for the Smalltalk-80 system. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 444-452, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2 </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices 21(11). </journal>
Reference-contexts: Whereas Decouchant and the system of Schelvis and Ble-doeg (Oce Netherland) extended the Smalltalk virtual machine, the other projects chose to add proxy and message objects at the virtual image level. synchronization. fault tolerance. Availability: References: [27] <ref> [77] </ref> [159] [168] [189] 2.40 Distributed Smalltalk Process Developer: Description: Extension of Goldberg and Robson's Smalltalk (see section 2.92). oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). The "fork" message can handle the node number. scheduling. mapping.
Reference: [78] <author> D. Decouchant, S. Krakowiak, M. Meysembourg, M. Riveill, and X. Rousset de Pina. </author> <title> A synchronization mechanism for typed objects in a distributed system. </title> <booktitle> ACM SIGPLAN Workshop on Concurrent Object-Based Language Design, in ACM SIGPLAN Notices, </booktitle> <volume> 24(4) </volume> <pages> 105-107, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: [64] <ref> [78] </ref> [98] [133] [134] [182] 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine.
Reference: [79] <author> D. Detlefs, M. P. Herlihy, and J. M. Wing. </author> <title> Inheritance of synchronization and recovery properties in Avalon/C++. </title> <journal> IEEE Computer, </journal> <volume> 21(12) </volume> <pages> 57-69, </pages> <month> De-cember </month> <year> 1988. </year>
Reference-contexts: Arjuna The Arjuna approach [193] focuses on distributed transaction support for objects. It provides persistent objects, but does not offer migrating objects. Avalon/C++ Although internally quite different, the intention of the Avalon/C++ system <ref> [79] </ref> is quite sim ilar to that of Arjuna. DCE++ [190] This is an extension of both the OSF Distributed Computing Environment and C++ that provides a uniform object model, location invariant invocation, remote reference parameter passing and dy namic object migration. Peace Could be relevant.
Reference: [80] <author> E. W. Dijkstra. </author> <title> The structure of the 'THE' multiprogramming system. </title> <journal> Communications of the ACM, </journal> <volume> 11(5) </volume> <pages> 341-346, </pages> <month> May </month> <year> 1968. </year> <month> 44 </month>
Reference-contexts: Other processor objects become active due to invocation of their member functions. Inside of a processor object there are three light types of parallelism: (1) several functions can be called in parallel, similar to a classical cobegin-block as introduced by Dijkstra in 1986 <ref> [80] </ref>. (2) In a parfor a concurrent thread is started for each iteration of the for-loop. These threads synchronize at the end of the parfor. Finally, (c) there is a way to spawn new threads, which do not impose a parent-child relation. A spawned thread cannot return a result. scheduling. <p> Synchronous and asynchronous calls can be passed on to other methods that eventually return values. The programmer can decide whether a sequence of statements is executed sequentially, or whether they 12 are executed concurrently. The latter is similar to the classical cobegin block as introduced by Djikstra <ref> [80] </ref>. Post-processing is available. scheduling. Scheduling is done by compiler and run-time system. Messages that arrive at an actor are processed in FIFO manner. mapping. The mapping of objects to processors is done by the compiler and runtime system. The programmer can give hints concerning the relative locality of objects.
Reference: [81] <author> Takanobu Baba et al. </author> <title> A network-topology indepen-dent task allocation strategy for parallel computers. </title> <booktitle> In Proc. Supercomputing '90, </booktitle> <pages> pages 878-887, </pages> <year> 1990. </year>
Reference-contexts: The programmer can express the relationship between objects and can express the weight of communication between objects. Moreover, he can collect objects that should reside in one node for purposes of locality. There is an allocator tool which helps in mapping to the machine. synchronization. fault tolerance. Availability: References: <ref> [81] </ref> [226] 2.13 Arche Developer: IRISA, Institut de Recherche en Informa tique et Systems Aleatoires, Rennes, France Description: oo. Single inheritance. memory model. parallelism. Methods are called synchronously, i.e., the caller is blocked until the called method is completed.
Reference: [82] <author> Ian Foster. </author> <title> Designing and Building Parallel Programs, </title> <address> pages 167-205. </address> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference-contexts: They use a self-made thread package that is based on quick-threads from the University of Washington. The authors claim that this package can easily be ported to new machines. Available from: ftp://csvax.cs.caltech.edu/comp/CC++ 11 Email addresses: K. Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu References: [45] [58] [59] <ref> [82] </ref> 2.27 Concurrency Class for Eiffel Developer: University of California, Santa Barbara Description: oo. This is an Eiffel library. The base language is not altered. memory model. Each active object has its own address space.
Reference: [83] <author> Geoffrey Fox, Seema Hiranandani, Ken Kennedy, Charles Koelbel, Uli Kremer, Chau-Wen Tseng, and Min-You Wu. </author> <title> Fortran D language specification. </title> <type> Technical Report CRPC-TR90079, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: It is possible to declare addressing functions that give access to neighboring instances when called from an instance of the bulk. Above that, the programmer can specify how bulks are to be aligned with respect to each other. The notation borrows heavily from C* [204], Fortran D <ref> [83] </ref>, HPF [109] and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. <p> The programmer specifies a mapping of a template to the available processors. Then he can align his aggregates relative to this template. Hence, the programmer must try to achieve data locality of elements of collections that are used together. The notation borrows heavily from C* [204], Fortran D <ref> [83] </ref>, HPF [109] and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. However, the parallel activities exist only from the call of the parallel function to its termination on all instances.
Reference: [84] <author> Dennis Gannon. </author> <title> Libraries and tools for object parallel programming. </title> <booktitle> In Proc. of the CRNS-NSF Workshop on Environment and Tools for Parallel Scientific Computing, </booktitle> <address> Saint Hilaire du Touvet, France, </address> <month> September 7-8, </month> <year> 1992. </year> <title> Elsevier, </title> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <year> 1993. </year>
Reference-contexts: A lot of papers, the program files, and additional information are available from http://www.extreme.indiana.edu/sage Email address: Dennis Gannon ! gannon@cs.indiana.edu References: [31] [32] [143] <ref> [84] </ref> [153] 2.78 Parallel Computing Action Developer: Rank Xerox France, University of Paris VI Description: oo. Extension of C++. Library. memory model. Hierarchical memory model. The programmer understands the difference between local objects and remote objects.
Reference: [85] <author> A. J. Gerber. </author> <title> Process synchronization by conter variables. </title> <journal> ACM Operating Systems Review, </journal> <volume> 11(4) </volume> <pages> 6-17, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: The activation conditions are specified in a special section of the class code but have a one-to-one relation to the methods. Guide provides special counters (invoked, stared, completed, etc.) Control can be inherited separately. The idea of synchronization based on counters is due to [183] and <ref> [85] </ref>. Whereas the first papers did not consider the fact that guards accessing instance variable might cause inconsistency, the paper [182] dis cusses this problem. fault tolerance. Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2).
Reference: [86] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language and Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1983. </year>
Reference-contexts: References: [214] 2.92 Smalltalk-80 Developer: Description: oo. memory model. parallelism. By sending a "fork" message to a block of expressions a thread is started that executes these expressions concurrently. scheduling. Special "processor" object that imple ments a FIFO scheduling policy for threads. mapping. synchronization. Semaphore. fault tolerance. Availability: References: <ref> [86] </ref> 2.93 Sos Developer: University of Dublin, Trinity College, Ire land. Description: oo. memory model. parallelism. SOS is mainly interested in concur-rency coordination mechanisms. The discussion of those is more or less independent of the way parallelism is introduced into a language.
Reference: [87] <author> Yvon Gourhant and Marc Shapiro. FOG/C++: </author> <title> a fragmented-object generator. </title> <booktitle> In C++ Conf., </booktitle> <pages> pages 63-74, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Otherwise, the programmer must implement a synchronization himself. When synchronization of concurrently executing threads is needed, the programmer must imple ment that requirement himself. fault tolerance. Availability: FOG/C++ has been implemented on top of SOS, an object-oriented operating system [192]. Email address: Yvon Gourhand ! gourhant@corto.inria.fr References: <ref> [87] </ref> [152] 2.54 Guide Developer: University of Grenoble and Bull Research Center Description: oo. Separation of interface and implementation. In heritance. memory model. Objects are persistent and stored on secondary memory. When used, these objects are bound into the address space of a job.
Reference: [88] <author> J. E. Grass and R. H. Campbell. Mediators: </author> <title> a synchronization mechanism. </title> <booktitle> In Proc. of the 6th Int. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 468-477, </pages> <address> Cambridge, MA, May 19-23, 1986. </address> <publisher> IEEE Com-put. Soc. Press. </publisher>
Reference-contexts: Basically the same information used in Guides counters (see section 2.54). fault tolerance. Availability: References: <ref> [88] </ref> 2.65 MeldC Developer: Columbia University, New York Description: oo. This is an object-oriented language that understands all concepts as objects of a meta-class. A program is a collection of active objects which send and receive messages to and from other (lo cal and remote) objects. memory model.
Reference: [89] <author> Andrew S. Grimshaw. </author> <title> Easy to use object-oriented parallel programming. </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 39-51, </pages> <month> May </month> <year> 1993. </year> <institution> Also University of Virginia, Char-lottesville, VA, </institution> <note> Technical Report CS-92-32. </note>
Reference-contexts: None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: <ref> [89] </ref> [90] [91] [92] [93] [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel.
Reference: [90] <author> Andrew S. Grimshaw. </author> <title> The Mentat computation model - data-driven support for object-oriented parallel processing. </title> <type> Technical Report CS-93-30, </type> <institution> University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] <ref> [90] </ref> [91] [92] [93] [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel.
Reference: [91] <author> Andrew S. Grimshaw and V. E. Vivas. </author> <title> FALCON: A distributed scheduler for MIMD architectures. </title> <booktitle> In Proc. of the Symp. on Experiences with Distributed and Multiprocessor Systems, </booktitle> <pages> pages 149-163, </pages> <address> Atlanta, GA, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: The Mentat system analyzes the call graph and independently decides which member function calls can be executed concurrently. scheduling. The Mentat programming language comes together with the Mentat runtime system. An object is represented as a process. The paper <ref> [91] </ref> gives information about Mentat's scheduling algorithms. mapping. Generally Mentat automatically schedules objects for the application programmer. Though it is possible for the application programmer to give location hints (optional parameter for object creation), this is generally not done. There is no migration of objects. synchronization. <p> None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] [90] <ref> [91] </ref> [92] [93] [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel.
Reference: [92] <author> Andrew S. Grimshaw, Jon B. Weissan, and W. Timothy Strayer. </author> <title> Portable run-time support for dynamic object-oriented parallel processing. </title> <type> Technical Report CS-93-40, </type> <institution> University of Virginia, Char-lottesville, VA, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] [90] [91] <ref> [92] </ref> [93] [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel. That keyword indicates that an object is handled by a different processor.
Reference: [93] <author> Andrew S. Grimshaw, Jon B. Weissman, Emily A. West, and Ed C. Loyot, Jr. Metasystems: </author> <title> An approach combining parallel processing and heterogeneous distributed computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 257-270, </pages> <month> June </month> <year> 1994. </year> <institution> Also University of Virginia, Char-lottesville, VA, </institution> <note> Technical Report CS-92-43. </note>
Reference-contexts: None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] [90] [91] [92] <ref> [93] </ref> [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel. That keyword indicates that an object is handled by a different processor.
Reference: [94] <author> Mentat Research Group. </author> <title> Mentat 2.5 programming language reference manual. </title> <type> Technical report, </type> <institution> University of Virginia, </institution> <address> Charlottesville, VA, </address> <year> 1995. </year>
Reference-contexts: None. Availability: Mentat has been implemented on networks of Sun3's, Sun4's, the IBM RS 6000, Silicon Graphics, and Gamma's. Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] [90] [91] [92] [93] <ref> [94] </ref> 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract [164] as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel. That keyword indicates that an object is handled by a different processor.
Reference: [95] <author> Object Management Group. </author> <title> The common object request broker: Architecture and specification. </title> <type> Technical report, OMG, </type> <month> December </month> <year> 1991. </year>
Reference-contexts: DCE++ [190] This is an extension of both the OSF Distributed Computing Environment and C++ that provides a uniform object model, location invariant invocation, remote reference parameter passing and dy namic object migration. Peace Could be relevant. This is an extension of C++. COBRA <ref> [95] </ref> This is the result of the standardization effort of the Object Management Group (OMG). COBRA, the Common Object Request Broker, aims at providing a global distributed and persistent object management framework. COBRA enables remote object invocations and offers a C++ language binding. There is no object migration in COBRA.
Reference: [96] <author> R. Guerraoui. </author> <title> Dealing with atomicity in object-based distributed systems. </title> <journal> OOPS Messenger, </journal> <volume> 3(3) </volume> <pages> 10-13, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: For this purpose the system keeps copies of earlier object states. The programmer can/must re-implement the control method to decide whether an operation of a subtask has succeeded/failed. fault tolerance. Atomicity of transactions. Availability: There exists an implementation on a single PE. References: <ref> [96] </ref> 2.62 LO Developer: European Computer-Industry Research Cen ter, Munich, Germany. Description: oo. Declarative state transitions. memory model. parallelism. The transition rules can split up into several successors, which can then be processed concurrently. A similar construct is available to combine those successors again. scheduling. mapping. synchronization. fault tolerance.
Reference: [97] <author> L. Gunaseelan and R. J. LeBland. </author> <title> Distributed Eif-fel: A language for programming multi-granular distributed objects. </title> <booktitle> In Proc. of the 4th Int. Conf. on Computer Languages (IEEE), </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: In addition, there are semaphores and locks to allow for the implementation of very fine grain concurrency control. fault tolerance. Persistent objects. Availability: Distributed Eiffel is translated to Eiffel augmented with calls to the Clouds operating system. It is unclear whether the system is still available. References: <ref> [97] </ref> 2.39 Distributed Smalltalk Object Developer: Description: oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. proxies are used to transparently access objects that are stored on remote node.
Reference: [98] <author> Daniel Hagimont, P.-Y. Chevalier, A. Freyssinet, S. Krakowiak, S. Lacourte, J. Mossiere, and X. Rous-set de Pina. </author> <title> Persistent shared object support in the Guide system: Evaluation & related work. </title> <booktitle> In Proc. of OOPSLA'94, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 129-144, </pages> <address> Portland, OR, </address> <month> October 23-27, </month> <year> 1994. </year>
Reference-contexts: Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: [64] [78] <ref> [98] </ref> [133] [134] [182] 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine.
Reference: [99] <author> F. Hamelin, J.-M. Jezequel, and T. Priol. </author> <title> A multi-paradigm object oriented parallel environment. </title> <editor> In H. J. Siegel, editor, </editor> <booktitle> Proc. of the 8th Int. Parallel Processing Symp. </booktitle> <address> IPPS'94, Cancun, Mexico, April 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: None. Availability: An EPEE prototype is running on Intel iPSC/2 and iPSC/860 and for a network of workstations above TCP/IP. However, the software is not (yet) available. Email address: Jean-Marc Jezequel ! jezequel@irisa.fr References: <ref> [99] </ref> [116] [117] [118] 2.50 ES-Kit Software Developer: Microelectronics and Computer Technology Corporation (MCC) Description: oo. Extension of C++. New construct "wrapper". Inheritance, but not multiple inheritance. memory model. The focus of ES-Kit is to make a remote procedure call transparently available in the context of C++.
Reference: [100] <author> C. L. Hartley and V. S. Sunderam. </author> <title> Concurrent programming with shared objects in networked environments. </title> <booktitle> In Proc. of the 7th Int. Parallel Processing Symp., </booktitle> <pages> pages 471-478, </pages> <address> Los Angeles, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Member functions can only be invoked on un locked shared data objects. fault tolerance. None. Availability: The system is in beta test. Some Docu mentation is available via anonymous ftp from ftp://mathcs.emory.edu/pub/vss Email addresses: Contact V. S. Sunderam ! vss@mathcs.emory.edu Charles Hartley ! skip@mathcs.emory.edu References: <ref> [100] </ref> 2.42 DOWL, distributed Trellis/Owl Developer: University of Karlsruhe, Germany Description: Extension of Trellis/Owl (see section 2.96). oo. Extension of Trellis/Owl (see section 2.96) for distribution. Transparent operation invocation on remote objects. memory model. Distributed address space. Automatically generated local proxies represent objects.
Reference: [101] <author> Ernst A. Heinz. </author> <title> Modula-3*: An efficiently compilable extension of Modula-3 for explicitly parallel problem-oriented programming. </title> <booktitle> In Joint Symp. on Parallel Processing, </booktitle> <pages> pages 269-276, </pages> <institution> Waseda University, </institution> <address> Tokyo, </address> <month> May 17-19, </month> <year> 1993. </year>
Reference-contexts: Other than that there are no synchronization mecha nisms. fault tolerance. Availability: The Modula-3* system is currently under construction and not yet available. Email address: Ernst A. Heinz ! heinze@ira.uka.de References: <ref> [101] </ref> 2.70 MPC++ Developer: Tsukuba Research Center, Real World Com puting Partnership, Japan Description: oo. Extension of C++. New is that functions can be called asynchronously. Furthermore, there are tokens and message entry points. memory model. There is an address space per object.
Reference: [102] <author> Heinz-Peter Heinzle, Henri E. Bal, and Koen Lan-gendoen. </author> <title> Implementing object-based distributed shared memory on Transputers. </title> <editor> In A. De Gloria, M. R. Jand, and D. Marini, editors, </editor> <booktitle> Transputer Applications and Systems '94. </booktitle> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference-contexts: Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: [22] [23] [25] [24] <ref> [102] </ref> [201] 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [103] <author> Martin Henz. </author> <title> The Oz notation. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for Artificial Intelligence, Saarbrucken, Germany, </institution> <year> 1994. </year> <month> 45 </month>
Reference-contexts: Based on Monitor concept, i.e., one method at a time. Perdio proposes transparent automatic distribution of objects. Availability: Oz is available for many platforms running Unix-X, including Sparcs and 486 PCs. More information can be retrieved from ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz Email addresses: group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de References: <ref> [103] </ref> [195] [196] [197] 2.76 Panda Developer: University of Kaiserslautern, Germany Description: oo. Panda is a run-time package based on a very small operating system kernel which supports distributed applications written in C++. memory model.
Reference: [104] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt <ref> [104] </ref> and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper [175] give an first classification of concurrent object-oriented languages. <p> Availability: At the moment, the language is only im plemented on a uniprocessor. Email address: Dietrich Boles ! boles@informatik.uni-oldenburg.de References: [33] 2.88 Rosette Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Rosette is based on the Actor model <ref> [104, 4, 5] </ref>. It incorporates multiple inheritance and reflection. Messages that cannot be processed by an actor are passed on to its "father". memory model. As introduced in the Actor model.
Reference: [105] <author> B. Hindel. </author> <title> An object-oriented programming language for distributed systems: </title> <booktitle> HERAKLIT. In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 114-116, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Availability: Heraklit is no longer under development. Some documentation and a Sun Sparc (SunOS 4.1) implementation can be found on http://www2.informatik.uni-erlangen.de/IMMD-II/Research/Projects/HERAKLIT Email address: Peter Arius ! arius@informatik.uni-erlangen.de Wolfgang Betz ! betz@informatik.uni-erlangen.de References: <ref> [105] </ref> 2.58 HoME Developer: Description: oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: The multi-processor used is the shared-memory multiprocessor OMRON LUNA 88K on which the Mach operating system runs.
Reference: [106] <author> W. Horwat, A. A. Chien, and W. J. Dally. </author> <title> Experience with CST: </title> <booktitle> programming and implementation. In Proc. of the ACM SIGPLAN '89 Conf. on Programming Language Design and Implementation PLDI, </booktitle> <pages> pages 101-109, </pages> <address> Portland, OR, </address> <month> June 21-23, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices 24(7). </journal>
Reference-contexts: There are special addressing mechanisms for communication inside of a group. fault tolerance. Availability: A simple programming environment has been implemented on a Symbolics 3600 system. A back-end is MIT's J-machine, a message driven parallel architecture. Email addresses: William Dally ! dally@ai.mit.edu Andrew Chien ! achien@cs.uiuc.edu References: [75] <ref> [106] </ref> 2.36 Demeter Developer: Description: oo. memory model. parallelism. Thread library. scheduling. mapping. synchronization. Synchronization patterns can be specified separate from the any classes. Then the class code is fitted in and the final code is generated.
Reference: [107] <author> Kaoru Hosokawa and Hiroaki Nakamura. </author> <title> Concurrent programming in COB. </title> <editor> In A. Yonezawa and T. Ito, editors, </editor> <booktitle> Proc. of the Japan/UK Workshop on Concurrency: Theory, Language and Architecture, </booktitle> <pages> pages 142-156, </pages> <address> Oxford, UK, September 25-27. 1989. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Nothing is published about scheduling. mapping. Nothing is published about object and process placement, alignment, scheduling. fault tolerance. Availability: Concurrent COB has been implemented on a PS/2 system and shared-memory multiprocessor workstation called TOP-1, which has been developed at the same laboratory. References: <ref> [107] </ref> 2.26 Compositional C++, CC++ Developer: California Institute of Technology, Pasadena Description: oo. Extension of C++. Six new keywords. memory model. C++ memory model for each processor object (definition see below). Multiple processor objects have a common name space of ids of processor objects.
Reference: [108] <author> Chris Houck and Gul Agha. HAL: </author> <title> A high-level Actor language and its distributed implementation. </title> <booktitle> In 21st Int. Conf. on Parallel Processing, ICPP '92, </booktitle> <volume> volume II, </volume> <pages> pages 158-165, </pages> <address> St. Charles, IL, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The software and some documentation is available via anonymous ftp from ftp://biobio.cs.uiuc.edu/pub/Hal Email addresses: Chris Houck ! chouck@ncsa.uiuc.edu Wooyoung Kim ! wooyoung@cs.uiuc.edu Gul Agha ! agha@cs.uiuc.edu References: <ref> [108] </ref> [132] 2.56 Harmony Developer: Laboratory for Intelligent Systems, Ottawa, Canada/ Description: oo. Class based operating system (no inheritance). Library/OS Kernel approach. memory model. Shared. parallelism. Active task object. The programmer provides a function which is to be executed concurrently as an argument when creating the task object.
Reference: [109] <author> High Performance Fortran (HPF): </author> <title> Language specification. </title> <type> Technical report, </type> <institution> Center for Research on Parallel Computation, Rice University, </institution> <year> 1992. </year> <note> Available from titan.cs.rice.edu by anonymous ftp. </note>
Reference-contexts: It is possible to declare addressing functions that give access to neighboring instances when called from an instance of the bulk. Above that, the programmer can specify how bulks are to be aligned with respect to each other. The notation borrows heavily from C* [204], Fortran D [83], HPF <ref> [109] </ref> and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. However, the parallel activities exist only from the call of the parallel function to its termination on all instances. fault tolerance. None. <p> Same as C++. Elements can access other elements of the same aggregate, but may see outdated data. The programmer has to do necessary synchronization. parallelism. By invoking functions on all instances of an aggregate at once. Above that, pC++ offers the triple notation of HPF <ref> [109] </ref> [start-index, stop-index, stride] to start member function on a specific subset of the aggregate. scheduling. Scheduling is not an issue. <p> Then he can align his aggregates relative to this template. Hence, the programmer must try to achieve data locality of elements of collections that are used together. The notation borrows heavily from C* [204], Fortran D [83], HPF <ref> [109] </ref> and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. However, the parallel activities exist only from the call of the parallel function to its termination on all instances.
Reference: [110] <author> Jin H. Hur and Kilnam Chon. </author> <title> Overview of a parallel object-oriented language CLIX. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 265-273, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Communicating process model. asynchronous method call (default), specified at callee (send command). synchronous call is available (ask command). explicit reply-to statement. Post-processing is possible. scheduling. Nothing. mapping. Nothing. 10 synchronization. One activity at a time. Select statement. condition attached to method decla ration, delay fault tolerance. Availability: References: <ref> [110] </ref> 2.25 COB Developer: IBM Research Tokyo. Description: oo. C based. multiple inheritance. separation of interface and implementation. process and class are not compatible for inheritance. synchronization. Differentiate between active and passive processes. Active processes: communication with Ada-like rendezvous, select statement. Passive processes: like Monitor, one-thread-at-a-time.
Reference: [111] <author> Norman C. Hutchinson, Rajeandra K. Raj, An-drew P. Black, Henry M. Levy, and Eric Jul. </author> <title> The Emerald programing lanuage report. </title> <type> Technical Report 87-10-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: Most of the recent work has been done at DIKU at the University of Copenhagen, Denmark. There (and in Cracow, Poland) Emerald is used in teaching of 250 undergraduate students. Email address: Eric Jul ! eric@diku.dk References: <ref> [111] </ref> [119] [120] 2.49 EPEE, Eiffel Parallel Execution En vironment Developer: IRISA, France Description: oo. EPEE is a extension of Eiffel for data-parallel programming. The approach is based on the idea of Concurrent Aggregates as described on page 12.
Reference: [112] <author> Yutaka Ishikawa. </author> <title> The MPC++ programming language v1.0 specification with commentary. </title> <type> Technical Report TR-94014, </type> <institution> Tsukuba Research Center, Real World Computing Partnership, </institution> <address> Japan, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The testbed machine will be operational next year. The RWC1 machine consisting of 1,204 PE's will be installed around 1996-1997. MPC++ will be implemented on a CM-5 and an Intel Paragon. Further information can be found http://www.rwcp.or.jp Email address: Yutaka Ishikawa ! ishikawa@rwcp.or.jp References: <ref> [112] </ref> [113] 30 2.71 Multiprocessor Smalltalk Developer: Description: oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: Multiprocessor Smalltalk is implemented on the FireFly multiprocessor [203].
Reference: [113] <author> Yutaka Ishikawa, Atsushi Hori, Hiroki Konaka, Munenori Maeda, and Takashi Tomokiyo. MPC++: </author> <title> A parallel programming language and its parallel objects support. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages j1-j5, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: The testbed machine will be operational next year. The RWC1 machine consisting of 1,204 PE's will be installed around 1996-1997. MPC++ will be implemented on a CM-5 and an Intel Paragon. Further information can be found http://www.rwcp.or.jp Email address: Yutaka Ishikawa ! ishikawa@rwcp.or.jp References: [112] <ref> [113] </ref> 30 2.71 Multiprocessor Smalltalk Developer: Description: oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: Multiprocessor Smalltalk is implemented on the FireFly multiprocessor [203].
Reference: [114] <institution> Isis Distributed Systems, Inc., </institution> <address> Marlboro, MA. RDO/C++ Tutorial, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: COBRA, the Common Object Request Broker, aims at providing a global distributed and persistent object management framework. COBRA enables remote object invocations and offers a C++ language binding. There is no object migration in COBRA. RDO/C++ <ref> [114, 115] </ref> RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221].
Reference: [115] <institution> Isis Distributed Systems, Inc., </institution> <address> Marlboro, MA. </address> <note> RDO/C++ Users Guide, </note> <month> April </month> <year> 1994. </year>
Reference-contexts: COBRA, the Common Object Request Broker, aims at providing a global distributed and persistent object management framework. COBRA enables remote object invocations and offers a C++ language binding. There is no object migration in COBRA. RDO/C++ <ref> [114, 115] </ref> RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221].
Reference: [116] <author> J.-M. Jezequel. EPEE: </author> <title> an Eiffel environment to program distributed memory parallel computers. </title> <booktitle> In Proc. of ECOOP'92 - European Conf. on Object-Oriented Programming, number 615 in Lecture Notes in Computer Science, </booktitle> <pages> pages 197-212, </pages> <address> Utrecht, The Netherlands, June 29 - July 3, 1992. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: None. Availability: An EPEE prototype is running on Intel iPSC/2 and iPSC/860 and for a network of workstations above TCP/IP. However, the software is not (yet) available. Email address: Jean-Marc Jezequel ! jezequel@irisa.fr References: [99] <ref> [116] </ref> [117] [118] 2.50 ES-Kit Software Developer: Microelectronics and Computer Technology Corporation (MCC) Description: oo. Extension of C++. New construct "wrapper". Inheritance, but not multiple inheritance. memory model. The focus of ES-Kit is to make a remote procedure call transparently available in the context of C++.
Reference: [117] <author> J.-M. Jezequel. EPEE: </author> <title> an Eiffel environment to program distributed memory parallel computers. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 6(2) </volume> <pages> 48-54, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: None. Availability: An EPEE prototype is running on Intel iPSC/2 and iPSC/860 and for a network of workstations above TCP/IP. However, the software is not (yet) available. Email address: Jean-Marc Jezequel ! jezequel@irisa.fr References: [99] [116] <ref> [117] </ref> [118] 2.50 ES-Kit Software Developer: Microelectronics and Computer Technology Corporation (MCC) Description: oo. Extension of C++. New construct "wrapper". Inheritance, but not multiple inheritance. memory model. The focus of ES-Kit is to make a remote procedure call transparently available in the context of C++.
Reference: [118] <author> J.-M. Jezequel. </author> <title> Transparent parallelisation through reuse: between a compiler and a library approach. </title> <booktitle> In Proc. of ECOOP'93 7th European Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 384-405, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: None. Availability: An EPEE prototype is running on Intel iPSC/2 and iPSC/860 and for a network of workstations above TCP/IP. However, the software is not (yet) available. Email address: Jean-Marc Jezequel ! jezequel@irisa.fr References: [99] [116] [117] <ref> [118] </ref> 2.50 ES-Kit Software Developer: Microelectronics and Computer Technology Corporation (MCC) Description: oo. Extension of C++. New construct "wrapper". Inheritance, but not multiple inheritance. memory model. The focus of ES-Kit is to make a remote procedure call transparently available in the context of C++.
Reference: [119] <author> Eric Jul. </author> <title> Migration of light-weight processes in Emerald. </title> <journal> IEEE Operating Sys. Technical Committee Newsletter, Special Issue on Process Migration, </journal> <volume> 3(1) </volume> <pages> 25-30, </pages> <year> 1989. </year>
Reference-contexts: Most of the recent work has been done at DIKU at the University of Copenhagen, Denmark. There (and in Cracow, Poland) Emerald is used in teaching of 250 undergraduate students. Email address: Eric Jul ! eric@diku.dk References: [111] <ref> [119] </ref> [120] 2.49 EPEE, Eiffel Parallel Execution En vironment Developer: IRISA, France Description: oo. EPEE is a extension of Eiffel for data-parallel programming. The approach is based on the idea of Concurrent Aggregates as described on page 12.
Reference: [120] <author> Eric Jul, Henry Levy, Norman Hutchinson, and An-drew Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Most of the recent work has been done at DIKU at the University of Copenhagen, Denmark. There (and in Cracow, Poland) Emerald is used in teaching of 250 undergraduate students. Email address: Eric Jul ! eric@diku.dk References: [111] [119] <ref> [120] </ref> 2.49 EPEE, Eiffel Parallel Execution En vironment Developer: IRISA, France Description: oo. EPEE is a extension of Eiffel for data-parallel programming. The approach is based on the idea of Concurrent Aggregates as described on page 12. EPEE provides distributed classes, elements of that class are spread across the machines.
Reference: [121] <author> Dennis Kafura. </author> <title> Concurrent object-oriented real-time systems research. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 203-205, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: <ref> [121] </ref> [122] [123] [124] [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. Actor language. Post processing (early become), delegation. Methods can only be called asynchronously. First class futures are used to handle return values. scheduling. mapping. Not an issue. synchronization. One method at a time.
Reference: [122] <author> Dennis Kafura and Greg Lavender. </author> <title> Recent progress in combining Actor based concurrency with object-oriented programming. </title> <booktitle> In Proc. of ECOOP OOP-SLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 55-58, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] <ref> [122] </ref> [123] [124] [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. Actor language. Post processing (early become), delegation. Methods can only be called asynchronously. First class futures are used to handle return values. scheduling. mapping. Not an issue. synchronization. One method at a time.
Reference: [123] <author> Dennis Kafura and K. H. Lee. </author> <title> ACT++: Building a concurrent C++ with Actors. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 3(1) </volume> <pages> 25-37, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] [122] <ref> [123] </ref> [124] [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. Actor language. Post processing (early become), delegation. Methods can only be called asynchronously. First class futures are used to handle return values. scheduling. mapping. Not an issue. synchronization. One method at a time.
Reference: [124] <author> Dennis Kafura, Manibrata Mukherji, and Greg Lavender. </author> <title> ACT++ 2.0: A class library for concurrent programming in C++ using Actors. </title> <journal> Journal of 46 Object Oriented Programming, </journal> <volume> 6(6) </volume> <pages> 47-55, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] [122] [123] <ref> [124] </ref> [125] 2.7 Act1 Developer: Description: oo. memory model. parallelism. Actor language. Post processing (early become), delegation. Methods can only be called asynchronously. First class futures are used to handle return values. scheduling. mapping. Not an issue. synchronization. One method at a time.
Reference: [125] <author> Dennis G. Kafura and Keung Hae Lee. </author> <title> Inheritance in Actor based concurrent object-oriented languages. </title> <booktitle> In ECOOP'89 - European Conf. on Object-Oriented Programming, </booktitle> <pages> pages 131-145. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: A port for single Sun3 and Dec5000 is planned. Some papers and the software on ACT++ can be accessed by anonymous ftp from ftp://actor.cs.vt.edu/pub Email address: Dennis Kafura ! kafura@cs.vt.edu References: [121] [122] [123] [124] <ref> [125] </ref> 2.7 Act1 Developer: Description: oo. memory model. parallelism. Actor language. Post processing (early become), delegation. Methods can only be called asynchronously. First class futures are used to handle return values. scheduling. mapping. Not an issue. synchronization. One method at a time.
Reference: [126] <author> Gail E. Kaiser, Wenwey Hseush, James C. Lee, Shy-htsun F. Wu, Esther Woo, Eric Hilsdale, and Scott Meyer. MeldC: </author> <title> A reflective object-oriented coordination language. </title> <type> Technical Report CUCS-001-93, </type> <institution> Dept. of Computer Science, Columbia University, </institution> <address> New York, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Depending on compiler flags, a MeldC program is compiled into a set of Unix programs or into one Unis program that uses a thread package to simulate concurrency. Email addresses: group ! MeldC@cs.columbia.edu Gail E. Kaiser ! kaiser@cs.columbia.edu References: <ref> [126] </ref> [127] [178] 2.66 Mentat Developer: University of Virginia Description: oo. Extension of C++. The keyword mentat in the class definition specifies that objects of this class are used in parallel. memory model. Each mentat object possesses a unique name, an address space, and a single thread of control.
Reference: [127] <author> Gail E. Kaiser, Wenwey Hseush, Steven S. Popovich, and Shyhtsun F. Wu. </author> <title> Multiple concurrency control policies in an object-oriented programming system. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 195-210. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1993. </year>
Reference-contexts: Depending on compiler flags, a MeldC program is compiled into a set of Unix programs or into one Unis program that uses a thread package to simulate concurrency. Email addresses: group ! MeldC@cs.columbia.edu Gail E. Kaiser ! kaiser@cs.columbia.edu References: [126] <ref> [127] </ref> [178] 2.66 Mentat Developer: University of Virginia Description: oo. Extension of C++. The keyword mentat in the class definition specifies that objects of this class are used in parallel. memory model. Each mentat object possesses a unique name, an address space, and a single thread of control.
Reference: [128] <author> Laxmikant V. Kale and San-jeev Krishnan. Charm++: </author> <title> A portable concurrent object oriented system based on C++. </title> <booktitle> In Proc. of OOPSLA'93, 8th Annual Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 91-109, </pages> <address> Washington D.C., </address> <month> 26 September - 1 October, </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices 28(10). </journal>
Reference-contexts: It is being ported to the CM-5, Parsytec GCel and Alliant FX/280 and T3D. Information about Charm++ is available from: http://charm.cs.uiuc.edu ftp://a.cs.uiuc.edu/pub/CK Email address: Laxmikant V. Kale ! kale@cs.uiuc.edu Sanjeev Krishnan ! sanjeev@cs.uiuc.edu References: <ref> [128] </ref> 2.24 CLIX Developer: Korea Advanced Institute of Science and Technology Description: oo. inheritance by delegation memory model. system wide unique object-id parallelism. Communicating process model. asynchronous method call (default), specified at callee (send command). synchronous call is available (ask command). explicit reply-to statement. Post-processing is possible. scheduling. Nothing. mapping.
Reference: [129] <author> Vijay Karamcheti and Andrew Chien. </author> <title> Concert efficient runtime support for concurrent object-oriented programming languages on stock hardware. </title> <booktitle> In Proc. of ACM Supercomputing'93, </booktitle> <pages> pages 598-607, </pages> <address> Port-land, Oregon, </address> <month> November 15-19, </month> <year> 1993. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] [68] [69] [70] [71] <ref> [129] </ref> [177] 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [130] <author> Murat Karaorman and John Bruno. </author> <title> Design and implementation issues for object-oriented concur-rency. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages m1-m9, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno <ref> [130] </ref> elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper [175] give an first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. <p> None. Availability: The library is implemented using version 2.3 Eiffel running on Sun's Unix based Sun OS 3.0. However, the software is not maintained anymore. Email addresses: Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu References: <ref> [130] </ref> [131] 2.28 Concurrent Aggregates, CA Developer: University of Illinois, Urbana-Champaign. Concurrent Aggregates is part of the Concert project. Description: oo. Extension of the Actor model [4, 5] for massively parallel programming.
Reference: [131] <author> Murat Karaorman and John Bruno. </author> <title> Introduction of concurrency to a sequential language. </title> <journal> Communications of the ACM, </journal> <volume> 37(9) </volume> <pages> 103-116, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: None. Availability: The library is implemented using version 2.3 Eiffel running on Sun's Unix based Sun OS 3.0. However, the software is not maintained anymore. Email addresses: Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu References: [130] <ref> [131] </ref> 2.28 Concurrent Aggregates, CA Developer: University of Illinois, Urbana-Champaign. Concurrent Aggregates is part of the Concert project. Description: oo. Extension of the Actor model [4, 5] for massively parallel programming.
Reference: [132] <author> WooYoung Kim and Gul Agha. </author> <title> Compilation of a highly parallel Actor-based language. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 1-12, </pages> <address> New Haven, Con-necticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: The software and some documentation is available via anonymous ftp from ftp://biobio.cs.uiuc.edu/pub/Hal Email addresses: Chris Houck ! chouck@ncsa.uiuc.edu Wooyoung Kim ! wooyoung@cs.uiuc.edu Gul Agha ! agha@cs.uiuc.edu References: [108] <ref> [132] </ref> 2.56 Harmony Developer: Laboratory for Intelligent Systems, Ottawa, Canada/ Description: oo. Class based operating system (no inheritance). Library/OS Kernel approach. memory model. Shared. parallelism. Active task object. The programmer provides a function which is to be executed concurrently as an argument when creating the task object.
Reference: [133] <author> S. Krakowiak, M. Meysembourg, H. Nguyen Van, M. Riveill, C. Roisin, and X. Rousset de Pina. </author> <title> Design and implementation of an object-oriented, strongly typed language for distributed applications. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 3(3) </volume> <pages> 11-22, </pages> <month> September/October </month> <year> 1990. </year>
Reference-contexts: Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: [64] [78] [98] <ref> [133] </ref> [134] [182] 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine.
Reference: [134] <author> Serge Lacourte. </author> <title> Exceptions in Guide, an object-oriented language for distributed applications. </title> <booktitle> In Proc. of ECOOP'91 - European Conf. on Object-Oriented Programming, number 512 in Lecture Notes in Computer Science, </booktitle> <pages> pages 268-287, </pages> <address> Geneva, Switzerland, July 15-19, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: [64] [78] [98] [133] <ref> [134] </ref> [182] 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine. Placement of objects automatic. 24 synchronization.
Reference: [135] <author> Chris Laffra and Jan van den Bos. </author> <title> Constraints in concurrent object-oriented environments. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 64-67, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Per object one action can be performed at a time. 35 fault tolerance. None. Availability: After completing the thesis work, Procol has ceased to exist. The University of Leiden, The Netherlands, can be reached under: http://www.leidenuniv.nl References: [35] <ref> [135] </ref> [136] 2.84 Proof Developer: University of Florida, Gainesville. Description: oo. Inheritance and other oo features. Separation of class interface and class implementation. memory model. parallelism. Autonomous routines. cobegin. scheduling. mapping. Automatic object clustering. synchronization. Synchronization with guards per method.
Reference: [136] <author> Chris Laffra and Jan van den Bos. </author> <title> Propagators and concurrent constraints. </title> <booktitle> In Proc. of ECOOP OOP-SLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 68-72, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Per object one action can be performed at a time. 35 fault tolerance. None. Availability: After completing the thesis work, Procol has ceased to exist. The University of Leiden, The Netherlands, can be reached under: http://www.leidenuniv.nl References: [35] [135] <ref> [136] </ref> 2.84 Proof Developer: University of Florida, Gainesville. Description: oo. Inheritance and other oo features. Separation of class interface and class implementation. memory model. parallelism. Autonomous routines. cobegin. scheduling. mapping. Automatic object clustering. synchronization. Synchronization with guards per method.
Reference: [137] <author> J. Larus. </author> <title> C**: A large-grain object-oriented, data-parallel programming language. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 326-341, </pages> <address> New Haven, Con-necticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: None. Availability: The current compiler produces code for a sequential DEC workstation and for a Sequent Symmetry shared memory computer. C** is not yet avail able, but a release is expected soon. Email address: James R. Larus ! larus@cs.wisc.edu References: <ref> [137] </ref> [138] [139] 2.20 Cantor Developer: Description: 8 oo. memory model. single processor shared memory. parallelism. Actor language. Asynchronous message passing only. If a result has to be passed back to the caller of a method, an explicit message has to be sent. Post-processing (early be come). scheduling. mapping.
Reference: [138] <author> James R. Larus, Brad Richards, and Guhan Viswanathan. </author> <title> C**: A large-grain object-oriented, data-parallel programming language. </title> <type> Technical Report UWTR-1126, </type> <institution> Computer Science Department, University of Wisconsin, Madison, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: None. Availability: The current compiler produces code for a sequential DEC workstation and for a Sequent Symmetry shared memory computer. C** is not yet avail able, but a release is expected soon. Email address: James R. Larus ! larus@cs.wisc.edu References: [137] <ref> [138] </ref> [139] 2.20 Cantor Developer: Description: 8 oo. memory model. single processor shared memory. parallelism. Actor language. Asynchronous message passing only. If a result has to be passed back to the caller of a method, an explicit message has to be sent. Post-processing (early be come). scheduling. mapping.
Reference: [139] <author> James R. Larus, Brad Richards, and Guhan Viswanathan. </author> <title> LCM: Memory system support for parallel language implementation. </title> <booktitle> In Proc. of the 6th Int. Conf. on Architectural Support for Programming Languages and Operating Systems, AS-PLOS'94, </booktitle> <pages> pages 208-218, </pages> <month> October 4-7, </month> <year> 1994. </year> <note> Also available as Computer Science Department, </note> <institution> University of Wisconsin, Madison, </institution> <note> Technical Report TR1237. </note>
Reference-contexts: None. Availability: The current compiler produces code for a sequential DEC workstation and for a Sequent Symmetry shared memory computer. C** is not yet avail able, but a release is expected soon. Email address: James R. Larus ! larus@cs.wisc.edu References: [137] [138] <ref> [139] </ref> 2.20 Cantor Developer: Description: 8 oo. memory model. single processor shared memory. parallelism. Actor language. Asynchronous message passing only. If a result has to be passed back to the caller of a method, an explicit message has to be sent. Post-processing (early be come). scheduling. mapping.
Reference: [140] <author> Rodger Lea, Christian Jacquemot, and Eric Pillevesse. </author> <title> COOL: System support for distributed programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 37-46, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Persistent objects. Availability: The only implementation reported so far runs on Intel 80386 based machines runing a Chrous UNIX clone. ftp://ftp.chorus.fr/pub news:comp.os.chorus Email addresses: group ! info@chorus.com Rodger Lea ! rjl@hplb.hpl.hp.com Christian Jacquemot ! chris@chorus.fr Eric Pillevesse ! pillevesse@sept.fr References: [6] <ref> [140] </ref> [141] 2.32 COOL (NTT), ACOOL Since the are some collisions in language name space, the authors consider to rename their language to ACOOL. Developer: NTT communication switching laboratories, Japan Description: oo. The language offers active and passive objects which can be declared using single inheritance.
Reference: [141] <author> Rodger Lea and James Weightman. </author> <title> Supporting object oriented languages in an distributed environment: The COOL approach. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS USA'91, </booktitle> <address> Santa Barbara, </address> <month> August 3-6, </month> <title> 1991. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address> <month> 47 </month>
Reference-contexts: Persistent objects. Availability: The only implementation reported so far runs on Intel 80386 based machines runing a Chrous UNIX clone. ftp://ftp.chorus.fr/pub news:comp.os.chorus Email addresses: group ! info@chorus.com Rodger Lea ! rjl@hplb.hpl.hp.com Christian Jacquemot ! chris@chorus.fr Eric Pillevesse ! pillevesse@sept.fr References: [6] [140] <ref> [141] </ref> 2.32 COOL (NTT), ACOOL Since the are some collisions in language name space, the authors consider to rename their language to ACOOL. Developer: NTT communication switching laboratories, Japan Description: oo. The language offers active and passive objects which can be declared using single inheritance. Active objects have a thread.
Reference: [142] <author> Jeng Kuen Lee and Yunn-Yen Chen. </author> <title> Compiler and library support for aggregate object communications on distributed memory machines. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages d1-d10, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: Availability: Multiprocessor Smalltalk is implemented on the FireFly multiprocessor [203]. References: [174] 2.72 NAM Developer: National Tsing-Hua University, Taiwan Description: The proposed language is very similar to pC++, which is described on page 33. Availability: The language has been implemented on a 32 node nCUBE2. References: <ref> [142] </ref> 2.73 Obliq Developer: Digital Equipment Corporation, Palo Alto Description: oo. Object based language, related to Modula3. There are no classes. Inheritance is implemented by object cloning, i.e., Obliq is a prototype-based language. (See [34] for the orig inal prototype based language proposal.) memory model. parallelism.
Reference: [143] <author> Jenq Kuen Lee and Dennis Gannon. </author> <title> Object oriented parallel programming experiments and results. </title> <booktitle> In Proc. of Supercomputing'91, </booktitle> <pages> pages 273-282, </pages> <address> Albu-querque, NM, </address> <month> November 18-22, </month> <year> 1991. </year>
Reference-contexts: A lot of papers, the program files, and additional information are available from http://www.extreme.indiana.edu/sage Email address: Dennis Gannon ! gannon@cs.indiana.edu References: [31] [32] <ref> [143] </ref> [84] [153] 2.78 Parallel Computing Action Developer: Rank Xerox France, University of Paris VI Description: oo. Extension of C++. Library. memory model. Hierarchical memory model. The programmer understands the difference between local objects and remote objects.
Reference: [144] <author> Y. S. Lee, J. H. Huang, and F. J. Wang. </author> <title> A distributed Smalltalk based on process-object model. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer Software and Applications Conf., </booktitle> <pages> pages 465-471, </pages> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: Locks for shared objects. Method can be set "serialized" (dynamically). Guards per method, but specified separately. fault tolerance. Availability: The implementation is based on the Smalltalk/V 286 system and runs on a network of IBM PC. References: <ref> [144] </ref> 2.41 DoPVM Developer: Emory University, Atlanta Description: oo. Extension of C++. The general idea is to have a collection of otherwise independent C++ programs work on shared objects. The programmer creates the parallelism by writing the appropriate number of programs.
Reference: [145] <author> Chu-Cheow Lim. </author> <title> A Parallel Object-Oriented System for Realizing Reusable and Efficient Data Abstractions. </title> <type> PhD thesis, </type> <institution> University of California at Berke-ley, </institution> <month> October </month> <year> 1993. </year> <note> Available as technical report ICSI TR-93-063. </note>
Reference-contexts: See Trellis/Owl (section 2.96). fault tolerance. Availability: DOWL is running on VAXen and DEC statations under Ultrix. Email address: Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de References: [1] [2] 2.43 dpSather Developer: CSIRO, Australia + Monash University, Australia Description: oo. The language dpSather is an extension of Sather 0.5 <ref> [167, 145] </ref>. The language has a bulk data type. When declaring objects of that type, a given number of instance is created. Functions can be declared to work on instances and can be called to work on the whole bulk. memory model. Same as Sather. parallelism.
Reference: [146] <author> Klaus-Peter Lohr. </author> <title> Concurrency annotations. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(10) </volume> <pages> 327-340, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: None. Availability: Since CEiffel is compiled to Eiffel there is some portability. On top of PVM, a distributed implementation, targeting a network of Sun worksta tions, is under way. Email address: Klaus-Peter Lohr ! lohr@inf.fu-berlin.de References: <ref> [146] </ref> [147] 2.22 CFM Developer: Keio University, Yokohama, Japan. Description: oo. memory model. parallelism. scheduling. mapping. Object allocation algorithm. Dynamic object grouping. Adaptive load balancing. Distance cost model and mass cost. Migration of objects.
Reference: [147] <author> Klaus-Peter Lohr. </author> <title> Concurrency annotations for reusable software. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 81-89, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: None. Availability: Since CEiffel is compiled to Eiffel there is some portability. On top of PVM, a distributed implementation, targeting a network of Sun worksta tions, is under way. Email address: Klaus-Peter Lohr ! lohr@inf.fu-berlin.de References: [146] <ref> [147] </ref> 2.22 CFM Developer: Keio University, Yokohama, Japan. Description: oo. memory model. parallelism. scheduling. mapping. Object allocation algorithm. Dynamic object grouping. Adaptive load balancing. Distance cost model and mass cost. Migration of objects.
Reference: [148] <author> Cristina Videira Lopes and Karl J. Lieberherr. </author> <title> Abstracting process-to-function relations in concurrent object-oriented applications. </title> <editor> In Mario Tokoro and Remo Pareschi, editors, </editor> <booktitle> Proc. of the 8th European Conf. on Object-Oriented Programming, ECOOP'94, number 821 in Lecture Notes in Computer Science, </booktitle> <pages> pages 81-99, </pages> <address> Bologne, Italy, July 4-8, 1994. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Availability: Concurrency is not directly introduced into the Demeter Tool/C++ which is distributed by anonymous ftp. However the code might be available upon request. http://www.ccs.neu.edu/home/lieber/demeter.html Email addresses: Karl Lieberherr ! lieber@ccs.neu.edu Cristina Lopes ! lopes@parc.xerox.com References: <ref> [148] </ref> 2.37 Distributed C++, DC++ Developer: University of Utah, Salt Lake City. Description: oo. This is an extension of C++. In addition to ordinary C++ classes, there are value classes and gateway classes.
Reference: [149] <author> S.A. MacKay, W.M. Gentleman, D.A. Stewart, and M. Wein. </author> <title> Harmony as an object-oriented operating system. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 209-211, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Shared. parallelism. Active task object. The programmer provides a function which is to be executed concurrently as an argument when creating the task object. Message passing. scheduling. mapping. Targeting shared memory machine, i.e., no distribution. synchronization. Synchronization primitives, e.g., semaphores and blocking receive. fault tolerance. Availability: References: <ref> [149] </ref> 2.57 Heraklit Developer: University of Erlangen-Nurnberg, Germany. Description: oo. Single inheritance. Method calls can be dele gated. memory model. parallelism. An object can have an algorithm whose execution is called the object activity. This activity is started by a synchronous or an asynchronous call.
Reference: [150] <author> Ole Lehrmann Madsen. </author> <title> Building abstractions for concurrent object-oriented programming. </title> <type> Technical report, </type> <institution> Computer Science Department, Aarhus University, Denmark, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Exceptions. Availability: The beta home page can be found on http://www.daimi.aaudk/ beta A wealth of information can be found in the newsgroup: news:comp.lang.beta A commercially available BETA system can be found under http://www.mjolner.dk Email address: information ! info@mjolner.dk References: [36] [151] <ref> [150] </ref> 2.17 Blaze 2 Developer: Purdue University, West Lafayette and ICASE, NASA Langeley Research Center. Description: oo. This is an object oriented extension of BLAZE, a parallel language for scientific programming. memory model. parallelism.
Reference: [151] <author> Ole Lehrmann Madsen, Birger Moller-Pedersen, and Kristen Mygaard. </author> <title> Object-Oriented Programming in the BETA Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1993. </year>
Reference-contexts: Exceptions. Availability: The beta home page can be found on http://www.daimi.aaudk/ beta A wealth of information can be found in the newsgroup: news:comp.lang.beta A commercially available BETA system can be found under http://www.mjolner.dk Email address: information ! info@mjolner.dk References: [36] <ref> [151] </ref> [150] 2.17 Blaze 2 Developer: Purdue University, West Lafayette and ICASE, NASA Langeley Research Center. Description: oo. This is an object oriented extension of BLAZE, a parallel language for scientific programming. memory model. parallelism.
Reference: [152] <author> Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro. </author> <title> Fragmented objects for distributed abstractions. </title> <editor> In T. L. Casavant and M. Singhal, editors, </editor> <booktitle> Readings in Distributed Computing Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Otherwise, the programmer must implement a synchronization himself. When synchronization of concurrently executing threads is needed, the programmer must imple ment that requirement himself. fault tolerance. Availability: FOG/C++ has been implemented on top of SOS, an object-oriented operating system [192]. Email address: Yvon Gourhand ! gourhant@corto.inria.fr References: [87] <ref> [152] </ref> 2.54 Guide Developer: University of Grenoble and Bull Research Center Description: oo. Separation of interface and implementation. In heritance. memory model. Objects are persistent and stored on secondary memory. When used, these objects are bound into the address space of a job. Concurrent jobs can bind the same object.
Reference: [153] <author> A. Malony, B. Mohr, P. Beckman, D. Gannon, S. Yang, and F. Bodin. </author> <title> Performance analysis of pC++: A portable data-parallel programming system for scalable parallel computers. </title> <editor> In H. J. Siegel, editor, </editor> <booktitle> Proc. of the 8th Int. Parallel Processing Symp. </booktitle> <address> IPPS'94, Cancun, Mexico, April 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A lot of papers, the program files, and additional information are available from http://www.extreme.indiana.edu/sage Email address: Dennis Gannon ! gannon@cs.indiana.edu References: [31] [32] [143] [84] <ref> [153] </ref> 2.78 Parallel Computing Action Developer: Rank Xerox France, University of Paris VI Description: oo. Extension of C++. Library. memory model. Hierarchical memory model. The programmer understands the difference between local objects and remote objects.
Reference: [154] <author> Carl Manning. </author> <title> A peek at Acore, an Actor core language. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 84-86, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Methods that have a return value can only be called syn chronously. scheduling. mapping. Locality is not an issue. synchronization. Default behavior is one-activity at a time. The programmer can specify methods to be unserialized methods, similar to ASK (see section 2.14). fault tolerance. Availability: References: <ref> [154] </ref> 2.6 ACT++ Developer: Virginia Tech Description: oo. C++ library; based on the Actor model [4, 5]. Compared to the Actor model there are some extensions.
Reference: [155] <author> Katsumi Maruyama and Nicolas Raguideau. </author> <title> Concurrent object-oriented language COOL. </title> <journal> ACM SIG-PLAN Notices, </journal> <volume> 29(9) </volume> <pages> 105-114, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: None. Availability: This language has been developed by NTT communication switching laboratories. It is running on single SparcStations. The compiler is available via anonymous ftp from ftp://ftp.ntt.jp/pub/lang Email address: Katsumi Maruyama ! maruyama@nttmfs.ntt.jp References: <ref> [155] </ref> 2.33 COOL (Stanford) Developer: Stanford University Description: oo. Extension of C++. memory model. The language is implemented on shared-memory machines. A common address space is the conceptual basis. parallelism. Functions can be declared to be parallel.
Reference: [156] <author> Hidehiko Masuhara, Satoshi Matsuoka, Takuo Watanabe, and Akinori Yonezawa. </author> <title> Object-oriented concurrent reflective languages can be implemented efficiently. </title> <booktitle> In Proc. of OOPSLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> Vacnouver, Canada, </address> <month> October 18-22, </month> <year> 1992. </year> <journal> ACM SIGPLAN Notices 27(10). </journal>
Reference-contexts: Availability: The Yonezawa Lab WWW Server can be reached under and the ABCL/R2 software can be retrieved from: http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp The predecessor ABCL/R is still available from ftp, however, it is neither supported nor recommended to use. Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: <ref> [156] </ref> [224] 2.4 ABCL/R3 Developer: University of Tokyo, Japan Description: oo. ABCL/R3 is an extension of ABCL/R2. The main idea is to make per physical processor node objects and scheduler objects visible as meta objects, which are accessible from each object that resides on the same node. memory model.
Reference: [157] <author> Hidehiko Masuhara, Satoshi Matsuoka, and Aki-nori Yonezawa. </author> <title> An object-oriented concurrent reflective language for dynamic resource management in highly parallel computing. </title> <booktitle> In IPSJ SIG Notes, volume 94-PRG-18, </booktitle> <pages> pages 57-64, </pages> <year> 1994. </year>
Reference-contexts: The programmer might implement different schemes. synchronization. Availability: A prototype implementation of ABCL/R3 is under construction and not yet available. The Yonezawa Lab WWW Server can be reached at: http://web.yl.is.s.u-tokyo.ac.jp Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: <ref> [157] </ref> 2.5 Acore Developer: MIT AI Lab. Description: oo. memory model. parallelism. Actor language. Asynchronous call of method without return value. Methods that have a return value can only be called syn chronously. scheduling. mapping. Locality is not an issue. synchronization. Default behavior is one-activity at a time.
Reference: [158] <author> Jeff McAffer and John Duimovich. </author> <title> Actra an industrial strength concurrent object oriented programming system. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 82-84, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: In contrast to the Actor model, there is no asynchronous message passing. scheduling. mapping. Not an issue. synchronization. After a become the state of an Actor can no longer be changed. Synchronization by synchronous communication. Only one method can be active at a time. fault tolerance. Availability: References: <ref> [158] </ref> [205] 2.11 Amber Developer: University of Washington, Seattle Description: oo. Subset of C++ with primitives to manage con-currency and distribution. In Amber there is a collection of mobile objects distributed among nodes in a homogeneous network. These objects interact through location independent invocation.
Reference: [159] <author> Paul L. McCullough. </author> <title> Transparent forwarding: First steps. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 331-341, </pages> <address> Orlando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: Whereas Decouchant and the system of Schelvis and Ble-doeg (Oce Netherland) extended the Smalltalk virtual machine, the other projects chose to add proxy and message objects at the virtual image level. synchronization. fault tolerance. Availability: References: [27] [77] <ref> [159] </ref> [168] [189] 2.40 Distributed Smalltalk Process Developer: Description: Extension of Goldberg and Robson's Smalltalk (see section 2.92). oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). The "fork" message can handle the node number. scheduling. mapping.
Reference: [160] <author> Ciaran McHale. </author> <title> Synchronisation in Concurrent, Object-oriented Languages: Expressive Power, Genericity and Inheritance. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Trinity College, </institution> <address> Dublin 2, Ire-land, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Availability: This research was carried out as part of Ciaran McHale's PhD thesis. Now that the thesis has been completed, research into this area has ceased. Information can be found on http://www.dsg.cs.tcd.ie/research/sos.html Email addresses: Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie References: <ref> [160] </ref> [161] 2.91 Scoop Developer: University of Montreal, Canada. Description: oo. This is a logic programming language. memory model. parallelism. When a Scoop program is started, there is one active process. Scoop offers a statement to create a new process. <p> Availability: This research was carried out as part of Ciaran McHale's PhD thesis. Now that the thesis has been completed, research into this area has ceased. Information can be found on http://www.dsg.cs.tcd.ie/research/sos.html Email addresses: Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie References: <ref> [160] </ref> 2.94 Synchronizing Resources, SR Developer: University of Arizona, Tucson Description: oo. Inheritance and separation of interface and implementation. A resource is an object that can contain code for processes and procs.
Reference: [161] <author> Ciaran McHale, Bridget Walsh, Sean Baker, and Alexis Donnelly. </author> <title> Scheduling predicates. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proc of the ECOOP'91 Workshop on Object-Based 48 Concurrent Computing, </booktitle> <pages> pages 177-193, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Availability: This research was carried out as part of Ciaran McHale's PhD thesis. Now that the thesis has been completed, research into this area has ceased. Information can be found on http://www.dsg.cs.tcd.ie/research/sos.html Email addresses: Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie References: [160] <ref> [161] </ref> 2.91 Scoop Developer: University of Montreal, Canada. Description: oo. This is a logic programming language. memory model. parallelism. When a Scoop program is started, there is one active process. Scoop offers a statement to create a new process.
Reference: [162] <author> Piyush Mehrotra and John Van Rosendale. </author> <title> The BLAZE language: A parallel language for scientific programming. </title> <journal> Parallel Computing, </journal> <volume> 5 </volume> <pages> 339-361, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: They can however be declared to be parallel. scheduling. mapping. Nothing. synchronization. In addition to serial methods, Variables and objects can be locked/unlocked explicitly. fault tolerance. 7 Availability: The project has not really been completed. Email address: Piyush Mehrotra ! pm@icase.edu References: <ref> [162] </ref> [163] 2.18 Braid, Data-Parallel Mentat Developer: University of Virginia Description: Although this language first appears under the name DataParallel Mentat, that authors decided to change the name to Braid. oo. Based on Mentat, see section 2.66. The basic extension is a new keyword for creating a data-parallel class.
Reference: [163] <author> Piyush Mehrotra and John Van Rosendale. </author> <title> Concurrent object access in BLAZE 2. </title> <booktitle> In ACM SIG-PLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 40-42, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: They can however be declared to be parallel. scheduling. mapping. Nothing. synchronization. In addition to serial methods, Variables and objects can be locked/unlocked explicitly. fault tolerance. 7 Availability: The project has not really been completed. Email address: Piyush Mehrotra ! pm@icase.edu References: [162] <ref> [163] </ref> 2.18 Braid, Data-Parallel Mentat Developer: University of Virginia Description: Although this language first appears under the name DataParallel Mentat, that authors decided to change the name to Braid. oo. Based on Mentat, see section 2.66. The basic extension is a new keyword for creating a data-parallel class.
Reference: [164] <author> Bertrand Meyer. </author> <title> Applying design by contract. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 40-51, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Mentat is available from http://www.cs.virginia.edu/ mentat ftp://uvacs.cs.virginia.edu 28 Email addresses: group ! mentat@virginia.edu Andrew S. Grimshaw ! grimshaw@virginia.edu References: [89] [90] [91] [92] [93] [94] 2.67 Meyer's Proposal Developer: Proposal by Betrand Meyer Description: oo. Extension of Eiffel. Meyer considers the Design by Contract <ref> [164] </ref> as the basic principle of object-oriented programming. He introduces the new keyword separate into Eiffel. That keyword indicates that an object is handled by a different processor. Due to the parallelism introduced, some semantic changes are necessary, to retain the principle of design-by-contract. memory model. Common address space.
Reference: [165] <author> Bertrand Meyer. </author> <title> Systematic concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 56-80, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Concurrent calls block. They block, too, if they cannot fulfill the preconditions of a feature. fault tolerance. None. Availability: This is just a proposed language. The author tries to retain the object-oriented paradigm, by minimally extending an existing language (Eiffel). Email address: Betrand Meyer ! bertrand@eiffel.com References: <ref> [165] </ref> 2.68 Micro C++, C++ Developer: University of Waterloo, Waterloo, Canada Description: oo. C++ is an extension of C++. In addition to ordinary C++ objects, there are monitor objects, coroutine objects, coroutine-monitor ob jects, and tasks. memory model.
Reference: [166] <author> J. Elliot B. Moss and Walter H. Kohler. </author> <title> Con-currency features for the Trellis/Owl language. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 171-180, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidel-berg, New York. </address>
Reference-contexts: Hence, the programmer is in charge to coordinate accesses to shared objects. For this purpose concurrent Trellis offers 1st class lock objects. fault tolerance. Availability: The system is implemented on a VAX 11/785 and MicroVAX running VMS. References: <ref> [166] </ref> [187] [188] 2.97 Ubik Developer: IBM Cambridge Scientific Center. Description: Describes a generalization of the Actor model. oo. memory model. parallelism. Actor language. Asynchronous message passing only. Early become for postpro-cessing. Return values, if any, have to be passed back by a separate message. scheduling. mapping. synchronization.
Reference: [167] <author> Stephan Murer, Jerome A. Feldman, Chu-Cheow Lim, and Martina-Maria Seidel. pSather: </author> <title> Layered extensions to an object-oriented language for efficient parallel computation. </title> <type> Technical Report TR-93-028, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: See Trellis/Owl (section 2.96). fault tolerance. Availability: DOWL is running on VAXen and DEC statations under Ultrix. Email address: Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de References: [1] [2] 2.43 dpSather Developer: CSIRO, Australia + Monash University, Australia Description: oo. The language dpSather is an extension of Sather 0.5 <ref> [167, 145] </ref>. The language has a bulk data type. When declaring objects of that type, a given number of instance is created. Functions can be declared to work on instances and can be called to work on the whole bulk. memory model. Same as Sather. parallelism.
Reference: [168] <author> Claudio Nascimento and Jean Dollimore. </author> <title> Behavior maintenance of migrating objects in a distributed object-oriented environment. </title> <journal> IEEE Computer, </journal> <volume> 25(9), </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: Whereas Decouchant and the system of Schelvis and Ble-doeg (Oce Netherland) extended the Smalltalk virtual machine, the other projects chose to add proxy and message objects at the virtual image level. synchronization. fault tolerance. Availability: References: [27] [77] [159] <ref> [168] </ref> [189] 2.40 Distributed Smalltalk Process Developer: Description: Extension of Goldberg and Robson's Smalltalk (see section 2.92). oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). The "fork" message can handle the node number. scheduling. mapping.
Reference: [169] <author> Oscar Nierstrasz. </author> <title> Active objects in Hybrid. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 243-253, </pages> <address> Orlando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: None. Availability: A prototype implementation of Hybrid runs on a single UNIX machine with shared-memory with pseudo concurrent processes. Concurrency is supported by a custom made package for lightweight processes. Email address: Oscar Nierstrasz ! oscar@iam.unibe.ch References: <ref> [169] </ref> [170] [176] 2.60 Java Developer: Sun Microsystems Computer Corporation. Description: oo. Very similar to C++. Only single inheritance. Interface and class definition may be separated. memory model. shared, flat. parallelism. Special thread class.
Reference: [170] <author> Oscar Nierstrasz. </author> <title> A tour of Hybrid: A language for programming with active objects. </title> <editor> In D. Mandrioli and B. Meyer, editors, </editor> <booktitle> Advances in Object-Oriented Software Engineering, </booktitle> <pages> pages 167-182. </pages> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1992. </year>
Reference-contexts: None. Availability: A prototype implementation of Hybrid runs on a single UNIX machine with shared-memory with pseudo concurrent processes. Concurrency is supported by a custom made package for lightweight processes. Email address: Oscar Nierstrasz ! oscar@iam.unibe.ch References: [169] <ref> [170] </ref> [176] 2.60 Java Developer: Sun Microsystems Computer Corporation. Description: oo. Very similar to C++. Only single inheritance. Interface and class definition may be separated. memory model. shared, flat. parallelism. Special thread class.
Reference: [171] <author> Mark Nuttal. </author> <title> A brief survey of systems providing process or object migration facilities. </title> <journal> Operating Systems Review, </journal> <volume> 28(4) </volume> <pages> 64-80, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] <ref> [171] </ref> [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [172] <author> Kazuhiro Ogata, Satoshi Kurihara, Mikio Inari, and Norihisa Doi. </author> <title> The design and implementation of HoME. </title> <booktitle> In Proc. of the ACM SIGPLAN Conf. on Programming Languages, Design and Implementation, PLDI'92, </booktitle> <pages> pages 44-54, </pages> <address> San Francisco, CA, </address> <month> June 17-19 </month> <year> 1992. </year>
Reference-contexts: See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: The multi-processor used is the shared-memory multiprocessor OMRON LUNA 88K on which the Mach operating system runs. References: <ref> [172] </ref> 25 2.59 Hybrid Developer: University of Geneva, Switzerland Description: oo. Active objects communicate and synchronize by message passing. The basic model of communication is that of remote procedure call. RPC passes parameters by value. memory model. Each object has its own address space.
Reference: [173] <author> Ronald A. Olsson, Gregory R. Andrews, Michael H. Coffin, and Gregg M. Townsend. </author> <title> SR a language for parallel and distributed programming. </title> <type> Technical Report TR 92-09, </type> <institution> Dept. of Computer Science, University of Arizona, Tucson, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Multiprocessing is simulated on other platforms, which include SunOS 4.x, HP RISC, DEC Alpha and Ul-trix, IBM AIX, and Linux. Documentation and more is available from ftp://ftp.cs.arizona.edu//sr http://www.cs.arizona.edu/sr/www Email addresses: group ! sr-project@cs.arizona.edu Ronald A. Olsson ! olsson@cs.ucdavis.edu Gregory R. Andrews ! greg@cs.arizona.edu References: [15] [14] <ref> [173] </ref> 2.95 Tool Developer: Pontificia University, Rio de Janeiro, Brazil. Description: 39 oo. This is an object-oriented language that is in-tended to be used on top of Windows 3.1. to offer a graphical user interface to object-oriented programming. Single inheritance. memory model. parallelism.
Reference: [174] <author> Joseph Pallas and David Ungar. </author> <title> Multiprocessor Smalltalk a case study of a multiprocessor-based programming environment. </title> <booktitle> In Proc. of SIGPLAN Conf., </booktitle> <pages> pages 268-277, </pages> <year> 1988. </year>
Reference-contexts: See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: Multiprocessor Smalltalk is implemented on the FireFly multiprocessor [203]. References: <ref> [174] </ref> 2.72 NAM Developer: National Tsing-Hua University, Taiwan Description: The proposed language is very similar to pC++, which is described on page 33. Availability: The language has been implemented on a 32 node nCUBE2. References: [142] 2.73 Obliq Developer: Digital Equipment Corporation, Palo Alto Description: oo.
Reference: [175] <author> M. Papathomas. </author> <title> Concurrency issues in object-oriented programming languages. </title> <editor> In D. Tsichritzis, editor, </editor> <booktitle> Object Oriented Development, </booktitle> <pages> pages 207-245. </pages> <institution> University of Geneva, Switzerland, </institution> <year> 1989. </year>
Reference-contexts: Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper <ref> [175] </ref> give an first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. He does not classify the broad number of languages, we look at in this report.
Reference: [176] <author> Michael Papathomas. </author> <title> Language Design Rationale and Semantic Framework for Concurrent Object-Oriented Programming. </title> <type> PhD thesis, </type> <institution> Universite de Geneve, Department d'Informatique, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Survey articles: [17] [22] [26] [212] [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas <ref> [176] </ref> and an earlier paper [175] give an first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. He does not classify the broad number of languages, we look at in this report. <p> None. Availability: A prototype implementation of Hybrid runs on a single UNIX machine with shared-memory with pseudo concurrent processes. Concurrency is supported by a custom made package for lightweight processes. Email address: Oscar Nierstrasz ! oscar@iam.unibe.ch References: [169] [170] <ref> [176] </ref> 2.60 Java Developer: Sun Microsystems Computer Corporation. Description: oo. Very similar to C++. Only single inheritance. Interface and class definition may be separated. memory model. shared, flat. parallelism. Special thread class.
Reference: [177] <author> John Plevyak, Xingbin Zhang, and Andrew A. Chien. </author> <title> Obtaining sequential efficiency for concurrent object-oriented languages. </title> <booktitle> In Proc. of the 22nd Annual ACM SIGACT-SIGPLAN Symp. on Principles of Programming Languages POPL'95, </booktitle> <pages> pages 311-321, </pages> <address> San Francisco, CA, </address> <month> January 22-25, </month> <year> 1995. </year>
Reference-contexts: The next target might be the T3D. Information, the language report, and the current release of the Concert software can be found at: http://www-csag.cs.uiuc.edu ftp://cs.uiuc.edu/pub/csag Email addresses: group ! concert@red-herring@cs.uiuc.edu Andrew A. Chien ! achien@cs.uiuc.edu References: [65] [66] [67] [68] [69] [70] [71] [129] <ref> [177] </ref> 2.29 ConcurrentSmalltalk Developer: Description: oo. memory model. parallelism. Asynchronous method call plus futures (CBox). Post-processing. Synchronous messages are also available. The caller decides which mode to use. scheduling. mapping. synchronization. There are two types of objects in ConcurrentSmalltalk: atomic and non-atomic objects.
Reference: [178] <author> Steven S. Popovic, Gail E. Kaiser, and Shyhtsum F. Wu. </author> <title> MELDing transactions and objects. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 94-98, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Depending on compiler flags, a MeldC program is compiled into a set of Unix programs or into one Unis program that uses a thread package to simulate concurrency. Email addresses: group ! MeldC@cs.columbia.edu Gail E. Kaiser ! kaiser@cs.columbia.edu References: [126] [127] <ref> [178] </ref> 2.66 Mentat Developer: University of Virginia Description: oo. Extension of C++. The keyword mentat in the class definition specifies that objects of this class are used in parallel. memory model. Each mentat object possesses a unique name, an address space, and a single thread of control.
Reference: [179] <author> Roland Pozo. </author> <title> A stream-based interface in C++ for programming heterogeneous systems. </title> <booktitle> In Proc. of the CRNS-NSF Workshop on Environment and Tools for Parallel Scientific Computing, </booktitle> <pages> pages 162-177, </pages> <address> Saint Hilaire du Touvet, France, </address> <month> September 7-8, </month> <year> 1992. </year> <title> Elsevier, </title> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <year> 1993. </year>
Reference-contexts: The main purpose is to shield the C++ user from PVM's machine oriented details. parallelism. synchronization. Availability: There is a prototype based on the old PVM 2.4 interface. Currently work is under way to update PVM++ to the 3.3 interface. Email address: Roland Pozo ! pozo@cs.utk.edu References: <ref> [179] </ref> 2.87 QPC++ Developer: University of Oldenburg, Germany. Description: oo. Extension of C++. Process class. memory model. parallelism. Special member function called "body" that is executed automatically. The activity is associated with the object.
Reference: [180] <author> Myra Jean Prelle, Ann M. Wollrath, Thomas J. Brando, and Edward H. Bensley. </author> <title> The impact of selected concurrent language constructs on the SAM run-time system. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 99-103, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: When later a method call arrives at the object with an earlier time stamp, then the system is rolled back to this copy and the newly arrived call is executed first, before the new calls are replayed. fault tolerance. Availability: Implemented on an Intel iPSC/2 multicom puter. References: <ref> [180] </ref> 37 2.90 Scheduling Predicates Developer: University of Dublin, Trinity College, Ire land. Description: oo. memory model. parallelism. Scheduling Processes is mainly interested in concurrency coordination mechanisms. The discussion of those is more or less independent of the way parallelism is introduced into a language.
Reference: [181] <author> Donna S. Reese and Ed Luke. </author> <title> Object oriented Fortran for development of portable parallel programs. </title> <booktitle> In Proc. of the 3rd IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 608-615, </pages> <address> Dallas, Texas, </address> <month> December 2-5, </month> <year> 1991. </year> <month> 49 </month>
Reference-contexts: None. Availability: OOF is currently available on the Intel i860 and Delta, SGI, IBM and Sun networks. A threaded version for the multiprocessor SPARC's is nearing completion. It is available via anonymous ftp from ftp://ftp.erc.msstate.edu Email address: Donna Reese ! dreese@erc.msstate.edu References: <ref> [181] </ref> 2.80 PO Developer: University of Bologna, Italy. Description: oo. memory model. parallelism. Asynchronous interaction of objects, futures. In addition life objects. Synchronous calls are also available. scheduling. mapping. The authors present an automatic placement algorithm which is based on a static anal ysis of communication cost. synchronization.
Reference: [182] <author> M. Riveill. </author> <title> An overview of the Guide language. </title> <booktitle> In 2nd Workshop on Objects in Large Distributed Applications, </booktitle> <address> Vancouver (Canada), </address> <month> 18 October </month> <year> 1992. </year>
Reference-contexts: Guide provides special counters (invoked, stared, completed, etc.) Control can be inherited separately. The idea of synchronization based on counters is due to [183] and [85]. Whereas the first papers did not consider the fact that guards accessing instance variable might cause inconsistency, the paper <ref> [182] </ref> dis cusses this problem. fault tolerance. Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). <p> Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2). The French speaking reader might find more information about IMAG on http://www.imag.fr Information about Guide can be retrieved via anonymous ftp from ftp://ftp.imag.fr/pub/GUIDE References: [64] [78] [98] [133] [134] <ref> [182] </ref> 2.55 HAL Developer: University of Illinois at Urbana-Champaign Description: oo. inheritance. Forwarding of messages. memory model. parallelism. Both synchronous and asynchronous method calls. Asynchronous calls only when there is no return value. Post-processing by early become. scheduling. mapping. Target distributed memory machine. Placement of objects automatic. 24 synchronization.
Reference: [183] <author> P. Robert and J.-P. Verjus. </author> <title> Toward autonomous descriptions of synchronization modules. </title> <editor> In B. Gilchrist, editor, </editor> <booktitle> proc. IFIP Congress, </booktitle> <pages> pages 981-986. </pages> <publisher> North-Holland Publishing Co, </publisher> <year> 1977. </year>
Reference-contexts: The activation conditions are specified in a special section of the class code but have a one-to-one relation to the methods. Guide provides special counters (invoked, stared, completed, etc.) Control can be inherited separately. The idea of synchronization based on counters is due to <ref> [183] </ref> and [85]. Whereas the first papers did not consider the fact that guards accessing instance variable might cause inconsistency, the paper [182] dis cusses this problem. fault tolerance. Persistent objects. Exceptions. Availability: Implemented for a network of 486 PCs on Mach 3.0 micro kernel (Guide-2).
Reference: [184] <author> Hayssam Saleh and Philippe Gautron. </author> <title> A con-currency control mechanism for C++ objects. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proc. of the ECOOP'91 Workshop on object-based concurrent computing, </booktitle> <pages> pages 195-210, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: An intersting synchronization concept is parameterized synchronization. The delay conditions that can be attached to methods can use the same parameters that are used in the procedure signature. fault tolerance. Availability: Implemented on a Transputer platform. Email addresses: Hayssam Saleh ! saleh@litp.ibp.fr Philippe Gautron ! gautron@litp.ibp.fr References: <ref> [184] </ref> [185] 33 2.79 Parallel Object-Oriented Fortran Developer: Mississippi State University Description: oo. Extension of plain Fortran to be object-based. There are no concepts of inheritance and strong typing. memory model. There is a global addressing space.
Reference: [185] <author> Hayssam Saleh and Philippe Gautron. </author> <title> A system library for C++ distributed applications on Trans-puter. </title> <booktitle> In Proc. of the 3rd Int. Conf. on Applications of Transputers, </booktitle> <pages> pages 638-643. </pages> <publisher> IOS Press, </publisher> <address> Amster-dam, Netherlands, </address> <month> August 28-30, </month> <year> 1991. </year>
Reference-contexts: An intersting synchronization concept is parameterized synchronization. The delay conditions that can be attached to methods can use the same parameters that are used in the procedure signature. fault tolerance. Availability: Implemented on a Transputer platform. Email addresses: Hayssam Saleh ! saleh@litp.ibp.fr Philippe Gautron ! gautron@litp.ibp.fr References: [184] <ref> [185] </ref> 33 2.79 Parallel Object-Oriented Fortran Developer: Mississippi State University Description: oo. Extension of plain Fortran to be object-based. There are no concepts of inheritance and strong typing. memory model. There is a global addressing space.
Reference: [186] <author> Michele Di Santo and Giulio Iannello. </author> <title> Implementing actor-based primitives on distributed-memory architectures. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 45-49, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Availability: ASK is running on a single Transputer, it is unclear whether the implementation of a 16 Trans puter version has been completed. Email address: Guilia Iannello ! iannello@udsab.dia.unisa.it References: <ref> [186] </ref> 2.15 A'UM Developer: Institute for New Generation Computer Technology, Tokyo, Japan Description: oo. Object with stream of incoming messages. Mul tiple inheritance. memory model. parallelism. Asynchronous message passing only.
Reference: [187] <author> C. Schaffert, T. Cooper, B. Bullis, M. Kilian, and C. Wilpolt. </author> <title> An introduction to Trellis/Owl. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 9-16, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2, </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices 21(11). </journal>
Reference-contexts: Hence, the programmer is in charge to coordinate accesses to shared objects. For this purpose concurrent Trellis offers 1st class lock objects. fault tolerance. Availability: The system is implemented on a VAX 11/785 and MicroVAX running VMS. References: [166] <ref> [187] </ref> [188] 2.97 Ubik Developer: IBM Cambridge Scientific Center. Description: Describes a generalization of the Actor model. oo. memory model. parallelism. Actor language. Asynchronous message passing only. Early become for postpro-cessing. Return values, if any, have to be passed back by a separate message. scheduling. mapping. synchronization.
Reference: [188] <author> Craig Schaffert, Topher Cooper, and Carrie Wilpolt. </author> <title> Trellis - object-based environment: Language reference manual. </title> <type> Technical Report DEC-TR-372, </type> <institution> Eastern Research Lab, DEC, Hudson, Massachusetts, </institution> <month> November </month> <year> 1985. </year>
Reference-contexts: Hence, the programmer is in charge to coordinate accesses to shared objects. For this purpose concurrent Trellis offers 1st class lock objects. fault tolerance. Availability: The system is implemented on a VAX 11/785 and MicroVAX running VMS. References: [166] [187] <ref> [188] </ref> 2.97 Ubik Developer: IBM Cambridge Scientific Center. Description: Describes a generalization of the Actor model. oo. memory model. parallelism. Actor language. Asynchronous message passing only. Early become for postpro-cessing. Return values, if any, have to be passed back by a separate message. scheduling. mapping. synchronization.
Reference: [189] <author> Marcel Schelvis and Eddy Bledoeg. </author> <title> The implementation of a Distributed Smalltalk. </title> <booktitle> In Proc. of the European Conf. on Object-Oriented Programming, ECOOP'88, number 322 in Lecture Notes in Computer Science, </booktitle> <pages> pages 212-232, </pages> <address> Oslo, Norway, </address> <month> August 15-17, </month> <title> 1988. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidel-berg, New York. </address>
Reference-contexts: Whereas Decouchant and the system of Schelvis and Ble-doeg (Oce Netherland) extended the Smalltalk virtual machine, the other projects chose to add proxy and message objects at the virtual image level. synchronization. fault tolerance. Availability: References: [27] [77] [159] [168] <ref> [189] </ref> 2.40 Distributed Smalltalk Process Developer: Description: Extension of Goldberg and Robson's Smalltalk (see section 2.92). oo. See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). The "fork" message can handle the node number. scheduling. mapping.
Reference: [190] <author> Alexander Schill and Markus U. Mock. </author> <title> DC++: Distributed object-oriented system support on top of OSF DCE. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 1(2) </volume> <pages> 112-125, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Arjuna The Arjuna approach [193] focuses on distributed transaction support for objects. It provides persistent objects, but does not offer migrating objects. Avalon/C++ Although internally quite different, the intention of the Avalon/C++ system [79] is quite sim ilar to that of Arjuna. DCE++ <ref> [190] </ref> This is an extension of both the OSF Distributed Computing Environment and C++ that provides a uniform object model, location invariant invocation, remote reference parameter passing and dy namic object migration. Peace Could be relevant. This is an extension of C++.
Reference: [191] <author> Heinz W. Schmidt. </author> <title> Data parallel object-oriented programming. </title> <booktitle> In Proc. of the 5th Australian Supercomputer Conf., </booktitle> <pages> pages 263-272, </pages> <address> Melbourne, </address> <month> De-cember </month> <year> 1992. </year>
Reference-contexts: However, the parallel activities exist only from the call of the parallel function to its termination on all instances. fault tolerance. None. Availability: dpSather has been implemented on a Mas-Par MP-1. An implementation on a Fujitsu Sparc multiprocessor is under construction. Email address: Heinz Schmidt ! Heinz.Schmidt@fcit.monash.edu.au References: <ref> [191] </ref> 2.44 Dragoon Developer: Imperial College, London, UK Description: oo. Based on Ada. memory model. Heterogeneous systems with dis tributed memory. parallelism. Objects can have a thread that executes concurrently with method invocations.
Reference: [192] <author> Marc Shapiro, Yvon Gourhandt, Sabine Habert, Laurence Mosseri, Michel Ruffina, and Celine Valot. </author> <title> SOS: An object-oriented operating system assessment and perspective. </title> <journal> Computer System, </journal> <volume> 2(4), </volume> <month> De-cember </month> <year> 1989. </year>
Reference-contexts: Otherwise, the programmer must implement a synchronization himself. When synchronization of concurrently executing threads is needed, the programmer must imple ment that requirement himself. fault tolerance. Availability: FOG/C++ has been implemented on top of SOS, an object-oriented operating system <ref> [192] </ref>. Email address: Yvon Gourhand ! gourhant@corto.inria.fr References: [87] [152] 2.54 Guide Developer: University of Grenoble and Bull Research Center Description: oo. Separation of interface and implementation. In heritance. memory model. Objects are persistent and stored on secondary memory.
Reference: [193] <author> Santosh K. Shrivastava, Graeme N. Dixon, and Graham D. Parrington. </author> <title> An overview of the Arjuna distributed programming system. </title> <journal> IEEE Software, </journal> <pages> pages 66-73, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Amadeus [] general distributed c++ implementation Argus Arguments to remote calls must be passeed by value, not by reference. Arjuna The Arjuna approach <ref> [193] </ref> focuses on distributed transaction support for objects. It provides persistent objects, but does not offer migrating objects. Avalon/C++ Although internally quite different, the intention of the Avalon/C++ system [79] is quite sim ilar to that of Arjuna.
Reference: [194] <author> Robert J. Smith. </author> <title> Experimental systems kit final project report. </title> <type> Technical report, </type> <institution> Microelectronics and Computer Technology Corporation, MCC, Austin, Texas, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Nothing is said about location. synchronization. Synchronization must be imple mented by hand, e.g., by locking. fault tolerance. Availability: The ES-Kit research project was driven by the development of a parallel computer. It has been completed in March 1991. The software is not avail able online. http://www.mcc.com References: <ref> [194] </ref> [207] 22 2.51 ESP Extensible Software Platform Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Distributed C++ system. Object are considered to be passive but reactive, they are waiting for requests to execute routines. memory model. ESP provides named objects with private address space.
Reference: [195] <author> Gert Smolka. </author> <title> The definition of kernal Oz. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for Artificial Intelligence, Saarbrucken, Germany, </institution> <year> 1994. </year>
Reference-contexts: Perdio proposes transparent automatic distribution of objects. Availability: Oz is available for many platforms running Unix-X, including Sparcs and 486 PCs. More information can be retrieved from ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz Email addresses: group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de References: [103] <ref> [195] </ref> [196] [197] 2.76 Panda Developer: University of Kaiserslautern, Germany Description: oo. Panda is a run-time package based on a very small operating system kernel which supports distributed applications written in C++. memory model.
Reference: [196] <author> Gert Smolka. </author> <title> An Oz primer. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for Artificial Intelligence, Saarbrucken, Germany, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Perdio proposes transparent automatic distribution of objects. Availability: Oz is available for many platforms running Unix-X, including Sparcs and 486 PCs. More information can be retrieved from ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz Email addresses: group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de References: [103] [195] <ref> [196] </ref> [197] 2.76 Panda Developer: University of Kaiserslautern, Germany Description: oo. Panda is a run-time package based on a very small operating system kernel which supports distributed applications written in C++. memory model.
Reference: [197] <author> Gert Smolka, Martin Henz, and Jorg Wurtz. </author> <title> Object-oriented concurrent constraint programming in Oz. </title> <editor> In P. van Hentenryck and V. Saraswat, editors, </editor> <booktitle> Principles and Practice of Constraint Programming, </booktitle> <pages> pages 27-48. </pages> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Perdio proposes transparent automatic distribution of objects. Availability: Oz is available for many platforms running Unix-X, including Sparcs and 486 PCs. More information can be retrieved from ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz Email addresses: group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de References: [103] [195] [196] <ref> [197] </ref> 2.76 Panda Developer: University of Kaiserslautern, Germany Description: oo. Panda is a run-time package based on a very small operating system kernel which supports distributed applications written in C++. memory model.
Reference: [198] <author> Jan van der Spek. </author> <title> POOL-X and its implementation. </title> <editor> In Pierre America, editor, </editor> <booktitle> Parallel Database Systems. PRISMA Workshop, </booktitle> <pages> pages 309-344, </pages> <address> No-ordwijk, The Netherlands, September 24-26, 1990. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: [7] [8] [9] [10] <ref> [198] </ref> [218] 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [199] <author> Kazunori Takashio and Mario Tokoro. DROL: </author> <title> An object-oriented programming language for distributed real-time systems. </title> <booktitle> In Proc. of OOPSLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 276-294, </pages> <address> Vac-nouver, Canada, </address> <month> October 18-22, </month> <year> 1992. </year> <journal> ACM SIG-PLAN Notices 27(10). </journal>
Reference-contexts: This meta object knows about "enabled sets" and can reject method invocations to methods which are not currently available. fault tolerance. Exception handling by use of time outs. Availability: DROL is translated to C++ and thus runs on single processor machines. References: <ref> [199] </ref> 2.46 Eiffel// Developer: University of Nice, Sophia Antipolis, France Description: oo. Slight extension of Eiffel version 2. Concurrency is introduced into the language by inheritance from special concurrency classes: For this purpose there are the classes PROCESS and REQUEST. memory model. Common address space.
Reference: [200] <author> Hidehiko Tanaka. </author> <title> A parallel object oriented language FLENG++ and its control system on the parallel machine PIE64. </title> <editor> In A. Yonezawa and T. Ito, editors, </editor> <booktitle> Concurrency: Theory, Language and Architecture. Japan/UK Workshop Proc., </booktitle> <pages> pages 157-172. </pages> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York, </address> <year> 1991. </year>
Reference-contexts: And/Or-parallelism scheduling. mapping. The location of objects is visible (each PE is visible). synchronization. Only a single method can be pro cessed at an object at a time. fault tolerance. Availability: Fleng++ is implemented on a PIE64 par allel computer which is built at the same laboratory. References: <ref> [200] </ref> 2.53 Fragmented Objects, FOG/C++ Developer: INRIA, Institut National de Recherche en In formatique et en Automatique, France Description: oo. In addition to ordinary C++ objects, the authors introduce fragmented objects. They call them fragments, since on each node a fragment of the object exists.
Reference: [201] <author> Andrew S. Tanenbaum, M. Frans Kaashoek, and Henry E. Bal. </author> <title> Parallel programming using shared objects and braodcasting. </title> <journal> IEEE Computer, </journal> <volume> 25(18) </volume> <pages> 10-19, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Beside this implicit synchronization there is a way to explicitly program guarding conditions. Operation calls may block if guards are evaluated to false. fault tolerance. Availability: Documentation can be found at ftp://ftp.cs.vu.nl/pub/amoeba/orca papers ftp://ftp.cs.vu.nl/pub/papers/orca Email address: Henri E. Bal ! bal@cs.vu.nl References: [22] [23] [25] [24] [102] <ref> [201] </ref> 2.75 Oz, Perdio Developer: German Research Center for Artificial Intel ligence, DFKI, Saarbrucken. Description: Oz is an object-oriented concurrent constraint programming language. Multiple inheritance. A project Perdio is currently being discussed which uses Oz in a distributed environment.
Reference: [202] <author> Kenjiro Taura, Satoshi Matsuoka, and Akinori Yonezawa. ABCL/f: </author> <title> A future-based polymorphic typed concurrent object-oriented language its design and implementation. </title> <editor> In G. Blelloch, M. Chandy, 50 and S. Jagannathan, editors, </editor> <booktitle> Proc. of the DIMACS workshop on Specification of Parallel Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: Availability: A prototype implementation of ABCL/f on a distributed memory multicomputer AP1000 has been nearly completed. The ABCL/f software is not yet available. The Yonezawa Lab WWW Server can be reached at: http://web.yl.is.s.u-tokyo.ac.jp Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: <ref> [202] </ref> 2.3 ABCL/R2 Developer: University of Tokyo, Japan Description: ABCL/R2 is a descendant of ABCL/R. Whereas ABCL/R was implemented on top to ABCL/1, ABCL/R2 is implemented directly in Common Lisp. Actor [4, 5] language. oo. As in ABCL/R, each object has its own meta-object.
Reference: [203] <author> C. P. Thacker, L. C. Stewart, and E. H. Satterth-waite, Jr. Firefly: </author> <title> A multiprocessor workstation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 909-920, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Synchronization of object access is thus left to the programmer. For synchronization of concurrent threads there is a join construct. fault tolerance. Availability: Amber is implemented on the Topaz operating system for the DEC FireFly <ref> [203] </ref>, a multipro cessor workstation based on VAX microprocessors. References: [61] 5 2.12 A-NETL Developer: Utsunomiya University, Japan. Description: oo. The language differentiates between dynamic objects and indexed objects, where multiple in stances are created at once. No inheritance. memory model. parallelism. Asynchronous method call, futures, post-processing. Synchronous method call. <p> See Smalltalk-80 (section 2.92). memory model. parallelism. See Smalltalk-80 (section 2.92). scheduling. mapping. synchronization. See Smalltalk-80 (section 2.92). fault tolerance. Availability: Multiprocessor Smalltalk is implemented on the FireFly multiprocessor <ref> [203] </ref>. References: [174] 2.72 NAM Developer: National Tsing-Hua University, Taiwan Description: The proposed language is very similar to pC++, which is described on page 33. Availability: The language has been implemented on a 32 node nCUBE2. References: [142] 2.73 Obliq Developer: Digital Equipment Corporation, Palo Alto Description: oo.
Reference: [204] <institution> Thinking Machines Corporation, </institution> <address> Cambridge, </address> <month> Mas-sachusetts. </month> <title> C* Language Reference Manual, </title> <month> April </month> <year> 1991. </year>
Reference-contexts: It is possible to declare addressing functions that give access to neighboring instances when called from an instance of the bulk. Above that, the programmer can specify how bulks are to be aligned with respect to each other. The notation borrows heavily from C* <ref> [204] </ref>, Fortran D [83], HPF [109] and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. <p> The programmer specifies a mapping of a template to the available processors. Then he can align his aggregates relative to this template. Hence, the programmer must try to achieve data locality of elements of collections that are used together. The notation borrows heavily from C* <ref> [204] </ref>, Fortran D [83], HPF [109] and thus inherits some of the weaknesses, c.f. [206]. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution.
Reference: [205] <author> David A. Thomas, Wilf R. LaLonde, John Duimovich, Michael Wilson, Jeff McAffer, and Brian Barry. </author> <title> Actra amultitasking/multiprocessing Smalltalk. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 87-89, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: In contrast to the Actor model, there is no asynchronous message passing. scheduling. mapping. Not an issue. synchronization. After a become the state of an Actor can no longer be changed. Synchronization by synchronous communication. Only one method can be active at a time. fault tolerance. Availability: References: [158] <ref> [205] </ref> 2.11 Amber Developer: University of Washington, Seattle Description: oo. Subset of C++ with primitives to manage con-currency and distribution. In Amber there is a collection of mobile objects distributed among nodes in a homogeneous network. These objects interact through location independent invocation.
Reference: [206] <author> Walter F. Tichy, Michael Philippsen, and Phil Hatcher. </author> <title> A critique of the programming language C*. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 21-24, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Above that, the programmer can specify how bulks are to be aligned with respect to each other. The notation borrows heavily from C* [204], Fortran D [83], HPF [109] and thus inherits some of the weaknesses, c.f. <ref> [206] </ref>. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. However, the parallel activities exist only from the call of the parallel function to its termination on all instances. fault tolerance. None. Availability: dpSather has been implemented on a Mas-Par MP-1. <p> Then he can align his aggregates relative to this template. Hence, the programmer must try to achieve data locality of elements of collections that are used together. The notation borrows heavily from C* [204], Fortran D [83], HPF [109] and thus inherits some of the weaknesses, c.f. <ref> [206] </ref>. synchronization. The functions that run on the instances of a bulk in parallel are not synchronized during execution. However, the parallel activities exist only from the call of the parallel function to its termination on all instances.
Reference: [207] <author> Michael D. Tiemann. </author> <title> Solving the RPC problem in GNU C++. </title> <type> Technical Report ESKIT-285-88, </type> <institution> Microelectronics and Computer Technology Corporation, MCC, Austin, Texas, </institution> <year> 1988. </year>
Reference-contexts: Nothing is said about location. synchronization. Synchronization must be imple mented by hand, e.g., by locking. fault tolerance. Availability: The ES-Kit research project was driven by the development of a parallel computer. It has been completed in March 1991. The software is not avail able online. http://www.mcc.com References: [194] <ref> [207] </ref> 22 2.51 ESP Extensible Software Platform Developer: Microelectronics and Computer Technology Corp., MCC Description: oo. Distributed C++ system. Object are considered to be passive but reactive, they are waiting for requests to execute routines. memory model. ESP provides named objects with private address space.
Reference: [208] <author> Chris Tomlinson, Won Kim, Marek Scheevel, Vi-neet Singh, Becky Will, and Gul Agha. Rosette: </author> <title> an object-oriented concurrent system architecture. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 91-93, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: The method name (and eventually some of the actual parameter values) contained in a queued message have to match an enabled-set. fault tolerance. Availability: Version 1.1 of Rosette is available via anonymous ftp from ftp://biobio.cs.uiuc.edu References: <ref> [208] </ref> [209] [210] 2.89 SAM Developer: The MITRE Corporation. Description: oo. memory model. parallelism. Actor language. scheduling. mapping. Not an issue. synchronization. Futures. Each object that requires synchronization is associated with an instance of a synchronization manager. One method at a time.
Reference: [209] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with Enabled-sets. </title> <booktitle> In Proc. of OOPSLA'89, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 103-112, </pages> <address> New Orleans, Louisiana, </address> <month> October 1-6, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices (24)10. </journal>
Reference-contexts: The method name (and eventually some of the actual parameter values) contained in a queued message have to match an enabled-set. fault tolerance. Availability: Version 1.1 of Rosette is available via anonymous ftp from ftp://biobio.cs.uiuc.edu References: [208] <ref> [209] </ref> [210] 2.89 SAM Developer: The MITRE Corporation. Description: oo. memory model. parallelism. Actor language. scheduling. mapping. Not an issue. synchronization. Futures. Each object that requires synchronization is associated with an instance of a synchronization manager. One method at a time.
Reference: [210] <author> Christine Tomlinson, Mark Scheevel, and Vineet Singh. </author> <note> Report on Rosette 1.1, </note> <month> August </month> <year> 1991. </year> <title> Object-Oriented and Distributed Systems Laboratory, </title> <institution> Microelectronics and Computer Technology Corp., MCC. </institution>
Reference-contexts: The method name (and eventually some of the actual parameter values) contained in a queued message have to match an enabled-set. fault tolerance. Availability: Version 1.1 of Rosette is available via anonymous ftp from ftp://biobio.cs.uiuc.edu References: [208] [209] <ref> [210] </ref> 2.89 SAM Developer: The MITRE Corporation. Description: oo. memory model. parallelism. Actor language. scheduling. mapping. Not an issue. synchronization. Futures. Each object that requires synchronization is associated with an instance of a synchronization manager. One method at a time. Each method call is labeled with a global time stamp.
Reference: [211] <author> Rajiv Trehan, Nobuyuki Sawashima, Akira Mor-ishita, Ichiro Tomoda, Toru Imai, and Ken ichi Maeda. </author> <title> Concurrent object oriented `C` (cooC). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(2) </volume> <pages> 45-52, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Exclusive methods. Wait by necessity. The language offers semaphores and a rendezvous. fault tolerance. Availability: Is implemented on a network of Sparcs using the lwp thread packets and Unix sockets. A beta version of the software is available from: ftp://isl.rdc.toshiba.co.jp/pub/toshiba Email address: group ! cooc@isl.rdc.toshiba.co.jp References: <ref> [211] </ref> 13 2.31 COOL (Chorus) Developer: Chorus Systems, France. Description: oo. The main work went into the CHORUS object-oriented layer. An object oriented language can be mapped to this layer by trapping object cre ation. Objects may be declared active. memory model.
Reference: [212] <author> Louis H. Turcotte. </author> <title> A survey of software environments for exploiting network computing resources. </title> <type> Technical report, </type> <institution> Mississippi State University, </institution> <month> June 11, </month> <year> 1993. </year>
Reference-contexts: RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] <ref> [212] </ref> [171] [63] [220] [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [213] <author> Minoru Uehara and Mario Tokoro. </author> <title> An adaptive load balancing method in the computational field model. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 109-113, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Description: oo. memory model. parallelism. scheduling. mapping. Object allocation algorithm. Dynamic object grouping. Adaptive load balancing. Distance cost model and mass cost. Migration of objects. Message objects follow. synchronization. fault tolerance. 9 Availability: References: <ref> [213] </ref> 2.23 CHARM++ Developer: University of Illinois, Urbana-Champaign Description: oo. Extension of C++. Three types of objects: sequential, concurrent (so-called: chares), and replicated (one per processor). Inheritance is only possible within one type of classes. The language offers the notion of modules. memory model.
Reference: [214] <author> Jean Vaucher, Guy Lapalme, and Jacques Malen-fant. </author> <title> SCOOP structured concurrent object-oriented prolog. </title> <booktitle> In ECOOP'88 - European Conf. on Object-Oriented Programming, </booktitle> <pages> pages 191-210, </pages> <address> Oslo, Norway, </address> <month> August 15-17, </month> <title> 1988. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: To synchronize concurrent processes Scoop provides explicit send and receive commands. Whereas the send command is non-blocking, the receive command will block until a message has been received from the channel specified as parameter. fault tolerance. Availability: Scoop has been implemented in Prolog on a single processor machine. References: <ref> [214] </ref> 2.92 Smalltalk-80 Developer: Description: oo. memory model. parallelism. By sending a "fork" message to a block of expressions a thread is started that executes these expressions concurrently. scheduling. Special "processor" object that imple ments a FIFO scheduling policy for threads. mapping. synchronization. Semaphore. fault tolerance.
Reference: [215] <author> Peter Wegner. </author> <title> Dimensions of object.based language design. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 168-182, </pages> <address> Orlando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: If concurrent execution is introduced in a language independently of objects it will compromise encapsulation, since concurrent execution of the operations of objects may violate the consistency of their internal state. Reusability Due to Wegner <ref> [215] </ref> a language that provides objects is called object-based. When classes are in the language in addition to objects, such a language is called class-based.
Reference: [216] <author> Emily A. West. </author> <title> Combining Control and Data Parallelism: Data Parallel Extensions to the Mentat Programming Language. </title> <type> PhD thesis, </type> <institution> University of Vir-ginia, Department of Computer Science, </institution> <month> May </month> <year> 1994. </year> <note> Available as technical report CS-94-16. </note>
Reference-contexts: Before virtualization, element functions create local copies of the values. When finalizing the element function, local values are stored. Availability: Email addresses: Andrew S. Grimshaw ! grimshaw@virginia.edu group ! mentat@virginia.edu References: <ref> [216] </ref> [217]. For more references see descrip tion of Mentat in section 2.66. 2.19 C** Developer: University of Wisconsin, Madison Description: oo. C** is a data-parallel language. memory model. The memory model of C++ is transparently extended for C**.
Reference: [217] <author> Emily A. West and Andrew S. Grimshaw. </author> <title> Braid: Integrating task and data parallelism. </title> <booktitle> In Frontiers '95: The 5th Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 211-219, </pages> <address> McLean, VA, </address> <month> February 6-9, </month> <year> 1995. </year>
Reference-contexts: Before virtualization, element functions create local copies of the values. When finalizing the element function, local values are stored. Availability: Email addresses: Andrew S. Grimshaw ! grimshaw@virginia.edu group ! mentat@virginia.edu References: [216] <ref> [217] </ref>. For more references see descrip tion of Mentat in section 2.66. 2.19 C** Developer: University of Wisconsin, Madison Description: oo. C** is a data-parallel language. memory model. The memory model of C++ is transparently extended for C**.
Reference: [218] <author> R. H. H. Wester and B. J. A. Hulshof. </author> <title> The POOMA operating system. </title> <editor> In Pierre America, editor, </editor> <booktitle> Parallel Database Systems. PRISMA Workshop, </booktitle> <pages> pages 396-323, </pages> <address> Noordwijk, The Netherlands, September 24-26, 1990. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: There is no mechanism in the language to synchronize threads working on multiple objects. fault tolerance. None. Availability: Pierre America has left the field and is now interested in Computers and Music. References: [7] [8] [9] [10] [198] <ref> [218] </ref> 2.82 Presto Developer: University of Washington, Seattle Description: oo. Library extension of C++. memory model. Presto is developed for shared memory multiprocessors. parallelism. Presto offers a special thread class.
Reference: [219] <author> R. Winder, G. Roberts, and M. Wei. </author> <booktitle> CoSIDE and parallel object-oriented languages. In Addendum to the Proc. of OOPSLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 211-213, </pages> <address> Vacnouver, Canada, </address> <month> October 5-10, </month> <year> 1992. </year>
Reference-contexts: One method at a time. fault tolerance. Availability: The system is currently running on networks of Sun, DEC alpha and SGI. A publicly available PVM is announced for the near future. The current language definition can be found at http://www.cs.ucl.ac.uk/coside/ucpp Email address: Russel Winder ! R.Winder@cs.ucl.ac.uk References: <ref> [219] </ref>
Reference: [220] <author> Barbara Wyatt, Krishna Kavi, and Steve Hufnagel. </author> <title> Parallelism in object-oriented languages: a survey. </title> <journal> IEEE Computer, </journal> <volume> 11(6) </volume> <pages> 56-66, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] <ref> [220] </ref> [221]. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming.
Reference: [221] <author> Gao Yaoqing and Yuen Chung Kwong. </author> <title> A survey of implementations of concurrent, parallel and distributed Smalltalk. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(9) </volume> <pages> 29-35, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: RDO/C++ [114, 115] RDO/C++ provides the facilities needed to implement remote server processes with C++. The interface provided by the server is described in a high-level "Interface Description Language". RDO/C++ is based on the standardization effort of OMG. Survey articles: [17] [22] [26] [212] [171] [63] [220] <ref> [221] </ref>. Notion of "actors" was described by Hewitt [104] and further developed by Agha [4, 5] The paper by Karaorman and Bruno [130] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [176] and an earlier paper [175] give an first classification of concurrent object-oriented languages.
Reference: [222] <author> Stephen S. Yau, Xiaoping Jia, Doo-Hwan Bae, Mad-han Chidambaram, and Gilho Oh. </author> <title> An object-oriented approach to software development for parallel processing systems. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer Software and Applications Conf., pages 453-5-8, </booktitle> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher> <pages> 51 </pages>
Reference-contexts: The programmer is responsible for correctly using the lock object (read/write/modify-mode) before accessing the object. fault tolerance. Persistent objects. Availability: Proof is compiled to OCCAM and runs on a 16 node Transputer System. References: <ref> [222] </ref> 2.85 pSather Developer: International Computer Science Institute, ICSI, Berkeley Description: oo. memory model. parallelism. Asynchronous and synchronous method calls. First class futures (queues). Caller chooses the calling mode. par-construct. scheduling. mapping. synchronization. Lock statements that can handle multiple locks at once.
Reference: [223] <author> Yasuhiko Yokote and Mario Tokoro. </author> <title> The design and implementation of ConcurrentSmalltalk. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 331-340, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2 </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices 21(11). </journal>
Reference-contexts: In addition, Smalltalk's semaphores can be used for activity centered coordination. The reason for the two types of objects is the intended compatibility with Smalltalk-80 which offers objects that behave like non-atomic objects. fault tolerance. Availability: References: <ref> [223] </ref> 2.30 cooC Developer: Toshiba Corporation, Kanagawa, Japan. Description: oo. Extension of C (or C++). memory model. parallelism. Every method call is asynchronous and uses an implicit wait by necessity when return values are used. The size of the message queues is a runtime system parameter.
Reference: [224] <author> Akinori Yonezawa. </author> <title> ABCL: An Object-Oriented Concurrent System theory, language, programming, implementation, and application. Computer System Series. </title> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, Lon-don, England, </address> <year> 1990. </year>
Reference-contexts: Exceptions: a complaint object can be defined, i.e., the programmer can influ ence to where the exception must propagate. Availability: The Yonezawa Lab WWW Server can be reached and the ABCL/1 software can be retrieved from: http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: <ref> [224] </ref> 2.2 ABCL/f Developer: University of Tokyo, Japan Description: oo. ABCL/f is based on the Actor model [4, 5] and is an extension of ABCL/1 (see section 2.1). Unlike its predecessor, ABCL/f is typed and is class-based, i.e., methods for classes can be defined. <p> Availability: The Yonezawa Lab WWW Server can be reached under and the ABCL/R2 software can be retrieved from: http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp The predecessor ABCL/R is still available from ftp, however, it is neither supported nor recommended to use. Email addresses: group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp References: [156] <ref> [224] </ref> 2.4 ABCL/R3 Developer: University of Tokyo, Japan Description: oo. ABCL/R3 is an extension of ABCL/R2. The main idea is to make per physical processor node objects and scheduler objects visible as meta objects, which are accessible from each object that resides on the same node. memory model.
Reference: [225] <author> Kaoru Yoshida and Takashi Chikayama. A'UM = stream+object+relation. </author> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 55-58, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Order of messages in streams is visible part of the language (in contrast to pure Actor languages). mapping. No details on placement, alignment, etc. synchronization. One at at time. fault tolerance. Availability: References: <ref> [225] </ref> 2.16 BETA Developer: Aarhus University and Mjtlner Informatics, Aarhus, Denmark. Description: Only the Mjtlner BETA system currently deals with concurrency. oo. single inheritance. memory model. parallelism. An object can either be used in corou-tine mode by using a "resume" statement.
Reference: [226] <author> Tsutomu Yoshinaga and Takanobu Baba. </author> <title> A parallel object-oriented language A-NETL and its programming environment. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer Software and Applications Conf., </booktitle> <pages> pages 459-464, </pages> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher> <pages> 52 </pages>
Reference-contexts: Moreover, he can collect objects that should reside in one node for purposes of locality. There is an allocator tool which helps in mapping to the machine. synchronization. fault tolerance. Availability: References: [81] <ref> [226] </ref> 2.13 Arche Developer: IRISA, Institut de Recherche en Informa tique et Systems Aleatoires, Rennes, France Description: oo. Single inheritance. memory model. parallelism. Methods are called synchronously, i.e., the caller is blocked until the called method is completed.
References-found: 226

