URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/mobile-ambients.ps.gz
Refering-URL: http://bourbon.cs.yale.edu/trifonov/ReadingGroup/
Root-URL: http://www.cs.yale.edu
Abstract: 1 Abstract We introduce a calculus describing the movement of processes and devices, in cluding movement through administrative domains.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abadi, M. and A.D. Gordon, </author> <title> A calculus for cryptographic protocols: </title> <booktitle> the spi calculus . Proc. Fourth ACM Conference on Computer and Communications Security, </booktitle> <month> 36-47 , </month> <year> 1997. </year>
Reference-contexts: In fact, the channel may cross several independent firewalls, but a process could not be in all those places at once. Nonetheless, many fundamental p calculus concepts and techniques underlie our work. The spi calculus <ref> [1] </ref> extends the p calculus with cryptographic primitives. The need for such extensions does not seem to arise immediately within our ambient calculus. Some of the motivations for the spi calculus extension are already covered by the notion of encapsulation within an ambient.
Reference: [2] <author> Amadio, </author> <title> R.M., An asynchronous model of locality, failure, </title> <booktitle> and process mobility . Proc . COORDINATION 97 , Berlin, </booktitle> <year> 1997. </year>
Reference-contexts: Finally, a growing body of literature is concentrating on the idea of adding discrete locations to a process calculus and considering failure of those locations <ref> [2, 10] </ref>. Our notion of locality is built into our basic calculus. It is induced by a nontrivial and dynamic topology of locations, in the sense that a location that is far from the current one can only be reached through multiple individual moves.
Reference: [3] <author> Berry, G. and G. Boudol, </author> <booktitle> The chemical abstract machine . Theoretical Computer Science 96 (1), </booktitle> <pages> 217-248, </pages> <year> 1992. </year>
Reference-contexts: Some of the motivations for the spi calculus extension are already covered by the notion of encapsulation within an ambient. However, we do not know yet how extensively we can use our ambient primitives for cryptographic purposes. The Chemical Abstract Machine <ref> [3] </ref> is a semantic framework, rather than a specific formalism. Its basic notions of reaction in a solution and of membranes that isolate sub-solutions, closely resemble ambient notions. However, membranes are not meant to provide strong protection, and there is no concern for mobility of subsolutions. <p> This is a semantics in the style of Milners reaction relation [14] for the p calculus, which was itself inspired by the Chemical Abstract Machine of Berry and Boudol <ref> [3] </ref>. Structural Congruence Processes of the calculus are grouped into equivalence classes by the relation , which denotes structural congruence (that is, equivalence up to trivial syntactic restructuring).
Reference: [4] <author> Boudol, G., </author> <title> Asynchrony and the p calculus. </title> <type> TR 1702, </type> <institution> INRIA, Sophia-Antipolis, </institution> <year> 1992. </year>
Reference-contexts: ( x ). p [ out n . nPo ]] | open p ) nnjmko $ io [ in n . jmk ] nP | Qo $ nPo | nQo 15 This encoding includes the choice-free synchronous p calculus, since it can itself be encoded within the asynchronous p calculus <ref> [4, 12] </ref>. We can fairly conveniently use these definitions to embed communication on named channels within the ambient calculus (provided the name io is not used for other purposes). Communication on these named channels, though, only works within a single ambient.
Reference: [5] <author> Cardelli, L., </author> <title> A language with distributed scope . Computing Systems, </title> <type> 8 (1), </type> <pages> 27-59. </pages> <publisher> MIT Press. </publisher> <year> 1995. </year>
Reference-contexts: In a realistic situation the true name of an ambient would be guarded very closely, and only specific capabilities would be handed out. 3 1.2 Technical Context: Systems Many software systems have explored and are exploring notions of mobility. Obliq <ref> [5] </ref> attacks the problems of distribution and mobility for intranet computing.
Reference: [6] <author> Carriero, N. and D. Gelernter, </author> <title> Linda in context . CACM , 32 (4), </title> <type> 444-458, </type> <year> 1989. </year>
Reference-contexts: A Telescript agent, however, is itself a little ambient, since it contains a suitcase of data. Some nesting of places is allowed in Telescript. Java [11] provides a working framework for mobile computation, as well as a widely available infrastructure on which to base more ambitious mobility efforts. Linda <ref> [6] </ref> is a coordination language where multiple processes interact in a common space (called a tuple space) by exchanging tokens asynchronously. Distributed versions of Linda exist that use multiple tuple spaces and allow remote operations.
Reference: [7] <author> Carriero, N., D. Gelernter, and L. </author> <title> Zuck, </title> <booktitle> Bauhaus Linda , in LNCS 924, </booktitle> <pages> 66-76, </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Linda [6] is a coordination language where multiple processes interact in a common space (called a tuple space) by exchanging tokens asynchronously. Distributed versions of Linda exist that use multiple tuple spaces and allow remote operations. A dialect of Linda <ref> [7] </ref> allows nested tuple spaces, but not mobility of the tuple spaces. 1.3 Technical Context: Formalisms Many existing calculi have provided inspiration for our work. The p calculus [15] is a process calculus where channels can move along other channels.
Reference: [8] <author> De Nicola, R., G.-L. Ferrari and R. Pugliese, </author> <title> Locality based Linda: programming with explicit localities . Proc. </title> <booktitle> TAPSOFT97 . 1997. </booktitle> <pages> 16 </pages>
Reference-contexts: Locations in the distributed join-calculus form a tree, and subtrees can migrate from one part of the tree to another. A main difference with our ambients is that movement may happen directly from any active location to any other known location. LLinda <ref> [8] </ref> is a formalization of Linda using process calculi techniques. As in dis 4 tributed versions of Linda, LLinda has multiple distributed tuple spaces.
Reference: [9] <author> Fournet, C. and G. Gonthier, </author> <booktitle> The reflexive CHAM and the join-calculus . Proc. 23rd Annual ACM Symposium on Principles of Programming Languages , 372-385. </booktitle> <year> 1996. </year>
Reference-contexts: Its basic notions of reaction in a solution and of membranes that isolate sub-solutions, closely resemble ambient notions. However, membranes are not meant to provide strong protection, and there is no concern for mobility of subsolutions. Still, we adopt a chemical style in presenting our calculus. The join-calculus <ref> [9] </ref> is a reformulation of the p calculus with a more explicit notion of places of interaction; this greatly helps in building distributed implementations of channel mechanisms. The distributed join-calculus [10] adds a notion of named locations, with essentially the same aims as ours, and a notion of distributed failure. <p> A channel is simply represented by an ambient: the name of the channel is the name of the ambient. This is very similar in spirit to the join-calculus <ref> [9] </ref> where channels are rooted at a location. Communication on a channel is represented by local communication inside an ambient. The basic technique is a variation on objective moves. A conventional name, io , is used to transport input and output requests into the channel.
Reference: [10] <author> Fournet, C., G. Gonthier, J.-J. L vy, L. Maranget, D. </author> <title> R my, </title> <booktitle> A calculus of mobile agents . Proc. </booktitle> <address> CONCUR'96 , 406-421. </address> <year> 1996. </year>
Reference-contexts: Still, we adopt a chemical style in presenting our calculus. The join-calculus [9] is a reformulation of the p calculus with a more explicit notion of places of interaction; this greatly helps in building distributed implementations of channel mechanisms. The distributed join-calculus <ref> [10] </ref> adds a notion of named locations, with essentially the same aims as ours, and a notion of distributed failure. Locations in the distributed join-calculus form a tree, and subtrees can migrate from one part of the tree to another. <p> Finally, a growing body of literature is concentrating on the idea of adding discrete locations to a process calculus and considering failure of those locations <ref> [2, 10] </ref>. Our notion of locality is built into our basic calculus. It is induced by a nontrivial and dynamic topology of locations, in the sense that a location that is far from the current one can only be reached through multiple individual moves.
Reference: [11] <author> Gosling, J., B. Joy and G. Steele, </author> <title> The Java language specification . Addison-Wesley. </title> <year> 1996. </year>
Reference-contexts: In Telescript, agents move whereas places stay put. Ambients, instead, move whereas agents are confined to ambients. A Telescript agent, however, is itself a little ambient, since it contains a suitcase of data. Some nesting of places is allowed in Telescript. Java <ref> [11] </ref> provides a working framework for mobile computation, as well as a widely available infrastructure on which to base more ambitious mobility efforts. Linda [6] is a coordination language where multiple processes interact in a common space (called a tuple space) by exchanging tokens asynchronously.
Reference: [12] <author> Honda., K. and M. Tokoro, </author> <title> An object calculus for asynchronous communication. </title> <journal> Proc. ECOOP91, </journal> <volume> LNCS 521, </volume> <pages> 133-147, </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: ( x ). p [ out n . nPo ]] | open p ) nnjmko $ io [ in n . jmk ] nP | Qo $ nPo | nQo 15 This encoding includes the choice-free synchronous p calculus, since it can itself be encoded within the asynchronous p calculus <ref> [4, 12] </ref>. We can fairly conveniently use these definitions to embed communication on named channels within the ambient calculus (provided the name io is not used for other purposes). Communication on these named channels, though, only works within a single ambient.
Reference: [13] <author> Milner, R., </author> <title> A calculus of communicating systems . LNCS 92. </title> <publisher> Springer-Verlag. </publisher> <year> 1980. </year>
Reference-contexts: The main difference with the liberal form of acid is that acid n must name the ambient it is dissolving. More precisely, the encoding of acid n requires both an exit and an open capability for n . 2.7 Example: External Choice A major feature of CCS <ref> [13] </ref> is the presence of a nondeterministic choice operator (+). We do not take + as a primitive, in the spirit of the asynchronous p calculus, but we can approximate some aspects of it by the following definitions.
Reference: [14] <author> Milner, R., </author> <note> Functions as processes . Mathematical Structures in Computer Science 2 , 119-141. </note> <year> 1992. </year>
Reference-contexts: This is a semantics in the style of Milners reaction relation <ref> [14] </ref> for the p calculus, which was itself inspired by the Chemical Abstract Machine of Berry and Boudol [3]. Structural Congruence Processes of the calculus are grouped into equivalence classes by the relation , which denotes structural congruence (that is, equivalence up to trivial syntactic restructuring).
Reference: [15] <author> Milner, R., J. Parrow and D. Walker, </author> <title> A calculus of mobile processes, </title> <booktitle> Parts 1-2 . Information and Computation , 100 (1), </booktitle> <pages> 1-77. </pages> <year> 1992 </year>
Reference-contexts: Distributed versions of Linda exist that use multiple tuple spaces and allow remote operations. A dialect of Linda [7] allows nested tuple spaces, but not mobility of the tuple spaces. 1.3 Technical Context: Formalisms Many existing calculi have provided inspiration for our work. The p calculus <ref> [15] </ref> is a process calculus where channels can move along other channels. The movement of processes is represented as the movement of channels that refer to processes. Therefore, there is no clear indication that processes themselves move.
Reference: [16] <author> White, </author> <title> J.E., Mobile agents . In Software Agents , J. </title> <editor> Bradshaw, ed. </editor> <publisher> AAAI Press / The MIT Press. </publisher> <year> 1996. </year>
Reference-contexts: Obliq works well for its intended application, but is not really suitable for computation and mobility over the Web (like other distributed paradigms based on the remote procedure call model) because of the fragility of network proxies over the Web. Our ambient model is partially inspired by Telescript <ref> [16] </ref>, but is almost dual to it. In Telescript, agents move whereas places stay put. Ambients, instead, move whereas agents are confined to ambients. A Telescript agent, however, is itself a little ambient, since it contains a suitcase of data. Some nesting of places is allowed in Telescript.
References-found: 16

