URL: http://www.dcs.qmw.ac.uk/~mps/EC_planning.ps.Z
Refering-URL: http://www.dcs.qmw.ac.uk/~mps/CogRob/CogRob.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: mps@dcs.qmw.ac.uk  
Title: Event Calculus Planning Revisited  
Author: Murray Shanahan 
Date: May 1997 DRAFT  
Web: Web: http://www.dcs.qmw.ac.uk/~mps  
Address: Mile End Road, London E1 4NS, England.  
Affiliation: Department of Computer Science, Queen Mary and Westfield College,  
Abstract: In 1969 Cordell Green presented his seminal description of planning as theorem proving with the situation calculus. The most pleasing feature of Green's account was the negligible gap between high-level logical specification and practical implementation. This paper attempts to reinstate the ideal of planning via theorem proving in a modern guise. In particular, I will show that if we adopt the event calculus as our logical formalism and employ abductive logic programming as our theorem proving technique, then the computation performed mirrors closely that of a hand-coded partial order planning algorithm. Furthermore, if we extend the event calculus in a natural way to accommodate compound actions, then using exactly the same abductive theorem prover we obtain a hierarchical planner. All this is a striking vindication of Kowalski's slogan Algorithm = Logic + Control.
Abstract-found: 1
Intro-found: 1
Reference: [Chapman, 1987] <author> D.Chapman, </author> <title> Planning for Conjunctive Goals, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 32 (1987), </volume> <pages> pp. 333 377. </pages>
Reference-contexts: As pointed out by [Missiaen, et al., 1995], the event calculus axioms, in particular (EC1) to (EC6), can be likened to Chapmans modal truth criterion (but stripped of the modalities) <ref> [Chapman, 1987] </ref>. The logic programming approach to planning advocated in this paper can be thought of as directly executing the modal truth criterion. <p> Many of the computational concepts central to the literature on partial order planning, such as threats, protected links, promotions and demotions <ref> [Chapman, 1987] </ref>, [Penberthy & Weld, 1992], turn out to have direct counterparts in the theorem proving process. Its interesting to note that these features of the logic programming implementation werent designed in. Rather, they are naturally arising features of the theorem provers search for a proof.
Reference: [Eshghi, 1988] <author> K.Eshghi, </author> <title> Abductive Planning with Event Calculus, </title> <booktitle> Proceedings of the Fifth International Conference on Logic Programming (1988), </booktitle> <pages> pp. 562579. </pages>
Reference-contexts: Using the methodology of this paper, all we have to do to obtain a hierarchical planner from a partial order planner is represent compound actions in the obvious way. Concluding Remarks This paper continues a line of work on event calculus planning begun in <ref> [Eshghi, 1988] </ref>. Eshghis techniques were simplified (and applied to temporal explanation) in [Shanahan, 1989]. But neither of these papers described a practical planner. The first usable event calculus planner was developed in Belgium by Missiaen, et al. [1995].
Reference: [Green 1969] <author> C.Green, </author> <title> Applications of Theorem Proving to Problem Solving, </title> <booktitle> Proceedings IJCAI 69, </booktitle> <pages> pp. 219 240. </pages>
Reference: [Jung, et al., 1996] <author> C.G.Jung, K.Fischer and A.Burt, </author> <title> Multi-Agent Planning Using an Abductive Event Calc ulus, </title> <note> DFKI Report RR-96-04 (1996), DFKI, Germany. </note>
Reference-contexts: Eshghis techniques were simplified (and applied to temporal explanation) in [Shanahan, 1989]. But neither of these papers described a practical planner. The first usable event calculus planner was developed in Belgium by Missiaen, et al. [1995]. Recently, another abductive event calculus planner has been developed at DFKI in Germany <ref> [Jung, et al., 1996] </ref>. All of these planners are based on similar ideas to those presented in this paper: all use abductive logic programming techniques to generate plans using a similar style of representation via in iti ate s, t erm ina tes and happens predicates. <p> Since the planner is simply the result of applying general purpose theorem proving techniques to a general purpose action formalism, it can be argued that this illuminates the nature of several commonly deployed concepts in the planning literature. Fourth, unlike the planners in [Missiaen, et al., 1995] and <ref> [Jung, et al., 1996] </ref>, the planner of the present paper can handle actions with context-dependent effects. Finally, since it uses abduction to solve initiates and terminates goals, the planner is both sound and complete, and performs correctly on a number of potentially anomalous examples described in [Missiaen, et al., 1995].
Reference: [Kowalski, 1979] <author> R.A.Kowalski, </author> <title> Algorithm = Logic + Control, </title> <journal> Communications of the ACM, </journal> <volume> vol. 22, </volume> <pages> pp. 424436. </pages>
Reference: [Kowalski, 1995] <author> R.A.Kowalski, </author> <title> Using MetaLogic to Reconcile Reactive with Rational Agents, in Meta-Logics and Logic Programming, </title> <editor> ed. K.R.Apt and F.Turini, </editor> <publisher> MIT Press (1995), </publisher> <pages> pp. 227242. </pages>
Reference: [Kowalski & Sergot, 1986] <institution> R.A.Kowalski and M.J.Sergot, </institution>
Reference-contexts: However, where Greens account was based on the formalism of the situation calculus [McCarthy & Hayes, 1969], the present paper adopts the event calculus <ref> [Kowalski & Sergot, 1986] </ref>, [Shanahan, 1997a]. Furthermore, while Green regarded planning as a deductive process, planning with the event calculus is most naturally considered as an abductive process. <p> Hierarchical decomposition, on the other hand, can be adjusted to generate actions in progression order (first action first). 1 A Circumscriptive Event Calculus The formalism for reasoning about action used in this paper is derived originally from Kowalski and Sergots event calculus <ref> [Kowalski & Sergot, 1986] </ref>, but is based on many-sorted first-order predicate calculus augmented with circumscription [Shanahan, 1997a]. 2 This section presents the bare outlines of the formalism. An example of the use of the formalism, which should make things clearer to those unfamiliar with it, appears in the next section.
References-found: 7

