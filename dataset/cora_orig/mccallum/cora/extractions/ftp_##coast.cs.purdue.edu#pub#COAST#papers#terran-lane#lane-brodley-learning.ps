URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/terran-lane/lane-brodley-learning.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Title: Detecting the Abnormal: Machine Learning in Computer Security Keywords: Application, Learning from positive examples, Sequence
Author: Terran Lane and Carla E. Brodley 
Date: January 31, 1997  
Address: Building  West Lafayette, IN 47907-1285  
Affiliation: School of Electrical and Computer Engineering 1285 Electrical Engineering  Purdue University  
Abstract-found: 0
Intro-found: 1
Reference: [Aha, et al., 1991] <author> Aha, D., Kibler, D., & Albert, M. </author> <year> (1991). </year> <title> Instance-based learning algorithms. </title> <journal> Machine Learning, </journal> <volume> 6, </volume> <pages> 37-66. </pages>
Reference-contexts: The library is an instance database that, together with a similarity measure and a set of system parameters (described below), constitutes a user's profile. Similar to instance based learning, a design criterion is whether one collects all available data or performs some type of instance selection <ref> [Aha, et al., 1991, Lewis & Catlett, 1994] </ref>.
Reference: [Anderson, 1980] <author> Anderson, J. P. </author> <year> (1980). </year> <title> Computer security threat monitoring and surveillance, </title> <type> (Technical Report), </type> <address> Washington, PA, James P. </address> <publisher> Anderson Co. </publisher>
Reference-contexts: 1 Introduction A long-standing problem in the field of computer security is that of intrusion detection <ref> [Anderson, 1980] </ref>.
Reference: [Denning, 1987] <author> Denning, D. E. </author> <year> (1987). </year> <title> An intrusion-detection model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13, </volume> <pages> 222-232. </pages>
Reference-contexts: profiling, and then discuss implementation details of how user profiles are formed from command data. 2.1 Capturing the Casual Nature of User Actions Traditionally, in computer security, user profiles have been built based on characteristics such as resources consumed, typing rate, command issue rate, and counts of particular commands employed <ref> [Denning, 1987, Smaha, 1988, Frank, 1994] </ref>. It is unclear how successful these approaches have been because, although a number of applications have been fielded and are in use, to our knowledge rigorous comparative testing has yet to be performed 1 .
Reference: [Dietterich & Michalski, 1986] <author> Dietterich, T. G. , & Michalski, R. S. </author> <year> (1986). </year> <title> Learning to predict sequences. </title> <editor> In Michalski, Carbonell & Mitchell (Eds.), </editor> <booktitle> Machine learning: An artificial intelligence approach. </booktitle> <address> San Mateo, CA: </address> <publisher> Mor-gan Kaufmann. </publisher>
Reference: [Frank, 1994] <author> Frank, J. </author> <year> (1994). </year> <title> Machine learning and intrusion detection: Current and future directions. </title> <booktitle> Proc. of the 17th National Computer Security Conference. </booktitle>
Reference-contexts: profiling, and then discuss implementation details of how user profiles are formed from command data. 2.1 Capturing the Casual Nature of User Actions Traditionally, in computer security, user profiles have been built based on characteristics such as resources consumed, typing rate, command issue rate, and counts of particular commands employed <ref> [Denning, 1987, Smaha, 1988, Frank, 1994] </ref>. It is unclear how successful these approaches have been because, although a number of applications have been fielded and are in use, to our knowledge rigorous comparative testing has yet to be performed 1 .
Reference: [Hirsh & Japkowicz, 1994] <author> Hirsh, H., & Japkowicz, N. </author> <year> (1994). </year> <title> Bootstrapping training-data representations for inductive learning: A case study in molecular biology. </title> <booktitle> Proceedings of the Twelfth National Conference on Artificial Intelligence (pp. </booktitle> <pages> 639-644). </pages> <address> Seattle, WA. </address>
Reference-contexts: Two sequences can be compared using a similarity measure. 3.1 Computing Sequence Similarity One approach to learning from sequence data is to convert the data into feature vectors by accumulating measures of the individual sequences <ref> [Hirsh & Japkowicz, 1994, Salzberg, 1995] </ref>. Then one can apply any off the shelf classifier construction algorithm such as a neural network or a decision tree to the feature vectors that describe the sequence data.
Reference: [Lewis & Catlett, 1994] <author> Lewis, D., & Catlett, J. </author> <year> (1994). </year> <title> Heterogeneous uncertainty sampling for supervised learning. </title> <booktitle> Machine Learning: Proceedings of the Eleventh International Conference (pp. </booktitle> <pages> 148-156). </pages> <address> New Brunswick, NJ: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The library is an instance database that, together with a similarity measure and a set of system parameters (described below), constitutes a user's profile. Similar to instance based learning, a design criterion is whether one collects all available data or performs some type of instance selection <ref> [Aha, et al., 1991, Lewis & Catlett, 1994] </ref>.
Reference: [Moore, 1990] <author> Moore, A. W. </author> <year> (1990). </year> <title> Aquisition of dynamic control knowledge for a robot manipulator. </title> <booktitle> Proceedings of the Seventh International Conference on Machine Learning (pp. </booktitle> <pages> 244-252). </pages> <address> Austin, TX: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This means that some of the old sequence data will no longer accurately reflect the user's behavior. To handle this concept drift [Schlimmer, 1987] a method is needed to remove out-of-date data sequences from the library similar to removing instances from instance-based learning systems <ref> [Moore, 1990] </ref>. Fortunately, these sequences can be detected as they are older and will not have been recently used in matching (new behavior looks different). A focus of future work will be to explore the LRU method for adapting user-profiles to concept drift. 18
Reference: [Mukherjee, et al., 1994. ] <author> Mukherjee, B., Heberlein, L. T. , & Levitt, K. N. </author> <year> (1994. </year> ). <title> Network intrusion detection. </title> <journal> IEEE Network, </journal> <volume> 8, </volume> <pages> 26-41. </pages>
Reference: [Norton, 1994] <author> Norton, S. W. </author> <year> (1994). </year> <title> Learning to recognize promoter sequences in E. coli by modelling uncertainty in the training data. </title> <booktitle> Proceedings 19 of the Twelfth National Conference on Artificial Intelligence (pp. </booktitle> <pages> 657-663). </pages> <address> Seattle, WA. </address>
Reference-contexts: Because of privacy issues, and the fact that it is impossible to characterize the full space of user behaviors, only positive examples of the account owner's behavior are available for training. Norton has explored sequence learning for DNA sequences <ref> [Norton, 1994] </ref>, but his data had both positive and negative training examples. The anomaly detection domain differs from traditional concept formation tasks in that one must characterize user behavior from "positive" examples only.
Reference: [Salzberg, 1995] <author> Salzbery, S. </author> <title> (1995) Locating Protein Coding Regions in Human DNA using a Decision Tree Algorithm. </title> <journal> Journal of Computational Biology, </journal> <volume> 2(3), </volume> <pages> 473-485. </pages>
Reference-contexts: Two sequences can be compared using a similarity measure. 3.1 Computing Sequence Similarity One approach to learning from sequence data is to convert the data into feature vectors by accumulating measures of the individual sequences <ref> [Hirsh & Japkowicz, 1994, Salzberg, 1995] </ref>. Then one can apply any off the shelf classifier construction algorithm such as a neural network or a decision tree to the feature vectors that describe the sequence data.
Reference: [Schlimmer, 1987] <author> Schlimmer, J. C. </author> <year> (1987). </year> <title> Concept acquisition through representational adjustment. </title> <type> Doctoral dissertation, </type> <institution> University of California, Irvine. </institution>
Reference-contexts: This means that some of the old sequence data will no longer accurately reflect the user's behavior. To handle this concept drift <ref> [Schlimmer, 1987] </ref> a method is needed to remove out-of-date data sequences from the library similar to removing instances from instance-based learning systems [Moore, 1990]. Fortunately, these sequences can be detected as they are older and will not have been recently used in matching (new behavior looks different).
Reference: [Smaha, 1988] <author> Smaha, S. E. </author> <year> (1988). </year> <title> Haystack: An intrusion detection system. </title> <booktitle> Proceedings of the Fourth Aerospace Computer Security Applications Conference (pp. </booktitle> <pages> 37-44). </pages>
Reference-contexts: profiling, and then discuss implementation details of how user profiles are formed from command data. 2.1 Capturing the Casual Nature of User Actions Traditionally, in computer security, user profiles have been built based on characteristics such as resources consumed, typing rate, command issue rate, and counts of particular commands employed <ref> [Denning, 1987, Smaha, 1988, Frank, 1994] </ref>. It is unclear how successful these approaches have been because, although a number of applications have been fielded and are in use, to our knowledge rigorous comparative testing has yet to be performed 1 .

References-found: 13

