URL: http://www.cs.cmu.edu/afs/andrew/usr/hx22/papers/freezing.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/hwxi/www/manuscripts.html
Root-URL: 
Email: steinbac@informatik.tu-muenchen.de  hwxi+@cs.cmu.edu  
Phone: 2  
Title: Freezing Termination Proofs for Classical, Context-Sensitive and Innermost Rewriting  
Author: Joachim Steinbach and Hongwei Xi 
Address: 80290 Munchen, Germany  Pittsburgh, PA 15213, USA  
Affiliation: 1 Institut fur Informatik Technische Universitat Munchen  Department of Mathematical Sciences Carnegie Mellon University  
Abstract: Freezing is a powerful technique for orienting equations. Here we give a new presentation of it which is suitable for an efficient automatic use. Further, it is shown how slight modifications of it can be applied to context-sensitive and innermost term rewriting. The experimental results on an extensive test series of non-trivial examples performed using a prototype implementation strongly underlines the practical relevance of freezing not only in term rewriting but also in automated theorem proving.
Abstract-found: 1
Intro-found: 1
Reference: [Art97] <author> T. </author> <title> Arts. Automatically proving termination and innermost termination of term rewriting systems. </title> <type> Ph.D. thesis, </type> <institution> University of Utrecht, </institution> <year> 1997. </year>
Reference-contexts: The main idea is to exploit the fundamental requirement of innermost rewriting, namely that x must be in R-normal form for every x in the domain of when reducing t [l] p to t [r] p . We illustrate this idea concretely by the following example taken from <ref> [Art97] </ref>, where it is proven terminating by synthesizing a polynomial with negative coefficients, an approach which seems difficult to implement in practice. h (0; x) ! f (0; x; x) f (0; 1; x) ! h (x; x) g (x; y) ! x g (x; y) ! y We generate an
Reference: [AG97] <author> T. Arts and J. Giesl. </author> <title> Automatically proving termination where simplification orderings fail. </title> <booktitle> In CAAP, volume 1214 of LNCS, </booktitle> <pages> pages 261-272, </pages> <year> 1997. </year>
Reference-contexts: Simplification order-ings can easily and efficiently be applied, however, because of the subterm property, their power is also strongly restricted. Other reduction orderings have been developed which are more powerful than simplification orderings, but for which their application represents a very hard problem (see, e.g., [BL90, Zan95]). Besides <ref> [AG97, Ste95a] </ref>, in [Xi98] a technique called freezing is introduced which principally solves both problems: it is powerful and as we will show in this paper, it can efficiently be applied in practice using a heuristic-based algorithm.
Reference: [BD86] <author> L. Bachmair and N. Dershowitz. </author> <title> Commutation, transformation and termination. </title> <booktitle> In 8th CADE, volume 230 of LNCS, </booktitle> <pages> pages 52-60, </pages> <year> 1986. </year>
Reference-contexts: The resulting TRS is called hF fl ; R fl i. (iii) Termination of hF fl ; R fl i implies termination of hF ; Ri if t ~ t for all t 2 T (F;X) and the following property (a kind of commutation <ref> [BD86] </ref>) holds: for all t; t 1 ; t 0 with there exists t 0 1 with t 0 ~ H + H H Hj R ~ For this fundamental scenario, in [Xi98] a narrowing-like calculus (see, e.g., [Hul80] for narrowing) is presented for generating ~. <p> Our work is closely related to the following techniques: Freezing of [Xi98]: Roughly speaking, we introduce the practical realization of [Xi98] and the adaptation of it to context-sensitive and innermost rewriting. Transformation orderings of <ref> [BL90, BD86] </ref>: Like transformation orderings TO, we construct from a given TRS a transformed (`frozen') TRS the termination of which may be easier to prove. Unlike the TO, the construction is direct and avoids local properties (such as confluence and cooperation) and a completion-like procedure.
Reference: [BL90] <author> F. Bellegarde and P. Lescanne. </author> <title> Termination by completion. </title> <journal> AAECC, </journal> <volume> 1 </volume> <pages> 79-96, </pages> <year> 1990. </year>
Reference-contexts: Simplification order-ings can easily and efficiently be applied, however, because of the subterm property, their power is also strongly restricted. Other reduction orderings have been developed which are more powerful than simplification orderings, but for which their application represents a very hard problem (see, e.g., <ref> [BL90, Zan95] </ref>). Besides [AG97, Ste95a], in [Xi98] a technique called freezing is introduced which principally solves both problems: it is powerful and as we will show in this paper, it can efficiently be applied in practice using a heuristic-based algorithm. <p> Our work is closely related to the following techniques: Freezing of [Xi98]: Roughly speaking, we introduce the practical realization of [Xi98] and the adaptation of it to context-sensitive and innermost rewriting. Transformation orderings of <ref> [BL90, BD86] </ref>: Like transformation orderings TO, we construct from a given TRS a transformed (`frozen') TRS the termination of which may be easier to prove. Unlike the TO, the construction is direct and avoids local properties (such as confluence and cooperation) and a completion-like procedure.
Reference: [Der82] <author> N. Dershowitz. </author> <title> Orderings for term rewriting systems. </title> <journal> TCS, </journal> <volume> 17(3) </volume> <pages> 279-301, </pages> <year> 1982. </year>
Reference-contexts: There exist various reduction orderings, most of them are simplification or-derings having the so-called subterm property (where a term is greater than each of its proper subterms). The recursive (and lexicographic) path ordering <ref> [Der82, KL80] </ref> is one of the most well-known simplification orderings. We refer to [Der87, Ste95b, DJ90] for surveys on reduction and simplification orderings, and on term rewriting in general. <p> A TRS R is left-linear if the left-hand side of each rule of R is linear. We write hF ; Ri for a TRS R over F . One of the most well-known and widely used reduction orderings is the recursive path ordering RPOS with status <ref> [Der82, KL80] </ref>. The status t of an operator f determines the order according to which the arguments of F are compared. <p> The exponent `t (f )' in ` t (f) O ' denotes the extension of any ordering O wrt. the status t (f ) of the operator f . Definition 1 <ref> [Der82, KL80] </ref>. Let % be a quasi-precedence (a quasi-ordering on F) and t be a status function on F.
Reference: [Der87] <author> N. Dershowitz. </author> <title> Termination of rewriting. </title> <journal> JSC, </journal> <volume> 3 </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: There exist various reduction orderings, most of them are simplification or-derings having the so-called subterm property (where a term is greater than each of its proper subterms). The recursive (and lexicographic) path ordering [Der82, KL80] is one of the most well-known simplification orderings. We refer to <ref> [Der87, Ste95b, DJ90] </ref> for surveys on reduction and simplification orderings, and on term rewriting in general. <p> For the interested reader, we also point out that many other examples are available at http://www.cs.cmu.edu/~hwxi/freeze_examples/. 4.1 Classical Rewriting The correctness of the freezing technique when applied to a left-linear TRS is proven in [Xi98]. Example 1. The following TRS of <ref> [Der87] </ref> cannot be proven directly by an RPOS. mult (mult (x; y); z) ! mult (x; mult (y; z)) mult (plus (x; y); z) ! plus (mult (x; z); mult (y; z)) mult (x; plus (y; f (z))) ! mult (g (x; z); plus (y; a)) The following is a (mult;
Reference: [DF85] <author> D. Detlefs and R. Forgaard. </author> <title> A procedure for automatically proving the termination of a set of rewrite rules. </title> <booktitle> In 1st RTA, volume 202 of LNCS, </booktitle> <pages> pages 255-270, </pages> <year> 1985. </year>
Reference-contexts: The basic termination prover in the implementation is based upon the RPOS as described in [Ste95b]. While largely adopting the minimal extender approach in <ref> [DF85] </ref>, we also added some modifications so that we can handle all possible lexicographic types of status. The basic strategy is to assign a partial lexicographic status to an operator.
Reference: [DJ90] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems, </title> <booktitle> volume B of Handbook of Theoretical Computer Science, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> Elsevier Science Publisher B.V., </publisher> <year> 1990. </year>
Reference-contexts: There exist various reduction orderings, most of them are simplification or-derings having the so-called subterm property (where a term is greater than each of its proper subterms). The recursive (and lexicographic) path ordering [Der82, KL80] is one of the most well-known simplification orderings. We refer to <ref> [Der87, Ste95b, DJ90] </ref> for surveys on reduction and simplification orderings, and on term rewriting in general. <p> In Section 4, the tests for classical, context-sensitive and innermost rewriting are evaluated. A discussion on the relationship between freezing and other related techniques concludes the paper. 2 Preliminaries The following is a brief summary of the most important notations we use later. We refer to <ref> [DJ91, DJ90] </ref> for more details. Let T (F;X) denote the set of terms over operators F (with arity A r) and variables X. We use f; g ranging over operators. Note that we may use f; g for some specific operators in certain parts of the paper.
Reference: [DJ91] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Notations for rewriting. </title> <journal> EATCS, </journal> <volume> 43 </volume> <pages> 162-172, </pages> <year> 1991. </year>
Reference-contexts: In Section 4, the tests for classical, context-sensitive and innermost rewriting are evaluated. A discussion on the relationship between freezing and other related techniques concludes the paper. 2 Preliminaries The following is a brief summary of the most important notations we use later. We refer to <ref> [DJ91, DJ90] </ref> for more details. Let T (F;X) denote the set of terms over operators F (with arity A r) and variables X. We use f; g ranging over operators. Note that we may use f; g for some specific operators in certain parts of the paper.
Reference: [Ges91] <author> A. Geser. </author> <title> Relative termination. Ulmer Informatik-Berichte Nr. </title> <type> 91-03, </type> <institution> Fach-bereich Informatik, Universitat Ulm, Ulm (Germany), </institution> <year> 1991. </year>
Reference-contexts: A proof for the correctness of this approach can be found in <ref> [Ges91] </ref>. The next short example of M. Ferreira & H. Zantema demonstrates an application of this approach.
Reference: [Hul80] <author> J.-M. Hullot. </author> <title> Canonical forms and unification. </title> <booktitle> In 5th CADE, volume 87 of LNCS, </booktitle> <pages> pages 318-334, </pages> <year> 1980. </year>
Reference-contexts: t 2 T (F;X) and the following property (a kind of commutation [BD86]) holds: for all t; t 1 ; t 0 with there exists t 0 1 with t 0 ~ H + H H Hj R ~ For this fundamental scenario, in [Xi98] a narrowing-like calculus (see, e.g., <ref> [Hul80] </ref> for narrowing) is presented for generating ~.
Reference: [KL80] <author> S. Kamin and J.-J. Levy. </author> <title> Attempts for generalizing the recursive path order-ings. </title> <institution> Urbana (Illinois), </institution> <type> Unpublished Manuscript, </type> <month> February </month> <year> 1980. </year>
Reference-contexts: There exist various reduction orderings, most of them are simplification or-derings having the so-called subterm property (where a term is greater than each of its proper subterms). The recursive (and lexicographic) path ordering <ref> [Der82, KL80] </ref> is one of the most well-known simplification orderings. We refer to [Der87, Ste95b, DJ90] for surveys on reduction and simplification orderings, and on term rewriting in general. <p> A TRS R is left-linear if the left-hand side of each rule of R is linear. We write hF ; Ri for a TRS R over F . One of the most well-known and widely used reduction orderings is the recursive path ordering RPOS with status <ref> [Der82, KL80] </ref>. The status t of an operator f determines the order according to which the arguments of F are compared. <p> The exponent `t (f )' in ` t (f) O ' denotes the extension of any ordering O wrt. the status t (f ) of the operator f . Definition 1 <ref> [Der82, KL80] </ref>. Let % be a quasi-precedence (a quasi-ordering on F) and t be a status function on F.
Reference: [Luc95] <author> S. Lucas. </author> <title> Fundamentals of context-sensitive rewriting. </title> <booktitle> In 22nd Seminar on Current Trends in Theory and Practice of Informatics, volume 1012 of LNCS, </booktitle> <pages> pages 405-412, </pages> <year> 1995. </year>
Reference-contexts: Besides classical (unconditional) rewriting, we show that modifications of freezing can also be applied to context-sensitive rewriting and innermost rewriting. In context-sensitive rewriting, reduction is not allowed inside some fixed arguments of some operators <ref> [Luc95] </ref>. Innermost rewriting admits for a reduction only if no reduction on a proper subterm is possible. The new representation of freezing directly leads to an implementation in Standard ML of New Jersey which allows for a detailed evaluation of the practical power of freezing.
Reference: [RW69] <author> G. A. Robinson and L. Wos. </author> <title> Paramodulation and theorem proving in first-order theories with equality. </title> <journal> Machine Intelligence, </journal> <volume> 4 </volume> <pages> 135-150, </pages> <year> 1969. </year>
Reference-contexts: 1 Introduction In theorem proving, the search for proofs can be improved drastically by taking special care of the intended semantics of frequently occurring predicates like equality. Paramodulation <ref> [RW69] </ref> is one of the most important calculi for dealing with equality which allow for a realization of the principle of `replacement of equals by equals' in an efficient way.
Reference: [Ste94] <author> J. Steinbach. </author> <title> Generating polynomial orderings. </title> <journal> IPL, </journal> <volume> 49 </volume> <pages> 85-93, </pages> <year> 1994. </year>
Reference: [Ste95a] <author> J. Steinbach. </author> <title> Automatic termination proofs with transformation orderings. </title> <booktitle> In 6th RTA, volume 914 of LNCS, </booktitle> <pages> pages 11-25, </pages> <year> 1995. </year>
Reference-contexts: Simplification order-ings can easily and efficiently be applied, however, because of the subterm property, their power is also strongly restricted. Other reduction orderings have been developed which are more powerful than simplification orderings, but for which their application represents a very hard problem (see, e.g., [BL90, Zan95]). Besides <ref> [AG97, Ste95a] </ref>, in [Xi98] a technique called freezing is introduced which principally solves both problems: it is powerful and as we will show in this paper, it can efficiently be applied in practice using a heuristic-based algorithm. <p> Evaluation We experimented with a large set of examples, many of which can be proven automatically. About 30 examples can be found via the previously listed pointer. In addition, all problems of <ref> [Ste95a] </ref> can be shown to be terminating. 4.2 Context-Sensitive Rewriting The application of the freezing technique to context-sensitive rewriting is based on the following observation. Let f; g 2 F with Ar (f ) &gt; 0 and m 1. <p> We have extensively tested the new technique by applying it to non-trivial examples occurring in the literature. The experimental results strongly emphasize the practical relevance of freezing. For example, all problems of <ref> [Ste95a] </ref> can be shown to be terminating and all examples in [Zan97] which can be handled by the transformation presented there. <p> Unlike the TO, the construction is direct and avoids local properties (such as confluence and cooperation) and a completion-like procedure. Automatic generation of TO of <ref> [Ste95a] </ref>: The freezing of operators (see step (1) of Algorithm 1) closely resembles the projection technique of [Ste95a]. However, in contrast to [Ste95a], we do not have to add the projection to the final TRS and to satisfy confluence and cooperation. <p> Unlike the TO, the construction is direct and avoids local properties (such as confluence and cooperation) and a completion-like procedure. Automatic generation of TO of <ref> [Ste95a] </ref>: The freezing of operators (see step (1) of Algorithm 1) closely resembles the projection technique of [Ste95a]. However, in contrast to [Ste95a], we do not have to add the projection to the final TRS and to satisfy confluence and cooperation. More details about the relationship between our technique and other similar ones can be found in [Xi98] 6 . <p> Unlike the TO, the construction is direct and avoids local properties (such as confluence and cooperation) and a completion-like procedure. Automatic generation of TO of <ref> [Ste95a] </ref>: The freezing of operators (see step (1) of Algorithm 1) closely resembles the projection technique of [Ste95a]. However, in contrast to [Ste95a], we do not have to add the projection to the final TRS and to satisfy confluence and cooperation. More details about the relationship between our technique and other similar ones can be found in [Xi98] 6 . <p> However, this presupposes that an automatic technique for generating is available 8 . The comparison of our technique with that of <ref> [Ste95a] </ref> from a theoretic point of view could be interesting in order to weaken the additional conditions required for transformation orderings.
Reference: [Ste95b] <author> J. Steinbach. </author> <title> Simplification orderings History of results. </title> <journal> Fundamenta In-formaticae, </journal> <volume> 24 </volume> <pages> 47-87, </pages> <year> 1995. </year>
Reference-contexts: There exist various reduction orderings, most of them are simplification or-derings having the so-called subterm property (where a term is greater than each of its proper subterms). The recursive (and lexicographic) path ordering [Der82, KL80] is one of the most well-known simplification orderings. We refer to <ref> [Der87, Ste95b, DJ90] </ref> for surveys on reduction and simplification orderings, and on term rewriting in general. <p> Therefore, the original TRS R is terminating. 3.5 About Implementation We have finished a prototype implementation of the freezing technique in Standard ML of New Jersey. The basic termination prover in the implementation is based upon the RPOS as described in <ref> [Ste95b] </ref>. While largely adopting the minimal extender approach in [DF85], we also added some modifications so that we can handle all possible lexicographic types of status. The basic strategy is to assign a partial lexicographic status to an operator.
Reference: [Xi98] <author> H. </author> <title> Xi. Towards automated termination proofs through "freezing". </title> <booktitle> In 9th RTA, </booktitle> <publisher> LNCS, </publisher> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: Other reduction orderings have been developed which are more powerful than simplification orderings, but for which their application represents a very hard problem (see, e.g., [BL90, Zan95]). Besides [AG97, Ste95a], in <ref> [Xi98] </ref> a technique called freezing is introduced which principally solves both problems: it is powerful and as we will show in this paper, it can efficiently be applied in practice using a heuristic-based algorithm. <p> It transforms a given term rewriting system (TRS) into a family of TRSs such that the termination of any TRS in this family implies the termination of the original TRS. The transformation process is proved to be terminating for all left-linear TRSs <ref> [Xi98] </ref>. In [Xi98], the theoretical fundamentals of freezing including the correctness proof are presented, and it is applied by hand to a few examples. However, for an efficient use, the freezing technique as defined in [Xi98] is impractical since the values for too many parameters must be selected from extremely large <p> It transforms a given term rewriting system (TRS) into a family of TRSs such that the termination of any TRS in this family implies the termination of the original TRS. The transformation process is proved to be terminating for all left-linear TRSs <ref> [Xi98] </ref>. In [Xi98], the theoretical fundamentals of freezing including the correctness proof are presented, and it is applied by hand to a few examples. However, for an efficient use, the freezing technique as defined in [Xi98] is impractical since the values for too many parameters must be selected from extremely large sets. <p> The transformation process is proved to be terminating for all left-linear TRSs <ref> [Xi98] </ref>. In [Xi98], the theoretical fundamentals of freezing including the correctness proof are presented, and it is applied by hand to a few examples. However, for an efficient use, the freezing technique as defined in [Xi98] is impractical since the values for too many parameters must be selected from extremely large sets. Thus, detailed knowledge about the semantics of the operators and the TRS is necessary. <p> The results for classical, context-sensitive as well as innermost term rewriting strongly illustrate and emphasize the practical relevance of freezing. The paper is organized as follows. After briefly presenting some necessary notations, the freezing technique is the subject of Section 3. An operational representation of <ref> [Xi98] </ref>, some heuristics for controlling the procedure, a detailed example and a brief description of an implementation are given. In Section 4, the tests for classical, context-sensitive and innermost rewriting are evaluated. <p> First of all, we recapitulate the theoretical concepts as introduced in <ref> [Xi98] </ref>, which is available as http://www.cs.cmu.edu/~hwxi/freeze_papers/rta98.ps. Subsequently, we give for the first time a more operational representation of it which is, in contrast to that of [Xi98], (more) suitable for an implementation. However, for an efficient practical application, one has to further reduce the search space of this procedure. <p> First of all, we recapitulate the theoretical concepts as introduced in <ref> [Xi98] </ref>, which is available as http://www.cs.cmu.edu/~hwxi/freeze_papers/rta98.ps. Subsequently, we give for the first time a more operational representation of it which is, in contrast to that of [Xi98], (more) suitable for an implementation. However, for an efficient practical application, one has to further reduce the search space of this procedure. This is done in Subsection 3.3 by means of heuristics. <p> Currently, we already have a prototype implementation of the new technique a description of which can be found at the end of this section. 3.1 Motivation Unlike simplification orderings, the freezing technique of <ref> [Xi98] </ref> can deal with non-simply terminating TRSs. The basic idea is to transform a TRS hF ; Ri, the termination of which must be proved, into a so-called frozen TRS hF fl ; R fl i the termination of which may be easier to show. <p> if t ~ t for all t 2 T (F;X) and the following property (a kind of commutation [BD86]) holds: for all t; t 1 ; t 0 with there exists t 0 1 with t 0 ~ H + H H Hj R ~ For this fundamental scenario, in <ref> [Xi98] </ref> a narrowing-like calculus (see, e.g., [Hul80] for narrowing) is presented for generating ~. <p> However, for using the above property in (iii), in general R fl must be extended. This is done, roughly speaking, by considering all possible term-triplets t; t 1 ; t 0 of the diagram in (iii) and by potentially extending R fl so that the required property holds. In <ref> [Xi98] </ref> it is proved that only finitely many term-triplets must be checked for left-linear TRSs hF ; Ri. 3.2 The Algorithm This subsection deals with the adaptation of the freezing technique of [Xi98] to practical purposes. <p> In <ref> [Xi98] </ref> it is proved that only finitely many term-triplets must be checked for left-linear TRSs hF ; Ri. 3.2 The Algorithm This subsection deals with the adaptation of the freezing technique of [Xi98] to practical purposes. In order to develop such a procedure we investigate the three steps (i), (ii), (iii) of the former subsection and give a description which is (more) close to implementation by realizing the freezing relation of Definition 2. <p> Note that Proj [f; g; m; fg](t) is defined to be ft fl jt ~ t fl g and that we will drop the `f; g; m; fg' in these notations if f; g; m and fg are clear from context. In <ref> [Xi98] </ref>, the master-(f; g; m; fg)-frozen version R fl of a TRS R is formally defined. The multi-(f; g; m; fg)-frozen version R m of R is R m := fl ! Proj (r) j l ! r 2 R fl g. <p> Further, R 1 is called a (f; g; m; fg)-frozen version of R, if for every l ! S r 2 R m , there exists one l ! r 2 R 1 such that r 2 S r . By Theorem 11 in <ref> [Xi98] </ref>, we can readily justify that R is terminating if all the rules in R m can be oriented under some reduction ordering. Before we continue describing the algorithm, a simple example shall illustrate the generation of a master version. <p> an n-level frozen version 4 which 4 We say that R is a 0-level frozen version of itself and R n+1 is an (n+1)-level frozen version of R if there exists a TRS R n such that R n+1 is an (f; g; m; f g)-frozen version of R n <ref> [Xi98] </ref>. can be proven by a reduction ordering O then R fl also has an (n 1)-level frozen version which can be proven by O . Therefore, instead of continuing with the original TRS, we may continue with its master frozen version. <p> For the interested reader, we also point out that many other examples are available at http://www.cs.cmu.edu/~hwxi/freeze_examples/. 4.1 Classical Rewriting The correctness of the freezing technique when applied to a left-linear TRS is proven in <ref> [Xi98] </ref>. Example 1. <p> 5 Note that R is not terminating since we have the infinite rewriting sequence f (0; 1; g (0; 1)) ! h (g (0; 1); g (0; 1)) ! h (0; g (0; 1)) ! f (0; g (0; 1); g (0; 1)) ! 5 Conclusion The freezing technique of <ref> [Xi98] </ref> is an effective transformation method and thus, can be used to orient equations and to show termination of classical TRSs. It can, in contrast to simplification orderings, deal with embedding rules like f (f (x)) ! f (g (f (x))). <p> The experimental results strongly emphasize the practical relevance of freezing. For example, all problems of [Ste95a] can be shown to be terminating and all examples in [Zan97] which can be handled by the transformation presented there. Our work is closely related to the following techniques: Freezing of <ref> [Xi98] </ref>: Roughly speaking, we introduce the practical realization of [Xi98] and the adaptation of it to context-sensitive and innermost rewriting. Transformation orderings of [BL90, BD86]: Like transformation orderings TO, we construct from a given TRS a transformed (`frozen') TRS the termination of which may be easier to prove. <p> For example, all problems of [Ste95a] can be shown to be terminating and all examples in [Zan97] which can be handled by the transformation presented there. Our work is closely related to the following techniques: Freezing of <ref> [Xi98] </ref>: Roughly speaking, we introduce the practical realization of [Xi98] and the adaptation of it to context-sensitive and innermost rewriting. Transformation orderings of [BL90, BD86]: Like transformation orderings TO, we construct from a given TRS a transformed (`frozen') TRS the termination of which may be easier to prove. <p> However, in contrast to [Ste95a], we do not have to add the projection to the final TRS and to satisfy confluence and cooperation. More details about the relationship between our technique and other similar ones can be found in <ref> [Xi98] </ref> 6 . Future research possibly includes the following directions: The extension of the set of heuristics presented in Subsection 3.3 certainly leads to more successful termination proofs 7 . Freezing should be generalized so that it can also treat with non-left-linear TRSs.
Reference: [Zan95] <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <journal> Funda-menta Informaticae, </journal> <volume> 24 </volume> <pages> 89-105, </pages> <year> 1995. </year>
Reference-contexts: Simplification order-ings can easily and efficiently be applied, however, because of the subterm property, their power is also strongly restricted. Other reduction orderings have been developed which are more powerful than simplification orderings, but for which their application represents a very hard problem (see, e.g., <ref> [BL90, Zan95] </ref>). Besides [AG97, Ste95a], in [Xi98] a technique called freezing is introduced which principally solves both problems: it is powerful and as we will show in this paper, it can efficiently be applied in practice using a heuristic-based algorithm. <p> Further, the test set should be extended. For proving termination of the frozen TRSs we exclusively use the RPOS. Obviously, other classical orderings (e.g., polynomial orderings) would drastically improve the rate of successful termination proofs with freezing. 6 There is a close relationship between freezing and semantic labelling <ref> [Zan95] </ref> which has to be examined in detail. 7 Especially, the problem of the RPOS to deal with large TRSs should be solved. However, this presupposes that an automatic technique for generating is available 8 .
Reference: [Zan97] <author> H. Zantema. </author> <title> Termination of context-sensitive rewriting. </title> <booktitle> In 8th RTA, volume 1103 of LNCS, </booktitle> <year> 1997. </year> <title> 8 In the case of polynomial orderings, this is a very complex problem (see [Ste94]). This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Intuitively, the replacement map describes the arguments in which rewriting is allowed (see <ref> [Zan97] </ref>). Thus, the usual rewriting relation ! R is defined as ! R =,! R; where (f ) = f1; : : : ; A r (f )g for each f2F . The closures ! fl R and ! + R are defined as usual. <p> We now illustrate this point by the following examples. Example 3. The TRS sel (0; cons (x; y)) ! x sel (s (x); cons (y; z)) ! sel (x; z) f rom (x) ! cons (x; f rom (s (x))) is taken from <ref> [Zan97] </ref> where (cons) = (s) = (f rom) = f1g and (sel) = f1; 2g. <p> Example 4. The following simple TRS is also taken from <ref> [Zan97] </ref> and eludes the transformation method presented there. Let TRS R consist of the rule f (x) ! g (h (f (x))) where (g) = (h) = ; and (f ) = f1g. <p> Evaluation We experimented with 8 examples, proving 5 of them. All problems of <ref> [Zan97] </ref> which can be handled by the transformation presented there have been shown to be terminating. 4.3 Innermost Rewriting We sketch an approach to applying the freezing technique to innermost rewriting. <p> We have extensively tested the new technique by applying it to non-trivial examples occurring in the literature. The experimental results strongly emphasize the practical relevance of freezing. For example, all problems of [Ste95a] can be shown to be terminating and all examples in <ref> [Zan97] </ref> which can be handled by the transformation presented there. Our work is closely related to the following techniques: Freezing of [Xi98]: Roughly speaking, we introduce the practical realization of [Xi98] and the adaptation of it to context-sensitive and innermost rewriting.
References-found: 20

