URL: ftp://ftp.eecs.umich.edu/groups/gasm/peval.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: An O*ine Partial Evaluator for Evolving Algebras  
Author: James K. Huggins 
Abstract: We describe the architecture of an evolving algebra partial evaluator, a program which specializes an evolving algebra with respect to a portion of its input. We discuss the particular analysis, specialization, and optimization techniques used and show an example of its use.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: following: if K=k 1 then K := k 2 , . . . endif if K=k 2 then a := c, K := k 3 , . . . endif To make optimizations such as the above more systematically, we perform a live code analysis (similar to one described in <ref> [1] </ref>).
Reference: [2] <author> E. Borger. </author> <title> "Annotated Bibliography on Evolving Algebras." </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: The result is a simple methodology for describing simple abstract machines which correspond to algorithms. Plentiful examples exist in the literature of evolving applied to different types of algorithms (see <ref> [2] </ref> for a current listing). The language of evolving algebras is extremely simple, consisting chiefly of assignment and "if-then" statements. Those familiar with the partial evaluation literature will see similarites between evolving algebras and Jones' flowchart language [7], although evolving algebras (or ealgebras) are massively parallel.
Reference: [3] <author> Y. Gurevich. </author> <title> "Evolving Algebras 1993: Lipari Guide", in Specification and Validation Methods, </title> <editor> ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Here we describe in greater detail the structure of an o*ine partial evaluator for ealgebras. 2 Sequential Evolving Algebras Sequential ealgebras are described fully in [4]; a more formal description of ealgebras (including parallel and distributed models) can be found in <ref> [3] </ref>. Here we recall the notions behind basic sequential ealgebras. Every ealgebra has a vocabulary (or signature); that is, a finite collection of function names, each of a fixed arity.
Reference: [4] <author> Y. Gurevich. </author> <title> "Evolving algebras: A tutorial introduction, </title> " <journal> Bulletin of EATCS, </journal> <volume> 43 </volume> <pages> 264-284, </pages> <year> 1991. </year> <note> Slightly revised and reprinted in Current Trends in Theoretical Computer Science, </note> <editor> Eds. G. Rozenberg and A. Salomaa, </editor> <publisher> World Scientific, </publisher> <year> 1993, </year> <pages> 266-292. </pages>
Reference-contexts: Here we describe in greater detail the structure of an o*ine partial evaluator for ealgebras. 2 Sequential Evolving Algebras Sequential ealgebras are described fully in <ref> [4] </ref>; a more formal description of ealgebras (including parallel and distributed models) can be found in [3]. Here we recall the notions behind basic sequential ealgebras. Every ealgebra has a vocabulary (or signature); that is, a finite collection of function names, each of a fixed arity.
Reference: [5] <author> Y. Gurevich and J.K. Huggins, </author> <title> "Evolving Algebras and Partial Evaluation", </title> <booktitle> in IFIP 13th World Computing Congress 1994, Volume 1: Technology and Foundations, </booktitle> <editor> eds. B. Pehrson and I. Simon, </editor> <publisher> Elsevier, Amsterdam, </publisher> <pages> 587-592. </pages>
Reference-contexts: The language of evolving algebras is extremely simple, consisting chiefly of assignment and "if-then" statements. Those familiar with the partial evaluation literature will see similarites between evolving algebras and Jones' flowchart language [7], although evolving algebras (or ealgebras) are massively parallel. In <ref> [5] </ref>, we introduced the idea of a partial evaluator for ealgebras. Ealgebras have often been used to describe interpreters for programming languages; being able to specialize these interpreters with respect to source programs would allow one to automatically generate ealgebras for specific programs. <p> It is admittedly cryptic. In [6], we presented an ealgebra interpreter for the C programming language. As a test, we ran our partial evaluator on our algebra for C, specializing it with respect to strcpy (). We reported in <ref> [5] </ref> the results of this test.
Reference: [6] <author> Y. Gurevich and J.K. Huggins, </author> <title> "The Semantics of the C Programming Language", </title> <booktitle> Selected papers from CSL`92 (Computer Science Logic), Springer Lecture Notes in Computer Science 702, </booktitle> <year> 1993, </year> <pages> 274-308. </pages>
Reference-contexts: Consider, for example, the following fragment of code written in C: void strcpy (char *s, char *t) while (*s++ = *t++) ; - This function copies a string from the memory location indicated by t to the memory location indicated by s. It is admittedly cryptic. In <ref> [6] </ref>, we presented an ealgebra interpreter for the C programming language. As a test, we ran our partial evaluator on our algebra for C, specializing it with respect to strcpy (). We reported in [5] the results of this test.
Reference: [7] <author> N.D. Jones, C.K. Gomard, and P. Sestoft, </author> <title> Partial Evaluation and Automatic Program Generation, </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <month> 7 </month>
Reference-contexts: The language of evolving algebras is extremely simple, consisting chiefly of assignment and "if-then" statements. Those familiar with the partial evaluation literature will see similarites between evolving algebras and Jones' flowchart language <ref> [7] </ref>, although evolving algebras (or ealgebras) are massively parallel. In [5], we introduced the idea of a partial evaluator for ealgebras. <p> Without further information about the functions in question, there is little that can be done to determine whether these functions can be safely classified as positive. <ref> [7] </ref> gives one method for resolving this question for self-dependent functions based upon well-founded partially ordered domains. We have implemented a version of this algorithm. Other resolution schemes are certainly possible and are contemplated for future versions of the analyzer. <p> We have had some success applying the self-interpreter test <ref> [7] </ref>. A self-interpreter for evolving algebras is an evolving algebra which takes another evolving algebra as input and executes it. Partially evaluating a self-interpreter with respect to a target program should yield the target program (or something quite similar).
References-found: 7

