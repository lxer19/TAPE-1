URL: ftp://ftp.cs.rpi.edu/pub/adv-prog/fmdse-tecton.ps.gz
Refering-URL: http://www.cs.rpi.edu/~musser/Tecton/
Root-URL: http://www.cs.rpi.edu
Phone: 2  
Title: The Tecton Proof System  
Author: Deepak Kapur David R. Musser and Xumin Nie 
Address: New York Albany, New York 12222  Troy, New York 12180  
Affiliation: 1 Institute for Programming and Logics Computer Science Department State University of  Computer Science Department Rensselaer Polytechnic Institute  
Abstract: The Tecton Proof System is a new verification system designed to support construction of large and complex proofs, using novel user interface methods and extensive automation. We first describe the main features of the user interface, including the use of tabular formats for ordinary logical formulas and Hoare formulas, graphical proof representations, and hypertext links between related parts of large proofs. In the area of proof automation, we describe the inference mechanisms used by the Tecton inference engine and the integration of a decision procedure for a subclass of Presburger Arithmetic into the inference mechanisms. Through its combination of user interface features and automated deduction capabilities, Tecton provides the kind of support necessary for building libraries of verified software and hardware components. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. M. Akscyn, D. L. McCracken, E. A. Yoder. "KMS: </author> <title> A Distributed Hypermedia System for Managing Knowledge in Organizations," </title> <journal> Comm. ACM 31(7): </journal> <pages> pp. </pages> <month> 820-835 (July </month> <year> 1988). </year>
Reference-contexts: To achieve this goal, Tecton provides a simple command language, a structured internal representation of proofs, and a visual representation using a hypertext system, all of which are designed to help organize and clarify the structure of large proofs. A hypertext system, Knowledge Management System (KMS) <ref> [1] </ref>, is the basis of Tecton's front-end for user interactions and displaying graphical representations of proofs. For automation of many proof steps, Tecton uses inference mechanisms such as reduction, case analysis, generalization, and induction from the Rewrite Rule Laboratory (RRL) [13, 14]. <p> Links and procedural attachment capabilities in hypertext systems support design and implementation of an efficient and convenient user interface; they can of course also be used to structure on-line documentation. The user interface of Tecton is implemented in a commercial hypertext system, Knowledge Management System (KMS) <ref> [1] </ref>. The functions of the user interface are to process commands and to present proofs graphically. <p> The design of the Tecton user interface follows closely the style of the KMS user interface, based on the direct manipulation paradigm and the three-button mouse <ref> [1] </ref>. In a sense, the user interface is an extension of KMS functionality using its Action Language.
Reference: [2] <author> R. S. Boyer and J S. Moore, </author> <title> "Integrating Decision Procedures into Heuristic Theorem Provers: A Case Study of Linear Arithmetic," </title> <booktitle> Machine Intelligence 11 (1988) 83-157. </booktitle>
Reference-contexts: The subclass decided consists of Presburger formulas that, when placed in prenex form, contain only universal quantifiers. The decision problem on this class of Presburger formulas has been considered before [20], mostly in isolation. Boyer and Moore incorporated a similar rational-based procedure into their heuristic theorem prover <ref> [2] </ref>. Our implementation is heavily influenced by the work of Boyer and Moore. In particular, we became aware of many difficult issues by studying [2]. We call the procedure the linear procedure. The linear procedure and the reduction mechanism use each other as mutually recursive procedures. <p> Boyer and Moore incorporated a similar rational-based procedure into their heuristic theorem prover <ref> [2] </ref>. Our implementation is heavily influenced by the work of Boyer and Moore. In particular, we became aware of many difficult issues by studying [2]. We call the procedure the linear procedure. The linear procedure and the reduction mechanism use each other as mutually recursive procedures.
Reference: [3] <institution> Communications of the ACM, </institution> <month> 31(7) (July </month> <year> 1988). </year>
Reference-contexts: The theorems and lemmas used in proofs are not readily available with the proofs and have to be looked up in an often large list of mostly irrelevant theorems and lemmas. Most systems still use a teletype style interface. We believe that hypertext technology <ref> [3, 4] </ref> provides an excellent set of tools for dealing with these problems. The basic idea of hypertext is to associate ob-jects in a database with windows, or with text or icons within windows, and to provide links between objects.
Reference: [4] <author> J. Conklin, </author> <title> "Hypertext: An Introduction and Survey," </title> <booktitle> IEEE Computer 2(9): </booktitle> <pages> pp. </pages> <month> 17-41 </month> <year> (1987). </year>
Reference-contexts: The theorems and lemmas used in proofs are not readily available with the proofs and have to be looked up in an often large list of mostly irrelevant theorems and lemmas. Most systems still use a teletype style interface. We believe that hypertext technology <ref> [3, 4] </ref> provides an excellent set of tools for dealing with these problems. The basic idea of hypertext is to associate ob-jects in a database with windows, or with text or icons within windows, and to provide links between objects.
Reference: [5] <author> N. Dershowitz, </author> <title> "Termination of rewriting", </title> <journal> J. </journal> <note> Symbolic Computation 3: pp 69-116 (1987). </note>
Reference-contexts: Rewrite rules are formed by Tecton using a term ordering to determine which side of an equation to take as the left hand side of a rule. The ordering used is called lexicographic recursive path ordering (lrpo) <ref> [5] </ref>. Additional rewrite rules may be generated by Tecton using a variant of the Knuth-Bendix procedure (Tecton includes implementations of several variants). Also built into reduce are transformations and simplifications based on the logical axioms used by Tecton. Use of these transformations is not indicated on the inference node.
Reference: [6] <author> R. W. Erickson and D.R. Musser, </author> <title> "The AFFIRM Theorem Prover: Proof Forests and Management of Large Proofs," </title> <booktitle> 5th Conference on Automated Deduction, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 87, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Main features of Tecton In Tecton, a proof is represented as a goal/subgoal tree, allowing easy identification of both the structure of the proof (how goals relate to each other) and the details of how each inference step depends on other information given previously (such as axioms and other theorems) <ref> [6] </ref>. Tecton can explore different paths of inference steps in searching for a proof, both in its automatic mode and with interactive guidance from the user using the command language.
Reference: [7] <author> M. A. Ellis and B. Stroustrup, </author> <title> The Annotated C++ Reference Manual, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [8] <author> Hoare, C. A. R., </author> <title> "An Axiomatic Basis for Computer Programming," </title> <journal> Comm. </journal> <note> ACM 12 (10) (1969) 576-583. </note>
Reference-contexts: Tecton makes a natural extension of tree-structured proofs to represent proofs of properties of programs <ref> [8] </ref>. Proof goals may be Hoare formulas as well as ordinary logical formulas, and Hoare-style proof rules for programming language constructs are applied to produce subgoals [17]. <p> But Tecton also employs "Hoare formulas" <ref> [8] </ref>, which specify the dynamic behavior of computer programs by relating program parts to ordinary logical formulas. Logical formulas are usually expressed in Tecton as tables. Ordinary logical formulas are displayed as two column tables.
Reference: [9] <author> D. Kapur and D. R. Musser, Tecton: </author> <title> a framework for specifying and verifying generic system components, </title> <institution> Rensselaer Polytechnic Institute Computer Science Department TR 92-20 (1992). </institution>
Reference-contexts: The language, based in part on a much earlier but incomplete description of a high-level specification language (with the same name and goals) [11, 12], and some of the main proof issues are illustrated in <ref> [9] </ref> with an extended example of a behavioral and structural description of a carry-lookahead adder circuit, with the circuit realization given in terms of a generic parallel-prefix circuit. We have also implemented and are currently experimenting with a simple proof command language. Acknowledgments.
Reference: [10] <author> D. Kapur, D.R. Musser and X. Nie, </author> <title> "The Tecton Proof System: Introduction and User's Guide", Institute for Programming and Logic, </title> <institution> State University of New York (1991). </institution>
Reference-contexts: In addition to the rules given below, there are inference rules for other linguistic constructs such as declare and release statements, abort statement, null statement, nondeterministic choice statement and exchange statement. Interested readers can consult <ref> [10] </ref> for details. 4.1.1 Assignment Let x 1 ; : : : ; x n be distinct simple identifiers and P x 1 ;:::;x n e 1 ;:::;e n stand for the result of simultaneously substituting each e i for all free occurrences of x i in P .
Reference: [11] <author> D. Kapur, D. R. Musser, and A. A. Stepanov, </author> <title> "Operators and algebraic structures," </title> <booktitle> Proc. of Conference on Functional Programming Languages and Computer Architecture, </booktitle> <address> Portsmouth, New Hampshire (1981) </address>
Reference-contexts: The language, based in part on a much earlier but incomplete description of a high-level specification language (with the same name and goals) <ref> [11, 12] </ref>, and some of the main proof issues are illustrated in [9] with an extended example of a behavioral and structural description of a carry-lookahead adder circuit, with the circuit realization given in terms of a generic parallel-prefix circuit.
Reference: [12] <author> D. Kapur, D. R. Musser, and A. A. Stepanov, "Tecton: </author> <title> a language for manipulating generic objects," </title> <booktitle> Proc. of Program Specification Workshop, </booktitle> <institution> University of Aarhus, Denmark, </institution> <month> August </month> <year> 1981, </year> <note> Lecture Notes in Computer Science, Springer-Verlag, Vol. 134 (1982). </note>
Reference-contexts: The language, based in part on a much earlier but incomplete description of a high-level specification language (with the same name and goals) <ref> [11, 12] </ref>, and some of the main proof issues are illustrated in [9] with an extended example of a behavioral and structural description of a carry-lookahead adder circuit, with the circuit realization given in terms of a generic parallel-prefix circuit.
Reference: [13] <author> D. Kapur and H. Zhang, RRL: </author> <title> A Rewrite Rule Laboratory|User's Manual, General Electric Corporate Research and Development Report, </title> <address> Sch-enectady, NY (1987). </address>
Reference-contexts: A hypertext system, Knowledge Management System (KMS) [1], is the basis of Tecton's front-end for user interactions and displaying graphical representations of proofs. For automation of many proof steps, Tecton uses inference mechanisms such as reduction, case analysis, generalization, and induction from the Rewrite Rule Laboratory (RRL) <ref> [13, 14] </ref>. Into these capabilities we have recently integrated a decision procedure for a subclass of Presburger arithmetic [20].
Reference: [14] <author> D. Kapur and H. Zhang, </author> <title> "An Overview of RRL (Rewrite Rule Laboratory)," </title> <booktitle> Proc. of Third International Conf. of Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, North Carolina, </address> <year> (1989). </year>
Reference-contexts: A hypertext system, Knowledge Management System (KMS) [1], is the basis of Tecton's front-end for user interactions and displaying graphical representations of proofs. For automation of many proof steps, Tecton uses inference mechanisms such as reduction, case analysis, generalization, and induction from the Rewrite Rule Laboratory (RRL) <ref> [13, 14] </ref>. Into these capabilities we have recently integrated a decision procedure for a subclass of Presburger arithmetic [20].
Reference: [15] <author> T. Kaufl, </author> <title> "Reasoning about Systems of Linear Inequalities," </title> <booktitle> Proceedings of 9th International Conference on Automated Deduction 563-572, </booktitle> <address> Ar-gonne, </address> <month> Ilinois </month> <year> (1988). </year>
Reference-contexts: This close interaction makes our procedure different from and more useful than stand-alone procedures. The linear procedure also interacts with other parts of the inference engine by exchanging integer equality terms between them. If the linear procedure derives an integer equality <ref> [15] </ref>, it will pass the equality to the Tecton inference engine. Any equality among integer terms derived by the equational reasoning component of Tecton inference engine is also passed to the linear procedure.
Reference: [16] <author> R.A. Kemmerer, </author> <title> "Verification Assessment Study Final Report", Vol. </title> <type> 1 - 5, </type> <institution> National Computer Security Center, Fort George G. Meade, Maryland. </institution>
Reference-contexts: Most of the time, proof attempts exist in a partially completed state, and the user spends most of his or her effort trying to comprehend the current state of the attempt in order to guide the system towards a complete proof <ref> [16] </ref>. Multiple goals with incomplete proofs typically coexist, and it may sometimes be useful to maintain several distinct attempts to prove the same goal. It is thus important that a verification system provide facilities to maintain theorems and lemmas and to visualize and manage proofs.
Reference: [17] <author> D.R. Musser, </author> <title> Elements of a Pragmatic Approach to Program Verification, </title> <institution> Rensselaer Polytechnic Institute Computer Science Department TR 89-24 (1989). </institution>
Reference-contexts: Tecton makes a natural extension of tree-structured proofs to represent proofs of properties of programs [8]. Proof goals may be Hoare formulas as well as ordinary logical formulas, and Hoare-style proof rules for programming language constructs are applied to produce subgoals <ref> [17] </ref>. This process is repeated until the leaves of the proof tree are ordinary logical formulas (to which inference rules of ordinary first-order logic are then applied).
Reference: [18] <author> D. R. Musser and A.A. Stepanov, </author> <title> The Ada Generic Library: Linear List Processing Packages, </title> <publisher> Springer-Verlag Compass Series (1989). </publisher>
Reference-contexts: A main goal of Tecton is to aid the user in finding proofs and in understanding proofs in order to reuse parts of them, for the purpose of building libraries of verified software or hardware components <ref> [18] </ref>. To achieve this goal, Tecton provides a simple command language, a structured internal representation of proofs, and a visual representation using a hypertext system, all of which are designed to help organize and clarify the structure of large proofs. <p> These proofs make extensive use of the integer decision procedure. A few examples of simple algorithms that manipulate abstract data types, such as concatenation of queues, have also been done, and we have recently begun to experiment with specifications and proofs about some of the generic algorithms in <ref> [18] </ref>. 3 Tecton user interface The task of verifying the correctness or other semantic properties of computer programs or hardware designs often involves large, complex proofs, requiring the statement and proof of many lemmas and theorems.
Reference: [19] <author> G. Nelson and D.C. Oppen, </author> <title> "Simplification by Cooperating Decision Procedures," </title> <booktitle> ACM Transactions on Programming Languages and Systems 1 (2) (1979) 245 - 257. </booktitle>
Reference-contexts: Any equality among integer terms derived by the equational reasoning component of Tecton inference engine is also passed to the linear procedure. This interaction by equality sharing is an extremely powerful method to combine different decision procedures <ref> [19] </ref> and has made the linear procedure more useful. 5 Concluding remarks In this paper we have described some of the novel features of the Tecton Proof System in the areas of "proof visualization" and proof automation.
Reference: [20] <author> R.E. Shostak, </author> <title> "A Practical Decision Procedure for Arithmetic with Function Symbols," </title> <note> Journal of ACM 26(2) (1979) 351-360. </note>
Reference-contexts: For automation of many proof steps, Tecton uses inference mechanisms such as reduction, case analysis, generalization, and induction from the Rewrite Rule Laboratory (RRL) [13, 14]. Into these capabilities we have recently integrated a decision procedure for a subclass of Presburger arithmetic <ref> [20] </ref>. <p> Tecton has a built-in decision procedure for a subclass of Presburger arithmetic to provide additional capability for integers. This procedure is incorporated into the inference mechanisms of the Tecton inference engine, unlike the stand-alone procedures presented in the literature <ref> [20] </ref>. This built-in procedure eliminates the need to explicitly state some axioms for integers, such as transitivity axioms, the use of which is hard to control. Proofs obtained using the procedure are more compact and natural. <p> The subclass decided consists of Presburger formulas that, when placed in prenex form, contain only universal quantifiers. The decision problem on this class of Presburger formulas has been considered before <ref> [20] </ref>, mostly in isolation. Boyer and Moore incorporated a similar rational-based procedure into their heuristic theorem prover [2]. Our implementation is heavily influenced by the work of Boyer and Moore. In particular, we became aware of many difficult issues by studying [2]. We call the procedure the linear procedure.
Reference: [21] <author> H. Zhang, D. Kapur, </author> <title> and M.S. Krishnamoorthy, "A Mechanizable Induction Principle for Equational Specifications," </title> <booktitle> Proc. of Ninth International Conference on Automated Deduction (CADE-9), </booktitle> <address> Argonne, IL (1988). </address>
Reference-contexts: The split mechanism eliminates boolean operators, _ and ^, in the goals by generating necessary subgoals. For example, given a goal A C 1 : : : the split mechanism produces n subgoals A C i 4.2.3 Induction Tecton uses the cover set induction mechanism <ref> [21] </ref>. Consider a subterm occurring in a goal G. Consider the definition, by equations, of the outermost function symbol of the subterm. Left sides of the rules in the definition constitute a cover set.
References-found: 21

