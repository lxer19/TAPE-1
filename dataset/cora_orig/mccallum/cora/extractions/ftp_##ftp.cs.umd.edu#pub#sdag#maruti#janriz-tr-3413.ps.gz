URL: ftp://ftp.cs.umd.edu/pub/sdag/maruti/janriz-tr-3413.ps.gz
Refering-URL: ftp://ftp.cs.umd.edu/pub/sdag/maruti/index.html
Root-URL: 
Title: Implementation of the MPL Compiler  
Author: Jan M. Rizzuto and James da Silva 
Date: February 14, 1995  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies Department of Computer Science University of Maryland  
Abstract: The Maruti Real-Time Operating System was developed for applications that must meet hard real-time constraints. In order to schedule real-time applications, the timing and resource requirements for the application must be determined. The development environment provided for Maruti applications consists of several stages that use various tools to assist the programmer in creating an application. By analyzing the source code provided by the programmer, these tools can extract and analyze the needed timing and resource requirements. The initial stage in development is the compilation of the source code for an application written in the Maruti Programming Language (MPL). MPL is based on the C programming language. The MPL Compiler was developed to provide support for requirement specification. This report introduces MPL and describes the implementation of the MPL Compiler. fl This work is supported in part by ONR and DARPA under contract N00014-91-C-0195 to Honeywell and Computer Science Department at the University of Maryland. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, ONR, the U.S. Government or Honeywell. Computer facilities were provided in part by NSF grant CCR-8811954. y This work is supported in part by ARPA and Philips Labs under contract DASG60-92-0055 to Department of Computer Science, University of Maryland. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Advanced Research Projects Agency, PL, or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James da Silva, Eric Nassor, Seongsoo Hong, Bao Trinh, and Olafur Gudmundsson. </author> <note> Maruti 2.0 Programmer's Manual. Unpublished. </note>
Reference-contexts: MPL is based on the C programming language, and assumes the programmer is familiar with C. MPL provides some additional constructs that are not part of standard C to allow for resource and timing specification <ref> [1] </ref>. In addition, when an MPL file is compiled, some of the resource requirements can be recognized and recorded to an output file. This output file is used as input to the integration stage, which is the next stage in the development cycle. <p> During integration, additional timing requirements may be specified. Previously, an MPL file was compiled by first running the source code through the Maruti pre-compiler, which created a C file that was then compiled using a C compiler <ref> [1] </ref>. The pre-compiler extracted the necessary information, and converted the MPL constructs that were not valid C statements into C code. This required the additional pass of the pre-compiler over the source code.
Reference: [2] <author> Manas Saksena, James da Silva, and Ashok Agrawala. </author> <title> Design and Implementation of Maruti-II. </title> <editor> In Sang H. Son, editor, </editor> <booktitle> Advances in Real-Time Systems, chapter 4. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction A real-time system requires that an application meet the timing constraints specified for it. For hard real-time, a failure to meet the specified timing constraints may result in a fatal error <ref> [2] </ref>. Timing constraints are not as critical for soft real-time. The Maruti Operating System was developed to meet the real-time constraints required by many applications. In order to schedule and run an application under Maruti, the timing and resource requirements for that application must be determined. <p> In order to schedule and run an application under Maruti, the timing and resource requirements for that application must be determined. The development environment for Maruti consists of several tools that can be used to extract and analyze these requirements <ref> [2] </ref>. The Maruti Programming Language (MPL) is a language developed to assist users in creating applications that can be run under Maruti. MPL is based on the C programming language, and assumes the programmer is familiar with C.
Reference: [3] <author> Richard Stallman. </author> <title> The GNU C compiler, version 2.5.8., Manual. Info file obtained from gcc.texi in source code distribution. </title> <type> 17 </type>
References-found: 3

