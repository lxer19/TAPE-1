URL: http://www.dfki.uni-kl.de/~vega/relfun+/rfteach.ps.gz
Refering-URL: http://www.dfki.uni-kl.de/~vega/relfun.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: boley@informatik.uni-kl.de  
Title: Coordinates for Declarative-Programming Education  
Author: Harold Boley 
Date: August 25, 1998  
Address: Box 2080, 67608 Kaiserslautern, Germany  
Affiliation: DFKI  
Abstract: In the informatics curriculum, declarative languages should (1) be used as a programming platform for established subjects such as discrete mathematics and databases. The two declarative subfields of functional and relational (logic) programming should also (2) be treated in an integrated manner. Fortunately, (1) and (2) became possible with the advent of functional-logic languages. We employ a Relfun kernel that unifies the concepts of first-order relations and functions. These are characterized by two orthogonal dimensions considered as coordinate axes: (un)directedness and (non-)determinism. A running example shows the advantages of a complete coverage and free combination of the directed ness/determinism coordinates.
Abstract-found: 1
Intro-found: 1
Reference: [BAE + 96] <author> Harold Boley, Simone Andel, Klaus Elsbernd, Michael Herfert, Mi-chael Sintek, and Werner Stein. </author> <title> RELFUN Guide: Programming with Relations and Functions Made Easy. Document D-93-12, </title> <institution> DFKI GmbH, </institution> <month> July </month> <year> 1996. </year> <note> Second, Revised Edition. </note>
Reference-contexts: Its current implementation, concentrating on integrated functional-logic concepts, orthogonal to this issue, adopts the Prolog-like sequential strategy (allowing a single-cut per clause). Both an interpreter and a compiler of the language are available <ref> [BAE + 96] </ref>. The Lisp-based Relfun interpreter has been successfully used in declarative-programming education from the advanced high-school level, for the informa-tics group of the Freiburg-Seminar, to the informatics-graduate level, at the University of Kaiserslautern. Details on semantics, extensions, applications, and implementations of the language can be found in [Bol95]. 10
Reference: [Bol95] <author> Harold Boley. </author> <title> A Tight, Practical Integration of Relations and Functions. </title> <institution> University of Kaiserslautern, Department of Computer Science, </institution> <month> November </month> <year> 1995. </year> <month> Habilitationsschrift. </month>
Reference-contexts: Fortunately, both (1) and (2) became possible with the advent of functional-logic languages such as Curry [Han97], Escher [Llo94], and Relfun <ref> [Bol95] </ref>. 1 To make this discussion concrete, an integration is developed using operatio-nal variants of well-known mathematical concepts. We employ a Relfun kernel that unifies the basic declarative concepts: first-order relations and functions. These unified operators are characterized by two orthogonal dimensions considered as coordinate axes: (un)directedness and (non-)determinism. <p> The Lisp-based Relfun interpreter has been successfully used in declarative-programming education from the advanced high-school level, for the informa-tics group of the Freiburg-Seminar, to the informatics-graduate level, at the University of Kaiserslautern. Details on semantics, extensions, applications, and implementations of the language can be found in <ref> [Bol95] </ref>. 10
Reference: [Han97] <author> Michael Hanus. </author> <title> A Unified Computation Model for Functional and Logic Programming. </title> <booktitle> In POPL'97, </booktitle> <address> Paris 1997. </address>
Reference-contexts: Moreover, as e.g. noted by [Llo94], the two declarative subfields of functional and relational (logic) programming should (2) be treated in an integrated manner, so as to avoid unnecessary duplication of educational efforts. Fortunately, both (1) and (2) became possible with the advent of functional-logic languages such as Curry <ref> [Han97] </ref>, Escher [Llo94], and Relfun [Bol95]. 1 To make this discussion concrete, an integration is developed using operatio-nal variants of well-known mathematical concepts. We employ a Relfun kernel that unifies the basic declarative concepts: first-order relations and functions.
Reference: [Llo94] <author> John W. Lloyd. </author> <booktitle> Combining Functional and Logic Programming Languages. In 1994 International Logic Programming Symposium, ILPS'94. </booktitle> <pages> 11 </pages>
Reference-contexts: In the little time available in a typical informatics curriculum, declarative languages should instead (1) be used as a programming platform for established subjects such as discrete mathematics, formal languages, program specification and correctness, databases, AI, etc. Moreover, as e.g. noted by <ref> [Llo94] </ref>, the two declarative subfields of functional and relational (logic) programming should (2) be treated in an integrated manner, so as to avoid unnecessary duplication of educational efforts. Fortunately, both (1) and (2) became possible with the advent of functional-logic languages such as Curry [Han97], Escher [Llo94], and Relfun [Bol95]. 1 <p> as e.g. noted by <ref> [Llo94] </ref>, the two declarative subfields of functional and relational (logic) programming should (2) be treated in an integrated manner, so as to avoid unnecessary duplication of educational efforts. Fortunately, both (1) and (2) became possible with the advent of functional-logic languages such as Curry [Han97], Escher [Llo94], and Relfun [Bol95]. 1 To make this discussion concrete, an integration is developed using operatio-nal variants of well-known mathematical concepts. We employ a Relfun kernel that unifies the basic declarative concepts: first-order relations and functions.
References-found: 4

