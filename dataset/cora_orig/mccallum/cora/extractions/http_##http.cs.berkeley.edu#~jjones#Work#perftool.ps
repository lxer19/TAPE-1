URL: http://http.cs.berkeley.edu/~jjones/Work/perftool.ps
Refering-URL: http://http.cs.berkeley.edu/~jjones/Work/
Root-URL: http://www.cs.berkeley.edu
Title: A Performance Analysis Tool for Split-C Programs  
Author: Jeff Jones Xiaoye Li 
Date: October 9, 1994  
Abstract: Writing efficient parallel programs is difficult. Therefore, a good performance analysis tool is essential. This paper presents a profiler for Split-C programs, designed for distributed memory multiprocessors, and evaluates its usefulness.
Abstract-found: 1
Intro-found: 1
Reference: [Anderson & Lazowska 1990] <author> Thomas E. Anderson and Edward D. Lazowska. "Quartz: </author> <title> A Tool for Tuning Parallel Program Performance". </title> <booktitle> Proceedings of ACM SIGMETRICS, Vol.18, </booktitle> <volume> No. 1, </volume> <year> 1990. </year>
Reference-contexts: The other reason is that it is possible to determine what properties of parallel programs are relevant to performance, and measure only those properties. This is the approach taken in Quartz <ref> [Anderson & Lazowska 1990] </ref>. The main measurement made by Quartz is normalized processor time, which is execution time weighted by the number of other processors which are idle. So, a procedure is more "expensive" if it always runs when all other processes are idle. <p> There is no way to define sub-epochs, whose data would be included in their parent epochs. This feature seems to be very helpful for localizing performance problems according to program structure, as noted in [Graham et al. 1982], [Miller & Yang 1987], and <ref> [Anderson & Lazowska 1990] </ref>, and would have made localizing performance problems significantly faster in our example.
Reference: [Graham et al. 1982] <author> S.L. Graham, P.B. Kessler, </author> <title> and M.K. McKusick. "Gprof: A Call Graph Execution Profiler". </title> <booktitle> Proc. ACM SIGPLAN Symposium on Compiler Construction, </booktitle> <month> June </month> <year> 1982. </year>
Reference-contexts: Another problem that became apparent is that the milestone mechanism is not hierarchical. There is no way to define sub-epochs, whose data would be included in their parent epochs. This feature seems to be very helpful for localizing performance problems according to program structure, as noted in <ref> [Graham et al. 1982] </ref>, [Miller & Yang 1987], and [Anderson & Lazowska 1990], and would have made localizing performance problems significantly faster in our example.
Reference: [Miller & Yang 1987] <author> Barton P. Miller and C.-Q. Yang. "IPS: </author> <title> An Interactive and Automatic Performance Measurement Tool for Parallel and Distributed Programs". </title> <booktitle> Proc. 7th International Conference on Distributed Computing Systems, </booktitle> <month> September </month> <year> 1987. </year>
Reference-contexts: This would require a user of the tool to sift through a huge amount of insignificant data in order to understand performance problems. Some method of focusing the user on important information is necessary. The approach taken in IPS <ref> [Miller & Yang 1987] </ref> is to record all necessary information, and then provide a means of automatically guiding the user to locate performance problems. IPS accomplishes this by organizing the data hierarchically and by performing critical path 1 analysis to identify important locations in the hierarchy. <p> There is no way to define sub-epochs, whose data would be included in their parent epochs. This feature seems to be very helpful for localizing performance problems according to program structure, as noted in [Graham et al. 1982], <ref> [Miller & Yang 1987] </ref>, and [Anderson & Lazowska 1990], and would have made localizing performance problems significantly faster in our example.
Reference: [Culler et al. 1992] <author> David E. Culler, Andrea Dusseau, Seth Copen Goldstein, Arvind Krish-namurthy, Thorsten von Eicken and Kathy Yelick. </author> <title> "Introduction to Split-C". </title> <note> Version 0.04, </note> <month> November </month> <year> 1992. </year>
Reference-contexts: The key characteristic of the CM-5 for profiling purposes is the fact that there is no global memory. Because there is no global memory, collecting global information is prohibitively expensive. Therefore, we are constrained to collecting only local information and inferring global characteristics of the performance. Split-C <ref> [Culler et al. 1992] </ref> is a parallel extension to the C programming language primarily intended for distributed memory multiprocessors. The control paradigm of Split-C is 2 that of a single thread of control on each processor.
Reference: [CMMD 1992] <institution> Thinking Machines Corporation. </institution> <note> "CMMD Reference Manual". Version 1.1, January 1992. 10 </note>
Reference-contexts: After the execution of the program, the data are sent back to the host and a post-processor is invoked to present the collected data. For the timings, we used the facility provided in the CMMD library <ref> [CMMD 1992] </ref>. This decision was made with some trepidation, for two reasons. One is that the CMMD timers have had accuracy problems in the past, and the other is that we were concerned about their speed.
References-found: 5

