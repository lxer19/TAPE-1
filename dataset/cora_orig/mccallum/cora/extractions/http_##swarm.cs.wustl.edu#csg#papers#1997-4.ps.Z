URL: http://swarm.cs.wustl.edu/csg/papers/1997-4.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: 
Title: Mobile UNITY Coordination Constructs Applied to Packet Forwarding for Mobile Hosts  
Author: Peter J. McCann and Gruia-Catalin Roman 
Address: One Brookings Drive, St. Louis MO 63130  
Affiliation: Department of Computer Science, Washington University,  
Abstract: With recent advances in wireless communication technology, mobile computing is an increasingly important area of research. A mobile system is one where independently executing components may migrate through some space during the course of the computation, and where the pattern of connectivity among the components changes as they move in and out of proximity. Mobile UNITY is a language and logic for specifying and reasoning about mobile systems, the components of which must operate in a highly decoupled way. In this paper it is argued that Mobile UNITY contributes to the modular development of system specifications precisely because of the decoupled and declarative fashion in which coordination among components is specified. The packet forwarding mechanism which is at the core of the Mobile IP protocol for routing to mobile hosts is taken as an example. A Mobile UNITY specification of packet forwarding and the mobile system in which it must operate is developed. Mobile hosts are the components that can disconnect from one location in the network and reconnect to another at any point during system execution. Finally, the role of formal program verification in the development of protocols like Mobile IP is discussed.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. R. Badrinath and G. Welling, </author> <title> "Event Delivery Abstractions for Mobile Computing," </title> <institution> Rutgers University, </institution> <address> New Brunswick, NJ 08903, </address> <note> Technical Report LCSR-TR-242, </note> <year> 1995. </year>
Reference-contexts: These systems trade consistency for availability under the assumption that in some cases, dealing with the consequences of inconsistencies is cheaper than denying access to a resource. Some researchers have focused on toolkits and abstractions for building mobile applications. Badrinath and Welling <ref> [1] </ref> describe a C++ abstraction for delivering events such as bandwidth variations, disconnections, and battery measurements to applications. Noble, Price, and Satyanarayanan [6] present the Odyssey application library for managing changing resources and emphasize the importance of application- and data type-specific policies for reacting to changes in the environment.
Reference: 2. <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Once expressed in our notation, a system can be subjected to rigorous formal verification against a set of requirements expressed as temporal properties of executions. Mobile UNITY is based on the UNITY model of Chandy and Misra <ref> [2] </ref>, with extensions to both the notation and logic to accommodate specification of and reasoning about mobile programs. In Mobile UNITY, each program is a unit of mobility and all variables are locally owned. <p> This is why we treat mobility as a change in the location of a component|a mobile program. In this paper we use the UNITY <ref> [2] </ref> notation to express the computation taking place within the mobile components of a system and the UNITY proof logic to reason about mobile computations. Both are extended appropriately to account for the effects of movement and transient interactions.
Reference: 3. <editor> D. Gries, </editor> <booktitle> The Science of Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Simple program properties are built from state predicates and simple relations on them. A state predicate is constructed using boolean algebra, the names of variables from the program text, quantification, and ordinary relational operators, as in network.address <ref> [3] </ref> = 5 ^ network.binding [5] = 3 which states that the program variable network.address [3] (the third element of the address array from program network ) has the value 5, and the variable network.binding [5] (the fifth element of the binding array from program network ) has the value 3. <p> A state predicate is constructed using boolean algebra, the names of variables from the program text, quantification, and ordinary relational operators, as in network.address <ref> [3] </ref> = 5 ^ network.binding [5] = 3 which states that the program variable network.address [3] (the third element of the address array from program network ) has the value 5, and the variable network.binding [5] (the fifth element of the binding array from program network ) has the value 3. <p> Well known methods from sequential programming can be used to carry out this proof <ref> [3] </ref>. Invariant properties, those that are true throughout execution, can be expressed simply as invariant p Init ) p ^ p co p which states that the initial conditions satisfy p and also every action preserves p if executed from a state satisfying p.
Reference: 4. <author> D. B. Johnson, </author> <title> "Routing in Ad Hoc Networks of Mobile Hosts," </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 158-163, </pages> <year> 1994. </year>
Reference-contexts: In this paper we give a formal description of the packet forwarding mechanism at the core of the Mobile IP protocol and begin to investigate some of its formal properties. Eventually, we hope to formally describe other packet routing algorithms, such as those for ad-hoc networks <ref> [4] </ref>, which provide routing services to a group of mobile hosts that may be completely disconnected from the Internet.
Reference: 5. <author> P. J. McCann and G.-C. Roman, </author> <title> "Mobile UNITY: A Language and Logic for Concurrent Mobile Systems," </title> <institution> Washington University in St. Louis, </institution> <type> Technical Report WUCS-97-01, </type> <year> 1997. </year>
Reference-contexts: Such information is necessary, however, to build applications that behave properly under changing circumstances, such as responding to diminished connectivity by changing to a lower-resolution video stream. In this paper we focus on new kinds of abstractions for interprocess communication in the mobile setting. Mobile UNITY <ref> [5] </ref> provides a notation for mobile system components and a coordination language for expressing interactions among the components. Once expressed in our notation, a system can be subjected to rigorous formal verification against a set of requirements expressed as temporal properties of executions. <p> To compose this program with the network program given earlier, we need to formally declare the components and specify the interactions between them using a specialized abstract coordination language built on top of three primitive structures not discussed in this paper (see <ref> [5] </ref> for details). In the following system specification, we declare one network component, one mobile-node component for each port, parameterized by the port number, and one sharing interaction for each mobile node input and output queue. <p> Simple program properties are built from state predicates and simple relations on them. A state predicate is constructed using boolean algebra, the names of variables from the program text, quantification, and ordinary relational operators, as in network.address [3] = 5 ^ network.binding <ref> [5] </ref> = 3 which states that the program variable network.address [3] (the third element of the address array from program network ) has the value 5, and the variable network.binding [5] (the fifth element of the binding array from program network ) has the value 3. <p> names of variables from the program text, quantification, and ordinary relational operators, as in network.address [3] = 5 ^ network.binding <ref> [5] </ref> = 3 which states that the program variable network.address [3] (the third element of the address array from program network ) has the value 5, and the variable network.binding [5] (the fifth element of the binding array from program network ) has the value 3. For any given state (an assignment of values to the program variables), this predicate might be true or false. <p> A formal proof logic for the transient sharing construct as well as other coordination constructs can be found in <ref> [5] </ref>. For the purposes of this short paper, we reason about the packet forwarding system somewhat informally, at a level that might be undertaken by a system designer while thinking about the code presented so far.
Reference: 6. <author> B. D. Noble, M. Price, and M. Satyanarayanan, </author> <title> "A Programming Interface for Application-Aware Adaptation in Mobile Computing," </title> <journal> Computing Systems, </journal> <volume> vol. 8, no. 4, </volume> <pages> pp. 345-63, </pages> <year> 1995. </year>
Reference-contexts: Some researchers have focused on toolkits and abstractions for building mobile applications. Badrinath and Welling [1] describe a C++ abstraction for delivering events such as bandwidth variations, disconnections, and battery measurements to applications. Noble, Price, and Satyanarayanan <ref> [6] </ref> present the Odyssey application library for managing changing resources and emphasize the importance of application- and data type-specific policies for reacting to changes in the environment. Both emphasize the need to present information about connectivity directly to applications, which violates traditional notions of abstractions and encapsulation of the network.
Reference: 7. <author> C. Perkins, </author> <title> "IP Mobility Support," ftp://ds.internic.net/rfc/rfc2002.txt, Request for Comments 2002, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: Mobile UNITY is designed to accommodate mobile applications and ser-vices that exhibit dynamic reconfiguration and weak consistency, like the ones discussed earlier. Perhaps the most basic service that can be provided in the mobile setting is simple packet routing. The Mobile IP protocol <ref> [7] </ref> is designed to deliver this service to mobile hosts that are transiently connected to the Internet. In this paper we give a formal description of the packet forwarding mechanism at the core of the Mobile IP protocol and begin to investigate some of its formal properties. <p> In this section, we would like to refine this abstract program so that it captures important aspects of the Mobile IP protocol <ref> [7] </ref>. This is an extension to IP version 4 that attempts to deal with host mobility at a network level by forwarding those packets that arrive at the mobile node's home address to the foreign subnetwork on which the host happens to be.
Reference: 8. <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu, </author> <title> "Experience with Disconnected Operation in a Mobile Computing Environment," </title> <booktitle> Proceedings of the USENIX Symposium on Mobile and Location-Indepedent Computing, </booktitle> <address> Cambridge, MA, </address> <pages> pp. 11-28, </pages> <year> 1993. </year>
Reference-contexts: Other work has pointed out the importance of context other than location [9], such as the presence or absence of other components. Weak consistency protocols for filesystems and databases <ref> [8, 10, 11] </ref> are motivated by the low bandwidth and frequent disconnections typical of a wireless network with mobile nodes. These systems trade consistency for availability under the assumption that in some cases, dealing with the consequences of inconsistencies is cheaper than denying access to a resource.
Reference: 9. <author> B. N. Schilit, N. Adams, and R. </author> <title> Want, </title> <booktitle> "Context-Aware Computing Applications," Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 85-90, </pages> <year> 1994. </year>
Reference-contexts: For example, the components needed to carry out a service are often not deter-mined until runtime, as in the location-dependent services provided by a mobile web browser [12]. Other work has pointed out the importance of context other than location <ref> [9] </ref>, such as the presence or absence of other components. Weak consistency protocols for filesystems and databases [8, 10, 11] are motivated by the low bandwidth and frequent disconnections typical of a wireless network with mobile nodes.
Reference: 10. <author> C. D. Tait and D. Duchamp, </author> <title> "An Efficient Variable Consistency Replicated File Service," </title> <booktitle> Proceedings of the USENIX File Systems Workshop, </booktitle> <address> Ann Arbor, MI, </address> <pages> pp. 111-126, </pages> <year> 1992. </year>
Reference-contexts: Other work has pointed out the importance of context other than location [9], such as the presence or absence of other components. Weak consistency protocols for filesystems and databases <ref> [8, 10, 11] </ref> are motivated by the low bandwidth and frequent disconnections typical of a wireless network with mobile nodes. These systems trade consistency for availability under the assumption that in some cases, dealing with the consequences of inconsistencies is cheaper than denying access to a resource.
Reference: 11. <author> D. Terry, M. Theimer, K. Petersen, A. Demers, M. Spreitzer, and C. Hauser, </author> <title> "Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System," </title> <journal> Operating Systems Review, </journal> <volume> vol. 29, no. 5, </volume> <pages> pp. 172-83, </pages> <year> 1995. </year>
Reference-contexts: Other work has pointed out the importance of context other than location [9], such as the presence or absence of other components. Weak consistency protocols for filesystems and databases <ref> [8, 10, 11] </ref> are motivated by the low bandwidth and frequent disconnections typical of a wireless network with mobile nodes. These systems trade consistency for availability under the assumption that in some cases, dealing with the consequences of inconsistencies is cheaper than denying access to a resource.
Reference: 12. <author> G. M. Voelker and B. N. Bershad, "Mobisaic: </author> <title> An Information System for a Mobile Wireless Computing Environment," </title> <booktitle> Proceedings of the Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <pages> pp. 185-90, </pages> <year> 1994. </year>
Reference-contexts: The authors thank Toni Reiss for the illustrations in figures 1 and 3. For example, the components needed to carry out a service are often not deter-mined until runtime, as in the location-dependent services provided by a mobile web browser <ref> [12] </ref>. Other work has pointed out the importance of context other than location [9], such as the presence or absence of other components. Weak consistency protocols for filesystems and databases [8, 10, 11] are motivated by the low bandwidth and frequent disconnections typical of a wireless network with mobile nodes.
References-found: 12

