URL: ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/kotz:fsint2p.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~dfk/papers/kotz:fsint2p.html
Root-URL: http://www.cs.dartmouth.edu
Email: David.Kotz@Dartmouth.edu  
Title: Multiprocessor File System Interfaces  
Author: David Kotz 
Address: Hanover, NH 03755-3551  
Affiliation: Department of Math and Computer Science Dartmouth College  
Web: URL ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/kotz:fsint2p.ps.Z  
Note: Copyright 1992 by David Kotz. Appeared in Usenix Workshop on File Systems, pp. 149-150. Available at  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: To allow access by programs using the traditional interface, we provide automatic coercion of multifiles or record-oriented files into plain byte-oriented files. The interface provides the conventional abstraction without physically changing the file's organization. Previous Work One early implementation is the Intel Concurrent File System [4]. Crockett <ref> [1] </ref> outlines a multiprocessor file system design. The most exciting recent work is the new nCUBE file system [2] and the ELFS object-oriented interface [3].
Reference: [2] <author> E. DeBenedictis and J. M. del Rosario. </author> <title> nCUBE parallel I/O software. </title> <booktitle> In Proceedings of the Eleventh Annual IEEE International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 0117-0124, </pages> <address> Scottsdale, AZ, April 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The interface provides the conventional abstraction without physically changing the file's organization. Previous Work One early implementation is the Intel Concurrent File System [4]. Crockett [1] outlines a multiprocessor file system design. The most exciting recent work is the new nCUBE file system <ref> [2] </ref> and the ELFS object-oriented interface [3].
Reference: [3] <author> A. S. Grimshaw and J. Prem. </author> <title> High performance parallel file objects. </title> <booktitle> In Proceedings of the Sixth Annual Distributed-Memory Computer Conference, </booktitle> <pages> pages 720-723, </pages> <year> 1991. </year>
Reference-contexts: The interface provides the conventional abstraction without physically changing the file's organization. Previous Work One early implementation is the Intel Concurrent File System [4]. Crockett [1] outlines a multiprocessor file system design. The most exciting recent work is the new nCUBE file system [2] and the ELFS object-oriented interface <ref> [3] </ref>.
Reference: [4] <author> P. Pierce. </author> <title> A concurrent file system for a highly parallel mass storage system. </title> <booktitle> In Proceedings of the Fourth Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <address> Monterey, CA, March 1989. </address> <publisher> Golden Gate Enterprises, </publisher> <address> Los Altos, CA. </address>
Reference-contexts: To allow access by programs using the traditional interface, we provide automatic coercion of multifiles or record-oriented files into plain byte-oriented files. The interface provides the conventional abstraction without physically changing the file's organization. Previous Work One early implementation is the Intel Concurrent File System <ref> [4] </ref>. Crockett [1] outlines a multiprocessor file system design. The most exciting recent work is the new nCUBE file system [2] and the ELFS object-oriented interface [3].
Reference: [5] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX time-sharing system. </title> <journal> The Bell System Technical Journal, </journal> <volume> 6(2) </volume> <pages> 1905-1930, </pages> <note> July-August 1978. Availability. The full version of this paper, Dartmouth technical report PCS-TR92-179, is available at http://www.cs.dartmouth.edu/reports/abstracts/TR92-179/. This research was supported in part by startup research funds from Dartmouth College and by DARPA/NASA subcontract of NCC2-560. Thanks to Carla Ellis, Rick Floyd, and Mike del Rosario. </note>
Reference-contexts: Extensions to the Conventional Interface The Unix file system interface <ref> [5] </ref> is the typical conventional interface, supporting operations such as open, create, close, read, write, and seek on the file, considered to be an addressable sequence of bytes.
References-found: 5

