URL: http://www.graphics.cornell.edu/pubs/1990/LRDG90a.ps.gz
Refering-URL: http://www.graphics.cornell.edu/pubs/1990/LRDG90a.html
Root-URL: 
Title: Real-Time Robot Motion Planning Using Rasterizing Computer Graphics Hardware planner at generating planar rotational and
Author: Jed Lengyel Mark Reichert Bruce R. Donald Donald P. Greenberg 
Note: Several examples are shown illustrating the competence of the  
Abstract: We present a real-time robot motion planner that is fast and complete to a resolution. The technique is guaranteed to find a path if one exists at the resolution, and all paths returned are safe. The planner can handle any polyhedral geometry of robot and obstacles, including disjoint and highly concave unions of polyhedra. The planner uses standard graphics hardware to rasterize configuration space obstacles into a series of bitmap slices, and then uses dynamic programming to create a navigation function (a discrete vector-valued function) and to calculate paths in this rasterized space. The motion paths which the planner produces are minimal with respect to an L 1 (Manhattan) distance metric that includes rotation as well as translation. 
Abstract-found: 1
Intro-found: 1
Reference: [BL89] <author> Barraquand, J. and J. Latombe. </author> <title> Robot Motion Planning: A Distributed Representation Approach, </title> <type> Report No. </type> <institution> STAN-CS-89-1257, Stanford University, Department of Computer Science, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: In our implementation only the first, the generation of the c-space obstacles, and the fourth, the kinematic simula tion, use specialized graphics hardware. The second module, the flood-fill, uses a very local operation and is ideal for a distributed computation <ref> [BL89] </ref>. The third module, the gradient following or bread-first-search-tree following, is essentially a fast serial operation. 4 Examples The algorithm was tested in several obstacle environments with robots and obstacles of varying shape and convexity. Experimental timings for each of these examples are presented in Table 1.
Reference: [CDRX88] <author> Canny, J., B. Donald, J. Reif, and P. Xavier. </author> <title> "On the Complexity of Kinodynamic Planning," </title> <booktitle> in 29 th Symposium on the Foundations of Computer Science, </booktitle> <address> White Plains NY., </address> <year> 1988. </year>
Reference: [Don84] <author> Donald, B. R. </author> <title> Motion Planning with Six Degrees of Freedom, </title> <type> Report No. </type> <institution> MIT AI-TR 791, MIT, Artificial Intelligence Laboratory, </institution> <year> 1984. </year>
Reference-contexts: This algorithm is essentially isomorphic to the "Bumble Strategy" in Donald's 1984 algorithm <ref> [Don84] </ref> [Don87], which operated as follows: a search node N on a c-space grid is dequeued, and its c-space grid neighbors are generated. The reachable, unexplored, free-space neighbors are put on the end of the queue.
Reference: [Don87] <author> Donald, B. R. </author> <title> "A Search Algorithm for Motion Planning with Six Degrees of Freedom," </title> <journal> Artificial Intelligence, </journal> <volume> 31, </volume> <year> 1987, </year> <pages> pages 295-353. </pages>
Reference-contexts: Donald described a motion planning algorithm that is a provably-good approximation algorithm. It is guaranteed to find a path if one exists at the given resolution and all paths it returns are safe. [See <ref> [Don87] </ref> for a formal definition of provably-good approximation algorithms.] He also used constraint equations to represent the c-space obstacles, imposed a grid on the c-space, and then used several local "experts" to guide the search through the c-space. <p> This planner is capable of planning for robots with a great number of degrees of freedom (as demonstrated with multiple bars linked into chains), but is only probabilistically complete. 3 Algorithm 3.1 Overview The motion planner presented below is algorithmically based on the grid search method used by Donald <ref> [Don87] </ref> with the configuration space approach of Lozano-Perez [Loz80]. It consists of four separate modules. 3 The memory requirements for the planner we present are very similar to those of Barraquand and Latombe's local-minima-filling technique. <p> This algorithm is essentially isomorphic to the "Bumble Strategy" in Donald's 1984 algorithm [Don84] <ref> [Don87] </ref>, which operated as follows: a search node N on a c-space grid is dequeued, and its c-space grid neighbors are generated. The reachable, unexplored, free-space neighbors are put on the end of the queue. <p> The algorithm is based on part of Donald's original algorithm <ref> [Don87] </ref>, which was initially considered to be slow and ineffective for real-time motion planning, but when modified to run on current graphics hardware is actually quite fast. The planner can handle any polyhedral geometry of robot and obstacles, including disjoint and highly concave unions of polyhedra. <p> We conjecture that the fastest solutions will involve algorithms similar to ours, that is, characterized by use of 1. Configuration space representations such as [LPW79]. 2. Local, geometric, isotropic, parallelizable search algorithms such as <ref> [Don87] </ref>. 3. Appropriate hardware support for geometric computation. In robotics, and in animation, in addition to kinematic planning and simulation, one also desires to plan robot motions with full dynamics.
Reference: [DT88] <author> Dorst, L. and K. Trovato. </author> <title> "Optimal path planning by cost wave propagation in metric configuration space," </title> <booktitle> Proceedings of SPIE-The International Society for Optical Engineering, </booktitle> <volume> 1007, </volume> <month> November </month> <year> 1988, </year> <pages> pages 186-197. </pages>
Reference-contexts: Two parts of the local algorithm we present here are very similar to the work of <ref> [DT88] </ref>. The paths produced have minimal length with respect to an L 1 distance metric imposed on the rasterization which treats translational and rotational movements equally. <p> The search algorithm used was not local, isotropic, nor trivially parallelizable, and no hardware support was available. Dorst and Trovato used a rasterized c-space approach to plan for a two-link arm <ref> [DT88] </ref>. They described the motion-planning problem in a differential geometry framework, with a metric topology imposed on configuration space and geodesics corresponding to optimal paths. They discretized the c-space and used cost wave propagation and gradient-following to find the optimal paths. <p> Path Generation Since the navigation function is generated by a breadth-first search through the rasterized configuration space, it yields the shortest path from the goal to any reachable position in the configuration space (where a "shortest path" is defined to be one passing through a minimal number of voxels.) [See <ref> [DT88] </ref> for other metrics.] To get closer to the goal from any start position, the robot moves to the lowest-numbered neighboring cell. <p> Two sequential pre-processing steps are required, the rasterization of c-space and the computation of the navigation function. This discretized configuration space must be recomputed 4 Also observed by <ref> [DT88] </ref>. <p> The planner is very general and is guaranteed to find a path if one exists at the resolution. In constant (O (1)) time, it detects if a path exists from the start location to the goal, or between any two points through the goal (compare <ref> [DT88] </ref>.) The method is memory intensive, but for many problems the resolutions can be made much lower, especially in the rotational dimension.
Reference: [DX89] <author> Donald, B. and P. Xavier. </author> <title> "A Provably Good Approximation Algorithm for Optimal-Time Trajectory Planning," </title> <booktitle> in IEEE Int. Conf. On Robotics and Automation, </booktitle> <address> Scottsdale, AZ, </address> <year> 1989. </year>
Reference: [DX90] <author> Donald, B. and P. Xavier. </author> <title> "Provably Good Approximation Algorithms for Optimal Kinodynamic Planning for Cartesian Robots and Open Chain Manipulators," </title> <booktitle> in Proceedings of the ACM Symposium on Computational Geometry, </booktitle> <address> Berkeley, CA, </address> <year> 1990. </year>
Reference: [KLM78] <author> Khatib, O. and J. Le Maitre. </author> <title> "Dynamic Control of Manipulators Operating in a Complex Environment," </title> <booktitle> Proceedings Third International CISM-IFToMM Symposium, </booktitle> <month> September </month> <year> 1978, </year> <pages> pages 267-282. </pages>
Reference-contexts: We show how a variant of one part of this algorithm runs very fast on modern graphics hardware. 2.2 Potential Field Methods Potential field methods were first pioneered by Khatib and Le Maitre <ref> [KLM78] </ref>. The obstacles were represented as zero level surfaces of scalar valued analytic functions, i.e. f (x; y; z) = 0. A potential field local to each obstacle, whose strength diminishes with the square of the distance from the obstacle, was generated.
Reference: [Kod87] <author> Koditschek, D. E. </author> <title> "Exact Robot Navigation by Means of Potential Functions: Some Topological Considerations," </title> <booktitle> IEEE International Conference on Robotics and Automation, </booktitle> <month> March </month> <year> 1987. </year>
Reference-contexts: Page 3 * The first module allocates a voxel array representation of c-space and rapidly computes c-space obstacles in this array using standard graphics rasterization hardware. * The second module calculates a c-space navigation function <ref> [Kod87] </ref> with a dynamic programming technique (expanding wavefront of solutions.) This navigation function is essentially a discrete vector-valued function which, when given the robot's current voxel location in c-space, returns the direction that the robot should move to decrease its distance to the goal. * The third module determines the shortest
Reference: [Kod89] <author> Koditschek, D. E. </author> <title> "Planning and Control via Potential Functions," </title> <editor> in Lozano-Perez, T. and O. Khatib, editors, </editor> <title> Robotics Review I, </title> <publisher> MIT Press, </publisher> <year> 1989, </year> <pages> pages 349-367. </pages>
Reference: [Loz80] <author> Lozano-Perez, T. </author> <title> Spatial Planning: A Configuration Space Approach, </title> <journal> A.I. </journal> <volume> Memo No. </volume> <pages> 605, </pages> <institution> Massachusetts Institute of Technology, Artificial Intelligence Laboratory, </institution> <month> December </month> <year> 1980. </year>
Reference-contexts: The important ideas of c-space slices and c-space slice projections, which will be described in more detail later, were also introduced. For a more thorough introduction, we refer the reader to previous papers <ref> [Loz80] </ref> [LPW79] [Udu77]. Other researchers have used rasterizing techniques in c-space. For example, Lozano-Perez [Loz87] used a representation of the obstacles derived in [Loz83],[Don87] and encoded them in a bitmap of the c-space. The search algorithm used was not local, isotropic, nor trivially parallelizable, and no hardware support was available. <p> robots with a great number of degrees of freedom (as demonstrated with multiple bars linked into chains), but is only probabilistically complete. 3 Algorithm 3.1 Overview The motion planner presented below is algorithmically based on the grid search method used by Donald [Don87] with the configuration space approach of Lozano-Perez <ref> [Loz80] </ref>. It consists of four separate modules. 3 The memory requirements for the planner we present are very similar to those of Barraquand and Latombe's local-minima-filling technique. <p> Each of these modules is described in more detail below. 3.2 Definitions The following definitions due to <ref> [Loz80] </ref> are useful prior to the algorithmic explanations. A c-space obstacle, CO, is a forbidden region of c-space R 2 fiS 1 . A slice, CO [ 1 ; 2 ], of CO is CO restricted to an angular interval [ 1 ; 2 ], i.e. <p> 2 ] onto the "plane" R 2 fi f 0 g for 0 = ( 1 + 2 )=2. 3.3 Generation of Configuration Space Representation We calculate the configuration space obstacle polygons by taking the Minkowski sum of the obstacles and the rotated and negated robot as described by Lozano-Perez <ref> [Loz80] </ref> (Figure 3). We then use graphics polygon-fill hardware to fill the configuration space obstacle polygons (Figure 4). When the robot motion is restricted to two degrees of freedom (only translation in the plane) our discrete representation of c-space is a single bitmap with rasterized c-space obstacles.
Reference: [Loz83] <author> Lozano-Perez, T. </author> <title> "Spatial Planning: A Configuration Space Approach," </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32, </volume> <year> 1983, </year> <pages> pages 108-120. </pages>
Reference: [Loz87] <author> Lozano-Perez, T. </author> <title> "A Simple Motion Planning Algorithm for General Robot Manipulator," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-3(3), </volume> <year> 1987, </year> <pages> pages 224-238. </pages>
Reference-contexts: The important ideas of c-space slices and c-space slice projections, which will be described in more detail later, were also introduced. For a more thorough introduction, we refer the reader to previous papers [Loz80] [LPW79] [Udu77]. Other researchers have used rasterizing techniques in c-space. For example, Lozano-Perez <ref> [Loz87] </ref> used a representation of the obstacles derived in [Loz83],[Don87] and encoded them in a bitmap of the c-space. The search algorithm used was not local, isotropic, nor trivially parallelizable, and no hardware support was available.
Reference: [LPW79] <author> Lozano-Perez, T. and M. A. Wesley. </author> <title> "An Algorithm for Planning Collison-Free Paths Among Polyhedral Obstacles," </title> <journal> Communications of the ACM, </journal> <volume> 22, </volume> <year> 1979, </year> <pages> pages 560-570. </pages>
Reference-contexts: Our algorithm is based on the configuration space representations that are due to Lozano-Perez <ref> [LPW79] </ref>, and we use a local, isotropic search algorithm [Don87][Don84] to obtain a very fast motion planning algorithm that runs on standard graphics hardware. Two parts of the local algorithm we present here are very similar to the work of [DT88]. <p> The important ideas of c-space slices and c-space slice projections, which will be described in more detail later, were also introduced. For a more thorough introduction, we refer the reader to previous papers [Loz80] <ref> [LPW79] </ref> [Udu77]. Other researchers have used rasterizing techniques in c-space. For example, Lozano-Perez [Loz87] used a representation of the obstacles derived in [Loz83],[Don87] and encoded them in a bitmap of the c-space. The search algorithm used was not local, isotropic, nor trivially parallelizable, and no hardware support was available. <p> We conjecture that the fastest solutions will involve algorithms similar to ours, that is, characterized by use of 1. Configuration space representations such as <ref> [LPW79] </ref>. 2. Local, geometric, isotropic, parallelizable search algorithms such as [Don87]. 3. Appropriate hardware support for geometric computation. In robotics, and in animation, in addition to kinematic planning and simulation, one also desires to plan robot motions with full dynamics.
Reference: [Pav81] <author> Pavlidis, T. </author> <title> "Contour Filling in Raster Graphics," </title> <booktitle> Proceedings of SIGGRAPH'81 (Dallas, </booktitle> <address> Texas, </address> <month> August 3-7, </month> <year> 1981), 1981, </year> <pages> pages 29-36. </pages>
Reference-contexts: The wavefront continues out like a "brush fire", spreading around the C-space obstacles, in a way similar to flood-fill or seed-fill algorithms used in computer paint programs <ref> [Pav81] </ref>.
Reference: [Udu77] <author> Udupa, S. </author> <title> Collision Detection and Avoidance in Computer Controlled Manipulators, </title> <type> PhD dissertation, </type> <institution> Department of Electrical Engineering, California Institute of Technology, Pasadena, California, </institution> <year> 1977. </year>
Reference-contexts: The important ideas of c-space slices and c-space slice projections, which will be described in more detail later, were also introduced. For a more thorough introduction, we refer the reader to previous papers [Loz80] [LPW79] <ref> [Udu77] </ref>. Other researchers have used rasterizing techniques in c-space. For example, Lozano-Perez [Loz87] used a representation of the obstacles derived in [Loz83],[Don87] and encoded them in a bitmap of the c-space. The search algorithm used was not local, isotropic, nor trivially parallelizable, and no hardware support was available.
Reference: [Yap85] <author> Yap, C. K. </author> <title> "Algorithmic Motion Planning," </title> <editor> in Schwartz, J. T. and C. K. Yap, editors, </editor> <booktitle> Advances in Robotics, </booktitle> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1985. </year> <pages> Page 9 </pages>
References-found: 17

