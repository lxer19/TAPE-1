URL: http://www.cs.cornell.edu/home/kleinber/focs94.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: The Localization Problem for Mobile Robots  
Author: Jon M. Kleinberg 
Address: Cambridge MA 02139, USA  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Abstract: A fundamental task for an autonomous mobile robot is that of localization | determining its location in a known environment. This problem arises in settings that range from the computer analysis of aerial photographs to the design of autonomous Mars rovers. Guibas, Motwani, and Raghavan have given geometric algorithms for the problem of enumerating locations for a robot consistent with a given view of the environment. Here, we provide an on-line algorithm for a robot to move within its environment so as to uniquely determine its location. The algorithm improves asymptotically on strategies based purely on the "spiral search" technique of Baeza-Yates, Culberson, and Rawlins; an interesting feature of our approach is the way in which the robot is able to identify "critical directions" in the environment which allow it to perform late stages of the search more efficiently. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Baeza-Yates, J. Culberson, G. Rawlins, </author> <title> "Searching in the plane," </title> <journal> Information and Computation, </journal> <volume> 106(1993), </volume> <pages> pp. 234-252. </pages>
Reference-contexts: Perhaps the best way to view these algorithms is as an asymptotic improvement on spiral search. Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins <ref> [1] </ref>. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> In a number of navigation problems based on exploration and search, it is often not difficult to show that this approach is optimal up to constant factors. Indeed a great deal of work is often done to determine what these constant factors are <ref> [1, 13, 14] </ref>. One consequence of our algorithms is that, in contrast to these exam-ples, spiral search is not the best one can do for localization. <p> This is because the robot can initially perform a two-way spiral search to reach the closest vertex, traveling no more than 9 times too far <ref> [1] </ref>. Moreover, we can assume that it in fact begins at a branch-vertex, since its only choice at a leaf is to move along the incident edge. At all times, the robot maintains a search region, some geometric tree T 0 which consists of everything it has seen so far. <p> Step 1: Restricted Spiral Search The robot first wakes up at some initial location fl 0 2 T 0 and begins performing spiral search <ref> [1] </ref>. This can be described as follows: the robot starts at fl 0 and performs successive depth-first searches so as to see all points within distance r (T 0 ) = 2 j of Z (fl 0 ), for j = 0; 1; 2; : : :.
Reference: [2] <author> E. Bar-Eli, P. Berman, A. Fiat, P. Yan, </author> <title> "On-Line Navigation in a Room," </title> <booktitle> Proc. 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 237-249. </pages>
Reference-contexts: If T is an embedded tree, we will use n to denote the number of leaves it has. * Rectangle packings in the plane, consisting of n rectangles <ref> [2, 3, 6, 20] </ref>. <p> As these are the only two cases, this completes the proof of Theorem 1. 3 The Algorithm for Rectangles Again, to keep complications related to visibility to a minimum, we work with a rectangle packing <ref> [2, 3, 6, 20] </ref>, as defined earlier. By a vertex of the environment, we will mean a corner of some rectangle. So in the spirit of the previous section, one could picture a planar graph embedded in the two-dimensional integer grid, all of whose bounded faces are rectangles.
Reference: [3] <author> M. Betke, R. Rivest, M. Singh, </author> <title> "Piecemeal learning of an unknown environment," </title> <booktitle> Proc. Sixth ACM Conference on Learning Theory, </booktitle> <year> 1993, </year> <pages> pp. 277-286. </pages>
Reference-contexts: If T is an embedded tree, we will use n to denote the number of leaves it has. * Rectangle packings in the plane, consisting of n rectangles <ref> [2, 3, 6, 20] </ref>. <p> As these are the only two cases, this completes the proof of Theorem 1. 3 The Algorithm for Rectangles Again, to keep complications related to visibility to a minimum, we work with a rectangle packing <ref> [2, 3, 6, 20] </ref>, as defined earlier. By a vertex of the environment, we will mean a corner of some rectangle. So in the spirit of the previous section, one could picture a planar graph embedded in the two-dimensional integer grid, all of whose bounded faces are rectangles. <p> In order to implement this, the robot must know the shortest-path distance from fl 0 to each point as it reaches it; fortunately, there is a "compact search" subroutine due to Betke, Rivest, and Singh <ref> [3] </ref> which accomplishes just this. Thus Step 1 will proceed as follows. For successive values of 2 j (j = 0; 1; 2; : : :) the robot explores all points within 2 j of Z (fl 0 ). <p> For successive values of 2 j (j = 0; 1; 2; : : :) the robot explores all points within 2 j of Z (fl 0 ). We implement stage j of this process using a simple modification of the compact search algorithm of <ref> [3] </ref> | the robot turns back when it is about to move more than 2 j from fl 0 . Lemma 9 At the end of Step 1, the robot has traveled O (b (R 0 )) times the length of the optimal solution. Proof. The main result of [3] is <p> of <ref> [3] </ref> | the robot turns back when it is about to move more than 2 j from fl 0 . Lemma 9 At the end of Step 1, the robot has traveled O (b (R 0 )) times the length of the optimal solution. Proof. The main result of [3] is that the robot will travel at most 10 times the total length of all edges in the region searched.
Reference: [4] <author> A. Blum, P. Chalasani, </author> <title> "An on-line algorithm for improving performance in navigation," </title> <booktitle> Proc. 34th IEEE Symposium on Theory of Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Such problems tend to contain interesting structure that can be exploited when designing algorithms, and often provide insight into the value of a map in performing navigation tasks. One other recent example of this is the k-trip shortest-path problem considered by Blum and Chalasani <ref> [4] </ref>, where a robot must make repeated trips between the same pair of points, and can thus make use of partial maps for the later trips.
Reference: [5] <author> A. Blum, P. Chalasani, D. Coppersmith, W. Pul-leyblank, P. Raghavan, M. Sudan, </author> <title> "The minimum latency problem," </title> <booktitle> Proc. 26th ACM Symposium on Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems <ref> [5, 24] </ref>.
Reference: [6] <author> A. Blum, P. Raghavan, B. Schieber, </author> <title> "Navigating in unfamiliar geometric terrain," </title> <booktitle> Proc. 23rd ACM Symposium on Theory of Computing, </booktitle> <year> 1991, </year> <pages> pp. 494-504. </pages>
Reference-contexts: If T is an embedded tree, we will use n to denote the number of leaves it has. * Rectangle packings in the plane, consisting of n rectangles <ref> [2, 3, 6, 20] </ref>. <p> Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> As these are the only two cases, this completes the proof of Theorem 1. 3 The Algorithm for Rectangles Again, to keep complications related to visibility to a minimum, we work with a rectangle packing <ref> [2, 3, 6, 20] </ref>, as defined earlier. By a vertex of the environment, we will mean a corner of some rectangle. So in the spirit of the previous section, one could picture a planar graph embedded in the two-dimensional integer grid, all of whose bounded faces are rectangles.
Reference: [7] <author> I. Cox, </author> <title> "Blanche an experiment in guidance and navigation of an autonomous robot vehicle," </title> <journal> IEEE Trans. Robotics and Automation, </journal> <volume> 7(1991), </volume> <pages> pp. 193-204. </pages>
Reference-contexts: 1 Introduction A fundamental task for an autonomous mobile robot is that of localization | determining its location in a known environment <ref> [7, 23, 25] </ref>. <p> One application is in the design of robot vehicles that must perform a certain task repeatedly in the same surroundings. Here, localization is used to determine the starting location at the beginning of the task, and to maintain positioning information over time <ref> [7, 9, 25] </ref>. A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken [26].
Reference: [8] <author> B. Donald, </author> <title> "On information invariants in robotics," </title> <type> Technical Report 93-1341, </type> <institution> Department of Computer Science, Cornell University, </institution> <year> 1993. </year>
Reference-contexts: For a further perspective on the value of different types of information in performing navigation tasks, see the work of Donald on "information invariants" <ref> [8] </ref>. In the case of localization, knowledge of the map allows the robot to begin focusing its search as it sees more and more of its surroundings. Indeed, our algorithm is quite natural and simple to state; the main difficulty is in analyzing the competitive ratio.
Reference: [9] <author> M. Drumheller, </author> <title> "Mobile robot localization using sonar," </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 9(1987), </volume> <pages> pp. 325-331. </pages>
Reference-contexts: One application is in the design of robot vehicles that must perform a certain task repeatedly in the same surroundings. Here, localization is used to determine the starting location at the beginning of the task, and to maintain positioning information over time <ref> [7, 9, 25] </ref>. A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken [26].
Reference: [10] <author> A. Fiat, D. Foster, H. Karloff, Y. Rabani, Y. Ravid, S. Vishwanathan, </author> <title> "Competitive algorithms for layered graph traversal," </title> <booktitle> Proc. 31st IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1991, </year> <pages> pp. 288-197. </pages>
Reference-contexts: This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal <ref> [10, 20] </ref>, the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24].
Reference: [11] <author> L. Guibas, R. Motwani, P. Raghavan, </author> <title> "The robot localization problem in two dimensions" Proceedings Third ACM-SIAM Symposium on Discrete Algorithms, </title> <booktitle> 1992, </booktitle> <pages> pp 259-268. </pages>
Reference-contexts: In what has been essentially the only previous theoretical paper on the problem, Guibas, Motwani, and Raghavan <ref> [11] </ref> considered the question of enumerating all possible locations for the robot, given a visibility polygon P , when the environment E is itself a simple polygon. <p> In this case, it means that straightforward online techniques such as spiral search are no longer asymptotically optimal. Our Results The only previous theoretical treatment of the localization problem is the paper of Guibas, Motwani, and Raghavan <ref> [11] </ref>, and as mentioned above, it deals only with the "static" version of the question. Our work represents, to our knowledge, the first use of the competitive ratio in analyzing the the localization problem for mobile robots.
Reference: [12] <author> B. Kalyanasundaram, K. Pruhs, </author> <title> "A competitive analysis of nearest neighbor algorithms for searching unknown scenes," </title> <booktitle> Proc. 9th Annual Symposium on Theoretical Aspects of Computer Science, </booktitle> <year> 1992, </year> <pages> pp. 147-157. </pages>
Reference-contexts: Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24].
Reference: [13] <author> M. Kao, Y. Ma, M. Sipser, Y. Yin, </author> <title> "Optimal constructions of hybrid algorithms," </title> <booktitle> Proc. 5th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal [10, 20], the design of hybrid algorithms <ref> [13] </ref>, and even the approximation of NP-hard optimization problems [5, 24]. <p> In a number of navigation problems based on exploration and search, it is often not difficult to show that this approach is optimal up to constant factors. Indeed a great deal of work is often done to determine what these constant factors are <ref> [1, 13, 14] </ref>. One consequence of our algorithms is that, in contrast to these exam-ples, spiral search is not the best one can do for localization.
Reference: [14] <author> M. Kao, J. Reif, S. Tate, </author> <title> "Searching in an unknown environment: an optimal randomized algorithm for the cow-path problem," </title> <booktitle> Proc. 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1993. </year>
Reference-contexts: Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> In a number of navigation problems based on exploration and search, it is often not difficult to show that this approach is optimal up to constant factors. Indeed a great deal of work is often done to determine what these constant factors are <ref> [1, 13, 14] </ref>. One consequence of our algorithms is that, in contrast to these exam-ples, spiral search is not the best one can do for localization.
Reference: [15] <author> J. Kleinberg, </author> <title> "On-line search in a simple polygon," </title> <booktitle> Proc. 5th ACM-SIAM Symposium on Dis crete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24].
Reference: [16] <author> M. Levine, I. Marchon, G. Hanley, </author> <title> "The placement and misplacement of you-are-here maps," Environment and Behavior, </title> <booktitle> 16(1984), </booktitle> <pages> pp. 139-157. </pages>
Reference: [17] <author> L. Lovasz, M. Saks, </author> <title> "Lattices, Mobius functions, and communication complexity," </title> <booktitle> Proc. 29th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 81-90. </pages>
Reference-contexts: Proposition 1 For each tree T , there is a k-marking and a localization algorithm which is O ( n k )- competitive. Proof. This is not difficult to prove directly; and using a lemma from <ref> [17] </ref>, we can actually prove the stronger statement that there is, in effect, a single marking which works for all k. Specifically, it is proved in [17] that there is a numbering of the n vertices of T (i.e. a bijection from V to f1; : : : ; ng) so <p> Proof. This is not difficult to prove directly; and using a lemma from <ref> [17] </ref>, we can actually prove the stronger statement that there is, in effect, a single marking which works for all k. Specifically, it is proved in [17] that there is a numbering of the n vertices of T (i.e. a bijection from V to f1; : : : ; ng) so that for each k, the removal of the vertices numbered 1 through k results in a forest in which no component has more than 2n k
Reference: [18] <author> M. Manasse, L. McGeoch, D. Sleator, </author> <title> "Competitive algorithms for on-line problems," </title> <booktitle> Proc. Twentieth ACM Symposium on Theory of Computing, </booktitle> <year> 1988, </year> <month> pp.322-333. </month>
Reference: [19] <author> D. Miller, D. Atkinson, B. Wilcox, A. Mishkin, </author> <title> "Autonomous navigation and control of a Mars rover," in Automatic Control in Aerospace, </title> <editor> T. Nishimura, Ed., </editor> <publisher> Oxford: Pergamon Press, </publisher> <year> 1989, </year> <pages> pp. 111-114. </pages>
Reference-contexts: A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken [26]. Localization is also used in the design of autonomous exploration vehicles, such as the current prototypes for Mars rovers described by Shen and Nagy, and Miller et. al. <ref> [19, 21] </ref>. For example, [19] discusses strategies by which a mobile robot can determine its location after a short period of "reconnaissance". In a related vein (outdoor navigation in less exotic landscapes) Thompson et. al. [23] also describe the role of "reconnaissance" in the localization problem. <p> Localization is also used in the design of autonomous exploration vehicles, such as the current prototypes for Mars rovers described by Shen and Nagy, and Miller et. al. [19, 21]. For example, <ref> [19] </ref> discusses strategies by which a mobile robot can determine its location after a short period of "reconnaissance". In a related vein (outdoor navigation in less exotic landscapes) Thompson et. al. [23] also describe the role of "reconnaissance" in the localization problem.
Reference: [20] <author> C. Papadimitriou, M. Yannakakis, </author> <title> "Shortest paths without a map," </title> <journal> Theoretical Computer Science, </journal> <volume> 84(1991), </volume> <pages> pp. 127-150. </pages>
Reference-contexts: Sleator and Tarjan [22]), first introduced into the realm of navigation problems by Papadimitriou and Yannakakis <ref> [20] </ref>. <p> If T is an embedded tree, we will use n to denote the number of leaves it has. * Rectangle packings in the plane, consisting of n rectangles <ref> [2, 3, 6, 20] </ref>. <p> Indeed, arguably the most natural way to design a localization algorithm for either of these environments is via the spiral search algorithm of Baeza-Yates, Culberson, and Rawlins [1]. This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems <ref> [1, 6, 12, 14, 15, 20] </ref>, layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal <ref> [10, 20] </ref>, the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems [5, 24]. <p> As these are the only two cases, this completes the proof of Theorem 1. 3 The Algorithm for Rectangles Again, to keep complications related to visibility to a minimum, we work with a rectangle packing <ref> [2, 3, 6, 20] </ref>, as defined earlier. By a vertex of the environment, we will mean a corner of some rectangle. So in the spirit of the previous section, one could picture a planar graph embedded in the two-dimensional integer grid, all of whose bounded faces are rectangles.
Reference: [21] <author> C. Shen, G. Nagy, </author> <title> "Autonomous navigation to provide long-distance surface traverses for Mars rover sample return mission," </title> <booktitle> Proc. IEEE International Symposium on Intelligent Control, </booktitle> <year> 1989, </year> <pages> pp. 362-367. </pages>
Reference-contexts: A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken [26]. Localization is also used in the design of autonomous exploration vehicles, such as the current prototypes for Mars rovers described by Shen and Nagy, and Miller et. al. <ref> [19, 21] </ref>. For example, [19] discusses strategies by which a mobile robot can determine its location after a short period of "reconnaissance". In a related vein (outdoor navigation in less exotic landscapes) Thompson et. al. [23] also describe the role of "reconnaissance" in the localization problem.
Reference: [22] <author> D. Sleator, R. Tarjan, </author> <title> "Amortized efficiency of list update and paging rules," </title> <journal> Comm. ACM, </journal> <volume> 23(1985), </volume> <pages> pp. 202-208. </pages>
Reference-contexts: Sleator and Tarjan <ref> [22] </ref>), first introduced into the realm of navigation problems by Papadimitriou and Yannakakis [20].
Reference: [23] <author> W. Thompson, H. Pick, B. Bennett, M. Hein-richs, S. Savitt, K. Smith, </author> <title> "Map-based localization: the `drop-off' problem," </title> <booktitle> Proc. DARPA Image Understanding Workshop, </booktitle> <year> 1990, </year> <pages> pp. 706-719. </pages>
Reference-contexts: 1 Introduction A fundamental task for an autonomous mobile robot is that of localization | determining its location in a known environment <ref> [7, 23, 25] </ref>. <p> For example, [19] discusses strategies by which a mobile robot can determine its location after a short period of "reconnaissance". In a related vein (outdoor navigation in less exotic landscapes) Thompson et. al. <ref> [23] </ref> also describe the role of "reconnaissance" in the localization problem. Despite the considerable attention it has received in the robotics literature, localization has been the subject of very little theoretical work. <p> = n shows that the algorithm which (in the terminology of the previous two sections) uses only Steps 1 and 3, without making use of Step 2, is no better than O (n)- competitive. 5 Placing Unique Landmarks Until now, we have been considering the "drop-off" version of the problem <ref> [23] </ref>, in which the robot is placed in an environment with very little starting information. But another situation in which localization arises is that of a robot which must repeatedly perform tasks in the same environment, and must begin by determining its current location.
Reference: [24] <author> J. Turek, J. Wolf, U. Schwiegelshohn, P. Yu, </author> <title> "Scheduling to minimize average response time," </title> <booktitle> Proc. 5th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: This natural technique has found applications, whether explicitly or implicitly, in numerous on-line navigation problems [1, 6, 12, 14, 15, 20], layered graph traversal [10, 20], the design of hybrid algorithms [13], and even the approximation of NP-hard optimization problems <ref> [5, 24] </ref>.
Reference: [25] <author> C. Ming Wang, </author> <title> "Location estimation and uncertainty analysis for mobile robots," </title> <booktitle> Proc. IEEE International Conference on Robotics and Automation, </booktitle> <year> 1988, </year> <pages> pp. 1230-1235. </pages>
Reference-contexts: 1 Introduction A fundamental task for an autonomous mobile robot is that of localization | determining its location in a known environment <ref> [7, 23, 25] </ref>. <p> One application is in the design of robot vehicles that must perform a certain task repeatedly in the same surroundings. Here, localization is used to determine the starting location at the beginning of the task, and to maintain positioning information over time <ref> [7, 9, 25] </ref>. A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken [26].
Reference: [26] <author> Y. Yacoob, L. Davis, </author> <title> "Computational ground and airborne localization over rough terrain," </title> <institution> Univ. of Maryland Tech Report CS-TR-2788. </institution>
Reference-contexts: Here, localization is used to determine the starting location at the beginning of the task, and to maintain positioning information over time [7, 9, 25]. A similar use of localization is in analyzing aerial pho tographs to determine the location from which they were taken <ref> [26] </ref>. Localization is also used in the design of autonomous exploration vehicles, such as the current prototypes for Mars rovers described by Shen and Nagy, and Miller et. al. [19, 21].
References-found: 26

