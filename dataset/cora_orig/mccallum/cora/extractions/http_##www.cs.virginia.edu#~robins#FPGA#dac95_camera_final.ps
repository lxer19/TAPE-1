URL: http://www.cs.virginia.edu/~robins/FPGA/dac95_camera_final.ps
Refering-URL: http://www.cs.virginia.edu/~robins/FPGA/DAC_95_Paper.html
Root-URL: http://www.cs.virginia.edu
Title: New Performance-Driven FPGA Routing Algorithms  
Author: Michael J. Alexander and Gabriel Robins 
Address: Charlottesville, VA 22903-2442  
Affiliation: Department of Computer Science, University of Virginia,  
Abstract: Motivated by the goal of increasing the performance of FPGA-based designs, we propose effective Steiner and arborescence FPGA routing algorithms. Our graph-based Steiner tree constructions have provably-good performance bounds and outperform the best known ones in practice, while our arborescence heuristics produce routing solutions with optimal source-sink pathlengths at a reasonably low wirelength penalty. We have incorporated our algorithms into an actual FPGA router which routed a number of industrial circuits using channel widths considerably smaller than was previously possible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins, </author> <title> An Architecture-Independent Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Grenoble, France, </address> <month> September </month> <year> 1994, </year> <pages> pp. 259-264. </pages>
Reference-contexts: Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes [4]. Recently <ref> [1, 2] </ref> developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized. However, these works do not directly minimize source-sink signal propagation delays, and while many approaches implicitly equate delay minimization with wirelength optimization, these two goals are not synonymous [11]. <p> Note that IGSMT generalizes the Iterated 1-Steiner heuristic of Kahng and Robins [10] (where H is an ordinary rectilinear minimum spanning tree construction), as well as the algorithms of <ref> [1, 2] </ref> (where H is the KMB heuristic). Our experimental results indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. The time complexity of IGSMT depends on the particular heuristic H that is used.
Reference: [2] <author> M. J. Alexander and G. Robins, </author> <title> A New Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. ACM/SIGDA Intl. Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes [4]. Recently <ref> [1, 2] </ref> developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized. However, these works do not directly minimize source-sink signal propagation delays, and while many approaches implicitly equate delay minimization with wirelength optimization, these two goals are not synonymous [11]. <p> Note that IGSMT generalizes the Iterated 1-Steiner heuristic of Kahng and Robins [10] (where H is an ordinary rectilinear minimum spanning tree construction), as well as the algorithms of <ref> [1, 2] </ref> (where H is the KMB heuristic). Our experimental results indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. The time complexity of IGSMT depends on the particular heuristic H that is used.
Reference: [3] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been used to minimize the length of critical paths <ref> [3] </ref>. On the other hand, less attention has been focused on the actual routing, which is surprising since circuit performance is limited by routing delays, rather than by combinational logic delays [11]. Routing affects the performance of FPGA-based systems in two major ways. <p> This is interesting, since our arborescence solutions have optimal source-sink path-lengths, while Steiner tree heuristics are designed to only optimize wirelength. 2 Problem Formulation An FPGA architecture consists of a set of user-configurable logic "blocks", and a set of programmable interconnection resources used for routing <ref> [3, 16] </ref> (Figure 1). Each logic block implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks. This paper focuses on the routing phase of FPGA design; thus, we assume that technology mapping, partitioning, and placement have already been performed. <p> This paper focuses on the routing phase of FPGA design; thus, we assume that technology mapping, partitioning, and placement have already been performed. Previous work on FPGA routing concentrated on solution feasibility and resource-usage minimization. For example, the CGE <ref> [3] </ref> and SEGA [13] routers handle nets based on demand and assign critical nets a higher routing priority. Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes [4]. <p> and IDOM (with respect to IKMB) on the benchmark circuits. tures; in particular, we modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [19] (Table 2), and the second corresponding to 4000-series parts [19] (Table 3) these architectures are identical to those used by the CGE router <ref> [3] </ref>, and the SEGA [13] and GPB [18] routers, respectively. The 3000-series FPGAs used to route the circuits in Table 2 have switch-block flexibility of 6 and 60% channel-edge connectivity, while the 4000-series FPGAs in Table 3 have switch-block flexibility of 3 and 100% channel-edge connectivity. <p> Only a few such passes are required to completely route each benchmark. For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE <ref> [3] </ref> using the 3000-series architecture (Table 2), as well as to the best reported values for SEGA [13] and GPB [18] using the 4000-series architecture (Table 3).
Reference: [4] <author> Y.-W. Chang, S. Thakur, K. Zhu, and D. F. Wong, </author> <title> A New Global Routing Algorithm for FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> San Jose, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: For example, the CGE [3] and SEGA [13] routers handle nets based on demand and assign critical nets a higher routing priority. Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes <ref> [4] </ref>. Recently [1, 2] developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized. However, these works do not directly minimize source-sink signal propagation delays, and while many approaches implicitly equate delay minimization with wirelength optimization, these two goals are not synonymous [11].
Reference: [5] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> Performance-Driven Interconnect Design Based on Distributed RC Delay Model, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> Dallas, </address> <month> June </month> <year> 1993, </year> <pages> pp. 606-611. </pages>
Reference-contexts: For pointsets in the Manhattan plane, an effective arborescence heuristic is the construction of Rao et al. [14], which has a performance ratio of twice optimal, as well as good empirical performance (a variation of the method of [14] was given in <ref> [5] </ref>). However, these methods rely on the underlying geometry of the Manhat-tan metric.
Reference: [6] <author> E. W. Dijkstra, </author> <title> A Note on Two Problems in Connec tion With Graphs, </title> <journal> Numerische Mathematik, </journal> <volume> 1 (1959), </volume> <pages> pp. 269-271. </pages>
Reference-contexts: The two solutions at the top depict Steiner trees, while the two lower constructions are Steiner arborescences: (a) the KMB heuristic of [12], (b) our IGSMT solution (which is also the optimal Steiner tree here), (c) DJKA, a variant of Dijkstra's algorithm <ref> [6] </ref>, (d) our IDOM construction (which is also the optimal arborescence here). 3 A Graph Steiner Tree Heuristic A number of heuristics were proposed over the years for the GSMT problem [9], two of which have perfor mance bounds of a constant factor from optimal: * KMB the heuristic of Kou, <p> We have also implemented KMB and ZEL, and used each of these as H inside the inner loop of IGSMT, yielding the IKMB and IZEL constructions, respectively. For comparison, we have implemented DOM, as well as the following adaptation of Dijkstra's shortest-paths tree algorithm <ref> [6] </ref> to the GSA problem: Average Wirelength and Maximum Pathlength % For various congestion levels, over 50 nets 5-pin nets 8-pin nets Wire Max Wire Max Algorithm Length Path Length Path (w.r.t. (w.r.t. (w.r.t. (w.r.t.
Reference: [7] <author> J. L. Ganley, </author> <title> private communication, </title> <month> April, </month> <year> 1994. </year>
Reference-contexts: Since the GSA problem is NP-complete <ref> [7] </ref>, and FPGA routing graphs are generally large, we must seek efficient heuristics for this problem.
Reference: [8] <author> J. Griffith, G. Robins, J. S. Salowe, and T. Zhang, </author> <title> Closing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13 (1994), </volume> <pages> pp. 1351-1365. </pages>
Reference-contexts: This time complexity may be substantially improved by (1) extracting out of H common computations (e.g., computing shortest-paths), to avoiding duplication of effort among multiple calls to H, and by (2) adding Steiner points in "batches" based on a non-interference criterion <ref> [8, 10] </ref>. 4 Path-Folding Heuristic Constructing an arborescence intuitively entails "folding" (i.e., overlapping) paths in a shortest-paths tree to yield the greatest possible wirelength savings while maintaining the shortest-paths property.
Reference: [9] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Any node in V N may be used as a potential Steiner point in order to optimize the overall wirelength. The GSMT problem is known to be NP-complete and arises in numerous applications <ref> [9] </ref>. The high-performance requirement of critical nets dictates a shortest source-sink paths objective, with wirelength minimization being a secondary optimization criteria. <p> (b) our IGSMT solution (which is also the optimal Steiner tree here), (c) DJKA, a variant of Dijkstra's algorithm [6], (d) our IDOM construction (which is also the optimal arborescence here). 3 A Graph Steiner Tree Heuristic A number of heuristics were proposed over the years for the GSMT problem <ref> [9] </ref>, two of which have perfor mance bounds of a constant factor from optimal: * KMB the heuristic of Kou, Markowsky and Berman [12] with a performance bound of 2 times optimal; and * ZEL the more recent heuristic of Zelikovsky [20] with performance bound of 11 6 times optimal.
Reference: [10] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: For example, we may use the ZEL heuristic [20] as H inside the IGSMT tem plate to yield the Iterated ZEL (IZEL) method, which inherits ZEL's performance bound of 11 6 times optimal. Note that IGSMT generalizes the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [10] </ref> (where H is an ordinary rectilinear minimum spanning tree construction), as well as the algorithms of [1, 2] (where H is the KMB heuristic). Our experimental results indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. <p> This time complexity may be substantially improved by (1) extracting out of H common computations (e.g., computing shortest-paths), to avoiding duplication of effort among multiple calls to H, and by (2) adding Steiner points in "batches" based on a non-interference criterion <ref> [8, 10] </ref>. 4 Path-Folding Heuristic Constructing an arborescence intuitively entails "folding" (i.e., overlapping) paths in a shortest-paths tree to yield the greatest possible wirelength savings while maintaining the shortest-paths property. <p> For uncongested graphs, both PFA and IDOM yield optimal maximum pathlength at almost no wire-length penalty over IZEL; thus, these seem to afford favorable tradeoffs between wirelength and maximum pathlength. Note that IKMB and Iterated 1-Steiner <ref> [10] </ref> yield identical solutions for geometric instances (when using the Hanan grid as the underlying graph). We built an actual FPGA router based on these algorithms, and completely 1 routed 14 pre-placed industrial benchmark circuits, containing up to 608 nets each.
Reference: [11] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnections for VLSI, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: On the other hand, less attention has been focused on the actual routing, which is surprising since circuit performance is limited by routing delays, rather than by combinational logic delays <ref> [11] </ref>. Routing affects the performance of FPGA-based systems in two major ways. First, a typical design must be partitioned and mapped onto several FPGAs. <p> Recently [1, 2] developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized. However, these works do not directly minimize source-sink signal propagation delays, and while many approaches implicitly equate delay minimization with wirelength optimization, these two goals are not synonymous <ref> [11] </ref>. In order to apply graph-based techniques, we model the FPGA as a graph, where the overall graph topology mirrors the complete FPGA architecture; paths in this graph correspond to feasible routes on the FPGA, and vice versa (Figure 2).
Reference: [12] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Al gorithm for Steiner Trees, </title> <journal> Acta Informatica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: This motivates Steiner arborescence constructions (i.e., shortest-paths trees having minimum wirelength) for critical-net routing. Our first contribution is a class of algorithms for non-critical-net routing which can outperform the best known graph Steiner tree heuristics, i.e., those of Kou, Markowsky and Berman <ref> [12] </ref>, and of Zelikovsky [20]. Our graph Steiner construction is based on an iterative template that uses any given Steiner tree heuristic H by greedily selecting Steiner nodes that induce maximum wirelength savings with respect to H. <p> The two solutions at the top depict Steiner trees, while the two lower constructions are Steiner arborescences: (a) the KMB heuristic of <ref> [12] </ref>, (b) our IGSMT solution (which is also the optimal Steiner tree here), (c) DJKA, a variant of Dijkstra's algorithm [6], (d) our IDOM construction (which is also the optimal arborescence here). 3 A Graph Steiner Tree Heuristic A number of heuristics were proposed over the years for the GSMT problem <p> construction (which is also the optimal arborescence here). 3 A Graph Steiner Tree Heuristic A number of heuristics were proposed over the years for the GSMT problem [9], two of which have perfor mance bounds of a constant factor from optimal: * KMB the heuristic of Kou, Markowsky and Berman <ref> [12] </ref> with a performance bound of 2 times optimal; and * ZEL the more recent heuristic of Zelikovsky [20] with performance bound of 11 6 times optimal. We propose a method of iterating heuristics for the GSMT problem.
Reference: [13] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: This paper focuses on the routing phase of FPGA design; thus, we assume that technology mapping, partitioning, and placement have already been performed. Previous work on FPGA routing concentrated on solution feasibility and resource-usage minimization. For example, the CGE [3] and SEGA <ref> [13] </ref> routers handle nets based on demand and assign critical nets a higher routing priority. Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes [4]. <p> to IKMB) on the benchmark circuits. tures; in particular, we modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [19] (Table 2), and the second corresponding to 4000-series parts [19] (Table 3) these architectures are identical to those used by the CGE router [3], and the SEGA <ref> [13] </ref> and GPB [18] routers, respectively. The 3000-series FPGAs used to route the circuits in Table 2 have switch-block flexibility of 6 and 60% channel-edge connectivity, while the 4000-series FPGAs in Table 3 have switch-block flexibility of 3 and 100% channel-edge connectivity. We did not alter the fixed benchmark placements. <p> For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE [3] using the 3000-series architecture (Table 2), as well as to the best reported values for SEGA <ref> [13] </ref> and GPB [18] using the 4000-series architecture (Table 3).
Reference: [14] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> The Rectilinear Steiner Arborescence Problem, </title> <journal> Algorithmica, </journal> <year> (1992), </year> <pages> pp. 277-288. </pages>
Reference-contexts: For pointsets in the Manhattan plane, an effective arborescence heuristic is the construction of Rao et al. <ref> [14] </ref>, which has a performance ratio of twice optimal, as well as good empirical performance (a variation of the method of [14] was given in [5]). However, these methods rely on the underlying geometry of the Manhat-tan metric. <p> For pointsets in the Manhattan plane, an effective arborescence heuristic is the construction of Rao et al. <ref> [14] </ref>, which has a performance ratio of twice optimal, as well as good empirical performance (a variation of the method of [14] was given in [5]). However, these methods rely on the underlying geometry of the Manhat-tan metric. <p> Selecting a M axDom as far away from the origin as possible maximizes the overlap (i.e., the wirelength savings) between the two paths. These definitions enable our Path-Folding Arborescence (PFA) heuristic which generalizes the method of <ref> [14] </ref> to arbitrary weighted graphs.
Reference: [15] <author> Y. Sun, T. C. Wang, C. K. Wong, and C. L. Liu, </author> <title> Routing for Symmetric FPGAs and FPICs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1993, </year> <pages> pp. 486-490. </pages>
Reference-contexts: Previous work on FPGA routing concentrated on solution feasibility and resource-usage minimization. For example, the CGE [3] and SEGA [13] routers handle nets based on demand and assign critical nets a higher routing priority. Other papers studied FPGA routing with switch blocks of limited flexibility [18], explored modified architectures <ref> [15] </ref>, or computed lower bounds on routing rather than providing actual routes [4]. Recently [1, 2] developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized.
Reference: [16] <author> S. M. Trimberger, </author> <title> Field-Programmable Gate Array Technology, </title> <editor> S. M. Trimberger, editor, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: The flexibility provided by FPGAs incurs a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern of FPGA designers and users <ref> [16] </ref>. In order to increase FPGA performance, partitioning and technology mapping have been used to minimize the length of critical paths [3]. <p> This is interesting, since our arborescence solutions have optimal source-sink path-lengths, while Steiner tree heuristics are designed to only optimize wirelength. 2 Problem Formulation An FPGA architecture consists of a set of user-configurable logic "blocks", and a set of programmable interconnection resources used for routing <ref> [3, 16] </ref> (Figure 1). Each logic block implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks. This paper focuses on the routing phase of FPGA design; thus, we assume that technology mapping, partitioning, and placement have already been performed.
Reference: [17] <author> Y.-L. Wu and D. Chang, </author> <title> On the NP-Completeness of Regular 2-D FPGA Routing Architectures and a Novel Solution, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> San Jose, CA, </address> <month> November </month> <year> 1994, </year> <pages> pp. 362-366. </pages>
Reference-contexts: Our constructions easily adapt to a variety of architec 1 Incomplete routes or global routing only are not useful in practice, since there can be an arbitrarily large increase in channel width in obtaining complete detailed routes from these <ref> [17] </ref>.
Reference: [18] <author> Y.-L. Wu and M. Marek-Sadowska, </author> <title> An Efficient Router for 2-D Field Programmable Gate Arrays, </title> <booktitle> in Eu-ropean Design and Test Conf., </booktitle> <year> 1994, </year> <pages> pp. 412-416. </pages>
Reference-contexts: Previous work on FPGA routing concentrated on solution feasibility and resource-usage minimization. For example, the CGE [3] and SEGA [13] routers handle nets based on demand and assign critical nets a higher routing priority. Other papers studied FPGA routing with switch blocks of limited flexibility <ref> [18] </ref>, explored modified architectures [15], or computed lower bounds on routing rather than providing actual routes [4]. Recently [1, 2] developed a routing framework where mutually competing objectives (e.g., congestion, wirelength, jog minimization) are simultaneously optimized. <p> the benchmark circuits. tures; in particular, we modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [19] (Table 2), and the second corresponding to 4000-series parts [19] (Table 3) these architectures are identical to those used by the CGE router [3], and the SEGA [13] and GPB <ref> [18] </ref> routers, respectively. The 3000-series FPGAs used to route the circuits in Table 2 have switch-block flexibility of 6 and 60% channel-edge connectivity, while the 4000-series FPGAs in Table 3 have switch-block flexibility of 3 and 100% channel-edge connectivity. We did not alter the fixed benchmark placements. <p> For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE [3] using the 3000-series architecture (Table 2), as well as to the best reported values for SEGA [13] and GPB <ref> [18] </ref> using the 4000-series architecture (Table 3).
Reference: [19] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xil-inx, Inc., </publisher> <address> San Jose, California, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Field-Programmable Gate Arrays (FPGAs) are flexible and reusable high-density circuits that can be (re)configured by the designer, enabling the VLSI design/validation/simulation cycle to be performed more quickly and cheaply <ref> [19] </ref>. The flexibility provided by FPGAs incurs a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern of FPGA designers and users [16]. <p> alu2 11 23.9 14.1 -14.7 -18.0 Averages: 18.2 12.8 -9.5 -10.2 Table 5: Percent increase in wirelength and decrease in maximum pathlength for PFA and IDOM (with respect to IKMB) on the benchmark circuits. tures; in particular, we modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts <ref> [19] </ref> (Table 2), and the second corresponding to 4000-series parts [19] (Table 3) these architectures are identical to those used by the CGE router [3], and the SEGA [13] and GPB [18] routers, respectively. <p> -10.2 Table 5: Percent increase in wirelength and decrease in maximum pathlength for PFA and IDOM (with respect to IKMB) on the benchmark circuits. tures; in particular, we modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts <ref> [19] </ref> (Table 2), and the second corresponding to 4000-series parts [19] (Table 3) these architectures are identical to those used by the CGE router [3], and the SEGA [13] and GPB [18] routers, respectively.
Reference: [20] <author> A. Z. Zelikovsky, </author> <title> An 11/6 Approximation Algorithm for the Network Steiner Problem, </title> <journal> Algorithmica, </journal> <volume> 9 (1993), </volume> <pages> pp. 463-470. </pages>
Reference-contexts: This motivates Steiner arborescence constructions (i.e., shortest-paths trees having minimum wirelength) for critical-net routing. Our first contribution is a class of algorithms for non-critical-net routing which can outperform the best known graph Steiner tree heuristics, i.e., those of Kou, Markowsky and Berman [12], and of Zelikovsky <ref> [20] </ref>. Our graph Steiner construction is based on an iterative template that uses any given Steiner tree heuristic H by greedily selecting Steiner nodes that induce maximum wirelength savings with respect to H. <p> were proposed over the years for the GSMT problem [9], two of which have perfor mance bounds of a constant factor from optimal: * KMB the heuristic of Kou, Markowsky and Berman [12] with a performance bound of 2 times optimal; and * ZEL the more recent heuristic of Zelikovsky <ref> [20] </ref> with performance bound of 11 6 times optimal. We propose a method of iterating heuristics for the GSMT problem. <p> For example, we may use the ZEL heuristic <ref> [20] </ref> as H inside the IGSMT tem plate to yield the Iterated ZEL (IZEL) method, which inherits ZEL's performance bound of 11 6 times optimal.
References-found: 20

