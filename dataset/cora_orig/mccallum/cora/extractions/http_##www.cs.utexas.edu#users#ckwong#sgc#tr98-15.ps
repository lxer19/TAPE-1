URL: http://www.cs.utexas.edu/users/ckwong/sgc/tr98-15.ps
Refering-URL: http://www.cs.utexas.edu/users/ckwong/sgc/index.html
Root-URL: http://www.cs.utexas.edu
Email: fckwong,lamg@cs.utexas.edu  
Title: Digital Signatures for Flows and Multicasts  
Author: Chung Kei Wong Simon S. Lam 
Date: May 31, 1998 Aug 7, 1998 (revised)  
Address: Austin, TX 78712-1188  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Pubnum: TR-98-15  
Abstract: Our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows. For an individual message (packet), these concerns can be addressed by one of several popular digital signature schemes. However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. Furthermore, for a multicasted flow, the intended receivers generally get different subsequences of packets in the flow. Existing techniques that depend upon reliable flow delivery cannot be used. In this paper, we first present and compare chaining techniques for signing/verifying multiple packets using a single signing/verification operation. We then present flow signing and verification procedures based upon a tree chaining technique. Since a single signing/verification operation is amortized over many packets, these procedures improve signing and verification rates by one to two orders of magnitude compared to the approach of signing/verifying packets individually. Our procedures do not depend upon reliable delivery of packets, provide delay-bounded signing, and are thus suitable for delay-sensitive flows and multicast applications. To further improve our procedures, we propose several extensions to the Feige-Fiat-Shamir digital signature scheme to speed up both the signing and verification operations, as well as to allow "adjustable and incremental" verification. The extended scheme, called eFFS, is compared to four other digital signature schemes (RSA, DSA, ElGamal, Rabin). We compare their signing and verification times, as well as key and signature sizes. We observe that (i) the signing and verification operations of eFFS are highly efficient compared to the other schemes, (ii) eFFS allows a tradeoff between memory and signing/verification time, and (iii) eFFS allows adjustable and incremental verification by receivers. fl Research sponsored by Texas Advanced Research Program grant no. 003658-063. An abbreviated version of this report appears in Proceedings of IEEE ICNP '98, Austin, TX, Oct. 1998. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tony Ballardie. </author> <title> Scalable Multicast Key Distribution, </title> <booktitle> RFC 1949, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Exceptions include recent papers on scalable secure multicasting <ref> [1, 13, 20] </ref> and a flow-based approach to datagram security [14]. All of these papers are mainly concerned with data confidentiality. In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers.
Reference: [2] <author> Stephen E. Deering. </author> <title> Multicast Routing in Internetworks and Extended LANs. </title> <booktitle> In Proceedings of ACM SIGCOMM '88, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. In the Internet, multicast has been used successfully to provide an efficient, best-effort delivery service to large groups <ref> [2] </ref>. Consider a packet flow multicasted to a group of receivers. A consequence of best-effort delivery is that many receivers will not receive all of the packets in the multicasted flow.
Reference: [3] <author> Uriel Feige, Amos Fiat, and Adi Shamir. </author> <title> Zero Knowledge Proofs of Identity. </title> <booktitle> In Proc. of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1987. </year>
Reference-contexts: A performance comparison of eFFS with four other signature schemes (including RSA and DSA) is given in Section 4. 3 The eFFS Signature Scheme The eFFS signature scheme is derived from the Feige-Fiat-Shamir signature scheme <ref> [3, 4] </ref> with several extensions. In Section 3.1, we describe the basic Feige-Fiat-Shamir signature scheme. In Section 3.2, we describe an improvement suggested in [12], called small verification key (small v-key) which reduces verification time by an order of magnitude. <p> the times for signing and verifying (with 512-bit modulus) 128-bit message digests, using different speedup techniques and different eFFS/FFS parameters (k; t). 11 The results were obtained on a Pentium II 300 MHz machine running Linux. 3.1 Feige-Fiat-Shamir signature scheme In the basic FFS signature scheme with parameter (k; t) <ref> [3, 4] </ref>, each signer chooses two large primes p and q, and computes modulus n = pq. <p> Our flow signing and verification procedures are very efficient and achieve one to two orders of magnitude improvement compared to the sign-each approach. To further improve our procedures, we propose several extensions to the Feige-Fiat-Shamir digital signature scheme <ref> [3, 4] </ref> to speed up both the signing and verification operations, as well as to allow adjustable and incremental verification.
Reference: [4] <author> Amos Fiat and Adi Shamir. </author> <title> How to Prove Yourself: Practical Solutions to Identification and Signature Problems. </title> <booktitle> In Advances in Cryptology | CRYPTO '86, </booktitle> <pages> pages 186-194, </pages> <year> 1987. </year>
Reference-contexts: A performance comparison of eFFS with four other signature schemes (including RSA and DSA) is given in Section 4. 3 The eFFS Signature Scheme The eFFS signature scheme is derived from the Feige-Fiat-Shamir signature scheme <ref> [3, 4] </ref> with several extensions. In Section 3.1, we describe the basic Feige-Fiat-Shamir signature scheme. In Section 3.2, we describe an improvement suggested in [12], called small verification key (small v-key) which reduces verification time by an order of magnitude. <p> the times for signing and verifying (with 512-bit modulus) 128-bit message digests, using different speedup techniques and different eFFS/FFS parameters (k; t). 11 The results were obtained on a Pentium II 300 MHz machine running Linux. 3.1 Feige-Fiat-Shamir signature scheme In the basic FFS signature scheme with parameter (k; t) <ref> [3, 4] </ref>, each signer chooses two large primes p and q, and computes modulus n = pq. <p> Our flow signing and verification procedures are very efficient and achieve one to two orders of magnitude improvement compared to the sign-each approach. To further improve our procedures, we propose several extensions to the Feige-Fiat-Shamir digital signature scheme <ref> [3, 4] </ref> to speed up both the signing and verification operations, as well as to allow adjustable and incremental verification.
Reference: [5] <author> Sally Floyd, Van Jacobson, Ching-Gung Liu, Steven McCanne, and Lixia Zhang. </author> <title> A Reliable Multicast Framework for Light-Weight Sessions and Application Level Framing. </title> <booktitle> In Proceedings of ACM SIGCOMM '95, </booktitle> <year> 1995. </year>
Reference-contexts: For example, reliable delivery is generally not used for video and audio flows due to the extra delays associated with retransmissions; either losses are tolerated or forward error correction techniques are used instead. For large-scale multicast applications, reliable delivery of multicast packets is a difficult problem <ref> [5] </ref>. Moreover, even if reliable multicasting is available, receivers with different needs/capabilities may choose to get different subsequences of packets in a multicasted flow.
Reference: [6] <author> T. El Gamal. </author> <title> A Public-Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. </title> <booktitle> In Advances in Cryptology | CRYPTO '84. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers. For an individual message (packet), these concerns can be addressed by one of many available digital signature schemes <ref> [6, 15, 17, 19] </ref>. However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. In the Internet, multicast has been used successfully to provide an efficient, best-effort delivery service to large groups [2]. <p> Specifically, we present several extensions to the Feige-Fiat-Shamir digital signature scheme to speed up both signing and verification as well as to allow adjustable and incremental verification. In Section 4, the extended Feige-Fiat-Shamir (eFFS) scheme is compared to four well-known signature schemes <ref> [6, 15, 17, 19] </ref>. We compare their signing and verification times, as well as key and signature sizes. <p> using 0.401 ms processor time, and later increase to level 2 (of 2) by using 0.368 ms additional processor time. 20 4 Comparison with other Signature Schemes In this section, we compare eFFS (64,1) and eFFS (128,1) to four other signature schemes available from CryptoLib [8], namely: DSA [15], ElGamal <ref> [6] </ref>, RSA [19], and Rabin [17]. We compare their key and signature sizes, and signing and verification times. Then, we compare their signing and verification rates for 1024-byte packets when each is used as the signature scheme in our flow signing and verification procedures presented in Section 2. <p> The extended scheme, called eFFS, is compared to four other digital signature schemes, RSA [19], Rabin [17], DSA [15], and ElGamal <ref> [6] </ref>, on the same computing platform (Pentium II 300 MHz machine running Linux). The signing operation of eFFS is more efficient than those of the other four schemes.
Reference: [7] <author> Rosario Gennaro and Pankaj Rohatgi. </author> <title> How to Sign Digital Streams. </title> <booktitle> In Advances in Cryptology | CRYPTO '97, </booktitle> <year> 1997. </year>
Reference-contexts: Furthermore, for delay-sensitive flows, real-time generated or not, the verification rate is important. From Table 1, we see that the signing and verification rates of the sign-each approach, using either RSA or DSA, are probably inadequate for many applications. Two techniques were proposed for signing digital streams in <ref> [7] </ref> which, at first glance, may be used for signing packet flows. To describe the technique in [7] for signing a non-real-time generated flow, consider a sequence of m packets. <p> Two techniques were proposed for signing digital streams in <ref> [7] </ref> which, at first glance, may be used for signing packet flows. To describe the technique in [7] for signing a non-real-time generated flow, consider a sequence of m packets. The sender first computes message digest D m of packet m (the last packet) and concatenates packet m 1 and D m to form augmented packet m 1. <p> However, a necessary condition for using the above technique is the following get-all-before requirement: To verify packet i in the sequence, a receiver must have received every packet from the beginning of the sequence. For a real-time generated flow, a similar technique is suggested in <ref> [7] </ref> with the same get-all-before requirement. For a sequence of m packets, only one expensive signing/verification operation is needed, plus one inexpensive one-time signature signing/verification for each packet in the sequence. <p> However, since one-time signatures and keys are very large, this technique has a large communication overhead (around 1000 bytes per packet) [9, 10]. The get-all-before requirement of both techniques in <ref> [7] </ref> is too strong for practical Internet applications. Reliable packet delivery is not used by many applications for flows and multicasts. <p> resources, and later increase the security level by using more resources (e.g., if the message is important). 1.3 Contributions of this paper In Section 2, we first describe and compare two chaining techniques (star and tree) for signing/verifying multiple packets using a single signing/verification operation (without the get-all-before requirement in <ref> [7] </ref>). We then present flow signing and verification procedures based upon the tree chaining technique. Since a single signing/verification operation is amortized over many packets, these procedures improve signing and verification rates by one to two orders of magnitude compared to the sign-each approach.
Reference: [8] <author> J. B. Lacy, D. P. Mitchell, and W. M. </author> <title> Schell. </title> <booktitle> CryptoLib: cryptography in software. In Proceedings of USENIX: 4th UNIX Security Symposium, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: 0.66 0.55 8-bit precomp + small v-key 0.28 0.56 0.36 1.09 0.65 0.54 Table 15: eFFS verification time (ms) with 512-bit modulus. 16 We implemented the basic Feige-Fiat-Shamir (FFS) scheme and the eFFS scheme (i.e., with the improvements and extensions mentioned above) using the large integer arithmetic routines from CryptoLib <ref> [8] </ref>. <p> at level 1 of 2 using 0.401 ms processor time, and later increase to level 2 (of 2) by using 0.368 ms additional processor time. 20 4 Comparison with other Signature Schemes In this section, we compare eFFS (64,1) and eFFS (128,1) to four other signature schemes available from CryptoLib <ref> [8] </ref>, namely: DSA [15], ElGamal [6], RSA [19], and Rabin [17]. We compare their key and signature sizes, and signing and verification times.
Reference: [9] <author> Leslie Lamport. </author> <title> Constructing digital signatures from a one-way function. </title> <type> Technical Report CSL 98, </type> <institution> SRI Intl., </institution> <year> 1979. </year>
Reference-contexts: For a sequence of m packets, only one expensive signing/verification operation is needed, plus one inexpensive one-time signature signing/verification for each packet in the sequence. However, since one-time signatures and keys are very large, this technique has a large communication overhead (around 1000 bytes per packet) <ref> [9, 10] </ref>. The get-all-before requirement of both techniques in [7] is too strong for practical Internet applications. Reliable packet delivery is not used by many applications for flows and multicasts.
Reference: [10] <author> Ralph C. Merkle. </author> <title> A Digital Signature based on a Conventional Encryption Function. </title> <booktitle> In Advances in Cryptology | CRYPTO '87, </booktitle> <year> 1987. </year>
Reference-contexts: For a sequence of m packets, only one expensive signing/verification operation is needed, plus one inexpensive one-time signature signing/verification for each packet in the sequence. However, since one-time signatures and keys are very large, this technique has a large communication overhead (around 1000 bytes per packet) <ref> [9, 10] </ref>. The get-all-before requirement of both techniques in [7] is too strong for practical Internet applications. Reliable packet delivery is not used by many applications for flows and multicasts.
Reference: [11] <author> Ralph C. Merkle. </author> <title> A Certified Digital Signature. </title> <booktitle> In Advances in Cryptology | CRYPTO '89, </booktitle> <year> 1989. </year>
Reference-contexts: The packet is verified if the verification operation returns true, i.e., D 0 18 = D 18 . 4 Tree chaining was first presented in <ref> [11] </ref>. Any rooted tree can be used as an authentication tree with packet digests at leaf nodes and the block digest at the root. In particular, there is no need to use a balanced tree. 6 Suppose the third packet is the first in the block to arrive.
Reference: [12] <author> Silvio Micali and Adi Shamir. </author> <title> An Improvement on the Fiat-Shamir Identification and Signature Scheme. </title> <booktitle> In Advances in Cryptology | CRYPTO '88, </booktitle> <pages> pages 244-247, </pages> <year> 1990. </year>
Reference-contexts: In Section 3.1, we describe the basic Feige-Fiat-Shamir signature scheme. In Section 3.2, we describe an improvement suggested in <ref> [12] </ref>, called small verification key (small v-key) which reduces verification time by an order of magnitude. In Section 3.3, we propose to use a speedup technique suggested by the Chinese Remainder Theorem (crt), which reduces signing time. <p> An improvement idea suggested in <ref> [12] </ref> is to use small prime numbers 13 as the verification key components fv i g and compute the signing key components fs i g by s 2 i = v 1 i mod n. This improvement (labeled as "small v-key" in Table 14 and Table 15) has two advantages. <p> Since s 1 ; : : : ; s 4 do not change from message to message, and b i1 ; : : : ; b i4 are either one or zero, the signer 13 Actually, <ref> [12] </ref> suggests using the first k prime numbers as the verification key components fv i g.
Reference: [13] <author> Suvo Mittra. Iolus: </author> <title> A Framework for Scalable Secure Multicasting. </title> <booktitle> In Proceedings of ACM SIGCOMM '97, </booktitle> <year> 1997. </year>
Reference-contexts: Exceptions include recent papers on scalable secure multicasting <ref> [1, 13, 20] </ref> and a flow-based approach to datagram security [14]. All of these papers are mainly concerned with data confidentiality. In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers.
Reference: [14] <author> Suvo Mittra and Thomas Y.C. Woo. </author> <title> A Flow-Based Approach to Datagram Security. </title> <booktitle> In Proceedings of ACM SIGCOMM '97, </booktitle> <year> 1997. </year>
Reference-contexts: Exceptions include recent papers on scalable secure multicasting [1, 13, 20] and a flow-based approach to datagram security <ref> [14] </ref>. All of these papers are mainly concerned with data confidentiality. In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers.
Reference: [15] <institution> National Institute of Standards and Technology. Digital Signature Standard. </institution> <type> NIST FIPS PUB 86, U.S. </type> <institution> Department of Commerce, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers. For an individual message (packet), these concerns can be addressed by one of many available digital signature schemes <ref> [6, 15, 17, 19] </ref>. However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. In the Internet, multicast has been used successfully to provide an efficient, best-effort delivery service to large groups [2]. <p> The signing and verification rates 3 of two widely used digital signature schemes, RSA [19] and DSA <ref> [15] </ref>, on a Pentium II 300 MHz machine, are given in Table 1. The signing and verification rates with 100% processor time of the machine used for signing/verification are in Table 1 (a). <p> Specifically, we present several extensions to the Feige-Fiat-Shamir digital signature scheme to speed up both signing and verification as well as to allow adjustable and incremental verification. In Section 4, the extended Feige-Fiat-Shamir (eFFS) scheme is compared to four well-known signature schemes <ref> [6, 15, 17, 19] </ref>. We compare their signing and verification times, as well as key and signature sizes. <p> of 2 using 0.401 ms processor time, and later increase to level 2 (of 2) by using 0.368 ms additional processor time. 20 4 Comparison with other Signature Schemes In this section, we compare eFFS (64,1) and eFFS (128,1) to four other signature schemes available from CryptoLib [8], namely: DSA <ref> [15] </ref>, ElGamal [6], RSA [19], and Rabin [17]. We compare their key and signature sizes, and signing and verification times. Then, we compare their signing and verification rates for 1024-byte packets when each is used as the signature scheme in our flow signing and verification procedures presented in Section 2. <p> The extended scheme, called eFFS, is compared to four other digital signature schemes, RSA [19], Rabin [17], DSA <ref> [15] </ref>, and ElGamal [6], on the same computing platform (Pentium II 300 MHz machine running Linux). The signing operation of eFFS is more efficient than those of the other four schemes.
Reference: [16] <author> C. Partridge. </author> <title> Using the Flow Label Field in IPv6, </title> <type> RFC 1809, </type> <month> June </month> <year> 1995. </year>
Reference-contexts: Signing a message means signing the digest of the message. (MD5 message digests are 128 bits long.) A flow is a sequence of packets characterized by some attribute <ref> [16, 21] </ref>. Packets in a flow may be obtained from segmenting the bit stream of digitized video, digitized audio, or a large file. Or they may be related data items, such as stock quotes, news, etc., generated by the same source.
Reference: [17] <author> M.O. Rabin. </author> <title> Digitized signatures and public-key functions as intractible as factorization. </title> <type> Technical Report LCS/TR-212, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1979. </year>
Reference-contexts: In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers. For an individual message (packet), these concerns can be addressed by one of many available digital signature schemes <ref> [6, 15, 17, 19] </ref>. However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. In the Internet, multicast has been used successfully to provide an efficient, best-effort delivery service to large groups [2]. <p> Specifically, we present several extensions to the Feige-Fiat-Shamir digital signature scheme to speed up both signing and verification as well as to allow adjustable and incremental verification. In Section 4, the extended Feige-Fiat-Shamir (eFFS) scheme is compared to four well-known signature schemes <ref> [6, 15, 17, 19] </ref>. We compare their signing and verification times, as well as key and signature sizes. <p> and later increase to level 2 (of 2) by using 0.368 ms additional processor time. 20 4 Comparison with other Signature Schemes In this section, we compare eFFS (64,1) and eFFS (128,1) to four other signature schemes available from CryptoLib [8], namely: DSA [15], ElGamal [6], RSA [19], and Rabin <ref> [17] </ref>. We compare their key and signature sizes, and signing and verification times. Then, we compare their signing and verification rates for 1024-byte packets when each is used as the signature scheme in our flow signing and verification procedures presented in Section 2. <p> The extended scheme, called eFFS, is compared to four other digital signature schemes, RSA [19], Rabin <ref> [17] </ref>, DSA [15], and ElGamal [6], on the same computing platform (Pentium II 300 MHz machine running Linux). The signing operation of eFFS is more efficient than those of the other four schemes.
Reference: [18] <author> Ronald L. Rivest. </author> <title> The MD5 Message Digest Algorithm, </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: If the verification function returns true, then the verifier concludes that the signer did sign the message and the message has not been altered. Moreover, the signer cannot deny having signed the message (non-repudiation). In practice, a message digest function, such as MD5 <ref> [18] </ref>, is first applied to the message to generate a fixed-size message digest which is independent of message size. Signing a message means signing the digest of the message. (MD5 message digests are 128 bits long.) A flow is a sequence of packets characterized by some attribute [16, 21]. <p> We used MD5 as the message digest function <ref> [18] </ref> for generating 128-bit message digests. Tables 2 and 3 show the MD5 computation time for different input sizes. Note that the MD5 computation time is a step function in input size with a step size of 56 bytes.
Reference: [19] <author> Ronald L. Rivest, Adi Shamir, and Leonard Adleman. </author> <title> A method for obtaining digital signa-tures and public key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <year> 1978. </year>
Reference-contexts: In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers. For an individual message (packet), these concerns can be addressed by one of many available digital signature schemes <ref> [6, 15, 17, 19] </ref>. However, these schemes are not efficient enough for signing/verifying packets individually for delay-sensitive flows, such as packet video. In the Internet, multicast has been used successfully to provide an efficient, best-effort delivery service to large groups [2]. <p> The signing and verification rates 3 of two widely used digital signature schemes, RSA <ref> [19] </ref> and DSA [15], on a Pentium II 300 MHz machine, are given in Table 1. The signing and verification rates with 100% processor time of the machine used for signing/verification are in Table 1 (a). <p> Specifically, we present several extensions to the Feige-Fiat-Shamir digital signature scheme to speed up both signing and verification as well as to allow adjustable and incremental verification. In Section 4, the extended Feige-Fiat-Shamir (eFFS) scheme is compared to four well-known signature schemes <ref> [6, 15, 17, 19] </ref>. We compare their signing and verification times, as well as key and signature sizes. <p> ms processor time, and later increase to level 2 (of 2) by using 0.368 ms additional processor time. 20 4 Comparison with other Signature Schemes In this section, we compare eFFS (64,1) and eFFS (128,1) to four other signature schemes available from CryptoLib [8], namely: DSA [15], ElGamal [6], RSA <ref> [19] </ref>, and Rabin [17]. We compare their key and signature sizes, and signing and verification times. Then, we compare their signing and verification rates for 1024-byte packets when each is used as the signature scheme in our flow signing and verification procedures presented in Section 2. <p> To further improve our procedures, we propose several extensions to the Feige-Fiat-Shamir digital signature scheme [3, 4] to speed up both the signing and verification operations, as well as to allow adjustable and incremental verification. The extended scheme, called eFFS, is compared to four other digital signature schemes, RSA <ref> [19] </ref>, Rabin [17], DSA [15], and ElGamal [6], on the same computing platform (Pentium II 300 MHz machine running Linux). The signing operation of eFFS is more efficient than those of the other four schemes.
Reference: [20] <author> Chung Kei Wong, Mohamed Gouda, and Simon S. Lam. </author> <title> Secure Group Communications Using Key Graphs. </title> <note> To appear in Proceedings of ACM SIGCOMM '98, </note> <month> Sep 2-4, </month> <year> 1998. </year>
Reference-contexts: Exceptions include recent papers on scalable secure multicasting <ref> [1, 13, 20] </ref> and a flow-based approach to datagram security [14]. All of these papers are mainly concerned with data confidentiality. In this paper, our concerns are data authenticity, integrity and non-repudiation for delay-sensitive packet flows, particularly flows to be delivered to large groups of receivers.
Reference: [21] <author> L. Zhang, S.E. Deering, D. Estrin, S. Shenker, and D. Zappala. RSVP: </author> <title> A new resource ReSerVation Protocol. </title> <journal> IEEE Network Magazine, </journal> <volume> 9(5), </volume> <year> 1993. </year> <month> 25 </month>
Reference-contexts: Signing a message means signing the digest of the message. (MD5 message digests are 128 bits long.) A flow is a sequence of packets characterized by some attribute <ref> [16, 21] </ref>. Packets in a flow may be obtained from segmenting the bit stream of digitized video, digitized audio, or a large file. Or they may be related data items, such as stock quotes, news, etc., generated by the same source.
References-found: 21

