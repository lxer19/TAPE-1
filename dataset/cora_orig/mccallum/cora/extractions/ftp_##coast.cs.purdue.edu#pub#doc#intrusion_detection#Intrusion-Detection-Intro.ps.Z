URL: ftp://coast.cs.purdue.edu/pub/doc/intrusion_detection/Intrusion-Detection-Intro.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ24.html
Root-URL: http://www.cs.purdue.edu
Title: An Introduction to Intrusion Detection  
Author: by Aurobindo Sundaram 
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> J.P Anderson. </author> <title> Computer Security Threat Monitoring and Surveillance. </title> <type> Technical report, </type> <institution> James P Anderson Co., </institution> <address> Fort Washington, Pennsylvania, </address> <month> April </month> <year> 1980. </year>
Reference-contexts: However, completely preventing breaches of security appear, at present, unrealistic. We can, however, try to detect these intrusion attempts so that action may be taken to repair the damage later. This field of research is called Intrusion Detection. Anderson, while introducing the concept of intrusion detection in 1980 <ref> [1] </ref>, defined an intrusion attempt or a threat to be the potential possibility of a deliberate unauthorized attempt to access information, manipulate information, or render a system unreliable or unusable. Since then, several techniques for detecting intrusions have been studied. <p> It is thus more important than ever before that since it seems obvious that we cannot prevent subversion, we should at least try to detect it and prevent similar attacks in future. In the following sections, we use definitions from the pioneering work in intrusion detection <ref> [1] </ref> Risk : Accidental or unpredictable exposure of information, or violation of operations integrity due to the malfunction of hardware or incomplete or incorrect software design.
Reference: 2. <author> Mark Crosbie and Eugene Spafford. </author> <title> Defending a Computer System Using Autonomous Agents. </title> <type> Technical Report CSD-TR-95-022, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1995. </year>
Reference-contexts: Finally, the IDS can be used with any system, because it is monitoring network traffic, protocols for which (TCP, UDP etc.) are standardized. There is no problem with different audit files, for example. Researchers at Purdue University are working on several issues in intrusion detection. Crosbie and Spafford <ref> [2] </ref> propose to build an IDS using Autonomous Agents. Instead of a single large IDS defending the system, they propose an approach where several independent, small processes operate while co-operating in maintaining the system. The advantages claimed for this approach are efficiency, fault tolerance, resilience to degradation, extensibility and scalability.
Reference: 3. <author> Dorothy E Denning. </author> <title> An Intrusion Detection Model. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> Number 2, </volume> <pages> page 222, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: An interesting fact about Kumar's IDS is that it is called IDIOT (Intrusion Detection In Our Time), and we leave it to the reader to ponder the appropriateness of the name for the state of the art in intrusion detection. 6 Other Models and Directions in Research Dorothy Denning <ref> [3] </ref> introduced a Generic Intrusion Detection Model that was independent of any particular system, application environment, system vulnerability, or type of intrusion. The basic idea of the model is to maintain a set of profiles for subjects (usually, but not necessarily users of a system).
Reference: 4. <author> T D Garvey and Teresa F Lunt. </author> <title> Model based intrusion detection. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 372-385, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Model Based Intrusion Detection states that certain scenarios are inferred by certain other observable activities. If these activities are monitored, it is possible to find intrusion attempts by looking at activities that infer a certain intrusion scenario. The model based scheme consists of three important modules <ref> [4] </ref>. The anticipator uses the active models and the scenario models to try to predict the next step in the scenario that is expected to occur. A scenario model is a knowledge base with specifications of intrusion scenarios.
Reference: 5. <author> Koral Ilgun. </author> <title> USTAT - A Real-time Intrusion Detection System for UNIX. </title> <type> Master's Thesis, </type> <institution> University of California at Santa Barbara, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: As data is analyzed, the system makes transitions from one state to another. A transition takes place on some Boolean condition being true (for example, the user opening a file). The approach followed in USTAT <ref> [5] </ref> is to have state transitions from safe to unsafe states based on known attack patterns. To make this model clearer, we illustrate with an example based almost entirely on an example in Ilgun's thesis. 1.
Reference: 6. <author> Sandeep Kumar. </author> <title> Classification and Detection of Computer Intrusions. </title> <type> Ph.D. Dissertation, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: Some of the weaknesses of state transition systems are remedied by the Pattern Matching Model, discussed next. Kumar <ref> [6] </ref> proposed a new misuse detection system based on Pattern Matching. This model encodes known intrusion signatures as patterns that are then matched against the audit data. Like the state transition analysis model, this model attempts to match incoming events to the patterns representing intrusion scenarios.
Reference: 7. <author> Teresa F Lunt. </author> <title> Detecting Intruders in Computer Systems. </title> <booktitle> Conference on Auditing and Computer Technology, </booktitle> <year> 1993. </year>
Reference-contexts: There are some draw backs to the expert system approach too. For example, the expert system has to be formulated by a security professional and thus the system is only as strong as the security personnel who programs it <ref> [7] </ref>. This means that there is a real chance that expert systems can fail to flag intrusions. It is for this reason that NIDES has an anomaly as well as a misuse detection component.
Reference: 8. <author> Teresa F Lunt. </author> <title> A survey of intrusion detection techniques. </title> <booktitle> In Computers and Security, </booktitle> <volume> 12(1993), </volume> <pages> pages 405-418. </pages>
Reference-contexts: Any incorrectly predicted events (events and commands are used interchangeably in this discussion) actually measure the deviation of the user from the established profile. Some advantages of using neural networks are: <ref> [8] </ref> they cope well with noisy data, their success does not depend on any statistical assumption about the nature of the underlying data, and they are easier to modify for new user communities. However, they have some problems. <p> To do this, it builds user profiles based on many different criteria (more than 30 criteria, including CPU and I/O usage, commands used, local network activity, system errors etc.) <ref> [8] </ref>. These profiles are updated at periodic intervals. The expert system misuse detection component encodes known intrusion scenarios and attack patterns (bugs in old versions of sendmail could be one vulnerability). The rule database can be changed for different systems.
Reference: 9. <author> Biswanath Mukherjee, L Todd Heberlein and Karl N Levitt. </author> <title> Network Intrusion Detection, </title> <journal> IEEE Network, </journal> <month> May/June </month> <year> 1994, </year> <pages> pages 26-41. </pages>
Reference-contexts: NSM is a network-based IDS that differs from all of the IDSs discussed earlier because it does not use or analyze the host machine (s) audit trails. Rather, it monitors network traffic in order to detect intrusions <ref> [9] </ref>. Since network based attacks are expected to be prevalent in the future due to the mushrooming of the Internet, NSM could prove to be a valuable tool to detect intrusive activity. NSM has several perceived advantages. First, the IDS gets instantaneous access to network data.
Reference: 10. <author> Barton P Miller, David Koski, Cjin Pheow Lee, Vivekananda Maganty, Ravi Murthy, Ajitkumar Natarajan, Jeff Steidl. </author> <title> Fuzz Revisited: A Re-examination of the Reliability of UNIX Utilities and Services. </title> <institution> Computer Sciences Department, University of Wisconsin, </institution> <year> 1995. </year>
Reference-contexts: We could, for example, require all users to identify and authenticate themselves; we could protect data by various cryptographic methods and very tight access control mechanisms. However this is not really feasible because: 1. In practice, it is not possible to build a completely secure system. Miller <ref> [10] </ref> gives a compelling report on bugs in popular programs and operating systems that seems to indicate that (a) bug free software is still a dream and (b) no-one seems to want to make the effort to try to develop such software.
Reference: 11. <author> Steven E Smaha. Haystack: </author> <title> An Intrusion Detection System. </title> <booktitle> In Fourth Aerospace Computer Security Applications Conference, </booktitle> <pages> pages 37-44, </pages> <institution> Tracor Applied Science Inc., Austin, Texas, </institution> <month> December </month> <year> 1988. </year>
Reference-contexts: Classification of Intrusion Detection Systems Intrusions can be divided into 6 main types <ref> [11] </ref> 1. Attempted break-ins, which are detected by atypical behavior profiles or violations of security constraints. 2. Masquerade attacks, which are detected by atypical behavior profiles or violations of security constraints. 3. Penetration of the security control system, which are detected by monitoring for specific patterns of activity. 4.
Reference: 12. <author> Eugene H Spafford. </author> <title> The Internet Worm Program: An Analysis. </title> <booktitle> In ACM Computer Communication Review; 19(1), </booktitle> <pages> pages 17-57, </pages> <month> Jan </month> <year> 1989. </year>
Reference-contexts: These subversion attempts try to exploit flaws in the operating system as well as in application programs and have resulted in spectacular incidents like the Internet Worm incident of 1988 <ref> [12] </ref>. There are two ways to handle subversion attempts. One way is to prevent subversion itself by building a completely secure system. We could, for example, require all users to identify and authenticate themselves; we could protect data by various cryptographic methods and very tight access control mechanisms.
Reference: 13. <author> Eugene H Spafford. </author> <title> Security Seminar, </title> <institution> Department of Computer Sciences, Purdue University, </institution> <month> Jan </month> <year> 1996. </year>
Reference-contexts: An IDS can also be used to analyze audit data for such insights. This makes IDSs valuable as real-time as well as post-mortem analysis tools. Spafford <ref> [13] </ref> reports: Information theft is up over 250% in the last 5 years. 99% of all major companies report at least one major incident. Telecom and computer fraud totaled $10 billion in the US alone.
Reference: 14. <author> Henry S Teng, Kaihu Chen and Stephen C Lu. </author> <title> Security Audit Trail Analysis Using Inductively Generated Predictive Rules. </title> <booktitle> In Proceedings of the 11th National Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 24-29, </pages> <publisher> IEEE, IEEE Service Center, </publisher> <address> Piscataway, NJ, </address> <month> March </month> <year> 1990. </year> <note> Copyright 1996 by Aurobindo Sundaram </note>
Reference-contexts: Predictive pattern generation: This method of intrusion detection tries to predict future events based on the events that have already occurred <ref> [14] </ref>.
References-found: 14

