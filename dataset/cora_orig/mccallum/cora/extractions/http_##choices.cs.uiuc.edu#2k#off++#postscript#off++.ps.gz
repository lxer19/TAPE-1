URL: http://choices.cs.uiuc.edu/2k/off++/postscript/off++.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/2k/
Root-URL: http://www.cs.uiuc.edu
Email: nemo@gsyc.inf.uc3m.es ff-kon,royg@cs.uiuc.edu  
Title: A Detailed Description of Off a Distributed Adaptable kernel  
Author: Francisco J. Ballesteros Fabio Kon Roy H. Campbell 
Note: August, 1997  
Abstract: Department of Computer Science University of Illinois at Urbana-Champaign Report No. UIUCDCS-R-97-2035, UILU-ENG-97-1748 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Francisco J. Ballesteros. OffUn Nuevo Enfoque en la Construccion de Sistemas Operativos Distribuidos. </institution> <type> PhD thesis, </type> <institution> Facultad de Informatica. Universidad Po-litecnica de Madrid, </institution> <year> 1998. </year> <note> (being submitted, defense pending). </note>
Reference-contexts: By adopting a strict architecture self-awareness philosophy, we will allow system and user modules to be conscious of its own physical and logical architecture. So, the system will be able to adapt itself optimizing its performance and reliability. This document describes the object oriented redesign of the Off kernel <ref> [1, 3, 2] </ref>, named Off ++, and is meant to be the starting point for its literate implementation (see section 1.3). Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K.
Reference: [2] <author> Francisco J. Ballesteros and Luis L. Fernandez. </author> <title> Off web site. </title> <note> http://www.gsyc.inf.uc3m.es/off, 1996. </note>
Reference-contexts: By adopting a strict architecture self-awareness philosophy, we will allow system and user modules to be conscious of its own physical and logical architecture. So, the system will be able to adapt itself optimizing its performance and reliability. This document describes the object oriented redesign of the Off kernel <ref> [1, 3, 2] </ref>, named Off ++, and is meant to be the starting point for its literate implementation (see section 1.3). Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K.
Reference: [3] <author> Francisco J. Ballesteros and Luis L. Fernandez. </author> <title> The Network Hardware is the Operating System. </title> <booktitle> In Proceedings of the 6th Hot Topics on Operating Systems (HotOS-VI)., </booktitle> <address> Cape Cod, MA (USA), </address> <month> May </month> <year> 1997. </year>
Reference-contexts: By adopting a strict architecture self-awareness philosophy, we will allow system and user modules to be conscious of its own physical and logical architecture. So, the system will be able to adapt itself optimizing its performance and reliability. This document describes the object oriented redesign of the Off kernel <ref> [1, 3, 2] </ref>, named Off ++, and is meant to be the starting point for its literate implementation (see section 1.3). Off ++ also adds new functionalities to the kernel in order to provide basic support for 2K.
Reference: [4] <author> B.N. Bershad, S. Savage, P. Pardyak, E.G. Sirer, M. Fiuczynski, D. Becker, S. Eg-gers, and C. Chambers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles. ACM, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Secondly, a major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal micro-kernel as a foundation for the operating system <ref> [8, 7, 4, 10] </ref>. If the microkernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services because they are distributed on top of the microkernel and this distribution is not supported by the microkernel itself.
Reference: [5] <author> Roy H. Campbell, Francisco J. Ballesteros, Fabio Kon, Ashish Singhai, Dulcineia Carvalho, and Robert Moore. </author> <title> 2k: A distributed adaptable operating system. </title> <note> http://choices.cs.uiuc.edu/2k, August 1997. </note>
Reference: [6] <author> John B. Carter, Dilip Khandekar, and Linus Kamb. </author> <title> Distributed shared memory: Where we are and where we should be headed. </title> <booktitle> In In proceedings of the 5th Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: This problem can be noticed by the fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical microkernel based distributed system <ref> [6, 20, 13] </ref>.
Reference: [7] <author> D. Cheriton and K. Duda. </author> <title> A caching model of operating system kernel functionality. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 179193, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Secondly, a major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal micro-kernel as a foundation for the operating system <ref> [8, 7, 4, 10] </ref>. If the microkernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services because they are distributed on top of the microkernel and this distribution is not supported by the microkernel itself.
Reference: [8] <author> D. Engler, M. F. Kaashoek, and J. O'Toole. </author> <title> The Operating System Kernel as a Secure Programmable Machine. </title> <booktitle> In Proc. of the 6th SIGOPS European Workshop, </booktitle> <pages> pages 6267, </pages> <address> Wadern, Germany, </address> <month> Sept </month> <year> 1994. </year> <note> ACM SIGOPS. </note>
Reference-contexts: Secondly, a major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal micro-kernel as a foundation for the operating system <ref> [8, 7, 4, 10] </ref>. If the microkernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services because they are distributed on top of the microkernel and this distribution is not supported by the microkernel itself.
Reference: [9] <author> Bryan Ford, Godmar Back, Greg Benson, Jay Lepreau, Albert Lin, and Olin Shivers. </author> <title> The flux os toolkit: A substrate for kernel and language research. </title> <booktitle> In Proceedings of the 16th SOSP, </booktitle> <address> Saint-Malo, France, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: the one we use. * As a support for literate programming, noweb [17] has proven to be a nice tool. * The development environment is still a GNU based Linux system known as Red Hat GNU/Linux. * Last, but not least (indeed, we should write most) we use the OSKit <ref> [9] </ref> for most of the low-level hardware glue code. All these tools have been already used in the construction of the original Off pro totype. 8 Chapter 2 System structure 2.1 Exporting system objects System services are made of a bunch of system objects exported to users.
Reference: [10] <author> Bryan Ford, Mike Hibler, Jay Lepreau, Patrick Tullmann, Godmar Back, and Stephen Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proc. OSDI, </booktitle> <month> October </month> <year> 1996. </year> <month> 83 </month>
Reference-contexts: Secondly, a major drawback of current distributed operating systems is their lack of adaptability. It is known that adaptability can be achieved using a minimal micro-kernel as a foundation for the operating system <ref> [8, 7, 4, 10] </ref>. If the microkernel is centralized, adaptation of system services for particular requirements may harm the distribution of those services because they are distributed on top of the microkernel and this distribution is not supported by the microkernel itself.
Reference: [11] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patters. Elements of Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Defines: off CompResource, used in chunks 31, 33a, 65c, and 67. Uses off Allocator 27b, off id t 20a, and off Resource 18a. 7 cf. the wrapper or decorator design pattern (see <ref> [11] </ref>, pp 175.) 20 Specific resource units maintain a reference to their container. They also redefine the new operator so that it could be used to allocate resource units from a container's pool. This way we can avoid memory fragmentation. <p> defined)i hOther off Node protected methods. 37ai public: // Returns the node identifier off_id_t get_id (void) const; // Returns or sets the authorization server and // the external data translator portals. off_prtl_t get_auth (void) const; off_prtl_t get_xdt (void) const; void set_auth (off_prtl_t p); 1 see the singleton design patterm in <ref> [11] </ref>, pp 127. 36 void set_xdt (off_prtl_t p); hOther off Node public methods. 38ai // Halts, reboots, or suspends this node void halt ( char *msg="System On." ); void reboot ( void ); void suspend ( void ); -; Root chunk (not used in this document). <p> Uses off id t 20a and off Resource 18a. The Node can be also considered to be a facade 2 (see <ref> [11] </ref>) for node-wide system operations. 3.2 Navigation To support efficient browsing of node components, the Node has a set of methods that provide access to its components. Most of them will be simply inlined.
Reference: [12] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, California, </address> <note> second edition edition, </note> <year> 1996. </year>
Reference-contexts: Defines: off uPrtl, used in chunk 72a. Uses off mode t 13 and off ShtlPSet 64a. 72 5.3 Distributed Memory Managers Off ++ memory management is based on Distributed TLBs (DTLBs) where TLB stands for Translation Lookaside Buffer, a cache of virtual to physical memory address translations <ref> [12] </ref>. Each Distributed Memory Manager (DMM, for short) is actually a pool of DTLBs. However, DTLBs are an optional feature. Machines dedicated to a single application (like a dedicated file server, an embedded controller, etc.) can use a single protection domain for efficiency purposes.
Reference: [13] <author> Takuro Kitayama, T.Nakajima, and Hideyuki Tokuda. RT-IPC: </author> <title> An IPC Extension for Real-Time Mach. </title> <booktitle> In Proceedings of the 2nd Microkernel and Other Kernel Architectures. USENIX, </booktitle> <year> 1993. </year>
Reference-contexts: This problem can be noticed by the fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical microkernel based distributed system <ref> [6, 20, 13] </ref>.
Reference: [14] <author> Donald E. Knuth. </author> <title> Literate Programming. Center for the Study of Language and Information, </title> <institution> Stanford University, </institution> <year> 1992. </year>
Reference-contexts: Off implements a Distributed Software TLB. The user can establish translations from virtual to distributed physical memory addresses and the address translation hardware is safely multiplexed by Off among the competing applications. 1.3 Literate programming As this document is hardcopy of a literate program <ref> [14] </ref> we think that it is worth saying something about this technique. We do it by citing the comp.programming.literate newsgroup FAQ: Literate programming is the combination of documentation and source together in a fashion suited for reading by human beings.
Reference: [15] <author> Leslie Lamport. </author> <title> A Document Preparation System: L A T E X. </title> <publisher> Addison-Wesley, </publisher> <address> ISBN 0-201-15790-X. </address>
Reference-contexts: The references below each chunk will allow you to navigate through this program's web. 7 1.5 Tools To implement Off ++ several tools have been used. They are all you need to build a system image from the on-line source for this document. * L A T E X <ref> [15] </ref> has been used to typeset documents, including the printed version of the literate source code. * C ++ [18] has been the programming language employed.
Reference: [16] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In NKUUG Proceedings of the Summer 1990 Conference, </booktitle> <address> London (England), </address> <month> July </month> <year> 1990. </year>
Reference-contexts: So, Why are our distributed operating systems based on microkernels which essentially multiplex just local resources? Obviously system services can be later distributed when using a (centralized) mi-crokernel. Indeed, that can be done even when using a monolithic system <ref> [16] </ref>. But this will not solve the actual problem that the system is not being actually distributed and is not transparently multiplexing both local and remote resources. Secondly, a major drawback of current distributed operating systems is their lack of adaptability.
Reference: [17] <author> Norman Ramsey. </author> <title> Literate programming simplified. </title> <journal> IEEE Software, </journal> <volume> 11(5):97 105, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: The GNU C and C ++ compiler named GCC is the one we use. * As a support for literate programming, noweb <ref> [17] </ref> has proven to be a nice tool. * The development environment is still a GNU based Linux system known as Red Hat GNU/Linux. * Last, but not least (indeed, we should write most) we use the OSKit [9] for most of the low-level hardware glue code.
Reference: [18] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: They are all you need to build a system image from the on-line source for this document. * L A T E X [15] has been used to typeset documents, including the printed version of the literate source code. * C ++ <ref> [18] </ref> has been the programming language employed.
Reference: [19] <author> Andrew S. Tanenbaum. </author> <title> Operating Systems: Design and Implementation. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: Introduction 1.1 Motivation The well known definition for operating system is the software that securely abstracts and multiplexes physical resources <ref> [19] </ref>. By no means is it known that those resources should be contained in a single node. So, Why are our distributed operating systems based on microkernels which essentially multiplex just local resources? Obviously system services can be later distributed when using a (centralized) mi-crokernel.
Reference: [20] <author> H. Tokuda, T.Nakajima, and P. Rao. </author> <title> Real-Time Mach: Towards a Predictable Real-Time System. </title> <booktitle> In Proceedings of the 1st USENIX Mach Workshop. USENIX, </booktitle> <month> Oct </month> <year> 1990. </year> <month> 84 </month>
Reference-contexts: This problem can be noticed by the fact that it is necessary to modify and/or re-implement existing system services to add new distributed services to a typical microkernel based distributed system <ref> [6, 20, 13] </ref>.
References-found: 20

