URL: ftp://wilma.cs.brown.edu/u/mfc/mutability.ps.Z
Refering-URL: http://www.cs.brown.edu/software/cokokola/
Root-URL: http://www.cs.brown.edu
Email: email: mfc@cs.brown.edu  email: euisuk@lcs.mit.edu  
Phone: Phone: +1 (401) 863-7600  Phone: +1 (617) 253-3058  
Title: The Effects of Mutability on Querying  
Author: Mitch Cherniack Eui-Suk Chung 
Keyword: fQuerying, Query Optimization, Object-Oriented Databases, Mutabilityg  
Address: Providence, RI 02912  Cambridge, MA 02139  
Affiliation: Brown University,  M.I.T. Laboratory for Computer Science,  
Abstract: The ability of an object to mutate is one of the defining characteristics of Object-Oriented Databases (OODBs). But the impact of object mutability on querying is typically ignored. Presumably, this is because queries are usually assumed free of side-effects, and therefore objects are effectively immutable while they are queried. But mutability affects other object behaviors aside from how they change, such as how they are compared for equality, and if it is possible to detect that they are shared. In this paper, we show how these behaviors impact querying in general and query optimization and mutable set construction in particular. The issues considered in this paper arose during our efforts to provide OQL-based [Cat96] query facilities for Thor [LJGS90, LAC + 96]. Whereas OQL (and specifically, the ODMG object model) make specific assumptions about the mutability of sets, Thor had not adopted a policy for sets when this project began. In formulating a policy, we considered the impact of the ODMG policy on query efficiency and then considered how Thor could reconcile different assumptions about set mutability with OQL. The analysis of these issues is the focus of the paper. This analysis, though done with respect to Thor, has implications for any system that wishes to adopt the ODMG standard (as many have pledged to do). 
Abstract-found: 1
Intro-found: 1
Reference: [ABD + 89] <author> Malcolm P. Atkinson, Franois Bancilhon, David J. DeWitt, Klaus R. Dittrich, David Maier, and Stanley B. Zdonik. </author> <title> Object-Oriented Database System Manifesto. </title> <editor> In Won Kim, Jean-Marie Nicolas, and Shojiro Nishio, editors, </editor> <booktitle> First International Conference on Deductive and Object-Oriented Databases (DOOD), </booktitle> <pages> pages 223-240, </pages> <address> Kyoto, Japan, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: 1 Introduction One of the tenets of object-oriented data models requires that an object's existence be independent of its value <ref> [ABD + 89] </ref>.
Reference: [AK92] <author> Serge Abiteboul and Paris C. Kanellakis. </author> <title> Object identity as a query-language primitive. </title> <editor> In Francois Bancilhon, Claude Delobel, and Paris Kanellakis, editors, </editor> <title> Building an Object-Oriented Database System: The Story of O 2 , pages 98-127. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: The transformations of the kind shown in Figure 2 demonstrate that sharing of and not just by objects returned by the query must be considered. The effect of nondeterminism on transformation correctness has been considered in [dBG92]. Nondeterminism due to object construction in queries has been considered in <ref> [AK92, Osb88] </ref>. These works formulate policies for when transformations involving queries that construct new objects are correct, with the idea that identical results need not be produced by both queries. Our discussion of nondeterminism illustrates the kind of rule that object mutability invalidates.
Reference: [Bak93] <author> Henry Baker. </author> <title> Equal rights for functional objects or, the more things change, the more they are the same. </title> <journal> OOPS Messenger, </journal> <volume> 4(4) </volume> <pages> 1-26, </pages> <month> October </month> <year> 1993. </year> <month> 12 </month>
Reference-contexts: Instead, we are concerned with finding those transformations that nondeterminism breaks. Indistinguishability as the determining factor for equality was first proposed in the context of CLU [LG86]. Indistinguishability as a goal in and of itself motivated proposals to make mutable object equality tied to identicalness in <ref> [Bak93, GC94, GS93] </ref>. In [CZN95], we showed that equalities must hold only of objects that are permanently indistinguishable to ensure the reasonable behavior of sets that contain them.
Reference: [BDK92] <author> Francois Bancilhon, Claude Delobel, and Paris Kanellakis, </author> <title> editors. Building an Object-Oriented Database System: </title> <publisher> The Story of O 2 . Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: Both systems include their own proprietary query languages, but have pledged to adopt the OQL querying standard, and will thus have to consider the issues regarding reconciliation of mutability approaches discussed in Section 3.2. Object models providing both mutable and immutable sets include O 2 <ref> [BDK92] </ref> (which arguably had the most influence on the ODMG model) and EXTRA (Exodus) [CDG + 90]. These systems must consider the issues related to query optimization and mutable set construction discussed in Section 3.1.
Reference: [Ber91] <author> Elisa Bertino. </author> <title> An indexing technique for object-oriented databases. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <pages> pages 160-170, </pages> <address> Kobe, Japan, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Object complexity makes it possible to pose queries with lengthy path expressions or that are nested in ways not possible over relations. Path expression optimization has been considered in [KM90a, KM90b] and <ref> [Ber91] </ref>. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96].
Reference: [BK90] <author> Catriel Beeri and Yoram Kornatzky. </author> <title> Algebraic optimization of object-oriented query languages. </title> <editor> In S. Abiteboul and P. C. Kanellakis, editors, </editor> <booktitle> Proceedings of the Third International Conference on Database Theory, number 470 in Lecture Notes in Computer Science, </booktitle> <pages> pages 72-88, </pages> <address> Paris, France, </address> <month> December </month> <year> 1990. </year> <title> EATCS, </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Transformation rules over complex object bases have been proposed in <ref> [BK90] </ref> (which provides rules for multiple collection types), [Osb88] (which focuses on queries that construct new objects) and [SZ89] (which considers criteria for determining the correctness of transformations of queries over objects). None of these distinguish rules for queries over mutable and immutable inputs.
Reference: [Bog94] <author> Phil Bogle. </author> <title> Reducing cross-domain call overhead using batched futures. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: In the meantime, we will construct a working query facility without disrupting existing component implementations. Note that the loosely coupled approach forces us to delay the type-checking and optimization of queries until run-time. implement. The interface between the client program and Thor is called a veneer <ref> [Bog94, LAC + 96] </ref>. Veneers provide a number of services related to transaction management and data translation (between programming languages and Thor). In order to support queries, veneers have been augmented with functions to transport queries and their results between clients and Thor.
Reference: [BOS91] <author> Paul Butterworth, Allen Otis, and Jacob Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: reconcile a Thor data model that provided support only for mutable sets, with the ODMG model that permits sets to be immutable also. 3.2 An Alternative Approach: Are Immutable Sets Necessary? An object model for Thor that only provides support for mutable sets would resemble the object models of GemStone <ref> [BOS91] </ref> and ObjectStore [LLOW91] (although query languages for these systems are far less expressive than OQL). Queries in this model would return mutable sets directly, and therefore mutable sets would never be constructed from immutable sets.
Reference: [Cat96] <author> R. G. G. Cattell, </author> <title> editor. The Object Database Standard: ODMG-93, Release 1.2. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1996. </year>
Reference-contexts: In this paper, we explore the impact of object mutability on querying. We begin in Section 2 by describing the context that forced consideration of this issue; our efforts to provide OQL-based <ref> [Cat96] </ref> query support for Thor [LAC + 96]. Thor's object model did not, until recently, include support for sets. The ODMG object model, which underlies OQL's semantics, makes specific assumptions regarding set mutability. <p> This discussion, though specific to sets, applies equally well with respect to other collection types such as lists and bags. In Section 4, we describe relaeted work and we conclude in Section 5. 2 The Thor Query Project This section describes our plan to provide OQL-based <ref> [Cat96] </ref> query support for Thor [LAC + 96, LCD + 94]. In Section 2.1, we describe the components of the integration project and present an architecture that reveals how these components will interact. <p> Currently objects are accessible by navigating from externally visible root objects. The goal of the integration project described is to provide an associative query facility for Thor, to complement its navigational access 2 capability. ODMG-93 <ref> [Cat96] </ref> has been proposed as a standard for OODB object definition, manipulation and retrieval, and includes a declarative object query language (OQL). OQL's semantics are defined in terms of the ODMG object model which has much in common with Thor.
Reference: [CDG + 90] <author> Michael J. Carey, David J. DeWitt, Goetz Graefe, David M. Haight, Joel E. Richardson, Daniel T. Schuh, Eugene J. Shekita, and Scott L. Vandenberg. </author> <title> The EXODUS extensible DBMS project: An overview. </title> <editor> In Stanley B. Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems, </booktitle> <pages> pages 474-499. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, California, </address> <year> 1990. </year>
Reference-contexts: Object models providing both mutable and immutable sets include O 2 [BDK92] (which arguably had the most influence on the ODMG model) and EXTRA (Exodus) <ref> [CDG + 90] </ref>. These systems must consider the issues related to query optimization and mutable set construction discussed in Section 3.1.
Reference: [Che95] <author> Mitch Cherniack. </author> <title> Form(ers) over function(s): The KOLA query algebra. </title> <type> Technical report, </type> <institution> Brown University Department of Computer Science, </institution> <month> May </month> <year> 1995. </year> <note> In preparation. </note>
Reference-contexts: A query is issued by a client and is passed to Thor as a string (1). A query dispatcher receives the query and invokes a translator that maps the query into a KOLA expression (2). (KOLA <ref> [CZ96, Che95] </ref> is a query algebra that will be used to underlay the optimizer's representations of queries.) The translator parses and type checks the query and produces a KOLA tree (3), using type information obtained from the schema library (9).
Reference: [CM93] <author> Sophie Cluet and Guido Moerkotte. </author> <title> Nested queries in object bases. </title> <booktitle> In Proc. 4th Int'l Workshop on Database Programming Languages, </booktitle> <address> New York, New York, </address> <month> August </month> <year> 1993. </year> <note> Springer-Verlag. </note>
Reference-contexts: Object complexity makes it possible to pose queries with lengthy path expressions or that are nested in ways not possible over relations. Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in <ref> [CM93] </ref> and [CZ96].
Reference: [CZ96] <author> Mitch Cherniack and Stanley B. Zdonik. </author> <title> Rule languages and internal algebras for rule-based optimizers. </title> <booktitle> In Proc. ACM SIGMOD Int'l Conference on Management of Data, </booktitle> <address> Montreal, Quebec, Canada, </address> <month> June </month> <year> 1996. </year> <note> To Appear. </note>
Reference-contexts: A query is issued by a client and is passed to Thor as a string (1). A query dispatcher receives the query and invokes a translator that maps the query into a KOLA expression (2). (KOLA <ref> [CZ96, Che95] </ref> is a query algebra that will be used to underlay the optimizer's representations of queries.) The translator parses and type checks the query and produces a KOLA tree (3), using type information obtained from the schema library (9). <p> Object complexity makes it possible to pose queries with lengthy path expressions or that are nested in ways not possible over relations. Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and <ref> [CZ96] </ref>.
Reference: [CZN95] <author> Mitch Cherniack, Stanley B. Zdonik, and Marian H. Nodine. </author> <title> To form a more perfect union (intersection, difference). </title> <booktitle> In Proc. 5th Int'l Workshop on Database Programming Languages, </booktitle> <address> Gubbio, Italy, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. To Appear. </note>
Reference-contexts: Mutable objects should be indistinguishable even by mutation (i.e., identical), as otherwise, sets that contain these objects can have unintuitive behavior such as a cardinality that changes as a side-effect of member mutation <ref> [CZN95] </ref>. <p> Indistinguishability as the determining factor for equality was first proposed in the context of CLU [LG86]. Indistinguishability as a goal in and of itself motivated proposals to make mutable object equality tied to identicalness in [Bak93, GC94, GS93]. In <ref> [CZN95] </ref>, we showed that equalities must hold only of objects that are permanently indistinguishable to ensure the reasonable behavior of sets that contain them. Our work also addresses the issue of whether OODB object models should provide both immutable and mutable sets, or whether mutable sets alone are sufficient.
Reference: [dBG92] <author> Jan Van den Bussche and Dirk Van Gucht. </author> <title> Semi-determinism (extended abstract). </title> <booktitle> In Proceedings of the Eleventh ACM SIGACT/SIGMOD Symposium on Principles of Database Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Whether or not the transformation took place can be 1 In fact, transformation correctness need not be based on equality if the query concerned constructs a new mutable object. In this case, similarity (as opposed to identicalness) of results suffices to establish correctness. This issue is considered in <ref> [dBG92] </ref> and elsewhere. 5 select distinct x from x in A ! detected by mutating A and viewing the effects of the mutation in the set returned by the query. If the effects are visible, the transformation has occured. Transformation correctness is restricted not only by sharing, but equality. <p> The transformations of the kind shown in Figure 2 demonstrate that sharing of and not just by objects returned by the query must be considered. The effect of nondeterminism on transformation correctness has been considered in <ref> [dBG92] </ref>. Nondeterminism due to object construction in queries has been considered in [AK92, Osb88]. These works formulate policies for when transformations involving queries that construct new objects are correct, with the idea that identical results need not be produced by both queries.
Reference: [GC94] <author> Peter Grogono and Patrice Chalin. </author> <title> Copying, sharing and aliasing. </title> <booktitle> In Colloquium on Object-Orientation in Databases and Software Engineering, </booktitle> <address> Montreal, Quebec, </address> <year> 1994. </year>
Reference-contexts: Instead, we are concerned with finding those transformations that nondeterminism breaks. Indistinguishability as the determining factor for equality was first proposed in the context of CLU [LG86]. Indistinguishability as a goal in and of itself motivated proposals to make mutable object equality tied to identicalness in <ref> [Bak93, GC94, GS93] </ref>. In [CZN95], we showed that equalities must hold only of objects that are permanently indistinguishable to ensure the reasonable behavior of sets that contain them.
Reference: [GS93] <author> Peter Grogono and Philip Santas. </author> <title> Equality and assignment in object-oriented languages. </title> <booktitle> In EastEurOOPe'93, </booktitle> <pages> pages 191-201, </pages> <month> November </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: Instead, we are concerned with finding those transformations that nondeterminism breaks. Indistinguishability as the determining factor for equality was first proposed in the context of CLU [LG86]. Indistinguishability as a goal in and of itself motivated proposals to make mutable object equality tied to identicalness in <ref> [Bak93, GC94, GS93] </ref>. In [CZN95], we showed that equalities must hold only of objects that are permanently indistinguishable to ensure the reasonable behavior of sets that contain them.
Reference: [Hel94] <author> Joseph M. Hellerstein. </author> <title> Practical predicate placement. </title> <editor> In Richard T. Snodgrass and Marianne Winslett, editors, </editor> <booktitle> 1994 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Minneapolis, Minnesota, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index [MS86, Hwa94] and to consider the order in which predicates should be evaluated on data <ref> [HS93, Hel94, KMPS94, SPMK95] </ref>. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [HS93] <author> Joseph M. Hellerstein and Michael Stonebraker. </author> <title> Predicate migration: Optimizing queries with expensive predicates. </title> <booktitle> In Proc. ACM SIGMOD, </booktitle> <pages> pages 267-276, </pages> <year> 1993. </year>
Reference-contexts: Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index [MS86, Hwa94] and to consider the order in which predicates should be evaluated on data <ref> [HS93, Hel94, KMPS94, SPMK95] </ref>. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [Hwa94] <author> D. Hwang. </author> <title> Function-Based Indexing for Object-Oriented Databases. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Rather, the evaluator evaluates the KOLA tree directly. We expect to have an algebraic optimizer based on KOLA in the near future. A physical optimizer as well as index support <ref> [Hwa94] </ref> will be added at a later point. 2.2 Integration Issues OQL semantics are defined in terms of the ODMG object model. <p> Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index <ref> [MS86, Hwa94] </ref> and to consider the order in which predicates should be evaluated on data [HS93, Hel94, KMPS94, SPMK95]. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [Inc93] <author> Objectivity Inc. </author> <title> Objectivity database reference manual, </title> <year> 1993. </year>
Reference-contexts: These systems must consider the issues related to query optimization and mutable set construction discussed in Section 3.1. We also looked at other systems that have pledged to adopt the OQL standard (e.g., Objectivity/DB <ref> [Inc93] </ref>, ONTOS [Ont93] and POET [Sof93]) but have yet to receive documentation about how they intend to address these issues. 3 3 To the reviewers: We have sent a letter to each of these companies asking them how they plan to interpret the immutable sets produced by OQL queries and will
Reference: [KM90a] <author> Alfons Kemper and Guido Moerkotte. </author> <title> Access support in object bases. </title> <editor> In Hector Garcia-Moline and H. V. Jagadish, editors, </editor> <booktitle> Proceedings of the 1990 ACM SIG-MOD International Conference on Management of Data, </booktitle> <pages> pages 364-376, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Object complexity makes it possible to pose queries with lengthy path expressions or that are nested in ways not possible over relations. Path expression optimization has been considered in <ref> [KM90a, KM90b] </ref> and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96].
Reference: [KM90b] <author> Alfons Kemper and Guido Moerkotte. </author> <title> Advanced query processing in object bases using access support relations. </title> <editor> In Dennis McLeod, Ron Sacks-Davis, and Hans-Jrg Schek, editors, </editor> <booktitle> 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 290-301, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Object complexity makes it possible to pose queries with lengthy path expressions or that are nested in ways not possible over relations. Path expression optimization has been considered in <ref> [KM90a, KM90b] </ref> and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96].
Reference: [KMPS94] <author> Alfons Kemper, Guido Moerkotte, Klaus Peithner, and Michael Steinbrunn. </author> <title> Optimizing disjunctive queries with expensive predicates. </title> <editor> In Richard T. Snodgrass and Marianne Winslett, editors, </editor> <booktitle> 1994 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Minneapolis, Minnesota, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index [MS86, Hwa94] and to consider the order in which predicates should be evaluated on data <ref> [HS93, Hel94, KMPS94, SPMK95] </ref>. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [LAC + 96] <author> Barbara Liskov, Atul Adya, Miguel Castro, Mark Day, Sanjay Ghemawat, Robert Gruber, Umesh Maheshwari, Andrew C. Myers, and Liuba Shrira. </author> <title> Safe and efficient sharing of persistent objects in Thor. </title> <booktitle> In SIGMOD 96, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: In this paper, we explore the impact of object mutability on querying. We begin in Section 2 by describing the context that forced consideration of this issue; our efforts to provide OQL-based [Cat96] query support for Thor <ref> [LAC + 96] </ref>. Thor's object model did not, until recently, include support for sets. The ODMG object model, which underlies OQL's semantics, makes specific assumptions regarding set mutability. <p> In Section 4, we describe relaeted work and we conclude in Section 5. 2 The Thor Query Project This section describes our plan to provide OQL-based [Cat96] query support for Thor <ref> [LAC + 96, LCD + 94] </ref>. In Section 2.1, we describe the components of the integration project and present an architecture that reveals how these components will interact. <p> In the meantime, we will construct a working query facility without disrupting existing component implementations. Note that the loosely coupled approach forces us to delay the type-checking and optimization of queries until run-time. implement. The interface between the client program and Thor is called a veneer <ref> [Bog94, LAC + 96] </ref>. Veneers provide a number of services related to transaction management and data translation (between programming languages and Thor). In order to support queries, veneers have been augmented with functions to transport queries and their results between clients and Thor.
Reference: [LCD + 94] <author> Barbara Liskov, Dorothy Curtis, Mark Day, Sanjay Ghemawhat, Robert Gruber, Paul Johnson, and Andrew C. Myers. </author> <title> Theta Reference Manual. Programming Methodology Group Memo 88, </title> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA, </address> <month> February </month> <year> 1994. </year> <note> Also available at http://www.pmg.lcs.mit.edu/papers/thetaref/. </note>
Reference-contexts: In Section 4, we describe relaeted work and we conclude in Section 5. 2 The Thor Query Project This section describes our plan to provide OQL-based [Cat96] query support for Thor <ref> [LAC + 96, LCD + 94] </ref>. In Section 2.1, we describe the components of the integration project and present an architecture that reveals how these components will interact.
Reference: [LG86] <author> Barbara Liskov and John Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Sharing of immutable objects is undetectable because detection requires viewing the effects of mutation <ref> [LG86] </ref>. Equality and sharing influence the correctness of transformations performed during query optimization, and the ease by which new mutable sets denoted by queries can be constructed. In this paper, we explore the impact of object mutability on querying. <p> That is, we do not address the general question of transformation validity in the presence of nondeterminism. Instead, we are concerned with finding those transformations that nondeterminism breaks. Indistinguishability as the determining factor for equality was first proposed in the context of CLU <ref> [LG86] </ref>. Indistinguishability as a goal in and of itself motivated proposals to make mutable object equality tied to identicalness in [Bak93, GC94, GS93]. In [CZN95], we showed that equalities must hold only of objects that are permanently indistinguishable to ensure the reasonable behavior of sets that contain them.
Reference: [LJGS90] <author> Barbara Liskov, Paul Johnson, Robert Gruber, and Liuba Shrira. </author> <title> A highly available object repository for use in a heterogeneous distributed system. </title> <editor> In Alan Dearle, Gail M. Shaw, and Stanley B. Zdonik, editors, </editor> <title> Implementing Persistent Object Bases, </title> <booktitle> Principles and Practice, Proceedings of the Fourth International Workshop on Persistent Objects, </booktitle> <address> Martha's Vineyard, MA, USA, </address> <month> September </month> <year> 1990. </year> <month> Morgan-Kaufman. </month>
Reference: [LLOW91] <author> Charles W. Lamb, Gordon Landis, Jack A. Orenstein, and Daniel Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 51-63, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: data model that provided support only for mutable sets, with the ODMG model that permits sets to be immutable also. 3.2 An Alternative Approach: Are Immutable Sets Necessary? An object model for Thor that only provides support for mutable sets would resemble the object models of GemStone [BOS91] and ObjectStore <ref> [LLOW91] </ref> (although query languages for these systems are far less expressive than OQL). Queries in this model would return mutable sets directly, and therefore mutable sets would never be constructed from immutable sets. <p> Commerical systems have had to make the same kinds of choice, and can be classified accordingly to their decisions. Among the object models that support only mutable sets are those of GemStone [MOP85] and ObjectStore <ref> [LLOW91] </ref>. Both systems include their own proprietary query languages, but have pledged to adopt the OQL querying standard, and will thus have to consider the issues regarding reconciliation of mutability approaches discussed in Section 3.2.
Reference: [MOP85] <author> D. Maier, A. Otis, and A. Purdy. </author> <title> Development of an Object-Oriented DBMS. </title> <journal> Quarterly Bulletin of IEEE on Database Engineering, </journal> <volume> 8(4), </volume> <booktitle> 1985. Also in Proceedings of the 1986 OOPSLA conference. </booktitle> <pages> 14 </pages>
Reference-contexts: Commerical systems have had to make the same kinds of choice, and can be classified accordingly to their decisions. Among the object models that support only mutable sets are those of GemStone <ref> [MOP85] </ref> and ObjectStore [LLOW91]. Both systems include their own proprietary query languages, but have pledged to adopt the OQL querying standard, and will thus have to consider the issues regarding reconciliation of mutability approaches discussed in Section 3.2.
Reference: [MS86] <author> David Maier and Jacob Stein. </author> <title> Indexing in an object-oriented database. </title> <editor> In Klaus R. Dittrich and Umeshwar Dayal, editors, </editor> <booktitle> 1986 International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 171-182, </pages> <address> Pacific Grove, California, </address> <year> 1986. </year>
Reference-contexts: Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index <ref> [MS86, Hwa94] </ref> and to consider the order in which predicates should be evaluated on data [HS93, Hel94, KMPS94, SPMK95]. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [Ont93] <author> Ontos. </author> <title> Ontos reference manual, </title> <year> 1993. </year>
Reference-contexts: These systems must consider the issues related to query optimization and mutable set construction discussed in Section 3.1. We also looked at other systems that have pledged to adopt the OQL standard (e.g., Objectivity/DB [Inc93], ONTOS <ref> [Ont93] </ref> and POET [Sof93]) but have yet to receive documentation about how they intend to address these issues. 3 3 To the reviewers: We have sent a letter to each of these companies asking them how they plan to interpret the immutable sets produced by OQL queries and will update this
Reference: [Osb88] <author> S. L. Osborn. </author> <title> Identity, equality and query optimization. </title> <editor> In K. R. Dittrich, editor, </editor> <booktitle> Advances in Object-Oriented Database Systems:Proceedings of the 2nd International Workshop on Object-Oriented Database Systems, number 334 in Lecture Notes in Computer Science, </booktitle> <pages> pages 346-351, </pages> <address> Bad Munster am Stein-Ebenburg, FRG, </address> <month> September </month> <year> 1988. </year> <note> Springer-Verlag. </note>
Reference-contexts: Transformation rules over complex object bases have been proposed in [BK90] (which provides rules for multiple collection types), <ref> [Osb88] </ref> (which focuses on queries that construct new objects) and [SZ89] (which considers criteria for determining the correctness of transformations of queries over objects). None of these distinguish rules for queries over mutable and immutable inputs. <p> The transformations of the kind shown in Figure 2 demonstrate that sharing of and not just by objects returned by the query must be considered. The effect of nondeterminism on transformation correctness has been considered in [dBG92]. Nondeterminism due to object construction in queries has been considered in <ref> [AK92, Osb88] </ref>. These works formulate policies for when transformations involving queries that construct new objects are correct, with the idea that identical results need not be produced by both queries. Our discussion of nondeterminism illustrates the kind of rule that object mutability invalidates.
Reference: [Sof93] <author> Poet Software. </author> <title> Poet programmer's and reference guide, </title> <year> 1993. </year>
Reference-contexts: These systems must consider the issues related to query optimization and mutable set construction discussed in Section 3.1. We also looked at other systems that have pledged to adopt the OQL standard (e.g., Objectivity/DB [Inc93], ONTOS [Ont93] and POET <ref> [Sof93] </ref>) but have yet to receive documentation about how they intend to address these issues. 3 3 To the reviewers: We have sent a letter to each of these companies asking them how they plan to interpret the immutable sets produced by OQL queries and will update this section when we
Reference: [SPMK95] <author> Michael Steinbrunn, Klaus Peithner, Guido Moerkotte, and Alfons Kemper. </author> <title> Bypassing joins in disjunctive queries. </title> <booktitle> In 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Path expression optimization has been considered in [KM90a, KM90b] and [Ber91]. Optimization of Object-Oriented nested queries has been considered in [CM93] and [CZ96]. Methods in queries make it necessary to reconsider ways to index [MS86, Hwa94] and to consider the order in which predicates should be evaluated on data <ref> [HS93, Hel94, KMPS94, SPMK95] </ref>. 10 Many areas of querying impacted by objects have been well-studied, but as far as we know, mutability's impact on querying has not been considered before.
Reference: [SZ89] <author> Gail M. Shaw and Stanley B. Zdonik. </author> <title> Object-oriented queries: Equivalence and optimization. </title> <editor> In Won Kim, Jean-Marie Nicolas, and Shojiro Nishioe, editors, </editor> <booktitle> Proceedings of the The First International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 264-278, </pages> <address> Kyoto, Japan, </address> <month> December </month> <year> 1989. </year> <month> 15 </month>
Reference-contexts: Transformation rules over complex object bases have been proposed in [BK90] (which provides rules for multiple collection types), [Osb88] (which focuses on queries that construct new objects) and <ref> [SZ89] </ref> (which considers criteria for determining the correctness of transformations of queries over objects). None of these distinguish rules for queries over mutable and immutable inputs. The work of Shaw and Zdonik [SZ89] comes closest to ours in that they considering how sharing relationships must be preserved in generally applicable query <p> [BK90] (which provides rules for multiple collection types), [Osb88] (which focuses on queries that construct new objects) and <ref> [SZ89] </ref> (which considers criteria for determining the correctness of transformations of queries over objects). None of these distinguish rules for queries over mutable and immutable inputs. The work of Shaw and Zdonik [SZ89] comes closest to ours in that they considering how sharing relationships must be preserved in generally applicable query transformations. However, the sharing relationships they address are those where the referencing objects (the "sharers") are objects retrieved or constructed by the query.
References-found: 36

