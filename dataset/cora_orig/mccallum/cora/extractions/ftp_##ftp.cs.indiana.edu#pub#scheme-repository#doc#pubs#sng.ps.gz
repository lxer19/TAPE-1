URL: ftp://ftp.cs.indiana.edu/pub/scheme-repository/doc/pubs/sng.ps.gz
Refering-URL: http://www.cs.indiana.edu/scheme-repository/doc.publications.html
Root-URL: http://www.cs.indiana.edu
Title: Scheme: The Next Generation Scheme has served the community for twenty years. constructed which has
Author: John D. Ramsdell 
Note: It has demonstrated that a useful language can be  to take advantage of the knowledge that  The Vlisp Project [2] carefully studied and used the  Lisp Pointers, Vol. VII, No. 4, October-December 1994, Pages 13-14. Page 1  
Affiliation: The MITRE Corporation  
Abstract: I believe now is the time to design a new dialect of Scheme for the next generation. This paper describes a set of changes and additions that were carefully chosen so as to retain the flavor of Scheme. I hope this paper marks the beginning of a community effort to design a next generation Scheme dialect. Imitation is the most sincere form of flattery, and I believe the Scheme community should flatter the ML community. One practice we should copy from ML [5] is the pervasive use of immutable data structures. Most data structures created by Scheme programs are not modified. Programmers should be allowed to write code which creates and shares data with other modules, while being assured that no other module modifies that data. Implementations should be able fl This paper reflects the views of the author and makes no statement about the views of The MITRE Corporation. Author's address: The MITRE Corporation MS/K320, 202 Burlington Road, Bedford MA, 01730-0208. E-mail: rams-dell@mitre.org. c fl1995 John D. Ramsdell. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, this copyright notice and the title of the publication and its date appear, and notice in given that copying is by permission of John D. Ramsdell. In practice, this means that the procedure cons should return an immutable pair and set-car! and set-cdr! should be eliminated. Vectors should remain mutable, but an immutable vector creating procedure should be added. As in ML, the application of a lambda expression should bind variables to values, and not locations that contain values. The effect of mutable lambda bound variables should be provided by adding the three procedures make-cell, cell-ref, and cell-set!, which creates an initialized mutable location, retrieves the value in cell, and modifies the value in the cell. Another practice we should copy from the ML community is to make the use of formal methods an integral part of the design process for the next generation Scheme dialect. While Scheme has a formal semantics, it has the markings of an afterthought. For example, though printed with the document, it is not a part of IEEE Std 1178-1990, IEEE Standard for the Scheme Programming Language [3]. Furthermore, optimizing Scheme compilers often perform program transformations that are difficult, if not impossible, to justify with the semantics. Equality testing should provide implementors with more freedom. When eqv? is given two procedures as arguments, the result should be a boolean value, but implementations should be allowed to return either value at its discretion. With this change, compiler writers and the formal semantics would no longer need to label procedures to satisfy the needs of equal 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Joe Armstrong, Robert Virding, and Mike Williams. </author> <title> Concurrent Programming in ERLANG. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference: [2] <author> Joshua D. Guttman, John D. Ramsdell, and Mitchell Wand. VLISP: </author> <title> A verified implementation of Scheme. </title> <journal> Lisp and Symbolic Computation, </journal> 8(1/2):5-32, 1995. 
Reference: [3] <editor> IEEE Std 1178-1990. </editor> <title> IEEE Standard for the Scheme Programming Language. </title> <publisher> Institute of Electrical and Electronic Engineers, Inc., </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference: [4] <author> Richard A. Kelsey and Jonathan A. Rees. </author> <title> A tractable Scheme implementation. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 7(4) </volume> <pages> 315-335, </pages> <year> 1994. </year>
Reference: [5] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference: [6] <author> Andrew K. Wright and Robert Cartwright. </author> <title> A practical soft type system for Scheme. </title> <booktitle> In 1994 ACM Conference on Lisp and Functional Programming, volume 7 of LISP Pointers, </booktitle> <pages> pages 250-262, </pages> <year> 1994. </year> <title> Lisp Pointers, </title> <booktitle> Vol. VII, </booktitle> <volume> No. 4, </volume> <month> October-December </month> <year> 1994, </year> <pages> Pages 13-14. Page 2 </pages>
References-found: 6

