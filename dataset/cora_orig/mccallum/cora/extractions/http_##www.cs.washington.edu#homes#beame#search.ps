URL: http://www.cs.washington.edu/homes/beame/search.ps
Refering-URL: http://www.cs.washington.edu/homes/beame/papers.html
Root-URL: 
Email: beame@cs.washington.edu  sacook@cs.toronto.edu  jeff@cs.yorku.ca  russell@cs.ucsd.edu  toni@cs.arizona.edu  
Title: The Relative Complexity of NP Search Problems  
Author: Paul Beame Stephen Cook Jeff Edmonds Russell Impagliazzo Toniann Pitassi 
Note: Research supported by NSF grants CCR-8858799 and CCR-9303017 Research supported by an NSERC operating grant and the Information Technology Research Centre Supported by an NSF postdoctoral fellowship and by a Canadian NSERC postdoctoral fellowship Research Supported by NSF YI Award CCR-92-570979, Sloan Research Fellowship BR-3311, grant #93025 of the joint US-Czechoslovak Science and Technology Program, and USA-Israel BSF Grant 92-00043 Research supported by an NSF postdoctoral fellowship and by NSF Grant CCR-9457782  
Date: July 2, 1998  
Address: Box 352350 Seattle, WA 98195-2350  Canada M5S 1A4  Toronto, Ontario Canada M3J 1P3  UC, San Diego 9500 Gilman Drive La Jolla, CA 92093-0114  Tucson, AZ 85721-0077  
Affiliation: Computer Science and Engineering University of Washington  Computer Science Dept. University of Toronto  Department of Computer Science York University  Computer Science and Engineering  Department of Computer Science University of Arizona  
Abstract-found: 0
Intro-found: 1
Reference: [BI87] <author> Manuel Blum and Russell Impagliazzo. </author> <title> Generic oracles and oracle classes. </title> <booktitle> In 28th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 118-126, </pages> <address> Los Angeles, CA, </address> <month> October </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: Notice that (CQ) A = CQ when A 2 P. The following theorem shows that the problem of separating relativized NP search classes is equivalent to separating them relative to any generic oracle <ref> [BI87] </ref>, and also equivalent to showing that there is no reduction between the corresponding type 2 problems. Theorem 1: Let Q 1 ; Q 2 2 TFNP 2 . <p> [Rii93] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87, HH91], <ref> [BI87] </ref>, [Tar89], and appears explicitly in [IN88].) Fix j N 1 and let P j be the set of all paths in pigeon trees with leaf label j. Since Case II does not hold, the paths in P j are mutually inconsistent. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following proposition is implicit in [HH87], <ref> [BI87] </ref>, [Tar89]; the proposition as stated is implicit in [IN88]: Proposition 19: NP 2 " coNP 2 (P 2 ) TFNP 24 Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 " coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A
Reference: [BIK + 94] <author> Paul W. Beame, Russell Impagliazzo, Jan Krajcek, Toniann Pitassi, and Pavel Pudlak. </author> <title> Lower bounds on Hilbert's Nullstellensatz and propositional proofs. </title> <booktitle> In Proceedings 35th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-806, </pages> <address> Santa Fe, NM, </address> <month> November </month> <year> 1994. </year> <note> IEEE. </note>
Reference-contexts: The proofs of our separations have quite interesting combinatorial content. In one example, via a series of reductions using methods similar to those in <ref> [BIK + 94] </ref>, we derive our result via new lower bounds on the degrees of polynomials asserted to exist by Hilbert's Nullstellensatz over finite fields. <p> The lower bound we obtain for the degree of these polynomials is (n 1=4 ) where n is the number of variables and this is substantially stronger than the (log fl n) bound that was shown (for a somewhat different system) in <ref> [BIK + 94] </ref>. 2 2 The Search Classes 2.1 Type 1 and type 2 problems A decision problem in NP can be given by a polynomial time relation R and a polynomial p such that R (x; c) implies jcj p (jxj). <p> In this section we again reduce our problem to a similar combinatorial question with a somewhat different kind of decision tree. This question is more difficult than our previous one and we need to apply a new method of attack, introduced in <ref> [BIK + 94] </ref>, that is based on lower bounds on the degrees of polynomials given by Hilbert's Nullstellensatz. <p> This is an interesting result in its own right since the bound for the coefficients of the system in <ref> [BIK + 94] </ref> was only (log fl n). We give the proof of this result in the next section. <p> Such a collection T fl is very similar to the generic systems considered in <ref> [BIK + 94] </ref>. The rest of the proof is devoted to showing that such a collection cannot exist.
Reference: [CIY97] <author> S. A. Cook, R. Impagliazzo, and T. Yamakami. </author> <title> A tight relationship between generic oracles and type-2 complexity theory. </title> <journal> Information and Computation, </journal> <volume> 136, </volume> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: The proof appears in <ref> [CIY97] </ref>.
Reference: [FK92] <author> M. Fellows and N Koblitz. </author> <title> Self-witnessing polynomial-time complexity and prime factorization. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 107-110, </pages> <address> Boston, M A, </address> <month> June </month> <year> 1992. </year> <journal> IEEE. </journal> <volume> 25 </volume>
Reference-contexts: An interesting example comes from the Fellows and Koblitz paper <ref> [FK92] </ref>, which shows how to provide every prime number with a unique certificate that can be used to verify in polynomial-time that the number is prime. (The certificates provided by Pratt [Pra75] are not unique.) The single-valued NP search problem coming from Fellows and Koblitz is: Given a number m, list
Reference: [HH87] <author> Juris Hartmanis and Lane A. Hemachandra. </author> <title> One-way functions, robustness, and non--isomorphism of NP-complete sets. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Second Annual Conference, </booktitle> <pages> pages 160-174, </pages> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> June </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: to Riis [Rii93] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in <ref> [HH87, HH91] </ref>, [BI87], [Tar89], and appears explicitly in [IN88].) Fix j N 1 and let P j be the set of all paths in pigeon trees with leaf label j. Since Case II does not hold, the paths in P j are mutually inconsistent. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following proposition is implicit in <ref> [HH87] </ref>, [BI87], [Tar89]; the proposition as stated is implicit in [IN88]: Proposition 19: NP 2 " coNP 2 (P 2 ) TFNP 24 Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 " coNP 2 , it would be in (FP 2 ) A for some type 1 oracle
Reference: [HH91] <author> J. Hartmanis and L. Hemachandra. </author> <title> One-way functions, robustness, and non-isomorphism of NP-complete sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 81 </volume> <pages> 155-163, </pages> <year> 1991. </year>
Reference-contexts: to Riis [Rii93] which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in <ref> [HH87, HH91] </ref>, [BI87], [Tar89], and appears explicitly in [IN88].) Fix j N 1 and let P j be the set of all paths in pigeon trees with leaf label j. Since Case II does not hold, the paths in P j are mutually inconsistent.
Reference: [IN88] <author> R. Impagliazzo and M. Naor. </author> <title> Decision trees and downward closures. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Third Annual Conference, </booktitle> <pages> pages 29-38, </pages> <address> Washingto n, D.C., </address> <month> June </month> <year> 1988. </year> <note> IEEE. </note>
Reference-contexts: the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87, HH91], [BI87], [Tar89], and appears explicitly in <ref> [IN88] </ref>.) Fix j N 1 and let P j be the set of all paths in pigeon trees with leaf label j. Since Case II does not hold, the paths in P j are mutually inconsistent. We describe H j implicitly as a strategy for querying the purported matching ff. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following proposition is implicit in [HH87], [BI87], [Tar89]; the proposition as stated is implicit in <ref> [IN88] </ref>: Proposition 19: NP 2 " coNP 2 (P 2 ) TFNP 24 Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 " coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover, A could be a search problem in TFNP, <p> The above outline was used in the proof of <ref> [IN88] </ref> (Proposition 4.2) which shows that for a generic oracle G, TFNP G is not contained in FP G .
Reference: [JPY88] <author> David S. Johnson, Christos H. Papadimitriou, and Mihalis Yannakakis. </author> <title> How easy is local search? Journal of Computer and System Sciences, </title> <booktitle> 37(1) </booktitle> <pages> 79-100, </pages> <year> 1988. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap90] <author> Christos H. Papadimitriou. </author> <title> On graph-theoretic lemmata and complexity classes. </title> <booktitle> In Proceedings 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-801, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The problem Pigeonhole Circuit is a natural complete problem for PPP. The class PPADS is called PSK in <ref> [Pap90] </ref>, where it is incorrectly said to be equivalent to PPAD. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD m LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [Pap91] <author> Christos H. Papadimitriou. </author> <title> On inefficient proofs of existence and complexity classes. </title> <booktitle> In Proceedings of the 4th Czechoslovakian Symposium on Combinatorics, </booktitle> <year> 1991. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap94] <author> Christos H. Papadimitriou. </author> <title> On the complexity of the parity argument and other inefficient proofs of existence. </title> <journal> Journal of Computer and System Sciences, </journal> <pages> pages 498-532, </pages> <year> 1994. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The class PPAD is a directed version of PPA; the combinatorial lemma here is this: "Every directed graph with an imbalanced node (indegree different from outdegree) must have another imbalanced node." It is shown in <ref> [Pap94] </ref> that all these classes can be defined in a syntactic way. As demonstrated in the papers listed above, these classes satisfy the key litmus test for an interesting complexity class: they contain many natural problems, some of which are complete. <p> The classes defined from these problems are interesting for more than just the lemmas on which they are based. There are many natural problems in them. Here are some examples in the first order classes PPAD, PPA, and PPP from <ref> [Pap94] </ref>. <p> A statement similar to Theorem 1 holds for the case of Turing reductions with the many-one closures replaced by Turing closures for the type 1 classes. All reductions we exhibit are many-one reductions, so with this theorem they give inclusions or alternative characterizations of the classes defined in <ref> [Pap94] </ref>. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD m LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [Pra75] <author> Vaughan R. Pratt. </author> <title> Every prime has a succinct certificate. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 </volume> <pages> 214-220, </pages> <year> 1975. </year>
Reference-contexts: An interesting example comes from the Fellows and Koblitz paper [FK92], which shows how to provide every prime number with a unique certificate that can be used to verify in polynomial-time that the number is prime. (The certificates provided by Pratt <ref> [Pra75] </ref> are not unique.) The single-valued NP search problem coming from Fellows and Koblitz is: Given a number m, list its prime divisors in order, together with their unique certificates.
Reference: [PSY90] <author> Christos H. Papadimitriou, Alejandro A. Schaffer, and Mihalis Yannakakis. </author> <title> On the complexity of local search. </title> <booktitle> In Proceedings of the Twenty-Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 438-445, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year> <note> (Extended Abstract). </note>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Rii93] <author> Stren Riis. </author> <title> Independence in Bounded Arithmetic. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <year> 1993. </year>
Reference-contexts: For any path p in H j with leaf label "unmapped", p is inconsistent with any path in any T i with leaf label j. The construction is very similar to an argument due to Riis <ref> [Rii93] </ref> which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87, HH91], [BI87],
Reference: [Tar89] <author> G. Tardos. </author> <title> Query complexity, or why is it difficult to separate NP A T coNP A by a random oracle A? Combinatorica, </title> <booktitle> 9 </booktitle> <pages> 385-392, </pages> <year> 1989. </year>
Reference-contexts: which is itself similar to the proof that if a Boolean function and its negation both can be written in disjunctive normal form with terms of size d, then the function has a Boolean decision tree of height d 2 . (This last result was implicit in [HH87, HH91], [BI87], <ref> [Tar89] </ref>, and appears explicitly in [IN88].) Fix j N 1 and let P j be the set of all paths in pigeon trees with leaf label j. Since Case II does not hold, the paths in P j are mutually inconsistent. <p> Since SOURCE.OR.SINK reduces to all of the other problems mentioned in the statement of the theorem, it suffices to show this for SOURCE.OR.SINK. A slightly weaker version of the following proposition is implicit in [HH87], [BI87], <ref> [Tar89] </ref>; the proposition as stated is implicit in [IN88]: Proposition 19: NP 2 " coNP 2 (P 2 ) TFNP 24 Thus, if SOURCE.OR.SINK were reducible to a problem in NP 2 " coNP 2 , it would be in (FP 2 ) A for some type 1 oracle A (moreover,
Reference: [Tow90] <author> M. Townsend. </author> <title> Complexity of type-2 relations. </title> <journal> Notre Dame J. Formal Logic, </journal> <volume> 31 </volume> <pages> 241-262, </pages> <year> 1990. </year>
Reference-contexts: We follow Townsend <ref> [Tow90] </ref> in defining such an F to be polynomial time computable if it is computable in deterministic time that is polynomial in jxj with calls to ff at unit cost.
References-found: 16

