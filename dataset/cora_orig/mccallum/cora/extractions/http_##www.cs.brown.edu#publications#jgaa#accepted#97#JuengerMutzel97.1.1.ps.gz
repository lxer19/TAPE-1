URL: http://www.cs.brown.edu/publications/jgaa/accepted/97/JuengerMutzel97.1.1.ps.gz
Refering-URL: http://www.cs.brown.edu/publications/jgaa/accepted/home.html
Root-URL: http://www.cs.brown.edu/
Title: 2-Layer Straightline Crossing Minimization: Performance of Exact and Heuristic Algorithms  
Author: Michael Junger Petra Mutzel 
Address: Koln  Saarbrucken  
Affiliation: Institut fur Informatik Universitat zu  Max-Planck-Institut fur Informatik  
Note: Journal of Graph Algorithms and Applications  vol. 1, no. 1, pp.  Communicated by P. Eades: submitted  Research supported in part by DFG-Grant Ju204/7-1, Forschungsschwerpunkt "Ef-fiziente Algorithmen fur diskrete Probleme und ihre Anwendungen" and by ESPRIT LTR Project no. 20244 ALCOM-IT  
Email: mjuenger@informatik.uni-koeln.de  
Web: http://www.cs.brown.edu/publications/jgaa/  http://www.informatik.uni-koeln.de/ls juenger/  http://www.mpi-sb.mpg/~mutzel/ mutzel@mpi-sb.mpg.de  
Date: 1-25 (1997)  August 1996; revised November 1996.  
Abstract: We present algorithms for the two layer straightline crossing minimization problem that are able to compute exact optima. Our computational results lead us to the conclusion that there is no need for heuristics if one layer is fixed, even though the problem is NP-hard, and that for the general problem with two variable layers, true optima can be computed for sparse instances in which the smaller layer contains up to 15 nodes. For bigger instances, the iterated barycenter method turns out to be the method of choice among several popular heuristics whose performance we could assess by comparing their results to optimum solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Carpano. </author> <title> Automatic display of hierarchized graphs for computer aided decision analysi s. </title> <journal> IEEE Trans. Syst. Man Cybern., </journal> <volume> SMC-10(11):705-715, </volume> <year> 1980. </year>
Reference-contexts: A good visualization of structural information allows the reader to focus on the information content of the diagram. Examples are entity-relationship diagrams, PERT-diagrams, or any flow diagram. A common method for drawing directed graphs has been introduced by Sugiyama et al. [14] and Carpano <ref> [1] </ref>. In the first step, the vertices are partitioned into a set of k levels, and in the second step, the vertices within each level are permuted in such a way that the number of crossings is small. In this paper we focus on the second step.
Reference: [2] <author> C. Catarci. </author> <title> The assignment heuristic for crossing reduction. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 25(3), </volume> <year> 1995. </year>
Reference-contexts: Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., <ref> [16, 14, 6, 8, 4, 2] </ref> and [15]). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by <ref> [2] </ref>. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. They are also called "averaging heuristics", since they simply compute the "average position", i.e., the barycenter or median, for each vertex and sort the vertices according to these numbers. <p> The split heuristic chooses a pivot vertex v, and places every other vertex to the left or right of v according to whether it would make fewer crossings. This step is applied recursively to order the left hand set and the right hand side of v. The assignment heuristic <ref> [2] </ref> reduces the problem to an assignment problem. The entries in the assignment matrix are computed based on the adjacency matrix and on a four dimensional matrix representing the complete bipartite graph. In order to gain confidence in the correctness of our implementations, we repeated the computational tests in [6]. <p> In order to gain confidence in the correctness of our implementations, we repeated the computational tests in [6]. We could reproduce their results accurately. Also the results in <ref> [2] </ref> on the assign heuristic are in line with ours. There are no published computational results for the stochastic heuristic, but a personal communication with the author [5] confirms the correctness of our implementation.
Reference: [3] <author> CPLEX Optimization Inc. </author> <title> Using the CPLEX callable library and the CPLEX mixed integer library, </title> <year> 1993. </year>
Reference-contexts: For the many details and the inclusion of further useful inequalities in the cutting plane part, see [10]. A new implementation of the algorithm is used in our computational experi ments. It is written in C and uses the CPLEX <ref> [3] </ref> software for solving the linear programming relaxations coming up in the course of the computation. 3 One Sided Crossing Minimization The fact that we are able to compute optimum solutions allows us to assess the quality of various popular heuristics for one-sided two layer straightline crossing minimization experimentally.
Reference: [4] <author> S. Dresbach. </author> <title> A new heuristic layout algorithm for DAGs. </title> <editor> In U. Derigs and A. B. . A. Drexl, editors, </editor> <booktitle> Operations Research Proceedings 1994, </booktitle> <pages> pages 121-126. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., <ref> [16, 14, 6, 8, 4, 2] </ref> and [15]). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by [8], the stochastic heuristic by <ref> [4] </ref>, the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. <p> They are also called "averaging heuristics", since they simply compute the "average position", i.e., the barycenter or median, for each vertex and sort the vertices according to these numbers. Surprisingly, these simple heuristics turned out to be among the most promising ones. The stochastic heuristic <ref> [4] </ref>, originally designed for permuting both layers, generates a series of "assessment number matrices" while greedily placing a vertex in layer 1 or layer 2. The assessment numbers are based on some frequency numbers arising from stochastic considerations on the complete bipartite graph. <p> Greedy-insert and greedy-switch behave worst for sparse graphs (see Fig. 4). For n = 60, the ranking of the heuristics with respect to increasing time is barycenter, median, greedy-insert, assign, greedy-switch, stochastic, exact, and split (see Fig. 5). In Table 1, we repeat an experiment by Dresbach <ref> [4] </ref> for instances defined by Warfield [16] as follows: For k = 3; 4; 5; 6; 7; 8 we let n 1 = k, n 2 = 2 k 1, and the adjacency matrix of the bipartite graph is a n 1 fi n 2 matrix whose rows are labelled 1;
Reference: [5] <author> S. Dresbach, </author> <year> 1995. </year> <type> Personal communication. </type>
Reference-contexts: We could reproduce their results accurately. Also the results in [2] on the assign heuristic are in line with ours. There are no published computational results for the stochastic heuristic, but a personal communication with the author <ref> [5] </ref> confirms the correctness of our implementation.
Reference: [6] <author> P. Eades and D. Kelly. </author> <title> Heuristics for reducing crossings in 2-layered networks. </title> <journal> Ars Combin., </journal> <volume> 21.A:89-98, </volume> <year> 1986. </year>
Reference-contexts: Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., <ref> [16, 14, 6, 8, 4, 2] </ref> and [15]). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., [16, 14, 6, 8, 4, 2] and [15]). Eades and Kelly <ref> [6] </ref> observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by <ref> [6] </ref>, the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by <ref> [6] </ref>, the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by <ref> [6] </ref>, the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. They are also called "averaging heuristics", since they simply compute the "average position", i.e., the barycenter or median, for each vertex and sort the vertices according to these numbers. <p> The stochastic heuristic [4], originally designed for permuting both layers, generates a series of "assessment number matrices" while greedily placing a vertex in layer 1 or layer 2. The assessment numbers are based on some frequency numbers arising from stochastic considerations on the complete bipartite graph. The greedy-insert heuristic <ref> [6] </ref> proceeds by successively choosing the next vertex v to be the one which mini M. Junger et al., 2-Layer Crossing Minimization, JGAA, 1 (1) 1-25 (1997) 6 mizes the number of crossings that edges adjacent to v make with edges adjacent to vertices to the left of v. <p> Junger et al., 2-Layer Crossing Minimization, JGAA, 1 (1) 1-25 (1997) 6 mizes the number of crossings that edges adjacent to v make with edges adjacent to vertices to the left of v. The greedy-switch heuristic <ref> [6] </ref> passes over all consecutive pairs of vertices and switches them if it would decrease the number of crossings. This is done until no more switching takes place. <p> The entries in the assignment matrix are computed based on the adjacency matrix and on a four dimensional matrix representing the complete bipartite graph. In order to gain confidence in the correctness of our implementations, we repeated the computational tests in <ref> [6] </ref>. We could reproduce their results accurately. Also the results in [2] on the assign heuristic are in line with ours. There are no published computational results for the stochastic heuristic, but a personal communication with the author [5] confirms the correctness of our implementation.
Reference: [7] <author> P. Eades and S. Whitesides. </author> <title> Drawing graphs in two layers. </title> <booktitle> Theoretical Computer Science 131, </booktitle> <pages> pages 361-374, </pages> <year> 1994. </year>
Reference-contexts: The heuristic consists of repeating these two loops until no more improvement is obtained. M. Junger et al., 2-Layer Crossing Minimization, JGAA, 1 (1) 1-25 (1997) 3 Unfortunately, the 2-layer straightline crossing minimization problem with the permutation of one layer fixed is also NP-hard <ref> [7] </ref>. Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., [16, 14, 6, 8, 4, 2] and [15]).
Reference: [8] <author> P. Eades and N. Wormald. </author> <title> Edge crossings in drawings of bipartite graphs. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 379-403, </pages> <year> 1994. </year>
Reference-contexts: Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., <ref> [16, 14, 6, 8, 4, 2] </ref> and [15]). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by <ref> [8] </ref>, the stochastic heuristic by [4], the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. <p> computational comparison includes the following heuristics: the barycenter heuristic by [14], the median heuristic by <ref> [8] </ref>, the stochastic heuristic by [4], the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. They are also called "averaging heuristics", since they simply compute the "average position", i.e., the barycenter or median, for each vertex and sort the vertices according to these numbers. Surprisingly, these simple heuristics turned out to be among the most promising ones.
Reference: [9] <author> M. Garey and D. Johnson. </author> <title> Crossing number is NP-complete. </title> <journal> SIAM J. Algebraic Discrete Methods, </journal> <volume> 4 </volume> <pages> 312-316, </pages> <year> 1983. </year>
Reference-contexts: Essentially, a k-layered network is a k-partite graph that is drawn in a special way. Even for 2-layered graphs the straightline crossing minimization problem is NP-hard <ref> [9] </ref>.
Reference: [10] <author> M. Grotschel, M. Junger, and G. Reinelt. </author> <title> A cutting plane algorithm for the linear ordering problem. </title> <journal> Operations Research, </journal> <volume> 32 </volume> <pages> 1195-1220, </pages> <year> 1984. </year>
Reference-contexts: For the details see [12]. When the integrality conditions in (LO) are dropped, only 2 n hypercube inequalities and 2 n 3-cycle inequalities are left that define a relaxation of (LO) which has been proven very useful in practical applications. In <ref> [10] </ref> a branch and cut algorithm for (LO) is proposed that solves this relaxation with a cutting plane approach, since writing down all 3-cycle inequalities, even though taking only polynomial space, and solving the corresponding linear program, is not practical for space reasons. <p> For the many details and the inclusion of further useful inequalities in the cutting plane part, see <ref> [10] </ref>. A new implementation of the algorithm is used in our computational experi ments.
Reference: [11] <author> M. Grotschel, M. Junger, and G. Reinelt. </author> <title> Optimal triangulation of large real world input-output matrices. </title> <journal> Statistische Hefte, </journal> <volume> 25 </volume> <pages> 261-295, </pages> <year> 1984. </year>
Reference-contexts: If the optimum solution is integral, the algorithm stops, otherwise it is applied recursively to two subprob-lems in one of which a fractional x ij is set to 1 and in the other set to 0. In <ref> [11] </ref> such a branch and cut approach could be used to find optimum linear orderings with n up to 60 in an application involving input-output matrices that are used in economic analysis. For the many details and the inclusion of further useful inequalities in the cutting plane part, see [10].
Reference: [12] <author> M. Grotschel, M. Junger, and G. Reinelt. </author> <title> Facets of the linear ordering polytope. </title> <journal> Mathematical Programming, </journal> <volume> 33 </volume> <pages> 43-60, </pages> <year> 1985. </year>
Reference-contexts: Further classes of inequalities with a number of members exponential in n that must be present in a complete linear description of the feasible set, are known, and some of them can be exploited algorithmically. For the details see <ref> [12] </ref>. When the integrality conditions in (LO) are dropped, only 2 n hypercube inequalities and 2 n 3-cycle inequalities are left that define a relaxation of (LO) which has been proven very useful in practical applications.
Reference: [13] <author> D. Knuth. </author> <title> The Stanford GraphBase: A Platform for Combinatorial Computing. </title> <publisher> ACM Press, Addison-Wesley Publishing Company, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: All samples are generated by the program random bigraph of the Stanford GraphBase by Knuth <ref> [13] </ref>. The generators are hardware independent and are available from the authors so that exactly the same experiments can be run by anyone who is interested. M. Junger et al., 2-Layer Crossing Minimization, JGAA, 1 (1) 1-25 (1997) 7 M.
Reference: [14] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods for visual understanding of hierarchical systems. </title> <journal> IEEE Trans. Syst. Man Cybern., </journal> <volume> SMC-11(2):109-125, </volume> <year> 1981. </year>
Reference-contexts: A good visualization of structural information allows the reader to focus on the information content of the diagram. Examples are entity-relationship diagrams, PERT-diagrams, or any flow diagram. A common method for drawing directed graphs has been introduced by Sugiyama et al. <ref> [14] </ref> and Carpano [1]. In the first step, the vertices are partitioned into a set of k levels, and in the second step, the vertices within each level are permuted in such a way that the number of crossings is small. In this paper we focus on the second step. <p> Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., <ref> [16, 14, 6, 8, 4, 2] </ref> and [15]). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical. <p> In section 4, we utilized this fact and the branch and cut algorithm of section 2 for the design and implementation of a program that solves the general two layer straightline crossing minimization problem to optimality. layers free in <ref> [14] </ref> with fixed lower layer, [14] obtained the shown drawing with 48 crossings that we could show to be optimum. The right drawing is the optimum when both layers can be freely permuted. It has only 19 crossings. M. <p> In section 4, we utilized this fact and the branch and cut algorithm of section 2 for the design and implementation of a program that solves the general two layer straightline crossing minimization problem to optimality. layers free in <ref> [14] </ref> with fixed lower layer, [14] obtained the shown drawing with 48 crossings that we could show to be optimum. The right drawing is the optimum when both layers can be freely permuted. It has only 19 crossings. M. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by <ref> [14] </ref>, the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. <p> Our computational comparison includes the following heuristics: the barycenter heuristic by <ref> [14] </ref>, the median heuristic by [8], the stochastic heuristic by [4], the greedy-insert heuristic by [6], the greedy-switch heuristic by [6], the split heuristic by [6], and the assign heuristic by [2]. The barycenter heuristic [14] and the median heuristic [8] are the most popular ones. They are also called "averaging heuristics", since they simply compute the "average position", i.e., the barycenter or median, for each vertex and sort the vertices according to these numbers.
Reference: [15] <author> V. Valls, R. Marti, and P. Lino. </author> <title> A branch and bound algorithm for minimizing the number of crossing arcs in bipartite graphs. </title> <journal> Journal of Operational Research, </journal> <volume> 90 </volume> <pages> 303-319, </pages> <year> 1996. </year>
Reference-contexts: Therefore, a lot of effort went into the design of efficient heuristics, for the version in which one permutation is fixed as well as for the general case (see, e.g., [16, 14, 6, 8, 4, 2] and <ref> [15] </ref>). Eades and Kelly [6] observe that the computation of true optima would be desirable in order to assess the performance of various heuristics, however, they believe that the NP-hardness of the problem renders such an experimental evaluation impractical.

References-found: 15

