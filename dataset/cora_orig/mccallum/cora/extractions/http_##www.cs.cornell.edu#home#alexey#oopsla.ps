URL: http://www.cs.cornell.edu/home/alexey/oopsla.ps
Refering-URL: http://www.cs.cornell.edu/home/alexey/publications.html
Root-URL: 
Email: falexey,keng@cs.cornell.edu  
Title: Building Reliable Adaptive Distributed Objects with the Maestro Tools  
Author: Alexey Vaysburd Ken Birman 
Date: July 3, 1997  
Affiliation: Department of Computer Science Cornell University  
Abstract: This paper presents the Maestro Tools, a distributed object layer built on top of the Ensemble group communication system developed at Cornell. The Maestro tools include a visual application development environment; an interface to and implementation of fundamental distributed object abstractions, such as CSCW (cooperative-work), client/server, and publish/subscribe objects; and a set of adaptive control/policy modules which are used to adjust Ensemble failure detection and group multicast protocols in accordance with the application's quality of service requirements. The Maestro tools have been used in a reliable CORBA system and in a number of other projects. Results reported in this paper are work in progress: about 2/3 of our goals have been achieved, but there is still work to be done before the full-scale object layer is completed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Birman, R. Friedman, and M. Hayden. </author> <title> The Maestro Group Manager: A Structuring Tool For Applications With Multiple Quality of Service Requirements. </title> <type> Technical Report TR97-1619, </type> <institution> Department of Computer Science, Cornell University, </institution> <year> 1997. </year>
Reference-contexts: Adaptation is especially important over WAN's, where system conditions can fluctuate significantly, and transient link failures and partitions are commonplace. Ensemble provides a number of adaptive mechanisms which include the ability to change group membership configuration and switch protocol stacks on the fly <ref> [1, 6] </ref>. Maestro, in its turn, includes a set of policies which can be used to control Ensemble's configuration and adapt the behavior of protocol layers (specifically the layers that implement failure detection and reliable group multicast) at the run time.
Reference: [2] <author> K. P. Birman. </author> <title> Building Secure and Reliable Network Applications. </title> <publisher> Manning Publishing Company and Prentice Hall, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: Ensemble is the third-generation group communication system developed at Cornell as a successor to Isis and Horus <ref> [2, 7] </ref>. Ensemble allows to create communication entities called endpoints (a generalization of UNIX sockets), which can join endpoint groups and send multicast and point-to-point messages to each other. <p> Ensemble allows to create communication entities called endpoints (a generalization of UNIX sockets), which can join endpoint groups and send multicast and point-to-point messages to each other. The protocols of Ensemble implement logical properties of group communication, such as virtual synchrony and total ordering <ref> [2] </ref>. 2 Maestro captures fundamental distributed-object abstractions of Ensemble in a hierarchy of C++ classes. At the bottom of the hierarchy is the GroupMember class which implements basic group communication functionality, including methods for joining and leaving groups and sending messages.
Reference: [3] <author> R. Friedman and A. Vaysburd. </author> <title> Fast Replicated State Machines Over Partitionable Networks. </title> <booktitle> In Proc. of the IEEE 16th International Symposium on Reliable Distributed Systems, </booktitle> <address> Durham, NC, </address> <month> October </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Maestro ensures consistency of the global state by integrating state transfer with the application layer above, and with replication protocols implemented by the communication system underneath <ref> [3] </ref>. 3 Visual Maestro: Rapid Application Development Visual Maestro is a "wizard"-style tool which aids in development of distributed object-oriented applications by guiding the programmer through a series of design choices which pertain to such dimensions as execution style, communication properties, quality of service requirements, and object state of the application.
Reference: [4] <author> Mark Hayden. </author> <title> The Ensemble System. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, Forthcoming, </institution> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: This provides the motivation for the Maestro tools. fl This research was supported by ARPA/ONR grant N00014-96-1-1014 1 Maestro is a distributed object layer built over the Ensemble group communication system <ref> [4] </ref> developed at Cornell University. It implements fundamental distributed-communication abstractions, including CSCW (cooperative-work), client/server, and publish/subscribe objects. These can be used directly as basic building blocks of distributed applications, or integrated within still higher-level distributed object technologies such as CORBA [5]. <p> Adaptive mechanisms and control policies of Maestro are discussed in section 4. We conclude with a discussion of further directions for use of Maestro in section 5. 2 Maestro Classes: Fundamental Abstractions The distributed-object abstractions of Maestro are built upon protocol layers implemented in Ensemble <ref> [4] </ref>. Ensemble is the third-generation group communication system developed at Cornell as a successor to Isis and Horus [2, 7]. Ensemble allows to create communication entities called endpoints (a generalization of UNIX sockets), which can join endpoint groups and send multicast and point-to-point messages to each other.
Reference: [5] <author> Silvano Maffeis. </author> <title> Adding Group Communication and Fault-Tolerance to CORBA. </title> <booktitle> In Proc. of the 1995 USENIX Conference on Object-Oriented Technologies, </booktitle> <address> Monterey, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: It implements fundamental distributed-communication abstractions, including CSCW (cooperative-work), client/server, and publish/subscribe objects. These can be used directly as basic building blocks of distributed applications, or integrated within still higher-level distributed object technologies such as CORBA <ref> [5] </ref>. One of the goals of Maestro is to support smooth integration of object layers above it, and communication protocols below, as concerns both functional interfaces and system properties (quality of service). <p> The wizard generates Maestro code ready to be compiled and linked within the application. The use of the "wizard" approach in Maestro should substantially simplify and speed up the development process for distributed applications. Maestro tools have been used by the Electra system (a reliable CORBA implementation) <ref> [5] </ref>, in the Quality of Service for CORBA Objects (QuO) project at BBN [8], and in a number of other projects. The Maestro API is the primary programming interface to Ensemble and Horus. The software is available as a part of the Ensemble distribution and can be downloaded from http://www.cs.cornell.edu/Info/Projects/Ensemble. <p> Alternatively, Maestro can be encapsulated within another object-oriented layer that provides yet higher level of abstraction. For example, Maestro tools have been used in the Electra system <ref> [5] </ref>, a CORBA Object Request Broker implementation. Elec-tra is system-independent and can run over different transport layers. By running over Mae-stro/Ensemble, Electra takes advantage their group communication protocols and state transfer tools to increase reliability and availability of CORBA applications.
Reference: [6] <author> R. van Renesse, K. Birman, M. Hayden, A. Vaysburd, and D. Karr. </author> <title> Building Adaptive Systems Using Ensemble. </title> <note> Submitted for publication, </note> <month> June </month> <year> 1997. </year>
Reference-contexts: Adaptation is especially important over WAN's, where system conditions can fluctuate significantly, and transient link failures and partitions are commonplace. Ensemble provides a number of adaptive mechanisms which include the ability to change group membership configuration and switch protocol stacks on the fly <ref> [1, 6] </ref>. Maestro, in its turn, includes a set of policies which can be used to control Ensemble's configuration and adapt the behavior of protocol layers (specifically the layers that implement failure detection and reliable group multicast) at the run time.
Reference: [7] <author> R. van Renesse, K. Birman, and S. Maffeis. Horus: </author> <title> A flexible Group Communication System. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Ensemble is the third-generation group communication system developed at Cornell as a successor to Isis and Horus <ref> [2, 7] </ref>. Ensemble allows to create communication entities called endpoints (a generalization of UNIX sockets), which can join endpoint groups and send multicast and point-to-point messages to each other.
Reference: [8] <author> J. Zinky, D. Bakken, and R. Schantz. </author> <title> Architectural Support for Quality of Service for CORBA Objects. </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> April </month> <year> 1997. </year> <month> 5 </month>
Reference-contexts: The approach taken in Maestro follows the general multi-level masking adaptivity model. Within this model, a system layer compensates for configuration/environment changes in the layers below so as to avoid having to reconfigure itself and report a configuration change to the layers above <ref> [8] </ref>. Finally, Maestro addresses the issue of system development methodology by providing a visual environment for rapid prototyping/development of distributed object-oriented applications. <p> The use of the "wizard" approach in Maestro should substantially simplify and speed up the development process for distributed applications. Maestro tools have been used by the Electra system (a reliable CORBA implementation) [5], in the Quality of Service for CORBA Objects (QuO) project at BBN <ref> [8] </ref>, and in a number of other projects. The Maestro API is the primary programming interface to Ensemble and Horus. The software is available as a part of the Ensemble distribution and can be downloaded from http://www.cs.cornell.edu/Info/Projects/Ensemble. The rest of this paper is organized as follows. <p> The aim of Maestro control policies is to maximize the performance of the application within the specified quality of service regions, and to compensate for adverse system conditions, following the masking adaptivity model of <ref> [8] </ref>. For example, Maestro may control message relaying and retransmission policies of Ensemble reliable group multicast protocols. Adaptation decisions will be made based on available point-to-point link stability information. <p> By running over Mae-stro/Ensemble, Electra takes advantage their group communication protocols and state transfer tools to increase reliability and availability of CORBA applications. Maestro is also used (together with Electra) in the ongoing Quality of Service for CORBA Objects (QuO) project at BBN <ref> [8] </ref>. The goal of QuO is to extend CORBA by enriching IDL specifications with "system properties", specifically those pertaining to the application's quality of service (QoS) requirements.
References-found: 8

