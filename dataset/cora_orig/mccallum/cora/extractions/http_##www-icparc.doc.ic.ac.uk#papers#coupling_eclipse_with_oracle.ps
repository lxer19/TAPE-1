URL: http://www-icparc.doc.ic.ac.uk/papers/coupling_eclipse_with_oracle.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Title: Coupling ORACLE with ECLiPSe  
Author: S. K. Das J. Dicker 
Address: London SW7 2AZ  Berks RG12 8SN  
Affiliation: IC-Parc William Penney Laboratory Imperial College  ICL Research and Advanced Technology Bracknell  College.  
Abstract: We describe the design and implementation of an interface between a Prolog system, ECLiPSe, and the relational database management system, Oracle. ECLiPSe is used to solve sophisticated planning and scheduling problems and sometimes needs to access data stored in a legacy system to do this. A typical ECLiPSe application would be job shop scheduling and a legacy system might be used to store the orders that have to be scheduled by the system. The interface, called CORE, enables the writer of the ECLiPSe application to query the database for both the whole set of answers and tuple-at-a-time. We also describe the use of the interface in an application demonstrator for generating lecture timetables at Imperial 
Abstract-found: 1
Intro-found: 1
Reference: [Berghel,85] <author> H. L. Berghel. </author> <title> Simplified integration of Prolog with RDBMS. </title> <journal> DATA BASE, </journal> <volume> 16 </volume> <pages> 3-12, </pages> <year> 1985. </year>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling <ref> [Berghel,85] </ref>, [Bocca,86], [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]).
Reference: [Brodie et al,89] <author> M. L. Brodie and M. Jarke. </author> <title> On integrating logic programming and databases. </title> <editor> In L. Kerschberg, editor, </editor> <booktitle> Expert Database Systems, </booktitle> <pages> pages 191-205. </pages> <year> 1989. </year>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], <ref> [Brodie et al,89] </ref>, [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1).
Reference: [Bocca,86] <author> J. Bocca. EDUCE: </author> <title> A marriage of convenience: Prolog and relational DBMS. </title> <booktitle> In Proceedings of the Symposium on Logic Programming, </booktitle> <pages> pages 36-45, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], <ref> [Bocca,86] </ref>, [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]).
Reference: [Ceri et al,86] <author> S. Ceri, G. Gottlob, and G. Wiederhold. </author> <title> Interfacing relational databases and Prolog efficiently. </title> <booktitle> In Proceedings of the First International Conference on Expert Database Systems. </booktitle> <address> Benjamin-Cummings, </address> <year> 1986. </year>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], <ref> [Ceri et al,86] </ref>, [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1).
Reference: [Codd,70] <author> E. F. Codd. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13 </volume> <pages> 377-387, </pages> <year> 1970. </year>
Reference-contexts: ECLiPSe is produced by the ECRC (European Computer Industry Research Centre). The logic programming extensions which ECLiPSe provides include constraint libraries which support the solving of complex scheduling problems, e.g., job shop scheduling or timetabling. 2.2 Relational databases A relational database <ref> [Codd,70] </ref> consists of a collection of relations or tables with a description of them which is called a schema. The rows of the tables are called tuples and columns are called attributes. Each attribute has an associated domain of values. <p> CREATE TABLE employee (id INTEGER CONSTRAINT pk_emp PRIMARY KEY, name CHAR (16), designation CHAR (16) CONSTRAINT ck_desig CHECK (desig IN ('programmer', 'software_eng', 'project_leader'))); A view <ref> [Codd,70] </ref> can be thought of as a mask overlaying one or more tables such that the columns in the view are found in one or more underlying tables or constructed using the columns of underlying tables.
Reference: [Chang,86] <author> C. L. Chang and A. Walker. PROSQL: </author> <title> a prolog programming interface with SQL/DS. </title> <booktitle> In Proceedings of the 1st International Conference on Expert Database Systems, </booktitle> <pages> pages 233-246, </pages> <month> April </month> <year> 1986. </year>
Reference: [Das,92] <author> S. K. Das. </author> <title> Deductive Databases and Logic Programming. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: Each attribute has an associated domain of values. An example of an EMPLOYEE relation is shown in Table 1. In this table, the attributes are Id, Name and Designation and there are five tuples in the table. Integrity constraints <ref> [Das,92] </ref> are properties that the data of a database must satisfy. An example of an integrity constraint on the EMPLOYEE table could be that the identification field is the primary key.
Reference: [Danielsson et al,90] <author> M. Danielsson and J. Barklund. </author> <title> Persistent data storage for Prolog. </title> <booktitle> In Proceedings of DEXA 90. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In view of the above, we have decided to create a link from the planning component implemented in Prolog (specifically ECLiPSe) to the existing Oracle database to enable us to read and update interactively. The link also provides a manageable persistent store for Pro-log <ref> [Danielsson et al,90] </ref>. This document describes the architecture and implementation detail of the system. 1.2 Organization of the paper The organization of the rest of the document is as follows. The next section provides some background necessary to understand the rest of the paper.
Reference: [Draxler,91] <author> C. Draxler. </author> <title> Accessing Relational and Higher Databases through Database Set Predicates from Logic Programming Languages. </title> <type> PhD thesis, </type> <institution> University of Zurich, </institution> <year> 1991. </year>
Reference-contexts: The following is an example of calling from Prolog: set_query (employee (Id, Name, programmer)) This prolog query is translated into an SQL query using a prolog compiler for translating Prolog database goals into SQL database queries. The implementation of the translation software is described in <ref> [Draxler,91] </ref>. The prolog query is translated into this SQL: oracle_set_query ("SELECT id, name FROM employee WHERE designation = 'programmer'", [], L). The prolog predicate oracle_set_query corresponds to the external C procedure p_oracle_set_query as described above. This correspondence is specified in ECLiPSe as follows: external (oracle_set_query/3, "p_oracle_set_query").
Reference: [ECRC,95] <institution> European Community Research Centre, Munich. ECL i P S e 3.5 User Manual, </institution> <year> 1995. </year>
Reference-contexts: Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe <ref> [ECRC,95] </ref>) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1). In the loose coupling approach, Oracle is invoked from ECLiPSe through special built-in predicates using the syntax of SQL.
Reference: [Gozzi et al,90] <author> F. Gozzi, M. Lugli, and S. Ceri. </author> <title> An overview of PRIMO: a portable interface to Prolog and relational databases. </title> <journal> Information Systems, </journal> <volume> 15, </volume> <year> 1990. </year>
Reference-contexts: In the tight-coupling approach, database relations can be used as normal predefined predicates from ECLiPSe by building a rule interpreter on top of Oracle. Integration <ref> [Gozzi et al,90] </ref> differs from coupling in that it produces a single system which provides a number of the facilities of conventional database systems plus efficient management Id Name 1 john 3 tom 5 harry Table 2: A view on the EMPLOYEE table. 4 of rules, and a recursive query processor.
Reference: [Gardarin et al,89] <author> G. Gardarin and P. Valduriez. </author> <title> Relational Databases and Knowledge Bases. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year> <month> 17 </month>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], [Ceri et al,86], <ref> [Gardarin et al,89] </ref>, [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1).
Reference: [Ioannides et al,88] <author> Y. Ioannides, J. Chen, M. Friedman, and T. Tsangaris. </author> <title> BERMUDA an archi-tectural perspective on interfacing Prolog to a database machine. </title> <booktitle> In Proceedings of the Second International Conference on Expert Database Systems. </booktitle> <address> Benjamin-Cummings, </address> <year> 1988. </year>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], <ref> [Ioannides et al,88] </ref>, [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1).
Reference: [Jarke] <author> M. Jarke, J. Clifford, and Y. Vassiliou. </author> <title> An optimizing Prolog front-end to a relational query system. </title>
Reference-contexts: The view in Table 2 can be created in Oracle using SQL as follows: CREATE VIEW qualified_cc AS SELECT id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], <ref> [Jarke] </ref> is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle [Oracle,94]). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1).
Reference: [Naqvi,89] <author> S. Naqvi and S. Tsur. </author> <title> A Logical Language for Data and Knowledge Bases. </title> <publisher> Computer Science Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: The above definition of coupling can be extended to individual levels of a system as follows: * Logical level coupling is at the top level of the system and brings together a logic programming language and a relational data manipulation language <ref> [Naqvi,89] </ref> to enhance the expressive power of data manipulation languages [Waugh et al,90],[Chang,86]. * Function level coupling brings together the logical inference mechanisms of a logic programming system and database management functions of a relational database management systems so as to retrieve or deduce information efficiently. * Physical level coupling deals
Reference: [Oracle,93] <institution> Oracle Corporation, </institution> <address> Redwood City, California. </address> <note> Programmer's Guide to the Oracle Proc*C Precompiler Release 2.0, </note> <year> 1993. </year>
Reference-contexts: Six Oracle precompilers are available and C precompiler (Pro*C) is one of them <ref> [Oracle,93] </ref>. Suitably compiled C-libraries are callable from ECLiPSe. Since a Prolog precompiler is not provided, we are forced to adopt C as an intermediate language for communication between Oracle and ECLiPSe. Each member of a library is called an external procedure which imitates the action of a Prolog procedure.
Reference: [Oracle,94] <author> Oracle Corporation, </author> <title> Redwood City, California. Oracle7 Server for UNIX (Administrator's Reference Guide) Release 7.1, </title> <year> 1994. </year>
Reference-contexts: id, name FROM employee WHERE designation = 'programmer'; 2.3 Interfacing Prolog and Relational Databases Coupling [Berghel,85], [Bocca,86], [Brodie et al,89], [Ceri et al,86], [Gardarin et al,89], [Ioannides et al,88], [Jarke] is the interfacing of a Prolog system (such as ECLiPSe [ECRC,95]) and a conventional database management system (such as Oracle <ref> [Oracle,94] </ref>). There are two different types of coupling possible: loose coupling and tight coupling (see Figure 1). In the loose coupling approach, Oracle is invoked from ECLiPSe through special built-in predicates using the syntax of SQL.
Reference: [Tsur,88] <author> S. Tsur. </author> <title> LDL a technology for the realization of tightly coupled expert database systems. </title> <journal> IEEE Expert, </journal> <year> 1988. </year>
Reference-contexts: A particular level (either logical or functional or physical) is loosely coupled if the two components co-exist independently; otherwise it is tightly coupled <ref> [Tsur,88] </ref>. 2.4 Oracle precompiler and Prolog external procedure An Oracle precompiler is a programming tool that allows a user to embed SQL statements in a high-level host program. Six Oracle precompilers are available and C precompiler (Pro*C) is one of them [Oracle,93]. Suitably compiled C-libraries are callable from ECLiPSe.
Reference: [Waugh et al,90] <author> K. G. Waugh, M. H. Williams, Q. Kong, S. Salvini, and G. Chen. </author> <title> Designing SQUIRREL: an extended SQL for a deductive database system. </title> <journal> The Computer Journal, </journal> <volume> 33, </volume> <year> 1990. </year> <month> 18 </month>
Reference-contexts: above definition of coupling can be extended to individual levels of a system as follows: * Logical level coupling is at the top level of the system and brings together a logic programming language and a relational data manipulation language [Naqvi,89] to enhance the expressive power of data manipulation languages <ref> [Waugh et al,90] </ref>,[Chang,86]. * Function level coupling brings together the logical inference mechanisms of a logic programming system and database management functions of a relational database management systems so as to retrieve or deduce information efficiently. * Physical level coupling deals with the physical organizations of tuples of relational database management
References-found: 19

