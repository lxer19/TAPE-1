URL: http://www.isi.edu/soar/johnson/papers/reeng/reeng.ps
Refering-URL: http://www.isi.edu/isd/I-DOC/i-doc.html
Root-URL: http://www.isi.edu
Email: johnson@isi.edu  
Title: Dynamic (Re)Generation of Software Documentation  
Author: W. Lewis Johnson 
Address: 4676 Admiralty Way Marina del Rey, CA 90292-6695  
Affiliation: USC Information Sciences Institute  
Abstract: We are developing an authoring tool called I-Doc that will automate the process of generating documentation and user help for software systems. The focus of the tool is on capture of the requirements and design decisions that form the content of software documentation. This information can then be used to generate summaries and explanations of the software on demand. The objective of this research is to provide on-line assistance for software maintainers and other software professionals that can take the place of conventional bulk documents. I-Doc is designed to support the reengineering of software systems, since some of the necessary design information will have to be captured by annotating existing code. Reengineering technology, specifically transformation technology, is employed during the generation process to simplify and reorganize design information when describing software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Benner, M.S. Feather, W.L. Johnson, and L. Zorman. </author> <title> The role of scenarios in the software development process. </title> <booktitle> In Proceedings of the IFIP W8.1 Working Conference on Information System Development Process, </booktitle> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: These categories are drawn from case grammars for natural language [5]. Finally, descriptions of classes of behavior, called scenarios, are useful in the description process. Scenarios are useful for defining system requirements, as a way of describing types of behavior that a system should or should not exhibit <ref> [1] </ref>, which can be used to validate system specifications. They are intended to serve two roles within I-Doc. First, scenarios can be used to illustrate system behavior. Second, scenarios provide the context in which to describe systems.
Reference: [2] <author> E. Bina and M. </author> <title> Andreessen. NCSA mosaic home page. Available from World Wide Web server www.ncsa.uiuc.edu. </title>
Reference-contexts: I-Doc cannot yet generate this output, as the project is just getting started; this is merely an illustration of the type of output that will be generated. The figure is a display generated by the Mosaic hypertext system <ref> [2] </ref>, which is the hypertext system used as an output interface by I-Doc. The figure contains a simplified decomposition diagram showing the major components of Range-While-Scan: Scan Generation and Output Processing. It summarizes the function of each component, and the main inputs and outputs of each.
Reference: [3] <author> J.M. Carroll. </author> <title> The minimal manual. </title> <journal> Human-Computer Interaction, </journal> <volume> 3(3) </volume> <pages> 123-153, </pages> <year> 1988. </year>
Reference-contexts: This is the motivation for the new "minimalist" approach to documentation, which uses overviews, structured exercises, and any information that the user cannot discover through experimentation with the system <ref> [3] </ref>. However, the minimal approach is not a rejection of task orientation per se, just of manuals that are oriented around lengthy hypothetical exercises and that contain information one can figure out on one's own.
Reference: [4] <author> R.A. Falcioni and R.L. Buvel. </author> <title> Modular embedded computer software (MECS): </title> <type> Interim report. Technical Report WL-TR-92-1113, </type> <institution> Wright Laboratory, Wright Patterson AFB, OH, </institution> <year> 1990. </year>
Reference-contexts: The system in question is real-time embedded control software of a fighter aircraft radar system. This example was studied by Hughes in a research effort sponsored by Wright Patterson Air Force Base <ref> [4] </ref>. Hughes built a demonstration hypertext documentation system to support a hypothetical maintenance task on this system.
Reference: [5] <author> C.J. Fillmore. </author> <title> The case for case. </title> <booktitle> In Universals in Linguistic Theory, </booktitle> <pages> pages 1-88. </pages> <publisher> Holt, Reinhart and Winston, </publisher> <address> New York, NY, </address> <year> 1968. </year>
Reference-contexts: Objects participating in such relationships can assume one of several grammatical categories, e.g., actor, goal, location, or beneficiary. These categories are drawn from case grammars for natural language <ref> [5] </ref>. Finally, descriptions of classes of behavior, called scenarios, are useful in the description process. Scenarios are useful for defining system requirements, as a way of describing types of behavior that a system should or should not exhibit [1], which can be used to validate system specifications.
Reference: [6] <author> Interactive Development Environments. </author> <title> Software through Pictures: </title> <booktitle> Fundamentals of StP, </booktitle> <year> 1993. </year>
Reference-contexts: The added design information is used to improve the quality of system descriptions, and can be acquired when and as appropriate. Some information is available in front-end CASE tools such as Software through Pictures <ref> [6] </ref>. I-Doc will have the ability to query one or more such CASE repositories in order to extract such information if available. Another means of acquiring the documentary information is through a special acquisition interface. This method is used especially for inputting grammatical annotations and design component classifications.
Reference: [7] <author> W.L. Johnson, M.S. Feather, and D.R. Harris. </author> <title> Representation and presentation of requirements knowledge. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 18(10) </volume> <pages> 853-869, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In order to determine how to render data dictionary elements most effectively in natural language, I-Doc uses grammatical annotations. The annotations used in I-Doc are based on those used in the ARIES requirements acquisition system for annotating specifications <ref> [7] </ref>. Data expressing relationships between objects are categorized as to whether they are attributes, actions, circumstances, classes, or relations.
Reference: [8] <author> W.G. Lehnert. </author> <title> The Process of Question Answering. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1978. </year>
Reference-contexts: Following the approach taken in Lehnert's original work on question answering <ref> [8] </ref> and further developed by research in expert system explanation, such as the work of Moore and Swartout [10], common questions about software have been categorized into types.
Reference: [9] <author> K.R. McKeown and M. Elhadad. </author> <title> A Contrastive Evaluation of Functional Unification Grammar for Surface Language Generation: A Case Study in the Choice of Connectives, </title> <address> pages 351-392. </address> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1991. </year>
Reference-contexts: This architecture was used successfully in ARIES and the KBSA Concept Demonstration [11] to generate text descriptions rapidly. Functional Unification Grammar has been evaluated against competing methods for natural language generation, and has been found to be both flexible and efficient <ref> [9] </ref>. 11 Presentation Delivery As indicated in Section 3, Mosaic is being employed as the hypertext delivery mechanism for I-Doc.
Reference: [10] <author> J.D. Moore and W.R. Swartout. </author> <title> A Reactive Approach to Explanation: Taking the User's Feedback into Account, </title> <address> pages 3-44. </address> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1991. </year>
Reference-contexts: Following the approach taken in Lehnert's original work on question answering [8] and further developed by research in expert system explanation, such as the work of Moore and Swartout <ref> [10] </ref>, common questions about software have been categorized into types. In the initial version of I-Doc, these question types will be available to the user as explicit choices from which the user can choose. Examples of question types include Describe Function, Describe Design, Describe Interface, and Describe Use.
Reference: [11] <author> J.J. Myers and G. Williams. </author> <title> Exploiting meta-model correspondences to provide paraphrasing capabilities for the concept demonstration. </title> <booktitle> In Proceedings of the 5th KBSA Conference, </booktitle> <pages> pages 331-345, </pages> <address> Syracuse, NY, </address> <month> September </month> <year> 1990. </year> <note> Defense Technical Information Center. </note>
Reference-contexts: A second phrase selection component constructs attribute-value patterns in a form suitable for input to the Functional Unification Generator, according to directives contained within the system description templates. This architecture was used successfully in ARIES and the KBSA Concept Demonstration <ref> [11] </ref> to generate text descriptions rapidly. Functional Unification Grammar has been evaluated against competing methods for natural language generation, and has been found to be both flexible and efficient [9]. 11 Presentation Delivery As indicated in Section 3, Mosaic is being employed as the hypertext delivery mechanism for I-Doc.
Reference: [12] <author> P. Szekely, P. Luo, and R. Neches. </author> <title> Facilitating the exploration of interface design alternatives: The HUMANOID model of interface design. </title> <booktitle> In Proceedings of CHI'92, The National Conference on Computer-Human Interaction, </booktitle> <pages> pages 507-515, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: A second approach is to annotate the models used in automated program synthesis systems. The knowledge bases of specialized knowledge-based synthesis systems, such as user interface development systems, can be augmented to support the generation of documentation and help as well <ref> [12] </ref>. Integration of I-Doc with one or more such systems is an option being considered for future development. The third source of design information for documentation is code analysis. Analysis routines can detect components that appear to be creating objects, inserting into or removing from data aggregates, validating data, etc.
References-found: 12

