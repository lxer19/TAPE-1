URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/fr-rapide-kbse.ps
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: chandra@cis.ohio-state.edu  
Title: Functional Representation of Software Architecture Knowledge  
Author: John Hartman B. Chandrasekaran 
Note: hartman or  
Web: http://www.cis.ohio-state.edu/hypertext/LAIR/lair-page.html  
Address: 2015 Neil Ave., Columbus, OH 43210-1277  
Affiliation: Laboratory for Artificial Intelligence Research, Dept. of Computer and Information Science The Ohio State University,  
Abstract: Software architectures specify how high-level system components interact and behave. Architecture evolution tasks require knowing an architecture's design intentions. Existing architecture description languages (ADL's) specify architectures without reference to intentions. We describe the use of Functional Representation to capture knowledge of design intentions and their implementation in an architecture. An example functional representation is given which captures knowledge of how the Two-Phase Commit protocol is implemented in a Rapide architecture. It incorporates knowledge in domains such as transaction processing, the X/Open standard, concurrent computing, and distributed computing. The explanatory value of such representations is demonstrated with question answering and a tool design which support architecture evolution. This approach will reduce the cost of designing, evolving, and implementing architectures by improving human communication, and by providing more useful tools and environments for applications such as browsing, documentation, debugging, simulation, design verification, and rationale capture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Dean Allemang and B. Chandrasekaran. </author> <title> Functional representation and program debugging. </title> <booktitle> In PROCEEDINGS of the 6TH ANNUAL KNOWLEDGE-BASED SOFTWARE ENGINEERING CONFERENCE, </booktitle> <pages> pages 136-152. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: It has been successfully applied to a variety of tasks and devices, e.g. chemical plant failures, medical diagnosis, engineering design verification, and program debugging <ref> [2, 1, 9] </ref>. Functional Representation is organized around definitions and representations for structure, behavior, and function. Structure is the assumed bottom-level description of a device. Behavior is temporal, causal change in the device, particularly changes in its states ("how").
Reference: [2] <author> B. Chandrasekaran. </author> <title> Functional representation and causal processes. </title> <editor> In Marshall C. Yovits, editor, </editor> <booktitle> ADVANCES in COMPUTERS, </booktitle> <volume> volume 38, </volume> <pages> pages 73-143. </pages> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: It has been successfully applied to a variety of tasks and devices, e.g. chemical plant failures, medical diagnosis, engineering design verification, and program debugging <ref> [2, 1, 9] </ref>. Functional Representation is organized around definitions and representations for structure, behavior, and function. Structure is the assumed bottom-level description of a device. Behavior is temporal, causal change in the device, particularly changes in its states ("how").
Reference: [3] <author> B. Chandrasekaran and Hermann Kaindl. </author> <title> Representing functional requirements and user-system interactions. </title> <booktitle> Conference Submission, </booktitle> <year> 1996. </year>
Reference-contexts: The remainder of this paper briefly describes writing and using functional representations of executable architectures, as demonstrated in FR-Rapide and the X/Open example. Details can be found in [7]. A related paper discusses representing representing system requirements with FR <ref> [3] </ref>. 2 Rapide X/Open Example Rapide is a language and environment for constructing prototype architectures. Architectures are executed by an interpreter which creates architectural events and their dependencies. These are recorded in partially ordered sets of events called posets.
Reference: [4] <author> David Garlan and Dewayne E. Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference: [5] <author> David Garlan and Mary Shaw. </author> <title> PERSPEC--TIVES ON SOFTWARE ARCHITECTURE. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference: [6] <author> John Hartman and B. Chandrasekaran. </author> <title> Functional representation and understanding of software: Technology and application. </title> <booktitle> In 5TH ANNUAL DUAL-USE TECHNOLOGIES and APPLICATIONS CONFERENCE. </booktitle> <institution> Mohawk IEEE and Rome Lab, </institution> <month> May </month> <year> 1995. </year> <note> http://www.cis.ohio-state.edu/ hartman/publications.html. </note>
Reference-contexts: In many cases, the cost of cre 2 We are investigating FR for software as well as for architecture, e.g. by creating an FR for the plans and other knowledge in an automatic reengineering example, as described in <ref> [6] </ref> and subsequent work. Insights from architecture, program, and device understanding have helped each other. For example, we see ontological equivalence of architectures, plans, and abstract devices. ating needed understanding can be fully or partially discounted, e.g. if the understanding already exists, or if it is useful independent of FR.
Reference: [7] <author> John Hartman and B. Chandrasekaran. </author> <title> Functional representation of executable software architectures. </title> <type> Technical report, </type> <institution> Laboratory For Artificial Intelligence Research, The Ohio State University, Dept. of Computer and Information Science, </institution> <month> December 1, </month> <year> 1995. </year> <note> http://www.cis.ohio-state.edu/ hart-man/publications.html. </note>
Reference-contexts: The remainder of this paper briefly describes writing and using functional representations of executable architectures, as demonstrated in FR-Rapide and the X/Open example. Details can be found in <ref> [7] </ref>. A related paper discusses representing representing system requirements with FR [3]. 2 Rapide X/Open Example Rapide is a language and environment for constructing prototype architectures. Architectures are executed by an interpreter which creates architectural events and their dependencies. These are recorded in partially ordered sets of events called posets. <p> This involves the authoring activities in Table 2. We constructed a functional representation for X/Open Poll-Decide (PD), using these activities, as described in <ref> [7] </ref>. For example, intentions such as those in Table 1 were chosen to emphasize understanding the algorithmic implementation of the Poll-Decide procedure. Other views and FR's would be useful for other purposes. At the bottom level, X/Open events and Rapide semantics suggested language, formalism, and vocabulary. <p> PD0 has many conceptual and representational advantages over the original Rapide code. 3.3 Intermediate Levels Here the intermediate levels of the FR are briefly described to give a sense of their abstractions and FR features. Detailed descriptions are in <ref> [7] </ref>. PD1 Abstract Components PD0 is divided into components corresponding to the architecture components - TM, RM1, and RM2. This produces disjoint regions in TM for the polling and decision behaviors. To distinguish these computations, PD1 is created with separate abstract components for the polling and decision phases of TM.
Reference: [8] <author> W. Lewis Johnson and Ali Erdem. </author> <title> Interactive explanation of software systems. </title> <booktitle> In Proceedings KBSE'95 The Tenth Knowledge-Based Software Engineering Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> November 12-15, </pages> <address> 1995. Boston, Mass. </address>
Reference-contexts: Graphical hypertext navigation offers complementary qualities. We can move freely over the FR, expanding or contracting context as needed. Multiple relationships and complex CPD's are visualized from diagrams. Lewis Johnson's I-Doc is an example of answering questions and delivering explanations of programs by hypertext browsing, using the Worldwide Web <ref> [8] </ref>. We propose an explanation tool that combines features of question answering, graphical hypertext navigation, and I-Doc. The user sees the FR primarily as a hierarchy of CPD's, with controllable detail. Clicking on a function gives its justification.
Reference: [9] <author> John R. Josephson. </author> <title> Technical note on formalizing functional representation. </title> <editor> In J. Hodges, editor, </editor> <title> AAAI-94 WORKSHOP on REPRESENTING and REASONING ABOUT DEVICE FUNCTION. </title> <publisher> AAAI, </publisher> <address> 1994. Seattle, Wash-ington. </address>
Reference-contexts: It has been successfully applied to a variety of tasks and devices, e.g. chemical plant failures, medical diagnosis, engineering design verification, and program debugging <ref> [2, 1, 9] </ref>. Functional Representation is organized around definitions and representations for structure, behavior, and function. Structure is the assumed bottom-level description of a device. Behavior is temporal, causal change in the device, particularly changes in its states ("how").
Reference: [10] <author> John J. Kenney. </author> <title> EXECUTABLE FORMAL MODELS of DISTRIBUTED TRANSACTION SYSTEMS BASED ON EVENT PROCESSING. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Connections and abstract behaviors are given by exe cutable reactive rules which recognize situations in the execution and create new events in response. 2.1 Rapide X/Open Architecture X/Open is a standard for distributed transaction processing (DTP). We investigated FR-Rapide using the Rapide X/Open reference architecture created by Kenney <ref> [10, 12] </ref>. The standard and the architecture incorporate the Two-Phase Commit Protocol to ensure that transactions will be atomic, i.e. they will be completed correctly, or they will be aborted and rolled back. Imagine an X/Open architecture implemented in a bank.
Reference: [11] <author> Paul Kogut and Paul Clements. </author> <title> The software architecture renaissance. </title> <journal> CrossTalk, </journal> <volume> 7(11) </volume> <pages> 20-23, </pages> <month> November </month> <year> 1994. </year>
Reference: [12] <author> David C. Luckham, John J. Kenney, Larry M. Augustin, James Vera, Doug Bryan, and Wal-ter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Applying FR involves: 1) authoring a functional representation which represents a particular human understanding of a device, and 2) applications, in which the functional representation is used to perform needed tasks. We investigated FR for architecture using the Rapide architecture definition language <ref> [12, 13] </ref>. Rapide is used to specify an architecture's components, connections, constraints, and abstract behaviors. FR-Rapide uses FR to add intention knowledge to Rapide architectures. Figure 1 shows schematically how an FR connects abstract intentions, e.g. a requirement for the Two-Phase Commit Protocol, to the Rapide code. <p> Connections and abstract behaviors are given by exe cutable reactive rules which recognize situations in the execution and create new events in response. 2.1 Rapide X/Open Architecture X/Open is a standard for distributed transaction processing (DTP). We investigated FR-Rapide using the Rapide X/Open reference architecture created by Kenney <ref> [10, 12] </ref>. The standard and the architecture incorporate the Two-Phase Commit Protocol to ensure that transactions will be atomic, i.e. they will be completed correctly, or they will be aborted and rolled back. Imagine an X/Open architecture implemented in a bank.
Reference: [13] <author> David C. Luckham and James Vera. </author> <title> An event-based architecture definition language. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 717-734, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Applying FR involves: 1) authoring a functional representation which represents a particular human understanding of a device, and 2) applications, in which the functional representation is used to perform needed tasks. We investigated FR for architecture using the Rapide architecture definition language <ref> [12, 13] </ref>. Rapide is used to specify an architecture's components, connections, constraints, and abstract behaviors. FR-Rapide uses FR to add intention knowledge to Rapide architectures. Figure 1 shows schematically how an FR connects abstract intentions, e.g. a requirement for the Two-Phase Commit Protocol, to the Rapide code.
References-found: 13

