URL: http://www.cs.cmu.edu/~koopman/iccd96/iccd96.ps
Refering-URL: http://www.cs.cmu.edu/~koopman/iccd96/index.html
Root-URL: 
Title: Abstract  
Abstract: Many embedded systems have substantially different design constraints than desktop computing applications. No single characterization applies to the diverse spectrum of embedded systems. However, some combination of cost pressure, long life-cycle, real-time requirements, reliability requirements, and design culture dysfunction can make it difficult to be successful applying traditional computer design methodologies and tools to embedded applications. Embedded systems in many cases must be optimized for life-cycle and business-driven factors rather than for maximum computing throughput. There is currently little tool support for expanding embedded computer design to the scope of holistic embedded system design. However, knowing the strengths and weaknesses of current approaches can set expectations appropriately, identify risk areas to tool adopters, and suggest ways in which tool builders can meet industrial needs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bernard Cole, </author> <title> Architectures overlap applications, Electronic Engineering Times, </title> <address> March 20, </address> <year> 1995, </year> <pages> pp. </pages> <month> 40,64-65. </month>
Reference-contexts: 1. Introduction Approximately 3 billion embedded CPUs are sold each year, with smaller (4-, 8-, and 16-bit) CPUs dominating by quantity and aggregate dollar amount <ref> [1] </ref>. Yet, most research and tool development seems to be focussed on the needs of high-end desktop and military/aerospace embedded computing. This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult.
Reference: [2] <author> Stephanie White, Mack Alford & Julian Hotlzman, </author> <title> Systems Engineering of Computer-Based Systems. </title> <editor> In: Lawson (ed.), </editor> <booktitle> Proceedings 1994 Tutorial and Workshop on Systems Engineering of Computer-Based Systems, IEEE Computer Society, </booktitle> <address> Los Alamitos CA, </address> <year> 1994, </year> <pages> pp. 18-29. </pages>
Reference-contexts: This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., <ref> [2] </ref>, [3], [4], [5], [6]) and the related field of hardware/software codesign (e.g., [7]). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design.
Reference: [3] <institution> Design Automation for Embedded Systems: </institution> <note> an international journal, Kluwer Academic, ISSN 0929-5585. </note>
Reference-contexts: This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., [2], <ref> [3] </ref>, [4], [5], [6]) and the related field of hardware/software codesign (e.g., [7]). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design. They also present design challenges encountered in the course of designing several real systems.
Reference: [4] <institution> Embedded Systems Programming, Miller Freeman, </institution> <address> San Fran-cisco, ISSN 1040-3272. </address>
Reference-contexts: This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., [2], [3], <ref> [4] </ref>, [5], [6]) and the related field of hardware/software codesign (e.g., [7]). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design. They also present design challenges encountered in the course of designing several real systems.
Reference: [5] <author> Daniel D. Gajski, Frank Vahid, Sanjiv Narayan & Jie Gong, </author> <title> Specification and Design of Embedded Systems, </title> <publisher> PTR Pren-tice Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1994. </year>
Reference-contexts: This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., [2], [3], [4], <ref> [5] </ref>, [6]) and the related field of hardware/software codesign (e.g., [7]). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design. They also present design challenges encountered in the course of designing several real systems.
Reference: [6] <author> Jack Ganssle, </author> <title> Art of programming Embedded Systems, </title> <publisher> Academic Press, </publisher> <address> San Diego, </address> <year> 1992. </year>
Reference-contexts: This paper seeks to expand the area of discussion to encompass a wide range of embedded systems. The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., [2], [3], [4], [5], <ref> [6] </ref>) and the related field of hardware/software codesign (e.g., [7]). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design. They also present design challenges encountered in the course of designing several real systems.
Reference: [7] <editor> Don Thomas & Rolf Ernst (eds.), </editor> <booktitle> Proceedings: Fourth International Workshop on Hardware/Software CoDesign, IEEE Computer Society, </booktitle> <address> Los Alamitos CA, </address> <year> 1996. </year>
Reference-contexts: The extreme diversity of embedded applications makes generalizations difficult. Nonetheless, there is emerging interest in the entire range of embedded systems (e.g., [2], [3], [4], [5], [6]) and the related field of hardware/software codesign (e.g., <ref> [7] </ref>). This paper and the accompanying tutorial seek to identify significant areas in which embedded computer design differs from more traditional desktop computer design. They also present design challenges encountered in the course of designing several real systems.
Reference: [8] <author> David Patterson & John Hennessy, </author> <title> Computer Architecture: a Quantitative Approach, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo CA, </address> <year> 1990. </year>
Reference-contexts: Desktop computing design methodology and tool support is to a large degree concerned with initial design of the digital system itself. To be sure, experienced designers are cognizant of other aspects, but with the recent emphasis on quantitative design (e.g., <ref> [8] </ref>) life-cycle issues that arent readily quantified could be left out of the optimization process. However, such an approach is insufficient to create embedded systems that can effectively compete in the marketplace.
Reference: [9] <author> Philip Koopman, </author> <title> Perils of the PC Cache, Embedded Systems Programming, </title> <month> May </month> <year> 1993, </year> <pages> 6(5) 26-34. </pages>
Reference-contexts: Most embedded systems have a significant reactive component. Design challenge: Worst case design analyses without undue pessimism in the face of hardware with statistical performance charac teristics (e.g., cache memory <ref> [9] </ref>). 3.2. Small size, low weight Many embedded computers are physically located within some larger artifact. Therefore, their form factor may be dictated by aesthetics, form factors existing in pre-electronic versions, or having to fit into interstices among mechanical components.
Reference: [10] <author> Shem-Tov Levi & Ashok Agrawala, </author> <title> Fault Tolerant System Design, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: In mission-critical applications such as aircraft flight control, severe personal injury or equipment damage could result from a failure of the embedded computer. Traditionally, such systems have employed multiply-redundant computers or distributed consensus protocols in order to ensure continued operation after an equipment failure (e.g., <ref> [10] </ref>, [11]) However, many embedded systems that could cause per sonal or property damage cannot tolerate the added cost of redundancy in hardware or processing capacity needed for traditional fault tolerance techniques. This vulnerability is often resolved at the system level as discussed later.
Reference: [11] <author> Daniel Siewiorek & Robert Swarz, </author> <title> Reliable Computer Systems: design and evaluation (2nd edition), </title> <publisher> Digital Press, </publisher> <address> Burlington MA, </address> <year> 1992. </year>
Reference-contexts: In mission-critical applications such as aircraft flight control, severe personal injury or equipment damage could result from a failure of the embedded computer. Traditionally, such systems have employed multiply-redundant computers or distributed consensus protocols in order to ensure continued operation after an equipment failure (e.g., [10], <ref> [11] </ref>) However, many embedded systems that could cause per sonal or property damage cannot tolerate the added cost of redundancy in hardware or processing capacity needed for traditional fault tolerance techniques. This vulnerability is often resolved at the system level as discussed later.
Reference: [12] <author> Nancy Leveson, Safeware: </author> <title> system safety and computers, </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1994. </year>
Reference: [13] <institution> Georgette Demes et al., The Engineering Design Research Center of Carnegie Mellon University, </institution> <note> Proceedings of the IEEE, 81(1) 10-24, </note> <month> January </month> <year> 1993. </year>
References-found: 13

