URL: http://avalon.cs.ucdavis.edu/davisreas/mont94.ps
Refering-URL: http://avalon.cs.ucdavis.edu/davisreas/
Root-URL: http://www.cs.ucdavis.edu
Email: &lt;lastname&gt;@cs.ucdavis.edu  
Title: Towards A Practical Verification Environment for Concurrent Programs  
Author: Robert J. Shaw Ronald A. Olsson Cui Zhang 
Date: August 24, 1994  
Affiliation: University of California, Davis  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. R. Andrews. </author> <title> Concurrent Programming: </title> <booktitle> Principles and Practice. </booktitle> <address> Benjamin/Cummings, </address> <year> 1991. </year>
Reference-contexts: True proof maintenance, a feature which is crucial to long-term software projects, may be facilitated through this approach. In our programming logic, as in <ref> [1] </ref>, the SR programmer views each communication channel as modeled by a list object, and a prefix of this list which respectively represent all the messages sent into the channel from a given process and those that have been received thus far in the computation.
Reference: [2] <author> G. R. Andrews and R. A. Olsson. </author> <title> The SR Programming Language: Concurrency in Practice. </title> <publisher> The Ben-jamin/Cummings Publishing Co., </publisher> <address> Redwood City, CA., </address> <year> 1993. </year>
Reference-contexts: Section 4 concludes. Although we will strive for general methods that apply to most theorem-provers and imperative-style languages, these early efforts will use the Cambridge Higher-Order Logic (HOL) system as the underlying formal system [4], and the SR concurrent programming language <ref> [2] </ref>. Throughout this paper, the term "SR" may mean either the programming language, or the language augmented with annotations. Likewise, the terms "HOL" and "theorem-prover" will refer to either the mathematical formal system or to the software system which mechanizes it.
Reference: [3] <author> W. Bevier and L. Smith. </author> <title> A mathematical model of the Mach kernel: atomic actions and locks. </title> <type> Technical Report 89, </type> <institution> Computational Logic, Inc., Austin, TX, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: Projects such as the Davis Silo and the CLI work with kernels <ref> [3] </ref> support this claim. Transferring this technology to the programmer so that the complexity becomes manageable and maintainable is now the challenge before us.
Reference: [4] <author> M. J. C. Gordon and T. F. Melham. </author> <title> Introduction to HOL: A Theorem Proving Environment for Higer Order Logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Section 4 concludes. Although we will strive for general methods that apply to most theorem-provers and imperative-style languages, these early efforts will use the Cambridge Higher-Order Logic (HOL) system as the underlying formal system <ref> [4] </ref>, and the SR concurrent programming language [2]. Throughout this paper, the term "SR" may mean either the programming language, or the language augmented with annotations. Likewise, the terms "HOL" and "theorem-prover" will refer to either the mathematical formal system or to the software system which mechanizes it.
Reference: [5] <author> J. Joyce, N. Day, and M. Donat. </author> <title> S: A machine-readable specification notation based on higher order logic. In HOL 1994: International Conference on Higher Order Logic Theorem Proving and its Applications, </title> <note> to appear, </note> <month> September </month> <year> 1994. </year>
Reference-contexts: Such a policy is good software engineering anyway, and would likely interface well with software tools for producing design documentation and perhaps requirements acquisition as well, such as recent work at UBC <ref> [5] </ref>, but its primary purpose is to shape the overall proof into a predictable structure. Expressive power is not lost by this requirement, but experiments by hand indicate that automated deduction potential is gained.
Reference: [6] <author> S.S. Owicki and D. Gries. </author> <title> Verifying properties of parallel programs: an axiomatic approach. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 279-285, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: These meanings will be clear in context. fl This work is sponsored in part by the US Department of Defense University Research Program 1 2 System Description 2.1 The Underlying Concurrent Programming Logic Hoare-style programming logics <ref> [6] </ref>, and their syntactic shorthand known as proof outlines have long been studied, and more recently, embedded within mechanized logic systems such as HOL [9].
Reference: [7] <author> C. Rich and R. Waters. </author> <title> The Programmer's Apprentice. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: It provides them access to the tremendous rigor and thoroughness of a theorem-prover, but relieves them of the complexity of interacting directly with such a system. Upon completion of this two-year project, we hope to achieve an environment similar to the Programmer's Apprentice <ref> [7] </ref>. Experience gained from the Davis Silo Project [8], an ongoing formal proof effort to verify a small distributed system in several layers ranging from hardware to concurrent application programs, has shaped our beliefs on the applicability of modern, sophisticated theorem-provers to professional software engineering.
Reference: [8] <author> C. Zhang, R. Shaw, M. R. Heckman, G. D. Benson, M. Archer, K. Levitt, and R. A. Olsson. </author> <title> Towards a formal verification of a secure distributed system and its applications. </title> <booktitle> In The 17th National Computer Security Conference, to appear, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Upon completion of this two-year project, we hope to achieve an environment similar to the Programmer's Apprentice [7]. Experience gained from the Davis Silo Project <ref> [8] </ref>, an ongoing formal proof effort to verify a small distributed system in several layers ranging from hardware to concurrent application programs, has shaped our beliefs on the applicability of modern, sophisticated theorem-provers to professional software engineering.
Reference: [9] <author> C. Zhang, R. Shaw, R. Olsson, K. Levitt, M. Archer, M. Heckman, and G. Benson. </author> <title> Mechanizing a programming logic for the concurrent programming language microsr in HOL. In Higher Order Logic theorem Proving and Its Application, </title> <booktitle> number 780 in Lecture Notes in Computer Science, </booktitle> <pages> pages 29-42. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 5 </month>
Reference-contexts: is sponsored in part by the US Department of Defense University Research Program 1 2 System Description 2.1 The Underlying Concurrent Programming Logic Hoare-style programming logics [6], and their syntactic shorthand known as proof outlines have long been studied, and more recently, embedded within mechanized logic systems such as HOL <ref> [9] </ref>. To fully decorate a concurrent program with first-order logic terms so that it represents a completely formal derivation within the Hoare logic is much simpler than reasoning directly from the specification of the language semantics within HOL.
References-found: 9

