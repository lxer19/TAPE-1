URL: http://www.cs.rpi.edu/tr/88-27.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: http://www.cs.rpi.edu
Title: THE IMPACT OF INHERITANCE ON SECURITY IN OBJECTORIENTED DATABASE SYSTEMS  
Author: David L. Spooner 
Address: Troy, New York 12180  
Affiliation: Computer Science Department Rensselaer Polytechnic Institute  
Abstract: The objectoriented programming paradigm is becoming a popular development tool for large complex systems. This is happening for a variety of reasons, such as the richer and more natural data modeling capabilities of the object paradigm, its ability to capture application semantics, and the support it provides for rapid pro-totyping of systems. A prominent feature of the object paradigm is inheritance. In fact, it is this feature of the object paradigm that leads to many of its advantages. Because the object paradigm is new, little attention has yet been given to security considerations. The purpose of this paper is to point out that while inheritance offers many advantages, it also creates several problems in designing a security model for a general-purpose objectoriented database system. As a result, careful consideration must be given to defining the semantics of inheritance when security is a concern.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Goldberg and D. Robson, </author> <title> Smalltalk-80 The Language and its Implementation , Addison Wesley, </title> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: 1. Introduction The objectoriented programming paradigm was popularized by the Smalltalk-80 programming language <ref> [1] </ref>. Since then, numerous other objectoriented languages have been developed. Examples include C++ [2] and Objective C [3].
Reference: [2] <author> B. Stroustrup, </author> <title> The C++ Programming Language, Addition Wesley, </title> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: 1. Introduction The objectoriented programming paradigm was popularized by the Smalltalk-80 programming language [1]. Since then, numerous other objectoriented languages have been developed. Examples include C++ <ref> [2] </ref> and Objective C [3]. The object paradigm offers a programming environment with rich support for development of complex data structures, the ability to capture much of the semantics of an application, and a programming style conducive to rapid prototyping and reuse of software modules.
Reference: [3] <author> B. Cox, </author> <title> ObjectOriented Programming: An Evolutionary Approach , Addison Wesley, </title> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: 1. Introduction The objectoriented programming paradigm was popularized by the Smalltalk-80 programming language [1]. Since then, numerous other objectoriented languages have been developed. Examples include C++ [2] and Objective C <ref> [3] </ref>. The object paradigm offers a programming environment with rich support for development of complex data structures, the ability to capture much of the semantics of an application, and a programming style conducive to rapid prototyping and reuse of software modules. An important feature of the object paradigm is inheritance.
Reference: [4] <author> K. Dittrich, </author> <title> "Object-Oriented Database Systems: the Notions and the Issues", </title> <booktitle> Proc. First International Workshop on ObjectOriented Database Systems, </booktitle> <address> Pacific Grove, CA., </address> <publisher> IEEE Computer Science Press, </publisher> <month> September, </month> <year> 1986. </year>
Reference-contexts: One real-world object is modeled as one database object with a complex internal structure. Definition of structural and operational semantics for the objects in the database is often supported. And, many times, the notion of inheritance is included. Dittrich <ref> [4] </ref> has defined a classification scheme for objectoriented database systems. A system is said to be structurally objectoriented if it is capable of defining and manipulating objects with complex internal structure.
Reference: [5] <author> C. Meadows and C. Landwehr, </author> <title> "Designing a Trusted Application Using an ObjectOriented Data Model", to appear in Recent Directions in Database Security, </title> <booktitle> RADC Workshop in Database Security, </booktitle> <year> 1988. </year>
Reference-contexts: This design may then be implemented using any database tools, objectoriented or not. An example of this approach is the design for the Secure Military Message System discussed by Meadows and Landwehr <ref> [5] </ref>. The second approach is to use the objectoriented paradigm to define the security model for the database system itself. This has been done by Biskup and Graf [6] in defining the security model for the DORIS information system. <p> It is assumed that there is a rule defined to resolve the conflict of inheriting the name instance variable from both parents. 3. Security Considerations Several features of the objectoriented paradigm for database management make it attractive from a security point of view <ref> [5] </ref>. First, an initial layer of protection is provided by the fact that all data is stored as values for instance variables that are encapsulated inside objects and available only through the methods defined for the object's class. <p> Future research is needed to define the options, and to integrate these options into a coherent security model. These problems may be solved for a particular application by performing a careful design that avoids them <ref> [5] </ref>. They are more serious when considering the design of a security model for a general-purpose objectoriented database system, however. <p> Mandatory access control requirements for trusted computer systems are defined in the "Orange Book" [10]. Almost no work to date has addressed mandatory access controls in a general-purpose objectoriented database system. Meadows and Landwehr <ref> [5] </ref> give a brief description of how the object paradigm might be used to implement a trusted application, and some preliminary work is being done at SRI [11]. <p> As with discretionary controls, the object paradigm offers potential advantages to specification of mandatory access controls due to the richer and more natural data model for modeling the "real-world". However, as pointed out in <ref> [5] </ref>, for trusted applications, it will be necessary to trust the inheritance mechanism. Verification of the inheritance mechanism may not be easy.
Reference: [6] <author> J. Biskup and W. Graf, </author> <title> "Analysis of the Privacy Model for the Information System DORIS", </title> <booktitle> Proc. of the 1988 Workshop on Database Security, </booktitle> <institution> Kingston, Ontario, Canada, sponsored by IFIP WG 11.3 and Queen's University, </institution> <month> October, </month> <year> 1988. </year>
Reference-contexts: An example of this approach is the design for the Secure Military Message System discussed by Meadows and Landwehr [5]. The second approach is to use the objectoriented paradigm to define the security model for the database system itself. This has been done by Biskup and Graf <ref> [6] </ref> in defining the security model for the DORIS information system. Lastly, the object paradigm can be exploited as the data model for a general-purpose database system.
Reference: [7] <author> F. Rabitti, D. Woelk and W. Kim, </author> <title> "Model of Authorization for ObjectOriented and Semantic Databases", </title> <type> MCC Tech. Report ACA-ST-327-87, </type> <institution> Systems Technology Program, MCC, Austin, TX, </institution> <year> 1987. </year>
Reference-contexts: Discretionary Access Controls Discretionary access controls are concerned with controlling the way individual users manipulate and modify individual objects. Several research efforts have addressed discretionary access controls for composite objects in structurally objectoriented systems. Rabitti, Woelk, and Kim <ref> [7] </ref> discuss a formal model for authorization in the ORION objectoriented database system. They extend existing models of authorization for relational database systems in two ways. First, they define the notion of implicit authorization allowing the system to deduce new authorizations from prior authorizations explicitly stored in the system.
Reference: [8] <author> K. Dittrich, M. Hartig and H. Pfefferle, </author> <title> "Discretionary Access Control in Structurally ObjectOriented Database Systems", </title> <booktitle> Proc. of the 1988 Workshop on Database Security, </booktitle> <institution> Kingston, Ontario, Canada, sponsored by IFIP WG 11.3 and Queen's University, </institution> <month> October, </month> <year> 1988. </year>
Reference-contexts: First, they define the notion of implicit authorization allowing the system to deduce new authorizations from prior authorizations explicitly stored in the system. Second, in conjunction with implicit authorizations, they extend the authorization model to cover composite objects. Dittrich, Hartig, and Pfefferle <ref> [8] </ref> discuss a discretionary access control system for the DAMOKLES objectoriented database system. Their model is similar to the first in that it attempts to deal with propagation of access privileges from one object to another to handle authorization for composite objects.
Reference: [9] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack, "HYDRA: </author> <title> The Kernel of a Multiprocessor Operating System", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 17, No. 6, </volume> <month> June, </month> <year> 1974. </year>
Reference-contexts: These methods can be used to enforce security requirements for the data in the objects using techniques similar to those used in Hydra <ref> [9] </ref> and other capability-based and abstract data type-based systems. In addition, the enriched semantic modeling capabilities of the object paradigm should allow the "real-world" and its security requirements to be modeled more naturally in the database.
Reference: [10] <institution> Department of Defense Trusted Computer System Evaluation Criteria , Department of Defense, National Computer Security Center, DOD 5200.28-STD, </institution> <month> December, </month> <year> 1985. </year>
Reference-contexts: Mandatory access control requirements for trusted computer systems are defined in the "Orange Book" <ref> [10] </ref>. Almost no work to date has addressed mandatory access controls in a general-purpose objectoriented database system. Meadows and Landwehr [5] give a brief description of how the object paradigm might be used to implement a trusted application, and some preliminary work is being done at SRI [11]. <p> Should B be allowed to inherit instance variables from A? This situation could be interpreted as a flow of information from a higher security level (A) to a lower one (B). Interpreted this way, it violates the Orange Book specifications for trusted secure systems <ref> [10] </ref>. Object Class A Object Class B instance variable: v Inherit v Higher Lower Inheritance Hierarchy Security Level A potential write-down of information from a higher security level to a lower level. <p> This can be interpreted as a write-down to a lower classification level, again violating the specifications of the Orange Book for trusted secure systems <ref> [10] </ref>. Since mandatory access controls require any user who accesses objects in class B to have a classification level at least as high as B's, such cases are possible. Both situations discussed above can occur in a general-purpose objectoriented database system.
Reference: [11] <author> T. Lunt, </author> <title> Private communication, </title> <booktitle> IFIP 11.3 WG Workshop on Database Security, </booktitle> <address> Kingston, Ontario, Canada, </address> <month> October, </month> <year> 1988. </year>
Reference-contexts: Almost no work to date has addressed mandatory access controls in a general-purpose objectoriented database system. Meadows and Landwehr [5] give a brief description of how the object paradigm might be used to implement a trusted application, and some preliminary work is being done at SRI <ref> [11] </ref>. As with discretionary controls, the object paradigm offers potential advantages to specification of mandatory access controls due to the richer and more natural data model for modeling the "real-world". However, as pointed out in [5], for trusted applications, it will be necessary to trust the inheritance mechanism.
Reference: [12] <author> K. Law and D. Spooner, </author> <title> "Abstraction Database Concept for Engineering Modeling", </title> <journal> Engineering with Computers, </journal> <volume> Vol. 2, </volume> <pages> pp. 79-84, </pages> <year> 1987. </year>
Reference-contexts: The richer data semantics modeled with the object paradigm make it easier to identify and specify integrity policies to be enforced. And, inheritance can be used to distribute an integrity policy defined for one object class to all of its subclasses. Law and Spooner <ref> [12] </ref> describe one approach taking advantage of the object paradigm for integrity enforcement within engineering database systems. However, as in the case of discretionary and mandatory access controls, inheritance creates other problems.
References-found: 12

