URL: http://www.cs.nmsu.edu/lldap/download/web.ps.Z
Refering-URL: http://www.cs.nmsu.edu/lldap/prj_lp/web/
Root-URL: http://www.cs.nmsu.edu
Email: fepontell,guptag@cs.nmsu.edu  
Title: W-ACE: A Logic Language for Intelligent Internet Programming  
Author: Enrico Pontelli Gopal Gupta 
Date: May 28, 1997  
Address: Las Cruces, NM 88003  
Affiliation: Lab. for Logic and Databases New Mexico State University  
Abstract: The development of the World Wide Web (WWW) has been considerably delayed due to the excessive complexity of developing advanced and intelligent applications for the Internet. An average application may require the use of different languages, an in-depth understanding of various communication protocols and low-level communication mechanisms, etc. In this paper we propose a logic programming system, called W-ACE, extended with various features to support natural, effective, and efficient development of Internet tools. The nature of the constructs introduced in the language makes it particularly suitable to support intelligent Internet applications (knowledge-based systems, agents, etc.). W-ACE covers various issues in supporting knowledge-based handling of the World Wide Web, allowing structured and constraint-based management of WWW information, passive and active view of WWW, as well as a powerful support for concurrent applications. The resulting system offers a general and unified framework for Internet programming, in which the flexibility and high abstraction of logic programming is coupled with general Internet-related mechanisms. Various examples of complex intelligent applications are presented, to underline the simplicity and the power of the proposed ideas. Keywords: World Wide Web, Logic Programming, Constraint Programming, Modal Logic. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Andrews et al. </author> <title> Serving Information to the Web with Hyper-G. </title> <type> Tech. Rep., </type> <institution> Graz Univ. of Technology, </institution> <year> 1996. </year>
Reference-contexts: To our knowledge the concept has not been extensively explored within the framework of languages for Internet/WWW-development. The concept has been successfully used in some domain-specific applications <ref> [1, 36] </ref>. In W-ACE, pages (i.e., W-ACE HTML trees) are organized into active graphs. Each node of the graph is an HTML document. An edge between two nodes denotes the accessibility relations between the two documents (existence of a link from one page to the other). Edges are directed.
Reference: [2] <author> J.W. Bang and G. Gupta. </author> <title> A Logic Programming System for Diagnosing Acid-base Disorders. </title> <booktitle> Conf. on Practical Applications of Prolog, </booktitle> <year> 1997. </year>
Reference-contexts: Szeredi suggested the use of the Aurora Or-Parallel system to handle this situation, preserving the declarative nature of the program and with a good level of efficiency. W-ACE for Remote Diagnosis (Example): The application we considered is an intelligent system for the diagnosis of Acid-base disorders <ref> [2] </ref>. The system was originally developed in standard Prolog and was capable of supporting a single interactive user session. Purpose of the program is to acquire successive details of data from the user in order to produce one or more medical diagnosis.
Reference: [3] <author> P. Bonnet et al. </author> <title> Towards ECLiPSe Agents on the Internet. </title> <booktitle> Workshop on Logic Progr. Tools for Internet, </booktitle> <year> 1996. </year>
Reference-contexts: On the other hand, this trend of research shows that the focus has been mainly on the lowest and highest level issues for supporting Internet software (communication and high-level applications). It is opinion of the authors, as well as a growing concern in the community <ref> [3, 8] </ref>, that not enough effort has been placed in filling the gap between these two levels. This gap is mainly caused by the lack of an adequate programming support for the development of Internet related applications. <p> Data extracted from the Internet is seen as unstructured sequences of characters and the management of the structuring is completely left to the programmer. Java itself gives little support in this direction. Few proposals have been made to overcome part of this problem <ref> [8, 3, 38] </ref>, by developing libraries which offer some abstraction for data organization|notable is the case of PiLLoW [8], which allows for the encoding of an HTML document as a Prolog list of terms (each describing a tagged HTML element). <p> Most current proposals in the literature regarding tools for WWW/Internet programming are within this layer of operation. The power of using logic programming to handle object layer applications has already been pointed out in some recent proposals <ref> [8, 3, 38] </ref>. W-ACE aims at providing the user with a language which allows a more natural management of the structured information deriving from web processing. We will discuss in the next section the additional built-ins that are going to be provided to interact with Internet. <p> TCP connections are used to support also HTTP communications. HTML: At the higher level, information acquired from HTTP communications is typically encoded as documents (typically HTML documents). Various existing proposals do not supply any representation for HTML documents. E.g., Eclipse server <ref> [3] </ref> and Amzi WebServer [38] require the user to deal with explicit HTML, typically coded as a string of characters. 5 PiLLoW [8] proposed (to our knowledge) for the first time the idea of handling HTML documents as Prolog structures. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications <ref> [23, 8, 40, 38, 3] </ref>; similar attempts are also under exploration in the area of functional programming [5, 24]. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [4] <author> M. Bugliesi et al. </author> <title> Modularity in Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> Vol. </volume> <month> 19/20, </month> <year> 1994. </year>
Reference-contexts: What we would really like to achieve is extending the logic language with a set of operators that allow various operations on programs <ref> [4] </ref>. Logic programs are treated as sets of clauses, and operators to perform union, intersection, etc. of programs are defined. <p> Additionally, some of the operators that are required 10 in the context of Internet modules manipulation are not present in the works proposed in the literature <ref> [4] </ref>; thus, their structure, semantics, and implementation need to be carefully studied. More precisely, we would like to have support to create logical theories, manipulate them, and reason on them. <p> the moment we will focus only on the following operators for manipulating logic theories: (i) the meta-predicate theory is available to access the definition of a theory from its name. (ii) logic theories can be combined either by taking their simple union ([), or by using an overriding union () <ref> [4] </ref>, where, in presence of definitions of the same predicate in different theories, one of them is kept as preferred definition, while the others are discarded. (iii) the operator (fl) is used to protect a theory's predicates from being affected by the definitions coming from other theories (i.e., we want to <p> This is equivalent for various aspects to the notion of embedded implication which has been studied in the context of modular programming <ref> [4] </ref>. The interpretation given to G@T is simply that of attempting a proof of G in a the current logical context (defined later) enriched with the content of the theory T . <p> Observe that, in order to guarantee flexibility in the language, we need to allow nesting of the @ operator|i.e., composition of multiple theories. W-ACE supports <ref> [4] </ref> a dynamic scoping of predicates|thus, the set of clauses available to solve a certain goal can only be determined by following the trace of the execution. Static scoping constructs for modular logic programming have been studied [4], but it is our opinion that they are not sufficiently flexible to tackle <p> W-ACE supports <ref> [4] </ref> a dynamic scoping of predicates|thus, the set of clauses available to solve a certain goal can only be determined by following the trace of the execution. Static scoping constructs for modular logic programming have been studied [4], but it is our opinion that they are not sufficiently flexible to tackle the issues of handling W-ACE theories.
Reference: [5] <author> J. Buhler. </author> <title> A Language-structured Approach to Networking Software. </title> <type> Tech. Rep., </type> <institution> Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: Nevertheless, we can argue about why it is worth to pursue different approaches. Scripting languages are notoriously slow, inherently sequential, and unsuitable for activities more complex than simple file and data filtering. For these and other reasons [31], we decided to continue the proposals made by various researchers <ref> [8, 5] </ref> aiming at providing language extensions capable of integrating CGI scripting with main applications written in high-level languages. W-ACE provides a simple interface for CGI-scripts. Any W-ACE program can be used as a CGI script. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications [23, 8, 40, 38, 3]; similar attempts are also under exploration in the area of functional programming <ref> [5, 24] </ref>. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [6] <author> P. Bruscoli, A. Dovier, E. Pontelli, G. Rossi. </author> <title> Negation and Intensional Sets in CLP. </title> <booktitle> Int. Conference on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The first domain we consider, aimed at allowing a higher degree of abstraction, is the Set domain. Sets are unordered collections of distinct elements. In W-ACE we propose the integration of a very general set domain (as in <ref> [12, 6] </ref>) as well as the notion of multiset [31]. This domain introduces both extensional (e.g, fa; b; 1; f (a; X)g) and intensional (e.g., fx : even (X) ^ 0 X M g) definitions of sets.
Reference: [7] <author> P. Brusilovsky. </author> <title> Methods and Techniques of Adaptive Hy-permedia. </title> <booktitle> In Proc. of UMUAI, </booktitle> <year> 1996. </year>
Reference-contexts: Encoding HTML documents as part of programs, and allowing self-modification translates to the possibility of having HTML documents that can adapt themselves depending on the course of action. This is of primary importance to effectively tackle issues like adaptive navigation <ref> [7] </ref>, user modeling, automatic learning. The principle of dynamic programs can be applied as well to arbitrary computing components of the Internet applications.
Reference: [8] <author> D. Cabeza et al. </author> <title> The PiLLoW/CIAO Library for In-tenet/WWW Programming. </title> <booktitle> Workshop on Logic Progr. Tools for Internet, </booktitle> <year> 1996. </year>
Reference-contexts: On the other hand, this trend of research shows that the focus has been mainly on the lowest and highest level issues for supporting Internet software (communication and high-level applications). It is opinion of the authors, as well as a growing concern in the community <ref> [3, 8] </ref>, that not enough effort has been placed in filling the gap between these two levels. This gap is mainly caused by the lack of an adequate programming support for the development of Internet related applications. <p> Data extracted from the Internet is seen as unstructured sequences of characters and the management of the structuring is completely left to the programmer. Java itself gives little support in this direction. Few proposals have been made to overcome part of this problem <ref> [8, 3, 38] </ref>, by developing libraries which offer some abstraction for data organization|notable is the case of PiLLoW [8], which allows for the encoding of an HTML document as a Prolog list of terms (each describing a tagged HTML element). <p> Java itself gives little support in this direction. Few proposals have been made to overcome part of this problem [8, 3, 38], by developing libraries which offer some abstraction for data organization|notable is the case of PiLLoW <ref> [8] </ref>, which allows for the encoding of an HTML document as a Prolog list of terms (each describing a tagged HTML element). <p> Limited support has been offered by the current tools in trying to hide the complex issues of communication and data structures, with few exceptions like Java (support for networking and HTTP) and libraries like PiLLoW <ref> [8] </ref> (HTML structuring) and Lib-WWW [43] (HTTP interface). Furthermore, traditional languages lack some of the features that are seen as fundamental for the next generation of Internet applications. <p> Most current proposals in the literature regarding tools for WWW/Internet programming are within this layer of operation. The power of using logic programming to handle object layer applications has already been pointed out in some recent proposals <ref> [8, 3, 38] </ref>. W-ACE aims at providing the user with a language which allows a more natural management of the structured information deriving from web processing. We will discuss in the next section the additional built-ins that are going to be provided to interact with Internet. <p> Various existing proposals do not supply any representation for HTML documents. E.g., Eclipse server [3] and Amzi WebServer [38] require the user to deal with explicit HTML, typically coded as a string of characters. 5 PiLLoW <ref> [8] </ref> proposed (to our knowledge) for the first time the idea of handling HTML documents as Prolog structures. W-ACE represents (part of an) HTML document as a tree structure (or, equivalently, as a logic term). <p> Nevertheless, we can argue about why it is worth to pursue different approaches. Scripting languages are notoriously slow, inherently sequential, and unsuitable for activities more complex than simple file and data filtering. For these and other reasons [31], we decided to continue the proposals made by various researchers <ref> [8, 5] </ref> aiming at providing language extensions capable of integrating CGI scripting with main applications written in high-level languages. W-ACE provides a simple interface for CGI-scripts. Any W-ACE program can be used as a CGI script. <p> Lightweight Databases: The intuition behind lightweight data-bases is to view HTML documents as small databases, and allow clients to act as intelligent (e.g., deductive) query solver over these databases. The concept, introduced by Dobson [11] and generalized by others <ref> [23, 8] </ref>, can be implemented with extreme ease in the active client model offered by W-ACE. The database information are stored in HTML documents, as a sequence of facts (for example). Once a page is loaded, it is turned into a W-ACE theory, against which the client can pose queries. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications <ref> [23, 8, 40, 38, 3] </ref>; similar attempts are also under exploration in the area of functional programming [5, 24]. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [9] <author> B.F. Chellas. </author> <title> Modal Logic: an Introduction. </title> <publisher> Cambridge University Press, </publisher> <year> 1980. </year>
Reference-contexts: The advantage is that we can use the HTML graph as a representation of the accessibility relation used to infer truth in a modal structure. Modal Structure: a typical modal logic programming language extends the traditional logic language with two new components: (1) modal interpretations <ref> [9] </ref> are composed by a set 11 of standard models, called worlds, connected via an accessibility relation.
Reference: [10] <author> D.E. Comer et al. </author> <title> Internetworking with TCP/IP Volume III.. </title> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: The best example of this is given by automatic code patching (applications which automatically connect to servers to download upgrades and patches). Stateful Computations: A state is <ref> [10] </ref> "Information that a server maintains about the status of ongoing interactions with clients".
Reference: [11] <author> S. Dobson et al. </author> <title> Towards Improving Automation in the World Wide Web. </title> <type> Tech. Rep., </type> <institution> Rutherford Appleton Lab., </institution> <year> 1995. </year>
Reference-contexts: Active Layer: The second layer represents the possibility of handling the web pages as programs. Thus they are not anymore passive objects of computation, but they become dynamic and active computations themselves. This follows the lines of proposals like lightweight databases <ref> [11] </ref> and LogicWeb [23]. <p> The dynamicity of the Internet component can be either: * compositional: the component is parameterized on some modules, which are meant to be generated during the computation. The best example is that of lightweight databases <ref> [11] </ref>, in which HTML documents contains small databases which are asserted in the client domain. * interactive: the component is instantiated during a session (e.g., during one interactive session with a browsing client) and self-modifies itself during such session. The modifications disappear once the session is completed. <p> Lightweight Databases: The intuition behind lightweight data-bases is to view HTML documents as small databases, and allow clients to act as intelligent (e.g., deductive) query solver over these databases. The concept, introduced by Dobson <ref> [11] </ref> and generalized by others [23, 8], can be implemented with extreme ease in the active client model offered by W-ACE. The database information are stored in HTML documents, as a sequence of facts (for example).
Reference: [12] <author> A. Dovier, E. Omodeo, E. Pontelli, G. Rossi. flogg: </author> <title> a logic programming language with finite sets. </title> <journal> In Journal of Logic Programming, </journal> <volume> Vol. 28, No. 1, </volume> <year> 1996. </year>
Reference-contexts: The first domain we consider, aimed at allowing a higher degree of abstraction, is the Set domain. Sets are unordered collections of distinct elements. In W-ACE we propose the integration of a very general set domain (as in <ref> [12, 6] </ref>) as well as the notion of multiset [31]. This domain introduces both extensional (e.g, fa; b; 1; f (a; X)g) and intensional (e.g., fx : even (X) ^ 0 X M g) definitions of sets.
Reference: [13] <author> P. Duchastel. </author> <title> Integrating Hypermedia into Intelligent Tutoring. Hypermedia Courseware, </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year> <month> 17 </month>
Reference-contexts: This can range from changing the structure of the HTML tree during the browsing process (e.g., collapse the HTML tree), to performing more extensive modifications, like in the Adaptive Hyper-media Systems <ref> [13] </ref>. We can distinguish two levels of adaptivity: * adaptive presentation: the content of the HTML tree is changed depending on the user model.
Reference: [14] <author> F. Espinoza and K. Hook. </author> <title> An Interactive WWW Inter--face to an Adaptive Information System. </title> <booktitle> Proc. of User Modeling, </booktitle> <year> 1996. </year>
Reference-contexts: The adaptivity of the scheme can be varied also by accessing separate databases of links. Adaptation can be performed by keeping a user model [29]. Limited applications of these ideas have been realized in some AI projects <ref> [14] </ref>, capable of performing automatic generation of Web pages. 3.5 Concurrency and Parallelism Parallelism and concurrency are two separate con 12 cepts. Parallelism indicates ability of performing par-allel execution of different components of the computation. Thus, its main aim is efficiency.
Reference: [15] <author> R. Fielding et al. </author> <title> Hypertext Transfer Protocol - HTTP/1.1. Request for Comment: </title> <year> 2068, </year> <month> January </month> <year> 1997. </year>
Reference-contexts: Low-level Communication: W-ACE provides support for low level interprocess communication based on sockets. The built-ins supplied are a generalization of the C-library predicates used to perform socket-based communication. Additionally, W-ACE provides a simple implementation of the HTTP protocol <ref> [15] </ref>. This is composed of a simple message interface together with various built-ins to build and decode HTTP message, and control the protocol's options (e.g., cache, time-out).
Reference: [16] <author> I. Foster. </author> <title> Designing and Building Parallel Programs. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This trend is likely to change, as larger and more complex applications will be hooked to the Internet. Furthermore, servers are ill-equipped to properly handle large numbers of concurrent requests. To tackle these issues concurrency and parallelism are required. Traditional languages are highly inadequate for this purpose <ref> [19, 16] </ref>, as they lack good support for expressing concurrency and communications; logic programming [19, 33] has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE [33, 30] system is one of the most effective logic programming systems developed that incorporates concurrency
Reference: [17] <author> J. Foster. </author> <title> A Status Report on Networked Information Retrieval: Tools and Groups. </title> <address> RFC-1689, </address> <year> 1994. </year>
Reference-contexts: And, the number of tools for Network Information Retrieval (NIR) is constantly growing <ref> [17] </ref>, to witness the great need for this sort of applications. In the current setting, developing applications which deal with the WWW requires considerable skills.
Reference: [18] <author> M. Gleeson et al. </author> <title> Beyond Hypertext: using the WWW for Interactive Applications. </title> <booktitle> AusWeb Conference, </booktitle> <year> 1997. </year>
Reference-contexts: Interfaces: At present the principal way offered to a non-expert user to design applications capable of interacting with the web is through the use of the Common Gateway Interface (CGI) <ref> [18] </ref>. CGI is a simple protocol that can be used to communicate between HTML forms and external applications. <p> This data structuring organization should allow a closer interaction between clients and servers, allowing the management of multiple interacting components. This is the direction of Java's Applets (server-initiated executions on client's side), Common Gateway Interface (CGI) scripts <ref> [18] </ref> (client-initiated executions on server's side), and Server Side Includes (SSI) [42] (server-initiated executions on server's side). These schemes are very limited and do not offer sufficient control to the programmer. Last but not least, very little consideration has been given to the issue of efficiency of Internet related applications. <p> Client Server Browser IB Client Code Server Instance 1 2 2 Client Code 3.4.2 Active Servers In the active servers scheme the code associated to dynamic Web pages is executed on the server side. This is consistent with the trend of research shown in various works <ref> [18, 42, 26] </ref>. Mechanism: W-ACE support for active servers originates from a modified notion of HTML tree and HTML graph.
Reference: [19] <author> G. Gupta. </author> <title> Multiprocessor Execution of Logic Programs. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: This trend is likely to change, as larger and more complex applications will be hooked to the Internet. Furthermore, servers are ill-equipped to properly handle large numbers of concurrent requests. To tackle these issues concurrency and parallelism are required. Traditional languages are highly inadequate for this purpose <ref> [19, 16] </ref>, as they lack good support for expressing concurrency and communications; logic programming [19, 33] has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE [33, 30] system is one of the most effective logic programming systems developed that incorporates concurrency <p> Furthermore, servers are ill-equipped to properly handle large numbers of concurrent requests. To tackle these issues concurrency and parallelism are required. Traditional languages are highly inadequate for this purpose [19, 16], as they lack good support for expressing concurrency and communications; logic programming <ref> [19, 33] </ref> has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE [33, 30] system is one of the most effective logic programming systems developed that incorporates concurrency and parallelism. 3 W-ACE 3.1 (Constraint) Logic Programming A logic programming language [22] is
Reference: [20] <author> G. Gupta and E. Pontelli. </author> <title> Extended Dynamic Dependent And-Parallelism in ACE. </title> <booktitle> Int. Symp. on Parallel Symbolic Computing, </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: It is common [33] to distinguish two flavors of and-parallelism: independent parallelism which originates when the parallel subgoals are not allowed to affect each other's executions [30], and dependent and-parallelism where <ref> [32, 20] </ref> subgoals executed in parallel are allowed to share variables and compete for their bindings. Or-Parallelism allows parallel execution of the alternatives associated to a resolution step|i.e., allows to explore in parallel the different clauses that can be used to reduce the selected subgoal.
Reference: [21] <author> J. Jaffar and M. Maher. </author> <title> Constraint Logic Programming. </title> <journal> Journal of Logic Programming, </journal> <volume> Vol. </volume> <month> 19/20, </month> <year> 1994. </year>
Reference: [22] <author> J.W. Lloyd. </author> <booktitle> Foundations of Logic Programming Springer Verlag, </booktitle> <year> 1987. </year>
Reference-contexts: programming [19, 33] has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE [33, 30] system is one of the most effective logic programming systems developed that incorporates concurrency and parallelism. 3 W-ACE 3.1 (Constraint) Logic Programming A logic programming language <ref> [22] </ref> is based on a proper subset of first-order logic. <p> Atoms built using predefined symbols are called constraints. Constraints are interpreted over a predefined interpretation (constraint domains) and they are handled using specialized constraint solvers. Computation in a generic logic programming language is based on the well-known concept of resolution <ref> [22] </ref>. The computation terminates when a query com 4 posed only by constraints is produced; these represent the "conditions" that allow the query to be proved valid.
Reference: [23] <author> S. Loke et al. </author> <title> Lightweight Deductive Databases on the WWW. Workshop on Logic Progr. Tools for Internet, </title> <year> 1996. </year>
Reference-contexts: Active Layer: The second layer represents the possibility of handling the web pages as programs. Thus they are not anymore passive objects of computation, but they become dynamic and active computations themselves. This follows the lines of proposals like lightweight databases [11] and LogicWeb <ref> [23] </ref>. <p> Lightweight Databases: The intuition behind lightweight data-bases is to view HTML documents as small databases, and allow clients to act as intelligent (e.g., deductive) query solver over these databases. The concept, introduced by Dobson [11] and generalized by others <ref> [23, 8] </ref>, can be implemented with extreme ease in the active client model offered by W-ACE. The database information are stored in HTML documents, as a sequence of facts (for example). Once a page is loaded, it is turned into a W-ACE theory, against which the client can pose queries. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications <ref> [23, 8, 40, 38, 3] </ref>; similar attempts are also under exploration in the area of functional programming [5, 24]. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW. <p> Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW. The only exceptions are LogicWeb <ref> [23] </ref>, which shares various similarities with the W-ACE client-side active layer, and the Fox project at CMU, aimed at extending ML to support Internet development.
Reference: [24] <author> J.C. Mallery. </author> <title> A Common Lisp Hypermedia Server. </title> <booktitle> First International WWW Conference, </booktitle> <year> 1994. </year>
Reference-contexts: Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications [23, 8, 40, 38, 3]; similar attempts are also under exploration in the area of functional programming <ref> [5, 24] </ref>. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [25] <author> NCSA. </author> <title> Application Programmer's Interface for the NCSA Mosaic CCI. </title> <type> Technical Report, </type> <year> 1995. </year>
Reference-contexts: Web information as dynamic entities: modular-ization of programs and their use as active data; 6. support for concurrency. W-ACE can be used as a tool to develop both standalone Internet applications as well as extensions of existing software (e.g., Mosaic through Common Client Interface (CCI) <ref> [25] </ref>). The advantages of W-ACE over any other existing languages for Internet development are its generality and flexibility. <p> Using traditional browsers this becomes a quite cumbersome activity, involving repeated backtracking steps to get the user back to the root page. W-ACE has been developed as a Common Client Interface (CCI) <ref> [25] </ref> compliant application. This allows W-ACE to exchange information with NCSA Mosaic (another CCI compliant system).
Reference: [26] <author> NeoSoft. </author> <title> Inside NeoWebScript. User Manual, </title> <year> 1997. </year>
Reference-contexts: Client Server Browser IB Client Code Server Instance 1 2 2 Client Code 3.4.2 Active Servers In the active servers scheme the code associated to dynamic Web pages is executed on the server side. This is consistent with the trend of research shown in various works <ref> [18, 42, 26] </ref>. Mechanism: W-ACE support for active servers originates from a modified notion of HTML tree and HTML graph.
Reference: [27] <author> H.S. Nwana. </author> <title> Software Agents: An Overview. </title> <journal> In Knowledge Engineering Review, </journal> <volume> Vol. 11, No. 3, </volume> <year> 1996. </year>
Reference-contexts: Intelligent Agents <ref> [27] </ref> are a typical example of DAAs, as they independently contact various Web servers, directly fetching and processing the documents obtained. Two major components are required for the development of DAAs. Support for HTTP-based communications: Traditional programming languages do not offer any support in this direction.
Reference: [28] <author> M.A. Orgun and W. Ma. </author> <title> An Overview of Temporal and Modal Logic Programming. </title> <booktitle> Int. Conference on Temporal Logic, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Thus, the HTML graph becomes the description of the accessibility relation between possible worlds. This well matches the semantic structure offered by some traditional forms of modal logic <ref> [28] </ref>. The advantage is that we can use the HTML graph as a representation of the accessibility relation used to infer truth in a modal structure.
Reference: [29] <author> A. Paiva, J. Self, R. </author> <title> Hartley. Externalising Learner Models. </title> <booktitle> In Proc. of AIED95, </booktitle> <publisher> AACE Publications, </publisher> <year> 1995. </year>
Reference-contexts: The adaptivity of the scheme can be varied also by accessing separate databases of links. Adaptation can be performed by keeping a user model <ref> [29] </ref>. Limited applications of these ideas have been realized in some AI projects [14], capable of performing automatic generation of Web pages. 3.5 Concurrency and Parallelism Parallelism and concurrency are two separate con 12 cepts. Parallelism indicates ability of performing par-allel execution of different components of the computation.
Reference: [30] <author> E. Pontelli et al. </author> <title> &ACE: A High-performance Parallel Pro-log System. </title> <booktitle> Int. Parallel Processing Symp., IEEE Computer Society, </booktitle> <year> 1995. </year>
Reference-contexts: In this project we propose to develop a complete framework aimed at supporting the efficient development and execution of complex Web-based applications. The system, named W-ACE, is based on one of the most efficient parallel logic programming systems available, the ACE system <ref> [33, 30] </ref> and takes advantage of the search and symbolic manipulation facilities offered by logic programming [39]. <p> Traditional languages are highly inadequate for this purpose [19, 16], as they lack good support for expressing concurrency and communications; logic programming [19, 33] has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE <ref> [33, 30] </ref> system is one of the most effective logic programming systems developed that incorporates concurrency and parallelism. 3 W-ACE 3.1 (Constraint) Logic Programming A logic programming language [22] is based on a proper subset of first-order logic. <p> Browser Web Server CGI Script Application Server Browser CGI script Application Time (i) (ii) Interactions between the application server and the CGI scripts in W-ACE are simple. W-ACE is an in herently concurrent system (based on the ACE parallel system <ref> [30, 33] </ref>). This allows to spawn server computations which support the state of one interaction with a client. <p> It is common [33] to distinguish two flavors of and-parallelism: independent parallelism which originates when the parallel subgoals are not allowed to affect each other's executions <ref> [30] </ref>, and dependent and-parallelism where [32, 20] subgoals executed in parallel are allowed to share variables and compete for their bindings. Or-Parallelism allows parallel execution of the alternatives associated to a resolution step|i.e., allows to explore in parallel the different clauses that can be used to reduce the selected subgoal. <p> And-Parallelism in Web Applications: Executions over recursive data structures, data-parallel computations, producer/consumer pipelined computations are all examples of executions which are very likely to offer large amounts of and-parallelism <ref> [30] </ref>. 13 More specific to the case of W-ACE, the explicit use of notations to indicate concurrency can be directly translated to parallel executions. This is typical, for example, of multiple agents which are exploring different set of HTML documents searching for certain patterns/keywords.
Reference: [31] <author> E. Pontelli and G. Gupta. </author> <title> Using ACE as a Parallel Engine for WWW Applications. </title> <type> Internal Report, </type> <institution> NMSU, </institution> <year> 1996. </year>
Reference-contexts: The first domain we consider, aimed at allowing a higher degree of abstraction, is the Set domain. Sets are unordered collections of distinct elements. In W-ACE we propose the integration of a very general set domain (as in [12, 6]) as well as the notion of multiset <ref> [31] </ref>. This domain introduces both extensional (e.g, fa; b; 1; f (a; X)g) and intensional (e.g., fx : even (X) ^ 0 X M g) definitions of sets. <p> Nevertheless, we can argue about why it is worth to pursue different approaches. Scripting languages are notoriously slow, inherently sequential, and unsuitable for activities more complex than simple file and data filtering. For these and other reasons <ref> [31] </ref>, we decided to continue the proposals made by various researchers [8, 5] aiming at providing language extensions capable of integrating CGI scripting with main applications written in high-level languages. W-ACE provides a simple interface for CGI-scripts. Any W-ACE program can be used as a CGI script. <p> Cooperative browsing: it is also important to allow separate navigation sessions, eventually initiated by different users, to interact. A good example of this is represented by the principle of annotating HTML documents <ref> [36, 31] </ref>. Members of a working team may be separately operating via different browsing sessions (e.g., they are browsing the Web in search of information on a given topic).
Reference: [32] <author> E. Pontelli and G. Gupta. </author> <title> Implementation Mechanisms for Dependent And-Parallelism. </title> <booktitle> Int. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1997. </year>
Reference-contexts: It is common [33] to distinguish two flavors of and-parallelism: independent parallelism which originates when the parallel subgoals are not allowed to affect each other's executions [30], and dependent and-parallelism where <ref> [32, 20] </ref> subgoals executed in parallel are allowed to share variables and compete for their bindings. Or-Parallelism allows parallel execution of the alternatives associated to a resolution step|i.e., allows to explore in parallel the different clauses that can be used to reduce the selected subgoal. <p> The notation becomes slightly more complex if we allow dependences between the concurrent subgoals (we need to indicate the source of dependences|either manually or through a static analyzer). Dependent execution in ACE is structured in such a way to respect the sequential semantics of the language <ref> [32] </ref>. Nevertheless, W-ACE allows us to specify for each argument position in a concurrent subgoal whether such position should be treated as a producer or consumer position. <p> A loop like: main (Sockets,Args) :- wait connection (Sockets,Inst), ( client execution (Sockets,Inst,Args) & main (Sockets,Args) ). is used. Suspensions are automatically obtained thanks to the suspension mechanism used by dependent and-parallelism <ref> [32] </ref>. In the specific case of the diagnosis application, the different client sessions are independent|thus the Args argument is actually empty. Communication with the browser is through separate sockets (one per worker) and is completely transparent to the programmer. <p> Traditional languages (e.g., Java) require complex and explicit communication mechanisms (sockets, IPC messages). On the other hand, the scheme adopted in W-ACE allows to avoid any additional complexity. Since each separate client connection is represented by a separate recursive subgoal, they can directly interact via shared variables <ref> [32] </ref>.
Reference: [33] <author> E. Pontelli and G. Gupta. </author> <title> Parallel Symbolic Computing in ACE. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <note> (to appear). </note>
Reference-contexts: In this project we propose to develop a complete framework aimed at supporting the efficient development and execution of complex Web-based applications. The system, named W-ACE, is based on one of the most efficient parallel logic programming systems available, the ACE system <ref> [33, 30] </ref> and takes advantage of the search and symbolic manipulation facilities offered by logic programming [39]. <p> Furthermore, servers are ill-equipped to properly handle large numbers of concurrent requests. To tackle these issues concurrency and parallelism are required. Traditional languages are highly inadequate for this purpose [19, 16], as they lack good support for expressing concurrency and communications; logic programming <ref> [19, 33] </ref> has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE [33, 30] system is one of the most effective logic programming systems developed that incorporates concurrency and parallelism. 3 W-ACE 3.1 (Constraint) Logic Programming A logic programming language [22] is <p> Traditional languages are highly inadequate for this purpose [19, 16], as they lack good support for expressing concurrency and communications; logic programming [19, 33] has been proved to be a highly viable programming paradigm to handle this sort of requirements, and the ACE <ref> [33, 30] </ref> system is one of the most effective logic programming systems developed that incorporates concurrency and parallelism. 3 W-ACE 3.1 (Constraint) Logic Programming A logic programming language [22] is based on a proper subset of first-order logic. <p> Browser Web Server CGI Script Application Server Browser CGI script Application Time (i) (ii) Interactions between the application server and the CGI scripts in W-ACE are simple. W-ACE is an in herently concurrent system (based on the ACE parallel system <ref> [30, 33] </ref>). This allows to spawn server computations which support the state of one interaction with a client. <p> And-parallelism attempts parallel execution of different subgoals belonging to the current query. Thus, in a computation like ? extract links (L; P age); extract pics (P; P age) the two subgoals can be solved in parallel. It is common <ref> [33] </ref> to distinguish two flavors of and-parallelism: independent parallelism which originates when the parallel subgoals are not allowed to affect each other's executions [30], and dependent and-parallelism where [32, 20] subgoals executed in parallel are allowed to share variables and compete for their bindings.
Reference: [34] <author> D. Raggett. </author> <title> HTML 3.2 Reference Specification. W3C Recommendation, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: Web Pages Development: Development of Web documents accessible via HTTP protocol is based on a special markup language, called HTML <ref> [34] </ref>. HTML supplies a simple language which allows to describe text, its layout, as well as supporting inclusion of images. An HTML program describes a single document page. A document is composed by a collection of pages.
Reference: [35] <author> U. Reddy. </author> <title> Objects as Closures: Abstract Semantics of Object Oriented Languages. </title> <booktitle> Proc. Lisp and Functional Programming, ACM, </booktitle> <year> 1989. </year>
Reference-contexts: Observe that these operators for combining logic theories are sufficient to cover most of the foreseeable cases. For example, can be used to implement both dynamic and static inheritance <ref> [35] </ref>. W-ACE Dynamic Use of Theories: The next step is to provide the language with adequate mechanisms to allow the use of these logical theories.
Reference: [36] <author> M. Roscheisen et al. </author> <title> Beyond Browsing: Shared Comments, SOAPs, Trails, and On-line Communities. </title> <type> Tech. Rep., </type> <institution> Stanford University, </institution> <year> 1996. </year>
Reference-contexts: To our knowledge the concept has not been extensively explored within the framework of languages for Internet/WWW-development. The concept has been successfully used in some domain-specific applications <ref> [1, 36] </ref>. In W-ACE, pages (i.e., W-ACE HTML trees) are organized into active graphs. Each node of the graph is an HTML document. An edge between two nodes denotes the accessibility relations between the two documents (existence of a link from one page to the other). Edges are directed. <p> Cooperative browsing: it is also important to allow separate navigation sessions, eventually initiated by different users, to interact. A good example of this is represented by the principle of annotating HTML documents <ref> [36, 31] </ref>. Members of a working team may be separately operating via different browsing sessions (e.g., they are browsing the Web in search of information on a given topic).
Reference: [37] <author> S. Sato. </author> <title> Dynamic Rewriting of HTML Documents. </title> <booktitle> First International WWW Conference, </booktitle> <year> 1994. </year>
Reference: [38] <author> A. Sehmi, M. Kroening. WebLS: </author> <title> A Custom Prolog Rule Engine for Providing Web-Based Tech Support. </title> <booktitle> Workshop on Logic Progr. Tools for Internet, </booktitle> <year> 1996. </year>
Reference-contexts: Data extracted from the Internet is seen as unstructured sequences of characters and the management of the structuring is completely left to the programmer. Java itself gives little support in this direction. Few proposals have been made to overcome part of this problem <ref> [8, 3, 38] </ref>, by developing libraries which offer some abstraction for data organization|notable is the case of PiLLoW [8], which allows for the encoding of an HTML document as a Prolog list of terms (each describing a tagged HTML element). <p> Most current proposals in the literature regarding tools for WWW/Internet programming are within this layer of operation. The power of using logic programming to handle object layer applications has already been pointed out in some recent proposals <ref> [8, 3, 38] </ref>. W-ACE aims at providing the user with a language which allows a more natural management of the structured information deriving from web processing. We will discuss in the next section the additional built-ins that are going to be provided to interact with Internet. <p> TCP connections are used to support also HTTP communications. HTML: At the higher level, information acquired from HTTP communications is typically encoded as documents (typically HTML documents). Various existing proposals do not supply any representation for HTML documents. E.g., Eclipse server [3] and Amzi WebServer <ref> [38] </ref> require the user to deal with explicit HTML, typically coded as a string of characters. 5 PiLLoW [8] proposed (to our knowledge) for the first time the idea of handling HTML documents as Prolog structures. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications <ref> [23, 8, 40, 38, 3] </ref>; similar attempts are also under exploration in the area of functional programming [5, 24]. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [39] <author> L. Sterling and E. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The system, named W-ACE, is based on one of the most efficient parallel logic programming systems available, the ACE system [33, 30] and takes advantage of the search and symbolic manipulation facilities offered by logic programming <ref> [39] </ref>.
Reference: [40] <editor> P. Szeredi et al. </editor> <title> Serving Multiple HTML Clients from a Prolog Application. </title> <booktitle> Workshop on Logic Progr. Tools for Internet, </booktitle> <year> 1996. </year>
Reference-contexts: A careful memory organization allows to combine with minimal effort the memory images of two W-ACE workers. 3.5.3 Serving HTML Clients The problem of having a server handling multiple clients through Web-connections has been largely underestimated. The issue, as pointed out by Szeredi <ref> [40] </ref>, is of extreme importance: modern "intelligent" servers are AI-like applications, which are large and expensive; maintaining a separate running copy of the server for each client connection may not be a suitable solution, since * the impact of the multiple running computations on the server's side may be unbearable; * <p> The potential of using parallelism to serve different browsing sessions has already been pointed out in 14 the literature. One good example, within the area of Prolog, can be found in Szeredi's work <ref> [40] </ref>. Szeredi suggested the use of the Aurora Or-Parallel system to handle this situation, preserving the declarative nature of the program and with a good level of efficiency. W-ACE for Remote Diagnosis (Example): The application we considered is an intelligent system for the diagnosis of Acid-base disorders [2]. <p> A tight interaction between HTML browsing and server execution is kept (using backtracking to "follow" the user if he decides to use the back button of the browser). The serious problem in this context is serving multiple clients. Various solutions to this problem have been envisioned in <ref> [40] </ref>, ranging from developing a server capable of directly handling multiple sessions (very complex and leading to a loss of the logical structure of the server), to using complex logic features (freeze, continuations). Neither of these solutions is particularly attractive. The different sessions are separate threads of computation. <p> The different sessions are separate threads of computation. Furthermore, in order to make possible an efficient usage of resources, the different threads should share the same resources as much as possible (thus, spawning a new process for each client connection is not a viable solution). In <ref> [40] </ref> an solution to a similar problem is proposed using an or-parallel Prolog system (Aurora). <p> The preliminary version of the Web-based diagnosis system has been completed (figure 6 shows a snapshot of an execution). Interacting Clients (Example): In the previous example client sessions are non-interacting and independent (same assumption as in <ref> [40] </ref>). There are many cases in which it is desirable to allow clients to interact with each others. This may range from the simple indirect interaction caused by accessing and modifying a common database, to the more complex case of a direct client interaction, as in a multi-players game. <p> Various proposals have emerged recently in extend 16 ing logic programming to support Internet program-ming, recognizing the unique power of this programming paradigm for this sort of applications <ref> [23, 8, 40, 38, 3] </ref>; similar attempts are also under exploration in the area of functional programming [5, 24]. Nevertheless, most of these limit themselves to interfaces to some of the required communication protocols, without tackling the more general issue of developing an actual programming paradigm for the WWW.
Reference: [41] <author> K. Takahashi, E. Liang. </author> <title> Analysis and Design of Web-based Information Systems. </title> <booktitle> In Proc. of the Sixth International World Wide Web Conference, </booktitle> <year> 1996. </year>
Reference-contexts: This allows to encode with relative ease complex information structuring schemes, like those described in WebArchitect and PilotBoat <ref> [41] </ref>. 3.3.1 Semantic Features Part of the operational support required in object layer has already been introduced in the previous section (manipulation of the various data structures). In the same spirit as Java, W-ACE also provides an extensive collection of built-ins for performing a variety of Internet-related operations.
Reference: [42] <author> M. </author> <title> West Server Side Includes. </title> <type> Technical Report, </type> <institution> Questar Microsystems Inc., </institution> <year> 1997. </year>
Reference-contexts: This data structuring organization should allow a closer interaction between clients and servers, allowing the management of multiple interacting components. This is the direction of Java's Applets (server-initiated executions on client's side), Common Gateway Interface (CGI) scripts [18] (client-initiated executions on server's side), and Server Side Includes (SSI) <ref> [42] </ref> (server-initiated executions on server's side). These schemes are very limited and do not offer sufficient control to the programmer. Last but not least, very little consideration has been given to the issue of efficiency of Internet related applications. <p> Client Server Browser IB Client Code Server Instance 1 2 2 Client Code 3.4.2 Active Servers In the active servers scheme the code associated to dynamic Web pages is executed on the server side. This is consistent with the trend of research shown in various works <ref> [18, 42, 26] </ref>. Mechanism: W-ACE support for active servers originates from a modified notion of HTML tree and HTML graph.
Reference: [43] <author> World Wide Web Consortium. </author> <title> LibWWW User Documentation. </title> <type> Technical Report, </type> <year> 1997. </year> <month> 18 </month>
Reference-contexts: Libraries and system calls are present in most implementations allowing TCP/IP based communications (typically via sockets). Nevertheless, the management of the HTTP protocol (construction of messages, interpretation of the headers, etc.) is left completely to the programmer. Some libraries have been recently realized offering a primitive interfacing to HTTP <ref> [43] </ref>, but they appear rather complex and poorly documented. The main exception to the above situation is represented by Java, which embeds a controlled interface to the HTTP protocol. Symbolic Manipulation of Data: information obtained from a direct HTTP communication can be interpreted at different levels of abstraction. <p> Limited support has been offered by the current tools in trying to hide the complex issues of communication and data structures, with few exceptions like Java (support for networking and HTTP) and libraries like PiLLoW [8] (HTML structuring) and Lib-WWW <ref> [43] </ref> (HTTP interface). Furthermore, traditional languages lack some of the features that are seen as fundamental for the next generation of Internet applications.
References-found: 43

