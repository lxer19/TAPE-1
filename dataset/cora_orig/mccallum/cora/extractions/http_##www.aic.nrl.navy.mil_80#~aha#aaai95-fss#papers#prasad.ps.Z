URL: http://www.aic.nrl.navy.mil:80/~aha/aaai95-fss/papers/prasad.ps.Z
Refering-URL: http://www.aic.nrl.navy.mil:80/~aha/aaai95-fss/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: bhanu@iitm.ernet.in  
Title: Planning With Case-Based Structures  
Author: P.V.S.R.Bhanu Prasad 
Address: Madras 600036 India  
Affiliation: Department of Computer Science and Engineering Indian Institute of Technology, Madras  
Abstract: We present a case-based planning (CBP) model. The important component in the memory of the system is the collection of different structures of created plans. A structure is made up of created plans arranged in a hierarchical fashion, and corresponds to a class of plans. Retrieving, modification, and storing mechanisms play a key role in plan construction. In contrast with most existing CBP systems, these mechanisms are distributed over plan operators. A plan is created in a hierarchical fashion by activating the suitable structure and performing stepwise retrieving, modification, and storing operations on it. The system learns new plans from experience and has been implemented in the domain of cooking vegetables. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barletta, R.; Mark. W. </author> <year> 1988. </year> <title> Breaking Cases Into Pieces. </title> <booktitle> In Proceedings of Case-Based Reasoning Workshop, </booktitle> <address> St. Paul, MN, USA. </address>
Reference-contexts: MEDIATOR (Simp--son 1985) is one of the earliest systems that utilized pieces in forming a case. However, MEDIATOR had to choose a case in order to access the relevant part. Even though Barletta and Mark <ref> (Barletta 1988) </ref> dealt with the pieces, their way of organizing the pieces is different from our approach. In their approach, cases are grouped into pieces in terms of the hypothesized faults. This organization does not allow easy direct access to the pieces of a stored case.
Reference: <author> Hammond, K.J. </author> <year> 1989. </year> <title> Case-Based Planning: Viewing planning as a memory task. </title> <publisher> Academic Press, Inc, </publisher> <address> New York. </address>
Reference-contexts: Learning is an other important characteristic for a CBP system. Present CBP systems (Kolodner 1987, Hammond 1989, Redmond 1990, Subbarao 1992, Kettler et al. 1994) have treated each of the following issues independently and less emphasis has been given in developing a unified system. (i). Cost of plan modification <ref> (Hammond 1989) </ref>: Adapting a plan or merging the pieces that needs less modification cost. (ii). Hierarchical planning (Sacerdoti 1974, Tate 1975, Stefik 1981, Sacerdoti 1987, Wilkins 1988): To solve hard problems, a problem solver may have to generate long plans. <p> The system has been implemented in the domain of cooking vegetables in the Indian style. The motivation for taking up the culinary domain stems mainly from its wide access and its similarity to more complex domains, such as circuit construction <ref> (Hammond 1989) </ref>. The cooking domain is well represented in the case-based reasoning community (Kolodner 1987, Hammond 1989). The following sections illustrate the memory organization and the process of plan creation. Memory Organization The underlying assumption is that there exists distinct and identifiable styles of cooking. <p> The terms plan operators, and subgoals are used interchangeably in this paper. The e-level operators have no indexing links. The system starts with some plans that are supplied directly by the creator. In contrast with CBP systems like CHEF <ref> (Hammond 1989) </ref>, some (or even all) of the initial plans may be incomplete. In other words, the next-level plans of different subgoals may correspond correspond to different vegetables. The only restriction is that each operator is provided with at least one next-level plan. <p> Retrieving Mechanism The retrieving mechanism of a subgoal identifies and retrieves a suitable next-level plan for the subgoal. In our system, the properties (only those distinguish the next-level plans of the subgoal) are arranged in the form of a discrimination net associated with the subgoal. Similar to CHEF <ref> (Hammond 1989) </ref>, the properties are ordered on the basis of their modification cost. The higher-priority ones are used at the higher-levels of the discrimination net. For a given goal, the retrieving mechanism always searches the corresponding discrimination net for a next-level plan that optimally satisfies, important properties of the goal. <p> In this situation it is sufficient to start with the required subgoal rather than the root node in step 2 of the algorithm. Conclusion Most of the CBP systems like CHEF <ref> (Hammond 1989) </ref> have treated each case as a separate entity and per formed planning by selecting one. MEDIATOR (Simp--son 1985) is one of the earliest systems that utilized pieces in forming a case. However, MEDIATOR had to choose a case in order to access the relevant part. <p> PRIAR essentially retrieves a complete plan from memory for adaptation. In the present form, our system does not learn from experience. We intend to incorporate a selective learning element which will perform expectation learning <ref> (Hammond 1989) </ref> and critic learning (Hammond 1989) by getting feedback from the world. <p> PRIAR essentially retrieves a complete plan from memory for adaptation. In the present form, our system does not learn from experience. We intend to incorporate a selective learning element which will perform expectation learning <ref> (Hammond 1989) </ref> and critic learning (Hammond 1989) by getting feedback from the world.
Reference: <editor> Kettler, B.P. et al. </editor> <year> 1994. </year> <title> Massively Parallel Support for Case-Based Planning. </title> <journal> IEEE EXPERT, </journal> <month> February. </month>
Reference: <author> Kolodner, J. </author> <year> 1987. </year> <title> Capitalizing on Failure Through Case-Based Inference. </title> <booktitle> In Proceedings of the Ninth Annual Conference of the Cognitive Science Society, </booktitle> <publisher> Lawrence Erlbaum Associates, Publishers, </publisher> <address> New Jersy. </address>
Reference-contexts: The motivation for taking up the culinary domain stems mainly from its wide access and its similarity to more complex domains, such as circuit construction (Hammond 1989). The cooking domain is well represented in the case-based reasoning community <ref> (Kolodner 1987, Hammond 1989) </ref>. The following sections illustrate the memory organization and the process of plan creation. Memory Organization The underlying assumption is that there exists distinct and identifiable styles of cooking.
Reference: <author> Redmond, M. </author> <year> 1990. </year> <title> Distributed Cases for Case-Based Reasoning; Facilitating Use of Multiple Cases. </title> <booktitle> In Proceedings of AAAI. </booktitle>
Reference-contexts: In their approach, cases are grouped into pieces in terms of the hypothesized faults. This organization does not allow easy direct access to the pieces of a stored case. There is a similarity between our approach and CELIA <ref> (Redmond 1990) </ref>: In both the systems case pieces are organized in a hierarchical fashion and these pieces can be accessed either direcly or sequentially.
Reference: <author> Rich, E. </author> <year> 1983. </year> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill Book Company, Singapore. </publisher>
Reference-contexts: In order to do that efficiently, it is important to be able to eliminate some of the details of the problem until a solution that addresses the main issues is found <ref> (Rich 1983) </ref>. (iii). Knowledge sharing: Optimum sharing of subgoals is an important characteristic for an efficient knowledge-based planning system. In this paper we explore the design of a unified system that addresses the above issues.
Reference: <editor> Riesbeck, C.K.; and Schank, R.C. </editor> <year> 1989. </year> <title> Inside Case-Based Reasoning, </title> <publisher> Lawrence Erlbaum Associates, Publishers, </publisher> <address> New Jersy. </address>
Reference-contexts: The memory of structures captures all the created plans. Each structure corresponds to a class of plans and is made up of hierarchically organized created plans. A structure is identified with the highest-level plan operator such as fry. This operator in turn has indexing links <ref> (Riesbeck 1989) </ref> to the set of plans that are created in terms of the operators at the next hierarchical level. For example, the operator fry has indexing links to the following plans: (i) basic-preparation, prepare-pieces, preparation-for-fry, perform-fry (corresponds to lady's finger). (ii) basic-preparation, boiling, preparation-for-fry, perform-fry (corresponds to peas).
Reference: <author> Sacerdoti, E.D. </author> <year> 1974. </year> <title> Planning in a Hierarchy of Abstraction Spaces. </title> <journal> Artificial Intelligence, </journal> <volume> Volume 5. </volume>
Reference-contexts: Cost of plan modification (Hammond 1989): Adapting a plan or merging the pieces that needs less modification cost. (ii). Hierarchical planning <ref> (Sacerdoti 1974, Tate 1975, Stefik 1981, Sacerdoti 1987, Wilkins 1988) </ref>: To solve hard problems, a problem solver may have to generate long plans.
Reference: <author> Sacerdoti, E.D. </author> <year> 1987. </year> <title> A Structure for Plans and Behavior. </title> <publisher> Amsterdam: Elsevier-North Holland. </publisher>
Reference: <author> Schank, R.C. </author> <year> 1982. </year> <title> Dynamic Memory: A Theory of Learning in Computers and People. </title> <publisher> Cambridge University press. </publisher>
Reference-contexts: Many systems have been built (Kolodner 1987, Hammond 1989, Redmond 1990, Subbarao 1992, Kettler et al. 1994) within the framework of memory organization packets (MOPS) <ref> (Schank 1982, Riesbeck 1989) </ref>. In all these systems, entire plans are stored as cases to be retrieved in toto. A new plan is created by adapting a suitable plan or pieces of some plans merged together from memory to achieve the given goal.
Reference: <author> Simpson, R.L.Jr. </author> <year> 1985. </year> <title> A Computer Model of Case-Based Reasoning in Problem Solving. </title> <type> Ph.D. thesis, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, USA. </address>
Reference: <author> Subbarao, K.; and Hendler, J.A. </author> <year> 1992. </year> <title> A Validation-Structure Based Theory of Plan Modification and Reuse. </title> <journal> Artificial Intelligence, </journal> <volume> Volume 55. </volume>
Reference: <author> Tate, A. </author> <year> 1975. </year> <title> Project Planning Using a Hierarchic Non-linear Planner, </title> <type> Research Report 25, </type> <institution> Department of Artificial Intelligence, University of Edinburgh, U.K. </institution>
Reference-contexts: Introduction The focus in classical planning has been on generating plans from scratch by searching the space of partial plans <ref> (Tate 1975, Sacerdoti 1987, Wilkins 1988) </ref>. Recently due to the developments being made in the areas of cognitive science and machine learning, designing planning systems that use case-based approaches has become an attractive option.
Reference: <author> Wilkins, D.E. </author> <year> 1988. </year> <title> Practical Planning-Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, California. </address>
References-found: 14

