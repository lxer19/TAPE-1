URL: http://www.cs.berkeley.edu/~daw/old-secure-env-paper.ps
Refering-URL: http://www.cs.berkeley.edu/~randit/classes.projects.html
Root-URL: 
Email: fdaw,iang,randitg@cs.berkeley.edu  
Title: A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker  
Author: David Wagner Ian Goldberg Randi Thomas 
Address: Soda Hall Berkeley, CA 94720-1776  
Affiliation: U.C. Berkeley CS Div.,  
Abstract: Many popular programs, such as Netscape, use untrusted helper applications to process data from the network. Unfortunately, the unauthenticated network data could well have been created by an adversary, and the helper applications are usually too complex to be bug-free. This raises significant security concerns. Therefore, it would be desirable to create a secure environment to contain untrusted helper applications. We propose to reduce the risk of a security breach by restricting the application's access to the operating system. In particular, we intercept and filter dangerous system calls via the Solaris process tracing facility. This enables a simple, clean, user-mode implementation of a secure environment for untrusted helper applications.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> [8lgm]-Advisory-16.UNIX.sendmail-6-Dec-1994, </author> <month> December </month> <year> 1994. </year>
Reference: [2] <author> [8lgm]-Advisory-17.UNIX.sendmailV5-2-May-1995, </author> <month> May </month> <year> 1995. </year>
Reference: [3] <author> [8lgm]-Advisory-17.UNIX.sendmailV5.22-Aug-1995, </author> <month> August </month> <year> 1995. </year>
Reference: [4] <author> [8lgm]-Advisory-20.UNIX.sendmailV5.1-Aug-1995, </author> <month> August </month> <year> 1995. </year>
Reference: [5] <author> J. P. Anderson. </author> <title> Computer security technology planning study. </title> <type> Technical Report ESD-TR-73 51, </type> <institution> ESD/AFSC, Hanscom AFB, Bedford, </institution> <address> Mass., </address> <month> October </month> <year> 1972. </year> <note> (NTIS AD-758 206). </note>
Reference-contexts: While not mutually exclusive, the two models are founded on different assumptions about the nature of the threat environment. The reference monitor <ref> [5] </ref> is a conceptual entity which moderates access to protected objects.
Reference: [6] <author> CERT advisory CA-88:01, </author> <year> 1988. </year>
Reference: [7] <author> CERT advisory CA-90:01, </author> <month> January </month> <year> 1990. </year>
Reference: [8] <author> CERT advisory CA-93:15, </author> <month> October </month> <year> 1993. </year>
Reference: [9] <author> CERT advisory CA-93:16, </author> <month> November </month> <year> 1993. </year>
Reference: [10] <author> CERT advisory CA-94:12, </author> <month> July </month> <year> 1994. </year>
Reference: [11] <author> CERT advisory CA-95:05, </author> <month> February </month> <year> 1995. </year>
Reference: [12] <author> CERT advisory CA-95:08, </author> <month> August </month> <year> 1995. </year>
Reference: [13] <author> CERT advisory CA-95:10, </author> <month> August </month> <year> 1995. </year>
Reference-contexts: They often rely on helper applications to process various kinds of information. These helper applications are security-critical, as they handle untrusted data; however, they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed malicious programs to spawn processes and read or write an unsuspecting user's files <ref> [13, 26, 28, 16, 17] </ref>, What is needed in this new environment, then, is protection for all resources on a user's system from this threat. 1.2 What Has Been Done So Far Industry is beginning to address this issue. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; and many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 In fact, security vulnerabilities have been exposed in these applications <ref> [13, 26, 28, 16, 17] </ref>. 2.3 The Difficulty What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [14] <author> CERT advisory CA-95:11, </author> <month> September </month> <year> 1995. </year>
Reference: [15] <author> William R. Cheswick and Steven M. Bellovin. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: This centralized single-machine protection paradigm was appropriate for stand-alone multi-user systems, but has become insufficient in today's increasingly distributed setting. 1 e.g. for virtual memory. 2 Firewalls <ref> [25, 15] </ref> are a widespread solution to the security problems raised in a large internet populated by mutually suspicious corporations, institutions, and private networks. <p> This term was first introduced, in a slightly different setting, in [27]. To achieve security, a slogan we kept in mind was "keep it simple" [23]. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in <ref> [15, Theorem 1] </ref>. We would like to keep our program simpler than the applications that would be run under it. Another of our goals was versatility. We would like to be able to allow or deny individual system calls, perhaps depending on the arguments to the call.
Reference: [16] <author> Frederick Cohen. </author> <type> Personal communication. </type>
Reference-contexts: They often rely on helper applications to process various kinds of information. These helper applications are security-critical, as they handle untrusted data; however, they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed malicious programs to spawn processes and read or write an unsuspecting user's files <ref> [13, 26, 28, 16, 17] </ref>, What is needed in this new environment, then, is protection for all resources on a user's system from this threat. 1.2 What Has Been Done So Far Industry is beginning to address this issue. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; and many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 In fact, security vulnerabilities have been exposed in these applications <ref> [13, 26, 28, 16, 17] </ref>. 2.3 The Difficulty What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [17] <author> Frederick Cohen. </author> <title> Internet holes. Network Security Magazine, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: They often rely on helper applications to process various kinds of information. These helper applications are security-critical, as they handle untrusted data; however, they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed malicious programs to spawn processes and read or write an unsuspecting user's files <ref> [13, 26, 28, 16, 17] </ref>, What is needed in this new environment, then, is protection for all resources on a user's system from this threat. 1.2 What Has Been Done So Far Industry is beginning to address this issue. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; and many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 In fact, security vulnerabilities have been exposed in these applications <ref> [13, 26, 28, 16, 17] </ref>. 2.3 The Difficulty What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [18] <institution> Colusa Software. OmniWare technical overview, </institution> <year> 1995. </year>
Reference-contexts: Sun Microsystems, Inc. is in the process of developing the Java Language Environment [21], which is portable, architecture-neutral, and can produce 1 applications which are reliable and secure. Calusa Software is developing OmniWare <ref> [18] </ref>, which provides an environment for creating safe and mobile applications. Both of these packages are large, complicated, and do not secure existing applications. 1.3 Our Approach Our aim is to confine the untrusted software and data by monitoring and restricting the system calls it performs. <p> We do not have this problem; our design will run any application, and so is more versatile in this respect. However, Java offers architecture-independence for applications, while the applications we trace are necessarily native code. OmniWare <ref> [18] </ref> is another product that offers much the same functionality as Java, and shares the same advantages and disadvantages as compared to our system. 9 Conclusion We set out to prove that our concept of confining untrusted software and data can effectively provide security at the user level.
Reference: [19] <author> Drew Dean and Dan Wallach. </author> <title> A security analysis of the HotJava web browser. </title> <type> Technical Report 501-95, </type> <institution> Princeton University, </institution> <year> 1995. </year>
Reference-contexts: In addition, we have not installed any proxies for well-known network services. So far we have followed the policy that a helper application should not be able to communicate with the outside network, since there are several subtle security issues with host-based authentication, trust perimeters, and covert channels <ref> [19] </ref>. Still, it would be interesting to consider allowing restricted access to the outside network, providing much the same security benefits as Java [21], by incorporating firewall concepts into our simple techniques.
Reference: [20] <institution> DoD trusted computer system evaluation criteria. DoD 5200.28-STD, DoD Computer Security Center, </institution> <year> 1985. </year>
Reference-contexts: It can be characterized as a tamper-proof protection mechanism which is always invoked and is small enough to offer some assurance of correctness; in modern operating systems, the implementation is often known as a security kernel or a TCB (Trusted Computing Base) <ref> [20] </ref>. In the reference monitor paradigm, access to resources traditionally has been controlled in software by carefully checking the arguments of all system calls; shared resources are set up so that accesses occur via a system call, thus invoking the validation machinery.
Reference: [21] <author> James Gosling and Henry McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. Available on the Internet 4 </note> . 
Reference-contexts: Sun Microsystems, Inc. is in the process of developing the Java Language Environment <ref> [21] </ref>, which is portable, architecture-neutral, and can produce 1 applications which are reliable and secure. Calusa Software is developing OmniWare [18], which provides an environment for creating safe and mobile applications. <p> Still, it would be interesting to consider allowing restricted access to the outside network, providing much the same security benefits as Java <ref> [21] </ref>, by incorporating firewall concepts into our simple techniques. Parts of the Solaris operating system, including TCP and UDP, are accessed through a message-passing interface; we have not yet implemented a proxy to handle this, but intend to do so. <p> They ignored the problem of system-level security; conversely, we do not attempt to provide safety. Furthermore, unlike us, they use binary-rewriting technology to accomplish their goals; this prevents them from running arbitrarily general pre-existing applications. Java <ref> [21] </ref> is an extensive system that addresses, among other things, both safety and security, although it achieves security by a different approach from ours. Java cannot achieve security with a pre-existing program, because it specifies a new language for all applications running in its environment.
Reference: [22] <author> Brian L. Kahn. </author> <title> Safe use of X window system protocol across a firewall. </title> <booktitle> In Proc. of the 5th USENIX UNIX Security Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: Helper applications are allowed to fork () children; we will recursively trace these children. We allow network connections only to the X display. In a thorough implementation, access to the X display would be allowed only through a X11 proxy <ref> [22, 24] </ref>. We guard access to system calls with the process-tracing facilities; we will guard access to the outside network with existing proxies developed by the firewall community. Our modules are as follows. <p> The largest unfinished area deals with proxies. We have not yet integrated our prototype with a safe X11 filtering proxy, though all the hooks are implemented. The firewall community has already built X11 proxies which will suffice for our needs <ref> [22, 24] </ref>, so integrating one should be as simple as a slight change to our configuration file. At time of writing, we have not experimented with this, because we don't claim to provide (or need) any innovation in this area.
Reference: [23] <author> Butler Lampson. </author> <title> Hints for computer system design. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Review, volume 17:5, </booktitle> <pages> pages 33-48. </pages> <address> Bretton Woods, </address> <year> 1983. </year> <note> 4 http://www.javasoft.com/whitePaper/javawhitepaper 1.html 17 </note>
Reference-contexts: We use the term sandboxing to describe the concept of confining a helper application to a restricted environment, within which it has free reign. This term was first introduced, in a slightly different setting, in [27]. To achieve security, a slogan we kept in mind was "keep it simple" <ref> [23] </ref>. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in [15, Theorem 1]. We would like to keep our program simpler than the applications that would be run under it. Another of our goals was versatility.
Reference: [24] <author> Davor Matic. xnest. </author> <title> Available in the X11R6 source, </title> <booktitle> and on the Internet 5 </booktitle> . 
Reference-contexts: Helper applications are allowed to fork () children; we will recursively trace these children. We allow network connections only to the X display. In a thorough implementation, access to the X display would be allowed only through a X11 proxy <ref> [22, 24] </ref>. We guard access to system calls with the process-tracing facilities; we will guard access to the outside network with existing proxies developed by the firewall community. Our modules are as follows. <p> The largest unfinished area deals with proxies. We have not yet integrated our prototype with a safe X11 filtering proxy, though all the hooks are implemented. The firewall community has already built X11 proxies which will suffice for our needs <ref> [22, 24] </ref>, so integrating one should be as simple as a slight change to our configuration file. At time of writing, we have not experimented with this, because we don't claim to provide (or need) any innovation in this area.
Reference: [25] <author> Marcus J. Ranum. </author> <title> Thinking about firewalls. </title> <booktitle> In Proc. 2nd Conf. on System Administration, Networking and Security, </booktitle> <year> 1993. </year> <note> Also available on the Internet 6 </note> . 
Reference-contexts: This centralized single-machine protection paradigm was appropriate for stand-alone multi-user systems, but has become insufficient in today's increasingly distributed setting. 1 e.g. for virtual memory. 2 Firewalls <ref> [25, 15] </ref> are a widespread solution to the security problems raised in a large internet populated by mutually suspicious corporations, institutions, and private networks.
Reference: [26] <author> Jeff Uphoff. Re: </author> <title> Guidelines on cgi-bin scripts, </title> <month> August </month> <year> 1995. </year> <note> Post to bugtraq mailing list 7 </note> . 
Reference-contexts: They often rely on helper applications to process various kinds of information. These helper applications are security-critical, as they handle untrusted data; however, they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed malicious programs to spawn processes and read or write an unsuspecting user's files <ref> [13, 26, 28, 16, 17] </ref>, What is needed in this new environment, then, is protection for all resources on a user's system from this threat. 1.2 What Has Been Done So Far Industry is beginning to address this issue. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; and many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 In fact, security vulnerabilities have been exposed in these applications <ref> [13, 26, 28, 16, 17] </ref>. 2.3 The Difficulty What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
Reference: [27] <author> Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. </author> <title> Efficient software based fault isolation. </title> <booktitle> In Proc. of the Symp. on Operating System Principles, </booktitle> <year> 1993. </year>
Reference-contexts: We use the term sandboxing to describe the concept of confining a helper application to a restricted environment, within which it has free reign. This term was first introduced, in a slightly different setting, in <ref> [27] </ref>. To achieve security, a slogan we kept in mind was "keep it simple" [23]. Simple programs are more likely to be secure; simplicity helps to avoid bugs, and makes it easier to find those which creep in [15, Theorem 1]. <p> Consequently, much of the work addressing security for this environment is still in the process of being developed. To achieve security, we use the concept of sandboxing, first introduced by Wahbe et al. in <ref> [27] </ref>. However, they were actually solving a different problem. What they achieved was safety for trusted modules running in the same address space as untrusted modules. They ignored the problem of system-level security; conversely, we do not attempt to provide safety.
Reference: [28] <author> Christian Wettergren. Re: Mime question..., </author> <month> March </month> <year> 1995. </year> <note> Post to bugtraq mailing list 8 . Note: CERT advisories are available on the Internet from ftp://info.cert.org/pub/cert advisories/. 8lgm advisories can be obtained from http://www.8lgm.org/advisories/. 5 ftp://ftp.cs.umass.edu/pub/rcf/exp/X11R6/xc/programs/Xserver/hw/xnest 6 http://www.telstra.com.au/pub/docs/security/firewalls.ps.Z 7 http://www.eecs.nwu.edu/cgi-bin/mfs/files2/jmyers/public html/bugtraq/0166.html?30#mfs 8 http://www.eecs.nwu.edu/cgi-bin/mfs/files2/jmyers/public html/bugtraq/1995a/0759.html?30#mfs 18 </note>
Reference-contexts: They often rely on helper applications to process various kinds of information. These helper applications are security-critical, as they handle untrusted data; however, they are not particularly trustworthy themselves. Older versions of ghostscript, for example, allowed malicious programs to spawn processes and read or write an unsuspecting user's files <ref> [13, 26, 28, 16, 17] </ref>, What is needed in this new environment, then, is protection for all resources on a user's system from this threat. 1.2 What Has Been Done So Far Industry is beginning to address this issue. <p> Furthermore, ghostscript implements a full programming language, with complete access to the filesystem; and many other helper applications are also very general. Worse still, these programs are generally big and bloated, and large complex programs are notoriously insecure. 2 In fact, security vulnerabilities have been exposed in these applications <ref> [13, 26, 28, 16, 17] </ref>. 2.3 The Difficulty What security requirements are demanded from a successful protection mechanism? Simply put, an outsider who has control over the helper application must not be able to compromise the confidentiality, integrity, or availability of the rest of the system, including the user's files or
References-found: 28

