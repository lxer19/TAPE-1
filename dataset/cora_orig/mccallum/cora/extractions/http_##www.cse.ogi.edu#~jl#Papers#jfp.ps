URL: http://www.cse.ogi.edu/~jl/Papers/jfp.ps
Refering-URL: http://www.cse.ogi.edu/~jl/biblio-analysis.html
Root-URL: http://www.cse.ogi.edu
Email: jl@cse.ogi.edu  
Title: Representing Demand by Partial Projections  
Author: John Launchbury and Gebreselassie Baraki 
Affiliation: Oregon Graduate Institute, and Glasgow University  
Note: J. Functional Programming 1 (1): 1-000, January 1993 copyright 1993 Cambridge University Press 1  
Abstract: The projection-based strictness analysis of Wadler and Hughes is elegant and theoretically satisfying except in one respect: the need for lifting. The domains and functions over which the analysis is performed need to be transformed, leading to a less direct correspondence between analysis and program than might be hoped for. In this paper we shall see that the projection analysis may be reformulated in terms of partial projections, so removing this infelicity. There are additional benefits of the formulation: the two forms of information captured by the projection are distinguished, and the operational significance of the range of the projection fits exactly with the theory of unboxed types. 
Abstract-found: 1
Intro-found: 1
Reference: <author> S.Abramsky, </author> <title> The Lazy Lambda Calculus, </title> <editor> in D.Turner ed., </editor> <booktitle> Declarative Programming, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: <author> G.L. Burn, C.L. Hankin and S. Abramsky, </author> <title> Strictness Analysis for Higher-Order Functions, </title> <booktitle> Science of Computer Programming 7, </booktitle> <year> 1986. </year>
Reference-contexts: In addition, using partial projections has benefits with regard to operational intuition. The two roles of a projection, that of propagating demand, and that of equating distinct values, are distinguished: the former corresponding directly with the lower sets which arise in BHA strictness analysis <ref> (Burn, Hankin and Abramsky, 1986) </ref>, and the latter with the equivalence classes of Hunt's PERs (Hunt, 1991). Furthermore, the link between projection analysis and unboxed types (Peyton Jones and Launchbury, 1991) becomes clearer, though the full implications remain to be studied. <p> In addition, the relationship between projection-based backwards analysis and BHA abstract interpretation <ref> (Burn, Hankin and Abramsky, 1986) </ref> has received some attention.
Reference: <author> G.L. Burn, </author> <title> A Relationship Between Abstract Interpretation and Projection Analysis, </title> <booktitle> Proceedings of the ACM Symposium on Principles of Programming Languages (POPL '90). </booktitle> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: In addition, the relationship between projection-based backwards analysis and BHA abstract interpretation (Burn, Hankin and Abramsky, 1986) has received some attention. Burn explored the correspondence between the Scott-closed sets of BHA and the so-called lift-strict projections <ref> (Burn, 1990) </ref>, though once again the presence of lifting caused confusion: should (non-lifted) BHA be compared with the lifted or the non-lifted version of projection analysis? More recently still, Hunt developed analyses based on partial equivalence relations (PERs). <p> On the other hand, Ide corresponds to fg, as it is defined everywhere. Truly-partial projections (i.e. projections which are undefined on a non-empty set of values) correspond to the projections that have previously been (improperly) called strict-projections (Wadler and Hughes, 1987) or, more properly, "lift-strict" <ref> (Burn, 1990) </ref>. However, (partial) projections go beyond this. The projection Abs, for example, implies no demand, but it states that as far as the computation is concerned, all values are equivalent.
Reference: <author> K. Davis, </author> <title> Higher-order Binding-time Analysis, </title> <booktitle> Proceedings of the ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM '93), </booktitle> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: Since then, projection-based analysis has been generalised to handle polymor-phism and arbitrary user-defined data types, though only for first order functions (Hughes and Launchbury, 1992), it has been implemented both for binding-time and strictness analysis (Launchbury, 1991a; Kubiak, Hughes and Launchbury, 1992), and further refined to handle higher-order functions <ref> (Davis, 1993) </ref>, though non-polymorphically as yet. In addition, the relationship between projection-based backwards analysis and BHA abstract interpretation (Burn, Hankin and Abramsky, 1986) has received some attention.
Reference: <author> K. Davis, </author> <title> Projection-based Program Analysis, </title> <type> Ph.D. thesis, </type> <institution> Glasgow University, </institution> <year> 1994. </year>
Reference-contexts: On the other hand, if function spaces are lifted as advocated by Abramsky and Ong (Abramsky, 1990; Ong, 1988), the problem seems to vanish. Interestingly, Davis found it essential to use lifted function spaces in his work on higher-order projection analysis <ref> (Davis, 1994) </ref>.
Reference: <author> R.J.M. Hughes, </author> <title> Strictness Detection in Non-flat Domains, Proceedings of the Workshop on Programs as Data Objects, Copenhagen. </title> <editor> H. Ganzinger and N. Jones, eds. </editor> <publisher> LNCS 217. Springer- Verlag, </publisher> <year> 1985. </year>
Reference-contexts: However, backwards analysis came into its own under Hughes who demonstrated the power of propagating demands for finding strictness within data structures <ref> (Hughes, 1985) </ref>. He used contexts|evaluators defined over a universal domain representing closures (delayed evaluations)|and relied on performing complex series of simplifications to the contexts. Unfortunately this caused the results of the analysis to degrade unpredictably. Moreover, the transformations of contexts received no more than informal justification.
Reference: <author> R.J.M. Hughes, </author> <title> Backwards Analysis of Functional Programs, </title> <editor> in Bjtrner, Ershov and Jones (eds), </editor> <title> Partial Evaluation and Mixed Computation. </title> <booktitle> Proceedings IFIP TC2 Workshop, </booktitle> <address> Denmark, Oct 1987. </address> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: In 1987, two other papers were published which brought the work closer to practicality. The first introduced abstractions of Hughes' original context domains which were much more tractable, and demonstrated a number of other analyses which fitted the backwards mould <ref> (Hughes, 1987) </ref>. In addition, he showed how the technique could be extended to higher-order functions, as a combination of abstract interpretation and backwards analysis. The second paper, written in conjunction with Wadler, is now seen as the seminal paper on projection-based analysis (Wadler and Hughes, 1987). <p> In addition, he showed how the technique could be extended to higher-order functions, as a combination of abstract interpretation and backwards analysis. The second paper, written in conjunction with Wadler, is now seen as the seminal paper on projection-based analysis <ref> (Wadler and Hughes, 1987) </ref>. The thrust of the paper was that contexts could be modelled semantically by domain projections defined over domains representing individual data types. This was a significant development. <p> On the other hand, Ide corresponds to fg, as it is defined everywhere. Truly-partial projections (i.e. projections which are undefined on a non-empty set of values) correspond to the projections that have previously been (improperly) called strict-projections <ref> (Wadler and Hughes, 1987) </ref> or, more properly, "lift-strict" (Burn, 1990). However, (partial) projections go beyond this. The projection Abs, for example, implies no demand, but it states that as far as the computation is concerned, all values are equivalent. <p> Our first use of partiality is in the definition of the projection transformer E # . The first equation realises the guard operation from <ref> (Wadler and Hughes, 1987) </ref>. E # [[ e ]] ff = E # [[ e ]]!ff t x :Abs Note that all partial projections may be expressed in the form either ff or !ff (where ff is total).
Reference: <author> R.J.M. Hughes and J. Launchbury, </author> <title> Towards Relating Forwards and Backwards Analyses, in S.L. </title> <editor> Peyton Jones et al. (eds), </editor> <booktitle> Functional Programming, Glasgow 1990: Proceedings of the 1990 Glasgow Workshop on Functional Programming, </booktitle> <month> 13-15 August </month> <year> 1990, </year> <title> Ullapool, </title> <publisher> Scotland. Springer Workshops in Computing. Springer-Verlag, </publisher> <year> 1991. </year>
Reference: <author> R.J.M. Hughes and J. Launchbury, </author> <title> Projections for polymorphic first-order strictness analysis, </title> <journal> Math. Struct. in Comp. Science, </journal> <volume> Vol. 2, </volume> <pages> CUP, </pages> <year> 1992. </year> <pages> C.U.P. </pages>
Reference-contexts: They existed in different worlds, and the mapping between these worlds was nontrivial. Since then, projection-based analysis has been generalised to handle polymor-phism and arbitrary user-defined data types, though only for first order functions <ref> (Hughes and Launchbury, 1992) </ref>, it has been implemented both for binding-time and strictness analysis (Launchbury, 1991a; Kubiak, Hughes and Launchbury, 1992), and further refined to handle higher-order functions (Davis, 1993), though non-polymorphically as yet. <p> It takes the form of a projection transformer, and corresponds directly with the analysis of <ref> (Kubiak, Hughes and Launchbury, 1992) </ref> except, of course, the absence of explicit liftings. We extend the operations of t and & to denote corresponding point-wise operations on abstract environments. In such an environment env 2 AbsEnv = Var ! Proj names are associated with partial projections. <p> Though more work is needed, it appears that this device will also make the PER theory more elegant. 7 Acknowledgements Some parts of this paper are based closely on a previous joint paper with Kubiak and Hughes <ref> (Kubiak, Hughes and Launchbury, 1992) </ref> except that the material has been reformulated in terms of partial projections. The bulk of this paper was written while the authors were at Glasgow University. 22
Reference: <author> S. Hunt and D. Sands, </author> <title> Binding time analysis: a new PERspective, </title> <booktitle> Proceedings of the ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM '91), ACM SIGPLAN Notices 26(9), </booktitle> <year> 1991. </year>
Reference-contexts: The two roles of a projection, that of propagating demand, and that of equating distinct values, are distinguished: the former corresponding directly with the lower sets which arise in BHA strictness analysis (Burn, Hankin and Abramsky, 1986), and the latter with the equivalence classes of Hunt's PERs <ref> (Hunt, 1991) </ref>. Furthermore, the link between projection analysis and unboxed types (Peyton Jones and Launchbury, 1991) becomes clearer, though the full implications remain to be studied. Projection analysis has progressed significantly since the early days, yet this paper is fairly complete in its coverage of modern projection analysis. <p> Each equivalence corresponds to a latent demand which, if any value in an equivalence class ever becomes unacceptable, then all the values in the same class become unacceptable also. This concept forms the essence of Hunt's PER-based approach to strictness analysis <ref> (Hunt, 1991) </ref>. In previous formulations of projection strictness analysis, the two forms of demand were confused (literally) by the lifting trick. Both were simply equivalences. Without the trick, their distinct nature becomes clear. <p> Projections are functions so the 21 same thing applies. Moreover, in this case, it works the other way round as well: the equivalence relation specifies the projection completely. This insight suggests that analyses based on equivalence relations ought to subsume projection-based analyses, and indeed it does. In his thesis <ref> (Hunt, 1991) </ref>, Hunt defined strictness analysis in terms of partial equivalence relations|a generalisa-tion forced by moving to the higher-order case. Partial equivalence relations have no reflexivity axiom, so a point may be unrelated to anything, including itself .
Reference: <author> S. Hunt, </author> <title> Abstract Interpretation of Functional Languages: From Theory to Practice, </title> <type> Ph.D. thesis, </type> <institution> Imperial College, </institution> <year> 1991. </year>
Reference-contexts: The two roles of a projection, that of propagating demand, and that of equating distinct values, are distinguished: the former corresponding directly with the lower sets which arise in BHA strictness analysis (Burn, Hankin and Abramsky, 1986), and the latter with the equivalence classes of Hunt's PERs <ref> (Hunt, 1991) </ref>. Furthermore, the link between projection analysis and unboxed types (Peyton Jones and Launchbury, 1991) becomes clearer, though the full implications remain to be studied. Projection analysis has progressed significantly since the early days, yet this paper is fairly complete in its coverage of modern projection analysis. <p> Each equivalence corresponds to a latent demand which, if any value in an equivalence class ever becomes unacceptable, then all the values in the same class become unacceptable also. This concept forms the essence of Hunt's PER-based approach to strictness analysis <ref> (Hunt, 1991) </ref>. In previous formulations of projection strictness analysis, the two forms of demand were confused (literally) by the lifting trick. Both were simply equivalences. Without the trick, their distinct nature becomes clear. <p> Projections are functions so the 21 same thing applies. Moreover, in this case, it works the other way round as well: the equivalence relation specifies the projection completely. This insight suggests that analyses based on equivalence relations ought to subsume projection-based analyses, and indeed it does. In his thesis <ref> (Hunt, 1991) </ref>, Hunt defined strictness analysis in terms of partial equivalence relations|a generalisa-tion forced by moving to the higher-order case. Partial equivalence relations have no reflexivity axiom, so a point may be unrelated to anything, including itself .
Reference: <author> N.D. Jones and A. Mycroft, </author> <title> Data Flow Analysis of Applicative Programs Using Minimal Function Graphs, </title> <booktitle> Proc. of the Thirteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> St. Petersburg, Florida, </address> <pages> pp. 296-306, </pages> <note> 1986 T. </note> <author> Johnsson, </author> <title> Detecting when call-by-value can be used instead of call- by-need, </title> <institution> Prgram-ming Methodology Group Memo PMG-14, Institutionen for Informationsbehandling, Chalmers Tekniska Hogskola, Goteborg, Sweden, </institution> <year> 1981. </year>
Reference: <author> R. Kubiak, R.J.M. Hughes and J. Launchbury, </author> <title> Implementing Projection-based Strictness Analysis, </title> <institution> Department of Computing Science, University of Glasgow, </institution> <year> 1992. </year>
Reference-contexts: It takes the form of a projection transformer, and corresponds directly with the analysis of <ref> (Kubiak, Hughes and Launchbury, 1992) </ref> except, of course, the absence of explicit liftings. We extend the operations of t and & to denote corresponding point-wise operations on abstract environments. In such an environment env 2 AbsEnv = Var ! Proj names are associated with partial projections. <p> Though more work is needed, it appears that this device will also make the PER theory more elegant. 7 Acknowledgements Some parts of this paper are based closely on a previous joint paper with Kubiak and Hughes <ref> (Kubiak, Hughes and Launchbury, 1992) </ref> except that the material has been reformulated in terms of partial projections. The bulk of this paper was written while the authors were at Glasgow University. 22
Reference: <author> J. Launchbury, </author> <title> Projections for Specialisation, </title> <editor> in Bjtrner, Ershov and Jones (eds), </editor> <title> Partial Evaluation and Mixed Computation. </title> <booktitle> Proceedings IFIP TC2 Workshop, </booktitle> <address> Denmark, Oct 1987. </address> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Then simple strictness could be represented. We discuss this device in more detail in Section 3.1. In the same year, Launchbury demonstrated that the same projection framework could be used in partial evaluation to express binding-time analysis <ref> (Launchbury, 1987) </ref>, though here there was no need for lifting. Interestingly, this analysis was a forwards analysis, demonstrating that projections had no inherent direction of 2 analysis.
Reference: <author> J. Launchbury, </author> <title> Projection Factorisations in Partial Evaluation, </title> <type> Ph.D. thesis, </type> <institution> Glasgow University. Distinguished Dissertations in Computer Science, </institution> <note> Vol 1, CUP, </note> <year> 1991. </year>
Reference-contexts: Furthermore, the link between projection analysis and unboxed types <ref> (Peyton Jones and Launchbury, 1991) </ref> becomes clearer, though the full implications remain to be studied. Projection analysis has progressed significantly since the early days, yet this paper is fairly complete in its coverage of modern projection analysis. <p> : !t fi t) ? ) !(n : (Zero : 1 + Succ : n) ? ))] 6 Relationship to Other Work 6.1 Unboxed Values Peyton Jones and Launchbury showed that unboxed values are useful source-level additions to a lazy functional language, certainly as far as compiler optimisations are concerned <ref> (Peyton Jones and Launchbury, 1991) </ref>. They allow both flow of control and representation issues to be exposed to the compiler while remaining purely within the functional framework.
Reference: <author> J. Launchbury, </author> <title> Strictness and Binding-time analyses : Two for the price of one, </title> <booktitle> Proc. of the ACM Conference on Programming Language Design and Implementation. </booktitle> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Furthermore, the link between projection analysis and unboxed types <ref> (Peyton Jones and Launchbury, 1991) </ref> becomes clearer, though the full implications remain to be studied. Projection analysis has progressed significantly since the early days, yet this paper is fairly complete in its coverage of modern projection analysis. <p> : !t fi t) ? ) !(n : (Zero : 1 + Succ : n) ? ))] 6 Relationship to Other Work 6.1 Unboxed Values Peyton Jones and Launchbury showed that unboxed values are useful source-level additions to a lazy functional language, certainly as far as compiler optimisations are concerned <ref> (Peyton Jones and Launchbury, 1991) </ref>. They allow both flow of control and representation issues to be exposed to the compiler while remaining purely within the functional framework.
Reference: <author> C.-H.L.Ong, </author> <title> The Lazy Lambda Calculus: An Investigation in the Foundations of Functional Programming, </title> <type> PhD Thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1988. </year>
Reference: <editor> G.D. Plotkin, </editor> <booktitle> Lecture Notes, </booktitle> <year> 1985. </year>
Reference-contexts: Plotkin has reformulated it in the context of partial continuous functions <ref> (Plotkin, 1985) </ref>. We call this category P; objects of this category are unpointed complete partial orders (Schmidt, 1986) | they don't necessarily have a bottom element. It is inappropriate here to cover the theory of partial functions in great depth.
Reference: <author> S.L. Peyton Jones and J. Launchbury, </author> <title> Unboxed Values as First Class Citizens in a Non-strict Functional Language, </title> <institution> Department of Computing Science, University of Glasgow, </institution> <year> 1991. </year>
Reference-contexts: Furthermore, the link between projection analysis and unboxed types <ref> (Peyton Jones and Launchbury, 1991) </ref> becomes clearer, though the full implications remain to be studied. Projection analysis has progressed significantly since the early days, yet this paper is fairly complete in its coverage of modern projection analysis. <p> : !t fi t) ? ) !(n : (Zero : 1 + Succ : n) ? ))] 6 Relationship to Other Work 6.1 Unboxed Values Peyton Jones and Launchbury showed that unboxed values are useful source-level additions to a lazy functional language, certainly as far as compiler optimisations are concerned <ref> (Peyton Jones and Launchbury, 1991) </ref>. They allow both flow of control and representation issues to be exposed to the compiler while remaining purely within the functional framework.
Reference: <author> D.A. Schmidt, </author> <title> Denotational Semantics. </title> <publisher> Allyn and Bacon, Inc. </publisher> <address> Massachussetts, </address> <note> 1986 23 P. </note> <editor> Wadler and R.J.M. Hughes, </editor> <title> Projections for Strictness Analysis, </title> <booktitle> In Functional Program--ming and Computer Architecture, </booktitle> <address> Portland, USA, </address> <publisher> LNCS 274, </publisher> <year> 1987. </year>
Reference-contexts: Plotkin has reformulated it in the context of partial continuous functions (Plotkin, 1985). We call this category P; objects of this category are unpointed complete partial orders <ref> (Schmidt, 1986) </ref> | they don't necessarily have a bottom element. It is inappropriate here to cover the theory of partial functions in great depth.
Reference: <author> S. Wray, </author> <title> A New Strictness Detection Algorithm, </title> <booktitle> Proc. of the Workshop on Implementation of Functional Languages, </booktitle> <address> Aspenas, Sweden, </address> <year> 1985. </year> <month> 24 </month>
Reference-contexts: We then prove the correctness of the analysis. 2 Historical Background Detecting strictness by backwards analysis was originally proposed by Johnsson who used a two point domain (Johnsson, 1981), then developed by Wray using a four point domain <ref> (Wray, 1985) </ref>. However, backwards analysis came into its own under Hughes who demonstrated the power of propagating demands for finding strictness within data structures (Hughes, 1985). He used contexts|evaluators defined over a universal domain representing closures (delayed evaluations)|and relied on performing complex series of simplifications to the contexts.
References-found: 21

