URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/96/tr-96-7.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fckchiu,cmchou,jlee,lhf,ywleungg@cs.cuhk.edu.hk  
Title: A Constraint-Based Interactive Train Rescheduling Tool  
Author: C.K. Chiu, C.M. Chou, J.H.M. Lee, H.F. Leung, and Y.W. Leung 
Keyword: Rescheduling, Constraint Propagation, Variable and Value Ordering  
Address: Shatin, N.T., Hong Kong  
Affiliation: Department of Computer Science and Engineering The Chinese University of Hong Kong  
Abstract: In this paper, we formulate train rescheduling as constraint satisfaction problem and describe a constraint propagation approach to tackle it. Algorithms for timetable verifications and train rescheduling are designed under a coherent framework. We define two optimality criteria that correspond to minimizing passenger delay and the number of station visit modifications respectively for rescheduling. Two heuristics are then proposed to speed up and direct the search towards the optimal solutions. The feasibility of our proposed algorithms and heuristics are confirmed with experimentation using real-life data.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T.W. Chiang and H.Y. Hau. </author> <title> Railway scheduling system using repair-based approach. </title> <booktitle> In Proceedings: Seventh International Conference on Tools with Artificial Intelligence, </booktitle> <pages> pages 71-78, </pages> <year> 1995. </year>
Reference-contexts: Two train scheduling systems are designed in this architecture. Fukumori et al [3] use the tree search and constraint propagation technique with the concepts of time belt in their scheduling system. This approach is claimed to be suitable for double-track line and continuous time unit. Recently, Chiang and Hau <ref> [1] </ref> attempt to combine repair heuristic with several search methods to tackle scheduling problems for general railway systems. There are two on-going projects that aim at automating train scheduling for real-life railway ministries. Our work is a direct outgrowth of the PRaCoSy project [10] at UNU/IIST.
Reference: 2. <author> Y. Dong. </author> <title> The Zhengzhou $ Wuhan train dispatch system. </title> <institution> UNU/IIST PRaCoSy Document DYL/1/3, International Institute for Software Technology, United Nations University, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Note that efficiency should be a critical concern in designing the verification and rescheduling algorithms since in real-life situations, rescheduling must be performed in a timely manner. The notion of "efficiency" may vary according to situations. Ten minutes, however, should be a tolerable bound in general <ref> [2] </ref>. Optimal solutions are not required usually. In most cases, it is impractical to generate optimal solutions within a given (usually small) time bound. Criteria for optimality, however, should be defined. Such definitions can serve as guidelines for designing various variable-ordering and value-ordering heuristics to generate "good" answers.
Reference: 3. <author> K. Fukumori, H. Sano, T. Hasegawa, and T. Sakai. </author> <title> Fundamental algorithm for train scheduling based on artificial intelligence. </title> <journal> Systems and Computers in Japan, </journal> <volume> 18(3) </volume> <pages> 52-63, </pages> <year> 1987. </year>
Reference-contexts: Our work is based on a propagation-based constraint solver. Somewhat related to our work is train scheduling. Komaya and Fukuda [5] propose a problem solving architecture for knowledge-based integration of simulation and scheduling. Two train scheduling systems are designed in this architecture. Fukumori et al <ref> [3] </ref> use the tree search and constraint propagation technique with the concepts of time belt in their scheduling system. This approach is claimed to be suitable for double-track line and continuous time unit.
Reference: 4. <author> ILOG. </author> <title> ILOG: Solver Reference Manual Version 2.0, </title> <year> 1994. </year>
Reference-contexts: The prototype consists of a constraint-based scheduler and a user--interface. The former is implemented in C++ with ILOG Solver library 2.0 <ref> [4] </ref> while the latter is built using Microsoft Visual Basic 3.0. In the following, an overview of the running map tool is presented.
Reference: 5. <author> K. Komaya and T. Fukuda. </author> <title> A knowledge-based approach for railway scheduling. </title> <booktitle> In Proceedings: Seventh IEEE Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 405-411, </pages> <year> 1991. </year>
Reference-contexts: Zweben et al [11] tackle this problem using constraint-based iterative repair with heuristics. The resultant GERRY scheduling and rescheduling system is applied to coordinate Space Shuttle Ground Processing. Our work is based on a propagation-based constraint solver. Somewhat related to our work is train scheduling. Komaya and Fukuda <ref> [5] </ref> propose a problem solving architecture for knowledge-based integration of simulation and scheduling. Two train scheduling systems are designed in this architecture. Fukumori et al [3] use the tree search and constraint propagation technique with the concepts of time belt in their scheduling system.
Reference: 6. <author> H.C. Lin and C.C. Hsu. </author> <title> An interactive train scheduling workbench based on artificial intelligence. </title> <booktitle> In Proceedings: Sixth International Conference on Tools with Artificial Intelligence, </booktitle> <pages> pages 42-48, </pages> <year> 1994. </year>
Reference-contexts: Our work is a direct outgrowth of the PRaCoSy project [10] at UNU/IIST. The latest PRaCoSy running map tool prototype uses constraints only passively to test for constraint violation in their verification engine. The Train Scheduling System (TSS) designed for Taiwan Railway Bureau (TRB) <ref> [6] </ref> is a knowledge-based interactive train scheduling system incorporating both an automatic and a manual schedulers.
Reference: 7. <author> X. Liu. </author> <title> A simple running map display tool. </title> <institution> UNU/IIST PRaCoSy Document lx/tool/02, International Institute for Software Technology, United Nations University, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Second, optimality criteria used in scheduling, such as minimum operating cost, are usually defined in the absolute sense. In rescheduling, however, the quality of the output is measured with respect to the original timetable. The PRaCoSy project has resulted in a running map tool capable of train timetable verification <ref> [7] </ref>. Our task at hand is to enhance the PRaCoSy tool to perform automatic rescheduling, which can be considered as constraint re-satisfaction. A major problem with the PRaCoSy implementation is that constraints are used only passively to test possible violation of scheduling rules. <p> This example also shows that, in general, the two heuristics give different first solution. 5 Prototype Implementation In order to demonstrate the feasibility of our algorithms, we have re-constructed and enhanced the PRaCoSy running map tool prototype <ref> [7] </ref> with rescheduling capability. The prototype consists of a constraint-based scheduler and a user--interface. The former is implemented in C++ with ILOG Solver library 2.0 [4] while the latter is built using Microsoft Visual Basic 3.0. In the following, an overview of the running map tool is presented.
Reference: 8. <author> A.K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> AI Journal, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Violated scheduling rules (or constraints) in an invalid timetable will be located and displayed to the user. The algorithm, shown in figure 1, assumes the existence of a propagation-based constraint solver <ref> [8] </ref> propagate (). The timetable T can be viewed as a set of constraints for all variables in either the form AT i = t a i or DT i = t d i , where AT i is an arrival time and DT i is a departure time. <p> Second, user modifications are not self conflicting but there is no room for other variables to adjust to make the timetable valid. Constraint propagation algorithms are well-known to be incomplete <ref> [8] </ref>. Thus, phase two of the rescheduling algorithm can detect some, but not all, of this kind of conflicts. Theoretically speaking, the enumerating procedure in phase three can guarantee to detect inconsistency but it would usually take impractically long to do so.
Reference: 9. <author> S. Prehn. </author> <title> A railway running map design. </title> <institution> UNU/IIST PRaCoSy Document SP/12/3, International Institute for Software Technology, United Nations University, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: The rate of running trains, both goods and passengers, of this section is high and present management procedures are not adequate with the dramatic development of domestic economy. A running map <ref> [9] </ref> contains information regarding the topology of the railway, train number and classification, arrival and departure time of trains at each station, arrival and departure paths, etc. <p> In section 5, we describe our prototype implementation and sample runs of the tool. We summarize our contribution and shed light on future work in section 6. 2 Preliminaries In the following, we provide informal definitions of necessary terminology according to <ref> [9] </ref> to facilitate subsequent discussions. Names not defined should be self-explanatory or clear from the context. Interested readers can refer to [9] for formal definitions of the same terminology. The topology of a railway system is defined by a collection of named stations and identified lines. <p> We summarize our contribution and shed light on future work in section 6. 2 Preliminaries In the following, we provide informal definitions of necessary terminology according to <ref> [9] </ref> to facilitate subsequent discussions. Names not defined should be self-explanatory or clear from the context. Interested readers can refer to [9] for formal definitions of the same terminology. The topology of a railway system is defined by a collection of named stations and identified lines. We differentiate between the lines within a station and those connecting two stations by referring the former as lines and the latter as tracks. <p> In other words, we can only delay the arrival time or departure time of visits. Given an infeasible timetable, rescheduling is the process of modifying the timetable so as to make the timetable feasible. 2.1 Problem Statement There are six types of scheduling rules <ref> [9] </ref> in our railway system: the speed rule, the station occupancy rule, the station entry rule, the station exit rule, the line time rule, and the stopover rule. Let there be two trains 1 and 2 and two adjacent stations A and B.
Reference: 10. <author> S. Prehn and D. Bjtrner. PRaCoSy: </author> <title> An executive overview. </title> <institution> UNU/IIST PRaCoSy Document par/02/09, International Institute for Software Technology, United Nations University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction The PRaCoSy (People's Republic of China Railway Computing System) project <ref> [10] </ref> is undertaken by the International Institute for Software Technology, United Nations University (UNU/IIST). The aim of the project is to develop skills in software engineering for automation in the Chinese Railways. <p> Recently, Chiang and Hau [1] attempt to combine repair heuristic with several search methods to tackle scheduling problems for general railway systems. There are two on-going projects that aim at automating train scheduling for real-life railway ministries. Our work is a direct outgrowth of the PRaCoSy project <ref> [10] </ref> at UNU/IIST. The latest PRaCoSy running map tool prototype uses constraints only passively to test for constraint violation in their verification engine. The Train Scheduling System (TSS) designed for Taiwan Railway Bureau (TRB) [6] is a knowledge-based interactive train scheduling system incorporating both an automatic and a manual schedulers.
Reference: 11. <author> M. Zweben, E. Davis, B. Daun, and M.J. Deale. </author> <title> Scheduling and rescheduling with iterative repair. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1588-1596, </pages> <month> November/December </month> <year> 1993. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Zweben et al <ref> [11] </ref> tackle this problem using constraint-based iterative repair with heuristics. The resultant GERRY scheduling and rescheduling system is applied to coordinate Space Shuttle Ground Processing. Our work is based on a propagation-based constraint solver. Somewhat related to our work is train scheduling.
References-found: 11

