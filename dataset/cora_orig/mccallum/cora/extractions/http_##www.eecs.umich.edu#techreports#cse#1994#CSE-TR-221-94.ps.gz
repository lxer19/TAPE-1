URL: http://www.eecs.umich.edu/techreports/cse/1994/CSE-TR-221-94.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse94.html
Root-URL: http://www.eecs.umich.edu
Title: --1-- An Attribute-Space Representation and Algorithm for Concurrent Engineering  
Author: Timothy P. Darr and William P. Birmingham 
Address: Room 3402 EECS Building  Ann Arbor, Michigan 48109-2122 USA  
Affiliation: Computer Science and Engineering Division  The University of Michigan Department of Electrical Engineering and Computer Science  
Date: October 1994  
Pubnum: CSE-TR-221-94  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Darr, </author> <title> T.P. and W.P. Birmingham, Automated Design for Concurrent Engineering, </title> <journal> IEEE Expert, </journal> <note> 1994, To appear. </note>
Reference-contexts: The algorithm uses a set of heuristics to rapidly eliminate sets of designs until a solution is found. 2 The Automated Configuration-Design Service (ACDS) This section describes the Automated-Configuration Design Service (ACDS) <ref> [1, 2] </ref>, which is the implementation of our approach. ACDS applies to any design activity where parts are described by attributes. This includes configuration design [3-10], where a designer --4-- selects and connects components from catalogs to provide user-defined functionality subject to performance and feasibility constraints.
Reference: 2. <author> Darr, </author> <title> T.P. and W.P. Birmingham, Concurrent Engineering: An Automated Design-Space Exploration Approach, Concurrent Engineering: Methodology and Applications, </title> <editor> P. Gu and A. Kusiak, Editors, </editor> <booktitle> 1993, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> New York, NY, p. </address> <pages> 91-115. </pages>
Reference-contexts: The algorithm uses a set of heuristics to rapidly eliminate sets of designs until a solution is found. 2 The Automated Configuration-Design Service (ACDS) This section describes the Automated-Configuration Design Service (ACDS) <ref> [1, 2] </ref>, which is the implementation of our approach. ACDS applies to any design activity where parts are described by attributes. This includes configuration design [3-10], where a designer --4-- selects and connects components from catalogs to provide user-defined functionality subject to performance and feasibility constraints. <p> The attribute-space representation of the design space, given in Definitions 1 and 2, is a set of intervals 2 specifying the set of values, over all attributes, for all designs in the design space <ref> [2, 12, 13] </ref>. The attribute-space representation provides a compact, abstract representation of a large number of designs, and facilitates efficient reasoning about sets of design possibilities. <p> The constraint-based decomposition is the subset of the attribute space ([A j ] [A] ) defining the feasible region for C j . 2.4 Dynamic, Distributed Interval Constraint-Satisfaction Problem Formulation We now present the distributed, dynamic interval constraint-satisfaction problem (DDICSP) computational model that forms the foundation of the ACDS approach <ref> [2] </ref>. The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) [14, 15], the interval constraint-satisfaction problem (ICSP) [13, 16], the distributed constraint-satisfaction problem (DCSP) [17, 18], and the dynamic constraint-satisfaction problem [19-21] (DCSP).
Reference: 3. <author> Haworth, </author> <title> M.S., W.P. Birmingham, and D.E. Haworth, Optimal Part Selection, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, 1993, </journal> <volume> Vol. 12, No. 10, </volume> <pages> p. 1611-1617. </pages>
Reference-contexts: ACDS is also able to solve much larger designs (the MDC reported results for only a few small designs). In configuration design systems, Cossack [10], VT [8], AIR-CYL [4], M1 [7], and GOPS <ref> [3] </ref> use a variant of the traditional point-by-point design process where a complete design is generated and modified to resolve constraint violations, or a partial design is generated and extended to resolve constraint violations.
Reference: 4. <author> Brown, D.C. and B. Chandrasekaran, </author> <title> Knowledge and Control for a Mechanical Design Expert System, </title> <journal> IEEE Computer, 1986, </journal> <volume> Vol. 19, No. 7, </volume> <pages> p. 92-100. </pages>
Reference-contexts: ACDS is also able to solve much larger designs (the MDC reported results for only a few small designs). In configuration design systems, Cossack [10], VT [8], AIR-CYL <ref> [4] </ref>, M1 [7], and GOPS [3] use a variant of the traditional point-by-point design process where a complete design is generated and modified to resolve constraint violations, or a partial design is generated and extended to resolve constraint violations.
Reference: 5. <author> Balkany, A., </author> <title> W.P. Birmingham, and I.D. Tommelein, An Analysis of Several Design Tools, </title> <journal> AI EDAM, 1993, </journal> <volume> Vol. 7, No. 1, </volume> <pages> p. 1-17. </pages>
Reference: 6. <editor> Tommelein, I.D., et al., </editor> <title> SightPlan Experiments: Alternate Strategies for Site Layout Design, </title> <journal> ASCE Journal of Computing in Civil Engineering, 1991, </journal> <volume> Vol. 5, No. 1, </volume> <pages> p. 42-63. </pages>
Reference: 7. <author> Gupta, </author> <title> A.P., W.P. Birmingham, and D.P. Siewiorek, Automating the Design of Computer Systems, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, April 1993, </journal> <volume> Vol. 12, No. 4, </volume> <pages> p. 473-487. </pages>
Reference-contexts: ACDS is also able to solve much larger designs (the MDC reported results for only a few small designs). In configuration design systems, Cossack [10], VT [8], AIR-CYL [4], M1 <ref> [7] </ref>, and GOPS [3] use a variant of the traditional point-by-point design process where a complete design is generated and modified to resolve constraint violations, or a partial design is generated and extended to resolve constraint violations.
Reference: 8. <author> Marcus, S., J. Stout, and J. McDermott, </author> <title> VT: An Expert Elevator Designer That Uses Knowledge-based Backtracking, </title> <journal> AI Magazine, 1988, </journal> <volume> Vol. 9, No. 1, </volume> <pages> p. 95-112. </pages>
Reference-contexts: ACDS is also able to solve much larger designs (the MDC reported results for only a few small designs). In configuration design systems, Cossack [10], VT <ref> [8] </ref>, AIR-CYL [4], M1 [7], and GOPS [3] use a variant of the traditional point-by-point design process where a complete design is generated and modified to resolve constraint violations, or a partial design is generated and extended to resolve constraint violations.
Reference: 9. <author> Mittal, S., C.L. Dym, and M. Morjaria, PRIDE: </author> <title> An Expert System for the Design of Paper Handling Systems, </title> <journal> IEEE Computer, 1986, </journal> <volume> Vol. 19, No. 7, </volume> <pages> p. 102-114. </pages>
Reference: 10. <author> Mittal, S. and F. Frayman, COSSACK: </author> <title> A Constraints-Based Expert System for Configuration Tasks, </title> <booktitle> Proceedings of the 2nd International Conference on Applications of AI to Engineering, 1987, </booktitle> <address> Boston, MA. </address>
Reference-contexts: ACDS is also able to solve much larger designs (the MDC reported results for only a few small designs). In configuration design systems, Cossack <ref> [10] </ref>, VT [8], AIR-CYL [4], M1 [7], and GOPS [3] use a variant of the traditional point-by-point design process where a complete design is generated and modified to resolve constraint violations, or a partial design is generated and extended to resolve constraint violations.
Reference: 11. <author> Fishburn, </author> <title> P.C., Utility Theory and Decision Making, </title> <journal> Publications in Operations Research, </journal> <volume> Vol. </volume> <pages> 18, </pages> <address> 1970, New York, </address> <publisher> John Wiley & Sons, Inc., </publisher> <address> p. </address> <pages> 42-46. </pages>
Reference-contexts: Given: A set of distributed electronic catalog agents that represent part catalogs. CA = -ca 1 , ..., ca n - p ji is a part in the catalog represented by ca i . A set of preferentially independent, design attributes that describe the parts <ref> [11] </ref>. A = -a 1 , a 2 , ..., a n -. For all p ji and a k , p ji .a k is the value of attribute a k for part p ji . A linear utility function u (p ji ) [11]. <p> attributes that describe the parts <ref> [11] </ref>. A = -a 1 , a 2 , ..., a n -. For all p ji and a k , p ji .a k is the value of attribute a k for part p ji . A linear utility function u (p ji ) [11]. For all p ji , p ji .utility = u (p ji ) is a value representing the utility of p ji . A set of distributed constraint agents that represent feasibility constraints. C = -C 1 , C 2 , ..., C p -.
Reference: 12. <author> Ward, A.C., T. Lozano-Perez, and W. Seering, </author> <title> Extending the Constraint Propagation of Intervals, </title> <journal> AI EDAM, 1990, </journal> <volume> Vol. 4, No. 1, </volume> <pages> p. 47-54. </pages>
Reference-contexts: The attribute-space representation of the design space, given in Definitions 1 and 2, is a set of intervals 2 specifying the set of values, over all attributes, for all designs in the design space <ref> [2, 12, 13] </ref>. The attribute-space representation provides a compact, abstract representation of a large number of designs, and facilitates efficient reasoning about sets of design possibilities. <p> The bid agent hides the effects of the problem combinatorics through concurrency. In a large number of cases, these factors make the problem tractable. 4 Related Work One of the first set-based design system is the Mechanical Design Compiler (MDC) [32]. The MDC uses a labeled-interval calculus (LIC) <ref> [12] </ref> to represent sets of designs and to make inferences about and eliminate sets of designs. ACDS uses constraints to concurrently identify sets of designs to eliminate to bring the current space of designs within the feasible space.
Reference: 13. <author> Hyvonen, E., </author> <title> Constraint reasoning based on interval arithmetic: the tolerance propagation approach, </title> <journal> Artificial Intelligence, December 1992, </journal> <volume> Vol. 58, No. </volume> <pages> 1-3, </pages> <address> p. </address> <pages> 71-112. </pages>
Reference-contexts: The attribute-space representation of the design space, given in Definitions 1 and 2, is a set of intervals 2 specifying the set of values, over all attributes, for all designs in the design space <ref> [2, 12, 13] </ref>. The attribute-space representation provides a compact, abstract representation of a large number of designs, and facilitates efficient reasoning about sets of design possibilities. <p> The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) [14, 15], the interval constraint-satisfaction problem (ICSP) <ref> [13, 16] </ref>, the distributed constraint-satisfaction problem (DCSP) [17, 18], and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. Interval arithmetic is well-defined for the addition, subtraction, multiplication and division (when the denominator is non-zero) operators [22]. <p> cable_select elevator.maxcapacity &gt; 4000 cable != cbl3 motor_select true motor.hp &lt; elevator.maxcapacity /250.0 motor.hp &gt; elevator.maxcapacity / 500.0 cable_length true cable.length (elevator.shaftht cab. ht) 2 + (elevator.shaftwd / 2) 2 + 20 2.5 Network Consistency Since the DDICSP is a derivative of the CSP, node- and arc-consistency operations are applicable <ref> [13, 14, 16, 23-27] </ref>. Definition 4: Let C j be a constraint whose arity is one. C j is node-consistent iff for all a k [a ik ] ([a ik ] = [A j ]), C j (a k ) is satisfied.
Reference: 14. <author> Mackworth, </author> <title> A.K., Consistency in Networks of Relations, </title> <journal> Artificial Intelligence, February 1977, </journal> <volume> Vol. 8, No. 1, </volume> <pages> p. 99-118. </pages>
Reference-contexts: The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) <ref> [14, 15] </ref>, the interval constraint-satisfaction problem (ICSP) [13, 16], the distributed constraint-satisfaction problem (DCSP) [17, 18], and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. <p> cable_select elevator.maxcapacity &gt; 4000 cable != cbl3 motor_select true motor.hp &lt; elevator.maxcapacity /250.0 motor.hp &gt; elevator.maxcapacity / 500.0 cable_length true cable.length (elevator.shaftht cab. ht) 2 + (elevator.shaftwd / 2) 2 + 20 2.5 Network Consistency Since the DDICSP is a derivative of the CSP, node- and arc-consistency operations are applicable <ref> [13, 14, 16, 23-27] </ref>. Definition 4: Let C j be a constraint whose arity is one. C j is node-consistent iff for all a k [a ik ] ([a ik ] = [A j ]), C j (a k ) is satisfied.
Reference: 15. <author> Kumar, V., </author> <title> Algorithms for Constraint-Satisfaction Problems: A Survey, </title> <journal> AI Magazine, Spring 1992, </journal> <volume> Vol. 13, No. 1, </volume> <pages> p. 32-44. </pages> <month> --20-- </month>
Reference-contexts: The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) <ref> [14, 15] </ref>, the interval constraint-satisfaction problem (ICSP) [13, 16], the distributed constraint-satisfaction problem (DCSP) [17, 18], and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints.
Reference: 16. <author> Davis, E., </author> <title> Constraint Propagation with Interval Labels, </title> <journal> Artificial Intelligence, July 1987, </journal> <volume> Vol. 32, No. 3, </volume> <pages> p. 281-331. </pages>
Reference-contexts: The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) [14, 15], the interval constraint-satisfaction problem (ICSP) <ref> [13, 16] </ref>, the distributed constraint-satisfaction problem (DCSP) [17, 18], and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. Interval arithmetic is well-defined for the addition, subtraction, multiplication and division (when the denominator is non-zero) operators [22]. <p> cable_select elevator.maxcapacity &gt; 4000 cable != cbl3 motor_select true motor.hp &lt; elevator.maxcapacity /250.0 motor.hp &gt; elevator.maxcapacity / 500.0 cable_length true cable.length (elevator.shaftht cab. ht) 2 + (elevator.shaftwd / 2) 2 + 20 2.5 Network Consistency Since the DDICSP is a derivative of the CSP, node- and arc-consistency operations are applicable <ref> [13, 14, 16, 23-27] </ref>. Definition 4: Let C j be a constraint whose arity is one. C j is node-consistent iff for all a k [a ik ] ([a ik ] = [A j ]), C j (a k ) is satisfied.
Reference: 17. <author> Yokoo, M., et al., </author> <title> Distributed Constraint Satisfaction for Formalizing Distributed Problem Solving, </title> <booktitle> Twelfth International Conference on Distributed Computing Systems, 1992, </booktitle> <address> Yokohama, Japan, </address> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> CA, p. </address> <pages> 614-621. </pages>
Reference-contexts: The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) [14, 15], the interval constraint-satisfaction problem (ICSP) [13, 16], the distributed constraint-satisfaction problem (DCSP) <ref> [17, 18] </ref>, and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. Interval arithmetic is well-defined for the addition, subtraction, multiplication and division (when the denominator is non-zero) operators [22].
Reference: 18. <author> Collin, Z., R. Dechter, and S. Katz, </author> <title> On the Feasibility of Distributed Constraint Satisfaction, </title> <booktitle> 12th International Conference on Artificial Intelligence (IJCAI-91), 1991, </booktitle> <address> Sydney, Australia, </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, p. </address> <pages> 318-324. </pages>
Reference-contexts: The DDICSP is an amalgamation of the constraint satisfaction problem (CSP) [14, 15], the interval constraint-satisfaction problem (ICSP) [13, 16], the distributed constraint-satisfaction problem (DCSP) <ref> [17, 18] </ref>, and the dynamic constraint-satisfaction problem [19-21] (DCSP). The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. Interval arithmetic is well-defined for the addition, subtraction, multiplication and division (when the denominator is non-zero) operators [22].
Reference: 19. <author> Mittal, S. and B. Falkenhainer, </author> <title> Dynamic Constraint Satisfaction Problems, </title> <booktitle> Proceedings of the Eighth National Conference on Artificial Intelligence (AAAI-90), 1990, p. </booktitle> <pages> 25-32. </pages>
Reference: 20. <author> Bowen, J. and D. Bahler, </author> <title> Conditional Existence of Variables in Generalized Constraint Networks, </title> <booktitle> Ninth National Conference on Artificial Intelligence (AAAI-91), 1991, p. </booktitle> <pages> 215-220. </pages>
Reference: 21. <author> Bessiere, C., </author> <title> Arc-Consistency in Dynamic Constraint Satisfaction Problems, </title> <booktitle> Ninth National Conference on Artificial Intelligence (AAAI-91), 1991, </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <address> p. </address> <pages> 221-226. </pages>
Reference: 22. <author> Navinchandra, D. and J.R. Rinderle, </author> <title> Interval Approaches for Concurrent Evaluation of Design Constraints, Concurrent Product and Process Design, 1990, </title> <journal> DE-vol. </journal> <volume> 21, </volume> <pages> 101-108. </pages>
Reference-contexts: The ICSP assumes that domain values are intervals and uses standard interval arithmetic to evaluate constraints. Interval arithmetic is well-defined for the addition, subtraction, multiplication and division (when the denominator is non-zero) operators <ref> [22] </ref>. We define the DDICSP as follows: CA = -ca 1 , ca 2 , ..., ca m - is a set of part catalogs (variables in CSP terminology).
Reference: 23. <author> Mackworth, </author> <title> A.K. and E.C. Freuder, The Complexity of Some Polynomial Network Consistency Algorithms for Constraint Satisfaction Problems, </title> <journal> Artificial Intelligence, January 1985, </journal> <volume> Vol. 25, No. 1, </volume> <pages> p. 65-74. </pages>
Reference: 24. <author> Mohr, R. and T.C. Henderson, </author> <title> Arc and Path Consistency Revisited, </title> <journal> Artificial Intelligence, March 1986, </journal> <volume> Vol. 28, No. 2, </volume> <pages> p. 225-233. </pages>
Reference: 25. <author> Deville, Y. and P. Van Hentenryck, </author> <title> An Efficient Arc Consistency Algorithm for a Class of CSP Problems, </title> <booktitle> 12th International Joint Conference on Artificial Intelligence, 1991, </booktitle> <address> Sydney, Australia, </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, p. </address> <pages> 325-330. </pages>
Reference: 26. <author> Van Hentenryck, P., Y. Deville, and C.-M. Teng, </author> <title> A generic arc-consistency algorithm and its specializations, </title> <journal> Artificial Intelligence, 1992, </journal> <volume> Vol. 57, No. </volume> <pages> 2-3, </pages> <address> p. </address> <pages> 291-321. </pages>
Reference: 27. <author> Faltings, B., </author> <title> Arc-consistency for continuous variables, </title> <journal> Artificial Intelligence, February 1994, </journal> <volume> Vol. 65, No. 2, </volume> <pages> p. 363-376. </pages> <note> 28. </note> <author> van Beek, P., </author> <title> On the Minimality and Decomposability of Constraint Networks, </title> <booktitle> Tenth National Conference on Artificial Intelligence (AAAI-92), 1992, p. </booktitle> <pages> 447-452. </pages>
Reference: 29. <author> Dechter, R., I. Meiri, and J. Pearl, </author> <title> Temporal constraint networks, </title> <journal> Artificial Intelligence, May 1991, </journal> <volume> Vol. 49, No. </volume> <pages> 1-3, </pages> <address> p. </address> <pages> 61-95. </pages>
Reference-contexts: Complete-network decomposability allows the generation of a solution without backtracking. A network is completely decomposable if every assignment of values to variables is a feasible solution <ref> [28, 29] </ref>. Definition 7: C j is decomposable iff for all a m [a mk ] and for all [a mk ] [A j ], C j (a 1 , ..., a n ) is satisfied.
Reference: 30. <author> Balkany, A., W.P. Birmingham, and J.T. Runkel, </author> <title> Solving Sisyphus by Design, </title> <journal> International Journal of Human-Computer Studies, 1994, </journal> <volume> Vol. 40, </volume> <pages> p. 221-241. </pages>
Reference-contexts: Chronological backtracking is complete (i.e. it will find a solution if one exists), therefore, ACDS is also complete since it maps directly onto chronological backtracking. 3.4 Discussion The complexity of the problem being solved is O (|parts| |functions| ) (Balkany et. al. <ref> [30] </ref> gives a more exact complexity calculation for a class of configuration problems), where |parts| is the average number of parts in all catalogs and |functions| is the number of functions to implement. For even relatively small problems, the combinatorics many render the problem intractable.
Reference: 31. <author> Bowen, J., P. O'Grady, and L. Smith, </author> <title> A constraint programming language for Life-Cycle Engineering, </title> <journal> Artificial Intelligence in Engineering, October 1990, </journal> <volume> Vol. 5, No. 4, </volume> <pages> p. 206-220. </pages>
Reference-contexts: For even relatively small problems, the combinatorics many render the problem intractable. Some researchers have thus concluded that automated design is impractical or impossible <ref> [31] </ref>. Our algorithm manages the complexity in the following ways. The attribute-space representation in the nominal case drastically reduces |parts| by abstracting individual components into a more compact representation.
Reference: 32. <author> Ward, </author> <title> A.C. and W.P. Seering, Quantitative inference in a mechanical design compiler, </title> <journal> ASME Journal of Mechanical Design, 1993, </journal> <volume> Vol. 115, No. 1, </volume> <pages> p. 29-35. </pages>
Reference-contexts: The bid agent hides the effects of the problem combinatorics through concurrency. In a large number of cases, these factors make the problem tractable. 4 Related Work One of the first set-based design system is the Mechanical Design Compiler (MDC) <ref> [32] </ref>. The MDC uses a labeled-interval calculus (LIC) [12] to represent sets of designs and to make inferences about and eliminate sets of designs. ACDS uses constraints to concurrently identify sets of designs to eliminate to bring the current space of designs within the feasible space.
Reference: 33. <author> Cutkosky, </author> <title> M.R., </title> <editor> et al., </editor> <title> PACT: An Experiment in Integrating Concurrent Engineering Systems, </title> <journal> IEEE Computer, January 1993, </journal> <volume> Vol. 26, No. 1, </volume> <pages> p. 28-37. </pages> <month> --21-- </month>
Reference-contexts: Several agent-based concurrent-engineering systems have been developed to help aid a team of designers throughout the product life cycle. Among these are PACT (a testbed for building large-scale CE systems) <ref> [33] </ref>, DesignWorld [34], Galileo [35] and First-Link (cable 9 Proposals are not generated in this way in reality. --17-- harness configuration) [36] all based on the framework developed in Pan [37].
Reference: 34. <author> Huyhn, </author> <title> P.N., M.R. </title> <editor> Genesereth, and R. Letsinger, </editor> <booktitle> Automated Concurrent Engineering in Designworld, IEEE Computer, January 1993, </booktitle> <volume> Vol. 26, No. 1, </volume> <pages> p. 74-76. </pages>
Reference-contexts: Several agent-based concurrent-engineering systems have been developed to help aid a team of designers throughout the product life cycle. Among these are PACT (a testbed for building large-scale CE systems) [33], DesignWorld <ref> [34] </ref>, Galileo [35] and First-Link (cable 9 Proposals are not generated in this way in reality. --17-- harness configuration) [36] all based on the framework developed in Pan [37].
Reference: 35. <author> Bowen, J. and D. Bahler, </author> <title> Supporting Multiple Perspectives: A constraint-based approach to concurrent engineering, </title> <booktitle> Artificial Intelligence in Design '92, 1992, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> p. </address> <pages> 85-96. </pages>
Reference-contexts: Several agent-based concurrent-engineering systems have been developed to help aid a team of designers throughout the product life cycle. Among these are PACT (a testbed for building large-scale CE systems) [33], DesignWorld [34], Galileo <ref> [35] </ref> and First-Link (cable 9 Proposals are not generated in this way in reality. --17-- harness configuration) [36] all based on the framework developed in Pan [37].
Reference: 36. <author> Park, H., et al., </author> <title> An agent-based approach to concurrent cable harness design, </title> <journal> AI EDAM, 1994, </journal> <volume> Vol. 8, No. 1, </volume> <pages> p. 45-61. </pages>
Reference-contexts: Among these are PACT (a testbed for building large-scale CE systems) [33], DesignWorld [34], Galileo [35] and First-Link (cable 9 Proposals are not generated in this way in reality. --17-- harness configuration) <ref> [36] </ref> all based on the framework developed in Pan [37]. These systems also employ the point-by-point approach to create a design and assume that agents should primarily fill the role of assistants to human designers.
Reference: 37. <author> Pan, J.Y.C. and J.M. Tenenbaum, </author> <title> An Intelligent Agent Framework for Enterprise Integration, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, 1991, </journal> <volume> Vol. 21, No. 6, </volume> <pages> p. 1391-1408. </pages>
Reference-contexts: Among these are PACT (a testbed for building large-scale CE systems) [33], DesignWorld [34], Galileo [35] and First-Link (cable 9 Proposals are not generated in this way in reality. --17-- harness configuration) [36] all based on the framework developed in Pan <ref> [37] </ref>. These systems also employ the point-by-point approach to create a design and assume that agents should primarily fill the role of assistants to human designers. The ACDS general model of design and the design process allows its electronic agents to take a more active role.
Reference: 38. <author> Conry, S.E., et al., </author> <title> Multistage Negotiation for Distributed Constraint Satisfaction, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, 1991, </journal> <volume> Vol. 21, No. 6, </volume> <pages> p. 1462-1477. </pages>
Reference-contexts: In addition, a shared utility function provided by the designer provides the gradient necessary to search the design space in the most promising paths. Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation <ref> [38, 39] </ref>, distributed, constrained heuristic search [40], TEAM (parametric design of steam condensers) [41, 42], DFI (steel-connection design) [43]. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints.
Reference: 39. <author> Lesser, </author> <title> V.R., A Retrospective of FA/C Distributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, 1991, </journal> <volume> Vol. 21, No. 6, </volume> <pages> p. 1347-1362. </pages>
Reference-contexts: In addition, a shared utility function provided by the designer provides the gradient necessary to search the design space in the most promising paths. Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation <ref> [38, 39] </ref>, distributed, constrained heuristic search [40], TEAM (parametric design of steam condensers) [41, 42], DFI (steel-connection design) [43]. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints.
Reference: 40. <author> Sycara, K., et al., </author> <title> Distributed Constrained Heuristic Search, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, 1991, </journal> <volume> Vol. 21, No. 6, </volume> <pages> p. 1446-1461. </pages>
Reference-contexts: Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation [38, 39], distributed, constrained heuristic search <ref> [40] </ref>, TEAM (parametric design of steam condensers) [41, 42], DFI (steel-connection design) [43]. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints. By treating constraints as active problem-solving agents, ACDS defines all necessary communication paths a priori.
Reference: 41. <author> Lander, S.E. and V.R. Lesser, </author> <title> Negotiated Search: Organizing Cooperative Search Among Heterogeneous Expert Agents, </title> <booktitle> Proceedings of the Fifth International Symposium on Artificial Intelligence, Applications in Maufacturing and Robotics, 1992, </booktitle> <address> Cancun, Mexico, p. </address> <pages> 351-358. </pages>
Reference-contexts: Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation [38, 39], distributed, constrained heuristic search [40], TEAM (parametric design of steam condensers) <ref> [41, 42] </ref>, DFI (steel-connection design) [43]. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints. By treating constraints as active problem-solving agents, ACDS defines all necessary communication paths a priori.
Reference: 42. <author> Lander, S.E. and V.R. Lesser, </author> <title> Understanding the Role of Negotiation in Distributed Search Among Heterogeneous Agents, </title> <booktitle> Proceedings of the 13th International Conference on Artificial Intelligence, 1993, </booktitle> <address> Cambery, France, p. </address> <pages> 438-444. </pages>
Reference-contexts: Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation [38, 39], distributed, constrained heuristic search [40], TEAM (parametric design of steam condensers) <ref> [41, 42] </ref>, DFI (steel-connection design) [43]. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints. By treating constraints as active problem-solving agents, ACDS defines all necessary communication paths a priori.
Reference: 43. <author> Werkman, K.J., </author> <title> Multiple Agent Cooperative Design Evaluation Using Negotiation, </title> <booktitle> Artificial Intelligence in Design '94, 1992, </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <address> p. </address> <pages> 161-180. </pages>
Reference-contexts: Distributed AI approaches are characterized by the exchange of local, partial information among a set of independent agents. Among these systems are multistage negotiation [38, 39], distributed, constrained heuristic search [40], TEAM (parametric design of steam condensers) [41, 42], DFI (steel-connection design) <ref> [43] </ref>. Agents in these systems are usually responsible for using their unique domain knowledge to both assign values to variables and evaluate constraints. By treating constraints as active problem-solving agents, ACDS defines all necessary communication paths a priori.
Reference: 44. <author> Bradley, S.R. and A.M. Agogino, </author> <title> An Intelligent Real Time Design Methodology for Catalog Selection, </title> <booktitle> Design Theory and Methodology - ASME 1991, 1991, p. </booktitle> <pages> 201-208. </pages>
Reference-contexts: ACDS represents partial or uncertain information explicitly in the form of intervals, and provides an explicit repository for all communication and conflict resolution in the form of constraints. Finally, Bradley and Agogino <ref> [44, 45] </ref> present a system for single-part/single-function electronic-part selection. This system builds a model of designer preferences, which is used to select a part subject to a set of constraints.
Reference: 45. <author> Bradley, S.R. and A.M. Agogino, </author> <title> Computer-Assisted Catalog Selection With Multiple Objectives, </title> <booktitle> Design Theory and Methodology - ASME 1993, 1993, p. </booktitle> <pages> 139-147. </pages>
Reference-contexts: ACDS represents partial or uncertain information explicitly in the form of intervals, and provides an explicit repository for all communication and conflict resolution in the form of constraints. Finally, Bradley and Agogino <ref> [44, 45] </ref> present a system for single-part/single-function electronic-part selection. This system builds a model of designer preferences, which is used to select a part subject to a set of constraints.
Reference: 46. <author> Runkel, J.T. </author> <title> and W.P. Birmingham, Solving VT By Reuse, </title> <booktitle> Proceedings of the 8th Banff Knowledge-Acquisition for Knowledge-Based Systems Workshop, 1994, </booktitle> <address> Banff, </address> <institution> Alberta, Canada, SRDG Publications, Department of Computer Science, University of Calgary, Calgary, Alberta, </institution> <address> Canada, T2N 1N4, p. 42.1-42.28. </address>
Reference-contexts: The dotted line in represents the time required to find a solution once the network is established. The runtime for this problem using ACDS compares outperforms a uniprocessor solution which took 10 minutes <ref> [46] </ref>. 6 Summary To achieve the goals of concurrent engineering when applied to large-scale, configuration design, a fundamental change in current design processes is needed .
References-found: 45

