URL: http://www.wi.leidenuniv.nl/~gusz/grcolea.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/~jvhemert/csp-ea/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fgusz,jvdhauwg@wi.leidenuniv.nl  
Title: Adaptive penalties for evolutionary graph coloring  
Author: A.E. Eiben, J.K. van der Hauw 
Address: Netherlands,  
Affiliation: Leiden University, The  
Abstract: In this paper we consider a problem independent constraint handling mechanism, Stepwise Adaptation of Weights (SAW) and show its working on graph coloring problems. SAW-ing technically belongs to the penalty function based approaches and amounts to modifying the penalty function during the search. We show that it has a twofold benefit. First, it proves to be rather insensitive to its technical parameters, thereby providing a general, problem independent way to handle constrained problems. Second, it leads to superior EA performance. In an extensive series of comparative experiments we show that the SAW-ing EA outperforms a powerful graph coloring heuristic algorithm, DSatur, on the hardest graph instances and has a linear scale-up behaviour.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Blum. </author> <title> An O(n 0:4 )-approximation algorithm for 3-coloring (and improved approximation algorithms for k-coloring). </title> <booktitle> In Proceedings of the 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 535-542, </pages> <address> New York, 1989. </address> <publisher> ACM. </publisher>
Reference-contexts: To compare the performance of our EAs with traditional graph coloring algorithms we have looked for a strong competitor. There are many (heuristic) graph coloring algorithms in the literature, for instance an O (n 0:4 )-approximation algorithm by Blum <ref> [1] </ref>, the simple Greedy algorithm [20], DSatur from Brelaz [2], Iterated Greedy (IG) from Culberson and Luo [6], XRLF from Johnson et al. [19]. We have chosen DSatur as competitor for its high performance.
Reference: 2. <author> D. Brelaz. </author> <title> New methods to color vertices of a graph. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 251-256, </pages> <year> 1979. </year>
Reference-contexts: To compare the performance of our EAs with traditional graph coloring algorithms we have looked for a strong competitor. There are many (heuristic) graph coloring algorithms in the literature, for instance an O (n 0:4 )-approximation algorithm by Blum [1], the simple Greedy algorithm [20], DSatur from Brelaz <ref> [2] </ref>, Iterated Greedy (IG) from Culberson and Luo [6], XRLF from Johnson et al. [19]. We have chosen DSatur as competitor for its high performance.
Reference: 3. <author> G.J. Chaitin. </author> <title> Register allocation and spilling via graph coloring. </title> <booktitle> In Proceedings of the ACM SIGPLAN 82 Symposium on Compiler Construction, </booktitle> <pages> pages 98-105. </pages> <publisher> ACM Press, </publisher> <year> 1982. </year>
Reference-contexts: This problem in general is NP-complete [16] making it theoretically interesting; in the meanwhile there are many specific applications like register allocation <ref> [3] </ref>, time-tabling [25], scheduling and printed circuit testing [17].
Reference: 4. <author> P. Cheeseman, B. Kenefsky, and W. M. Taylor. </author> <title> Where the really hard problems are. </title> <booktitle> In Proceedings of the IJCAI-91, </booktitle> <pages> pages 331-337, </pages> <year> 1991. </year>
Reference-contexts: Our tests showed that they are also tough for 3-coloring. Thorough this paper we will denote graph instances by, for example G eq;n=500;p=0:10;s=1 , standing for an equi-partite 3-colorable graph with 500 vertices, edge probability 10% and seed 1 for the random generator. Cheeseman et al. <ref> [4] </ref> found that NP-complete problems have an `order parameter' and that the hard problems occur at a critical value or phase transition of such a parameter. For graph coloring, this order parameter is the edge probability or edge connectivity p. <p> For graph coloring, this order parameter is the edge probability or edge connectivity p. Theoretical estimations of Clearwater and Hogg [5] on the location of the phase transition, supported by empirical validation, improved the estimates in <ref> [4] </ref> and indicate that the hardest graphs are those with 1 Source code in C is available via ftp://ftp.cs.ualberta.ca/pub/joe/ GraphGenerator/generate.tar.gz an edge connectivity around 7=n - 8=n. Our experiments confirmed these values. We will use these values in the present investigation and study large graphs with up to 1500 vertices.
Reference: 5. <author> S.H. Clearwater and T. Hogg. </author> <title> Problem structure heuristics and scaling behavior for genetic algorithms. </title> <journal> Artificial Intelligence, </journal> <volume> 81 </volume> <pages> 327-347, </pages> <year> 1996. </year>
Reference-contexts: Cheeseman et al. [4] found that NP-complete problems have an `order parameter' and that the hard problems occur at a critical value or phase transition of such a parameter. For graph coloring, this order parameter is the edge probability or edge connectivity p. Theoretical estimations of Clearwater and Hogg <ref> [5] </ref> on the location of the phase transition, supported by empirical validation, improved the estimates in [4] and indicate that the hardest graphs are those with 1 Source code in C is available via ftp://ftp.cs.ualberta.ca/pub/joe/ GraphGenerator/generate.tar.gz an edge connectivity around 7=n - 8=n. Our experiments confirmed these values.
Reference: 6. <author> J.C. Culberson and F. Luo. </author> <title> Exploring the k-colorable landscape with iterated greedy. In Second DIMACS Challenge, </title> <journal> Discrete Mathematics and Theoretical Computer Science. AMS, </journal> <note> 1995. Available by http://web.cs.ualberta.ca/~joe/. </note>
Reference-contexts: Determining the chromatic number of these two types of graphs is very difficult, because there is no information a (heuristic) coloring algorithm could rely on, <ref> [6] </ref>. Our tests showed that they are also tough for 3-coloring. Thorough this paper we will denote graph instances by, for example G eq;n=500;p=0:10;s=1 , standing for an equi-partite 3-colorable graph with 500 vertices, edge probability 10% and seed 1 for the random generator. <p> There are many (heuristic) graph coloring algorithms in the literature, for instance an O (n 0:4 )-approximation algorithm by Blum [1], the simple Greedy algorithm [20], DSatur from Brelaz [2], Iterated Greedy (IG) from Culberson and Luo <ref> [6] </ref>, XRLF from Johnson et al. [19]. We have chosen DSatur as competitor for its high performance.
Reference: 7. <author> L. Davis. </author> <title> Handbook of Genetic Algorithms. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1991. </year>
Reference-contexts: We restrict our investigation to graph 3-coloring problems that are pure constraint satisfaction problems, unlike the constrained optimization version as studied by for instance Davis <ref> [7] </ref>. To evaluate the performance of our EA we also run a powerful traditional graph coloring algorithm on the same problems. The final comparison shows that the SAW-ing EA is superior to the heuristic method on the hardest problem instances. The rest of the paper is organized as follows.
Reference: 8. <editor> A.E. Eiben. Multi-parent recombination. In T. Back, D. Fogel, and Z. Michalewicz, editors, </editor> <booktitle> Handbook of Evolutionary Computation. </booktitle> <publisher> Institute of Physics Publishing Ltd, Bristol and Oxford University Press, </publisher> <address> New York, </address> <year> 1997. </year> <note> Section C3.3.7, to appear in the 1st supplement. </note>
Reference-contexts: Using integer representation, each gene in the chromosome belongs to one node and can take three different values as alleles (with the obvious semantics). Applying heavy mixing by multi-point crossovers and multi-parent crossovers, <ref> [8] </ref>, improves the performance. In Figure 1 we give an illustration for the graph G eq;n=200;p=0:08;s=5 , depicting the Average Number of Evaluations to a Solution (AES) as a function of the number of parents in diagonal crossover, [8], respectively as a function of the number of crossover points in m-point <p> Applying heavy mixing by multi-point crossovers and multi-parent crossovers, <ref> [8] </ref>, improves the performance. In Figure 1 we give an illustration for the graph G eq;n=200;p=0:08;s=5 , depicting the Average Number of Evaluations to a Solution (AES) as a function of the number of parents in diagonal crossover, [8], respectively as a function of the number of crossover points in m-point crossover. The results are obtained by averaging the outcomes of 100 independent runs. Integer representation, however, turned out to be inferior to order-based representation.
Reference: 9. <author> A.E. Eiben, P.-E. Raue, and Zs. Ruttkay. </author> <title> Constrained problems. </title> <editor> In L. Chambers, editor, </editor> <booktitle> Practical Handbook of Genetic Algorithms, </booktitle> <pages> pages 307-365. </pages> <publisher> CRC Press, </publisher> <year> 1995. </year>
Reference-contexts: Depending on when the weights are updated we can distinguish an off-line (after the run, used in the next run) and an on-line (during the run) version of this technique. In <ref> [9] </ref> and [10] the off-line version was applied, here we will use the on-line version. In particular, the EA starts with a standard setting of w i 1 for each node.
Reference: 10. <author> A.E. Eiben and Zs. Ruttkay. </author> <title> Self-adaptivity for constraint satisfaction: Learning penalty functions. </title> <booktitle> In Proceedings of the 3rd IEEE Conference on Evolutionary Computation, </booktitle> <pages> pages 258-261. </pages> <publisher> IEEE, IEEE Press, </publisher> <year> 1996. </year>
Reference-contexts: Depending on when the weights are updated we can distinguish an off-line (after the run, used in the next run) and an on-line (during the run) version of this technique. In [9] and <ref> [10] </ref> the off-line version was applied, here we will use the on-line version. In particular, the EA starts with a standard setting of w i 1 for each node.
Reference: 11. <author> A.E. Eiben and Zs. Ruttkay. </author> <title> Constraint satisfaction problems. </title> <editor> In Th. Back, D. Fogel, and M. Michalewicz, editors, </editor> <booktitle> Handbook of Evolutionary Algorithms, pages C5.7:1-C5.7:8. </booktitle> <publisher> IOP Publishing Ltd. and Oxford University Press, </publisher> <year> 1997. </year>
Reference-contexts: The advantage of such a (quasi) continuous shift of attention is that it finally guides the population through the search space, escaping local optima. At the moment there are a number of evolutionary constraint handling tech-niques known and practicized on constraint satisfaction as well as on constrained optimization problems, <ref> [11, 26, 27] </ref>. Penalty functions embody a natural and simple way of treating constraints, but have some drawbacks. One of them is that the composition of the penalty function has a great impact on the EA performance, in the meanwhile penalty functions are mostly designed in an ad hoc manner.
Reference: 12. <author> A.E. Eiben and J.K. van der Hauw. </author> <title> Graph coloring with adaptive evolutionary algorithms. </title> <type> Technical Report TR-96-11, </type> <institution> Leiden University, </institution> <month> August </month> <year> 1996. </year> <note> also available as http:// www.wi.leidenuniv.nl/~gusz/graphcol.ps.gz. </note>
Reference-contexts: These tests were intended to check the hypotheses in [14, 15, 24] on the disadvantageous effects of crossover in standard representations, as well as to find a good setup for our algorithm. For a full overview of the test results see <ref> [12] </ref>, here we only present the most interesting findings. It turned out that mixing information of different individuals by crossover is not as bad as is generally assumed. <p> Space limitations prevent us from presenting all figures; the inter Fig. 4. Comparison of SR (left)and AES (right) for n = 200. ested reader is again referred to <ref> [12] </ref>. Here we give an illustration on the hardest case: flat 3-colorable graphs. Comparative curves of success rates and the number of evaluations to a solution are given in Figure 4 and Figure 5 for n = 200 and n = 1000 respectively.
Reference: 13. <author> A.E. Eiben and J.K. van der Hauw. </author> <title> Solving 3-SAT with adaptive Genetic Algorithms. </title> <booktitle> In Proceedings of the 4th IEEE Conference on Evolutionary Computation, </booktitle> <pages> pages 81-86. </pages> <publisher> IEEE, IEEE Press, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction In this paper we consider an adaptive mechanism for constraint handling (called SAW-ing) on graph 3-coloring problems. In <ref> [13] </ref> SAW-ing was applied to 3SAT problems and the resulting EA turned out to be superior to WGSAT, the best heuristics for 3SAT problems known at the moment.
Reference: 14. <author> E. Falkenauer. </author> <title> A new representation and operators for genetic algorithms applied to grouping problems. </title> <journal> Evolutionary Computation, </journal> <volume> 2(2) </volume> <pages> 123-144, </pages> <year> 1994. </year>
Reference-contexts: In this paper we show that this is not the case. Graph coloring falls in the category of grouping problems. Several authors <ref> [14, 15, 24] </ref> have considered grouping problems and gave arguments that they cannot be successfully solved by usual genetic algorithms, e.g. using traditional representations and the corresponding standard operators, and proposed special representation and crossovers for such problems. <p> These tests were intended to check the hypotheses in <ref> [14, 15, 24] </ref> on the disadvantageous effects of crossover in standard representations, as well as to find a good setup for our algorithm. For a full overview of the test results see [12], here we only present the most interesting findings.
Reference: 15. <author> E. Falkenauer. </author> <title> Solving equal piles with the grouping genetic algorithm. </title> <editor> In S. Forrest, editor, </editor> <booktitle> Proceedings of the 6th International Conference on Genetic Algorithms, </booktitle> <pages> pages 492-497. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: In this paper we show that this is not the case. Graph coloring falls in the category of grouping problems. Several authors <ref> [14, 15, 24] </ref> have considered grouping problems and gave arguments that they cannot be successfully solved by usual genetic algorithms, e.g. using traditional representations and the corresponding standard operators, and proposed special representation and crossovers for such problems. <p> These tests were intended to check the hypotheses in <ref> [14, 15, 24] </ref> on the disadvantageous effects of crossover in standard representations, as well as to find a good setup for our algorithm. For a full overview of the test results see [12], here we only present the most interesting findings.
Reference: 16. <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freedman and Co., </publisher> <year> 1979. </year>
Reference-contexts: This problem in general is NP-complete <ref> [16] </ref> making it theoretically interesting; in the meanwhile there are many specific applications like register allocation [3], time-tabling [25], scheduling and printed circuit testing [17].
Reference: 17. <author> M.R. Garey, D.S. Johnson, and H.C. </author> <title> So. An application of graph coloring to printed circuit testing. </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> CAS-23:591-599, </volume> <year> 1976. </year>
Reference-contexts: This problem in general is NP-complete [16] making it theoretically interesting; in the meanwhile there are many specific applications like register allocation [3], time-tabling [25], scheduling and printed circuit testing <ref> [17] </ref>.
Reference: 18. <author> R. Hinterding, Z. Michalewicz, and A.E. Eiben. </author> <title> Adaptation in Evolutionary Computation: a survey. </title> <booktitle> In Proceedings of the 4th IEEE Conference on Evolutionary Computation, </booktitle> <pages> pages 65-69. </pages> <publisher> IEEE Service Center, </publisher> <year> 1997. </year>
Reference-contexts: Similar mechanisms have been proposed earlier in another context by, for instance, Moris [21] and Selman and Kautz [22]. In evo--lutinary computation varying parameters can be divided into three classes <ref> [18] </ref>, dynamic, adaptive and self-adaptive parameter control. Our approach falls in the adaptive category. The general idea is now implemented by repeatedly checking which nodes in the best individual 3 violate constraints and raising the penalty w i belonging to these nodes.
Reference: 19. <author> D.S. Johnson, C.R. Aragon, L.A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing: An experimental evaluation; part II, graph coloring and number partitioning. </title> <journal> Operations Research, </journal> <volume> 39(3) </volume> <pages> 378-406, </pages> <year> 1991. </year>
Reference-contexts: There are many (heuristic) graph coloring algorithms in the literature, for instance an O (n 0:4 )-approximation algorithm by Blum [1], the simple Greedy algorithm [20], DSatur from Brelaz [2], Iterated Greedy (IG) from Culberson and Luo [6], XRLF from Johnson et al. <ref> [19] </ref>. We have chosen DSatur as competitor for its high performance.
Reference: 20. <author> L. Kucera. </author> <title> The greedy coloring is a bad probabilistic algorithm. </title> <journal> Journal of Algorithms, </journal> <volume> 12 </volume> <pages> 674-684, </pages> <year> 1991. </year>
Reference-contexts: To compare the performance of our EAs with traditional graph coloring algorithms we have looked for a strong competitor. There are many (heuristic) graph coloring algorithms in the literature, for instance an O (n 0:4 )-approximation algorithm by Blum [1], the simple Greedy algorithm <ref> [20] </ref>, DSatur from Brelaz [2], Iterated Greedy (IG) from Culberson and Luo [6], XRLF from Johnson et al. [19]. We have chosen DSatur as competitor for its high performance.
Reference: 21. <author> P. Moris. </author> <title> The breakout method for escaping from local minima. </title> <booktitle> In Proceedings of the 11th National Conference on Artificial Intelligence, AAAI-93. </booktitle> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Technically this means that we apply a varying fitness function that is repeatedly modified, based on feedback concerning the progress of the search process. Similar mechanisms have been proposed earlier in another context by, for instance, Moris <ref> [21] </ref> and Selman and Kautz [22]. In evo--lutinary computation varying parameters can be divided into three classes [18], dynamic, adaptive and self-adaptive parameter control. Our approach falls in the adaptive category.
Reference: 22. <author> B. Selman and H. Kautz. </author> <title> Domain-independent extensions to GSAT: Solving large structured satisfiability problems. </title> <editor> In R. Bajcsy, editor, </editor> <booktitle> Proceedings of IJCAI'93, </booktitle> <pages> pages 290-295. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Technically this means that we apply a varying fitness function that is repeatedly modified, based on feedback concerning the progress of the search process. Similar mechanisms have been proposed earlier in another context by, for instance, Moris [21] and Selman and Kautz <ref> [22] </ref>. In evo--lutinary computation varying parameters can be divided into three classes [18], dynamic, adaptive and self-adaptive parameter control. Our approach falls in the adaptive category.
Reference: 23. <author> J.S. Turner. </author> <title> Almost all k-colorable graphs are easy to color. </title> <journal> Journal of Algorithms, </journal> <volume> 9 </volume> <pages> 63-82, </pages> <year> 1988. </year>
Reference-contexts: Because of the random tie breaking, DSatur is a stochastic algorithm and, just like for the EA, results of several runs need to be averaged to obtain useful comparisons. For the present investigation we implemented the backtracking version of Turner <ref> [23] </ref>, which backtracks to the lastly evaluated node that still has available colors to try. 3 The Evolutionary Algorithm We implemented different steady-state algorithms using worst fitness deletion, with two different representations and tested different operators and population sizes for their performance.
Reference: 24. <author> G. von Laszewski. </author> <title> Intelligent structural operators for the k-way graph partitioning problem. </title> <editor> In R.K. Belew and L.B. Booker, editors, </editor> <booktitle> Proceedings of the 4th International Conference on Genetic Algorithms, </booktitle> <pages> pages 45-52. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: In this paper we show that this is not the case. Graph coloring falls in the category of grouping problems. Several authors <ref> [14, 15, 24] </ref> have considered grouping problems and gave arguments that they cannot be successfully solved by usual genetic algorithms, e.g. using traditional representations and the corresponding standard operators, and proposed special representation and crossovers for such problems. <p> These tests were intended to check the hypotheses in <ref> [14, 15, 24] </ref> on the disadvantageous effects of crossover in standard representations, as well as to find a good setup for our algorithm. For a full overview of the test results see [12], here we only present the most interesting findings.
Reference: 25. <author> D. De Werra. </author> <title> An introduction to timetabling. </title> <journal> European Journal of Operations Research, </journal> <volume> 19 </volume> <pages> 151-162, </pages> <year> 1985. </year>
Reference-contexts: This problem in general is NP-complete [16] making it theoretically interesting; in the meanwhile there are many specific applications like register allocation [3], time-tabling <ref> [25] </ref>, scheduling and printed circuit testing [17].
Reference: 26. <author> Michalewicz Z. and Michalewicz M. </author> <title> Pro-life versus pro-choice strategies in evolutionary computation techniques. </title> <editor> In Palaniswami M., Attikiouzel Y., Marks R.J., Fogel D., and Fukuda T., editors, </editor> <booktitle> Computational Intelligence: A Dynamic System Perspective, </booktitle> <pages> pages 137-151. </pages> <publisher> IEEE Press, </publisher> <year> 1995. </year>
Reference-contexts: The advantage of such a (quasi) continuous shift of attention is that it finally guides the population through the search space, escaping local optima. At the moment there are a number of evolutionary constraint handling tech-niques known and practicized on constraint satisfaction as well as on constrained optimization problems, <ref> [11, 26, 27] </ref>. Penalty functions embody a natural and simple way of treating constraints, but have some drawbacks. One of them is that the composition of the penalty function has a great impact on the EA performance, in the meanwhile penalty functions are mostly designed in an ad hoc manner.
Reference: 27. <author> Michalewicz Z. and Schoenauer M. </author> <title> Evolutionary algorithms for constrained parameter optimization problems. </title> <journal> Evolutionary Computation, </journal> <volume> 4(1) </volume> <pages> 1-32, </pages> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The advantage of such a (quasi) continuous shift of attention is that it finally guides the population through the search space, escaping local optima. At the moment there are a number of evolutionary constraint handling tech-niques known and practicized on constraint satisfaction as well as on constrained optimization problems, <ref> [11, 26, 27] </ref>. Penalty functions embody a natural and simple way of treating constraints, but have some drawbacks. One of them is that the composition of the penalty function has a great impact on the EA performance, in the meanwhile penalty functions are mostly designed in an ad hoc manner.
References-found: 27

