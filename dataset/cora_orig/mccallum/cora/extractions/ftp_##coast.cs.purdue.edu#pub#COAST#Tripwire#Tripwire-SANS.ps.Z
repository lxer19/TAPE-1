URL: ftp://coast.cs.purdue.edu/pub/COAST/Tripwire/Tripwire-SANS.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ2.html
Root-URL: http://www.cs.purdue.edu
Title: Experiences with Tripwire: Using Integrity Checkers for Intrusion Detection  
Author: Gene H. Kim and Eugene H. Spafford 
Date: 21 February 1994  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Department of Computer Sciences Purdue University  
Pubnum: Purdue Technical Report CSD-TR-93-071  
Abstract: Tripwire is an integrity checking program written for the UNIX environment. It gives system administrators the ability to monitor file systems for added, deleted, and modified files. Intended to aid intrusion detection, Tripwire was officially released on November 2, 1992. It is being actively used at thousands of sites around the world. Published in volume 26 of comp.sources.unix on the USENET and archived at numerous FTP sites around the world, Tripwire is widely available and widely distributed. It is recommended by various computer security response teams, including the CERT and CIAC. This paper begins by motivating the need for an integrity checker by presenting a hypothetical situation any system administrator could face. An overview of Tripwire is then described, emphasizing the salient aspects of Tripwire configuration that supports its use at sites employing modern variants of the UNIX operating system. Experiences with how Tripwire has been used in in the field are then presented, along with some conjectures on the prevalence and extent of system breakins. Novel uses of Tripwire and notable configurations of Tripwire are also presented. fl This paper appeared as [8] 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Vesselin Bontchev. </author> <title> Possible virus attacks against integrity programs and how to prevent them. </title> <type> Technical report, </type> <institution> Virus Test Center, University of Hamburg, </institution> <year> 1993. </year>
Reference-contexts: The normal system logging reporting the failure was not read very often by the system administrator, but the Tripwire output was surveyed daily. All three classes of stories validate the theory behind integrity checking programs. Although the foundations of integrity checkers in UNIX security have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usable, publically available integrity tools existed providing one of the primary motivations for writing Tripwire. 4.1.1 Where are all the bad guys? The dramatically increased number of network breakins throughout the Internet in early 1994 presented an opportunity to
Reference: [2] <author> David A. Curry. </author> <title> UNIX System Security: A Guide for Users and System Administrators. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year> <title> 8 It is not free software, however. Tripwire and some of the signature routines bear copyright notices allowing free use for non-commercial purposes. </title>
Reference-contexts: Consider the problems facing system administrators who use simple checklisting schemes: 2 2.2 The resulting challenges Established techniques for monitoring file systems for potentially dangerous changes include maintaining checklists, comparison copies, checksum records, or a long history of backup tapes for this kind of contingency <ref> [4, 2] </ref>. However, these methods are costly to maintain, prone to error, and susceptible to easy spoofing by a malicious intruder. For instance, the UNIX utility find (1) is often used to generate a checklist of system files, perhaps in conjunction with ls (1). <p> The normal system logging reporting the failure was not read very often by the system administrator, but the Tripwire output was surveyed daily. All three classes of stories validate the theory behind integrity checking programs. Although the foundations of integrity checkers in UNIX security have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usable, publically available integrity tools existed providing one of the primary motivations for writing Tripwire. 4.1.1 Where are all the bad guys? The dramatically increased number of network breakins throughout the Internet in early 1994 presented an opportunity to
Reference: [3] <author> Daniel Farmer and Eugene H. Spafford. </author> <title> The COPS security checker system. </title> <booktitle> In Proceedings of the Summer Conference, </booktitle> <pages> pages 165-190, </pages> <address> Berkely, CA, 1990. </address> <publisher> Usenix Association. </publisher>
Reference-contexts: An added level of security could be added by augmenting these lists with information from sum (8) or cksum (8), as is done by the crc check program included with COPS <ref> [3] </ref>. However, numerous shortcomings in these simple checklisting schemes prevent them from being completely trustworthy and useful. First, the list of files and associated checksums may be tedious to maintain because of its size.
Reference: [4] <author> Simson Garfinkel and Gene Spafford. </author> <title> Practical Unix Security. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1991. </year>
Reference-contexts: Consider the problems facing system administrators who use simple checklisting schemes: 2 2.2 The resulting challenges Established techniques for monitoring file systems for potentially dangerous changes include maintaining checklists, comparison copies, checksum records, or a long history of backup tapes for this kind of contingency <ref> [4, 2] </ref>. However, these methods are costly to maintain, prone to error, and susceptible to easy spoofing by a malicious intruder. For instance, the UNIX utility find (1) is often used to generate a checklist of system files, perhaps in conjunction with ls (1). <p> The normal system logging reporting the failure was not read very often by the system administrator, but the Tripwire output was surveyed daily. All three classes of stories validate the theory behind integrity checking programs. Although the foundations of integrity checkers in UNIX security have been discussed in <ref> [1, 2, 4] </ref>, when Tripwire design was started in May 1992, no usable, publically available integrity tools existed providing one of the primary motivations for writing Tripwire. 4.1.1 Where are all the bad guys? The dramatically increased number of network breakins throughout the Internet in early 1994 presented an opportunity to
Reference: [5] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The M4 Macro Processor. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1977. </year>
Reference-contexts: In interactive database update mode, Tripwire first generates a list of all changes (ala integrity checking mode). For each of these changes, Tripwire then asks the system administrator whether the specified file or entry should be updated. 3.3 Scalability aids Tripwire includes an M4-like preprocessing language <ref> [5] </ref> to help system administrators maximize reuse of configuration files. By including directives such as @@include, @@ifdef, @@ifhost, and @@define, system administrators can write a core configuration file describing portions of the file system shared by many machines.
Reference: [6] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> The design and implementation of tripwire: A file system integrity checker. </title> <type> Technical Report CSD-TR-93-071, </type> <institution> Purdue University, </institution> <month> nov </month> <year> 1993. </year>
Reference-contexts: Testing of Tripwire started in September 1992. Since then, its design and code have been available for scrutiny by the public at large. The design and implementation are described in detail in <ref> [6] </ref>. An intensive beta test period resulted in Tripwire being ported to over two dozen variants of UNIX, including several versions neither author had ever encountered.
Reference: [7] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> Monitoring file system integrity on unix platforms. </title> <journal> InfoSecurity News, </journal> <volume> 4(4) </volume> <pages> 21-22, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: This morning, when she logged in to her workstation, Ellen was a bit surprised when the lastlog message indicated that root had logged into the system at 3 AM. 2 This is taken from <ref> [7] </ref>. Ellen thought she was the only one with the root password. Needless to say, this was not something Ellen was happy to see.
Reference: [8] <author> Gene H. Kim and Eugene H. Spafford. </author> <title> Experiences with tripwire: Using integrity checkers for intrusion detection. </title> <booktitle> In Systems Administration, Networking and Security Conference III. Usenix, </booktitle> <year> 1994. </year>
Reference: [9] <author> Ralph C. Merkle. </author> <title> A fast software one-way hash function. </title> <journal> Journal of Cryptology, </journal> <volume> 3(1) </volume> <pages> 43-58, </pages> <year> 1990. </year>
Reference-contexts: MD2 Message-Digest Algorithm), 4 Snefru <ref> [9] </ref> (the Xerox Secure Hash Function), and SHA (the NIST proposed Secure Hash Algorithm). Tripwire also includes POSIX 1003.2 compliant CRC-32 and CCITT compliant CRC-16 signatures. Each signature may be included in the selection-mask by including its index.
Reference: [10] <author> R. L. Rivest. </author> <title> The md4 message digest algorithm. </title> <booktitle> Advances in Cryptology Crypto '90, </booktitle> <pages> pages 303-311, </pages> <year> 1991. </year>
Reference-contexts: The following default methods are included in the latest Tripwire distribution: MD5 [11] (the RSA Data Security, Inc. MD5 Message-Digest Algorithm), MD4 <ref> [10] </ref> (the RSA Data Security, Inc.
Reference: [11] <author> R. L. Rivest. </author> <title> RFC 1321: The md5 message-digest algorithm. </title> <type> Technical report, </type> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: The following default methods are included in the latest Tripwire distribution: MD5 <ref> [11] </ref> (the RSA Data Security, Inc. MD5 Message-Digest Algorithm), MD4 [10] (the RSA Data Security, Inc.
Reference: [12] <author> Cliff Stoll. </author> <title> The Cuckoo's Egg. </title> <publisher> Doubleday, </publisher> <address> NY, NY, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: In contrast is the lack of use of an ideal Tripwire-aided bit of paranoia. One of the ideas be 10 hind Tripwire's design (and the name itself) was for system managers to scatter plant files on their system, similar to what was done by Cliff Stoll <ref> [12] </ref>. These files would have interesting names (e.g., master-passwords), but useless contents. These files would not normally be accessed by users, but might be prime targets for intruders. By monitoring these files as mini-tripwires, it would be possible to detect an otherwise stealthy intrusion.
Reference: [13] <author> David Vincenzetti and Massimo Cotrozzi. </author> <title> ATP anti tampering program. </title> <editor> In Edward DeHart, editor, </editor> <booktitle> Proceedings of the Security IV Conference, </booktitle> <pages> pages 79-90, </pages> <address> Berkeley, CA, </address> <year> 1993. </year> <booktitle> USENIX Association. </booktitle> <pages> 13 </pages>
Reference-contexts: We also received, and are incorporating into a future Tripwire patch release, a set of changes to allow Tripwire to check the integrity of symbolic links a weakness noted in <ref> [13] </ref>. One novel and elegant solution was implemented by storing the contents of the symbolic link as a signature. 7 Our actual solution will involve taking the signatures of the link field contents.
References-found: 13

