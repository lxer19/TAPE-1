URL: http://www.cs.brandeis.edu/~mairson/Seminar/GAL-LC.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/PL-seminar.html
Root-URL: http://www.cs.brandeis.edu
Title: The geometry of optimal lambda reduction  
Author: Georges Gonthier Martn Abadi Jean-Jacques Levy 
Keyword: Acknowledgements  
Abstract: Lamping discovered an optimal graph-reduction implementation of the -calculus. Simultaneously, Gi-rard invented the geometry of interaction, a mathematical foundation for operational semantics. In this paper, we connect and explain the geometry of interaction and Lamping's graphs. The geometry of interaction provides a suitable semantic basis for explaining and improving Lamping's system. On the other hand, graphs similar to Lamping's provide a concrete representation of the geometry of interaction. Together, they offer a new understanding of computation, as well as ideas for efficient and correct implementations. We have enjoyed discussions with Pierre-Louis Cu-rien, Jean-Yves Girard, Yves Lafont, and John Lamp-ing. Gordon Plotkin made useful suggestions on the presentation. Many phrases and attitudes in this paper are borrowed from Girard; no criticism is implied. 
Abstract-found: 1
Intro-found: 1
Reference: [Fie90] <author> John Field. </author> <title> On laziness and optimality in lambda interpreters: Tools for specification and analysis. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 1-15. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: It is typically associated with various graph representations and graph-reduction mechanisms. In a graph, sharing is represented by a fan-in. Some time ago, an optimality criterion for - calculus reductions was defined. It was soon recognized that sharing of common subexpressions is not sufficient for optimality <ref> [Wad71, Lev80, Fie90] </ref>. Recently, a generalization of sharing was introduced that does support optimal reductions. The idea is to allow not only fan-in but also fan-out. Fan-in nodes and fan-out nodes are drawn Fan-in nodes and fan-out nodes have symmetrical syntactic and semantic descriptions.
Reference: [Gira] <author> Jean-Yves Girard. </author> <title> Geometry of interaction II: Deadlock-free algorithms. </title>
Reference-contexts: 1 Patter This paper develops for the third time a semantics of computation free from the twin drawbacks of re-ductionism (which leads to static modelisation) and subjectivism (which leads to syntactical abuses, in other terms bureaucracy). Such a semantics was developed previously by Jean-Yves Girard <ref> [Gir89, Gira] </ref> and by John Lamping [Lam90]. Girard is a logician fl INRIA Rocquencourt. y Digital Equipment Corporation, Systems Research Center. 0 and Lamping is an autodidactic engineer. It is no surprise that they never read one another|although they were working on the same problem from different perspectives.
Reference: [Girb] <author> Jean-Yves Girard. </author> <title> Linear logic and parallelism. </title>
Reference-contexts: The nodes are those presented in the introduction: T root void i croissant i bracket i 3.2 Reduction The rules for reduction are particularly simple, since we want not to be ridiculous. (To our knowledge, Girard was the first to write on the desire not to be ridiculous <ref> [Girb] </ref>; we continue his work in this respect too.) In the rules, given in Figure 1, it is assumed that 0 i &lt; j. Because of the form of these rules, we are dealing with interaction nets.
Reference: [Gir87] <author> Jean-Yves Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: This view leads to some considerable simplifications, to a semantic basis, and to principled tech Page 1 niques for correctness proofs. It also helps us in generalizing from the -calculus to the proof nets of linear logic <ref> [Gir87] </ref>. (We have dealt only with multiplicative-exponential linear logic so far.) We believe that research on optimal reductions is of some practical importance. Lamping's work suggests some useful techniques for partial sharing, which potentially apply to a wide range of systems, from compilers to theorem provers. <p> Foremost is the extension of this formalism to the whole of linear logic, including additives and quantifiers, and from there to classical logic [Gir91]. We should establish a clear relationship between the coherence semantics of linear logic <ref> [Gir87] </ref> and the geometry of interaction.
Reference: [Gir89] <author> Jean-Yves Girard. </author> <title> Geometry of interaction I: Interpretation of system F. </title> <editor> In Ferro, Bonotto, Valentini, and Zanardo, editors, </editor> <booktitle> Logic Colloquium '88, </booktitle> <pages> pages 221-260. </pages> <publisher> El-sevier Science Publishers B.V. (North Hol-land), </publisher> <year> 1989. </year>
Reference-contexts: 1 Patter This paper develops for the third time a semantics of computation free from the twin drawbacks of re-ductionism (which leads to static modelisation) and subjectivism (which leads to syntactical abuses, in other terms bureaucracy). Such a semantics was developed previously by Jean-Yves Girard <ref> [Gir89, Gira] </ref> and by John Lamping [Lam90]. Girard is a logician fl INRIA Rocquencourt. y Digital Equipment Corporation, Systems Research Center. 0 and Lamping is an autodidactic engineer. It is no surprise that they never read one another|although they were working on the same problem from different perspectives.
Reference: [Gir91] <author> Jean-Yves Girard. </author> <title> A new constructive logic: Classical logic. </title> <type> Technical report, </type> <month> June </month> <year> 1991. </year> <note> INRIA Report 1443. </note>
Reference-contexts: Foremost is the extension of this formalism to the whole of linear logic, including additives and quantifiers, and from there to classical logic <ref> [Gir91] </ref>. We should establish a clear relationship between the coherence semantics of linear logic [Gir87] and the geometry of interaction.
Reference: [Kat90] <author> Vinod Kathail. </author> <title> Optimal interpreters for lambda-calculus based functional languages. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: After trying to read Girard's papers on the geometry of interaction, Lamping's "An Algorithm for Optimal Lambda Calculus Reduction" sounds like "TV Digest." Nevertheless, it seems fair to say that Lamping's algorithm is rather complicated and obscure. (Recently, Kathail proposed another optimal algorithm <ref> [Kat90] </ref>; we consider it in the full paper.) It is our thesis that the geometry of interaction gives the proper understanding of Lamping's system. This view leads to some considerable simplifications, to a semantic basis, and to principled tech Page 1 niques for correctness proofs.
Reference: [Laf90] <author> Yves Lafont. </author> <title> Interaction nets. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 95-108. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: In this paper we pursue the implementation part of Girard's program. We implement the geometry of interaction with mere graph reduction; the graphs used are a variant of Lamping's, and they are interaction nets in the sense of Lafont <ref> [Laf90] </ref>. We feel that our incredibly concrete formalism sheds some light on the geometry of interaction. We undertake to explain the geometry of interaction without using any relativity theory, any quantum theory, or for that matter, any mathematics. Lamping described a graph-reduction implementation of the -calculus.
Reference: [Lam90] <author> John Lamping. </author> <title> An algorithm for optimal lambda calculus reduction. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 16-30. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: Such a semantics was developed previously by Jean-Yves Girard [Gir89, Gira] and by John Lamping <ref> [Lam90] </ref>. Girard is a logician fl INRIA Rocquencourt. y Digital Equipment Corporation, Systems Research Center. 0 and Lamping is an autodidactic engineer. It is no surprise that they never read one another|although they were working on the same problem from different perspectives.
Reference: [Lev80] <author> Jean-Jacques Levy. </author> <title> Optimal reductions in the lambda-calculus. </title> <editor> In J.P. Seldin and J.R. Hindley, editors, </editor> <booktitle> To H.B. Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <pages> pages 159-191. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: Lamping described a graph-reduction implementation of the -calculus. The implementation provides a new, fine analysis of computation in the - calculus, to the point of being optimal in the sense defined in <ref> [Lev80] </ref>. <p> It is typically associated with various graph representations and graph-reduction mechanisms. In a graph, sharing is represented by a fan-in. Some time ago, an optimality criterion for - calculus reductions was defined. It was soon recognized that sharing of common subexpressions is not sufficient for optimality <ref> [Wad71, Lev80, Fie90] </ref>. Recently, a generalization of sharing was introduced that does support optimal reductions. The idea is to allow not only fan-in but also fan-out. Fan-in nodes and fan-out nodes are drawn Fan-in nodes and fan-out nodes have symmetrical syntactic and semantic descriptions. <p> It is straightforward to establish correspondences between a -term with a labelling <ref> [Lev80] </ref> and a suitably labelled graph that represents it. (The graph has labels on the rightmost wires.) We can then argue about how labels evolve through reduction.
Reference: [Wad71] <author> Christopher P. Wadsworth. </author> <title> Semantics and pragmatics of the lambda calculus. </title> <type> PhD thesis, </type> <institution> Oxford, </institution> <year> 1971. </year> <pages> Page 12 </pages>
Reference-contexts: It is typically associated with various graph representations and graph-reduction mechanisms. In a graph, sharing is represented by a fan-in. Some time ago, an optimality criterion for - calculus reductions was defined. It was soon recognized that sharing of common subexpressions is not sufficient for optimality <ref> [Wad71, Lev80, Fie90] </ref>. Recently, a generalization of sharing was introduced that does support optimal reductions. The idea is to allow not only fan-in but also fan-out. Fan-in nodes and fan-out nodes are drawn Fan-in nodes and fan-out nodes have symmetrical syntactic and semantic descriptions.
References-found: 11

