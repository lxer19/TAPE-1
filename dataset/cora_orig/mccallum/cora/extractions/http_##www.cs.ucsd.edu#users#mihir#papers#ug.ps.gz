URL: http://www.cs.ucsd.edu/users/mihir/papers/ug.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/complexity-papers.html
Root-URL: http://www.cs.ucsd.edu
Email: E-Mail: mihir@cs.ucsd.edu.  E-Mail: oded@wisdom.weizmann.ac.il.  Email: erezp@haifa.vnet.ibm.com.  
Title: Uniform Generation of NP-witnesses using an NP-oracle  
Author: Mihir Bellare Oded Goldreich Erez Petrank Sipser, Stockmeyer, and Jerrum, Valiant and Vazirani. 
Web: URL: http://www-cse.ucsd.edu/users/mihir.  
Address: San Diego, 9500 Gilman Drive, La Jolla, California 92093, USA.  Rehovot, Israel.  31905, Israel.  
Affiliation: Dept. of Computer Science Engineering, University of California at  Science and Engineering. Department of Computer Science and Applied Mathematics, Weizmann Institute of Science,  at MIT. IBM Haifa Research Lab, MATAM, Haifa  
Date: June 1998.  May 1998  
Note: TR 98-032, Electronic Colloquium on Computational Complexity,  utilizes ideas originating in the works of  Supported in part by NSF CAREER Award CCR-9624439 and a 1996 Packard Foundation Fellowship in  Work done while being on a sabbatical leave  
Abstract: A Uniform Generation procedure for N P is an algorithm which given any input in a fixed NP-language, outputs a uniformly distributed NP-witness for membership of the input in the language. We present a Uniform Generation procedure for N P that runs in probabilistic polynomial-time with an NP-oracle. This improves upon results of Jerrum, Valiant and Vazi-rani, which either require a P 2 oracle or obtain only almost uniform generation. Our procedure 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Aiello and J. H -astad. </author> <title> Statistical Zero-Knowledge Languages can be Recognized in Two Rounds. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol. 45, No. 3, </volume> <year> 1991, </year> <pages> pp. 327-345. </pages>
Reference-contexts: For the sake of discussing the history in the area, however, we also define the weaker notion of almost uniform generation. 3 Definition 2.4 Let ffi: N ! <ref> [0; 1] </ref> and let G be a generator for N P. <p> Details of the former solution were worked out and presented by Bellare and Petrank [5] in the context of applications to zero-knowledge proof systems, based on more recent versions of Sipser and Stockmeyer's hashing techniques that were developed in <ref> [14, 9, 1] </ref>. Putting this together yields the probabilistic, polynomial time with N P oracle solution to almost uniform generation. As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. <p> As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. Instead, we directly use hashing based techniques of works like <ref> [19, 20, 14, 9, 1] </ref>. Appropriate enhancement and application of these techniques yields the new result. 4.2 Applications We discuss a collection of results obtained in the area of interactive proof systems over the last few years that have exploited uniform or almost uniform generation. <p> Let SKC [()] denotes the class of languages possessing interactive proofs of negligible error probability and statistical knowledge complexity (SKC) at most (). A body of work [5, 11, 17] has sought extensions to non-zero SKC of the results of <ref> [9, 1] </ref> which showed SKC [0] AM " coAM. The first results used almost uniform generation.
Reference: [2] <author> L. Babai, L. Fortnow and C. Lund. </author> <title> Non-Deterministic Exponential Time has Two-Prover Interactive Protocols. </title> <journal> Computational Complexity, </journal> <volume> Vol. 1, </volume> <year> 1991, </year> <pages> pp. 3-40. </pages> <note> (See also addendum in Vol. 2, </note> <year> 1992, </year> <pages> pp. 374.) </pages>
Reference-contexts: We know that the class of languages recognized by two prover statistical zero-knowledge interactive proof systems equals N EX P <ref> [2, 7] </ref>. Bellare, Feige and Kilian [3] showed that a certain model feature |namely the fact that the two provers are allowed to share a random string before the protocol begins| is crucial to this result.
Reference: [3] <author> M. Bellare, U. Feige and J. Kilian. </author> <title> On the Role of Shared Randomness in Two Prover Proof Systems. </title> <booktitle> Proceedings of the third Israel Symposium on Theory and Computing Systems, IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: Over the last few years, there has been a body of work in the area of interactive proof systems and knowledge complexity that has exploited uniform generation to develop efficient decision procedures for certain languages based on their interactive proof or knowledge complexity <ref> [5, 11, 3, 10] </ref>. The complexity of the procedure is the crucial issue in these works, and it depends largely on the complexity of uniform generation. We survey these applications in Section 4.2. <p> We know that the class of languages recognized by two prover statistical zero-knowledge interactive proof systems equals N EX P [2, 7]. Bellare, Feige and Kilian <ref> [3] </ref> showed that a certain model feature |namely the fact that the two provers are allowed to share a random string before the protocol begins| is crucial to this result.
Reference: [4] <author> M. Bellare, S. Micali and R. Ostrovsky. </author> <title> The (true) complexity of statistical zero-knowledge. </title> <booktitle> Proceedings of the 22nd Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1990. </year>
Reference-contexts: The question here is: what is the computational complexity of this function? Even though SZK languages are known to be in P 2 " P not a priori clear that the prover, as a function is even restricted to probabilistic PSPACE . The question was first considered by <ref> [4] </ref> who reduced the complexity of the prover to that of (almost) uniform generation in such a way that SZK versus an honest verifier was maintained. A more general reduction, provided by [5], maintained SZK against all verifiers, as the definition of SZK requires.
Reference: [5] <author> M. Bellare and E. Petrank. </author> <title> Making Zero-Knowledge Provers Efficient. </title> <booktitle> Proceedings of the 24th Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1992. </year>
Reference-contexts: Over the last few years, there has been a body of work in the area of interactive proof systems and knowledge complexity that has exploited uniform generation to develop efficient decision procedures for certain languages based on their interactive proof or knowledge complexity <ref> [5, 11, 3, 10] </ref>. The complexity of the procedure is the crucial issue in these works, and it depends largely on the complexity of uniform generation. We survey these applications in Section 4.2. <p> Details of the former solution were worked out and presented by Bellare and Petrank <ref> [5] </ref> in the context of applications to zero-knowledge proof systems, based on more recent versions of Sipser and Stockmeyer's hashing techniques that were developed in [14, 9, 1]. Putting this together yields the probabilistic, polynomial time with N P oracle solution to almost uniform generation. <p> The question was first considered by [4] who reduced the complexity of the prover to that of (almost) uniform generation in such a way that SZK versus an honest verifier was maintained. A more general reduction, provided by <ref> [5] </ref>, maintained SZK against all verifiers, as the definition of SZK requires. Jerrum et. al.'s result [15] could then be applied to say that any language having a SZK proof has one in which the prover is a probabilistic, polynomial algorithm with an N P oracle. <p> However, almost uniform generation is not enough to maintain perfect zero knowledge (PZK) 11 and in this case, the result of <ref> [5] </ref>, exploiting the uniform generation procedure of [15], was that any language with a PZK proof has one in which the prover is a probabilistic, polynomial algorithm with a P 2 oracle. Our Theorem 3.1 can be used to improve this: combining it with the reduction of [5] we get that <p> the result of <ref> [5] </ref>, exploiting the uniform generation procedure of [15], was that any language with a PZK proof has one in which the prover is a probabilistic, polynomial algorithm with a P 2 oracle. Our Theorem 3.1 can be used to improve this: combining it with the reduction of [5] we get that any language with a PZK proof has one in which the prover is a probabilistic, polynomial algorithm with a N P oracle. Time complexity versus knowledge complexity. <p> Let SKC [()] denotes the class of languages possessing interactive proofs of negligible error probability and statistical knowledge complexity (SKC) at most (). A body of work <ref> [5, 11, 17] </ref> has sought extensions to non-zero SKC of the results of [9, 1] which showed SKC [0] AM " coAM. The first results used almost uniform generation. <p> A body of work [5, 11, 17] has sought extensions to non-zero SKC of the results of [9, 1] which showed SKC [0] AM " coAM. The first results used almost uniform generation. Specifically, Bellare and Petrank <ref> [5] </ref> provided a decision procedure for a language based on a SKC simulator and (almost) uniform generation, which Goldreich, Ostrovsky and Petrank [11] exploited to show that SKC [log ()] BPP N P . (Later, Petrank and Tardos [17] showed that SKC [log ()] AM " coAM; this final result did
Reference: [6] <author> M. Bellare and J. Rompel. </author> <title> Randomness-efficient oblivious sampling. </title> <booktitle> Proceedings of the 35th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1994. </year>
Reference: [7] <author> M. Ben-Or, S. Goldwasser, J. Kilian and A. Wigderson. </author> <title> Multi-prover Interactive Proofs: How to Remove Intractability Assumptions. </title> <booktitle> Proceedings of the 20th Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1988. </year>
Reference-contexts: We know that the class of languages recognized by two prover statistical zero-knowledge interactive proof systems equals N EX P <ref> [2, 7] </ref>. Bellare, Feige and Kilian [3] showed that a certain model feature |namely the fact that the two provers are allowed to share a random string before the protocol begins| is crucial to this result.
Reference: [8] <author> B. Berger and J. Rompel. </author> <title> Simulating (log c n)-wise independence in NC. </title> <booktitle> Proceedings of the 30th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1989. </year>
Reference: [9] <author> L. Fortnow. </author> <title> The Complexity of Perfect Zero-Knowledge. </title> <booktitle> In Advances in Computing Research: a research annual, Vol. 5 (Randomness and Computation, </booktitle> <editor> S. Micali, </editor> <publisher> ed.), </publisher> <pages> pp. 327-343, </pages> <year> 1989. </year>
Reference-contexts: Details of the former solution were worked out and presented by Bellare and Petrank [5] in the context of applications to zero-knowledge proof systems, based on more recent versions of Sipser and Stockmeyer's hashing techniques that were developed in <ref> [14, 9, 1] </ref>. Putting this together yields the probabilistic, polynomial time with N P oracle solution to almost uniform generation. As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. <p> As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. Instead, we directly use hashing based techniques of works like <ref> [19, 20, 14, 9, 1] </ref>. Appropriate enhancement and application of these techniques yields the new result. 4.2 Applications We discuss a collection of results obtained in the area of interactive proof systems over the last few years that have exploited uniform or almost uniform generation. <p> Let SKC [()] denotes the class of languages possessing interactive proofs of negligible error probability and statistical knowledge complexity (SKC) at most (). A body of work [5, 11, 17] has sought extensions to non-zero SKC of the results of <ref> [9, 1] </ref> which showed SKC [0] AM " coAM. The first results used almost uniform generation.
Reference: [10] <author> O. Goldreich and J. H -astad. </author> <title> On the Complexity of Interactive Proofs with Bounded Communication. </title> <note> To appear in IPL. See also ECCC Report TR96-018, </note> <year> 1996. </year>
Reference-contexts: Over the last few years, there has been a body of work in the area of interactive proof systems and knowledge complexity that has exploited uniform generation to develop efficient decision procedures for certain languages based on their interactive proof or knowledge complexity <ref> [5, 11, 3, 10] </ref>. The complexity of the procedure is the crucial issue in these works, and it depends largely on the complexity of uniform generation. We survey these applications in Section 4.2. <p> Specifically, they showed that if this string is absent then the class of languages possessing SZK two prover proofs collapses to BPP N P . The decision procedure which establishes this is based on almost uniform generation. Complexity of proofs with bounded communication. Goldreich and H-astad <ref> [10] </ref> investigate the complexity of languages as a function of the communication complexity of interactive proof systems that recognize them.
Reference: [11] <author> O. Goldreich, R. Ostrovsky and E. Petrank. </author> <title> Knowledge Complexity and Computational Complexity. </title> <booktitle> Proceedings of the 26th Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Over the last few years, there has been a body of work in the area of interactive proof systems and knowledge complexity that has exploited uniform generation to develop efficient decision procedures for certain languages based on their interactive proof or knowledge complexity <ref> [5, 11, 3, 10] </ref>. The complexity of the procedure is the crucial issue in these works, and it depends largely on the complexity of uniform generation. We survey these applications in Section 4.2. <p> Let SKC [()] denotes the class of languages possessing interactive proofs of negligible error probability and statistical knowledge complexity (SKC) at most (). A body of work <ref> [5, 11, 17] </ref> has sought extensions to non-zero SKC of the results of [9, 1] which showed SKC [0] AM " coAM. The first results used almost uniform generation. <p> The first results used almost uniform generation. Specifically, Bellare and Petrank [5] provided a decision procedure for a language based on a SKC simulator and (almost) uniform generation, which Goldreich, Ostrovsky and Petrank <ref> [11] </ref> exploited to show that SKC [log ()] BPP N P . (Later, Petrank and Tardos [17] showed that SKC [log ()] AM " coAM; this final result did not use uniform generation.) Shared randomness in two prover proofs.
Reference: [12] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying Knowledge Complexity. </title> <booktitle> Proceedings of the 32nd Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: Time complexity versus knowledge complexity. Knowledge complexity, suggested by [13] and defined by <ref> [12] </ref>, provides a way to measure the number of bits of knowledge that a prover reveals to a verifier about some string x, in the process of proving that x belongs to some underlying language L.
Reference: [13] <author> S. Goldwasser, S. Micali and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proof Systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> Vol. 18, </volume> <pages> pp. 186-208, </pages> <year> 1989. </year>
Reference-contexts: Time complexity versus knowledge complexity. Knowledge complexity, suggested by <ref> [13] </ref> and defined by [12], provides a way to measure the number of bits of knowledge that a prover reveals to a verifier about some string x, in the process of proving that x belongs to some underlying language L.
Reference: [14] <author> S. Goldwasser and M. Sipser. </author> <title> Private Coins versus Public Coins in Interactive Proof Systems. </title> <booktitle> Advances in Computing Research: a research annual, Vol. 5 (Randomness and Computation, </booktitle> <editor> S. Micali, </editor> <publisher> ed.), </publisher> <pages> pp. 73-90, </pages> <year> 1989. </year>
Reference-contexts: Details of the former solution were worked out and presented by Bellare and Petrank [5] in the context of applications to zero-knowledge proof systems, based on more recent versions of Sipser and Stockmeyer's hashing techniques that were developed in <ref> [14, 9, 1] </ref>. Putting this together yields the probabilistic, polynomial time with N P oracle solution to almost uniform generation. As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. <p> As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. Instead, we directly use hashing based techniques of works like <ref> [19, 20, 14, 9, 1] </ref>. Appropriate enhancement and application of these techniques yields the new result. 4.2 Applications We discuss a collection of results obtained in the area of interactive proof systems over the last few years that have exploited uniform or almost uniform generation.
Reference: [15] <author> M. Jerrum, L. Valiant and V. Vazirani. </author> <title> Random Generation of Combinatorial Structures from a Uniform Distribution. </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 43, </volume> <pages> pp. 169-188, </pages> <year> 1986. </year>
Reference-contexts: and R (x; w) can equal 1 only if jwj p (jxj), for some fixed polynomial p.) We consider the following problem: Uniform Generation of N P-witnesses Given: x 2 L Output: A string w uniformly distributed in R x def This was first considered by Jerrum, Valiant and Vazirani <ref> [15] </ref>, who showed that it could be accomplished in probabilistic polynomial time given access to a P 2 oracle. The same paper also considered a weaker version of the problem, called "almost uniform generation". <p> Note it is not hard to see that any algorithm for uniform (or almost uniform) generation of N P-witnesses must be probabilistic and must have at least N P power. Jerrum et. al. <ref> [15] </ref> obtained their results by reducing uniform generation to the problem of approximate counting. The latter problem can be solved using the "hashing paradigm" introduced by Sipser [19] and employed in previous works on this problem [20, 15] (see Section 4.1 for a more complete description of the history.). <p> Jerrum et. al. [15] obtained their results by reducing uniform generation to the problem of approximate counting. The latter problem can be solved using the "hashing paradigm" introduced by Sipser [19] and employed in previous works on this problem <ref> [20, 15] </ref> (see Section 4.1 for a more complete description of the history.). In contrast, we directly apply the "hashing paradigm" to the problem of uniform generation, rather than utilizing the above reduction. <p> Note that a language L is in N P iff there exists an NP-relation R such that L = L R . We say that R is N P-complete if L R is N P-complete. 2.2 Uniform Generation The basic problem, as considered by <ref> [15] </ref>, fixes some N P-relation R and seeks a probabilistic algorithm that on input x 2 L R outputs a string distributed uniformly in R x . For technical reasons we allow algorithm to fail some fraction of the time. It will indicate this by outputting some special symbol ?. <p> The approximate counting problem is the following: Approximate Counting of N P-witnesses Given: x 2 L and * &gt; 0 Output: A number r such that r=(1 + *) jR x j (1 + *)r. Jerrum et. al. <ref> [15] </ref> provided a probabilistic, polynomial time reduction of the problem of uniform generation to the problem of approximate counting. The beauty of their reduction is that an approximate counting procedure with only polynomial accuracy, i.e., * = 1=poly (jxj), is enough to achieve exact uniform generation. <p> As for almost uniform generation, one can relax the notion of approximate counting to one of almost approximate counting. Here the output r must satisfy the above property only with probability 1 ffi for some parameter ffi &lt; 1. Jerrum et. al. <ref> [15] </ref> defined this notion. A polynomial time (more specifically, poly (jxj; * 1 ; log ffi 1 ) time) with N P oracle solution for almost approximate counting would yield, via their reduction, a probabilistic polynomial time with N P-oracle solution to almost uniform generation. Jerrum et. al. [15] note that <p> et. al. <ref> [15] </ref> defined this notion. A polynomial time (more specifically, poly (jxj; * 1 ; log ffi 1 ) time) with N P oracle solution for almost approximate counting would yield, via their reduction, a probabilistic polynomial time with N P-oracle solution to almost uniform generation. Jerrum et. al. [15] note that a polynomial time with N P oracle solution to almost approximate counting is implicit in Sipser [19] and Stockmeyer [20], or can be derived via the probabilistic bisection technique of Valiant and Vazirani [21]. <p> A more general reduction, provided by [5], maintained SZK against all verifiers, as the definition of SZK requires. Jerrum et. al.'s result <ref> [15] </ref> could then be applied to say that any language having a SZK proof has one in which the prover is a probabilistic, polynomial algorithm with an N P oracle. <p> However, almost uniform generation is not enough to maintain perfect zero knowledge (PZK) 11 and in this case, the result of [5], exploiting the uniform generation procedure of <ref> [15] </ref>, was that any language with a PZK proof has one in which the prover is a probabilistic, polynomial algorithm with a P 2 oracle.
Reference: [16] <author> R. Motwani, J. Naor, and M. Naor. </author> <title> The probabilistic method yields deterministic parallel algorithms. </title> <booktitle> Proceedings of the 30th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1989. </year>
Reference: [17] <author> E. Petrank and G. Tardos. </author> <title> On the knowledge complexity of NP. </title> <booktitle> Proceedings of the 37th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1996. </year>
Reference-contexts: Let SKC [()] denotes the class of languages possessing interactive proofs of negligible error probability and statistical knowledge complexity (SKC) at most (). A body of work <ref> [5, 11, 17] </ref> has sought extensions to non-zero SKC of the results of [9, 1] which showed SKC [0] AM " coAM. The first results used almost uniform generation. <p> The first results used almost uniform generation. Specifically, Bellare and Petrank [5] provided a decision procedure for a language based on a SKC simulator and (almost) uniform generation, which Goldreich, Ostrovsky and Petrank [11] exploited to show that SKC [log ()] BPP N P . (Later, Petrank and Tardos <ref> [17] </ref> showed that SKC [log ()] AM " coAM; this final result did not use uniform generation.) Shared randomness in two prover proofs. We know that the class of languages recognized by two prover statistical zero-knowledge interactive proof systems equals N EX P [2, 7].
Reference: [18] <author> J. Schmidt, A. Siegel, A. Srinivasan. </author> <title> Chernoff-Hoeffding bounds for Applications with Limited Independence. </title> <booktitle> Proceedings of the 4th Annual Symposium on Discrete Algorithms, ACM-SIAM, </booktitle> <year> 1993. </year>
Reference: [19] <author> M. Sipser. </author> <title> A Complexity Theoretic Approach to Randomness. </title> <booktitle> Proceedings of the 15th Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1983. </year>
Reference-contexts: Jerrum et. al. [15] obtained their results by reducing uniform generation to the problem of approximate counting. The latter problem can be solved using the "hashing paradigm" introduced by Sipser <ref> [19] </ref> and employed in previous works on this problem [20, 15] (see Section 4.1 for a more complete description of the history.). In contrast, we directly apply the "hashing paradigm" to the problem of uniform generation, rather than utilizing the above reduction. <p> Jerrum et. al. [15] note that a polynomial time with N P oracle solution to almost approximate counting is implicit in Sipser <ref> [19] </ref> and Stockmeyer [20], or can be derived via the probabilistic bisection technique of Valiant and Vazirani [21]. <p> As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. Instead, we directly use hashing based techniques of works like <ref> [19, 20, 14, 9, 1] </ref>. Appropriate enhancement and application of these techniques yields the new result. 4.2 Applications We discuss a collection of results obtained in the area of interactive proof systems over the last few years that have exploited uniform or almost uniform generation.
Reference: [20] <author> L. Stockmeyer. </author> <title> The Complexity of Approximate Counting. </title> <booktitle> Proceedings of the 15th Annual Symposium on the Theory of Computing, ACM, </booktitle> <year> 1983. </year> <month> 13 </month>
Reference-contexts: Jerrum et. al. [15] obtained their results by reducing uniform generation to the problem of approximate counting. The latter problem can be solved using the "hashing paradigm" introduced by Sipser [19] and employed in previous works on this problem <ref> [20, 15] </ref> (see Section 4.1 for a more complete description of the history.). In contrast, we directly apply the "hashing paradigm" to the problem of uniform generation, rather than utilizing the above reduction. <p> The beauty of their reduction is that an approximate counting procedure with only polynomial accuracy, i.e., * = 1=poly (jxj), is enough to achieve exact uniform generation. Earlier, Stockmeyer <ref> [20] </ref> had presented a procedure that achieved 10 approximate counting in poly (jxj; * 1 ) time given a P 2 oracle. Combined, this yielded a uniform generator for N P-witnesses that ran in probabilistic, polynomial time with a P 2 oracle. <p> Jerrum et. al. [15] note that a polynomial time with N P oracle solution to almost approximate counting is implicit in Sipser [19] and Stockmeyer <ref> [20] </ref>, or can be derived via the probabilistic bisection technique of Valiant and Vazirani [21]. <p> As an inspection of our procedure shows, we do not use the Jerrum et. al.'s reduction to approximate counting to achieve uniform generation. Instead, we directly use hashing based techniques of works like <ref> [19, 20, 14, 9, 1] </ref>. Appropriate enhancement and application of these techniques yields the new result. 4.2 Applications We discuss a collection of results obtained in the area of interactive proof systems over the last few years that have exploited uniform or almost uniform generation.
Reference: [21] <author> L. Valiant and V. Vazirani. </author> <title> N P is as Easy as Detecting Unique Solutions. </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 47, No. 1, </volume> <pages> pp. 85-93, </pages> <year> 1986. </year>
Reference-contexts: Jerrum et. al. [15] note that a polynomial time with N P oracle solution to almost approximate counting is implicit in Sipser [19] and Stockmeyer [20], or can be derived via the probabilistic bisection technique of Valiant and Vazirani <ref> [21] </ref>. Details of the former solution were worked out and presented by Bellare and Petrank [5] in the context of applications to zero-knowledge proof systems, based on more recent versions of Sipser and Stockmeyer's hashing techniques that were developed in [14, 9, 1].
References-found: 21

