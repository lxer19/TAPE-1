URL: http://medg.lcs.mit.edu/ftp/doyle/bogan-thesis.ps
Refering-URL: http://medg.lcs.mit.edu/people/doyle/papers/bogan.html
Root-URL: 
Title: Economic Allocation of Computation Time with Computation Markets  
Author: Nathaniel Rockwood Bogan 
Date: May, 1994  
Abstract: c fl Copyright 1994 by Nathaniel R. Bogan This report is a reset version of a masters thesis submitted to the Department of Electrical Engineering and Computer Science on May 15, 1994 in partial fulfillment of the requirements for the degree of Master of Engineering. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John S. Breese and Eric J. Horvitz. </author> <title> Ideal reformulation of belief networks. </title> <booktitle> In Proceedings of the Sixth Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pages 64-72, </pages> <month> July </month> <year> 1990. </year>
Reference: [2] <author> Randall Davis and Reid G. Smith. </author> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 20 </volume> <pages> 63-109, </pages> <year> 1983. </year>
Reference-contexts: Of great importance are tremendously increased sensitivity to world dynamics, especially locally, and the ability to control processes much more efficiently through specialization of methods and information. (For a detailed discussion of the advantages of decentralized decision-making, see <ref> [2] </ref>.) Perhaps most importantly, markets can be designed to provide maximally efficient allocation of resources, of critical significance for automated reasoning and many other applications in computer science. 1.2 Guide to the Thesis The principal contributions of this thesis are a definition of economically efficient use of time, and description of <p> In addition, economics provides well-established and well-defined terminology which may help to provide standardization for similar notions in computer science. This chapter provides only the highlights to serve as goals and general justification for applying the economic methodology. For additional details of the possible advantages of economics see <ref> [22, 21, 10, 30, 2] </ref>. 2.1 Resource Allocation One of the principal topics in economics is the allocation of resources. Substantial research has been conducted both in how resources are allocated in human society, and how they should be allocated. Specifically, economists are interested in allocating scarce resources. <p> A fast method for doing this evaluation is already known. For a more thorough discussion of the possible advantages of decentralized decision making, see <ref> [2] </ref>. 2.4 Dynamic Adjustment One of the greatest strengths of well designed markets is their ability to adjust very rapidly to sudden, unforeseeable changes. Each participant need only adjust its own valuations based on the changes, and the equilibrium will reflect the new optimal allocation of resources. <p> In this chapter, I briefly describe some of the relevant contributions of five significant works. 3.1 The Contract Net Randall Davis and Reid Smith developed an extensive model of communication between decentralized agents called the Contract Net <ref> [2] </ref>. Although the contract net is not a market, per se, the work provides significant grounding for decentralized agents to participate in a coordinated way. The distribution of tasks is viewed as a form of contract negotiation. <p> The manager of a task evaluates the bids and determines to which agent (s) to award the contract. * Awarding. The manager communicates an award message to the selected agents. These nodes are termed contractors for the task. 1 See section 7.3 of <ref> [2] </ref> for a complete description of the contract net protocol. 15 Contractors may then become managers of more finely divided subtasks, forming an arbi-trarily deep hierarchy as needed. 2 Contractors may also communicate various progress reports to the task manager as well as a description of results and a notice of
Reference: [3] <author> Johan de Kleer, Jon Doyle, Guy L. Steele Jr., and Gerald Jay Sussman. Amord: </author> <title> Explicit control of reasoning. </title> <booktitle> In Proceedings of the ACM Symposium on Artificial Intelligence and Programming Languages, </booktitle> <pages> pages 116-125, </pages> <year> 1977. </year>
Reference-contexts: These divisions are not absolute in the code, but the system is roughly divided into three packages, not including the WALRAS system on which the reasoning economy is built. 6.1.1 AMORD AMORD <ref> [3] </ref> is a pattern-matching rule-based language. AMORD keeps a record of possible beliefs, each labeled as "in" (believed) or "out" (not yet believed). The Reason Maintenance System (RMS), described in the next section, keeps track of these labelings.
Reference: [4] <author> Thomas Dean and Mark Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 49-54, </pages> <year> 1988. </year>
Reference-contexts: This is the case when a computation does not produce valuable intermediate results. 22 It may be possible to partially sidestep this problem using some variation of anytime algorithms <ref> [4, 16, 32] </ref>, but it also may be desirable to require that there be no intermediate results, for reasons discussed in section 7.4.3. * The actions of a particular user of computation may drastically alter the needs of other market participants.
Reference: [5] <author> Jon Doyle. </author> <title> A truth maintenance system. </title> <journal> Artificial Intelligence, </journal> <volume> 12(2) </volume> <pages> 231-272, </pages> <year> 1979. </year>
Reference: [6] <author> Jon Doyle. </author> <title> The ins and outs of reason maintenance. </title> <booktitle> In Proceedings of the Eighth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 349-351, </pages> <year> 1983. </year>
Reference-contexts: The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see <ref> [6] </ref>, [7], [8], [9], [11], and [10].) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [7] <author> Jon Doyle. </author> <title> Constructive belief and rational representation. </title> <journal> Computational Intelligence, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see [6], <ref> [7] </ref>, [8], [9], [11], and [10].) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [8] <author> Jon Doyle. </author> <title> Rational control of reasoning in artificial intelligence. </title> <editor> In Andre Fuhrmann and Michael Morreau, editors, </editor> <booktitle> The Logic of Theory Change, volume 465 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 19-48. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see [6], [7], <ref> [8] </ref>, [9], [11], and [10].) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [9] <author> Jon Doyle. </author> <title> Rational belief revision (preliminary report). </title> <editor> In Richard E. Fikes and Erik Sandewall, editors, </editor> <booktitle> Proceedings of the Second Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 163-174, </pages> <address> San Mateo, CA, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see [6], [7], [8], <ref> [9] </ref>, [11], and [10].) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [10] <author> Jon Doyle. </author> <title> Rationality and its roles in reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 8(2) </volume> <pages> 376-409, </pages> <year> 1992. </year>
Reference-contexts: In addition, economics provides well-established and well-defined terminology which may help to provide standardization for similar notions in computer science. This chapter provides only the highlights to serve as goals and general justification for applying the economic methodology. For additional details of the possible advantages of economics see <ref> [22, 21, 10, 30, 2] </ref>. 2.1 Resource Allocation One of the principal topics in economics is the allocation of resources. Substantial research has been conducted both in how resources are allocated in human society, and how they should be allocated. Specifically, economists are interested in allocating scarce resources. <p> The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see [6], [7], [8], [9], [11], and <ref> [10] </ref>.) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [11] <author> Jon Doyle. </author> <title> Reason maintenance and belief revision: Foundations vs. coherence theories. </title> <editor> In Peter Gardenfors, editor, </editor> <booktitle> Belief Revision, </booktitle> <pages> pages 29-51. </pages> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1992. </year>
Reference-contexts: The RMS must also relabel nodes from "in" to "out" or vice-versa as necessitated by the reasoning being performed. (For more discussion of reason maintenance and nonmonotonic 41 reasoning see [6], [7], [8], [9], <ref> [11] </ref>, and [10].) The RMS uses the Reasoning Economy (RECON) to determine which relabelings to perform when. 6.1.3 RECON As mentioned in section 3.4, the Reasoning Economy is built on top of Wellman's WALRAS market-oriented programming environment.
Reference: [12] <author> Jon Doyle. </author> <title> A reasoning economy for planning and replanning. </title> <booktitle> In Technical Papers of the ARPA Planning Initiative Workshop, </booktitle> <year> 1994. </year> <month> 63 </month>
Reference-contexts: Specifically, it computes only the equilibrium prices from the current bids. The system does not directly account for any sort of ongoing market activity. However, it can be applied repeatedly to achieve a discrete approximation to a continuous market system over time. The current implementation of the RECON system <ref> [12] </ref> employs this methodology. WALRAS also makes an assumption often called "perfect competition" in economics. Specifically, each agent considers prices as "given," neglecting the effect of its own actions on the equilibrium price. <p> Specifically, there is no information available as to the expected value added by a particular computation, so it will be impossible to achieve an economically efficient allocation as defined herein. 40 Chapter 6 Implementation I have implemented a very simple form of a processor market within the Reasoning Economy <ref> [12] </ref>. In this chapter I explain the implementation and comment about its observed behavior. 6.1 The Underlying Architecture In this section I describe the system into which my processor market fits from a top-down perspective. <p> Goods and services that are very similar or even substitutable should be treated accordingly. The solution to this problem may lie in defining goods carefully in an object-oriented fashion so that their inter-relationships are manifest. Doyle <ref> [12] </ref> suggests that a language for the specification of market agents, including the goods themselves, would be a very valuable step in making market-based programming more practical. That suggestion is certainly born out by my research, though I have not investigated design issues for such a language.
Reference: [13] <author> D. Ferguson, Y. Yemini, and C. Nikolaou. </author> <title> Microeconomic algorithms for load balancing in distributed computer systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Distributed Computer Systems, </booktitle> <pages> pages 491-499, </pages> <year> 1988. </year>
Reference: [14] <author> Peter Gardenfors. </author> <title> The dynamics of belief systems: Foundations vs. coherence theories. </title> <journal> Revue Internationale de Philosophie, </journal> <volume> 172 </volume> <pages> 24-46, </pages> <month> January </month> <year> 1990. </year>
Reference: [15] <author> Michael R. Garey and David S. Johnson. Computers and Intractability. W. H. Freeman, </author> <year> 1979. </year>
Reference-contexts: At this point, we have assigned some sort of ownership to future time slots. Therefore, further analysis of this model is identical to the futures market presented in the previous section. 3 However, the problem is NP-Complete. See <ref> [15] </ref>, pg. 70, "Sequencing within Intervals." 33 5.4 Transfer of Processor Ownership If the auctioned good is considered to be the processor itself, it can be bought and sold as though it were any other good, with the current owner having the implicit right to compute.
Reference: [16] <author> Eric J. Horvitz. </author> <title> Reasoning about beliefs and actions under computational resource constraints. </title> <booktitle> In Proceedings of the Third AAAI Workshop on Uncertainty in Artificial Intelligence. AAAI, </booktitle> <year> 1987. </year>
Reference-contexts: This is the case when a computation does not produce valuable intermediate results. 22 It may be possible to partially sidestep this problem using some variation of anytime algorithms <ref> [4, 16, 32] </ref>, but it also may be desirable to require that there be no intermediate results, for reasons discussed in section 7.4.3. * The actions of a particular user of computation may drastically alter the needs of other market participants.
Reference: [17] <author> J.O. Kephart, T. Hogg, and B.A. Huberman. </author> <title> Dynamics of computational ecosystems. </title> <journal> Physical Review A, </journal> <volume> 40 </volume> <pages> 404-421, </pages> <year> 1989. </year>
Reference: [18] <author> Barton L. Lipman. </author> <title> How to decide how to decide how to ...: Modeling limited rationality. </title> <journal> Econometrica, </journal> <volume> 59(4) </volume> <pages> 1105-1125, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: By choosing to limit the meta-decision (deciding how to decide to decide: : : ) to a single level, a very large gain over purely greedy algorithms can be achieved without consideration of the infinite regress problem [31] <ref> [18] </ref> [23]. The so-called meta-greedy approach differs from what is traditionally called the greedy approach in computer science because it can include consideration of future events, in this case in the form of heuristics or deliberation on the part of consumers.
Reference: [19] <author> T. W. Malone, R. E. Fikes, K. R. Grant, and M. T. Howard. </author> <title> Enterprise: A market-like task scheduler for distributed computing environments. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 177-205. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: By the mechanism of contract negotiation, the contract net allows for sophisticated communication and coordination among processes which are under no central control. 3.2 Enterprise Thomas Malone's Enterprise task scheduler <ref> [19] </ref> employs many of the concepts of the contract net. The system is designed to schedule tasks in a network of personal workstations. <p> In summary, the Enterprise system provides a greatly improved method of utilizing resources and responding to the changing needs of a network's users as a whole. 2 There is also nothing preventing the manager of a task from later becoming a contractor for some subtask. 3 See <ref> [19] </ref>, figure 2 and surrounding discussion, for a complete description of this protocol. 16 3.3 SPAWN Carl Waldspurger et al. have implemented a system called SPAWN [29] that is more directly based on market forces for allocating resources in a distributed network. <p> The market becomes very much like a real-world housing market. This is in essence a matching problem. See <ref> [19] </ref> for a thorough analysis of a closely related problem. 35 futures markets even a bit more than the time block futures market described earlier.
Reference: [20] <author> M. S. Miller and K. E. Drexler. </author> <title> Comparative ecology: A computational perspective. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 51-76. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: Wellman has successfully used the WALRAS system to solve distributed transportation resource allocation problems, but I will not provide those details here. 3.5 The Work of Drexler and Miller Mark Miller and Eric Drexler have written several papers <ref> [20, 22, 21] </ref> that justify the use of economic methods on theoretical grounds and provide a variety of specific market-like mechanisms. In particular, [22] provides a careful analysis of the use of economics in computer systems at a general level. <p> Some of these models have been suggested in part by other authors (especially Drexler and Miller <ref> [20, 22, 21] </ref>), and others are original. Each model provides a mechanism for assigning some type of market value to the good computation. However, the nature of the equilibria that result as well as the specific behavior of the system may be significantly different over different market models.
Reference: [21] <author> M. S. Miller and K. E. Drexler. </author> <title> Incentive engineering for computational resource management. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 231-266. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: In addition, economics provides well-established and well-defined terminology which may help to provide standardization for similar notions in computer science. This chapter provides only the highlights to serve as goals and general justification for applying the economic methodology. For additional details of the possible advantages of economics see <ref> [22, 21, 10, 30, 2] </ref>. 2.1 Resource Allocation One of the principal topics in economics is the allocation of resources. Substantial research has been conducted both in how resources are allocated in human society, and how they should be allocated. Specifically, economists are interested in allocating scarce resources. <p> Wellman has successfully used the WALRAS system to solve distributed transportation resource allocation problems, but I will not provide those details here. 3.5 The Work of Drexler and Miller Mark Miller and Eric Drexler have written several papers <ref> [20, 22, 21] </ref> that justify the use of economic methods on theoretical grounds and provide a variety of specific market-like mechanisms. In particular, [22] provides a careful analysis of the use of economics in computer systems at a general level. <p> They discuss fundamental issues such as programmability of market objects, availability of information, ownership, security, and currency. The paper also discusses possible methods for and benefits of intertwining computational markets with human markets. In <ref> [21] </ref>, Miller and Drexler provide a detailed description of a market mechanism to determine processor use in scheduling on a single-processor machine. They identify constraints on market mechanisms, and suggest a specific means of auctioning the processor. <p> Resources such as memory and disk space may also be treated as goods, but are generally more complicated because they tend to be used over some period of time. (See <ref> [21] </ref> and section 7.2 for more discussion of possible market mechanisms for these goods.) The processor itself is also a good, but has many properties that make it rather different from the services performed by processes. These differences are discussed in the next section. <p> If a market-like mechanism is used in a scheduler, then it must somehow be sure that all processes eventually become sufficiently valuable to execute. This is precisely the purpose of Drexler and Miller's escalator algorithm <ref> [21] </ref>, which is discussed briefly in section 5.7. Although efficient processor allocation does not require that tasks become more valuable the longer they have gone unserviced, there will certainly be cases where that will happen. Consider a person trying to allocate her time efficiently. <p> Some of these models have been suggested in part by other authors (especially Drexler and Miller <ref> [20, 22, 21] </ref>), and others are original. Each model provides a mechanism for assigning some type of market value to the good computation. However, the nature of the equilibria that result as well as the specific behavior of the system may be significantly different over different market models. <p> The auction side of this model is straightforward. Given all of the bids the processor is simply awarded to the process entering the highest bid. The exact rate that is charged can be anything greater than the second-highest bid and less than or equal to the winner's bid. (See <ref> [21] </ref>, section 2.1.1 for concise discussion of relevant auction mechanisms.) The winning process is then free to compute at that rate until it runs out of money, completes its desired computation, or is outbid by another process. <p> If this is this case, it may be possible to learn something about the system's behavior by examining the chain of ownership. 5.7 Drexler and Miller's Escalator Algorithm Drexler and Miller outline a model for auctioning the processor in <ref> [21] </ref>, which they call the escalator algorithm. This model is intended for use in what I have herein called the scheduling problem. It is designed to allow some prioritizing while still ensuring that every posted process eventually executes. <p> The current implementation does not take this account specifically and simply uses whatever price the iterative convergence method employed by WALRAS finds. However, the auction with the most justifiable behavior (see <ref> [21] </ref>) seems to be the second-price auction, in which the price charged to the winner is the minimum equilibrium price. In the simple RECON environment, the processor market is really only used to choose between the option of relabeling a single node and relabeling the entire locale. <p> Here I use memory space as the canonical example and do not address the possible subtle differences between this market and other similar resources mentioned above. Drexler and Miller have detailed a market mechanism for economic allocation of memory space <ref> [21] </ref>. This model is general enough to be applicable in the domain of this thesis. Design of agents and auction rules for this system are detailed and carefully analyzed in [21]. <p> Drexler and Miller have detailed a market mechanism for economic allocation of memory space <ref> [21] </ref>. This model is general enough to be applicable in the domain of this thesis. Design of agents and auction rules for this system are detailed and carefully analyzed in [21]. Careful attention is also paid to such considerations as allocations of blocks being generally more efficient than allocation of individual locations. Here, however, I ignore these details and present only the salient aspects of their model.
Reference: [22] <author> M. S. Miller and K. E. Drexler. </author> <title> Markets and computation: Agoric open systems. </title> <editor> In B. A. Huberman, editor, </editor> <booktitle> The Ecology of Computation, </booktitle> <pages> pages 133-176. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference-contexts: In addition, economics provides well-established and well-defined terminology which may help to provide standardization for similar notions in computer science. This chapter provides only the highlights to serve as goals and general justification for applying the economic methodology. For additional details of the possible advantages of economics see <ref> [22, 21, 10, 30, 2] </ref>. 2.1 Resource Allocation One of the principal topics in economics is the allocation of resources. Substantial research has been conducted both in how resources are allocated in human society, and how they should be allocated. Specifically, economists are interested in allocating scarce resources. <p> Wellman has successfully used the WALRAS system to solve distributed transportation resource allocation problems, but I will not provide those details here. 3.5 The Work of Drexler and Miller Mark Miller and Eric Drexler have written several papers <ref> [20, 22, 21] </ref> that justify the use of economic methods on theoretical grounds and provide a variety of specific market-like mechanisms. In particular, [22] provides a careful analysis of the use of economics in computer systems at a general level. <p> In particular, <ref> [22] </ref> provides a careful analysis of the use of economics in computer systems at a general level. Miller and Drexler identify many of the similarities and important differences between markets composed of human agents and those to be used in a computer. <p> Some of these models have been suggested in part by other authors (especially Drexler and Miller <ref> [20, 22, 21] </ref>), and others are original. Each model provides a mechanism for assigning some type of market value to the good computation. However, the nature of the equilibria that result as well as the specific behavior of the system may be significantly different over different market models.
Reference: [23] <author> P. Mongin and B. Walliser. </author> <title> Infinite regressions in the optimizing theory of decision. </title> <editor> In B. Munier, editor, </editor> <booktitle> Risk, Decision and Rationality, </booktitle> <pages> pages 435-457. </pages> <address> D. </address> <publisher> Reidel Publishing, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: By choosing to limit the meta-decision (deciding how to decide to decide: : : ) to a single level, a very large gain over purely greedy algorithms can be achieved without consideration of the infinite regress problem [31] [18] <ref> [23] </ref>. The so-called meta-greedy approach differs from what is traditionally called the greedy approach in computer science because it can include consideration of future events, in this case in the form of heuristics or deliberation on the part of consumers.
Reference: [24] <author> Stuart Russell and Eric Wefald. </author> <title> On optimal game-tree search using rational meta-reasoning. </title> <booktitle> In Artificial Intelligence: Proceedings of the 11th International Joint Conference (IJCAI-89), </booktitle> <pages> pages 334-340, </pages> <year> 1989. </year>
Reference-contexts: An efficient allocation will be ideal if the value of all possible future computations is known in advance. The notion of efficient allocation, defined in this way, corresponds exactly to what Russell and Wefald [25] <ref> [24] </ref> call meta-greedy algorithms. <p> The processor rental market allows for efficient allocation of time with respect to other resources, goods, and services, and provides an implicit "rational" decision, in the sense of limited rationality of the meta-greedy assumption <ref> [24] </ref>. The method of taking bids and using them to determine prices is very simple. The combination of the reasoning economy with the processor market allows for rapid dynamic adjustment without necessarily requiring explicit replanning.
Reference: [25] <author> Stuart Russell and Eric Wefald. </author> <title> Principles of metareasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 49 </volume> <pages> 361-395, </pages> <year> 1991. </year>
Reference-contexts: An efficient allocation will be ideal if the value of all possible future computations is known in advance. The notion of efficient allocation, defined in this way, corresponds exactly to what Russell and Wefald <ref> [25] </ref> [24] call meta-greedy algorithms. <p> Furthermore, several possible approaches to limiting deliberation time are possible, though a discussion of these methods is beyond the scope of this work. The interested reader should see [32], <ref> [25] </ref>, and [26], as well as references cited therein concerning bounded rationality. The use of the word "efficient" in making this definition also deserves some justification. Efficiency in economics is normally defined in the sense of Pareto Optimality (see section 2.2). <p> Research in search by Russell and Wefald <ref> [25] </ref> has shown that it may be possible to gain significant improvements by specializing the search method used locally. Although that work does not use markets specifically, it points to the possible usefulness of dynamically adjusting algorithms.
Reference: [26] <author> Stuart J. Russell, Devika Subramanian, and Ronald Parr. </author> <title> Provably bounded optimal agents. </title> <booktitle> In Artificial intelligence: Proceedings of the 13th International Joint Conference (IJCAI-93), </booktitle> <pages> pages 338-344, </pages> <year> 1993. </year> <month> 64 </month>
Reference-contexts: Furthermore, several possible approaches to limiting deliberation time are possible, though a discussion of these methods is beyond the scope of this work. The interested reader should see [32], [25], and <ref> [26] </ref>, as well as references cited therein concerning bounded rationality. The use of the word "efficient" in making this definition also deserves some justification. Efficiency in economics is normally defined in the sense of Pareto Optimality (see section 2.2).
Reference: [27] <author> R.G. Smith. </author> <title> The contract net protocol: high-level communication and control in a dis-tributed problem solver. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-29, </volume> <month> December </month> <year> 1980. </year>
Reference: [28] <author> I. E. Sutherland. </author> <title> A futures market in computer time. </title> <journal> Communications of the ACM, </journal> <volume> 11(6) </volume> <pages> 449-451, </pages> <month> June </month> <year> 1968. </year>
Reference: [29] <author> Carl A. Waldspurger. </author> <title> A distributed computational economy for utilizing idle resources. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, </institution> <address> Cambridge, Massachusetts, 02139, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: as a whole. 2 There is also nothing preventing the manager of a task from later becoming a contractor for some subtask. 3 See [19], figure 2 and surrounding discussion, for a complete description of this protocol. 16 3.3 SPAWN Carl Waldspurger et al. have implemented a system called SPAWN <ref> [29] </ref> that is more directly based on market forces for allocating resources in a distributed network. The system allows much greater capacity for tradeoffs between resources of different quality than does Enterprise. This allows more efficient resource allocation (in an economic sense).
Reference: [30] <author> Michael P. Wellman. </author> <title> A market-oriented programming environment and its application to distributed multicommodity flow problems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: In addition, economics provides well-established and well-defined terminology which may help to provide standardization for similar notions in computer science. This chapter provides only the highlights to serve as goals and general justification for applying the economic methodology. For additional details of the possible advantages of economics see <ref> [22, 21, 10, 30, 2] </ref>. 2.1 Resource Allocation One of the principal topics in economics is the allocation of resources. Substantial research has been conducted both in how resources are allocated in human society, and how they should be allocated. Specifically, economists are interested in allocating scarce resources. <p> network has several additional complications, such as the need to promptly return control of a workstation to its human owner, some of my research may apply to the problem of entering and choosing among bids for processing resources, even in this rather different application. 3.4 WALRAS Michael Wellman's WALRAS architecture <ref> [30] </ref> provides a means for creating general agents in a computational economy using the Common LISP Object System. My implementations are all built on the WALRAS mechanisms, and are discussed in chapter 6. <p> My implementations are all built on the WALRAS mechanisms, and are discussed in chapter 6. In this section, I describe in more generality some of Wellman's accomplishments. "WALRAS is a general `market-oriented programming' environment for the construction and analysis of distributed resource allocation systems, based on general equilibrium <ref> [30, abstract] </ref>." Its primary intended purpose is to allow complex distributed problems to be transformed into a general equilibrium problem in economics. <p> If there are many consumers with comparable wealth, no individual will have a strong influence on the market prices. In some cases increasing the number of agents may simplify the task of individual agents, as is the case with arbitrageur agents (see <ref> [30] </ref>, section 4.3). It seems likely that there is no way to determine in general the "optimal" number of agents. Utility functions. The consumers' utility functions will determine what the system considers to be important or unimportant.
Reference: [31] <author> S. Winter. </author> <title> Optimization and evolution in the theory of the firm. </title> <editor> In R. H. Day and T. Groves, editors, </editor> <booktitle> Adaptive Economic Models, </booktitle> <pages> pages 73-118. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: By choosing to limit the meta-decision (deciding how to decide to decide: : : ) to a single level, a very large gain over purely greedy algorithms can be achieved without consideration of the infinite regress problem <ref> [31] </ref> [18] [23]. The so-called meta-greedy approach differs from what is traditionally called the greedy approach in computer science because it can include consideration of future events, in this case in the form of heuristics or deliberation on the part of consumers.
Reference: [32] <author> Shlomo Zilberstein. </author> <title> Operational Rationality Through Compilation of Anytime Algorithms. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <month> May </month> <year> 1993. </year> <month> 65 </month>
Reference-contexts: This is the case when a computation does not produce valuable intermediate results. 22 It may be possible to partially sidestep this problem using some variation of anytime algorithms <ref> [4, 16, 32] </ref>, but it also may be desirable to require that there be no intermediate results, for reasons discussed in section 7.4.3. * The actions of a particular user of computation may drastically alter the needs of other market participants. <p> However, this time can be indirectly considered by including market evaluation time in processes' time estimates, as suggested in chapter 6. Furthermore, several possible approaches to limiting deliberation time are possible, though a discussion of these methods is beyond the scope of this work. The interested reader should see <ref> [32] </ref>, [25], and [26], as well as references cited therein concerning bounded rationality. The use of the word "efficient" in making this definition also deserves some justification. Efficiency in economics is normally defined in the sense of Pareto Optimality (see section 2.2).
References-found: 32

