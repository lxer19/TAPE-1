URL: http://graphics.lcs.mit.edu/~seth/pubs/stabbing.ps.Z
Refering-URL: http://graphics.lcs.mit.edu/~seth/pubs/pubs.html
Root-URL: 
Title: Stabbing Oriented Convex Polygons in Randomized O(n 2 Time  
Author: SETH TELLER AND MICHAEL HOHMEYER 
Date: May 28, 1994  
Note: Contemporary Mathematics Volume 00, 0000  
Abstract: We present a randomized algorithm that determines, in expected O(n 2 ) time, whether a line exists that stabs each of a set of oriented convex polygons in R 3 with a total of n edges. If a stabbing line exists, the algorithm computes at least one such line. We show that the computation amounts to constructing a convex polytope in R 5 and inspecting its edges for intersections with a four-dimensional surface, the Plucker quadric. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> N. Amenta, </author> <title> Finding a line traversal of axial objects in three dimensions, </title> <booktitle> Proc. 3 rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 66-71. </pages>
Reference-contexts: For the case of input polygons consisting only of isothetic (axis-aligned) rectangles, Hohmeyer and Teller proposed an O (n lg n) time stabbing line algorithm [5]. Amenta improved this with a randomized linear time algorithm <ref> [1] </ref>. Finally, 1991 Mathematics Subject Classification. 51M30, 68U05; 51A45, 51M20, 52A20, 52A40.
Reference: 2. <author> D. Avis and R. Wenger, </author> <title> Algorithms for line traversals in space, </title> <booktitle> Proc. 3 rd Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1987, </year> <pages> pp. 300-307. </pages>
Reference-contexts: For a given set of polygons, let n be the total number of edges comprising the set. Various stabbing line algorithms for unoriented polygons have been formulated. Avis and Wenger presented an O (n 4 lg n) time algorithm to compute stabbing lines <ref> [2] </ref>. McKenna and O'Rourke improved this to O (n 4 ff (n)) time [6], where ff (n) is the functional inverse of Ackermann's function.
Reference: 3. <author> K. Clarkson, K. Mehlhorn, and R. Seidel, </author> <title> Four results on randomized incremental constructions, </title> <booktitle> Computational Geometry Theory and Applications 4(3) (1993), </booktitle> <pages> 185-212. </pages>
Reference-contexts: The face graph of the polytope T k has worst-case complexity quadratic in the number of halfspaces defining it [4], and can be computed by a randomized algorithm in optimal O (n 2 ) expected time <ref> [3] </ref>. It is not sufficient merely to find a point inside this polytope, since most such points will not correspond to real lines. <p> The first primitive, linear programming, is implemented as a randomized algorithm and runs in expected linear time [10]. The second primitive, convex hull computation in R 5 , requires O (n 2 ) expected time in principle <ref> [3] </ref>. We have implemented it, however, using a d-dimensional Delaunay simplicialization algorithm, which is somewhat slower.
Reference: 4. <author> B. Grunbaum, </author> <title> Convex polytopes, </title> <publisher> Wiley-Interscience, </publisher> <address> New York, </address> <year> 1967. </year>
Reference-contexts: The complexity of a d-dimensional polytope, described by its face graph, is O (n b d 2 c ) <ref> [4] </ref>. Thus the worst-case complexity of a polytope in R 5 is O (n 2 ), and we spend at most O (n 2 ) time inspecting it for a solution. 2. <p> The face graph of the polytope T k has worst-case complexity quadratic in the number of halfspaces defining it <ref> [4] </ref>, and can be computed by a randomized algorithm in optimal O (n 2 ) expected time [3]. It is not sufficient merely to find a point inside this polytope, since most such points will not correspond to real lines.
Reference: 5. <author> M. Hohmeyer and S. Teller, </author> <title> Stabbing isothetic rectangles and boxes in O(n lg n) time, </title> <booktitle> Computational Geometry Theory and Applications 4 (1992), </booktitle> <pages> 201-207. </pages>
Reference-contexts: When g is O (n), this time bound is the same as that due to Avis and Wenger. For the case of input polygons consisting only of isothetic (axis-aligned) rectangles, Hohmeyer and Teller proposed an O (n lg n) time stabbing line algorithm <ref> [5] </ref>. Amenta improved this with a randomized linear time algorithm [1]. Finally, 1991 Mathematics Subject Classification. 51M30, 68U05; 51A45, 51M20, 52A20, 52A40.
Reference: 6. <author> M. McKenna and J. O'Rourke, </author> <title> Arrangements of lines in 3-space: A data structure with applications, </title> <booktitle> Proc. 4 th Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1988, </year> <pages> pp. 371-380. </pages>
Reference-contexts: Various stabbing line algorithms for unoriented polygons have been formulated. Avis and Wenger presented an O (n 4 lg n) time algorithm to compute stabbing lines [2]. McKenna and O'Rourke improved this to O (n 4 ff (n)) time <ref> [6] </ref>, where ff (n) is the functional inverse of Ackermann's function. If the polygons are triangles, and together comprise g distinct normals, an algorithm due to Pellegrini computes a stabbing line in O (g 2 n 2 lg n) time if one exists [8].
Reference: 7. <author> N. Megiddo, </author> <title> Stabbing isothetic boxes in deterministic linear time, </title> <type> Personal communication. </type>
Reference-contexts: The first author gratefully acknowledges the support of Silicon Graphics, Inc. cfl0000 American Mathematical Society 0000-0000/00 $1.00 + $.25 per page 1 2 SETH TELLER AND MICHAEL HOHMEYER Megiddo reduced the problem to linear programming, yielding a deterministic linear time algorithm <ref> [7] </ref>. Here, we consider the case in which the input polygons are convex, have an arbitrary number of edges, and an arbitrary plane normal.
Reference: 8. <author> M. Pellegrini, </author> <title> Stabbing and ray-shooting in 3-dimensional space, </title> <booktitle> Proc. 6 th Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1988, </year> <pages> pp. 177-186. </pages>
Reference-contexts: If the polygons are triangles, and together comprise g distinct normals, an algorithm due to Pellegrini computes a stabbing line in O (g 2 n 2 lg n) time if one exists <ref> [8] </ref>. When g is O (n), this time bound is the same as that due to Avis and Wenger. For the case of input polygons consisting only of isothetic (axis-aligned) rectangles, Hohmeyer and Teller proposed an O (n lg n) time stabbing line algorithm [5].
Reference: 9. <author> M. Pellegrini and Peter Shor, </author> <title> Finding stabbing lines in 3-dimensional space, </title> <booktitle> Proc. 2 nd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1991, </year> <pages> pp. 24-31. </pages>
Reference-contexts: We define the `i as: l0 = p x q y q x p y l2 = p x q x l4 = p z q z (this somewhat asymmetric order was adopted in <ref> [9] </ref> to produce positive signs in some identities about Plucker coordinates).
Reference: 10. <author> R. Seidel, </author> <title> Linear programming and convex hulls made easy, </title> <booktitle> Proc. 6 th Annual ACM Symposium on Computational Geometry, </booktitle> <year> 1990, </year> <pages> pp. 211-215. </pages>
Reference-contexts: The first primitive, linear programming, is implemented as a randomized algorithm and runs in expected linear time <ref> [10] </ref>. The second primitive, convex hull computation in R 5 , requires O (n 2 ) expected time in principle [3]. We have implemented it, however, using a d-dimensional Delaunay simplicialization algorithm, which is somewhat slower.
Reference: 11. <author> D. Sommerville, </author> <title> Analytical geometry of three dimensions, </title> <publisher> Cambridge U. Press, </publisher> <year> 1959. </year>
Reference-contexts: Knowing the direction in which any stabbing line must traverse each of the polygons allows the formulation of a randomized O (n 2 ) expected time algorithm, which we have implemented. We use the Plucker coordinatization of lines <ref> [11] </ref>, mapping directed lines in R 3 into points (hyperplanes) in R 5 . We show that finding a solution to the stabbing line problem is equivalent to finding a point on the intersection of a polytope and a quadric surface (the Plucker quadric) in R 5 . <p> Only those points satisfying the quadratic relation fi = 0 (2.2) correspond to real lines in R 3 . All other points map to imaginary lines <ref> [11] </ref>, or lines whose direction cosines are complex. The six Plucker coordinates of a real line are not independent. First, since they describe a projective space, they are distinct only to within a scale factor. Second, they must satisfy Equation 2.2. Thus, the six Plucker coordinates describe a four-parameter space. <p> Thus, the six Plucker coordinates describe a four-parameter space. This confirms basic intuition: one could describe all lines in R 3 in terms of, for example, their intercepts on two standard planes. The set of points satisfying Equation 2.2 is called the Plucker quadric <ref> [11] </ref>. One might visualize this set as a four-dimensional ruled surface embedded in R 5 , analogous to a quadric hyperboloid of one sheet in R 3 (Figure 3). R R to, the Plucker surface. Strictly speaking, Plucker coordinates comprise an oriented projective space.
Reference: 12. <author> S. Teller and M. Hohmeyer, </author> <title> Computing the lines piercing four lines, </title> <type> Tech. Report UCB/CSD 91/665, </type> <institution> CS Department, UC Berkeley, </institution> <year> 1991. </year>
Reference-contexts: This line intersects the Plucker quadric in 0, 1, 2, or an infinite number of points. (The infinite intersection can arise due to the fact that the Plucker quadric is a ruled surface.) A procedure for computing the tight lines, and determining the type of line-surface intersection, is given in <ref> [12] </ref>. For each edge of T k , we examine the infinite line containing the edge for intersections with the Plucker quadric. Any such intersections represent lines incident on four of the e k (the lines affine to the polygon edges in R 3 ).
Reference: 13. <author> S. Teller and C. Sequin, </author> <title> Visibility preprocessing for interactive walkthroughs, </title> <booktitle> Computer Graphics (Proc. Siggraph '91) 25 (1991), </booktitle> <volume> no. 4, </volume> <pages> 61-69. </pages>
Reference-contexts: For example, a polygonal scene in R 3 can be partitioned into convex cells, interconnected via portals, or translucent holes on shared boundaries between adjacent cells. A stabbing line through a sequence of portals serves as a witness of sight-line visibility between two non-adjacent polyhedral cells <ref> [13, 14] </ref>. The polygonal portals between each cell, in this case, would be oriented by the sense in which each portal is traversed along the sequence (for example, during a search of the subdivision adjacency graph).
Reference: 14. <author> S. Teller and P. Hanrahan, </author> <title> Global Visibility Algorithms for Illumination Computations, </title> <booktitle> Computer Graphics (Proc. Siggraph '93) 27 (1993), </booktitle> <pages> 239-246. </pages> <institution> computer science institute, hebrew university, givat ram, jerusalem 91904 israel Current address: Dept. of EE & CS, MIT, </institution> <address> 77 Massachusetts Avenue, Cambridge MA 02139 E-mail address: </address> <institution> seth@lcs.mit.edu computer science dept., uc berkeley, berkeley ca 94720 usa Current address: Pacific Marketing and Consulting, </institution> <address> 2600 Etna street, Berkeley CA 94704 E-mail address: hohmeyer@cs.berkeley.edu </address>
Reference-contexts: For example, a polygonal scene in R 3 can be partitioned into convex cells, interconnected via portals, or translucent holes on shared boundaries between adjacent cells. A stabbing line through a sequence of portals serves as a witness of sight-line visibility between two non-adjacent polyhedral cells <ref> [13, 14] </ref>. The polygonal portals between each cell, in this case, would be oriented by the sense in which each portal is traversed along the sequence (for example, during a search of the subdivision adjacency graph).
References-found: 14

