URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr93/tr93-009.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr93-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: hanson@cis.ufl.edu  
Title: Gator: A Discrimination Network Structure for Active Database Rule Condition Matching  
Author: Eric N. Hanson 
Date: April 7, 1993  (revised June 14, 1993)  
Address: Gainesville, FL 32611  
Affiliation: 301 CSE CIS Department University of Florida  
Pubnum: UF-CIS-TR-93-009  
Abstract: This paper introduces a new discrimination network structure called Gator that is a generalization of the widely known Rete and TREAT algorithms. Gator can be used as a replacement for Rete or TREAT in active database rule systems and production system interpreters. Gator is designed as the target structure for a discrimination network optimizer. Algorithms for performing pattern matching using a Gator network to see if a rule condition has been satisfied are given. Moreover, cost estimation functions for Gator networks are introduced, along with one possible strategy for building an optimized Gator network for a collection of rules.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: an Introduction to Rule-Based Programming. </title> <publisher> Addison Wesley, </publisher> <year> 1985. </year>
Reference-contexts: Detailed algorithms for tokens won't be presented. 4.3 Negated Condition Elements In some production systems such as OPS5 <ref> [1] </ref>, one or more condition elements of a rule can be negated. <p> - /* ruleConditionGraph is the rule condition graph. previousGatorNets is the set of Gator sub-networks built previously for other rules. */ /* Initialize Nets [1..n] with networks potentially useful for subexpressions. */ initSubExpressions (Nets,ruleConditionGraph,previousGatorNets) /* Find the set of single-input nodes for this rule. */ add getNetsSize1 (ruleConditionGraph) to Nets <ref> [1] </ref> For i = 2 to n - /* Combine compatible networks of size j and i-j to form new networks, prune out the ones that will definitely not be part of the optimal solution, and add the remaining ones to Nets [i]. */ Nets [i] = combineAndPrune (Nets [j],Nets [i-j]
Reference: [2] <author> S. Finkelstein. </author> <title> Common expression analysis in database applications. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 235-245, </pages> <year> 1982. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [2, 10, 12] </ref>. The key differences between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [3] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Both production systems and active database systems must perform rule condition matching during execution to determine which rules to fire. The most successful rule condition testing mechanisms developed for main-memory production systems system are discrimination networks known as Rete <ref> [3] </ref> and TREAT [9]. Like production systems, active database systems must also test rule conditions, and we believe some kind of discrimination network will be the best tool for doing so. <p> Virtual ff-memories are really a version of the indexing concept used to implement production system matching prior to the development of the Rete algorithm <ref> [3] </ref>. In pure indexing, there is no discrimination network. Tokens are matched against individual condition elements of rules using an index. <p> Rough estimates of the cost of query plans have proven highly effective when used in query optimizers, which consistently produce good or even optimal plans [11]. 6 Related Work The Gator network is a descendent of Rete, TREAT, and work on production system matching that predates Rete <ref> [3, 9] </ref>. The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules.
Reference: [4] <author> Eric N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The concept of virtual ff-memories has been used in a variation of the TREAT algorithm called A-TREAT <ref> [4] </ref>. Use of virtual ff-memories in Gator is identical to that in A-TREAT. Virtual ff-memories save space since the matching tokens need not be stored in the memory node. This is particularly important in a database environment since the underlying data sets can be huge.
Reference: [5] <author> Eric N. Hanson. Gator: </author> <title> A discrimination network suitable for optimizing production rule matching. </title> <type> Technical Report CIS-TR-007-93, </type> <institution> University of Florida CIS Dept., </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: The algorithms for processing tokens are described here in a set-oriented style that is suitable for use in active database systems. A tuple-at-a-time, recursive style of the algorithm that is similar to how Rete and TREAT are 4 typically implemented for main-memory production systems is presented in <ref> [5] </ref>. The following terminology will be used. Memory nodes of type ff and fi will be referred to together as memory nodes. Nodes that can have multiple inputs, including fi-memories and P-nodes, will be called multiple input nodes.
Reference: [6] <author> Yiannis Ioannidis and Younkyung Cha Kang. </author> <title> Randomized algorithms for optimizing large join queries. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 312-321, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Most will have one to five nodes. The optimization technique discussed above is now being implemented as part of a simulator to compare Gator with Rete and TREAT. Other optimization strategies such as simulated annealing, iterative improvement, and two-phase optimization <ref> [6, 7] </ref> could also be applied to Gator networks. Finding which strategy is best is a possible research topic. This section assumes all ff-memories in a Gator network are stored, not virtual. <p> Work on conventional query optimization and query plan cost estimation is relevant [11], as is work on extended query optimization problems such as optimizing large join queries and considering bushy join trees <ref> [6, 7] </ref>. There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries [2, 10, 12].
Reference: [7] <author> Yiannis Ioannidis and Younkyung Cha Kang. </author> <title> Left-deep vs. bush trees: An analysis of strategy spaces and its implications for query optimization. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 168-177, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Most will have one to five nodes. The optimization technique discussed above is now being implemented as part of a simulator to compare Gator with Rete and TREAT. Other optimization strategies such as simulated annealing, iterative improvement, and two-phase optimization <ref> [6, 7] </ref> could also be applied to Gator networks. Finding which strategy is best is a possible research topic. This section assumes all ff-memories in a Gator network are stored, not virtual. <p> Work on conventional query optimization and query plan cost estimation is relevant [11], as is work on extended query optimization problems such as optimizing large join queries and considering bushy join trees <ref> [6, 7] </ref>. There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries [2, 10, 12].
Reference: [8] <author> Toru Ishida. </author> <title> Optimizing rules in production system programs. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 699-704, </pages> <year> 1988. </year>
Reference-contexts: This has led us to look for ways to optimize rule condition testing. One way to do this is to generate an optimized discrimination network. An example of this approach is an OPS5 system developed by Ishida 1 <ref> [8] </ref> that contained an optimizer for building a high-performance Rete network for a particular OPS5 application. However, previous work has shown that the TREAT algorithm can sometimes outperform the Rete algorithm [9]. <p> The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules. The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida <ref> [8] </ref>, and this lends evidence that it should be possible to develop an effective Gator optimizer. Work on conventional query optimization and query plan cost estimation is relevant [11], as is work on extended query optimization problems such as optimizing large join queries and considering bushy join trees [6, 7].
Reference: [9] <author> Daniel P. Miranker. </author> <title> TREAT: A better match algorithm for AI production systems. </title> <booktitle> In Proc. AAAI National Conference on Artificial Intelligence, </booktitle> <pages> pages 42-47, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Both production systems and active database systems must perform rule condition matching during execution to determine which rules to fire. The most successful rule condition testing mechanisms developed for main-memory production systems system are discrimination networks known as Rete [3] and TREAT <ref> [9] </ref>. Like production systems, active database systems must also test rule conditions, and we believe some kind of discrimination network will be the best tool for doing so. <p> An example of this approach is an OPS5 system developed by Ishida 1 [8] that contained an optimizer for building a high-performance Rete network for a particular OPS5 application. However, previous work has shown that the TREAT algorithm can sometimes outperform the Rete algorithm <ref> [9] </ref>. Our recent performance study comparing Rete and TREAT in a database environment showed that neither Rete nor TREAT always is best, TREAT normally is better than Rete, but sometimes Rete can vastly outperform TREAT [14]. This lead us to search for a more general structure than Rete or TREAT. <p> Rough estimates of the cost of query plans have proven highly effective when used in query optimizers, which consistently produce good or even optimal plans [11]. 6 Related Work The Gator network is a descendent of Rete, TREAT, and work on production system matching that predates Rete <ref> [3, 9] </ref>. The Gator network is only useful with an optimizer or at least a good set of heuristics for constructing a network for a particular rule or set of rules.
Reference: [10] <author> A. Rosenthal and U.S. Chakravarthy. </author> <title> Anatomy of a modular multiple query optimizer. </title> <booktitle> In Proc. of VLDB Conf., </booktitle> <pages> pages 230-239, </pages> <year> 1988. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [2, 10, 12] </ref>. The key differences between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [11] <author> P. Selinger et al. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proceedings of the 1979 ACM SIGMOD International Conference on Management of Data, </booktitle> <month> June </month> <year> 1979. </year> <note> (reprinted in [13]). </note>
Reference-contexts: These statistics can be used by the optimizer to compute estimates of selection predicate and join predicate selectivity, just as they are used by query optimizers <ref> [11] </ref>. The most important variable in the problem of discrimination network optimization that is different from those used for query optimization is update frequency. Relative frequency of updates to different memory nodes in a discrimination network can have a major impact on the choice of the optimal structure. <p> S (N) is the cardinality of a given node. P ages (N) is the number of pages occupied by N . Sel (ff) is the selectivity of the predicate associated with the ff-memory node ff. This value can be estimated from catalog data using standard techniques <ref> [11] </ref>. J SF (N 1 ; N 2 ) is the estimated join selectivity factor between a pair of nodes N 1 and N 2 . <p> However, the estimates do have 19 value for the purpose of comparing the cost of different Gator networks. Rough estimates of the cost of query plans have proven highly effective when used in query optimizers, which consistently produce good or even optimal plans <ref> [11] </ref>. 6 Related Work The Gator network is a descendent of Rete, TREAT, and work on production system matching that predates Rete [3, 9]. <p> The feasibility of generating an optimizer for Rete networks was demonstrated by Ishida [8], and this lends evidence that it should be possible to develop an effective Gator optimizer. Work on conventional query optimization and query plan cost estimation is relevant <ref> [11] </ref>, as is work on extended query optimization problems such as optimizing large join queries and considering bushy join trees [6, 7].
Reference: [12] <author> Timos Sellis. </author> <title> Global query optimization. </title> <journal> ACM TODS, </journal> <volume> 13(1) </volume> <pages> 23-52, </pages> <year> 1988. </year>
Reference-contexts: There is also some similarity between the problem of optimizing the discrimination network for a collection of rules, and optimizing an execution plan for simultaneously evaluating a set of queries <ref> [2, 10, 12] </ref>. The key differences between work on discrimination network optimization and query optimization is that in discrimination network optimization, update frequency is a key variable.
Reference: [13] <author> Michael Stonebraker, </author> <title> editor. </title> <booktitle> Readings in Database Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference: [14] <author> Yu-wang Wang and Eric N. Hanson. </author> <title> A performance comparison of the Rete and TREAT algorithms for testing database rule conditions. </title> <booktitle> In Proc. IEEE Data Eng. Conf., </booktitle> <pages> pages 88-97, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Our recent performance study comparing Rete and TREAT in a database environment showed that neither Rete nor TREAT always is best, TREAT normally is better than Rete, but sometimes Rete can vastly outperform TREAT <ref> [14] </ref>. This lead us to search for a more general structure than Rete or TREAT. This paper presents a generalized discrimination network structure called the Gator (Generalized Treat/Rete) network. Gator networks are general tree structures. Rete and TREAT networks are special cases of Gator.

References-found: 14

