URL: ftp://ftp.cs.princeton.edu/reports/1995/501.ps.Z
Refering-URL: http://www.cs.princeton.edu/sip/History.html
Root-URL: http://www.cs.princeton.edu
Email: ddean@cs.princeton.edu  dwallach@cs.princeton.edu  
Title: Security Flaws in the HotJava Web Browser  
Author: Drew Dean Dan S. Wallach 
Date: November 3, 1995  
Affiliation: Department of Computer Science, Princeton University  
Abstract: The growth of the Internet and the World Wide Web has led to demand for Web extensions, such as the ability to run server-supplied code on a Web client. We examine the HotJava Web browser and the Java language in which it is implemented. We demonstrate several attacks that compromise HotJava's security. Some of these attacks are made possible through browser code that fails to enforce access permissions, but can be easily fixed. Others point to underlying tension between the openness desired by Web application writers and the security desired by their users. We discuss the interaction of application requirements and security needs and suggest how they can both be accommodated. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Borenstein, N. S. </author> <title> EMail With a Mind of Its Own: The Safe-Tcl Language for Enabled Mail. </title> <booktitle> In Proceedings of ULPAA (1994). </booktitle>
Reference-contexts: Such network code raises serious security issues; a casual Web reader shouldn't be concerned about malicious side-effects from visiting a Web page. Languages such as Java [10], Safe-Tcl <ref> [1] </ref>, Phantom [3], Telescript [4], and ScriptX 1 [6] have been proposed for running downloaded code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Mi-crosystems, the Java language was released in mid-1995 as part of Sun's HotJava Web browser.
Reference: [2] <author> Castagna, G. </author> <title> Covariance and Contravari-ance: Conflict without a Cause. </title> <type> Tech. Rep. </type> <institution> LIENS-94-18, Departement de Mathematiques et d'Informatique, Ecole Normale Superieure, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: While the Java documentation claims that the safety of Java byte codes can be statically determined at load time, the 1.0 alpha 3 release violates this in at least two places: 1. The type system is covariant <ref> [2] </ref>, so certain oper ations require run time type checks. 2. The system does not detect access to a package-scoped variable from a different name space until the actual attempt.
Reference: [3] <author> Courtney, A. Phantom: </author> <title> An Interpreted Language for Distributed Programming. </title> <booktitle> In Usenix Conference on Object-Oriented Technologies (June 1995). </booktitle>
Reference-contexts: Such network code raises serious security issues; a casual Web reader shouldn't be concerned about malicious side-effects from visiting a Web page. Languages such as Java [10], Safe-Tcl [1], Phantom <ref> [3] </ref>, Telescript [4], and ScriptX 1 [6] have been proposed for running downloaded code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Mi-crosystems, the Java language was released in mid-1995 as part of Sun's HotJava Web browser.
Reference: [4] <author> General Magic, Inc. </author> <title> Magic Cap Concepts, </title> <address> http://www.genmagic.com/MagicCapDocs/ Concepts/*contents.html, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Such network code raises serious security issues; a casual Web reader shouldn't be concerned about malicious side-effects from visiting a Web page. Languages such as Java [10], Safe-Tcl [1], Phantom [3], Telescript <ref> [4] </ref>, and ScriptX 1 [6] have been proposed for running downloaded code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Mi-crosystems, the Java language was released in mid-1995 as part of Sun's HotJava Web browser.
Reference: [5] <author> Gosling, J., and McGilton, H. </author> <title> The Java Language Environment, </title> <address> http://java.sun.com/ whitePaper/javawhitepaper 1.html. Sun Mi-crosystems, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Each separate source 3 of Java 2 Netscape Navigator 1.0 is not extensible, while Navigator 2.0 is extensible only by the user manually installing shared libraries (DLLs). 3 While the documentation <ref> [5] </ref> does not define "source", it appears to mean the machine of origin. Clearly this is inadequate as multiple organizations may have Web pages on the same machine. Sun has announced plans to include support bytecode is loaded into a separate name space.
Reference: [6] <institution> Kaleida Labs. ScriptX Technical Overview, </institution> <address> http://www.kaleida.com/products/ sx-tech-overview.html, </address> <year> 1995. </year>
Reference-contexts: Such network code raises serious security issues; a casual Web reader shouldn't be concerned about malicious side-effects from visiting a Web page. Languages such as Java [10], Safe-Tcl [1], Phantom [3], Telescript [4], and ScriptX 1 <ref> [6] </ref> have been proposed for running downloaded code, and each has varying ideas of how to thwart malicious programs. After several years of development inside Sun Mi-crosystems, the Java language was released in mid-1995 as part of Sun's HotJava Web browser.
Reference: [7] <author> Milner, R., Tofte, M., and Harper, R. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Java programmers can combine related classes into a package. These packages work like names spaces in C++[9], modules in Modula-2 [11], or structures in Standard ML <ref> [7] </ref>. While packages can be named hierarchically, the hierarchy does not limit the scope of classes defined in a package. <p> multiple interfaces to a module, a module could declare a richer interface for trusted clients, and a more restrictive interface for untrusted clients. (In this case, we use the word "client" to mean a module, or in Java terms, a package.) The introduction of parameterized modules, like Standard ML's functors <ref> [7] </ref>, should also be investigated. Parameterized modules are a solution to the program structuring problem that opened up our man-in-the-middle attack.
Reference: [8] <institution> National Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria. National Computer Security Center, </institution> <year> 1985. </year>
Reference: [9] <author> Stroustrup, B. </author> <title> The Design and Evolution of C++. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [10] <author> Sun Microsystems. </author> <title> The Java Language Specification, </title> <address> http://java.sun.com/1.0alpha3/ javaspec/javaspec 1.html, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Rather than further HTML extensions, the notion of downloading a program (called an applet) which runs inside the Web browser has gained popularity. Such network code raises serious security issues; a casual Web reader shouldn't be concerned about malicious side-effects from visiting a Web page. Languages such as Java <ref> [10] </ref>, Safe-Tcl [1], Phantom [3], Telescript [4], and ScriptX 1 [6] have been proposed for running downloaded code, and each has varying ideas of how to thwart malicious programs.
Reference: [11] <author> Wirth, N. </author> <title> Programming in Modula-2, 2nd ed. </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year> <month> 8 </month>
Reference-contexts: Java programmers can combine related classes into a package. These packages work like names spaces in C++[9], modules in Modula-2 <ref> [11] </ref>, or structures in Standard ML [7]. While packages can be named hierarchically, the hierarchy does not limit the scope of classes defined in a package.
References-found: 11

