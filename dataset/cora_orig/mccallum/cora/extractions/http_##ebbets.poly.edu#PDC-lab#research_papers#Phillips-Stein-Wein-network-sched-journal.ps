URL: http://ebbets.poly.edu/PDC-lab/research_papers/Phillips-Stein-Wein-network-sched-journal.ps
Refering-URL: http://ebbets.poly.edu/PDC-lab/wein.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Task Scheduling in Networks  
Author: Cynthia Phillips Clifford Stein Joel Wein 
Keyword: Scheduling, Approximation Algorithm, NP-completeness, Networks  
Note: AMS(MOS) subject classifications: 68M10, 90B12, 68Q10, 68Q22, 68Q25, 90B35, 68M20 Much of this work was done while the second and third authors were visiting Sandia National Labs, the third author was visiting DIMACS, and the second author was visiting  This work was performed under U.S. Department of Energy contract number  Research partly supported by NSF Award CCR-9308701, a Walter Burke Research Initiation Award and a Dartmouth College Research Initiation Award. wein@mem.poly.edu. Research partially supported by NSF Research Initiation Award CCR-9211494 and a grant from the New York State Science and Technology Foundation, through its Center for Advanced Technology in Telecommunications.  
Address: Albuquerque, NM  Hanover, NH  Brooklyn, NY  AC04-76DP00789.  
Affiliation: Sandia National Labs  Department of CS Dartmouth College  Department of CS Polytechnic University  Polytechnic University.  DE  
Email: caphill@cs.sandia.gov.  cliff@cs.dartmouth.edu.  
Date: September 4, 1996  
Abstract: Scheduling a set of tasks on a set of machines so as to yield an efficient schedule is a basic problem in computer science and operations research. Most of the research on this problem incorporates the potentially unrealistic assumption that communication between the different machines is instantaneous. In this paper we remove this assumption and study the problem of network scheduling, where each job originates at some node of a network, and in order to be processed at another node must take the time to travel through the network to that node. Our main contribution is to give approximation algorithms and hardness proofs for fully general forms of the fundamental problems in network scheduling. We consider two basic scheduling objectives: minimizing the makespan, and minimizing the average completion time. For the makespan we prove small constant factor hardness-to-approximate and approximation results. For the average completion time, we give a log-squared approximation algorithm for the most general form of the problem. The techniques used in this approximation are fairly general and have several other applications. For example, we give the first non-trivial approximation algorithm to minimize the average weighted completion time of a set of jobs on related or unrelated machines, with or without a network. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, G. Kalai, M. Ricklin, and L. Stockmeyer. </author> <title> Lower bounds on the competitive ratio for mobile user tracking and distributed job scheduling. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 334-343, </pages> <year> 1992. </year>
Reference-contexts: They give distributed algorithms with polylogarithmic performance guarantees in general networks. They also characterize the performance of feedback-based approaches. In addition they derived off-line approximation results similar to those of Deng et. al [2, 20]. Alon et. al. <ref> [1] </ref> proved an (log m) lower bound on the performance of any distributed scheduler that is trying to minimize schedule length. Fizzano et. al. [5] give a distributed 4:3-approximation algorithm for schedule length in the special case in which the network is a ring.
Reference: [2] <author> B. Awerbuch, S. Kutten, and D. Peleg. </author> <title> Competitive distributed job scheduling. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 571-581, </pages> <year> 1992. </year> <month> 21 </month>
Reference-contexts: Until this work, network scheduling problems had either loose <ref> [2, 4] </ref> or no approximation algorithms. Our main contribution is to give approximation algorithms and hardness proofs for fully general forms of the fundamental problems in network scheduling. Our upper bounds are robust, as they depend on general characteristics of the jobs and the underlying network. <p> They also give a number of results for the distributed version of the problem when the network topology is completely connected, a ring or a tree. Awerbuch, Kutten and Peleg <ref> [2] </ref> considered the distributed version of the problem under a novel notion of on-line performance, which subsumes the minimization of both average and maximum completion time. They give distributed algorithms with polylogarithmic performance guarantees in general networks. They also characterize the performance of feedback-based approaches. <p> They give distributed algorithms with polylogarithmic performance guarantees in general networks. They also characterize the performance of feedback-based approaches. In addition they derived off-line approximation results similar to those of Deng et. al <ref> [2, 20] </ref>. Alon et. al. [1] proved an (log m) lower bound on the performance of any distributed scheduler that is trying to minimize schedule length. Fizzano et. al. [5] give a distributed 4:3-approximation algorithm for schedule length in the special case in which the network is a ring. <p> However, busy schedules are of some quality; we show that they are of length a factor of O log log m longer than optimal. This analysis gives a better bound than the (O (log m` max )) bound of previously known approximation algorithms for identical machines in a network <ref> [2, 4, 20] </ref>. We then turn to the N P-hard problem of the minimization of average completion time. Our major result for this optimality criterion is a O (log 2 n)-approximation algorithm in the general setting of unrelated machines.
Reference: [3] <author> J. Bruno, E.G. Coffman Jr., and R. Sethi. </author> <title> Scheduling independent tasks to reduce mean finishing time. </title> <journal> Communications of the ACM, </journal> <volume> 17 </volume> <pages> 382-387, </pages> <year> 1974. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> A special case of this result is an O (log 2 n)-approximation algorithm for the N P-hard problem of minimizing average weighted completion time for unrelated machines with no network; no previous approximation algorithms were known, even in the special case for which the machines are just of different speeds <ref> [3, 15] </ref>. Another special case is the first O (log 2 n)-approximation algorithm for minimizing the average completion time of jobs with release dates on unrelated machines. No previous approximation algorithms were known, even for the special case of just one machine [15]. <p> We will refer to the latter as traditional release dates; the unmodified phrase release date will refer to the general r ij . The minimization of average completion time when the jobs have no release dates is polynomial-time solvable <ref> [3, 12] </ref>, even on unrelated machines. The solution is based on a bipartite matching formulation, in which one side of the bipartition has jobs and the other side (machine, position) pairs. <p> Clearly it can not be generalized precisely for arbitrary release dates, since even the one machine version of the problem of minimizing average completion time of jobs with release dates is strongly N P-hard <ref> [3] </ref>. Intuitively, even the approximate generalization of the formulation seems difficult, since if all jobs are not available at time 0, the ability of J j to occupy position k on m i is dependent on which jobs precede it on m i and when.
Reference: [4] <author> X. Deng, H. Liu, J. Long, and B. Xiao. </author> <title> Deterministic load balancing in computer networks. </title> <booktitle> In Proceedings of 2nd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <year> 1990. </year>
Reference-contexts: Until this work, network scheduling problems had either loose <ref> [2, 4] </ref> or no approximation algorithms. Our main contribution is to give approximation algorithms and hardness proofs for fully general forms of the fundamental problems in network scheduling. Our upper bounds are robust, as they depend on general characteristics of the jobs and the underlying network. <p> We define an ff-approximation algorithm 1 to be a polynomial-time algorithm that gives a solution of cost no more than ff times optimal. 1.1 Previous Work The problem of network scheduling has received some attention, mostly in the distributed setting. Deng et. al. <ref> [4] </ref> considered a number of variants of the problem. In the special case in which each edge in the network is of unit length, all job processing times are the same, and the machines are identical, they showed that the off-line problem is in P. <p> However, busy schedules are of some quality; we show that they are of length a factor of O log log m longer than optimal. This analysis gives a better bound than the (O (log m` max )) bound of previously known approximation algorithms for identical machines in a network <ref> [2, 4, 20] </ref>. We then turn to the N P-hard problem of the minimization of average completion time. Our major result for this optimality criterion is a O (log 2 n)-approximation algorithm in the general setting of unrelated machines.
Reference: [5] <author> P. Fizzano, D. Karger, C. Stein, and J. Wein. </author> <title> Job scheduling in rings. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 210-219, </pages> <month> june </month> <year> 1994. </year>
Reference-contexts: In addition they derived off-line approximation results similar to those of Deng et. al [2, 20]. Alon et. al. [1] proved an (log m) lower bound on the performance of any distributed scheduler that is trying to minimize schedule length. Fizzano et. al. <ref> [5] </ref> give a distributed 4:3-approximation algorithm for schedule length in the special case in which the network is a ring. Our work differs from these papers by focusing on the centralized off-line problem and by giving approximations of higher quality.
Reference: [6] <author> R.L. Graham. </author> <title> Bounds for certain multiprocessor anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: A natural approach to minimizing the makespan is to construct schedules with no unforced idle time. Such strategies provide schedules of length a small constant factor times optimal, at minimal computational cost, for a variety of scheduling problems <ref> [6, 7, 15, 24] </ref>. We call such schedules busy schedules, and show that for the network scheduling problem their quality degrades significantly; they can be as much as an log m factor longer than the optimal schedule. <p> This is in striking contrast to the combinatorial model (for which Graham showed that a busy strategy yields a 2-approximation algorithm <ref> [6] </ref>). In fact, even when release dates are introduced into the identical machine scheduling problem, if each job's release date is the same on all machines, busy strategies still give a (2 1 m )-approximation guarantee [8, 9]. <p> Our result shows that when the 2 Combinatorial Network min. makespan, identical machines ff &lt; (1 + *)[10] 4=3 &lt; ff 2 min. makespan, identical machines, ff = 2 1 m <ref> [6] </ref> O log m q log log m Busy schedules min. makespan, unrelated machines 3=2 &lt; ff 2 [17] 3=2 &lt; ff 2 min. avg. completion time unrelated machines ff = 1 [12] 1 &lt; ff O (log 2 n) min. avg. wtd. completion time 1 &lt; ff [16] unrelated machines, <p> Busy strategies and their variants have been analyzed in a large number of scheduling problems (see [15]) and have been quite effective in many of them. For combinatorial identical machine scheduling, Graham showed that such strategies yield a (2 1 m ) approximation guarantee <ref> [6] </ref>. In this section we analyze the effectiveness of busy schedules for identical machine network scheduling.
Reference: [7] <author> R.L. Graham. </author> <title> Bounds on multiprocessing anomalies. </title> <journal> SIAM Journal of Applied Mathematics, </journal> <volume> 17 </volume> <pages> 263-269, </pages> <year> 1969. </year>
Reference-contexts: A natural approach to minimizing the makespan is to construct schedules with no unforced idle time. Such strategies provide schedules of length a small constant factor times optimal, at minimal computational cost, for a variety of scheduling problems <ref> [6, 7, 15, 24] </ref>. We call such schedules busy schedules, and show that for the network scheduling problem their quality degrades significantly; they can be as much as an log m factor longer than the optimal schedule.
Reference: [8] <author> D. Gusfield. </author> <title> Bounds for naive multiple machine scheduling with release times and deadlines. </title> <journal> Journal of Algorithms, </journal> <volume> 5 </volume> <pages> 1-6, </pages> <year> 1984. </year>
Reference-contexts: In fact, even when release dates are introduced into the identical machine scheduling problem, if each job's release date is the same on all machines, busy strategies still give a (2 1 m )-approximation guarantee <ref> [8, 9] </ref>.
Reference: [9] <author> L. Hall and D. B. Shmoys. </author> <title> Approximation schemes for constrained scheduling problems. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 134-141. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: In fact, even when release dates are introduced into the identical machine scheduling problem, if each job's release date is the same on all machines, busy strategies still give a (2 1 m )-approximation guarantee <ref> [8, 9] </ref>.
Reference: [10] <author> D.S. Hochbaum and D.B. Shmoys. </author> <title> Using dual approximation algorithms for scheduling problems: theoretical and practical results. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 144-162, </pages> <year> 1987. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> We show that for the network scheduling problem, no polynomial-time algorithm can do better than a factor of 4 3 times optimal unless P = N P, even in a network in which all edges have length one. Comparing this with the polynomial approximation scheme of Hochbaum and Shmoys <ref> [10] </ref> for parallel machine scheduling, we see that the addition of a network does indeed make the problem harder. Although the 2-approximation algorithm runs in polynomial time, it may be rather slow [21]. We thus explore whether a simpler strategy might also yield good approximations. <p> This hardness result contrasts sharply with the combinatorial scenario, in which there is a polynomial approximation scheme <ref> [10] </ref>. The 2-approximation algorithm is computationally intensive, so we consider simple strategies that typically work well in parallel machine scheduling. <p> Assuming that we know D, we will show how to construct a schedule of length at most 2D. This can be converted, via binary search, into a 2-approximation algorithm for the problem in which we are not given D <ref> [10] </ref>. In the optimal schedule of length D, we know that the sum of the time each job spends travelling and being processed is bounded above by D.
Reference: [11] <author> D.S. Hochbaum and D.B. Shmoys. </author> <title> A polynomial approximation scheme for machine scheduling on uniform processors: using the dual approximation approach. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 539-551, </pages> <year> 1988. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing.
Reference: [12] <author> W. Horn. </author> <title> Minimizing average flow time with parallel machines. </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 846-847, </pages> <year> 1973. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> ff &lt; (1 + *)[10] 4=3 &lt; ff 2 min. makespan, identical machines, ff = 2 1 m [6] O log m q log log m Busy schedules min. makespan, unrelated machines 3=2 &lt; ff 2 [17] 3=2 &lt; ff 2 min. avg. completion time unrelated machines ff = 1 <ref> [12] </ref> 1 &lt; ff O (log 2 n) min. avg. wtd. completion time 1 &lt; ff [16] unrelated machines, release dates ff O (log 2 n) 1 &lt; ff O (log 2 n) we can approximate the problem within a factor of y, but unless P = N P we cannot <p> We will refer to the latter as traditional release dates; the unmodified phrase release date will refer to the general r ij . The minimization of average completion time when the jobs have no release dates is polynomial-time solvable <ref> [3, 12] </ref>, even on unrelated machines. The solution is based on a bipartite matching formulation, in which one side of the bipartition has jobs and the other side (machine, position) pairs.
Reference: [13] <author> R. Karp. </author> <title> Reducibility among combinatorial problems. In R.E. </title> <editor> Miller and J. W. Thatcher, editors, </editor> <booktitle> Complexity of Computer Computations, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, </publisher> <address> NY, </address> <year> 1972. </year>
Reference: [14] <author> T. Kawaguchi and S. Kyan. </author> <title> Worst case bound of an lrf schedule for the mean weighted flow-time problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15 </volume> <pages> 1119-1129, </pages> <year> 1986. </year>
Reference-contexts: If there are no release dates, namely all jobs are available at time 0, then minimization of average weighted completion time is N P-hard for parallel identical machines. A small constant factor approximation algorithm was known for this problem <ref> [14] </ref>, but no approximation algorithms were known for the more general cases of machines of different speeds or unrelated machines. We introduce techniques which yield the first approximation algorithms for several other problems as well, which we discuss in Section 3.5.
Reference: [15] <author> E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, </author> <title> and D.B. Shmoys. Sequencing and scheduling: Algorithms and complexity. In S.C. Graves, </title> <editor> A.H.G. Rinnooy Kan, and P.H. Zipkin, editors, </editor> <booktitle> Handbooks in Operations Research and Management Science, </booktitle> <volume> Vol 4., </volume> <booktitle> Logistics of Production and Inventory, </booktitle> <pages> pages pp 445-522. </pages> <year> 1993. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> A natural approach to minimizing the makespan is to construct schedules with no unforced idle time. Such strategies provide schedules of length a small constant factor times optimal, at minimal computational cost, for a variety of scheduling problems <ref> [6, 7, 15, 24] </ref>. We call such schedules busy schedules, and show that for the network scheduling problem their quality degrades significantly; they can be as much as an log m factor longer than the optimal schedule. <p> A special case of this result is an O (log 2 n)-approximation algorithm for the N P-hard problem of minimizing average weighted completion time for unrelated machines with no network; no previous approximation algorithms were known, even in the special case for which the machines are just of different speeds <ref> [3, 15] </ref>. Another special case is the first O (log 2 n)-approximation algorithm for minimizing the average completion time of jobs with release dates on unrelated machines. No previous approximation algorithms were known, even for the special case of just one machine [15]. <p> Another special case is the first O (log 2 n)-approximation algorithm for minimizing the average completion time of jobs with release dates on unrelated machines. No previous approximation algorithms were known, even for the special case of just one machine <ref> [15] </ref>. The technique can also be used to give an approximation algorithm for a problem motivated by satellite communication systems [18, 26]. <p> Busy strategies and their variants have been analyzed in a large number of scheduling problems (see <ref> [15] </ref>) and have been quite effective in many of them. For combinatorial identical machine scheduling, Graham showed that such strategies yield a (2 1 m ) approximation guarantee [6]. In this section we analyze the effectiveness of busy schedules for identical machine network scheduling.
Reference: [16] <author> J.K. Lenstra, A.H.G. Rinnooy Kan, and P. Brucker. </author> <title> Complexity of machine scheduling problems. </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 1 </volume> <pages> 343-362, </pages> <year> 1977. </year>
Reference-contexts: 1 m [6] O log m q log log m Busy schedules min. makespan, unrelated machines 3=2 &lt; ff 2 [17] 3=2 &lt; ff 2 min. avg. completion time unrelated machines ff = 1 [12] 1 &lt; ff O (log 2 n) min. avg. wtd. completion time 1 &lt; ff <ref> [16] </ref> unrelated machines, release dates ff O (log 2 n) 1 &lt; ff O (log 2 n) we can approximate the problem within a factor of y, but unless P = N P we cannot approximate the problem within a factor of x. <p> The minimization of average weighted completion time in this setting is strongly N P-hard, as are many special cases. For example, the minimization of average completion time of jobs with release dates on one machine is strongly N P-hard <ref> [16] </ref>; no approximation algorithms were known for this special case, to say nothing of parallel identical or unrelated machines, or weighted completion times.
Reference: [17] <author> J.K. Lenstra, D.B. Shmoys, and E. Tardos. </author> <title> Approximation algorithms for scheduling unrelated parallel machines. </title> <journal> Mathematical Programming, </journal> <volume> 46 </volume> <pages> 259-271, </pages> <year> 1990. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> The 2-approximation algorithm matches the best known approximation algorithm for scheduling unrelated machines with no underlying network <ref> [17] </ref>. Thus it is natural to ask whether the addition of a network to a combinatorial scheduling problem actually makes the problem any harder. We resolve this question by proving that the introduction of the network to the problem of scheduling identical machines yields a qualitatively harder problem. <p> Our result shows that when the 2 Combinatorial Network min. makespan, identical machines ff &lt; (1 + *)[10] 4=3 &lt; ff 2 min. makespan, identical machines, ff = 2 1 m [6] O log m q log log m Busy schedules min. makespan, unrelated machines 3=2 &lt; ff 2 <ref> [17] </ref> 3=2 &lt; ff 2 min. avg. completion time unrelated machines ff = 1 [12] 1 &lt; ff O (log 2 n) min. avg. wtd. completion time 1 &lt; ff [16] unrelated machines, release dates ff O (log 2 n) 1 &lt; ff O (log 2 n) we can approximate the <p> We will use the 2-approximation algorithm of Lenstra, Shmoys and Tardos <ref> [17] </ref> to assign jobs to machines. The following theorem is easily inferred from [17]. Theorem 2.1 (Lenstra, Shmoys, Tardos [17]) Let Z be an unrelated parallel machine scheduling problem with optimal schedule of length D. Then there exists a polynomial-time algorithm that finds a schedule S of length 2D. <p> We will use the 2-approximation algorithm of Lenstra, Shmoys and Tardos <ref> [17] </ref> to assign jobs to machines. The following theorem is easily inferred from [17]. Theorem 2.1 (Lenstra, Shmoys, Tardos [17]) Let Z be an unrelated parallel machine scheduling problem with optimal schedule of length D. Then there exists a polynomial-time algorithm that finds a schedule S of length 2D. <p> We will use the 2-approximation algorithm of Lenstra, Shmoys and Tardos <ref> [17] </ref> to assign jobs to machines. The following theorem is easily inferred from [17]. Theorem 2.1 (Lenstra, Shmoys, Tardos [17]) Let Z be an unrelated parallel machine scheduling problem with optimal schedule of length D. Then there exists a polynomial-time algorithm that finds a schedule S of length 2D. <p> Proof: Given an instance of the unrelated network scheduling problem, with shortest schedule of length D, form the unrelated parallel machine scheduling problem Z defined by (2) and use the algorithm of <ref> [17] </ref> to produce a schedule S of length 2D. This schedule does not immediately correspond to a network schedule because some jobs may have been scheduled to run before their release dates. <p> The schedule returned also has the property that no job starts after time D, so the proof of Theorem 2.2 goes through if we use this algorithm in place of the algorithm of <ref> [17] </ref>. 2.2 Nonapproximability Theorem 2.4 It is N P-complete to determine if an instance of the identical network scheduling problem has a schedule of length 3, even in a network with ` max = 1. Proof: See Appendix. <p> We can show that this is not the case when the machines in the network can be unrelated. Lenstra, Shmoys and Tardos proved that it is N P-Complete to determine if there is a schedule of length 2 in the traditional combinatorial unrelated machine model <ref> [17] </ref>. If we allow multiple machines at one node, their proof proves Theorem 2.6. <p> We can then form a combinatorial unrelated machines scheduling problem as follows: p ij = p ij if M i 2 Q (J j ) 1 otherwise (5) We then approximately solve this problem using <ref> [17] </ref> to obtain an assignment of jobs to machines. Pick any machine M i and let J i be the set of jobs assigned to machine M i . <p> We can also show that the analysis of this algorithm is tight, for algorithms in which we assign jobs to processors using the linear program defined in <ref> [17] </ref> using the processing times specified by Equation 5. Let D be the length of the optimal schedule. Then we can construct instances for which any such schedule S has length at least 5=2D 1. Consider a set of k +1 jobs and a particular machine M i .
Reference: [18] <author> J. H. Lodge. </author> <title> Mobile satellite communication systems: Toward global personal communications. </title> <journal> IEEE Communications Magazine, </journal> <volume> 30(24) </volume> <pages> 24-31, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: No previous approximation algorithms were known, even for the special case of just one machine [15]. The technique can also be used to give an approximation algorithm for a problem motivated by satellite communication systems <ref> [18, 26] </ref>. We also give a number of other results, including polynomial-time algorithms for several special cases of the above-mentioned problems and a 5 2 -approximation for a variant of network scheduling in which each job has not only an origin, but also a destination. <p> Note that we are assuming that the entire connectivity pattern of P is input explicitly; if it is input in some compressed form then we must assume that P is polynomial in n and m. One motivation for such problems is the domain of satellite communication systems <ref> [18, 26] </ref>. One is given a set of sites on Earth and a set of satellites (in Earth orbit). Each site generates a sequence of communication requests; each request is potentially of a different duration and may require communication with any one of the satellites.
Reference: [19] <author> C. Papadimitriou and M. Yannakakis. </author> <title> Towards an architecture-independent analysis of parallel algorithms. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 510-514, </pages> <year> 1988. </year>
Reference-contexts: A summary of some of these upper bounds and hardness results appears in Figure 1. A line of research which is quite different from ours, yet still has some similarity in spirit, was started by Papadimitriou and Yannakakis <ref> [19] </ref>. They modeled communication issues in parallel machine scheduling by abstracting away from particular networks and rather describing the communication time between any two processors by one network-dependent constant.
Reference: [20] <author> D. Peleg. </author> <title> Private communication, </title> <year> 1992. </year>
Reference-contexts: They give distributed algorithms with polylogarithmic performance guarantees in general networks. They also characterize the performance of feedback-based approaches. In addition they derived off-line approximation results similar to those of Deng et. al <ref> [2, 20] </ref>. Alon et. al. [1] proved an (log m) lower bound on the performance of any distributed scheduler that is trying to minimize schedule length. Fizzano et. al. [5] give a distributed 4:3-approximation algorithm for schedule length in the special case in which the network is a ring. <p> However, busy schedules are of some quality; we show that they are of length a factor of O log log m longer than optimal. This analysis gives a better bound than the (O (log m` max )) bound of previously known approximation algorithms for identical machines in a network <ref> [2, 4, 20] </ref>. We then turn to the N P-hard problem of the minimization of average completion time. Our major result for this optimality criterion is a O (log 2 n)-approximation algorithm in the general setting of unrelated machines.
Reference: [21] <author> S. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Mathematics of Operations Research, </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: Comparing this with the polynomial approximation scheme of Hochbaum and Shmoys [10] for parallel machine scheduling, we see that the addition of a network does indeed make the problem harder. Although the 2-approximation algorithm runs in polynomial time, it may be rather slow <ref> [21] </ref>. We thus explore whether a simpler strategy might also yield good approximations. A natural approach to minimizing the makespan is to construct schedules with no unforced idle time. <p> It formulates the problem as a hypergraph matching integer program and then approximately solves a relaxed version of the integer program. We can then find an integral solution to this relaxation, employing as a subroutine the techniques of Plotkin, Shmoys and Tardos <ref> [21] </ref>. In combinatorial scheduling, a schedule with minimum average completion time can be found in polynomial time, even if the machines are unrelated. The techniques for the average completion time algorithm are fairly general, and yield an O (log 2 n)-approximation for minimizing the average weighted completion time. <p> Although all of our algorithms are polynomial-time algorithms, they tend to be rather inefficient. 3 Most rely on the work of <ref> [21] </ref> as a subroutine. As a result we will not discuss running times explicitly for the rest of the paper. 2 Makespan In this section we study the problem of minimizing the makespan for the network scheduling problem. <p> Although these algorithms run in polynomial time, they may be rather slow <ref> [21] </ref>. We thus explore whether a simpler strategy might also yield good approximations. <p> program (J ): X x e = 1 j = 1 : : :; n (7) (i;t)2e X x e c e C (9) 15 This integer program is a packing integer program, and as has been shown by Raghavan [22], Raghavan and Thompson [23] and Plotkin, Shmoys and Tardos <ref> [21] </ref>, it is possible to find provably good approximate solutions in polynomial time. We briefly review the approach of [21], which yields the best running times. Plotkin, Shmoys and Tardos [21] consider the following general problem. <p> e c e C (9) 15 This integer program is a packing integer program, and as has been shown by Raghavan [22], Raghavan and Thompson [23] and Plotkin, Shmoys and Tardos <ref> [21] </ref>, it is possible to find provably good approximate solutions in polynomial time. We briefly review the approach of [21], which yields the best running times. Plotkin, Shmoys and Tardos [21] consider the following general problem. <p> packing integer program, and as has been shown by Raghavan [22], Raghavan and Thompson [23] and Plotkin, Shmoys and Tardos <ref> [21] </ref>, it is possible to find provably good approximate solutions in polynomial time. We briefly review the approach of [21], which yields the best running times. Plotkin, Shmoys and Tardos [21] consider the following general problem. The Packing Problem: 9?x 2 P such that Ax b, where A is an m fi n nonnegative matrix, b &gt; 0, and P is a convex set in the positive orthant of R n . <p> In fact, many other packing integer programs considered in <ref> [21] </ref> also, when first formulated, have large width. In order to overcome this obstacle, [21] gave several techniques to reduce the width of integer linear programs. <p> In fact, many other packing integer programs considered in <ref> [21] </ref> also, when first formulated, have large width. In order to overcome this obstacle, [21] gave several techniques to reduce the width of integer linear programs. We discuss and then use one such technique here, namely that of decomposing a polytope into n lower-dimensional polytopes, each of which has smaller width. <p> If our polytope can be decomposed in this way, and we can solve the separation problem for each polytope P l , then we can apply a theorem of <ref> [21] </ref> to give an approximately optimal solution in polynomial time. In particular, let fl be the optimum value of J . The following theorem is a specialization of Theorem 2.11 in [21] to our problem, and describes the quality of integral solutions that can be obtained for such integer programs. <p> we can solve the separation problem for each polytope P l , then we can apply a theorem of <ref> [21] </ref> to give an approximately optimal solution in polynomial time. In particular, let fl be the optimum value of J . The following theorem is a specialization of Theorem 2.11 in [21] to our problem, and describes the quality of integral solutions that can be obtained for such integer programs. Theorem 3.5 [21] Let l be the width of P l and = max l l . <p> In particular, let fl be the optimum value of J . The following theorem is a specialization of Theorem 2.11 in <ref> [21] </ref> to our problem, and describes the quality of integral solutions that can be obtained for such integer programs. Theorem 3.5 [21] Let l be the width of P l and = max l l . Let fl be the number of constraints in Ax b, and let 0 = max ( fl ; (=d) log fl).
Reference: [22] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37 </volume> <pages> 130-143, </pages> <year> 1988. </year>
Reference-contexts: can now construct approximate solutions to the following integer linear program (J ): X x e = 1 j = 1 : : :; n (7) (i;t)2e X x e c e C (9) 15 This integer program is a packing integer program, and as has been shown by Raghavan <ref> [22] </ref>, Raghavan and Thompson [23] and Plotkin, Shmoys and Tardos [21], it is possible to find provably good approximate solutions in polynomial time. We briefly review the approach of [21], which yields the best running times. Plotkin, Shmoys and Tardos [21] consider the following general problem.
Reference: [23] <author> P. Raghavan and C. D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7:365 - 374, </volume> <year> 1987. </year> <month> 22 </month>
Reference-contexts: solutions to the following integer linear program (J ): X x e = 1 j = 1 : : :; n (7) (i;t)2e X x e c e C (9) 15 This integer program is a packing integer program, and as has been shown by Raghavan [22], Raghavan and Thompson <ref> [23] </ref> and Plotkin, Shmoys and Tardos [21], it is possible to find provably good approximate solutions in polynomial time. We briefly review the approach of [21], which yields the best running times. Plotkin, Shmoys and Tardos [21] consider the following general problem.
Reference: [24] <author> D. B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for shop scheduling problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 617-632, </pages> <year> 1994. </year>
Reference-contexts: A natural approach to minimizing the makespan is to construct schedules with no unforced idle time. Such strategies provide schedules of length a small constant factor times optimal, at minimal computational cost, for a variety of scheduling problems <ref> [6, 7, 15, 24] </ref>. We call such schedules busy schedules, and show that for the network scheduling problem their quality degrades significantly; they can be as much as an log m factor longer than the optimal schedule. <p> in combinatorial scheduling to partition the jobs into a set of large jobs and a set of small jobs, schedule the large jobs, which are scaled to be in a polynomially-bounded range, and then schedule the small jobs arbitrarily and show that their net contribution is not significant, (see e.g. <ref> [24] </ref>). In the minimization of average weighted completion time, however, 18 we must be more careful, since the small jobs may have large weights and can not be scheduled arbitrarily. We employ several steps, each of which increases the average weighted completion time by a small constant factor.
Reference: [25] <author> D. B. Shmoys and E. Tardos. </author> <title> Scheduling parallel machines with costs. </title> <booktitle> In Proceedings of the 4th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 448-455, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: In the unrelated machines setting we define p max = max 1im;1jn p ij . The identical and unrelated machine models are fundamental in traditional parallel machine scheduling and are relatively well understood <ref> [3, 10, 11, 12, 15, 17, 25] </ref>. Unless otherwise specified, in this paper the machines in the network are assumed to be identical. An alternative view of the network scheduling model is that each job J j has a release date, a time before which it is unavailable for processing. <p> Proof: We use similar techniques to those used for Theorem 2.2. We first modify Condition (1) so that d (; ) depends on the job as well. We then use a generalization of the algorithm of Lenstra, Shmoys and Tardos for unrelated machine scheduling, due to Shmoys and Tardos <ref> [25] </ref> which, given a target cost C finds a schedule of cost C and length at most twice that of the shortest schedule of cost C.
Reference: [26] <author> P. Wood. </author> <title> Mobile satellite services for travelers. </title> <journal> IEEE Communications Magazine, </journal> <volume> 30(11) </volume> <pages> 32-35, </pages> <note> Novem-ber 1991. 23 Dark edges correspond to edges of length 2. </note>
Reference-contexts: No previous approximation algorithms were known, even for the special case of just one machine [15]. The technique can also be used to give an approximation algorithm for a problem motivated by satellite communication systems <ref> [18, 26] </ref>. We also give a number of other results, including polynomial-time algorithms for several special cases of the above-mentioned problems and a 5 2 -approximation for a variant of network scheduling in which each job has not only an origin, but also a destination. <p> Note that we are assuming that the entire connectivity pattern of P is input explicitly; if it is input in some compressed form then we must assume that P is polynomial in n and m. One motivation for such problems is the domain of satellite communication systems <ref> [18, 26] </ref>. One is given a set of sites on Earth and a set of satellites (in Earth orbit). Each site generates a sequence of communication requests; each request is potentially of a different duration and may require communication with any one of the satellites.
References-found: 26

