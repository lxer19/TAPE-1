URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-23.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-23.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Anir Chowdhury and Scott Meyers. </author> <title> Facilitating Software Maintenance by Automated Detection of Constraint Violations. </title> <note> Submitted for publication (and available from the authors), </note> <month> April </month> <year> 1993. </year>
Reference-contexts: Both of these papers give an overview of CCEL concepts and describe an architecture for its implementation. An additional paper <ref> [1] </ref> gives a large number of examples of how CCEL can be used to express the kinds of constraints that arise in practice during the development of C++ software systems. 2 2 OVERVIEW OF CCEL Our work on this document and on the CCEL language itself is an ongoing endeavor, and
Reference: [2] <author> Carolyn K. Duby, Scott Meyers, and Steven P. Reiss. CCEL: </author> <title> A Metalanguage for C++. </title> <booktitle> In USENIX C++ Conference Proceedings, </booktitle> <month> August </month> <year> 1992. </year> <note> Also available as Brown University Computer Science Department Technical Report CS-92-51, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: It is intended to be to CCEL what Ellis' and Stroustrup's Annotated C++ Reference Manual ("the ARM") [3] is to C++. Readers interested in a more general introduction to CCEL should consult the original USENIX conference paper <ref> [2] </ref> or, preferably, the more recent (and therefore less out-of-date) paper from PPCP93 [7]. Both of these papers give an overview of CCEL concepts and describe an architecture for its implementation.
Reference: [3] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Ad-dison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: This manual is not a tutorial on the use of CCEL; it is a comprehensive reference manual on the language. It is intended to be to CCEL what Ellis' and Stroustrup's Annotated C++ Reference Manual ("the ARM") <ref> [3] </ref> is to C++. Readers interested in a more general introduction to CCEL should consult the original USENIX conference paper [2] or, preferably, the more recent (and therefore less out-of-date) paper from PPCP93 [7]. <p> Violation messages may be reported in a default format or in user-defined formats. Violation mes sages are described in Section 8. In the rest of this document, the CCEL language is formally described. The syntax notation used in this document is similar to that used in the ARM <ref> [3] </ref>. The syntactic categories are indicated in slanted type, and literal words and characters in typewriter type. Alternatives are listed on separate lines. An optional symbol is indicated by the subscript opt.
Reference: [4] <author> Keith E. Gorlen, Sanford M. Orlow, and Perry S. Plexico. </author> <title> Data Abstraction and Object-Oriented Programming in C++. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year>
Reference-contexts: This is an example of a design constraint, because the constraint is specific to a particular class, C, and a particular member function in that class, M. This kind of constraint is common in general-purpose class libraries. For example, the NIH class library <ref> [4] </ref> contains many functions which must always be redefined if the library is to function correctly. * If a class declares a pointer data member, it must also declare an assignment operator and a copy constructor. This is an example of a design-independent implementation constraint.
Reference: [5] <author> Brian W. Kernighan and Rob Pike. </author> <title> The UNIX Programming Environment. </title> <booktitle> The Prentice-Hall Software Series. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1984. </year>
Reference-contexts: If an original applicable scope is not given, the original applicable scope of the constraint being declared is the entire target C++ sources. In an original applicable scope, a C++ file selector has the same syntax and semantics as the UNIX shell (sh) wildcards <ref> [5] </ref>. Whether the file names given here should include paths or not is implementation-dependent. This is because some environment parameters such as the current directory would be involved if file names not including full paths are allowed. <p> This is because some environment parameters such as the current directory would be involved if file names not including full paths are allowed. A C++ class selector and a C++ function selector have the same syntax and semantics as the regular expressions of UNIX command grep <ref> [5] </ref>. For example, the following is an original applicable scope specification: File "my_*.H", Class "^Human", Function "^Animal::move$" : MyRequirement ( ... <p> Int matches ( String s ) returns TRUE if this string matches the regular expression specified by the parameter s, returns FALSE otherwise. The syntax and semantics for the regular expression and matches are the same as for the UNIX command grep <ref> [5] </ref>. String operator + ( String s ) returns a String which is the concatenation of this string and the parameter s. For example, the result of the expression "String" + "::" + "operator==" is "String::operator==".
Reference: [6] <author> Scott Meyers. </author> <title> Effective C++: 50 Specific Ways to Improve Your Programs and Designs. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: This is an example of a design-independent implementation constraint. Failure to adhere to this constraint almost always leads to incorrect program behavior <ref> [6] </ref>. * All class names must begin with an upper case letter. This is an example of one of the most common kinds of stylistic constraints. Most software development teams adopt some type of naming convention for identifiers, violations of which are irritating at best, confusing and misleading at worst.
Reference: [7] <author> Scott Meyers, Carolyn K. Duby, and Steven P. Reiss. </author> <title> Constraining the Structure and Style of Object-Oriented Programs. </title> <booktitle> In Proceedings of the First Workshop on Principles and Practice of Constraint Programming (PPCP93), </booktitle> <month> April </month> <year> 1993. </year> <note> Also available as Brown University Computer Science Department Technical Report CS-93-12, </note> <month> April </month> <year> 1993. </year>
Reference-contexts: Readers interested in a more general introduction to CCEL should consult the original USENIX conference paper [2] or, preferably, the more recent (and therefore less out-of-date) paper from PPCP93 <ref> [7] </ref>. Both of these papers give an overview of CCEL concepts and describe an architecture for its implementation.
References-found: 7

