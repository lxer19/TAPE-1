URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR43.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: E-mail: fgcao, singhalg@cis.ohio-state.edu  E-mail: fdeng,rishen,weisung@fiu.edu  
Title: An Efficient Coterie-Based Mutual Exclusion Scheme With Fault-tolerance Capability  
Author: Guohong Cao, Mukesh Singhal Yi Deng, Naphtali Rishe, and Wei Sun 
Keyword: Key words: Coteries, mutual exclusion, fault-tolerance.  
Note: This work is supported in part by NASA under grant No. NAGW-4080, and by the National Science Foundation (NSF) under Grant No. CDA-9313624.  
Address: Columbus, OH 43201  Park, Miami, FL 33199  
Affiliation: Department of Computer and Information Science The Ohio State University  School of Computer Science Florida International University University  
Abstract: N); however, it increases the synchronization delay to 2T . This paper presents an algorithm which reduces the synchronization delay to T (average message delay) and still has the low message complexity O(K) (K is the size of the quorum, which can be as low as log N ). A correctness proof and detailed performance analysis are provided. The paper identifies one possible deadlock in Maekawa's algorithm and proposes a fix for it. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A.E. Abbadi. </author> <title> "An Efficient and Fault-Tolerant Solution for Distributed Mutual Exclusion". </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> Our scheme is independent of the coterie being used. K is p N if we use Maekawa's quorum algorithm [7], and K becomes log N when we use Agrawal and Abbadi quorum algorithm <ref> [1] </ref>. Moreover, the redundancy in the quorum can increase the resilience to site and communication link failures. The rest of the paper is organized as follows. Section 2 describes the system model. In Section 3, we present the algorithm. <p> K is p N if we use Maekawa's quorum algorithm [7], and K is log N when we use Agrawal and Abbadi quorum algorithm <ref> [1] </ref>. Table 1 shows the message complexity and the synchronization delay for the proposed and various existing mutual exclusion algorithms. We observe that our algorithm has the lowest synchronization delay and still has low message complexity. <p> We observe that our algorithm has the lowest synchronization delay and still has low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from token loss problem. 6 Adding Fault-tolerance Many coterie-based algorithms <ref> [1, 2, 5, 7, 10] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the resiliency of an algorithm. <p> Much progress has been made to increase the resiliency of mutual exclusion algorithms. We consider four well known fault tolerant coterie construction algorithms. The tree algorithm <ref> [1] </ref> is based on organizing a set of N sites as nodes of a binary tree. A quorum is formed by including all sites along any path that starts at the root and terminates at the leaves. <p> Since all these fault tolerant coteries satisfy the intersection property, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [10] (or the Grid-set [2]) and the tree algorithm <ref> [1] </ref> (or HQC algorithm [5]). When a node fails, the former can tolerate failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new coterie must be reconstructed.
Reference: [2] <author> S.Y. Cheung, M.H. Ammar and M. Ahamad. </author> <title> "The Grid Protocol: A high performance scheme for maintaining Replicated data". </title> <journal> IEEE Trans. knowl. Data Eng., </journal> <month> June </month> <year> 1992. </year>
Reference-contexts: A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> We observe that our algorithm has the lowest synchronization delay and still has low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from token loss problem. 6 Adding Fault-tolerance Many coterie-based algorithms <ref> [1, 2, 5, 7, 10] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the resiliency of an algorithm. <p> In HQC or Hierarchical Voting Consensus [5], sites are organized in a multilevel hierarchy and voting is performed at each level of the hierarchy. The lowest level in the hierarchy contains groups of sites. In this construction, the quorum size becomes N 0:63 . The Grid-set algorithm <ref> [2] </ref> has two levels. A majority voting scheme is used at the upper level to increase the resiliency, while a Maekawa-like grid structure is used at the lower level to reduce message overhead. Their quorum size is N 2 G, where G is the group size. <p> Their quorum size is N 2 G, where G is the group size. The Rangarajan-Setia-Tripathi algorithm [10] is in some sense a dual of the Grid-set algorithm <ref> [2] </ref>. Specifically, they use majority voting at the lower (subgroup) level and a Maekawa-like grid structure at the higher level. With this change, their quorum size becomes G+1 2 N G , where G is the subgroup size. <p> Our algorithm can use any of the fault-tolerant coteries constructed by these algorithms to become a fault-tolerant algorithm. Since all these fault tolerant coteries satisfy the intersection property, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [10] (or the Grid-set <ref> [2] </ref>) and the tree algorithm [1] (or HQC algorithm [5]). When a node fails, the former can tolerate failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new coterie must be reconstructed.
Reference: [3] <author> H. Garcia and D. Barbara. </author> <title> "How to assign Votes in a Distributed System". </title> <journal> Journal of The ACM, </journal> <month> May </month> <year> 1985. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from poor failure resiliency. In particular, if the site holding the token fails, a complex token regeneration protocol must be executed. A coterie <ref> [3, 4] </ref> is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. <p> Let U denotes a non-empty set of N sites. A coterie C, is a set of sets where each set g in C is called a quorum. The following conditions hold for quorums in a coterie C under U <ref> [3, 9] </ref>: 1. (8g 2 C)[g 6= ^ g U ]; 2. M inimality P roperty : (8g; h 2 C)[g 6 h]; and 3. Intersection P roperty : (8g; h 2 C)[g " h 6= ]. For example C=ffa,bg,fb,cgg is a coterie under U =fa,b,cg, g=fa,bg is a quorum.
Reference: [4] <author> T. Ibaraki and T. Kameda. </author> <title> "Theory of Coteries". </title> <type> Technical Report, </type> <institution> CSS/LCCR TR90-09, University of Kyoto, </institution> <address> Japan, </address> <year> 1990. </year>
Reference-contexts: Besides the long delay, token-based algorithms suffer from poor failure resiliency. In particular, if the site holding the token fails, a complex token regeneration protocol must be executed. A coterie <ref> [3, 4] </ref> is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently.
Reference: [5] <author> A. Kumar. </author> <title> "Hierarchical Quorum Consensus: A new Algorithm for managing Replicated Data". </title> <journal> IEEE Trans. Computers, </journal> <pages> pages 996-1004, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> We observe that our algorithm has the lowest synchronization delay and still has low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from token loss problem. 6 Adding Fault-tolerance Many coterie-based algorithms <ref> [1, 2, 5, 7, 10] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the resiliency of an algorithm. <p> The quorum size in tree algorithm is log N in the best case and changes to N+1 2 in the worst case. In HQC or Hierarchical Voting Consensus <ref> [5] </ref>, sites are organized in a multilevel hierarchy and voting is performed at each level of the hierarchy. The lowest level in the hierarchy contains groups of sites. In this construction, the quorum size becomes N 0:63 . The Grid-set algorithm [2] has two levels. <p> Since all these fault tolerant coteries satisfy the intersection property, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm [10] (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm <ref> [5] </ref>). When a node fails, the former can tolerate failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new coterie must be reconstructed. Note that, even in the former, a recovery scheme reduces message complexity.
Reference: [6] <author> L. Lamport. </author> <title> "Time, Clocks and Ordering of Events in Distributed Systems". </title> <journal> Communication of the ACM, </journal> <month> July </month> <year> 1978. </year>
Reference-contexts: Over the last decade, many mutual exclusion algorithms [16] have been proposed to improve the performance of distributed systems, but they either reduce the message complexity at the cost of long synchronization delay or reduce the synchronization delay at the cost of message complexity. Lamport uses logical timestamp <ref> [6] </ref> to implement distributed mutual exclusion. For each CS execution, each site needs to get the permission from all other (N 1) sites. The message complexity of this algorithm is 3 fl (N 1) and the synchronization delay is T . <p> In order to enter the CS, every site must get permission from all the sites in req set (i). Every request message is assigned a timestamp (the sequence number and the site number) according to Lamport's scheme <ref> [6] </ref>. The sequence number assigned is greater than that of any request message sent, received, or observed at that site.
Reference: [7] <author> M. Maekawa. </author> <title> "A p N Algorithm for Mutual Exclusion in Decentralized Systems". </title> <journal> ACM Transactions on Computer Systems, </journal> <month> May </month> <year> 1985. </year>
Reference-contexts: The dynamic algorithm in [15] on the average requires N 1 messages per CS execution at low load and 2 fl (N 1) at high load. The synchronization delay is still T . In Maekawa's scheme <ref> [7] </ref>, a set of sites called a coterie is associated with each site, and this set has a nonempty intersection with the sets corresponding to every other sites. To execute CS, a site only locks all sites in its coterie; thus, message complexity is dramatically reduced. <p> A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> Our scheme is independent of the coterie being used. K is p N if we use Maekawa's quorum algorithm <ref> [7] </ref>, and K becomes log N when we use Agrawal and Abbadi quorum algorithm [1]. Moreover, the redundancy in the quorum can increase the resilience to site and communication link failures. The rest of the paper is organized as follows. Section 2 describes the system model. <p> Therefore, the synchronization delay is T instead of 2T in Maekawa's algorithm. 5.3 Comparison With Other Algorithms The proposed algorithm is independent of the coterie being used. K is p N if we use Maekawa's quorum algorithm <ref> [7] </ref>, and K is log N when we use Agrawal and Abbadi quorum algorithm [1]. Table 1 shows the message complexity and the synchronization delay for the proposed and various existing mutual exclusion algorithms. We observe that our algorithm has the lowest synchronization delay and still has low message complexity. <p> We observe that our algorithm has the lowest synchronization delay and still has low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from token loss problem. 6 Adding Fault-tolerance Many coterie-based algorithms <ref> [1, 2, 5, 7, 10] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the resiliency of an algorithm.
Reference: [8] <author> M. Naimi and M. Trehel. </author> <title> "An Improvement of the Log(n) Distributed Algorithm for Mutual Exclusion". </title> <booktitle> Proceedings of the 7th International Conference on Distributed Computing System, </booktitle> <pages> pages 371-375, </pages> <year> 1987. </year>
Reference-contexts: The site requests the token only from these sites, reducing the number of messages required to execute the CS. Although the synchronization delay is T, the message complexity varies between 0 and N . The mutual exclusion algorithms in <ref> [8, 11] </ref> on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in [8] can be as much as O (N ). <p> The mutual exclusion algorithms in [8, 11] on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in <ref> [8] </ref> can be as much as O (N ). These algorithms have long delays because they impose some logical structure on the system topology (like a graph or tree) and a token request message must travel serially along the edges of the graph or tree.
Reference: [9] <author> M.L. Neilsen. </author> <title> "Fault-Tolerant Distributed Mutual Exclusion". </title> <booktitle> Seventh International Conference on Parallel and Distributed Computing Systems, </booktitle> <pages> pages 539-542, </pages> <year> 1994. </year>
Reference-contexts: A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> Let U denotes a non-empty set of N sites. A coterie C, is a set of sets where each set g in C is called a quorum. The following conditions hold for quorums in a coterie C under U <ref> [3, 9] </ref>: 1. (8g 2 C)[g 6= ^ g U ]; 2. M inimality P roperty : (8g; h 2 C)[g 6 h]; and 3. Intersection P roperty : (8g; h 2 C)[g " h 6= ]. For example C=ffa,bg,fb,cgg is a coterie under U =fa,b,cg, g=fa,bg is a quorum.
Reference: [10] <author> S. Rangarajan, S. Setia and S.K. Tripathi. </author> <title> "A Fault-Tolerant Algorithm for Replicated Data Management". </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <pages> pages 1271-1282, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: A coterie [3, 4] is a set of sets (quorums) with the property that any two members of a coterie have a nonempty intersection. Coterie based mutual exclusion algorithms, which are a generalization of Maekawa's p N algorithm, have attracted considerable attention recently. Many algorithms <ref> [1, 2, 5, 7, 9, 10] </ref> construct a coterie differently from Maekawa's algorithm, which can reduce the message complexity or increase the resilience to site and communication failures. Because these algorithms are based on the Maekawa's algorithm, they all have the high synchronization delay (2T ). <p> We observe that our algorithm has the lowest synchronization delay and still has low message complexity. Although Raymond's algorithm has lower message complexity, it has long synchronization delay and suffers from token loss problem. 6 Adding Fault-tolerance Many coterie-based algorithms <ref> [1, 2, 5, 7, 10] </ref> have been proposed for mutual exclusion in distributed system. In general, there is a trade-off between the message complexity and the resiliency of an algorithm. <p> A majority voting scheme is used at the upper level to increase the resiliency, while a Maekawa-like grid structure is used at the lower level to reduce message overhead. Their quorum size is N 2 G, where G is the group size. The Rangarajan-Setia-Tripathi algorithm <ref> [10] </ref> is in some sense a dual of the Grid-set algorithm [2]. Specifically, they use majority voting at the lower (subgroup) level and a Maekawa-like grid structure at the higher level. With this change, their quorum size becomes G+1 2 N G , where G is the subgroup size. <p> Our algorithm can use any of the fault-tolerant coteries constructed by these algorithms to become a fault-tolerant algorithm. Since all these fault tolerant coteries satisfy the intersection property, the correctness of the algorithm is maintained. There is a difference between Rangarajan-Setia-Tripathi algorithm <ref> [10] </ref> (or the Grid-set [2]) and the tree algorithm [1] (or HQC algorithm [5]). When a node fails, the former can tolerate failure without any recovery scheme (this is achieved by majority voting in the subgroup), but the latter needs a recovery scheme because a new coterie must be reconstructed.
Reference: [11] <author> K. Raymond. </author> <title> "A Tree-based Algorithm for Distributed Mutual Exclusion". </title> <journal> ACM Transactions on Computing systems, </journal> <pages> pages 61-77, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: The site requests the token only from these sites, reducing the number of messages required to execute the CS. Although the synchronization delay is T, the message complexity varies between 0 and N . The mutual exclusion algorithms in <ref> [8, 11] </ref> on the average require only O (log N ) messages to execute the critical section; however, the average delay in these algorithms is also O (log N ). The worst case delay of the algorithm in [8] can be as much as O (N ).
Reference: [12] <author> G. Ricart and A.K. Agrawal. </author> <title> "An Optimal Algorithm for mutual Exclusion in Computer Networks". </title> <journal> Communication of the ACM, </journal> <month> January </month> <year> 1981. </year>
Reference-contexts: Lamport uses logical timestamp [6] to implement distributed mutual exclusion. For each CS execution, each site needs to get the permission from all other (N 1) sites. The message complexity of this algorithm is 3 fl (N 1) and the synchronization delay is T . Ricart-Agrawal algorithm <ref> [12] </ref> is an optimization of Lamport's algorithm that reduces the RELEASE message by cleverly merging them with REPLY messages. This merging is achieved by deferring the lower priority request.
Reference: [13] <author> M. Singhal. </author> <title> "A Heuristically-Aided Algorithm for Mutual Exclusion in Distributed System". </title> <journal> IEEE Transactions on Computers, </journal> <month> May </month> <year> 1989. </year>
Reference-contexts: In this algorithm, the synchronization delay is reduced to T as opposed to 2T in Maekawa-type algorithms; however, the message complexity increases to O (N ). In Singhal's token-based heuristic algorithm <ref> [13] </ref>, each site maintains information about the state of other sites in the system and uses it to select a set of sites that are likely to have the token. The site requests the token only from these sites, reducing the number of messages required to execute the CS.
Reference: [14] <author> M. Singhal. </author> <title> "A Class of Deadlock-Free Maekawa-type Algorithms for Mutual Exclusion in Distributed Systems". </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 131-138, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Singhal uses the concepts of mutable locks to achieve an optimal deadlock-free Maekawa-type algorithm <ref> [14] </ref> which is free from deadlocks and does not exchange messages like INQUIRE, FAILED, and YIELD to resolve deadlocks. In this algorithm, the synchronization delay is reduced to T as opposed to 2T in Maekawa-type algorithms; however, the message complexity increases to O (N ).
Reference: [15] <author> M. Singhal. </author> <title> "A Dynamic Information Structure Mutual Exclusion Algorithm for Distributed Systems". </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <month> January </month> <year> 1992. </year>
Reference-contexts: This merging is achieved by deferring the lower priority request. In this algorithm, the messages per CS execution is reduced to 2 fl (N 1) messages and the synchronization delay is still T. The dynamic algorithm in <ref> [15] </ref> on the average requires N 1 messages per CS execution at low load and 2 fl (N 1) at high load. The synchronization delay is still T .
Reference: [16] <author> M. Singhal. </author> <title> "A Taxonomy of Distributed Mutual Exclusion". </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18 </volume> <pages> 94-101, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The synchronization delay is the time required after a site exits the CS and before the next site enters the CS, and it is measured in terms of the average message delay (T ). Over the last decade, many mutual exclusion algorithms <ref> [16] </ref> have been proposed to improve the performance of distributed systems, but they either reduce the message complexity at the cost of long synchronization delay or reduce the synchronization delay at the cost of message complexity. Lamport uses logical timestamp [6] to implement distributed mutual exclusion.
Reference: [17] <author> T.H. Thomas. </author> <title> "A majority consensus approach to concurrency control for multiple copy databases". </title> <journal> ACM Trans. Database Systems, </journal> <pages> pages 180-209, </pages> <month> June </month> <year> 1979. </year> <month> 20 </month>
Reference-contexts: In general, there is a trade-off between the message complexity and the resiliency of an algorithm. For example, majority voting <ref> [17] </ref> which has high resiliency has relatively high message 17 complexity O (N ), whereas Maekawa's algorithm which has low message complexity O ( p relatively low resiliency to failures. Much progress has been made to increase the resiliency of mutual exclusion algorithms.
References-found: 17

