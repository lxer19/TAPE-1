URL: ftp://ftp.cl.cam.ac.uk/opera/nomad.ps.gz
Refering-URL: http://www.cs.umbc.edu/agents/mobile/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Baltzer Journals A Framework to Support Mobile Users of Multimedia Applications  
Author: John Bates, David Halls and Jean Bacon 
Address: Pembroke Street, Cambridge UK  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: In this paper we describe how we have extended our distributed multimedia application platform to support the fact that users may change their physical location whilst continuing to interact with an application. We are assuming an environment of ubiquitous computer deployment. Constructing multimedia applications from reusable active objects leads to efficient and dynamically reconfigurable systems. These objects have been made mobile so they can follow users as they move. This work differs from other approaches (e.g. teleporting or mobile scripting languages such as Java) in that there is support for more than just mobile GUIs. Also the entire application doesn't have to move; only objects dependent on a user's location need follow him/her. We have implemented all concepts discussed and have built working multimedia applications which can support user mobility. In our experiments, we found it appropriate to use compiled objects as media processors and interpreted objects as high level managers.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Bacon, J. Bates, R. Hayton, and K. Moody. </author> <title> Using events to build distributed applications. </title> <booktitle> In 2nd International Workshop on Services for Distributed and Networked Environments. IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: In this paper we present a platform which supports complex applications and takes into account mobile users. Results from our previous research provided a starting point for this work. We have built a platform to support the authoring and run-time management of distributed active systems <ref> [2, 1] </ref>. Examples of such active systems are interactive multimedia applications, cooperative working applications, agent architectures, active databases and applications which respond to changes in people's locations. Instead of building one-off monolithic applications, our platform supports the construction of applications from reusable components. We call these components active objects.
Reference: [2] <author> J. Bates and J. Bacon. </author> <title> Supporting interactive presentation for distributed multimedia applications. </title> <booktitle> Multimedia Tools and Applications, </booktitle> <volume> 1(1) </volume> <pages> 47-78, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: In this paper we present a platform which supports complex applications and takes into account mobile users. Results from our previous research provided a starting point for this work. We have built a platform to support the authoring and run-time management of distributed active systems <ref> [2, 1] </ref>. Examples of such active systems are interactive multimedia applications, cooperative working applications, agent architectures, active databases and applications which respond to changes in people's locations. Instead of building one-off monolithic applications, our platform supports the construction of applications from reusable components. We call these components active objects.
Reference: [3] <author> H. Boehm. </author> <title> Space efficient conservative garbage collection. </title> <booktitle> In Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 197-206. </pages> <booktitle> SIGPLAN, </booktitle> <year> 1993. </year>
Reference-contexts: Each site is actually arranged as a number of server threads which interact with each other and with arriving REPs. A thread-safe version of Boehm's garbage collector <ref> [3] </ref> is being used. * The abstraction of a "farm" Each farm (server) accepts work packets and guarantees to process them and produce results (synchronously or asynchronously).
Reference: [4] <author> H. Cejtin, S. Jagannathan, and R. Kelsey. </author> <title> Higher-order distributed objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(5) </volume> <pages> 704-739, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Java's disadvantage is that it does not J. Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 3 support state saving explicitly. There are also many other REP systems currently under investigation, such as Omniware [10], Dreme [5] and Kali Scheme <ref> [4] </ref>. For a more detailed discussion of these systems see [7]. We see the importance of mobile scripting languages but our view is that applications should be composed of multiple objects, each of which may be running on separate machines.
Reference: [5] <author> M. Fuchs. Dreme: </author> <title> For Life in the Net. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, </institution> <address> New York University, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Java's disadvantage is that it does not J. Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 3 support state saving explicitly. There are also many other REP systems currently under investigation, such as Omniware [10], Dreme <ref> [5] </ref> and Kali Scheme [4]. For a more detailed discussion of these systems see [7]. We see the importance of mobile scripting languages but our view is that applications should be composed of multiple objects, each of which may be running on separate machines.
Reference: [6] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment. </title> <type> Technical report, </type> <institution> Sun Mi-crosystems, </institution> <year> 1995. </year>
Reference-contexts: The process can then be moved to a workstation at the user's new location, the state restored and execution continued. One system currently in the limelight is Sun's Java <ref> [6] </ref>. Java is a general purpose object-oriented scripting language. It has come to predominance as Java REPs can be downloaded and run in an extended Web browser. Java's disadvantage is that it does not J. Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 3 support state saving explicitly.
Reference: [7] <author> D. Halls. </author> <title> Remotely Executable Programs. </title> <type> Internal Report, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 3 support state saving explicitly. There are also many other REP systems currently under investigation, such as Omniware [10], Dreme [5] and Kali Scheme [4]. For a more detailed discussion of these systems see <ref> [7] </ref>. We see the importance of mobile scripting languages but our view is that applications should be composed of multiple objects, each of which may be running on separate machines. When a user moves, only those objects tied to that user's physical location need to be moved.
Reference: [8] <author> A Harter and A Hopper. </author> <title> A Distributed Location System for the Active Office. </title> <journal> IEEE Network, </journal> <month> January </month> <year> 1994. </year>
Reference-contexts: We are assuming ubiquitous deployment of computer equipment around our environment. We are also assuming a means of locating users and equipment. One way is to use electronic tags and we have considerable experience using the active badge system <ref> [8] </ref>. It is also possible to use simpler techniques such as determining the location of the workstation at which a user is logged in. 1.2 Related Research This section discusses two different research areas relevant to our work, teleporting and language support for mobile programs.
Reference: [9] <institution> Architecture Projects Management Limited. Advanced Networked Systems Architecture Testbench Implementation Manual, </institution> <year> 1993. </year> <editor> J. Bates, D. Halls and J. </editor> <booktitle> Bacon/ Mobile Multimedia Applications 20 </booktitle>
Reference-contexts: It may even involve some AI techniques. It is also likely to involve the saving and reinstantiating of all object state. 3 Extending Distributed Programming To support the construction of mobile active objects we have enhanced a distributed programming platform. Our starting point was the ODP-ANSA model <ref> [9] </ref> which provides object specification, remote invocation and interface trading facilities. We assume a multi-threaded implementation environment. The programming system we used as the basis of our prototype implementation was developed in Cambridge and is called MSRPC2.
Reference: [10] <author> S. Lucco, O. Sharp, and R. Wahbe. </author> <title> Omniware a universal substrate for web programming. World Wide Web Journal, </title> <booktitle> 1(1) </booktitle> <pages> 359-368, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Java's disadvantage is that it does not J. Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 3 support state saving explicitly. There are also many other REP systems currently under investigation, such as Omniware <ref> [10] </ref>, Dreme [5] and Kali Scheme [4]. For a more detailed discussion of these systems see [7]. We see the importance of mobile scripting languages but our view is that applications should be composed of multiple objects, each of which may be running on separate machines.
Reference: [11] <author> G. Nelson. </author> <title> System Support for Location Aware Computing. </title> <type> PhD thesis, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1996. </year> <note> In preparation. </note>
Reference-contexts: Models for location and containment are being investigated <ref> [11] </ref>. We have used a simple model, dividing our world into rooms and parts of rooms. Each location has a real world name, as in the examples. We also named objects with real world names such as the person "David Halls", or the workstation "Britten".
Reference: [12] <author> S. Pope. </author> <title> Application migration for mobile computers. </title> <booktitle> Submitted to The 3rd International Workshop on Services in Distributed and Networked Environments, </booktitle> <year> 1996. </year>
Reference-contexts: Process migration is a well-established technology which allows a running process to be saved, and restored on another computer. Some systems <ref> [12] </ref> even support the transparent rebinding of communication endpoints.
Reference: [13] <author> T Richardson, F Bennett, G Mapp, </author> <title> and A Hopper. Teleporting in an X Window System Environment. </title> <journal> IEEE Personal Communications, </journal> <month> August </month> <year> 1994. </year>
Reference-contexts: 1 Introduction 1.1 Background and Motivation Early experiments with application support for user mobility, such as the work on tele-porting <ref> [13] </ref> has shown the benefits of allowing users to change location, either within a room, between rooms or between domains, whilst retaining their application sessions. This frees users from some of the the traditional "stiffness" of computer-based activities. <p> It is also possible to use simpler techniques such as determining the location of the workstation at which a user is logged in. 1.2 Related Research This section discusses two different research areas relevant to our work, teleporting and language support for mobile programs. Teleporting <ref> [13] </ref> is a technique to support user mobility by the user interface of an application following a mobile user. In order to "teleport", a user clicks a button on their active badge near any X windows workstation. Their current X session then pops up on that workstation.
Reference: [14] <author> David De Roure. </author> <title> QPL3 Continuations, </title> <type> Concurrency and Communication . Technical Report CSTR 90-20, </type> <institution> Department of Electronics and Computer Science, Unive rsity of Southampton, </institution> <year> 1990. </year>
Reference-contexts: It is for REPs which require the capture of their dynamic state (i.e. which might be stopped, J. Bates, D. Halls and J. Bacon/ Mobile Multimedia Applications 13 shipped somewhere else and then restarted from where they left off). Something like the abstract continuation-passing style <ref> [14] </ref> is used to convert Bigloo lambda objects (which cannot be marshalled) into a form suitable for marshalling. * Dynamic loading of object files and shared libraries This enables modules to be plugged in at run-time; scripts can arrive at a monitor site and link to domain-specific facilities.
Reference: [15] <author> M. Serrano and P. Weis. Bigloo: </author> <title> a portable and optimizing compiler for strict functional languages. </title> <booktitle> In Second International Static Analysis Symposium (SAS95), </booktitle> <year> 1995. </year>
Reference-contexts: These sites listen on sockets for the arrival of objects. An object is transmitted as a marshalled Scheme expression. When an object arrives, it becomes "active". Our prototype implementation of Tube Sites is based around the Bigloo Scheme compiler/interpreter <ref> [15] </ref>. Additional functionality that has been added and compiled in is described below. * Low-level communication facilities Unix sockets, files, redirection of input and output are accessible from scripts. A generic addressing scheme is provided; addresses are typed and contact and resolution procedures are associated with each type.
References-found: 15

