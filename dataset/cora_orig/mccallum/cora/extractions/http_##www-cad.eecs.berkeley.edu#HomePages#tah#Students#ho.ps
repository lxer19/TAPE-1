URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Students/ho.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Students/ho.html
Root-URL: http://www.cs.berkeley.edu
Title: AUTOMATIC ANALYSIS OF HYBRID SYSTEMS  
Author: Pei-Hsin Ho 
Degree: A Dissertation Presented to the Faculty of the Graduate School  in Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy by  
Date: August 1995  
Affiliation: of Cornell University  
Abstract-found: 0
Intro-found: 1
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: Common examples of linear constraints are constant differential equations, rectangular differential inclusions, and rate comparisons. We present decidability and undecidability results for the emptiness problem of linear hybrid automata. 1.2.2 Integrator Logic Real-time requirements of systems can be specified in Tctl <ref> [ACD93] </ref>, a branching-time temporal logic that extends Ctl [CES86] with clock variables. We introduce Integrator Computation Tree Logic, Ictl, which strengthens Tctl in the style of [BES93] by admitting integrator variables. An integrator is a stop watch that can be stopped and restarted. <p> On the other hand, we extended timed automata to hybrid automata in [ACHH93]. In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine [NOSY93] independently proposed and studied a similar model. Model checking. In <ref> [ACD93] </ref>, Alur, Courcoubetis and Dill presented an enumerative model checking algorithm for verifying Tctl-requirements of timed automata. After a while, Henzinger, Nicollin, Sifakis, and Yovine [HNSY94] presented a symbolic model-checking algorithm for the same purpose. <p> Thus `[2] = closed denotes the set of all the locations whose second component are closed . If all integrators in ' have the type U , then ' is a formula of Tctl <ref> [ACD93] </ref>. An Ictl-formula that does not contain any integrator is a Ctl-formula [CES86]. When writing Ictl-formulas, we suppress the integrator type U , and we use boolean combinations of location constraints for defining integrator types. <p> Typical abbreviations for Ictl-formulas include the standard temporal operators 83', 92', and ' 1 9W' 2 , for true 8U ', :83:', and ' 1 9U ' 2 _ 92' 1 , respectively. We also use time-bounded temporal operators <ref> [ACD93] </ref> such as 83 5 ', which stands for the Ictl-formula z: 83 (z 5 ^ '), that is, (z : U ): (true8U (z 5 ^ ')). 2.2.2 Semantics Every closed A-formula of Ictl defines a region [[ ]] A of the automaton A.
Reference: [ACH93] <author> R. Alur, C. Courcoubetis, and T.A. Henzinger. </author> <title> Computing accumulated delays in real-time systems. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 181-193. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The most recent good news is in [BLR95]; Bouajjani and others show that the verification of a subclass of duration calculus properties can be reduced to reachability problems for a subclass of integration graphs that can be analyzed using the algorithm of <ref> [ACH93] </ref>. The reachability problems for integration automata is decidable [KPSY93]. Consequently, this subclass of duration calculus properties is decidable and can be automatically verified by HyTech. Lakhaneche and Hooman [LH95] extended metric temporal logic with durations 15 to specify and verify duration properties of hybrid systems using their proof system.
Reference: [ACH + 95] <author> R. Alur, C. Coucoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P.-H. Ho. </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Typical examples are digital controllers that interact with continuously changing physical environments. | Manna and Pnueli [MP93] A hybrid system consists of discrete programs within an analog envi ronment. | Alur, Courcoubetis, Henzinger and Ho <ref> [ACHH93] </ref> All of the three definitions share the common point that hybrid systems contain both digital and analog components. This dissertation aims at the hybrid systems whose digital components are real-time computing systems and analog components are controlled continuous activities in the environment. <p> Subsequently, Maler, Manna, and Pnueli [MMP92] and also Nicollin, Sifakis and Yovin [NSY93] generalized the timed transition systems to hybrid phase transition systems. On the other hand, we extended timed automata to hybrid automata in <ref> [ACHH93] </ref>. In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine [NOSY93] independently proposed and studied a similar model. Model checking. In [ACD93], Alur, Courcoubetis and Dill presented an enumerative model checking algorithm for verifying Tctl-requirements of timed automata. <p> Henzinger and Kopke [HK95] investigated the hybrid automata that have finite mutual simulations. The finite mutual simulation is sufficient for reachability analysis and thus this result leads to verification procedures as well as decidability results. Other decidability and undecidability results can be found in <ref> [ACHH93, KPSY93,AD94,BER94,MV94,BR95,HH95a,HHK95] </ref>. Case studies. Corbett [Cor94] developed a hybrid-automaton-like model and a formal verification tool to specify and verify timing properties of Ada programs. In the paper, Corbett demonstrated his tool by modeling and verifying distributed control systems in Ada.
Reference: [AD90] <author> R. Alur and D.L. Dill. </author> <title> Automata for modeling real-time systems. In M.S. </title> <editor> Paterson, editor, </editor> <booktitle> ICALP 90: Automata, Languages, and Programming, Lecture Notes in Computer Science 443, </booktitle> <pages> pages 322-335. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The first three classes are algorithmic approaches and the last five classes are deductive approaches. Hybrid Automata Most algorithmic approaches use the hybrid automaton model that we introduce in this dissertation. Hybrid automaton model. The first related work dated back in 1990, Alur and Dill <ref> [AD90] </ref> investigated timed automata, an extensions of !-automata with real-valued clocks, for expressing real-time systems. In parallel, Henzinger, Manna, and Pnueli [HMP92,HMP94] also introduced timed transition systems to model real time systems.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The continuous activities of the environment are modeled by real-valued variables whose values change continuously over time according to differential equations. This model for hybrid systems is inspired by the phase transition systems of [MMP92] and [NSY93], and can be viewed as a generalization of timed automata <ref> [AD94] </ref> with discrete and general continuous variables; a similar model has been proposed and studied independently in [NOSY93]. For verification purposes, we first consider linear hybrid automata. In each location of a linear hybrid automaton, the behavior of all variables are governed by linear constraints on the first derivatives. <p> An hybrid automaton A is an integrator automaton if all data variables of A are integrators. Another special case of a linear hybrid automaton is a timed automaton <ref> [AD94] </ref>. An atomic data predicate is simple if it has the form x c or x c, for some c 2 R; an atomic action predicate is simple if it is a simple atomic data predicate or has the form x 0 = c or x 0 = x. <p> On the positive side, the Muller emptiness problem for timed automata (only clock variables) is PSPACE-complete <ref> [AD94] </ref>. On the negative side, we have the following undecidability result. Theorem 1 The Muller emptiness problem is undecidable for 2-rate automata and for simple integrator automata. Proof. The first part of the theorem follows from the undecidability of the halting problem for nondeterministic 2-counter machines (NCMs). <p> Such an analysis, indeed, is performed in the present paper for both linearizations we propose. 116 is a timed automaton <ref> [AD94] </ref>. As a corollary, we obtain a new decidable class of hybrid automata. We verify a nonlinear version of the railroad gate controller in Chapter 2 using the clock translation and the HyTech model checker. The rate translation approximates nonlinear variables by piecewise-linear variables.
Reference: [AFH91] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <booktitle> In Proceedings of the Tenth Annual Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 139-152. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year> <pages> 177 178 </pages>
Reference: [AH94] <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 41(1) </volume> <pages> 181-204, </pages> <year> 1994. </year>
Reference-contexts: An integrator is a stop watch that can be stopped and restarted. We adopt the notation of [BES93] to generalize the clock reset ("freeze") quantifier of Tptl <ref> [AH94] </ref> to a reset quantifier for integrators.
Reference: [AHH93] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <booktitle> In Proceedings of the 14th Annual Real-time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year> <note> The full version appeared as Cornell Technical Report CSD-TR-95-1513. </note>
Reference: [AHV93] <author> R. Alur, T.A. Henzinger, and M.Y. Vardi. </author> <title> Parametric real-time reasoning. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 592-601. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: a forward or backward analysis, respectively, by writing Go := PrintTime [ Iterative [Forward] ] or Go := PrintTime [ Iterative [Backward] ] These commands also print the CPU time consumed by the reachability analysis. 4.2.2 Parametric Analysis The automatic derivation of delay parameters was introduced for real-time systems in <ref> [AHV93] </ref> and now we apply the technique to hybrid systems. We can use HyTech to synthesize necessary and sufficient conditions on system parameters such that a hybrid automaton satisfies a requirement.
Reference: [AL92] <author> M. Abadi and L. Lamport. </author> <title> An old-fashioned recipe for real time. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 1-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [AMP95] <author> E. Asarin, Z. Manna, and A. Pnueli. </author> <title> Rechability analysis of dynamical systems having piecewise-constant derivatives. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 201-210, </pages> <year> 1995. </year>
Reference-contexts: They modified the symbolic reduction method to translate trace automata to finite-state machines. The translated finite-state machines can be verified automatically using VOSS [Seg93], a BDD-based model checker. 14 Dynamical Systems The third algorithmic approach is the dynamical system approach. Asarin, Maler and Pnueli <ref> [AMP95] </ref> considered the reachability problem for a class of linear hybrid systems, namely the dynamic systems with piecewise-constant derivatives. They presented a decision procedure for two-dimensional dynamic systems and an undecidability result for three or more dimensions.
Reference: [ASL93] <author> P.J. Antsaklis, J.A. Stiver, and M. Lemmon. </author> <title> Hybrid system modeling and autonomous control systems. </title> <booktitle> In Proceedings of the 1992 Workshop on Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 366-392. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [BER94] <author> A. Bouajjani, R. Echahed, and R. Robbana. </author> <title> Verifying invariance properties of timed systems with duration variables. </title> <editor> In H. Lang-maack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 193-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [BES93] <author> A. Bouajjani, R. Echahed, and J. Sifakis. </author> <title> On model checking for real-time properties with durations. </title> <booktitle> In Proceedings of the Eighth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 147-159. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: We introduce Integrator Computation Tree Logic, Ictl, which strengthens Tctl in the style of <ref> [BES93] </ref> by admitting integrator variables. An integrator is a stop watch that can be stopped and restarted. <p> An integrator is a stop watch that can be stopped and restarted. We adopt the notation of <ref> [BES93] </ref> to generalize the clock reset ("freeze") quantifier of Tptl [AH94] to a reset quantifier for integrators.
Reference: [BGM93] <author> A. Back, J. Guckenheimer, and M. Myers. </author> <title> A dynamical simulation facility for hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 255-267. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 179 </month>
Reference: [BH95] <author> J.P. Bowen and M.G. </author> <title> Hinchey. Ten commandments of formal methods. </title> <journal> IEEE Computer, </journal> <volume> 28(4) </volume> <pages> 56-63, </pages> <year> 1995. </year>
Reference-contexts: Typically they occur in digital control systems, in business, in dustry and the military. | Grossman, Nerode, Ravn and Rischel [GNRR93] 1 The quotes like this in this dissertation were found in [Rok93] or <ref> [BH95] </ref>. 1 2 Hybrid systems are reactive systems that intermix discrete and continuous components.
Reference: [BLL + 95] <author> J. Bengtsson, K. Larsen, F. Larsson, P. Pettersson, and W. Yi. Up-pall, </author> <title> a tool suite for symbolic and compositional verification of real-time systems. </title> <note> To appear, </note> <year> 1995. </year>
Reference-contexts: Both tools are applicable to the audio control protocol because the linear hybrid automata that model this protocol can be translated into timed automata. The translation was 13 done by hand in [DY95] and automatically by a program called hs2ta in <ref> [BLL + 95] </ref>. Other case studies for verifying hybrid systems using hybrid automata can be also found in [HHWT95a,HHWT95b]. Nonlinear hybrid automata. The first result on the algorithmic formal verification of nonlinear hybrid automata was the clock translation and the rate translation in [HH95a] (Chapter 6).
Reference: [BLR95] <author> A. Bouajjani, Y. Lakhnech, and R. Robbana. </author> <title> From duration calculus to linear hybrid automata. </title> <booktitle> In Proceedings of the Conference on Computer-Aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 196-210. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: To verify if a system satisfies a requirement, a deductive system for duration calculus is used to check the validity of the duration calculus formulas. Most decidability results for the duration calculus are negative. The most recent good news is in <ref> [BLR95] </ref>; Bouajjani and others show that the verification of a subclass of duration calculus properties can be reduced to reachability problems for a subclass of integration graphs that can be analyzed using the algorithm of [ACH93]. The reachability problems for integration automata is decidable [KPSY93].
Reference: [BPV94] <author> D. Bosscher, I. Polak, and F. Vaandrager. </author> <title> Verification of an audio-control protocol. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 170-192. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. The third case study is the Philips audio control protocol presented by Bosscher, Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, <p> Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, by a human proof, that the receiver decodes the signal correctly if and only if the clock drift is bounded by a certain constant. HyTech automatically computes that constant for input strings up to 8 bits. <p> To compare the two tools, Corbett also wrote a translator that translates his model to linear hybrid automata. Bosscher, Polak and Vaandrager applied the notion of hybrid systems to specify and verify a Philips audio control protocol <ref> [BPV94] </ref>. This timing-based protocol was modeled by an extension of the timed I/O automata model [LV93,LV92], and verified mathematically without computer support. Then we verified an instance of this protocol in [HH95b] and the general protocol in [HW95]. <p> In [Lam93], the proof for the gas burner example was done manually, but the proof could be also assisted by TLP [EGL92], a system for mechanically checking TLA proofs. Timed I/O automata In <ref> [BPV94] </ref>, Bosscher, Polak and Vaandrager extended the timed I/O automata model [LV93,LV92] to specify linear hybrid systems. In the same paper, they applied the timed I/O automata model to specify and verify a Philips audio control protocol. Both the system and the requirement are described by timed I/O automata. <p> Both the system and the requirement are described by timed I/O automata. The correctness proof is done by the simulation mapping technique that 16 proves the inclusion of timed traces. The proof was done manually. According to <ref> [BPV94] </ref>, a system for mechanically verifying systems and requirements specified in the timed I/O automata model is being developed. Hoare Logic Hooman [Hoo93] extended the classical Hoare triples with timing primitives to specify hybrid systems. <p> The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. The third case study is the Philips audio control protocol presented by Bosscher, Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, <p> Polak, and Vaandrager <ref> [BPV94] </ref>. The protocol consists of a sender that converts a bit string into an analog signal using the so-called Manchester encoding, and a receiver that converts the analog signal back into a bit string. The sender and the receiver use clocks that may be drifting apart. In [BPV94], it was shown, by a human proof, that the receiver decodes the signal correctly if and only if the clock drift is bounded by a certain constant. <p> follows that b2 b1 &gt; 9 _ b1 b2 &gt; 9 is a necessary and sufficient condition on the initial condition of the system so that neither box will fall off the conveyor belt; that is, jb 1 b 2 j &gt; 9. 7.3 The Philips Audio Control Protocol In <ref> [BPV94] </ref>, the timing-based Philips audio control protocol is modeled by an extension of the timed I/O automata model [LV92,LV93], and verified mathematically without computer support. We model the same protocol using linear hybrid automata, and verify its correctness for input strings up to length 8 using HyTech.
Reference: [BR95] <author> A. Bouajjani and R. Robbana. </author> <title> Verifying !-regular properties for subclasses of linear hybrid systems. </title> <note> 1995. To appear at CAV. </note>
Reference: [Bra95] <author> M.S. Branicky. </author> <title> Universal computation and other capabilities of hybrid and continuous dynamical systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 67-100, </pages> <year> 1995. </year>
Reference: [CC77] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: a unified lattice model for the static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proceedings of the Fourth Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1977. </year>
Reference-contexts: In [HRP94], Halbwachs, Raymond and Proy also applied Halbwachs's polyhedron manipulation library to verify some hybrid system benchmarks presented in [AHH93,HH95c]. Abstract interpretation. The abstract interpretation techniques <ref> [CC77] </ref> were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and the widening operator for verifying real-time systems. <p> We wish to point out that the abstract operators and the iterative approximation process are well-known abstract interpretation techniques [CC77,Cou81] applied to a new domain|that of linear hybrid automata. The convex-hull operator [CH78] and the widening operator <ref> [CC77] </ref>, which is similar to our extrapolation operator, are dynamic abstract operators used for convergence acceleration [CC92]. <p> We show that the rate translation is asymptotically complete for safety properties. We verify the thermostat automaton in Chapter 2 using the rate translation and HyTech. Technically, both the clock translation and the rate translation can be viewed as abstract interpretations of nonlinear hybrid automata <ref> [CC77] </ref>. 6.1 Verification of Nonlinear Hybrid Automata We associate with a hybrid automaton A a labeling function init that assigns to each control location v 2 V a convex data predicate init (v), the initial condition of v; and also a labeling function final that assigns to each location v 2
Reference: [CC92] <author> P. Cousot and R. Cousot. </author> <title> Comparing the Galois connection and widening/narrowing approaches to abstract interpretation. </title> <booktitle> In PLILP, Lecture Notes in Computer Science 631, </booktitle> <pages> pages 269-295. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and the widening operator for verifying real-time systems. Shortly after, Dill and Wong-Toi [DW93, DW95] also applied the two-way iterative approximation method <ref> [CC92] </ref> to the verification of timed automata. It was shown that all the above abstract interpretation methods can be applied to hybrid systems in [HH95c] and also in [HRP94] in parallel. In addition, an extrapolation operator similar to the widening operator was investigated in [HH95c]. <p> The convex-hull operator [CH78] and the widening operator [CC77], which is similar to our extrapolation operator, are dynamic abstract operators used for convergence acceleration <ref> [CC92] </ref>. Also the idea of two-way iteratively refining approximations is due to Patrick and Radhia Cousot [CC92], and it has been used for the analysis of real 101 _y = 2 _y = 1 shut open x = 3 ^ x 0 = 0 time systems [DW93]. <p> The convex-hull operator [CH78] and the widening operator [CC77], which is similar to our extrapolation operator, are dynamic abstract operators used for convergence acceleration <ref> [CC92] </ref>. Also the idea of two-way iteratively refining approximations is due to Patrick and Radhia Cousot [CC92], and it has been used for the analysis of real 101 _y = 2 _y = 1 shut open x = 3 ^ x 0 = 0 time systems [DW93].
Reference: [Cer92] <author> K. Cerans. </author> <title> Decidability of bisimulation equivalence for parallel timer processes. </title> <editor> In G. von Bochmann and D.K. Probst, editors, </editor> <booktitle> CAV 92: Computer-aided Verification, Lecture Notes in Computer Science 663, </booktitle> <pages> pages 302-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: that has a Muller accepting trajectory iff a counter is 0 infinitely often along some trajectories of M ; this shows that the emptiness problem is 1 1 -complete for 2-rate automata [HPS83].) The second part of the theorem follows from an undecidability result for timed systems with memory cells <ref> [Cer92] </ref>. We point out that the Muller emptiness problem is decidable for simple n-rate automata. This is because any simple n-rate automaton can be transformed into a timed automaton by factoring and scaling the rate of the skewed clocks into the same clock rate.
Reference: [CES81] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In 180 Workshop on Logic of Programs, Lecture Notes in Computer Science 131. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal-logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference-contexts: Common examples of linear constraints are constant differential equations, rectangular differential inclusions, and rate comparisons. We present decidability and undecidability results for the emptiness problem of linear hybrid automata. 1.2.2 Integrator Logic Real-time requirements of systems can be specified in Tctl [ACD93], a branching-time temporal logic that extends Ctl <ref> [CES86] </ref> with clock variables. We introduce Integrator Computation Tree Logic, Ictl, which strengthens Tctl in the style of [BES93] by admitting integrator variables. An integrator is a stop watch that can be stopped and restarted. <p> Thus `[2] = closed denotes the set of all the locations whose second component are closed . If all integrators in ' have the type U , then ' is a formula of Tctl [ACD93]. An Ictl-formula that does not contain any integrator is a Ctl-formula <ref> [CES86] </ref>. When writing Ictl-formulas, we suppress the integrator type U , and we use boolean combinations of location constraints for defining integrator types.
Reference: [CH78] <author> P. Cousot and N. Halbwachs. </author> <title> Automatic discovery of linear restraints among variables of a program. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1978. </year>
Reference-contexts: Each approximation can be iteratively refined to achieve the desired precision (Section 5.4). We wish to point out that the abstract operators and the iterative approximation process are well-known abstract interpretation techniques [CC77,Cou81] applied to a new domain|that of linear hybrid automata. The convex-hull operator <ref> [CH78] </ref> and the widening operator [CC77], which is similar to our extrapolation operator, are dynamic abstract operators used for convergence acceleration [CC92].
Reference: [Che68] <author> N.V. Chernikova. </author> <title> Algorithms for discovering the set of all solutions of a linear programming problem. </title> <journal> U.S.S.R. Computational Mathematics and Mathematical Physics, </journal> <volume> 8(6) </volume> <pages> 283-293, </pages> <year> 1968. </year>
Reference-contexts: There exist two efficient translations that translate each representation to the other and minimize the representations on-the-fly <ref> [Che68, LeV92] </ref>.
Reference: [CHR91] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40(5) </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: Guckenheimer and others designed and implemented the tool DSTOOL [Ner92,BGM93] for simulating two or more dimensional hybrid dynamical systems. Zhang and Mackworth [ZM95] also developed a semantic model, constraint nets, to model hybrid dynamical systems. Duration Calculus The first deductive approach that we survey is the duration calculus <ref> [CHR91, RRH93,CHS93,HHF + 94,HPC95] </ref>, which is an interval-based temporal logic developed by Chaochen and others. Duration calculus can be used to specify the accumulated time that a state predicate holds, namely, the duration of the state predicate. <p> The results are shown in Table 4.2. Table 4.2: Coefficient size versus performance Magnitude of the coefficients CPU time (in seconds) 10 0 6:11 10 6 6:36 4.4.2 Leaking Gas Burner In <ref> [CHR91] </ref>, the duration calculus is used to prove that a gas burner does not leak excessively.
Reference: [CHS93] <author> Z. Chaouchen, M.R. Hanzen, and P. Sestoft. </author> <title> Decidability and undecidability results for duration calculus. </title> <booktitle> In STACS'93, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [Cor94] <author> J.C. Corbett. </author> <title> Modeling and analysis of real-time Ada tasking programs. </title> <booktitle> In Proceedings of the 15th Annual Real-time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Besides some small examples, we show the application of HyTech to three nontrivial benchmark problems taken from the literature, rather than devised by us. The first case study is a distributed control system introduced by Corbett <ref> [Cor94] </ref>. The system consists of a controller and two sensors, and is required to issue control commands to a robot within certain time limits. The two sensor processes are executed on a single processor, as scheduled by a priority scheduler. <p> Henzinger and Kopke [HK95] investigated the hybrid automata that have finite mutual simulations. The finite mutual simulation is sufficient for reachability analysis and thus this result leads to verification procedures as well as decidability results. Other decidability and undecidability results can be found in [ACHH93, KPSY93,AD94,BER94,MV94,BR95,HH95a,HHK95]. Case studies. Corbett <ref> [Cor94] </ref> developed a hybrid-automaton-like model and a formal verification tool to specify and verify timing properties of Ada programs. In the paper, Corbett demonstrated his tool by modeling and verifying distributed control systems in Ada. In Chapter 7, we apply HyTech to verify a system of the same kind. <p> All three examples are taken from the literature, rather than devised by us. The first case study is a distributed control system introduced by Corbett <ref> [Cor94] </ref>. The system consists of a controller and two sensors, and is required to issue control commands to a robot within certain time limits. The two sensor processes are executed on a single processor, as scheduled by a priority scheduler. <p> 1 read 2 2x 1 1 x 2 2 sensor 2 sensor 2 _x 2 = 1 request 1 read 2 2x 2 3 request 2 &wait 1 x 0 1 = 0 x 0 2 = 0 7.1 A Distributed Control System with Time-outs The distributed control system of <ref> [Cor94] </ref> consists of two sensors and a controller that generates control commands to a robot according to the sensor readings. The programs for the two sensors and the controller are written in Ada.
Reference: [Cou81] <author> P. Cousot. </author> <title> Semantics fundations of program analysis. </title> <editor> In S.S. Much-nick and N.D. Jones, editors, </editor> <title> Program Flow Analysis: </title> <booktitle> Theory and Applications, </booktitle> <pages> pages 303-342. </pages> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference: [DV95a] <author> A. Deshpande and P. Varaiya. </author> <title> Information structures for control and verification of hybrid systems. </title> <booktitle> In Proceedings of the American Control Conference, </booktitle> <year> 1995. </year>
Reference: [DV95b] <author> A. Deshpande and P. Varaiya. </author> <title> Viable control of hybrid systems. </title> <booktitle> In Proceedings of the 1994 Workshop on Hybrid Systems and Autonomous Control, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [DW93] <author> D.L. Dill and H. Wong-Toi. </author> <title> Using iterative symbolic approximation for timing verification. </title> <editor> In T. Rus, editor, </editor> <booktitle> Proceedings of the First AMAST Workshop on Real-time Systems, </booktitle> <year> 1993. </year> <month> 181 </month>
Reference-contexts: Abstract interpretation. The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and the widening operator for verifying real-time systems. Shortly after, Dill and Wong-Toi <ref> [DW93, DW95] </ref> also applied the two-way iterative approximation method [CC92] to the verification of timed automata. It was shown that all the above abstract interpretation methods can be applied to hybrid systems in [HH95c] and also in [HRP94] in parallel. <p> Also the idea of two-way iteratively refining approximations is due to Patrick and Radhia Cousot [CC92], and it has been used for the analysis of real 101 _y = 2 _y = 1 shut open x = 3 ^ x 0 = 0 time systems <ref> [DW93] </ref>. We acknowledge the work of Nicolas Halbwachs, who has applied the convex-hull and widening operations to the analysis of synchronous programs [Hal93] and linear hybrid automata [HRP94]; also, the current implementation of HyTech makes use of Halbwachs' polyhedron manipulation library.
Reference: [DW95] <author> D.L. Dill and H. Wong-Toi. </author> <title> Verification of real-time systems by successive over- and underapproximation. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 409-422. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Abstract interpretation. The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and the widening operator for verifying real-time systems. Shortly after, Dill and Wong-Toi <ref> [DW93, DW95] </ref> also applied the two-way iterative approximation method [CC92] to the verification of timed automata. It was shown that all the above abstract interpretation methods can be applied to hybrid systems in [HH95c] and also in [HRP94] in parallel.
Reference: [DY95] <author> C. Daws and S. Yovine. </author> <title> Verification of multirate timed automata with KRONOS: two examples. </title> <type> Technical Report Spectre-95-06, </type> <institution> VERIMAG, </institution> <month> apr </month> <year> 1995. </year> <note> To appear at RTSS. </note>
Reference-contexts: In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine [OSY94] introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. The translated timed automata can be verified by their symbolic model checker Kro-nos <ref> [DY95] </ref> based on [HNSY94]. Since the reachability problem and even the Tctl model checking is decidable for timed automata, the by-product of this work is some decidability results. Similar transformations were also studied by Howard Wong-Toi in his dissertation [WT94]. Theory. <p> This timing-based protocol was modeled by an extension of the timed I/O automata model [LV93,LV92], and verified mathematically without computer support. Then we verified an instance of this protocol in [HH95b] and the general protocol in [HW95]. Shortly after, Daws and Yovine <ref> [DY95] </ref> applied Kronos, and Bengtsson, Larsen, Larsson, Pettersson, and Yi [BLL + 95,LPY95] applied UPPAAL to verify the same protocol. Based on the model checking methodology for timed automata in [HNSY94], Kronos and UPPAAL are symbolic model checkers for timed automata. <p> Both tools are applicable to the audio control protocol because the linear hybrid automata that model this protocol can be translated into timed automata. The translation was 13 done by hand in <ref> [DY95] </ref> and automatically by a program called hs2ta in [BLL + 95]. Other case studies for verifying hybrid systems using hybrid automata can be also found in [HHWT95a,HHWT95b]. Nonlinear hybrid automata. <p> The system is illustrated in Figure 7.4. This system has been also modeled and analyzed in <ref> [DY95] </ref>. Robot D, one of the two robots, is modeled by the linear hybrid automaton of Figure 7.5. The clock d is used to measure the time needed for the actions performed by robot D. Initially robot D is looking at the service station (location d stay).
Reference: [EGL92] <author> U. Engberg, P. Gronning, and L. Lamport. </author> <title> Machanical verification of concurrent systems with TLA. In Logic of Programs, </title> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The system F satisfies the requirement G if all behaviors satisfy the formula F ) G, which can be proved or disproved by a proof system for TLA+. In [Lam93], the proof for the gas burner example was done manually, but the proof could be also assisted by TLP <ref> [EGL92] </ref>, a system for mechanically checking TLA proofs. Timed I/O automata In [BPV94], Bosscher, Polak and Vaandrager extended the timed I/O automata model [LV93,LV92] to specify linear hybrid systems. In the same paper, they applied the timed I/O automata model to specify and verify a Philips audio control protocol.
Reference: [FR75] <author> J. Ferrante and C. Rackoff. </author> <title> A decision procedure for the first-order theory of real addition with order. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4(1) </volume> <pages> 69-76, </pages> <year> 1975. </year>
Reference-contexts: We now describe the quantifier elimination procedure that we implemented in the first version of HyTech. In fact, we first implemented the theoretically optimal decision procedure of Ferrante and Rackoff <ref> [FR75] </ref>. We found, however, that the following "naive" quantifier-elimination procedure performs better for our purposes, perhaps because we need to deal only with quantified formulas in a particular form. We eliminate quantifiers one by one, starting with innermost quantifiers.
Reference: [GKNY92] <author> J. Guckenheimer, W. Kohn, A. Nerode, and A. Yakhnis. </author> <title> Hybrid systems papers for CDC92. </title> <type> Technical Report 92-31, </type> <institution> Mathematical Science Institute, Cornell University, </institution> <year> 1992. </year>
Reference: [GL93] <author> R.L. Grossman and R.G. Larson. </author> <title> Some remarks about flows in hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 317-356. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [GL95] <author> R.L. Grossman and R.G. Larson. </author> <title> An algebraic approach to hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 101-112, </pages> <year> 1995. </year>
Reference: [GNKJ95] <author> X. Ge, A. Nerode, W. Kohn, and J. James. </author> <title> Distributed intelligent control theory of hybrid systems. </title> <booktitle> In Proceedings of the Fifth Annual Conference on AI, Simulation, and Planning in High Autonomy Systems, </booktitle> <pages> pages 12-15. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference: [GNRR93] <editor> R.L. Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors. </editor> <booktitle> Hybrid Systems. Lecture Notes in Computer Science 736. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Typically they occur in digital control systems, in business, in dustry and the military. | Grossman, Nerode, Ravn and Rischel <ref> [GNRR93] </ref> 1 The quotes like this in this dissertation were found in [Rok93] or [BH95]. 1 2 Hybrid systems are reactive systems that intermix discrete and continuous components.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Cour-coubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 182 </month>
Reference-contexts: Later we generalized this symbolic model-checking algorithm to become a symbolic model 11 checking procedure for hybrid systems. In [HH95c], we substituted the quantifier-elimination operations in our symbolic model-checking procedure with more efficient polyhedron-manipulation operations provided in Halbwachs's polyhedron manipulation library <ref> [Hal93] </ref>. In [HRP94], Halbwachs, Raymond and Proy also applied Halbwachs's polyhedron manipulation library to verify some hybrid system benchmarks presented in [AHH93,HH95c]. Abstract interpretation. The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and <p> more efficient polyhedron-manipulation operations provided in Halbwachs's polyhedron manipulation library <ref> [Hal93] </ref>. In [HRP94], Halbwachs, Raymond and Proy also applied Halbwachs's polyhedron manipulation library to verify some hybrid system benchmarks presented in [AHH93,HH95c]. Abstract interpretation. The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. Halbwachs [Hal93] used two abstract interpretation operators, the convex hull operator and the widening operator for verifying real-time systems. Shortly after, Dill and Wong-Toi [DW93, DW95] also applied the two-way iterative approximation method [CC92] to the verification of timed automata. <p> It is easy to check that ffi 0 satisfies all the required conditions and p i [ffi := ffi 0 ] is true. 3.3.2 Better Implementation After reading Halbwachs's paper <ref> [Hal93] </ref> about his polyhedral-manipulation library, we realized that most operations in the symbolic model-checking procedure can be substituted with more efficient polyhedral-manipulation operations provided in Halbwachs's polyhedral-manipulation library. Accordingly, we reimple mented HyTech. <p> We acknowledge the work of Nicolas Halbwachs, who has applied the convex-hull and widening operations to the analysis of synchronous programs <ref> [Hal93] </ref> and linear hybrid automata [HRP94]; also, the current implementation of HyTech makes use of Halbwachs' polyhedron manipulation library.
Reference: [HH95a] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <booktitle> In Proceedings of the Conference on Computer-Aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: we have to refine our approximation, by applying fewer abstract-interpretation operators, or by using two-way iterative approximation [CC92,DW95]. 1.2.6 Verification of Nonlinear Hybrid Systems HyTech can be used to automate the verification of nonlinear hybrid systems with the help of two algorithmic translations, the clock translation and the rate translation <ref> [HH95a] </ref>, from nonlinear hybrid automata to linear hybrid automata. Both translations are sound and, when it applies, the clock translation is also complete (up to numeric errors). <p> Other case studies for verifying hybrid systems using hybrid automata can be also found in [HHWT95a,HHWT95b]. Nonlinear hybrid automata. The first result on the algorithmic formal verification of nonlinear hybrid automata was the clock translation and the rate translation in <ref> [HH95a] </ref> (Chapter 6). Subsequently, Henzinger and Wong-Toi [HWT95] introduced the phase portrait approximation method to translate nonlinear hybrid automata to linear hybrid automata. The phase portrait approximation can be made more accurate than the rate translation.
Reference: [HH95b] <author> T.A. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <booktitle> In Proceedings of the 1994 Workshop on Hybrid Systems and Autonomous Control, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> Also appeared as Cornell Technical Report CSD-TR-95-1521. </note>
Reference-contexts: This timing-based protocol was modeled by an extension of the timed I/O automata model [LV93,LV92], and verified mathematically without computer support. Then we verified an instance of this protocol in <ref> [HH95b] </ref> and the general protocol in [HW95]. Shortly after, Daws and Yovine [DY95] applied Kronos, and Bengtsson, Larsen, Larsson, Pettersson, and Yi [BLL + 95,LPY95] applied UPPAAL to verify the same protocol.
Reference: [HH95c] <author> T.A. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <booktitle> In Proceedings of the 1994 Workshop on Hybrid Systems and Autonomous Control, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> Priliminary version appeared as Cornell Technical Report CSD-TR-94-1437. </note>
Reference-contexts: After a while, Henzinger, Nicollin, Sifakis, and Yovine [HNSY94] presented a symbolic model-checking algorithm for the same purpose. Later we generalized this symbolic model-checking algorithm to become a symbolic model 11 checking procedure for hybrid systems. In <ref> [HH95c] </ref>, we substituted the quantifier-elimination operations in our symbolic model-checking procedure with more efficient polyhedron-manipulation operations provided in Halbwachs's polyhedron manipulation library [Hal93]. In [HRP94], Halbwachs, Raymond and Proy also applied Halbwachs's polyhedron manipulation library to verify some hybrid system benchmarks presented in [AHH93,HH95c]. Abstract interpretation. <p> Shortly after, Dill and Wong-Toi [DW93, DW95] also applied the two-way iterative approximation method [CC92] to the verification of timed automata. It was shown that all the above abstract interpretation methods can be applied to hybrid systems in <ref> [HH95c] </ref> and also in [HRP94] in parallel. In addition, an extrapolation operator similar to the widening operator was investigated in [HH95c]. In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine [OSY94] introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. <p> It was shown that all the above abstract interpretation methods can be applied to hybrid systems in <ref> [HH95c] </ref> and also in [HRP94] in parallel. In addition, an extrapolation operator similar to the widening operator was investigated in [HH95c]. In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine [OSY94] introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. The translated timed automata can be verified by their symbolic model checker Kro-nos [DY95] based on [HNSY94].
Reference: [HHF + 94] <author> J. He, C.A.R. Hoare, M. Franzle, M. Muller-Olm, E.R. Olderog, M. Schenke, M.R. Hansen, A.P. Ravn, and H. Rischel. </author> <title> Provably correct systems. </title> <booktitle> In FTRTFT'94, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [HHK95] <author> M.R. Henzinger, T.A. Henzinger, and P.W. Kopke. </author> <title> Computing simulations on finite and infinite graphs. </title> <note> To appear at FOCS, </note> <year> 1995. </year>
Reference: [HHWT95a] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> The next generation. </title> <booktitle> To appear at Proceedings of the 16th Annual Real-time Systems Symposium (RTSS), </booktitle> <year> 1995. </year>
Reference: [HHWT95b] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to hytech. </title> <booktitle> To appear at Proceedings of the Workshop on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), </booktitle> <address> Aarhus, Denmark, </address> <year> 1995. </year>
Reference: [HK95] <author> T.A. Henzinger and P.W. Kopke. </author> <title> Hybrid automata with finite mutual simulations. </title> <type> Technical Report CSD-TR-95-1497, </type> <institution> Cornell University, </institution> <year> 1995. </year>
Reference-contexts: They introduced a translation from a even more general class of linear hybrid automata to timed automata. The work thus implies a more general decidability result. The same paper also finds a sharp boundary between decidable and undecidable linear hybrid automata. Henzinger and Kopke <ref> [HK95] </ref> investigated the hybrid automata that have finite mutual simulations. The finite mutual simulation is sufficient for reachability analysis and thus this result leads to verification procedures as well as decidability results. Other decidability and undecidability results can be found in [ACHH93, KPSY93,AD94,BER94,MV94,BR95,HH95a,HHK95]. Case studies.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year> <month> 183 </month>
Reference-contexts: In CAV'94, Puri and Varaiya [PV94] proved that the reachability problem for a class of linear hybrid automata is de 12 cidable. Shortly after, this work was generalized by Henzinger, Kopke, Puri and Varaiya <ref> [HKPV95] </ref>. They introduced a translation from a even more general class of linear hybrid automata to timed automata. The work thus implies a more general decidability result. The same paper also finds a sharp boundary between decidable and undecidable linear hybrid automata. <p> The emptiness problem for A c , however, can be solved exactly only if the clock translation A c is rational. This gives us the following decidability result, which covers a class of nonlinear hybrid automata, while all previously published decidability results refer to linear hybrid automata <ref> [HKPV95] </ref>. Corollary 2 The emptiness problem is decidable for rationally solvable hybrid automata. 6.2.4 ffi-approximate Clock Translation If the clock translation A c is not rational, we approximate A c by a rational automaton, and show soundness for emptiness checking.
Reference: [HMP92] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 226-251. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [HMP93] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Towards refining temporal specifications into hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 60-76. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [HMP94] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Temporal proof methodologies for timed transition systems. </title> <journal> Information and Computation, </journal> <volume> 112(2) </volume> <pages> 273-337, </pages> <year> 1994. </year>
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: As the variables of a hybrid system range over the real numbers, the state space is infinite, and state sets|so-called regions|must be represented symbolically rather than enumeratively. A symbolic model-checking algorithm for verifying Tctl-requirements of real-time systems is presented in <ref> [HNSY94] </ref>. We extend this result and present a symbolic model-checking procedure for verifying Ictl-requirements of linear hybrid automata. Given an Ictl-formula and a hybrid automaton, we compute the target region of states that satisfy the formula by successive approximation, as the limit of an infinite sequence of regions. <p> In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine [NOSY93] independently proposed and studied a similar model. Model checking. In [ACD93], Alur, Courcoubetis and Dill presented an enumerative model checking algorithm for verifying Tctl-requirements of timed automata. After a while, Henzinger, Nicollin, Sifakis, and Yovine <ref> [HNSY94] </ref> presented a symbolic model-checking algorithm for the same purpose. Later we generalized this symbolic model-checking algorithm to become a symbolic model 11 checking procedure for hybrid systems. <p> In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine [OSY94] introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. The translated timed automata can be verified by their symbolic model checker Kro-nos [DY95] based on <ref> [HNSY94] </ref>. Since the reachability problem and even the Tctl model checking is decidable for timed automata, the by-product of this work is some decidability results. Similar transformations were also studied by Howard Wong-Toi in his dissertation [WT94]. Theory. There has been lots of theoretical work on hybrid automata. <p> Shortly after, Daws and Yovine [DY95] applied Kronos, and Bengtsson, Larsen, Larsson, Pettersson, and Yi [BLL + 95,LPY95] applied UPPAAL to verify the same protocol. Based on the model checking methodology for timed automata in <ref> [HNSY94] </ref>, Kronos and UPPAAL are symbolic model checkers for timed automata. Both tools are applicable to the audio control protocol because the linear hybrid automata that model this protocol can be translated into timed automata. <p> Also notice that the suffix, stutter, and fusion closures of a trajectory set T are inherited by the subsets T div and T lin . If T is closed under limits, then so is T lin , and T div is closed under divergent limits ("divergence-safe") <ref> [HNSY94] </ref>. The hybrid automaton A is nonzeno if for every admissible state of A there is a divergent trajectory t of A such that t (0; 0) = . In other words, A is nonzeno iff every finite prefix of a trajectory is a prefix of a divergent trajectory. <p> Notice that if A is nonzeno, then the states that occur on divergent trajectories of A are precisely the admissible states A . We restrict our attention to nonzeno hybrid automata. 30 In <ref> [HNSY94] </ref> it is shown how a timed automaton may be turned into a nonzeno automaton with the same divergent trajectories; this is done by strengthening the location invariants, and applies to many hybrid automata also. from Figure 2.1. <p> The disjunctions in the definitions of the temporal operators 9U and 8U account for the possibility that the second argument ' 2 may hold throughout a left-open interval of a trajectory <ref> [HNSY94] </ref>. We write [ ] T for the A ~z -region of all states such that j= T . <p> The state predicate is called a characteristic predicate of (A; ). In general, a characteristic predicate may not exist, and it is undecidable if a given state predicate is a characteristic predicate of (A; ) [ACHH93,KPSY93]. In <ref> [HNSY94] </ref>, a symbolic model-checking algorithm, Smc, is presented for computing a characteristic predicate of (A; ) in the case of a timed automaton A and a Tctl-formula . <p> The Smc-procedure, therefore, may not terminate. 3.2.3 Inevitability The computation of the characteristic region for 8U -formulas is more involved, because the time-step and transition-step relations are reflexive <ref> [HNSY94] </ref>. We proceed in two steps. First we reduce inevitability 8U (for nonzeno automata) to an iteration of time-bounded inevitability. Second, we reduce time-bounded inevitability (over divergent trajectories) to possibility 9U , which we know how to compute. <p> Then for each disjunct, which is a conjunction, the linear-programming algorithm of Mathematica decides if that conjunction of linear inequalities has a solution. This is an exponential decision procedure for deciding the satisfiability of linear formulas, whose satisfiability problem is NP-complete <ref> [HNSY94] </ref>. Simplification For quantifier elimination and validity checking, the implementation converts state predicates into disjunctive normal form, which may cause an exponential blow-up of the size of the formulas. To alleviate this problem, we simplify all formulas after each step of the verification process by applying rewrite rules.
Reference: [Hoo93] <author> J. Hooman. </author> <title> A compositional approach to the design of hybrid systems. </title> <booktitle> In Proceedings of the 1992 Workshop on Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 121-148. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The correctness proof is done by the simulation mapping technique that 16 proves the inclusion of timed traces. The proof was done manually. According to [BPV94], a system for mechanically verifying systems and requirements specified in the timed I/O automata model is being developed. Hoare Logic Hooman <ref> [Hoo93] </ref> extended the classical Hoare triples with timing primitives to specify hybrid systems. A compositional proof system is also introduced to verify the specifications in Hoare triples. 1.3.2 Control Both control theorists and computer scientists are advancing the techniques of extracting hybrid-system controllers.
Reference: [HPC95] <author> M.R. Hansen, P.K. Pandya, and Z. Chaochen. </author> <title> Finite divergence. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 113-140, </pages> <year> 1995. </year>
Reference: [HPS83] <author> D. Harel, A. Pnueli, and J. Stavi. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26(2) </volume> <pages> 222-243, </pages> <year> 1983. </year>
Reference-contexts: has a Muller accepting trajectory iff M halts. (Indeed, using acceptance conditions, we can construct a 2-rate automaton that has a Muller accepting trajectory iff a counter is 0 infinitely often along some trajectories of M ; this shows that the emptiness problem is 1 1 -complete for 2-rate automata <ref> [HPS83] </ref>.) The second part of the theorem follows from an undecidability result for timed systems with memory cells [Cer92]. We point out that the Muller emptiness problem is decidable for simple n-rate automata.
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeChar-lier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Later we generalized this symbolic model-checking algorithm to become a symbolic model 11 checking procedure for hybrid systems. In [HH95c], we substituted the quantifier-elimination operations in our symbolic model-checking procedure with more efficient polyhedron-manipulation operations provided in Halbwachs's polyhedron manipulation library [Hal93]. In <ref> [HRP94] </ref>, Halbwachs, Raymond and Proy also applied Halbwachs's polyhedron manipulation library to verify some hybrid system benchmarks presented in [AHH93,HH95c]. Abstract interpretation. The abstract interpretation techniques [CC77] were first applied to real-time systems and then hybrid systems. <p> Shortly after, Dill and Wong-Toi [DW93, DW95] also applied the two-way iterative approximation method [CC92] to the verification of timed automata. It was shown that all the above abstract interpretation methods can be applied to hybrid systems in [HH95c] and also in <ref> [HRP94] </ref> in parallel. In addition, an extrapolation operator similar to the widening operator was investigated in [HH95c]. In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine [OSY94] introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. <p> We acknowledge the work of Nicolas Halbwachs, who has applied the convex-hull and widening operations to the analysis of synchronous programs [Hal93] and linear hybrid automata <ref> [HRP94] </ref>; also, the current implementation of HyTech makes use of Halbwachs' polyhedron manipulation library. We suggest a new extrapolation operator instead of Halbwachs' widening operator, which is sometimes too coarse for our purposes (on the other hand, widening, unlike extrapolation, guarantees the convergence of iterative application).
Reference: [Hub95] <author> B. B. Hubbard. </author> <title> Hybrid systems: </title> <journal> the control theory of tomorrow? SIAM NEWS, </journal> <volume> 8(6) </volume> <pages> 12-13, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: The related research of hybrid systems can be classified into two categories: Verification and Control. The verification work has benefit from the control-related research [HWT95]. On the other hand, as Anil Nerode predicted in <ref> [Hub95] </ref>, the process of extracting the control automata will also be benefit from the verification techniques.
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <booktitle> In Proceedings of the Conference on Computer-Aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> 184 </month>
Reference-contexts: In [BPV94], it was shown, by a human proof, that the receiver decodes the signal correctly if and only if the clock drift is bounded by a certain constant. HyTech automatically computes that constant for input strings up to 8 bits. In <ref> [HW95] </ref>, Howard Wong-Toi and the author applied HyTech to verify the protocol with input strings of arbitrary length. This result is not included in this dissertation. 1.3 Related Work The research of hybrid systems has a short history and yet fruitful results in both computer science and control theory. <p> This timing-based protocol was modeled by an extension of the timed I/O automata model [LV93,LV92], and verified mathematically without computer support. Then we verified an instance of this protocol in [HH95b] and the general protocol in <ref> [HW95] </ref>. Shortly after, Daws and Yovine [DY95] applied Kronos, and Bengtsson, Larsen, Larsson, Pettersson, and Yi [BLL + 95,LPY95] applied UPPAAL to verify the same protocol. Based on the model checking methodology for timed automata in [HNSY94], Kronos and UPPAAL are symbolic model checkers for timed automata.
Reference: [HWT95] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Phase portrait approximation for hybrid systems. </title> <note> Submitted, </note> <year> 1995. </year>
Reference-contexts: The related research of hybrid systems can be classified into two categories: Verification and Control. The verification work has benefit from the control-related research <ref> [HWT95] </ref>. On the other hand, as Anil Nerode predicted in [Hub95], the process of extracting the control automata will also be benefit from the verification techniques. <p> Other case studies for verifying hybrid systems using hybrid automata can be also found in [HHWT95a,HHWT95b]. Nonlinear hybrid automata. The first result on the algorithmic formal verification of nonlinear hybrid automata was the clock translation and the rate translation in [HH95a] (Chapter 6). Subsequently, Henzinger and Wong-Toi <ref> [HWT95] </ref> introduced the phase portrait approximation method to translate nonlinear hybrid automata to linear hybrid automata. The phase portrait approximation can be made more accurate than the rate translation. However, a good phase portrait approximation requires a seemly insight of the differential equations that govern the continuous activities.
Reference: [KHMP94] <author> A. Kapur, T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Proving safety properties of hybrid systems. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 431-454. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [KJN + 95] <author> W. Kohn, J. James, A. Nerode, K. Harbison, and A. Agrawala. </author> <title> A hybrid system approach to computer-aided control engineering. </title> <journal> IEE Control Systems Magazine, </journal> <volume> 15(2) </volume> <pages> 14-25, </pages> <year> 1995. </year>
Reference: [KM91] <author> R.P. Kurshan and K.L. McMillan. </author> <title> Analysis of digital circuits through symbolic reduction. </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 10(11) </volume> <pages> 1356-1371, </pages> <year> 1991. </year>
Reference-contexts: The phase portrait approximation can be made more accurate than the rate translation. However, a good phase portrait approximation requires a seemly insight of the differential equations that govern the continuous activities. Symbolic Reduction Another algorithmic approach is the symbolic reduction method introduced by Kurshan and McMillan <ref> [KM91] </ref>. Kurshan and McMillan applied symbolic reduction to analyze a circuit modeled at the transistor level. The circuit at the transistor level is essentially a finite-state machine with differential equations that govern the analog behavior of the circuit. <p> This dissertation introduces two algorithms for translating nonlinear hybrid systems into linear hybrid systems. The author believes that the symbolic reduction method in <ref> [KM91] </ref> for translating circuits at the transistor level to finite-state machines can be extended to another sound translation from nonlinear hybrid automata to linear hybrid automata. The result would permit the analysis of a more general class of nonlinear hybrid automata.
Reference: [KN93] <author> W. Kohn and A. Nerode. </author> <title> A hybrid systems architecture. </title> <editor> In J.N. Crossley, J.B. Remmel, R.A. Shore, and M.E. Sweedler, editors, </editor> <booktitle> Logic Methods, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We divide the work in the area into four classes. Nerode and Kohn's Model We first discuss the work of Nerode, Kohn, and others [GKNY92,Ner93,NK93b, NK93a,KN93,KNRY95,LGKN95,KJN + 95,GNKJ95]. A simple example of Nerode and Kohn's hybrid system model <ref> [KN93] </ref> is illustrated in Figure 1.2. The hybrid system consists of a continuous plant interacting with a digital controller at times n .
Reference: [KNR95] <author> W. Kohn, A. Nerode, and J.B. Remmel. </author> <title> Hybrid systems as Finsler manifolds: finite state control as approximation to connections. </title> <booktitle> In To appear at Proceedings of Hybrid System Workshop, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Basically, the Lagrangian constraint on the trajectory can be translated into symbolic formulas for desirable control automaton using the method. Kohn and Nerode <ref> [KNRG94, KNR95] </ref> suggested that the state space of a hybrid system should be considered as a differentiable manifold, the carrier manifold. A point (state) of the carrier manifold represents the state of all the digital and analog variables.
Reference: [KNRG94] <author> W. Kohn, A. Nerode, J.B. Remmel, and X. Ge. </author> <title> Mutiple agent hybrid control: carrier manifolds and chattering approximations to optimal control. </title> <booktitle> In CDC94, </booktitle> <year> 1994. </year>
Reference-contexts: Basically, the Lagrangian constraint on the trajectory can be translated into symbolic formulas for desirable control automaton using the method. Kohn and Nerode <ref> [KNRG94, KNR95] </ref> suggested that the state space of a hybrid system should be considered as a differentiable manifold, the carrier manifold. A point (state) of the carrier manifold represents the state of all the digital and analog variables.
Reference: [KNRY95] <author> W. Kohn, A. Nerode, J.B. Rammel, and A. Yakhnis. </author> <title> Viability in hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 141-168, </pages> <year> 1995. </year>
Reference: [KPSY93] <author> Y. Kesten, A. Pnueli, J. Sifakis, and S. Yovine. </author> <title> Integration graphs: a class of decidable hybrid systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Similar transformations were also studied by Howard Wong-Toi in his dissertation [WT94]. Theory. There has been lots of theoretical work on hybrid automata. Kesten, Pnueli, Sifakis and Yovine <ref> [KPSY93] </ref> introduced a class of decidable linear hybrid automata called integration graphs. In CAV'94, Puri and Varaiya [PV94] proved that the reachability problem for a class of linear hybrid automata is de 12 cidable. Shortly after, this work was generalized by Henzinger, Kopke, Puri and Varaiya [HKPV95]. <p> The reachability problems for integration automata is decidable <ref> [KPSY93] </ref>. Consequently, this subclass of duration calculus properties is decidable and can be automatically verified by HyTech. Lakhaneche and Hooman [LH95] extended metric temporal logic with durations 15 to specify and verify duration properties of hybrid systems using their proof system.
Reference: [LA95] <author> M. Lemmon and P.J. Antsaklis. </author> <title> Inductively inferring valid logical models of continuous-state dynamical systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 201-210, </pages> <year> 1995. </year>
Reference: [Lam87] <author> L. Lamport. </author> <title> A fast mutual exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <year> 1987. </year> <month> 185 </month>
Reference-contexts: Each process has a critical section, and at every time instant at most one of the two processes is allowed to be in its critical section. Mutual exclusion can be ensured by a version of Fischer's protocol <ref> [Lam87] </ref>, which we first describe in pseudocode. Each process P i , for i = 1; 2, executes the protocol in Table 4.1.
Reference: [Lam93] <author> L. Lamport. </author> <title> Hybrid systems in TLA+. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 77-102. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Kapur, Henzinge, Manna and Pnueli [HMP93,KHMP94] introduced a proof system for verifying phase transition systems against hybrid temporal logic (HTL) specifications. TLA+ TLA+ [AL92,Lam93,Lam94] is a general-purpose formal specification language based on Temporal Logic in Actions, with no built-in primitives for specifying real-time properties. Lamport <ref> [Lam93] </ref> used TLA+ to define operators for specifying real-time and duration properties. These operators are used to specify and prove a gas burner example (Section 4.4.2) in the paper. Both the system, F , and the requirement, G, are specified by TLA+ formulas. <p> Both the system, F , and the requirement, G, are specified by TLA+ formulas. The system F satisfies the requirement G if all behaviors satisfy the formula F ) G, which can be proved or disproved by a proof system for TLA+. In <ref> [Lam93] </ref>, the proof for the gas burner example was done manually, but the proof could be also assisted by TLP [EGL92], a system for mechanically checking TLA proofs. Timed I/O automata In [BPV94], Bosscher, Polak and Vaandrager extended the timed I/O automata model [LV93,LV92] to specify linear hybrid systems.
Reference: [Lam94] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <year> 1994. </year>
Reference: [LeV92] <author> H. LeVerge. </author> <title> A note on chernikova's algorithm. </title> <type> Technical Report Research Report 635, </type> <institution> IRISA, </institution> <year> 1992. </year>
Reference-contexts: There exist two efficient translations that translate each representation to the other and minimize the representations on-the-fly <ref> [Che68, LeV92] </ref>.
Reference: [LGKN95] <author> J. Liu, X. Ge, W. Kohn, and A. Nerode. </author> <title> A semi-autonomous mul-tiagent decision model for a battlefield environment. </title> <booktitle> To appear at Proceedings of Hybrid System Workshop, </booktitle> <year> 1995. </year>
Reference: [LH95] <author> Y. Lakhneche and J. Hooman. </author> <title> Metric temporal logic with durations. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 201-210, </pages> <year> 1995. </year>
Reference-contexts: The reachability problems for integration automata is decidable [KPSY93]. Consequently, this subclass of duration calculus properties is decidable and can be automatically verified by HyTech. Lakhaneche and Hooman <ref> [LH95] </ref> extended metric temporal logic with durations 15 to specify and verify duration properties of hybrid systems using their proof system. Phase Transition Systems Manna and Pnueli [MP93] designed the phase transition system model for modeling hybrid systems and also a proof rule for verifying phase transition systems.
Reference: [LP85] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite-state concurrent programs satisfy their linear specification. </title> <booktitle> In Proceedings of the 12th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107. </pages> <publisher> ACM Press, </publisher> <year> 1985. </year>
Reference: [LPY95] <author> K.G. Larsen, P. Pettersson, and W. Yi. </author> <title> Compositional and symbolic model-checking of real-time systems. </title> <note> To appear at RTSS, </note> <year> 1995. </year>
Reference: [LSA93] <author> M. Lemmon, J.A. Stiver, and P.J. Antsaklis. </author> <title> Event identification and intelligent hybrid control. </title> <booktitle> In Proceedings of the 1992 Workshop on Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 268-296. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [LV92] <author> N.A. Lynch and F. Vaandrager. </author> <title> Action transducers and timed automata. </title> <editor> In R.J. Cleaveland, editor, </editor> <booktitle> CONCUR 92: Theories of Con-currency, Lecture Notes in Computer Science 630, </booktitle> <pages> pages 436-455. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [LV93] <author> N.A. Lynch and F. Vaandrager. </author> <title> Forward and backward simulations, part ii: timing-based systems. </title> <type> Technical Report CS-R9314, </type> <institution> CWI, </institution> <address> Amsterdam, </address> <year> 1993. </year>
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking: An Approach to the State Explosion Problem. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year> <month> 186 </month>
Reference: [MMP92] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The discrete actions of a program are modeled by a change of the control locations. The continuous activities of the environment are modeled by real-valued variables whose values change continuously over time according to differential equations. This model for hybrid systems is inspired by the phase transition systems of <ref> [MMP92] </ref> and [NSY93], and can be viewed as a generalization of timed automata [AD94] with discrete and general continuous variables; a similar model has been proposed and studied independently in [NOSY93]. For verification purposes, we first consider linear hybrid automata. <p> The first related work dated back in 1990, Alur and Dill [AD90] investigated timed automata, an extensions of !-automata with real-valued clocks, for expressing real-time systems. In parallel, Henzinger, Manna, and Pnueli [HMP92,HMP94] also introduced timed transition systems to model real time systems. Subsequently, Maler, Manna, and Pnueli <ref> [MMP92] </ref> and also Nicollin, Sifakis and Yovin [NSY93] generalized the timed transition systems to hybrid phase transition systems. On the other hand, we extended timed automata to hybrid automata in [ACHH93]. In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine [NOSY93] independently proposed and studied a similar model.
Reference: [MP93] <author> Z. Manna and A. Pnueli. </author> <title> Verifying hybrid systems. In R.L. </title> <editor> Gross-man, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 4-35. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Typical examples are digital controllers that interact with continuously changing physical environments. | Manna and Pnueli <ref> [MP93] </ref> A hybrid system consists of discrete programs within an analog envi ronment. | Alur, Courcoubetis, Henzinger and Ho [ACHH93] All of the three definitions share the common point that hybrid systems contain both digital and analog components. <p> Consequently, this subclass of duration calculus properties is decidable and can be automatically verified by HyTech. Lakhaneche and Hooman [LH95] extended metric temporal logic with durations 15 to specify and verify duration properties of hybrid systems using their proof system. Phase Transition Systems Manna and Pnueli <ref> [MP93] </ref> designed the phase transition system model for modeling hybrid systems and also a proof rule for verifying phase transition systems. Kapur, Henzinge, Manna and Pnueli [HMP93,KHMP94] introduced a proof system for verifying phase transition systems against hybrid temporal logic (HTL) specifications.
Reference: [MPS95] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. </title> <booktitle> In STACS 95, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: The verification work has benefit from the control-related research [HWT95]. On the other hand, as Anil Nerode predicted in [Hub95], the process of extracting the control automata will also be benefit from the verification techniques. A clear evidence of the trend is shown in <ref> [MPS95] </ref>, which shows that the verification techniques developed in this thesis can be applied to extract controllers. 10 1.3.1 Verification Both algorithmic approaches and deductive approaches have been used for the verification of hybrid systems. The algorithmic approaches verify the modeled systems automatically. <p> This multi-agent architecture can be used to control the hybrid systems for which a single agent can not possibly meet the performance requirement. Applications include the national distributed multi-media systems, interactive video-audio-text on demand, manufacturing processes, virtual enterprises, distributed interactive simulation, and traffic control. Fixpoint Computation In <ref> [MPS95] </ref>, Maler, Pnueli and Sifakis show that the synthesis of hybrid-system controllers can be done by the computation of fixpoints of the precondition operators that we developed for the symbolic model-checking algorithm (Chapter 3). <p> Since the fixpoint computation in our symbolic model-checking procedure is location-based, the degree of the locality of the procedure is high. Consequently, the parallelization of HyTech should be a promising direction of future work. Automatic Synthesis of Hybrid-system Controller According to the paper <ref> [MPS95] </ref>, the synthesis of a hybrid system controller can be done by computing fixpoints of the precondition operators that we introduced in Chapter 3. Since HyTech can compute the precondition operators, we should be able to augment HyTech to become a hybrid-system controller synthesizer.
Reference: [MS94] <author> A.K. Martin and C.-J.H. Seger. </author> <title> Conservative approximations of hybrid systems. </title> <note> Submitted, </note> <year> 1994. </year>
Reference-contexts: We plan to adapt the symbolic reduction method to become a sound translation from nonlinear hybrid automata to finite-state machines. Martin and Seger <ref> [MS94] </ref> introduced trace automata to model linear or nonlinear hybrid systems. They modified the symbolic reduction method to translate trace automata to finite-state machines.
Reference: [MV94] <author> J. McManis and P. Varaiya. </author> <title> Suspension automata: a decidable class of hybrid automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 105-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [Ner92] <author> J. Guckenheimerand A. Nerode. </author> <title> Simulation for hybrid systems and nonlinear control. </title> <booktitle> In CDC92, </booktitle> <pages> pages 2980-2981, </pages> <year> 1992. </year>
Reference: [Ner93] <author> A. Nerode. </author> <title> Hybrid system games: extraction of control automata with small topologies. </title> <type> Technical Report Technical Report 93-102, </type> <institution> Mathematical Science Institute, Cornell University, </institution> <year> 1993. </year>
Reference: [NK93a] <author> A. Nerode and W. Kohn. </author> <title> Models for hybrid systems: automata, topologies, controllability, observability. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 317-356. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [NK93b] <author> A. Nerode and W. Kohn. </author> <title> Multiple-agent hybrid control architecture. In R.L. </title> <editor> Grossman, A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 297-316. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [NOSY93] <author> X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> An approach to the description and analysis of hybrid systems. In R.L. </title> <editor> Grossman, 187 A. Nerode, A.P. Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 149-178. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: This model for hybrid systems is inspired by the phase transition systems of [MMP92] and [NSY93], and can be viewed as a generalization of timed automata [AD94] with discrete and general continuous variables; a similar model has been proposed and studied independently in <ref> [NOSY93] </ref>. For verification purposes, we first consider linear hybrid automata. In each location of a linear hybrid automaton, the behavior of all variables are governed by linear constraints on the first derivatives. Common examples of linear constraints are constant differential equations, rectangular differential inclusions, and rate comparisons. <p> Subsequently, Maler, Manna, and Pnueli [MMP92] and also Nicollin, Sifakis and Yovin [NSY93] generalized the timed transition systems to hybrid phase transition systems. On the other hand, we extended timed automata to hybrid automata in [ACHH93]. In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine <ref> [NOSY93] </ref> independently proposed and studied a similar model. Model checking. In [ACD93], Alur, Courcoubetis and Dill presented an enumerative model checking algorithm for verifying Tctl-requirements of timed automata. After a while, Henzinger, Nicollin, Sifakis, and Yovine [HNSY94] presented a symbolic model-checking algorithm for the same purpose. <p> discrete action act (e) = p ^ ff of a bounded-drift linear hybrid automaton. 4.1.1 The Input Language The input language of HyTech is straight-forward and can be clearly illustrated by a simple example. 72 Example: Reactor Temperature Control We use a variant of the reactor temperature control system from <ref> [NOSY93] </ref> as a running example for this chapter. The system consists of a reactor core and two control rods that control the temperature of the reactor core. The reactor core is modeled by the linear hybrid automaton in Figure 4.1.
Reference: [NSY93] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 181-202, </pages> <year> 1993. </year>
Reference-contexts: The continuous activities of the environment are modeled by real-valued variables whose values change continuously over time according to differential equations. This model for hybrid systems is inspired by the phase transition systems of [MMP92] and <ref> [NSY93] </ref>, and can be viewed as a generalization of timed automata [AD94] with discrete and general continuous variables; a similar model has been proposed and studied independently in [NOSY93]. For verification purposes, we first consider linear hybrid automata. <p> In parallel, Henzinger, Manna, and Pnueli [HMP92,HMP94] also introduced timed transition systems to model real time systems. Subsequently, Maler, Manna, and Pnueli [MMP92] and also Nicollin, Sifakis and Yovin <ref> [NSY93] </ref> generalized the timed transition systems to hybrid phase transition systems. On the other hand, we extended timed automata to hybrid automata in [ACHH93]. In the same workshop proceedings, Nicollin, Olivero, Sifakis and Yovine [NOSY93] independently proposed and studied a similar model. Model checking.
Reference: [NW88] <author> G.L. Nemhauser and L.A. Wolsey. </author> <title> Integer and Combinatorial Optimization. </title> <publisher> Wiley, </publisher> <year> 1988. </year>
Reference-contexts: We shall call this representation the inequality representation. To store a convex polyhedron P in the inequality representation, we store the matrix [M j~c]. On the other hand, by Minkowski's theorem <ref> [NW88] </ref>, every nonempty convex polyhedron P in R n has a unique (within scalar multiplication) representation by its extreme points X = f~x i j i 2 Ig and 84 x 1 r 1 x extreme rays R = f~r j j j 2 J g such that P = f~x
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: It was shown that all the above abstract interpretation methods can be applied to hybrid systems in [HH95c] and also in [HRP94] in parallel. In addition, an extrapolation operator similar to the widening operator was investigated in [HH95c]. In CAV'94 (Conference on Computer Aided Verification), Olivero, Sifakis and Yovine <ref> [OSY94] </ref> introduced translations (abstract interpretation operators) that translate some classes of linear hybrid automata into timed automata. The translated timed automata can be verified by their symbolic model checker Kro-nos [DY95] based on [HNSY94].
Reference: [PV94] <author> A. Puri and P. Varaiya. </author> <title> Decidability of hybrid systems with rectangular differential inclusions. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 95-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Similar transformations were also studied by Howard Wong-Toi in his dissertation [WT94]. Theory. There has been lots of theoretical work on hybrid automata. Kesten, Pnueli, Sifakis and Yovine [KPSY93] introduced a class of decidable linear hybrid automata called integration graphs. In CAV'94, Puri and Varaiya <ref> [PV94] </ref> proved that the reachability problem for a class of linear hybrid automata is de 12 cidable. Shortly after, this work was generalized by Henzinger, Kopke, Puri and Varaiya [HKPV95]. They introduced a translation from a even more general class of linear hybrid automata to timed automata.
Reference: [PV95a] <author> A. Puri and P. Varaiya. </author> <title> Driving safely in smart cars. </title> <type> Technical Report UCB-ITS-PRR-95-24, </type> <institution> California PATH Research Report, </institution> <month> August </month> <year> 1995. </year>
Reference: [PV95b] <author> A. Puri and P. Varaiya. </author> <title> Verification of hybrid systems using abstractions. </title> <note> To appear, </note> <year> 1995. </year>
Reference-contexts: This scenario is modeled by linear hybrid automata with clocks and integrators. HyTech automatically computes the maximum time difference between two consecutive control commands generated by the controller. The second case study is a two-robot manufacturing system introduced by Puri 9 and Varaiya <ref> [PV95b] </ref>. The system consists of a conveyor belt with two boxes, a service station, and two robots. The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. <p> The second case study is a two-robot manufacturing system introduced by Puri and Varaiya <ref> [PV95b] </ref>. The system consists of a conveyor belt with two boxes, a service station, and two robots. The boxes will not fall to the floor iff initially the boxes are not positioned closely together on the conveyor belt. HyTech automatically computes the minimum allowable initial distance between the two boxes. <p> turnrightd putdownd turnleft d stay d 6d 2d 6 _ d = 1 5 d d pick 1 d pick 2 d put 1 1 d ^ d 0 = 0 1 d ^ d 0 = 0 d 0 = 0 7.2 A Two-robot Manufacturing System Puri and Varaiya <ref> [PV95b] </ref> designed a manufacturing system that consists of a conveyor belt with two boxes, a service station, and two robots. The system is illustrated in Figure 7.4. This system has been also modeled and analyzed in [DY95].
Reference: [QS81] <author> J. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in CESAR. </title> <editor> In M. Dezani-Ciancaglini and U. Montanari, editors, </editor> <booktitle> Fifth International Symposium on Programming, Lecture Notes in Computer Science 137, </booktitle> <pages> pages 337-351. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [Rok93] <author> T. G. Rokicki. </author> <title> Representing and Modeling Circuits. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Typically they occur in digital control systems, in business, in dustry and the military. | Grossman, Nerode, Ravn and Rischel [GNRR93] 1 The quotes like this in this dissertation were found in <ref> [Rok93] </ref> or [BH95]. 1 2 Hybrid systems are reactive systems that intermix discrete and continuous components.
Reference: [RRH93] <author> A.P. Ravn, H. Rischel, and K.M. Hansen. </author> <title> Specifying and verifying requirements of real-time systems. </title> <journal> IEEE Trans. on Software Eng., </journal> <year> 1993. </year>
Reference: [Seg93] <author> C.-J. H. Seger. </author> <title> Voss a formal hardware verification system user's guide. </title> <type> Technical Report Technical report 93-45, </type> <institution> Department of Computer Science, The university of British Columbia, Vancouver, B.C., Canada, </institution> <year> 1993. </year> <month> 188 </month>
Reference-contexts: Martin and Seger [MS94] introduced trace automata to model linear or nonlinear hybrid systems. They modified the symbolic reduction method to translate trace automata to finite-state machines. The translated finite-state machines can be verified automatically using VOSS <ref> [Seg93] </ref>, a BDD-based model checker. 14 Dynamical Systems The third algorithmic approach is the dynamical system approach. Asarin, Maler and Pnueli [AMP95] considered the reachability problem for a class of linear hybrid systems, namely the dynamic systems with piecewise-constant derivatives.
Reference: [Var93] <author> P. Varaiya. </author> <title> Smart cars on smart roads: problems of control. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 38(2) </volume> <pages> 195-207, </pages> <year> 1993. </year>
Reference-contexts: From this result, our symbolic model-checking efforts for hybrid automata can be applied to the synthesis of hybrid-system controllers. PATH The California PATH project <ref> [Var93] </ref> uses the notion of hybrid systems to develop more efficient highway systems. Besides the theoretical work of Puri and Varaiya like [PV94,PV95b] that we mentioned earlier, the PATH hybrid control papers 20 include [DV95b,DV95a,PV95a].
Reference: [WME92] <author> F. Wang, A.K. Mok, and E.A. Emerson. </author> <title> Real-time distributed system specification and verification in asynchronous propositional temporal logic. </title> <booktitle> In Proceedings of the 12th International Conference on Software Engineering, </booktitle> <year> 1992. </year>
Reference-contexts: This is because any simple n-rate automaton can be transformed into a timed automaton by factoring and scaling the rate of the skewed clocks into the same clock rate. An analogous result holds for real-time temporal logics <ref> [WME92] </ref>. More recent decidability and undecidability results can be found in [AD94,KPSY93,BER94,MV94,PV94,BR95,HKPV95]. 2.2 Property Modeling Language: Integrator Logic The formulas of the Integrator Computation Tree Logic Ictl for a given hybrid automaton A contain two kinds of variables|data and control variables of A, and integrators.
Reference: [Wol88] <author> S. Wolfram. </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1988. </year>
Reference-contexts: 6 Mathematica main program Ictl formula Hybrid automata Target region HyTech Halbwachs's polyhedral library C ++ subroutines 1.2.4 Automatic Analysis Tool : HyTech The model-checking procedure has been implemented as part of the Cornell HYbrid TECHnology Tool, HyTech. 3 The first version of HyTech uses the symbolic computation system Mathematica <ref> [Wol88] </ref> for manipulating and simplifying (R; ; +)-formulas. In particular, the computation of weakest preconditions of linear regions requires quantifier elimination in the theory (R; ; +).
Reference: [WT94] <author> Howard Wong-Toi. </author> <title> Symbolic Approximations for Verifying Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stan-ford University, </institution> <address> CA, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: Since the reachability problem and even the Tctl model checking is decidable for timed automata, the by-product of this work is some decidability results. Similar transformations were also studied by Howard Wong-Toi in his dissertation <ref> [WT94] </ref>. Theory. There has been lots of theoretical work on hybrid automata. Kesten, Pnueli, Sifakis and Yovine [KPSY93] introduced a class of decidable linear hybrid automata called integration graphs.
Reference: [ZM95] <author> Y. Zhang and A.K. Mackworth. </author> <title> Constraint nets: a semantic model for hybrid dynamic systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138(1) </volume> <pages> 211-239, </pages> <year> 1995. </year>
Reference-contexts: They presented a decision procedure for two-dimensional dynamic systems and an undecidability result for three or more dimensions. Guckenheimer and others designed and implemented the tool DSTOOL [Ner92,BGM93] for simulating two or more dimensional hybrid dynamical systems. Zhang and Mackworth <ref> [ZM95] </ref> also developed a semantic model, constraint nets, to model hybrid dynamical systems. Duration Calculus The first deductive approach that we survey is the duration calculus [CHR91, RRH93,CHS93,HHF + 94,HPC95], which is an interval-based temporal logic developed by Chaochen and others.
References-found: 112

