URL: http://www.ai.sri.com/~act/act-spec.ps
Refering-URL: http://www.ai.sri.com/~wilkins/bib.html
Root-URL: 
Email: myers@ai.sri.com wilkins@ai.sri.com  
Title: The Act Formalism Version 2.2  
Author: Karen L. Myers David E. Wilkins 
Date: September 25, 1997  
Note: Working Document: Revisions as of  http://www.ai.sri.com/act/act-spec.ps  
Affiliation: SRI International Artificial Intelligence Center  
Abstract: This document describes Version 2.2 of SRI's Act formalism. The Act formalism is a domain-independent language for representing task networks whose actions manipulate both an external world and an internal database. It is intended to serve as an interchange language that will enable a broad range of action-related technologies to share information. The most recent version of the Act specification can be found at the URL: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James F. Allen. </author> <title> Towards a general theory of action and time. </title> <journal> Artificial Intelligence, </journal> <volume> 23, </volume> <year> 1984. </year>
Reference-contexts: For example, SIPE2 recognizes the property Variables for declaring variables as either existentially or universally quantified, and PRS-CL uses the property Decision-Procedure to designate an Act that is used for metalevel reasoning. The Time-Constraints property is used to encode ordering constraints on nodes, in terms of the Allen relations <ref> [1] </ref> (as discussed further in Section 2.5). There are no required properties, although some are recommended for documentation purposes (such as Author). The user is free to supply additional properties, as desired. displayed on the left side of the screen and the plot nodes on the right side.
Reference: [2] <author> Richard Arthur and Jonathan Stillman. Tachyon: </author> <title> A model and environment for temporal reasoning. </title> <type> Technical report, </type> <institution> GE Corporate Research and Development Center, </institution> <year> 1992. </year>
Reference-contexts: Since that time, Act has been extended to support plans, interactions with a sophisticated temporal reasoning system <ref> [2] </ref>, and use of Acts by another reactive execution system [3]. In the future, it is expected that Act will evolve to support the representational requirements of additional action-related technologies.
Reference: [3] <author> E. H. Durfee, M. J. Huber, M. Kurnow, and J. Lee. Taipe: </author> <title> Tactical assistants for interaction planning and execution. </title> <booktitle> In Proceedings of Autonomous Agents '97, </booktitle> <year> 1997. </year>
Reference-contexts: Since that time, Act has been extended to support plans, interactions with a sophisticated temporal reasoning system [2], and use of Acts by another reactive execution system <ref> [3] </ref>. In the future, it is expected that Act will evolve to support the representational requirements of additional action-related technologies. This document describes the Act formalism in brief; additional information on the background and semantics of Act can be found in [7].
Reference: [4] <author> Karen L. Myers. </author> <title> The ACT Editor User's Guide. </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, CA, </address> <year> 1993. </year>
Reference-contexts: Suggested extensions to the formalism would be welcomed. The most recent version of the Act is published at the URL: http://www.ai.sri.com/act/act-spec.ps To support the use of Act, SRI has built the Act-Editor <ref> [4] </ref>, a graphical tool for interactively viewing, creating, modifying, and verifying Acts. The Act-Editor is freely available; instructions for obtaining a copy of the system can be found at the URL: http://www.ai.sri.com/act 2 The Act Formalism The basic unit of organization in the Act formalism is an Act. <p> They are defined as part of the Act-Editor <ref> [4] </ref>. print-acts-to-file &optional (file *grasper-file*) [Function] This function takes a Grasper graph (file) and writes the ASCII version of all Acts in the graph to a file named file.text. print-act-to-file &optional (Act (space)) [Function] This function prints an Act in the current graph in ASCII form to the file actname.text.
Reference: [5] <author> Karen L. Myers. </author> <title> User's Guide for the Procedural Reasoning System. </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, CA, </address> <year> 1993. </year>
Reference-contexts: In contrast to a number of recent efforts to define ontologies for action representations, Act grew out of an effort to enable mature planning-related technologies to interoperate [8] (namely a generative planner [6] and a reactive execution system <ref> [5] </ref>). Since that time, Act has been extended to support plans, interactions with a sophisticated temporal reasoning system [2], and use of Acts by another reactive execution system [3]. In the future, it is expected that Act will evolve to support the representational requirements of additional action-related technologies.
Reference: [6] <author> D. E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: In contrast to a number of recent efforts to define ontologies for action representations, Act grew out of an effort to enable mature planning-related technologies to interoperate [8] (namely a generative planner <ref> [6] </ref> and a reactive execution system [5]). Since that time, Act has been extended to support plans, interactions with a sophisticated temporal reasoning system [2], and use of Acts by another reactive execution system [3]. <p> Each Act describes a set of actions that can be taken to fulfill some designated purpose under certain conditions. The purpose could be either to satisfy a goal or to respond to some event in the world. An Act can represent, among other things, a procedure, a planning operator <ref> [6] </ref>, or a plan at one particular level of detail. Section 3 describes how multiple Acts are used to represent a single plan at multiple levels of abstraction. The purpose and applicability criteria for an Act are formulated using a fixed set of environment conditions.
Reference: [7] <author> David E. Wilkins and Karen L. Myers. </author> <title> A common knowledge representation for plan generation and reactive execution. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(6):731761, </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: In the future, it is expected that Act will evolve to support the representational requirements of additional action-related technologies. This document describes the Act formalism in brief; additional information on the background and semantics of Act can be found in <ref> [7] </ref>. Section 2 provides a high-level overview of Act representational constructs. Section 3 describes how plans at multiple levels of abstraction are represented, while Section 4 defines a BNF grammar for Act. Finally, Section 5 summarizes a set of functions for manipulating ASCII representations of Acts. <p> Section 3 describes how plans at multiple levels of abstraction are represented, while Section 4 defines a BNF grammar for Act. Finally, Section 5 summarizes a set of functions for manipulating ASCII representations of Acts. The Act syntax presented in this document supersedes specifications in any earlier documents (including <ref> [7] </ref>, which corresponds to Version 1.0 of Act). Suggested extensions to the formalism would be welcomed. <p> The interpretation of the goal expression can vary slightly, depending on whether it is in an environment condition or plot node. The following summary introduces the metapredicates; more precise meanings are given in <ref> [7] </ref>. 2.2 Act Metapredicates The term action metapredicates refers to the metapredicates Achieve, Achieve-By, Achieve-All, and Wait-Until. Achieve directs the system to accomplish a goal by any means possible; Achieve-By is similar but specifies a restricted set of Acts that can be used to accomplish the task. <p> The Require-Until metapredicate designates conditions that must be maintained over a specified interval. The Conclude and Retract metapredicates designate changes to the internal database. The distinctions between executing and generating a plan <ref> [7] </ref> result in slightly different intended interpretations of some of the metapredicates by planning and execution systems. Here, we describe these different interpretations and describe each metapredicate in more detail. <p> Require-Until is more difficult to implement in execution systems, since it is not clear what to do upon failure. Each executor may have its own approach to handling failures; the implementation in PRS-CL is described elsewhere <ref> [7] </ref>. USE-RESOURCE This metapredicate in the Resources slot means each of its arguments is a resource throughout the plot. On a plot node, Use-Resource indicates resources required only at that node. <p> The given grammar defines the full syntax for Act. It is not expected that all implementations of Act will necessarily support the full syntax. For example, limitations on the implementation of Act for PRS-CL and SIPE2 are described in <ref> [7] </ref>. The Act-Editor supports the entire syntax for Acts. Although it does not currently provide graphical support for tasks and plans, it will read task and plan expressions and extract the Acts.
Reference: [8] <author> David E. Wilkins, Karen L. Myers, John D. Lowrance, and Leonard P. Wesley. </author> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical AI, </journal> <volume> 7(1):197227, </volume> <year> 1995. </year>
Reference-contexts: Act is designed to be an interchange language that will enable a broad range of action-related technologies to share information. In contrast to a number of recent efforts to define ontologies for action representations, Act grew out of an effort to enable mature planning-related technologies to interoperate <ref> [8] </ref> (namely a generative planner [6] and a reactive execution system [5]). Since that time, Act has been extended to support plans, interactions with a sophisticated temporal reasoning system [2], and use of Acts by another reactive execution system [3].
References-found: 8

