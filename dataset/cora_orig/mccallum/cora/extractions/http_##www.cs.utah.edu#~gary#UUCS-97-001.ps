URL: http://www.cs.utah.edu/~gary/UUCS-97-001.ps
Refering-URL: http://www.cs.utah.edu/~gary/home.html
Root-URL: 
Title: Migrating Relational Data to an OODB: Strategies and Lessons From A Molecular Biology Experience  
Author: Jon Oler, Gary Lindstrom and Terence Critchlow 
Date: February, 1997  
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-97-001  
Abstract: The growing maturity of OODB technology is causing many enterprises to consider migrating relational databases to OODBs. While data remapping is relatively straightforward, greater challenges lie in economically and non-invasively adapting legacy application software. We report on a genetics laboratory database migration experiment, which was facilitated by both organization of the relational data in object-like form and a C++ framework designed to insulate application code from relational artifacts. To our surprise, the framework failed to encapsulate three subtle aspects of the relational implementation, thereby contaminating application code. We describe the underlying issues, and offer cautionary guidance to future migrators. 
Abstract-found: 1
Intro-found: 1
Reference: [ABDDMZ89] <author> M. Atkinson, F. Bancilhon, D. DeWitt, K. Dittrich, D. Maier, and S. Zdonik. </author> <title> The Object-Oriented Database System Manifesto. </title> <booktitle> In Proceedings of the First International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 223-40, </pages> <address> Kyoto, Japan, </address> <month> December, </month> <year> 1989. </year>
Reference-contexts: Persistence [KJA93]). Such RDBMS extensions have been spurred by competition from object-oriented database management systems (OODBMSs), which combine comprehensive database management functionality and full-fledged OO data modeling <ref> [ABDDMZ89] </ref>.
Reference: [BK91] <author> Naser S. Barghouti and Gail E. Kaiser, </author> <title> Concurrency Control in Advanced Database Applications, </title> <journal> Computing Surveys, </journal> <volume> vol. 23, no. 3, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: Consequently a full-fledged port and performance comparison is underway. The project staff is particularly keen on exploiting the OODB version to explore relaxed concurrency control mechanisms appropriate for molecular biology applications, in which database modifications are mostly monotonic, and some degree of data inconsistency is part of daily life <ref> [BK91] </ref>. 23 On a research level, we continue to be intrigued by the question of data evolution within this dual database environment. As remarked early on, among the many services provided by Gorp framework is meta to concrete data representation conversion.
Reference: [C96] <author> R.G.G. Cattell, </author> <title> editor. The Object Database Standard: ODMG-93. 1996. </title> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: All the queries within the Gorp framework would have to be converted from ObjectStores proprietary query facilities to another proprietary API. Current work by ODMG on OQL <ref> [C96] </ref> and ANSI/ISO on SQL3 [SQL3] may make such queries much more portable in the future. Related work The complexity of representing genomic data has been recognized by many other researchers [F91] [GRS94b].
Reference: [CMFRAD94] <author> Judy Cushing, D. Maier, D. Feller, M. Rao, D. Abel, and M. DeVaney. </author> <title> Computational Proxies: Modeling Scientific Applications in Object Database, </title> <booktitle> In Proceedings of the Seventh International Working Conference on Scientific and Statistical Database Management, p. </booktitle> <pages> 196-206, </pages> <address> Portland, Oregon, </address> <month> September, </month> <year> 1994. </year> <note> (I really dont know if this needs to be referenced in the paper). </note>
Reference: [EM92] <author> J. Eliot and B. Moss. </author> <title> Working with Persistent Objects: To Swizzle or Not to Swizzle. </title> <journal> IEEE Transactions on Software Engineering. </journal> <volume> Volume 18, Number 8, </volume> <month> August, </month> <year> 1992. </year> <pages> (pages 657-673) </pages>
Reference-contexts: If persistent objects are to be accessed in the same way as transient objects, then applications must be able to access them through references native to the programming language, i.e. in swizzled form <ref> [EM92] </ref>. These references are bound to a block of memory into which the persistent object is mapped in the address space of the application process.
Reference: [F91] <author> Karen A. Frenkel. </author> <title> The Human Genome Project and Informatics. </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34, Number 11. </volume> <pages> (pages 41 - 51) </pages>
Reference-contexts: Current work by ODMG on OQL [C96] and ANSI/ISO on SQL3 [SQL3] may make such queries much more portable in the future. Related work The complexity of representing genomic data has been recognized by many other researchers <ref> [F91] </ref> [GRS94b]. MapBase, and its successor, LabBase, are genomic information systems developed at the Whitehead Institute similar in scope to that developed at the UCHGR [GRS94a] [RSG95] [G94]. However, both MapBase and LabBase were implemented using an ODBMS (ObjectStore) from the beginning.
Reference: [F96] <author> Michael J. Franklin. </author> <title> Client Data Caching: A Foundation for High Performance Object Database Systems. 1996. </title> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: As described above, the original version of the Gorp framework had an ill-defined form of relaxed consistency due to the creation and manipulation of transient copies of database objects. This problem can be generalized in terms of a cache consistency problem <ref> [F96] </ref>. Efficient protocols for allowing appropriate degrees of consistency in a distributed computing environment with long running, interactive transactions remain an open research question. 22 Conclusions and Future Work We summarize the lessons learned from our migration experience in Table 2, relying on a clinical metaphor.
Reference: [G94] <author> Nathan Goodman. </author> <title> An Object Oriented DBMS War Story: Developing a Genome Mapping Database in C++. </title> <editor> In Kim, W., editor, </editor> <title> Modern Database Management: Object-Oriented and Multidatabase Technologies. </title> <publisher> ACM Press. </publisher>
Reference-contexts: Related work The complexity of representing genomic data has been recognized by many other researchers [F91] [GRS94b]. MapBase, and its successor, LabBase, are genomic information systems developed at the Whitehead Institute similar in scope to that developed at the UCHGR [GRS94a] [RSG95] <ref> [G94] </ref>. However, both MapBase and LabBase were implemented using an ODBMS (ObjectStore) from the beginning.
Reference: [GRS94a] <author> Nathan Goodman, Steve Rozen, Lincoln Stein. </author> <title> Building a Laboratory Information System around a C++-Based Object-Oriented DBMS. </title> <booktitle> Proceedings of the 20 th VLDB Conference, </booktitle> <address> Santiago, Chile, </address> <year> 1994. </year>
Reference-contexts: Related work The complexity of representing genomic data has been recognized by many other researchers [F91] [GRS94b]. MapBase, and its successor, LabBase, are genomic information systems developed at the Whitehead Institute similar in scope to that developed at the UCHGR <ref> [GRS94a] </ref> [RSG95] [G94]. However, both MapBase and LabBase were implemented using an ODBMS (ObjectStore) from the beginning.
Reference: [GRS94b] <author> Nathan Goodman, Steve Rozen, Lincoln Stein. </author> <title> A Glimpse at the DBMS Challenges Posed by the Human Genome Project. </title> <note> Available via anonymous ftp from genome.wi.mit.edu as file /pub/papers/Y1994/challenges.ps.Z. </note>
Reference-contexts: Current work by ODMG on OQL [C96] and ANSI/ISO on SQL3 [SQL3] may make such queries much more portable in the future. Related work The complexity of representing genomic data has been recognized by many other researchers [F91] <ref> [GRS94b] </ref>. MapBase, and its successor, LabBase, are genomic information systems developed at the Whitehead Institute similar in scope to that developed at the UCHGR [GRS94a] [RSG95] [G94]. However, both MapBase and LabBase were implemented using an ODBMS (ObjectStore) from the beginning.
Reference: [KJA93] <author> Arthur M. Keller, Richard Jensen, and Shailesh Agarwal. </author> <title> Persistence software: bridging object-oriented programming and relational databases. </title> <booktitle> Proceedings of the ACM 25 SIGMOD International Conference on Management of Data , Washington DC, </booktitle> <year> 1993, </year> <pages> pp. 523-528. </pages>
Reference-contexts: This RDB shortcoming has begun to be addressed by extended relational systems (e.g., Postgres [SK91]) and middleware such as object oriented relational database gateway products (e.g. Persistence <ref> [KJA93] </ref>). Such RDBMS extensions have been spurred by competition from object-oriented database management systems (OODBMSs), which combine comprehensive database management functionality and full-fledged OO data modeling [ABDDMZ89].
Reference: [LLOW91] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM. </journal> <volume> Volume 34, Number 10, </volume> <month> October, </month> <year> 1991. </year> <pages> (pages 50-63) </pages>
Reference-contexts: The advent and commercial success of well-engineered OODBMS products, such as ObjectStore <ref> [LLOW91] </ref>, indicate the time is ripe to seriously investigate migration to a true OODB.
Reference: [ODI96] <institution> Object Design, Inc., </institution> <address> 25 Burlington Mall Rd., Burlington, MA 01803-4194, USA. </address> <note> Manual Set for ObjectStore Release 4.0, </note> <month> March, </month> <year> 1996. </year>
Reference: [RSG95] <author> Steve Rozen, Lincoln Stein, and Nathan Goodman. LabBase: </author> <title> Managing Lab Data in a Large-Scale Genome-Mapping Project. </title> <journal> IEEE Engineering in Medicine and Biology, </journal> <volume> Volume 14, Number 6, </volume> <editor> p. </editor> <volume> 702 - 709. </volume>
Reference-contexts: Related work The complexity of representing genomic data has been recognized by many other researchers [F91] [GRS94b]. MapBase, and its successor, LabBase, are genomic information systems developed at the Whitehead Institute similar in scope to that developed at the UCHGR [GRS94a] <ref> [RSG95] </ref> [G94]. However, both MapBase and LabBase were implemented using an ODBMS (ObjectStore) from the beginning.
Reference: [RSG94] <author> Steve Rozen, Lincoln Stein, and Nathan Goodman. </author> <title> Constructing a Domain-Specific DBMS using a Persistent Object System. Sixth International Workshop on Persistent Object Systems. </title> <note> Available via anonymous ftp from genome.wi.mit.edu as file /pub/papers/Y1994/labbase-design.ps.Z. </note>
Reference: [SFCDML96] <author> Rob Sargent, Dave Fuhrman, Terence Critchlow, Tony Di Sera, Robert Mecklenburg, Gary Lindstrom, and Peter Cartwright. </author> <title> The Design and Implementation of a Database for Human Genome Research. </title> <booktitle> In Proceedings of the Eighth International Conference on Scientific and Statistical Database Systems, p. </booktitle> <pages> 220-225, </pages> <address> Stockholm, Sweden, </address> <month> June, </month> <year> 1996. </year>
Reference-contexts: (objects, relationships, processes, protocols, and environments), in terms of which all concrete entities are expressed; (ii) an implementation of this model using a commercial RDBMS (Sybase), and (iii) a framework permitting application software to manipulate database contents as though it were a collection of persistent C++ objects, i.e., an OODB <ref> [SFCDML96] </ref>. 5 Underlying this database design is a defensive posture with respect to the most vexing problem the UCHGR database implementers have faced over the years: frequent but unanticipatible schema evolution.
Reference: [SK91] <author> Michael Stonebraker and Greg Kemnitz. </author> <title> The Postgres Next Generation Database Management System. </title> <journal> Communications of the ACM. </journal> <volume> Volume 34, Number 10, </volume> <month> October, </month> <year> 1991. </year> <pages> (pages 78-92) </pages>
Reference-contexts: However, in recent years traditional RDBMSs have come to be viewed as deficient in data representational power in comparison to modern application software, which is increasingly object oriented. This RDB shortcoming has begun to be addressed by extended relational systems (e.g., Postgres <ref> [SK91] </ref>) and middleware such as object oriented relational database gateway products (e.g. Persistence [KJA93]). Such RDBMS extensions have been spurred by competition from object-oriented database management systems (OODBMSs), which combine comprehensive database management functionality and full-fledged OO data modeling [ABDDMZ89].
Reference: [SKW92] <author> Vivek Singhal, Sheetal V. Kakkad, and Paul R. Wilson. </author> <title> Texas: An Efficient, Portable Persistent Store. </title> <booktitle> Proceedings of the Fifth International Workshop on Persistent Object Systems, </booktitle> <address> San Miniato, Italy, </address> <month> September, </month> <year> 1992. </year>
Reference-contexts: The port was never completed. A comparison of performance for various pointer swizzling and non-swizzling schemes is described in [M92]. The Texas <ref> [SKW92] </ref> persistent store implemented pointer swizzling mechanisms very similar to that used by ObjectStore. The developers of Texas also recognized the problem of address space consumption and made some novel suggestions of how to address this problem besides invalidating all references to persistent objects at transaction boundaries [WK92].
Reference: [SZ87] <author> Karen E. Smith and Stanley B. Zdonik. </author> <title> Intermedia: A Case Study of the Differences Between Relational and Object-Oriented Database Systems. </title> <booktitle> OOPSLA 87, </booktitle> <address> Orlando, Florida, </address> <month> October, </month> <year> 1987. </year>
Reference-contexts: or standard effortssuch as OMDGs OQL or SQL3 Table 2 A clinical analysis of porting a relational database to an OODB 21 The creators of Intermedia, a hypermedia framework developed at the Institute for Research in Information and Scholarship, considered porting their framework from an RDBMS to an experimental ODBMS <ref> [SZ87] </ref>. Although ODBMS technology was in its infancy at the time, the Intermedia researchers were mainly interested in overcoming the need to make transient copies of persistent objects stored in the RDBMS as well as the impedance mismatch between an objects representation in an RDBMS and an object-oriented programming language.
Reference: [SQL3] <institution> ISO and SQL3 working draft, </institution> <note> available via anonymous ftp from speckle.ncsl.nist.gov in directory /isowg3. </note>
Reference-contexts: All the queries within the Gorp framework would have to be converted from ObjectStores proprietary query facilities to another proprietary API. Current work by ODMG on OQL [C96] and ANSI/ISO on SQL3 <ref> [SQL3] </ref> may make such queries much more portable in the future. Related work The complexity of representing genomic data has been recognized by many other researchers [F91] [GRS94b].
Reference: [W66] <author> Waverly Root. </author> <title> The Food of France. </title> <publisher> Vintage Books, </publisher> <year> 1966. </year>
Reference-contexts: In the words of Waverly Root, Every virtue is accompanied by its inseparable vices <ref> [W66, p. 14] </ref>. For OODBs, the virtue is direct manipulation of persistent objects by application software. The inseparable vices are the semantic and operational burdens attending such direct manipulation.
Reference: [WK92] <author> Paul R. Wilson and Sheetal V. Kakkad. </author> <title> Pointer Swizzling at Page Fault Time: Efficiently and Compatibly Supporting Huge Address Spaces on Standard Hardware. </title> <booktitle> 26 Workshop on Object Orientation in Operating Systems, p. </booktitle> <pages> 364-377, </pages> <address> Paris, France, </address> <month> September, </month> <year> 1992. </year> <month> 27 </month>
Reference-contexts: The Texas [SKW92] persistent store implemented pointer swizzling mechanisms very similar to that used by ObjectStore. The developers of Texas also recognized the problem of address space consumption and made some novel suggestions of how to address this problem besides invalidating all references to persistent objects at transaction boundaries <ref> [WK92] </ref>. As described above, the original version of the Gorp framework had an ill-defined form of relaxed consistency due to the creation and manipulation of transient copies of database objects. This problem can be generalized in terms of a cache consistency problem [F96].
References-found: 22

