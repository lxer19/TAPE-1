URL: http://www.cs.washington.edu/homes/wchan/work/FSE4.ps
Refering-URL: http://www.cs.washington.edu/homes/wchan/work/FSE4.html
Root-URL: 
Title: Model Checking Large Software Specifications  
Author: Richard J. Anderson Paul Beame Steve Burns William Chan Francesmary Modugno David Notkin Jon D. Reese 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: In this paper we present our results and experiences of using symbolic model checking to study the specification of an aircraft collision avoidance system. Symbolic model checking has been highly successful when applied to hardware systems. We are interested in the question of whether or not model checking techniques can be applied to large software specifications. To investigate this, we translated a portion of the finite-state requirements specification of TCAS II (Traffic Alert and Collision Avoidance System) into a form accepted by a model checker (SMV). We successfully used the model checker to investigate a number of dynamic properties of the system. We report on our experiences, describing our approach to translating the specification to the SMV language and our methods for achieving acceptable performance in model checking, and giving a summary of the properties that we were able to check. We consider the paper as a data point that provides reason for optimism about the potential for successful application of model checking to software systems. In addition, our experiences provide a basis for characterizing features that would be especially suitable for model checkers built specifically for analyzing software systems. The intent of this paper is to evaluate symbolic model checking of state-machine based specifications, not to evaluate the TCAS II specification. We used a preliminary version of the specification, the version 6.00, dated March, 1993, in our study. We did not have access to later versions, so we do not know if the properties identified here are present in later versions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Alspaugh, S. Faulk, K. Britton, R. Parker, D. Par-nas, and J. Shore. </author> <title> Software requirements for the A-7E aircraft. </title> <type> Technical report, </type> <institution> Naval Research Lab., </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: While their motivations were similar, our studies differ in several ways because of differences in the specifications. The A-7E aircraft requirements were written in the Software Cost Reduction (SCR) requirements notation <ref> [1, 13] </ref>, which does not contain features such as hierarchical states and does not make assumptions like the synchrony hypothesis. In addition, the environment of the A-7E specification is abstracted as a set of predicates, whereas 9 the inputs to our system include numerical values.
Reference: [2] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(6):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: The transition relation can be represented as a boolean function. A data structure that has been developed to represent boolean functions is the Ordered Binary Decision Diagram (OBDD, or BDD for short) <ref> [2] </ref>.
Reference: [3] <author> R. E. Bryant. </author> <title> On the complexity of VLSI implementations and graph representation of boolean functions with applications to integer multiplication. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(2) </volume> <pages> 205-213, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: We focused on resolution maneuvers with one intruder aircraft and thus modeled only one instance of Other-Aircraft. 4.2 BDDs We knew a priori that there is no efficient BDD representation for multiplication and division under any variable ordering <ref> [3, 19] </ref> so we realized that we needed to avoid them. Two functions in Own-Aircraft do involve multiplication and division of values for measured altitudes and altitude rates. These are measurements of input variables that we already modeled nondeterministically.
Reference: [4] <author> R. E. Bryant and Y.-A. Chen. </author> <title> Verification of arithmetic circuits with binary moment diagrams. </title> <booktitle> In Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 535-541, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: What else is needed to make model checking as ubiquitous for software systems as it is already for hardware systems? This is hard to predict with certainty, but a number of directions seem especially promising. First, Bryant and Chen <ref> [4] </ref> introduced the BMD (Binary Moment Diagram), a data structure that, in contrast to BDD's, can be used to represent multiplication concisely. With a variant of this data structure, the *BMD, they were able to verify division circuits.
Reference: [5] <author> J. R. Burch, E. M. Clarke, D. E. Long, K. L. McMil-lan, and D. L. Dill. </author> <title> Symbolic model checking for sequential circuit verification. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 13(4) </volume> <pages> 401-424, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The size of the BDDs can be reduced by dynamic variable reordering and conjunctive partitioning <ref> [5] </ref>, which are supported by SMV. These techniques dramatically improved the performance of checking some formulae; however, they did not solve all the problems. The BDD size was very sensitive to the ranges of the variables representing altitudes and altitude rates. Take altitudes for an example.
Reference: [6] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: This representation is frequently small although sometimes its size depends critically on the ordering of the variables. Properties to be checked are usually expressed in a temporal logic, such as Computation Tree Logic (CTL) <ref> [6] </ref>, which is used by SMV. CTL is a branching time temporal logic, extending propositional logic with temporal operators that express how propositions change their truth values over time. In this paper we will only use two temporal operators, namely AG and AF.
Reference: [7] <author> E. M. Clarke and X. Zhao. </author> <title> Word level symbolic model checking: A new approach for verifying arithmetic circuits. </title> <type> Technical Report CMU-CS-95-161, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: With a variant of this data structure, the *BMD, they were able to verify division circuits. A hybrid approach where BMD's are used to represent arithmetic variables and BDD's are used to represent control variables, as suggested by Clarke and Zhao <ref> [7] </ref>, may be attractive. Building model checkers that can handle arbitrarily complicated numeric calculations is almost certainly intractable. However, rudimentary arithmetic, coupled with an understanding of the appropriate notions of approximation, might be sufficient to handle many applications.
Reference: [8] <author> J. C. Corbett. </author> <title> Evaluating deadlock detection methods for concurrent software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-22(3), </volume> <month> March </month> <year> 1996. </year>
Reference-contexts: Corbett <ref> [8, p. 178] </ref> gives details of a similar translation, although his translation would use similar variables for all states, not just those with parallel transitions. Miscellaneous Our example does not contain all RSML constructs, such as Prev (), constants, macros, functions, statechart arrays, and transition buses. <p> Numer--ical calculation and comparison are abundant in the TCAS specification, and they introduce significant problems in the model checking process. There are a number of other widely researched approaches to handling the state space explosion problem. Corbett recently classified these techniques into several categories <ref> [8] </ref>. In contrast to our work, which studies a single data point for a single approach, Corbett compared three approaches, model checking, partial order space state reduction, and inequality necessary conditions, all in the context of detecting deadlock in Ada tasking programs. <p> For deadlock, Corbett observed that "no technique was clearly superior to the others, but rather each excelled on certain kinds of programs <ref> [8, p. 179] </ref>." The two translations into SMV that Corbett used differ from ours. One translation represented asynchrony by arbitrary sequential interleavings of transitions, eliminating the parallelism that we exploit.
Reference: [9] <author> Federal Aviation Administration, U. S. </author> <title> Department of Transportation. Introduction to TCAS II, </title> <month> March </month> <year> 1990. </year>
Reference-contexts: This formula was evaluated true for our model of the TCAS specification, as expected. 5.4 Inhibition of Resolution Advisories A TCAS document <ref> [9] </ref> states that (1) all Descend RAs are inhibited when the own aircraft is below 1000 feet above ground level, and (2) all Increase-Descend RAs are inhibited 8 below 1450 feet above ground level. The logic that guaran-tees these safety properties resides in both Own-Aircraft and Other-Aircraft.
Reference: [10] <author> Federal Aviation Administration, U. S. </author> <title> Department of Transportation. TCAS II Collision Avoidance System (CAS) System Requirements Specification, Change 6.00, </title> <month> March </month> <year> 1993. </year>
Reference-contexts: In our particular experiment, we translated (Section 3) a significant portion of a preliminary version of the TCAS II (Traffic Alert and Collision Avoidance System) System Requirements Specification <ref> [10] </ref> from the Requirements State Machine Language (RSML) [16] into a form suitable for input to the Symbolic Model Verifier (SMV) [17]. <p> not New-Increase-Descend and Composite-RA in state Positive Prev (Displayed-Model-Goal) Otherwise /* case 8 */ the definitions of which are omitted here due to limited space. (Their truth values depend on Composite-RA and Other-Aircraft.) model checker. (For the other properties that we checked, we worked with a later draft TCAS specification <ref> [10] </ref>, in which there is no unintentional nondeterminism.) These nondeterministic transitions had previously been identified by Heimdahl and Leveson [12] using a different technique. We were interested in checking these properties to verify that model checking could match previous results.
Reference: [11] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: We first briefly overview RSML and SMV, laying the foundation for our description of the translation. 3.1 RSML RSML is a communicating state machine model similar to Statecharts <ref> [11] </ref>, including features such as parallel state machines (AND decomposition) and hierarchical abstraction into superstates.
Reference: [12] <author> M. P. E. Heimdahl and N. G. Leveson. </author> <title> Completeness and consistency analysis of state-based requirements. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 3-14, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: omitted here due to limited space. (Their truth values depend on Composite-RA and Other-Aircraft.) model checker. (For the other properties that we checked, we worked with a later draft TCAS specification [10], in which there is no unintentional nondeterminism.) These nondeterministic transitions had previously been identified by Heimdahl and Leveson <ref> [12] </ref> using a different technique. We were interested in checking these properties to verify that model checking could match previous results. In Section 6 we will summarize the differences between our model checking approach and the technique used by Heimdahl and Leveson. <p> Use of our translation may have changed the outcome of Corbett's comparison, but further work is needed to determine which approaches are most effective for checking particular properties on certain classes of systems. Heimdahl and Leveson <ref> [12] </ref> took a different approach. They analyzed the TCAS specification without exploring the state space. They deduced global properties of the system by composing results of local analysis. Their technique differ from ours in two ways. First, the properties that we checked were different.
Reference: [13] <author> K. Heninger. </author> <title> Specifying software requirements for complex systems: New techniques and their applications. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-6(1):2-12, </volume> <month> January </month> <year> 1980. </year>
Reference-contexts: While their motivations were similar, our studies differ in several ways because of differences in the specifications. The A-7E aircraft requirements were written in the Software Cost Reduction (SCR) requirements notation <ref> [1, 13] </ref>, which does not contain features such as hierarchical states and does not make assumptions like the synchrony hypothesis. In addition, the environment of the A-7E specification is abstracted as a set of predicates, whereas 9 the inputs to our system include numerical values.
Reference: [14] <author> D. Jackson. </author> <title> Abstract model checking of infinite specifications. </title> <booktitle> In Proceedings of the Second International Symposium of Formal Methods Europe, </booktitle> <pages> pages 519-531. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The first possible impediment is that the technique is limited to handling finite state machines, while software systems are generally specified as infinite state machines. Jackson <ref> [14] </ref> and Wing and Vaziri-Farahani [21] have addressed aspects of this concern, showing some techniques for approximating infinite state machines with finite state machines that can then be used for model checking.
Reference: [15] <author> M. S. Jaffe, N. G. Leveson, M. P. E. Heimdahl, and B. E. Melhart. </author> <title> Software requirements analysis for real-time process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 241-258, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Jaffe et. al. <ref> [15] </ref> argue that such nondeterministic transitions are usually design flaws in the specification and should be avoided. In Section 5.1 we will describe how to detect undesired nondeterminism in this deterministically modeled specification. <p> They analyzed the TCAS specification without exploring the state space. They deduced global properties of the system by composing results of local analysis. Their technique differ from ours in two ways. First, the properties that we checked were different. Their concerns were transition consistency and completeness <ref> [15] </ref>, which are domain-independent robustness properties.
Reference: [16] <author> N. G. Leveson, M. P. E. Heimdahl, H. Hildreth, and J. D. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: In our particular experiment, we translated (Section 3) a significant portion of a preliminary version of the TCAS II (Traffic Alert and Collision Avoidance System) System Requirements Specification [10] from the Requirements State Machine Language (RSML) <ref> [16] </ref> into a form suitable for input to the Symbolic Model Verifier (SMV) [17]. TCAS II is an aircraft collision avoidance system required on commercial aircraft with more than 30 seats, and was considered "the most complex system to be incorporated into the avionics of commercial aircraft" [16, p. 685]. <p> TCAS II is an aircraft collision avoidance system required on commercial aircraft with more than 30 seats, and was considered "the most complex system to be incorporated into the avionics of commercial aircraft" <ref> [16, p. 685] </ref>. We were able to generate an internal representation of the transition relation of the system of an acceptable size so that we could test a number of properties of the specification (Section 4). <p> A step (and thus a microstep) is assumed to happen instantaneously. Once a step is initiated, no external messages can arrive until the system becomes stable. This assumption is called the synchrony hypothesis <ref> [16] </ref>. 3.2 SMV SMV is a BDD-based tool for symbolic model checking of finite state systems against specifications written in the temporal logic CTL (see Section 2). It supports both deterministic and nondeterministic models, and provides for modular system descriptions. SMV contains boolean, scalar and fixed array data types.
Reference: [17] <author> K. L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: In our particular experiment, we translated (Section 3) a significant portion of a preliminary version of the TCAS II (Traffic Alert and Collision Avoidance System) System Requirements Specification [10] from the Requirements State Machine Language (RSML) [16] into a form suitable for input to the Symbolic Model Verifier (SMV) <ref> [17] </ref>. TCAS II is an aircraft collision avoidance system required on commercial aircraft with more than 30 seats, and was considered "the most complex system to be incorporated into the avionics of commercial aircraft" [16, p. 685].
Reference: [18] <author> A. Pnueli and M. Shalev. </author> <title> What is in a step: </title> <booktitle> On the semantics of Statecharts. In Proceedings of International Conference on Theoretical Aspects of Computer Software, </booktitle> <pages> pages 245-264. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: Statechart arrays can be implemented as an array of modules. The translation of transition buses is no different from that of ordinary transitions. Comparison with Statecharts In contrast to RSML step semantics, Statechart step semantics (as defined by Pnueli and Shalev <ref> [18] </ref>) build a set T of transitions that will fire in a step by iteratively computing a closure based on the enabled transitions at the start of the step. Only after the closure is computed do the transitions fire.
Reference: [19] <author> S. Ponzio. </author> <title> A lower bound for integer multiplication with read-once branching programs. </title> <booktitle> In Proceedings of the 27th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 130-139, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We focused on resolution maneuvers with one intruder aircraft and thus modeled only one instance of Other-Aircraft. 4.2 BDDs We knew a priori that there is no efficient BDD representation for multiplication and division under any variable ordering <ref> [3, 19] </ref> so we realized that we needed to avoid them. Two functions in Own-Aircraft do involve multiplication and division of values for measured altitudes and altitude rates. These are measurements of input variables that we already modeled nondeterministically.
Reference: [20] <author> T. Sreemani and J. Atlee. </author> <title> Feasibility of model checking software requirements: A case study. </title> <type> Technical Report CS96-05, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: This information then could have been used to develop Other-Aircraft, which could be model checked later to see whether the assumptions hold. This iterative approach appears to have benefits for analysis and shows potential for iterative development of specifications, as well. 6 Related Work Sreemani and Atlee <ref> [20] </ref>, in work independent of ours, analyzed the A-7E aircraft software requirement specification with SMV, and were also able to successfully check several temporal properties. While their motivations were similar, our studies differ in several ways because of differences in the specifications.
Reference: [21] <author> J. M. Wing and M. Vaziri-Farahani. </author> <title> Model checking software systems: A case study. </title> <booktitle> In Proceedings of the Third ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 128-139, </pages> <month> October </month> <year> 1995. </year> <month> 11 </month>
Reference-contexts: The first possible impediment is that the technique is limited to handling finite state machines, while software systems are generally specified as infinite state machines. Jackson [14] and Wing and Vaziri-Farahani <ref> [21] </ref> have addressed aspects of this concern, showing some techniques for approximating infinite state machines with finite state machines that can then be used for model checking.
References-found: 21

