URL: http://www.cs.cornell.edu/Info/Faculty/bsmith/CMPlayer.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/Faculty/Brian_Smith.html
Root-URL: http://www.cs.cornell.edu
Title: A Continuous Media Player  
Abstract: Lawrence A. Rowe and Brian C. Smith Computer Science Division-EECS, University of California Berkeley, CA 94720, USA Abstract. The design and implementation of a continuous media player for Unix work stations is described. The player can play synchronized digital video and audio read from a file server. The system architecture and results of preliminary performance ex periments are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, D.P. and G. Homsy, </author> <title> A continuous media I/O server and its synchronization mechanism, </title> <note> IEEE Computer (October 1991). </note>
Reference-contexts: The system clocks on the different systems are synchronized by the Network Time Protocol (NTP) [11] so that actions in the CM Server and Sources can be synchronized. The CM Server will eventually be merged with the X server as in the ACME Server <ref> [1] </ref>, but for now it is convenient to separate the functionality for several reasons. First, it makes the CM Server easy to change. Second, it reduces maintenance when a new X server is delivered since we do not have to retrofit our changes. <p> Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [2] <author> Blakowski, G., et.al., </author> <title> Tools for specifying and executing synchronized multimedia presentations, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [3] <author> Coulson, G., et.al., </author> <title> Protocol support for distributed multimedia applications, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [4] <institution> Dream machine the visual computer - an anthology of computer graphics, Laserdisc, </institution> <note> The Voyager Company (1986). </note>
Reference-contexts: The entire application was written in under 10 person-months. 3. Performance This section reports the results of some preliminary performance experiments. Two video scripts were used: The Adventures of Andre and Wally B and Tony De Peltrie <ref> [4] </ref>. Both are 24 fps computer graphics generated videos. Wally was digitized at 320 by 240 pixels and Tony was digitized at 640 by 480 pixels. Both streams were JPEG compressed using the XVIDEO board. The following table shows the static size of the data.
Reference: [5] <author> Gibbs, S., </author> <title> Composite multimedia and active objects, </title> <booktitle> Proc. OOPSLA 91, </booktitle> <month> Phoenix (October </month> <year> 1991). </year>
Reference-contexts: The synchronization model is similar to the time-based models described by others. We eventually plan to add hierarchical synchronization similar to the model suggested by Steinmetz [16]. Lastly, the data model we developed uses ideas from many sources including <ref> [5, 10, 14, 17] </ref>. One important point in our design is the replication of meta data in a database that will allow us to manage a tertiary store where CM data can be archived. 5. Conclusions The design and implementation of a CM player was described.
Reference: [6] <author> Gusella, R. and M. Maresca, </author> <title> Design considerations for a multimedia network distribution center, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [7] <author> Hodges, </author> <title> M.E., et.al., Athena Muse: a construction set for multi-media applications, </title> <note> IEEE Software (January 1989). </note>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [8] <author> Lamparter, B, et.al., X-MOVIE: </author> <title> transmission and presentation of digital movies under X, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [9] <author> Little, T.D.C. and A. Ghafoor, </author> <title> Scheduling of bandwidth-constrained multimedia traffic, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: More research is needed to validate the claims made here and to explore algorithms that look ahead at future resource requirements as suggested by Little and Ghafoor <ref> [9] </ref>. In addition, we believe that this system is the first one to use NTP and globally synchronized clocks to synchronize transmission of CM data between processes on dif ferent machines. The LTS abstraction we used is similar to an analogous abstraction used in Apples Quick-time.
Reference: [10] <author> Little, T.D.C. and A. Ghafoor, </author> <title> Synchronization and storage models for multimedia objects, </title> <journal> IEEE Journal on Selected Areas in Comm., </journal> <month> 8 (3) (April </month> <year> 1990). </year>
Reference-contexts: The synchronization model is similar to the time-based models described by others. We eventually plan to add hierarchical synchronization similar to the model suggested by Steinmetz [16]. Lastly, the data model we developed uses ideas from many sources including <ref> [5, 10, 14, 17] </ref>. One important point in our design is the replication of meta data in a database that will allow us to manage a tertiary store where CM data can be archived. 5. Conclusions The design and implementation of a CM player was described.
Reference: [11] <author> Mills, D., </author> <title> Measured performance of the network time protocol in the internet system, Network Working Group, </title> <note> RFC 1128 (October 1988). </note>
Reference-contexts: It communicates with CM Source processes on the f ile server through interprocess communication channels, and it communicates with the X server through shared memory. The system clocks on the different systems are synchronized by the Network Time Protocol (NTP) <ref> [11] </ref> so that actions in the CM Server and Sources can be synchronized. The CM Server will eventually be merged with the X server as in the ACME Server [1], but for now it is convenient to separate the functionality for several reasons.
Reference: [12] <author> Ousterhout, J., </author> <title> Tcl an embedded command language, </title> <booktitle> Proc. 1990 Winter Usenix Conference (1990). </booktitle>
Reference-contexts: Users are more sensitive to random frame drops than to regular drops. Consequently , the adaptive algorithm attempts to reduce the variation of fps played. 2.4 Implementation All processes in the player are implemented with the Tool Command Language (Tcl) and the Tcl Toolkit (Tk) <ref> [12, 13] </ref>. Altogether, the player is approximately 20K lines of code of which 10% is written in Tcl. The application process uses both Tcl and Tk, includes 1.7K lines of code, and requires 1.5 MBytes at runtime.
Reference: [13] <author> Ousterhout, J., </author> <title> An X11 toolkit based on the tcl language, </title> <booktitle> Proc. 1991 Winter Us-enix Conference (1991). </booktitle>
Reference-contexts: Users are more sensitive to random frame drops than to regular drops. Consequently , the adaptive algorithm attempts to reduce the variation of fps played. 2.4 Implementation All processes in the player are implemented with the Tool Command Language (Tcl) and the Tcl Toolkit (Tk) <ref> [12, 13] </ref>. Altogether, the player is approximately 20K lines of code of which 10% is written in Tcl. The application process uses both Tcl and Tk, includes 1.7K lines of code, and requires 1.5 MBytes at runtime.
Reference: [14] <author> Quicktime, </author> <title> software product, </title> <institution> Apple Computer Inc. </institution> <year> (1991). </year>
Reference-contexts: W e expect this meta data to be replicated in the blob file. The design accommodates the addition of new file types such as Apples Quicktime files <ref> [14] </ref>. Lastly, we expect blob files to move between different levels of a storage hierarchy that will include local disks at a workstation, large video file servers, and near-line tertiary stores such as an optical disk or a robot tape jukebox. <p> Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically . <p> The synchronization model is similar to the time-based models described by others. We eventually plan to add hierarchical synchronization similar to the model suggested by Steinmetz [16]. Lastly, the data model we developed uses ideas from many sources including <ref> [5, 10, 14, 17] </ref>. One important point in our design is the replication of meta data in a database that will allow us to manage a tertiary store where CM data can be archived. 5. Conclusions The design and implementation of a CM player was described.
Reference: [15] <author> Rosenberg, J., et.al., </author> <title> Presenting Multimedia documents over a digital network, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and Video, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
Reference: [16] <author> Steinmetz, R., </author> <title> Synchronization properties in multimedia systems, </title> <journal> IEEE Journal on Selected Areas in Comm., </journal> <month> 8 (3) (April </month> <year> 1990). </year>
Reference-contexts: The LTS abstraction we used is similar to an analogous abstraction used in Apples Quick-time. The synchronization model is similar to the time-based models described by others. We eventually plan to add hierarchical synchronization similar to the model suggested by Steinmetz <ref> [16] </ref>. Lastly, the data model we developed uses ideas from many sources including [5, 10, 14, 17]. One important point in our design is the replication of meta data in a database that will allow us to manage a tertiary store where CM data can be archived. 5.
Reference: [17] <author> Stevens, </author> <title> S.M., Embedding knowledge in continuous time media, </title> <booktitle> Proc. 2nd Int. Wkshp on Network and OS Support for Digital Audio and V ideo, </booktitle> <address> Heidelberg (November 1991). </address>
Reference-contexts: The synchronization model is similar to the time-based models described by others. We eventually plan to add hierarchical synchronization similar to the model suggested by Steinmetz [16]. Lastly, the data model we developed uses ideas from many sources including <ref> [5, 10, 14, 17] </ref>. One important point in our design is the replication of meta data in a database that will allow us to manage a tertiary store where CM data can be archived. 5. Conclusions The design and implementation of a CM player was described.
Reference: [18] <author> Verma, D., and H. Zhang, </author> <title> Design documents for R TIP/RMTP, </title> <note> unpublished manuscript (1991). </note>
Reference-contexts: A special-purpose datagram protocol was implemented to send CM packets from the file server to the client workstation. The current implementation runs on UDP, but it was designed to use the real-time IP protocol being developed by another research group at Berkeley <ref> [18] </ref>. We have run the player on a conventional ethernet and FDDI network. The remainder of the paper describes the design and implementation of the player, the results of some initial performance experiments, and related work.
Reference: [19] <institution> XMedia Toolkit, software product, Digital Equipment Corp. </institution> <year> (1992). </year>
Reference-contexts: Related Work Many groups are working on multimedia applications that include playing continuous media <ref> [1, 2, 3, 6, 7, 8, 14, 15, 19] </ref>. None of these systems report an application Frame rate (fps) 20 10 0 time 20 40 60 80 100 time Frame rate (fps) 25 15 5 24 fps 12 fps level adaptive control algorithm to vary frame rate dynamically .
References-found: 19

