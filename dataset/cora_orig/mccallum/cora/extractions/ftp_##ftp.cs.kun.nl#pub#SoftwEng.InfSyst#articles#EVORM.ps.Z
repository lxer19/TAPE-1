URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EVORM.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: ferikp,tvdwg@cs.kun.nl  
Title: EVORM: A Conceptual Modelling Technique for Evolving Application Domains  
Author: H.A. Proper and Th.P. van der Weide 
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Department of Information Systems, University of Nijmegen  
Note: Version of June 28, 1993 at 13:17  
Abstract: Published as: H.A. Proper and Th.P. van der Weide. EVORM: A Conceptual Modelling Technique for Evolving Application Domains. Technical Report 93-13, Computing Science Institute, University of Nijmegen, Nijmegen, The Nether Abstract In this paper we present EVORM, a modelling technique for evolving application domains. First a delimitation of the concept of evolution is provided, based on an earlier developed general theory for such evolutions. This theory makes a distinction between the underlying information structure and its evolution on the one hand, and the description and semantics of operations on the information structure and its population on the other hand. Main issues within this theory are object typing, type relatedness and identification of objects. EVORM is the result of applying this general theory to the object role modelling technique PSM, a generalisation of ER, EER, FORM and NIAM. lands, 1993.
Abstract-found: 1
Intro-found: 1
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Another formalization of NIAM, resulting in FORM, can be found in ([Hal89], [Hal92]). PSM can be regarded as a common base for ob ject role modelling techniques like NIAM, FORM, ER ([Che76]), EER ([HE92]) and IFO <ref> [AH87] </ref>. As a result, application of the general theory on PSM provides a good test case for this general theory. 2 Modelling the Evolution of Information Systems In this section we discuss our approach to evolving information systems.
Reference: [All84] <author> J.F. Allen. </author> <title> Towards a General Theory of Action and Time. </title> <journal> Artificial Intelligence, </journal> 1984(23) 123-154, 1984. 
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or <ref> [All84] </ref>. 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or [FOP92b]. Page 5 The time axis is the axis along which the appli-cation model evolves.
Reference: [Ari86] <author> G. Ariav. </author> <title> A Temporally Oriented Data Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 499-527, </pages> <month> December </month> <year> 1986. </year>
Reference: [BHW91] <author> P. van Bommel, A.H.M. ter Hofstede, and Th.P. van der Weide. </author> <title> Semantics and Verification of Object-Role Models. </title> <journal> Information Systems, </journal> <volume> 16(5) </volume> <pages> 471-495, </pages> <month> Octo-ber </month> <year> 1991. </year>
Reference: [BKKK87] <author> J. Banerjee, W. Kim, H.J. Kim, and H.F. Korth. </author> <title> Semantics and Implementation of Schema Evolution in Object-Oriented Databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 16(3) </volume> <pages> 311-322, </pages> <month> December </month> <year> 1987. </year>
Reference: [BMO + 89] <author> R. Bretl, D. Maier, A. Otis, J. Penney, B. Schuchardt, J. Stein, E.H. Williams, and M. Williams. </author> <title> The GemStone Data Management System. </title> <editor> In W. Kim and F.H. Lochovsky, editors, </editor> <title> Object-Oriented Concepts, Databases, and Applications, </title> <publisher> ACM Press, Frontier Series, </publisher> <pages> pages 283-308. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1989. </year>
Reference-contexts: In [SZ86] a taxonomy for type evolution in object oriented databases is provided. The ORION project ([BKKK87], [KBC + 89]) offers a more detailed taxonomy, together with a (semi formal) semantics of schema updates restricted to object oriented databases. The ORION system, together with the GemStone system ([PS87], <ref> [BMO + 89] </ref>), are among the first object oriented database systems to support schema/type evolution. In [Tre91] and [TS92] an approach to the evolution of schemas in object oriented databases is followed in which schema objects (e.g. object types) are considered to be objects like others (from the application).
Reference: [BW89] <author> P.D. Bruza and Th.P. van der Weide. </author> <title> The Semantics of Data Flow Diagrams. </title> <editor> In N. Prakash, editor, </editor> <booktitle> Proceedings of the International Conference on Management of Data, </booktitle> <address> Hyderabad, India, </address> <year> 1989. </year>
Reference: [BW90] <author> K.B. Bruce and P. Wegner. </author> <title> An Algebraic Model of Subtype and Inheritance. Page 24 In F. </title> <editor> Bancilhon and P. Buneman, edi-tors, </editor> <booktitle> Advances in Database Programming Languages, </booktitle> <publisher> ACM Press, Frontier Series, </publisher> <pages> pages 75-96. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [CR87] <author> J. Clifford and A. Rao. </author> <title> A simple, general structure for Temporal Domains. </title> <editor> In C. Rolland, F. Bodart, and M. Leonard, editors, </editor> <booktitle> Temporal Aspects in Information Systems, </booktitle> <pages> pages 17-28. </pages> <address> North-Holland/IFIP, Amsterdam, The Netherlands, </address> <year> 1987. </year>
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. <ref> [CR87] </ref>, [WJL91] or [All84]. 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or [FOP92b]. Page 5 The time axis is the axis along which the appli-cation model evolves.
Reference: [CW85] <author> L. Cardelli and P. Wegner. </author> <title> On Understanding Types, Data Abstraction, and Polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The identification hierarchy is both transitive and ir-reflexive. [ISU4] (irreflexive) :x ; x [ISU5] (transitive) x ; y ; z ) x ; z Similar axioms can be found as properties in literature about typing theory for databases ([BW90], [Oho90] and <ref> [CW85] </ref>). The difference, between these properties and ours, lies in the abstraction of an underlying structure of object types and their instances. As we do not make any assumption on these structures, such properties must be stated as axioms.
Reference: [DHA88] <author> E. Dubois, J. Hagelstein, and A.Rifaut. </author> <title> Formal Requirements Engineering with ERAE. </title> <journal> Philips Journal of Research, </journal> 1988(43) 393-414, 1988. 
Reference-contexts: We mention some examples of research regarding these first three classes. In the TEMPORA project ([TLW91], [MSW92]), the ER model is enhanced with the notion of time, resulting in the ERT model. In TODM ([Ari86]) and ERAE ([DHL + 85], <ref> [DHA88] </ref>), similar strategies are followed, extending the relational model with the notion of time. This makes it possible to handle historical data, over a (non-varying) underlying information structure. In [LS87], [Saa91] and [Saa88] the focus is on the monitoring of dynamic constraints, i.e., constraints over such historical data.
Reference: [DHL + 85] <author> E. Dubois, J. Hagelstein, E. Lahou, A. Rifaut, and F. Williams. </author> <title> A For-malisation of Entities, Relationships, Attributes, and Events. </title> <type> Philips Manuscript M105, </type> <institution> Philips Research Laboratory, </institution> <address> Brussels, Belgium, </address> <year> 1985. </year>
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <address> Amster-dam, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or [All84]. 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see <ref> [FOP92a] </ref> or [FOP92b]. Page 5 The time axis is the axis along which the appli-cation model evolves. With this time axis, an application model history is a (partial) mapping T AME. 2 The powerset of all such histories is contained in the set AMH.
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction As has been argued in [Rod91] and <ref> [FOP92b] </ref>, there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases, structure modifications will lead to costly data conversions and reprogramming. <p> Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or [All84]. 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or <ref> [FOP92b] </ref>. Page 5 The time axis is the axis along which the appli-cation model evolves. With this time axis, an application model history is a (partial) mapping T AME. 2 The powerset of all such histories is contained in the set AMH.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: From this identification, the difference between a traditional information system, and its evolving counterpart, will become clear. This is followed by a discussion on how the evolution of an information system is modelled. 2.1 A hierarchy of models According to <ref> [Gri82] </ref>, a conceptual (i.e. complete and minimal) specification of (a version of) a universe of discourse consists of the following components: 1. an information structure, a set of constraints and a population conforming to these requirements. 2. a set of action specifications describing the tran sitions that can be performed by
Reference: [Hal89] <author> T.A. Halpin. </author> <title> A logical analysis of information systems: static aspects of the data-oriented perspective. </title> <type> PhD thesis, </type> <institution> University of Queensland, Brisbane, Australia, </institution> <year> 1989. </year>
Reference: [Hal92] <author> T.A. Halpin. WISE: </author> <title> a Workbench for Information System Engineering. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 38 - 49. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: PSM is a powerful data modelling technique, which originated from PM ([BHW91]) being a formalisation of NIAM ([NH89]). Another formalization of NIAM, resulting in FORM, can be found in ([Hal89], <ref> [Hal92] </ref>). PSM can be regarded as a common base for ob ject role modelling techniques like NIAM, FORM, ER ([Che76]), EER ([HE92]) and IFO [AH87].
Reference: [HE92] <author> U. Hohen-stein and G. Engels. </author> <title> SQL/EER-Syntax and Semantics of an Entity-Relationship-based Query Language. </title> <journal> Information Systems, </journal> <volume> 17(3) </volume> <pages> 209-242, </pages> <year> 1992. </year>
Reference: [HN93] <author> A.H.M. ter Hofstede and E.R. Nieuw-land. </author> <title> Task structure semantics through process algebra. </title> <journal> Software Engineering Journal, </journal> <volume> 8(1) </volume> <pages> 14-20, </pages> <month> January </month> <year> 1993. </year>
Reference: [Hof93] <author> A.H.M. ter Hofstede. </author> <title> Information Modelling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, </institution> <address> Ni-jmegen, The Netherlands, </address> <year> 1993. </year> <note> (To appear). </note>
Reference-contexts: This fact type is identified by: Fact (p) = f () p 2 f . In the remaining of this section, we shortly formulate rules for this information structure universe in terms of EU axioms. For a more complete discussion of these axioms, see [HW93] and <ref> [Hof93] </ref>. After that, the predicate IsSch is introduced by EU-axioms.
Reference: [HPW92a] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Mod-elling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Next we provide a general way of modelling (see also [PW93]), making only weak assumptions on the underlying method. As a result, this approach is applicable for a wide range of data Page 2 modelling methods, such as ER ([Che76]), NIAM ([NH89]) and PSM ([HW93], <ref> [HPW92a] </ref>), action modelling methods such as Task Structures ([HN93]), DFD ([BW89]) and ExSpect ([HSV89]), and furthermore object oriented modelling methods ([KM90]). These assumptions postulate a typing mechanism for objects, a type relatedness relation expressing which object types may share instances, and a hierarchy on object types expressing inheritance of identification.
Reference: [HPW92b] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <type> Technical Report 92/10, </type> <institution> SERC, Software Engineering Research Centre, </institution> <address> Utrecht, The Netherlands, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: A subtype defining rule is defined as an information descriptor (see <ref> [HPW92b] </ref>). Up to this point no language for the formulation of such rules is available. The subtype defining rule should however also be considered as a population derivation rule, the population of a subtype can be computed using this rule.
Reference: [HSV89] <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable Specifications for Distributed Information Systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An Page 25 In-depth Analysis, </booktitle> <pages> pages 139-156. </pages> <address> North--Holland/IFIP, Amsterdam, The Nether-lands, </address> <year> 1989. </year>
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The example of figure 4 contains eight object types: entity types Car, and Client, relation type Policy, and label types Name, Reg-nr, Type, Pol-nr, Amount and Address. 3.1.2 Type relatedness The relation ~ O fi O expresses type relatedness between object types (see <ref> [HW93] </ref>). Object types x and y are termed type related (x ~ y) iff populations of object types x and y may have values in common in any version of the application model. Type relatedness corresponds to mode equivalence in programming languages ([WMP + 76]). <p> This fact type is identified by: Fact (p) = f () p 2 f . In the remaining of this section, we shortly formulate rules for this information structure universe in terms of EU axioms. For a more complete discussion of these axioms, see <ref> [HW93] </ref> and [Hof93]. After that, the predicate IsSch is introduced by EU-axioms.
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: way of modelling way of working way of controlling process product operational managerial concrete abstract philosophical Z Z Z~ J = J J^ Z - 6 tems can be found in the field of version modelling, which can be seen as a restricted form of evolving information systems ([Kat90], [MBJK90], <ref> [JMSV92] </ref>). An important requirement for evolving information systems, not covered by version modelling systems, is that changes to the structure can be made on-line.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference: [KBC + 89] <author> W. Kim, N. Ballou, H.-T. Chou, J.F. Garza, and D. Woelk. </author> <title> Features of the ORION Object-Oriented Database. </title> <editor> In W. Kim and F.H. Lochovsky, editors, </editor> <title> Object-Oriented Concepts, Databases, and Applications, </title> <publisher> ACM Press, Frontier Series, </publisher> <pages> pages 251-282. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Within the class of evolving information systems, extensions of object oriented modelling techniques with a time dimension (both on instance and type level) can be seen as a first subclass. In [SZ86] a taxonomy for type evolution in object oriented databases is provided. The ORION project ([BKKK87], <ref> [KBC + 89] </ref>) offers a more detailed taxonomy, together with a (semi formal) semantics of schema updates restricted to object oriented databases. The ORION system, together with the GemStone system ([PS87], [BMO + 89]), are among the first object oriented database systems to support schema/type evolution. <p> An example of this approach can be found in [MS90], in which an algebra is presented allowing relational tables to evolve by changing their arity. This direction is similar to the ORION project ([BKKK87], <ref> [KBC + 89] </ref>), in that a manipulation language is extended with operations supporting schema evolution. In figure 1 we see a framework, based on [Wij91] (see also [SWS89]), presenting a structured view on modelling methods.
Reference: [KM90] <author> T. Korson and J. McGregor. </author> <title> Understanding Object Oriented: A Unifying Paradigm. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 40-60, </pages> <month> September </month> <year> 1990. </year>
Reference: [LS87] <author> U.W. Lipeck and G. Saake. </author> <title> Monitoring Dynamic Integrity Constraints based on Temporal Logic. </title> <journal> Information Systems, </journal> <volume> 12(3) </volume> <pages> 255-269, </pages> <year> 1987. </year>
Reference-contexts: In TODM ([Ari86]) and ERAE ([DHL + 85], [DHA88]), similar strategies are followed, extending the relational model with the notion of time. This makes it possible to handle historical data, over a (non-varying) underlying information structure. In <ref> [LS87] </ref>, [Saa91] and [Saa88] the focus is on the monitoring of dynamic constraints, i.e., constraints over such historical data. Within the class of evolving information systems, extensions of object oriented modelling techniques with a time dimension (both on instance and type level) can be seen as a first subclass.
Reference: [MBJK90] <author> J. Mylopoulos, A. Borgida, M. Jarke, and M. Koubarakis. </author> <title> Telos: Representing Knowledge about Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362, </pages> <year> 1990. </year>
Reference-contexts: thinking way of modelling way of working way of controlling process product operational managerial concrete abstract philosophical Z Z Z~ J = J J^ Z - 6 tems can be found in the field of version modelling, which can be seen as a restricted form of evolving information systems ([Kat90], <ref> [MBJK90] </ref>, [JMSV92]). An important requirement for evolving information systems, not covered by version modelling systems, is that changes to the structure can be made on-line.
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: A third subclass of research regarding evolving information systems extends a manipulation language for relation models with historical operations, both on population and schema level. An example of this approach can be found in <ref> [MS90] </ref>, in which an algebra is presented allowing relational tables to evolve by changing their arity. This direction is similar to the ORION project ([BKKK87], [KBC + 89]), in that a manipulation language is extended with operations supporting schema evolution. <p> This approach corresponds to the way of thinking from the NIAM modelling method. This language will provide the possibility to query accross boundaries of schema versions. This is not possible in traditional relational algebra based languages (such as <ref> [MS90] </ref>). Future research may address an effective way of working, based on this way of communicating. For the efficiency of a development process, based on this way of working, a way of controlling has to be developed.
Reference: [MSW92] <author> P. McBrien, A.H. Seltviet, and B. Wangler. </author> <title> An Entity-Relationship Model Extended to describe Historical Information. </title> <booktitle> In Proceedings of the International Conference on Information Systems and Management of Data (CIS-MOD 92), </booktitle> <pages> pages 244-260, </pages> <address> Bangalore, In-dia, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: However, all these classes do not yet take schema evolution into account. For this reason, we propose a new class: evolving information systems. We mention some examples of research regarding these first three classes. In the TEMPORA project ([TLW91], <ref> [MSW92] </ref>), the ER model is enhanced with the notion of time, resulting in the ERT model. In TODM ([Ari86]) and ERAE ([DHL + 85], [DHA88]), similar strategies are followed, extending the relational model with the notion of time.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [Oho90] <author> A. Ohori. </author> <title> Orderings and Types in Databases. </title> <editor> In F. Bancilhon and P. Bune-man, editors, </editor> <booktitle> Advances in Database Programming Languages, </booktitle> <publisher> ACM Press, Frontier Series, </publisher> <pages> pages 97-116. </pages> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: The identification hierarchy is both transitive and ir-reflexive. [ISU4] (irreflexive) :x ; x [ISU5] (transitive) x ; y ; z ) x ; z Similar axioms can be found as properties in literature about typing theory for databases ([BW90], <ref> [Oho90] </ref> and [CW85]). The difference, between these properties and ours, lies in the abstraction of an underlying structure of object types and their instances. As we do not make any assumption on these structures, such properties must be stated as axioms.
Reference: [PS87] <author> D.J. Penney and J. Stein. </author> <title> Class Modification in the GemStone Object-Oriented DBMS. </title> <editor> In N. Meyrowitz, editor, </editor> <booktitle> Proceedings of the ACM Conference of Object-Oriented Systems, Languages and Applications (OOPSLA), </booktitle> <pages> pages 111-117, </pages> <address> Or-lando, Florida, </address> <month> October </month> <year> 1987. </year>
Reference: [PW92] <author> H.A. Proper and Th.P. van der Weide. </author> <title> A General Theory for the Evolution of Application Models. </title> <type> Technical Report 92-26, </type> <institution> Department of Information Systems, University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: Several approaches can be taken to the mod-elling of this evolution (see for a more elaborate discussion [PW93], <ref> [PW92] </ref>). In this paper, we treat evolution of an application model as a separate concept. We will maintain the evolution of distinct application model elements, thus keeping track of the evolution of individual object types, instances, methods, etc. This has been illustrated in figure 7. <p> For (extra-temporal) populations, some interesting properties hold. The proofs can be found in <ref> [PW92] </ref>. <p> For a more elaborate discussion on such rules, see <ref> [PW92] </ref>. For the remainder of this section, let H be some (fixed) application model history. 5.1 Separation of element evolution The first rule of wellformedness states that the evolution of application model elements is bound to classes.
Reference: [PW93] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Aus-tralian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: The way of supporting deals with tools supporting the development process. In this paper, we first describe the underlying way of thinking for evolving information systems as used in this paper. Next we provide a general way of modelling (see also <ref> [PW93] </ref>), making only weak assumptions on the underlying method. <p> The world model encompasses the combination of information structure, constraints and population. A conceptual specification of a universe of discourse, containing both Page 3 the action and world model, is called an application model ([FOP92a], <ref> [PW93] </ref>). The resulting hierarchy of models is depicted in figure 3. The application model of a universe of discourse is denoted in terms of object types, constraints, in-stantiations, action specifications, etc. As a collective noun for these modelling concepts the term application model element is used. <p> Several approaches can be taken to the mod-elling of this evolution (see for a more elaborate discussion <ref> [PW93] </ref>, [PW92]). In this paper, we treat evolution of an application model as a separate concept. We will maintain the evolution of distinct application model elements, thus keeping track of the evolution of individual object types, instances, methods, etc. This has been illustrated in figure 7.
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically changing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction As has been argued in <ref> [Rod91] </ref> and [FOP92b], there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases, structure modifications will lead to costly data conversions and reprogramming.
Reference: [RP92] <author> J.F. Roddick and J.D. Patrick. </author> <title> Temporal Semantics in Information Systems A Survey. </title> <journal> Information Systems, </journal> <volume> 17(3) </volume> <pages> 249-267, </pages> <year> 1992. </year>
Reference-contexts: In a later section, we will pose well-formedness restrictions on histories. Other time models are possible, for example, in distributed systems a relative time model might be used. For a general survey on time models, see <ref> [RP92] </ref>. The linear time model is usually chosen in historical databases (see for example [Sno90]). 3. M is the domain for actions that can be per formed on application model histories. 4.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A Taxonomy of Time in Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, Texas, </address> <year> 1985. </year>
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or [All84]. 1 In this paper, the difference between recording and event time <ref> [SA85] </ref>, and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or [FOP92b]. Page 5 The time axis is the axis along which the appli-cation model evolves.
Reference: [Saa88] <author> G. Saake. </author> <title> Spezifikation, Semantik und Uberwachung von Objektlebenslaufen in Datenbanken. </title> <type> PhD thesis, </type> <institution> Technis-che Universitat Braunsweig, Braunsweig, Germany, </institution> <year> 1988. </year> <note> (In German). Page 26 </note>
Reference-contexts: In TODM ([Ari86]) and ERAE ([DHL + 85], [DHA88]), similar strategies are followed, extending the relational model with the notion of time. This makes it possible to handle historical data, over a (non-varying) underlying information structure. In [LS87], [Saa91] and <ref> [Saa88] </ref> the focus is on the monitoring of dynamic constraints, i.e., constraints over such historical data. Within the class of evolving information systems, extensions of object oriented modelling techniques with a time dimension (both on instance and type level) can be seen as a first subclass.
Reference: [Saa91] <author> G. Saake. </author> <title> Descriptive Specification of Database Object Behaviour. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 6(1) </volume> <pages> 47-73, </pages> <year> 1991. </year>
Reference-contexts: In TODM ([Ari86]) and ERAE ([DHL + 85], [DHA88]), similar strategies are followed, extending the relational model with the notion of time. This makes it possible to handle historical data, over a (non-varying) underlying information structure. In [LS87], <ref> [Saa91] </ref> and [Saa88] the focus is on the monitoring of dynamic constraints, i.e., constraints over such historical data. Within the class of evolving information systems, extensions of object oriented modelling techniques with a time dimension (both on instance and type level) can be seen as a first subclass.
Reference: [Sno90] <author> R. Snodgrass. </author> <title> Temporal Databases Status and Research Directions. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 19(4) </volume> <pages> 83-89, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The intention of an evolving information system ([FOP92a]) is to be able to handle updates of all components of the so-called application model, containing the information structure, the constraints on this structure, the population conforming to this structure and the possible operations. In <ref> [Sno90] </ref> a classification for incorporating time in information systems (databases) is presented. This classification makes a distinction between rollback, historical and temporal information systems (databases). However, all these classes do not yet take schema evolution into account. For this reason, we propose a new class: evolving information systems. <p> Other time models are possible, for example, in distributed systems a relative time model might be used. For a general survey on time models, see [RP92]. The linear time model is usually chosen in historical databases (see for example <ref> [Sno90] </ref>). 3. M is the domain for actions that can be per formed on application model histories. 4.
Reference: [SWS89] <author> P.S. Seligmann, G.M. Wijers, and H.G. Sol. </author> <title> Analyzing the structure of I.S. methodologies, an alternative approach. </title> <editor> In R. Maes, editor, </editor> <booktitle> Proceedings of the First Dutch Conference on Information Systems, </booktitle> <year> 1989. </year>
Reference-contexts: This direction is similar to the ORION project ([BKKK87], [KBC + 89]), in that a manipulation language is extended with operations supporting schema evolution. In figure 1 we see a framework, based on [Wij91] (see also <ref> [SWS89] </ref>), presenting a structured view on modelling methods. It makes a distinction between a way of thinking, a way of controlling, a way of modelling, a way of working, a way of communicating and a way of supporting.
Reference: [SZ86] <author> A.H. Skarra and S.B. Zdonik. </author> <title> The Management of Changing Types in an Object-Oriented Database. </title> <editor> In N. Meyrowitz, editor, </editor> <booktitle> Proceedings of the ACM Conference of Object-Oriented Systems, Languages and Applications (OOPSLA), </booktitle> <pages> pages 483-495, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: Within the class of evolving information systems, extensions of object oriented modelling techniques with a time dimension (both on instance and type level) can be seen as a first subclass. In <ref> [SZ86] </ref> a taxonomy for type evolution in object oriented databases is provided. The ORION project ([BKKK87], [KBC + 89]) offers a more detailed taxonomy, together with a (semi formal) semantics of schema updates restricted to object oriented databases.
Reference: [TLW91] <author> C. Theodoulidis, P. Loucopoulos, and B. Wangler. </author> <title> A Conceptual Modelling Formalism for Temporal Database Applications. </title> <journal> Information Systems, </journal> <volume> 16(4) </volume> <pages> 401-416, </pages> <year> 1991. </year>
Reference: [Tre91] <author> M. Tresch. </author> <title> A Framework for Schema Evolution by Meta Object Manipulation. </title> <booktitle> In Proceedings of the 3d International Workshop on Foundations of Models and Languages for Data and Objects, </booktitle> <address> Aigen, Austria, </address> <month> September </month> <year> 1991. </year> <institution> Institut fur In-formatik, TU Clausthal. </institution>
Reference-contexts: The ORION system, together with the GemStone system ([PS87], [BMO + 89]), are among the first object oriented database systems to support schema/type evolution. In <ref> [Tre91] </ref> and [TS92] an approach to the evolution of schemas in object oriented databases is followed in which schema objects (e.g. object types) are considered to be objects like others (from the application).
Reference: [Tro91] <author> O.M.F. de Troyer. </author> <title> The OO-Binary Relationship Model: A Truly Object Oriented Conceptual Model. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 561-578, </pages> <address> Trond-heim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Constraints are inherited via the identification hi erarchy. However, as in object oriented data mod elling techniques, overriding of constraint definitions in identification hierarchies is possible (see for instance <ref> [Tro91] </ref>). A constraint c, in an application model version, will be a (usually very sparse) partial function c : O fl, providing for every object type a private definition of the constraint. Each modelling technique will have its own possibilities to formulate inheritance rules, thus governing the mapping c.
Reference: [TS92] <author> M.T. Tresch and M.H. Scholl. </author> <title> Meta Object Management and its Application to Database Evolution. </title> <editor> In G. Pernul and A.M. Tjoa, editors, </editor> <booktitle> 11th International Conference on the Entity-Relationship Approach, volume 645 of Lecture Notes in Computer Science, </booktitle> <pages> pages 299-321, </pages> <address> Karl-sruhe, Germany, </address> <month> October </month> <year> 1992. </year> <note> Springer-Verlag. </note>
Reference-contexts: The ORION system, together with the GemStone system ([PS87], [BMO + 89]), are among the first object oriented database systems to support schema/type evolution. In [Tre91] and <ref> [TS92] </ref> an approach to the evolution of schemas in object oriented databases is followed in which schema objects (e.g. object types) are considered to be objects like others (from the application).
Reference: [Wij91] <author> G.M. Wijers. </author> <title> Modelling Support in Information Systems Development. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: This direction is similar to the ORION project ([BKKK87], [KBC + 89]), in that a manipulation language is extended with operations supporting schema evolution. In figure 1 we see a framework, based on <ref> [Wij91] </ref> (see also [SWS89]), presenting a structured view on modelling methods. It makes a distinction between a way of thinking, a way of controlling, a way of modelling, a way of working, a way of communicating and a way of supporting.
Reference: [WJL91] <author> G. Wiederhold, S. Jajodia, and W. Lit-win. </author> <title> Dealing with the Granularity of Time in Temporal Databases. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 124-140, </pages> <address> Trond-heim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. [CR87], <ref> [WJL91] </ref> or [All84]. 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or [FOP92b]. Page 5 The time axis is the axis along which the appli-cation model evolves.
Reference: [WMP + 76] <author> A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck, C.H.A. Koster, M. Sint-zoff, C.H. Lindsey, L.T. Meertens, and R.G. Fisker. </author> <title> Revised Report on the Algorithmic Language ALGOL 68. </title> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>
References-found: 53

