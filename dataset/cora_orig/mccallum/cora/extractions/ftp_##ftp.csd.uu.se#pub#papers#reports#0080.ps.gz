URL: ftp://ftp.csd.uu.se/pub/papers/reports/0080.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Jonas Barklund  
Note: Metaprogramming in Logic  
Abstract: UPMAIL Technical Report No. 80 31 July, 1994 A version of this article will appear as a chapter in Encyclopedia of Computer Science and Technology, edited by Allen Kent and James G. Williams and published by Marcell Dekker, Inc., New York. Abstract In this review of metaprogramming in logic we pay equal attention to theoretical and practical issues: the contents range from mathematical and logical preliminaries to implementation and applications in, e.g., software engineering and knowledge representation. The area is one in rapid development but we have emphasized such issues that are likely to be important for future metaprogramming languages and methodologies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> Abramson, H. and Rogers, M. H. (eds.), </editor> <booktitle> Meta-Programming in Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1989. </year>
Reference-contexts: Computational introspection and proper representations of programs should be valuable for developing correct and efficient tools for software engineering. Further Reading In addition to the literature references in the preceding text, the following bibliography includes four collections of articles <ref> [1, 12, 60, 72] </ref> and two books [32, 49] that can be consulted by the interested reader to explore this topic further. Acknowledgements I would like to thank professors N. D. Jones, J. W. Lloyd, and J. F.
Reference: [2] <author> Aiello, L. C., Nardi, D. and Schaerf, M., </author> <title> Reasoning about Knowledge and Ignorance, </title> <editor> in: H. Tanaka and K. Furukawa (eds.), </editor> <booktitle> Proc. Intl. Conf. on Fifth Generation Comp. Sys. 1988, </booktitle> <publisher> Ohmsha, </publisher> <address> Tokyo, </address> <year> 1988. </year>
Reference-contexts: Aiello, Nardi & Schaerf showed an example of how FOL could be used for expressing metareasoning (see Sect. 6.3) <ref> [2] </ref>. 11 5.2 MetaProlog The language MetaProlog is an extension of Prolog with metaprogramming capabilities [7]. The extensions are primarily aimed at enabling programs to manipulate multiple theories, allowing distinct theories to have multiple `viewpoints' of a relation, and to make proofs available as terms in the language [3]. <p> It is very instructive to compare various proposed solutions to this problem, although lack space prevents us from doing so here. They all contain some form of metareasoning in logic, but use different formal systems, including various forms of metaprogramming in logic <ref> [2, 19, 39, 46, 83] </ref> and modal logic [30, 32]. Press and Impress. Another well-known example of metalevel reasoning based on logic programming techniques is the Press system, developed at University of Edinburgh [14] (a retrospective view has been given by Welham [88]).
Reference: [3] <author> Bacha, H., </author> <title> Meta-Level Programming: a Compiled Approach, </title> <editor> in: J.-L. Lassez (ed.), </editor> <booktitle> Proc. 4th Intl. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1987. </year>
Reference-contexts: The extensions are primarily aimed at enabling programs to manipulate multiple theories, allowing distinct theories to have multiple `viewpoints' of a relation, and to make proofs available as terms in the language <ref> [3] </ref>. The MetaProlog compiler is able to compile theories also when they are only partially given.
Reference: [4] <author> Barklund, J., </author> <title> What is a Meta-Variable in Prolog?, </title> <editor> in: H. Abramson and M. H. Rogers (eds.), </editor> <booktitle> Meta-Programming in Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1989. </year>
Reference-contexts: It is therefore convenient, although not strictly necessary, to let the function symbol of E 0 depend on whether E is a variable, a symbol or a compound expression. The choice of names for variables in E is particularly difficult <ref> [4] </ref>. If the variables in E have a scope, then that scope must somehow be reflected in E 0 . The fact that Horn clauses are usually presented without explicit quantifiers appears to be the source of much confusion about names of variables.
Reference: [5] <author> Barklund, J. and Hamfelt, A., </author> <title> Formalizing Multiple Interpretations of Law as Metalogic Programs, Law, </title> <journal> Computers and Artificial Intelligence, </journal> <month> 2(2) </month> <year> (1993). </year>
Reference-contexts: Jiang goes even further [41], advocating a language with a nonground representation that does not distinguish between terms and sentences, based on an earlier and stricter language of Richards [74]. 5.9 Alloy Alloy is a metalogic programming language proposed by Barklund & Ham-felt <ref> [5, 6] </ref>. The language combines ideas from Reflective Prolog (automatic meta-to-object reflection as an inference rule) and Kowalski's `Meta' (the representation of theories and the application of meta-to-object reflection also to program clauses). <p> Such flexible interpretation is necessary for proper treatment of legal knowledge. This was first observed, and expressed in an executable formalism, by Hamfelt & Barklund <ref> [5, 6, 34] </ref>. Such techniques should be applicable also in other domains where reasoning cannot be performed by naive application of knowledge to situations and problems. 7 Related Topics Metalogic programming has close relationships with several other logics that have been proposed for computation and/or knowledge representation.
Reference: [6] <author> Barklund, J. and Hamfelt, A., </author> <title> Hierarchical Representation of Legal Knowledge with Metaprogramming in Logic, </title> <journal> J. Logic Programming, </journal> <volume> 18 </volume> <month> 55-80 </month> <year> (1994). </year>
Reference-contexts: Barklund & Hamfelt compare the two methods for expressing a typical problem in representation of legal knowledge <ref> [6] </ref>. Note that the naming of theories in Sect. 2.1 is neutral concerning the choice of representation of theories. 3 Representation of the Object Language In this section we will discuss representations of expressions in an object programming language. <p> Jiang goes even further [41], advocating a language with a nonground representation that does not distinguish between terms and sentences, based on an earlier and stricter language of Richards [74]. 5.9 Alloy Alloy is a metalogic programming language proposed by Barklund & Ham-felt <ref> [5, 6] </ref>. The language combines ideas from Reflective Prolog (automatic meta-to-object reflection as an inference rule) and Kowalski's `Meta' (the representation of theories and the application of meta-to-object reflection also to program clauses). <p> Given a language with metalevel capabilities, (object level) programs could be specified implicitly through metalevel information, for example, in the form of metalevel programs. Such ideas have been put forward by, e.g., Kwok & Sergot [56], Costantini & Lanzarone [20], and Barklund & Hamfelt <ref> [6] </ref>. Other Forms of Program Manipulation. There are certainly many other kinds of metaprograms with a purpose to manipulate representations of programs, e.g., compilation, program synthesis, program verification, debugging, etc. <p> Such flexible interpretation is necessary for proper treatment of legal knowledge. This was first observed, and expressed in an executable formalism, by Hamfelt & Barklund <ref> [5, 6, 34] </ref>. Such techniques should be applicable also in other domains where reasoning cannot be performed by naive application of knowledge to situations and problems. 7 Related Topics Metalogic programming has close relationships with several other logics that have been proposed for computation and/or knowledge representation.
Reference: [7] <author> Bowen, K. A. and Weinberg, T., </author> <title> A Meta-Level Extension of Prolog, </title> <editor> in: J. Cohen and J. Conery (eds.), </editor> <booktitle> Proc. 1985 Symp. on Logic Programming, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Washington, D.C., </address> <year> 1985. </year>
Reference-contexts: This seems particularly useful when representing the beliefs of a number of agents, which may involve beliefs about other agents' beliefs. Midway between these approaches we find a proposal, also by Kowalski [53], that is used in MetaProlog <ref> [7] </ref>, where theories are denoted by constants but where "virtual" theories can be constructed by combining other theories. Barklund & Hamfelt compare the two methods for expressing a typical problem in representation of legal knowledge [6]. <p> The fact that Horn clauses are usually presented without explicit quantifiers appears to be the source of much confusion about names of variables. We know of two useful solutions: either quantifiers are made explicit, as in MetaProlog <ref> [7] </ref> and the language discussed by Kowalski [55], or some construct for delimiting scope in names is introduced. <p> Aiello, Nardi & Schaerf showed an example of how FOL could be used for expressing metareasoning (see Sect. 6.3) [2]. 11 5.2 MetaProlog The language MetaProlog is an extension of Prolog with metaprogramming capabilities <ref> [7] </ref>. The extensions are primarily aimed at enabling programs to manipulate multiple theories, allowing distinct theories to have multiple `viewpoints' of a relation, and to make proofs available as terms in the language [3]. The MetaProlog compiler is able to compile theories also when they are only partially given.
Reference: [8] <author> Bowen, K. A., </author> <title> Meta-Level Programming and Knowledge Representation, </title> <journal> New Generation Computing, </journal> <volume> 3 </volume> <month> 359-383 </month> <year> (1985). </year>
Reference-contexts: A metalogical view of knowledge structures. Many proposed data structures for knowledge representation, most importantly frames but also, e.g., semantic nets and scripts, can be given a useful new logical reading when expressed in a metalogic programming language. The first such observation is due to Hayes [37], later Bowen <ref> [8] </ref> described several such correspondences in some detail. Further work along this direction is reported by Brogi & Turini [11]. 17 Three Wise Men.
Reference: [9] <author> Bowen, K. A. and Kowalski, R. A., </author> <title> Amalgamating Language and Metalan-guage in Logic Programming, </title> <editor> in: K. L. Clark and S. A. Tarnlund (eds.), </editor> <booktitle> Logic Programming, </booktitle> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: If the selected literal is :B (containing the variables w) and rewriting a goal clause 9 w ( B) has terminated with failure, then :B can simply be removed from the goal clause. 2 Representation Following the seminal paper by Bowen & Kowalski <ref> [9, 52] </ref>, metalogic programming has mostly been concerned with provability, i.e., whether an expression Q can be obtained through finitely many applications of one or more inference rules, beginning with a finite set of expressions fP 1 ; : : : ; P k g for some k, k 0. <p> We could weaken this restriction to require only that the representing term is closed, as is common in mathematical logic [80], but the terminology in the field has long distin guished mainly between ground and nonground representations. 3 consequence of this restriction for metaprogramming was observed by Bowen & Kowalski <ref> [9] </ref>.) However, as Konolige points out [50], being able to show that a sentence is not a consequence of some knowledge is essential for many forms of introspective reasoning, so completely abandoning the negation of Demo is probably going too far. <p> For example, the Godel language (see Sect. 5.4) provides such a representation of itself (although through an abstract datatype) and there is also a module that contains a representation of Godel provability. Another property of a self-representable language is that self-referential sentences can be constructed <ref> [9] </ref>. This is not harmful in itself, but a theory with such a language can express paradoxes. The concept of self-reference has been studied quite extensively, e.g., by Perlis [70, 71].
Reference: [10] <author> Brogi, A., Mancarella, P., Pedreschi, D. and Turini, F., </author> <title> Composition Operators for Logic Theories, </title> <editor> in: J. W. Lloyd (ed.), </editor> <booktitle> Computational Logic, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: Given that the language and inference rules of a collection of theories is fixed, we may characterize each theory by its set of nonlogical axioms. Brogi, Mancarella, Pedreschi & Turini have studied operations on theories and propose an algebra on theories with operations such as union and difference <ref> [10] </ref>. This work is representative of a common approach (employed, e.g., in 'LOG [16]): to represent a theory by some data structure (e.g., a 5 list), which contains as parts a representation of every nonlogical axiom of the theory.
Reference: [11] <author> Brogi, A. and Turini, F., </author> <title> Metalogic for Knowledge Representation, </title> <editor> in: J. A. Allen, R. Fikes and E. Sandewall (eds.), </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. 2nd Intl. Conf., </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, Calif., </address> <year> 1991. </year>
Reference-contexts: The first such observation is due to Hayes [37], later Bowen [8] described several such correspondences in some detail. Further work along this direction is reported by Brogi & Turini <ref> [11] </ref>. 17 Three Wise Men. The `three wise men' problem has become a standard test problem for metareasoning and metaprogramming formalisms and systems, because it involves agents reasoning about the beliefs and reasoning of other agents. 9 Briefly, a common version of the problem can be stated as follows.
Reference: [12] <editor> Bruynooghe, M. (ed.), </editor> <booktitle> Proc. Second Workshop on Meta-Programming in Logic, </booktitle> <institution> Dept. of Comp. Sci., Katholieke Univ. Leuven, Leuven, </institution> <year> 1990. </year>
Reference-contexts: Computational introspection and proper representations of programs should be valuable for developing correct and efficient tools for software engineering. Further Reading In addition to the literature references in the preceding text, the following bibliography includes four collections of articles <ref> [1, 12, 60, 72] </ref> and two books [32, 49] that can be consulted by the interested reader to explore this topic further. Acknowledgements I would like to thank professors N. D. Jones, J. W. Lloyd, and J. F.
Reference: [13] <author> Bundy, A. and Sterling, L. S., </author> <title> Meta-Level Inference in Algebra, </title> <type> Research Paper 164, </type> <institution> Dept. of Artificial Intelligence, Edinburgh Univ., </institution> <year> 1981. </year>
Reference-contexts: The system solves equations by reasoning at the metalevel. The Impress system, in addition, employs the metametalevel in order to create proof plans for the metalevel <ref> [13] </ref>. Multiple Interpretations. By exploiting metaprogramming it is possible to construct knowledge systems for domains where the direct representations of knowledge must be the object of extensive interpretation, when applying it to actual problem situations.
Reference: [14] <author> Bundy, A. and Welham, B., </author> <title> Using Meta-Level Inference for Selective Application of Multiple Rewrite Rules in Algebraic Manipulation, </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <month> 189-212 </month> <year> (1981). </year>
Reference-contexts: Press and Impress. Another well-known example of metalevel reasoning based on logic programming techniques is the Press system, developed at University of Edinburgh <ref> [14] </ref> (a retrospective view has been given by Welham [88]). The system solves equations by reasoning at the metalevel. The Impress system, in addition, employs the metametalevel in order to create proof plans for the metalevel [13]. Multiple Interpretations.
Reference: [15] <author> Burstall, R. M. and Darlington, J., </author> <title> A Transformation System for Developing Recursive Programs, </title> <journal> J. ACM, </journal> <volume> 24 </volume> <month> 44-67 </month> <year> (1977). </year> <month> 22 </month>
Reference-contexts: Common program transformation steps are the FOLD/UNFOLD transformations that rewrite a sentence to an atomic sentence or vice versa, using a set of applicable clauses. Such methods were first studied in the context of functional programs (recursive equations) by Burstall & Darlington <ref> [15] </ref> and applied to logic programs by, e.g., Hogger [40]. A transformation system that preserves the so-called least model semantics of logic programs was presented by Tamaki & Sato [85]. Partial Evaluation.
Reference: [16] <author> Cervesato, I. and Rossi, G. F., </author> <title> Logic Meta-Programming Facilities in 'LOG, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: Brogi, Mancarella, Pedreschi & Turini have studied operations on theories and propose an algebra on theories with operations such as union and difference [10]. This work is representative of a common approach (employed, e.g., in 'LOG <ref> [16] </ref>): to represent a theory by some data structure (e.g., a 5 list), which contains as parts a representation of every nonlogical axiom of the theory.
Reference: [17] <author> Church, A., </author> <title> An Unsolvable Problem of Elementary Number Theory, </title> <journal> Amer. J. Mathematics, </journal> <volume> 58 </volume> <month> 345-363 </month> <year> (1936). </year>
Reference-contexts: Note that we cannot require that ` M :Demo T O (P 0 ) whenever 6` O P , or vice versa. Provided that T O is consistent and contains the nonlogical axioms of arithmetic, it follows from Church's theorem <ref> [17] </ref> that there can be no finite representation, as nonlogical axioms of a theory T M , of its nonprovability (alternatively Godel's incompleteness theorem [33] can be used to contradict a complete axiomatization of nonprovability in T O ). (The 3 They called such a representation an amalgamation of the metalanguage
Reference: [18] <author> Colmerauer, A., Kanoui, H., Pasero, R. and Roussel, P., </author> <title> Un Systeme de Communication Homme-Machine en Fran~cais, </title> <type> Technical report, </type> <institution> Groupe de Recherche en Intelligence Artificielle, Univ. </institution> <address> d'Aix-Marseille, Luminy, </address> <year> 1972. </year>
Reference-contexts: The selection function used in the Prolog logic programming language <ref> [18] </ref> always picks the leftmost conjunct of the goal clause. 2 The axioms of a theory can be divided into logical axioms that "come with the language", e.g., equality axioms, and nonlogical axioms that are particular for the theory under consideration. 2 If we let T [P 1 ; : : <p> A "non-ground representation", containing variables, is thus a contradiction in terms. However, such naming conventions have often been applied in Prolog <ref> [18] </ref> metaprograms and merit further investigation. Below we will therefore use the term "non-ground representation" when discussing certain improper representations; their advantages and disadvantages. 3.1 Ground Representations In a metaprogramming language, several pragmatic issues must influence the choice of representation of an object language.
Reference: [19] <author> Costantini, S., Dell'Acqua, P. and Lanzarone, G. A., </author> <title> Reflective Agents in Metalogic Programming, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: It is very instructive to compare various proposed solutions to this problem, although lack space prevents us from doing so here. They all contain some form of metareasoning in logic, but use different formal systems, including various forms of metaprogramming in logic <ref> [2, 19, 39, 46, 83] </ref> and modal logic [30, 32]. Press and Impress. Another well-known example of metalevel reasoning based on logic programming techniques is the Press system, developed at University of Edinburgh [14] (a retrospective view has been given by Welham [88]).
Reference: [20] <author> Costantini, S. and Lanzarone, G. A., </author> <title> A Metalogic Programming Language, </title> <editor> in: G. Levi and M. Martelli (eds.), </editor> <booktitle> Proc. 6th Intl. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1989. </year>
Reference-contexts: The MetaProlog compiler is able to compile theories also when they are only partially given. A preliminary declarative and operational semantics for MetaProlog was given by Subrahmanian [83]. 5.3 Reflective Prolog Reflective Prolog, which has been developed at Universita degli Studi di Milano <ref> [20] </ref>, allows the programmer to extend the object level provability relation by clauses to be used at the metalevel. However, a Reflective Prolog program is an amalgamated theory, containing object level axioms as well as metalevel axioms. <p> Given a language with metalevel capabilities, (object level) programs could be specified implicitly through metalevel information, for example, in the form of metalevel programs. Such ideas have been put forward by, e.g., Kwok & Sergot [56], Costantini & Lanzarone <ref> [20] </ref>, and Barklund & Hamfelt [6]. Other Forms of Program Manipulation. There are certainly many other kinds of metaprograms with a purpose to manipulate representations of programs, e.g., compilation, program synthesis, program verification, debugging, etc.
Reference: [21] <author> Cousot, P. and Cousot, R., </author> <title> Abstract Interpretation: a Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fix-points, </title> <booktitle> in: Conf. Rec. 4th ACM Symp. on Principles of Programming Languages, </booktitle> <year> 1977. </year>
Reference-contexts: Present methods are largely based on abstract interpretation <ref> [21] </ref>, a general method that has successfully been applied to logic programs, by e.g., Mellish [63], Jones & Sondergaard [43], Debray & Warren [24], Marriott & Sondergaard [61], Muthukumar & Hermenegildo [67], and Cousot & Cousot [22]. This is an area in particularly rapid development. Implicit Programs.
Reference: [22] <author> Cousot, P. and Cousot, R., </author> <title> Abstract Interpretation and Application to Logic Programs, </title> <journal> J. Logic Programming, </journal> <volume> 13 </volume> <month> 103-179 </month> <year> (1992). </year>
Reference-contexts: Present methods are largely based on abstract interpretation [21], a general method that has successfully been applied to logic programs, by e.g., Mellish [63], Jones & Sondergaard [43], Debray & Warren [24], Marriott & Sondergaard [61], Muthukumar & Hermenegildo [67], and Cousot & Cousot <ref> [22] </ref>. This is an area in particularly rapid development. Implicit Programs. This is a recent development that seems interesting for software engineering in the future. Given a language with metalevel capabilities, (object level) programs could be specified implicitly through metalevel information, for example, in the form of metalevel programs.
Reference: [23] <author> De Schreye, D. and Martens, B., </author> <title> A Sensible Least Herbrand Semantics for Untyped Vanilla Meta-Programming and its Extension to a Limited Form of Amalgamation, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: In addition, De Schreye & Martens has presented a least Herbrand model semantics for what they call "untyped vanilla" meta-programming, including a form of amalgamation <ref> [23] </ref>. These results are extended by Levi & Ramundo [57]. Enhancing metainterpreters. Sterling has proposed a methodology primarily intended for building knowledge systems [82], where a given `vanilla' interpreter (essentially the three-line interpreter described previously) is enhanced with features such as generation of explanations (proofs), depth control etc.
Reference: [24] <author> Debray, S. K. and Warren, D. S., </author> <title> Automatic Mode Inference for Logic Programs, </title> <journal> J. Logic Programming, </journal> <volume> 5 </volume> <month> 207-229 </month> <year> (1988). </year>
Reference-contexts: Present methods are largely based on abstract interpretation [21], a general method that has successfully been applied to logic programs, by e.g., Mellish [63], Jones & Sondergaard [43], Debray & Warren <ref> [24] </ref>, Marriott & Sondergaard [61], Muthukumar & Hermenegildo [67], and Cousot & Cousot [22]. This is an area in particularly rapid development. Implicit Programs. This is a recent development that seems interesting for software engineering in the future.
Reference: [25] <author> Eshghi, K., </author> <title> Meta-Language in Logic Programming, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London, </address> <year> 1986. </year>
Reference-contexts: For example, if T O is weak enough to be decidable, then the negation of Demo T O can be axiomatized. Eshghi discusses other approximations of nonprovability <ref> [25] </ref>.
Reference: [26] <author> Feferman, S., </author> <title> Transfinite Recursive Progressions of Axiomatic Theories, </title> <journal> J. Symbolic Logic, </journal> <volume> 27 </volume> <month> 259-316 </month> <year> (1962). </year>
Reference-contexts: This last proposition is known as a reflection principle, and was employed by Weyhrauch in his FOL system [89] but can be traced back to Feferman <ref> [26] </ref>. Note that we cannot require that ` M :Demo T O (P 0 ) whenever 6` O P , or vice versa.
Reference: [27] <author> Frege, G., Begriffsshrift, </author> <title> a Formula Language Modelled upon that of Arithmetic, for Pure Thought, </title> <editor> in: J. van Heijenoort (ed.), </editor> <title> From Frege to Godel: </title>
Reference-contexts: Another approach, based on the use of interpreters, was put forward by Pereira [69]. 6.3 Knowledge Representation and Reasoning Perhaps the most intriguing application of metalogic programming is in the area of knowledge representation. Techniques for representing knowledge in logic have been studied for a long time <ref> [27, 36, 62] </ref> and knowledge expressed in efficiently executable subsets of logic, e.g., in Horn clauses, constitutes a logic program having both a declarative and a procedural reading [51].
References-found: 27

