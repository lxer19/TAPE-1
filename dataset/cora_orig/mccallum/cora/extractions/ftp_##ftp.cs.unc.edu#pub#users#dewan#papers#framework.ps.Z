URL: ftp://ftp.cs.unc.edu/pub/users/dewan/papers/framework.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/cse.html
Root-URL: http://www.cs.unc.edu
Title: A High-Level and Flexible Framework for Implementing Multi-User User-Interfaces  
Author: PRASUN DEWAN RAJIV CHOUDHARY 
Keyword: Categories and Subject Descriptors: C.2.4 [Computer-Communication Networks]: Distributed Systemsdistributed applications, distributed databases; D.2.2 [Software Engineering]: Tools and Techniquesuser interfaces; D.2.6 [Software Engineering]: Programming Environmentsinteractive; D.3.3 [Programming Languages]: Language Constructsinput/output; H.1.2 [Models and Principles]: User/Machine Systemshuman factors; H.4.1 [Information Systems Applications]: Office Automation; I.7.1 [Text Processing]: Text Editing General Terms: Design, Human Factors, Languages Additional Key Words and Phrases: computer supported cooperative work, groupware, editing, user interface management systems  
Note: 3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333  
Address: 3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333  
Affiliation: Purdue University  
Abstract: We have developed a high-level and flexible framework for supporting the construction of multi-user user-interfaces. The framework is based on a generalized editing interaction model, which allows users to view programs as active data that can be concurrently edited by multiple users. It consists of several novel components including a refinement of both the Seeheim UIMS architecture and the distributed graphics architecture that explicitly addresses multi-user interaction; the abstractions of shared active variables and interaction variables, which allow users and applications to exchange information; a set of default collaboration rules designed to keep the collaboration-awareness low in multiuser programs; and a small but powerful set of primitives for overriding these rules. The framework allows users to be dynamically added and removed from a multi-user session, different users to use different user interfaces to interact with an application, the modules interacting with a particular user to execute on the local workstation, and programmers to incrementally trade automation for flexibility. We have implemented the framework as part of a system called Suite. This paper motivates, describes, and illustrates the framework using the concrete example of Suite, discusses how it can be implemented in other kinds of systems, compares it with related work, discusses its shortcomings, and suggests directions for future work. 
Abstract-found: 1
Intro-found: 1
References-found: 0

