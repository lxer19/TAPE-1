URL: http://logic.stanford.edu/papers/oopsla.ps
Refering-URL: http://logic.stanford.edu/papers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: singh@cs.stanford.edu  gisi@hplabs.hp.com  
Title: COORDINATING DISTRIBUTED OBJECTS WITH DECLARATIVE INTERFACES  
Author: NARINDER P. SINGH and MARK A. GISI 
Keyword: Objects, Software Interoperation, Specification Sharing, Declara tive Interfaces  
Date: Recieved March 24 Revised March 24, 1995  
Address: Stanford, California 94305, USA  Palo Alto, California 94305  
Affiliation: Computer Science Department, Stanford University  Software Technology Lab Hewlett-Packard Laboratories  
Abstract: This paper presents an architecture that supports coordination among loosely coupled distributed objects. The architecture has two components: objects that provide a declarative specification of their interface, and system programs that reason with these specifications to provide sophisticated interoperation services. Traditional object-oriented interoperation technologies rely on procedural interface specifications, which do not address the semantics of the operations supported by the object. In addition, traditional approaches provide limited support for automatic interoperation in a dynamic environment. For instance, a resource that is available at compile time may not be available at runtime, or a better resource may become available at runtime. Interoperation based on machine-processible specification of object interfaces reduces the coupling (interdependence) between a client and server, and also shifts the burden of coordination from the programmer to the system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Betz, M., </author> <title> "OMG's CORBA," </title> <journal> Dr. </journal> <note> Dobb's Special Report, Winter 1994/95. </note>
Reference-contexts: We describe the benefits of providing objects with a semantically rich declarative interface. We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 2. Related Work The CORBA model <ref> [1, 14, 16] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [2] <author> Cutkosky, M. et al., </author> <title> "PACT: An Experiment in Integrating Engineering Systems," </title> <journal> Computer 26, </journal> <volume> 1(1993), </volume> <pages> 28-37. </pages>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm <ref> [2] </ref>, and integrated CAD tools for civil engineering [11]. It is currently being used in the CommerceNet project [18], which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5.
Reference: [3] <author> Deschrevel, J. P., </author> <title> "The ANSA Model of Trading and Federation," Architecture Projects Management, </title> <address> Cambridge, </address> <year> 1993. </year>
Reference-contexts: Figure 2 illustrates this extension to IDL. In addition to supporting more expressive interface specification, ANSA also provides a system service called a trader <ref> [3] </ref>, that utilizes this information to facilitate interoperation. A server registers an interface specification (along with a collection of properties) with the trader, and clients make requests to the trader to help find a particular instance of a server.
Reference: [4] <author> Finin, T., and Weiderhold, G., </author> <title> "An Overview of KQML: A Knowledge Query and Manipulation Language," </title> <institution> available through the Stanford University Computer Science Department, </institution> <year> 1991. </year>
Reference-contexts: The efficiency of communication can be enhanced by providing a linguistic layer in which context is taken into account. This is the function of KQML. As used in ACL, each KQML message is a list of components enclosed in matching parentheses <ref> [4] </ref>. The first word in the list indicates the type of communication. The subsequent entries are KIF expressions appropriate to that communication, in effect the "arguments".
Reference: [5] <author> Genesereth, M., "Designworld," </author> <booktitle> in the Proceedings of the 1991 IEEE International Conference on Robotics and Automation, </booktitle> <address> Sacramento, California, </address> <month> April </month> <year> 1991, </year> <pages> pp. 2785-2788. </pages>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits <ref> [5] </ref>, a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering [11]. It is currently being used in the CommerceNet project [18], which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5.
Reference: [6] <author> Genesereth, M. R., Fikes, R., et al., </author> <title> "Knowledge Interchange Format Version 3 Reference Manual" Logic92-1, </title> <institution> Stanford University Logic Group, </institution> <year> 1992. </year>
Reference-contexts: In order to support communication between objects using different vocabularies, the system also needs the definitions of articulation axioms to relate the symbols in one vocabulary to the symbols in another vocabular [9, 15]. 3.1.2. KIF KIF <ref> [6] </ref> is a prefix version of first-order predicate calculus with various extensions to enhance its expressiveness. First and foremost, KIF provides for the expression of simple data. For example, the sentences shown below encode two tuples in a personnel database.
Reference: [7] <author> Genesereth, M. R., and Ketchpel, S. P., </author> <title> "Software Agents," </title> <journal> Communication of the ACM, </journal> <volume> Vol. 37, No. </volume> <month> 7 July </month> <year> 1994. </year>
Reference-contexts: Agent Communication Language The language we use for describing a declarative interface, developed in the artificial intelligence (AI) community to support interoperation among distributed autonomous agents <ref> [7, 8] </ref>, is called Agent Communication Language (ACL). 5 An object provides the facilitator with a declarative description of its capabilities and properties at runtime by sending it a collection of ACL messages.
Reference: [8] <author> Genesereth, M., Singh, N., and Syed, M., </author> <title> "A Distributed Anonymous Knowledge Sharing Approach to Software Interoperation," </title> <booktitle> in the Proceedings of the International Symposium on Fifth Generation Computing Systems, </booktitle> <year> 1994, </year> <pages> pp. 125-139. </pages>
Reference-contexts: The ideas presented in this paper have been developed within a project focused on constructing distributed intelligent autonomous agents <ref> [8] </ref>. We believe a more restricted form of this work could be developed to extend existing distributed object models (e.g., CORBA and OLE). We describe the benefits of providing objects with a semantically rich declarative interface. <p> Agent Communication Language The language we use for describing a declarative interface, developed in the artificial intelligence (AI) community to support interoperation among distributed autonomous agents <ref> [7, 8] </ref>, is called Agent Communication Language (ACL). 5 An object provides the facilitator with a declarative description of its capabilities and properties at runtime by sending it a collection of ACL messages. <p> The facilitator can be conceptually viewed as a virtual server providing all the services that are provided by all the server objects that are registered with it. A more detailed description of this architecture appears in <ref> [8] </ref>. The examples illustrate the automated coordination services provided by a facilitator, which are referred to as content-based routing. Key elements are the declarative specifications of object interfaces (a meta-description) and the declarative specifications of other background information.
Reference: [9] <author> Gruber, T., "Ontolingua: </author> <title> A Mechanism to Support Portable Ontologies," </title> <institution> KSL-91-66, Stanford Knowledge Systems Laboratory, </institution> <year> 1991. </year>
Reference-contexts: KQML is being evaluated by the Object Management Group (OMG). 3.1.1. Vocabulary The vocabulary of ACL is listed in a large and open-ended dictionary of words appropriate to common application areas (e.g., electronic commerce, medical industry, and so forth) <ref> [9] </ref>. Each word in the dictionary has an English description for use by humans in understanding the meaning of the word, and each word has formal annotations for use by programs. <p> To disambiguate the meanings of symbols, all communication between objects must specify the vocabulary used. In order to support communication between objects using different vocabularies, the system also needs the definitions of articulation axioms to relate the symbols in one vocabulary to the symbols in another vocabular <ref> [9, 15] </ref>. 3.1.2. KIF KIF [6] is a prefix version of first-order predicate calculus with various extensions to enhance its expressiveness. First and foremost, KIF provides for the expression of simple data. For example, the sentences shown below encode two tuples in a personnel database.
Reference: [10] <author> Herbert, A., </author> <title> "An ANSA Overview," </title> <journal> IEEE Network, </journal> <month> January/February </month> <year> 1994, </year> <pages> pp. 18-23. </pages>
Reference-contexts: This may be important if the object provides printing services, and the client would like to print a file at a particular location. The ANSA project has developed an architecture that supports interoperation among heterogenous telecommunication services and distributed computer applications <ref> [10] </ref>. ANSA recognized the limited expressiveness of IDL, and therefore, a server can augment its specification with a collection of properties (name/value pairs). Properties provide semantic information that describe differents instances of a service.
Reference: [11] <author> Khedro, T., and Genesereth, M., </author> <title> "The Federation Architecture for Interoper-able Agent-Based Concurrent Engineering Systems," </title> <journal> International Journal on Concurrent Engineering, Research and Applications, </journal> <volume> Volume 2, </volume> <pages> pp. 125-131, </pages> <year> 1994. </year>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering <ref> [11] </ref>. It is currently being used in the CommerceNet project [18], which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5. Conclusion In this paper we have presented an interoperation architecture based on declarative specification of object interfaces.
Reference: [12] <author> Miscrosoft Corporation, </author> <title> OLE 2 Programmer's Reference: Creating Programmable Applications with OLE Automation, Volume 2, </title> <publisher> Microsoft Press, </publisher> <address> Redmond, Wash., </address> <year> 1994. </year> <month> 18 </month>
Reference-contexts: 1. Introduction A number of object-oriented technologies have been developed to support interop eration among applications distributed in an enterprise (e.g., CORBA <ref> [14, 12, 13] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object.
Reference: [13] <author> Microsoft Technical Backgrounder OLE 2.0, </author> <year> 1994. </year>
Reference-contexts: 1. Introduction A number of object-oriented technologies have been developed to support interop eration among applications distributed in an enterprise (e.g., CORBA <ref> [14, 12, 13] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object.
Reference: [14] <author> The Object Management Group, </author> <title> "The Common Object Request Broker: Architecture and specification," Revision 1.1, TC Document Number 91.12.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: 1. Introduction A number of object-oriented technologies have been developed to support interop eration among applications distributed in an enterprise (e.g., CORBA <ref> [14, 12, 13] </ref>). They enable objects residing in one application to be accessed by objects residing in another. They also enable an entire application to be represented as a single object. <p> We describe the benefits of providing objects with a semantically rich declarative interface. We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 2. Related Work The CORBA model <ref> [1, 14, 16] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [15] <author> Tawakol, O., and Singh, N. </author> <title> "A Name Space Context Graph for Multi-Context Systems," </title> <institution> Logic-95-1, Stanford University Logic Group, </institution> <year> 1995. </year>
Reference-contexts: To disambiguate the meanings of symbols, all communication between objects must specify the vocabulary used. In order to support communication between objects using different vocabularies, the system also needs the definitions of articulation axioms to relate the symbols in one vocabulary to the symbols in another vocabular <ref> [9, 15] </ref>. 3.1.2. KIF KIF [6] is a prefix version of first-order predicate calculus with various extensions to enhance its expressiveness. First and foremost, KIF provides for the expression of simple data. For example, the sentences shown below encode two tuples in a personnel database.
Reference: [16] <author> Vinoski, S., </author> <title> "Distributed Object Computing with CORBA," </title> <type> C++ Report, </type> <month> July/August </month> <year> 1993. </year>
Reference-contexts: We describe the benefits of providing objects with a semantically rich declarative interface. We also describe services that utilize simple inferencing techniques to reason about existing resources that can assist object implementors in dealing with the complexities associated with large, evolving distributed environments. 2. Related Work The CORBA model <ref> [1, 14, 16] </ref> provides a number of system services that enables a client to find a reference to an object at runtime. Each server object publishes its interface to the Interface Repository (IR) using CORBA's Interface Definition Language (IDL).
Reference: [17] <author> Wiederhold, G., </author> <title> "The Architecture for Future Information Systems," </title> <institution> Stanford University, Computer Science Department, </institution> <year> 1989. </year>
Reference: [18] <author> Wong, W., and Keller, A., </author> <title> "Developing an Internet Presence with Online Electronic Catalogs," </title> <institution> Stanford Center for Information Technology, </institution> <note> http://www-db.stanford.edu/pub/keller/1994/cnet-online-cat.ps 19 </note>
Reference-contexts: This system has been used in a collection of interoperation experiments, including an integrated design, manufacture, and diagnosis system for digital circuits [5], a multi-domain simulation of a robotic arm [2], and integrated CAD tools for civil engineering [11]. It is currently being used in the CommerceNet project <ref> [18] </ref>, which provides smart search for product information using heterogeneous on-line catalogs, ordering, billing, etc. 5. Conclusion In this paper we have presented an interoperation architecture based on declarative specification of object interfaces.
References-found: 18

