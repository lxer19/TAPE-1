URL: http://www.tns.lcs.mit.edu/~djw/library/bhatti.sigcomm95.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: A System for Constructing Configurable High-Level Protocols  
Author: Nina T. Bhatti and Richard D. Schlichting 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science University of Arizona  
Abstract: New distributed computing applications are driving the development of more specialized protocols, as well as demanding greater control over the communication substrate. Here, a network subsystem that supports modular, fine-grained construction of high-level protocols such as atomic multicast and group RPC is described. The approach is based on extending the standard hierarchical model of the x-kernel with composite protocols in which micro-protocol objects are composed within a standard runtime framework. Each micro-protocol realizes a separate semantic property, leading to a highly modular and configurable implementation. In contrast with similar systems, this approach provides finer granularity and more flexible inter-object communication. The design and prototype implementation run-ing on Mach are described. Performance results are also given for a micro-protocol suite implementing variants of group RPC. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. B. Abbott and L. L. Peterson. </author> <title> Increasing network throughput by integrating protocol layers. </title> <journal> IEEE/ACM Trans. on Networking, </journal> <volume> 1(5), </volume> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Dependencies between micro-protocols are explicit since back door communication channels are unnecessary. This makes understanding the micro-protocols easier and the interactions ob vious. * Future opportunities for optimization. Explicit dependencies create the potential for code optimization. For example, it may be possible to in-line code using techniques similar to <ref> [1] </ref> to yield a system with efficiency competitive to monolithic implementations. * Availability of x-kernel protocols. Since our system is incorporated in the x-kernel, all existing and future x-kernel protocols can be used without modification.
Reference: [2] <author> D. Bakken and R. D. Schlichting. </author> <title> Supporting fault-tolerant parallel programming in Linda. </title> <journal> IEEE Trans. on Parallel and Distr. Syst., </journal> <volume> 6(3) </volume> <pages> 287-302, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The use of this approach for constructing a customized atomic multicast protocol for a version of the Linda coordination language with fault-tolerance extensions <ref> [2] </ref> is described in [17]. The prototype implementation described in this paper illustrates the feasibility of extending the x-kernel to support this two-level model of composition.
Reference: [3] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concur-rency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions <ref> [3] </ref>, and protocols related to multimedia applications [24, 40]. All provide powerful abstractions that simplify the task of writing applications that must handle uncertainties involved with network communication, distributed synchronization, and processor crashes.
Reference: [4] <author> B. Bershad, C. Chambers, S. Eggers, C. Maeda, D. Mc-Namee, P. Pardyak, S. Savage, and E. Sirer. </author> <title> SPIN an extensible microkernel for application-specific operating system services. </title> <journal> ACM Op. Syst. Review, </journal> <volume> 29(1):7477, </volume> <month> Jan </month> <year> 1995. </year>
Reference-contexts: Among other things, this configurability makes the approach suitable for constructing adaptive systems, which alter their behavior based on changes in the environment [5, 14]. Our approach is also related to recent work in configurable operating systems <ref> [4, 18, 31] </ref>. In contrast with similar systems for constructing configurable protocols, our approach provides finer granularity and more flexible inter-object communication, which is especially useful for configuring closely-related service variants of the same general type of high-level protocol (e.g., variants of atomic multicast). <p> They also retain a single-level composition model, which we believe does not offer enough flexibility for high-level protocols. Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context <ref> [4, 18, 31] </ref>. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just network protocols.
Reference: [5] <author> T. Bihari and K. Schwan. </author> <title> Dynamic adaptation of real-time software. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 9(2) </volume> <pages> 143-174, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Among other things, this configurability makes the approach suitable for constructing adaptive systems, which alter their behavior based on changes in the environment <ref> [5, 14] </ref>. Our approach is also related to recent work in configurable operating systems [4, 18, 31].
Reference: [6] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [6, 12, 27, 35] </ref>. Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [7] <author> A. Black. </author> <title> Understanding transations in an operating system context. </title> <journal> ACM Op. Syst. Review, </journal> <volume> 20(1) </volume> <pages> 73-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Examples include the ANSA system [32] and the work on multicast reported in [16]. In contrast to these, our approach is more general and provides more flexibility for the protocol designer. Also in the area of fault-tolerance, <ref> [7] </ref> explores orthogonal properties of transactions. Such characterizations are complementary to our work since they suggest applications that might be suitable for implementation using our model. Another area of related work concerns development of system support for constructing modular protocols. The x-kernel itself is, of course, one such system.
Reference: [8] <author> D. R. Cheriton. VMTP: </author> <title> A transport protocol for the next generation of communication systems. </title> <booktitle> In Proceedings of SIGCOMM'86, </booktitle> <pages> pages 406-415, </pages> <month> Aug </month> <year> 1986. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC <ref> [8, 9, 10] </ref>, membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [9] <author> R. Cmelik, N. Gehani, and W. D. Roome. </author> <title> Fault Tolerant Concurrent C: A tool for writing fault tolerant distributed programs. </title> <booktitle> In Proceedings of the 18th IEEE Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 55-61, </pages> <address> Tokyo, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC <ref> [8, 9, 10] </ref>, membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [10] <author> E. C. Cooper. </author> <title> Programming language support for multicast communication in distributed systems. </title> <booktitle> In Proceedings of the 10th IEEE Conf. on Distr. Computing Syst., </booktitle> <pages> pages 450-457, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC <ref> [8, 9, 10] </ref>, membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [11] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC [8, 9, 10], membership <ref> [11, 25, 28] </ref>, distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [12] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the 15th IEEE Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [6, 12, 27, 35] </ref>. Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [13] <author> H. J. F. Fonseca. </author> <title> Support environments for the modulariza-tion, implementation and execution of communication protocols. </title> <type> Master's thesis, </type> <institution> Instituto Superior Tecnico, Lisboa, Portugal, </institution> <month> June </month> <year> 1994. </year> <note> In Portuguese. </note>
Reference-contexts: Such coordination is difficult in the current model. A remarkably similar experience has been reported inde pendently by the developers of xAMP <ref> [13] </ref>. While these limitations are directly relevant only to atomic multicast protocols, there are several reasons to believe the lessons are applicable to other types of protocols as well.
Reference: [14] <author> J. Goldberg, I. Greenberg, and T. Lawrence. </author> <title> Adaptive fault tolerance. </title> <booktitle> In Proceedings of the IEEE Workshop on Advances in Parallel and Distributed Systems, </booktitle> <pages> pages 127-132, </pages> <address> Princeton, NJ, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Among other things, this configurability makes the approach suitable for constructing adaptive systems, which alter their behavior based on changes in the environment <ref> [5, 14] </ref>. Our approach is also related to recent work in configurable operating systems [4, 18, 31].
Reference: [15] <author> M. Goldberg, G. Neufeld, and M. Ito. </author> <title> The parallel protocol framework. </title> <type> Technical Report 92-16, </type> <institution> Dept. of Computer Science, University of British Columbia, Vancouver, British Columbia, </institution> <month> Aug </month> <year> 1992. </year>
Reference-contexts: Moreover, the type of protocol objects supported appear relatively coarse-grained when compared to our objectsmulticast rather than individual properties of multicast, for instanceand more oriented toward hierarchical composition and limited data sharing. Several other efforts have also concentrated on supporting parallel execution of modular protocols, including <ref> [15, 26] </ref>. While similar to our work in the sense of decomposing protocols along semantic lines, these efforts differ in their emphasis on using parallel execution to improve throughput and latency for high-performance scientific applications.
Reference: [16] <author> R. Golding. </author> <title> Weak-Consistency Group Communication and Membership. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of California, </institution> <address> Santa Cruz, Santa Cruz, CA, </address> <year> 1992. </year>
Reference-contexts: Several are in the area of fault-tolerance, where researchers have explored use of modularization or system customization. Examples include the ANSA system [32] and the work on multicast reported in <ref> [16] </ref>. In contrast to these, our approach is more general and provides more flexibility for the protocol designer. Also in the area of fault-tolerance, [7] explores orthogonal properties of transactions. Such characterizations are complementary to our work since they suggest applications that might be suitable for implementation using our model.
Reference: [17] <author> D. Guedes, D. Bakken, N. Bhatti, M. Hiltunen, and R. D. Schlichting. </author> <title> A customized communication subsystem for FT-Linda. </title> <booktitle> In Proceedings of the 13th Brazilian Symposium on Computer Networks, </booktitle> <address> Belo Horizonte, MG, Brazil, </address> <month> May </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: The use of this approach for constructing a customized atomic multicast protocol for a version of the Linda coordination language with fault-tolerance extensions [2] is described in <ref> [17] </ref>. The prototype implementation described in this paper illustrates the feasibility of extending the x-kernel to support this two-level model of composition. In the prototype, messages arrive at a composite protocol and generate events that result in handlers in the appropriate micro-protocols being invoked to deal with the message.
Reference: [18] <author> G. Hamilton, M. Powell, and J. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> In Proceedings of the 14th ACM Symp. on Operating System Principles, </booktitle> <pages> pages 69-79, </pages> <address> Asheville, NC, </address> <month> Dec </month> <year> 1993. </year>
Reference-contexts: Among other things, this configurability makes the approach suitable for constructing adaptive systems, which alter their behavior based on changes in the environment [5, 14]. Our approach is also related to recent work in configurable operating systems <ref> [4, 18, 31] </ref>. In contrast with similar systems for constructing configurable protocols, our approach provides finer granularity and more flexible inter-object communication, which is especially useful for configuring closely-related service variants of the same general type of high-level protocol (e.g., variants of atomic multicast). <p> They also retain a single-level composition model, which we believe does not offer enough flexibility for high-level protocols. Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context <ref> [4, 18, 31] </ref>. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just network protocols.
Reference: [19] <author> M. Hiltunen and R. D. Schlichting. </author> <title> An approach to constructing modular fault-tolerant protocols. </title> <booktitle> In Proceedings of the 12th IEEE Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 105-114, </pages> <address> Princeton, NJ, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: It also encourages experimentation with different communication substrates for a given application. The topic of when and how micro-protocol variants can be configured into a system is addressed in <ref> [19, 21, 22] </ref> for different types of network services, including membership and group RPC. The use of this approach for constructing a customized atomic multicast protocol for a version of the Linda coordination language with fault-tolerance extensions [2] is described in [17].
Reference: [20] <author> M. Hiltunen and R. D. Schlichting. </author> <title> A model for adaptive fault-tolerant systems. </title> <editor> In K. Echtle, D. Hammer, and D. Pow-ell, editors, </editor> <booktitle> Dependable ComputingEDCC-1 (Proceedings of the 1st European Dependable Computing Conference), Lecture Notes in Computer Science, </booktitle> <volume> Vol. 852, </volume> <pages> pages 3-20. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference: [21] <author> M. Hiltunen and R. D. Schlichting. </author> <title> Constructing a configurable group RPC service. </title> <booktitle> In Proceedings of the 15th IEEE Conf. on Distr. Computing Syst., </booktitle> <address> Vancouver, BC, </address> <month> May </month> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Additional micro-protocols are currently being implemented, including other reply ordering policies, two different policies for handling orphan computations, and provisions for atomic execution of requests by the server. <ref> [21] </ref> elaborates further on various abstract properties of RPC and describes the different combinations that are possible using our micro-protocol approach. The second set of performance figures are from a null composite protocol designed to measure the event mechanism. <p> It also encourages experimentation with different communication substrates for a given application. The topic of when and how micro-protocol variants can be configured into a system is addressed in <ref> [19, 21, 22] </ref> for different types of network services, including membership and group RPC. The use of this approach for constructing a customized atomic multicast protocol for a version of the Linda coordination language with fault-tolerance extensions [2] is described in [17].
Reference: [22] <author> M. Hiltunen and R. D. Schlichting. </author> <title> Properties of membership services. </title> <booktitle> In Proceedings of the Second IEEE Symp. on Autonomous Decentralized Systems, </booktitle> <pages> pages 200-207, </pages> <address> Phoenix, AZ, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: It also encourages experimentation with different communication substrates for a given application. The topic of when and how micro-protocol variants can be configured into a system is addressed in <ref> [19, 21, 22] </ref> for different types of network services, including membership and group RPC. The use of this approach for constructing a customized atomic multicast protocol for a version of the Linda coordination language with fault-tolerance extensions [2] is described in [17].
Reference: [23] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: One option for addressing this problem is to implement the functionality as a collection of smaller protocol objects (a protocol suite) and then use a system like ADAPTIVE [37], Horus [38], or the x-kernel <ref> [23] </ref> to combine the objects into a network subsystem. Such systems allow the overall functionality to be separated into more manageable modules, thereby accruing advantages in the areas of incremental development, system customization, and code reuse.
Reference: [24] <author> R. Keller and W. Effelsberg. MCAM: </author> <title> An application layer protocol for Movie Control, Access, </title> <booktitle> and Management. In Computer Graphics (Multimedia '93 Proceedings), </booktitle> <pages> pages 21-30. </pages> <publisher> ACM, Addison-Wesley, </publisher> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications <ref> [24, 40] </ref>. All provide powerful abstractions that simplify the task of writing applications that must handle uncertainties involved with network communication, distributed synchronization, and processor crashes. Unfortunately, while such high-level protocols are useful, they embed complex functionality and are therefore difficult to design, debug, and modify.
Reference: [25] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 411-429. </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC [8, 9, 10], membership <ref> [11, 25, 28] </ref>, distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [26] <author> B. Lindgren, M. Ammar, B. Krupczak, and K. Schwan. </author> <title> Parallel and configurable protocols: Experiences with a prototype and an architectural framework. </title> <type> Technical Report GIT-CC-93/22, </type> <institution> College of Computing, Georgia Institute of Technology, Atlanta, Georgia, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Moreover, the type of protocol objects supported appear relatively coarse-grained when compared to our objectsmulticast rather than individual properties of multicast, for instanceand more oriented toward hierarchical composition and limited data sharing. Several other efforts have also concentrated on supporting parallel execution of modular protocols, including <ref> [15, 26] </ref>. While similar to our work in the sense of decomposing protocols along semantic lines, these efforts differ in their emphasis on using parallel execution to improve throughput and latency for high-performance scientific applications.
Reference: [27] <author> P. Melliar-Smith, L. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Trans. on Parallel and Distr. Syst., </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [6, 12, 27, 35] </ref>. Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [28] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A membership protocol based on partial order. </title> <editor> In J. F. Meyer and R. D. Schlichting, editors, </editor> <booktitle> Dependable Computing for Critical Applications 2, </booktitle> <pages> pages 309-331. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [6, 12, 27, 35]. Other high-level protocols of this type include group RPC [8, 9, 10], membership <ref> [11, 25, 28] </ref>, distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40].
Reference: [29] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed Systems Engineering, </journal> <volume> 1(3) </volume> <pages> 87-103, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: Experience suggests that these limitations increase the difficulty of implementing high-level protocols using these systems. For example, problems of this type have been encountered with the x-kernel, both in Consul, a protocol suite implementing atomic multicast <ref> [29, 35] </ref>, and xAMP, a real-time atomic multicast protocol [39]. In this paper, we describe a new x-kernel-based structuring approach that addresses these problems. <p> This can be important, for example, in an atomic multicast protocol that requires waiting for a collection of messages to arrive and then deterministically sorting the collection before presenting messages to higher levels <ref> [29, 35] </ref>. Second, a shared bag of messages allows multiple micro-protocols to access messages concurrently. This can be important, for example, in a situation where a message is acknowledged by one micro-protocol while concurrently being ordered relative to other messages by a second micro-protocol.
Reference: [30] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Experience with modularity in Consul. </title> <journal> Software Practice & Experience, </journal> <volume> 23(10) </volume> <pages> 1059-1075, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: For example, in designing and implementing Consul using the x-kernel, a number of inherent problems with the model were discovered <ref> [30] </ref>. These include the following: * Provisions for communicating between protocol objects on the same machine are insufficient to implement the necessary complex interactions. <p> As noted above, the need for such facilities has been directly motivated by earlier experience using the x-kernel to construct the type of high-level protocols that are the target of this research <ref> [30] </ref>. Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Other x-kernel related work has explored the use of finer-grain protocol objects [33], but the emphasis there is on syntactic decomposition of higher-level protocols within a hierarchical framework.
Reference: [31] <author> A. B. Montz, D. Mosberger, S. W. O'Malley, L. L. Pe-terson, T. A. Proebsting, and J. H. Hartman. </author> <title> Scout: A communications-oriented operating system. </title> <type> Technical Report 94-20, </type> <institution> Dept. of Comp. Sci., Univ. of Arizona, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Among other things, this configurability makes the approach suitable for constructing adaptive systems, which alter their behavior based on changes in the environment [5, 14]. Our approach is also related to recent work in configurable operating systems <ref> [4, 18, 31] </ref>. In contrast with similar systems for constructing configurable protocols, our approach provides finer granularity and more flexible inter-object communication, which is especially useful for configuring closely-related service variants of the same general type of high-level protocol (e.g., variants of atomic multicast). <p> Our intent is to port the system to the new Scout operating system <ref> [31] </ref>, which should yield more reliable estimates of the overhead of our approach. 5 Related Work A number of other papers have addressed areas related to this work. Several are in the area of fault-tolerance, where researchers have explored use of modularization or system customization. <p> They also retain a single-level composition model, which we believe does not offer enough flexibility for high-level protocols. Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context <ref> [4, 18, 31] </ref>. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just network protocols.
Reference: [32] <author> M. Olsen, E. Oskiewicz, and J. Warne. </author> <title> A model for interface groups. </title> <booktitle> In Proceedings of the 10th IEEE Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <address> Pisa, Italy, </address> <month> Sep </month> <year> 1991. </year>
Reference-contexts: Several are in the area of fault-tolerance, where researchers have explored use of modularization or system customization. Examples include the ANSA system <ref> [32] </ref> and the work on multicast reported in [16]. In contrast to these, our approach is more general and provides more flexibility for the protocol designer. Also in the area of fault-tolerance, [7] explores orthogonal properties of transactions.
Reference: [33] <author> S. W. O'Malley and L. L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: micro-protocol objects (or just micro-protocols) that implement individual semantic properties of the target system. 1 For example, with atomic multicast, one micro-protocol might implement the consistent ordering requirements, while another might implement reliable 1 Our use of the term micro-protocol should not be confused with the x-kernel micro-protocols described in <ref> [33] </ref>. The differences are explained more fully in section 5. transmission. Micro-protocols can also be used to imple-ment different semantic variants of the same property. <p> Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Other x-kernel related work has explored the use of finer-grain protocol objects <ref> [33] </ref>, but the emphasis there is on syntactic decomposition of higher-level protocols within a hierarchical framework. This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance.
Reference: [34] <author> F. Panzieri and S. K. Shrivastava. Rajdoot: </author> <title> A remote procedure call mechanism supporting orphan detection and killing. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> SE-14(1):30-37, </volume> <month> Jan </month> <year> 1988. </year>
Reference-contexts: Micro-protocols can also be used to imple-ment different semantic variants of the same property. For example, with RPC, there may be multiple micro-protocols implementing different policies for how the request is handled if the server fails, such as exactly once, at least once, or at most once semantics <ref> [34] </ref>. A system is then configured based on the particular properties needed for the given application. This micro-protocol approach is realized by augmenting the x-kernel's standard hierarchical object composition model with the ability to internally structure protocol objects.
Reference: [35] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [6, 12, 27, 35] </ref>. Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications [24, 40]. <p> Experience suggests that these limitations increase the difficulty of implementing high-level protocols using these systems. For example, problems of this type have been encountered with the x-kernel, both in Consul, a protocol suite implementing atomic multicast <ref> [29, 35] </ref>, and xAMP, a real-time atomic multicast protocol [39]. In this paper, we describe a new x-kernel-based structuring approach that addresses these problems. <p> This can be important, for example, in an atomic multicast protocol that requires waiting for a collection of messages to arrive and then deterministically sorting the collection before presenting messages to higher levels <ref> [29, 35] </ref>. Second, a shared bag of messages allows multiple micro-protocols to access messages concurrently. This can be important, for example, in a situation where a message is acknowledged by one micro-protocol while concurrently being ordered relative to other messages by a second micro-protocol.
Reference: [36] <author> D. M. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 311-324, </pages> <month> Oct. </month> <year> 1984. </year>
Reference-contexts: This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance. System V Streams <ref> [36] </ref> also supports modularization of protocols, but its model is also hierarchical and relatively coarse-grained. Horus [38] supports stack-line configurations of coarse-grained protocols. Somewhat closer to our work is the ADAPTIVE system [37], which is also designed to support flexible combinations of protocol objects.
Reference: [37] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Unfortunately, while such high-level protocols are useful, they embed complex functionality and are therefore difficult to design, debug, and modify. One option for addressing this problem is to implement the functionality as a collection of smaller protocol objects (a protocol suite) and then use a system like ADAPTIVE <ref> [37] </ref>, Horus [38], or the x-kernel [23] to combine the objects into a network subsystem. Such systems allow the overall functionality to be separated into more manageable modules, thereby accruing advantages in the areas of incremental development, system customization, and code reuse. <p> System V Streams [36] also supports modularization of protocols, but its model is also hierarchical and relatively coarse-grained. Horus [38] supports stack-line configurations of coarse-grained protocols. Somewhat closer to our work is the ADAPTIVE system <ref> [37] </ref>, which is also designed to support flexible combinations of protocol objects. The goal of the system is to support efficient construction of transport services with different quality-of-service (QoS) characteristics, especially for multimedia applications using high-performance networks.
Reference: [38] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and performance of Horus: A lightweight group communications system. </title> <type> Technical Report 94-1442, </type> <institution> Cornell University, Dept. of Computer Science, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: One option for addressing this problem is to implement the functionality as a collection of smaller protocol objects (a protocol suite) and then use a system like ADAPTIVE [37], Horus <ref> [38] </ref>, or the x-kernel [23] to combine the objects into a network subsystem. Such systems allow the overall functionality to be separated into more manageable modules, thereby accruing advantages in the areas of incremental development, system customization, and code reuse. <p> This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance. System V Streams [36] also supports modularization of protocols, but its model is also hierarchical and relatively coarse-grained. Horus <ref> [38] </ref> supports stack-line configurations of coarse-grained protocols. Somewhat closer to our work is the ADAPTIVE system [37], which is also designed to support flexible combinations of protocol objects.
Reference: [39] <author> P. Verissimo, L. Rodrigues, and M. Baptista. </author> <title> Amp: A highly parallel atomic multicast protocol. </title> <booktitle> In Proceedings of SIG-COMM'89, </booktitle> <pages> pages 83-93, </pages> <address> Austin, TX, </address> <month> Sep </month> <year> 1989. </year>
Reference-contexts: Experience suggests that these limitations increase the difficulty of implementing high-level protocols using these systems. For example, problems of this type have been encountered with the x-kernel, both in Consul, a protocol suite implementing atomic multicast [29, 35], and xAMP, a real-time atomic multicast protocol <ref> [39] </ref>. In this paper, we describe a new x-kernel-based structuring approach that addresses these problems.
Reference: [40] <author> R. Yavantkar. MCP: </author> <title> A protocol for coordination and temporal synchronization in multimedia collaborative applications. </title> <booktitle> In Proc. of the 12th IEEE Conf. on Distr. Computing Syst., </booktitle> <pages> page 606, </pages> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Other high-level protocols of this type include group RPC [8, 9, 10], membership [11, 25, 28], distributed transac fl This work supported in part by the Office of Naval Research under grant N00014-91-J-1015. tions [3], and protocols related to multimedia applications <ref> [24, 40] </ref>. All provide powerful abstractions that simplify the task of writing applications that must handle uncertainties involved with network communication, distributed synchronization, and processor crashes. Unfortunately, while such high-level protocols are useful, they embed complex functionality and are therefore difficult to design, debug, and modify.
References-found: 40

