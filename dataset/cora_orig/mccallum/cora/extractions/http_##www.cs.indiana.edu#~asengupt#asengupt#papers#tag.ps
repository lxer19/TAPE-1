URL: http://www.cs.indiana.edu/~asengupt/asengupt/papers/tag.ps
Refering-URL: http://www.cs.indiana.edu/~asengupt/
Root-URL: http://www.cs.indiana.edu
Email: asengupt@indiana.edu  
Title: Demand more from your SGML database! Bringing SQL under the SGML limelight  
Author: Arijit Sengupta 
Affiliation: Computer Science, Indiana University  
Abstract: Have you ever been frustrated by how inadequate SGML databases are in terms of searching or querying your documents? With the current state of the art, you will easily be able to search for a word, phrase, or keywords in the whole document. Some systems let you perform approximate searches or regular expression searches. Even fewer systems let you search for keywords or phrases in certain SGML regions. However, there is much more information already in SGML documents that one can utilize cleverly to design a proper SGML database system. The current trend of modeling SGML documents with object-oriented and object-relational databases has certainly brought SGML closer to a complex object database model, but much research and development remains to be done in this area. This article introduces the popular relational database query language SQL (Structured Query Language) and its applicability in the SGML domain.The capability of this query language to express complex queries with a not-so-complex syntax gives relational databases that support SQL an advantage over other similar systems. The ability to use SQL or an SQL-like query language with SGML has the potential of giving much more power to SGML repositories. This article shows how we can pose complex document-related questions easily with SQL. SQL-capable systems will let you solve problems that would otherwise seem impossible, or at least, tedious. 
Abstract-found: 1
Intro-found: 1
Reference: [AC75] <author> M. M. Astrahan and D. Chamberlin. </author> <title> Implementation of a structured english query language. </title> <journal> Communications of the ACM, </journal> <volume> 18(10), </volume> <month> October </month> <year> 1975. </year> <title> Also published in/as: </title> <booktitle> 19 ACM SIGMOD Conf. on the Management of Data, </booktitle> <address> King(ed), May.1975. </address>
Reference: [BDK92] <author> Francois Bancilhon, Calude Delobel, and Paris Kaneliakis. </author> <title> Building an object-oriented Database Dystem: </title> <publisher> The story of O 2 . Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: The main ideas behind these extensions are quite similar to the path expressions proposed by Christophides et. al. [CACS94]. Note that SQL has been adapted and used for object-oriented languages like the Reloop language for the object-oriented database O 2 <ref> [BDK92] </ref> and the new proposed SQL3 standard [SQL96] One problem with SQL used in the relational domain is that it is not a good "fulltext" query language.
Reference: [CACS94] <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl. </author> <title> From structured documents to novel query facilities. </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> 23(2) </volume> <pages> 313-324, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: These extensions are not theoretically complete, but still they show how the core SQL with a few simple extensions can give great power to the query language. The main ideas behind these extensions are quite similar to the path expressions proposed by Christophides et. al. <ref> [CACS94] </ref>. Note that SQL has been adapted and used for object-oriented languages like the Reloop language for the object-oriented database O 2 [BDK92] and the new proposed SQL3 standard [SQL96] One problem with SQL used in the relational domain is that it is not a good "fulltext" query language.
Reference: [EN89] <author> Ramez Elmasri and Shamkant B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <address> Ben-jamin/Cummins, </address> <year> 1989. </year>
Reference-contexts: One-to-one and one-to-many relationships can be mapped into their participating entities. Entities have attributes or properties, that get mapped to corresponding fields in the tables. Multivalued attributes (e.g., a book can have multiple volumes) are separately mapped into tables. (See <ref> [EN89] </ref> for more information on this modeling approach.) Because of the way a conceptual database scenario is fragmented into multiple tables, these subdivided tables need to be rejoined as necessary during query processing.
Reference: [Hol95] <author> Sebastian Holst. </author> <title> Database evolution: the view from over here (a document-centric perspective). </title> <editor> In Yuri Rubinsky, editor, </editor> <booktitle> Proceedings, SGML '95. Graphic Communications Association, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Note that some of the high-end systems based on object-oriented and object-relational databases (such as Texcel Information Manager <ref> [Hol95] </ref>) do claim to have SQL capabilities, and chances are, in the future most of the SGML systems will implement SQL. The following are the broad categories of queries that we consider here: 1.
Reference: [MS92] <author> Jim Melton and Alan R. Simon. </author> <title> Understanding the New SQL: A Complete Guide. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: The original standard was superseded by an improved version [SQL89]. Because of some programming 1limitations to this standard, a later standard <ref> [SQL92, MS92] </ref> also known as SQL2 was published. With the advent of the object-oriented and object-relational technologies, SQL users are about to see another major transformation in the form of SQL3 [SQL96], which is still in the works. <p> In fact the original version of this language, which was developed in IBM's San Jose Research Laboratory was called SEQUEL (Structured English Query Language)[AC75]. The SQL language derives most of its syntax and semantics from this language, and is also sometimes (erroneously) pronounced as "sequel" <ref> [MS92] </ref>. The original SQL consisted of a core set of operations which could all be performed in polynomial time. This, although seemingly restrictive, was a great advantage for the language because of its tractable nature.
Reference: [SD96] <author> Arijit Sengupta and Andrew Dillon. </author> <title> Extending sgml to accommodate database functions: A methodological overview. </title> <note> Communicated for publication at the JASIS special Issue on structured content, </note> <month> January </month> <year> 1996. </year>
Reference-contexts: The three primary extensions that we proposed in an earlier work <ref> [SD96] </ref> are cascading of the dot ("." or membership) operator, use of the double-dot (".." or descendant) operator, and the ability to specify a form of a DTD in the SELECT clause to build or break complex types.
Reference: [SQL86] <author> ANSI X3.135-1986, </author> <title> Database Language SQL, </title> <year> 1986. </year>
Reference-contexts: 1 Introduction SQL (Structured Query Language) <ref> [SQL86, SQL89, SQL92] </ref> is the most widely accepted language for relational databases. It is also gaining popularity as a query language for Object-Oriented (OO) and Object-Relational (OR) databases, and currently most database systems implement some variant of SQL to formulate queries. However, SQL's capability is not limited only to queries. <p> In this paper, we give a short introduction to SQL in its various flavors and show how we can use the power of SQL to perform complex searches on SGML documents. 1.1 SQL the standard Although the original SQL standard dates back to 1986 <ref> [SQL86] </ref>, the language is still evolving with the advances in database theory and practice. The original standard was superseded by an improved version [SQL89]. Because of some programming 1limitations to this standard, a later standard [SQL92, MS92] also known as SQL2 was published.
Reference: [SQL89] <author> ANSI X3.135-1989, </author> <title> Database Language SQL, </title> <year> 1989. </year>
Reference-contexts: 1 Introduction SQL (Structured Query Language) <ref> [SQL86, SQL89, SQL92] </ref> is the most widely accepted language for relational databases. It is also gaining popularity as a query language for Object-Oriented (OO) and Object-Relational (OR) databases, and currently most database systems implement some variant of SQL to formulate queries. However, SQL's capability is not limited only to queries. <p> The original standard was superseded by an improved version <ref> [SQL89] </ref>. Because of some programming 1limitations to this standard, a later standard [SQL92, MS92] also known as SQL2 was published. With the advent of the object-oriented and object-relational technologies, SQL users are about to see another major transformation in the form of SQL3 [SQL96], which is still in the works.
Reference: [SQL92] <author> ANSI X3.135-1992, </author> <title> Database Language SQL. </title> <note> Also ISO/IEC 9075:1992, </note> <year> 1992. </year>
Reference-contexts: 1 Introduction SQL (Structured Query Language) <ref> [SQL86, SQL89, SQL92] </ref> is the most widely accepted language for relational databases. It is also gaining popularity as a query language for Object-Oriented (OO) and Object-Relational (OR) databases, and currently most database systems implement some variant of SQL to formulate queries. However, SQL's capability is not limited only to queries. <p> The original standard was superseded by an improved version [SQL89]. Because of some programming 1limitations to this standard, a later standard <ref> [SQL92, MS92] </ref> also known as SQL2 was published. With the advent of the object-oriented and object-relational technologies, SQL users are about to see another major transformation in the form of SQL3 [SQL96], which is still in the works.
Reference: [SQL96] <author> ANSI X3H2 standards group. </author> <title> Proposed standard for Object Oriented Database Language SQL3, </title> <year> 1996. </year>
Reference-contexts: Because of some programming 1limitations to this standard, a later standard [SQL92, MS92] also known as SQL2 was published. With the advent of the object-oriented and object-relational technologies, SQL users are about to see another major transformation in the form of SQL3 <ref> [SQL96] </ref>, which is still in the works. <p> This, although seemingly restrictive, was a great advantage for the language because of its tractable nature. Complex queries that go beyond the polynomial complexity could be performed by embedding SQL queries in a common programming language. The proposed SQL3 standard <ref> [SQL96] </ref>, has essentially turned SQL into a complete object-oriented programming language by. Although SQL stands for "Structured Query Language", its use is not restricted to only queries. <p> The main ideas behind these extensions are quite similar to the path expressions proposed by Christophides et. al. [CACS94]. Note that SQL has been adapted and used for object-oriented languages like the Reloop language for the object-oriented database O 2 [BDK92] and the new proposed SQL3 standard <ref> [SQL96] </ref> One problem with SQL used in the relational domain is that it is not a good "fulltext" query language. This means it can not solve queries involving just strings possibly encoded in a regular expression (e.g, "what is known about John in the books database?").
References-found: 11

