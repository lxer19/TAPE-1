URL: http://www.cs.colostate.edu/~ftppub/TechReports/1996/tr96-123.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Email: mrice@uts.cs.wesleyan.edu seidman@cs.colostate.edu  
Phone: Phone: (970) 491-5862 Fax: (970) 491-2466  
Title: a Top-Down Architectural Style: the PARSE Process Graph Notation  
Author: Michael D. Rice Stephen B. Seidman 
Web: WWW: http://www.cs.colostate.edu  
Address: Fort Collins, CO 80523-1873  
Date: September 17, 1996  
Affiliation: Computer Science Group Department of Computer Science Mathematics Department Colorado State University Wesleyan University  Department of Computer Science Colorado State University  
Note: Describing  
Pubnum: Technical Report CS-96-123  
Abstract: Computer Science Colorado Technical Report State University 
Abstract-found: 1
Intro-found: 1
Reference: [AAG] <author> G. Abowd, R. Allan, and D. Garlan, </author> <title> Using style to understand descriptions of software architecture, </title> <booktitle> Proceedings of ACM SIGSOFT93 Symposium on Foundations of Software Engineering, </booktitle> <pages> pp. 9-20, </pages> <year> 1993. </year>
Reference-contexts: Recently, David Garlan and his associates have suggested that software architectures can be classified as belonging to distinct architectural styles <ref> [AAG] </ref>, and that it might be far more efficient to study these styles. The study of software architectural styles is still in its infancy.
Reference: [CG] <author> T. S. Chan and I. Gorton, </author> <title> A Transputer-based implementation of HTPNET: a transport protocol for broadband networks, </title> <booktitle> in Transputer Applications and Systems, </booktitle> <volume> vol. 2, </volume> <booktitle> Proceedings of the 1993 World Transputer Conference, </booktitle> <pages> pp. 899-910. </pages>
Reference-contexts: The following example will illustrate some of the features of PARSE; it is a simplified version of an example appearing in [GJGC]. Figure 1 illustrates a PARSE description of the high-level design of a system that implements the packet management component of a new transport protocol for broadband networks <ref> [CG] </ref>. ack data synk synk data ack Receive Transmit Network In Figure 1, ovals represent function servers (Network), and rectangles with rounded corners represent control processes (Transmit, Receive). Communication is indicated by directed arrows; a box on an arrow indicates that the communication is asynchronous.
Reference: [G1] <author> J. P. Gray, </author> <title> Definition of the PARSE process graph notation, </title> <type> version 2, Technical Report PARSE-TR-2b, </type> <institution> Department of Computer Science, University of Wollongong, </institution> <year> 1994. </year>
Reference-contexts: In this paper, we will show that PARSE can be regarded as an architectural style that can be modeled naturally by ASDL. 2 2. The PARSE architectural style Architectures developed within PARSE are represented graphically as diagrams constructed according to the rules of the PARSE Process Graph Notation (PGN) <ref> [G1] </ref>. We will use ASDL to represent the entities and rules of PGN, and thus to model the PARSE methodology. A PARSE architecture is constructed from communication entities and processing entities. <p> to be communicated to or from the exterior of a process; the three arrows terminated with circles correspond to the three external communications with the Receive process shown in 3 RecHostDataProc SynkProc Status Data RecData Ack Synk Both the graphical syntax and the semantics of PGN are described informally in <ref> [G1] </ref>. The PARSE literature contains neither a formal description of the syntax nor a way to describe the semantics of a system modeled in PARSE (although [RSJC] shows how PARSE processes can be translated into Petri nets). <p> In the latter case, the constructor type nil is used. PARSE_Library_Constraints is the conjunction of thirteen individual constraints, listed and annotated below. Each constraint corresponds to one or more features of PARSE or PGN, and references are given to the PGN rules of <ref> [G1] </ref>. A listing of the rules is given in Appendix A. (1) disjoint path-constructors The path constructors are disjoint sets of ports ([G1], p. 12). (2) path-constructors = dom port-attr Each port of a template corresponding to a PARSE process object belongs to a path constructor. In [G1], path constructors are <p> PGN rules of <ref> [G1] </ref>. A listing of the rules is given in Appendix A. (1) disjoint path-constructors The path constructors are disjoint sets of ports ([G1], p. 12). (2) path-constructors = dom port-attr Each port of a template corresponding to a PARSE process object belongs to a path constructor. In [G1], path constructors are only used to link multiple input ports. Since we constrain output ports to belong to singleton path constructors (see (8), (9) below), our model is consistent with PGN. (3) dom constructor-names = path-constructors All path constructors are named. ([G1], PA-07) (4) dom class-names Collection All primitive templates <p> = external_interface fi port-attr (p).constr-type = nil 6 Ports of templates representing external interface process objects must belong to trivial (singleton) path constructors. ([G1], PA-01) (8) " p dom port-attr (port-attr (p).dir = out fi port-attr (p).constr-type = nil) Output ports of templates must belong to trivial (singleton) path constructors. <ref> [G1, PA-02] </ref> (9) " p dom port-attr port-attr (p).constr-type nil $ a path-constructors p a #a &gt; 1 Nontrivial path constructors include more than one port. ([G1], PA-02) (10) " p dom port-attr port-attr (p).constr-type = concurrent fi p interfaces (Collection " Primitives) A port of a primitive template cannot belong <p> Each constraint corresponds to one or more features of PARSE or PGN, and explanations of the correspondence are given in boldface, with cross-references to <ref> [G1] </ref>. comp-expr uses CSP channels to describe communication between ports corresponding to (input, output) slot pairs that share a common label. These channels will be designated by the labels to which they correspond.
Reference: [G2] <author> D. Garlan, </author> <title> What is style, </title> <booktitle> Proceedings of First International Workshop on Architectures for Software Systems, </booktitle> <year> 1995. </year>
Reference-contexts: The study of software architectural styles is still in its infancy. The first papers from Garlans group dealt with only a few rather general styles: the pipes and filters commonly used in Unix; the clientserver style; and an object-oriented style ([SG], <ref> [G2] </ref>, [GAO]). While all three styles are familiar and widely used, they are all rather general, and none can really be regarded as an industrialstrength style. We have developed a formalism (ASDL) for describing architectural styles, and we have applied it to model the Processing Graph Method (PGM) style [RS3].
Reference: [GAO] <author> D. Garlan, R. Allen, and J. Ockerbloom, </author> <title> Exploiting style in architectural design environments, </title> <booktitle> Proceedings of ACM SIGSOFT94 Symposium on Foundations of Software Engineering, </booktitle> <year> 1994. </year> <month> 18 </month>
Reference-contexts: The study of software architectural styles is still in its infancy. The first papers from Garlans group dealt with only a few rather general styles: the pipes and filters commonly used in Unix; the clientserver style; and an object-oriented style ([SG], [G2], <ref> [GAO] </ref>). While all three styles are familiar and widely used, they are all rather general, and none can really be regarded as an industrialstrength style. We have developed a formalism (ASDL) for describing architectural styles, and we have applied it to model the Processing Graph Method (PGM) style [RS3].
Reference: [GGJ] <author> J. P. Gray, I. Gorton, and I. E. Jelly, </author> <title> Designing parallel database programs using PARSE, </title> <booktitle> Proceedings of 17th International Software and Applications Conference, Phoenix, </booktitle> <year> 1993. </year>
Reference-contexts: The Parallel Software Engineering (PARSE) [GJGC] methodology was developed to support the top-down design and implementation of parallel and distributed software architectures. PARSE has been used to describe a parallel logic language runtime support system [JGG], a parallel database engine <ref> [GGJ] </ref>, a parallel transport protocol for high speed networks [GJGC], and a real time embedded control system [LSG]. In this paper, we will show that PARSE can be regarded as an architectural style that can be modeled naturally by ASDL. 2 2.
Reference: [GJGC] <author> I. Gorton, I. E. Jelly, J. P. Gray, and T. S. Chan, </author> <title> Reliable parallel software construction using PARSE, </title> <journal> Concurrency: Practice and Experience, </journal> <year> 1995. </year>
Reference-contexts: The expressiveness of ASDL will be demonstrated here by showing that it can also be used to describe a top-down architectural style. The Parallel Software Engineering (PARSE) <ref> [GJGC] </ref> methodology was developed to support the top-down design and implementation of parallel and distributed software architectures. PARSE has been used to describe a parallel logic language runtime support system [JGG], a parallel database engine [GGJ], a parallel transport protocol for high speed networks [GJGC], and a real time embedded control <p> The Parallel Software Engineering (PARSE) <ref> [GJGC] </ref> methodology was developed to support the top-down design and implementation of parallel and distributed software architectures. PARSE has been used to describe a parallel logic language runtime support system [JGG], a parallel database engine [GGJ], a parallel transport protocol for high speed networks [GJGC], and a real time embedded control system [LSG]. In this paper, we will show that PARSE can be regarded as an architectural style that can be modeled naturally by ASDL. 2 2. <p> Paths are attached to object instances at ports. The ports of an object form part of the object's class definition. The following example will illustrate some of the features of PARSE; it is a simplified version of an example appearing in <ref> [GJGC] </ref>.
Reference: [H] <author> C. A. R. Hoare, </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year>
Reference-contexts: The attribute values are assigned to ports by the mapping port-attr. Templates are also assigned to applicationspecific categories by the mapping part, and interp provides semantic interpretations for the templates that are used to construct a specific architecture. The semantic interpretations are members of a set Interpretations of CSP <ref> [H] </ref> process expressions. See [RS2] for a formal definition of this set. Some templates are identified as primitive templates; these correspond to software system components that have been preloaded into the library. The members of Collection " Primitives are templates that correspond to encapsulated composite modules. <p> belonging to nontrivial path constructors are indicated by underlines. g e SynkProc a q DataProc h RecHost The path constructors consist of the sets a, b-, -g-, -d-, -e-, -h-, and -q-; the port-attr mapping is defined by the following table: 1 The symbols || and * are taken from <ref> [H] </ref>. If P is a set of processes, || P denotes the concurrent execution of the members of P. <p> Grouped-slot-process (a) = Operator (slot-attr (s).constr-type) -Labeled-slot-process (s) | label (s) = a - where Operator is a function from Constructor_Types to CSP constructors defined by the ordered pairs -(concurrent, ||), (deterministic, ), (nondeterministic, ), (nil, NIL)-2 . 2 The operator symbols and are taken from <ref> [H] </ref>.
Reference: [JGG] <author> I. E. Jelly, I. Gorton, and J. P. Gray, </author> <title> A hybrid transputer based architecture for parallel logic language execution, </title> <booktitle> Proceedings of Transputer Applications and Systems 93, </booktitle> <pages> pp. 950-964. </pages>
Reference-contexts: The Parallel Software Engineering (PARSE) [GJGC] methodology was developed to support the top-down design and implementation of parallel and distributed software architectures. PARSE has been used to describe a parallel logic language runtime support system <ref> [JGG] </ref>, a parallel database engine [GGJ], a parallel transport protocol for high speed networks [GJGC], and a real time embedded control system [LSG]. In this paper, we will show that PARSE can be regarded as an architectural style that can be modeled naturally by ASDL. 2 2.
Reference: [KS] <author> D. Kaplan and R. Stevens, </author> <title> Processing graph method 2.0 semantics, </title> <type> manuscript, </type> <institution> Naval Research Laboratory, </institution> <month> June, </month> <year> 1995. </year>
Reference-contexts: While all three styles are familiar and widely used, they are all rather general, and none can really be regarded as an industrialstrength style. We have developed a formalism (ASDL) for describing architectural styles, and we have applied it to model the Processing Graph Method (PGM) style [RS3]. PGM <ref> [KS] </ref> is a coarse-grained dataflow style developed at the U.S. Naval Research Laboratory to support designing signal processing architectures.
Reference: [LSG] <author> A. Y. Liu, T. S. Chan, and I. Gorton, </author> <title> Designing distributed multimedia systems using PARSE, </title> <booktitle> Proceedings of the IFIP Workshop on Parallel and Distributed Software Engineering, </booktitle> <address> Berlin, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: PARSE has been used to describe a parallel logic language runtime support system [JGG], a parallel database engine [GGJ], a parallel transport protocol for high speed networks [GJGC], and a real time embedded control system <ref> [LSG] </ref>. In this paper, we will show that PARSE can be regarded as an architectural style that can be modeled naturally by ASDL. 2 2.
Reference: [RS1] <author> M. Rice and S. Seidman, </author> <title> A formal model for module interconnection languages, </title> <journal> IEEE Transactions on Software Engineering 20 (1994), </journal> <pages> 88-101. </pages>
Reference-contexts: In this paper, we will show how the ASDL formalism can be used both to represent PGN syntax and to assign semantic interpretations to PARSE models. 3. Modeling P A R S E in A S D L ASDL is a generalization of the formalism that was used in <ref> [RS1] </ref> to describe module interconnection languages (MILs). Such languages express the structure of a software system in terms of constraints imposed on the systems modules and module interfaces. In the MIL formalism, Z schemas were used to describe these constraints.
Reference: [RS2] <author> M. Rice and S. Seidman, </author> <title> Using Z as a Substrate for an Architectural Style Description Language, </title> <type> Technical Report CS-96-120, </type> <institution> Department of Computer Science, Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: Templates are also assigned to applicationspecific categories by the mapping part, and interp provides semantic interpretations for the templates that are used to construct a specific architecture. The semantic interpretations are members of a set Interpretations of CSP [H] process expressions. See <ref> [RS2] </ref> for a formal definition of this set. Some templates are identified as primitive templates; these correspond to software system components that have been preloaded into the library. The members of Collection " Primitives are templates that correspond to encapsulated composite modules. <p> For example, the Create_Node operation instantiates a node from a library template, and the Assign_Label operation assigns a label to an unlabeled slot. Schemas defining these operations are found in <ref> [RS2] </ref>. The semantic module type also contains a composition expression that specifies how the nodes in a setting are composed for execution purposes and a semantic description mapping that assigns a semantic abbreviation to each label used in a module. <p> A composition expression is a restricted type of timed CSP process, in which node names are viewed as processes. For example, the expression may specify that the nodes in a setting will be executed in parallel. The sets ProcessExpressions and SemanticDescriptions are described in <ref> [RS2] </ref>. The execution semantics of an ASDL module are derived from the semantic interpretations of the templates underlying the nodes, the composition expression, and the semantic abbreviations associated with the labels that specify the connections between nodes. ASDL_Setting therefore contains all of the information needed to execute the module. <p> A top-down model of a system can be constructed in this way The Connect_Virtual_Port operation can then be used to refine the top-down model by filling in the internal structure of the nodes instantiated from the empty units. Schemas describing these operations can be found in <ref> [RS2] </ref>. Example : These concepts can be illustrated with the transport protocol example shown in Figure 1. A top-down model of this system initializes Units to Transmit, Network, Receive. <p> The constraint also requires that instance names be distinct from class names. ([G1], p. 4) 4. Conclusions Developing an ASDL model for PARSE serves several purposes. First, it provides further evidence for the claim made in <ref> [RS2] </ref> that ASDL is a general language for describing software architectural styles. In addition, the models ability to represent the complex interface semantics supported by PARSE demonstrates the expressiveness of ASDLs process expressions. Even more importantly, the model provides a valuable platform for posing questions about PARSE and PGN.
Reference: [RS3] <author> M. Rice and S. Seidman, </author> <title> Describing the PGM architectural style, </title> <type> Technical Report CS-96-123, </type> <institution> Department of Computer Science, Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: While all three styles are familiar and widely used, they are all rather general, and none can really be regarded as an industrialstrength style. We have developed a formalism (ASDL) for describing architectural styles, and we have applied it to model the Processing Graph Method (PGM) style <ref> [RS3] </ref>. PGM [KS] is a coarse-grained dataflow style developed at the U.S. Naval Research Laboratory to support designing signal processing architectures.
Reference: [RSJC] <author> S. Russo, C. Savy, I. Jelly, and P. Collingwood, </author> <title> Petri net modelling of PARSE designs, </title> <booktitle> Proceedings of EuroPar 96, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The PARSE literature contains neither a formal description of the syntax nor a way to describe the semantics of a system modeled in PARSE (although <ref> [RSJC] </ref> shows how PARSE processes can be translated into Petri nets). In this paper, we will show how the ASDL formalism can be used both to represent PGN syntax and to assign semantic interpretations to PARSE models. 3.
Reference: [SG] <author> M. Shaw and D. Garlan, </author> <title> Software Architecture: An Emerging Discipline, </title> <publisher> Prentice-Hall, </publisher> <address> Upper Saddle River, NJ, </address> <year> 1996. </year> <month> 19 </month>
Reference-contexts: Recently, many researchers have suggested that abstractions are needed that can support consideration of both syntax and semantics of large-scale software systems. These abstractions have come to be called software architectures <ref> [SG] </ref>. This insight has proved to be helpful, but the large variety of software architectures that have been described has tended to make it difficult to draw widely applicable conclusions about the structure of large software systems.
References-found: 16

