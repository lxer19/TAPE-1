URL: http://mnemosyne.itc.it:1024/ricci/papers/rev2-ictai96.ps.Z
Refering-URL: http://mnemosyne.itc.it:1024/ricci/conference-papers-list.html
Root-URL: 
Email: gerevini@bsing.ing.unibs.it  perini@irst.itc.it  ricci@irst.itc.it  
Title: Incremental Algorithms for Managing Temporal Constraints  
Author: Alfonso Gerevini Anna Perini Francesco Ricci 
Address: via Branze 38 25123 Brescia, Italy  38050 Povo Trento, Italy  38050 Povo Trento, Italy  
Affiliation: DEA University of Brescia  IRST  IRST  
Abstract: This paper addresses the problem of efficiently updating a network of temporal constraints when constraints are removed from or added to an existing network. Such processing tasks are important in many AI applications requiring a temporal reasoning module. First we analyze the relationship between shortest-paths algorithms for directed graphs and arc-consistency techniques. Then we focus on a subclass of STP for which we propose new fast incremental algorithms for consistency checking and for maintaining the feasible times of the temporal variables. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. F. Allen. </author> <title> Mantaining knowledge about temporal intervals. </title> <journal> Comm. of ACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: a temporal interval; 3. deadline constraints of the form x i &lt; d, where d is a real number expressing a certain "date"; 4. assertions of qualitative relations in the Convex Simple Interval Algebra [13]; 5. assertions of basic qualitative relations in Al-len's Interval Algebra extended with positive lag times <ref> [1] </ref>. Before addressing the dynamic management of STP -constraints we need to give some basic background and to introduce a few useful concepts.
Reference: [2] <author> C. E. Bell and A. Tate. </author> <title> Use and justification of al gorithms for managing temporal knowledge in o-plan. Tec. </title> <type> Rep. </type> <institution> AIAI-TR-6, Edinburgh, U.K., </institution> <year> 1985. </year>
Reference-contexts: In many AI applications these are "on-line" tasks prompted by the addition (or deletion) of constraints to (from) an existing data base of constraints which is managed by a specialized reasoning module <ref> [2, 3] </ref>. The work of this paper is based on the STP framework for metric temporal reasoning that was introduced in [6] as a class of binary constraints involving real valued time-point variables.
Reference: [3] <author> R. Cervoni, A. Cesta, and A. Oddi. </author> <title> Managing dy namic temporal constraint networks. </title> <editor> In K. Hammond, editor, </editor> <booktitle> Proc. of the 2nd Int. Conf. on Artificial Intel ligence Planning Systems, </booktitle> <pages> 196-201, </pages> <year> 1994. </year>
Reference-contexts: In many AI applications these are "on-line" tasks prompted by the addition (or deletion) of constraints to (from) an existing data base of constraints which is managed by a specialized reasoning module <ref> [2, 3] </ref>. The work of this paper is based on the STP framework for metric temporal reasoning that was introduced in [6] as a class of binary constraints involving real valued time-point variables.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> In troduction to algorithms. </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Therefore, consistency checking and computing the feasible times can be achieved by using a single-source shortest-paths algorithm such as the algorithm by Bellman and Ford (BF) [8]. Furthermore, if the graph is acyclic then a more efficient shortest-paths algorithms specialized for DAGs can be used <ref> [4] </ref>. The BF algorithm can be considered a particular arc-consistency algorithm that does not suffer the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. This problem consists in the possibility of generating an arbitrary long succession of edge revisions [5, 10]. <p> E [ E t 3 do Refine (u; v) 4 for each edge (u; v) 2 E [ E t 5 do if Refine (u; v) 6 then return FALSE 7 return TRUE we can compute a shortest-paths tree (s-p tree) T of G, rooted at a source vertex s <ref> [4] </ref>. We shall indicate with (x) and with d (x) the predecessor of x in T and the s-p distance from s to x in G respectively. <p> Note that the vertices of ^ X forms a "strongly connected component" (SCC) of G <ref> [4] </ref>. <p> Remark. If G is the distance graph of a consistent STP network, then Lemma 1 has a very useful consequence. In fact, since G fl is acyclic, its shortest paths can be computed by using a shortest-paths algorithm for DAGs such as DAG-Shortest-Paths given in <ref> [4, page 536] </ref>. DAG-Shortest-Paths takes O (jEj) time and space, and thus it is more efficient than the BF al-gorithm requiring O (jV jjEj) time. Moreover, we shall see how Dag-Shortest-Paths can be modified to efficiently support incremental assertions and retraction of temporal constraints. <p> If w (x; y) = W (X; Y ) and (x; y) was the only edge in e (X; Y ) with weight w (x; y), then we update the s-p tree and the s-p distances of G fl by running Increase, which applies the Relax procedure of DAG-Shortest-Paths <ref> [4, page 520] </ref> to a minimal set of edges. 1 Let us now suppose that Y = X, that is we have to remove from G an edge connecting two vertices "collapsed" into the same metavertex. <p> This is accomplished by the procedure called Recompute-Cycles which is based on two depth-first searches on G X and G t X <ref> [4, page 489] </ref>. 1 The rest of Delete updates the topological order of the vertices of G fl and the s-p tree. 2 3.2 Adding an Edge theorem states the correctness of Add.
Reference: [5] <author> E. Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 281-331, </pages> <year> 1987. </year>
Reference-contexts: The BF algorithm can be considered a particular arc-consistency algorithm that does not suffer the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. This problem consists in the possibility of generating an arbitrary long succession of edge revisions <ref> [5, 10] </ref>. In particular, we can state the following theorem (AC-BF (T ) is shown in Figure 1). Theorem 1 Let T = (V; C) be a simple temporal constraint network, AC-BF (T ) enforces arc-consistency on T in O (jV jjCj) time. <p> Moreover, T is consistent iff AC-BF (T ) returns TRUE, and if T is consistent then AC-BF (T ) computes the earliest time and the latest time for each variable in V . The procedure "Refine (u; v)" in AC-BF (T ), used by traditional arc-consistency algorithms <ref> [5, 10] </ref>, eliminates from the current domain of u those values that are not compatible with the current domain of v according to the constraints between u and v of T . Remark.
Reference: [6] <author> R. Dechter, I. Meiri, and J. Pearl. </author> <title> Temporal constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 49, </volume> <year> 1991. </year>
Reference-contexts: The work of this paper is based on the STP framework for metric temporal reasoning that was introduced in <ref> [6] </ref> as a class of binary constraints involving real valued time-point variables. <p> approach [8]. 2 Arc-consistency and Graph Algo rithms for STP An STP network T = (V; C) represents a set of constraints C of the form y x 2 I, where x and y are point-variables in a set V , and I is an interval in the time domain <ref> [6] </ref>. STP networks are decomposable [6], and both consistency checking and computing the "minimal network" representation can be performed in O (n 3 ) time [6, 12]. In [6] it is shown that checking the consistency of a STP network leads to dealing with a shortest-paths problem for a directed graph. <p> Graph Algo rithms for STP An STP network T = (V; C) represents a set of constraints C of the form y x 2 I, where x and y are point-variables in a set V , and I is an interval in the time domain <ref> [6] </ref>. STP networks are decomposable [6], and both consistency checking and computing the "minimal network" representation can be performed in O (n 3 ) time [6, 12]. In [6] it is shown that checking the consistency of a STP network leads to dealing with a shortest-paths problem for a directed graph. <p> STP networks are decomposable [6], and both consistency checking and computing the "minimal network" representation can be performed in O (n 3 ) time <ref> [6, 12] </ref>. In [6] it is shown that checking the consistency of a STP network leads to dealing with a shortest-paths problem for a directed graph. <p> 2 I, where x and y are point-variables in a set V , and I is an interval in the time domain <ref> [6] </ref>. STP networks are decomposable [6], and both consistency checking and computing the "minimal network" representation can be performed in O (n 3 ) time [6, 12]. In [6] it is shown that checking the consistency of a STP network leads to dealing with a shortest-paths problem for a directed graph. <p> The distance graph G = (V; E) associated with a STP network T is a directed weighted graph having the same vertices as T , and a pair of edges (x; y) and (y; x) labeled a and b respectively, for each constraint y x 2 [a; b] in C <ref> [6] </ref>.
Reference: [7] <author> B. Faltings. </author> <title> Arc-consistency for continuous variables. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 363-376, </pages> <year> 1994. </year>
Reference-contexts: Moreover, Theorem 1 extends the application of Faltings' arc-consistency algorithms for tree-structured constraint networks with continuous labels <ref> [7] </ref>. 3 Incremental Algorithms for STP We now introduce a subclass of STP, called STP , consisting of the STP-constraints of the form x j x i a, where a 0.
Reference: [8] <author> A. Gerevini, A. Perini, and F. Ricci. </author> <title> Incremental algo rithms for managing temporal constraints. Tec. </title> <type> Rep. </type> <institution> IRST-9605-07, IRST, </institution> <year> 1996. </year>
Reference-contexts: In an extended version of this paper the interested reader can find a complete description of the algorithms presented, together with some experimental results illustrating the efficiency of our approach <ref> [8] </ref>. 2 Arc-consistency and Graph Algo rithms for STP An STP network T = (V; C) represents a set of constraints C of the form y x 2 I, where x and y are point-variables in a set V , and I is an interval in the time domain [6]. <p> Therefore, consistency checking and computing the feasible times can be achieved by using a single-source shortest-paths algorithm such as the algorithm by Bellman and Ford (BF) <ref> [8] </ref>. Furthermore, if the graph is acyclic then a more efficient shortest-paths algorithms specialized for DAGs can be used [4]. The BF algorithm can be considered a particular arc-consistency algorithm that does not suffer the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. <p> The interested reader is referred to <ref> [8] </ref> for a detailed description. <p> Add-Oriented ((x; y); w; G fl ) is an incremental shortest-paths algorithm for DAGs, where only the edges leaving from a metavertex X, such that d (X) has been updated, need to be relaxed, and where the t.o. of the vertices is exploited to enhance efficiency <ref> [8] </ref>. Conversely, if in the current t.o. X i is after X j , then the new edge violates it. <p> This is attained by the algorithm Update-TO ((X i ; X j ); w; G fl ) <ref> [8] </ref> which generalizes an incremental algorithm proposed in [11] for DAGs where edges have no weights. 1 The last part of Add runs Add-Oriented (([x]; [y]); w; G fl ) to update and d. 2 4 Conclusion We have proposed a collection of techniques aimed to serve as a base for <p> Our method is based on shortest-paths techniques for directed graphs and on a distance metagraph whose vertices are incrementally maintained topologically ordered. An experimental comparison of the proposed algorithms with the (non-incremental) BF algorithm showed that drastic CPU-time reductions can be obtained <ref> [8] </ref>. 2
Reference: [9] <author> P. V. Hentenryck, Y. Deville, and C.-M. Teng. </author> <title> A generic arc-consistency algorithm and its specializa tions. </title> <journal> Artificial Intelligence, </journal> <volume> 57, </volume> <year> 1992. </year>
Reference-contexts: Remark. Theorem 1 shows that enforcing arc-consistency is an efficient procedure for deciding consistency of an STP, extending to continuous-domain variables a result by Van Hentenryck et al. <ref> [9] </ref> given for a similar set of constraints on discrete-domain variables.
Reference: [10] <author> A. K. Mackworth. </author> <title> Consistency in network of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: The BF algorithm can be considered a particular arc-consistency algorithm that does not suffer the termination problem, which may affect known algorithms for enforcing arc-consistency in continuous domains CSP. This problem consists in the possibility of generating an arbitrary long succession of edge revisions <ref> [5, 10] </ref>. In particular, we can state the following theorem (AC-BF (T ) is shown in Figure 1). Theorem 1 Let T = (V; C) be a simple temporal constraint network, AC-BF (T ) enforces arc-consistency on T in O (jV jjCj) time. <p> Moreover, T is consistent iff AC-BF (T ) returns TRUE, and if T is consistent then AC-BF (T ) computes the earliest time and the latest time for each variable in V . The procedure "Refine (u; v)" in AC-BF (T ), used by traditional arc-consistency algorithms <ref> [5, 10] </ref>, eliminates from the current domain of u those values that are not compatible with the current domain of v according to the constraints between u and v of T . Remark.
Reference: [11] <author> A. Marchetti-Spaccamela, U. Nanni, and H. Rohert. </author> <title> On-line graph algorithms for incremental compilation. </title> <booktitle> Lecture Notes in Comp. Sci., </booktitle> <volume> 740 </volume> <pages> 113-151, </pages> <year> 1993. </year>
Reference-contexts: This is attained by the algorithm Update-TO ((X i ; X j ); w; G fl ) [8] which generalizes an incremental algorithm proposed in <ref> [11] </ref> for DAGs where edges have no weights. 1 The last part of Add runs Add-Oriented (([x]; [y]); w; G fl ) to update and d. 2 4 Conclusion We have proposed a collection of techniques aimed to serve as a base for building efficient temporal reasoning tools.
Reference: [12] <author> U. Montanari. </author> <title> Networks of constraints: fundamental properties and applications to picture processing. </title> <journal> Inf. Sci., </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: STP networks are decomposable [6], and both consistency checking and computing the "minimal network" representation can be performed in O (n 3 ) time <ref> [6, 12] </ref>. In [6] it is shown that checking the consistency of a STP network leads to dealing with a shortest-paths problem for a directed graph.
Reference: [13] <author> P. van Beek. </author> <title> Reasoning about qualitative temporal information. </title> <journal> Artificial Intelligence, </journal> <volume> 58, </volume> <year> 1992. </year> <title> 2 For lack of space we omit these experimental results which are reported in [8]. </title>
Reference-contexts: unary constraints of the form x i 2 I; 2. constraints stating the minimal duration of a temporal interval; 3. deadline constraints of the form x i &lt; d, where d is a real number expressing a certain "date"; 4. assertions of qualitative relations in the Convex Simple Interval Algebra <ref> [13] </ref>; 5. assertions of basic qualitative relations in Al-len's Interval Algebra extended with positive lag times [1]. Before addressing the dynamic management of STP -constraints we need to give some basic background and to introduce a few useful concepts.
References-found: 13

