URL: http://www.eecs.umich.edu/techreports/cse/1995/CSE-TR-251-95.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse95.html
Root-URL: http://www.eecs.umich.edu
Email: -mjones,rundenst-@eecs.umich.edu  
Title: An Object Model and Algebra for the Implicit Unfolding of Hierarchical Structures 0  
Author: Matthew C. Jones and Elke A. Rundensteiner 
Keyword: Hierarchical Data, Hierarchical Object-Oriented Views, Data Transformations, Hierarchical Set Algebra, Folded Design Data.  
Address: Ann Arbor  
Affiliation: Software Systems Research Lab University of Michigan,  
Note: 1 of 19  
Abstract: Design applications typically require radically varied views of shared design data, ranging from highly compact hierarchical design artifacts to at and unfolded structures. Because current OODB view technology is not capable of providing this requisite variety of representations, we address this problem by providing special-purpose support for manipulating and querying hierarchical structures. Our object model lays the foundation for the implementation of meta-classes required to support hierarchical set operations. For example, the algebra defined over the data model allows the implicit unfolding of hierarchical sets, providing users with a (virtual) attened and unfolded view of shared data without the penalty of having to maintain replicated data. It thus forms the basis for powerful extensions to the view capabilities of the OODB view system MultiView. Our query operators can be used to derive unmaterialized, unfolded, and updatable views from folded hierarchical sets. These views are updatable using two types of update operations, namely, in-context and out-of-context updates. For this purpose, we present an algorithm to optimally perform in-context updates on an unfolded view via selective unfolding. In order to evaluate the advantages and limitations of interoper-ating through such complex hierarchical and attened views of design data, we also present empirical performance results comparing queries on implicitly and explicitly unfolded hierarchical sets. 0. This work is supported in part by the NSF RIA grant #IRI-9309076, NSF NYI grant #IRI-94-57609, and the University of Michi gan Faculty Award Program. We are also grateful to Digital Equipment Corporation for fellowship support during early develop ment of this work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner, </author> <title> Objects and Views, </title> <booktitle> in Proc. of the ACM SIGMOD 91, </booktitle> <year> 1991. </year>
Reference-contexts: Table 1 compares the forms, their characteristics, and describes when they are most likely to be used. 3 Object-Oriented Data Model The foundational elements in this work are an object-oriented data model <ref> [1, 25, 26] </ref> augmented with system classes that support operations on hierarchical sets. In this section we briey review the object-oriented terminology we utilize in the remainder of this paper. Classes in the model are arranged in a generalization hierarchy permitting multiple inheritance.
Reference: [2] <author> B. Amann and M. Scholl, </author> <title> Gram: A Graph Data Model and Query Language, </title> <type> ECHT 92. </type>
Reference-contexts: Recent research in databases for specific domains has suggested that additions to data models and query languages may be appropriate to enhance the effectiveness of the databases <ref> [2, 9] </ref>. In fact, it has been proposed to confer first-class citizenship to new entities such as paths [9], or hyperwalks [2]. Paths are an important part of our model, but they exist primarily to represent the occurrence of unfolded objects. <p> Recent research in databases for specific domains has suggested that additions to data models and query languages may be appropriate to enhance the effectiveness of the databases [2, 9]. In fact, it has been proposed to confer first-class citizenship to new entities such as paths [9], or hyperwalks <ref> [2] </ref>. Paths are an important part of our model, but they exist primarily to represent the occurrence of unfolded objects.
Reference: [3] <author> R. Armstrong and J. Allen, FICOM: </author> <title> A Framework for Incremental Consistency Maintenance in Multi-Representation, Structural VLSI Databases, </title> <booktitle> in Proc. IEEE International Conference on Computer-Aided Design (ICCAD), </booktitle> <year> 1992, </year> <pages> pp. 336-343. </pages>
Reference-contexts: Our work also propagates updates from the unfolded to the folded representation as well as saving the space that is otherwise wasted on an explicit unfolding of the data (see Section 7.3.1). The FICOM system <ref> [3] </ref> maintains complex constraints across various abstraction domains, but also requires that the two distinct representations are stored separately. The system addresses update propagation in both directions, but the same problems of space and performance overhead remain.
Reference: [4] <author> J. Banerjee, W. Kim, S.-J. Kim and J. F. Garza, </author> <title> Clustering a DAG for CAD Databases, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(11) </volume> <pages> 1684-99, </pages> <year> 1988. </year>
Reference-contexts: Breadth-First clustering performs very well when 40 to 50 percent of the HSet fits in the cache. The poorer Depth-First clustering requires a much higher (70 percent) fit before it sees comparable performance gains. This clearly demonstrates the need for clustering strategies that are compatible with the traversal algorithms <ref> [4] </ref>. 7.3.6 Experimental Summary Our initial experiments indicate that aggregation queries have the potential to be dramatically faster on folded than on unfolded structures. The substantially smaller size of folded structures reduces disk access costs from quadratic and exponential time in DAG characteristics to linear time.
Reference: [5] <author> J. Blakeley, </author> <title> Efficiently Updating Materialized Views, </title> <booktitle> SIGMOD Record, </booktitle> <volume> 15(2) </volume> <pages> 61-71, </pages> <month> June, </month> <year> 1986. </year>
Reference: [6] <author> A. Bredenfeld, </author> <title> A Generator for Graph-Based Design Representations, </title> <booktitle> in 4th International Working Conference on Electronic Design Automation Frameworks, </booktitle> <month> (EDAF 94) </month> <year> 1994. </year>
Reference: [7] <author> M. A. Breurer, W. Cheng, and e. al., Cbase 1.0: </author> <title> A CAD database for VLSI circuits using object oriented technology, </title> <booktitle> in Digest of IEEE International Conference on Computer-Aided Design (ICCAD), </booktitle> <year> 1988. </year>
Reference: [8] <author> CFI-DR-TSC, </author> <title> Design Representation Electrical Connectivity Information Model and Programming Interface, </title> <type> 121, </type> <month> October 23, </month> <year> 1991. </year>
Reference-contexts: On the other hand, a design analysis tool may require an unfolded and attened structure. For the tools to cooperate in an integrated environment, the data and operations on the data must be translated or transformed for each tool. Even with current integration standards <ref> [8] </ref> the burden of transforming design data between different formats is frequently the responsibility of a designated translation tool. Sometimes tool developers are charged with the responsibility to transform the data. Either approach results in ad-hoc systems that do not support incremental update of shared and transformed data. OODB Views.
Reference: [9] <author> V. Christophides, S. Abiteboul, S. Cluet, and M. Scholl, </author> <title> From Structured Documents to Novel Query Facilities, </title> <booktitle> in Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: Recent research in databases for specific domains has suggested that additions to data models and query languages may be appropriate to enhance the effectiveness of the databases <ref> [2, 9] </ref>. In fact, it has been proposed to confer first-class citizenship to new entities such as paths [9], or hyperwalks [2]. Paths are an important part of our model, but they exist primarily to represent the occurrence of unfolded objects. <p> Recent research in databases for specific domains has suggested that additions to data models and query languages may be appropriate to enhance the effectiveness of the databases [2, 9]. In fact, it has been proposed to confer first-class citizenship to new entities such as paths <ref> [9] </ref>, or hyperwalks [2]. Paths are an important part of our model, but they exist primarily to represent the occurrence of unfolded objects.
Reference: [10] <author> D. Garlan, </author> <title> Views for Tools in Integrated Environments, in Advanced Programming Environments, </title> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 314-343. </pages>
Reference: [11] <author> S. Heiler, </author> <title> An Object-Oriented Approach to Data Management: Why Design Databases Need It, </title> <booktitle> in Proc. IEEE/ACM Design Automation Conference (DAC), </booktitle> <year> 1987, </year> <pages> pp 335-40. </pages>
Reference: [12] <author> L. G. Jones, </author> <title> Fast Batch and Incremental Netlist Compilation of Hierarchical Schematics, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 10(7) </volume> <pages> 922-31, </pages> <year> 1991. </year>
Reference-contexts: Updates to the implicitly attened data are limited, and require a re-initialization of the database. Additionally, the work does not present a data model and query operations capable of defining implicitly unfolded views. Research on hierarchical attribute grammars <ref> [12] </ref> presented incremental update schemes to propagte changes from a folded representation to an explicitly unfolded representation. Our work also propagates updates from the unfolded to the folded representation as well as saving the space that is otherwise wasted on an explicit unfolding of the data (see Section 7.3.1).
Reference: [13] <author> M. Jones and E. Rundensteiner, </author> <title> Extending View Technology for Complex Integration Tasks, </title> <booktitle> in Proc. 4th Intl. Working Conf. on Electronic Design Automation Frameworks, </booktitle> <volume> (EDAF 94), </volume> <pages> pp. 71-80, </pages> <year> 1994. </year>
Reference-contexts: Similary, the MultiView OODB view system [22] currently employs an object-preserving algebra as a query language for view definitions. To model the more complex restructuring employed in design tools, such as attening hierarchical graphs and deriving transitive relationships, we are extending MultiView with more powerful view operators <ref> [13] </ref>. The work presented in this paper continues this effort of extending MultiView with complex transformation support. In addition to extending the object algebra to support more powerful transformations, we are addressing the problems of how to make these views updatable.
Reference: [14] <author> H. F. Korth and A. Silberschatz, </author> <title> Database System Concepts, Second Edition. 1991, </title> <publisher> McGraw-Hill. </publisher>
Reference: [15] <author> H. A. Kuno and E. A. Rundensteiner, </author> <title> Materialized Object-Oriented Views in MultiView, </title> <booktitle> in Proc. Fifth International Workshop on Research Issues on Data Engineering: Distributed Object Management (RIDE DOM 95), </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: As such, it automates the transformation of data between the central format and the tool specific formats. In addition, the system provides the services necessary to maintain consistency between the central and materialized derived data <ref> [15] </ref>. MultiView assures the correctness of data transformations and reduces undesired coupling between integrated tools. As a consequence, MultiView represents a powerful enabling technology for integrating design tools that has the potential of increasing the productivity of tool developers and integrators.
Reference: [16] <author> T. Lengauer, </author> <title> Combinatorial Algorithms for Integrated Circuit Layout, </title> <publisher> John Wiley and Sons: </publisher> <pages> pp. 105-121. </pages>
Reference-contexts: Many complex and powerful operations can be performed very efficiently on hierarchical structures <ref> [16] </ref>. The disparity the design size and the representation size suggests that there are numerous opportunities to improve the performance of queries on the hierarchical description.
Reference: [17] <author> R. A. Lorie, </author> <title> Issues in Databases for Design Applications, in File Structures and Data Bases for CAD, </title> <editor> J. Encarnacao and F.-L. Krause, Editor. </editor> <booktitle> 1982, </booktitle> <publisher> North Holland. </publisher>
Reference: [18] <author> D. Maier, </author> <title> Making Database Systems Fast Enough for CAD Applications, in Object-Oriented Concepts in Databases and Applications, </title> <editor> W. Kin and T. H. Luchovsky eds., </editor> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference: [19] <author> N. Parikh, C.-Y. Lo, N. Singhal, and K. Wu, HS: </author> <title> A Hierarchical Search Package for CAD Data, </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 12(1) </volume> <pages> 1-5, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we solved this problem by transforming updates on the implicitly unfolded structure into updates on paths in the folded design DAG. Work on the HS system <ref> [19] </ref> describes an API capable of implicitly attening netlist data. Updates to the implicitly attened data are limited, and require a re-initialization of the database. Additionally, the work does not present a data model and query operations capable of defining implicitly unfolded views.
Reference: [20] <author> Y. G. Ra, H. Kuno, and E. A. Rundensteiner, </author> <title> A Flexible Object-Oriented Database Model and Implementation for Capacity-Augmenting Views, </title> <institution> Electrical Engineering and Computer Science Dept., University of Michigan, Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> CSE-TR-215-94, </institution> <month> May </month> <year> 1994. </year>
Reference: [21] <author> E. A. Rundensteiner, </author> <title> Design Tool Integration Using Object-Oriented Database Views, </title> <booktitle> in Proc. IEEE International Conference on Computer-Aided Design (ICCAD), </booktitle> <year> 1993, </year> <pages> pp. 104-107. </pages>
Reference: [22] <author> E. A. Rundensteiner, </author> <title> MultiView: A Methodology for Multiple Views in OODBs, </title> <booktitle> in Proc. IEEE Intl. Conf. on Very Large Data Bases, </booktitle> <year> 1992, </year> <pages> pp. 187-198. </pages>
Reference-contexts: Figure 1 illustrates the database view system that provides custom restructuring of base data into a specific derived format required by each of the tools in the system. Our OODB view system, MultiView, <ref> [22] </ref> provides a view definition language (VDL) based upon a generic object algebra that is capable of restructuring data for each tool in the system. As such, it automates the transformation of data between the central format and the tool specific formats. <p> An instance created from a prototype inherits both the type and the values from the prototype instance. All instances made from a prototype are initially = but not = id to the originating prototype. A view in our model is a virtual class <ref> [22] </ref>, defined and named by a query operation on base classes. All virtual classes are automatically integrated into the global schema by the view system. For the purposes of this work, views are not materialized. <p> Most current work on OODB views studies traditional OO query languages similar to SQL rather than employing query extensions for complex views. Similary, the MultiView OODB view system <ref> [22] </ref> currently employs an object-preserving algebra as a query language for view definitions. To model the more complex restructuring employed in design tools, such as attening hierarchical graphs and deriving transitive relationships, we are extending MultiView with more powerful view operators [13].
Reference: [23] <author> E. A. Rundensteiner and L. Bic, </author> <title> Set Operations in New Generation Data Models, </title> <journal> in IEEE Transactions on Knowledge and Data Engineering, </journal> <year> 1992, </year> <pages> pp. 382-98. </pages>
Reference-contexts: Since the notion of duplicate is completely dependent upon the notion of equality, the operator requires that the kind of equality be specified in the operation <ref> [23] </ref>. To obtain sets of unique names from the NameGroups set define UniqNames=DupEliminate = (Image (Y, ls,S Select (S, lx x.name == s.name))). If Y=-A, B, B, A, C, A, representing objects with the single letter names as listed in the set, then UniqNames assumes the value: UniqNames = --A,A,A-,-B,B-,-C--.
Reference: [24] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen, </author> <title> Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: We will refer to instances of the class as HierSet instances, instances of HierSet, or just HierSets. We set off instance names, such as Adder, using a normal-weight sans-serif font. 4.1 The Meta-Data Classes The meta-classes for modeling hierarchical sets are shown in Figure 7 using OMT notation <ref> [24] </ref> 2 . The class Primitive, whose instances are maintained by a Library instance represents the primitives in the set. We build hierarchical sets by inserting instances derived from the class Abstr into a multi-set, an instance of the HSet class.
Reference: [25] <author> G. M. Shaw and S. B. Zdonik, </author> <title> An Object-Oriented Query Algebra, </title> <journal> IEEE Data Engineering, </journal> <month> Sept. </month> <year> 1989, </year> <pages> pp. 23-36. </pages>
Reference-contexts: Table 1 compares the forms, their characteristics, and describes when they are most likely to be used. 3 Object-Oriented Data Model The foundational elements in this work are an object-oriented data model <ref> [1, 25, 26] </ref> augmented with system classes that support operations on hierarchical sets. In this section we briey review the object-oriented terminology we utilize in the remainder of this paper. Classes in the model are arranged in a generalization hierarchy permitting multiple inheritance.
Reference: [26] <author> M. H. Scholl, C. Laasch, and M. Tresch, </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> in Proc. DOOD Conference, </booktitle> <address> Germany, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Table 1 compares the forms, their characteristics, and describes when they are most likely to be used. 3 Object-Oriented Data Model The foundational elements in this work are an object-oriented data model <ref> [1, 25, 26] </ref> augmented with system classes that support operations on hierarchical sets. In this section we briey review the object-oriented terminology we utilize in the remainder of this paper. Classes in the model are arranged in a generalization hierarchy permitting multiple inheritance. <p> All virtual classes are automatically integrated into the global schema by the view system. For the purposes of this work, views are not materialized. We say we can update an unmaterialized view if updates made to the view can be unambiguously propagated to the associated base classes <ref> [26] </ref>. Because objects and classes are introspective, they both have methods to determine if a particular attribute or if a specified operation is valid for the class or object. <p> In addition to extending the object algebra to support more powerful transformations, we are addressing the problems of how to make these views updatable. This is an important topic for view mechanisms that has for instance been studied by Scholl et. al. for object-preserving algebra views <ref> [26] </ref>. For our implicitly unfolded data, the update problem is how to propagate the updates from objects which only exist implicitly to the base data. In this paper, we solved this problem by transforming updates on the implicitly unfolded structure into updates on paths in the folded design DAG.
Reference: [27] <author> G. Scholz and W. Wilkes, </author> <title> Information Modelling of Folded and Unfolded Design, </title> <booktitle> in Proc. European Design Automation Conference (EDAC), </booktitle> <year> 1992. </year>
Reference-contexts: Problem Description and Our Approach. Despite the clear advantages to using a hierarchical structure, some design tools must perform operations on the unfolded or attened (or both) data that is based upon a folded, hierarchical description <ref> [27] </ref>. The goal of this paper is to support such tools by providing the database support required to perform unfolding and attening transformations implicitly, through a systematically derived, unmate-rialized database view, rather than the more commonly employed method of performing an ad-hoc translation on the design.
Reference: [28] <author> G. Zimmermann, </author> <title> PLAYOUT - A Hierarchical Design System, </title> <booktitle> in Information Processing 89, </booktitle> <publisher> Elsevier Science Publishers B.V. (North Holland), </publisher> <year> 1989. </year>
References-found: 28

