URL: ftp://ftp.cs.rutgers.edu/pub/allender/rank.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Title: The complexity of matrix rank and feasible systems of linear equations  
Author: Eric Allender Robert Beals Mitsunori Ogihara 
Abstract: We characterize the complexity of some natural and important problems in linear algebra. In particular, we identify natural complexity classes for which the problems of (a) determining if a system of linear equations is feasible and (b) computing the rank of an integer matrix, (as well as other problems), are complete under logspace reductions. As an important part of presenting this classification, we show that the "exact counting logspace hierarchy" collapses to near the bottom level. (We review the definition of this hierarchy below.) We further show that this class is closed under NC 1 -reducibility, and that it consists of exactly those languages that have logspace uniform span programs (introduced by Karchmer and Wigderson) over the rationals. In addition, we contrast the complexity of these problems with the complexity of determining if a system of linear equations has an integer solution.
Abstract-found: 1
Intro-found: 1
Reference: [AO96] <author> E. Allender and M. Ogihara. </author> <title> Relationships among PL, #L, and the determinant. </title> <journal> Theoretical Informatics and Applications (RAIRO), </journal> <volume> 30(1) </volume> <pages> 1-21, </pages> <year> 1996. </year>
Reference-contexts: More precisely, the following result is essentially shown by Vinay [Vin91, Theorem 6.5], Toda [Tod91, Theorem 2.1], and Damm [Dam91]. (See also [MV97] and [Val79, Theorem 2]; further discussion may be found in <ref> [AO96] </ref>.) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant. It follows immediately from this characterization that a complete problem for PL is the set of integer matrices whose determinant is positive (originally proved by [Jun85]). <p> The class C = L can be defined in any of a number of equivalent ways (see <ref> [AO96] </ref>). <p> Although the machine model for C = L is not as natural as some, the fact that it exactly characterizes the complexity of the singular matrices makes this a better-motivated class than, say, PL. Logspace versions of the counting hierarchy were considered in <ref> [AO96] </ref>. When defining classes in terms of space-bounded oracle Turing machines, one needs to be careful how access to the oracle is provided. We use the "Ruzzo-Simon-Tompa" access mechanism [RST84], which dictates that a nondeterministic Turing machine must behave deterministically while writing on its oracle tape. <p> One consequence of using this definition is that we may assume without loss of generality that the list of queries asked by the machine depends only on the input x and does not depend on the answers given by the oracle [RST84]. This oracle access mechanism was used in <ref> [AO96] </ref> to define the following hierarchies: * The Exact Counting Logspace Hierarchy, the C = L hierarchy, is defined as: C = L [ C = L C = L [ C = L C = L C = L * The Probabilistic Logspace Hierarchy, the PL hierarchy, is defined as: <p> The structures of these hierarchies seem quite different than those of their polynomial time counterparts since it is shown in <ref> [AO96] </ref> that these logspace hierarchies are captured in terms of the AC 0 -reducibility closures of the base classes. Here we define circuit-based reductions (see [Coo85]). An oracle circuit is one with a special type of gate, called an oracle gate. <p> So, for a circuit class C and a class D, we write C (D) to denote the class of problems that are logspace uniform C-reducible to problems in D. Now with that notation, the equivalences that are shown in <ref> [AO96] </ref> are stated as: * The C = L hierarchy is equal to AC 0 (C = L). * The PL hierarchy is equal to AC 0 (PL). * The #L hierarchy is equal to AC 0 (#L). <p> is zero is in C = L. (For details, see [Tod91].) * Hence, the preceding discussion shows that the problem of determining if the rank is at most r is logspace conjunctive-truth-table reducible to a problem in C = L. * C = L is closed under logspace conjunctive-truth-table reductions <ref> [AO96] </ref>. 2 2.1.1 A few comments regarding previous work Von zur Gathen [Gat93] considers the problem INDEPENDENCE (given a set of vectors decide if they linearly independent), and specifically asks if INDEPENDENCE is reducible to SINGULAR (the set of singular matrices). <p> considered by Santha and Tan differ from those of [Gat93] in at least two respects: (1) unbounded fan-in AND gates are explicitly allowed, and (2) no path from input to output can encounter more than one oracle gate. (Thus these reductions are what are called AC 0 1 reductions in <ref> [AO96] </ref> and elsewhere.) The classes they study are DET (which would be called AC 0 1 (#L) in our notational scheme), and V -DET (which by definition is AC 0 1 (C = L), and which we show coincides with the exact counting logspace hierarchy). <p> Note that C = L ^ co-C = L is easily seen to be closed under intersection based on the fact that both C = L and co-C = L are closed under intersection (see <ref> [AO96] </ref>). 2 2.3 Feasible Systems of Linear Equations In this section we introduce one of the complete languages for L C = L , and give some preliminary reductions. The proof of completeness is in the next section.
Reference: [AR98] <author> E. Allender and K. Reinhardt. </author> <title> Isolation, matching, and counting. </title> <booktitle> In Proceedings of 13th Conference on Computational Complexity, </booktitle> <pages> pages 92-88. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1998. </year>
Reference-contexts: This algorithm has the form of a nonuniform dtt reduction to the set of nonsingular matrices. Proposition 2.16 Perfect Matching is in co-C = L=poly. (We mention that a slightly better upper bound on the matching problem was recently presented in <ref> [AR98] </ref>.) It is an empirical observation that most natural computational problems are complete for some natural complexity class. The Perfect Matching problem is one of the few important problems that has resisted all such attempts at being pigeonholed in this way. The problem is hard for NL.
Reference: [Bal90] <author> J. Balcazar. </author> <title> Adaptive logspace and depth-bounded reducibilities. </title> <booktitle> In Proceedings of 6th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 240-254. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1990. </year>
Reference-contexts: Similarly, one defines "conjunctive truth table 11 reducibility" (ctt reductions). A more general type of reduction is the following. An NC 1 1 reduction <ref> [Bal90] </ref> is a uniform sequence of circuits fC n g of size n O (1) and depth O (log n), consisting of fan-in two AND and OR gates, NOT gates, and "oracle gates", with the property that no path from input to output goes through more than one oracle gate.
Reference: [BCH86] <author> P. Beame, S. Cook, and H. </author> <title> Hoover. Log depth circuits for division and related problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 994-1003, </pages> <year> 1986. </year>
Reference-contexts: This can be encoded as a many-one reduction to IFSLE.) This reduction works as long as p is at most polynomially large. Thus a P-uniform NC 1 reduction can use Chinese Remaindering to compute the exact value of the determinant <ref> [BCH86] </ref>. This shows that #L is P-uniform NC 1 -reducible to IFSLE.
Reference: [BDHM92] <author> G. Buntrock, C. Damm, U. Hertrampf, and C. Meinel. </author> <title> Structure and importance of Logspace-MOD class. </title> <journal> Mathematical Systems Theory, </journal> <volume> 25 </volume> <pages> 223-237, </pages> <year> 1992. </year>
Reference-contexts: In the arithmetic case, however, this remains unknown (even in the case when F is the field of rational numbers). 9 Buntrock et al. <ref> [BDHM92] </ref> studied algebraic problems over GF [p] for prime p. The proof of Theorem 10 in [BDHM92] states that, over the ring of integers, computation of the determinant is NC 1 -reducible to computation of the rank of a matrix, while in fact this remains an open question. (However, what is <p> In the arithmetic case, however, this remains unknown (even in the case when F is the field of rational numbers). 9 Buntrock et al. <ref> [BDHM92] </ref> studied algebraic problems over GF [p] for prime p. The proof of Theorem 10 in [BDHM92] states that, over the ring of integers, computation of the determinant is NC 1 -reducible to computation of the rank of a matrix, while in fact this remains an open question. (However, what is needed for the applications in [BDHM92] is that these problems are interreducible over GF [p k <p> The proof of Theorem 10 in <ref> [BDHM92] </ref> states that, over the ring of integers, computation of the determinant is NC 1 -reducible to computation of the rank of a matrix, while in fact this remains an open question. (However, what is needed for the applications in [BDHM92] is that these problems are interreducible over GF [p k ], which is true.
Reference: [Ber84] <author> S. Berkowitz. </author> <title> On computing the determinant in small parallel time using a small number of processors. </title> <journal> Information Processing Letters, </journal> <volume> 18 </volume> <pages> 147-150, </pages> <year> 1984. </year>
Reference-contexts: This, in turn is no more difficult than iterated matrix multiplication, as can be seen from the work of Berkowitz <ref> [Ber84] </ref>. Theorem 2.1 [Ber84] Given an r-by-r matrix B, there is a logspace-computable reduction that constructs a sequence of m-by-m matrices D i such that the coefficients c 0 ; c 1 ; :::; c r of the characteristic polynomial of B appear in positions (1; r+1); :::; (1; 1) of <p> This, in turn is no more difficult than iterated matrix multiplication, as can be seen from the work of Berkowitz <ref> [Ber84] </ref>. Theorem 2.1 [Ber84] Given an r-by-r matrix B, there is a logspace-computable reduction that constructs a sequence of m-by-m matrices D i such that the coefficients c 0 ; c 1 ; :::; c r of the characteristic polynomial of B appear in positions (1; r+1); :::; (1; 1) of the matrix Q
Reference: [BF97] <author> R. Beigel and B. Fu. </author> <title> Circuits over PP and PL. </title> <booktitle> In Proceedings of 11th Computational Complexity, </booktitle> <pages> pages 24-35. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1997. </year>
Reference-contexts: The question was open at the moment when the conference version of the present paper was written. Recently, the question has been answered affirmatively by Beigel and Fu <ref> [BF97] </ref>, who also show that NC 1 (PP) = AC 0 (PP). Acknowledgments We wish to thank E. Kaltofen and L. Fortnow for insightful comments related to this paper. Dieter van Melkebeek gave useful feedback on an earlier draft.
Reference: [BGW96] <author> L. Babai, A. Gal, and A. Wigderson. </author> <title> Superpolynomial lower bounds for monotone span programs. </title> <type> Technical Report 96-37, </type> <institution> DIMACS, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: reducible to the set of singular matrices via non-uniform AC 0 or NC 1 reductions. 14 2.5 Span Programs and the Matching Problem The span program formalism was used recently in showing that, for every natural number k, the Perfect Matching problem is in the complexity class Mod k L=poly <ref> [BGW96] </ref>. (That is, they show that, for every prime p, there are polynomial-size span programs over GF [p] recognizing the Perfect Matching problem.) Vinay [Vin95] has pointed out that Perfect Matching is also in the class co-C = L=poly, via essentially the same argument.
Reference: [CGH + 88] <author> J. Cai, T. Gundermann, J. Hartmanis, L. Hemachandra, V. Sewelson, K. Wag-ner, and G. Wechsung. </author> <title> The boolean hierarchy I: structural properties. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(6) </volume> <pages> 1232-1252, </pages> <year> 1988. </year> <month> 19 </month>
Reference-contexts: In order to classify the problem of verifying the rank, it is necessary to define some additional complexity classes. It is not known if C = L is closed under complement. Thus, just as has been done with complexity classes such as NP <ref> [CGH + 88, CGH + 89] </ref>, one can define the Boolean Hierarchy over C = L, defined as the class of languages that can be formed by taking Boolean combinations of languages in C = L.
Reference: [CGH + 89] <author> J. Cai, T. Gundermann, J. Hartmanis, L. Hemachandra, V. Sewelson, K. Wag--ner, and G. Wechsung. </author> <title> The boolean hierarchy II: </title> <journal> Applications. SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 95-111, </pages> <year> 1989. </year>
Reference-contexts: In order to classify the problem of verifying the rank, it is necessary to define some additional complexity classes. It is not known if C = L is closed under complement. Thus, just as has been done with complexity classes such as NP <ref> [CGH + 88, CGH + 89] </ref>, one can define the Boolean Hierarchy over C = L, defined as the class of languages that can be formed by taking Boolean combinations of languages in C = L.
Reference: [Coo85] <author> S. Cook. </author> <title> A taxonomy of problems with fast parallel algorithms. </title> <journal> Information and Computation, </journal> <volume> 64 </volume> <pages> 2-22, </pages> <year> 1985. </year>
Reference-contexts: The structures of these hierarchies seem quite different than those of their polynomial time counterparts since it is shown in [AO96] that these logspace hierarchies are captured in terms of the AC 0 -reducibility closures of the base classes. Here we define circuit-based reductions (see <ref> [Coo85] </ref>). An oracle circuit is one with a special type of gate, called an oracle gate. An oracle gate takes a number of inputs in some fixed order and outputs a number of bits. <p> Note that all of these classes contain NL and are contained in TC 1 (and hence are contained in NC 2 ). Ogihara [Ogi98] recently proved that the PL hierarchy collapses to PL. Cook <ref> [Coo85] </ref> defined DET as the class of things NC 1 -reducible to the determinant. Note that his class DET contains the #L hierarchy. 1.3 Main results We show that the exact counting logspace hierarchy collapses to L C = L .
Reference: [Dam91] <author> C. Damm. </author> <title> DET = L #L ? Informatik-Preprint 8, </title> <institution> Fachbereich Informatik der Humboldt-Universitat zu Berlin, </institution> <year> 1991. </year>
Reference-contexts: More precisely, the following result is essentially shown by Vinay [Vin91, Theorem 6.5], Toda [Tod91, Theorem 2.1], and Damm <ref> [Dam91] </ref>. (See also [MV97] and [Val79, Theorem 2]; further discussion may be found in [AO96].) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant.
Reference: [FFK94] <author> S. Fenner, L. Fortnow, and S. Kurtz. </author> <title> Gap-definable counting classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 48(1) </volume> <pages> 116-148, </pages> <year> 1994. </year>
Reference-contexts: In proving results about the complexity of PP, #P, and related classes, it has often proved more convenient to use the related class of functions GapP <ref> [FFK94] </ref>, which is the set of functions that can be expressed as the difference of two #P functions. One final complexity class related to CH needs to be defined.
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits, and the polynomial-time hierarchy. </title> <journal> Mathematical Systems Theory, </journal> <volume> 17 </volume> <pages> 13-27, </pages> <year> 1984. </year>
Reference-contexts: Using the analogous correspondence between constant-depth circuits and the polynomial hierarchy established by <ref> [FSS84] </ref>, it is known that constructing an oracle separating PSPACE from CH is essentially the same problem as showing that NC 1 properly contains TC 0 (the class of problems computable by constant-depth threshold circuits of polynomial size). 1 Similarly, the important question of whether or not the TC 0 hierarchy
Reference: [Gat93] <author> J. von zur Gathen. </author> <title> Parallel linear algebra. </title> <editor> In J. Reif, editor, </editor> <booktitle> Synthesis of Parallel Algorithms, </booktitle> <pages> pages 574-615. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: We refer the reader to the excellent survey article by von zur Gathen <ref> [Gat93] </ref> for more detailed coverage. <p> In particular, this reduction has the property that the entries of the D i 's are either taken from B or taken from the constants 1; 0; +1; thus the reduction is also a reduction in the sense of <ref> [Gat93] </ref>, and it is also a projection in the sense of [Val92]. There is also a reduction going the other way: iterated matrix multiplication is no more difficult than the determinant. The following construction goes back at least to [Val92] and the exposition below is similar to that in [Tod91]. <p> As in Theorem 2.1, in addition to the entries of D i , the constants we need are only 1; 0; +1, thus, this reduction holds for matrices over any ring with unity, and it is a reduction in the sense of <ref> [Gat93] </ref>, and a projection in the sense of [Val92]. <p> As is explained in <ref> [Gat93] </ref>, the following statements are equivalent: 1. rank (A) k, 2. rank (A 0 ) 2k, 3. rank (B) 2k, 4. algebraic:rank (B) 2k (i.e., rank (B 2n ) 2k), 7 5. the first 2n 2k coefficients of the characteristic polynomial of B are all zero, and 6. the first 2n <p> A polynomial in K (y) of degree at most d 1 can be represented by a d-by-d Toeplitz matrix (see <ref> [Gat93] </ref>), and the zero element in K (y) corresponds to the all-zero matrix. <p> Thus, for the particular case of integer matrices we have the following proposition, which in some sense is implicit in <ref> [Gat93] </ref> (see also [ST94]): Proposition 2.5 The set f (M; r) j M 2 Z nfin and rank (M ) &lt; rg is complete for C = L. Proof: Hardness for C = L follows from Theorem 1.1 (even for the case r = n). <p> Hence, the preceding discussion shows that the problem of determining if the rank is at most r is logspace conjunctive-truth-table reducible to a problem in C = L. * C = L is closed under logspace conjunctive-truth-table reductions [AO96]. 2 2.1.1 A few comments regarding previous work Von zur Gathen <ref> [Gat93] </ref> considers the problem INDEPENDENCE (given a set of vectors decide if they linearly independent), and specifically asks if INDEPENDENCE is reducible to SINGULAR (the set of singular matrices). <p> For rational matrices, these problems are easily seen to be complete for co-C = L and for C = L, respectively, so von zur Gathen's question in that setting can be viewed as asking if C = L is closed under complement. However, in <ref> [Gat93] </ref> von zur Gathen is more interested in working in the algebraic setting over a given field F , and his notion of "reduction" is more restrictive than logspace reducibilities. More precisely, the reductions in [Gat93] are computed by constant-depth circuits with unbounded fan-in OR and + gates, fan-in two AND <p> However, in <ref> [Gat93] </ref> von zur Gathen is more interested in working in the algebraic setting over a given field F , and his notion of "reduction" is more restrictive than logspace reducibilities. More precisely, the reductions in [Gat93] are computed by constant-depth circuits with unbounded fan-in OR and + gates, fan-in two AND and fi gates, and (unbounded fan-in) oracle gates. It is not made clear in [Gat93] if NOT gates are also to be 8 allowed in reductions. <p> More precisely, the reductions in <ref> [Gat93] </ref> are computed by constant-depth circuits with unbounded fan-in OR and + gates, fan-in two AND and fi gates, and (unbounded fan-in) oracle gates. It is not made clear in [Gat93] if NOT gates are also to be 8 allowed in reductions. If NOT gates are allowed, then the restriction of bounded fan-in AND gates can be side-stepped using unbounded fan-in OR gates, via DeMorgan's laws. On the other hand, some of the reductions in [Gat93] (such as in Theorem 13.8) <p> is not made clear in <ref> [Gat93] </ref> if NOT gates are also to be 8 allowed in reductions. If NOT gates are allowed, then the restriction of bounded fan-in AND gates can be side-stepped using unbounded fan-in OR gates, via DeMorgan's laws. On the other hand, some of the reductions in [Gat93] (such as in Theorem 13.8) explicitly make use of NOT gates. Without using NOT gates at all, INDEPENDENCE F (the subscript F indicates the language is the "field F "-version) is clearly many-one reducible to the question of whether a matrix has rank greater than r. <p> Since each of these values can be represented as the determinant of a matrix (again, using a reduction in the sense of <ref> [Gat93] </ref>), it follows that even without using NOT gates in the reduction, INDEPENDENCE F is reducible to the complement of SINGULAR F using a reduction in the sense of [Gat93]. <p> each of these values can be represented as the determinant of a matrix (again, using a reduction in the sense of <ref> [Gat93] </ref>), it follows that even without using NOT gates in the reduction, INDEPENDENCE F is reducible to the complement of SINGULAR F using a reduction in the sense of [Gat93]. If NOT gates are allowed, then these problems are clearly interreducible, and they are also interreducible to the problem SING:NONSING F (consisting of two matrices, the first of which is singular, the second nonsingular). In [Gat93], the following are listed as open questions: * Is INDEPENDENCE F reducible to SINGULAR <p> reducible to the complement of SINGULAR F using a reduction in the sense of <ref> [Gat93] </ref>. If NOT gates are allowed, then these problems are clearly interreducible, and they are also interreducible to the problem SING:NONSING F (consisting of two matrices, the first of which is singular, the second nonsingular). In [Gat93], the following are listed as open questions: * Is INDEPENDENCE F reducible to SINGULAR F ? * Is INDEPENDENCE F complete for RANK F ? (Here, RANK F is the class of problems reducible to the problem of computing the rank of a matrix). <p> The comments in the preceding paragraph, together with the reduction given in our Lemma 2.10 show that, if NOT gates are allowed in reductions, then all problems in RANK F are reducible to INDEPENDENCE F and to SINGULAR F , and thus both of these two questions from <ref> [Gat93] </ref> have been answered positively. If NOT gates are not allowed in reductions, the situation remains unclear. Santha and Tan [ST94] also considered complexity classes defined in terms of reducibility to problems in linear algebra over some field F . <p> If NOT gates are not allowed in reductions, the situation remains unclear. Santha and Tan [ST94] also considered complexity classes defined in terms of reducibility to problems in linear algebra over some field F . The reducibilities considered by Santha and Tan differ from those of <ref> [Gat93] </ref> in at least two respects: (1) unbounded fan-in AND gates are explicitly allowed, and (2) no path from input to output can encounter more than one oracle gate. (Thus these reductions are what are called AC 0 1 reductions in [AO96] and elsewhere.) The classes they study are DET (which
Reference: [Gie95] <author> M. Giesbrecht. </author> <title> Fast computation of the Smith normal form of an integer matrix. </title> <booktitle> In Proceedings of Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 173-186. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: This problem is at least as hard as determining if two integers are relatively prime, since the equation ax + by = 1 has an integer solution if and only if (a; b) = 1. In fact, Kaltofen [Kal95] has pointed out to us that recent work by Giesbrecht <ref> [Gie95] </ref> can be used to show that IFSLE is RNC-equivalent to the problem of determining if GCD (x 1 ; : : : ; x n ) = GCD (y 1 ; : : : ; y n ).
Reference: [Gil77] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <year> 1977. </year>
Reference-contexts: Supported in part by NSF grants CCR-9701911, CCR-9725021, and INT-9726724. 1.1 Complexity Classes for Counting and Enumeration The counting hierarchy (sometimes denoted CH) is the complexity class PP [ PP PP [ PP PP PP [ : : :. (Here, PP is unbounded-error probabilistic polynomial time <ref> [Gil77] </ref>.) Although the counting hierarchy was originally defined in order to classify the complexity of various problems [Wag86], another reason to study CH comes from the connection with threshold circuits.
Reference: [Got96] <author> G. Gottlob. </author> <title> Collapsing oracle-tape hierarchies. </title> <booktitle> In Proceedings of 10th Computational Complexity, </booktitle> <pages> pages 33-42. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1996. </year>
Reference-contexts: In particular, there is a superficial resemblance between our result showing NC 1 (C = L) = L C = L , and the result of [Ogi95] that NC 1 (C = P) is equal to L C = P . Also, Gottlob <ref> [Got96] </ref> has recently studied the question of which classes C satisfy AC 0 (C) = L C . (Our results imply that C = L has this property.) However the techniques of [Ogi95, Got96] do not carry over to complexity classes with small space bounds such as C = L, and <p> Also, Gottlob [Got96] has recently studied the question of which classes C satisfy AC 0 (C) = L C . (Our results imply that C = L has this property.) However the techniques of <ref> [Ogi95, Got96] </ref> do not carry over to complexity classes with small space bounds such as C = L, and thus our proofs are correspondingly more complex. 2 Complexity of Problems in Linear Algebra We will focus mainly on the following problems concerning integer matrices: verifying that the rank of a matrix
Reference: [Hem86] <author> L. Hemachandra. </author> <title> The sky is falling: The strong exponential hierarchy collapses. </title> <type> Technical Report TR86-777, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: FSLE is complete for this class. Proof: Note that the class co-C = L can be viewed as the GapL version of NL. Hemas-paandra <ref> [Hem86] </ref>, and also, Schoning and Wagner [SW88], show how the so-called Census Function Technique can be applied to prove collapsing hierarchies whose base classes admit census counting. Actually, the latter paper shows that NL NL collapses to L NL based on the generalized method.
Reference: [Imm88] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 935-938, </pages> <year> 1988. </year>
Reference-contexts: Just as the complementation results of <ref> [Imm88, Sze88, NTS95] </ref> have led to useful insights, we believe that a positive answer to this question would be extremely interesting. Does the #L hierarchy collapse? Given the collapse of the other two logspace counting hierarchies, it is tempting to guess that this hierarchy also collapses.
Reference: [Jun85] <author> H. Jung. </author> <title> On probabilistic time and space. </title> <booktitle> In Proceedings of 12th Conference on Automata, Languages and Programming, </booktitle> <pages> pages 310-317. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #194, </note> <year> 1985. </year>
Reference-contexts: It follows immediately from this characterization that a complete problem for PL is the set of integer matrices whose determinant is positive (originally proved by <ref> [Jun85] </ref>). Of course, checking if the determinant is positive is not nearly as important a problem as checking if the determinant is exactly equal to zero, and it is equally immediate from the foregoing that the set of singular matrices is complete for the complexity class C = L.
Reference: [Kal95] <author> E. Kaltofen, </author> <year> 1995. </year> <type> Personal communication. </type>
Reference-contexts: This problem is at least as hard as determining if two integers are relatively prime, since the equation ax + by = 1 has an integer solution if and only if (a; b) = 1. In fact, Kaltofen <ref> [Kal95] </ref> has pointed out to us that recent work by Giesbrecht [Gie95] can be used to show that IFSLE is RNC-equivalent to the problem of determining if GCD (x 1 ; : : : ; x n ) = GCD (y 1 ; : : : ; y n ).
Reference: [KUW86] <author> R. Karp, E. Upfal, and A. Wigderson. </author> <title> Constructing a perfect matching in random NC. </title> <journal> Combinatorica, </journal> <volume> 6(1) </volume> <pages> 35-48, </pages> <year> 1986. </year>
Reference-contexts: The Perfect Matching problem is one of the few important problems that has resisted all such attempts at being pigeonholed in this way. The problem is hard for NL. The reduction from 0-1 Network Flow to Perfect Matching given by Karp, Upfal, and Wigderson <ref> [KUW86] </ref> can be modified to show that the Directed Connectivity problem is reducible to the Perfect Matching problem. Since it is in Mod k L for all k (at least nonuniformly), it seems unlikely to be complete for any of the Mod k L classes.
Reference: [KW93] <author> M. Karchmer and A. Wigderson. </author> <title> On span programs. </title> <booktitle> In Proceedings of 8th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 102-111. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993. </year> <month> 20 </month>
Reference-contexts: We further show that NC 1 (C = L) = L C = L , and that this class consists of exactly those languages with logspace uniform span programs over the rationals (cf. <ref> [KW93] </ref>). We show that testing feasibility of a system of linear equations is complete for this hierarchy. Another complete problem for this class is computing the rank of a matrix (or even determining the low order bit of the rank). <p> Then (A; i; b) is in Comp:RANK if and only if W j2S (A; j) 2 Ver:RANK . The result now follows by Lemma 2.11 and Theorem 2.6. 2 2.4 Span programs The span program model of computation was introduced by Karchmer and Wigder-son <ref> [KW93] </ref>. <p> In particular, it is an important characteristic of the span program model in the non-uniform setting that the only measure of interest is the number of vectors (and the size of each vector is not counted). For instance, it is shown in <ref> [KW93] </ref> that if "small" span programs exist for a problem, then span programs having a certain very restricted form must exist but this restricted form uses vectors of exponential length. It is an important aspect of span programs that having extremely long vectors does not provide additional computational power.
Reference: [Lov79] <author> L. Lovasz. </author> <title> On determinants, matching, and random algorithms. </title> <booktitle> In Funda--mentals of Computing Theory (Proceedings of Conference on Algebraic, Arithmetic and Categorical Methods in Computation Theory, </booktitle> <address> Berlin/Wendisch-Rietz, </address> <year> 1979), </year> <pages> pages 565-574, </pages> <address> Berlin, </address> <year> 1979. </year> <month> Akademia-Verlag. </month>
Reference-contexts: Let us sketch the details here; the main ideas stem from the work of <ref> [Tut47, Lov79, Sch80] </ref>. Given the adjacency matrix of a graph, replace the 1's in the matrix with indeterminates and negated indeterminates, to obtain the Tutte matrix for the graph.
Reference: [Mul87] <author> K. Mulmuley. </author> <title> A fast parallel algorithm to computer the rank of a matrix over an arbitrary field. </title> <journal> Combinatorica, </journal> <volume> 7(1) </volume> <pages> 101-104, </pages> <year> 1987. </year>
Reference-contexts: M the jth coordinate of vector v i in f (M ) is either 0; 1; 1; or M k;l , and this depends only on (r; i; j). (Again, this holds for any ring with unity.) Let us now review some aspects of Mulmuley's algorithm for computing the rank <ref> [Mul87] </ref>.
Reference: [MV97] <author> V. Mahajan and V. Vinay. </author> <title> A combinatorial algorithm for the determinant. </title> <journal> Chicago Journal on Theoretical Computer Science, </journal> <year> 1997, 1997. </year> <note> Article 5. </note>
Reference-contexts: More precisely, the following result is essentially shown by Vinay [Vin91, Theorem 6.5], Toda [Tod91, Theorem 2.1], and Damm [Dam91]. (See also <ref> [MV97] </ref> and [Val79, Theorem 2]; further discussion may be found in [AO96].) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant.
Reference: [NTS95] <author> N. Nisan and A. Ta-Shma. </author> <title> Symmetric logspace is closed under complement. </title> <journal> Chicago Journal on Theoretical Computer Science, </journal> <year> 1995:article </year> <month> 1, </month> <year> 1995. </year>
Reference-contexts: Just as the complementation results of <ref> [Imm88, Sze88, NTS95] </ref> have led to useful insights, we believe that a positive answer to this question would be extremely interesting. Does the #L hierarchy collapse? Given the collapse of the other two logspace counting hierarchies, it is tempting to guess that this hierarchy also collapses.
Reference: [Ogi95] <author> M. Ogihara. </author> <title> Equivalence of NC k and AC k1 closures of NP and other classes. </title> <journal> Information and Computation, </journal> <volume> 120(1) </volume> <pages> 55-58, </pages> <year> 1995. </year>
Reference-contexts: In particular, there is a superficial resemblance between our result showing NC 1 (C = L) = L C = L , and the result of <ref> [Ogi95] </ref> that NC 1 (C = P) is equal to L C = P . <p> Also, Gottlob [Got96] has recently studied the question of which classes C satisfy AC 0 (C) = L C . (Our results imply that C = L has this property.) However the techniques of <ref> [Ogi95, Got96] </ref> do not carry over to complexity classes with small space bounds such as C = L, and thus our proofs are correspondingly more complex. 2 Complexity of Problems in Linear Algebra We will focus mainly on the following problems concerning integer matrices: verifying that the rank of a matrix <p> We employ here a more complicated counting technique, developed in <ref> [Ogi95] </ref> to prove NC 1 (C = P) = L C = P . The technique, unfortunately, does not simply carry over to C = L, due to the lack of space in logspace computation, and thus, needs significant modifications to be applicable to C = L.
Reference: [Ogi98] <author> M. Ogihara. </author> <title> The PL hierarchy collapses. </title> <journal> SIAM Journal on Computing, </journal> <volume> 27 </volume> <pages> 1430-1437, </pages> <year> 1998. </year>
Reference-contexts: Note that all of these classes contain NL and are contained in TC 1 (and hence are contained in NC 2 ). Ogihara <ref> [Ogi98] </ref> recently proved that the PL hierarchy collapses to PL. Cook [Coo85] defined DET as the class of things NC 1 -reducible to the determinant.
Reference: [RA97] <author> K. Reinhardt and E. Allender. </author> <title> Making nondeterminism unambiguous. </title> <booktitle> In Proceedings of 36th Symposium on Foundations of Computer Science, </booktitle> <pages> pages 244-253. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1997. </year>
Reference-contexts: However, the assumption that C = L is not contained in Mod k L does not have much intuitive clout. It is known that NL is contained in the Mod k L=poly classes [Wig94] (and actually in UL=poly by a recent paper by Reinhardt and the first author <ref> [RA97] </ref>, where UL is the class of languages accepted by nondeterministic logspace machines with at most one accepting computation path for any input) and it is natural to ask if similar techniques might also apply to C = L. 3 Collapse of the hierarchy In this section we prove the collapse
Reference: [RST84] <author> W. Ruzzo, J. Simon, and M. Tompa. </author> <title> Space-bounded hierarchies and probabilistic computations. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28 </volume> <pages> 216-230, </pages> <year> 1984. </year>
Reference-contexts: Logspace versions of the counting hierarchy were considered in [AO96]. When defining classes in terms of space-bounded oracle Turing machines, one needs to be careful how access to the oracle is provided. We use the "Ruzzo-Simon-Tompa" access mechanism <ref> [RST84] </ref>, which dictates that a nondeterministic Turing machine must behave deterministically while writing on its oracle tape. <p> One consequence of using this definition is that we may assume without loss of generality that the list of queries asked by the machine depends only on the input x and does not depend on the answers given by the oracle <ref> [RST84] </ref>.
Reference: [Ruz81] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22 </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference-contexts: Although there are a number of uniformity conditions that are studied (see, e.g., <ref> [Ruz81] </ref>), we will use only logspace uniformity in the present paper. So, for a circuit class C and a class D, we write C (D) to denote the class of problems that are logspace uniform C-reducible to problems in D.
Reference: [Sch80] <author> J. Schwartz. </author> <title> Fast probabilistic algorithms for verification of polynomial identities. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27 </volume> <pages> 701-717, </pages> <year> 1980. </year>
Reference-contexts: Let us sketch the details here; the main ideas stem from the work of <ref> [Tut47, Lov79, Sch80] </ref>. Given the adjacency matrix of a graph, replace the 1's in the matrix with indeterminates and negated indeterminates, to obtain the Tutte matrix for the graph.
Reference: [Sim75] <author> J. Simon. </author> <title> On some central problems in computational complexity. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <year> 1975. </year> <note> Available as Cornell Department of Computer Science Technical Report TR75-224. </note>
Reference-contexts: One final complexity class related to CH needs to be defined. A number of authors (beginning with <ref> [Sim75] </ref>) have studied the class now called C = P (the set of all languages A with the property that there is an f in GapP such that x 2 A , f (x) = 0).
Reference: [ST94] <author> M. Santha and S. Tan. </author> <title> Verifying the determinant. </title> <booktitle> In Proceedings of 5th International Symposium on Algorithms and Computation, </booktitle> <pages> pages 65-73. </pages> <note> Springer-Verlag Lecture Notes in Computer Science 834, </note> <year> 1994. </year>
Reference-contexts: In contrast, verifying that a matrix has a particular rank is complete for a level of the Boolean hierarchy over C = L. This is the first time that the complexity of these well-studied problems in linear algebra has been so precisely characterized. (Santha and Tan <ref> [ST94] </ref> studied these same computational problems using a coarser notion of reducibility that blurred the distinctions between the various levels of the exact counting logspace hierarchy and the Boolean hierarchy over 4 C = L. The emphasis in [ST94] is on exploring the apparent difference in the complexity of such problems <p> problems in linear algebra has been so precisely characterized. (Santha and Tan <ref> [ST94] </ref> studied these same computational problems using a coarser notion of reducibility that blurred the distinctions between the various levels of the exact counting logspace hierarchy and the Boolean hierarchy over 4 C = L. The emphasis in [ST94] is on exploring the apparent difference in the complexity of such problems as verifying det (M ) = a and verifying that M 1 = A, although the complexity of computing the determinant is equivalent to that of matrix inversion.) It should be noticed that there are several other classes <p> Thus, for the particular case of integer matrices we have the following proposition, which in some sense is implicit in [Gat93] (see also <ref> [ST94] </ref>): Proposition 2.5 The set f (M; r) j M 2 Z nfin and rank (M ) &lt; rg is complete for C = L. Proof: Hardness for C = L follows from Theorem 1.1 (even for the case r = n). <p> If NOT gates are not allowed in reductions, the situation remains unclear. Santha and Tan <ref> [ST94] </ref> also considered complexity classes defined in terms of reducibility to problems in linear algebra over some field F . <p> Our results show that in the Boolean model , for reductions to the problem V -DET , restriction (2) in the reducibilities of Santha and Tan <ref> [ST94] </ref> is redundant; the same class of problems results if this restriction is dropped. In the arithmetic case, however, this remains unknown (even in the case when F is the field of rational numbers). 9 Buntrock et al. [BDHM92] studied algebraic problems over GF [p] for prime p.
Reference: [SW88] <author> U. Schoning and K. Wagner. </author> <title> Collapsing oracle hierarchies, census functions, and logarithmically many queries. </title> <booktitle> In Proceedings of 5th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 91-97. </pages> <note> Springer-Verlag Lecture Notes in Computer Science #294, </note> <year> 1988. </year>
Reference-contexts: FSLE is complete for this class. Proof: Note that the class co-C = L can be viewed as the GapL version of NL. Hemas-paandra [Hem86], and also, Schoning and Wagner <ref> [SW88] </ref>, show how the so-called Census Function Technique can be applied to prove collapsing hierarchies whose base classes admit census counting. Actually, the latter paper shows that NL NL collapses to L NL based on the generalized method.
Reference: [Sze88] <author> R. Szelepcsenyi. </author> <title> The method of forced enumeration for nondeterministic automata. </title> <journal> Acta Informatica, </journal> <volume> 26 </volume> <pages> 279-284, </pages> <year> 1988. </year> <month> 21 </month>
Reference-contexts: Just as the complementation results of <ref> [Imm88, Sze88, NTS95] </ref> have led to useful insights, we believe that a positive answer to this question would be extremely interesting. Does the #L hierarchy collapse? Given the collapse of the other two logspace counting hierarchies, it is tempting to guess that this hierarchy also collapses.
Reference: [Tod91] <author> S. </author> <title> Toda. Counting problems computationally equivalent to computing the de-terminant. </title> <type> Technical Report CSIM 91-07, </type> <institution> Department of Computer Science, University of Electro-Communications, </institution> <address> Tokyo, Japan, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: More precisely, the following result is essentially shown by Vinay [Vin91, Theorem 6.5], Toda <ref> [Tod91, Theorem 2.1] </ref>, and Damm [Dam91]. (See also [MV97] and [Val79, Theorem 2]; further discussion may be found in [AO96].) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant. <p> There is also a reduction going the other way: iterated matrix multiplication is no more difficult than the determinant. The following construction goes back at least to [Val92] and the exposition below is similar to that in <ref> [Tod91] </ref>. Proposition 2.2 There is a logspace-computable function that takes as input a sequence of matrices D i and numbers (a; b), and produces as output a matrix H such that entry (a; b) of D i is det (H). <p> Thus det (H) is simply the sum (over all 6 paths from vertex a in the first column to vertex b in the last column) of the product of the labels on the edges on that path, as desired. (We remark that a slightly more complicated construction given in <ref> [Tod91] </ref> provides a projection that does not make use of the constant 1, by introducing cycle covers corresponding to odd permutations.) 2 Corollary 2.3 There is a logspace-computable function f such that if M is a matrix of full rank, then so is f (M ), and if M is a <p> Containment in C = L follows from the preceding discussion, along with the following observations: * The problem of taking integer matrices D l and indices i; j and determining if entry i; j of l D l is zero is in C = L. (For details, see <ref> [Tod91] </ref>.) * Hence, the preceding discussion shows that the problem of determining if the rank is at most r is logspace conjunctive-truth-table reducible to a problem in C = L. * C = L is closed under logspace conjunctive-truth-table reductions [AO96]. 2 2.1.1 A few comments regarding previous work Von zur <p> Then A is logspace many-one reducible to the set of singular matrices over the rationals. In fact, this reduction has the properties outlined in Corollary 2.4. Thus (since the set of singular matrices is complete for C = L under projections <ref> [Tod91] </ref>), we have that there is a logspace-computable f such that f (x) is a system of linear equations of the form M y = b such that 1. x 2 A if and only if M y = b is feasible. 2. b is the vector (1; 0; 0; :
Reference: [Tut47] <author> W. Tutte. </author> <title> The factorization of linear graphs. </title> <journal> Journal of the London Mathematical Society, </journal> <volume> 22 </volume> <pages> 107-111, </pages> <year> 1947. </year>
Reference-contexts: Let us sketch the details here; the main ideas stem from the work of <ref> [Tut47, Lov79, Sch80] </ref>. Given the adjacency matrix of a graph, replace the 1's in the matrix with indeterminates and negated indeterminates, to obtain the Tutte matrix for the graph.
Reference: [Val79] <author> L. Valiant. </author> <title> Completeness classes in algebra. </title> <booktitle> In Proceedings of 11th Symposium on Theory of Computing, </booktitle> <pages> pages 249-261. </pages> <publisher> ACM Press, </publisher> <year> 1979. </year>
Reference-contexts: More precisely, the following result is essentially shown by Vinay [Vin91, Theorem 6.5], Toda [Tod91, Theorem 2.1], and Damm [Dam91]. (See also [MV97] and <ref> [Val79, Theorem 2] </ref>; further discussion may be found in [AO96].) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant.
Reference: [Val92] <author> L. Valiant. </author> <title> Why is boolean complexity theory difficult? In M. Paterson, editor, Boolean Function Complexity, </title> <booktitle> pages 84-94. London Mathematical Society, Lecture Note Series 169, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: In particular, this reduction has the property that the entries of the D i 's are either taken from B or taken from the constants 1; 0; +1; thus the reduction is also a reduction in the sense of [Gat93], and it is also a projection in the sense of <ref> [Val92] </ref>. There is also a reduction going the other way: iterated matrix multiplication is no more difficult than the determinant. The following construction goes back at least to [Val92] and the exposition below is similar to that in [Tod91]. <p> thus the reduction is also a reduction in the sense of [Gat93], and it is also a projection in the sense of <ref> [Val92] </ref>. There is also a reduction going the other way: iterated matrix multiplication is no more difficult than the determinant. The following construction goes back at least to [Val92] and the exposition below is similar to that in [Tod91]. Proposition 2.2 There is a logspace-computable function that takes as input a sequence of matrices D i and numbers (a; b), and produces as output a matrix H such that entry (a; b) of D i is det (H). <p> As in Theorem 2.1, in addition to the entries of D i , the constants we need are only 1; 0; +1, thus, this reduction holds for matrices over any ring with unity, and it is a reduction in the sense of [Gat93], and a projection in the sense of <ref> [Val92] </ref>. Proof: Consider each matrix D i to be a bipartite graph on vertices arranged into two columns, where entry c in position (k; m) denotes an edge labeled c from vertex k in the first column to vertex m in the second column.
Reference: [Vin91] <author> V. Vinay. </author> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits. </title> <booktitle> In Proceedings of 6th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 270-284. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1991. </year>
Reference-contexts: More precisely, the following result is essentially shown by Vinay <ref> [Vin91, Theorem 6.5] </ref>, Toda [Tod91, Theorem 2.1], and Damm [Dam91]. (See also [MV97] and [Val79, Theorem 2]; further discussion may be found in [AO96].) Theorem 1.1 A function f is in GapL if and only if f is logspace many-one reducible to the determinant.
Reference: [Vin95] <author> V. Vinay, </author> <year> 1995. </year> <type> Personal communication. </type>
Reference-contexts: span program formalism was used recently in showing that, for every natural number k, the Perfect Matching problem is in the complexity class Mod k L=poly [BGW96]. (That is, they show that, for every prime p, there are polynomial-size span programs over GF [p] recognizing the Perfect Matching problem.) Vinay <ref> [Vin95] </ref> has pointed out that Perfect Matching is also in the class co-C = L=poly, via essentially the same argument. Let us sketch the details here; the main ideas stem from the work of [Tut47, Lov79, Sch80].
Reference: [Wag86] <author> K. Wagner. </author> <title> The complexity of combinatorial problems with succinct input representation. </title> <journal> Acta Informatica, </journal> <volume> 23 </volume> <pages> 325-356, </pages> <year> 1986. </year>
Reference-contexts: for Counting and Enumeration The counting hierarchy (sometimes denoted CH) is the complexity class PP [ PP PP [ PP PP PP [ : : :. (Here, PP is unbounded-error probabilistic polynomial time [Gil77].) Although the counting hierarchy was originally defined in order to classify the complexity of various problems <ref> [Wag86] </ref>, another reason to study CH comes from the connection with threshold circuits.
Reference: [Wig94] <author> A. Wigderson. NL/poly L/poly. </author> <booktitle> In Proceedings of 9th Conference on Structure in Complexity Theory, </booktitle> <pages> pages 59-62. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year> <month> 22 </month>
Reference-contexts: However, the assumption that C = L is not contained in Mod k L does not have much intuitive clout. It is known that NL is contained in the Mod k L=poly classes <ref> [Wig94] </ref> (and actually in UL=poly by a recent paper by Reinhardt and the first author [RA97], where UL is the class of languages accepted by nondeterministic logspace machines with at most one accepting computation path for any input) and it is natural to ask if similar techniques might also apply to
References-found: 46

