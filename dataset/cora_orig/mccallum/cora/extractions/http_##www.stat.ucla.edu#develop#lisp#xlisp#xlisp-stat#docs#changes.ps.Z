URL: http://www.stat.ucla.edu/develop/lisp/xlisp/xlisp-stat/docs/changes.ps.Z
Refering-URL: http://www.stat.ucla.edu/develop/lisp/xlisp/xlisp-stat/docs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: XLISP-STAT 2.1 Release 3 Beta Release Notes  
Author: Luke Tierney 
Note: Contents  
Date: September 19, 1994  
Affiliation: School of Statistics University of Minnesota  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Bratley, P., Fox, B. L., and Schrage, L. E. </author> <year> (1987), </year> <title> A Guide to Simulation (2nd ed.), </title> <address> New York, NY: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The generators are identified by an integer: 0 The original XLISP-STAT generator, Marsaglia's portable generator from CMLIB. This is a lagged Fibonacci generator. 1 L'Ecuyer's [5] version of the Wichmann-Hill [9] generator, also used in Bratley, Fox and Schrage, <ref> [1, program UNIFL] </ref>. 2 Marsaglia's Super-Duper, as used in S. 3 Combined Tausworthe generator of Tezuka and L'Ecuyer [8]. The default generator is generator 1. Generator 0 has a period of 2 32 . All three new generators have periods on the order of 2 60 .
Reference: [2] <author> Brooks, R. A., Gabriel, R. P, and Steele, G. L. </author> <year> (1982), </year> <title> "An optimizing compiler for lexically scoped LISP," </title> <booktitle> Proc. Symp. on Compiler Construction, ACM SIGPLAN Notices 17, </booktitle> <volume> 6, </volume> <pages> 261-275. </pages>
Reference-contexts: The compiler is based on CPS conversion (see, for example, Friedman, Wand and Haynes [3]). The design is based on the ORBIT compiler as described in Krantz et al. [4] and on Brooks, Gabriel and Steele <ref> [2] </ref>. At this point the compiler does not do anything special for vectorized arithmetic or anything else statistical. In the future I will explore adding optimizations designed to deal with problems specific to statistical usage. The basic design should make this reasonably easy. 4.26 Loop No changes not implemented.
Reference: [3] <author> Friedman, D. P, Wand, M. and Haynes, C. T. </author> <year> (1992), </year> <title> Essentials of Programming Languages, </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: This can be done by supplying the :print-symbol-package keyword argument to compile-file with a non-nil value. The function compiled-function-p returns true for internal compiled functions (SUBR's) or byte compiled functions. The compiler is based on CPS conversion (see, for example, Friedman, Wand and Haynes <ref> [3] </ref>). The design is based on the ORBIT compiler as described in Krantz et al. [4] and on Brooks, Gabriel and Steele [2]. At this point the compiler does not do anything special for vectorized arithmetic or anything else statistical.
Reference: [4] <author> Krantz, D. A., Kelsey, R., Rees, J. A., Hudak, P., Philbin, J., and Adams, N. I. </author> <year> (1986), </year> <title> "Orbit: An optimizing compiler for Scheme," </title> <booktitle> Proc. SIGPLAN '86 Symp. on Compiler Construction, SIGPLAN Notices 21, </booktitle> <volume> 7, </volume> <pages> 219-223. </pages>
Reference-contexts: The function compiled-function-p returns true for internal compiled functions (SUBR's) or byte compiled functions. The compiler is based on CPS conversion (see, for example, Friedman, Wand and Haynes [3]). The design is based on the ORBIT compiler as described in Krantz et al. <ref> [4] </ref> and on Brooks, Gabriel and Steele [2]. At this point the compiler does not do anything special for vectorized arithmetic or anything else statistical. In the future I will explore adding optimizations designed to deal with problems specific to statistical usage.
Reference: [5] <author> L'Ecuyer, P. </author> <year> (1986), </year> <title> "Efficient and portable combined random number generators," </title> <journal> Communications of the ACM 31, </journal> <pages> 742-749. </pages>
Reference-contexts: The generators are identified by an integer: 0 The original XLISP-STAT generator, Marsaglia's portable generator from CMLIB. This is a lagged Fibonacci generator. 1 L'Ecuyer's <ref> [5] </ref> version of the Wichmann-Hill [9] generator, also used in Bratley, Fox and Schrage, [1, program UNIFL]. 2 Marsaglia's Super-Duper, as used in S. 3 Combined Tausworthe generator of Tezuka and L'Ecuyer [8]. The default generator is generator 1. Generator 0 has a period of 2 32 .
Reference: [6] <author> Norvig, P. </author> <year> (1992), </year> <title> Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp, </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In the future I will explore adding optimizations designed to deal with problems specific to statistical usage. The basic design should make this reasonably easy. 4.26 Loop No changes not implemented. The subset of loop from Peter Norvig's <ref> [6] </ref> book should work with at most minor modifications. 17 4.27 Pretty Print No changes not implemented. The XP pretty pringing package from the CMU lisp archives can be made to work with minor modifications. 4.28 CLOS No changes not implemented.
Reference: [7] <author> Steele, Guy L. </author> <year> (1990), </year> <title> Common Lisp: </title> <booktitle> The Language, second edition, </booktitle> <address> Bedford, MA: </address> <publisher> Digital Press. </publisher>
Reference-contexts: Both 16-bit and 32-bit versions can use DLL's, but only 16-bit and 32-bit DLL's, respectively. 4 Improvements in Common Lisp Support This section outlines changes in Common Lisp compatibility. The subsections are numbered according to the chapters of Steele <ref> [7] </ref>. Detailed descriptions of standard functions and macros are given in Steele [7]. 4.1 Introduction No changes. 4.2 Data Types Vectors and arrays containing typed elements, such as fixnums or floats, are now partially supported. This support will be completed in a future release. <p> The subsections are numbered according to the chapters of Steele <ref> [7] </ref>. Detailed descriptions of standard functions and macros are given in Steele [7]. 4.1 Introduction No changes. 4.2 Data Types Vectors and arrays containing typed elements, such as fixnums or floats, are now partially supported. This support will be completed in a future release. <p> Proper keyword argument handling is now possible; see Section 2.1 for more details. The special form eval-when for controlling time of evaluation is now defined. It is defined in accordance with the revised definition of Steele <ref> [7] </ref>. 10 4.6 Predicates The functionp now follows the new specification in Steele [7]. Only internal functions (SUBR's), byte compiled functions, and function closures result in a non-nil value. In particular, nil is returned for symbols and lambda expressions. <p> Proper keyword argument handling is now possible; see Section 2.1 for more details. The special form eval-when for controlling time of evaluation is now defined. It is defined in accordance with the revised definition of Steele <ref> [7] </ref>. 10 4.6 Predicates The functionp now follows the new specification in Steele [7]. Only internal functions (SUBR's), byte compiled functions, and function closures result in a non-nil value. In particular, nil is returned for symbols and lambda expressions. The function bit-vector-p has been added for compatibility with some software; it always returns nil. <p> Expansion is done using this environment if supplied; otherwise, the null environment is used. Macros allow destructuring in their required arguments, not in any other arguments. The macro destructuring-bind is also available. The &whole lambda keyword may not be used in this macro. Steele <ref> [7] </ref> says it may, but I think this is an error. 4.9 Declarations The special form declare is available, but all declarations are currently ignored by the interpreter and the compiler, including special declarations. <p> been modified to operate on lists and all vector types, including strings: concatenate copy-seq count elt find every map notany notevery some position reduce remove-duplicates subseq The following functions have been added: count-if count-if-not delete-duplicates fill find-if find-if-not map-into nreverse position-if position-if-not replace search Most keyword arguments specified in Steele <ref> [7] </ref> are supported, except that not all functions that should support the :from-end keyword yet. The complement function for negating a predicate has been added. 4.15 Lists The functions mapcan and mapcon are now functions instead of macros.
Reference: [8] <author> Tezuka, S. and L'Ecuyer, P. </author> <year> (1991), </year> <title> "Efficient and portable combined Tauseworthe random number generators," </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 1, </booktitle> <pages> 99-112. </pages>
Reference-contexts: This is a lagged Fibonacci generator. 1 L'Ecuyer's [5] version of the Wichmann-Hill [9] generator, also used in Bratley, Fox and Schrage, [1, program UNIFL]. 2 Marsaglia's Super-Duper, as used in S. 3 Combined Tausworthe generator of Tezuka and L'Ecuyer <ref> [8] </ref>. The default generator is generator 1. Generator 0 has a period of 2 32 . All three new generators have periods on the order of 2 60 .

References-found: 8

