URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/pj2.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/hosking/papers.html
Root-URL: http://www.cs.purdue.edu
Title: Analysing, Profiling and Optimising Orthogonal Persistence for Java Position Paper for the Second International Workshop
Author: Quintin Cutts Antony L. Hosking 
Keyword: persistence, Java, bytecode, program analysis, dynamic profiling, optimisation  
Address: Glasgow G12 8QQ, Scotland  West Lafayette, IN 47907-1398, USA  
Affiliation: Department of Computing Science University of Glasgow  Department of Computer Sciences Purdue University  
Email: quintin@dcs.gla.ac.uk  hosking@cs.purdue.edu  
Degree: California, August 1997  
Date: August 23, 1997  
Abstract: Persistent systems manage main memory as a cache for efficient access to frequently-accessed persistent data. Good cache management requires some knowledge of the semantics of the applications running against it. We are attacking the performance problems of persistence for Java through analysis, profiling, and optimisation of Java classes and methods executing in an orthogonally persistent setting. Knowledge of application behaviour is derived through analysis and profiling, and applied by both a static bytecode transformer and the run-time system to optimise the actions of Java programs as they execute against persistent storage. Our prototype will unify distinct persistence optimisations within a single optimisation framework, deriving its power from treatment of the entire persistent application, consisting of both program code and data stored in the database, for whole-application analysis, profiling and optimisation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> ATKINSON, M. P. AND BUNEMAN, O. P. </author> <year> 1987. </year> <title> Types and persistence in database programming languages. </title> <journal> ACM Comput. Surv. </journal> <volume> 19, </volume> <month> 2 (June), 105190. </month>
Reference: <author> ATKINSON, M. P., DAYN ES, L., JORDAN, M. J., PRINTEZIS, T., AND SPENCE, S. </author> <year> 1996. </year> <title> An orthogonally persistent Java. </title> <booktitle> ACM SIGMOD Record 25, </booktitle> <month> 4 (Dec.), 6875. </month>
Reference: <author> ATKINSON, M. P., JORDAN, M. J., DAYN ES, L., AND SPENCE, S. </author> <year> 1997. </year> <title> Design issues for persistent Java: A type-safe object-oriented, orthogonally persistent system. </title> <note> See Connor and Nettles [1997]. </note>
Reference: <author> ATKINSON, M. P. AND MORRISON, R. </author> <year> 1995. </year> <title> Orthogonally persistent object systems. </title> <booktitle> Int. J. Very Large Data Bases 4, </booktitle> <volume> 3, </volume> <pages> 319401. </pages>
Reference: <author> CATTELL, R. G. G. </author> <year> 1994. </year> <title> Object Data Management: Object-Oriented and Extended Relational Database Management Systems. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> CHAMBERS, C. </author> <year> 1992. </year> <title> The design and implementation of the SELF compiler, an optimizing compiler for object-oriented programming languages. </title> <type> Ph.D. thesis, </type> <institution> Stanford University. </institution>
Reference: <author> CHAMBERS, C. AND UNGAR, D. </author> <year> 1989. </year> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Portland, </booktitle> <address> Oregon, </address> <month> June). 146160. </month>
Reference: <author> CHAMBERS, C. AND UNGAR, D. </author> <year> 1990. </year> <title> Iterative type analysis and extended message splitting: Optimizing dynamically-typed object-oriented programs. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (White Plains, </booktitle> <address> New York, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 25, </journal> <note> 6 (June), 150164. </note>
Reference: <author> CHAMBERS, C., UNGAR, D., AND LEE, E. </author> <year> 1989. </year> <title> An efficient implementation of Self, a dynamically-typed object-oriented language based on prototypes. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (New Orleans, Louisiana, Oct.). ACM SIGPLAN Notices 24, </booktitle> <address> 10 (Oct.), </address> <month> 4970. </month>
Reference: <author> CONNOR, R. AND NETTLES, S., Eds. </author> <year> 1997. </year> <booktitle> Proceedings of the Seventh International Workshop on Persistent Object Systems (Cape May, </booktitle> <address> New Jersey, </address> <month> May </month> <year> 1996). </year> <title> Persistent Object Systems: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> CONSEL, C. AND DANVY, O. </author> <year> 1993. </year> <title> Tutorial notes on partial evaluation. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages (Charleston, </booktitle> <address> South Carolina, Jan.). </address> <month> 493501. </month>
Reference: <author> CUTTS, Q., CONNOR, R., KIRBY, G., AND MORRISON, R. </author> <year> 1994. </year> <title> An execution driven approach to code optimisation. </title> <booktitle> In Proceedings of the 17th Australasian Computer Science Conference (Christchurch, </booktitle> <address> New Zealand). </address> <month> 8392. </month>
Reference: <author> DAYN ES, L. </author> <year> 1997. </year> <title> Private communication. </title>
Reference: <author> DEAN, J., CHAMBERS, C., AND GROVE, D. </author> <year> 1995. </year> <title> Selective specialization for object-oriented languages. </title> <note> See PLDI [1995], 93102. </note>
Reference: <author> DEAN, J., GROVE, D., AND CHAMBERS, C. </author> <year> 1995. </year> <title> Optimization of object-oriented programs using static class hierarchy analysis. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming ( Aarhus, Denmark, Aug.). Lecture Notes in Computer Science, </booktitle> <volume> vol. 952. </volume> <publisher> Springer-Verlag. </publisher>
Reference: <editor> DEARLE, A., SHAW, G. M., AND ZDONIK, S. B., Eds. </editor> <booktitle> 1991. Proceedings of the Fourth International Workshop on Persistent Object Systems (Martha's Vineyard, </booktitle> <address> Massachusetts, </address> <month> Sept. </month> <year> 1990). </year> <title> Implementing Persistent Object Bases: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> DIWAN, A. </author> <year> 1997. </year> <title> Understanding and improving the performance of modern programming languages. </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts at Amherst. </institution>
Reference: <author> DIWAN, A., MOSS, J. E. B., AND MCKINLEY, K. S. </author> <year> 1996. </year> <title> Simple and effective analysis of statically-typed object-oriented programs. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (San Jose, California, Oct.). ACM SIGPLAN Notices 31, </booktitle> <address> 10 (Oct.), </address> <month> 292305. </month>
Reference: <author> FERNANDEZ, M. F. </author> <year> 1995. </year> <title> Simple and effective link-time optimization of Modula-3 programs. </title> <note> See PLDI [1995], 103115. </note>
Reference: <author> GROVE, D., DEAN, J., GARRETT, C., AND CHAMBERS, C. </author> <year> 1995. </year> <title> Profile-guided receiver class prediction. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (Austin, Texas, Oct.). ACM SIGPLAN Notices 30, </booktitle> <address> 10 (Oct.), </address> <month> 108123. </month>
Reference: <author> H OLZLE, U. AND UNGAR, D. </author> <year> 1994. </year> <title> Optimizing dynamically-dispatched calls with run-time type feedback. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Orlando, </booktitle> <address> Florida, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 29, </journal> <note> 6 (June), 326336. </note>
Reference: <author> H OLZLE, U. AND UNGAR, D. </author> <year> 1996. </year> <title> Reconciling responsiveness with performance in pure object-oriented languages. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 18, </volume> <month> 4 (July), 355400. </month>
Reference: <author> HOSKING, A. L. </author> <year> 1995. </year> <title> Lightweight support for fine-grained persistence on stock hardware. </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts at Amherst. </institution> <note> Available as Computer Science Technical Report 95-02. </note>
Reference: <author> HOSKING, A. L. </author> <year> 1997. </year> <title> Residency check elimination for object-oriented persistent languages. </title> <note> See Connor and Nettles [1997], 174183. </note>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1991. </year> <title> Towards compile-time optimisations for persistence. </title> <editor> See Dearle et al. </editor> <year> [1991], </year> <month> 1727. </month>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1993. </year> <title> Protection traps and alternatives for memory management of an object-oriented language. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles (Asheville, North Carolina, Dec.). ACM Operating Systems Review 27, </booktitle> <month> 5 (Dec.), 106119. </month>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1995. </year> <title> Lightweight write detection and checkpointing for fine-grained persistence. </title> <type> Tech. Rep. 95-084, </type> <institution> Department of Computer Sciences, Purdue University. </institution> <month> Dec. </month>
Reference: <author> JONES, N. D., GOMARD, C. K., AND SESTOFT, P. </author> <year> 1993. </year> <title> Partial Evaluation and Automatic Program Generation. </title> <publisher> Prentice-Hall. </publisher>
Reference: <author> LINDHOLM, T. AND YELLIN, F. </author> <year> 1996. </year> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> MOSS, J. E. B. AND HOSKING, A. L. </author> <year> 1995. </year> <title> Expressing object residency optimizations using pointer type annotations. </title> <booktitle> In Proceedings of the Sixth International Workshop on Persistent Object Systems (Tarascon, </booktitle> <address> France, </address> <month> Sept. </month> <year> 1994), </year> <editor> M. Atkinson, D. Maier, and V. Benzaken, Eds. </editor> <booktitle> Workshops in Computing. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 315. </pages>
Reference: <author> MOSS, J. E. B. AND HOSKING, A. L. </author> <year> 1996. </year> <title> Approaches to adding persistence to Java. </title> <booktitle> In Proceedings of the First International Workshop on Persistence and Java (Drymen, </booktitle> <address> Scotland, </address> <month> Sept.), </month> <editor> M. P. Atkinson and M. J. Jordan, Eds. </editor> <title> Sun Microsystems. </title> <booktitle> PLDI 1995. Proceedings of the ACM Conference on Programming Language Design and Implementation (La Jolla, </booktitle> <address> California, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 30, </journal> <month> 6 (June). </month>
Reference: <author> UNGAR, D. AND SMITH, R. B. </author> <year> 1987. </year> <title> Self: The power of simplicity. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (Orlando, Florida, Oct.). ACM SIGPLAN Notices 22, </booktitle> <month> 12 (Dec.), 227241. </month>
Reference: <author> WOLFE, M. </author> <year> 1996. </year> <title> High Performance Compilers for Parallel Computing. </title> <publisher> Addison-Wesley. </publisher>
References-found: 33

