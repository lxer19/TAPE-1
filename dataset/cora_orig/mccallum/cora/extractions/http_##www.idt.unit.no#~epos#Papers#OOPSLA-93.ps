URL: http://www.idt.unit.no/~epos/Papers/OOPSLA-93.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Email: geirmag@idt.unit.no, guttorm@idt.unit.no  
Title: On the purpose of Object-Oriented Analysis  
Author: Geir Magne Htydalsvik and Guttorm Sindre 
Keyword: object-oriented analysis, problem-orientation, suitability, design  
Address: UNIT-NTH/IDT, N-7034 Trondheim, NORWAY.  
Affiliation: University of Trondheim Norwegian Institute of Technology Department of Computer Systems and Telematics  
Abstract: The paper discusses the general purpose of analysis and evaluates OOA with respect to this, arguing that OOA does not deliver what it claims to do. The two major problems are that OOA often does not meet the full needs of the analysis phase, and that the transition to design is not always as easy as promised. The last point is illustrated by a solution to the OOPSLA conference registration problem. Due to the mentioned shortcomings, OOA/OOD was not found sufficient for forming the basis of a common development methodology for three Nor-wegian software producers in a technology transfer project with our university. The suggestion made is that OOA should become problem-oriented rather than target-oriented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V.De Antonellis and L. </author> <title> Vandoni. Validation of Object-Oriented Dynamic Specifications. </title> <booktitle> In Proceedings of 26'th HICSS, </booktitle> <volume> volume 4, </volume> <pages> pages 399-408, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: With respect to validation we focus on dynamic aspects because this is by far the most difficult part to validate. The techniques considered are symbolic execution and simulation, coupled with visualization techniques. Work in this area can be found in <ref> [1, 17] </ref>. 6 Positive trends in OOA In this section we will briefly indicate what we consider to be positive trends in OOA. First, OOA has evolved into putting focus on system dynamics. This has been adopted by most methods in the form of object-iteraction models and state transition diagrams.
Reference: [2] <author> METIS A/S. </author> <title> METIS Information and Process Modeling Handbook. </title> <type> Technical report, </type> <note> METIS A/S, February 1992. Preliminary Edition. </note>
Reference-contexts: METIS AS have developed a method aimed at enterprise modeling and engineering designs (organizations, products, processes). This is achieved in an object-oriented way by using a generic modeling tool named METIS SOFTWARE <ref> [2, 41] </ref>. At the model level, instances of objects and relationships are maintained, representing real-world entities. At the meta-model level, application and domain specific types are maintained. The model can be changed at any time by adding/deleting objects and relationships, or by changing associated types. <p> travels between contexts, a context is governed by rules and described in terms of role models. 5.2 Data Flow Diagrams METIS, with about 10 years experience in modeling engineering designs in terms of objects and relationships [41], have recently added a process model similar to DFD's to represent work processes <ref> [2] </ref>. This should indicate that message sequence diagrams, originating from the telecommunication area [25] , is not the only valid paradigm for modeling system dynamics. In the article [30], we describe an intuitive and yet powerful language to model the real-world.
Reference: [3] <author> TASKON AS. OOram, </author> <title> Object Oriented Role Analysis and Modelling. </title> <type> Technical report, </type> <institution> TASKON Work Environments, </institution> <month> January </month> <year> 1993. </year> <note> Handbook Preliminary version. </note>
Reference-contexts: OBA is quite similar to OORAM <ref> [3, 22, 33] </ref>, adding analysis context and lacking the flexibility obtained by synthesis of role models. Third, formal approaches have started to appear, OSA [42] being the most notable example. The models include an object-relationship model and object behaviour models, i.e. message sequences and state transitions.
Reference: [4] <editor> F. Van Assche et al. </editor> <title> Information systems development: a rule-based approach. </title> <journal> Knowledge-Based Systems, </journal> <volume> 1(4) </volume> <pages> 227-234, </pages> <year> 1988. </year>
Reference-contexts: This is commonly called target-orientation. The target-orientation of traditional software development methods has been heavily criticized by researchers calling for a more problem-oriented approach <ref> [4, 7, 9, 19, 27, 34] </ref>. <p> This is clearly target-orientation | the analysis technique is chosen to fit in with the following design technique rather than the problem at hand. Two typical examples of knowledge which is hard to capture in a nice object-oriented structure, are: * business rules <ref> [4] </ref>, which tend to be global of nature and thus not easy to encapsulate within one specific class, and * dynamics, e.g. processes | especially to give overviews of system dynamics. <p> Below, these two points will be looked at in more detail. Rules A business rule can be defined as a law or custom which guides the behavior or action of the agents connected to the organization <ref> [4] </ref>. <p> agent, and one of the main motivations for capturing business rules directly in the analysis phase is to make it easier to maintain the computer system, since it then becomes easier to make the necessary changes to the system when the business rules change | as they quite often do <ref> [4] </ref>. Examples of business rules may be: R1: Product A should never be cheaper than prod uct B. R2: When the payment of a bill is two weeks over due, it is required to send a reminder to the customer.
Reference: [5] <author> S. C. Bailin. </author> <title> An object-oriented requirements specification method. </title> <journal> Communications of the ACM, </journal> <volume> 32(5) </volume> <pages> 608-623, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: many cases, such an arrogant attitude towards the way the users reason about their problem-domain is not likely to contribute positively to the development pro cess. * The main motivation for choosing OOA as an analysis technique often seems to be that the subsequent steps are object-oriented design and programming <ref> [5] </ref>, i.e. to avoid a difficult transition from analysis to design. This is clearly target-orientation | the analysis technique is chosen to fit in with the following design technique rather than the problem at hand. <p> Dynamics are scattered | since operations must belong to specific objects, they are necessarily at a low level of detail and they rarely correspond to the tasks that the users perform in their work. This makes it difficult to get an overview of the system dynamics, because <ref> [5] </ref>: * the sequences of operations execution will not be visible, or if made visible, they are usually unwieldy because the operations, in the first place, are only very low level. * Higher level tasks involving operations from several objects, will not be visualized and can only be established by detailed <p> Thus, the dynamic modelling proposed by these approaches are typically bottom-up rather than top-down, which might be useful in some cases, but it is hard to get overview pictures of the system dynamics that way. As admitted in <ref> [5] </ref> the capturing of performance requirements, which may be essential in many applications, is very problematic with object-oriented specifications. And as indicated in the section on business rules, any requirement involving time will be difficult to capture without diving down into implementation detail.
Reference: [6] <author> Mehmet Askit & Lodewijk Bergmans. </author> <title> Obstacles in Object-Oriented Software Development. </title> <booktitle> In In OOPSLA'92 Proceedings, </booktitle> <year> 1992. </year>
Reference-contexts: An important source for general information about the state of the art in OOA, is survey papers such as <ref> [6, 15, 29, 45] </ref>. With these considerations in mind, we now present what we found to be two general claims of OOA, namely: 1. OOA fulfills the purposes of analysis, and 2. OOA has a smooth transition to design.
Reference: [7] <author> A. Borgida et al. </author> <title> Knowledge representation as the basis for requirements specification. </title> <journal> IEEE Computer, </journal> <volume> 18(4) </volume> <pages> 82-91, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: This is commonly called target-orientation. The target-orientation of traditional software development methods has been heavily criticized by researchers calling for a more problem-oriented approach <ref> [4, 7, 9, 19, 27, 34] </ref>.
Reference: [8] <editor> B.Pernici. </editor> <booktitle> Object-Oriented Development, </booktitle> <pages> pages 75-100. </pages> <institution> Universite de Geneve, editor D.Tsichritzis, </institution> <year> 1989. </year>
Reference-contexts: Simple role models can be combined by synthesis operations, thus forming complex structures. In [23] we shows that the technique has promising properties with respect to modeling organizations. Another use of roles can be found in <ref> [8] </ref>. In this model, roles are used for describing object be-haviour as evolution. A class is divided into roles, each role has properties, states, operations, as well as transition rules which define when to change roles.
Reference: [9] <author> J. A. Bubenko jr. </author> <title> On concepts and strategies for requirements and information analysis. </title> <booktitle> In Information Modelling, </booktitle> <pages> pages 125-169. </pages> <publisher> Chartwell-Bratt Ltd., </publisher> <year> 1983. </year>
Reference-contexts: This is commonly called target-orientation. The target-orientation of traditional software development methods has been heavily criticized by researchers calling for a more problem-oriented approach <ref> [4, 7, 9, 19, 27, 34] </ref>.
Reference: [10] <author> Stephen W. Clyde, David W. Embley, and Scott N. Woodfield. </author> <title> Tunable Formalism in Object-Oriented Analysis: Meeting the Needs of both Theoreticians and Practitioners. </title> <booktitle> OOPSLA'92 Proceedings, </booktitle> <year> 1992. </year>
Reference-contexts: The lack of formality is not a problem of object-orientation as such | it is possible to make just as formal methods and languages with this paradigm as with any other, and to some extent this has already been done <ref> [10, 12, 20] </ref>. The lack of formality is thus more a sign of the current immaturity of OOA. More disappointingly, however, most OOA methods do not suggest any manual steps for verification and validation either. In general these problems seem to have been largely ignored by the researchers.
Reference: [11] <author> Peter Coad and Edward Yourdon. </author> <title> Object-Oriented Analysis. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Aspects that we had considered to be analysis such as requirement acquisition and model validation was neglected. Because it is difficult to define exactly what OOA is, we choose to define it in terms of the methods that we evaluated, i.e. <ref> [11, 42, 24, 36, 38, 39] </ref>. We admit that to use a general term such as OOA is not fair to any individual method, but avoiding such a generalization will lead to an incomprehensible amount of details, blurring the issue of this paper.
Reference: [12] <author> Derek Coleman, Fiona Hayes, and Stephen Bear. </author> <title> Introducing Objectcharts or How to Use Statecharts in Object-Oriented Design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(1) </volume> <pages> 9-18, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The lack of formality is not a problem of object-orientation as such | it is possible to make just as formal methods and languages with this paradigm as with any other, and to some extent this has already been done <ref> [10, 12, 20] </ref>. The lack of formality is thus more a sign of the current immaturity of OOA. More disappointingly, however, most OOA methods do not suggest any manual steps for verification and validation either. In general these problems seem to have been largely ignored by the researchers.
Reference: [13] <author> A. M. Davis. </author> <title> Software Requirements Analysis & Specification. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: The purpose of analysis is to model those aspects of the real world which are relevant to the problem <ref> [13] </ref>. Hence, the analysis should concentrate on the requirements, not the solution.
Reference: [14] <author> A. M. Davis et al. </author> <title> A strategy for comparing alternative software development life cycle models. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(8) </volume> <pages> 1453-1461, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Operations can be attached to both types and instances. The model is "alive" at all times and can thus be used as an information system. The life-cycle approach is in the "Adaptable development" category, defined in <ref> [14] </ref>. Within the NSR project the short term goal is to define a common methodology framework in which partner methods can serve as components. The long term goal is to use this framework as a road map for further development and tighter integration of methods and products. <p> Section 5 explain the approach taken in the NSR project. Section 6 briefly outlines some positive trends in OOA. Finally, section 7 gives some concluding remarks. 2 The purposes of analysis and design Analysis and design are common names for two phases of the software life-cycle. As observed in <ref> [14] </ref>, the exact naming of phases may vary between life-cycle models. The traditional waterfall model [35] listed the phases 1) system requirements, 2) software requirements, 3) preliminary design, 4) detailed design, 5) coding, and so on. Of these, 1-2 are commonly referred to as analysis, and 3-4 as design. <p> Still, 1-3 in the fountain model clearly correspond to 1-2 in the waterfall model, and thus to analysis and 4-5 correspond similarly to 3-4 in the waterfall model and thus to design. As observed in <ref> [14] </ref>, the exact boundary between analysis and design is hard to determine. In recent life-cycle models, such as those with evolutionary prototyping and incremental development, the two phases are heavily interleaved | but still, a difference in purpose between analysis and design is recognized in most life-cycle models.
Reference: [15] <institution> Dennis de Champeaux and Penelope Faure. </institution>
Reference-contexts: An important source for general information about the state of the art in OOA, is survey papers such as <ref> [6, 15, 29, 45] </ref>. With these considerations in mind, we now present what we found to be two general claims of OOA, namely: 1. OOA fulfills the purposes of analysis, and 2. OOA has a smooth transition to design. <p> For most OOA/OOD approaches, the difference between analysis and design is not recognized as the difference between the users requirements and the solution, but simply as the difference between "what" and "how". As stated in <ref> [15] </ref>, which is rather mainstream in its definition of OOA: "Analysis is aimed at describing what a target system is supposed to do to obtain an agreement with a customer providing money, while design is aimed at describing how the desired system will work..." Unfortunately, the distinction between what and how
References-found: 15

