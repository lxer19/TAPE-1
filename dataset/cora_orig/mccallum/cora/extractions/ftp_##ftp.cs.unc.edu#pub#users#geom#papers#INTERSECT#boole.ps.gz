URL: ftp://ftp.cs.unc.edu/pub/users/geom/papers/INTERSECT/boole.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/graphics/pubs.html
Root-URL: http://www.cs.unc.edu
Email: krishnas@cs.unc.edu  manocha@cs.unc.edu  
Title: BOOLE: A System to Compute Boolean Combinations of Sculptured Solids  
Author: Shankar Krishnan Atul Narkhede narkhede@c s.unc.edu Dinesh Manocha 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science, University of North Carolina,  
Date: 1995  
Note: Extended abstract appeared in proceedings of ACM symposium on computational geometry,  
Abstract: We present a system to compute Boolean combinations of sculptured solids. The surface of each solid is represented as a collection of trimmed and untrimmed spline surfaces and a connectivity graph. Based on algorithms for trapezoidation of polygons, partitioning of polygons using polygonal chains, surface intersection of high degree spline surfaces and ray-shooting, we compute the boundaries of the resulting solids and its connectivity graph after the Boolean operation. This system has been tested on a number of large scale industrial models, and it performs well. The system can also handle degenerate cases which occur frequently in practice. 
Abstract-found: 1
Intro-found: 1
Reference: [BHHL88] <author> C.L. Bajaj, C.M. Hoffmann, J.E.H. Hopcroft, and R.E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods <ref> [Far86, BHHL88, KPW90] </ref>. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods. The components of an intersection curve consist of boundary segments and closed loops (see fig. 2). <p> These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, they tend to become slow. In terms of tracing, most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm.
Reference: [BK90] <author> R.E. </author> <title> Barnhill and S.N. Kersey. A marching method for parametric surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 257-280, </pages> <year> 1990. </year> <month> 15 </month>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, they tend to become slow. In terms of tracing, most algorithms use the local geometry of the curve coupled with quasi-Newton's methods <ref> [BHHL88, BK90] </ref> for tracing. These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm.
Reference: [CEGS94] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, and M. Sharir. </author> <title> Algorithms for bichromatic line segment problems and polyhedral terrains. </title> <booktitle> Algorithmica II, </booktitle> <pages> pages 116-132, </pages> <year> 1994. </year>
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference: [Far86] <author> R.T. Farouki. </author> <title> The characterization of parametric surface sections. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 33 </volume> <pages> 209-236, </pages> <year> 1986. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods <ref> [Far86, BHHL88, KPW90] </ref>. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods. The components of an intersection curve consist of boundary segments and closed loops (see fig. 2).
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: However, not all the mn pairs would intersect typically. We prune out most of the non-intersecting pairs based on a two-step process. Initially, we compute a 3D-axis aligned bounding box for each patch. Since the Bezier patches have the convex hull property <ref> [Far93] </ref>, the bounding box and convex hull of the control points encloses the entire surface. Therefore, if a pair of bounding boxes do not intersect, the corresponding patches are also non-intersecting. The next stage of pruning uses linear programming. We formulate the linear programming problem as follows.
Reference: [FF92] <author> D.A. Field and R. </author> <title> Field. A new family of curves for industrial applications. </title> <type> Technical report GMR-7571, </type> <institution> General Motors Research Laboratories, </institution> <year> 1992. </year>
Reference-contexts: However, in the presence of small loops or singularities, they tend to become slow. In terms of tracing, most algorithms use the local geometry of the curve coupled with quasi-Newton's methods [BHHL88, BK90] for tracing. These methods do not converge well sometimes <ref> [FF92] </ref> and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. Overall, current tracing algorithms are not considered robust [Sny92].
Reference: [FM84] <author> A. Fournier and D. Y. Montuno. </author> <title> Triangulating simple polygons and equivalent problems. </title> <journal> ACM Trans. Graph., </journal> <volume> 3 </volume> <pages> 153-174, </pages> <year> 1984. </year>
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Balti-more, </address> <year> 1989. </year>
Reference-contexts: Although the singular set is defined in terms of a determinant, we use algorithms based on eigenvalues and singular values for numerical stability. Efficient and accurate algorithms for computing the eigendecomposition and SVD are well known <ref> [GL89] </ref> and good implementations are available as part of numerical libraries like EISPACK and LAPACK. Start Points: The marching algorithm needs start points on each component of the intersection curve. These components can be classified into open and closed components.
Reference: [GLR82] <author> I. Gohberg, P. Lancaster, and L. Rodman. </author> <title> Matrix Polynomials. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, Wei85, RV92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann [Hof89]: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches". <p> In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations [Hof89, RR92, Wei85, RV92]. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann <ref> [Hof89] </ref>: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches". <p> Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90].
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops (see fig. 2). Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [Hoh91, KPP90, ZS93] </ref> based on bounds on gauss maps and subdivision of surfaces. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, they tend to become slow. <p> However, we show that we can use a simple algebraic property that would guide us to some point on every loop. Loop Characterization: We initially use Hohmeyer's algorithm based on Gauss maps and linear programming to check for absence of loops <ref> [Hoh91] </ref>. If the loop detection criterion 6 is not satisfied, we use the algorithm presented below for computing start points on the loops. The intersection curve is an algebraic plane curve in the complex projective plane defined by u and v.
Reference: [Hoh92] <author> M.E. Hohmeyer. </author> <title> Robust and Efficient Intersection for Solid Modeling. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> The main techniques for approximation can be classified into subdivision, analytic and marching methods. Currently, techniques based on marching methods combined with loop detection, handling singularities and component jumping are able to robustly compute the intersections between a pair of surfaces, for non-degenerate intersections <ref> [Hoh92, KM94, SN91] </ref>. In this paper, we present algorithms for representation and computation of Boolean operations on CSG models.
Reference: [KM94] <author> S. Krishnan and D. Manocha. </author> <title> An efficient surface intersection algorithm based on the lower dimensional formulation. </title> <type> Technical Report TR94-062, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1994. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> The main techniques for approximation can be classified into subdivision, analytic and marching methods. Currently, techniques based on marching methods combined with loop detection, handling singularities and component jumping are able to robustly compute the intersections between a pair of surfaces, for non-degenerate intersections <ref> [Hoh92, KM94, SN91] </ref>. In this paper, we present algorithms for representation and computation of Boolean operations on CSG models. <p> the figures displaying intersection curves, we have used spheres of a small constant radius to represent the curve clearly as traced out by the 5 algorithm. 3.1 Intersection Computation The intersection curve in the domain of one of the surfaces is defined as the singular set of the matrix polynomial <ref> [KM94] </ref>. The main advantages of this matrix representation of the intersection curve are in terms of efficiency and accuracy. Although the singular set is defined in terms of a determinant, we use algorithms based on eigenvalues and singular values for numerical stability. <p> Lemma 1 If the intersection curve in the real domain [0; 1] fi [0; 1] consists of a closed component, then two arbitrary complex conjugate paths meet at one of the real points (corresponding to a turning point) on the loop. Proof: <ref> [KM94] </ref> The domain of the intersection curve in the complex space is shown in fig.4. The third axis corresponds to the imaginary components of v. It represents a continuous component of the intersection curve. <p> We use Mike Hohmeyer's implementation of the linear programming algorithm developed by Seidel [Sei90]. 4.1 Intersection Curve between Trimmed Patches In order to compute the intersection curve between the two solids, we compute a series of intersections between pairs of trimmed patches <ref> [KM94] </ref>. Since a trimmed patch is a strict 8 subset of the original patch, then so is any intersection curve that lies inside this patch. We use the algorithm described in the previous section to compute the complete intersection curve of the two patches (ignoring the trimming curves).
Reference: [KPP90] <author> G.A. Kriezis, P.V. Prakash, and N.M. Patrikalakis. </author> <title> Method for intersecting algebraic surfaces with rational polynomial patches. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 22(10) </volume> <pages> 645-654, </pages> <year> 1990. </year>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops (see fig. 2). Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [Hoh91, KPP90, ZS93] </ref> based on bounds on gauss maps and subdivision of surfaces. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, they tend to become slow.
Reference: [KPW90] <institution> G.A. Kriezis, N.M. Patrikalakis, and F.E. </institution> <month> Wolter. </month> <title> Topological and differential equation methods for surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 24(1) </volume> <pages> 41-55, </pages> <year> 1990. </year> <month> 16 </month>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods <ref> [Far86, BHHL88, KPW90] </ref>. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods. The components of an intersection curve consist of boundary segments and closed loops (see fig. 2).
Reference: [KS88] <author> S. Katz and T.W. </author> <title> Sederberg. Genus of the intersection curve of two rational surface patches. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5, </volume> <year> 1988. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero <ref> [KS88] </ref>. Hence, it is very difficult to represent the intersection curve analytically and the current methods are aimed at computing approximations to the intersection curve. The main techniques for approximation can be classified into subdivision, analytic and marching methods.
Reference: [LR80] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> A theoretical development for the computer generation and display of piecewise polynomial surfaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2(1) </volume> <pages> 150-159, </pages> <year> 1980. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods <ref> [LR80] </ref>, interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90]. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88].
Reference: [MD94] <author> D. Manocha and J. Demmel. </author> <title> Algorithms for intersecting parametric and algebraic curves i: simple intersections. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 13(1) </volume> <pages> 73-100, </pages> <year> 1994. </year>
Reference-contexts: Open components have an intersection with one of the boundary curves of the surface as shown in fig.2. These are points on the plane curve where one of the parameter values of the Bezier surface is 0 or 1 and can be computed using eigenvalue methods <ref> [MD94] </ref>. The other components are closed loops. The start points on the open components are computed using curve-surface intersections. The difficulty in identifying start points on closed components lies in the fact that loops (see fig. 3) have no such simple characterization as the one for open components.
Reference: [Nat90] <author> B.K. Natarajan. </author> <title> On computing the intersection of b-splines. </title> <booktitle> In ACM Symposium on Computationl Geometry, </booktitle> <pages> pages 157-167, </pages> <year> 1990. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88].
Reference: [Pat93] <author> N.M. Patrikalakis. </author> <title> Surface-to-surface intersections. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(1) </volume> <pages> 89-95, </pages> <year> 1993. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90].
Reference: [Pra86] <author> M.J. Pratt. </author> <title> Surface/surface intersection problems. </title> <editor> In J.A. Gregory, editor, </editor> <booktitle> The Mathematics of Surfaces II, </booktitle> <pages> pages 117-142, </pages> <address> Oxford, 1986. </address> <publisher> Claredon Press. </publisher>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include <ref> [Pat93, Pra86, Hof89] </ref>. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90].
Reference: [RR87] <author> J.R. Rossignac and A.A.G. Requicha. </author> <title> Piecewise-circular curves for geometric modeling. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 31(3) </volume> <pages> 296-313, </pages> <year> 1987. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation <ref> [RR87] </ref>, analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90]. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods.
Reference: [RR92] <author> A.A.G. Requicha and J.R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, Wei85, RV92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann [Hof89]: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches".
Reference: [RV92] <author> A.A.G. Requicha and H.B. Voelcker. </author> <title> Solid modeling: A historical summary and contemporary assessment. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 2(2) </volume> <pages> 9-24, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, Wei85, RV92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann [Hof89]: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches".
Reference: [Sar83] <author> R F Sarraga. </author> <title> Algebraic methods for intersection. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 22 </volume> <pages> 222-238, </pages> <year> 1983. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic <ref> [Sed83, Sar83] </ref> and marching methods [Far86, BHHL88, KPW90]. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods.
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic [Sny92], lattice evaluation [RR87], analytic <ref> [Sed83, Sar83] </ref> and marching methods [Far86, BHHL88, KPW90]. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: Therefore, the running time is O (mn). By applying these two methods on the two solids, we are left with few pairs of patches that are most likely to intersect. We use Mike Hohmeyer's implementation of the linear programming algorithm developed by Seidel <ref> [Sei90] </ref>. 4.1 Intersection Curve between Trimmed Patches In order to compute the intersection curve between the two solids, we compute a series of intersections between pairs of trimmed patches [KM94].
Reference: [Sei91] <author> R. Seidel. </author> <title> A simple and fast randomized algorithm for computing trapezoidal decompositions and for triangulating polygons. </title> <journal> Computational Geometry Theory & Applications, </journal> <volume> 1(1) </volume> <pages> 51-64, </pages> <year> 1991. </year> <month> 17 </month>
Reference-contexts: If the length of the chain is m, and the sizes of the two polygons are n 1 and n 2 , then this problem can be solved in time O (m (log n 1 + log n 2 )) using O (log n) point location queries <ref> [Sei91] </ref> (see Appendix A). By applying this algorithm on all pairs of patches, we obtain a set of curves in the domain of every patch. Let us consider a single patch F 2 solidA and denote the set of intersection curves lying in F by C F .
Reference: [SN91] <author> T.W. Sederberg and T. Nishita. </author> <title> Geometric hermite approximation of surface patch intersection curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 8 </volume> <pages> 97-114, </pages> <year> 1991. </year>
Reference-contexts: The techniques presented can also be generalized to all algebraic surfaces. Most of the recent work in the literature on Boolean combinations of curved models has focussed on computing the surface intersection between a pair of B-spline or Bezier surfaces <ref> [KS88, SN91, Nat90, Hoh92, MC91, KPW90, BHHL88, BK90, KM94] </ref>. However, the algebraic degree of the resulting curve can typically be very high (up to 324 for a pair of bicubic Bezier surfaces) and the genus is also non-zero [KS88]. <p> The main techniques for approximation can be classified into subdivision, analytic and marching methods. Currently, techniques based on marching methods combined with loop detection, handling singularities and component jumping are able to robustly compute the intersections between a pair of surfaces, for non-degenerate intersections <ref> [Hoh92, KM94, SN91] </ref>. In this paper, we present algorithms for representation and computation of Boolean operations on CSG models. <p> Our approach uses a combination of analytic and marching methods. The components of an intersection curve consist of boundary segments and closed loops (see fig. 2). Start points on the boundary segments are obtained by curve-surface intersections <ref> [SN91] </ref>. Many techniques have appeared over the last few years to detect closed loops on the intersection curve [Hoh91, KPP90, ZS93] based on bounds on gauss maps and subdivision of surfaces. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat.
Reference: [Sny92] <author> J. Snyder. </author> <title> Interval arithmetic for computer graphics. </title> <booktitle> In Proceedings of ACM Sig-graph, </booktitle> <pages> pages 121-130, </pages> <year> 1992. </year>
Reference-contexts: Previous Work: There is a significant body of literature addressing the surface intersection problem. Some recent surveys include [Pat93, Pra86, Hof89]. Surface intersection algorithms can be broadly classified into four major categories: Subdivision methods [LR80], interval arithmetic <ref> [Sny92] </ref>, lattice evaluation [RR87], analytic [Sed83, Sar83] and marching methods [Far86, BHHL88, KPW90]. More recently, techniques have been designed that combine features of different categories and are generally referred to as hybrid methods. Our approach uses a combination of analytic and marching methods. <p> These methods do not converge well sometimes [FF92] and many issues related to choice of step size to prevent component jumping are still open. Therefore, most implementations use very conservative step sizes for tracing and this slows down the algorithm. Overall, current tracing algorithms are not considered robust <ref> [Sny92] </ref>. Main Result: We briefly describe algorithms for efficient computation of surface intersection. Depending on the application requirement, the algorithm can be fine-tuned to provide better robustness guarantees at the expense of execution time. The algorithm has been im 4 plemented using double-precision arithmetic.
Reference: [Wei85] <author> Kevin J. Weiler. </author> <title> Edge-based data structures for solid modeling in curved-surface environments. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 5(1) </volume> <pages> 21-40, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: In particular, there is a lot of interest in building complete solid representations from spline surfaces and their Boolean combinations <ref> [Hof89, RR92, Wei85, RV92] </ref>. However, the major bottleneck is in performing robust, efficient and accurate Boolean operations on the sculptured models. According to Hoffmann [Hof89]: "The difficulty of evaluating and representing the intersection of parametric surface patches has hindered the development of solid modelers that incorporate parametric surface patches".
Reference: [ZS93] <author> A. Zundel and T. </author> <title> Sederberg. Using pyramidal surfaces to detect and isolate surface/surface intersections. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year>
Reference-contexts: The components of an intersection curve consist of boundary segments and closed loops (see fig. 2). Start points on the boundary segments are obtained by curve-surface intersections [SN91]. Many techniques have appeared over the last few years to detect closed loops on the intersection curve <ref> [Hoh91, KPP90, ZS93] </ref> based on bounds on gauss maps and subdivision of surfaces. These algorithms work very well to isolate cases with no loops only if the surfaces are relatively flat. However, in the presence of small loops or singularities, they tend to become slow.
References-found: 34

