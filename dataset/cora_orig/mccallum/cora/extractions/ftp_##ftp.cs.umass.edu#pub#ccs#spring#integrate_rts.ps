URL: ftp://ftp.cs.umass.edu/pub/ccs/spring/integrate_rts.ps
Refering-URL: http://www-ccs.cs.umass.edu/publications.html
Root-URL: 
Email: E-mail: spuri@pegasus.sssup.it  E-mail: stankovic@cs.umass.edu  
Title: How to Integrate Precedence Constraints and Shared Resources in Real-Time Scheduling  
Author: Marco Spuri John A. Stankovic 
Note: This work has been supported in part by the IRI of Italy under a research grant. This work has been written while this author was visiting and supported by the Scuola Superiore "S.Anna" of Pisa, and also supported, in part, by NSF under grants IRI 9208920 and CDA 8922572, and by ONR under grant N00014-92-J-1048.  
Address: via Carducci, 40 56100 Pisa (Italy)  Amherst, MA 01003  
Affiliation: Scuola Superiore "S.Anna"  Department of Computer Science University of Massachusetts  
Abstract: Formal results for precedence constrained, real-time scheduling of unit time tasks are extended to arbitrary timed tasks with preemption. An exact characterisation of the EDF-like schedulers that can be used to transparently enforce precedence constraints among tasks is shown. These extended results are then integrated with a well-known protocol that handles real-time scheduling of tasks with shared resources, but does not consider precedence constraints. This results in schedulability formulas for task sets which allow preemption, shared resources, and precedence constraints, and a practical algorithm for many real-time uniprocessor systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T.P. Baker, </author> <title> "Stack-Based Scheduling of Realtime Processes," </title> <journal> Journal of Real-Time Systems, </journal> <volume> 3, </volume> <year> 1991. </year>
Reference-contexts: Few protocols that handle shared resources have appeared so far <ref> [13, 3, 1, 14] </ref>. Both the Priority Ceiling Protocol [13, 3] and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> Few protocols that handle shared resources have appeared so far [13, 3, 1, 14]. Both the Priority Ceiling Protocol [13, 3] and the Stack Resource Policy <ref> [1] </ref> will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> the dynamic priority ceiling protocol if the following condition is satisfied: n X c i + b i 1; where c i is the worst case execution time, b i is the worst case blocking length and p i is the period of the task T i . 2 Baker <ref> [1] </ref> describes a similar protocol, the Stack Resource Policy (SRP), that handles a more general situation in which multiunit resources, both static and dynamic priority schemes, and sharing of runtime stacks are all allowed. <p> The SRP has been shown to have properties similar to those of the PCP. Furthermore, assuming n tasks ordered by increasing relative deadlines, Baker <ref> [1] </ref> develops a tighter formula for a sufficient schedulability condition (a task, periodic or sporadic, has a relative deadline d if whenever it is released at time t it must be completed before time t + d; of course it must be d p). <p> leave the set S t only at the end of its computation. 2 Note that even in this case we have a form of priority inheritance, that is, "an executing task holding a resource resists preemption as though it inherits the priority of any task that might need that resource" <ref> [1] </ref>. Finally, we show that consistency can be used with the PCP or the SRP and an EDF priority assignment to enforce precedence constraints. <p> Hence, assuming we have ordered all the tasks in the system by increasing relative deadlines, we can use the formula proposed by Baker <ref> [1] </ref> to check the schedulability of the whole set: 8k = 1; : : : ; N @ j=1 d j A + d k where N = P n i=1 j T i j. <p> most B i = max b j ; and, assuming again that the processes are ordered by increasing relative deadlines, the set of schedulability conditions becomes 8k = 1; : : : ; n i=1 D i + D k This formula is very similar to that proposed by Baker <ref> [1] </ref> in his schedulability analysis of the SRP. However, this one is tighter and accounts for groups of 14 tasks with precedence constraints.
Reference: [2] <author> J. Blazewicz, </author> <title> "Scheduling Dependent Tasks with Different Arrival Times to Meet Deadlines," </title> <editor> in E. Gelembe, H. Beilner (eds), </editor> <title> "Modelling and Performance Evaluation of Computer Systems," </title> <publisher> North-Holland, </publisher> <address> Ams-terdam, </address> <year> 1976. </year> <month> 15 </month>
Reference-contexts: However, they have been described using a simple independent task model, while we believe a more complex model including precedence constraints would be valuable. Viceversa, several papers dealing with precedence constraints, but not with shared resources have appeared. Blazewicz <ref> [2] </ref> shows the optimality of a preemptive earliest deadline first (EDF) scheduler assuming the release 2 times and the deadlines are modified according to the partial order among the tasks. The same technique is used by Garey at al. [6] to optimally schedule unit-time tasks. <p> In order to make use of the previous results, we have to enforce the consistency of the release times and the deadlines with the partial order. We can use a technique similar to those which have already appeared in several papers <ref> [2, 6, 12, 4] </ref>. Two different assignments of deadlines to tasks are proposed in this paper. They both guarantee consistency with the given partial order, but they have a different impact in terms of schedulability 12 analysis.
Reference: [3] <author> M. Chen and K. Lin, </author> <title> "Dynamic Priority Ceilings: A Concurrency Con--trol Protocol for Real-Time Systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> 2, </volume> <year> 1990. </year>
Reference-contexts: Few protocols that handle shared resources have appeared so far <ref> [13, 3, 1, 14] </ref>. Both the Priority Ceiling Protocol [13, 3] and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> Few protocols that handle shared resources have appeared so far [13, 3, 1, 14]. Both the Priority Ceiling Protocol <ref> [13, 3] </ref> and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> Finally, in section 5 we conclude with a brief summary. 2 Protocols Handling Shared Resources In [13], Sha et al. introduce the Priority Ceiling Protocol (PCP), an allocation policy for shared resources which works with a Rate Monotonic scheduler [11]. Chen and Lin <ref> [3] </ref> extend the utilization of the protocol to an EDF (earliest deadline first) scheduler. <p> Following the description given in <ref> [3] </ref> the PCP has two parts, which define the priority ceiling of a semaphore and the handling of lock requests: "Ceiling Protocol. <p> Of course, the former property is used to evaluate the worst case blocking times of the tasks. In particular, the schedulability formula of Liu and Lay-land [11] has been extended by Chen and Lin <ref> [3] </ref> to obtain the following condition.
Reference: [4] <author> H. Chetto, M. Silly and T. Bouchentouf, </author> <title> "Dynamic Scheduling of Real-Time Tasks under Precedence Constraints," </title> <journal> Journal of Real-Time Systems, </journal> <volume> 2, </volume> <year> 1990. </year>
Reference-contexts: Blazewicz [2] shows the optimality of a preemptive earliest deadline first (EDF) scheduler assuming the release 2 times and the deadlines are modified according to the partial order among the tasks. The same technique is used by Garey at al. [6] to optimally schedule unit-time tasks. In <ref> [4] </ref>, Chetto et al. show sufficient conditions for the EDF schedulability of a set of tasks, assuming the release times and the deadlines are modified as above. <p> In order to make use of the previous results, we have to enforce the consistency of the release times and the deadlines with the partial order. We can use a technique similar to those which have already appeared in several papers <ref> [2, 6, 12, 4] </ref>. Two different assignments of deadlines to tasks are proposed in this paper. They both guarantee consistency with the given partial order, but they have a different impact in terms of schedulability 12 analysis.
Reference: [5] <author> M.L. Dertouzos, </author> <title> "Control Robotics: the Procedural Control of Physical Processes," </title> <booktitle> Information Processing 74, </booktitle> <publisher> North-Holland Publishing Company, </publisher> <year> 1974. </year>
Reference: [6] <author> M.R. Garey, D.S. Johnson, B.B. Simons and R.E. Tarjan, </author> <title> "Scheduling Unit-Time Tasks with Arbitrary Release Times and Deadlines," </title> <journal> SIAM Journal Comput., </journal> <volume> 10(2), </volume> <month> May </month> <year> 1981. </year>
Reference-contexts: Blazewicz [2] shows the optimality of a preemptive earliest deadline first (EDF) scheduler assuming the release 2 times and the deadlines are modified according to the partial order among the tasks. The same technique is used by Garey at al. <ref> [6] </ref> to optimally schedule unit-time tasks. In [4], Chetto et al. show sufficient conditions for the EDF schedulability of a set of tasks, assuming the release times and the deadlines are modified as above. <p> We do this by inventing the notion of quasi-normality, which is an extension to <ref> [6] </ref>. Furthermore, while the formal results are general, we also present a straightforward application of these results to the Priority Ceiling Protocol (PCP) and the Stack Resource Policy (SRP), developing schedulability formulas that are valid when the SRP is extended to handle both shared resources and precedence constraints. <p> In the rest of this paper we will assume an implementation of the SRP in which priorities are assigned to tasks using an EDF rule. 5 3 Basis For Precedence Constraints Quasi- Normality A nice analytical result concerning the integration of precedence constraints and real-time scheduling can be found in <ref> [6] </ref>. In this paper, Garey et al. describe a scheduling algorithm for unit-time tasks with arbitrary release times and deadlines, and precedence constraints using the concept of normality. Here we extend their idea to more general dynamic systems using preemptive EDF schedulers without unit time constraints. <p> says is that at any time among all those tasks eligible to execute (a task T i is eligible for execution only if the current time t is greater than or equal to the release time r i ), we always schedule the task with the earliest deadline. 6 In <ref> [6] </ref>, Garey et al. show that we can use the consistency of release times and deadlines to integrate precedence constraints into our task model; just use an algorithm that produces normal schedules. This result is proven only for unit-time tasks. <p> In order to make use of the previous results, we have to enforce the consistency of the release times and the deadlines with the partial order. We can use a technique similar to those which have already appeared in several papers <ref> [2, 6, 12, 4] </ref>. Two different assignments of deadlines to tasks are proposed in this paper. They both guarantee consistency with the given partial order, but they have a different impact in terms of schedulability 12 analysis.
Reference: [7] <author> J.R. Jackson, </author> <title> "Scheduling a Production Line to Minimize Maximum Tardiness," </title> <type> Research Report 43, </type> <institution> Management Science Research Project, University of California, </institution> <address> Los Angeles, </address> <year> 1955. </year>
Reference: [8] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft and R. Zainlinger, </author> <title> "Distributed Fault-Tolerant Real-Time Systems: The Mars Approach," </title> <booktitle> IEEE Micro, </booktitle> <month> February </month> <year> 1989. </year>
Reference-contexts: Good examples of this modeling can be found in the MARS operating system <ref> [8, 9] </ref>, in which the basic concept of a real-time transaction is described exactly in this way, and in Mok's kernelized monitor [12], in which a rendezvous construct is used to handle similar situations. In both cases, shared resources among tasks are also considered.
Reference: [9] <author> H. Kopetz, R. Zainlinger, G. Fohler, H. Kantz, P. Puschner and W. Schutz, </author> <title> "The Design of Real-Time Systems: From Specification to Implementation and Verification," </title> <journal> Software Engineering Journal, </journal> <month> May </month> <year> 1991. </year>
Reference-contexts: Good examples of this modeling can be found in the MARS operating system <ref> [8, 9] </ref>, in which the basic concept of a real-time transaction is described exactly in this way, and in Mok's kernelized monitor [12], in which a rendezvous construct is used to handle similar situations. In both cases, shared resources among tasks are also considered.
Reference: [10] <author> E.L. Lawler, </author> <title> "Recent Results in the Theory of Machine Scheduling," Mathematical Programming: the State of the Art, </title> <editor> A. Bachen et al. (eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1983. </year>
Reference: [11] <author> C.L. Liu and J.W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment," </title> <journal> Journal of the ACM, </journal> <volume> 20(1), </volume> <year> 1973. </year>
Reference-contexts: Finally, in section 5 we conclude with a brief summary. 2 Protocols Handling Shared Resources In [13], Sha et al. introduce the Priority Ceiling Protocol (PCP), an allocation policy for shared resources which works with a Rate Monotonic scheduler <ref> [11] </ref>. Chen and Lin [3] extend the utilization of the protocol to an EDF (earliest deadline first) scheduler. <p> Of course, the former property is used to evaluate the worst case blocking times of the tasks. In particular, the schedulability formula of Liu and Lay-land <ref> [11] </ref> has been extended by Chen and Lin [3] to obtain the following condition.
Reference: [12] <author> A.K. Mok, </author> <title> "Fundamental Design Problems of Distributed Systems for the Hard-Real-Time Environment," </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, Cambridge, Massachusetts, </institution> <month> May </month> <year> 1983. </year> <month> 16 </month>
Reference-contexts: Good examples of this modeling can be found in the MARS operating system [8, 9], in which the basic concept of a real-time transaction is described exactly in this way, and in Mok's kernelized monitor <ref> [12] </ref>, in which a rendezvous construct is used to handle similar situations. In both cases, shared resources among tasks are also considered. However, in the former work the whole schedule is statically generated, that is, is produced in advance before the system can run. <p> In order to make use of the previous results, we have to enforce the consistency of the release times and the deadlines with the partial order. We can use a technique similar to those which have already appeared in several papers <ref> [2, 6, 12, 4] </ref>. Two different assignments of deadlines to tasks are proposed in this paper. They both guarantee consistency with the given partial order, but they have a different impact in terms of schedulability 12 analysis.
Reference: [13] <author> L. Sha, R. Rajkumar and J.P. Lehoczky, </author> <title> "Priority Inheritance Proto--cols: An Approach to Real-Time Synchronization," </title> <journal> IEEE Trans. on Computers, </journal> <volume> 39(9), </volume> <year> 1990. </year>
Reference-contexts: Few protocols that handle shared resources have appeared so far <ref> [13, 3, 1, 14] </ref>. Both the Priority Ceiling Protocol [13, 3] and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> Few protocols that handle shared resources have appeared so far [13, 3, 1, 14]. Both the Priority Ceiling Protocol <ref> [13, 3] </ref> and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks. <p> In section 3 the general results on precedence constrained tasks scheduling are presented. In section 4, as an example, we apply the general results to the PCP and the SRP. Finally, in section 5 we conclude with a brief summary. 2 Protocols Handling Shared Resources In <ref> [13] </ref>, Sha et al. introduce the Priority Ceiling Protocol (PCP), an allocation policy for shared resources which works with a Rate Monotonic scheduler [11]. Chen and Lin [3] extend the utilization of the protocol to an EDF (earliest deadline first) scheduler. <p> In what follows we show how these considerations can be applied to a couple of well-known protocols, like the PCP and the SRP (note that the results will not change even when considering a simpler protocol such as the Priority Inheritance Protocol <ref> [13] </ref>). Corollary 4.1 Any schedule produced by the PCP, used with an EDF priority assignment, is quasi-normal. Proof. It is sufficient to prove that at any time the executing task is in S t and then by applying Theorem 4.1 we have the result.
Reference: [14] <author> W. Zhao, K. Ramamritham and J. Stankovic, </author> <title> "Preemptive Scheduling Under Time and Resource Constraints," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-36, No. 8, </volume> <pages> pp. 949-960, </pages> <month> August </month> <year> 1987. </year> <month> 17 </month>
Reference-contexts: Few protocols that handle shared resources have appeared so far <ref> [13, 3, 1, 14] </ref>. Both the Priority Ceiling Protocol [13, 3] and the Stack Resource Policy [1] will be considered in this paper. They are both well studied and characterised with respect to sufficient conditions for the schedulability of a set of tasks.
References-found: 14

