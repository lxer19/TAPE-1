URL: http://www.cs.umd.edu/~hollings/papers/ssr97.ps.gz
Refering-URL: http://www.cs.umd.edu/~hollings/papers/
Root-URL: 
Email: hollings@cs.umd.edu  elm@cs.umbc.edu  
Title: Using Content-Derived Names for Configuration Management  
Author: Jeffrey K. Hollingsworth Ethan L. Miller 
Address: College Park  Baltimore County  
Affiliation: University of Maryland  University of Maryland  
Abstract: Configuration management of compiled software artifacts (programs, libraries, icons, etc.) is a growing problem as sof t-ware reuse becomes more prevalent. For an application co m-posed from reused libraries and modules to function correctly, all of the required files must be available and be the correct version. In this paper, we present a simple scheme to address this pro b-lem: content-derived names (CDNs). Computing an objects name automatically using digital signatures greatly eases the problem of disambiguating multiple versions of an object. By using co n-tent-derived names, developers can ensure that only those sof t-ware components that have been tested together are permitted to run together. 
Abstract-found: 1
Intro-found: 1
Reference: 6. <editor> Conclusion In this paper we have presented a new approach to object code configuration and naming. </editor> <title> Rather than using user-assigned names to identify objects, we proposed to derive object names automatically based on the content of an object. Our scheme makes it possible to identify refe r-ences to the same object even if the objects have completely different names and to differentiate variations of the same object. Our approach is helpful for standalone systems with physical media distribution, and for connected systems u sing network-based software distribution. References </title>
Reference-contexts: Digital signature algorithms such as MD5 <ref> [6] </ref> and SHA-1 [1] are one-way functions that take an arbitrary s e-quence of bytes and produce a result that is likely to be di f-ferent from that of any other (different) input sequence. MD5 is well suited to generate content-derived names. <p> MD5 is well suited to generate content-derived names. The MD5 algorithm produces a 128 bit signature, and Rivest <ref> [6] </ref> claims that it is NP-hard to find another document with an identical signature.
Reference: 1. <institution> Secure Hash Standard , FIPS-180-1, National Institute of Standards and Technology, U.S. Department of Commerce, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Digital signature algorithms such as MD5 [6] and SHA-1 <ref> [1] </ref> are one-way functions that take an arbitrary s e-quence of bytes and produce a result that is likely to be di f-ferent from that of any other (different) input sequence. MD5 is well suited to generate content-derived names.
Reference: 2. <author> J. Gosling, B. Joy, and G. Steele, </author> <title> The Java Language Specification. 1996: </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: No longer is the installer a computer expert; instead, complex systems must be installed by less-experienced users. Automatic install programs provide some assistance in this regard, but ensuring compatibility with previously installed applications is not currently su p-ported. Also, languages such as Java <ref> [2] </ref> allow users to pull classes from many different locations, yet there is no gua r-antee that the files obtained in this way will actually work together. Some files may not work with the latest version of a Java class, instead requiring an older version.
Reference: 3. <author> J. W. Moore, </author> <title> The Use of Encryption to Ensure the Inbtegrity of Reusable Software Components , International Conference on Software Reuse . Nov. </title> <booktitle> 1994, </booktitle> <address> Rio de Janeiro, </address> <pages> pp. 118-123. </pages>
Reference: 4. <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms. 1995: </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The space of all compiled software artifacts is very large, potentially billions of objects. Fortunately, even in this large space, the probability of such a failure is small. The probability that m numbers chosen randomly from a pool of n will be unique is e -m (m-1)/2n <ref> [4] </ref>, where n = 2 128 for MD5. For 10 15 objects, the probability of success (no two objects with different content have the same name) is e -2 29 assuming that object names (hash values) are uniformly di s tributed (which MD-5 ensures).
Reference: 5. <author> D. D. Redell, Y. K. Dalal, T. R. Horsley, H. C. Lauer, W. C. Lynch, P. R. McJones, H. G. Murray, and S. C. Purcell, </author> <title> Pilot: An Operating System for a Personal Computer, </title> <journal> Communications of the ACM , Feb 1980. </journal> <volume> 23 (2), </volume> <pages> pp. 81-92. </pages>
Reference: 6. <author> R. L. Rivest, </author> <title> The MD5 MessageDigest Algorithm , RFC 1321, </title> <institution> Network Working Group, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Digital signature algorithms such as MD5 <ref> [6] </ref> and SHA-1 [1] are one-way functions that take an arbitrary s e-quence of bytes and produce a result that is likely to be di f-ferent from that of any other (different) input sequence. MD5 is well suited to generate content-derived names. <p> MD5 is well suited to generate content-derived names. The MD5 algorithm produces a 128 bit signature, and Rivest <ref> [6] </ref> claims that it is NP-hard to find another document with an identical signature.
Reference: 7. <author> J. D. </author> <title> Touch, Performance Analysis of MD5 , SIGCOMM. </title> <address> Aug 1995, Cambridge, MA, </address> <pages> pp. 77-86. </pages>
Reference-contexts: MD5 is well suited to generate content-derived names. The MD5 algorithm produces a 128 bit signature, and Rivest [6] claims that it is NP-hard to find another document with an identical signature. Touch <ref> [7] </ref> has reported that it is possible to compute MD5 in software at the rate of over 10 MB/second on current RISC workstations; we feel this rate is more than adequate for our proposed use of MD5.
Reference: 8. <author> A. van der Hoek, R. S. Hall, D. Heimbiger, and A. L. Wolf, </author> <title> Software Release Management , CU-CS-806-96, </title> <institution> University of Colorado, </institution> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: To date, little research has addressed this second aspect of configuration management. One not able exception is van der Hoek et al. <ref> [8] </ref>. They address the related problem of software release management by pr o-posing a system to support software acquisition and to e n-sure that the correct versions of dependent packages are acquired with the primary package.
References-found: 9

