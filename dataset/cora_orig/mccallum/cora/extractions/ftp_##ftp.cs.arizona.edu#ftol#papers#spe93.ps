URL: ftp://ftp.cs.arizona.edu/ftol/papers/spe93.ps
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Email: SUMMARY  
Title: Experience with Modularity in Consul  
Author: Shivakant Mishra, Larry L. Peterson, and Richard D. Schlichting 
Keyword: Key words: distributed systems, fault-tolerance, modularity, protocols, objects, dependencies.  
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: The use of modularity in the design and implementation of complex software simplifies the development process, as well as facilitating the construction of customized configurations. This paper describes our experience using modularity in Consul, a communication substrate used for constructing fault-tolerant distributed programs. First, Consul is presented as a case study of how modularity is feasible in both the design and the implementation of such systems. Second, general lessons about modularity in fault-tolerant systems based on our experience with Consul are given. Issues that are addressed include deciding how the system is divided into various modules, dealing with problems that result when protocols are combined, and ensuring that the underlying object infrastructure provides adequate support. The key observation is that the modularization process is most affected by dependencies between modules, both direct dependencies caused by one module explicitly using another's operation and indirect dependencies where one module is affected by another without direct interaction. While our observations are based on designing and implementing Consul, the lessons are applicable to any fault-tolerant distributed system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Mishra, </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: Given that modularity is fundamentally a technique for controlling complexity, its application to software of this type has the potential to reap large benefits. Consul is an example of a fault-tolerant distributed system that uses modularity to address this complexity <ref> [1, 2] </ref>. Like similar systems [3, 4, 5], Consul provides a collection of fault-tolerant services that can be used to construct fault-tolerant applications in a distributed system. <p> This is done by first reading a checkpoint stored by the replica during execution, and then using an automatic replay of messages stored in Psync's context graph to process missing commands. Further details on all these protocols can be found in Reference <ref> [1] </ref>. One of the fundamental problems in designing a modular fault-tolerant system such as Consul is dealing with interactions and dependencies between protocols. Some of these dependencies are directone protocol invokes an operation on another protocol to realize its own functionality.
Reference: [2] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> Consul: A communication substrate for fault-tolerant distributed programs, </title> <type> Tech. Rep. TR 91-32, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1991. </year>
Reference-contexts: Given that modularity is fundamentally a technique for controlling complexity, its application to software of this type has the potential to reap large benefits. Consul is an example of a fault-tolerant distributed system that uses modularity to address this complexity <ref> [1, 2] </ref>. Like similar systems [3, 4, 5], Consul provides a collection of fault-tolerant services that can be used to construct fault-tolerant applications in a distributed system.
Reference: [3] <author> K. Birman, A. Schiper, and P. Stephenson, </author> <title> Lightweight causal and atomic group multicast, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Given that modularity is fundamentally a technique for controlling complexity, its application to software of this type has the potential to reap large benefits. Consul is an example of a fault-tolerant distributed system that uses modularity to address this complexity [1, 2]. Like similar systems <ref> [3, 4, 5] </ref>, Consul provides a collection of fault-tolerant services that can be used to construct fault-tolerant applications in a distributed system. <p> Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul. <p> Fundamentally, each process sends a message in the context of those messages it has already sent or received, a relation that defines a partial ordering on the messages exchanged through the conversation. Psync explicitly maintains the partial order, which has also been called causal order <ref> [3] </ref>, in the form of a directed acyclic graph called a context graph. Psync provides operations for sending and receiving messages, as well as for inspecting the context graph.
Reference: [4] <author> F. Cristian, B. Dancey, and J. Dehn, </author> <title> Fault-tolerance in the Advanced Automation System, </title> <booktitle> in Proceedings of the Twentieth Symposium on Fault-Tolerant Computing, (Newcastle-upon-Tyne, UK), </booktitle> <pages> pp. 6-17, </pages> <month> Jun </month> <year> 1990. </year>
Reference-contexts: Given that modularity is fundamentally a technique for controlling complexity, its application to software of this type has the potential to reap large benefits. Consul is an example of a fault-tolerant distributed system that uses modularity to address this complexity [1, 2]. Like similar systems <ref> [3, 4, 5] </ref>, Consul provides a collection of fault-tolerant services that can be used to construct fault-tolerant applications in a distributed system. <p> Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul.
Reference: [5] <author> D. Powell, ed., Delta-4: </author> <title> A Generic Architecture for Dependable Computing. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Given that modularity is fundamentally a technique for controlling complexity, its application to software of this type has the potential to reap large benefits. Consul is an example of a fault-tolerant distributed system that uses modularity to address this complexity [1, 2]. Like similar systems <ref> [3, 4, 5] </ref>, Consul provides a collection of fault-tolerant services that can be used to construct fault-tolerant applications in a distributed system.
Reference: [6] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> The x-kernel: An architecture for implementing network protocols, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: In Consul, these services have been realized using protocols as the fundamental modules of the system. These protocols are, in turn, implemented as objects in an underlying object infrastructure, in our case, the x-kernel <ref> [6] </ref>. At each level of abstraction, modularity has been retained. 2 This paper makes two contributions. First, it presents a case study of how we realized modularity in the design and implementation of Consul.
Reference: [7] <author> F. Schneider, </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 22, </volume> <pages> pp. 299-319, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Finally, we outline how these protocols were mapped onto a collection of objects in a particular object infrastructure; we call this implementation modularity. 3 Abstract Services From the application's perspective, Consul provides a collection of fault-tolerant services that collectively support the state machine model of distributed computing <ref> [7] </ref>. In this approach, the application maintains state variables that are modified in response to commands received from other state machines. Execution of a command is deterministic and atomic with respect to other commands.
Reference: [8] <author> F. Cristian, </author> <title> Understanding fault-tolerant distributed systems, </title> <journal> Communications of ACM, </journal> <volume> vol. 34, </volume> <pages> pp. 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: For example, the multicast service provides atomic (i.e., all or nothing) message delivery and a consistent ordering among all recipients, which makes it ideal for disseminating commands to state machine replicas. S 2 indicating that the correctness of S 1 depends on the correctness of S 2 <ref> [8] </ref>; the edge labels indicate the property that induces the dependency. At the top of the figure is the state machine that represents the application program; it depends directly on two services: multicast and recovery.
Reference: [9] <author> L. Lamport, </author> <title> Time, clocks, and the ordering of events in a distributed system, </title> <journal> Communications of ACM, </journal> <volume> vol. 21, </volume> <pages> pp. 558-565, </pages> <month> Jul </month> <year> 1978. </year>
Reference-contexts: The time service provides the abstraction of a common time base on all the machines in a distributed system despite the lack of a single physical clock. In Consul, this service is realized using logical clocks <ref> [9] </ref>, and is used by multicast to consistently order messages. Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems [10, 3, 4, 11, 12, 13].
Reference: [10] <author> K. Birman and T. Joseph, </author> <title> Reliable communication in the presence of failures, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 47-76, </pages> <month> Feb </month> <year> 1987. </year>
Reference-contexts: Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul. <p> A more subtle dependency, however, comes from the fact that the agreement algorithm in the Membership protocol is affected by subsequent process failures during its execution. As a result, these functions have been coalesced into a single protocol in many systems <ref> [24, 10] </ref>. For some applications, however, the functionality provided by FailureDetection alone is sufficient to maintain correctness in the presence of failures. <p> This type of membership has been called a monitor service elsewhere [26]. However, like other researchers investigating membership protocols <ref> [10, 24, 27, 28] </ref>, we now recognize that certain applications may desire such a notification to make certain application-level decisions. We are in the process of modifying the interface of Membership to provide this type of user-level notification.
Reference: [11] <author> H. Kopetz and W. Merker, </author> <title> The architecture of MARS, </title> <booktitle> in Proceedings of the Fifteenth Symposium on Fault-Tolerant Computing, </booktitle> <address> (Ann Arbor, Mi), </address> <pages> pp. 274-279, </pages> <month> Jun </month> <year> 1985. </year>
Reference-contexts: Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul.
Reference: [12] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger, </author> <title> Distributed fault-tolerant real-time systems: The Mars approach, </title> <booktitle> IEEE Micro, </booktitle> <pages> pp. 25-40, </pages> <month> Feb </month> <year> 1989. </year>
Reference-contexts: Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul.
Reference: [13] <author> D. Powell, D. Seaton, G. Bonn, P. Verissimo, and F. Waeselynk, </author> <title> The Delta-4 approach to dependability in open distributed computing systems, </title> <booktitle> in Proceedings of the Eighteenth Symposium on Fault-Tolerant Computing, </booktitle> <address> (Tokyo), </address> <month> Jun </month> <year> 1988. </year> <month> 25 </month>
Reference-contexts: Finally, it should be emphasized again that these services are widely recognized as fundamental to the construction of fault-tolerant distributed systems, with variants being used in a large number of systems <ref> [10, 3, 4, 11, 12, 13] </ref>. The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul. <p> The communication network is assumed to be asynchronous, with no bound on the transmission delay for a message between any two machines. Messages may be lost or delivered out-of-order, but it is assumed that they are never corrupted. Furthermore, machines are assumed to suffer fail-silent semantics <ref> [13] </ref>, i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each machine, and that data written to stable storage survives crashes [15].
Reference: [14] <author> S. Mishra and R. D. Schlichting, </author> <title> Abstractions for constructing dependable distributed systems, </title> <type> Tech. Rep. 92-19, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1992. </year>
Reference-contexts: The dependencies are fundamental as well since they are induced by the properties of the services and not by the specific way in which they are realized in Consul. Further discussion of fault-tolerant services, their interrelationships, and the systems that use them can be found 5 in Reference <ref> [14] </ref>. Design Modularity We now turn our attention from the abstract services provided by Consul to the set of protocol modules that realize these services.
Reference: [15] <author> B. Lampson, </author> <title> Atomic transactions, </title> <booktitle> in Distributed SystemsArchitecture and Implementation, </booktitle> <pages> pp. 246-265, </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Furthermore, machines are assumed to suffer fail-silent semantics [13], i.e., they fail by crashing without making any incorrect state transitions. Finally, Consul assumes that stable storage is available to each machine, and that data written to stable storage survives crashes <ref> [15] </ref>.
Reference: [16] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting, </author> <title> Preserving and using context information in interprocess communication, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 7, </volume> <pages> pp. 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: In this figure, the stable storage and network protocols are shaded to indicate that they are provided externally, and hence, assumed by Consul. Psync is the main communication mechanism in Consul <ref> [16] </ref>. It provides a multicast facility 6 that maintains the partial order of messages exchanged in the system. Specifically, it supports a conversation abstraction through which a collection of processes such as the state machine replicas exchange messages.
Reference: [17] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev, </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement, </title> <booktitle> in Proceedings of the Fifteenth International Symposium on Fault-Tolerant Computing, </booktitle> <address> (Ann Arbor, MI), </address> <pages> pp. 200-206, </pages> <month> Jun </month> <year> 1985. </year>
Reference-contexts: To date, we have designed two Order protocols. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [17, 18, 19, 20] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [21].
Reference: [18] <author> M. F. Kaashoek, A. Tanenbaum, S. F. Hummel, and H. Bal, </author> <title> An efficient reliable broadcast protocol, </title> <journal> Operating Systems Review, </journal> <volume> vol. 23, </volume> <pages> pp. 5-19, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: To date, we have designed two Order protocols. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [17, 18, 19, 20] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [21].
Reference: [19] <author> P. M. Melliar-Smith and L. E. Moser, </author> <title> Fault-tolerant distributed systems based on broadcast communication, </title> <booktitle> in Proceedings of the Ninth International Conference on Distributed Computing Systems, </booktitle> <address> (Newport Beach, CA), </address> <pages> pp. 129-134, </pages> <month> Jun </month> <year> 1989. </year>
Reference-contexts: To date, we have designed two Order protocols. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [17, 18, 19, 20] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [21].
Reference: [20] <author> P. Verissimo, L. Rodrigues, and M. Baptista, </author> <title> Amp: A highly parallel atomic multicast protocol, </title> <booktitle> in SIGCOMM'89, </booktitle> <address> (Austin, TX), </address> <pages> pp. 83-93, </pages> <month> Sep </month> <year> 1989. </year>
Reference-contexts: To date, we have designed two Order protocols. One is a consistent total order; when combined with the atomic message delivery guarantees of Psync, this gives the effect of an atomic broadcast <ref> [17, 18, 19, 20] </ref>. The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application [21].
Reference: [21] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> Implementing replicated objects using Psync, </title> <booktitle> in Proceedings of the Eighth Symposium on Reliable Distributed Systems, </booktitle> <address> (Seattle, Washington), </address> <pages> pp. 42-52, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: The other is a semantic dependent order; this takes advantage of the commutativity of the commands encoded in messages to provide an ordering that is less restrictive than total ordering, yet still strong enough to preserve the correctness of the application <ref> [21] </ref>. The FailureDetection and Membership protocols deal with replica failures and recoveries [22]. The FailureDetection protocol monitors replicas for failures.
Reference: [22] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> A membership protocol based on partial order, in Dependable Computing for Critical Applications 2 (J. </title> <editor> F. Meyer and R. D. Schlichting, </editor> <booktitle> eds.), </booktitle> <pages> pp. 309-331, </pages> <address> Vienna: </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The FailureDetection and Membership protocols deal with replica failures and recoveries <ref> [22] </ref>. The FailureDetection protocol monitors replicas for failures. It does this based on message traffic, i.e., if no message is received from some replica in a given interval of time, its failure is suspected and announced to the other replicas.
Reference: [23] <author> S. Ahuja, N. Carriero, and D. Gelernter, </author> <title> Linda and friends, </title> <journal> IEEE Computer, </journal> <volume> vol. 19, </volume> <pages> pp. 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Two small prototype applications have been constructed, a replicated directory server and a replicated word search game; following the completion of the Mach port, Consul will also be used to implement a replicated tuple space for a fault-tolerant version of the Linda coordination language <ref> [23] </ref>. Configuration. The x-kernel provides an object-oriented framework designed to support the rapid implementation of efficient network protocols. It does this by providing a uniform protocol interface and support library that allows the programmer to configure individual protocol objects into a protocol graph that realizes the required functionality.
Reference: [24] <author> J. Chang and N. Maxemchuk, </author> <title> Reliable broadcast protocols, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 251-273, </pages> <month> Aug </month> <year> 1984. </year>
Reference-contexts: A more subtle dependency, however, comes from the fact that the agreement algorithm in the Membership protocol is affected by subsequent process failures during its execution. As a result, these functions have been coalesced into a single protocol in many systems <ref> [24, 10] </ref>. For some applications, however, the functionality provided by FailureDetection alone is sufficient to maintain correctness in the presence of failures. <p> This type of membership has been called a monitor service elsewhere [26]. However, like other researchers investigating membership protocols <ref> [10, 24, 27, 28] </ref>, we now recognize that certain applications may desire such a notification to make certain application-level decisions. We are in the process of modifying the interface of Membership to provide this type of user-level notification.
Reference: [25] <author> H. Garcia-Molina and A. Spauster, </author> <title> Ordered and reliable multicast communication, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 242-271, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Moreover, there are many applications that would benefit from separating these functions into individual modules since they require only a subset of the complete set; for example, certain read-only databases require atomic delivery but not consistent causal ordering <ref> [25] </ref>. Unfortunately, in the case of Psync, we were only beginning to explore the nature of the dependencies between these functions and the benefits of modularity when it was designed and implemented, so it ended up as a single, rather monolithic, protocol.
Reference: [26] <author> P. Verissimo and J. Marques, </author> <title> Reliable broadcast for fault-tolerance on local computer networks, </title> <booktitle> in Proceedings of the Ninth Symposium on Reliable Distributed Systems, </booktitle> <address> (Huntsville, AL), </address> <pages> pp. 54-63, </pages> <month> Oct </month> <year> 1990. </year>
Reference-contexts: A final interface example deals with Membership. Currently, this protocol removes failed processes from the membership list and reincorporates recovered processes, but it does not generate a failure notification event to inform the application about the membership change. This type of membership has been called a monitor service elsewhere <ref> [26] </ref>. However, like other researchers investigating membership protocols [10, 24, 27, 28], we now recognize that certain applications may desire such a notification to make certain application-level decisions. We are in the process of modifying the interface of Membership to provide this type of user-level notification.
Reference: [27] <author> F. Cristian, </author> <title> Agreeing on who is present and who is absent in a synchronous distributed system, </title> <booktitle> in Proceedings of the Eighteenth International Conference on Fault-tolerant Computing, (Tokyo), </booktitle> <pages> pp. 206-211, </pages> <month> Jun </month> <year> 1988. </year>
Reference-contexts: This type of membership has been called a monitor service elsewhere [26]. However, like other researchers investigating membership protocols <ref> [10, 24, 27, 28] </ref>, we now recognize that certain applications may desire such a notification to make certain application-level decisions. We are in the process of modifying the interface of Membership to provide this type of user-level notification.
Reference: [28] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger, </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system, in Dependable Computing for Critical Applications (A. </title> <editor> Avizienis and J. Laprie, </editor> <booktitle> eds.), </booktitle> <pages> pp. 411-429, </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: This type of membership has been called a monitor service elsewhere [26]. However, like other researchers investigating membership protocols <ref> [10, 24, 27, 28] </ref>, we now recognize that certain applications may desire such a notification to make certain application-level decisions. We are in the process of modifying the interface of Membership to provide this type of user-level notification.
Reference: [29] <author> M. Hiltunen and R. D. Schlichting, </author> <title> Modularizing fault-tolerant protocols, </title> <booktitle> in Proceedings of the Fifth SIGOPS European Workshop, </booktitle> <address> (Le Mont Saint-Michel, France), </address> <month> Sept </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: For example, the infrastructure needs 24 to provide for a rich interconnect over which the modules share information. Based on this experi-ence, work is underway to develop a new framework for fault-tolerant protocols that better facilitates modularization <ref> [29] </ref>. ACKNOWLEDGMENTS Thanks to the anonymous referees for their helpful comments. This work has been supported in part by NSF Grant CCR-9003161, ONR Grant N00014-91J-1015, and DARPA Contract DABT63-91-0030.
References-found: 29

