URL: ftp://ftp.cs.huji.ac.il/users/transis/thesis/grisha-msc.ps
Refering-URL: http://www.cs.huji.ac.il/labs/transis/thesis.html
Root-URL: http://www.cs.huji.ac.il
Title: An Adaptive Totally Ordered Multicast Protocol that Tolerates Partitions  
Author: Gregory V. Chockler supervised by Prof. Danny Dolev 
Degree: A thesis submitted in fulfillment of the requirements for the degree of Master of Science by  
Date: October 13, 1997  
Address: Jerusalem, Israel.  
Affiliation: Institute of Computer Science The Hebrew University of Jerusalem  
Abstract-found: 0
Intro-found: 1
Reference: [ACDK97] <author> T. Anker, G. V. Chockler, D. Dolev, and I. Keidar, </author> <title> The Caelum Toolkit for CSCW: The Sky is the Limit, </title> <booktitle> The 3rd International Workshop on Next Generation Information Technologies and Systems, </booktitle> <month> July </month> <year> 1997, </year> <pages> pp. 69-76. </pages>
Reference-contexts: We plan to compare ARTOP performance with various total ordering protocols, including token and sequencer based ones. We also intend to examine the influence of different adaptation algorithms on the protocol's message delivery latency. We are going to incorporate our protocol into the Caelum <ref> [ACDK97] </ref> toolkit designed to support cooperative applications over wide area networks. We will investigate a possibility of using ARTOP as the message multicast engine in multi-media conferencing systems over the Internet. We will study possible applications of the dynamic adaptation paradigm in the group communication framework.
Reference: [ACDV97] <author> Y. Amir, G. V. Chcokler, D. Dolev, and R. Vitenberg, </author> <title> Efficient state transfer in partitionable environments, </title> <booktitle> 2nd European Research Seminar on Advances in Distributed Systems (ERSADS'97), BROADCAST (ESPRIT WG 22455), </booktitle> <institution> Operating Systems Laboratory, Swiss Federal Institute of Technology, Lausanne, </institution> <month> March </month> <year> 1997, </year> <pages> pp. 183-192. </pages>
Reference-contexts: The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). Other applications that can benefit from TOGC are partitionable locally consistent applications <ref> [ACDV97] </ref>, Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc. Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide.
Reference: [Ami95] <author> Y. Amir, </author> <title> Replication Using Group Communication Over a Partitioned Network, </title> <type> Ph.D. thesis, </type> <institution> Institute of Computer Science, The Hebrow University of Jerusalem, Israel, </institution> <year> 1995. </year>
Reference-contexts: TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service [HT93, KD96, FLS97, Mal94] that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service <ref> [Ami95, KD96] </ref> is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). <p> The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., <ref> [MS88, MHS89, Ami95] </ref>). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc. <p> Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems [DM96, MMSA + 96, vRBM96] greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications <ref> [KD96, Ami95, FLS97] </ref> designed to work over TOGC. This led us to the conclusion that the TOGC service should preserve the message ordering semantics throughout the system life time, even at times of partitions. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services <ref> [Ami95, KD96] </ref> and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. In particular, in Section 3.3.2 the following is required: * The same timestamp is attached to a message at every process that delivers the message. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services <ref> [Ami95, KD96] </ref> and sequentially consistent shared memory [FLS97]. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [AMMS + 95] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella, </author> <title> The totem single-ring ordering and membership protocol, </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 13 (1995), no. </volume> <pages> 4. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem <ref> [MMSA + 96, AMMS + 95] </ref>, Transis [DM96], Amoeba [KT96], RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [BDGS95] <author> O. Babaoglu, R. Davoli, L. Giachini, and P. Sabattini, </author> <title> The Inherent Cost of Strong-Partial View Synchronous Communication, </title> <booktitle> Workshop on Distributed Algorithms and Graphs, </booktitle> <year> 1995, </year> <pages> pp. 72-86. </pages>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous.
Reference: [BDM] <author> O. Babaoglu, R. Davoli, and A. Montresor, </author> <title> Failure Detectors, Group Membership and View-Synchronous Communication in Partionable Asynchronous Systems, </title> <type> TR UBLCS95-18, </type> <institution> Department of Computer Science, University of Bologna, Italy. </institution>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous.
Reference: [BFH97] <author> K. Birman, R. Friedman, and M. Hayden, </author> <title> The Maestro Group Manager: A Structuring Tool For Applications With Multiple Quality of Service Requirements, </title> <type> Technical report, </type> <institution> Dept. of Computer Science, Cornell University, </institution> <address> Ithaca, NY 14850, USA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: Among them are multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace and others. Recent works <ref> [RCHS97, CHKD96, BFH97] </ref> demonstrate that group communication is a natural paradigm for implementing networking collaborative work systems. However, performance of algorithms traditionally used to achieve total order is inappropriate in such environments.
Reference: [BSS91] <author> K. P. Birman, A. Schiper, and P. Stephenson, </author> <title> Lightweight Causal and Atomic Group Multicast, </title> <journal> ACM Trans. Comp. Syst. </journal> <volume> 9 (1991), no. 3, </volume> <pages> 272-314. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis <ref> [BSS91] </ref>, Horus [vRBM96], Totem [MMSA + 96, AMMS + 95], Transis [DM96], Amoeba [KT96], RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. <p> This turns to be a challenging issue: It is always possible that there are messages received by two processes just before they disconnect from each other, while these messages' place in the total order has not been negotiated yet. With many existing group communication systems <ref> [BSS91, KT96, WMK95, DKM93] </ref>, such messages may be delivered at different order at different locations. Special care is needed to prevent the occurrence of such situations. In our work this problem is explicitly addressed. <p> Since frequent switching of process status is obviously not efficient, our adaptation policy where messages get priorities according to the distribution of the sender transmission rates is superior. Most of the existing token-based [MMSA + 96] or coordinator-based <ref> [CM84, KT96, WMK95, BSS91] </ref> total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message. <p> In the optimized version of Totem (e.g., the Total protocol in [FvR95a]), the token circulates only among the currently active processes. In order to obtain the token, a passive process has to broadcast the token request. In the coordinator-based protocol of <ref> [BSS91] </ref>, one process is chosen to be the coordinator. The coordinator periodically broadcasts an order message that specifies the order of the messages received by the coordinator so far. Whenever a process wishes to broadcast a message, it broadcasts the message immediately.
Reference: [CHKD96] <author> G. Chockler, N. Huleihel, I. Keidar, and D. Dolev, </author> <title> Multimedia Multicast Transport Service for Groupware, TINA Conference on the Convergence of Telecommunications and Distributed Computing Technologies, </title> <month> September </month> <year> 1996, </year> <note> Full version available as Technical Report CS96-3, </note> <institution> The Hebrew University, Jerusalem, Israel. </institution> <month> 71 </month>
Reference-contexts: Among them are multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace and others. Recent works <ref> [RCHS97, CHKD96, BFH97] </ref> demonstrate that group communication is a natural paradigm for implementing networking collaborative work systems. However, performance of algorithms traditionally used to achieve total order is inappropriate in such environments.
Reference: [CHTCB96] <author> T. D. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost, </author> <title> On the impossibility of group membership, </title> <booktitle> 15th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1996, </year> <pages> pp. 322-330. </pages>
Reference-contexts: It is not even clear how to tell whether a specification is implementable at all; impossibility results such as those in <ref> [CHTCB96] </ref> demonstrate that this is a significant issue." 1.1 Dynamic Adaptation An important contribution of the total ordering protocol described in this work is its ability to dynamically adjust the message delivery flow to changes in the transmission rates of the participating processes. This property is called dynamic adaptation.
Reference: [CM84] <author> J. M. Chang and N. Maxemchuck, </author> <title> Realiable Broadcast Protocols, </title> <journal> ACM Trans. Com-put. Syst. </journal> <volume> 2 (1984), no. 3, </volume> <pages> 251-273. </pages>
Reference-contexts: Since frequent switching of process status is obviously not efficient, our adaptation policy where messages get priorities according to the distribution of the sender transmission rates is superior. Most of the existing token-based [MMSA + 96] or coordinator-based <ref> [CM84, KT96, WMK95, BSS91] </ref> total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message.
Reference: [Cri96] <author> F. Cristian, </author> <title> Group, Majority and Strict Agreement in Timed Asynchronous Distributed Systems, </title> <booktitle> 26th Conference on Fault-Tolerant Computer Systems, </booktitle> <year> 1996, </year> <pages> pp. 178-187. </pages>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous. <p> However, since it is well known that reaching agreement in asynchronous environments prone to the process failures is impossible [FLP85], agreement on a view membership may fail. Many existing vs layers circumvent this impossibility by only guaranteeing to deliver messages during stability periods <ref> [Cri96, FLS97] </ref>. With such guarantees our service is also bound to deliver only messages sent through it at stability periods. Although the liveness of our service depends on the vs layer liveness, the correctness of the service is always preserved.
Reference: [DKM93] <author> D. Dolev, S. Kramer, and D. Malki, </author> <title> Early Delivery Totally Ordered Broadcast in Asynchronous Environments, </title> <booktitle> 23rd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <month> June </month> <year> 1993, </year> <pages> pp. 544-553. </pages>
Reference-contexts: This turns to be a challenging issue: It is always possible that there are messages received by two processes just before they disconnect from each other, while these messages' place in the total order has not been negotiated yet. With many existing group communication systems <ref> [BSS91, KT96, WMK95, DKM93] </ref>, such messages may be delivered at different order at different locations. Special care is needed to prevent the occurrence of such situations. In our work this problem is explicitly addressed. <p> In the All-Ack protocol of [Mal94], messages are delivered only after a message from every member of the group is received. The ToTo protocol of <ref> [DKM93] </ref> is an optimization of All-Ack in which messages are delayed until messages from a majority of group members are received. ToTo achieves good latency if the currently active members of the group form a majority and broadcast messages in nearly the same rates.
Reference: [DM96] <author> D. Dolev and D. Malki, </author> <title> The Transis Approach to High Availability Cluster Communication, </title> <journal> Communications of the ACM 39 (1996), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem [MMSA + 96, AMMS + 95], Transis <ref> [DM96] </ref>, Amoeba [KT96], RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. Recently, the developments in the Internet and fast networking technologies brought to the scene a wide range of collaborative networking applications that have both real time constraints and fault-tolerance semantics. <p> Distributed environments where a group of participants can split into several disjoint partitions and remerge later on are called partitionable environments. Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems <ref> [DM96, MMSA + 96, vRBM96] </ref> greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications [KD96, Ami95, FLS97] designed to work over TOGC. <p> Our protocol, called ARTOP (Adaptive Randomized Total Ordering Protocol), is the first total ordering protocol where the adaptation is done according to the wide range of the transmission rate values. ARTOP was implemented in the framework of the Transis group communication 5 system <ref> [DM96] </ref>. In ARTOP message delivery priorities are assigned according to the distribution of recent process transmission rates, utilizing the locality principle. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q. <p> The second one (see Section 4.3) uses a simple algorithm that implements an adaptation strategy based on the locality principle . We implemented both these protocols and analyzed their performance. Our implementation uses the Causal Multicast service of the Transis <ref> [DM96] </ref> group communication system that satisfies the vs layer specification described in Section 3.4. 4.1 A Non-Adaptive Implementation For every p 2 P , let A p be the automaton such that sig (A p ) = sig (og p ), and for every t 2 traces (A p ), t <p> One possible implementation of the vs layer is the Causal Multicast service of the Transis <ref> [DM96] </ref> group communication system. The I/O automaton corresponding to the Causal Multicast service of Transis is called TCMS (Transis Causal Multicast service). 30 The adaptive implementation of to-gcs, called a-to-gcs, is obtained by composing ARTOP with TCMS.
Reference: [DMS94] <author> D. Dolev, D. Malki, and R. </author> <title> Strong, A Framework for Partitionable Membership Service, </title> <type> TR 94-6, </type> <institution> Inst. of Comp. Sci., The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous.
Reference: [FLP85] <author> M. Fischer, N. Lynch, and M. Paterson, </author> <title> Impossibility of Distributed Consensus with One Faulty Process, </title> <editor> J. </editor> <booktitle> ACM 32 (1985), </booktitle> <pages> 374-382. </pages>
Reference-contexts: If the network partition stabilizes and the partition members agree on their views our protocol guarantees to deliver any message sent through it to every member of the partition. However, since it is well known that reaching agreement in asynchronous environments prone to the process failures is impossible <ref> [FLP85] </ref>, agreement on a view membership may fail. Many existing vs layers circumvent this impossibility by only guaranteeing to deliver messages during stability periods [Cri96, FLS97]. With such guarantees our service is also bound to deliver only messages sent through it at stability periods.
Reference: [FLS97] <author> A. Fekete, N. Lynch, and A. Shvartsman, </author> <title> Specifying and Using a Partionable Group Communication Service, </title> <booktitle> 16th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service <ref> [HT93, KD96, FLS97, Mal94] </ref> that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service [Ami95, KD96] is easily built on top of TOB. <p> TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service [HT93, KD96, FLS97, Mal94] that facilitates the construction of sequentially consistent and atomic shared memory <ref> [FLS97] </ref>. The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). <p> Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems [DM96, MMSA + 96, vRBM96] greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications <ref> [KD96, Ami95, FLS97] </ref> designed to work over TOGC. This led us to the conclusion that the TOGC service should preserve the message ordering semantics throughout the system life time, even at times of partitions. <p> Another important contribution of our work is in using precise mathematical models to accurately specify our service properties, to formulate the environment requirements, to describe the protocol implementation and to carry out rigorous correctness proofs (see Section 1.3 and Chapter 2). As it was pointed out in <ref> [FLS97] </ref> these issues are still the active research area: "The existing specifications of the partitionable group communication service [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] are all complicated, many are difficult to understand, and some seem to be ambiguous. <p> In this work we were guided by the TOGC service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in <ref> [FLS97] </ref> and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast <ref> [KD96, FLS97] </ref>, consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. <p> Keidar and Dolev in [KD96], Fekete et al. in <ref> [FLS97] </ref> and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. In particular, in Section 3.3.2 the following is required: * The same timestamp is attached to a message at every process that delivers the message. <p> This frequently leads to complex, unverifiable specifications and makes it difficult to argue about system correctness and performance. In this work we follow the approach taken by Fekete, Lynch and Shvartsman in <ref> [FLS97] </ref>. We utilize the Input/Output (I/O) automata model of [LT89, Lyn96] in order to precisely specify our service properties, to formulate the environment requirements needed by the service implementation, to describe the implementation of the service and to carry out rigorous correctness proofs. 6 In [FLS97] reliable totally ordered broadcast is <p> Fekete, Lynch and Shvartsman in <ref> [FLS97] </ref>. We utilize the Input/Output (I/O) automata model of [LT89, Lyn96] in order to precisely specify our service properties, to formulate the environment requirements needed by the service implementation, to describe the implementation of the service and to carry out rigorous correctness proofs. 6 In [FLS97] reliable totally ordered broadcast is implemented atop of an abstract centralized I/O automaton, called VS-machine, that provides totally ordered group communication service. In this work we decompose the VS-machine of [FLS97] into three components: the basic virtually synchronous group communication layer that supports fifo multicast, called the vs layer; the <p> the service implementation, to describe the implementation of the service and to carry out rigorous correctness proofs. 6 In <ref> [FLS97] </ref> reliable totally ordered broadcast is implemented atop of an abstract centralized I/O automaton, called VS-machine, that provides totally ordered group communication service. In this work we decompose the VS-machine of [FLS97] into three components: the basic virtually synchronous group communication layer that supports fifo multicast, called the vs layer; the adaptive total ordering protocol, called vstoto-gcs; and the order generator (og) module where the adaptation algorithm is encapsulated. The system components communicate with each other through a well-defined external interface. <p> However, since it is well known that reaching agreement in asynchronous environments prone to the process failures is impossible [FLP85], agreement on a view membership may fail. Many existing vs layers circumvent this impossibility by only guaranteeing to deliver messages during stability periods <ref> [Cri96, FLS97] </ref>. With such guarantees our service is also bound to deliver only messages sent through it at stability periods. Although the liveness of our service depends on the vs layer liveness, the correctness of the service is always preserved. <p> to-gcs-property. to-gcs-property is a collection of sequences over actions of to-gcs system signature. to-gcs-property is motivated by the totally-ordered group communication service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in <ref> [FLS97] </ref> and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast <ref> [KD96, FLS97] </ref>, consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> Keidar and Dolev in [KD96], Fekete et al. in <ref> [FLS97] </ref> and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The safety specification is give as a state machine, called vs-machine. Note that our specification is weaker in several ways from that of <ref> [FLS97] </ref> and also from other specifications found in the literature (e.g., [MAMSA94]). 17 3.4.1 The vs Layer Safety Specification vs-machine The external actions of vs-machine consists of actions of the form gpsnd (m) p , representing the application at p sending a message m, and actions of the form gprcv (m) <p> The first and the second properties together imply that if during the network stability periods vs guarantees to deliver every message sent through it (as it is required in <ref> [FLS97] </ref>), then to-gcs also guarantees to deliver every application message. The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them.
Reference: [FvR95a] <author> R. Friedman and R. van Renesse, </author> <title> Packing Messages as a Tool for Boosting the Perfo-mance of Total Ordering Protocols, </title> <type> TR 95-1527, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message. In the optimized version of Totem (e.g., the Total protocol in <ref> [FvR95a] </ref>), the token circulates only among the currently active processes. In order to obtain the token, a passive process has to broadcast the token request. In the coordinator-based protocol of [BSS91], one process is chosen to be the coordinator.
Reference: [FvR95b] <author> R. Friedman and R. van Renesse, </author> <title> Strong and Weak Virtual Synchrony in Horus, </title> <type> TR 95-1537, </type> <institution> dept. of Computer Science, Cornell University, </institution> <year> 1995. </year>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous.
Reference: [HS95] <author> M. Hiltunen and R. Schlichting, </author> <title> Properties of membership services, </title> <booktitle> 2nd International Symposium on Autonomous Decentralized Systems, </booktitle> <year> 1995, </year> <pages> pp. 200-207. </pages>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous.
Reference: [HT93] <author> V. Hadzilacos and S. Toueg, </author> <title> Fault-Tolerant Broadcasts and Related Problems, chapter in: Distributed Systems (Sape Mullender, </title> <editor> ed.), </editor> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service <ref> [HT93, KD96, FLS97, Mal94] </ref> that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service [Ami95, KD96] is easily built on top of TOB.
Reference: [KD96] <author> I. Keidar and D. Dolev, </author> <title> Efficient Message Ordering in Dynamic Networks, </title> <booktitle> 15th Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 68-77. </pages>
Reference-contexts: TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service <ref> [HT93, KD96, FLS97, Mal94] </ref> that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service [Ami95, KD96] is easily built on top of TOB. <p> TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service [HT93, KD96, FLS97, Mal94] that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service <ref> [Ami95, KD96] </ref> is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). <p> Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems [DM96, MMSA + 96, vRBM96] greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications <ref> [KD96, Ami95, FLS97] </ref> designed to work over TOGC. This led us to the conclusion that the TOGC service should preserve the message ordering semantics throughout the system life time, even at times of partitions. <p> In addition, we require every delivered message to carry a timestamp that is the same at any process that delivers the message and unique system-wide. This requirement is motivated by <ref> [KD96] </ref>. Another important contribution of our work is in using precise mathematical models to accurately specify our service properties, to formulate the environment requirements, to describe the protocol implementation and to carry out rigorous correctness proofs (see Section 1.3 and Chapter 2). <p> In this work we were guided by the TOGC service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in <ref> [KD96] </ref>, Fekete et al. in [FLS97] and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast <ref> [KD96, FLS97] </ref>, consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services <ref> [Ami95, KD96] </ref> and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. In particular, in Section 3.3.2 the following is required: * The same timestamp is attached to a message at every process that delivers the message. <p> We do not know any other group communication system that provides totally ordered multicast that satisfies our timestamp properties which are required by <ref> [KD96] </ref>. <p> group communication service (to-gcs), called to-gcs-property. to-gcs-property is a collection of sequences over actions of to-gcs system signature. to-gcs-property is motivated by the totally-ordered group communication service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in <ref> [KD96] </ref>, Fekete et al. in [FLS97] and Vitenberg et al. in [VKCD97]. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast <ref> [KD96, FLS97] </ref>, consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services <ref> [Ami95, KD96] </ref> and sequentially consistent shared memory [FLS97]. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [KT96] <author> M. F. Kaashoek and A. S. Tanenbaum, </author> <title> An evaluation of the Amoeba group communication system, </title> <booktitle> Proceedings of the 16th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 436-447. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem [MMSA + 96, AMMS + 95], Transis [DM96], Amoeba <ref> [KT96] </ref>, RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. Recently, the developments in the Internet and fast networking technologies brought to the scene a wide range of collaborative networking applications that have both real time constraints and fault-tolerance semantics. <p> This turns to be a challenging issue: It is always possible that there are messages received by two processes just before they disconnect from each other, while these messages' place in the total order has not been negotiated yet. With many existing group communication systems <ref> [BSS91, KT96, WMK95, DKM93] </ref>, such messages may be delivered at different order at different locations. Special care is needed to prevent the occurrence of such situations. In our work this problem is explicitly addressed. <p> The priorities are determined according to the sender's share in system-wide sending activities and reflect the broad spectrum of transmission rate levels. Most existing total ordering protocols do not support the dynamic adaptation at all <ref> [Mal94, KT96, WMK95, PBS89, Pow91] </ref>. Some existing protocols support binary adaptation: i.e., depending on its transmission rate, the process is dynamically assigned with either active or passive status. The right to multicast messages is evenly distributed among all currently active processes. <p> Since frequent switching of process status is obviously not efficient, our adaptation policy where messages get priorities according to the distribution of the sender transmission rates is superior. Most of the existing token-based [MMSA + 96] or coordinator-based <ref> [CM84, KT96, WMK95, BSS91] </ref> total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message.
Reference: [Lam78] <author> L. Lamport, </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System, </title> <journal> Comm. ACM 21 (78), </journal> <volume> no. 7, </volume> <pages> 558-565. 72 </pages>
Reference-contexts: The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design <ref> [Lam78, Sch90, Sch93] </ref> which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc.
Reference: [LT89] <author> N.A. Lynch and M.R. Tuttle, </author> <title> An Introduction to Input/Output Automata, </title> <journal> CWI Quar--terly 2 (1989), </journal> <volume> no. 3, </volume> <pages> 219-246. </pages>
Reference-contexts: This frequently leads to complex, unverifiable specifications and makes it difficult to argue about system correctness and performance. In this work we follow the approach taken by Fekete, Lynch and Shvartsman in [FLS97]. We utilize the Input/Output (I/O) automata model of <ref> [LT89, Lyn96] </ref> in order to precisely specify our service properties, to formulate the environment requirements needed by the service implementation, to describe the implementation of the service and to carry out rigorous correctness proofs. 6 In [FLS97] reliable totally ordered broadcast is implemented atop of an abstract centralized I/O automaton, called <p> We say that sequence s is a prefix of sequence t, written s t, provided that there exists s 0 such that s s 0 = t. 2.2 The I/O Automaton Model We describe safety properties of our services and algorithms using untimed I/O automaton model of Lynch and Tuttle <ref> [LT89] </ref>, also described in Chapter 8 of [Lyn96]. Here, we provide a brief summary of those aspects of the model that are needed for our presentation. 2.2.1 Actions and Action Signatures An I/O automaton models a distributed system component that can interact with other system components. <p> Informally speaking, a safety property can be interpreted as saying that some particular "bad" thing never happens, and a liveness property as saying that some particular "good" thing eventually happens. The formal definitions can be found in <ref> [LT89, Lyn96] </ref>. 11 2.2.7 Proof Methods In this work to prove claims about traces of our protocols, we apply the usual techniques of mathematical proof, such as proof by contradiction or proof by case analysis.
Reference: [Lyn96] <author> N.A. Lynch, </author> <title> Distributed Algorithms, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1996. </year>
Reference-contexts: This frequently leads to complex, unverifiable specifications and makes it difficult to argue about system correctness and performance. In this work we follow the approach taken by Fekete, Lynch and Shvartsman in [FLS97]. We utilize the Input/Output (I/O) automata model of <ref> [LT89, Lyn96] </ref> in order to precisely specify our service properties, to formulate the environment requirements needed by the service implementation, to describe the implementation of the service and to carry out rigorous correctness proofs. 6 In [FLS97] reliable totally ordered broadcast is implemented atop of an abstract centralized I/O automaton, called <p> prefix of sequence t, written s t, provided that there exists s 0 such that s s 0 = t. 2.2 The I/O Automaton Model We describe safety properties of our services and algorithms using untimed I/O automaton model of Lynch and Tuttle [LT89], also described in Chapter 8 of <ref> [Lyn96] </ref>. Here, we provide a brief summary of those aspects of the model that are needed for our presentation. 2.2.1 Actions and Action Signatures An I/O automaton models a distributed system component that can interact with other system components. <p> Informally speaking, a safety property can be interpreted as saying that some particular "bad" thing never happens, and a liveness property as saying that some particular "good" thing eventually happens. The formal definitions can be found in <ref> [LT89, Lyn96] </ref>. 11 2.2.7 Proof Methods In this work to prove claims about traces of our protocols, we apply the usual techniques of mathematical proof, such as proof by contradiction or proof by case analysis. <p> This is usually done by induction on the length of a finite execution generating the given trace. When proving that automaton A satisfies a liveness trace property P , the most common approach is to prove that f airtraces (A) traces (P ) (see Chapter 8 of <ref> [Lyn96] </ref> for a comprehensive survey of proof methods used in the framework of the I/O automata model). 12 Chapter 3 The Adaptive Partitionable Total Ordering Protocol In this chapter we present the specification of the Totally Ordered Group Communication service and describe the adaptive protocol that implements the service using some
Reference: [Mal94] <author> D. Malki, </author> <title> Multicast Communication for High Avalaibility, </title> <type> Ph.D. thesis, </type> <institution> Institute of Computer Science, The Hebrow University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: TOGC is a powerful infrastructure for building distributed fault-tolerant applications. Among them the most important is the totally ordered broadcast (TOB) communication service <ref> [HT93, KD96, FLS97, Mal94] </ref> that facilitates the construction of sequentially consistent and atomic shared memory [FLS97]. The consistent object replication service [Ami95, KD96] is easily built on top of TOB. <p> Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications <ref> [Mal94] </ref>, etc. Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. <p> The priorities are determined according to the sender's share in system-wide sending activities and reflect the broad spectrum of transmission rate levels. Most existing total ordering protocols do not support the dynamic adaptation at all <ref> [Mal94, KT96, WMK95, PBS89, Pow91] </ref>. Some existing protocols support binary adaptation: i.e., depending on its transmission rate, the process is dynamically assigned with either active or passive status. The right to multicast messages is evenly distributed among all currently active processes. <p> Processes dynamically switch between the active and passive states. However, the adaptation achieved by the protocol remains binary and switching between the process states is an expensive operation which is not always justified especially in LANs. In the All-Ack protocol of <ref> [Mal94] </ref>, messages are delivered only after a message from every member of the group is received. The ToTo protocol of [DKM93] is an optimization of All-Ack in which messages are delayed until messages from a majority of group members are received. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [MAMSA94] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal, </author> <title> Extended Virtual Synchrony, </title> <booktitle> Intl. Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1994, </year> <note> Also available as technical report ECE93-22, </note> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <address> CA. </address>
Reference-contexts: As it was pointed out in [FLS97] these issues are still the active research area: "The existing specifications of the partitionable group communication service <ref> [MAMSA94, BDM, BDGS95, Cri96, DMS94, FvR95b, HS95] </ref> are all complicated, many are difficult to understand, and some seem to be ambiguous. <p> In this work we were guided by the TOGC service requirements that were first formulated in the framework of the Extended Virtual Synchrony model <ref> [MAMSA94] </ref> and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in [FLS97] and Vitenberg et al. in [VKCD97]. <p> we present the correctness specification of the totally ordered group communication service (to-gcs), called to-gcs-property. to-gcs-property is a collection of sequences over actions of to-gcs system signature. to-gcs-property is motivated by the totally-ordered group communication service requirements that were first formulated in the framework of the Extended Virtual Synchrony model <ref> [MAMSA94] </ref> and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in [FLS97] and Vitenberg et al. in [VKCD97]. <p> The safety specification is give as a state machine, called vs-machine. Note that our specification is weaker in several ways from that of [FLS97] and also from other specifications found in the literature (e.g., <ref> [MAMSA94] </ref>). 17 3.4.1 The vs Layer Safety Specification vs-machine The external actions of vs-machine consists of actions of the form gpsnd (m) p , representing the application at p sending a message m, and actions of the form gprcv (m) p;q , representing the delivery at q of the message m <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [MHS89] <author> T. Mann, A. Hisgen, and G. Swart, </author> <title> An Algorithm for Data Replication, </title> <type> Report 46, </type> <institution> DEC Systems Research Center, </institution> <year> 1989. </year>
Reference-contexts: The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., <ref> [MS88, MHS89, Ami95] </ref>). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc.
Reference: [MMSA + 96] <author> L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, R. K. Budhia, and C. A. Lingley-Papadopoulos, Totem: </author> <title> A Fault-Tolerant Multicast Group Communication System, </title> <journal> Communications of the ACM 39 (1996), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem <ref> [MMSA + 96, AMMS + 95] </ref>, Transis [DM96], Amoeba [KT96], RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. <p> Distributed environments where a group of participants can split into several disjoint partitions and remerge later on are called partitionable environments. Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems <ref> [DM96, MMSA + 96, vRBM96] </ref> greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications [KD96, Ami95, FLS97] designed to work over TOGC. <p> Since frequent switching of process status is obviously not efficient, our adaptation policy where messages get priorities according to the distribution of the sender transmission rates is superior. Most of the existing token-based <ref> [MMSA + 96] </ref> or coordinator-based [CM84, KT96, WMK95, BSS91] total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. <p> Most of the existing token-based <ref> [MMSA + 96] </ref> or coordinator-based [CM84, KT96, WMK95, BSS91] total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message. In the optimized version of Totem (e.g., the Total protocol in [FvR95a]), the token circulates only among the currently active processes.
Reference: [MS88] <author> K. Marzullo and F. Schmuck, </author> <title> Supplying High Availability with a Standard Network File System, </title> <booktitle> 4th Intl. Conf. Distributed Computing Systems, IEEE, </booktitle> <month> June </month> <year> 1988, </year> <pages> pp. 447-453. </pages>
Reference-contexts: The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design [Lam78, Sch90, Sch93] which is widely used in replicated information systems (e.g., <ref> [MS88, MHS89, Ami95] </ref>). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc.
Reference: [PBS89] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting, </author> <title> Preserving and Using Context Information in Interprocess Communication, </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 7 (89), no. 3, </volume> <pages> 217-246. </pages>
Reference-contexts: The priorities are determined according to the sender's share in system-wide sending activities and reflect the broad spectrum of transmission rate levels. Most existing total ordering protocols do not support the dynamic adaptation at all <ref> [Mal94, KT96, WMK95, PBS89, Pow91] </ref>. Some existing protocols support binary adaptation: i.e., depending on its transmission rate, the process is dynamically assigned with either active or passive status. The right to multicast messages is evenly distributed among all currently active processes.
Reference: [Pow91] <author> D. Powell, Delta-4: </author> <title> A Generic Architecture for Dependable Distributed Computing, </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem [MMSA + 96, AMMS + 95], Transis [DM96], Amoeba [KT96], RMP [WMK95], Delta-4 <ref> [Pow91] </ref> is only a partial list of systems that support TOGC. Recently, the developments in the Internet and fast networking technologies brought to the scene a wide range of collaborative networking applications that have both real time constraints and fault-tolerance semantics. <p> The priorities are determined according to the sender's share in system-wide sending activities and reflect the broad spectrum of transmission rate levels. Most existing total ordering protocols do not support the dynamic adaptation at all <ref> [Mal94, KT96, WMK95, PBS89, Pow91] </ref>. Some existing protocols support binary adaptation: i.e., depending on its transmission rate, the process is dynamically assigned with either active or passive status. The right to multicast messages is evenly distributed among all currently active processes.
Reference: [RCHS97] <author> I. Rhee, S. Cheung, P. Hutto, and V. Sunderam, </author> <title> Group Communication Support for Distributed Multimedia and CSCW Systems, </title> <booktitle> 17th Intl. Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1997, </year> <note> Also available as technical report of Dept. </note> <institution> of Mathematics Computer Science, Emory University, </institution> <address> Atlanta, GA 30322. </address>
Reference-contexts: Among them are multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace and others. Recent works <ref> [RCHS97, CHKD96, BFH97] </ref> demonstrate that group communication is a natural paradigm for implementing networking collaborative work systems. However, performance of algorithms traditionally used to achieve total order is inappropriate in such environments.
Reference: [RFV96] <author> L. E. T. Rodrigues, H. Fonseca, and P. Verissimo, </author> <title> Totally ordered multicast in large-scale systems, </title> <booktitle> Proceedings of the 16th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 503-510. </pages>
Reference-contexts: This results in high latency in message delivery. Another approach used by sequencer or token based protocols involves the extra messages (order messages or token requests) and therefore, less efficient under high loads <ref> [RFV96] </ref>. Moreover, most of the sequencer based protocols fail to provide sound semantics at times of network partitions (see below). <p> The protocol allows for some degree of adaptivity: if a process other than the coordinator becomes much more active than the coordinator, the coordinator responsibilities are passed to this active process. In the Hybrid protocol of <ref> [RFV96] </ref> assignment of the process status (active or passive) is determined according to more complex criteria: active processes run a decentralized protocol and passive processes run token-based one. Processes determine whether they are active or passive according to their transmission rates and the network delay.
Reference: [Rod91] <author> Tom Rodden, </author> <title> A survey of CSCW systems, </title> <booktitle> Interacting with Computers 3 (1991), </booktitle> <volume> no. 3, </volume> <pages> 319-353. </pages>
Reference-contexts: Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) <ref> [Rod91] </ref> applications, distributed monitoring and display applications [Mal94], etc. Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide.
Reference: [Sch90] <author> F. B. Schneider, </author> <title> Implementing fault-tolerant services using the state-machine approach : A tutorial, </title> <journal> Computing Surveys 22 (1990), </journal> <volume> no. 4, </volume> <pages> 299-319. </pages>
Reference-contexts: The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design <ref> [Lam78, Sch90, Sch93] </ref> which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc.
Reference: [Sch93] <author> F. B. Schneider, </author> <title> Replication Management Using the State Machine Approach, chapter in: Distributed Systems (Sape Mullender, </title> <editor> ed.), </editor> <publisher> ACM Press, </publisher> <year> 1993. </year> <month> 73 </month>
Reference-contexts: The consistent object replication service [Ami95, KD96] is easily built on top of TOB. The sequentially consistent shared memory is at the heart of the "Replicated State Machine" approach to distributed design <ref> [Lam78, Sch90, Sch93] </ref> which is widely used in replicated information systems (e.g., [MS88, MHS89, Ami95]). Other applications that can benefit from TOGC are partitionable locally consistent applications [ACDV97], Computer Supported Cooperative Work (CSCW) [Rod91] applications, distributed monitoring and display applications [Mal94], etc.
Reference: [VKCD97] <author> R. Vitenberg, I. Keidar, G. V. Chockler, and D. Dolev, </author> <title> Formal Specifications of Dis--tributed Group Communication, </title> <type> Tech. report, </type> <institution> Inst. of Comp. Sci., The Hebrew University of Jerusalem, </institution> <year> 1997, </year> <note> In preparation. </note>
Reference-contexts: In this work we were guided by the TOGC service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in [FLS97] and Vitenberg et al. in <ref> [VKCD97] </ref>. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. In this work we concentrate on the message ordering semantics needed by partitionable applications. <p> sequences over actions of to-gcs system signature. to-gcs-property is motivated by the totally-ordered group communication service requirements that were first formulated in the framework of the Extended Virtual Synchrony model [MAMSA94] and subsequently elaborated by Keidar and Dolev in [KD96], Fekete et al. in [FLS97] and Vitenberg et al. in <ref> [VKCD97] </ref>. The properties stated in these papers were proven to be useful for development of such services as reliable totally ordered broadcast [KD96, FLS97], consistent object replication services [Ami95, KD96] and sequentially consistent shared memory [FLS97]. <p> The third property ensures that if the vs layer provides additional liveness guarantees at times of new view installations, then the vstoto-gcs protocol will consent them. The following are two examples of useful liveness guarantees that view synchronous group communication systems (e.g., <ref> [MAMSA94, KD96, VKCD97, DM96, AMMS + 95, Mal94, Ami95] </ref>) are often required to satisfy: Self Delivery: Every process p eventually delivers every message sent at p. View Synchrony Liveness: Let v and v 0 be two consecutive views reported at processes p and q.
Reference: [vRBM96] <author> R. van Renesse, K. P. Birman, and S. Maffeis, Horus: </author> <title> A Flexible Group Communication System, </title> <journal> Communications of the ACM 39 (1996), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus <ref> [vRBM96] </ref>, Totem [MMSA + 96, AMMS + 95], Transis [DM96], Amoeba [KT96], RMP [WMK95], Delta-4 [Pow91] is only a partial list of systems that support TOGC. <p> Distributed environments where a group of participants can split into several disjoint partitions and remerge later on are called partitionable environments. Applications designed to work in partitionable environments (e.g., a vast majority of wide area network applications) are called partitionable applications. Partitionable totally ordered group communication systems <ref> [DM96, MMSA + 96, vRBM96] </ref> greatly facilitate the development of such applications. We carefully analyzed the requirements imposed by some well-known partitionable applications [KD96, Ami95, FLS97] designed to work over TOGC.
Reference: [WMK95] <author> B. Whetten, T. Montgomery, and S. Kaplan, </author> <title> A high perfomance totally ordered mul-ticast protocol, </title> <booktitle> Theory and Practice in Distributed Systems: International Workshop (K. </booktitle> <editor> P. Birman, F. Mattern, and A. Schipper, eds.), </editor> <publisher> Springer, </publisher> <year> 1995, </year> <booktitle> Lecture Notes in Computer Science 938, </booktitle> <pages> pp. 33-57. 74 </pages>
Reference-contexts: Due to its importance for the distributed computing, TOGC inspired a great number of research projects in universities and research institutions world-wide. Isis [BSS91], Horus [vRBM96], Totem [MMSA + 96, AMMS + 95], Transis [DM96], Amoeba [KT96], RMP <ref> [WMK95] </ref>, Delta-4 [Pow91] is only a partial list of systems that support TOGC. Recently, the developments in the Internet and fast networking technologies brought to the scene a wide range of collaborative networking applications that have both real time constraints and fault-tolerance semantics. <p> This turns to be a challenging issue: It is always possible that there are messages received by two processes just before they disconnect from each other, while these messages' place in the total order has not been negotiated yet. With many existing group communication systems <ref> [BSS91, KT96, WMK95, DKM93] </ref>, such messages may be delivered at different order at different locations. Special care is needed to prevent the occurrence of such situations. In our work this problem is explicitly addressed. <p> The priorities are determined according to the sender's share in system-wide sending activities and reflect the broad spectrum of transmission rate levels. Most existing total ordering protocols do not support the dynamic adaptation at all <ref> [Mal94, KT96, WMK95, PBS89, Pow91] </ref>. Some existing protocols support binary adaptation: i.e., depending on its transmission rate, the process is dynamically assigned with either active or passive status. The right to multicast messages is evenly distributed among all currently active processes. <p> Since frequent switching of process status is obviously not efficient, our adaptation policy where messages get priorities according to the distribution of the sender transmission rates is superior. Most of the existing token-based [MMSA + 96] or coordinator-based <ref> [CM84, KT96, WMK95, BSS91] </ref> total ordering protocols can be optimized to support binary adaptation. For example, in the token-based Totem protocol [MMSA + 96], there is a logical token that circulates among the participating processes. Only the current token holder is allowed to multicast a message.
References-found: 41

