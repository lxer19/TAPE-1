URL: http://thira.cs.ucla.edu/cchen/publication/ddlp_98.ps
Refering-URL: http://www.cs.ucla.edu/~cchen/research.html
Root-URL: http://www.cs.ucla.edu
Email: cchen@cs.ucla.edu zaniolo@cs.ucla.edu  
Title: Universal Temporal Data Languages  
Author: Cindy Xinmin Chen and Carlo Zaniolo 
Address: Los Angeles Los Angeles, CA 90095  
Affiliation: Computer Science Department University of California at  
Abstract: Temporal reasoning and temporal query languages present difficult research challenges, which are slowly yielding to the combined attack of many investigations motivated by the theoretical interest and practical import of the problem. In this paper, we subscribe to TSQL2 insofar as practical requirements for a query language are concerned, but we propose a solution that overcomes its shortcomings, particularly the lack of universality whereby TSQL2 temporal extensions can not be easily applied to other query languages, such as QBE and Datalog. In this paper, we use Datalog as a framework to develop a new language | Temporal Data Language (TDL). To support our claim of universality, we argue that TDL constructs and semantics can be directly applied to derive temporal extensions of languages, such as QBE and SQL. Finally, we evaluate alternative approaches to the implementation of TDL, using as the basis for implementation the LDL++ system with extended aggregates developed at UCLA. 
Abstract-found: 1
Intro-found: 1
Reference: [All83] <author> J. F. Allen. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> In Communications of the ACM, </journal> <volume> Vol. 26, No. 11, </volume> <pages> pages 832-843, </pages> <year> 1983 </year>
Reference-contexts: Our approach is different from Toman's [Tom97, Tom98] approach in several respects. Our main advance (w.r.t. Toman's approach) is that TDL uses aggregates to capture and express naturally all new complex temporal constructs used by TSQL2, including restructuring, partitioning, and Allen's temporal operators <ref> [All83] </ref>. In summary, the defining features of our new approach are: 1. Explicit valid time 2. Point-based representation 3. No additional construct (other than new temporal aggregates) 4. Efficient implementation by mapping point-based data model into equivalent internal representations.
Reference: [BCS96] <author> M. H. Bohlen, J. Chomicki, R. T. Snodgrass and D. Toman. </author> <title> Querying TSQL2 Databases with Temporal Logic. </title> <booktitle> In Proceedings of the 5th Conference on Extended Database Technology, </booktitle> <pages> pages 325-341, </pages> <year> 1996 </year> <month> 134 </month>
Reference: [BSS96] <author> M. H. Bohlen, R. T. Snodgrass and M. D. Soo. </author> <title> Coalescing in Temporal Databases. </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Databases, </booktitle> <pages> pages 180-191, </pages> <year> 1996 </year>
Reference: [BBJ98] <author> M. H. Bohlen, R. Busatto and C. S. Jensen. </author> <title> Point- Versus Interval-based Temporal Data Models. </title> <booktitle> In Proceedings of the 14th International Conference on Data Engineering, </booktitle> <pages> pages 192-200, </pages> <year> 1998 </year>
Reference: [Cho93] <author> J. Chomicki. </author> <title> Temporal Databases. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 1-16, </pages> <year> 1993 </year>
Reference: [DD93] <author> C. J. Date and H. Darwen. </author> <title> A Guide to the SQL Standard, third edition, </title> <publisher> Addison-Wesley, </publisher> <year> 1993 </year>
Reference-contexts: One of the basic temporal data types supported in TDL is DATE: time-point with granularity of days, which is basically the same as SQL-92's datetime <ref> [DD93] </ref>. In TDL, DATE is a complex term which consists of three integers | "YEAR", "MONTH" and "DAY", whose values are constrained by the rules of the Gregorian Calendar. We now express the previous TSQL2 examples in TDL: 1.
Reference: [FMM96] <author> S. J. Finkelstein, N. Mattos, I. S. Mumick and H. Pirahesh. </author> <title> Expressing Recursive Queries in SQL. </title> <address> ISO/IEC JTC 1/SC 21/WG 3 DBL:MCI Rep. X3H2-96-075, </address> <year> 1996 </year>
Reference: [Jen94] <author> C. S. Jensen, et al. </author> <title> A Consensus Glossary of Temporal Database Concepts. </title> <booktitle> In SIG-MOD Record, </booktitle> <volume> Vol. 23, No. 1, </volume> <pages> pages 52-64, </pages> <year> 1994 </year>
Reference: [LM97] <author> N. A. Lorentzos and Y. G. Mitsopoulos. </author> <title> SQL Extension for Interval Data. </title> <journal> In IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 9, No. 3, </volume> <pages> pages 480-499, </pages> <year> 1997 </year>
Reference: [MZ97] <author> I. Motakis and C. Zaniolo. </author> <title> Temporal Aggregation in Active Database Rules. </title> <booktitle> In SIG-MOD Record, </booktitle> <volume> Vol. 26, No. 2, </volume> <pages> pages 440-451, </pages> <year> 1997 </year>
Reference-contexts: If no deletion tuple of a fact exists, then the assumed "until changed", i.e., until the default value. The event-based implementation retains the advantages of the interval-based implementation and has a closer relationship with composite event specification languages and provides an opportunity to combine active rules with temporal databases <ref> [MZ97] </ref>. 6 Conclusion We have shown that TDL is a natural temporal extension of Datalog. The same approach is also applicable to SQL and QBE.
Reference: [NT89] <author> S. Naqvi and S. Tsur. </author> <title> A Logical Language For Data And Knowledge Bases, </title> <publisher> Computer Science Press, </publisher> <year> 1989 </year>
Reference: [Sno95] <author> R. T. Snodgrass, et al. </author> <title> The TSQL2 Temporal Query Language, </title> <publisher> Kluwer, </publisher> <year> 1995 </year>
Reference: [Tan93] <author> A. Tansel, et al. </author> <title> Temporal Databases: theory, design and implementation, </title> <address> Ben-jamin/Cumming, </address> <year> 1993 </year>
Reference: [Tom96] <author> D. Toman. </author> <title> Point vs. Interval-based Query Languages for Temporal Databases. </title> <booktitle> In Proceedings of the 15th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages, 58-67, </pages> <year> 1996 </year>
Reference: [Tom97] <author> D. Toman. </author> <title> A Point-Based Temporal Extension of SQL. </title> <booktitle> In Proceedings of the 6th International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 103-121, </pages> <year> 1997 </year>
Reference-contexts: Therefore, our approach to temporal extensions will be based on explicit time. To represent explicit time, we adopt a point-based representation at the conceptual level. As shown in <ref> [Tom97, Tom98] </ref>, this representation offers the important advantage that select-project-join queries are expressed in a very natural way, without requiring the (implicit-or-explicit) coalescing demanded by interval-based temporal languages. <p> Therefore, our proposal takes full advantage of the three level DB architecture proposed by ANSI/SPARC, with an internal representation, a conceptual one, and an external one. Our approach is different from Toman's <ref> [Tom97, Tom98] </ref> approach in several respects. Our main advance (w.r.t. Toman's approach) is that TDL uses aggregates to capture and express naturally all new complex temporal constructs used by TSQL2, including restructuring, partitioning, and Allen's temporal operators [All83]. In summary, the defining features of our new approach are: 1. <p> The newly named aggregates are nevertheless important because of their significance to the user, and because they enable more efficient implementations. Thus, they provide significant practical advantages beyond those offered by TSQL/TP <ref> [Tom97] </ref>. In general, the TDL approach offers two significant benefits: * Since aggregates in Datalog have a standard declarative logic-based semantics [WZ98] (i.e., least-model and least-fix-point based) TDL inherits elegant formal semantics of these languages. * All database query languages, such as SQL and QBE, have aggregate constructs. <p> The same approach is also applicable to SQL and QBE. We used a point-based data model at the conceptual level and took the point-based reasoning approach beyond that of TSQL/TP <ref> [Tom97, Tom98] </ref> by using aggregates to express queries reasoning on time periods. TDL has the same standard declarative logic-based semantics as Datalog and provides a universal approach to solve the problem of extending conventional database query languages, such as SQL, QBE and Datalog, to express temporal queries.
Reference: [Tom98] <author> D. Toman. </author> <title> Point-Based Temporal Extensions of SQL and their Efficient Implementation. </title> <booktitle> To appear in Proceedings of Dagstuhl Workshop on Temporal Databases, </booktitle> <year> 1998 </year>
Reference-contexts: Therefore, our approach to temporal extensions will be based on explicit time. To represent explicit time, we adopt a point-based representation at the conceptual level. As shown in <ref> [Tom97, Tom98] </ref>, this representation offers the important advantage that select-project-join queries are expressed in a very natural way, without requiring the (implicit-or-explicit) coalescing demanded by interval-based temporal languages. <p> Therefore, our proposal takes full advantage of the three level DB architecture proposed by ANSI/SPARC, with an internal representation, a conceptual one, and an external one. Our approach is different from Toman's <ref> [Tom97, Tom98] </ref> approach in several respects. Our main advance (w.r.t. Toman's approach) is that TDL uses aggregates to capture and express naturally all new complex temporal constructs used by TSQL2, including restructuring, partitioning, and Allen's temporal operators [All83]. In summary, the defining features of our new approach are: 1. <p> The same approach is also applicable to SQL and QBE. We used a point-based data model at the conceptual level and took the point-based reasoning approach beyond that of TSQL/TP <ref> [Tom97, Tom98] </ref> by using aggregates to express queries reasoning on time periods. TDL has the same standard declarative logic-based semantics as Datalog and provides a universal approach to solve the problem of extending conventional database query languages, such as SQL, QBE and Datalog, to express temporal queries.
Reference: [WZ98] <author> H. Wang and C. Zaniolo. </author> <title> User-Defined Aggregates for Logical Data Languages. </title> <note> submitted to DDLP'98, </note> <year> 1998 </year>
Reference-contexts: Thus, they provide significant practical advantages beyond those offered by TSQL/TP [Tom97]. In general, the TDL approach offers two significant benefits: * Since aggregates in Datalog have a standard declarative logic-based semantics <ref> [WZ98] </ref> (i.e., least-model and least-fix-point based) TDL inherits elegant formal semantics of these languages. * All database query languages, such as SQL and QBE, have aggregate constructs.
Reference: [Zan88] <author> C. Zaniolo. </author> <title> Design and Implementation of a Logic Based Language for Data Intensive Applications. </title> <booktitle> In Proceedings of the International Conference on Logic Programming, </booktitle> <year> 1988 </year>
Reference: [ZAO93] <author> C. Zaniolo, N. Arni and K. Ong. </author> <title> Negation and Aggregates in Recursive Rules: the LDL++ Approach. </title> <booktitle> In Proceedings of the 3rd International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 204-221, </pages> <year> 1993 </year>
Reference: [ADS97] <author> C. Zaniolo, S. Ceri, C. Faloutsos, R. Snodgrass, and R. Zicari, </author> <title> Advanced Database Systems, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1997 </year> <month> 135 </month>
References-found: 20

