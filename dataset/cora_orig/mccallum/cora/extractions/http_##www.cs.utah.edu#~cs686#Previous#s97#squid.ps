URL: http://www.cs.utah.edu/~cs686/Previous/s97/squid.ps
Refering-URL: http://www.cs.utah.edu/~cs686/Previous/s97/
Root-URL: 
Title: ICP and the Squid Web Cache  
Author: Duane Wessels k claffy 
Date: January 30, 1997  
Abstract: We describe the structure and functionality of the Internet Cache Protocol (ICP) and its implementation in the Squid Web Caching software. We also present some background on the history, and discuss successes, failures, and lessons learned from using ICP to deploy a global Web cache hierarchy.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bowman, Danzig, Hardy, Manber, Schwartz, and Wessels, "Harvest: </author> <title> A scalable, customizable discovery and access system.," </title> <type> Tech. Rep. </type> <institution> CU-CS-732-94, Department of Computer Science, University of Colorado, </institution> <month> August </month> <year> 1994. </year> <note> ftp://ftp.cs.colorado.edu/pub/cs/techreports/ schwartz/Harvest.Jour.ps.Z. </note>
Reference-contexts: ICP is designed to be an object location protocol. It is not an object transport protocol, such as HTTP. In section 3, we describe the ICP protocol format. The ICP protocol originated during the development of the caching component of the Harvest project <ref> [1] </ref>. Since that time it has been slowly evolving, in two different implementations. Towards the end of 1995, our group picked up the Harvest cache software and started developing a new version, called Squid [2].
Reference: [2] <author> D. Wessels, </author> <title> "Squid internet object cache." </title> <address> http://squid.nlanr.net/. </address>
Reference-contexts: The ICP protocol originated during the development of the caching component of the Harvest project [1]. Since that time it has been slowly evolving, in two different implementations. Towards the end of 1995, our group picked up the Harvest cache software and started developing a new version, called Squid <ref> [2] </ref>. Around that same time, other members of the Harvest project formed a company to offer a commercial-strength version of the cache. Section 2 describes the history and evolution of ICP from its Harvest inception.
Reference: [3] <author> A. Chankhunthod, P. B. Danzig, C. Neerdaels, M. F. Schwartz, and K. J. Worrell, </author> <title> "A hierarchical internet object cache," </title> <type> Tech. Rep. 95-611, </type> <institution> University of Southern California, </institution> <month> March </month> <year> 1995. </year> <note> http://catarina.usc. edu/danzig/cache.ps. </note>
Reference-contexts: Researchers at the University of Southern California and the University of Colorado developed the first version of the hierarchical Web caching software in 1994 <ref> [3] </ref>. The Harvest web cache software (called Cached ) began to acquire real users during 1995. Late that year, development slowed considerably as project members migrated toward industry jobs.
Reference: [4] <author> T. Berners-Lee et al., </author> <title> "Uniform resource locators (URL)," Network Working Group RFC 1738, </title> <month> December </month> <year> 1994. </year> <note> http://ds.internic. net/rfc/rfc1738.txt. </note>
Reference-contexts: standardize ICP for interoperability among multiple cache implementations. 2 http://www.nlanr.net/Cache/ 3 http://squid.nlanr.net 3 REQUEST NUMBER OPTIONS PADDING SENDER HOST ADDRESS PACKET LENGTH 0 31 OPCODE VERSION 3 The Protocol An ICP message consists of a fixed, 20-octet header plus a variable-sized payload, the latter of which typically contains a URL <ref> [4] </ref>. Figure 1 shows the ICP message format; all fields are represented in network byte order. 4 * OPCODE: indicates the type of message.
Reference: [5] <author> D. Wessels and K. Claffy, </author> <title> "Internet cache protocol (ICP), </title> <type> version 2," </type> <institution> draft-wessels-icp-v2-00, </institution> <month> November </month> <year> 1996. </year> <note> http://ds.internic.net/ internet-drafts/draft-wessels-icp-v2-00.txt. </note>
Reference-contexts: However, since the originating address is also available from the socket API, and more difficult to spoof, this field is redundant and often unused. 4 As of this writing the most current description of ICP is in Wessels' Internet Draft <ref> [5] </ref>. 4 A cache will query its peers by sending each one an icp query mes-sage. The payload of the icp query message is a URL.
Reference: [6] <author> R. Fielding et al., </author> <title> "Hypertext transport protocol - http/1.1," Network Working Group RFC 2068, </title> <month> January </month> <year> 1997. </year> <note> http://ds.internic.net/ rfc/rfc2068.txt. </note>
Reference-contexts: However, obviously adding such complexity would require additional CPU cycles to fully parse the HTTP request (in text), and the ominous size and complexity of the recent HTTP/1.1 RFC <ref> [6] </ref> lends concern to this methodology as a general direction. If we go this far then we can simply reduce ICP to "HTTP over UDP," with an additional request method (query) and a few more status codes (hit, miss, etc.). 3.3 Public vs.
Reference: [7] <author> CERT, </author> <title> "Udp port denial-of-service attack." </title> <publisher> ftp://info.cert.org/ pub/cert_advisories/CA-96.01.UDP_service_denial. </publisher>
Reference-contexts: There are some sites that log or filter packets to their echo port. Many such sites do not care for random hosts sending to their echo service, especially after a CERT advisory appeared warning of UDP-based denial-of-service attacks <ref> [7] </ref>. In conjunction with some other work, Squid supports sending icp secho messages via ICMP instead of UDP.
Reference: [8] <author> R. L. Rivest, </author> <title> "The md5 message-digest algorithm," Network Working Group RFC 1321, </title> <month> April </month> <year> 1992. </year> <note> ftp://ftp.internic.net/rfc/ rfc1321.txt. </note>
Reference-contexts: ICP does not currently impose any limits on URL length. For that matter, it does not limit the size of the ICP message. In the future, ICP may support sending an MD5 <ref> [8] </ref> hash of the URL instead of the URL itself. 7 Current and Future Work 7.1 Probing the Network Earlier we alluded to some work-in-progress to improve the peer selection algorithm. Squid supports domain restrictions on peers to route requests in the right general direction.
Reference: [9] <author> H. Inoue and K. Chinen, </author> <note> "Catalyst mode of wcol." http://shika. aist-nara.ac.jp/products/wcol/cuckoo.html. </note>
Reference-contexts: For sending the queries, each multicast group is listed as a peer. Currently, Squid sends both hit and miss replies via unicast. 7.3 Prefetching Some cache operators use prefetching to increase perceived performance. The tradeoff is, of course, additional bandwidth consumption. The developers of Wcol <ref> [9] </ref> are currently using a new ICP opcode to support prefetching with Squid. In the Squid configuration, the Wcol cache is listed as a sibling. Squid sends the Wcol sibling special icp notify messages as soon as it receives the client request.
Reference: [10] <author> D. Povey and J. Harrison, </author> <title> "A distributed internet cache," </title> <booktitle> in Proceedings of the 20th Australasian Computer Science Conference (to appear), </booktitle> <month> February </month> <year> 1997. </year> <note> http://www.psy.uq.edu.au:8080/~dean/project/. </note>
Reference-contexts: In the Squid configuration, the Wcol cache is listed as a sibling. Squid sends the Wcol sibling special icp notify messages as soon as it receives the client request. Wcol then uses its prefetching algorithm to pull the "prefetched" objects into Squid. 7.4 ICP Pointer Servers Povey and Harrison <ref> [10] </ref> have proposed to replace overloaded, top-level caches with "pointer servers" instead of actual caches. These entities do not hold objects themselves, but they do know who else is likely to hold a specific object.
Reference: [11] <author> R. L. Carter and M. E. Crovella, </author> <title> "Dynamic server selection using bandwidth probing in wide-area networks," </title> <type> Tech. Rep. </type> <institution> TR-96-007, Boston 27 University Computer Science Department, </institution> <month> March </month> <year> 1996. </year> <note> ftp://cs--ftp.bu.edu/techreports/96-007-dss-using-bandwidth.ps.Z. 28 </note>
References-found: 11

