URL: http://www.cs.bu.edu/techreports/95-006-speculative-service.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  
Title: Using Speculation to Reduce Server Load and Service Time on the WWW  
Author: Azer Bestavros 
Date: February 21, 1995  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: Speculative service implies that a client's request for a document is serviced by sending, in addition to the document requested, a number of other documents (or pointers thereto) that the server speculates will be requested by the client in the near future. This speculation is based on statistical information that the server maintains for each document it serves. The notion of speculative service is analogous to prefetching, which is used to improve cache performance in distributed/parallel shared memory systems, with the exception that servers (not clients) control when and what to prefetch. Using trace simulations based on the logs of our departmental HTTP server http://cs-www.bu.edu, we show that both server load and service time could be reduced considerably, if speculative service is used. This is above and beyond what is currently achievable using client-side caching [3] and server-side dissemination [2]. We identify a number of parameters that could be used to fine-tune the level of speculation performed by the server. fl This work has been partially supported by NSF (grant CCR-9308344).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Swarup Acharya and Stanley B. Zdonik. </author> <title> An efficient scheme for dynamic data replication. </title> <type> Technical Report CS-93-43, </type> <institution> Brown University, </institution> <address> Providence, Rhode Island 02912, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: In this study, a hierarchical caching system that caches files at Core Nodal Switching Subsystems is shown to reduce the NSFNET backbone traffic by 21%. The effect of data placement and replication on network traffic was also studied in <ref> [1] </ref>, where file access patterns are used to suggest a distributed dynamic replication scheme. A more static solution based on fixed network and storage costs for the delivery of multimedia home entertainment was suggested in [14].
Reference: [2] <author> Azer Bestavros. </author> <title> Demand-based document dissemination for the world wide web. </title> <type> Technical Report TR-95-003, </type> <institution> Boston University, CS Dept, </institution> <address> Boston, MA 02215, </address> <month> February </month> <year> 1995. </year> <note> (submitted for publication). </note>
Reference-contexts: This aging mechanism depends highly (among other things) on the frequency and pattern of document updates on the server. The relative stability of P and P fl observed in the above experiments reinforces our findings in <ref> [2] </ref> and the findings of Gwertzman in [9] that for WWW documents the popularity profile tends to be stable and updates tend to be infrequent. 9 (a) (b) 3.4 Effect of Document Size The benefits of speculation are most pronounced when documents serviced speculatively are small. <p> A similar cooperative caching idea was suggested in [7]. A different approach to reducing server load and service time is based on the popularity-based dissemination of information from servers to proxies, which are closer to clients. Our work in <ref> [2] </ref> allows this dissemination to be done so as to make the distance between a client and a document server (or proxy thereof) inversly proportional to the popularity of that document. <p> We have identified a number of issues that may impact the performance of speculative servers. More work is needed to propose and evaluate protocols that combine speculative service with other methods such as server-based dissemination <ref> [2] </ref> and client-based caching [3].
Reference: [3] <author> Azer Bestavros, Robert Carter, Mark Crovella, Carlos Cunha, Abdelsalam Heddaya, and Suliman Mirdad. </author> <title> Application level document caching in the internet. </title> <booktitle> In IEEE SDNE'96: 16 The Second International Workshop on Services in Distributed and Networked Environments, </booktitle> <address> Whistler, British Columbia, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: By controlling the value of SessionTimeout, we can emulate various caching policies. In particular, setting SessionTimeout to 1 could be used to emulate a client with an infinite-size multi-session cache (e.g. the LAN cache proposed in <ref> [3] </ref>). Setting SessionTimeout to (say) 60 minutes could be used to emulate a client with an infinite-size single-session cache. Setting SessionTimeout to 0 could be used to emulate a client with no cache. <p> Using 10% extra bandwidth results in a reduction of 35%, 27%, and 23% in these metrics, respectively. These performance improvements are above and 6 beyond what is achievable by performing caching at the clients <ref> [3] </ref>. Figures 2 (a) and 2 (b) suggest that speculation is most effective when done conservatively. Beyond some point, speculation does not seem to pay off. <p> We have identified a number of issues that may impact the performance of speculative servers. More work is needed to propose and evaluate protocols that combine speculative service with other methods such as server-based dissemination [2] and client-based caching <ref> [3] </ref>.
Reference: [4] <author> Azer Bestavros and Carlos Cunha. </author> <title> Performance evaluation of client-initiated prefetching for the www, April 1995. </title> <note> Internal Report (To Appear as a Technical Report). </note>
Reference-contexts: Also, it is possible to adopt a hybrid protocol whereby server-initiated speculative service is restricted to documents that have a very high probability of being accessed in the near future (e.g. embedded documents), leaving less probable future accesses to client-initiated prefetching. In a separate on-going study <ref> [4] </ref>, we are evaluating the merits of client-initiated prefetching based on user access patterns of WWW documents. In that study, extensive user logs [6] are 15 analyzed to obtain a per-user relationship similar to the P and P fl relationships (i.e. a user profile).
Reference: [5] <author> Matthew Addison Blaze. </author> <title> Caching in Large Scale Distributed File Systems. </title> <type> PhD thesis, </type> <institution> Prince-ton University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: A more static solution based on fixed network and storage costs for the delivery of multimedia home entertainment was suggested in [14]. Multi-level caching was studied in [13], where simulations of a two-level caching system is shown to reduce both network and server loads. In <ref> [5] </ref>, a dynamic hierarchical file system, which supports demand-driven replication is proposed, whereby clients are allowed to service requests issued by other clients from the local disk cache. A similar cooperative caching idea was suggested in [7].
Reference: [6] <author> Carlos Cunha, Azer Bestavros, and Mark Crovella. </author> <title> Characteristics of www client-based traces. </title> <type> Technical Report TR-95-010, </type> <institution> Boston University, CS Dept, </institution> <address> Boston, MA 02215, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In a separate on-going study [4], we are evaluating the merits of client-initiated prefetching based on user access patterns of WWW documents. In that study, extensive user logs <ref> [6] </ref> are 15 analyzed to obtain a per-user relationship similar to the P and P fl relationships (i.e. a user profile). Such a relationship is used to initiate document prefetching.
Reference: [7] <author> Michael D. Dahlin, Randolph Y. Wang, Thomas E. Anderson, and Dacid A. Patterson. </author> <title> Cooperative caching: Using remote client memory to improve file system performance. </title> <booktitle> In First Symposium on Operating systems Design and Implementation (OSDI), </booktitle> <pages> pages 267-280, </pages> <year> 1994. </year>
Reference-contexts: In [5], a dynamic hierarchical file system, which supports demand-driven replication is proposed, whereby clients are allowed to service requests issued by other clients from the local disk cache. A similar cooperative caching idea was suggested in <ref> [7] </ref>. A different approach to reducing server load and service time is based on the popularity-based dissemination of information from servers to proxies, which are closer to clients.
Reference: [8] <author> Peter Danzig, Richard Hall, and Michael Schwartz. </author> <title> A case for cashing file objects inside internetworks. </title> <type> Technical Report CU-CS-642-93, </type> <institution> University of Colorado at Boulder, Boulder, Colorado 80309-430, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Recently, there have been some attempts at extending caching and replication to distributed information systems (e.g. FTP and HTTP). Caching to reduce the bandwidth requirements for the 14 FTP protocol on the NSFNET has been studied in <ref> [8] </ref>. In this study, a hierarchical caching system that caches files at Core Nodal Switching Subsystems is shown to reduce the NSFNET backbone traffic by 21%.
Reference: [9] <author> James Gwertzman. </author> <title> Autonomous replication in wide area networks, 1995. </title> <type> Senior Thesis, </type> <institution> Harvard University, DAS. </institution>
Reference-contexts: This aging mechanism depends highly (among other things) on the frequency and pattern of document updates on the server. The relative stability of P and P fl observed in the above experiments reinforces our findings in [2] and the findings of Gwertzman in <ref> [9] </ref> that for WWW documents the popularity profile tends to be stable and updates tend to be infrequent. 9 (a) (b) 3.4 Effect of Document Size The benefits of speculation are most pronounced when documents serviced speculatively are small.
Reference: [10] <author> James Gwertzman and Margo Seltzer. </author> <title> The case for geographical push-caching. </title> <type> Technical Report HU TR-34-94 (excerpt), </type> <institution> Harvard University, DAS, </institution> <address> Cambridge, MA 02138, </address> <year> 1994. </year>
Reference-contexts: We present analytical as well as trace simulation results that quantify the expected reduction in bandwidth and expected improvement in load balancing. A similar philosophy was sketched in <ref> [10] </ref>, where they propose the implementation of what they termed as geographical push-cashing, which allows servers to decide when and where to cache information based on geographical information (such as the distance in actual miles between servers and clients).
Reference: [11] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Traditionally, this has been done in the realms of distributed file systems <ref> [11] </ref>. Example systems include the Sun NFS [15], the Andrew File System [12], and the Coda system [16]. Recently, there have been some attempts at extending caching and replication to distributed information systems (e.g. FTP and HTTP).
Reference: [12] <author> J.H. Morris, M. Satyanarayanan, M.H. Conner, J.H. Howard, D.S.H. Rosenthal, and F.D. Smith. Andrew: </author> <title> a distributed personal computing environment. </title> <journal> Comm. ACM, </journal> <volume> 29(3) </volume> <pages> 184-201, </pages> <month> Mar. </month> <year> 1986. </year>
Reference-contexts: Traditionally, this has been done in the realms of distributed file systems [11]. Example systems include the Sun NFS [15], the Andrew File System <ref> [12] </ref>, and the Coda system [16]. Recently, there have been some attempts at extending caching and replication to distributed information systems (e.g. FTP and HTTP). Caching to reduce the bandwidth requirements for the 14 FTP protocol on the NSFNET has been studied in [8].
Reference: [13] <author> D. Muntz and P. Honeyman. </author> <title> Multi-level caching in distributed file systems or your cache ain't nuthing but trash. </title> <booktitle> In Proceedings of the Winter 1992 USENIX, </booktitle> <pages> pages 305-313, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: A more static solution based on fixed network and storage costs for the delivery of multimedia home entertainment was suggested in [14]. Multi-level caching was studied in <ref> [13] </ref>, where simulations of a two-level caching system is shown to reduce both network and server loads. In [5], a dynamic hierarchical file system, which supports demand-driven replication is proposed, whereby clients are allowed to service requests issued by other clients from the local disk cache.
Reference: [14] <author> Christos H. Papadimitriou, Srinivas Ramanathan, and P. Venkat Rangan. </author> <title> Information caching for delivery of personalized video programs on home entertainment channels. </title> <booktitle> In Proceedings of the International Confrence on Multimedia Computing and Systems, </booktitle> <pages> pages 214-223, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The effect of data placement and replication on network traffic was also studied in [1], where file access patterns are used to suggest a distributed dynamic replication scheme. A more static solution based on fixed network and storage costs for the delivery of multimedia home entertainment was suggested in <ref> [14] </ref>. Multi-level caching was studied in [13], where simulations of a two-level caching system is shown to reduce both network and server loads.
Reference: [15] <author> R. Sandber, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the sun network file system. </title> <booktitle> In Proceedings of USENIX Summer Conference, </booktitle> <year> 1985. </year>
Reference-contexts: Traditionally, this has been done in the realms of distributed file systems [11]. Example systems include the Sun NFS <ref> [15] </ref>, the Andrew File System [12], and the Coda system [16]. Recently, there have been some attempts at extending caching and replication to distributed information systems (e.g. FTP and HTTP). Caching to reduce the bandwidth requirements for the 14 FTP protocol on the NSFNET has been studied in [8].
Reference: [16] <author> M. Satyanarayanan, J. Kistler, P. Kumar, M. Okasaki, E. Siegel, and D. Streere. Coda: </author> <title> A highly available file system for distributed workstation environments. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(4), </volume> <month> April </month> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Traditionally, this has been done in the realms of distributed file systems [11]. Example systems include the Sun NFS [15], the Andrew File System [12], and the Coda system <ref> [16] </ref>. Recently, there have been some attempts at extending caching and replication to distributed information systems (e.g. FTP and HTTP). Caching to reduce the bandwidth requirements for the 14 FTP protocol on the NSFNET has been studied in [8].
References-found: 16

