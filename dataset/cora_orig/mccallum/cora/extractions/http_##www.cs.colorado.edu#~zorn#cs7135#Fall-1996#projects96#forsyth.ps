URL: http://www.cs.colorado.edu/~zorn/cs7135/Fall-1996/projects96/forsyth.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/cs7135/Fall-1996/fall1996.html
Root-URL: http://www.cs.colorado.edu
Title: Mobile OrbixWeb Objects A Java/CORBA Integration Internet Systems Course Project  
Author: Author: Steve Forsyth 
Note: 1/17/97 Information contained in this packet may be freely distributed for educational purposes.  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Ron I. Resnick, resnick@interlog.com, </author> <title> http://www.interlog.com/~resnick/ron.html. Bringing Distributed Objects to the World Wide Web. </title>
Reference: [2] <author> Michael Weiss, Andy Johnson, Joe Kiniry. </author> <title> Open Software Foundation, Research Institute. Distributed Computing: Java, CORBA, and DCE. </title>
Reference: [3] <author> Anawat Chankhunthod, Peter B. Danzig, Chuck Neerdaels , Michael F. Schwartz , Kurt J. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title>
Reference: [4] <author> CORBA2.0 ORB, </author> <title> Services, and Common Facilities Documentation. </title>
Reference: [5] <author> OMG, </author> <title> "Merged Trader/Issue List document", OMG RFP Submission - OMG TC Document os/96-02-02, Object Management Group, Framingham, </title> <address> MA, </address> <year> (1996). </year>
Reference: [6] <author> Andreas Vogel, Harmut Wittig. </author> <title> Discovering Mobile Code, </title> <note> Position Paper. </note>
Reference: [7] <author> Orfali R., Harkey D., Edwards J. </author> <title> The Essential Distributed Objects Survival Guide, </title> <publisher> Wiley 1996., </publisher> <address> ISBN 0471-12993-3. </address>
Reference: [8] <author> Douglas C. Schmidt and Steve Vinoski, </author> <title> Object Interconnections. Distributed Callbacks and Decoupled Communication in CORBA. </title> <note> September 1996 SIGS C++ Report. </note>
Reference-contexts: A great deal of initial CORBA implementations are focusing on exposing existing client/server applications with distributed objects. Many of these applications are standard three-tier architectures, meaning clientserver application database. How applicable are the Mobile Objects for transaction-oriented services? Is this a good use of distributed callbacks <ref> [8] </ref>? A project that focuses on this area could have immediate applicability for developers. Mobile OrbixWeb Objects may be a promising technology for environments that include Mobile Users.
Reference: [9] <institution> OMG Repository RFP. </institution>
Reference: [10] <author> M. Ahamed, Shawn Smith. </author> <title> Detecting Mutual Consistency of Shared Objects. </title>
Reference: [11] <author> R. Kordal, M. Ahamad, </author> <title> Object Caching in a CORBA Compliant System. </title>
Reference: [12] <author> Kevin Dick, </author> <title> The Object-Intranet Business Connection. </title> <journal> Object Magazine, </journal> <month> December </month> <year> 1996, </year> <note> p. 17. </note>
Reference: [13] <author> Chuck McManis, </author> <title> The basics of Java class loaders. Java In Depth. </title> <address> http://www.javaworld.com/javaworld/jw-10-1996/jw-10-indepth.html </address>
Reference-contexts: The ability to derive new Java ClassLoaders allows for an OrbixWeb Server object to be byte streamed from an arbitrary host machines file system, to a reference in the address space of the executing Application. As discussed in <ref> [13] </ref> the Java ClassLoader is surely one of the most interesting features of the Java language, and this project was worthwhile if for nothing else than having really implemented a ClassLoader subclass. IDL inheritance. A simple interface MobileServiceCharacterization is specified using CORBA IDL.
Reference: [14] <author> Dennis Heimbigner. </author> <note> BART Presentation September 1996. Slides available at http://www.cs.colorado.edu./users/serl </note>
Reference-contexts: Use CORBA DII to compose methods and dispatch them locally. Table 1 1 This comes from continual monitoring of Distributed Objects and WWW integration trends. A similar assertion is made by Dennis Heimbigner in <ref> [14] </ref>. 2 Due to the use of a Java ClassLoader in the implementation, along with current Browser limitations, Java Applets are not supported. 2 The IT manager will immediately recognize that the solution is part of the reduction in administration cost promised by Intranets. 3 To support investigations of these ideas,
Reference: [15] <author> Telescript Technology: </author> <title> Mobile Agents. General Magic Corporation. </title> <address> http://www.genmagic.com/Telescript/Whitepapers/wp4/whitepaper-4.html </address>
Reference-contexts: Such an implemenation could use an intermediate point of contact, like a Kit, to handle the process of obtaining a reference to the Agent object. It is not hard to see the applicability of such Mobile objects in a structured electronic commerce environment. Using the General Magic metaphor <ref> [15] </ref>, in combination with Java interfaces, a Place could be constructed that understands Agent interfaces. This Place could then be implemented as a Java application class that uses the MobileServiceClassLoader to optionally move Agents to its local address space. Investigation into using Java ClassLoaders for Operating System extension.
Reference: [16] <author> OrbixWeb2.0 User Documentation. </author> <title> Available at http://www.iona.com/Orbix/OrbixWeb/index.html. Trademarks Orbix and OrbixWeb are trademarks of Iona Technologies, Ltd. CORBA and CORBAservices are trademarks of the Object Management Group. </title> <type> 11 </type>
Reference-contexts: The implementation of a given CORBA IDL is a non-trival task and is not addressed in this paper. For information on how to extend the Mobile Service interface, and its implementation in OrbixWeb, refer to the OrbixWeb Programming Guide <ref> [16] </ref>, Chapter 6-9. For this project a single method was included in the IDL, GetHost. GetHost is specified as returning the machine name on which the object is executing. <p> The implementation takes advantage of the fact that it is also an OrbixWeb BaseObject, and calls BaseObject._host to retrieve the name of its host machine <ref> [16] </ref>. This is also the class that is downloaded into the Clients address space when the OrbixWeb Service is moved. MobileServiceClassLoader When an Application desires to move an OrbixWeb Service to its own address space it uses the MobileServiceClassLoader. <p> By registering this class with the Implementation Repository it will be automatically launched by the OrbixWeb daemon when an incoming method invocation arrives at the server. As a Java application class it implements the Main method. This method will instantiate a MobileServiceCharacterizationImplematation object using the OrbixWeb BOAImpl methodology <ref> [16] </ref>. Once the object is instantiated the OrbixWeb impl_is_ready method is called, essentially starting the message processing loop for the remote OrbixWeb Server object. OrbixWeb A simple representation of the OrbixWeb classes that encapsulate the Object Request. <p> An Applet implementation that uses the Web Browser to download the OrbixWeb Service as another Applet, and then obtains a local reference to the object using OrbixWeb collocation techniques <ref> [16] </ref>, is possible. In fact this was the design approach taken, but was quickly abandoned due to the difficulty of implementing the OrbixWeb Service Applet 9 . <p> If DII is too difficult for the typical programmer to use there would be no point in extending Mobile OrbixWeb Objects in this direction. Smart Proxies. Smart Proxies are an OrbixWeb mechanism for load balancing and clientside caching <ref> [16] </ref>. Essentially, the IDL compiler generated proxy class can be used as a base class for a hand-generated proxy. This gives the developer more flexibility in partitioning an objects state and behavior between client and server.
References-found: 16

