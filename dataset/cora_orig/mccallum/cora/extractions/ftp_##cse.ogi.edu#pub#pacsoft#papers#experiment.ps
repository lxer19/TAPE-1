URL: ftp://cse.ogi.edu/pub/pacsoft/papers/experiment.ps
Refering-URL: http://www.cse.ogi.edu/~dick/dick.html
Root-URL: http://www.cse.ogi.edu
Title: A Software Engineering Experiment in Software Component Generation yz experiment employed four subjects to conduct
Author: Richard B. Kieburtz Laura McKinney Jeffrey M. Bell James Hook Alex Kotov Jeffrey Lewis Dino P. Oliva Tim Sheard Ira Smith Lisa Walton 
Keyword: Software component generation, productivity, reliability, flexibility, usability.  
Note: The  taken from Air Force C 3 I systems.  
Abstract: This paper presents results of a software engineering experiment in which a new technology for constructing program generators from domain-specific specification languages has been compared with a reuse technology that employs sets of reusable Ada program templates. Both technologies were applied to a common problem domain, constructing message translation and validation modules for military command, control, communications and information systems (C 3 I). The main results are that greater productivity was achieved and fewer error were introduced when subjects used the program generator than when they used Ada templates to implement software modules from sets of specifications. The differences in the average performance of the subjects are statistically significant at confidence levels exceeding 99 percent. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. G. Votta A. A. Porter and V. R. Basili. </author> <title> Comparing detection methods for software requirements inspections: A replicated experiment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(6) </volume> <pages> 563-575, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: This is controlled by matching (the same task is assigned in both technologies) and by replication, through which the random effects of variable factors are diluted in importance. Porter, Votta and Basili <ref> [1] </ref> give a detailed discussion of the control of factors affecting human performance in a software engineering experiment. 3.1 Trial task specifications Message format specifications for the experiment trials were taken from actual, unclassified Air Force message specifications from a number of different C 3 I systems.
Reference: [2] <author> Victor R. Basili, Lionel C. Briand, and Walcelio L Melo. </author> <title> Measuring the impact of reuse on quality and productivity in object-oriented systems. </title> <journal> Communications of the ACM, </journal> <note> 39 (to appear), </note> <year> 1996. </year>
Reference-contexts: This level of productivity increase is not inconsistent with that reported in a more recent experiment <ref> [2] </ref> that evaluated reliability and productivity benefits of code reuse with object-oriented modules. We believe reusable code templates are at least as effective as any other code reuse techniques.
Reference: [3] <author> Don Batory, Vivek Singhai, Marty Sirkin, and Jeff Thomas. </author> <title> Scalable software libraries. </title> <booktitle> In Proceedings of ACM SIGSOFT'93, Symposium on Foundations of Software Engineering, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Generation can be directed by prototype forms that implement classes of features, providing a synthetic facility for the creation of components <ref> [3] </ref>. * An integration framework, guided by the architecture, that builds an application from existing, synthesized or customized components. The in-egration framework provides the interface seen by the appllication engineer and may use sophisticated inference tools to select and adapt compo nents for inclusion in an application [11].
Reference: [4] <author> Jeffrey Bell et al. </author> <title> Software design for reliability and reuse: A proof-of-concept demonstration. </title> <booktitle> In TRI-Ada '94 Proceedings, </booktitle> <pages> pages 396-404. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The software generator was constructed using the SDRR (Software Design for Reliability and Reuse) method <ref> [4, 5] </ref>, an experimental software synthesis technique developed by the Pacific Software Research Center of the Oregon Graduate Institute. In the SDRR method, the interface for an application designer is based upon a domain-specific specification language in which the applications specialist can specify a software solution.
Reference: [5] <institution> Pacific Software Research Center. </institution> <note> SDRR project Phase I final scientific and technical report, </note> <month> February </month> <year> 1995. </year>
Reference-contexts: The software generator was constructed using the SDRR (Software Design for Reliability and Reuse) method <ref> [4, 5] </ref>, an experimental software synthesis technique developed by the Pacific Software Research Center of the Oregon Graduate Institute. In the SDRR method, the interface for an application designer is based upon a domain-specific specification language in which the applications specialist can specify a software solution. <p> Usability|developers will perceive MTV-G as easier to use than the MTV Templates. 3 Experiment Design This section gives a brief overview of the design of the experiment. Complete details can be found in Software Design for Reliability and Reuse: Phase I Final Scientific and Technical Report <ref> [5] </ref>.
Reference: [6] <author> Walter Ellis. </author> <title> private communication, </title> <month> June, </month> <year> 1993. </year>
Reference-contexts: experiment because the templates-based solution was already available, providing a basis for comparison. 2 Hypotheses of the Experiment Unpublished data gathered in the late 1980's by IBM Federal Systems Division showed that developer productivity was improved approximately four times by using domain-specific, reusable code templates, versus custom coding of applications <ref> [6] </ref>. This level of productivity increase is not inconsistent with that reported in a more recent experiment [2] that evaluated reliability and productivity benefits of code reuse with object-oriented modules. We believe reusable code templates are at least as effective as any other code reuse techniques.
Reference: [7] <author> Martin L Griss and Kevin Wentzel. </author> <title> Hybrid domain-specific kits for a flexible software factory. </title> <booktitle> In Proceedings of 1994 ACM Software Applications Conference, SAC'94, </booktitle> <pages> pages 47-52, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Often, the reuse class is a particular domain of applications which share an architecture and one or more domain-specific languages for describing requirements or specifications. A domain-specific reuse kit <ref> [7] </ref> is a collection of reusable artifacts, tools and a process for using them, centered on an application domain. A reuse kit enables construction of new applicatiions within a specified domain. There are many variations on the idea of domain-specific reuse, but certain concepts are central.
Reference: [8] <author> N. L. Johnson and F. C. Leone. </author> <title> Statistics and Experimental Design in Engineering and the Physical Sciences, 2nd Edition, volume II. </title> <publisher> John Wiley & Sons, </publisher> <year> 1977. </year>
Reference-contexts: nearly 2.3 in the mean number of failed test runs confirms the hypothesis that fewer defects are introduced in modules implemented with MTV-G. 5.4 Usability Users perceptions were captured both in the task assessment forms completed immediately after concluding work on each task and in the post-experiment debriefings. 2 In <ref> [8] </ref> it is suggested that a better estimate of significance of a test for difference of means of Poisson-distributed factors is obtained if the data are preconditioned by taking a square root. This removes the functional relationship between the mean and the variance, if the distribution is indeed Poisson.
Reference: [9] <author> Charles Plinta, Kenneth Lee, and Michael Riss-man. </author> <title> A model solution for C 3 I message translation and validation. </title> <type> Technical Report CMU/SEI-89-TR-12 ESD-89-TR-20, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: With MTV Templates, the emphasis is on customization of prototype templates, and these constitute the visible interface to the applications engineer. 1.2 Two reuse technologies The templates-based technology with which the generator was compared was developed by the Software Engineering Institute <ref> [9] </ref> for the selected domain|message translation and validation (MTV) for Air Force Command, Control, Communications and Information (C 3 I) systems.
Reference: [10] <author> Dennis Volpano and Richard B. Kieburtz. </author> <title> Software templates. </title> <booktitle> In Proceedings Eighth International Conference on Software Engineering, </booktitle> <pages> pages 55-60. </pages> <publisher> IEEE Computer Society, </publisher> <month> August </month> <year> 1985. </year>
Reference-contexts: These may be of a large or a very small scale, depending upon whether the reuse process em phasizes assembly or synthesis <ref> [10] </ref>. * Tools that support generation or customization of components. from prototype templates.
Reference: [11] <author> Richard Waldinger and Michael Lowry. AM-PHION: </author> <title> Towards kinder, gentler formal methods. </title> <booktitle> In Proceedings of the 1994 Monterey Workshop on Formal Methods. </booktitle> <institution> U.S. Naval Postgraduate School, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: The in-egration framework provides the interface seen by the appllication engineer and may use sophisticated inference tools to select and adapt compo nents for inclusion in an application <ref> [11] </ref>. Both the MTV Generator and the MTV Templates fit into the framework of domain-specific reuse kits. With MTV-G, the emphasis is on synthesis and the integration framework provides a language-based interface, while the prototype templates are for code generation and are hidden from view of the application engineer.
References-found: 11

