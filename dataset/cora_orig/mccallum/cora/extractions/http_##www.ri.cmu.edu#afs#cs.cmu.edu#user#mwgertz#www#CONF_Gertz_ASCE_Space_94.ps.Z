URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/mwgertz/www/CONF_Gertz_ASCE_Space_94.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/mwgertz/www/publish.html
Root-URL: 
Title: Gertz/Khosla Onika: A Multilevel Human-Machine Interface for Real-Time Sensor-Based Systems  
Author: Matthew W. Gertz and Pradeep K. Khosla 
Abstract: The development of software for reconfigurable sensor-based real-time systems is a complicated and tedious process, requiring highly specialized skills in real-time systems programming. The total development time can be reduced by automatically integrating reusable software modules to create applications. The integration of these modules can be further simplified by the use of a high-level programming interface. We have developed Onika, an iconically programmed human-machine interface, to interact with a reconfigurable software framework to create reusable code. Onika presents appropriate work environments for both application engineers and end-users. For engineers, icons representing real-time software modules can be combined to form real-time jobs. For the end-user, icons representing these jobs are assembled by the user into applications. Onika verifies that all jobs and applications are syntactically correct, non-ambiguous, and complete. They can then be executed from within Onika, or can be saved as a stand-alone program which can be executed independently on the underlying real-time operating system. Onika has been fully integrated with the Chimera real-time operating system in order to control several different robotic systems in the Advanced Manipulators Laboratory at Carnegie Mellon University. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Chang, S. K. </author> <title> Visual Languages: A Tutorial and Survey, </title> <journal> IEEE Software, </journal> <month> January </month> <year> 1987, </year> <pages> pp. </pages> <month> 29-39. </month> <title> with the icon following it in the application ow. A space was inserted for an object icon. </title> <note> 9 Gertz/Khosla [2]Gertz, </note> <author> M. W. </author> <title> The Onika Users Manual, </title> <institution> (in progress) Department of Electrical and Computer Engineering, Carnegie Mellon University. </institution> <note> [3]Gertz, </note> <author> M. W., Stewart, D. B., and Khosla, P. K. </author> <title> A Software Architecture-Based Human-Machine Interface for Reconfigurable Sensor-Based Control Systems, </title> <booktitle> Proceedings of 8th IEEE International Symposium on Intelligent Control, </booktitle> <month> Aug. </month> <pages> 25-26, </pages> <address> 1993, Chicago, Ill. </address>
Reference-contexts: We conclude this paper in section 5. 2. Previous Work The problems associated with textual programming have been addressed on several levels in the past. (Comprehensive reviews of the state of visual programming techniques can be found in [10] and <ref> [1] </ref>.) Researchers have created interfaces wherein routines for an existing programming language (such as C) are created by a higher-level VPL [10][6][5]. Interfaces such as these are designed to be used by programmers with knowledge of the structured programming language in question.
Reference: [4] <author> Gertz, M.W., Stewart, D. B., and Khosla, P. K. </author> <title> An Iconic Language for Sensor-Based Robots, </title> <booktitle> in Proceedings of SOAR Conference, </booktitle> <month> August 4-6, </month> <year> 1992, </year> <institution> Houston, Texas. </institution>
Reference: [5] <author> Glinert, E. P. and Tanimoto, S. L. </author> <title> Pict: An Interactive Graphical Programming Environment, </title> <booktitle> Computer, </booktitle> <month> November </month> <year> 1984, </year> <pages> pp. 7-25. </pages>
Reference-contexts: Traditional flowchart methods are often used in both higher and lower-level VPLs. Flow charts reduce the complexity of textual code somewhat, but can still be quite cryptic and do not efficiently use screen space. Occasionally, pictures accompany or are used in place of the text (as in Pict <ref> [5] </ref> or HI-VISUAL [7]) within a flowchart, but this does not help to give syntactic clues for programming. Nassi-Schneiderman flowcharts, used primarily for lower-level programming, are more compact than traditional flowcharts and have an implied syntax.
Reference: [6] <author> Glinert, E. P. </author> <title> Out of Flatland: Towards 3-D Visual Programming, </title> <booktitle> Proceedings 2nd Fall Joint Computer Conference, </booktitle> <year> 1987, </year> <pages> pp. 292-299. </pages>
Reference-contexts: They can be textually cryptic and difficult to read, however. 3 Gertz/Khosla There are other VPLs which use pictures and other visual cues in order to construct the program use non-traditional flow methods. Proc-BLOX <ref> [6] </ref>, a lower-level VPL, allows users to create Pascal-like code by assembling blocks representing the textual code primitives in a jigsaw puzzle fashion. The shapes of the elements preclude the possibility of assembling syn tactically incorrect programs.
Reference: [7] <author> Ichikawa, T. and Hirakawa, H. </author> <title> Visual Programming Toward Realization of User-Friendly Programming Environments, </title> <booktitle> Proceedings 2nd Fall Joint Computer Conference, </booktitle> <year> 1987, </year> <pages> pp. 129-137. </pages>
Reference-contexts: Flow charts reduce the complexity of textual code somewhat, but can still be quite cryptic and do not efficiently use screen space. Occasionally, pictures accompany or are used in place of the text (as in Pict [5] or HI-VISUAL <ref> [7] </ref>) within a flowchart, but this does not help to give syntactic clues for programming. Nassi-Schneiderman flowcharts, used primarily for lower-level programming, are more compact than traditional flowcharts and have an implied syntax.
Reference: [8] <author> Leifer, L., Van der Loos, M., and Lees, D. </author> <title> Visual Language Programming: for robot command-control in unstructured environments, </title> <booktitle> Proceedings of the Fifth International Conference on Advanced Robotics: Robots in Unstructured Environments, </booktitle> <month> June 19-22, </month> <year> 1991, </year> <pages> pp. 31-36, </pages> <address> Pisa, Italy. </address>
Reference-contexts: Proc-BLOX [6], a lower-level VPL, allows users to create Pascal-like code by assembling blocks representing the textual code primitives in a jigsaw puzzle fashion. The shapes of the elements preclude the possibility of assembling syn tactically incorrect programs. Other packages such as Lingraphica <ref> [8] </ref> and ISHeE [9] re move the text altogether and rely on pictures to determine the meaning of the program. ISHeE also uses the jigsaw puzzle format to convey syntax.
Reference: [9] <author> Mussio, P., Pietrogrande, M., Protti, M., Colombo, F., Finadri, M., and Gentini, P. </author> <title> Visual Programming in a Visual Environment for Liver Simulation Studies, </title> <booktitle> 1990 IEEE Workshop on Visual Languages, </booktitle> <month> Oct. </month> <pages> 4-6, </pages> <year> 1990, </year> <pages> pp. 29-35, </pages> <address> Skokie, Illinois. </address>
Reference-contexts: Proc-BLOX [6], a lower-level VPL, allows users to create Pascal-like code by assembling blocks representing the textual code primitives in a jigsaw puzzle fashion. The shapes of the elements preclude the possibility of assembling syn tactically incorrect programs. Other packages such as Lingraphica [8] and ISHeE <ref> [9] </ref> re move the text altogether and rely on pictures to determine the meaning of the program. ISHeE also uses the jigsaw puzzle format to convey syntax. By making the visual representations more compact, more of the program under development can be seen on the screen at a time. 3.
Reference: [10] <author> Myers, B. A. </author> <title> Taxonomies of Visual Programming and Program Visualization, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1990 (1), </volume> <pages> pp. 97-123. </pages>
Reference-contexts: We conclude this paper in section 5. 2. Previous Work The problems associated with textual programming have been addressed on several levels in the past. (Comprehensive reviews of the state of visual programming techniques can be found in <ref> [10] </ref> and [1].) Researchers have created interfaces wherein routines for an existing programming language (such as C) are created by a higher-level VPL [10][6][5]. Interfaces such as these are designed to be used by programmers with knowledge of the structured programming language in question.

References-found: 8

