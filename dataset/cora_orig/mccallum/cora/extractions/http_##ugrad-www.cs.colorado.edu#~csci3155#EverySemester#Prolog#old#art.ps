URL: http://ugrad-www.cs.colorado.edu/~csci3155/EverySemester/Prolog/old/art.ps
Refering-URL: http://ugrad-www.cs.colorado.edu/~csci3155/EverySemester/Prolog/old/
Root-URL: http://www.cs.colorado.edu
Email: tarau@info.umoncton.ca  
Title: BinProlog 4.00 User Guide  
Author: Paul Tarau 
Date: September 8, 1995  
Address: Moncton, Canada, E1A 3E9,  
Affiliation: Departement d'Informatique Universite de Moncton  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> K. De Bosschere and P. Tarau. </author> <title> Blackboard-based logic programming. </title> <booktitle> In Proceedings of the 1993 ILPS Conference, </booktitle> <address> Vancouver, Canada, </address> <year> 1993. </year> <note> poster. </note>
Reference-contexts: from C : see example if0 */ term bp_prolog_call (goal,regs,H,P,A,wam) register term goal,regs,H,*A; register instr P; register stack wam; - PREP_CALL (goal); return bp (regs,H,P,A,wam); - /* simple example of prolog call */ term if0 (regs,H,P,A,wam) register term regs,H,*A; register instr P; register stack wam; term bp (); cell goal=regs <ref> [1] </ref>; 56 /* in this example the input GOAL is in regs [1] */ /* of course you can also build it directly in C */ /* unless you want specific action on failure, use BP_prolog_call (goal) here */ H=bp_prolog_call (goal,regs,H,P,A,wam); if (H) fprintf (stderr,"success: returning from New WAM"n"); else fprintf <p> goal,regs,H,*A; register instr P; register stack wam; - PREP_CALL (goal); return bp (regs,H,P,A,wam); - /* simple example of prolog call */ term if0 (regs,H,P,A,wam) register term regs,H,*A; register instr P; register stack wam; term bp (); cell goal=regs <ref> [1] </ref>; 56 /* in this example the input GOAL is in regs [1] */ /* of course you can also build it directly in C */ /* unless you want specific action on failure, use BP_prolog_call (goal) here */ H=bp_prolog_call (goal,regs,H,P,A,wam); if (H) fprintf (stderr,"success: returning from New WAM"n"); else fprintf (stderr,"fail: returning from New WAM"n"); /* do not forget this !!! */
Reference: [2] <author> K. De Bosschere and P. Tarau. </author> <title> Blackboard Communication in Logic Programming. </title> <booktitle> In Proceedings of the PARCO'93 Conference, </booktitle> <address> Grenoble, France, </address> <month> Sept. </month> <year> 1993. </year>
Reference: [3] <author> K. De Bosschere and P. Tarau. </author> <title> High Performance Continuation Passing Style Prolog-to-C Mapping. </title> <editor> In E. Deaton, D. Oppenheim, J. Urban, and H. Berghel, editors, </editor> <booktitle> Proceedings of the 1994 ACM Symposium on Applied Computing, </booktitle> <pages> pages 383-387, </pages> <address> Phoenix/AZ, </address> <month> Mar. </month> <year> 1994. </year> <note> ACM Press. </note>
Reference: [4] <author> B. Demoen. </author> <title> On the Transformation of a Prolog program to a more efficient Binary program. </title> <type> Technical Report 130, </type> <institution> K.U.Leuven, </institution> <month> Dec. </month> <year> 1990. </year>
Reference: [5] <author> B. Demoen and A. Marien. </author> <title> Implementation of Prolog as binary definite Programs. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming, RCLP Proceedings, number 592 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 165-176, </pages> <address> Berlin, Heidel-berg, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [6] <author> T. Lindgren. </author> <title> Compiling logic programs using a binary continuation style, </title> <month> Dec. </month> <year> 1992. </year> <type> draft, </type> <institution> Uppsala University. </institution>
Reference: [7] <author> U. Neumerkel. </author> <title> Specialization of Prolog Programs with Partially Static Goals and Binarization. </title> <type> Phd thesis, </type> <institution> Technische Universitat Wien, </institution> <year> 1992. </year> <month> 58 </month>
Reference: [8] <author> U. Neumerkel. </author> <title> A transformation based on the equality between terms. In Logic Program Synthesis and Transformation, </title> <booktitle> LOPSTR 1993. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [9] <author> P. Tarau. </author> <title> A Simplified Abstract Machine for the execution of Binary Metapro-grams. </title> <booktitle> In Proceedings of the Logic Programming Conference'91, </booktitle> <pages> pages 119-128. </pages> <publisher> ICOT, </publisher> <address> Tokyo, </address> <month> 7 </month> <year> 1991. </year>
Reference: [10] <author> P. Tarau. </author> <title> Ecological Memory Managment in a Continuation Passing Prolog Engine. </title> <editor> In Y. Bekkers and J. Cohen, editors, </editor> <booktitle> Memory Management International Workshop IWMM 92 Proceedings, number 637 in Lecture Notes in Computer Science, </booktitle> <pages> pages 344-356. </pages> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: This usage is compatible with BinProlog 1.71 but not recommended in BinProlog 4.00. 8.9.2 Copying primitives Copy_term/2 is Prolog's usual primitive extended to copy objects from the heap and also from blackboard to the current top of the heap. We refer to <ref> [10] </ref> for the implementation and memory management aspects of these primitives. Save_term/2 copies an object possibly distributed over the heap and the blackboard to a new blackboard object. It also takes care not to copy parts of the object already on the blackboard.
Reference: [11] <author> P. Tarau. </author> <title> Program Transformations and WAM-support for the Compilation of Definite Metaprograms. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming, RCLP Proceedings, number 592 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 462-473, </pages> <address> Berlin, Heidelberg, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [12] <author> P. Tarau. </author> <title> Wam-optimizations in BinProlog: towards a realistic continuation passing prolog engine. </title> <type> Technical Report 92-3, </type> <institution> Dept. d'Informatique, Universite de Moncton, </institution> <month> July </month> <year> 1992. </year> <note> available by ftp from clement.info.umoncton.ca. </note>
Reference: [13] <author> P. Tarau. </author> <title> An efficient specialization of the wam for continuation passing binary programs. </title> <booktitle> In Proceedings of the 1993 ILPS Conference, </booktitle> <address> Vancouver, Canada, </address> <year> 1993. </year> <note> poster. </note>
Reference: [14] <author> P. Tarau. </author> <title> Language issues and programming techniques in BinProlog. </title> <editor> In D. Sacca, editor, </editor> <booktitle> Proceeding of the GULP'93 Conference, </booktitle> <address> Gizzeria Lido, Italy, </address> <month> June </month> <year> 1993. </year>
Reference: [15] <author> P. Tarau. </author> <title> Low level issues in implementing a high-performance continuation passing binary prolog engine. </title> <editor> In M.-M. Corsini, editor, </editor> <booktitle> Proceedings of JFPL'94, </booktitle> <month> June </month> <year> 1994. </year>
Reference: [16] <author> P. Tarau and M. Boyer. </author> <title> Elementary Logic Programs. </title> <editor> In P. Deransart and J. Ma luszynski, editors, </editor> <booktitle> Proceedings of Programming Language Implementation and Logic Programming, number 456 in Lecture Notes in Computer Science, </booktitle> <pages> pages 159-173. </pages> <publisher> Springer, </publisher> <month> Aug. </month> <year> 1990. </year>
Reference: [17] <author> P. Tarau and B. Demoen. </author> <title> Language embedding by dual compilation and state mirroring. </title> <booktitle> In Proceedings of 6-th Workshop on Logic Programming Environments, </booktitle> <address> Santa Margherita Ligure, </address> <year> 1994, </year> <month> June </month> <year> 1994. </year>
Reference: [18] <author> P. Tarau, B. Demoen, and K. De Bosschere. </author> <title> The power of partial translation: an experiment with the c-ification of binary prolog. </title> <booktitle> In Proceedings of the 1995 ACM Symposium on Applied Computing, </booktitle> <address> Nashville/TN, Feb. 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: asm. ^D DEFINITE: a (A,B) :- c (C,D), BINARY: a (A,B,C) :- WAM-ASSEMBLER: clause_? a,3 firstarg_? _/0,6 put_structure d/3,var (4-4/11,1/2) write_variable put,var (5-5/10,1/2) 26 write_value put,var (2-2/6,2/2) write_value put,var (3-3/7,2/2) put_structure c/3,var (3-8/14,1/2) write_variable put,var (2-9/13,1/2) write_value put,var (5-5/10,2/2) write_value put,var (4-4/11,2/2) execute_? b,3 7 Compiling to C Partial C-ification <ref> [18] </ref> is a translation framework which `does less instead of doing more' to improve performance of emulators close to native code systems.
Reference: [19] <author> P. Tarau and U. Neumerkel. </author> <title> A Novel Term Compression Scheme and Data Representation in the BinWAM. </title> <booktitle> In Proceedings of Programming Language 59 Implementation and Logic Programming, Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: It compiles itself in less than 1 minute on a Sparcstation 10-40. The system has very fast (heap-based) copy term/2, findall/3 and findall/4 predicates, floating point, global logical variables, but still lacks full garbage collection. A new term compression technique <ref> [19] </ref> (joint work with Ulrich Neumerkel) reduces heap-consumption and adds some extra speed . Ulrich's iterative copy term/2 algorithm further accelerates BinProlog's `copy-once' heap-based findall/3 and findall/4 so that findall-intensive programs may run 2-3 times faster in BinProlog than in other (even native code) implementations.

References-found: 19

