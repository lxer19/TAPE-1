URL: http://www.cs.virginia.edu/~son/publications/icde97.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Email: kwlam@cs.cityu.edu.hk  son@cs.virginia.edu  
Title: A Priority Ceiling Protocol with Dynamic Adjustment of Serialization Order  
Author: Kwok-wa Lam Sang H. Son and Sheung-lun Hung 
Address: 83 Tat Chee Avenue, Kowloon, Hong Kong.  Charlottesville, VA 22903, U.S.A.  
Affiliation: Department of Computer Science 1 City University of Hong Kong,  Department of Computer Science 2 University of Virginia,  
Abstract: The difficulties of providing a guarantee of meeting transaction deadlines in hard real-time database systems lie in the problems of priority inversion and of deadlocks. Priority inversion and deadlock problems ensue when concurrency control protocols are adapted in priority-driven scheduling. The blocking delay due to priority inversion can be unbounded, which is unacceptable in the mission-critical real-time applications. Some priority ceiling protocols have been proposed to tackle these two problems. However, they are too conservative in scheduling transactions for the single-blocking and deadlock-free properties, leading to many unnecessary transaction blockings. In this paper, we analyze the unneccessary transaction blocking problem inherent in these priority ceiling protocols and investigate the conditions for allowing a higher priority transaction to preempt a lower priority transaction using the notion of dynamic adjustment of serialization order. A new priority ceiling protocol is proposed to solve the unnecessary blocking problem, thus enhancing schedulability. We also devise the worst-case schedulability analysis for the new protocol which provides a better schedulability condition than other protocols. Keywords : Priority ceiling protocols, concurrency control, transaction scheduling, real-time systems, database systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abbott, R., and H. Garcia-Molina, </author> <title> "Scheduling Real-time Transactions: A Performance Evaluation," </title> <journal> ACM Transactions on Database Systems , 17(3) </journal> <pages> 513-560, </pages> <year> 1992. </year>
Reference: [2] <author> Baker, </author> <title> T.P., Stack-Based Scheduling of Realtime Processes, </title> <booktitle> Real-Time Systems , 3(1) </booktitle> <pages> 67-99, </pages> <year> 1991. </year>
Reference: [3] <author> Bayer, R., K. Elhardt, J. Heigert and A. Reiser, </author> <title> Dynamic Timestamp Allocation for Transactions in Database Systems, </title> <booktitle> Proc. of the Second International Symposium on Distributed Data Bases , 1982. </booktitle>
Reference: [4] <author> Bernstein, P. A., V. Hadzilacos, and N. Goodman, </author> " <title> Concurrency Control and Recovery in Database Systems ," Addison-Wesley, </title> <address> Reading, Mass, </address> <year> 1987. </year>
Reference-contexts: Concurrency control protocols normally employ transaction blocking in resolving data conflicts among transactions for data consistency <ref> [4] </ref>. Priority inversion arises when a higher priority transaction T H is blocked by a lower priority transaction T L because T H requests to lock a data item which has been already locked by T L . <p> Background The main reason for the unnecessary blocking problem associated with RW-PCP and CCP is the underlying transaction model adopted by their concurrency control protocols. Both RW-PCP and CCP assume the update-in-place model in which transaction update operations are in immediate effect <ref> [4] </ref>. In this model, concurrency control protocols induce a serialization order among conflicting transactions during their executions. The serialization order between two transactions is fixed upon the order of their conflicting access to the shared data. <p> Thus, we assume that a transaction preemption will not entail transaction restarts. A transaction preemption means that the transaction is preempted by a higher priority transaction from utilizing the CPU and/or the shared data. To achieve this goal, we assume that the update-in-workspace model is the underlying transaction model <ref> [4] </ref>. In the update-in-workspace model, transactions defer their updates until the end of their executions. That is, before a transaction commits, it reads and updates data items only in its private workspace, and then data items are written into the database only upon successful commit. <p> For the correctness of PCP-DA, we prove that all histories produced by PCP-DA are serializable. That is, we have to show that there is no cycle in the serialization graph, SG (H) in any history H produced by PCP-DA <ref> [4] </ref>. Lemma 9 : A successfully-committed transaction cannot have writeread conflicts with the currently executing transactions. Proof : Suppose T H has writeread conflicts with a currently executing transaction T L .
Reference: [5] <author> Bestavros, A. and Sue Nagy, </author> <title> Value-cognizant Admission Control Strategies for Real-Time DBMS, </title> <booktitle> Proc. of First Workshop on Real-Time Databases: Issues and Applications , California, </booktitle> <address> USA, </address> <month> March , </month> <year> 1996. </year>
Reference: [6] <author> Chen, M. and K. J. Lin, </author> <title> Dynamic Priority ceilings, "A Concurrency Control Protocol for Real-Time Systems," </title> <booktitle> Real-Time Systems , 2(4) </booktitle> <pages> 325-346, </pages> <year> 1990. </year>
Reference: [7] <author> Eswaran, K. P., J. N. Gary, R. A. Lorie, </author> <title> and I.L. Traiger, "The Notions of Consistency and Predicate Locks in a Database System," </title> <booktitle> Communication of ACM </booktitle> , 19(11) 624-633, 1976. 
Reference-contexts: Related Work The read-write priority ceiling protocol (RW-PCP) proposed by Sha et al. [17] is the first extension of the original PCP [16] in scheduling transactions in hard RTDBS. They used two phase locking (2PL) <ref> [7] </ref> along with PCP. RW-PCP exploits the semantics of read and write operations of transactions in assigning two different priority ceilings to each data item. Due to the combination of priority ceiling assignment and priority inheritance mechanism, RW-PCP does not need to explicitly check for read/write operation conflicts.
Reference: [8] <author> Haritsa, J. R., M. J. Carey, and M. Livny, </author> <title> "Data Access Scheduling in Firm Real-time Database Systems," </title> <booktitle> Real-time Systems , 4(3) </booktitle> <pages> 203-242, </pages> <year> 1992. </year>
Reference: [9] <author> Hong, D., S. Chakravarthy and T. Johnson, </author> <title> Locking Based Concurrency Control for Integrated Real-Time Database, </title> <booktitle> Proc. of First Workshop on Real-Time Databases: Issues and Applications , California, </booktitle> <address> USA, </address> <month> March , </month> <year> 1996. </year>
Reference: [10] <author> Huang, J., J. A. Stankovic, K. Ramamritham, and D. Towley, </author> <title> "Experimental Evaluation of Real-Time Optimistic Concurrency Control Schemes," </title> <booktitle> Proc. of the 17th International Conference on Very Large Data Bases , pp. </booktitle> <pages> 35-46, </pages> <year> 1991. </year>
Reference: [11] <author> Lee, J. and S.H. Son, </author> <title> "Using Dynamic Adjustment of Serialization Order for Real-time Database Systems," </title> <booktitle> Proc. of 14th IEEE Real-time Systems Symposium , 1993. </booktitle>
Reference: [12] <author> Liu, C.L., and J.W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment," </title> <journal> Journal of ACM , 20(1) </journal> <pages> 46-66, </pages> <year> 1973. </year>
Reference-contexts: Hence, one priority ceiling, called write priority ceiling , is used to control read operations of transactions. 5. Protocol Description We assume that the system has a single processor with a memory resident database and that all transactions are periodic transactions with rate monotonic priority assignment <ref> [12] </ref>. That is, a transaction with a shorter period is assigned a higher priority and the deadline of a transaction is at the end of its period. The priorities of transactions are of a total order. This initial priority of a transaction is called the original priority.
Reference: [13] <author> Nakazato, H. </author> " <title> Issues on Synchronizing and Scheduling Tasks in Real-Time Database Systems , PhD thesis, </title> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: RW-PCP avoids deadlocks and guarantees that a transaction can be blocked by a single lower priority transaction only. However, it can cause transaction blockings which, we will show later, are unnecessary. Nakazato et al. <ref> [13] </ref> proposed the convex ceiling protocol (CCP) which is also an extension of PCP. CCP reduces the transaction blocking by unlocking the data item with the highest priority ceiling before the end of the transaction. <p> Some cannot even provide the schedulability analysis since they cannot bound the number of abortions that a lower priority transaction may experience [21]. 3. Problem Description In this section, we explain the problem of unnecessary transaction blockings inherent in both PCP [17] and CCP <ref> [13] </ref>. Although we use RW-PCP as an illustration example, a similar argument can also be applied to CCP. In RW-PCP, three different priority ceilings of data items are defined as follows.
Reference: [14] <author> Rajkumar, R., </author> <title> "Synchronization in Real-time Systems: A Priority Inheritance Approach", </title> <publisher> Kluwer Academic Publishers, </publisher> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: Unfortunately, the duration of priority inversion can be indefinitely long because some other intermediate priority transactions can repeatedly preempt T L [16]. The mechanism of priority inheritance has been proposed <ref> [14] </ref> to solve the priority inversion problem. This mechanism states that when a lower priority transaction T L blocks a higher priority transaction T H , T L inherits and executes at the priority of T H .
Reference: [15] <author> Ramamritham, K., </author> <title> "Real-time Databases," </title> <booktitle> International Journal of Distributed and Parallel Databases , 1(2), </booktitle> <year> 1992. </year>
Reference-contexts: Having timing constraints, usually in terms of deadlines, characterizes real-time transactions. The notion of timeliness must be considered by the schedulers of RTDBS to guarantee that the deadlines of transactions are met <ref> [15] </ref>. Failure to meet a transactions deadline may result in intolerable system performance degradation, or could lead to catastrophic consequences. * This work was supported in part by the Office of Naval Research Many previous studies have focused on integrating priority-driven scheduling with concurrency control protocols [1,5,8,9,10,20,22].
Reference: [16] <author> Sha, L., R. Rajkumar, and J. P. Lehoczky, </author> <title> "Priority Inheritance protocols: An Approach to Real-time Synchronization," </title> <journal> IEEE Transactions on Computer , 39(9) </journal> <pages> 1175-1185, </pages> <year> 1990. </year>
Reference-contexts: Otherwise, the consequences could be catastrophic. Hard RTDBS are used in a wide range of mission-critical applications such as avionics systems, aerospace systems, robotics and defence systems. The difficulties of providing a guarantee of meeting hard deadlines of transactions lie in problems of priority inversion and of deadlocks <ref> [16] </ref> which could occur when concurrency control protocols are adapted to priority-driven scheduling. Concurrency control protocols normally employ transaction blocking in resolving data conflicts among transactions for data consistency [4]. <p> Unfortunately, the duration of priority inversion can be indefinitely long because some other intermediate priority transactions can repeatedly preempt T L <ref> [16] </ref>. The mechanism of priority inheritance has been proposed [14] to solve the priority inversion problem. This mechanism states that when a lower priority transaction T L blocks a higher priority transaction T H , T L inherits and executes at the priority of T H . <p> T L will return to its original priority when it releases all of its locks on the resources on which the priority inheritance takes place. However, the priority inheritance protocol does not solve the deadlock problem <ref> [16] </ref>. Also, a higher priority transaction could be blocked by many lower priority transactions. This chained blocking can make the analysis of the worst-case blocking of a higher priority transaction too pessimistic. <p> However, these priority ceiling protocols cannot directly be applied to RTDBS because they cannot guarantee the serializable executions of real-time transactions. Therefore, some studies (e.g., [13,17]) extended the original priority ceiling protocol (PCP) <ref> [16] </ref> to scheduling transactions in hard RTDBS. While they provide a bound on transaction blocking delay and schedulability analysis, they often suffer from the problem of unnecessary transaction blockings due to their conservative scheduling of transactions in accessing the shared data. <p> In Section 9, we devise the worst-case schedulability analysis which provides a better schedulability condition than other protocols, and conclude in Section 10. 2. Related Work The read-write priority ceiling protocol (RW-PCP) proposed by Sha et al. [17] is the first extension of the original PCP <ref> [16] </ref> in scheduling transactions in hard RTDBS. They used two phase locking (2PL) [7] along with PCP. RW-PCP exploits the semantics of read and write operations of transactions in assigning two different priority ceilings to each data item.
Reference: [17] <author> Sha, L., R. Rajkumar, S. H. Son, and C. H. Chang, </author> <title> "A Real-time Locking Protocol," </title> <journal> IEEE Transactions on Computers , 40(7) </journal> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: In Section 9, we devise the worst-case schedulability analysis which provides a better schedulability condition than other protocols, and conclude in Section 10. 2. Related Work The read-write priority ceiling protocol (RW-PCP) proposed by Sha et al. <ref> [17] </ref> is the first extension of the original PCP [16] in scheduling transactions in hard RTDBS. They used two phase locking (2PL) [7] along with PCP. RW-PCP exploits the semantics of read and write operations of transactions in assigning two different priority ceilings to each data item. <p> Some cannot even provide the schedulability analysis since they cannot bound the number of abortions that a lower priority transaction may experience [21]. 3. Problem Description In this section, we explain the problem of unnecessary transaction blockings inherent in both PCP <ref> [17] </ref> and CCP [13]. Although we use RW-PCP as an illustration example, a similar argument can also be applied to CCP. In RW-PCP, three different priority ceilings of data items are defined as follows. <p> We will not describe the execution under RW-PCP. Interested readers are referred to <ref> [17] </ref>. It can be easily seen that under RW-PCP, the worst case effective blocking time of T 1 by T 2 is 4 time units. <p> Single-blocking and Deadlock-free It is shown that RW-PCP <ref> [17] </ref> has two important properties: single-blocking and deadlock-free. With these properties, one can determine the schedulability conditions for a given transaction set before the system actually executes the transaction set. We now show that PCP-DA also has these two properties. <p> With the single-blocking and deadlock-free properties, one can perform the schedulability analysis of a transaction set which uses the rate-monotonic priority assignment and PCP-DA. For schedulability condition, it has been proved in <ref> [17] </ref> that a set of n periodic transactions using rate-monotonic priority assignment under RW-PCP can always meet their deadlines if the following conditions are satisfied. " + + + + - H K i i n Pd Pd Pd Pd i i 1 2 It can be easily seen that the <p> We have BTS i = - T L | P L &lt; P i and T L reads x and Wceil (x) P i - On the other hand, RW-PCP as shown in <ref> [17] </ref> has BTS i : BTS i = - T L | P L &lt; P i and (T L reads x and Wceil (x) P i or T L writes x and Aceil (x) P i )- For both PCP-DA and RW-PCP, the worst case blocking time of T i
Reference: [18] <author> Shu, L. C. and M. Young, </author> <title> A Mixed Locking/Abort Protocol for Hard Real-Time Systems, </title> <booktitle> Proc. of 11th IEEE Workshop on Real-Time Operating Systems and Software. </booktitle> <address> RTOSS'94. P.102-6. </address> <year> 1994. </year>
Reference: [19] <author> Shu, L. C., M. Young and R. Rajkumar, </author> <title> An Abort Ceiling Protocol for Controlling Priority Inversion, </title> <booktitle> Proc. of 1st International Workshop on Real-time Computing Systems & Application, </booktitle> <address> Seoul Korea. P.48-52. </address> <year> 1994. </year>
Reference: [20] <author> Son, S. H., S. Park, and Y. Lin, </author> <title> "An Integrated Real-Time Locking Protocol," </title> <booktitle> Proc. of the 8th International Conference on Data Engineering , pp. </booktitle> <pages> 527-534, </pages> <year> 1992. </year>
Reference: [21] <author> Takada, H. and K. Sakamura, </author> <title> Real-Time Synchronization Protocols with Abortable Critical Sections, </title> <booktitle> Proc. of 1st International Workshop on Real-time Computing Systems & Application, </booktitle> <address> Seoul Korea. P.48-52, </address> <year> 1994. </year>
Reference-contexts: While they can reduce the blocking time of transactions at the expense of abortion and re-execution overheads, they complicate the system schedulability analysis. Some cannot even provide the schedulability analysis since they cannot bound the number of abortions that a lower priority transaction may experience <ref> [21] </ref>. 3. Problem Description In this section, we explain the problem of unnecessary transaction blockings inherent in both PCP [17] and CCP [13]. Although we use RW-PCP as an illustration example, a similar argument can also be applied to CCP.
Reference: [22] <author> Tseng, S.M., Y. H. Chin and W. P. Yang, </author> <title> Scheduling Value-Based Transactions in Real-Time Main-Memory Databases, </title> <booktitle> Proc. of First Workshop on Real-Time Databases: Issues and Applications , California, </booktitle> <address> USA, </address> <month> March , </month> <year> 1996. </year>
Reference: [23] <author> Yu, P. S., K. L. Wu, K. J. Lin, K. J. and S. H. Son, </author> <title> "On Real-time Databases: Concurrency Control and Scheduling," </title> <booktitle> Proc. of the IEEE , 82(1) </booktitle> <pages> 140-157, </pages> <year> 1994. </year>
Reference-contexts: 1. Introduction In real-time database systems (RTDBS), the correctness of a result depends on not only the logical results and functional behavior of the execution, but also the temporal behavior, i.e. the time when the result is delivered <ref> [23] </ref>. Having timing constraints, usually in terms of deadlines, characterizes real-time transactions. The notion of timeliness must be considered by the schedulers of RTDBS to guarantee that the deadlines of transactions are met [15].
References-found: 23

