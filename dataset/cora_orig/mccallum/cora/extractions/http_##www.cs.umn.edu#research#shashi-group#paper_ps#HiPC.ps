URL: http://www.cs.umn.edu/research/shashi-group/paper_ps/HiPC.ps
Refering-URL: http://www.cs.umn.edu/Research/shashi-group/abstract/hipc95.abs.html
Root-URL: http://www.cs.umn.edu
Email: [shekhar,siva,kumar]@cs.umn.edu  
Title: Load-Balancing in High Performance GIS:  
Keyword: High Performance, Geographic Information Systems, Range Query, Declustering Methods, Load-Balancing, Polygon Clipping.  
Address: Warrenton, VA Adelphi, MD Minneapolis, USA-55454  
Affiliation: Department of Computer Science US Army CECOM, IEWD IPB, ARL University of Minnesota  
Abstract: A Summary of Results fl Abstract A high performance geographic information system (GIS) is a central component of many real-time applications of spatial decision-making. In this paper, we develop and experimentally evaluate data partitioning and load-balancing techniques for range queries over polygonal maps. Declustering (partitioning) of polygonal data is hard due to the spatial nature, varying sizes of polygons, and uncertainity about the query location. We implement and evaluate static decluster-ing methods (e.g. random, mapping-functions, local load-balance, similarity), and dynamic load-balancing methods (GRR, ARR, and Pool-Based methods). Experimental results on Cray T3D show that random declustering performs worse than systematic declustering methods for static as well as dynamic load-balancing situations. We also show that both the static and dynamic load-balancing methods are necessary for improved performance but not sufficient by themselves. For these load-balancing methods, we are able to achieve average speedups of 14 on 16 processors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aggarwal, B. Chazelle, L. Guibas, C. O'Dunlaing, and C. Yap. </author> <title> Parallel Computational Geometry. </title> <booktitle> In Proceedings of the 25th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 468-477, </pages> <year> 1985. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning <ref> [1, 2, 3] </ref> or by data-partitioning [7, 10, 17, 18]. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor.
Reference: [2] <author> S. G. Akl and K. A. Lyons. </author> <title> Parallel Computational Geometry. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1993. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning <ref> [1, 2, 3] </ref> or by data-partitioning [7, 10, 17, 18]. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor.
Reference: [3] <author> M. J. Atallah and M. T. Goodrich. </author> <title> Efficient Plane Sweeping in Parallel. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Computational Geometry, </booktitle> <pages> pages 216-225, </pages> <year> 1986. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning <ref> [1, 2, 3] </ref> or by data-partitioning [7, 10, 17, 18]. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor.
Reference: [4] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for Reporting and Counting Geometric Intersections. </title> <journal> IEEE Transactions on Computers, </journal> <volume> c-28(9):643-647, </volume> <year> 1979. </year>
Reference-contexts: We call this problem the GIS-range-query problem. In this paper, we focus on parallelizing the GIS-range-query problem over a set of processors to meet the high performance requirements imposed by a typical HP-GIS. Related work and Our Contributions: The existing sequential solutions for the range-query problem <ref> [4, 9] </ref> cannot be directly used as a solution to the GIS-range-query problem due to the high performance requirements of the application. Hence we need more refined approaches like parallel algorithms, which deliver the required performance.
Reference: [5] <author> T. Bially. </author> <title> Space-Filling Curves: Their Generation and Their Application to Bandwidth Reduction. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <year> 1969. </year>
Reference-contexts: We use a mapping function based on the Hilbert Space-filling curve <ref> [5, 11] </ref>. (See [18] for a survey of other mapping functions for declustering.) (2) Local load-balancing methods [15, 12] consider a sample window of space (similar to the actual range-query) at a time, and try to equally distribute the load in that window to all the processors.
Reference: [6] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk Allocation for Product Files on Multiple Disk Systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 7, </volume> <month> March </month> <year> 1982. </year>
Reference-contexts: In addition, we evaluate different declustering methods for both the static and dynamic load-balancing methods. 2 Load-Balancing Techniques The GIS-range-query problem can be parallelized either by statically partitioning (or declustering) the spatial data or by using dynamic load-balancing (DLB) techniques. Static-partitioning methods <ref> [6, 7, 10, 12, 18] </ref> divide the data prior to the computation process. In contrast, DLB methods try to improve the load-balance by transferring some polygons to idle processors. Figure 2 shows the general structure for parallelizing the range-query problem. The data is initially declustered (partitioned) among all the processors. <p> It is known that the declustering problem is NP-hard for point data [15]. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions <ref> [6, 18] </ref>, local load-balancing methods [10, 12, 15], and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data.
Reference: [7] <author> W. R. Franklin et al. </author> <title> Uniform Grids: A Technique for Intersection Detection on Serial and Parallel Machines. </title> <booktitle> In Proceedings of the 9th Conference on Automated Cartography, American Society for Photoge-ometry and Remote Sensing, </booktitle> <pages> pages 100-109, </pages> <year> 1989. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning [1, 2, 3] or by data-partitioning <ref> [7, 10, 17, 18] </ref>. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor. <p> In addition, we evaluate different declustering methods for both the static and dynamic load-balancing methods. 2 Load-Balancing Techniques The GIS-range-query problem can be parallelized either by statically partitioning (or declustering) the spatial data or by using dynamic load-balancing (DLB) techniques. Static-partitioning methods <ref> [6, 7, 10, 12, 18] </ref> divide the data prior to the computation process. In contrast, DLB methods try to improve the load-balance by transferring some polygons to idle processors. Figure 2 shows the general structure for parallelizing the range-query problem. The data is initially declustered (partitioned) among all the processors.
Reference: [8] <author> M. T. Fang, R. C. T. Lee, and C. C. Chang. </author> <title> The Idea of Declustering and its Applications. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <year> 1986. </year>
Reference-contexts: We use a rectangle as the sample window and balance the load in that window by considering the number of edges corresponding to that window at each processor. (3) The Similarity-graph-based approach to declustering problems is described in detail in <ref> [15, 8] </ref>. In this paper, we use the incremental version of the similarity method described in [15]. 2.2 Dynamic Load-Balancing Methods If static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by transferring some polygons to idle processors using dynamic load-balancing techniques.
Reference: [9] <author> A. Guttman. R-trees: </author> <title> A Dynamic Index Structure for Spatial Searching. </title> <booktitle> In Proceedings of the SIGMOD Conference, </booktitle> <pages> pages 47-57, </pages> <year> 1984. </year>
Reference-contexts: We call this problem the GIS-range-query problem. In this paper, we focus on parallelizing the GIS-range-query problem over a set of processors to meet the high performance requirements imposed by a typical HP-GIS. Related work and Our Contributions: The existing sequential solutions for the range-query problem <ref> [4, 9] </ref> cannot be directly used as a solution to the GIS-range-query problem due to the high performance requirements of the application. Hence we need more refined approaches like parallel algorithms, which deliver the required performance.
Reference: [10] <author> E. G. Hoel and H. Samet. </author> <title> Performance of Data-Parallel Spatial Operations. </title> <booktitle> In Proceedings of the 20th VLDB Conference, </booktitle> <pages> pages 156-167, </pages> <year> 1994. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning [1, 2, 3] or by data-partitioning <ref> [7, 10, 17, 18] </ref>. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor. <p> In addition, we evaluate different declustering methods for both the static and dynamic load-balancing methods. 2 Load-Balancing Techniques The GIS-range-query problem can be parallelized either by statically partitioning (or declustering) the spatial data or by using dynamic load-balancing (DLB) techniques. Static-partitioning methods <ref> [6, 7, 10, 12, 18] </ref> divide the data prior to the computation process. In contrast, DLB methods try to improve the load-balance by transferring some polygons to idle processors. Figure 2 shows the general structure for parallelizing the range-query problem. The data is initially declustered (partitioned) among all the processors. <p> It is known that the declustering problem is NP-hard for point data [15]. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions [6, 18], local load-balancing methods <ref> [10, 12, 15] </ref>, and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data.
Reference: [11] <author> H. V. Jagadish. </author> <title> Linear Clustering of Objects with Multiple Attributes. </title> <booktitle> In Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 332-342, </pages> <year> 1990. </year>
Reference-contexts: We use a mapping function based on the Hilbert Space-filling curve <ref> [5, 11] </ref>. (See [18] for a survey of other mapping functions for declustering.) (2) Local load-balancing methods [15, 12] consider a sample window of space (similar to the actual range-query) at a time, and try to equally distribute the load in that window to all the processors.
Reference: [12] <author> I. Kamel and C. Faloutsos. </author> <title> Parallel R-Trees. </title> <booktitle> In Proceedings of the International Conference on Management of Data, ACM SIGMOD, </booktitle> <year> 1992. </year>
Reference-contexts: In addition, we evaluate different declustering methods for both the static and dynamic load-balancing methods. 2 Load-Balancing Techniques The GIS-range-query problem can be parallelized either by statically partitioning (or declustering) the spatial data or by using dynamic load-balancing (DLB) techniques. Static-partitioning methods <ref> [6, 7, 10, 12, 18] </ref> divide the data prior to the computation process. In contrast, DLB methods try to improve the load-balance by transferring some polygons to idle processors. Figure 2 shows the general structure for parallelizing the range-query problem. The data is initially declustered (partitioned) among all the processors. <p> It is known that the declustering problem is NP-hard for point data [15]. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions [6, 18], local load-balancing methods <ref> [10, 12, 15] </ref>, and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data. <p> We use a mapping function based on the Hilbert Space-filling curve [5, 11]. (See [18] for a survey of other mapping functions for declustering.) (2) Local load-balancing methods <ref> [15, 12] </ref> consider a sample window of space (similar to the actual range-query) at a time, and try to equally distribute the load in that window to all the processors.
Reference: [13] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: This drawback is overcome by selectively duplicating the polygon data on different processors and exchanging only the polygon ids. Which Processor Should an Idle Processor ask for More Work: Methods to decide which processor an idle processor should ask for more work are discussed and analyzed in <ref> [13, 14] </ref>.
Reference: [14] <author> V. Kumar, A. Grama, and V. N. Rao. </author> <title> Scalable load balancing techniques for parallel computers. </title> <journal> Journal of Distributed Computing, </journal> <volume> 7, </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: This drawback is overcome by selectively duplicating the polygon data on different processors and exchanging only the polygon ids. Which Processor Should an Idle Processor ask for More Work: Methods to decide which processor an idle processor should ask for more work are discussed and analyzed in <ref> [13, 14] </ref>.
Reference: [15] <author> D. R. Liu and S. Shekhar. </author> <title> A Similarity Graph-Based Approach to Declustering Problem and its Applications. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering, IEEE, </booktitle> <year> 1995. </year>
Reference-contexts: It is known that the declustering problem is NP-hard for point data <ref> [15] </ref>. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions [6, 18], local load-balancing methods [10, 12, 15], and similarity-based methods [15]. <p> It is known that the declustering problem is NP-hard for point data [15]. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions [6, 18], local load-balancing methods <ref> [10, 12, 15] </ref>, and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data. <p> It is known that the declustering problem is NP-hard for point data <ref> [15] </ref>. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions [6, 18], local load-balancing methods [10, 12, 15], and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data. <p> We use a mapping function based on the Hilbert Space-filling curve [5, 11]. (See [18] for a survey of other mapping functions for declustering.) (2) Local load-balancing methods <ref> [15, 12] </ref> consider a sample window of space (similar to the actual range-query) at a time, and try to equally distribute the load in that window to all the processors. <p> We use a rectangle as the sample window and balance the load in that window by considering the number of edges corresponding to that window at each processor. (3) The Similarity-graph-based approach to declustering problems is described in detail in <ref> [15, 8] </ref>. In this paper, we use the incremental version of the similarity method described in [15]. 2.2 Dynamic Load-Balancing Methods If static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by transferring some polygons to idle processors using dynamic load-balancing techniques. <p> In this paper, we use the incremental version of the similarity method described in <ref> [15] </ref>. 2.2 Dynamic Load-Balancing Methods If static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by transferring some polygons to idle processors using dynamic load-balancing techniques. A typical dynamic load-balancing (DLB) technique addresses the following issues.
Reference: [16] <author> S. Shekhar, S. Ravada, V. Kumar, D. Chubb, and G. Turner. </author> <title> Load-Balancing in High Performance GIS: Declustering Polygonal Maps. </title> <booktitle> In Proceedings of the 4th International Symposium on Large Spatial Databases, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: In turn, the polygonal data can be divided into subsets of polygons (without actually breaking any polygons), subsets of small polygons, or subsets of edges. For the GIS-range-query problem, all of these options except for the division of polygons into subsets of polygons, result in increased total work <ref> [16] </ref>.
Reference: [17] <author> F. Wang. </author> <title> A Parallel Intersection Algorithm for Vector Polygon Overlay. </title> <journal> IEEE Computer Graphics & Applications, </journal> <month> March </month> <year> 1993. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning [1, 2, 3] or by data-partitioning <ref> [7, 10, 17, 18] </ref>. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor.
Reference: [18] <author> Y. Zhou, S. Shekhar, and M. Coyle. </author> <title> Disk Allocation Methods for Parallelizing Grid Files. </title> <booktitle> In Proceedings of the Tenth International Conference on Data Engineering, IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: Hence we need more refined approaches like parallel algorithms, which deliver the required performance. A GIS-range-query can be parallelized by function-partitioning [1, 2, 3] or by data-partitioning <ref> [7, 10, 17, 18] </ref>. Function-partitioning uses specialized parallel data-structures and algorithms which may be different from their sequential counterparts. Data-partitioning techniques divide the spatial data (e.g. points, lines, polygons) among different processors, and thus independently execute the sequential algorithm on each processor. <p> In addition, we evaluate different declustering methods for both the static and dynamic load-balancing methods. 2 Load-Balancing Techniques The GIS-range-query problem can be parallelized either by statically partitioning (or declustering) the spatial data or by using dynamic load-balancing (DLB) techniques. Static-partitioning methods <ref> [6, 7, 10, 12, 18] </ref> divide the data prior to the computation process. In contrast, DLB methods try to improve the load-balance by transferring some polygons to idle processors. Figure 2 shows the general structure for parallelizing the range-query problem. The data is initially declustered (partitioned) among all the processors. <p> It is known that the declustering problem is NP-hard for point data [15]. Several heuristic methods proposed in the literature for solving the declustering problem for point data are based on the ideas of space partitioning with mapping functions <ref> [6, 18] </ref>, local load-balancing methods [10, 12, 15], and similarity-based methods [15]. We use a polygon-to-point transformation function based on the centroid of a polygon and use point-based static-declustering methods for declustering the polygon data. <p> We use a mapping function based on the Hilbert Space-filling curve [5, 11]. (See <ref> [18] </ref> for a survey of other mapping functions for declustering.) (2) Local load-balancing methods [15, 12] consider a sample window of space (similar to the actual range-query) at a time, and try to equally distribute the load in that window to all the processors.
References-found: 18

