URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-003.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: A Functional/Declarative Dichotomy for Characterizing Simulation Models  
Author: P. A. Fishwick 
Address: Room 301 Gainesville, FL. 32611  
Affiliation: Department of Computer and Information Sciences University of Florida, Bldg CSE,  
Abstract: Traditional computer simulation terminology includes taxonomic divisions with terms such as "discrete event," "continuous," and "process oriented." Even though such terms have become familiar to simulation researchers, the terminology is distinct from other disciplines |such as artificial intelligence and software engineering| which have similar goals to our own relating specifically to modelling dynamic systems. We present a perspective that serves to characterize simulation models in terms of their procedural versus declarative orientations. In teaching simulation students using this perspective, we have had success in relating the field of modelling within computer simulation to other sub-disciplines within computer science. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Athena Systems. </institution> <note> Foresight User's Manual, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior [27, 5]. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for computer assisted methods; tools such as Foresight <ref> [1] </ref> provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization. It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas [21, 20]. <p> A function will be represented as a block with inputs and outputs. Inputs and outputs can represent data flows or control flows, and they are defined as such within SE <ref> [1] </ref>. From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [19] bear remarkable resemblance to those of systems and simulation theory [22, 30].
Reference: [2] <author> Jerry Banks and John S. Carson. </author> <title> Discrete Event System Simulation. </title> <publisher> Prentice Hall, </publisher> <year> 1984. </year>
Reference-contexts: Our emphasis is on modelling methodology [7, 6] rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature <ref> [17, 2] </ref> as compared with methodology in modelling.
Reference: [3] <author> Daniel G. Bobrow. </author> <title> Qualitative Reasoning about Physical Systems. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Autonomy has, therefore, spawned the creation of knowledge based models that contain a variety of natural, artificial and intelligent objects interacting and reasoning in an environment. The fields of qualitative reasoning and qualitative physics <ref> [27, 3] </ref> are evidence of the AI interest in system modelling from the perspective of mathematical reasoning. In addition to autonomy playing a critical role, incomplete knowledge is ever present within models and AI researchers have suggested new ways of representing this type of knowledge.
Reference: [4] <author> Grady Booch. </author> <title> Object Oriented Design. </title> <publisher> Ben-jamin Cummings, </publisher> <year> 1991. </year>
Reference-contexts: While we adhere to the object model as a good basis for conceptual, non-executable models, we depart from the norm when introducing how additional modelling techniques such as production systems, track-based animation and System Dynamics fit within the overall framework. In the usual object oriented modelling approach within SE <ref> [26, 4] </ref>, 1 In terms of closed form analysis, it is natural to form a dichotomy between "discrete" and "continuous" since the solution methods are different. With simulation | and especially with modelling| the differences are not that pronounced. specific modelling methods such as FSA modelling and DFDs are promoted.
Reference: [5] <author> Ernest Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: These types of techniques have been used for declarative and functional modelling [29]; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior <ref> [27, 5] </ref>. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for computer assisted methods; tools such as Foresight [1] provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization. <p> The production system and logic approach utilize this form of calculation to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation. Methods of production systems <ref> [5] </ref> and formal logic [8] (either standard or temporal) may be used as a basis for simulation modelling. We need to define the concept of state, input and time with respect to these models: * State is defined as the current set of facts (truths) in a formal system.
Reference: [6] <editor> Maurice S. Elzas, Tuncer I. Oren, and Bernard P. Zeigler. </editor> <booktitle> Modelling and Simulation Methodology TR92-003 Computer and Information Sciences, University of Florida 8 in the Artificial Intelligence Era. </booktitle> <publisher> North Holland, </publisher> <year> 1986. </year>
Reference-contexts: Our emphasis is on modelling methodology <ref> [7, 6] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [17, 2] as compared with methodology in modelling.
Reference: [7] <author> Maurice S. Elzas, Tuncer I. Oren, and Bernard P. Zeigler. </author> <title> Modelling and Simulation Methodology: Knowledge Systems' Paradigms. </title> <publisher> North Holland, </publisher> <year> 1989. </year>
Reference-contexts: Our emphasis is on modelling methodology <ref> [7, 6] </ref> rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature [17, 2] as compared with methodology in modelling.
Reference: [8] <author> Herbert Enderton. </author> <title> A Mathematical Introduction to Logic. </title> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference-contexts: The production system and logic approach utilize this form of calculation to afford declarative methods the capability of representing complex behaviors with a modicum of mathematical notation. Methods of production systems [5] and formal logic <ref> [8] </ref> (either standard or temporal) may be used as a basis for simulation modelling. We need to define the concept of state, input and time with respect to these models: * State is defined as the current set of facts (truths) in a formal system.
Reference: [9] <author> Paul A. Fishwick. </author> <title> The Role of Process Abstraction in Simulation. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 18(1):18 - 39, </volume> <month> Jan-uary/February </month> <year> 1988. </year>
Reference-contexts: Models at varying levels of abstraction <ref> [9] </ref> are created in response to the questions asked of them [15]. 5 Functional Models We will use a liberal interpretation of the word "functional" to include modelling approaches that stress procedural or "process-oriented" models.
Reference: [10] <author> Paul A. Fishwick. </author> <title> Qualitative Methodology in Simulation Model Engineering. </title> <journal> Simulation Journal, </journal> <volume> 52(3):95 - 101, </volume> <month> March </month> <year> 1989. </year>
Reference-contexts: It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas [21, 20]. Some of our previous re search <ref> [11, 10, 12, 15] </ref> has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing.
Reference: [11] <author> Paul A. Fishwick. </author> <title> Studying how Models Evolve: An Emphasis on Simulation Model Engineering. </title> <booktitle> In Advances in AI and Simulation, </booktitle> <pages> pages 74 - 79, </pages> <address> Tampa, FL, </address> <year> 1989. </year>
Reference-contexts: It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas [21, 20]. Some of our previous re search <ref> [11, 10, 12, 15] </ref> has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing.
Reference: [12] <author> Paul A. Fishwick. </author> <title> Toward an Integrated Approach to Simulation Model Engineering. </title> <journal> International Journal of General Systems, </journal> <volume> 17(1):1 - 19, </volume> <month> May </month> <year> 1990. </year>
Reference-contexts: It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas [21, 20]. Some of our previous re search <ref> [11, 10, 12, 15] </ref> has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing.
Reference: [13] <author> Paul A. Fishwick. </author> <title> Heterogeneous Decomposition and Coupling for Combined Modeling. </title> <booktitle> In 1991 Winter Simulation Conference, </booktitle> <pages> pages 1199 - 1208, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented mod-elling. One may combine these forms to form heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [13, 18, 15] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another. The proposed taxonomy is an extension to the object oriented modelling paradigm.
Reference: [14] <editor> Paul A. Fishwick and Richard B. Modjeski, editors. </editor> <title> Knowledge Based Simulation: Methodology and Application. </title> <publisher> Springer Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several texts have appeared <ref> [28, 14] </ref>. Simulation models have characteristically been composed of simple entities and objects; however, the introduction of autonomous agents (including robots and humans) into a model has suggested that simulationists use AI models in places where autonomy is present.
Reference: [15] <author> Paul A. Fishwick and Bernard P. Zeigler. </author> <title> A Mul-timodel Methodology for Qualitative Model Engineering. </title> <booktitle> ACM Transactions on Modeling and Computer Simulation, </booktitle> <year> 1992. </year> <note> Submitted for review. </note>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented mod-elling. One may combine these forms to form heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [13, 18, 15] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another. The proposed taxonomy is an extension to the object oriented modelling paradigm. <p> It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas [21, 20]. Some of our previous re search <ref> [11, 10, 12, 15] </ref> has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing. <p> Models at varying levels of abstraction [9] are created in response to the questions asked of them <ref> [15] </ref>. 5 Functional Models We will use a liberal interpretation of the word "functional" to include modelling approaches that stress procedural or "process-oriented" models.
Reference: [16] <author> Robert Kowalski. </author> <title> Logic for Problem Solving. </title> <publisher> El-sevier North Holland, </publisher> <year> 1979. </year>
Reference-contexts: TR92-003 Computer and Information Sciences, University of Florida 4 3 The Two Jug System Consider the water jug problem as described in AI <ref> [16, 24] </ref>. In the water jug problem, there are two water jugs (one with a four gallon capacity, and the other with three gallons). Jug A is the three gallon jug, and jug B is the four gallon jug (see figure 2).
Reference: [17] <author> Averill M. Law and David W. </author> <title> Kelton. Simulation Modeling & Analysis. </title> <publisher> McGraw Hill, </publisher> <year> 1991. </year> <note> Second edition. </note>
Reference-contexts: Our emphasis is on modelling methodology [7, 6] rather than analysis methodology. Methodology in analysis has received a much more comprehensive treatment in the general simulation literature <ref> [17, 2] </ref> as compared with methodology in modelling.
Reference: [18] <author> Victor T. Miller and Paul A. Fishwick. </author> <title> Heterogeneous Hierarchical Models. In Artificial Intelligence X: Knowledge Based Systems, </title> <address> Orlando, FL, </address> <month> April </month> <year> 1992. </year> <pages> SPIE. </pages>
Reference-contexts: Declarative models emphasize state transitions, while functional models emphasize operational or event oriented mod-elling. One may combine these forms to form heterogeneous models where model graph nodes may be of different types. Finally, the multimodel <ref> [13, 18, 15] </ref> is the most comprehensive type of model that supports multiple models tied together with homomorphic mappings from one model to another. The proposed taxonomy is an extension to the object oriented modelling paradigm.
Reference: [19] <author> Harlan D. Mills. </author> <title> Stepwise refinement and verification in box-structured systems. </title> <journal> IEEE Computer, </journal> <volume> 21(6):23 - 36, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: Inputs and outputs can represent data flows or control flows, and they are defined as such within SE [1]. From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills <ref> [19] </ref> bear remarkable resemblance to those of systems and simulation theory [22, 30]. This further demonstrates a convergence in model theory between SE and simulation.
Reference: [20] <author> Richard E. Nance. </author> <title> Modeling and Programming: An Evolutionary Convergence, </title> <month> April </month> <year> 1988. </year> <note> Unpublished overheads requested from author. </note>
Reference-contexts: It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas <ref> [21, 20] </ref>. Some of our previous re search [11, 10, 12, 15] has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing.
Reference: [21] <author> C. Michael Overstreet and Richard E. Nance. </author> <title> A Specification Language to Assist in Analysis of Discrete Event Simulation Models. </title> <journal> Communications of the ACM, </journal> <volume> 28(2):190 - 201, </volume> <month> February </month> <year> 1985. </year>
Reference-contexts: It appears as if software engineers are developing a keen interest in simulation; there is an apparent convergence between these two areas <ref> [21, 20] </ref>. Some of our previous re search [11, 10, 12, 15] has suggested the study of model engineering as a direct analog to software engineering. The key to the convergence between the SE and simulation fields lies in the area of distributed and real-time computing.
Reference: [22] <author> Louis Padulo and Michael A. Arbib. </author> <title> Systems Theory: A Unified State Space Approach to Continuous and Discrete Systems. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, PA, </address> <year> 1974. </year>
Reference-contexts: From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [19] bear remarkable resemblance to those of systems and simulation theory <ref> [22, 30] </ref>. This further demonstrates a convergence in model theory between SE and simulation. TR92-003 Computer and Information Sciences, University of Florida 7 If we consider each tap and each jug to be a function then we can create a functional block model illustrated in figure 7.
Reference: [23] <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Engle-wood Cliffs, N.J., </address> <year> 1981. </year>
Reference-contexts: System Dynamics models [25] and block models, for instance have functional orientations. The term "dichotomy" is used somewhat loosely, though, since there exist some kinds of modeling methods such as Petri nets <ref> [23] </ref> that have equal shares of declarative (i.e., place) and functional (i.e., transition) sub-representations. We first overview why we chose these two categories in our attempt to synthesize system modelling techniques in AI, SE and simulation.
Reference: [24] <author> Elaine Rich and Kevin Knight. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: TR92-003 Computer and Information Sciences, University of Florida 4 3 The Two Jug System Consider the water jug problem as described in AI <ref> [16, 24] </ref>. In the water jug problem, there are two water jugs (one with a four gallon capacity, and the other with three gallons). Jug A is the three gallon jug, and jug B is the four gallon jug (see figure 2).
Reference: [25] <author> George P. Richardson and A. L. Pugh. </author> <title> Introduction to System Dynamics Modeling with DYNAMO. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1981. </year>
Reference-contexts: Two key aspects of the new view shown in fig. 1 are the declarative versus the functional perspectives. These two modelling views form a dichotomy in that most modelling methods in simulation are oriented toward one view rather than the other. System Dynamics models <ref> [25] </ref> and block models, for instance have functional orientations. The term "dichotomy" is used somewhat loosely, though, since there exist some kinds of modeling methods such as Petri nets [23] that have equal shares of declarative (i.e., place) and functional (i.e., transition) sub-representations.
Reference: [26] <author> James Rumbaugh, Michael Blaha, William Pre-merlani, Eddy Frederick, and William Lorenson. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: While we adhere to the object model as a good basis for conceptual, non-executable models, we depart from the norm when introducing how additional modelling techniques such as production systems, track-based animation and System Dynamics fit within the overall framework. In the usual object oriented modelling approach within SE <ref> [26, 4] </ref>, 1 In terms of closed form analysis, it is natural to form a dichotomy between "discrete" and "continuous" since the solution methods are different. With simulation | and especially with modelling| the differences are not that pronounced. specific modelling methods such as FSA modelling and DFDs are promoted.
Reference: [27] <author> Daniel S. Weld and Johann DeKleer. </author> <title> Readings in Qualitative Reasoning about Physical Systems. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: Autonomy has, therefore, spawned the creation of knowledge based models that contain a variety of natural, artificial and intelligent objects interacting and reasoning in an environment. The fields of qualitative reasoning and qualitative physics <ref> [27, 3] </ref> are evidence of the AI interest in system modelling from the perspective of mathematical reasoning. In addition to autonomy playing a critical role, incomplete knowledge is ever present within models and AI researchers have suggested new ways of representing this type of knowledge. <p> These types of techniques have been used for declarative and functional modelling [29]; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior <ref> [27, 5] </ref>. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for computer assisted methods; tools such as Foresight [1] provide the modeller with the capability of modelling dynamic systems using finite state automata and block modelling all under the umbrella of object organization.
Reference: [28] <author> Lawrence E. Widman, Kenneth A. Loparo, and Norman R. Nielsen. </author> <booktitle> Artificial Intelligence, Simulation and Modeling. </booktitle> <publisher> John Wiley, </publisher> <year> 1989. </year>
Reference-contexts: This "incompleteness" should be programmed into the dynamical model where it is present. For the past decade, the interface area between AI and simulation has grown, and several texts have appeared <ref> [28, 14] </ref>. Simulation models have characteristically been composed of simple entities and objects; however, the introduction of autonomous agents (including robots and humans) into a model has suggested that simulationists use AI models in places where autonomy is present.
Reference: [29] <author> Terry Winograd. </author> <title> Frame Representations and the Declarative/Procedural Controversy. </title> <editor> In Daniel Bobrow and Allan Collins, editors, </editor> <booktitle> Representation and Understanding. </booktitle> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: While simulationists have used probability theory for representing abstracted quantities, one can also use heuristic rules and constraint based modelling techniques. These types of techniques have been used for declarative and functional modelling <ref> [29] </ref>; however, they are most useful within conceptual models that serve to enhance our ability to diagnose symptoms, plan future actions and provide common-sense explanations of device behavior [27, 5]. 2.2 SE & Simulation Models Software engineers are pioneering new and novel methods for computer assisted methods; tools such as Foresight
Reference: [30] <author> Bernard P. Zeigler. </author> <title> Theory of Modelling and Simulation. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference-contexts: From our perspective, these flows are all data flows regardless of whether a function treats its input data from a control perspective. The functional SE box structuring techniques of Mills [19] bear remarkable resemblance to those of systems and simulation theory <ref> [22, 30] </ref>. This further demonstrates a convergence in model theory between SE and simulation. TR92-003 Computer and Information Sciences, University of Florida 7 If we consider each tap and each jug to be a function then we can create a functional block model illustrated in figure 7.
Reference: [31] <author> Bernard P. Zeigler. </author> <title> DEVS Representation of Dynamical Systems: Event-Based Intelligent Control. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(1):72 - 80, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: This alternative taxonomy is based on a set of modelling approaches depicted in figure 1. In fig. 1, the first type of model is the concept model which corresponds to an object model within SE or a system entity structure <ref> [31] </ref>. The concept model is non-executable, and serves as a knowledge base for the system. From the concept model, one can derive either one of two basic mod-elling forms: declarative and functional. Declarative models emphasize state transitions, while functional models emphasize operational or event oriented mod-elling.
Reference: [32] <author> Bernard P. Zeigler. </author> <title> Object Oriented Simulation with Hierarchical, Modular Models: Intelligent Agents and Endomorphic Systems. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Technology has seen the computer decrease in size and cost while increasing in power. This combination of circumstances naturally leads to the use of computers in almost every electro-mechanical device. Zeigler presents a theory for modelling autonomous agents <ref> [32] </ref> while implementing a model engineering methodology. When software engineers had to concern themselves with modelling only mainframe or workstation software, the modelling process dealt with functional decompo-sitional methods: creating hierarchical routines and stubs while gradually expanding the size and complexity of the program.
References-found: 32

