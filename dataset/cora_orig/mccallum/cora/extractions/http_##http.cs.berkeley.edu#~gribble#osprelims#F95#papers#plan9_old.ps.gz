URL: http://http.cs.berkeley.edu/~gribble/osprelims/F95/papers/plan9_old.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~gribble/osprelims/F95/
Root-URL: http://www.cs.berkeley.edu
Author: Rob Pike Dave Presotto Ken Thompson Howard Trickey 
Address: Murray Hill, New Jersey 07974  
Affiliation: AT&T Bell Laboratories  
Note: Plan 9 from Bell Labs  
Abstract: Plan 9 is a distributed computing environment. It is assembled from separate machines acting as CPU servers, file servers, and terminals. The pieces are connected by a single file-oriented protocol and local name space operations. By building the system from distinct, specialised components rather than from similar general-purpose components, Plan 9 achieves levels of efficiency, security, simplicity, and reliability seldom realised in other distributed systems. This paper discusses the building blocks, intercon nections, and conventions of Plan 9. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. G. Fraser, </author> <title> ``Datakit - A Modular Network for Synchronous and Asynchronous Traffic,'' </title> <booktitle> Proc. Int. Conf. on Commun., </booktitle> <address> Boston, MA (June 1980). </address>
Reference-contexts: The production CPU server is a Silicon Graphics Power Series machine with four 25MHz MIPS processors, 128 megabytes of memory, no disk, and a 20 megabyte-per-second back-to-back DMA connection to the file server. It also has Datakit and Ethernet controllers to connect to terminals and non-Plan 9 systems. <ref> [1, 2] </ref> The operating system provides a conventional view of processes, based on fork and exec system calls, [3] and of files, mostly determined by the remote file server. <p> Names of machines and services connected to Datakit are hierarchical, for example nj/mh/astro/helix, defining (roughly) the area, building, department, and machine in a department. <ref> [1] </ref> Because the network provides naming for its machines, global naming issues need not be handled directly by Plan 9. However one of Plan 9's fundamental operations is to attach network services to the local name space on a per-process basis.
Reference: 2. <author> R. M Metcalfe and D. R. Boggs, </author> <title> The Ethernet Local Network: Three Reports, </title> <note> XEROX Palo Alto Research Center (February 1980). </note>
Reference-contexts: The production CPU server is a Silicon Graphics Power Series machine with four 25MHz MIPS processors, 128 megabytes of memory, no disk, and a 20 megabyte-per-second back-to-back DMA connection to the file server. It also has Datakit and Ethernet controllers to connect to terminals and non-Plan 9 systems. <ref> [1, 2] </ref> The operating system provides a conventional view of processes, based on fork and exec system calls, [3] and of files, mostly determined by the remote file server.
Reference: 3. <author> Brian W. Kernighan and Rob Pike, </author> <title> The UNIX Programming Environment, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ (1984). </address>
Reference-contexts: It also has Datakit and Ethernet controllers to connect to terminals and non-Plan 9 systems. [1, 2] The operating system provides a conventional view of processes, based on fork and exec system calls, <ref> [3] </ref> and of files, mostly determined by the remote file server. Once a connection to the CPU server is established, the user may begin typing commands to a command interpreter in a conventional-looking environment. [4, 5] A multiprocessor CPU server has several advantages. <p> Another example is the file, provided by the terminal's operating system, /dev/time. This is a fixed-format ASCII representation of the number of seconds since the epoch that serves as a time base for make and other programs. <ref> [3] </ref> Processes on the CPU server get their time base from the terminal, thereby obviating problems of distributed clocks. For files that are I/O intensive, such as /dev/bitblt, the overhead of an ASCII interface can be prohibitive. <p> Although this is a fairly clumsy solution, it works well in practice. The various object files and compilers use distinct formats and naming conventions, which makes cross-compilation painless, at least once automated by make or a similar program. <ref> [3] </ref> Security Plan 9 does not address security issues directly, but some of its aspects are relevant to the topic. Breaking the file server away from the CPU server enhances the possibilities for security.
Reference: 4. <author> T. Duff, </author> <title> ``Rc - A Shell for Plan 9 and UNIX,'' UNIX Programmer's Manual, </title> <booktitle> Tenth Edition, </booktitle> <address> Murray Hill, NJ, </address> <institution> AT&T Bell Laboratories (1990). </institution>
Reference-contexts: Once a connection to the CPU server is established, the user may begin typing commands to a command interpreter in a conventional-looking environment. <ref> [4, 5] </ref> A multiprocessor CPU server has several advantages. The most important is its ability to absorb load. If the machine is not saturated (which can be economically feasible for a multiprocessor) there is usually a free processor ready to run a new process.
Reference: 5. <author> D. M. Ritchie and K. Thompson, </author> <title> ``The UNIX Time-Sharing System,'' </title> <journal> Comm. Assoc. Comp. Mach. </journal> <volume> 17(7), </volume> <pages> pp. </pages> <month> 365-375 (July </month> <year> 1974). </year>
Reference-contexts: Once a connection to the CPU server is established, the user may begin typing commands to a command interpreter in a conventional-looking environment. <ref> [4, 5] </ref> A multiprocessor CPU server has several advantages. The most important is its ability to absorb load. If the machine is not saturated (which can be economically feasible for a multiprocessor) there is usually a free processor ready to run a new process.
Reference: 6. <author> T. J. Killian, </author> <title> ``Processes as Files,'' </title> <booktitle> USENIX Summer Conference Proceedings, </booktitle> <address> Salt Lake City, UT, USA (June 1984). </address>
Reference-contexts: The CPU server performs compilation, text processing, and other applications. It has no local storage; all the permanent files it accesses are provided by remote servers. Transient parts of the name space, such as the collected images of active processes <ref> [6] </ref> or services provided by user processes, may reside locally but these disappear when the CPU server is rebooted. Plan 9 CPU servers are as interchangeable for their taskcomputation as are ordinary terminals for theirs. File Servers The Plan 9 file servers hold all permanent files. <p> The Process File System An example of a local service is the `process file system', which permits examination and debugging of executing processes through a file-oriented interface. It is related to Killian's process file system <ref> [6] </ref> but its differences exemplify the way that Plan 9 services are constructed.
Reference: 7. <author> S. Quinlan, </author> <title> ``A Cached WORM File System,'' </title> <journal> Software Practice and Experience, </journal> <note> p. To appear. </note>
Reference-contexts: Once a day, the file server freezes activity on the main file system and flushes the data in that system to the WORM. Normal file service continues unaffected, but changes to files are applied to a fresh hierarchy, fabricated on demand, using a copy-on-write scheme. <ref> [7] </ref> Thus, the file tree is split into two: a read-only version representing the system at the time of the dump, and an ordinary system that continues to provide normal service.
Reference: 8. <author> R. Pike, </author> <title> ``Graphics in Overlapping Bitmap Layers,'' </title> <journal> Transactions on Graphics 2(2), </journal> <pages> pp. 135-160. </pages>
Reference-contexts: For example, when a client process in a window writes a message (to the bitblt file) to clear the screen, the window system clears only that window. All graphics sent to partially or totally obscured windows is maintained as a bit-map layer, in memory private to the window system. <ref> [8] </ref> The clients are oblivious of one another. Since the window system is implemented entirely at user level with file and name space operations, it can be run recursively: it may be a client of itself.
Reference: 9. <author> R. Pike, </author> <title> ``A Concurrent Window System,'' </title> <booktitle> Computing Systems 2(2), </booktitle> <pages> pp. 133-153. </pages>
Reference-contexts: This recursion can be used profitably to debug a new window system in a window or to multiplex the connection to a CPU server. <ref> [9] </ref> Since the window system has no bitmap graphics codeall its graphics operations are executed by writing standard messages to a file the window system may be run on any machine that has /dev/bitblt in its name space, including the CPU server. - 7 - CPU Command The cpu command connects
Reference: 10. <author> S. P. Miller, B. C. Neumann, J. I. Schiller, and J. H. Saltzer, </author> <title> Kerberos Authentication and Authorization System, </title> <publisher> MIT (1987). </publisher>
Reference-contexts: In order to remove the need for trust in our local network, we plan to replace the authentication manager by a Kerberos-like system. <ref> [10] </ref> Discussion A fairly complete version of Plan 9 was built in 1987 and 1988, and then its development was abandoned for a number of aesthetic and technical reasons.
Reference: 11. <author> M. J. Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid, Avadis Tevanian, and Michael Young, </author> <title> ``Mach: A New Kernel Foundation for UNIX Development,'' </title> <booktitle> USENIX Conference Proceedings, </booktitle> <address> Atlanta, GA (July, </address> <year> 1986). </year>
Reference-contexts: We are uneasy about deciding where on the continuum from fine-grained hardware-supported parallelism to the usual timesharing notion of a process we should provide support for user multiprocessing. Existing definitions of threads and lightweight processes seem arbitrary and raise more questions than they resolve. <ref> [11] </ref> We prefer to have a single kind of process and to permit multiple processes to share their address space.
References-found: 11

