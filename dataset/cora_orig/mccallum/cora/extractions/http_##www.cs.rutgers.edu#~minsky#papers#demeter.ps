URL: http://www.cs.rutgers.edu/~minsky/papers/demeter.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: partha@cs.rutgers.edu  minsky@cs.rutgers.edu  
Title: Imposing The Law of Demeter and Its Variations  
Author: Partha pratim Pal Naftaly H. Minsky 
Note: Engineering Principles, Enforcement.  
Date: February 28, 1996  
Address: New Brunswick, NJ 08903  
Affiliation: Department of Computer Science Rutgers University  
Abstract: programming languages nor the existing environments provide enough support for effective realization of these principles. It is our thesis that broad structural principles should be formally specified, strictly enforced, and relaxed whenever relaxation is in order. In this paper we show how this can be done under our darwin-E environment using, the Law of Demeter as an illustration. keywords: Law of Demeter, Law-Governed Architecture, Software
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.F. Clocksin and C.S. Mellish. </author> <title> Programming in Prolog. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Objects are associated with various properties (often referred to as attributes) that are stored as Prolog <ref> [1] </ref> terms in the object. In this paper we will be concerned with only one type of objects, those representing Eiffel classes and their properties. Each Eiffel class is represented in Darwin-E by what is known as a module-object.
Reference: [2] <author> Carolyn K. Duby, Scott Meyers, and Steven P. Reiss. CCEL: </author> <title> A Meta-language for C++. </title> <booktitle> In USENIX C++ Conference, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: In this section we will briefly mention the two instances that we are aware of: first, the Demeter system [3] and then CCEL <ref> [2] </ref>. LoD is used by the Demeter system in generating and transforming C/C++ code. In that sense, LoD is imposed by the Demeter system, however, it does not check user written wrappers against LoD.
Reference: [3] <author> W.L. H 'ursch, L.M Seiter, and C. Xiao. </author> <title> In any case: Demeter. </title> <journal> The American Programmer, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: In this section we will briefly mention the two instances that we are aware of: first, the Demeter system <ref> [3] </ref> and then CCEL [2]. LoD is used by the Demeter system in generating and transforming C/C++ code. In that sense, LoD is imposed by the Demeter system, however, it does not check user written wrappers against LoD.
Reference: [4] <author> K. Lieberherr and I. Holland. </author> <title> Formulations and benifits of the law of demeter. </title> <journal> SIGPLAN NOTICES, </journal> <volume> 24(3) </volume> <pages> 67-78, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: For a detailed discussion of this thesis and its implication under Law-Governed Architecture (LGA) [7], the reader is referred to [8], [9]. In this paper, we will illustrate our thesis by showing how a principle called the Law of Demeter (LoD, henceforth), proposed by Liberherr et al. in <ref> [4] </ref>, is established under the darwin-E environment, that supports LGA. We start this paper with a brief discussion of the Law of Demeter, which attempts to reduce the dependency between classes by restricting the ability of any given class to access certain features of other classes. <p> As an illustration, consider the following code fragment which is a translation of the C++ code fragment in page 15 of [5] into Eiffel: class BOOK feature ... end; -- class Book class MICROFICHEFILES feature 1 Different formulations, with minor differences can be found in <ref> [6, 4, 5] </ref>.
Reference: [5] <author> K. Lieberherr and I. Holland. </author> <title> Preventive maintenance of object-oriented software. </title> ?, <year> 1992. </year>
Reference-contexts: As an illustration, consider the following code fragment which is a translation of the C++ code fragment in page 15 of <ref> [5] </ref> into Eiffel: class BOOK feature ... end; -- class Book class MICROFICHEFILES feature 1 Different formulations, with minor differences can be found in [6, 4, 5]. <p> As an illustration, consider the following code fragment which is a translation of the C++ code fragment in page 15 of [5] into Eiffel: class BOOK feature ... end; -- class Book class MICROFICHEFILES feature 1 Different formulations, with minor differences can be found in <ref> [6, 4, 5] </ref>. <p> Then for each class in this subset one can recursively compute which other classes need to be brought in as well. However, the notion of "closely related" classes postulated as the preferred suppliers in LoD is not arbitrary, it has been shown in <ref> [5] </ref> that the calls permitted by LoD are necessary in the sense that if we disallow any of these calls in an attempt to reduce the dependency on other classes any further, we will not be able to write useful programs. <p> This rule exempts the calls made by a class to another class in the same cluster from LoD. 13 5.4 The Case of Acquaintance Classes The notion of acquaintance classes of a method was proposed in <ref> [5] </ref>. A class c1 may have an unusually close relationship with a class c2, although in a routine r of c1, calls to c2 do not satisfy LoD. In this case it makes sense to allow such calls. <p> More details about such control can be found in [10]. 6 Related Work Although Liberherr at al. mention that under normal circumstances, the Law of Demeter is meant to be used as a guideline <ref> [5] </ref>, there are some efforts to ensure that this principle is actually satisfied by the implementation. In this section we will briefly mention the two instances that we are aware of: first, the Demeter system [3] and then CCEL [2]. <p> LoD is used by the Demeter system in generating and transforming C/C++ code. In that sense, LoD is imposed by the Demeter system, however, it does not check user written wrappers against LoD. Although, the need for accommodating exceptions is acknolwdged <ref> [5] </ref>, the Demeter methodology does not provide any flexible means like ours to do so. An indirect approach to check C++ programs against LoD can be found in CCEL: indirect because functions that violate a certain CCEL constraint involving return values of functions also violate the law of Demeter.
Reference: [6] <author> K. Lieberherr, I. Holland, and A. Riel. </author> <title> Object oriented programming an objective sense of style. </title> <journal> SIGPLAN NOTICES :special issue on OOP-SLA 88, </journal> <volume> 23(11) </volume> <pages> 323-334, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: As an illustration, consider the following code fragment which is a translation of the C++ code fragment in page 15 of [5] into Eiffel: class BOOK feature ... end; -- class Book class MICROFICHEFILES feature 1 Different formulations, with minor differences can be found in <ref> [6, 4, 5] </ref>.
Reference: [7] <author> N.H. Minsky. </author> <title> Law-governed systems. </title> <journal> The IEE Software Engineering Journal, </journal> <month> September </month> <year> 1991. </year> <note> (This is a revision of a similarly entitled 1987 technical report). </note>
Reference-contexts: The principles formulated for a given system, should be enforced, in order to ensure that they are actually satisfied by the system, through out its evolutionary lifetime. For a detailed discussion of this thesis and its implication under Law-Governed Architecture (LGA) <ref> [7] </ref>, the reader is referred to [8], [9]. In this paper, we will illustrate our thesis by showing how a principle called the Law of Demeter (LoD, henceforth), proposed by Liberherr et al. in [4], is established under the darwin-E environment, that supports LGA. <p> For further information on LGA refer to <ref> [7] </ref>, and details of Darwin-E will be presented in a forthcoming paper [10]. Darwin-E is an SDE (Software Development Environment) that supports LGA for software written in Eiffel. The main novelty of LGA is that it associates with each project P a law L that governs various aspects of P.
Reference: [8] <author> N.H. Minsky. </author> <title> Law-governed regularities in object systems; part 1: Principles. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <month> December </month> <year> 1994. </year> <note> (Accepted for publication in Theory and Practice of Object Systems (TAPOS)). </note>
Reference-contexts: The principles formulated for a given system, should be enforced, in order to ensure that they are actually satisfied by the system, through out its evolutionary lifetime. For a detailed discussion of this thesis and its implication under Law-Governed Architecture (LGA) [7], the reader is referred to <ref> [8] </ref>, [9]. In this paper, we will illustrate our thesis by showing how a principle called the Law of Demeter (LoD, henceforth), proposed by Liberherr et al. in [4], is established under the darwin-E environment, that supports LGA.
Reference: [9] <author> N.H. Minsky and P Pal. </author> <title> Law-governed regularities in object systems; part 2: the eiffel case. </title> <type> Technical Report LCSR-TR-228, </type> <institution> Rutgers University, LCSR, </institution> <month> December </month> <year> 1994. </year> <note> (Accepted for publication in Theory and Practice of Object Systems (TAPOS)). </note>
Reference-contexts: The principles formulated for a given system, should be enforced, in order to ensure that they are actually satisfied by the system, through out its evolutionary lifetime. For a detailed discussion of this thesis and its implication under Law-Governed Architecture (LGA) [7], the reader is referred to [8], <ref> [9] </ref>. In this paper, we will illustrate our thesis by showing how a principle called the Law of Demeter (LoD, henceforth), proposed by Liberherr et al. in [4], is established under the darwin-E environment, that supports LGA. <p> If a violation is detected in this law-enforcement step, assembly and running of the system is prevented and documentation about the violation is provided. In order to impose the law of Demeter, we need to consider the call interaction only, but there are many others (refer to <ref> [9] </ref> for more on controllable Eiffel interactions) such as inherit, being a client etc, which are beyond the scope of this exposition.
Reference: [10] <author> P. Pal and N. H. Minsky. </author> <title> Darwin-E : An advanced software development environment for eiffel. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <year> 1995. </year> <note> (Under Preparation). 16 </note>
Reference-contexts: For further information on LGA refer to [7], and details of Darwin-E will be presented in a forthcoming paper <ref> [10] </ref>. Darwin-E is an SDE (Software Development Environment) that supports LGA for software written in Eiffel. The main novelty of LGA is that it associates with each project P a law L that governs various aspects of P. <p> Similarly, the power to add or remove user-defined properties such as status ( ) or cluster ( ) can also 14 be confined to the managers. More details about such control can be found in <ref> [10] </ref>. 6 Related Work Although Liberherr at al. mention that under normal circumstances, the Law of Demeter is meant to be used as a guideline [5], there are some efforts to ensure that this principle is actually satisfied by the implementation.
References-found: 10

