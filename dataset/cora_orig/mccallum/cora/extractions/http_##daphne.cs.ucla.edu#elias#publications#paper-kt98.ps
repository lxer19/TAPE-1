URL: http://daphne.cs.ucla.edu/elias/publications/paper-kt98.ps
Refering-URL: http://daphne.cs.ucla.edu/elias/publications/index.html
Root-URL: http://www.cs.ucla.edu
Email: elias@cs.ucla.edu  dstaylor@cs.ucla.edu  
Title: Tight bounds for 2-dimensional indexing schemes  
Author: Elias Koutsoupias David Scot Taylor 
Address: Los Angeles  Los Angeles  
Affiliation: University of California,  University of California,  
Abstract: We study the trade-off between storage redundancy and access overhead for range queries, using the framework of [6]. We show that the Fibonacci workload of size n, which is the regular 2-dimensional grid rotated by the golden ratio, does not admit an indexing scheme with access overhead less than the block size B (the worst possible access overhead), even for storage redundancy as high as c log n, for some constant c. We also show that this bound is tight (up to a constant factor) by providing an indexing scheme with storage redundancy fi(log n) and constant access overhead, for any 2-dimensional workload. We extend the lower bound to random point sets and show that if the maximum storage redundancy is less than cloglog n, the access overhead is B. Finally, we explore the relation between indexability and fractal (Hausdorff) dimension of point sets. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Belussi and C. Faloutsos. </author> <title> Estimating the Selectivity of Spatial Queries Using the `Correlation' Fractal Dimension. </title> <booktitle> In Proc. 21st International Conference on Very Large Data Bases, </booktitle> <address> pp:299-310, Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: We argue that indexability is "orthogonal" to fractal dimension in the sense that the fractal dimension provides absolutely no information about the indexing properties of a point set (with respect to range queries). Although our argument seems in conflict with evidence presented in <ref> [1] </ref>, there is no actual incompatibility because [1] investigates square queries. <p> Although our argument seems in conflict with evidence presented in <ref> [1] </ref>, there is no actual incompatibility because [1] investigates square queries. Finally, in Section 5 we extend the main result of [6] to d &gt; 2 dimensions and we close the paper with some open problems. 2 Fibonacci workloads In this paper, we consider only workloads of range queries on a Euclidean space. <p> We will expand on this in the final version of the paper, but we add now that the Fibonacci lattice has the best constants c 1 and c 2 , because the maximum a i is the smallest possible ( = <ref> [0; 1; 1; 1; : : :] </ref>). Before we present our main theorem, we digress to discuss the O notation in this paper. <p> It is natural to ask whether there is any relation between fractal dimension and hardness of indexing. For example, it seems plausible that a point set with low fractal dimension will require small redundancy. This is suggested by some results in <ref> [1, 3] </ref>. Unfortunately, this is not the case. In fact, there is no relation between the fractal dimension of a point set and its indexability.
Reference: [2] <author> B. Chor, C. E. Leiserson, R. L. Rivest, and J. B. Shearer. </author> <title> An Application of Number Theory to the Organization of Raster-Graphics Memory. </title> <journal> Journal of the ACM 33(1) </journal> <pages> 86-104, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: k , the Fibonacci workload F n of order n is the following permutation: F n = f (k; kf k1 mod n) : k = 0; 1; : : : ; n 1g: The properties of Fibonacci lattice that we will employ in our proofs can be found in <ref> [4, 2] </ref>. They are summarized in the following proposition. Proposition 1 For the Fibonacci workload F n of n points a. Every rectangle with area c 1 n contains at least one point of F n , where c 1 1:9. b. <p> Notice that the proposition implies that a rectangle with area tn contains between bt=c 1 c and dt=c 2 e points of F n . For large t however the number of points of F n within a rectangle with area tn is very close to t <ref> [4, 2] </ref>. In fact, any lattice with base f (1; ff); (ff; 1)g, where ff is an (irrational) quadratic number, has similar properties.
Reference: [3] <author> C. Faloutsos and I. Kamel. </author> <title> Beyond Uniformity and Independence: Analysis of R-trees Using the Concept of Fractal Dimension. </title> <booktitle> In Proc. 13th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> pp:4-13, Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: We also present a simple extension of the lower bound to random 2-dimensional workloads (with required redundancy loglog n). Mandelbrot [13] provides strong evidence that many natural phenomena exhibit self-similarity. Adapting this approach, Faloutsos and Kamel proposed in <ref> [3] </ref> that many database workloads have also some self-similarity; thus, for these workloads their fractal (Hausdorff) dimension exists and may be an important parameter. In Section 4, we discuss possible relations between the fractal dimension of a point set and its indexability. <p> We (a) (a 0 ) (b) leave it as an important open problem to determine the exact tradeoff for sets of random points. 4 Indexing of fractals As it was mentioned above, very little is known about "practical" point sets. An interesting suggestion in <ref> [3] </ref> is that many practical point sets are self-similar and their fractal dimension seems to be an important parameter. It is natural to ask whether there is any relation between fractal dimension and hardness of indexing. <p> It is natural to ask whether there is any relation between fractal dimension and hardness of indexing. For example, it seems plausible that a point set with low fractal dimension will require small redundancy. This is suggested by some results in <ref> [1, 3] </ref>. Unfortunately, this is not the case. In fact, there is no relation between the fractal dimension of a point set and its indexability.
Reference: [4] <author> A. Fiat and A. Shamir. </author> <title> How to Find a Battleship. </title> <booktitle> Networks 19 </booktitle> <pages> 361-371, </pages> <year> 1989. </year>
Reference-contexts: This property of the Fibonacci workload has been used before in many contexts, for example in <ref> [4] </ref>. Using this property, we show that a Fibonacci workload of n points has fi (n log n) queries of size B. We also show that each pair of points cannot be in many queries of size B. The lower bound then follows from these two properties. <p> This lattice has some amazing properties and we will employ some of them here. It plays an important role in the discrepancy theory <ref> [8, 11, 4] </ref> and in the theory of Diophantine approximation [8]. Our workloads must be finite, so they contain some small part of the Fibonacci lattice. <p> k , the Fibonacci workload F n of order n is the following permutation: F n = f (k; kf k1 mod n) : k = 0; 1; : : : ; n 1g: The properties of Fibonacci lattice that we will employ in our proofs can be found in <ref> [4, 2] </ref>. They are summarized in the following proposition. Proposition 1 For the Fibonacci workload F n of n points a. Every rectangle with area c 1 n contains at least one point of F n , where c 1 1:9. b. <p> Notice that the proposition implies that a rectangle with area tn contains between bt=c 1 c and dt=c 2 e points of F n . For large t however the number of points of F n within a rectangle with area tn is very close to t <ref> [4, 2] </ref>. In fact, any lattice with base f (1; ff); (ff; 1)g, where ff is an (irrational) quadratic number, has similar properties.
Reference: [5] <author> A. Guttman. R-Trees: </author> <title> A Dynamic Index Structure For Spatial Searching. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> pp:47-57, Boston, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: B-trees owe their widespread success to the fact that they are the perfect solution to this problem |unfortunately, only for 1-dimensional workloads. The deterioration in the performance of B-trees on multidimensional workloads led to intensive research on secondary memory data structures that perform well in higher dimensions <ref> [5, 12, 16, 19] </ref>. In fact, in [7], a generalized indexing system (GiST) was proposed and implemented. A conclusion of this work was the need of a mathematical methodology that would evaluate rigorously the power and limitations of indexing techniques.
Reference: [6] <author> J. M. Hellerstein, E. Koutsoupias, and C. H. Pa-padimitriou. </author> <title> On the analysis of indexing schemes. </title> <booktitle> Proceedings of the Sixteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona, </address> <month> 12-15 May </month> <year> 1997. </year>
Reference-contexts: 1 Introduction In this paper we continue the work of <ref> [6] </ref> towards a theory of indexability |that is, towards a better understanding of the storage redundancy/access overhead tradeoff in the indexing problem for complex workloads, in a secondary memory device with a fixed block size B. <p> In fact, in [7], a generalized indexing system (GiST) was proposed and implemented. A conclusion of this work was the need of a mathematical methodology that would evaluate rigorously the power and limitations of indexing techniques. Such a framework was proposed in <ref> [6] </ref> where the notion of an indexing scheme was introduced, as well as a notion of "data storage complexity," as opposed to the computational complexity that had been studied so far. <p> The objective is to be able to answer (cover) each query in Q by retrieving few blocks (see <ref> [6] </ref> for a more extensive discussion). The storage redundancy r of an indexing scheme measures the number of copies of the elements of I that are stored in the secondary memory (there are two kinds, the maximum redundancy and the average redundancy). <p> Predictably, there is a tradeoff between the redundancy and the access overhead of an indexing scheme: the higher the redundancy, the lower the access overhead should be. Using this framework, <ref> [6] </ref> study indexing schemes for range queries. In particular, they study workloads of 2-dimensional range queries of the instance I that consists of the k fi k grid points. They show that an indexing scheme that achieves access overhead a must have storage redundancy (log B=(a 2 log a)). <p> Before <ref> [6] </ref>, there was substantial work on the indexing problem [9, 14, 15, 18, 21]. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem. <p> It is shown that there is a 2-dimensional point set such that storage redundancy (log n= log log n) is necessary if additive (as opposed to multiplicative in <ref> [6] </ref>) access overhead is to remain poly nomial in log n= log B. Our results We provide a tight bound for the tradeoff between storage redundancy and access overhead of 2-dimensional workloads. <p> Although our argument seems in conflict with evidence presented in [1], there is no actual incompatibility because [1] investigates square queries. Finally, in Section 5 we extend the main result of <ref> [6] </ref> to d &gt; 2 dimensions and we close the paper with some open problems. 2 Fibonacci workloads In this paper, we consider only workloads of range queries on a Euclidean space. <p> We will call such a point set a permutation. It should be clear that not all finite point sets are equivalent to a permutation, because there may be more than one point on a horizontal (or vertical) line. In the other extreme, lies the point set studied in <ref> [6] </ref> where every horizontal and vertical line has k = p n points. It is not difficult to see that, with respect to indexing, the worst workloads are permutations. <p> However, our main result (Theorem 1) shows that the indexability of a point set can change dramatically if we rotate it: The redundancy/access overhead tradeoff can vary from constant (e.g., the regular grid studied in <ref> [6] </ref>) to logarithmic in the size of the point set (e.g., the Fibonacci workload). In conclusion, if indeed practical workloads have good indexing properties, it is not because they have a small fractal dimension. <p> One necessary property is suggested by Theorem 1: Some pairs or points (and in general constant-size sets of points) must be contained in many queries of size B. 5 High-Dimensional Trade-offs Finally, we state an extension of the main result of <ref> [6] </ref> to many dimensions. Independently, [17] came up with more comprehensive results of this sort. The proof is similar to that in [6] and is omitted from this abstract. <p> in general constant-size sets of points) must be contained in many queries of size B. 5 High-Dimensional Trade-offs Finally, we state an extension of the main result of <ref> [6] </ref> to many dimensions. Independently, [17] came up with more comprehensive results of this sort. The proof is similar to that in [6] and is omitted from this abstract. <p> Extending also the upper bound of <ref> [6] </ref>, we can show that there is an indexing scheme with access overhead a and redundancy r = (2d log B log a ) d1 . 6 Conclusion and open problems We provided tight bounds for the worst-case indexability of 2-dimensional workloads.
Reference: [7] <author> J. M. Hellerstein, J. F. Naughton, and A. Pfeffer. </author> <title> Generalized Search Trees for Database Systems. </title> <booktitle> In Proc. 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The deterioration in the performance of B-trees on multidimensional workloads led to intensive research on secondary memory data structures that perform well in higher dimensions [5, 12, 16, 19]. In fact, in <ref> [7] </ref>, a generalized indexing system (GiST) was proposed and implemented. A conclusion of this work was the need of a mathematical methodology that would evaluate rigorously the power and limitations of indexing techniques.
Reference: [8] <author> G. H. Hardy and E. M. Wright. </author> <title> An introduction to the Theory of Numbers. Third ed., </title> <publisher> Oxford University Press, </publisher> <year> 1956. </year>
Reference-contexts: This lattice has some amazing properties and we will employ some of them here. It plays an important role in the discrepancy theory <ref> [8, 11, 4] </ref> and in the theory of Diophantine approximation [8]. Our workloads must be finite, so they contain some small part of the Fibonacci lattice. <p> This lattice has some amazing properties and we will employ some of them here. It plays an important role in the discrepancy theory [8, 11, 4] and in the theory of Diophantine approximation <ref> [8] </ref>. Our workloads must be finite, so they contain some small part of the Fibonacci lattice. In particular, we will consider work-loads whose points are the Fibonacci lattice points of some appropriate rectangles and have sizes n = f k , where f k is the k-th Fibonacci number.
Reference: [9] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter. </author> <title> Indexing for Data Models with Constraints and Classes. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> pp:233-243, Washington, D.C., </address> <month> May </month> <year> 1993. </year> <note> (Recent version available from the www.) </note>
Reference-contexts: Before [6], there was substantial work on the indexing problem <ref> [9, 14, 15, 18, 21] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem.
Reference: [10] <author> D. E. Knuth. </author> <title> The Art of Computer Programming; Volume III: Searching and Sorting. </title> <publisher> Addison Wesley, </publisher> <year> 1973. </year>
Reference-contexts: All our results about Fibonacci workloads hold also for all these lattices (of course, with different constants). The connection between Proposition 1 and the continued fraction expansion is related to the remarkable three-distance theorem (see <ref> [10, 20] </ref>). We will expand on this in the final version of the paper, but we add now that the Fibonacci lattice has the best constants c 1 and c 2 , because the maximum a i is the smallest possible ( = [0; 1; 1; 1; : : :]).
Reference: [11] <author> N. Linial, M. Luby, M. Saks, and D. Zuckerman. </author> <title> Efficient Construction of a Small Hitting Set for Combinatorial Rectangles in High Dimension. </title> <booktitle> Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing (STOC), </booktitle> <address> pp:258-267, San Diego, Califor-nia, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: This lattice has some amazing properties and we will employ some of them here. It plays an important role in the discrepancy theory <ref> [8, 11, 4] </ref> and in the theory of Diophantine approximation [8]. Our workloads must be finite, so they contain some small part of the Fibonacci lattice. <p> We conjecture that redundancy fi (log d1 n) is required to achieve access overhead less than B. Unfortunately, there is no simple generalization of the Fibonacci lattice in higher dimensions. Furthermore, no simple point set is known to have good discrepancy properties in higher dimensions (see however <ref> [11] </ref>). We also leave it as a major open problem to determine the tradeoff of random point sets. We have made some progress on this problem, but our results are too preliminary to be included in this abstract.
Reference: [12] <author> D. B. Lomet and B. Salzberg. </author> <title> The hB-Tree: A Mul-tiattribute Indexing Method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: B-trees owe their widespread success to the fact that they are the perfect solution to this problem |unfortunately, only for 1-dimensional workloads. The deterioration in the performance of B-trees on multidimensional workloads led to intensive research on secondary memory data structures that perform well in higher dimensions <ref> [5, 12, 16, 19] </ref>. In fact, in [7], a generalized indexing system (GiST) was proposed and implemented. A conclusion of this work was the need of a mathematical methodology that would evaluate rigorously the power and limitations of indexing techniques.
Reference: [13] <author> B. B. Mandelbrot. </author> <title> The Fractal Geometry of Nature. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: We also present a simple extension of the lower bound to random 2-dimensional workloads (with required redundancy loglog n). Mandelbrot <ref> [13] </ref> provides strong evidence that many natural phenomena exhibit self-similarity. Adapting this approach, Faloutsos and Kamel proposed in [3] that many database workloads have also some self-similarity; thus, for these workloads their fractal (Hausdorff) dimension exists and may be an important parameter.
Reference: [14] <author> S. Ramaswamy and P. C. Kanellakis. </author> <title> OODB Indexing by Class Division. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> pp:233-243, </address> <year> 1993. </year>
Reference-contexts: Before [6], there was substantial work on the indexing problem <ref> [9, 14, 15, 18, 21] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem.
Reference: [15] <author> S. Ramaswamy and S. Subramanian. </author> <title> Path Caching: </title>
Reference-contexts: Before [6], there was substantial work on the indexing problem <ref> [9, 14, 15, 18, 21] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem.
References-found: 15

