URL: ftp://ftp.eecs.umich.edu/groups/gasm/babel.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/proglang.html
Root-URL: http://www.eecs.umich.edu
Email: boerger@di.unipi.it  fraguas@dia.ucm.es  mario@dia.ucm.es  
Title: Towards a Mathematical Specification of a Graph-Narrowing Machine  
Author: Egon B orger Francisco J. L opez-Fraguas Mario Rodr iguez-Artalejo 
Keyword: functional logic languages, mathematical specification, evolving algebras.  
Address: Cso Italia 40 I-56100 PISA  28040 Madrid,Spain  28040 Madrid,Spain  
Affiliation: Dip. di Informatica Universita di Pisa  Dep. Informatica Automatica Universidad Complutense Av. Complutense s/n  Dep. Informatica Automatica Universidad Complutense Av. Complutense s/n  
Abstract: The paper provides a mathematical model for the innermost version of the functional logic programming language BABEL [MR89, MR92] and refines it stepwise towards a mathematical specification of its implementation by a graph-narrowing machine [KLMR90]. Our description directly reflects the basic intuitions underlying the language and can thus be used as a primary mathematical definition of innermost BABEL. For each refinement step a mathematical correctness proof is given, thus paving the way for a correctness proof of the graph-narrowing machine implementation (a full correctness proof could be achieved by providing some further refinement steps, leading to the machine's abstraction level). The specification uses evolving algebras, thus allowing the descriptions to be procedural and nevertheless abstract, readable as `pseudocode over abstract data'. 
Abstract-found: 1
Intro-found: 1
Reference: [AK91] <author> H. </author> <title> A it Kaci. Warren's Abstract Machine: A Tutorial Reconstruction. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: This kind of machines usually combine features from reduction machines for functional languages [PJ87, FH88] and Warren's Prolog Engine WAM [War83], <ref> [AK91] </ref>. fl Technical Report DIA 94/5, March 1994, Dep.de Informatica y Automatica, Universidad Complutense, Madrid. An abridged version of this paper has appeared under the title A model for mathematical analysis of functional logic programs and their implementations in: B. Pehrson and I.
Reference: [AN89] <author> H. A it Kaci and R. Nasr. </author> <title> Integrating logic and functional programming. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 2 </volume> <pages> 51-89, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction Many investigations during the last years have been devoted to the combination of the functional and logic programming paradigms (for surveys on different approaches and proposals, see e.g. [DL86], [BL86], <ref> [AN89] </ref>). The interest of such an integration has been well motivated by several researchers and is presently quite widely accepted.
Reference: [B 90a] <author> E. Borger. </author> <title> A logical operational semantics for full Prolog. Part i: Selection core and control. </title> <editor> In E. Borger, H. Kleine Buning, M. M. Richter, and W. Schonfeld, editors, CSL'89. </editor> <booktitle> 3rd Workshop on Computer Science Logic, volume 440 of Lecture Notes in Computer Science, </booktitle> <pages> pages 36-64. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines.
Reference: [B 90b] <author> E. Borger. </author> <title> A logical operational semantics for full Prolog. Part ii: Built-in predicates for database manipulations. </title> <editor> In B. Rovan, editor, </editor> <booktitle> Mathematical Foundations of Computer Science, volume 452 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-14. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: known from logic programming languages. 3.1 The narrowing-backtracking core Our top level description of Babel reflects the backtracking structure as dynamically created tree structure with father relation representing backtracking to alternative (single) narrowing steps | corresponding to different rules for a certain function |, following an idea used already in <ref> [B 90b] </ref> (in hybrid stack oriented form) and in [BR91, BR92a] as basis to define an abstract model for Prolog.
Reference: [BB92] <author> C. Beierle and E. Borger. </author> <title> Correctness proof for the WAM with types. </title> <editor> In E. Borger, G. Jager, H. Kleine Buning, and M. M. Richter, editors, </editor> <booktitle> Computer Science Logic, volume 626 of Lecture Notes in Computer Science, </booktitle> <pages> pages 15-34. </pages> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines.
Reference: [BL86] <author> M. Bellia and G. Levi. </author> <title> The relation between logic and functional languages. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 217-236, </pages> <year> 1986. </year>
Reference-contexts: 1 Introduction Many investigations during the last years have been devoted to the combination of the functional and logic programming paradigms (for surveys on different approaches and proposals, see e.g. [DL86], <ref> [BL86] </ref>, [AN89]). The interest of such an integration has been well motivated by several researchers and is presently quite widely accepted.
Reference: [BR91] <author> E. Borger and D. Rosenzweig. </author> <title> A formal specification of Prolog by tree algebras. </title> <editor> In V. Ceric, V. Dobric, V. Luzar, and R. Paul, editors, </editor> <booktitle> Information Technology Interfaces, </booktitle> <pages> pages 513-518, </pages> <address> Zagreb, </address> <year> 1991. </year> <institution> University Computing Centre. </institution>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines. <p> Our top level description of Babel reflects the backtracking structure as dynamically created tree structure with father relation representing backtracking to alternative (single) narrowing steps | corresponding to different rules for a certain function |, following an idea used already in [B 90b] (in hybrid stack oriented form) and in <ref> [BR91, BR92a] </ref> as basis to define an abstract model for Prolog.
Reference: [BR92a] <author> E. Borger and D. Rosenzweig. </author> <title> A simple mathematical model for full Prolog. </title> <institution> Research report TR-33/92, Dipartimento di Informatica, Universita di Pisa, Pisa, </institution> <month> October </month> <year> 1992. </year> <note> to appear in Sciene of Computer Programming, </note> <year> 1994. </year>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines. <p> Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91]. The definitions of Prolog and the WAM <ref> [BR92b, BR92a] </ref>, yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines. <p> Our top level description of Babel reflects the backtracking structure as dynamically created tree structure with father relation representing backtracking to alternative (single) narrowing steps | corresponding to different rules for a certain function |, following an idea used already in [B 90b] (in hybrid stack oriented form) and in <ref> [BR91, BR92a] </ref> as basis to define an abstract model for Prolog.
Reference: [BR92b] <author> E. Borger and D. Rosenzweig. </author> <title> The WAM definition and compiler correctness. </title> <institution> Research report TR-14/92, Dipartimento di Informatica, Universita di Pisa, Pisa, </institution> <year> 1992. </year> <note> to appear in: Logic Programming: Formal Methods and Practical Applications (C.Beierle, </note> <editor> L.Plumer, Eds.), North-Holland, </editor> <booktitle> Series in Computer Science and Artificial Intelligence, </booktitle> <year> 1994. </year>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines. <p> Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91]. The definitions of Prolog and the WAM <ref> [BR92b, BR92a] </ref>, yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines.
Reference: [BR93] <author> E. Borger and E. Riccobene. </author> <title> A formal specification of Parlog. </title> <editor> In M. Droste and Y. Gurevich, editors, </editor> <title> Semantics of Programming Languages and Model Theory. </title> <publisher> Gordon and Breach, </publisher> <year> 1993, </year> <pages> pages 1-42. </pages>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines.
Reference: [BS91] <author> E. Borger and P. Schmitt. </author> <title> A formal operational semantics for languages of type Prolog III. </title> <editor> In E. Borger, H. Kleine Buning, M. M. Richter, and W. Schonfeld, editors, CSL'90, </editor> <booktitle> 4th Workshop on Computer Science Logic, volume 533 of Lecture Notes in Computer Science, </booktitle> <pages> pages 67-79. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Recently, Gurevich's evolving algebra approach [Gur88, Gur91] has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods <ref> [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91] </ref>. The definitions of Prolog and the WAM [BR92b, BR92a], yielding correctness conditions for Prolog compilers, are particularly related to the present paper, which can be understood as a first step towards extending this specification methodology to functional logic languages and machines.
Reference: [DJ90] <author> N. Dershowitz and J.P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 243-320. </pages> <publisher> Elsevier Noth-Holland, </publisher> <year> 1990. </year>
Reference-contexts: As usual, we assume that positions u are coded as finite sequences of positive integers; see e.g. <ref> [DJ90] </ref>. The specification of the function pos depends on the reduction strategy; in this model for Babel we will define it for the leftmost innermost strategy (which corresponds to an eager implementation).
Reference: [DL86] <editor> D. DeGroot and G. Lindstrom, editors. </editor> <title> Logic Programming: Functions, Relations, Equations. </title> <publisher> Prentice Hall, </publisher> <year> 1986. </year>
Reference-contexts: 1 Introduction Many investigations during the last years have been devoted to the combination of the functional and logic programming paradigms (for surveys on different approaches and proposals, see e.g. <ref> [DL86] </ref>, [BL86], [AN89]). The interest of such an integration has been well motivated by several researchers and is presently quite widely accepted.
Reference: [FH88] <author> A.J. Field and P.G. Harrison. </author> <title> Functional Programming. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g [Loo93] for information on such approaches). This kind of machines usually combine features from reduction machines for functional languages <ref> [PJ87, FH88] </ref> and Warren's Prolog Engine WAM [War83], [AK91]. fl Technical Report DIA 94/5, March 1994, Dep.de Informatica y Automatica, Universidad Complutense, Madrid. An abridged version of this paper has appeared under the title A model for mathematical analysis of functional logic programs and their implementations in: B.
Reference: [Gur88] <author> Y. Gurevich. </author> <title> Logic and the challenge of computer science. </title> <editor> In E. Borger, editor, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pages 1-57. </pages> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: Pehrson and I. Simon (Eds.) IFIP 13th World Computer Congress 1994, Volume I: Technology/Foundations, Elsevier, Amsterdam. 1 It is well known that providing mathematically precise but nevertheless understandable specifications of complex systems is a difficult task. Recently, Gurevich's evolving algebra approach <ref> [Gur88, Gur91] </ref> has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91].
Reference: [Gur91] <author> Y. Gurevich. </author> <title> Evolving algebras. A tutorial introduction. </title> <journal> Bulletin of EATCS, </journal> <volume> 43 </volume> <pages> 264-284, </pages> <year> 1991. </year>
Reference-contexts: Pehrson and I. Simon (Eds.) IFIP 13th World Computer Congress 1994, Volume I: Technology/Foundations, Elsevier, Amsterdam. 1 It is well known that providing mathematically precise but nevertheless understandable specifications of complex systems is a difficult task. Recently, Gurevich's evolving algebra approach <ref> [Gur88, Gur91] </ref> has proved very adequate for providing mathematical descriptions of various logic programming languages and implementation methods [B 90a, BB92, BR91, BR92a, BR92b, BR93, BS91]. <p> them by a (partial) proof map F mapping states B of (B; S) to states F (B) of (A; R), and rule sequences R of R to rule sequences F (R) of S, so that the following diagram commutes: 1 For motivation and a precise definition of evolving algebras see <ref> [Gur91] </ref>. 2 ... .. .. ... .. ... .. ... ... .. ... .. .. ... .. . . . . . . . . . . . . . . . . . . . .. . . . . . . . . . . . . . . <p> One might view them as procedures.See <ref> [Gur91] </ref> 4 u:(i + 1) is (next to the right) brother position of u:i, u:1 is the leftmost child of position u and u is father of all positions u:i. after renaming of all variables at level vi .
Reference: [KLMR90] <author> H. Kuchen, R. Loogen, J.J Moreno Navarro, and M. Rodr iguez Artalejo. </author> <title> Graph-based implementation of a functional logic language. </title> <booktitle> In ESOP, volume 432 of Lecture Notes in Computer Science, </booktitle> <pages> pages 271-290. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: It reduces a computation expression by applying rewrite rules, but using unification instead of matching. This paper deals with the mathematical specification of the functional logic language BABEL [MR89, MR92], ultimately aiming at a full correctnes proof for its implementation through the innermost graph-narrowing machine IBAM <ref> [KLMR90] </ref>. IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g [Loo93] for information on such approaches). <p> This organization, and the way it combines with backtracking, do correspond to the actual IBAM implementation <ref> [KLMR90] </ref>, which is not approached closer in this paper (next refinement steps should deal with machine code generation). Section 6 presents, on an abstract level, some optimizations of the IBAM implementation. Section 7 summarizes our conclusions and points to possible lines of future research. <p> We use usual notations, in particular Prolog notation for lists. In the rest of this paper, the name "BABEL" will always refer to the innermost version of the BABEL language, as described in <ref> [KLMR90] </ref>. We do not presupose any specific knowledge of BABEL or its implementation. But obviously, some elementary knowledge of functional + logic programming languages can only be helpful, and some very basic facts about BABEL are reported here to help understanding our presentation of BABEL algebras. <p> work for Prolog and the WAM, we have used Evolving Algebras to give a description of the innermost narrowing semantics for the functional logic language BABEL, and we have specified a series of provably correct refinement steps towards a definition of BABEL's implementation by the innermost graph-narrowing abstract machine IBAM <ref> [KLMR90] </ref>. Thus, we have paved the way for a full correctness proof for IBAM, which we believe will arise quite naturally by further refinement of the current description. This will be subject of future work.
Reference: [Loo93] <author> R. Loogen. </author> <title> Relating the implementation techniques of functional and functional logic languages. to appear in New Generation Computing, </title> <booktitle> 1993. </booktitle> <pages> 19 </pages>
Reference-contexts: IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g <ref> [Loo93] </ref> for information on such approaches). This kind of machines usually combine features from reduction machines for functional languages [PJ87, FH88] and Warren's Prolog Engine WAM [War83], [AK91]. fl Technical Report DIA 94/5, March 1994, Dep.de Informatica y Automatica, Universidad Complutense, Madrid. <p> This will be subject of future work. Moreover, we plan to develop a description of lazy semantics and implementation techniques for BABEL, which involves a more difficult kind of control <ref> [MKLR90, Loo93] </ref> and will require substantial modifications of the present description. 18
Reference: [LW91] <author> R. Loogen and S. Winkler. </author> <title> Dinamyc detection of determinism in functional logic languages. </title> <booktitle> In International Symposium on Programming Language Implementation and Logic Programming (PLILP), volume 528 of Lecture Notes in Computer Science, </booktitle> <pages> pages 335-346. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: It would not be difficult to do so and to proof the correctness of the optimization, relying on the theorems <ref> [LW91] </ref> stating the safeness of dynamic cut. 17 can be used instead for this purpose. This will save the time of restoring the activator with these safe values.
Reference: [MKLR90] <author> J.J Moreno Navarro, H. Kuchen, R. Loogen, and M. Rodr iguez Artalejo. </author> <title> Lazy narrowing in a graph machine. </title> <booktitle> In 2nd. International Conference on Algebraic and Logic Programming (ALP), volume 463 of Lecture Notes in Computer Science, </booktitle> <pages> pages 298-317. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: This will be subject of future work. Moreover, we plan to develop a description of lazy semantics and implementation techniques for BABEL, which involves a more difficult kind of control <ref> [MKLR90, Loo93] </ref> and will require substantial modifications of the present description. 18
Reference: [MR89] <author> J.J Moreno Navarro and M. Rodr iguez Artalejo. </author> <title> BABEL: A functional and logic language based on constructor discipline and narrowing. </title> <booktitle> In 1st. International Conference on Algebraic and Logic Programming (ALP), volume 343 of Lecture Notes in Computer Science, </booktitle> <pages> pages 223-232. </pages> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: It reduces a computation expression by applying rewrite rules, but using unification instead of matching. This paper deals with the mathematical specification of the functional logic language BABEL <ref> [MR89, MR92] </ref>, ultimately aiming at a full correctnes proof for its implementation through the innermost graph-narrowing machine IBAM [KLMR90]. IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g [Loo93] for information on such approaches).
Reference: [MR92] <author> J.J Moreno Navarro and M. Rodr iguez Artalejo. </author> <title> Logic programming with functions and predicates: The language BABEL. </title> <journal> Journal of Logic Programming, </journal> <volume> 12 </volume> <pages> 189-223, </pages> <year> 1992. </year>
Reference-contexts: It reduces a computation expression by applying rewrite rules, but using unification instead of matching. This paper deals with the mathematical specification of the functional logic language BABEL <ref> [MR89, MR92] </ref>, ultimately aiming at a full correctnes proof for its implementation through the innermost graph-narrowing machine IBAM [KLMR90]. IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g [Loo93] for information on such approaches).
Reference: [PJ87] <editor> S.L. Peyton-Jones. </editor> <booktitle> The Implementation of Functional Programming Languages. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1987. </year>
Reference-contexts: IBAM belongs to a series of abstract machines which were designed during the last years for compiler implementations of logic + functional languages (see e.g [Loo93] for information on such approaches). This kind of machines usually combine features from reduction machines for functional languages <ref> [PJ87, FH88] </ref> and Warren's Prolog Engine WAM [War83], [AK91]. fl Technical Report DIA 94/5, March 1994, Dep.de Informatica y Automatica, Universidad Complutense, Madrid. An abridged version of this paper has appeared under the title A model for mathematical analysis of functional logic programs and their implementations in: B.
Reference: [Red85] <author> U.S. Reddy. </author> <title> Narrowing as the operational semantics of functional logic languages. </title> <booktitle> In International Symposium on Logic Programming, </booktitle> <pages> pages 138-151. </pages> <publisher> IEEE Comp. Soc. Press, </publisher> <year> 1985. </year>
Reference-contexts: The interest of such an integration has been well motivated by several researchers and is presently quite widely accepted. One of the possible approaches to logic + functional programming builds so called functional logic languages <ref> [Red85, Red87] </ref>, which are syntactically very similar to functional languages, but have narrowing as operational semantics. From the point of view of functional logic programming, narrowing is a natural extension of the reduction mechanism used for functional programs.
Reference: [Red87] <author> U.S. Reddy. </author> <title> Functional logic languages, part I. In Workshop on Graph reduction, </title> <booktitle> volume 279 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-425. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: The interest of such an integration has been well motivated by several researchers and is presently quite widely accepted. One of the possible approaches to logic + functional programming builds so called functional logic languages <ref> [Red85, Red87] </ref>, which are syntactically very similar to functional languages, but have narrowing as operational semantics. From the point of view of functional logic programming, narrowing is a natural extension of the reduction mechanism used for functional programs.
Reference: [War83] <author> D.H.D. Warren. </author> <title> An abstract prolog instruction set. </title> <type> Technical Note 309, </type> <institution> SRI International, </institution> <address> Menlo Park, </address> <year> 1983. </year>
Reference-contexts: This kind of machines usually combine features from reduction machines for functional languages [PJ87, FH88] and Warren's Prolog Engine WAM <ref> [War83] </ref>, [AK91]. fl Technical Report DIA 94/5, March 1994, Dep.de Informatica y Automatica, Universidad Complutense, Madrid. An abridged version of this paper has appeared under the title A model for mathematical analysis of functional logic programs and their implementations in: B. Pehrson and I.
References-found: 26

