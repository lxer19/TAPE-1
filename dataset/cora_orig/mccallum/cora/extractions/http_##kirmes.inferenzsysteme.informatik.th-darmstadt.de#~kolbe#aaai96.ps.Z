URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~kolbe/aaai96.ps.Z
Refering-URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~kolbe/
Root-URL: 
Email: Email: fkolbejwaltherg@inferenzsysteme.informatik.th-darmstadt.de  
Title: Proving Theorems by Mimicking a Human's Skill  
Author: Thomas Kolbe Christoph Walther 
Address: Alexanderstr. 10, D-64283 Darmstadt, Germany.  
Affiliation: Fachbereich Informatik, Technische Hochschule Darmstadt,  
Abstract: 1 We investigate the improvement of theorem provers by reusing previously computed proofs. We have developed and implemented the Plagiator system which proves theorems by mathematical induction with the aid of a human advisor: If a conjecture is submitted to the system, it tries to reuse a proof of a previously verified conjecture. If successful, resources are saved, because the number of required user interactions is decreased. The performance of the overall system is improved, because necessary lemmata might be speculated. If the reuse fails, the human advisor is called for providing a hand crafted proof for such a conjecture, which subsequently | after some (automated) preparation steps | is stored in the system's memory, to be in stock for future reasoning problems. The success of our approach is based on our technique for preparing given proofs as well as by our technique for reusing proofs. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bouhoula, A.; Kounalis, E.; and Rusinowitch, M. </author> <year> 1992. </year> <title> spike: An Automatic Theorem Prover. </title> <booktitle> In Proceedings of the Conference on Logic Programming and Automated Reasoning, </booktitle> <address> St. Petersburg, Russia. </address> <publisher> Springer. </publisher>
Reference: <author> Boyer, R. S., and Moore, J. S. </author> <year> 1979. </year> <title> A Computational Logic. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press. </publisher>
Reference: <author> Brauburger, J. </author> <year> 1994. </year> <title> Plagiator: Design and Implementation of a Learning Theorem Prover. </title> <booktitle> Diploma Thesis (in German), TH Darmstadt. </booktitle>
Reference-contexts: The presence and the degree of these benefits strongly depend on the quality of the problem solver and the domain it is operating on. Here we consider a domain where problems are conjectures to be proved. We have developed and implemented the Plagiator system <ref> (Brauburger 1994) </ref> which proves theorems by mathematical induction 2 in the spirit of the problem reduction paradigm (Nilsson 1971): If a conjecture is submitted to the system, it tries to find a proof by inspecting its memory (called a proof dictionary) for reusing proofs of previously verified conjectures. <p> Without severe time-constraints, incorporating reuse in automated problem solvers pays only in domains where drastic savings are achievable, or where an incomplete problem solver can be improved by providing additional solutions by reuse. Conclusion We have presented an approach for reusing proofs which is implemented with the Plagiator-system <ref> (Brauburger 1994) </ref>. Experiments with the system reveal that automated proof reuse is successful even for conjectures which differ considerably in both their structure and their domain. Therefore we claim that the complex task of automated reasoning can be learned from a human advisor.
Reference: <author> Bundy, A.; van Harmelen, F.; Horn, C.; and Smaill, A. </author> <year> 1990. </year> <title> The Oyster-Clam System. </title> <booktitle> In Proceedings of the 10th International Conference on Automated Deduction, Kaiserslautern, Ger-many, </booktitle> <pages> 647-648. </pages>
Reference: <author> Ellman, T. </author> <year> 1989. </year> <title> Explanation-Based Learning: </title>
Reference-contexts: Introduction We investigate the improvement of theorem provers by reusing previously computed proofs, cf. (Kolbe & Walther 1994, Kolbe & Walther 1995b). Our work has similarities with the methodologies of explanation-based learning <ref> (Ellman 1989) </ref>, analogical reasoning (Hall 1989), and abstraction (Giunchiglia & Walsh 1992, Villafiorita & Giunchiglia 1996). Consider the following general architecture: Some problem solver PS is augmented with a facility for storing and retrieving solutions of problems solved during the system's lifetime.
References-found: 5

