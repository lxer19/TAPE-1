URL: http://www.cs.columbia.edu/~hgs/rtp/drafts/draft-ietf-avt-rtp-07.ps
Refering-URL: http://www.cs.columbia.edu/~hgs/rtp/drafts/
Root-URL: http://www.cs.columbia.edu
Title: Internet Engineering Task Force Audio-Video Transport WG Expires: 9/1/95 RTP: A Transport Protocol for Real-Time
Author: INTERNET-DRAFT Schulzrinne/Casner/Frederick/Jacobson draft-ietf-avt-rtp-.ps GMD/ISI/Xerox/LBL 
Note: this Memo This document is an Internet-Draft. Internet-Drafts are working documents of the Internet Engineering Task Force (IETF), its areas, and its working groups. Note that other groups may also distribute working  and may be updated, replaced, or obsoleted by other documents at any time. It is inappropriate to use Internet-Drafts as reference material or to cite them other than as work in progress. Distribution of this document is unlimited. This memorandum describes RTP, the  Force. Comments are solicited and should be addressed to the working group's mailing list at rem-conf@es.net and/or the authors.  
Date: March 21, 1995  
Abstract: To learn the current status of any Internet-Draft, please check the 1id-abstracts.txt listing contained in the Internet-Drafts Shadow Directories on ftp.is.co.za (Africa), nic.nordu.net (Europe), munnari.oz.au (Pacific Rim), ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast). Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. D. Clark and D. L. Tennenhouse, </author> <title> Architectural considerations for a new generation of protocols, </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols, (Philadelphia, Pennsyl-vania), </booktitle> <pages> pp. 200-208, </pages> <publisher> IEEE, </publisher> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: This functionality may be fully or partially subsumed by a separate session control protocol, which is beyond the scope of this document. RTP represents a new style of protocol following the principles of application level framing and integrated layer processing proposed by Clark and Tennenhouse <ref> [1] </ref>. That is, RTP is intended to be malleable to provide the information required by a particular application and will often be integrated into the application processing rather than being implemented as a separate layer. RTP is a protocol framework that is deliberately not complete. <p> flag */ unsigned int x:1; /* header extension flag */ unsigned int cc:4; /* CSRC count */ unsigned int m:1; /* marker bit */ unsigned int pt:7; /* payload type */ u_int16 seq; /* sequence number */ u_int32 ts; /* timestamp */ u_int32 ssrc; /* synchronization source */ u_int32 csrc <ref> [1] </ref>; /* optional CSRC list */ - rtp_hdr_t; * RTCP common header word */ typedef struct - unsigned int version:2; /* protocol version */ unsigned int p:1; /* padding flag */ unsigned int count:5; /* varies by packet type */ unsigned int pt:8; /* RTCP packet type */ u_int16 length; /* <p> jitter */ u_int32 lsr; /* last SR packet from this source */ u_int32 dlsr; /* delay since last SR packet */ - rtcp_rr_t; /* * SDES item */ typedef struct - u_int8 type; /* type of item (rtcp_sdes_type_t) */ u_int8 length; /* length of item (in octets) */ char data <ref> [1] </ref>; /* text, not null-terminated */ - rtcp_sdes_item_t; /* * One RTCP packet */ typedef struct - rtcp_common_t common; /* common header */ union - /* sender report (SR) */ struct - u_int32 ssrc; /* sender generating this report */ u_int32 ntp_sec; /* NTP timestamp */ u_int32 ntp_frac; u_int32 rtp_ts; /* <p> common; /* common header */ union - /* sender report (SR) */ struct - u_int32 ssrc; /* sender generating this report */ u_int32 ntp_sec; /* NTP timestamp */ u_int32 ntp_frac; u_int32 rtp_ts; /* RTP timestamp */ u_int32 psent; /* packets sent */ u_int32 osent; /* octets sent */ rtcp_rr_t rr <ref> [1] </ref>; /* variable-length list */ - sr; /* reception report (RR) */ struct - u_int32 ssrc; /* receiver generating this report */ rtcp_rr_t rr [1]; /* variable-length list */ - rr; /* source description (SDES) */ struct rtcp_sdes - u_int32 src; /* first SSRC/CSRC */ Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 47] INTERNET-DRAFT <p> /* NTP timestamp */ u_int32 ntp_frac; u_int32 rtp_ts; /* RTP timestamp */ u_int32 psent; /* packets sent */ u_int32 osent; /* octets sent */ rtcp_rr_t rr <ref> [1] </ref>; /* variable-length list */ - sr; /* reception report (RR) */ struct - u_int32 ssrc; /* receiver generating this report */ rtcp_rr_t rr [1]; /* variable-length list */ - rr; /* source description (SDES) */ struct rtcp_sdes - u_int32 src; /* first SSRC/CSRC */ Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 47] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 rtcp_sdes_item_t item [1]; /* list of SDES items */ - sdes; /* BYE */ struct - u_int32 src [1]; /* <p> /* reception report (RR) */ struct - u_int32 ssrc; /* receiver generating this report */ rtcp_rr_t rr <ref> [1] </ref>; /* variable-length list */ - rr; /* source description (SDES) */ struct rtcp_sdes - u_int32 src; /* first SSRC/CSRC */ Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 47] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 rtcp_sdes_item_t item [1]; /* list of SDES items */ - sdes; /* BYE */ struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text for reason */ bye; - rtcp_t; typedef struct rtcp_sdes rtcp_sdes_t; /* * Per-source state information */ typedef struct - u_int32 max_seq; /* highest seq. <p> rr <ref> [1] </ref>; /* variable-length list */ - rr; /* source description (SDES) */ struct rtcp_sdes - u_int32 src; /* first SSRC/CSRC */ Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 47] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 rtcp_sdes_item_t item [1]; /* list of SDES items */ - sdes; /* BYE */ struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text for reason */ bye; - rtcp_t; typedef struct rtcp_sdes rtcp_sdes_t; /* * Per-source state information */ typedef struct - u_int32 max_seq; /* highest seq. number seen */ u_int32 cycles; /* count of seq. number cycles */ u_int32 base_seq; /* base
Reference: [2] <author> H. Schulzrinne, </author> <title> Issues in designing a transport protocol for audio and video conferences and other multiparticipant real-time applications, </title> <address> ftp://gaia.cs.umass.edu/pub/hgschulz/rtp/issues.ps, </address> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: A discussion of real-time services and algorithms for their implementation as well as background discussion on some of the RTP design decisions can be found in <ref> [2] </ref>. Several RTP applications, both experimental and commercial, have already been implemented from draft specifications. These applications include audio and video tools along with diagnostic tools such as traffic Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 5] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 monitors. Users of these tools number in the thousands.
Reference: [3] <author> D. E. </author> <title> Comer, </title> <journal> Internetworking with TCP/IP, </journal> <volume> vol. </volume> <pages> 1. </pages> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Port: The abstraction that transport protocols use to distinguish among multiple destinations within a given host computer. TCP/IP protocols identify ports using small positive integers. <ref> [3] </ref> The transport selectors (TSEL) used by the OSI transport layer are equivalent to ports. RTP depends upon the lower-layer protocol to provide some mechanism such as ports to multiplex the RTP and RTCP packets of a session.
Reference: [4] <author> J. Postel, </author> <title> Internet protocol, Request for Comments (Standard) RFC 791, </title> <institution> Internet Engineering Task Force, </institution> <month> Sept. </month> <year> 1981. </year> <note> Obsoletes RFC0760. </note>
Reference-contexts: This byte order is commonly known as big-endian. The transmission order is described in detail in <ref> [4, Appendix A] </ref>. Unless otherwise noted, numeric constants are in decimal (base 10). All header data is aligned to its natural length, i.e., 16-bit fields are aligned on even offsets, 32-bit fields are aligned at offsets divisible by four, etc. Octets designated as padding have the value zero. <p> */ #include &lt;sys/utsname.h&gt; /* uname () */ #include "global.h" /* from RFC 1321 */ #include "md5.h" /* from RFC 1321 */ #define MD_CTX MD5_CTX #define MDInit MD5Init #define MDUpdate MD5Update #define MDFinal MD5Final static u_long md_32 (char *string, int length) - MD_CTX context; union - char c [16]; u_long x <ref> [4] </ref>; digest; u_long r; int i; MDInit (&context); MDUpdate (&context, string, length); MDFinal ((unsigned char *)&digest, &context); r = 0; r = digest.x [i]; - return r; - /* md_32 */ * Return random unsigned 32-bit quantity.
Reference: [5] <author> D. Mills, </author> <title> Network time protocol (v3), Request for Comments (Draft Standard) RFC 1305, </title> <institution> Internet Engineering Task Force, </institution> <month> Apr. </month> <year> 1992. </year> <note> (Obsoletes RFC1119). </note>
Reference-contexts: Octets designated as padding have the value zero. Wallclock time (absolute time) is represented using the timestamp format of the Network Time Protocol (NTP), which is in seconds relative to 0h UTC on 1 January 1900 <ref> [5] </ref>. The full resolution NTP timestamp is a 64-bit unsigned fixed-point number with the integer part in the first 32 bits and the fractional part in the last 32 bits.
Reference: [6] <author> J. Reynolds and J. Postel, </author> <title> ASSIGNED NUMBERS, Request for Comments (Standard) RFC 1700, </title> <institution> Internet Engineering Task Force, </institution> <month> Oct. </month> <year> 1994. </year> <note> (Obsoletes RFC1340). </note>
Reference-contexts: Additional payload type codes may be defined dynamically through non-RTP means (see Section 3). An initial set of default mappings for audio and video is specified in the companion profile Internet-Draft draft-ietf-avt-profile, and may be extended in future editions of the Assigned Numbers RFC <ref> [6] </ref>. sequence number: 16 bits The sequence number increments by one for each RTP data packet sent, and may be used by the receiver to detect packet loss and to restore packet sequence.
Reference: [7] <author> Unknown, </author> <title> Unknown, Technical Report? ??, Cambridge University?, Cambridge, England, unknown date. Van Jacobson said he had a reference for a paper from Cambridge about plaintext attacks and strengthening DES with various ways of doing initialization vectors, but he hasn't found it yet. </title>
Reference-contexts: The initial value of the sequence number is random (unpredictable) to make known-plaintext attacks <ref> [7] </ref> on encryption more difficult, even if the source itself does not encrypt, because the packets may flow through a translator that does. Techniques for choosing unpredictable numbers are discussed in [8]. timestamp: 32 bits The timestamp reflects the sampling instant of the first octet in the RTP data packet.
Reference: [8] <author> D. Eastlake, S. Crocker, and J. Schiller, </author> <title> Randomness recommendations for security, Request for Comments (Informational) RFC 1750, </title> <institution> Internet Engineering Task Force, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: The initial value of the sequence number is random (unpredictable) to make known-plaintext attacks [7] on encryption more difficult, even if the source itself does not encrypt, because the packets may flow through a translator that does. Techniques for choosing unpredictable numbers are discussed in <ref> [8] </ref>. timestamp: 32 bits The timestamp reflects the sampling instant of the first octet in the RTP data packet. The sampling instant must be derived from a clock that increments monotonically and linearly in time to allow synchronization and jitter calculations (see Section 6.3.1). <p> Other system calls that may be appropriate include getdomainname (), getwd (), or getrusage (). Live video or audio samples are also a good source of random numbers, but care must be taken to avoid using a turned-off microphone or blinded camera as a source <ref> [8] </ref>. Use of this or similar routine is suggested to generate the initial seed for the random number generator producing the RTCP period (as shown in Appendix A.7), to generate the initial values for the sequence number and timestamp, and to generate SSRC values.
Reference: [9] <author> J.-C. Bolot, T. Turletti, and I. Wakeman, </author> <title> Scalable feedback control for multicast video distribution in the internet, </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <address> (London, England), </address> <pages> pp. 58-67, </pages> <publisher> ACM, </publisher> <month> Aug. </month> <year> 1994. </year> <note> Available as ftp://cs.ucl.ac.uk/darpa/multicast-congestion.ps.Z </note>
Reference-contexts: This is an integral part of the RTP's role as a transport protocol and is related to the flow and congestion control functions of other transport protocols. The feedback may be directly useful for control of adaptive encodings <ref> [9] </ref>, but experiments with IP multicasting have shown that it is also critical to get feedback from the receivers to diagnose faults in the distribution. Sending reception feedback reports to all participants allows one who is observing problems to evaluate whether those problems are local or global.
Reference: [10] <author> S. Floyd and V. Jacobson, </author> <title> The synchronization of periodic routing messages, </title> <booktitle> in SIGCOMM Symposium on Communications Architectures and Protocols (D. </booktitle> <editor> P. Sidhu, ed.), </editor> <address> (San Francisco, California), </address> <pages> pp. 33-44, </pages> <publisher> ACM, </publisher> <month> Sept. </month> <year> 1993. </year> <journal> Also in IEEE/ACM Transactions on Networking, </journal> <volume> vol. 2, </volume> <pages> pp. 122-136, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: of RTCP packets exceed the allowed bandwidth when the number of participants is small and the traffic isn't smoothed according to the law of large numbers. * The interval between RTCP packets is varied randomly over the range [0.5,1.5] times the calculated interval to avoid unintended synchronization of all participants <ref> [10] </ref>.
Reference: [11] <author> J. A. Cadzow, </author> <title> Foundations of digital signal processing and data analysis. </title> <address> New York, New York: </address> <publisher> Macmillan, </publisher> <year> 1987. </year> <note> Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 61] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, </note> <year> 1995 </year>
Reference-contexts: The jitter calculation is prescribed here to allow profile-independent monitors to make valid interpretations of reports coming from different implementations. This algorithm is the optimal first-order estimator and the gain parameter 1=16 is the optimal noise power reduction ratio for situations where there is no model of the system <ref> [11, pp. 355-372] </ref>.
Reference: [12] <author> International Standards Organization, </author> <title> ISO/IEC DIS 10646-1:1993 information technology universal multiple-octet coded character set (UCS) part I: Architecture and basic multilingual plane, </title> <year> 1993. </year>
Reference-contexts: Note that the text can be no longer than 255 octets, but this is consistent with the need to limit RTCP bandwidth consumption. The text is encoded according to the UTF-2 encoding specified in Annex F of ISO standard 10646 <ref> [12, 13] </ref>. This encoding is also known as UTF-8 or UTF-FSS. It is described in File System Safe UCS Transformation Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 25] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 Format (FSS UTF), X/Open Preliminary Specification, Document Number P316 and Unicode Technical Report #4.
Reference: [13] <author> The Unicode Consortium, </author> <title> The Unicode Standard. </title> <address> New York, New York: </address> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Note that the text can be no longer than 255 octets, but this is consistent with the need to limit RTCP bandwidth consumption. The text is encoded according to the UTF-2 encoding specified in Annex F of ISO standard 10646 <ref> [12, 13] </ref>. This encoding is also known as UTF-8 or UTF-FSS. It is described in File System Safe UCS Transformation Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 25] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 Format (FSS UTF), X/Open Preliminary Specification, Document Number P316 and Unicode Technical Report #4.
Reference: [14] <author> P. Mockapetris, </author> <title> Domain names concepts and facilities, Request for Comments (Standard) RFC 1034, </title> <institution> Internet Engineering Task Force, </institution> <month> Nov. </month> <year> 1987. </year> <note> Obsoletes RFC0973; Updated by RFC1101. </note>
Reference-contexts: For both formats, host is either the fully qualified domain name of the host from which the real-time data originates, formatted according to the rules specified in RFC 1034 <ref> [14] </ref>, RFC 1035 [15] and Section 2.1 of RFC 1123 [16]; or the standard ASCII representation of the host's numeric address on the interface used for the RTP communication. For example, the standard ASCII representation of an IP Version 4 address is dotted decimal, also known as dotted quad.
Reference: [15] <author> P. Mockapetris, </author> <title> Domain names implementation and specification, Request for Comments (Standard) RFC 1035, </title> <institution> Internet Engineering Task Force, </institution> <month> Nov. </month> <year> 1987. </year> <note> Obsoletes RFC0973; Updated by RFC1348. </note>
Reference-contexts: For both formats, host is either the fully qualified domain name of the host from which the real-time data originates, formatted according to the rules specified in RFC 1034 [14], RFC 1035 <ref> [15] </ref> and Section 2.1 of RFC 1123 [16]; or the standard ASCII representation of the host's numeric address on the interface used for the RTP communication. For example, the standard ASCII representation of an IP Version 4 address is dotted decimal, also known as dotted quad.
Reference: [16] <author> R. Braden, </author> <title> Requirements for internet hosts application and support, Request for Comments (Standard) RFC 1123, </title> <institution> Internet Engineering Task Force, </institution> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: For both formats, host is either the fully qualified domain name of the host from which the real-time data originates, formatted according to the rules specified in RFC 1034 [14], RFC 1035 [15] and Section 2.1 of RFC 1123 <ref> [16] </ref>; or the standard ASCII representation of the host's numeric address on the interface used for the RTP communication. For example, the standard ASCII representation of an IP Version 4 address is dotted decimal, also known as dotted quad. <p> /* clock () */ #include &lt;sys/utsname.h&gt; /* uname () */ #include "global.h" /* from RFC 1321 */ #include "md5.h" /* from RFC 1321 */ #define MD_CTX MD5_CTX #define MDInit MD5Init #define MDUpdate MD5Update #define MDFinal MD5Final static u_long md_32 (char *string, int length) - MD_CTX context; union - char c <ref> [16] </ref>; u_long x [4]; digest; u_long r; int i; MDInit (&context); MDUpdate (&context, string, length); MDFinal ((unsigned char *)&digest, &context); r = 0; r = digest.x [i]; - return r; - /* md_32 */ * Return random unsigned 32-bit quantity.
Reference: [17] <author> Y. Rekhter, R. Moskowitz, D. Karrenberg, and G. de Groot, </author> <title> Address allocation for private internets, Request for Comments (Informational) RFC 1597, </title> <institution> Internet Engineering Task Force, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: If cross-media binding is required, it may be necessary for the CNAME of each tool to be externally configured with the same value by a coordination tool. Application writers should be aware that private network address assignments such as the Net-10 assignment proposed in RFC 1597 <ref> [17] </ref> may create network addresses that are not globally unique.
Reference: [18] <author> E. Lear, E. Fair, D. Crocker, and T. Kessler, </author> <title> Network 10 considered harmful (some practices shouldn't be codified), Request for Comments (Informational) RFC 1627, </title> <institution> Internet Engineering Task Force, </institution> <month> Jul. </month> <year> 1994. </year>
Reference-contexts: This would lead to non-unique CNAMEs if hosts with private addresses and no direct IP connectivity to the public Internet have their RTP packets forwarded to the public Internet through an RTP-level translator. (See also RFC 1627 <ref> [18] </ref>.) To handle this case, applications may provide a means to configure a unique CNAME, but the burden is on the translator to translate CNAMEs from private addresses to public addresses if necessary to keep private addresses from being exposed. 6.4.2 NAME: User name SDES item 0 1 2 3 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
Reference: [19] <author> D. Crocker, </author> <title> Standard for the format of ARPA internet text messages, Request for Comments (Standard) RFC 822, </title> <institution> Internet Engineering Task Force, </institution> <month> Aug. </month> <year> 1982. </year> <note> Obsoletes RFC0733; Updated by RFC1327, RFC0987. </note>
Reference-contexts: It should not be relied upon to be unique among all participants in the session. 6.4.3 EMAIL: Electronic mail address SDES item 0 1 2 3 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | EMAIL=3 | length | email address of source ... +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ The email address is formatted according to RFC 822 <ref> [19] </ref>, for example, John.Doe@megacorp.com.
Reference: [20] <author> W. Feller, </author> <title> An Introduction to Probability Theory and its Applications, </title> <journal> Volume 1, </journal> <volume> vol. </volume> <pages> 1. </pages> <address> New York, New York: </address> <publisher> John Wiley and Sons, </publisher> <editor> third ed., </editor> <year> 1968. </year>
Reference-contexts: If N is the number of sources and L the length of the identifier (here, 32 bits), the probability that two sources independently pick the same value can be approximated for large N <ref> [20, p. 33] </ref> as 1 e N 2 =2 L+1 For N = 1000, the probability is roughly 10 4 . The typical collision probability is much lower than the worst-case above.
Reference: [21] <author> S. Stubblebine, </author> <title> Security services for multimedia conferencing, </title> <booktitle> in 16th National Computer Security Conference, </booktitle> <address> (Baltimore, Maryland), </address> <pages> pp. 391-395, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Rightly or not, users may be more sensitive to privacy concerns with audio Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 59] INTERNET-DRAFT draft-ietf-avt-rtp-07.ps March 21, 1995 and video communication than they have been with more traditional forms of network communication <ref> [21] </ref>. Therefore, the use of security mechanisms with RTP is important. These mechanisms are discussed in Section 9. RTP-level translators or mixers may be used to allow RTP traffic to reach hosts behind firewalls.
Reference: [22] <author> D. Balenson, </author> <title> Privacy enhancement for internet electronic mail: Part III: algorithms, modes, and identifiers, Request for Comments (Proposed Standard) RFC 1423, </title> <institution> Internet Engineering Task Force, </institution> <month> Feb. </month> <year> 1993. </year> <note> (Obsoletes RFC1115). </note>
Reference-contexts: Examples of such validity checks for RTP and RTCP headers are given in Appendices A.1 and A.2. The default encryption algorithm is the Data Encryption Standard (DES) algorithm in cipher block chaining (CBC) mode, as described in Section 1.1 of RFC 1423 <ref> [22] </ref>, except that padding to a multiple of 8 octets is indicated as described for the P bit in Section 5.1. The initialization vector is zero because random values are supplied in the RTP header or by the random prefix for compound RTCP packets.
Reference: [23] <author> V. L. Voydock and S. T. Kent, </author> <title> Security mechanisms in high-level network protocols, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 15, </volume> <pages> pp. 135-171, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: The initialization vector is zero because random values are supplied in the RTP header or by the random prefix for compound RTCP packets. For details on the use of CBC initialization vectors, see <ref> [23] </ref>. Implementations that support encryption should always support the DES algorithm in CBC mode as the default to maximize interoperability. This method is chosen because it has been demonstrated to be easy and practical to use in experimental audio and video tools in operation on the Internet.
Reference: [24] <author> R. Rivest, </author> <title> The MD5 message-digest algorithm, Request for Comments (Informational) RFC 1321, </title> <institution> Internet Engineering Task Force, </institution> <month> Apr. </month> <year> 1992. </year> <note> Schulzrinne/Casner/Frederick/Jacobson Expires 9/1/95 [Page 62] </note>
Reference-contexts: sd = (rtcp_sdes_t *) ((u_int32 *)sd + (((char *)rsp - (char *)sd) &gt;> 2) + 1); - if (count &gt;= 0) - /* invalid packet format */ - A.6 Generating a Random 32-bit Identifier The following subroutine generates a random 32-bit identifier using the MD5 routines published in RFC 1321 <ref> [24] </ref>. The system routines may not be present on all operating systems, but they should serve as hints as to what kinds of information may be used. Other system calls that may be appropriate include getdomainname (), getwd (), or getrusage ().
References-found: 24

