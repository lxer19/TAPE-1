URL: http://www.cs.ucc.ie/~dgb/papers/ewcbr98.ps.gz
Refering-URL: http://www.cs.ucc.ie/~dgb/publist.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: d.bridge@cs.ucc.ie  
Title: Defining and Combining Symmetric and Asymmetric Similarity Measures  
Author: Derek G. Bridge 
Web: http://www.cs.ucc.ie/dbridge.html  
Address: Ireland  
Affiliation: Department of Computer Science, University College, Cork,  
Abstract: In this paper, we present a framework for the definition of similarity measures using lattice-valued functions. We show their strengths (particularly for combining similarity measures). Then we investigate a particular instantiation of the framework, in which sets are used both to represent objects and to denote degrees of similarity. The paper con cludes by suggesting some generalisations of the findings. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ashley, K.D.: </author> <title> Reasoning with cases and hypotheticals in HYPO, </title> <journal> International Journal of Man-Machine Studies, vol.(34), </journal> <volume> pp.753-796, </volume> <year> 1991 </year>
Reference-contexts: Ours is not the first use of lattices in CBR. But, in our framework and in the work reported in [6] and [10], it is the degrees of similarity (the values of the result-type of the similarity function) that form a lattice, whereas, in earlier work such as <ref> [1] </ref> (and also in machine learning work), it is the cases in the case base (the values of the arguments of the similarity function) that form a lattice.
Reference: 2. <author> Birkhoff, G.: </author> <title> Lattice Theory, </title> <publisher> American Mathematical Society, </publisher> <year> 1967 </year>
Reference-contexts: See <ref> [2] </ref> for mathematical definitions. Ours is not the first use of lattices in CBR.
Reference: 3. <author> Bunke, H. & Messmer, </author> <title> B.T.: Similarity Measures for Structured Representations, </title> <editor> in S.Wess, K.-D.Althoff & M.M.Richter (eds.), </editor> <booktitle> Topics in Case-Based Reasoning (Procs. of First European Workshop on Case-Based Reasoning), </booktitle> <address> LNAI-837, pp.106-118, </address> <publisher> Springer-Verlag, </publisher> <year> 1994 </year>
Reference-contexts: pairs of attributes and atomic values), and similarity is based on the inverse of the distance between objects in the space (e.g. [12]); and the structural approach, which uses graphical representations, in which nodes denote objects and edges denote relations between objects, and similarity is based on graph matching (e.g. <ref> [3] </ref>). This tri-part classification is an over-simplification. It may omit distinctive approaches. And it may seemingly drive wedges between related approaches. For example, work on the similarity of first-order terms ([4], [5]) and feature structures ([10]) has elements of both the geometric and the structural approaches.
Reference: 4. <author> Emde, W. & Wettschereck,D.: </author> <title> Relational Instance-Based Learning, </title> <editor> in L.Saitta (ed.), </editor> <booktitle> Procs. of Thirteenth International Conference on Machine Learning, </booktitle> <address> pp.122-130, </address> <year> 1996 </year>
Reference: 5. <editor> Jantke, </editor> <title> K.P.: Nonstandard Concepts of Similarity in Case-Based Reasoning, </title> <editor> in H.- H.Bock, W.Lenski & M.M.Richter (eds.), </editor> <booktitle> Information Systems in Data Analysis: Prospects | Foundations | Applications (Procs. of Seventeenth Annual Conference of GfKl), </booktitle> <address> pp.28-43, </address> <publisher> Springer-Verlag, </publisher> <year> 1994 </year>
Reference-contexts: This tri-part classification is an over-simplification. It may omit distinctive approaches. And it may seemingly drive wedges between related approaches. For example, work on the similarity of first-order terms ([4], <ref> [5] </ref>) and feature structures ([10]) has elements of both the geometric and the structural approaches. We include the classification merely in order to indicate the huge variety of approaches to be found in the CBR literature and elsewhere. <p> Even more controversial is symmetry, x ~ y = y ~ x. Richter argues for it [11]; Jantke argues against it (but, ironically, he does so in a paper in which the new similarity function he introduces is symmetric) <ref> [5] </ref>; Tversky argues against it [13]; in [9], we took symmetry as an axiom and defined similarity measures in a way that guaranteed symmetry.
Reference: 6. <author> Matuschek,D. & Jantke,K.P.: </author> <title> Axiomatic Characterization of Structural Similarity for Case-Based Reasoning, </title> <editor> in D.D.Dankel (ed.), </editor> <booktitle> Procs. of Florida AI Research Symposium, Florida AI Research Society, </booktitle> <address> pp.432-436, </address> <year> 1997 </year>
Reference-contexts: Furthermore, where our previous papers focussed on defining the framework's operators, this paper mentions axiomatisation (although it does not aim to give a full axiomatisation) and shows that even seemingly reasonable axiomatisations reported in the literature (e.g. <ref> [6] </ref>) may be too restrictive. 2 Lattice-Valued Functions We will be explaining what we mean by similarity functions, difference functions and excess functions. <p> See [2] for mathematical definitions. Ours is not the first use of lattices in CBR. But, in our framework and in the work reported in <ref> [6] </ref> and [10], it is the degrees of similarity (the values of the result-type of the similarity function) that form a lattice, whereas, in earlier work such as [1] (and also in machine learning work), it is the cases in the case base (the values of the arguments of the similarity <p> " y but where the lattice used is (P (fa; b; c; dg); ).) This idea, of using a structured object to denote the degree of similarity of two other structured objects, and its applications to sets (as well as to other structured representations) is proposed by Matuschek & Jantke <ref> [6] </ref>. <p> Furthermore, we have included here only one of two competing maximality axioms that they discuss. 7 We should make clear that symmetry is not an axiom in <ref> [6] </ref>. fdg, and so on. This definition satisfies the generalised `triangle equality' axiom (Table 1). A difference function can also be defined, the obvious definition being the disjoint union, ], of the two sets (i.e., the elements they do not have in common). <p> Not Using Sets to Denote Degrees of Similarity. In the paper by Ma-tuschek & Jantke <ref> [6] </ref>, the axioms require the degree of similarity to be expressed using the same structured representation as is used for the objects. This is too restrictive. Natural similarity functions can be defined that do not observe this requirement (without resorting to conversion to numeric-valued functions and the like). <p> The main ideas are the use of lattice-valued functions, and specifically their use on structured representations. Just as Matuschek & Jantke <ref> [6] </ref> present their axioms in a form that is not restricted to sets but applies to any structured representation that has a natural partial ordering, we ought to generalise our similarity measures for sets to other representations (in our case, ones that form 8 Another way of getting possibly asymmetric functions
Reference: 7. <author> Osborne. H. </author> & <title> Bridge, D.G.: Similarity Metrics: A Formal Unification of Cardinal & Non-Cardinal Similarity Measures, </title> <editor> in D.B.Leake & E.Plaza (eds.), </editor> <title> Case Based Reasoning Research & Development, </title> <publisher> pp.235-244, Springer, </publisher> <year> 1997 </year>
Reference-contexts: Having reported ? This paper develops earlier work on lattice-based functions done with Hugh Osborne, to whom my thanks. examples that are in the spirit of the geometric approach in previous papers <ref> [7] </ref>, [8], in this paper we focus more on some feature-based and structural approaches. <p> This occurs when similarity function designers need something richer than absolute similarity, i.e., they need degrees of similarity, but they do not need to quantify, or cannot properly quantify, the degrees. Any numbers used in these circumstances will be contrived. In earlier work <ref> [7] </ref>, [8], [9], we generalised over absolute and relative similarity functions giving what we called metric similarity functions. These are lattice-valued functions, ~:: ff ! ff ! L. A lattice, L, is a partially-ordered set of values, (S; v), that satisfies certain properties. In fact, we require complete lattices. <p> We should also add that product and prioritisation are not our only ways of combining and manipulating lattice-valued functions. Some other operators for manipulating such functions are defined in <ref> [7] </ref>, [8]. Unaddressed by our discussion so far is whether the similarity functions we define in this (or other) frameworks must satisfy any axioms. <p> And so we can also use our generalisation to give lattice-valued functions, fi :: ff ! ff ! L: a value from a lattice denotes the degree by which the second object exceeds the first. We have used such functions in our work <ref> [7] </ref>, [8], and will use them in this paper, referring to them as excess functions. <p> We have not found a mathematical motivation for imposing such axioms. For example, our definition of the maxima of a set under an excess function <ref> [7] </ref> satisfies the properties we expect of maxima without imposing reflexivity and antisymmetry. In the rest of this paper, we apply our framework to particular object representations, specifically to structured object representations that have a natural partial ordering. <p> Then, a measure that combines the two may not be symmetric. 9 See the definition of `right composition' in <ref> [7] </ref>, [8], which has precisely this purpose (although it is defined there in a form that is specific to excess functions). complete lattices).
Reference: 8. <author> Osborne, H. </author> & <title> Bridge, D.G.: We're All Going on a Summer Holiday: An Exercise in Non-Cardinal Case Base Retrieval, </title> <editor> in G.Grahne (ed.), </editor> <booktitle> Frontiers in Artificial Intelligence and Applications (Procs. of Sixth Scandinavian Conference on Artificial Intelligence), </booktitle> <address> pp.209-219, </address> <publisher> IOS Press, </publisher> <year> 1997 </year>
Reference-contexts: Having reported ? This paper develops earlier work on lattice-based functions done with Hugh Osborne, to whom my thanks. examples that are in the spirit of the geometric approach in previous papers [7], <ref> [8] </ref>, in this paper we focus more on some feature-based and structural approaches. <p> This occurs when similarity function designers need something richer than absolute similarity, i.e., they need degrees of similarity, but they do not need to quantify, or cannot properly quantify, the degrees. Any numbers used in these circumstances will be contrived. In earlier work [7], <ref> [8] </ref>, [9], we generalised over absolute and relative similarity functions giving what we called metric similarity functions. These are lattice-valued functions, ~:: ff ! ff ! L. A lattice, L, is a partially-ordered set of values, (S; v), that satisfies certain properties. In fact, we require complete lattices. <p> We should also add that product and prioritisation are not our only ways of combining and manipulating lattice-valued functions. Some other operators for manipulating such functions are defined in [7], <ref> [8] </ref>. Unaddressed by our discussion so far is whether the similarity functions we define in this (or other) frameworks must satisfy any axioms. <p> And so we can also use our generalisation to give lattice-valued functions, fi :: ff ! ff ! L: a value from a lattice denotes the degree by which the second object exceeds the first. We have used such functions in our work [7], <ref> [8] </ref>, and will use them in this paper, referring to them as excess functions. <p> Then, a measure that combines the two may not be symmetric. 9 See the definition of `right composition' in [7], <ref> [8] </ref>, which has precisely this purpose (although it is defined there in a form that is specific to excess functions). complete lattices).
Reference: 9. <author> Osborne, H. </author> & <title> Bridge, D.G: Models of Similarity for Case-Based Reasoning, Procs. </title> <booktitle> of the Interdisciplinary Workshop on Similarity and Categorisation, </booktitle> <address> pp.173-179, </address> <year> 1997 </year>
Reference-contexts: This occurs when similarity function designers need something richer than absolute similarity, i.e., they need degrees of similarity, but they do not need to quantify, or cannot properly quantify, the degrees. Any numbers used in these circumstances will be contrived. In earlier work [7], [8], <ref> [9] </ref>, we generalised over absolute and relative similarity functions giving what we called metric similarity functions. These are lattice-valued functions, ~:: ff ! ff ! L. A lattice, L, is a partially-ordered set of values, (S; v), that satisfies certain properties. In fact, we require complete lattices. <p> Tversky [13] argues that this is too strong: there may be different degrees of similarity for different `identical' objects. Consequently, in <ref> [9] </ref> and here (see Table 1), we use a weaker axiom: x ~ x w x ~ y, i.e., an object is at least as similar to itself as it is to any other object. Even more controversial is symmetry, x ~ y = y ~ x. <p> Even more controversial is symmetry, x ~ y = y ~ x. Richter argues for it [11]; Jantke argues against it (but, ironically, he does so in a paper in which the new similarity function he introduces is symmetric) [5]; Tversky argues against it [13]; in <ref> [9] </ref>, we took symmetry as an axiom and defined similarity measures in a way that guaranteed symmetry.
Reference: 10. <author> Plaza, E.: </author> <title> Cases as terms: A feature term approach to the structured representation of cases, </title> <editor> in M.Veloso & A.Aamodt (eds.), </editor> <booktitle> Case-Based Reasoning Research and Development (Procs. of First International Conference on Case-Based Reasoning), </booktitle> <address> LNAI-1010, pp.265-276, </address> <publisher> Springer, </publisher> <year> 1995 </year>
Reference-contexts: See [2] for mathematical definitions. Ours is not the first use of lattices in CBR. But, in our framework and in the work reported in [6] and <ref> [10] </ref>, it is the degrees of similarity (the values of the result-type of the similarity function) that form a lattice, whereas, in earlier work such as [1] (and also in machine learning work), it is the cases in the case base (the values of the arguments of the similarity function) that
Reference: 11. <author> Richter, </author> <title> M.M.: Classification and Learning of Similarity Measures, </title> <editor> in Opitz, Lausen and Klar (eds.), </editor> <title> Studies in Classification, Data Analysis and Knowledge Organization, </title> <publisher> Springer-Verlag, </publisher> <year> 1992 </year>
Reference-contexts: Similarity functions reported in the literature have typically delivered values of type boolean or of some numeric type. (For example, there are only boolean-valued and real-valued functions in Richter's classification of similarity functions <ref> [11] </ref>.) We refer to boolean-valued similarity functions, ~:: ff ! ff ! Bool, as absolute similarity functions: two objects are judged to be either similar or not similar. <p> example, an operator similar to product, but based on disjunction rather than conjunction, is unlikely to violate any axioms we might place on similarity functions but will not necessarily respect the axiom that we give in Table 1 for excess functions.) Many authors claim that similarity functions must be reflexive <ref> [11] </ref>, which, in our framework, would be stated as x ~ y = &gt;, where &gt; is the topmost element in the lattice. Tversky [13] argues that this is too strong: there may be different degrees of similarity for different `identical' objects. <p> Even more controversial is symmetry, x ~ y = y ~ x. Richter argues for it <ref> [11] </ref>; Jantke argues against it (but, ironically, he does so in a paper in which the new similarity function he introduces is symmetric) [5]; Tversky argues against it [13]; in [9], we took symmetry as an axiom and defined similarity measures in a way that guaranteed symmetry. <p> But we can easily imagine wanting to use numeric-valued 5 Elsewhere difference functions are sometimes called `distance functions' (e.g. <ref> [11] </ref>). counterparts to these, fi :: ff ! ff ! &lt;, where we want to quantify the degree by which one object is exceeded by (or preferred over) another.
Reference: 12. <author> Shepard,R.N.: </author> <title> Toward a Universal Law of Generalization for Psychological Science, </title> <booktitle> Science, </booktitle> <address> vol.237, pp.1317-1323, </address> <year> 1987 </year>
Reference-contexts: is based on feature commonality and difference (e.g. [13]); the geometric approach, in which objects are represented by points in an n-dimensional space (usually specified by sets of pairs of attributes and atomic values), and similarity is based on the inverse of the distance between objects in the space (e.g. <ref> [12] </ref>); and the structural approach, which uses graphical representations, in which nodes denote objects and edges denote relations between objects, and similarity is based on graph matching (e.g. [3]). This tri-part classification is an over-simplification. It may omit distinctive approaches. And it may seemingly drive wedges between related approaches.
Reference: 13. <author> Tversky, </author> <title> A: Features of Similarity, </title> <journal> Psychological Review, vol.84(4), </journal> <volume> pp.327-352, </volume> <year> 1977 </year>
Reference-contexts: 1 Introduction There are many different ways of computing the similarity of object representa tions. These include: the feature-based approach, in which objects are represented by sets of features, and similarity is based on feature commonality and difference (e.g. <ref> [13] </ref>); the geometric approach, in which objects are represented by points in an n-dimensional space (usually specified by sets of pairs of attributes and atomic values), and similarity is based on the inverse of the distance between objects in the space (e.g. [12]); and the structural approach, which uses graphical representations, <p> Tversky <ref> [13] </ref> argues that this is too strong: there may be different degrees of similarity for different `identical' objects. <p> Even more controversial is symmetry, x ~ y = y ~ x. Richter argues for it [11]; Jantke argues against it (but, ironically, he does so in a paper in which the new similarity function he introduces is symmetric) [5]; Tversky argues against it <ref> [13] </ref>; in [9], we took symmetry as an axiom and defined similarity measures in a way that guaranteed symmetry. <p> Asymmetric Similarity. The three similarity functions we have shown so far in this section (based on intersection, disjoint union with inverted lattice, and the two combined) have been symmetric. Using Tversky's paper <ref> [13] </ref> for inspiration, we can also show a way of building up asymmetric similarity functions in our framework. One example is x ~ y , hx " y; xny; ynxi. This function is not symmetric. <p> Tversky's Model. In <ref> [13] </ref>, Tversky was also axiomatising similarity functions for set-valued object representations. His first axiom (the Matching axiom) is that x ~ y = F (x " y; xny; ynx).
Reference: 14. <author> Wilson, D.R. & Martinez, T.R.: </author> <title> Improved Heterogeneous Distance Functions, </title> <journal> Journal of Artificial Intelligence Research, vol.6, </journal> <volume> pp.1-34, </volume> <year> 1997 </year>
Reference-contexts: We want a similarity function defined on pairs drawn from ff fi fi. But what should the return-type be? It is dealing with this problem that leads others to inter-convert similarity functions (e.g. see <ref> [14] </ref> for ways of combining boolean-valued and numeric-valued functions, all of which involve converting the boolean-valued function to a numeric one). But, in our framework, a similarity function may have as its result-type any type on which a (complete) lattice is defined.
References-found: 14

