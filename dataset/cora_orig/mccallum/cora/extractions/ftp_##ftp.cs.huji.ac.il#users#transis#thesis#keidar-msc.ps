URL: ftp://ftp.cs.huji.ac.il/users/transis/thesis/keidar-msc.ps
Refering-URL: http://www.cs.huji.ac.il/~idish/Abstracts/keidar-msc.html
Root-URL: http://www.cs.huji.ac.il
Title: A Highly Available Paradigm for Consistent Object Replication  
Author: Idit Keidar supervised by Prof. Danny Dolev 
Degree: A thesis submitted in fulfillment of the requirements for the degree of Master of Science by  
Date: April 12, 1994  
Address: Jerusalem, Israel.  
Affiliation: Institute of Computer Science The Hebrew University of Jerusalem  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. In Proceedings of the Hardware and Software Architectures for Fault Tolerance Workshop, </title> <institution> at Le Mont Saint-Michel, France, </institution> <month> June </month> <year> 1993. </year> <note> LNCS 774. </note>
Reference-contexts: In our algorithm, a connected majority does not need to take into consideration concurrent messages in other components. The algorithm in <ref> [1] </ref> exploits the Transis membership to design a replicated server that tolerates network partitions. The novelty of [1] is the idea to separate between message dissemination and message ordering, allowing all the processors to initiate messages, and disseminating them among the processors as fast as the communication allows. <p> In our algorithm, a connected majority does not need to take into consideration concurrent messages in other components. The algorithm in <ref> [1] </ref> exploits the Transis membership to design a replicated server that tolerates network partitions. The novelty of [1] is the idea to separate between message dissemination and message ordering, allowing all the processors to initiate messages, and disseminating them among the processors as fast as the communication allows. The ordering of messages is done separately. <p> We use the colors model defined in <ref> [1] </ref> to indicate the knowledge level associated with each message, as described below. The application may request of COReL to receive up-calls with each message when the message becomes locally ordered (red ), when it becomes globally totally ordered (green) and/or when it becomes stable (white). <p> This way, two processors that never directly communicate with each other, will eventually receive each other's messages from other processors. The algorithm disseminates messages to all the targets as fast as communication allows. This property is called the Eventual Path Requirement in <ref> [1] </ref>. 3.5 Message Ordering When the network partitions into several components, the algorithm always allows a primary component, that remains connected for sufficiently long, to continue ordering messages.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership Algorithms for Multi-cast Communication Groups. </title> <booktitle> In Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (LNCS, 647), number 6th, </booktitle> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: An alternative algorithm for message recovery and total order, Totem [5], is also implemented in the Transis environment. The environment is dynamic and processors can come up and may crash, may partition and re-merge. Transis maintains the membership <ref> [2] </ref> of connected processors automatically. The membership service of Transis supports the virtual synchrony property, and provides consistent semantics as described in [13] that are required for the algorithm we present here (see Section 4). <p> This service is supplied by a separate Stability Layer that is run on top of the Replication Layer. 13 4 The Environment Model COReL is a high-level communication service layer, designed in the Transis environment. Transis is a sophisticated transport layer <ref> [3, 2] </ref> that supplies omission fault free group multi-cast and membership services with a built-in flow control in an asynchronous environment. COReL uses Transis as a building block for reliable communication within connected network components 5 . <p> COReL uses Transis as a building block for reliable communication within connected network components 5 . COReL may be implemented using any transport layer that supplies similar services, such as Totem [5], Trans [23] and HORUS [35, 34] with the membership service of Transis <ref> [2, 13] </ref>. 4.1 Group Multicast and Membership The Transis environment supports multicast communication among groups of processors. The basic communication primitive is to post (send ) a message to a group. Transis delivers a posted message to all the members of the group, including the member that sent it. <p> Since it is well known that reaching agreement in asynchronous environments is impossible [17], this goal may not be achieved in any practical implementation of a membership protocol. Existing membership protocols circumvent this difficulty in different ways. The protocols in <ref> [2, 5, 13] </ref> use an inaccurate failure detector, based on timeout: when a processor is presumed faulty, it is taken out of the view. Messages from processors that are not part of the current view are discarded. A presumed failed machine can re-join the membership.
Reference: [3] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <booktitle> In FTCS conference, </booktitle> <volume> number 22, </volume> <month> July </month> <year> 1992. </year> <note> previous version available as TR CS91-13, </note> <institution> Dept. of Comp. Sci., the Hebrew University of Jerusalem. </institution>
Reference-contexts: Replica of the state machine receive all the update messages in the same order. If the communication allows, all the replica eventually reach the same state. The algorithm totally orders messages in the face of network partitions and site failures. The algorithm was designed in the Transis <ref> [3] </ref> environment; Transis is a sophisticated transport layer that supplies group multicast and membership services. The Consistent Object Replication Layer (COReL) supplies the application builder with long-term services such as reconciliation of states among recovered and reconnected processors and global message ordering. <p> These protocols use the hardware broadcast capability for message dissemination and a combined system of positive and negative acknowledgments to detect message losses and recover them. Melliar-Smith et al. provide the Total protocol for total ordering of messages over Trans [25]. The Transis System <ref> [3] </ref> supports fast and reliable message multicast among currently connected processors, on top of an unreliable network. Transis utilizes the characteristics of available hardware, and recovers message losses using an algorithm similar to the Trans and Psync algorithms. <p> The model rigorously defines the semantics of message multicast in a partitionable network. These semantics are valuable for developing applications that tolerate partitions, such as the algorithm presented here. In the Transis environment, two total ordering algorithms that support EVS <ref> [5, 3] </ref> are implemented. 2.2 Fault Tolerance and Replication with Group Communication One of the main applications of group multicast is object replication. Totally ordered multi-cast guarantees the consistency of all the replica of an object (if the object may be represented as a deterministic state machine). <p> This service is supplied by a separate Stability Layer that is run on top of the Replication Layer. 13 4 The Environment Model COReL is a high-level communication service layer, designed in the Transis environment. Transis is a sophisticated transport layer <ref> [3, 2] </ref> that supplies omission fault free group multi-cast and membership services with a built-in flow control in an asynchronous environment. COReL uses Transis as a building block for reliable communication within connected network components 5 . <p> These properties are fulfilled in the Agreed Communication service of the Extended Virtual Synchrony (EVS) model [24]. Therefore, COReL may be implemented using any transport layer that supports EVS. In the Transis environment, three different protocols for Total Ordering of messages are implemented. The protocol in <ref> [3] </ref> and Totem [5] support the services of the EVS model. 6 This property is required for messages at the level of the transport layer.
Reference: [4] <author> Y. Amir, D. Dolev, P. Melliar-Smith, and L. Moser. </author> <title> Persistent Order Maintanence in a Partitioned Network. </title> <year> 1994. </year>
Reference-contexts: An order proposal prp is a suggestion to totally order a defined set of messages, Msgs (prp). The idea to agree upon the order of a set (or cut ) of messages is based on the concept introduced in <ref> [4] </ref>. 35 7.1.1 Initiation of an Order Proposal The order proposals are initiated by the source and disseminated to all the other processors. Each processor that receives the proposal votes either Accept or Reject on it, as described below.
Reference: [5] <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agarwal, and P. Ciarfella. </author> <title> Fast Message Ordering and Membership using a Logical Token-Passing Ring. </title> <booktitle> In International Conference on Distributed Computing Systems, number 13th, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Transis utilizes the characteristics of available hardware, and recovers message losses using an algorithm similar to the Trans and Psync algorithms. An alternative algorithm for message recovery and total order, Totem <ref> [5] </ref>, is also implemented in the Transis environment. The environment is dynamic and processors can come up and may crash, may partition and re-merge. Transis maintains the membership [2] of connected processors automatically. <p> The model rigorously defines the semantics of message multicast in a partitionable network. These semantics are valuable for developing applications that tolerate partitions, such as the algorithm presented here. In the Transis environment, two total ordering algorithms that support EVS <ref> [5, 3] </ref> are implemented. 2.2 Fault Tolerance and Replication with Group Communication One of the main applications of group multicast is object replication. Totally ordered multi-cast guarantees the consistency of all the replica of an object (if the object may be represented as a deterministic state machine). <p> COReL uses Transis as a building block for reliable communication within connected network components 5 . COReL may be implemented using any transport layer that supplies similar services, such as Totem <ref> [5] </ref>, Trans [23] and HORUS [35, 34] with the membership service of Transis [2, 13]. 4.1 Group Multicast and Membership The Transis environment supports multicast communication among groups of processors. The basic communication primitive is to post (send ) a message to a group. <p> These properties are fulfilled in the Agreed Communication service of the Extended Virtual Synchrony (EVS) model [24]. Therefore, COReL may be implemented using any transport layer that supports EVS. In the Transis environment, three different protocols for Total Ordering of messages are implemented. The protocol in [3] and Totem <ref> [5] </ref> support the services of the EVS model. 6 This property is required for messages at the level of the transport layer. <p> Since it is well known that reaching agreement in asynchronous environments is impossible [17], this goal may not be achieved in any practical implementation of a membership protocol. Existing membership protocols circumvent this difficulty in different ways. The protocols in <ref> [2, 5, 13] </ref> use an inaccurate failure detector, based on timeout: when a processor is presumed faulty, it is taken out of the view. Messages from processors that are not part of the current view are discarded. A presumed failed machine can re-join the membership.
Reference: [6] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: A mixed decision results in an inconsistent database, a unanimous decision guarantees the atomicity of the transaction (provided that each local server can guarantee local atomicity of transactions). To this end an ACP is invoked. Usually, the ACP is invoked for each transaction separately. Chapter 7 of <ref> [6] </ref> contains a detailed presentation of atomic commitment protocols. The simplest and most renowned ACP is two phase commit (2PC ). Several variations of 2PC were suggested, the simplest version is centralized one of the processors is designated as the transaction coordinator. <p> In a one-copy database, the system should ensure serializability; that is, interleaved execution of user transactions is equivalent to some serial execution of those transactions. A replicated database system is considered correct if it is one-copy serializable (1SR), i.e. it ensures serializability and one-copy equivalence. Chapter 8 of <ref> [6] </ref> contains a detailed definition of 1SR histories and their representation, and a description of several protocols that maintain 1SR. Several protocols were suggested for maintaining 1SR in spite of network partitions, allowing a primary component to process transactions while other processors are blocked. <p> To decrease the blocking induced by lock acquisitions, it is preferable to use this scheme with timestamp based concurrency control, rather than two phase locking, as described in [33]. A description of timestamp based concurrency control may be found in Chapter 4 in <ref> [6] </ref>. 43 8.3 A Distributed Commitment Protocol Based on COReL In this section we show that total order is sufficient for atomic commitment. We show how to construct an atomic commitment protocol (ACP) that uses COReL as a building block. <p> Otherwise, the suggestion is abort. * When a suggestion arrives, if it is the first suggestion received for this transaction, decide according to it. Otherwise, ignore it. defined in Chapter 7 of <ref> [6] </ref>): * All the processors that reach a decision reach the same one.
Reference: [7] <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with Process Groups: Group and Multicast Semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Thus, using group communication mechanisms can lead to simpler and more efficient solutions for replication. One of the leading systems in the area of group communication is the ISIS system <ref> [7, 9] </ref>. The novelty of ISIS is in the formal and rigorous definition of the service interface. ISIS supplies group communication services that maintain the virtual synchrony [8] property, which is important for consistent application semantics.
Reference: [8] <author> K. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Ann. Symp. Operating Systems Principles, </booktitle> <volume> number 11, </volume> <pages> pages 123-138. </pages> <publisher> ACM, </publisher> <month> Nov 87. </month>
Reference-contexts: One of the leading systems in the area of group communication is the ISIS system [7, 9]. The novelty of ISIS is in the formal and rigorous definition of the service interface. ISIS supplies group communication services that maintain the virtual synchrony <ref> [8] </ref> property, which is important for consistent application semantics. When the network partitions, ISIS allows only one network component (the primary) to operate in the system. The members of disconnected components are blocked.
Reference: [9] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <year> 1991. </year>
Reference-contexts: Thus, using group communication mechanisms can lead to simpler and more efficient solutions for replication. One of the leading systems in the area of group communication is the ISIS system <ref> [7, 9] </ref>. The novelty of ISIS is in the formal and rigorous definition of the service interface. ISIS supplies group communication services that maintain the virtual synchrony [8] property, which is important for consistent application semantics.
Reference: [10] <author> T. D. Chandra and S. Toueg. </author> <title> Unreliable Failure Detectors for Asynchronous Systems. </title> <booktitle> In proc. 10th annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 325-340, </pages> <year> 1991. </year>
Reference-contexts: This way, the presented algorithm can run indefinitely without ordering even a single message. Consensus can be achieved, however, in an asynchronous system with external fault-detectors as described in <ref> [10] </ref>. If we strengthen the model of the underlying membership algorithm to work with external fault detectors, we can guarantee that a quorum of connected processors will eventually succeed in ordering messages.
Reference: [11] <author> F. Chin and K. Ramarao. </author> <title> Optimal Termination Protocols for Network Partitioning. </title> <booktitle> In ACM SIGACT-SIGMOD symp. on prin. of Database Systems, </booktitle> <pages> pages 25-35, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: If failures cascade, however, a majority of processors can become connected and still remain blocked. As it was proved that completely non-blocking termination is impossible to achieve, further research in this area concentrated on minimizing the number of blocked sites when partitions occur. Chin et al. <ref> [11] </ref> define Optimal Termination Protocols in terms of the average number of sites that are blocked when a partition occurs. The average is over all the possible partitions, and all the possible states in the protocol in which the partitions occurs.
Reference: [12] <author> S. B. Davidson, H. Garcia-Molina, and D. Skeen. </author> <title> Consistency in Partitioned Networks. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(3) </volume> <pages> 341-370, </pages> <month> Sept. </month> <year> 1985. </year>
Reference-contexts: In our approach, if the servers are deterministic state machines, transactions may become totally ordered and may be applied even if members that did not acknowledge them detach. A network partition never forces us to abort a transaction. Davidson et al. <ref> [12] </ref> survey approaches to replication in the face of partition failures. They classify partition processing strategies for replicated databases along two orthogonal lines. In the first dimension, they propose that consistency can be sacrificed to increase availability. Pessimistic strategies prevent inconsistencies by limiting availability.
Reference: [13] <author> D. Dolev, D. Malki, and H. R. </author> <title> Strong. An Asynchronous Membership Protocol that Tolerates Partitions. </title> <note> submitted for publication, </note> <year> 1994. </year>
Reference-contexts: The ISIS system is currently being redesigned and built from scratch. The new version of ISIS is called HORUS; it employs a membership algorithm based on the approach of the Transis membership <ref> [13] </ref>, that allows several network components to coexist in case of network partitions. The AMOEBA distributed operating system supplies group communication services [20]. These services support reliable totally ordered broadcast among process groups. The service is implemented on top of an unreliable network, taking advantage of hardware broadcast capabilities. <p> The environment is dynamic and processors can come up and may crash, may partition and re-merge. Transis maintains the membership [2] of connected processors automatically. The membership service of Transis supports the virtual synchrony property, and provides consistent semantics as described in <ref> [13] </ref> that are required for the algorithm we present here (see Section 4). Recent work by Moser et al. [24] defines a computation model that supports network partitions the Extended Virtual Synchrony (EVS ) Model. The model rigorously defines the semantics of message multicast in a partitionable network. <p> COReL uses Transis as a building block for reliable communication within connected network components 5 . COReL may be implemented using any transport layer that supplies similar services, such as Totem [5], Trans [23] and HORUS [35, 34] with the membership service of Transis <ref> [2, 13] </ref>. 4.1 Group Multicast and Membership The Transis environment supports multicast communication among groups of processors. The basic communication primitive is to post (send ) a message to a group. Transis delivers a posted message to all the members of the group, including the member that sent it. <p> Since it is well known that reaching agreement in asynchronous environments is impossible [17], this goal may not be achieved in any practical implementation of a membership protocol. Existing membership protocols circumvent this difficulty in different ways. The protocols in <ref> [2, 5, 13] </ref> use an inaccurate failure detector, based on timeout: when a processor is presumed faulty, it is taken out of the view. Messages from processors that are not part of the current view are discarded. A presumed failed machine can re-join the membership.
Reference: [14] <author> A. El Abbadi and N. Dani. </author> <title> A Dynamic Accessibility Protocol for Replicated Databases. </title> <journal> Data and Knowledge Engineering, </journal> (6):319-332, 1991. 
Reference-contexts: Another example is the primary site/copy algorithms that use the singleton quorum system, where a group is a quorum iff it contains the primary site. The concept of quorums can be further generalized, to allow more flexibility yet. El Abbadi et al. <ref> [14] </ref> suggest the dynamic voting paradigm for electing a primary component. This paradigm defines quorums adaptively: when a partition occurs, if a majority of the previous quorum is connected, a new and possibly smaller quorum is chosen.
Reference: [15] <author> A. El Abbadi and S. Toueg. </author> <title> Availability in Partitioned Replicated Databases. </title> <booktitle> In ACM SIGACT-SIGMOD Symp. on Prin. of Database Systems, </booktitle> <volume> number 5, </volume> <pages> pages 240-251, </pages> <address> Cambridge, MA, </address> <month> March </month> <year> 1986. </year>
Reference-contexts: In this approach each data-type defines operations on quorums for these operations. This design also supports dynamic change of the quorums. To reduce the communication, El Abbadi et al. suggested the Accessible Copies Algorithm [16], and its generalization described in <ref> [15] </ref>. These algorithms maintain a view of the system. Since perfect knowledge is not always possible, the processors maintain an approximate view of the network a virtual partition.
Reference: [16] <author> D. El Abbadi, A. Skeen and F. Christian. </author> <title> An Efficient Fault-Tolerant Algorithm for Replicated Data Management. </title> <booktitle> In ACM SIGACT-SIGMOD symp. on prin. of Database Systems, </booktitle> <pages> pages 215-229, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: In this approach each data-type defines operations on quorums for these operations. This design also supports dynamic change of the quorums. To reduce the communication, El Abbadi et al. suggested the Accessible Copies Algorithm <ref> [16] </ref>, and its generalization described in [15]. These algorithms maintain a view of the system. Since perfect knowledge is not always possible, the processors maintain an approximate view of the network a virtual partition.
Reference: [17] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: COReL may be implemented over any transport layer that supplies similar group membership and multicast services. It is well known that reaching agreement in asynchronous environments with a possibility of even one failure is impossible <ref> [17] </ref>. Every fault-tolerant algorithm that correctly solves the consensus problem in an asynchronous environment is bound to have an infinite run, in which no processor fails and no decision can be made. In the algorithm we present, this difficulty is encapsulated in the membership protocol of the underlying Transport Layer. <p> Since it is well known that reaching agreement in asynchronous environments is impossible <ref> [17] </ref>, this goal may not be achieved in any practical implementation of a membership protocol. Existing membership protocols circumvent this difficulty in different ways.
Reference: [18] <author> D. Gifford. </author> <title> Weighted Voting for Replicated Data. </title> <booktitle> In ACM SIGOPS Symp. on Operating Systems Principles, </booktitle> <month> December </month> <year> 1979. </year>
Reference-contexts: Updates are forwarded at recovery to regain consistency. The drawback of this approach is that if the primary site fails, all the other sites remain blocked. Other algorithms are based on quorums. The majority consensus approach [33] was generalized to quorum consensus with Gifford's <ref> [18] </ref> weighted voting algorithm. In this algorithm, each copy of a data item is assigned a number of votes. <p> An analysis of the availability of different quorum systems may be found in [26]. Many of the proposed algorithms for data replication use quorum systems of some kind, e.g. the majority consensus algorithm [33], generalized to quorum consensus with weighted 38 voting by Gifford <ref> [18] </ref>. Another example is the primary site/copy algorithms that use the singleton quorum system, where a group is a quorum iff it contains the primary site. The concept of quorums can be further generalized, to allow more flexibility yet.
Reference: [19] <author> M. Herlihy. </author> <title> A Quorum-Consensus Replication Method for Abstract Data Types. </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> 4(1) </volume> <pages> 32-53, </pages> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: The dissemination is per operation, and not per transaction, and as a result, the transaction is blocked after every operation, waiting for response. In our approach the entire transaction executes locally as one unit, without waiting for response on every operation. Herlihy <ref> [19] </ref> generalized the quorum consensus approach to data types with semantical operations other than read and write. In this approach each data-type defines operations on quorums for these operations. This design also supports dynamic change of the quorums.
Reference: [20] <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An Efficient Reliable Broadcast Protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The new version of ISIS is called HORUS; it employs a membership algorithm based on the approach of the Transis membership [13], that allows several network components to coexist in case of network partitions. The AMOEBA distributed operating system supplies group communication services <ref> [20] </ref>. These services support reliable totally ordered broadcast among process groups. The service is implemented on top of an unreliable network, taking advantage of hardware broadcast capabilities. The membership service of the AMOEBA system lets the user determine the minimal size with which the system can continue operating.
Reference: [21] <author> L. Lamport. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July 78. </month>
Reference-contexts: Messages are uniquely identified through a pair &lt; sender; counter &gt;. This pair will be referred to as the message id. This work deals with the ordering of messages and events. We define the causal partial order below, motivated by Lamport's <ref> [21] </ref> definition of order of events in a distributed system. <p> separates the network into several components. 14 * The same timestamp is attached to the message at all the processors that deliver it. * Different messages have different timestamps, even if they are delivered in different components. * The TS total order preserves the causal partial order, defined by Lamport <ref> [21] </ref>. The Transport Layer delivers messages at each site in timestamp order 6 . This implies that every two messages are delivered in the same order at all the processors that deliver both of them. <p> processor q knows of P M , and p recovers the state of q, then p knows of P M . 5.4 Invariants of the Algorithm Both red and green messages are delivered to the application in an order that is consistent with the causal partial order defined by Lamport <ref> [21] </ref>. The order of messages in MQ of each processor always preserves the causal partial order. Messages that are totally ordered are marked as green. Once a message is marked as green, its place in the total order may not change, and no new message may be ordered before it. <p> The event may include internal state changes as well as transmission of messages by p. A history of the protocol is a set of events, partially ordered by the causal partial order. In Section 3 we define the causal order of messages motivated by Lamport's <ref> [21] </ref> definition of the order of events in a distributed system.
Reference: [22] <author> D. Malki and R. V. Renesse. </author> <title> The Replication Service Layer. </title> <type> Private Communication. </type>
Reference-contexts: It supports consistent object replication over dynamic networks; the network may partition into several components 1 , and remerge. COReL is a high-level communication service layer, designed in the Transis environment. It supplies the services defined for the Replication Service layer in HORUS and Transis <ref> [22] </ref>. COReL may be implemented over any transport layer that supplies similar group membership and multicast services. It is well known that reaching agreement in asynchronous environments with a possibility of even one failure is impossible [17]. <p> It is explicitly assumed that multiple network components may exist in the system simultaneously. COReL is designed as a high level communication layer, supporting the services defined for the Replication Service layer in HORUS and Transis <ref> [22] </ref>. This layer is built on top of a transport layer that supplies reliable group multicast and membership services with the restrictions described in Section 4.
Reference: [23] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: If the user determines a majority threshold, the result is a primary-component membership service. On lower thresholds, the system may partition. AMOEBA does not provide any solution for merging operational partitions upon reconnection. 5 Melliar-Smith et al. suggest in <ref> [23] </ref> a protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol [27]. These protocols use the hardware broadcast capability for message dissemination and a combined system of positive and negative acknowledgments to detect message losses and recover them. <p> COReL uses Transis as a building block for reliable communication within connected network components 5 . COReL may be implemented using any transport layer that supplies similar services, such as Totem [5], Trans <ref> [23] </ref> and HORUS [35, 34] with the membership service of Transis [2, 13]. 4.1 Group Multicast and Membership The Transis environment supports multicast communication among groups of processors. The basic communication primitive is to post (send ) a message to a group.
Reference: [24] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended Virtual Synchrony. </title> <booktitle> In International Conference on Distributed Computing Systems, number 14th, </booktitle> <month> June </month> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Transis maintains the membership [2] of connected processors automatically. The membership service of Transis supports the virtual synchrony property, and provides consistent semantics as described in [13] that are required for the algorithm we present here (see Section 4). Recent work by Moser et al. <ref> [24] </ref> defines a computation model that supports network partitions the Extended Virtual Synchrony (EVS ) Model. The model rigorously defines the semantics of message multicast in a partitionable network. These semantics are valuable for developing applications that tolerate partitions, such as the algorithm presented here. <p> These properties are fulfilled in the Agreed Communication service of the Extended Virtual Synchrony (EVS) model <ref> [24] </ref>. Therefore, COReL may be implemented using any transport layer that supports EVS. In the Transis environment, three different protocols for Total Ordering of messages are implemented.
Reference: [25] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Asynchronous fault-tolerant total ordering algorithms. </title> <note> to appear in SIAM Journal of Computing. </note>
Reference-contexts: Similar ideas appear in the Psync protocol [27]. These protocols use the hardware broadcast capability for message dissemination and a combined system of positive and negative acknowledgments to detect message losses and recover them. Melliar-Smith et al. provide the Total protocol for total ordering of messages over Trans <ref> [25] </ref>. The Transis System [3] supports fast and reliable message multicast among currently connected processors, on top of an unreliable network. Transis utilizes the characteristics of available hardware, and recovers message losses using an algorithm similar to the Trans and Psync algorithms. <p> These algorithms do not recover the states of reconnected processors; but rather rely on their application to supply long-term services such as reconciliation of states. The only exception that we know of is the Total algorithm <ref> [25] </ref>. Total does not maintain a membership of the connected processors, and does not give up on processors that do not respond for a long time.
Reference: [26] <author> D. Peleg and A. Wool. </author> <title> The Availability of Quorum Systems. </title> <type> Technical Report CS93-17, </type> <institution> The Weizmann Institute of Science, Rehovot, Israel, </institution> <year> 1993. </year> <month> 48 </month>
Reference-contexts: Numerous quorum systems that fulfill these criteria were suggested. An analysis of the availability of different quorum systems may be found in <ref> [26] </ref>. 16 5 The Algorithm We present an algorithm for guaranteed delivery and total ordering of multicast messages. The algorithm is symmetric, all the participating processors run the same protocol. <p> Numerous quorum systems that fulfill these criteria were suggested. An analysis of the availability of different quorum systems may be found in <ref> [26] </ref>. Many of the proposed algorithms for data replication use quorum systems of some kind, e.g. the majority consensus algorithm [33], generalized to quorum consensus with weighted 38 voting by Gifford [18].
Reference: [27] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and Using Context Information in Interprocess Communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference-contexts: On lower thresholds, the system may partition. AMOEBA does not provide any solution for merging operational partitions upon reconnection. 5 Melliar-Smith et al. suggest in [23] a protocol for reliable broadcast communication over physical LANs, the Trans protocol. Similar ideas appear in the Psync protocol <ref> [27] </ref>. These protocols use the hardware broadcast capability for message dissemination and a combined system of positive and negative acknowledgments to detect message losses and recover them. Melliar-Smith et al. provide the Total protocol for total ordering of messages over Trans [25].
Reference: [28] <author> C. Pu and A. Leff. </author> <title> Replica Control in Distributed Systems: An Asynchronous Approach. </title> <booktitle> In ACM SIGMOD Symp. on Management of Data, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: COReL may also be used in the design of applications with a semantic approach, in this case the ordering feature of COReL is not needed, and COReL is used only for guaranteed-delivery message dissemination. Pu et al. <ref> [28] </ref> suggest an asynchronous approach to replica control; they introduce the notion of epsilon serializability (ESR). ESR suggests a tradeoff between availability and consistency, it allows inconsistent data to be seen, but requires that data will eventually converge to a consistent (1SR) state. <p> Several replica control protocols for maintaining ESR were suggested. Some of these limit the transaction model, e.g. using only commutative operations. 10 Another replica control protocol proposed in <ref> [28] </ref> is the ordered updates (ORDUP) protocol. The idea behind ORDUP is to execute transactions asynchronously, but in the same order at all replica. Update transactions are represented as messages and are disseminated to all the sites; they are applied to the database when they are totally ordered.
Reference: [29] <author> F. Schneider. </author> <title> Implementing Fault Tolerant Services Using the State Machine Approach: </title>
Reference-contexts: However, implementing an object with several copies residing on different sites may introduce inconsistencies between copies of the same object. Consistency may be achieved by applying updates in the same order at all the replica. We present an algorithm that implements replication using the State Machine approach <ref> [29] </ref>, overcoming network partitions and reconnects. Replica of the state machine receive all the update messages in the same order. If the communication allows, all the replica eventually reach the same state. The algorithm totally orders messages in the face of network partitions and site failures.
References-found: 29

