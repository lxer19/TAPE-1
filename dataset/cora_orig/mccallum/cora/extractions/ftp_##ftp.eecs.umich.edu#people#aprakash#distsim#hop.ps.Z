URL: ftp://ftp.eecs.umich.edu/people/aprakash/distsim/hop.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Email: email: aprakash@eecs.umich.edu  
Title: An Efficient Conditional-knowledge based Optimistic Simulation Scheme  
Author: Atul Prakash Rajalakshmi Subramanian 
Keyword: Index Terms: Distributed simulation, time-warp, discrete-event simulation, optimistic computations, distributed algorithms.  
Date: June 29, 1991  
Address: Ann Arbor, MI 48109-2122.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: We present in this paper a single-hop version of the conditional-knowledge approach to optimistic simulations [10]. The algorithm has potentially lower memory requirements than the conventional time-warp algorithm and uses a single negative message between processes for cancellation of multiple erroneously sent messages. In time-warp, each processed message is stored both on the output queue of a process and on the input queue of another process. In our algorithm, output queues are not needed because causal dependency between events is maintained by the receivers. A process upon rollback, simply sends a single negative message to its immediate output neighbors who then use the message to cancel appropriate events from their input queues. To permit correct cancellation at the receiver, each regular message carries only a single tuple describing the assumptions made in the generation of the message. Performance results indicate that the algorithm compares favorably with conventional time-warp. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The ISIS System Manual, </institution> <note> Version 2.0, </note> <month> April </month> <year> 1990. </year>
Reference-contexts: Each logical process in our model was implemented as a separate UNIX process for both time-warp and our algorithm. The processes were evenly spread among the machines. The ISIS <ref> [1] </ref> toolkit was used for communication calls. ISIS provides facilities for reliable communication and multicast messages. Because of limitations of ISIS, both implementations are currently using FIFO communication channels.
Reference: [2] <author> R.E. Bryant. </author> <title> Simulation on a distributed system. </title> <booktitle> COMPSAC, </booktitle> <year> 1979. </year>
Reference-contexts: 1 Introduction Discrete-event simulations are frequently needed in analyzing and predicting performance of systems. However simulations often take enormous amount 1 of time. Distributed discrete-event simulation is potentially a powerful ap-proach for getting speedups in discrete-event simulations <ref> [2, 4, 8] </ref> and is the focus of this paper. In distributed discrete-event simulation, the system being modeled, usually called the physical system, is viewed as consisting of a set of physical processes that interact with each other at various points in simulation time. <p> A sufficient condition for ensuring the correctness of a distributed simulation is that each LP processes messages received in non-decreasing time-stamp order <ref> [2, 4] </ref>. This ensures that causality constraints will be observed at each LP and therefore in the entire simulation. There are two broad classes of simulation algorithms to enforce the above policy on processing of messages: conservative and optimistic. <p> Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme <ref> [2, 4] </ref>, deadlock detection and recovery scheme [5], an hierarchical scheme [12], and conservative time windows [9]. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in [6].
Reference: [3] <author> J. Butler and V. </author> <title> Wallentine. Message bundling in time warp. In Simulation Work and Progress, </title> <booktitle> 1991 Western Simulation Multiconference, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: If the process had already processed one of the cancelled messages, process rolls back (sending new rollback-info message to its neighbors). Another scheme for replacing multiple anti-messages with a single negative message is using message bundling <ref> [3] </ref>. That scheme requires Output Queues and ordered delivery of messages whereas our scheme does not require Output Queues and, as we will see, can be easily generalized to systems with unordered delivery.
Reference: [4] <author> K.M. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE TSE, </journal> <year> 1979. </year>
Reference-contexts: 1 Introduction Discrete-event simulations are frequently needed in analyzing and predicting performance of systems. However simulations often take enormous amount 1 of time. Distributed discrete-event simulation is potentially a powerful ap-proach for getting speedups in discrete-event simulations <ref> [2, 4, 8] </ref> and is the focus of this paper. In distributed discrete-event simulation, the system being modeled, usually called the physical system, is viewed as consisting of a set of physical processes that interact with each other at various points in simulation time. <p> A sufficient condition for ensuring the correctness of a distributed simulation is that each LP processes messages received in non-decreasing time-stamp order <ref> [2, 4] </ref>. This ensures that causality constraints will be observed at each LP and therefore in the entire simulation. There are two broad classes of simulation algorithms to enforce the above policy on processing of messages: conservative and optimistic. <p> Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme <ref> [2, 4] </ref>, deadlock detection and recovery scheme [5], an hierarchical scheme [12], and conservative time windows [9]. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in [6].
Reference: [5] <author> K.M. Chandy and J. Misra. </author> <title> Asynchronous distributed simulation via a sequence of parallel computations. </title> <journal> CACM, </journal> <volume> 24(11) </volume> <pages> 198-206, </pages> <month> April </month> <year> 1981. </year>
Reference-contexts: Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme [2, 4], deadlock detection and recovery scheme <ref> [5] </ref>, an hierarchical scheme [12], and conservative time windows [9]. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation.
Reference: [6] <author> Richard M. Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Conservative algorithms include the null message scheme [2, 4], deadlock detection and recovery scheme [5], an hierarchical scheme [12], and conservative time windows [9]. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in <ref> [6] </ref>. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation.
Reference: [7] <author> Richard M. Fujimoto. </author> <title> Time warp on a shared memory multiprocessor. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> 6(3) </volume> <pages> 211-239, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: The 4*4 torus approximately models a closed queuing network. A fixed number of messages circulate through the network. Currently, the communication times are assumed to be 0. Each process has two outgoing channels. In our experiments we alternate between the outgoing channels while sending output messages. <ref> [7] </ref> argues that the above type of configuration is useful in testing parallel simulations, because it contains a reasonable amount of inherent parallelism, it is homogeneous and symmetric, and a good mapping from processes to processors can be found. <p> if an Output queue is not maintained, it is possible to implement a variant of lazy cancellation, with the receiver of a rollback-info message delaying cancellation and rollback until it starts receiving a different set of messages. 4.3 Shared memory architectures For shared memory architectures, we feel that direct cancellation <ref> [7] </ref> subsumes both SFilter and time-warp. In direct cancellation, causal dependency is explicitly maintained in a shared data structure, so the distinction between whether sender or the receiver maintains causal dependency is not there.
Reference: [8] <author> David R. Jefferson. </author> <title> Virtual time. </title> <journal> Trans. on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Discrete-event simulations are frequently needed in analyzing and predicting performance of systems. However simulations often take enormous amount 1 of time. Distributed discrete-event simulation is potentially a powerful ap-proach for getting speedups in discrete-event simulations <ref> [2, 4, 8] </ref> and is the focus of this paper. In distributed discrete-event simulation, the system being modeled, usually called the physical system, is viewed as consisting of a set of physical processes that interact with each other at various points in simulation time. <p> Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme [2, 4], deadlock detection and recovery scheme [5], an hierarchical scheme [12], and conservative time windows [9]. The most well known optimistic algorithm is time-warp <ref> [8] </ref>. A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation. In the time-warp method based on the Virtual Time paradigm [8], as well as in variations of time-warp [13, 14], a causality error <p> The most well known optimistic algorithm is time-warp <ref> [8] </ref>. A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation. In the time-warp method based on the Virtual Time paradigm [8], as well as in variations of time-warp [13, 14], a causality error occurs whenever a message is received that contains a time-stamp smaller than that of the last processed message. The event message causing the rollback is called a straggler.
Reference: [9] <author> B.D. Lubachevsky. </author> <title> Efficient distributed event-driven simulations of multiple-loop networks. </title> <journal> Communications of the ACM, </journal> <volume> 32 </volume> <pages> 111-123, </pages> <month> Jan-uary </month> <year> 1989. </year>
Reference-contexts: Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme [2, 4], deadlock detection and recovery scheme [5], an hierarchical scheme [12], and conservative time windows <ref> [9] </ref>. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation.
Reference: [10] <author> A. Prakash and R. Subramanian. </author> <title> Conditional knowledge approach to optimistic distributed simulations. </title> <type> Technical Report CSE-TR-86-91, </type> <institution> Department of EECS, U. of Michigan, </institution> <address> Ann Arbor, </address> <year> 1991. </year>
Reference-contexts: Each process also maintains an Input Queue containing accepted messages. Upon receiving an anti-message, the process cancels the corresponding message from its Input Queue (if such a message is found) and rolls back as necessary. In <ref> [10, 11] </ref>, we proposed an alternative protocol, called Filter, based on conditional knowledge for optimistic simulations. This protocol helped speed up cancellation of erroneous computations at the expense of maintaining some additional state. <p> This assumptions will simplify the description of our protocol. In Section 4, we discuss how both these assumptions can be removed, if needed. As described in <ref> [10] </ref>, we assume that each process maintains a monotonically increasing counter, called State Counter, that is incremented every time a message is processed or local simulation clock advanced. The state counter always increases despite rollbacks; it can be thought of as modeling progress of real time at the process. <p> A message with an assumption tuple hP; s a ; t a i is said to conflict with a rollback-info tuple hP; s r ; t r i if and only if s a &lt; s r and t a &gt; t r <ref> [10, 11] </ref>. For example, an assumption tuple hP; 10; 40i conflicts a rollback-info tuple hP; 14; 35i. The above assumption tuple says that the message assumes that P will not rollback to a virtual time lower than 40 after its state counter advances past 10. <p> Q can use that information to discard the corresponding rollback-info message if it is in the buffer. 10 When Q receives a message from P , it should simply cancel the message before processing if it conflicts with a buffered rollback-info message from P (called filtering in Filter <ref> [10, 11] </ref>). This checking for conflict is likely to be of comparable cost to checking against anti-messages that is required in time-warp.
Reference: [11] <author> A. Prakash and R. Subramanian. </author> <title> Filter: An algorithm for reducing cascaded rollbacks in optimistic distributed simulations. </title> <booktitle> In Proc. of the 24th Annual Simulation Symposium, 1991 Simulation Multiconference, </booktitle> <address> New Orleans, </address> <pages> pages 123-132, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Each process also maintains an Input Queue containing accepted messages. Upon receiving an anti-message, the process cancels the corresponding message from its Input Queue (if such a message is found) and rolls back as necessary. In <ref> [10, 11] </ref>, we proposed an alternative protocol, called Filter, based on conditional knowledge for optimistic simulations. This protocol helped speed up cancellation of erroneous computations at the expense of maintaining some additional state. <p> A message with an assumption tuple hP; s a ; t a i is said to conflict with a rollback-info tuple hP; s r ; t r i if and only if s a &lt; s r and t a &gt; t r <ref> [10, 11] </ref>. For example, an assumption tuple hP; 10; 40i conflicts a rollback-info tuple hP; 14; 35i. The above assumption tuple says that the message assumes that P will not rollback to a virtual time lower than 40 after its state counter advances past 10. <p> Q can use that information to discard the corresponding rollback-info message if it is in the buffer. 10 When Q receives a message from P , it should simply cancel the message before processing if it conflicts with a buffered rollback-info message from P (called filtering in Filter <ref> [10, 11] </ref>). This checking for conflict is likely to be of comparable cost to checking against anti-messages that is required in time-warp.
Reference: [12] <author> Atul Prakash and C.V. Ramamoorthy. </author> <title> Hierarchical distributed simulations. </title> <booktitle> Eighth International Conference on Distributed Computing, </booktitle> <address> San Jose, </address> <pages> pages 341-348, </pages> <year> 1988. </year> <month> 19 </month>
Reference-contexts: Optimistic algorithms potentially allow much more concurrency but at the expense of rollbacks. Conservative algorithms include the null message scheme [2, 4], deadlock detection and recovery scheme [5], an hierarchical scheme <ref> [12] </ref>, and conservative time windows [9]. The most well known optimistic algorithm is time-warp [8]. A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation.
Reference: [13] <author> P. Reiher, S. Bellenot, and D. Jefferson. </author> <title> Temporal decomposition of simulations under the time warp operating system. </title> <booktitle> Proc. of the SCS Multiconference on Advances in Parallel and Distributed Simulation, </booktitle> <volume> 23(1) </volume> <pages> 47-54, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation. In the time-warp method based on the Virtual Time paradigm [8], as well as in variations of time-warp <ref> [13, 14] </ref>, a causality error occurs whenever a message is received that contains a time-stamp smaller than that of the last processed message. The event message causing the rollback is called a straggler.
Reference: [14] <author> L.M. Sokol, </author> <title> D.P. Briscoe, and A.P. Wieland. MTW: A strategy for scheduling discrete simulation events for concurrent execution. </title> <booktitle> Proceedings of the SCS Multiconference on Distributed Simulation, </booktitle> <volume> 19(3) </volume> <pages> 34-42, </pages> <month> July </month> <year> 1988. </year> <month> 20 </month>
Reference-contexts: A survey of many of the distributed simulation algorithms can be found in [6]. In this paper, our focus is on optimistic techniques for distributed discrete-event simulation. In the time-warp method based on the Virtual Time paradigm [8], as well as in variations of time-warp <ref> [13, 14] </ref>, a causality error occurs whenever a message is received that contains a time-stamp smaller than that of the last processed message. The event message causing the rollback is called a straggler.
References-found: 14

