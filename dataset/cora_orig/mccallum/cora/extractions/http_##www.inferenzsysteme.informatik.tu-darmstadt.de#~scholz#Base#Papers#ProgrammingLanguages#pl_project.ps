URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~scholz/Base/Papers/ProgrammingLanguages/pl_project.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~scholz/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Comparison between C++ and Eiffel  
Author: Richard J. Michetti and Ulrich W. Scholz 
Date: August 21, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [Ege92] <author> Ege, R. K., </author> <title> "Programming an Object-Oriented Environment", </title> <publisher> Academic Press, Inc., </publisher> <editor> 1992 [Gun94] ed. Gunter, C. A. and Mitchel, J. C., </editor> <booktitle> "Theoretical Aspects of Object-Oriented Programming", </booktitle> <publisher> The MIT Press, </publisher> <year> 1994 </year>
Reference: [Hen94] <author> Henderson, R. and Zorn, B., </author> <title> "A Comparison of Object-oriented Programming in Four Modern Languages", </title> <journal> Software | Practice and Experience, </journal> <volume> Vol. 24 (11), </volume> <pages> pages 1077-1095, </pages> <month> November </month> <year> 1994 </year>
Reference-contexts: Effort has to be made to find the few different designs possible that are good. The purpose of this project is to reduce the decision space by comparing existing languages. 2 Related Work Many papers have been published which analyze and compare object-oriented languages. <ref> [Hen94] </ref> concentrates on implementation questions. Our work will concentrate on usefulness and completeness of languages. We will discuss environment questions only if they are related to the concept of the language, as in Smalltalk. [Sch91] includes no practical experience.
Reference: [Kor90] <author> Korson, T. and McGregor, J. D., </author> <title> "Understanding Object-Oriented: A Unifying Paradigm", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 33, No. 9, </volume> <pages> pages 49-60, </pages> <month> September </month> <year> 1990 </year>
Reference: [Mas89] <author> Masini, G., Napoli, A., Colnet, D., Leonard, D., and Tombre K., </author> <title> "Object-Oriented Languages", </title> <journal> The A.P.I.C. Series, </journal> <volume> No. 34, </volume> <year> 1989 </year>
Reference: [Mey88] <author> Meyer, B., </author> <title> "Object-oriented Software Construction", </title> <publisher> Prentice Hall international series in Computer Science, </publisher> <year> 1988 </year>
Reference-contexts: Going back to these classes to remove the clashes would be a catastrophe | the very opposite of the open-closed principle, which says one should leave modules undisturbed when reusing them for new extensions", <ref> [Mey88] </ref>, page 247 6 The bold is taken from the original 5 This principle is also valid for access control. Nearly all controlling or manipulating has to be done in the new class.
Reference: [Mey92] <author> Meyer, B., </author> <title> "Eiffel: </title> <booktitle> the Language", Prectice Hall object-oriented series, </booktitle> <year> 1992 </year>
Reference-contexts: If the returned value is an object, it will be global for all objects which hold this once function. 5.5 Discussion As one general design goal, Bertrand Meyer "Also notable is the set of ideas that have not been retained. To design is to renounce" 6 , <ref> [Mey92] </ref>, page viii and Bjarne Stroustrup "Simplicity was an important design criterion for C++.", [Str91], page 3 mention simplicity. For access control and resolving naming problems, they follow different strategies. Eiffel was designed to ease code reuse by requiring the least amount of changes in existing code as possible.
Reference: [Poh89] <author> Pohl, I., </author> <title> C++ for C programmers", </title> <publisher> Benjamin/Cummings Pub., </publisher> <year> 1989 </year>
Reference: [Sch91] <author> Schmidt, H. W. and Omohundro, S. M., </author> <title> "CLOS, Eiffel, and Sather: A Comparison", </title> <type> ICSI, </type> <institution> TR-91-047, </institution> <month> September </month> <year> 1991 </year>
Reference-contexts: Our work will concentrate on usefulness and completeness of languages. We will discuss environment questions only if they are related to the concept of the language, as in Smalltalk. <ref> [Sch91] </ref> includes no practical experience. This project will provide an analysis of a practical comparison. [Gun94] offers a theoretical comparison between object-oriented semantic models by using CLU and Smalltalk for his discussion.
Reference: [Ses92] <author> Sessions, R., </author> <title> "Class construction in C and C++: object-oriented programming fundamentals", </title> <publisher> Prentice Hall, </publisher> <year> 1992 </year>
Reference: [Sny86] <author> A. Snyder, </author> <title> "Encapsulation and Inheritance in Object-Oriented Programming Languages", </title> <booktitle> OOPSLA '86 Proceedings, </booktitle> <pages> page 38-45, </pages> <month> September </month> <year> 1986 </year>
Reference-contexts: C++ has powerful features to restrict access to existing code. The trade-off is that code reuse can force programmers to change it. Eiffel minimizes such patching successfully. The drawback is that everything can be accessed by descendants. This might cause unexpected errors, especially by manipulating instance variables <ref> [Sny86] </ref>. Yet there are other implications and trade-offs with the chosen strategies. The large variety of member access control in C++ makes it difficult to determine the actual status of a feature at a certain point in the program.
Reference: [Str88] <author> Stroustrup, B., </author> <title> "What is object-oriented programming?", </title> <journal> IEEE Software, </journal> <pages> pages 10-22, </pages> <month> May </month> <year> 1988 </year>
Reference: [Str91] <author> Stroustrup, B., </author> <title> "The C++ programming language", </title> <publisher> Addison Wesley, </publisher> <year> 1991 </year>
Reference-contexts: In this case, the others are no longer reachable. Another way to discard an implementation is to undefine it. The name and the signature are converted to a deferred one. 2 <ref> [Str91] </ref>, page 205. 3 For both constructs together, Eiffel uses the word feature. 4 In Eiffel 3.0. 5 And pre and post condition. These are used to define behavior and for runtime checking. <p> To design is to renounce" 6 , [Mey92], page viii and Bjarne Stroustrup "Simplicity was an important design criterion for C++.", <ref> [Str91] </ref>, page 3 mention simplicity. For access control and resolving naming problems, they follow different strategies. Eiffel was designed to ease code reuse by requiring the least amount of changes in existing code as possible. <p> C++ was designed to be a better C. Encapsulation mechanisms were designed to make accidental errors while adding code as seldom as possible. Stroustrup writes ". . . user can always cheat anyway. Language-level protection mechanisms are pro tection against accident, not against fraud.", <ref> [Str91] </ref>, page 423 but ". . . restricting language features with the intend of eliminating programmer errors is as best dangerous.", [Str91], page 8 The methods of C++ are restricting the usage of features. This is done for descendants and clients separately. <p> Stroustrup writes ". . . user can always cheat anyway. Language-level protection mechanisms are pro tection against accident, not against fraud.", <ref> [Str91] </ref>, page 423 but ". . . restricting language features with the intend of eliminating programmer errors is as best dangerous.", [Str91], page 8 The methods of C++ are restricting the usage of features. This is done for descendants and clients separately. Access that breaks through boundaries of name scope restrictions can be granted. This has to be done at the location the requested construct is defined.
Reference: [Wil90] <author> Wileden, J. C., Clarke L. A., and Wolf, A. L., </author> <title> "A Comparative Evaluation of Object Definition Techniques for Large Prototype Systems", </title> <journal> ACM Transactions on Programming Languages and System, </journal> <volume> Vol. 12, No. 4, </volume> <pages> pages 670-699, </pages> <month> September </month> <year> 1990 </year> <month> 8 </month>
References-found: 13

