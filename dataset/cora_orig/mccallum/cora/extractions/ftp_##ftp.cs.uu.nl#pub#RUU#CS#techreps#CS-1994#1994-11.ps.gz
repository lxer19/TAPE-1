URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1994/1994-11.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Tel. 31 30 531454  
Title: Domino Treewidth  
Author: Hans L. Bodlaender Joost Engelfriet 
Address: Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  
Date: February 1994  
Pubnum: UU-CS-1994-11  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. A. Abrahamson, R. G. Downey, and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness IV: On completeness for W [P ] and PSPACE analogues. </title> <type> Technical Report DCS-216-IR, </type> <institution> Department of Computer Science, University of Victoria, Victoria, B.C., Canada, </institution> <year> 1993. </year>
Reference-contexts: It might be possible to improve the running time somewhat. 5 Hardness results In this section, we show that the domino treewidth problem is W [t]-hard for all t 2 N, where the notion of W [t]-hardness is taken from the work of Downey and Fellows (see <ref> [11, 12, 13, 1] </ref>). Also, we prove the problem to be NP-complete. Both results follow from the same transformation from Longest Common Subsequence. To be precise, we establish W [t]-hardness for the following problem: 20 Domino Treewidth Instance: Graph G = (V; E), integer k. Parameter: k.
Reference: [2] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embed-dings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth., </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: Our algorithm has a similar structure as the O (n k+2 ) algorithm from Arnborg et al <ref> [2] </ref> to recognize graphs with treewidth at most k. The additional technicalities are involved. For R V , G [R] = (R; ffv; wg 2 E j v; w 2 Rg) denotes the subgraph of G = (V; E), induced by R.
Reference: [3] <author> H. L. Bodlaender. </author> <title> Some classes of graphs with bounded treewidth. </title> <journal> Bulletin of the EATCS, </journal> <volume> 36 </volume> <pages> 116-126, </pages> <year> 1988. </year>
Reference-contexts: The dotted lines indicate a domino tree-decomposition of width 3. Note that domino tree-decompositions are easy to visualize. One easily observes that G has treewidth 2: G is outerplanar and all outerplanar graphs have treewidth 2 (see e.g., <ref> [3] </ref>). A well-known lemma for tree-decompositions is the following. Lemma 1 Let (fX i j i 2 Ig; T = (I; F )) be a tree-decomposition of G = (V; E). Let v 0 ; v 1 ; : : : ; v r be a path in G.
Reference: [4] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <booktitle> In Proceedings of the 25th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 226-234, </pages> <address> New York, 1993. </address> <publisher> ACM Press. </publisher>
Reference-contexts: The first part of the result now follows directly from Theorem 9. One can find a tree-decomposition of G with width k and with O (jV j) nodes 12 in O (jV j) time <ref> [4] </ref>. It is easy to transform this tree-decomposition into one with the same width and of rank 2 in O (jV j) time.
Reference: [5] <author> H. L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <journal> Acta Cybernetica, </journal> <volume> 11 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction A topic of much recent research in algorithmic graph theory is the treewidth of graphs. Applications of this research range from VLSI theory to expert systems (and many more). (See e.g., <ref> [5] </ref> for an overview.) In this paper, we introduce a special variant of treewidth: domino treewidth.
Reference: [6] <author> H. L. Bodlaender. </author> <title> Dynamic algorithms for graphs with treewidth 2. </title> <note> To appear in proceedings WG'93, </note> <year> 1994. </year>
Reference-contexts: Unfortunately, the large constants involved make this scheme impractical. Other approaches for dynamic algorithms on graphs with bounded treewidth, which may be more practical, can be found e.g. in <ref> [6, 10] </ref>.
Reference: [7] <author> H. L. Bodlaender, R. G. Downey, M. R. Fellows, and H. T. Wareham. </author> <title> The parameterized complexity of sequence alignment and consensus (extended abstract). To appear in: </title> <booktitle> proceedings Conference on Pattern Matching '94, </booktitle> <year> 1993. </year>
Reference-contexts: Question: Does there exist a string in fl of length at least m, that is a subsequence of each string s 1 ; : : : ; s r ? Very recently, it has been shown that Longest Common Subsequence is W [t]-hard for all t 2 N <ref> [7, 8] </ref>. Theorem 20 For all t 2 N, Domino Treewidth is W [t]-hard. Proof: We give a transformation from Longest Common Subsequence. Let an instance , s 1 ; : : : ; s r , m of Longest Common Subsequence be given. <p> p (lr 2 +1)+1 contains at most 4 5 (k + 1) + 2r (2r + 4) = 4 5 (k + 1) vertices. 2 The theorem now follows from the transformation, given above, and the fact that Longest Common Subsequence is W [t] hard for all t 2 N <ref> [7, 8] </ref>. 2 Theorem 22 Domino Treewidth is NP-complete. Proof: Membership in NP is trivial. Observe that the transformation, given in the proof of Theorem 20, is a polynomial time transformation from the NP-complete Longest Common Subsequence problem to Domino Treewidth.
Reference: [8] <author> H. L. Bodlaender, M. R. Fellows, and M. Hallett. </author> <title> Beyond NP-completeness for problems of bounded width: Hardness for the W hierarchy. </title> <type> Manuscript. </type> <note> To appear in: proceedings STOC'94, 1994. 27 </note>
Reference-contexts: Question: Does there exist a string in fl of length at least m, that is a subsequence of each string s 1 ; : : : ; s r ? Very recently, it has been shown that Longest Common Subsequence is W [t]-hard for all t 2 N <ref> [7, 8] </ref>. Theorem 20 For all t 2 N, Domino Treewidth is W [t]-hard. Proof: We give a transformation from Longest Common Subsequence. Let an instance , s 1 ; : : : ; s r , m of Longest Common Subsequence be given. <p> p (lr 2 +1)+1 contains at most 4 5 (k + 1) + 2r (2r + 4) = 4 5 (k + 1) vertices. 2 The theorem now follows from the transformation, given above, and the fact that Longest Common Subsequence is W [t] hard for all t 2 N <ref> [7, 8] </ref>. 2 Theorem 22 Domino Treewidth is NP-complete. Proof: Membership in NP is trivial. Observe that the transformation, given in the proof of Theorem 20, is a polynomial time transformation from the NP-complete Longest Common Subsequence problem to Domino Treewidth.
Reference: [9] <author> H. L. Bodlaender and R. H. Mohring. </author> <title> The pathwidth and treewidth of cographs. </title> <journal> SIAM J. Disc. Meth., </journal> <volume> 6 </volume> <pages> 181-188, </pages> <year> 1993. </year>
Reference-contexts: We conclude that X j contains at least two vertices from the path v 0 ; : : : ; v r . 2 3 Another well-known lemma is the following (for a short proof, see e.g. <ref> [9] </ref>). Lemma 3 Let (fX i j i 2 Ig; T = (I; F )) be a tree-decomposition of G = (V; E). Suppose W V forms a clique in G.
Reference: [10] <author> R. F. Cohen, S. Sairam, R. Tamassia, and J. S. Vitter. </author> <title> Dynamic algorithms for optimization problems in bounded tree-width graphs. </title> <booktitle> In Proceedings of the 3rd Conference on Integer Programming and Combinatorial Optimization, </booktitle> <year> 1993. </year>
Reference-contexts: Unfortunately, the large constants involved make this scheme impractical. Other approaches for dynamic algorithms on graphs with bounded treewidth, which may be more practical, can be found e.g. in <ref> [6, 10] </ref>.
Reference: [11] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness I: Basic results. </title> <type> Manuscript, </type> <year> 1991. </year> <note> To appear in SIAM J. Comput. </note>
Reference-contexts: It might be possible to improve the running time somewhat. 5 Hardness results In this section, we show that the domino treewidth problem is W [t]-hard for all t 2 N, where the notion of W [t]-hardness is taken from the work of Downey and Fellows (see <ref> [11, 12, 13, 1] </ref>). Also, we prove the problem to be NP-complete. Both results follow from the same transformation from Longest Common Subsequence. To be precise, we establish W [t]-hardness for the following problem: 20 Domino Treewidth Instance: Graph G = (V; E), integer k. Parameter: k.
Reference: [12] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness II: On completeness for W [1]. </title> <type> Manuscript, </type> <year> 1991. </year> <note> To appear in Theoretical Computer Science, Ser. A. </note>
Reference-contexts: It might be possible to improve the running time somewhat. 5 Hardness results In this section, we show that the domino treewidth problem is W [t]-hard for all t 2 N, where the notion of W [t]-hardness is taken from the work of Downey and Fellows (see <ref> [11, 12, 13, 1] </ref>). Also, we prove the problem to be NP-complete. Both results follow from the same transformation from Longest Common Subsequence. To be precise, we establish W [t]-hardness for the following problem: 20 Domino Treewidth Instance: Graph G = (V; E), integer k. Parameter: k.
Reference: [13] <author> R. G. Downey and M. R. Fellows. </author> <title> Fixed-parameter tractability and completeness III: Some structural aspects of the W hierarchy. </title> <type> Technical Report DCS-191-IR, </type> <institution> Department of Computer Science, University of Victoria, Victo-ria, B.C., Canada, </institution> <year> 1992. </year>
Reference-contexts: It might be possible to improve the running time somewhat. 5 Hardness results In this section, we show that the domino treewidth problem is W [t]-hard for all t 2 N, where the notion of W [t]-hardness is taken from the work of Downey and Fellows (see <ref> [11, 12, 13, 1] </ref>). Also, we prove the problem to be NP-complete. Both results follow from the same transformation from Longest Common Subsequence. To be precise, we establish W [t]-hardness for the following problem: 20 Domino Treewidth Instance: Graph G = (V; E), integer k. Parameter: k.
Reference: [14] <author> J. Engelfriet, L. M. Heyker, and G. Leih. </author> <title> Context-free graph languages of bounded degree are generated by Apex graph grammars. </title> <type> Technical Report 91-16, </type> <institution> Department of Computer Science, Leiden University, Leiden, the Nether-lands, </institution> <year> 1991. </year> <note> To appear in Acta Informatica. </note>
Reference-contexts: A result like this was first shown in the context of graph grammars in <ref> [14] </ref>. The proof of this result is rather lengthy, and will be given with the help of several lemmas. First, we introduce some notions, needed for the proof. For technical reasons, we assume in this section that the trees T taken from tree-decompositions are rooted.
Reference: [15] <author> E. Horowitz and S. Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Pitman, </publisher> <address> London, </address> <year> 1978. </year>
Reference-contexts: minimum value, as described in Proposition 14 above, when given the values W k (w j ) for all children of v, corresponds to an instance of a variant of the knapsack problem, and can be solved by a standard dynamic programming algorithm in O (p k) time. (See e.g., <ref> [15] </ref>, Chapter 5.) So, W k (v) can be computed in O (deg (v)k) time, given the values W k (w j ) for all children of v.
Reference: [16] <author> B. Reed. </author> <title> Finding approximate separators and computing tree-width quickly. </title> <booktitle> In Proceedings of the 24th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 221-228, </pages> <year> 1992. </year>
Reference-contexts: Proof: Using the algorithm of <ref> [16] </ref>, one obtains a tree-decomposition of G with width 6 (k + 1), and with the height of the tree O (log jV j).
Reference: [17] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year>
Reference-contexts: For trees, the domino treewidth can be computed in O (n 2 log n) time. These results are shown in Section 4. 2 Definitions and preliminary results The notion of treewidth has been introduced by Robertson and Seymour <ref> [17] </ref>. Definition.
Reference: [18] <author> D. Seese. </author> <title> Tree-partite graphs and the complexity of algorithms. </title> <editor> In L. Budach, editor, </editor> <booktitle> Proc. 1985 Int. Conf. on Fundamentals of Computation Theory, Lecture Notes in Computer Science 199, </booktitle> <pages> pages 412-421, </pages> <address> Berlin, 1985. </address> <publisher> Springer Verlag. </publisher> <pages> 28 </pages>
Reference-contexts: There exist constants k; d 2 N, such that every graph in G has treewidth at most k and maximum degree at most d. There is also a connection with the notion of strong treewidth, as introduced by Seese <ref> [18] </ref>. Definition. <p> Note that in general, a strong tree-decomposition of a graph G, is not a tree-decomposition of G. Note also that every tree has strong treewidth 1 (take fX i j i 2 Ig to consist of all singleton vertex sets). As observed in <ref> [18] </ref>, every graph of strong treewidth k is of treewidth 2k 1. However, there is a set of graphs of treewidth 2, that is of unbounded strong treewidth. As an example, consider the set of all paths with one additional vertex that is adjacent to all vertices of the path.
References-found: 18

