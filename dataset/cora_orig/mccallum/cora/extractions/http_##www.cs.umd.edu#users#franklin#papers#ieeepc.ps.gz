URL: http://www.cs.umd.edu/users/franklin/papers/ieeepc.ps.gz
Refering-URL: http://www.cs.umd.edu/projects/bdisk/papers.html
Root-URL: 
Title: Dissemination-based Data Delivery Using Broadcast Disks  
Author: Swarup Acharya Michael Franklin Stanley Zdonik 
Abstract: Mobile computers and wireless networks are emerging technologies which promise to make ubiquitous computing a reality. One challenge that must be met in order to truly realize this potential is that of providing mobile clients with ubiquitous access to data. Mobile clients may often be disconnected from stationary server machines or may have only a low-bandwidth channel for sending messages to servers. Such an environment raises difficulties for supporting data-intensive applications for three reasons: 1) the inability to predict, with 100% accuracy, the future data needs of many applications, 2) limits on storage capacities of mobile machines, and 3) the need to provide clients with new or updated data values. One (and perhaps the only) way to address these challenges is to provide stationary server machines with a relatively high-bandwidth channel over which to broadcast data to a client population in anticipation of the need for that data at the clients. Such a system can be said to be asymmetric due to the disparity in the transmission capacities of clients and servers. We have proposed a mechanism called Broadcast Disks to provide database access in this environment as well as in other asymmetric systems such as cable and direct broadcast satellite television networks and information distribution services. The Broadcast Disk approach enables the creation of an arbitrarily fine-grained memory hierarchy on the broadcast medium. This hierarchy, combined with the inversion of the traditional relationship between clients and servers that occurs in a broadcast-based system raises fundamental new issues for client cache management and data prefetching. In this paper we present a brief overview of asymmetric environments and describe our approaches to broadcast disk organization, client cache management, and prefetching. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha95] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> "Broadcast Disks: Data Management for Asymmetric Communications Environments", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Jose, CA, </address> <month> May, </month> <year> 1995. </year>
Reference: [Acha96] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Prefetching from a Broadcast Disk" 12th International Conference on Data Engineering, </title> <address> New Orleans, LA, </address> <month> February, </month> <year> 1996, </year> <note> to appear. </note>
Reference-contexts: The height of the items to be packed is the amount of time that each item should spend in the cache. 4.2 A Simple Prefetching Heuristic In our work to date <ref> [Acha96] </ref>, we have focused on a much simpler prefetching heuristic called PT , which is shown to have similar behavior to the tag-team approach without the need for extensive analysis as required by the generalized tag-team. <p> This effect is similar to what the tag team caching approach aims to achieve. In fact, in our simulation studies of PT <ref> [Acha96] </ref>, we observed that PT was able to achieve the performance of the tag team example described in the previous section. 16 which the client access 1000 using a Zipf distribution. <p> In contrast to LIX , however, the queues in AP T are split based on different access probability regions, rather than based on broadcast frequency. The PT and APT approaches are described and analyzed in detail in <ref> [Acha96] </ref>. 5 The Read/Write Case An important extension of the work described in the previous sections is to address cases in which the broadcast can change. The ability to do dynamic broadcasts is essential for applications like ATIS, stock market monitors etc. which deal with inherently volatile data.
Reference: [Akyu92] <author> S. Akyurek, K. Salem, </author> <title> "Placing Replicated Data to Reduce Seek Delays" Proc. </title> <booktitle> USENIX File System Conference, </booktitle> <month> May </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: Finally, the tradeoff between replication to support access to hot data while making cold data more expensive to access has been investigated for magnetic disks <ref> [Akyu92] </ref>. 7 Conclusions The Broadcast Disks project is investigating the use of data broadcast and client storage resources to provide improved performance, scalability, and availability in an increasingly prevalent class of networked applications, namely, those with asymmetric communications capabilities.
Reference: [Amma85] <author> M. Ammar, J. Wong, </author> <title> "The Design of Teletext Broadcast Cycles", Perf. Evaluation, </title> <month> 5 </month> <year> (1985). </year>
Reference-contexts: Ammar used queueing models and analysis to study related issues in the context of teletex systems <ref> [Amma85] </ref>. Due to the technology that was assumed in this work the focus was on the properties of broadcast programs in th absence of significant client storage resources.
Reference: [Anto93] <author> C. Antonelli, P. Honeyman, </author> <title> "Integrating Mass Storage and File Systems", </title> <booktitle> Proc. 12th IEEE Symposium on Mass Storage Systems, </booktitle> <year> 1993. </year>
Reference-contexts: The need for cost-based caching and page replacement has been recognized in other domains in which there is a wide variation in the cost of obtaining data from different levels of the storage hierarchy. For example, <ref> [Anto93] </ref> describes the need for considering "cost of acquisition" for page replacement in deep-store file systems involving tertiary mass storage.
Reference: [Arch86] <author> J. Archibald, J. Baer, </author> <title> "Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model", </title> <journal> ACM TOCS, </journal> <volume> 4(4), </volume> <month> November, </month> <year> 1986. </year>
Reference: [Barb94] <author> D. Barbara, T. Imielinski, "Sleepers and Workaholics: </author> <title> Caching Strategies in Mobile Environments", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: The Datacycle project addressed this issue by tying the notion of consistency to the period of the broadcast. All data read from the same broadcast period could be assumed to be mutually consistent. Other work in the area, such as that of Barbara and Imielinski <ref> [Barb94] </ref>, has taken the approach of providing currency for individual items, but not providing mutual consistency guarantees across items. 6 Related Work While no previous work has addressed the integration of multilevel broadcast disks with the related cache management and prefetching techniques addressed here, several projects in mobile databases and other
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. </author> <title> Weinrib, </title> <journal> "The Datacycle Architecture" CACM 35,(12), </journal> <month> December, </month> <year> 1992. </year>
Reference-contexts: Due to the technology that was assumed in this work the focus was on the properties of broadcast programs in th absence of significant client storage resources. The notion of using a repetitive broadcast medium for database storage and query processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom 18 VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Care91] <author> M. Carey, M. Franklin, M. Livny, E. Shekita, </author> <title> "Data Caching Tradeoffs in Client-Server DBMS Architectures", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Denver, </address> <month> June, </month> <year> 1991. </year>
Reference: [Fran92] <author> M. Franklin, M. Carey, M. Livny, </author> <title> "Global Memory Management in Client-Server DBMS Architectures", </title> <booktitle> Proc. 18th VLDB Conf., </booktitle> <address> Vancouver, B.C., Canada, </address> <month> August, </month> <year> 1992. </year>
Reference-contexts: This issue is also addressed for client-server database systems in which a global memory hierarchy is created by allowing clients to obtain data from other clients that have that data cached <ref> [Fran92] </ref>. In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called "Disk-Directed I/O" has been proposed for High Performance Computing applications [Kotz94].
Reference: [Gray87] <author> J. Gray, F. Putzolu, </author> <title> "The Five Minute Rule for Trading Memory for Disc Accesses and the 10 Byte Rule for Trading Memory for CPU Time" Proc. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference: [Gray93] <author> J. Gray, A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: If values can change at arbitrary points in the broadcast, how can the client guarantee that two values that are read from the broadcast are, in fact, mutually consistent? Traditional database notions of consistency, such as serializable transactions (e.g., as described in <ref> [Gray93] </ref>) are not likely to be efficiently implementable in the broadcast environment. This opens the question of determining useful models of consistency for broadcast-delivered data and the need for mechanisms to implement them.
Reference: [Gray94] <author> J. Gray, P. Sundaresan, S. Englert, K. Baclawski, P. Weinberger, </author> <title> "Quickly Generating Billion-Record Synthetic Databases" Proc. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference: [Giff90] <author> D. Gifford, </author> <title> "Polychannel Systems for Mass Digital Communication", </title> <journal> Communications of the ACM, </journal> <volume> 33,(2), </volume> <month> February, </month> <year> 1990. </year>
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: Due to the technology that was assumed in this work the focus was on the properties of broadcast programs in th absence of significant client storage resources. The notion of using a repetitive broadcast medium for database storage and query processing was investigated in the Datacycle project at Bellcore <ref> [Herm87, Bowe92] </ref>. Datacycle was intended to exploit high bandwidth, optical communication technology and employed custom 18 VLSI data filters for performing associative searches and continuous queries on the broadcast data.
Reference: [Howa88] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, M. West, </author> <title> "Scale and Performance in a Distributed File System", </title> <journal> ACM TOCS, </journal> <volume> 6(1), </volume> <month> Feb., </month> <year> 1988. </year>
Reference: [Imie94a] <author> T. Imielinski, B. Badrinath, </author> <title> "Mobile Wireless Computing: Challenges in Data Manage--ment", </title> <journal> Communications of the ACM, </journal> <volume> Vol. 37, No. 10, </volume> <month> October, </month> <year> 1994. </year>
Reference: [Imie94b] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> "Energy Efficient Indexing on Air", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: We intend to investigate issues raised by allowing such upstream communication through low-bandwidth cellular links as part of our ongoing work. More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk. <p> More recently, the mobile computing group at Rutgers has investigated techniques for indexing broadcast data <ref> [Imie94b] </ref>. The main thrust of this work has been to investigate ways to reduce power consumption at the clients in order to preserve battery life. Some of the indexing techniques described in [Imie94b] involve the interleaving of index information with data, which forms a restricted type of multilevel disk. However, this work did not investigate the notion of replicating the actual data to support non-uniform access patterns and did not investigate the impact of caching.
Reference: [Katz94] <author> R. Katz, </author> <title> "Adaption and Mobility in Wireless Information Systems", </title> <journal> IEEE Personal Communications, 1st Quarter, </journal> <year> 1994. </year>
Reference: [Kotz94] <author> D. Kotz, </author> <title> "Disk-directed I/O for MIMD Multiprocessors", </title> <booktitle> 1st Symposium on OS Design and Implementation, USENIX, </booktitle> <address> Monterey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: In this work, server page replacement policies are modified to favor pages that are not cached at clients, as they must be obtained from disk, which is more expensive. Recently, a technique called "Disk-Directed I/O" has been proposed for High Performance Computing applications <ref> [Kotz94] </ref>. Disk-Directed I/O sends large requests to I/O devices and allows the devices to fulfill the requests in a piecemeal fashion in an order that improves the disk bandwidth.
Reference: [Kist92] <author> J. Kistler, M. Satyanarayanan, </author> <title> "Disconnected Operation in Coda File System", </title> <journal> ACM TOCS, </journal> <volume> 10(1), </volume> <month> February, </month> <year> 1992. </year>
Reference: [Shek94] <author> S. Shekhar, D. Liu, </author> <title> "Genesis and Advanced Traveler Information Systems (ATIS): Killer Applications for Mobile Computing", </title> <institution> MOBIDATA Wkshp, Rutgers Univ., NJ, </institution> <year> 1994. </year>
Reference: [Wang91] <author> Y. Wang, L. Rowe, </author> <title> "Cache Consistency and Concurrency Control in a Client/Server DBMS Architecture", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Denver, </address> <month> June, </month> <year> 1991. </year>
Reference: [Wilk90] <author> W. Wilkinson, M. Neimat, </author> <title> "Maintaining Consistency of Client Cached Data", </title> <booktitle> Proc. 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <month> August, </month> <year> 1990. </year>

References-found: 24

