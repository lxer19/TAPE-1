URL: http://www.cs.concordia.ca/~faculty/gregb/home/PS/z-use-cases.ps.gz
Refering-URL: http://www.cs.concordia.ca/~faculty/gregb/home/paper.html
Root-URL: http://www.cs.concordia.ca
Email: Email: fgregb,grogonog@cs.concordia.ca  Email: khendek@ece.concordia.ca  
Title: A Z Specification of Use Cases  
Author: Greg Butler Peter Grogono Ferhat Khendek 
Address: Montreal, Quebec, H3G 1M8 Canada  Montreal, Quebec, H3G 1M8 Canada  
Affiliation: Department of Computer Science Concordia University  Dept of Electrical and Computer Engineering Concordia University  
Abstract: We seek to clarify the notion of use case and the related terminology by means of a specification written in Z.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alistair Cockburn, </author> <title> Structuring use cases with goals, Report on Object Analysis and Design, </title> <note> 1997 to appear. http://members.aol.com/acockburn/papers/usecases.htm </note>
Reference-contexts: Moreover, different authors have applied the object-oriented paradigm to use cases themselves, in particular via the aggregation, delegation, and inheritance relationships, and presented such concepts as abstract use cases, mini-use cases, services, and the extends, built-on and uses relationships between use cases [4, 5, 8]. Cockburn <ref> [1] </ref> acknowledges 18 different definitions of use cases! 1 This has created a great deal of confusion and a need for clear definitions. <p> They help to factor out commonality. 4.4 Atomicity The principle of "wholeness" is similar to that of atomicity suggested by the word "transaction" used in a later definition of Jacobson [6]. This is further developed by Cockburn <ref> [1] </ref> who associates a use case with a goal to be achieved, and documents alternate paths to the goal as well as exceptions when the goal is unachievable. 6 5 Conclusion While there are a multitude of concepts related to use cases that we have not specified, we have provided a
Reference: [2] <author> Martin Griss, </author> <title> The reuse-driven software engineering business, </title> <note> Object Magazine (De-cember 1996) 67-70. </note>
Reference: [3] <author> C.A.R. Hoare, </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: We resort to two sources as guides in resolving the fundamental associations: firstly, Hoare's work on traces <ref> [3] </ref> required only the associations of subsequence and interleaving on traces; secondly, the Unified Modeling Language [7] falls back on inclusion as the basic "generalization" association between use cases with extends and uses as stereotypes of generalization.
Reference: [4] <author> Ivar Jacobson, </author> <title> Object oriented development in an industrial environment, </title> <booktitle> OOPSLA'87 Proceedings, SIGPLAN Notices 22, </booktitle> <month> 12 (December </month> <year> 1987) </year> <month> 183-191. </month>
Reference-contexts: Moreover, different authors have applied the object-oriented paradigm to use cases themselves, in particular via the aggregation, delegation, and inheritance relationships, and presented such concepts as abstract use cases, mini-use cases, services, and the extends, built-on and uses relationships between use cases <ref> [4, 5, 8] </ref>. Cockburn [1] acknowledges 18 different definitions of use cases! 1 This has created a great deal of confusion and a need for clear definitions. <p> A transaction is performed by either the user or the system and is a response initiated by a stimulus. When no more stimuli can be generated, all the transactions will finally ebb away. The use case is ended and a new use case can be initiated." <ref> [4] </ref> There are two ways to model this view of "wholeness", namely 1. define a property of the system state being `idle', and require that it is satisfied by the initial and final state of the system for a use case; or 2. define a property for a set of use <p> of the system internals, so that an interaction to the system my either be directed to a subsystem directly, or cause several interactions between subsystems. 4.3 Granularity This dimension of decomposition and aggregation of use cases conflicts with the wholeness principles presented above, yet this conflict has existed since Jacobson <ref> [4] </ref> talked of a "service" as a way to modularize use cases. Sigfried [8] calls these mini-use cases that capture one well-defined set of ways of using a system. The purpose of a mini-use case is to describe a single service that the system can deliver directly to the user.
Reference: [5] <author> Ivar Jacobson, Magnus Christorson, Patrik Jonsson, Gunnar Overgaard, </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1992. </year>
Reference-contexts: Moreover, different authors have applied the object-oriented paradigm to use cases themselves, in particular via the aggregation, delegation, and inheritance relationships, and presented such concepts as abstract use cases, mini-use cases, services, and the extends, built-on and uses relationships between use cases <ref> [4, 5, 8] </ref>. Cockburn [1] acknowledges 18 different definitions of use cases! 1 This has created a great deal of confusion and a need for clear definitions.
Reference: [6] <author> Ivar Jacobson, M. Ericsson, A. Jacobson, </author> <title> The Object Advantage: Business Process Reengineering with Object Technology, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1995. </year>
Reference-contexts: different ways. 4 Deliver-Value Principle This paradigm of "wholeness" states that the completion of the use case delivers something of value to the initiator: "A use case is a sequence of transactions in a system whose task is to yield a measurable value to an individual actor of the system." <ref> [6] </ref> In terms of specifying the concept of a use case, this view suggests a minor constraint that perhaps the system should be the "sender" of the last signal, which could be the "meaningful" piece of information, or an indication that a "meaningful" task has been completed. <p> They help to factor out commonality. 4.4 Atomicity The principle of "wholeness" is similar to that of atomicity suggested by the word "transaction" used in a later definition of Jacobson <ref> [6] </ref>.
Reference: [7] <author> Rational Software Corporation, </author> <title> Unified Modeling Language, version 1.0: Glossary, Notation Guide, Semantics, </title> <month> January </month> <year> 1997. </year>
Reference-contexts: A use case describes * one basic or typical dialogue, and * zero or more alternative or atypical dialogues. This is not depicted in the specification. By the definition of the Unified Modeling Language <ref> [7] </ref>, we have actually specified a use case class. Each dialogue d in scenarios | together with the corresponding initiator and actors | is a use case instance. 3 Basic Specification of Associations between Use Cases Throughout the literature the associations between use cases have been very problematic. <p> We resort to two sources as guides in resolving the fundamental associations: firstly, Hoare's work on traces [3] required only the associations of subsequence and interleaving on traces; secondly, the Unified Modeling Language <ref> [7] </ref> falls back on inclusion as the basic "generalization" association between use cases with extends and uses as stereotypes of generalization. <p> This is the transparency dimension. A requirements use case captures the user requirements and treats the system as a black box. This is the traditional view of use cases <ref> [7] </ref>. 5 An analysis use case involves the shared boundary of the system and its environment (as proposed by Zave and Jackson [10]). The system is considered a composition of entities, where the entities are artefacts or concepts that are meaningful to the environment or users.
Reference: [8] <author> Stefan Sigfried, </author> <title> Understanding Object-Oriented Software Engineering, </title> <publisher> IEEE Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1996. </year>
Reference-contexts: Moreover, different authors have applied the object-oriented paradigm to use cases themselves, in particular via the aggregation, delegation, and inheritance relationships, and presented such concepts as abstract use cases, mini-use cases, services, and the extends, built-on and uses relationships between use cases <ref> [4, 5, 8] </ref>. Cockburn [1] acknowledges 18 different definitions of use cases! 1 This has created a great deal of confusion and a need for clear definitions. <p> Sigfried <ref> [8] </ref> calls these mini-use cases that capture one well-defined set of ways of using a system. The purpose of a mini-use case is to describe a single service that the system can deliver directly to the user.
Reference: [9] <author> J.M. Spivey, </author> <title> The Z Notation: A Reference Manual, </title> <booktitle> Prentice-Hall, second edition, </booktitle> <year> 1992. </year>
Reference-contexts: Just what is a "use case"? In this paper we seek to answer that question, by providing a specification of a use case and its related concepts using the Z formalism <ref> [9] </ref>. 2 Basic Specification of a Use Case A use case captures how a group of external entities, called actors, make use of the system under consideration.
Reference: [10] <author> Pamela Zave and Michael Jackson, </author> <title> Four dark corners of requirements engineering, </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6, </volume> <month> 1 </month> <year> (1997) </year> <month> 1-30. 7 </month>
Reference-contexts: A requirements use case captures the user requirements and treats the system as a black box. This is the traditional view of use cases [7]. 5 An analysis use case involves the shared boundary of the system and its environment (as proposed by Zave and Jackson <ref> [10] </ref>). The system is considered a composition of entities, where the entities are artefacts or concepts that are meaningful to the environment or users. In an analysis use case interactions occur between actors and components of the shared boundary of the system and the environment. <p> In keeping with the views of Zave and Jackson <ref> [10] </ref>, the pre-condition should be expressed in terms of the environment state rather than the state of the system. In the other direction, several use cases may be "collected" together under the umbrella of a single abstract use case, which is simply a set of use case classes.
References-found: 10

