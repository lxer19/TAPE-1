URL: http://ptolemy.eecs.berkeley.edu/papers/97/preliminaryStarcharts/starcharts.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/preliminaryStarcharts/
Root-URL: 
Title: A PRELIMINARY STUDY OF HIERARCHICAL FINITE STATE MACHINES WITH MULTIPLE CONCURRENCY MODELS  
Author: by Alain Girault, Bilung Lee, and Edward A. Lee 
Date: August 17, 1997  
Address: BERKELEY, CALIFORNIA 94720  94720  
Affiliation: DEPARTMENT OF ELECTRICAL ENGINEERING AND COMPUTER SCIENCE UNIVERSITY OF CALIFORNIA  ELECTRONICS RESEARCH LABORATORY College of Engineering University of California, Berkeley  
Pubnum: Memorandum No. UCB/ERL M97/57  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Benveniste and G. Berry, </author> <title> The Synchronous Approach to Reactive and Real-Time Systems, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 79, No. 9, </volume> <year> 1991, </year> <pages> pp. 1270-1282. </pages>
Reference-contexts: More sophisticated concurrent models of computation include CSP (communicating sequential processes) [17], the pi calculus [25], dataow [14], process networks [19], discrete events [9], and the synchronous/reactive model <ref> [1] </ref>. These models are more sophisticated in the sense that complex concurrent systems can be more easily designed, and the designs yield better to analysis. <p> Thus, combining FSMs with concurrent models of computation is an attractive and increasingly popular approach to design. Since Harel introduced that Statecharts model [16] in 1987, a number of variations have been explored [28]. The Argos language [24], for example, combines FSMs with a synchronous/ reactive concurrency model <ref> [1] </ref>. The codesign finite state machines (CFSM) model [11] combines FSMs with a discrete-event concurrency model. Harel dramatically increased the usability of FSMs through two innovations [16]. First, FMSs can be hierarchically combined. <p> However, apparent circular dependencies prove to be common in practical systems, primarily because of the use of hierarchy, so the model had to be refined. The Argos language [24] and others refine the model by applying the synchronous/reactive (SR) principle <ref> [1] </ref>, which resolves apparent circular dependencies by seeking at each instant a fixed point, a globally consistent behavior. The SR principle, first developed by Berry in the Esterel language [4], gives a well-defined and determinate semantics to simultaneous concurrent actions. <p> Lee A Preliminary Study of Hierarchical Finite State Machines with Multiple Concurrency Models lem highlighted above with zero-delay feedback loops by adopting a fixed-point semantics. With these two innovations, we get the synchronous/reactive (SR) model of computation <ref> [1] </ref>. SR is synchronous in the same sense as synchronous digital circuits. Time delays in computations become irrelevant, so a useful conceptual gimmick is to assume that computations take zero time.
Reference: [2] <author> A. Benveniste and P. Le Guernic, </author> <title> Hybrid Dynamical Systems Theory and the SIGNAL Lan guage, </title> <journal> IEEE Tr. on Automatic Control, </journal> <volume> Vol. 35, No. 5, </volume> <pages> pp. 525-546, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: For a non-homogeneous actor (i.e., an actor where more than one token of each input/output can be consumed or produced), we syntactically differentiate each token of a given input or output by concatenating its occurrence to its name. Borrowing notation from the Signal language <ref> [2] </ref>, a denotes the most recent (last) token consumed from input a, a$1 denotes the next most recent token consumed, and a$2 the next most recent. Consider the example in figure 10, focusing for now on levels (d) and (e).
Reference: [3] <author> R. Bernhard, G Berry, F. Boussinot, R. de Simone, G. Gonthier, A. Ressouche, J. P. Rigault, J. M. Tanzi, </author> <title> Programming a Reex Game in Esterel V3, Rapport de Recherche No. </title> <type> 07/91, </type> <institution> INRIA, Sophia-Antipolis, France, </institution> <month> June, </month> <year> 1991. </year>
Reference-contexts: To get a modular software architecture, the object-oriented principle of polymorphism is used, where the default behavior of a model of computation is strict, but specific models can override this behavior. 5. Example A commonly used example for control-intensive software environments is the reex game <ref> [3] </ref>. Our version of the reex game is a two-player game (to introduce more concurrency). The inputs to the system are coin, ready, go, stop and time. All but the last are user inputs, while the last simply counts off time.
Reference: [4] <author> G. Berry and G. Gonthier, </author> <title> The Esterel synchronous programming language: Design, semantics, </title> <booktitle> implementation, Science of Computer Programming, </booktitle> <volume> 19(2) </volume> <pages> 87-152, </pages> <year> 1992. </year>
Reference-contexts: The Argos language [24] and others refine the model by applying the synchronous/reactive (SR) principle [1], which resolves apparent circular dependencies by seeking at each instant a fixed point, a globally consistent behavior. The SR principle, first developed by Berry in the Esterel language <ref> [4] </ref>, gives a well-defined and determinate semantics to simultaneous concurrent actions. Perhaps because of Harels first use of simultaneous transitions, simultaneity has dominated; most concurrent hierarchical FSM languages use some variant of simultaneous transitions. A few, however, use more loosely coupled FSMs. <p> However, since two actions can both emit an event with different values, the syntax permits conicting definitions of the output. In Esterel, a function can be specified to combine the con-icting the definitions <ref> [4] </ref>. For example, for two reals, the values might be added. We prefer to consider this an error condition. Thus, for a valued (determinate) FSM, no two triggered transitions should emit the same output signal. In the example of figure 5, the hierarchical FSM has only two levels. <p> The least fixed point is taken to be the semantics of the network of functions. This basic approach was pioneered by Scott [27]. Many practical implementations of the SR model have been constructed, starting with the Esterel language <ref> [4] </ref>. Finding the fixed point is straightforward, in principle. The functions are simply evaluated in any order until we converge to a fixed point. Choosing a good order for evaluating the functions can greatly impact performance, obviously. Edwards gives techniques for choosing [15]. Functions are allowed to change between ticks.
Reference: [5] <author> S. S. Bhattacharyya, P. K. Murthy and E. A. Lee, </author> <title> Software Synthesis from Dataow Graphs, </title> <publisher> Klu wer Academic Press, </publisher> <address> Norwood, Mass, </address> <year> 1996. </year>
Reference-contexts: Fortunately, the balance equations can be solved in time that is only linear in the number of arcs plus the number of actors, and a schedule can be found in time that is linear in the number of firings and the number of edges <ref> [5] </ref>, so it may not be impractical to compute schedules dynamically between iterations. We are currently exploring these implementation alternatives. Although the number of type signature combinations can be exponential in the number of actors, it is finite.
Reference: [6] <author> G. Bilsen, M. Engels, R. </author> <title> Lauwereins, </title> <journal> and J.A. Peperstraete, Cyclo-Static Dataow, IEEE Transactions on Signal Processing, </journal> <volume> 44(2) </volume> <pages> 397-408, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: When an HDF scheduler fires such an actor, it knows which type signature is in effect. But type signatures are allowed to change between firings. This model of computation is related to cyclo-static dataow <ref> [6] </ref>. In CSDF, an actor cycles through a finite list of type signatures. In HDF, however, the order in which type signatures are used is not cyclic, nor even predictable. a (3) x (1) FIGURE 11.
Reference: [7] <author> J. T. Buck, </author> <title> Scheduling Dynamic Dataow Graphs with Bounded Memory Using the Token Flow Model, </title> <type> Tech. Report UCB/ERL 93/69, Ph.D. Dissertation, </type> <institution> Dept. of EECS, University of Califor nia, Berkeley, </institution> <address> CA 94720, </address> <year> 1993. </year>
Reference-contexts: Unfortunately, for general dataow graphs, it is undecidable whether a finite iteration exists <ref> [7] </ref>. Moreover, there may not be a unique minimum set of actor firings. To get around these problems, we specialize further to a subclass of dataow called synchronous dataow (SDF) [21], for which these problems evaporate. <p> In this case, there are two possible type signatures for the FSM subsystem, and hence it cannot be embedded within an SDF graph. One option is to embed the FSM system within a dynamic dataow (DDF) or boolean dataow (BDF) graph <ref> [7] </ref>. In DDF and BDF, the number of tokens consumed and produced need not be constant for each actor. However, the price we pay for this approach is high. In DDF and BDF, many questions 1. <p> Lee A Preliminary Study of Hierarchical Finite State Machines with Multiple Concurrency Models about the system are undecidable, such as whether it will deadlock and whether the memory required by the FIFO queues is bounded <ref> [7] </ref>. Moreover, it seems that this choice of semantics provides more generality than we really need for this application. So we invent a new model of computation that we call heterochronous dataow (HDF). <p> This enhancement by itself is sufficient to make the models Turing complete (they can implement a universal Turing machine) <ref> [7] </ref>. At a fundamental level, these models are therefore much more expressive than SDF or HDF. The price we a a$1 Alain Girault, Bilung Lee, and Edward A.
Reference: [8] <author> J. T. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, Ptolemy: </author> <title> A Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> Int. Journal of Computer Simulation, </journal> <note> special issue on Alain Girault, </note> <author> Bilung Lee, and Edward A. </author> <note> Lee 41 of 42 </note>
Reference-contexts: Systems can truly be built up from modular components that are separately designed, and each subsystem can be designed using the models of computation best suited to it. We describe an implementation of *charts in the Ptolemy environment <ref> [8] </ref>, where hierarchical FSMs can be combined with dataow, discrete-event, and synchronous/reactive concurrency models. We begin by adapting a standard notation for FSMs, which is compact and efficient when considering an FSM in isolation, to get a notation more suitable for studying compositions of FSMs. <p> Implementation An experimental implementation of several of the combinations discussed here has been imple Alain Girault, Bilung Lee, and Edward A. Lee 37 of 42 A Preliminary Study of Hierarchical Finite State Machines with Multiple Concurrency Models mented in the Ptolemy software environment <ref> [8] </ref>. The SDF, DE, and SR models were already present in the software, and minimal modifications were required to interface them to FSM.
References-found: 8

