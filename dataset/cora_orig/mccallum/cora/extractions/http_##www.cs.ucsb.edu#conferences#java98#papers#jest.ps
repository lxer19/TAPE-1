URL: http://www.cs.ucsb.edu/conferences/java98/papers/jest.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Title: Algebraic Java classes for numerical optimization  
Author: Matthias Schwab and Joel Schroeder 
Abstract: SUMMARY Our software, Jest, comprises a general and extendible library for numerical optimization for science and engineering, Jam, and a particular extension of that framework for seismic image processing, Jag. Jest successfully separates optimization and application software without imposing limitations on an application's vector representation, on an application's operator implementation, or on a solver's ability to manipulate vectors and operators. To ensure the compatibility of solver and application, Jest includes a set of simple interfaces that define method invocations for the fundamental mathematical objects of numerical optimization, such as vectors, vector spaces, operators, and solvers. Jest's solvers are implemented in terms of these mathematical objects and consequently possess the generality of the original abstract mathematical algorithm. Jest's seismic imaging library, Jag, demonstrates that Jest incurs no restrictions and little or no programming overhead for scientific or engineering software packages. While generally implemented in Java, Jest links some computationally intensive applications to C-routines to improve performance. Once Jest is integrated in our laboratory's electronic book, our research becomes reproducible by the push of a button in any world-wide-web browser. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Claerbout, J. F., </author> <year> 1994, </year> <title> Applications of Three-Dimensional Filtering: Stanford Exploration Project. </title>
Reference-contexts: A MISSING DATA EXAMPLE Jest is designed for complex, large-scale problems. To hint at the problems we had in mind when designing Jest, Figure 3 shows the result of a medium-sized missing data estimation <ref> (Claerbout, 1994) </ref>. The estimation almost exclusively involves tools used in the deconvolution example above. The panel on the left shows bathymetry (water depth) measurements x k above the mid-ocean ridge in the Pacific. The measurements were taken by a side-scan sonar hanging off the bottom of a ship.
Reference: <author> Dickie, G. A., </author> <year> 1997, </year> <note> About idvi: http://www.geom.umn.edu/java/idvi. </note>
Reference: <author> Gill, P. E., Murray, W., and Wright, M. H., </author> <year> 1981, </year> <title> Practical optimization: </title> <publisher> Academic Press. </publisher>
Reference: <author> Gockenbach, M. S., and Symes, W. W., </author> <year> 1996, </year> <title> The Hilbert Class Library: a library of abstract C++ classes for optimization and inversion: Computers and Mathematics with Applications, </title> <type> 32. </type>
Reference-contexts: Nichols and Dye redesigned CLOP's class hierarchy to express abstract objects of vector algebra. Independently Gockenbach and Symes of the Rice Inversion Project developed a similar C++ library. In 1994, the efforts of the two laboratories merged into the Hilbert Class Library (HCL). Gockenbach published HCL <ref> (Gockenbach and Symes, 1996) </ref> and since maintains a detailed web-page (Gockenbach, 1996). Jest began as a Java implementation of HCL. We found Java much easier to use and learn than C++: an important fact for traditional Fortran or C programmers. <p> Independently Gockenbach and Symes of the Rice Inversion Project developed a similar C++ library. In 1994, the efforts of the two laboratories merged into the Hilbert Class Library (HCL). Gockenbach published HCL (Gockenbach and Symes, 1996) and since maintains a detailed web-page <ref> (Gockenbach, 1996) </ref>. Jest began as a Java implementation of HCL. We found Java much easier to use and learn than C++: an important fact for traditional Fortran or C programmers. Fall 1997, Jacob and Karrenbach (1997) implemented a multi-threaded velocity inversion based on Jest and processed a seismic field example.
Reference: <author> Gockenbach, M., </author> <year> 1996, </year> <title> The Hilbert Class Library: A library of abstract classes for C++ optimization and inversion: </title> <address> http://www.trip.caam.rice.edu/. </address>
Reference-contexts: Nichols and Dye redesigned CLOP's class hierarchy to express abstract objects of vector algebra. Independently Gockenbach and Symes of the Rice Inversion Project developed a similar C++ library. In 1994, the efforts of the two laboratories merged into the Hilbert Class Library (HCL). Gockenbach published HCL <ref> (Gockenbach and Symes, 1996) </ref> and since maintains a detailed web-page (Gockenbach, 1996). Jest began as a Java implementation of HCL. We found Java much easier to use and learn than C++: an important fact for traditional Fortran or C programmers. <p> Independently Gockenbach and Symes of the Rice Inversion Project developed a similar C++ library. In 1994, the efforts of the two laboratories merged into the Hilbert Class Library (HCL). Gockenbach published HCL (Gockenbach and Symes, 1996) and since maintains a detailed web-page <ref> (Gockenbach, 1996) </ref>. Jest began as a Java implementation of HCL. We found Java much easier to use and learn than C++: an important fact for traditional Fortran or C programmers. Fall 1997, Jacob and Karrenbach (1997) implemented a multi-threaded velocity inversion based on Jest and processed a seismic field example.
Reference: <author> Jacob, M., Philippsen, M., and Karrenbach, M., </author> <year> 1997, </year> <title> Large-scale parallel geophysical algorithms in java: A feasibility study: </title> <address> http://wwwipd.ira.uka.de/jacob. </address>
Reference: <author> More, J., Garbow, B., and Hillstrom, K., </author> <year> 1980, </year> <title> User guide for min-pack: </title> <type> Technical Report ANL-80-74, </type> <institution> Argonne National Laboratory, Argonne, IL. </institution>
Reference-contexts: Obviously, Jest is not the first library that attempts to separate solver and application software. Examples of well-known high-quality optimization libraries are MINOS (Murthag and Saunders, 1983 revised 1995) and MINPACK <ref> (More et al., 1980) </ref>. However, these libraries are defined in procedural languages and impose severe restrictions on the application software. To the contrary, Jest does not require any particular implementation of any of its objects. It only requires that an object's mathematical operations are implemented somehow.
Reference: <author> Murthag, B. A., and Saunders, M. A., </author> <note> 1983 (revised 1995), Minos 5.4 user's guide: Report SOL 83-20R, </note> <institution> Systems Optimization Laboratory, Stanford University, </institution> <address> CA. </address>
Reference-contexts: Obviously, Jest is not the first library that attempts to separate solver and application software. Examples of well-known high-quality optimization libraries are MINOS <ref> (Murthag and Saunders, 1983 revised 1995) </ref> and MINPACK (More et al., 1980). However, these libraries are defined in procedural languages and impose severe restrictions on the application software. To the contrary, Jest does not require any particular implementation of any of its objects.
Reference: <author> Schwab, M., and Claerbout, J. F., </author> <year> 1996, </year> <title> SEP's reproducible electronic documents: </title> <address> http://sepwww.stanford.edu/redoc. </address>
Reference-contexts: We hope that its object orientation will permit programming complex but reusable processing algorithms and data structures easily. Since Jest is implemented in Java, we hope that soon we will routinely publish reproducible research documents <ref> (Schwab and Claer-bout, 1996) </ref> on the Web. Reproducible Web documents could change the way researchers publish and collaborate since they make computational research tools and results as accessible as a button click (Figure 1). Obviously, Jest is not the first library that attempts to separate solver and application software.
References-found: 9

