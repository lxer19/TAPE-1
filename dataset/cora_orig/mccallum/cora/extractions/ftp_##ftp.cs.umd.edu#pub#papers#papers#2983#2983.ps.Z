URL: ftp://ftp.cs.umd.edu/pub/papers/papers/2983/2983.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Selective Multicast Communication in Distributed Systems  
Author: Chen Chen 
Date: October 5, 1992  
Affiliation: Department of Computer Science University of Maryland  
Abstract: Most current techniques for communications between the software components of a distributed application are limited to one-to-one communication; there is little support for one-to-many or many-to-many communications. We have developed a framework for selective multicast, a mechanism supporting one-to-many and many-to-many communications, where components of an application can communicate with each other. After discussing the overall requirements for a selective multicast environment, we describe our approach to selective multicast. An environment to support selective multicast in distributed system is then described in detail. We demonstrate selective multicast mechanism by providing an application of connecting Unix tools using selective multi cast.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Eric C. Cooper. </author> <title> Programming Language Support for Multicast Communication in Distributed System, </title> <journal> IEEE Transactions on Computers, </journal> <month> July </month> <year> 1990. </year>
Reference-contexts: We benefited from Cooper's research <ref> [1] </ref> on programming language support for multicast communication, which discusses essential and desirable properties of a language construct for multicast communication. Reiss's Field environment [5] connects tools with selective broadcasting, allowing the Unix philosophy of letting independent tools cooperate through simple conventions.
Reference: [2] <author> James M. Purtilo and Christine R. Hofmeister. </author> <title> Dynamic Reconfigurations of Distributed Programs, </title> <booktitle> The 11th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1991. </year>
Reference: [3] <author> James M Purtilo. </author> <title> The Polylith Software Bus. </title>
Reference-contexts: Similarly node4 is interested in messages from node1, node2 and node3. We will illustrate the application shown in Figure 5 in terms of an existing software interconnection system POLYLITH <ref> [3] </ref>. It represents a software organization where interfacing decisions can be encapsulated separately, using a sof tware toolbus. In order to run this example on different hosts in a heterogeneous environment, users need to provide a description of the application's modular structure, in terms of a module interconnection language (MIL). <p> cost in searching the internal table and enqueuing a copy of the message for each module interested in it, which is dependent on the number of modules interested in it. 6 Related Work Our approach is based upon the software bus abstraction as currently implemented in the POLYLITH interconnection system <ref> [3] </ref>. We benefited from Cooper's research [1] on programming language support for multicast communication, which discusses essential and desirable properties of a language construct for multicast communication. Reiss's Field environment [5] connects tools with selective broadcasting, allowing the Unix philosophy of letting independent tools cooperate through simple conventions.
Reference: [4] <author> James M. Purtilo, Christine R. Hofmeister and Joanne Atlee. </author> <title> Writing Distributed Programs in Polylith, </title> <institution> Dept of Computer Science, University of Maryland, CS-TR-2575, </institution> <month> December </month> <year> 1990. </year>
Reference: [5] <author> Steven P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Environment, </title> <journal> IEEE Transaction on Computers, </journal> <month> July </month> <year> 1990. </year>
Reference-contexts: We benefited from Cooper's research [1] on programming language support for multicast communication, which discusses essential and desirable properties of a language construct for multicast communication. Reiss's Field environment <ref> [5] </ref> connects tools with selective broadcasting, allowing the Unix philosophy of letting independent tools cooperate through simple conventions.
Reference: [6] <author> Dan Heller. </author> <title> XView Programming Manual, </title> <month> March </month> <year> 1992. </year> <month> 20 </month>
Reference-contexts: 4 Application: Connecting Unix Tools Using Selective Mul ticast In distributed systems in order to allow modules to be run on one machine and display on another, some network protocol must be designed to support communication between modules, one of which is called server, and the others are called clients <ref> [6] </ref>. This protocol is also used by the client to send requests to the server for information; it is used by the server to send user input or replies to requests back to the client. POLYLITH can be viewed as a client-server based software interconnection system.
References-found: 6

