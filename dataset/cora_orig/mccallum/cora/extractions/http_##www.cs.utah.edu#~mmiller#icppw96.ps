URL: http://www.cs.utah.edu/~mmiller/icppw96.ps
Refering-URL: http://www.cs.utah.edu/~mmiller/
Root-URL: 
Email: freed,elford,tara,esmirni,slammg@cs.uiuc.edu  
Title: The Next Frontier: Interactive and Closed Loop Performance Steering  
Author: Daniel A. Reed Christopher L. Elford Tara M. Madhyastha Evgenia Smirni Stephen E. Lamm 
Address: Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: Software for a growing number of problem domains has complex, time varying behavior and unpredictable resource demands (e.g., WWW servers and parallel input/output systems). While current performance analysis tools provide insights into application dynamics and the causes of poor performance, with a posteriori analysis one cannot adapt to temporally varying application resource demands and system responses. We believe that the solution to this performance optimization conundrum is integration of dynamic performance instrumentation and on-the-fly performance data reduction with real-time adaptive control mechanisms that select and configure resource management algorithms automatically, based on observed application behavior, or interactively, through high-modality virtual environments. We motivate this belief by first describing our experiences with performance analysis tools, input/output characterization, and WWW server analysis, and then sketching the design of interactive and closed loop adaptive control systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adve, V. S., Mellor-Crummey, J., Ander-son, M., Kennedy, K., Wang, J., and Reed, D. A. </author> <title> An Integrated Compilation and Performance Analysis Environment for Data Parallel Programs. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: Exploiting the Pablo instrumentation library's extension interfaces, we have expanded the instrumentation library beyond its initial target of message passing codes to include support for analysis of codes written in data parallel languages <ref> [1] </ref>, study of World Wide Web behavior [7], analysis of application input/output patterns [2, 16], and study of parallel file system policies [4]. 3 Input/Output Characterization The modest input/output configurations and file system limitations of many current high-performance systems preclude solution of problems with large input/output needs.
Reference: [2] <author> Crandall, P. E., Aydt, R. A., Chien, A. A., and Reed, D. A. </author> <title> Characterization of a Suite of Input/Output Intensive Applications. </title> <booktitle> In Proceedings of Supercomputing '95 (Dec. </booktitle> <year> 1995). </year>
Reference-contexts: As the scope of scalable parallel computing expands from regular computations and single parallel systems to irregular computations and distributed collections of heterogeneous parallel systems, software complexity and associated optimization problems increase commensurately. This view is buttressed by our experiences characterizing parallel input/output behavior <ref> [2] </ref> and analyzing WWW server traffic patterns [7]. Applications in both domains have complex, irregular resource access patterns that make static allocation of resources inefficient. In contrast to rapid changes in application software models, tools for debugging and tuning parallel software have not kept pace. <p> Exploiting the Pablo instrumentation library's extension interfaces, we have expanded the instrumentation library beyond its initial target of message passing codes to include support for analysis of codes written in data parallel languages [1], study of World Wide Web behavior [7], analysis of application input/output patterns <ref> [2, 16] </ref>, and study of parallel file system policies [4]. 3 Input/Output Characterization The modest input/output configurations and file system limitations of many current high-performance systems preclude solution of problems with large input/output needs. <p> analogs, describing access patterns during an interval of time or a file region, respectively. 3.2 Input/Output Evolution During the past three years, we and others have exploited the extended Pablo analysis software to study the behavior of a variety of parallel applications on the Intel Paragon XP/S and IBM SP/2 <ref> [2, 16] </ref>. These studies have shown that parallel input/output patterns are much more complex and irregular than those expected based on an extrapolation from input/output patterns on either vector supercomputers or high-performance workstations. <p> Likewise, request patterns can be sequential, strided, or random with fixed or variable sizes. Overall, our characterization studies <ref> [2, 16] </ref> have shown that parallel applications exhibit a much wider variety of input/output request patterns than anticipated by parallel file system designers. Thus, extant parallel file systems are optimized for a small subset of the parallel input/output access space.
Reference: [3] <author> Gu, W., Eisenhauer, G., Kraemer, E., Schwan, K., Stasko, J., Vetter, J., and Mallavarupu, N. </author> <title> Falcon: On-line Monitoring and Steering of Large-Scale Parallel Programs. </title> <booktitle> In Proceedings of the 5th Symposium of the Frontiers of Massively Parallel Computing (Feb. </booktitle> <year> 1995), </year> <pages> pp. 422-429. </pages>
Reference-contexts: The Supercomputing '95 I-WAY [5], with immersive visualizations of scientific computations, is the most recent and notable example. In contrast to the design of systems for steering computation behavior, there have been far fewer efforts <ref> [3, 14] </ref> to interactively steer or adaptively control application performance. Notably, Schwan [3] has developed an adaptive control library for thread-based computations on shared memory parallel systems. This system, called Falcon, allows application developers to insert software sensors in their source code. <p> The Supercomputing '95 I-WAY [5], with immersive visualizations of scientific computations, is the most recent and notable example. In contrast to the design of systems for steering computation behavior, there have been far fewer efforts [3, 14] to interactively steer or adaptively control application performance. Notably, Schwan <ref> [3] </ref> has developed an adaptive control library for thread-based computations on shared memory parallel systems. This system, called Falcon, allows application developers to insert software sensors in their source code. Performance data from these sensors activates actuators to change program behavior based on current conditions and measured performance.
Reference: [4] <author> Huber, J. V., Elford, C. L., Reed, D. A., Chien, A. A., and Blumenthal, D. S. </author> <title> PPFS: </title>
Reference-contexts: extension interfaces, we have expanded the instrumentation library beyond its initial target of message passing codes to include support for analysis of codes written in data parallel languages [1], study of World Wide Web behavior [7], analysis of application input/output patterns [2, 16], and study of parallel file system policies <ref> [4] </ref>. 3 Input/Output Characterization The modest input/output configurations and file system limitations of many current high-performance systems preclude solution of problems with large input/output needs. <p> Finally, off-line analysis tools permit meta-performance assessment of the adaptive control system's efficacy. 6.2 Control Prototype Experiences To test the feasibility of the design just described, we have enhanced our user-level portable parallel file system (PPFS) <ref> [4] </ref> to include prototype sensors, actuators, decision procedures, and behavioral classification software. PPFS consists of a group of cooperating file servers and has a rich application interface, allowing applications to advertise access patterns and to control caching, prefetching, and data placement policies at multiple levels.
References-found: 4

