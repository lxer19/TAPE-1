URL: http://www.cs.tamu.edu/research/phoenix/techreports/TR_96-007.ps.Z
Refering-URL: http://www.cs.tamu.edu/research/phoenix/papers_bib.html
Root-URL: 
Email: fganeshb, poochg@cs.tamu.edu  
Title: Naming Consistencies in Object Oriented Replicated Systems  
Author: Ganesha Beedubail and Udo Pooch 
Address: College Station, Tx 77843-3112.  
Affiliation: Department of Computer Science, Texas A&M University,  
Abstract: Technical Report (TR 96-007) March 1996. Abstract In this paper we examine the naming consistency problems in distributed systems that support object replication. We define the meaning of naming consistency in these systems and observe that it is possible to have inconsistency in naming and yet have a consistent replicas of the object. It is also argued that the naming consistency is tightly coupled with the replica consistency protocols. We examine the properties of the naming consistency in some existing replicated object systems. Then we present and analyze the replica consistency protocols developed for Spring. These protocols allow more relaxed consistency requirements in the naming service and consequently the total cost of the object replication is reduced. Though these protocols are developed for object replication in Spring Operating system, the concepts can be applied to any general settings. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. M. Needham, </author> <title> "Names," In Distributed Systems, </title> <editor> S. Mullender, </editor> <booktitle> editor, </booktitle> <pages> pp. 89-101, </pages> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Another advantage of NS is that it provides an intuitive names for the objects instead of a string of bytes. The issues involved in providing the name service for distributed systems have been studied in the literature <ref> [1, 2, 3, 4] </ref>. In this paper we will discuss the issues involved in providing the NS for distributed systems that support object replication. Object replication in distributed systems can be used for fault tolerance (high availability) and/or load balancing among other things. <p> The semantics of the NS and the issues involved in designing and implementing NS for distributed systems are studied extensively. Since this aspect is not the primary focus of this paper, we will not discuss these issues here. The reader can refer to <ref> [1, 2, 3, 4] </ref> for the relevant reading in distributed name service. 2.1 Naming Consistency in Distributed Systems First, we will discuss what we mean by consistency. We consider a system in which entities are related by some relation.
Reference: [2] <author> A. K. Yeo, K. L. Anada, and E. K. Koh, </author> <title> "A taxonomy of issues in name systems design and implementation," </title> <journal> Operating Systems Review, </journal> <volume> vol. 27, no. 3, </volume> <pages> pp. 4-18, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Another advantage of NS is that it provides an intuitive names for the objects instead of a string of bytes. The issues involved in providing the name service for distributed systems have been studied in the literature <ref> [1, 2, 3, 4] </ref>. In this paper we will discuss the issues involved in providing the NS for distributed systems that support object replication. Object replication in distributed systems can be used for fault tolerance (high availability) and/or load balancing among other things. <p> The semantics of the NS and the issues involved in designing and implementing NS for distributed systems are studied extensively. Since this aspect is not the primary focus of this paper, we will not discuss these issues here. The reader can refer to <ref> [1, 2, 3, 4] </ref> for the relevant reading in distributed name service. 2.1 Naming Consistency in Distributed Systems First, we will discuss what we mean by consistency. We consider a system in which entities are related by some relation.
Reference: [3] <author> J. J. Ordille, </author> <title> Descriptive Name Services for Large Internets, </title> <type> PhD thesis, </type> <institution> Computer Science Dept., University of Wisconsin-Madison, </institution> <year> 1993. </year>
Reference-contexts: Another advantage of NS is that it provides an intuitive names for the objects instead of a string of bytes. The issues involved in providing the name service for distributed systems have been studied in the literature <ref> [1, 2, 3, 4] </ref>. In this paper we will discuss the issues involved in providing the NS for distributed systems that support object replication. Object replication in distributed systems can be used for fault tolerance (high availability) and/or load balancing among other things. <p> The semantics of the NS and the issues involved in designing and implementing NS for distributed systems are studied extensively. Since this aspect is not the primary focus of this paper, we will not discuss these issues here. The reader can refer to <ref> [1, 2, 3, 4] </ref> for the relevant reading in distributed name service. 2.1 Naming Consistency in Distributed Systems First, we will discuss what we mean by consistency. We consider a system in which entities are related by some relation.
Reference: [4] <author> S. Radia, M. Nelson, and M. Powell, </author> <title> "The spring name service," </title> <type> Technical Report SMLI-9316, </type> <institution> Sun Microsystems Laboratories, </institution> <year> 1993. </year>
Reference-contexts: Another advantage of NS is that it provides an intuitive names for the objects instead of a string of bytes. The issues involved in providing the name service for distributed systems have been studied in the literature <ref> [1, 2, 3, 4] </ref>. In this paper we will discuss the issues involved in providing the NS for distributed systems that support object replication. Object replication in distributed systems can be used for fault tolerance (high availability) and/or load balancing among other things. <p> The semantics of the NS and the issues involved in designing and implementing NS for distributed systems are studied extensively. Since this aspect is not the primary focus of this paper, we will not discuss these issues here. The reader can refer to <ref> [1, 2, 3, 4] </ref> for the relevant reading in distributed name service. 2.1 Naming Consistency in Distributed Systems First, we will discuss what we mean by consistency. We consider a system in which entities are related by some relation. <p> In Spring, when we start a replicated object, we form the list of object references for all replicas (the glist). This glist is distributed to the replicas and then it is bound in the Spring Name Service <ref> [4] </ref>. Now any client that wants to access the replicated object can resolve the object name in the NS and can get the glist.
Reference: [5] <author> M.C.Little, D.L.McCue, and S. Shrivastava, </author> <title> "Maintaining information about persistent replicated objects in a distributed system," </title> <booktitle> In International Conf. Distributed Computing Systems, </booktitle> <pages> pp. 491-498, </pages> <year> 1993. </year>
Reference-contexts: Specifically the name bindings at the name server and the instances of replicated objects should be mutually consistent. However, not much attention has been given to this area <ref> [5, 6] </ref>. In this paper we will define the consistency requirements of naming service (NS) for supporting replicated objects. We will observe that the naming consistency is tightly coupled to the replica consistency protocols. Then we will present the replica consistency protocols that provide more relaxed naming consistency features. <p> Section 3 we will discuss the related work on this issue. Specifically we will discusses Reliable Distributed Programs (RDP) architecture [6] and the Arjuna system <ref> [5, 8] </ref>. RDP and Arjuna systems describe the naming support for the object replication in the respective systems. Section 4 presents the modified replica consistency protocols for the object replication framework developed for Spring Operating System. It then analyzes the naming consistency properties of these protocols. <p> Few discuss the consistency issues and properties associated with the naming service for replicated objects. In the following we will examine the naming consistency with respect to object replication in two systems, namely: Replicated Distributed Programs (RDP)[6] and Arjuna <ref> [5, 8, 10] </ref>. Since it is essential to understand the replication algorithm to define the naming consistency in these systems, we will also briefly explain the replication algorithms used in these systems. 3.1 Replicated Distributed Programs (RDP) Replicated Distributed Programs (RDP)[6] is a software architecture for fault tolerant distributed programs. <p> A server troupe member accepts a call from a client only if it bears the correct server troupe ID, which is the case only if the client knows the correct membership of that server troupe. In this case the naming is consistent. 3.2 Arjuna System Arjuna <ref> [5, 8, 10] </ref> is a distributed system, implemented in C++, that provides facilities for constructing applications using persistent object which can be manipulated under the control of atomic actions (atomic transactions). <p> This is necessary as these entries record pre-crash usage information that are now out-of-date. 3.2.2 The Group View Database (Naming Service) The group view database (GVD) is used in Arjuna for maintaining the information about the replicated objects <ref> [5] </ref>. Here we will elaborate on the usage of GVD for object replication.
Reference: [6] <author> E. C. Cooper, </author> <title> "Replicated distributed programs," </title> <booktitle> In ACM Symp. on Oper. Syst. Princ., </booktitle> <pages> pp. 63-78, </pages> <year> 1985. </year>
Reference-contexts: Specifically the name bindings at the name server and the instances of replicated objects should be mutually consistent. However, not much attention has been given to this area <ref> [5, 6] </ref>. In this paper we will define the consistency requirements of naming service (NS) for supporting replicated objects. We will observe that the naming consistency is tightly coupled to the replica consistency protocols. Then we will present the replica consistency protocols that provide more relaxed naming consistency features. <p> The next section briefly discusses the naming in distributed systems and explores the issues involved in naming consistency in distributed systems that support object replication. Section 3 we will discuss the related work on this issue. Specifically we will discusses Reliable Distributed Programs (RDP) architecture <ref> [6] </ref> and the Arjuna system [5, 8]. RDP and Arjuna systems describe the naming support for the object replication in the respective systems. Section 4 presents the modified replica consistency protocols for the object replication framework developed for Spring Operating System. <p> Consistency in RNS is an issue where the NS is replicated for availability (fault tolerance) and load balancing. This problem is the same as the replica consistency problem [7, 8]. Consistency problems for RNS are studied in [9]. 3 to have the clients cache the results of such lookups <ref> [6, 7] </ref>. Figure 1 shows this mechanism. Thus a client contacts the name server only when it imports the interface. It uses the same information for all subsequent remote invocations to that object. This raises the classic cache invalidation problem. <p> The reason is that, the functionality (or the requirement) of the NS for replicated objects is not well defined. Many 4 systems that discuss object replication do not talk about naming requirements for the replicated objects except for a few systems <ref> [6, 7, 8, 10] </ref>. The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in [6, 7, 8] are variations of this basic idea. <p> The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in <ref> [6, 7, 8] </ref> are variations of this basic idea. Figure 2 shows the naming service requirement for a system that supports object replication. <p> A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects. <p> However except for a few <ref> [6, 8] </ref>, these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects. <p> RDP : In this system, stale object references are allowed in NS as long as the client cache has the references to all the functioning server objects. This staleness leads to only performance problems. The client can update the NS once they detect the failure of a server <ref> [6] </ref>. We do not believe that 12 permitting the NS update by the clients is a good practice. This is because it might lead to security problems (i.e., any arbitrary client can change the state of NS, it could do so maliciously).
Reference: [7] <author> G. Beedubail, P. Kessler, and U. Pooch, </author> <title> "Object replication in spring using subcontracts," </title> <type> Technical Report TR95-041, </type> <institution> Computer Science Department,Texas A&M University, </institution> <month> Septem-ber </month> <year> 1995. </year>
Reference-contexts: We will observe that the naming consistency is tightly coupled to the replica consistency protocols. Then we will present the replica consistency protocols that provide more relaxed naming consistency features. These protocols are the enhancements of our previous work <ref> [7] </ref>. The rest of the paper is organized as follows. The next section briefly discusses the naming in distributed systems and explores the issues involved in naming consistency in distributed systems that support object replication. Section 3 we will discuss the related work on this issue. <p> Consistency in RNS is an issue where the NS is replicated for availability (fault tolerance) and load balancing. This problem is the same as the replica consistency problem <ref> [7, 8] </ref>. Consistency problems for RNS are studied in [9]. 3 to have the clients cache the results of such lookups [6, 7]. Figure 1 shows this mechanism. Thus a client contacts the name server only when it imports the interface. <p> Consistency in RNS is an issue where the NS is replicated for availability (fault tolerance) and load balancing. This problem is the same as the replica consistency problem [7, 8]. Consistency problems for RNS are studied in [9]. 3 to have the clients cache the results of such lookups <ref> [6, 7] </ref>. Figure 1 shows this mechanism. Thus a client contacts the name server only when it imports the interface. It uses the same information for all subsequent remote invocations to that object. This raises the classic cache invalidation problem. <p> The reason is that, the functionality (or the requirement) of the NS for replicated objects is not well defined. Many 4 systems that discuss object replication do not talk about naming requirements for the replicated objects except for a few systems <ref> [6, 7, 8, 10] </ref>. The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in [6, 7, 8] are variations of this basic idea. <p> The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in <ref> [6, 7, 8] </ref> are variations of this basic idea. Figure 2 shows the naming service requirement for a system that supports object replication. <p> These protocols are the modified versions of the protocols found in <ref> [7] </ref>. 4.1 Object Replication in Spring We developed an object replication framework [7] which was targeted to work on the Spring Operating System [16]. The framework is general; it can be used in any similar environment. <p> These protocols are the modified versions of the protocols found in <ref> [7] </ref>. 4.1 Object Replication in Spring We developed an object replication framework [7] which was targeted to work on the Spring Operating System [16]. The framework is general; it can be used in any similar environment. Here we will discuss the salient features that are relevant in context with the naming consistency issues.
Reference: [8] <author> M. C. Little, </author> <title> Object Replication in a Distributed System, </title> <type> PhD thesis, </type> <institution> Computer Science Dept., University of Newcastle upon Tyne, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: Section 3 we will discuss the related work on this issue. Specifically we will discusses Reliable Distributed Programs (RDP) architecture [6] and the Arjuna system <ref> [5, 8] </ref>. RDP and Arjuna systems describe the naming support for the object replication in the respective systems. Section 4 presents the modified replica consistency protocols for the object replication framework developed for Spring Operating System. It then analyzes the naming consistency properties of these protocols. <p> Consistency in RNS is an issue where the NS is replicated for availability (fault tolerance) and load balancing. This problem is the same as the replica consistency problem <ref> [7, 8] </ref>. Consistency problems for RNS are studied in [9]. 3 to have the clients cache the results of such lookups [6, 7]. Figure 1 shows this mechanism. Thus a client contacts the name server only when it imports the interface. <p> The reason is that, the functionality (or the requirement) of the NS for replicated objects is not well defined. Many 4 systems that discuss object replication do not talk about naming requirements for the replicated objects except for a few systems <ref> [6, 7, 8, 10] </ref>. The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in [6, 7, 8] are variations of this basic idea. <p> The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in <ref> [6, 7, 8] </ref> are variations of this basic idea. Figure 2 shows the naming service requirement for a system that supports object replication. <p> A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects. <p> However except for a few <ref> [6, 8] </ref>, these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects. <p> Few discuss the consistency issues and properties associated with the naming service for replicated objects. In the following we will examine the naming consistency with respect to object replication in two systems, namely: Replicated Distributed Programs (RDP)[6] and Arjuna <ref> [5, 8, 10] </ref>. Since it is essential to understand the replication algorithm to define the naming consistency in these systems, we will also briefly explain the replication algorithms used in these systems. 3.1 Replicated Distributed Programs (RDP) Replicated Distributed Programs (RDP)[6] is a software architecture for fault tolerant distributed programs. <p> A server troupe member accepts a call from a client only if it bears the correct server troupe ID, which is the case only if the client knows the correct membership of that server troupe. In this case the naming is consistent. 3.2 Arjuna System Arjuna <ref> [5, 8, 10] </ref> is a distributed system, implemented in C++, that provides facilities for constructing applications using persistent object which can be manipulated under the control of atomic actions (atomic transactions).
Reference: [9] <author> G. Beedubail, P. Kessler, and U. Pooch, </author> <title> "Replicated naming service in spring," </title> <type> Technical Report TR95-048, </type> <institution> Computer Science Department,Texas A&M University, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: The inter-object communication is carried out using remote procedure invocation. The processes in the system observe fail-stop behavior. 2. The system supports a distributed naming service (NS). The NS supported in the system is reliable (it could be made reliable by replicating it <ref> [9] </ref>). 3. When objects are ready to offer a service (say when they are started up) they export their interface to the NS (i.e., the object reference is bound in the name server with a name). 4. <p> Consistency in RNS is an issue where the NS is replicated for availability (fault tolerance) and load balancing. This problem is the same as the replica consistency problem [7, 8]. Consistency problems for RNS are studied in <ref> [9] </ref>. 3 to have the clients cache the results of such lookups [6, 7]. Figure 1 shows this mechanism. Thus a client contacts the name server only when it imports the interface. It uses the same information for all subsequent remote invocations to that object. <p> The client can get this glist from the NS (the client caches the glist from the NS). This protocol works in a Master-Slave mode. One of the replicas is designated as the master and the others will be slaves. A detailed protocol is given in <ref> [9] </ref>. We will just explain the high-level logic: Client: The client sends a remote invocation to the master (it believes that the first server from its glist, that it can contact is the master). If it receives a result, then the invocation is complete.
Reference: [10] <author> S. K. Shrivastava and D. L. McCue, </author> <title> "Structuring fault-tolerant object systems for modularity in a distributed environment," </title> <journal> IEEE Trans. Par. Distr. Syst., </journal> <volume> vol. 5, no. 4, </volume> <pages> pp. 421-432, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: The reason is that, the functionality (or the requirement) of the NS for replicated objects is not well defined. Many 4 systems that discuss object replication do not talk about naming requirements for the replicated objects except for a few systems <ref> [6, 7, 8, 10] </ref>. The usual way of naming (representing) the replicated object is to associate a name to a list of object references. These object references point to the actual objects that constitute the replica set. The schemes presented in [6, 7, 8] are variations of this basic idea. <p> Few discuss the consistency issues and properties associated with the naming service for replicated objects. In the following we will examine the naming consistency with respect to object replication in two systems, namely: Replicated Distributed Programs (RDP)[6] and Arjuna <ref> [5, 8, 10] </ref>. Since it is essential to understand the replication algorithm to define the naming consistency in these systems, we will also briefly explain the replication algorithms used in these systems. 3.1 Replicated Distributed Programs (RDP) Replicated Distributed Programs (RDP)[6] is a software architecture for fault tolerant distributed programs. <p> A server troupe member accepts a call from a client only if it bears the correct server troupe ID, which is the case only if the client knows the correct membership of that server troupe. In this case the naming is consistent. 3.2 Arjuna System Arjuna <ref> [5, 8, 10] </ref> is a distributed system, implemented in C++, that provides facilities for constructing applications using persistent object which can be manipulated under the control of atomic actions (atomic transactions).
Reference: [11] <author> P. Alsberg and J. Day, </author> <title> "A principle for resilient sharing of distributed resrources," </title> <booktitle> In Proc. Of Second Intl' Conf. on Software Engg., </booktitle> <address> San Francisco, CA., </address> <pages> pp. 562-570, </pages> <year> 1976. </year>
Reference-contexts: A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects.
Reference: [12] <author> K. P. Birman et al., </author> <title> "Implementing fault-tolerant distributed objects," </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> vol. 6, no. 11, </volume> <pages> pp. 502-508, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects.
Reference: [13] <author> F. Schneider, </author> <title> "Implementing fault tolerant services using the state machine approach: A tutorial," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 22, no. 4, </volume> <pages> pp. 299-319, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects. <p> When the broadcast is complete, it returns the results to the client. 11 The above protocol is an implementation of the ordered atomic broadcast from the clients to the server replica group. Since our servers are deterministic, this protocol ensures the replica consistency property <ref> [13] </ref>. A new (or a recovering) member that wants to be the part of the replica group follows the following protocol. The new member assumes the role of a client and invokes a join operation (join group ()) on the replicated object.
Reference: [14] <author> N. Budhiraja et al., </author> <title> "The primary-backup approach," In Distributed Systems, 2ed Edition, </title> <editor> S. Mullender, </editor> <booktitle> editor, </booktitle> <pages> pp. 199-216, </pages> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects.
Reference: [15] <author> G. Beedubail et al., </author> <title> "Fault tolerant objects in distributed systems using hot replication," </title> <booktitle> In Proc. of 15th Int'l Phoenix Conf. on Computers and Communications (IPCCC'96), </booktitle> <address> Phoenix, AZ, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: A name-binding that can be considered inconsistent in one replicated object system may not be considered so in another replicated object system. 5 3 Related Work The technique of replicating the services (objects) for high availability has received much attention in the literature <ref> [6, 8, 11, 12, 13, 14, 15] </ref>. However except for a few [6, 8], these do not discuss the issues of object naming and binding support that is necessary for developing replicated objects. Few discuss the consistency issues and properties associated with the naming service for replicated objects.
Reference: [16] <author> J. Mitchel et al., </author> <title> "An overview of the spring system," </title> <booktitle> In Proceedings of of Compcon Spring 1994, </booktitle> <month> February </month> <year> 1994. </year> <month> 15 </month>
Reference-contexts: The inconsistencies created at the GVD by the client's failure during this whole activity is repaired only when the client recovers. 4 Naming Consistency in Spring for Object Replication In this section we will present two replica consistency protocols used for object replication in Spring Operating System <ref> [16] </ref> and their naming consistency properties. These protocols are the modified versions of the protocols found in [7]. 4.1 Object Replication in Spring We developed an object replication framework [7] which was targeted to work on the Spring Operating System [16]. <p> consistency protocols used for object replication in Spring Operating System <ref> [16] </ref> and their naming consistency properties. These protocols are the modified versions of the protocols found in [7]. 4.1 Object Replication in Spring We developed an object replication framework [7] which was targeted to work on the Spring Operating System [16]. The framework is general; it can be used in any similar environment. Here we will discuss the salient features that are relevant in context with the naming consistency issues. In Spring, we represent the replicated objects by a list of object references (we call this the glist).
References-found: 16

