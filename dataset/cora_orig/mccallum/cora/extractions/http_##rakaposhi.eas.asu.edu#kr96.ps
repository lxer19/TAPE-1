URL: http://rakaposhi.eas.asu.edu/kr96.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: f rao, xiuping.yang g@asu.edu  
Title: On the role of Disjunctive Representations and Constraint Propagation in Refinement Planning  
Author: Subbarao Kambhampati and Xiuping Yang 
Web: WWW: http://rakaposhi.eas.asu.edu/yochan.html  
Address: Tempe, AZ 85287.  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: Most existing planners intertwine the refinement of a partial plan with search by pushing the individual refinements of a plan into different search branches. Although this approach reduces the cost of handling partial plans, it also often leads to search space explosion. In this paper, we consider the possibility of handling the refinements of a partial plan together (without splitting them into search space). This is facilitated by disjunctive partial plan representations that can compactly represent large sets of partial plans. Disjunctive representations have hitherto been shunned since they may increase the plan handling costs. We argue that performance improvements can be obtained despite these costs by the use of (a) constraint propagation techniques to simplify the disjunctive plans and (b) CSP/SAT techniques to extract solutions from them. We will support this view by showing that some recent promising refinement planners, such as the GRAPHPLAN algorithm [2], can be seen as deriving their power from disjunctive plan representations. We will also present a new planning algorithm, UCPOP-D, which uses disjunctive representations over UCPOP [19] to improve performance. Finally, we will discuss the issues and tradeoffs involved in planning with disjunctive representations.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 67, No. 1, </volume> <year> 1994. </year>
Reference-contexts: We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP [19], SNLP [17] Full PSR TOPI <ref> [1] </ref> Full BSR GRAPHPLAN [2] No FSR SATPLAN [9] No FSR/PSR Descartes [8] Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation.
Reference: [2] <author> A. Blum and M. Furst. </author> <title> Fast planning throug planning graph analysis. </title> <booktitle> In Proc. IJCAI-95, </booktitle> <year> 1995. </year>
Reference-contexts: The expense that all these planners pay for this reduction in per-plan cost is the increase in search space size. Indeed, it is well known that planners such as UCPOP and PRODIGY generate very large search spaces even for simple problems <ref> [7, 2] </ref>. The usual solution to this problem is to control the planner's search with the help of search control knowledge acquired from domain experts (e.g. task reduction schemas) or through learning techniques (e.g. explanation-based learning [15], case-based planning [6]). <p> The minimal candidates corresponding to all plans generated by the forward state space planner are compactly represented by a single partial plan (plan graph) in GRAPHPLAN. agation forms the backbone of the GRAPHPLAN algorithm <ref> [2] </ref> planning algorithm, that we shall discuss in more detail below. Of course, unless the propagation is very strong, we will not be able to weed out all infeasible actions from being considered. <p> If we represented the plansets in terms of their components, the constraints on the different plan components would have been in terms of different step names and would thus not have interacted. 5.1 Case Study: GRAPHPLAN GRAPHPLAN <ref> [2] </ref> is a recent planning system, that can be understood as using a partial plan representation that corresponds to the disjunction of the refinements produced by a forward state space planner (see Figure 5) 4 . <p> We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP [19], SNLP [17] Full PSR TOPI [1] Full BSR GRAPHPLAN <ref> [2] </ref> No FSR SATPLAN [9] No FSR/PSR Descartes [8] Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation.
Reference: [3] <author> J.D. Crawford and L.D. Auton. </author> <title> Experimental results on the crossover point in satisfiability problems. </title> <booktitle> In Proc. AAAI-93, </booktitle> <year> 1993. </year>
Reference-contexts: We may still hope to win on average for two reasons. First, the CSP and SAT algorithms, which can be used to extract solutions from plansets, seem to scale up much better in practice than general state space search <ref> [18, 3] </ref>, thus encouraging the idea of pushing the complexity into solution extraction phase. Second, and perhaps more important, we can reduce the plan handling costs in disjunctive plan representations by the use of constraint propagation techniques that enforce local consistency among the disjunctive plan constraints.
Reference: [4] <author> E. Fink and M. Veloso. </author> <title> Formalizing the Prodigy Planning Algorithm. </title> <type> CMU CS Tech. Report, </type> <month> Fall </month> <year> 1994. </year>
Reference-contexts: As described above, refinement planning does not need any explicit search. However, most refinement planners described in the literature, including the popular ones like UCPOP [19] and PRODIGY <ref> [4] </ref> introduce explicit search into the refinement process by considering each of the refinements of a plan in a different search branch. The motivation behind introducing search into refinement planning is to restrict the solution extraction and refinement operations to single plans, thereby making them cheaper.
Reference: [5] <author> M. Ginsberg. </author> <title> A new algorithm for generative planning. </title> <booktitle> In Proc. </booktitle> <address> KRR-96, </address> <year> 1996 </year>
Reference-contexts: Figure 1 shows a partial plan P eg consisting of seven steps (including 0 and 1). The plan P eg is represented as follows: 1 For a very different partial plan representation, that still has candidate set based semantics, see Ginsberg's paper in these proceedings <ref> [5] </ref>. set. f (1 : Load (A)); (2 : Load (B)); (3 : F ly ()); (4 : U nload (B)); (5 : U nload (A)); g; f (0 fl 1); (1 2); (1 4); (2 3); f (2 3)g An ordering constraint of the form (i j) indicates that Step <p> The refinement is progressive since all action sequences belonging to 3 Thus, complete and progressive refinements can be seen as computing increasingly finer upper bounds on L (I; G). In <ref> [5] </ref>, Ginsberg presents an novel refinement strategy that simultaneously computes increasingly finer lower bounds on L (I; G).
Reference: [6] <author> L. Ihrig and S. Kambhampati. </author> <title> Design and Implementation of a Replay Framework based on a Partial order Planner. </title> <booktitle> In Proc. AAAI-96, </booktitle> <year> 1996. </year>
Reference-contexts: The usual solution to this problem is to control the planner's search with the help of search control knowledge acquired from domain experts (e.g. task reduction schemas) or through learning techniques (e.g. explanation-based learning [15], case-based planning <ref> [6] </ref>). In this paper, we will consider a more direct solution to the search space explosion problem that of handling sets of plans without splitting them into the search space. At first glance, this seems to involve a mere exchange of complexity from search space size to solution extraction cost.
Reference: [7] <author> D. Joslin and M. Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial order planning. </title> <booktitle> Proceedings of AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: The expense that all these planners pay for this reduction in per-plan cost is the increase in search space size. Indeed, it is well known that planners such as UCPOP and PRODIGY generate very large search spaces even for simple problems <ref> [7, 2] </ref>. The usual solution to this problem is to control the planner's search with the help of search control knowledge acquired from domain experts (e.g. task reduction schemas) or through learning techniques (e.g. explanation-based learning [15], case-based planning [6]). <p> Kautz and Selman [9] do this implicitly when they convert GRAPHPLAN's plan-graph into a SAT instance. This raises the possibility that the research on refinement selection, such as goal order heuristics in partial order planning <ref> [7] </ref>, or planning by interleaving multiple refinements [13] may have an impact on generating efficient SAT encodings. It is also worth understanding the relation between least commitment, task reduction ideas in traditional refinement planning, and the idea of planning with disjunctive representations.
Reference: [8] <author> D. Joslin and M. Pollack. </author> <title> Passive and active decision postponement in plan generation. </title> <booktitle> In Proc. 3rd Euro-pean Workshop on Planning, </booktitle> <year> 1995. </year>
Reference-contexts: Clearly, all refinements can support planning with disjunctive representations. We have already seen that GRAPHPLAN can be understood in terms of disjunction over state space refinements, while UCPOP-D and Descartes <ref> [8] </ref> can be understood in terms of disjunction over plan-space refinements. An important issue is the relative tradeoffs offered by disjunction over different types of refinements. <p> We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP [19], SNLP [17] Full PSR TOPI [1] Full BSR GRAPHPLAN [2] No FSR SATPLAN [9] No FSR/PSR Descartes <ref> [8] </ref> Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation. Another successful strand of work in plan generation is related to SATPLAN, which considers planning as a satisfiability problem [9, 10].
Reference: [9] <author> H. Kautz and B. Selman. </author> <title> Pushing the Envelope: Planning, Propositional Logic, and Stochastic Search In Proc. </title> <booktitle> AAAI-96, </booktitle> <year> 1996. </year>
Reference-contexts: most exponential number of minimal candidates (corresponding to the safe ground linearizations) for each component of the planset, and since we can check if an action sequence is a solution in linear time, the solution extraction process can be cast as a combinatoric search problem, such as CSP or SAT <ref> [9] </ref>. The length of the minimal candidates of a plan increase as refinements are applied to it, thus allowing for an incremental exploration of the candidates. The third step involves refining the planset to generate a new planset. <p> This is because GRAPHPLAN may introduce actions into level k + 1 which may not be applicable in any physical state af strate that shifting the complexity entirely from search space size to solution extraction this way does lead to significant improvements in performance. Kautz and Selman <ref> [9] </ref> show that GRAPHPLAN's performance can be further improved by casting its solution extraction process as a SAT problem and solving it using local search methods. 6 UCPOP-D: Disjunction over Plan-space refinements In the foregoing, we have argued in favor of disjunctive refinements and constraint propagation, and suggested that GRAPHPLAN algorithm <p> We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP [19], SNLP [17] Full PSR TOPI [1] Full BSR GRAPHPLAN [2] No FSR SATPLAN <ref> [9] </ref> No FSR/PSR Descartes [8] Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation. Another successful strand of work in plan generation is related to SATPLAN, which considers planning as a satisfiability problem [9, 10]. <p> Another successful strand of work in plan generation is related to SATPLAN, which considers planning as a satisfiability problem <ref> [9, 10] </ref>. SATPLAN starts with a SAT encoding such that all k-step solutions to the planning problem correspond to the satisfying assignments of the encoding. <p> It would be interesting to consider generating the encodings 8 Not all minimal candidates may be k-step solutions, however. using refinements on disjunctive plans. Kautz and Selman <ref> [9] </ref> do this implicitly when they convert GRAPHPLAN's plan-graph into a SAT instance. This raises the possibility that the research on refinement selection, such as goal order heuristics in partial order planning [7], or planning by interleaving multiple refinements [13] may have an impact on generating efficient SAT encodings.
Reference: [10] <author> H. Kautz, D. McAllester and B. Selman. </author> <booktitle> Encoding plans in propositional logic In Proc. </booktitle> <address> KRR-96, </address> <year> 1996. </year>
Reference-contexts: The tentative steps will then give rise to tentative open conditions which need to be handled. While applying establishment refinement to all tentative conditions is one possibility and this is essentially what is done in the causal SNLP encodings used in <ref> [10] </ref> we are hopeful that there may be ways of more tightly constraining the refinements (as is done in GRAPH-PLAN using mutual exclusion constraints, see Section 5). 7 Discussion In this section, we shall discuss several broad issues raised by planning with disjunctive representations: Amount of splitting: Research in the constraint <p> Instead, we need to concentrate on issues such as: (a) the efficiency of extraction of solutions from the plansets and (b) the support for constraint propagation provided by the plansets. As an example of such a tradeoff, recent work by Kautz et. al. <ref> [10] </ref> indicates that SAT encodings based on disjunctive state-space refinements are larger than the encodings based on plan-space refinements, but that the latter do not seem to be as easy to handle during solution extraction process. 8 Related Work As we mentioned, our description of refinement planning is general enough to <p> Another successful strand of work in plan generation is related to SATPLAN, which considers planning as a satisfiability problem <ref> [9, 10] </ref>. SATPLAN starts with a SAT encoding such that all k-step solutions to the planning problem correspond to the satisfying assignments of the encoding.
Reference: [11] <author> S. Kambhampati. </author> <title> Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 69, </volume> <year> 1994. </year> <pages> pp. 235-278. </pages>
Reference-contexts: Since we only do this splitting for those disjunctive order ings that remain unsimplified, the search space size is likely to be much smaller than that for normal UCPOP. around, and our previous work provides a formalization of them <ref> [11] </ref>, and uses them to revoke prior causal commitments. <p> The plots in Figure 7 show the results of these experiments. The first set of plots show the comparative performance in ART-MD-RD domain, which was used in <ref> [11] </ref> to illustrate the utility of multi-contributor causal links. The second set of plots show the results in Link-Chain domain, which was used by Veloso et. al [21] to highlight the inadequacies of the single-contributor causal structures.
Reference: [12] <author> S. Kambhampati, C. Knoblock and Q. Yang. </author> <title> Planning as Refinement Search: A Unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence special issue on Planning and Scheduling. </journal> <volume> Vol. 76. </volume> <year> 1995. </year>
Reference-contexts: 1 Introduction A large part of the work on plan synthesis in artificial intelligence falls under the rubric of refinement planning. Refinement planning <ref> [12] </ref> involves manipulating sets of partial plans, each of which are shorthand notations for a set of potential solutions for the planning problem (called the candidate set of the plan). <p> The paper is organized as follows. Section 2 provides the background on the planning problem, and syntax and semantics of partial plans, which can be skipped by read ers familiar with candidate set semantics for partial plans (c.f. <ref> [12] </ref>). The next two sections provide a novel view of the notions of refinement strategies and refinement planning which shows the secondary nature of search in refinement planning. <p> Refinement planners <ref> [12] </ref> attempt to solve a planning problem by navigating the space of sets of potential solutions (action sequences). The potential solution sets are represented and manipulated in the form of (partial) plans. domain. The ordering constraints between steps are shown by arrows. The interval preservation constraints are shown by arcs. <p> In particular, an action sequence is a candidate of a partial plan if it contains actions corresponding to all the steps of the plan, in an order con sistent with the precedence and contiguity constraints, and it satisfies all the interval preservation constraints <ref> [12] </ref>. these relations with respect to the example plan in Figure 1. Each partial plan corresponds to a set of topological sorts (e.g. h1; 2; 3; 4; 5i and h1; 2; 4; 3; 5i). <p> In general, splitting the planset components into the search space trades off the search space size increase against the reduction in the solution extraction process. This splitting operation is so prevalent in refinement planners that many previous accounts of refinement planning (including our own <ref> [12] </ref>) considered the splitting to be a requirement of the refinement planning. As the foregoing discussion shows, this is not necessary. Controlled search through controlled splitting: Although introducing search in refinement planning reduces the cost of solution extraction function, it does so at the expense of increased search space size.
Reference: [13] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal Classical Planner: An algorithm for unifying state space and plan space approaches. </title> <booktitle> In Proc European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: repeatedly, we get a sequence of plan sets b P i which satisfy: 3 U hhP ; ii hh b P 2 ii hh b P 2 ii : : : hh b P n ii : : : L (I ; G) Examples of Refinement Strategies: As shown in <ref> [13] </ref>, existing planners use three types of complete and progressive refinement strategies forward state space refinement (FSR), backward state space refinement (BSR) and plan space refinement (PSR). <p> Kautz and Selman [9] do this implicitly when they convert GRAPHPLAN's plan-graph into a SAT instance. This raises the possibility that the research on refinement selection, such as goal order heuristics in partial order planning [7], or planning by interleaving multiple refinements <ref> [13] </ref> may have an impact on generating efficient SAT encodings. It is also worth understanding the relation between least commitment, task reduction ideas in traditional refinement planning, and the idea of planning with disjunctive representations.
Reference: [14] <author> S. Kambhampati and B. Srivastava. </author> <title> Unifying classical planning approaches. </title> <note> ASU-CSE-TR 96-006. Submitted for journal publication. </note>
Reference-contexts: The usual way of increasing the candidate set size of partial plans (and thus reduced commitment), is to use weaker atomic constraints (e.g., partial ordering instead of contiguity ordering relations between steps). Disjunctive representations provide an alternate way of achieving least commitment and search space reduction. HTN planning <ref> [14] </ref> can be seen as an idea closely related to disjunctive refinements. In particular, HTN planners introduce non-primitive actions into the partial plans, and gradually reduce them with the help of user-supplied task reduction schemas into primitive actions.
Reference: [15] <author> S. Kambhampati, S. Katukam, Y. Qu. </author> <title> Failure Driven Dynamic Search Control for Partial Order Planners: </title> <note> An explanation-based approach Artificial Intelligence (To appear in Fall 1996) </note>
Reference-contexts: The usual solution to this problem is to control the planner's search with the help of search control knowledge acquired from domain experts (e.g. task reduction schemas) or through learning techniques (e.g. explanation-based learning <ref> [15] </ref>, case-based planning [6]). In this paper, we will consider a more direct solution to the search space explosion problem that of handling sets of plans without splitting them into the search space.
Reference: [16] <author> S. Kambhampati. </author> <title> Reconstructing GRAPHPLAN Algorithm from Forward Projection. In Planning Methods in AI (Notes from ASU Planning Seminar). </title> <type> ASU CSE TR 96-004. </type> <note> http://rakaposhi.eas.asu.edu:8001/yochan.html </note>
Reference-contexts: Specifically, plan-graph construction is better understood in terms of a forward state space planner which allows noop actions, and projects sets of independent operators simultaneously from the current state See <ref> [16] </ref> for a full GRAPHPLAN's planning process involves two phases that are alternated until a plan is found. In the first phase, a compact structure called plan-graph is constructed. A plan-graph corresponds to the disjunction of all the refinements produced by a forward state space planner [16]. <p> the current state See <ref> [16] </ref> for a full GRAPHPLAN's planning process involves two phases that are alternated until a plan is found. In the first phase, a compact structure called plan-graph is constructed. A plan-graph corresponds to the disjunction of all the refinements produced by a forward state space planner [16]. Thus the GRAPHPLAN refinement process does not introduce any branching into the search space. All the complexity is transferred to the solution extraction process which has to search the plan graph structure for minimal candidates that are solutions. <p> corresponds to doing forward state-space refinement on all the components of the k th level planset. 5 Empirical results demon reconstruction of GRAPHPLAN from forward projection. 5 Strictly speaking, the candidate set of the k-level plangraph is a superset of the candidate set of the corresponding k th level planset <ref> [16] </ref>. This is because GRAPHPLAN may introduce actions into level k + 1 which may not be applicable in any physical state af strate that shifting the complexity entirely from search space size to solution extraction this way does lead to significant improvements in performance.
Reference: [17] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP [19], SNLP <ref> [17] </ref> Full PSR TOPI [1] Full BSR GRAPHPLAN [2] No FSR SATPLAN [9] No FSR/PSR Descartes [8] Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation.
Reference: [18] <author> B. Selman, H.J. Levesque and D.G. Mitchell. GSAT: </author> <title> A new method for solving hard satisfiability problems. </title> <booktitle> In Proc. AAAI-92, </booktitle> <year> 1992. </year>
Reference-contexts: We may still hope to win on average for two reasons. First, the CSP and SAT algorithms, which can be used to extract solutions from plansets, seem to scale up much better in practice than general state space search <ref> [18, 3] </ref>, thus encouraging the idea of pushing the complexity into solution extraction phase. Second, and perhaps more important, we can reduce the plan handling costs in disjunctive plan representations by the use of constraint propagation techniques that enforce local consistency among the disjunctive plan constraints.
Reference: [19] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: Informally, refinement strategies can be understood as operations that narrow the candidate set by eliminating those sequences that cannot be solutions to the problem. As described above, refinement planning does not need any explicit search. However, most refinement planners described in the literature, including the popular ones like UCPOP <ref> [19] </ref> and PRODIGY [4] introduce explicit search into the refinement process by considering each of the refinements of a plan in a different search branch. The motivation behind introducing search into refinement planning is to restrict the solution extraction and refinement operations to single plans, thereby making them cheaper. <p> Since GRAPHPLAN concentrates on disjunctive representations of a forward state space planner, one interesting direction is to explore disjunctive representations over other refinements. In this section, we will describe our experience with disjunctive representations over plan-space refinements in the context of UCPOP <ref> [19] </ref>, a popular partial-order planner. This section has multiple aims. We want to demonstrate that the ideas of disjunctive representations can be folded naturally into existing refinement planners. We also want to explore the middle-ground in terms of splitting plansets. <p> But, our current experience is that such stronger propagation strategies do not improve performance [20]. 6.2 Implementation and Empirical Evaluation We implemented these ideas about disjunctive causal constraints on top of the standard UCPOP system from University of Washington <ref> [19] </ref>. Our initial implementation made minimal changes to UCPOP for example, we depend on the standard termination criterion of UCPOP, rather than the minimal candidate based termination. For convenience, we will call this variant of UCPOP, UCPOP-D. <p> We have already shown how GRAPHPLAN can be understood in terms of re Planner Level of splitting Type of refinement UCPOP <ref> [19] </ref>, SNLP [17] Full PSR TOPI [1] Full BSR GRAPHPLAN [2] No FSR SATPLAN [9] No FSR/PSR Descartes [8] Some PSR UCPOP-D Some PSR Table 1: Different planners as instantiations of Refine algorithm template finement planning with disjunctive representations and constraint propagation.
Reference: [20] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> (Academic Press, </publisher> <address> San Diego, California, </address> <year> 1993). </year>
Reference-contexts: This can be done efficiently with the help of constraint propagation techniques <ref> [20] </ref>. The basic idea is that whenever an atomic ordering constraint is added to the plan, it can be propagated through the disjunctive constraints, simplifying them. The simplification may give rise to more atomic orderings, which in turn cause further simplifications. <p> But, our current experience is that such stronger propagation strategies do not improve performance <ref> [20] </ref>. 6.2 Implementation and Empirical Evaluation We implemented these ideas about disjunctive causal constraints on top of the standard UCPOP system from University of Washington [19].
Reference: [21] <author> M. Veloso and J. Blythe. Linkability: </author> <title> Examining causal link commitments in partial-order planning. </title> <booktitle> Proceedings of AIPS-94, </booktitle> <year> 1994. </year>
Reference-contexts: The first set of plots show the comparative performance in ART-MD-RD domain, which was used in [11] to illustrate the utility of multi-contributor causal links. The second set of plots show the results in Link-Chain domain, which was used by Veloso et. al <ref> [21] </ref> to highlight the inadequacies of the single-contributor causal structures. Finally, the third set of plots show the results in the prodigy blocks world domain (with pickup; putdown; stack and unstack actions). The plots show that in all cases, disjunctive representations and constraint propagation outperform standard UCPOP.
Reference: [22] <author> Q. Yang. </author> <title> A theory of conflict resolution in planning. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 361-392, </pages> <year> 1992. </year>
References-found: 22

