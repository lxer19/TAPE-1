URL: http://www.cs.tamu.edu/faculty/yen/publications/icse96.ps
Refering-URL: http://www.cs.tamu.edu/faculty/yen/publications/index.html
Root-URL: http://www.cs.tamu.edu
Title: An Analytic Framework for Specifying and Analyzing Imprecise Requirements  
Author: Xiaoqing Frank Liu John Yen 
Address: Rolla, Missouri 65401 College Station, Texas 77843  
Affiliation: Department of Computer Science Department of Computer Science University of Missouri Texas A&M University  
Abstract: There are at least three challenges with requirements analysis. First, it needs to bridge informal requirements, which are often vague and imprecise, to formal specification methods. Second, requirements often conflict with each other. Third, existing formal requirement specification methodologies are limited in supporting trade-off analysis between conflicting requirements and identifying the impact of a requirement change to the rest of the system. In this paper, an analytic framework is developed for the specification and analysis of imprecise requirements. In this framework, the elasticity of imprecise requirements is captured using fuzzy logic and the relationships between requirements are formally classified into four categories: conflicting, cooperative, mutually exclusive, and irrelevant. This formal foundation facilitates to infer relationships between requirements for detecting implicit conflicts, to assess the relative priorities of requirements for resolving conflicts, and to assess the effect of a requirement change. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Boehm, et. al., </author> <title> "Software Requirements Negotiation and Renegotiation Aids", </title> <booktitle> Proc. of the 17th International Conference on Software Engineering, </booktitle> <pages> pp. 243-253, </pages> <year> 1995. </year>
Reference-contexts: Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process [5]. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other <ref> [6, 7, 1, 8] </ref>. Many conflicts between requirements are implicit and difficult to identify. Moreover, tradeoffs among conflicting requirements are difficult to assess. Third, requirements change frequently. Identifying the impact of a requirement change to the rest of the system is challenging. <p> Conflicts are studied from a more positive perspective in the modern view. They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. <p> They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. Mylopoulos, Chung, and Nixon developed an approach for documenting the design rationale in terms of nonfunctional requirements [8]. <p> We denote the process domain as SP and the realization domain as SR. The constraint imposed by an imprecise requirement R is represented as a satisfaction function, denoted as Sat R , that maps an element of R's domain D to a number in <ref> [0; 1] </ref> that represents the degree to which the requirement is satisfied: Sat R : D ! [0; 1]: (1) In essence, the satisfaction function characterizes a fuzzy subset of D that satisfies the imprecise requirement. <p> The constraint imposed by an imprecise requirement R is represented as a satisfaction function, denoted as Sat R , that maps an element of R's domain D to a number in <ref> [0; 1] </ref> that represents the degree to which the requirement is satisfied: Sat R : D ! [0; 1]: (1) In essence, the satisfaction function characterizes a fuzzy subset of D that satisfies the imprecise requirement. The basis for expressing imprecise requirements is the canonical form in Zedah's test score semantics [12].
Reference: [2] <author> Frederick P. Brooks, Jr., </author> <title> "No silver bullet: </title> <journal> Essence and accidents of software engineering", Computer, </journal> <volume> vol. 15, no. 1, </volume> <pages> pp. 10-18, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: Frederick P. Brooks, Jr. has pointed out that no other part of the work so cripples the resulting system if done wrong and no other part is more difficult to rectify later than requirement analysis <ref> [2] </ref>. The goal of requirement analysis is to develop a requirement specification that contains all the true needs of customers [3]. It describes nonfunctional requirements and their constraints, such as cost and resource, and functional requirements in terms of inputs, output, and their relationships.
Reference: [3] <author> A. Davis, </author> <title> Software Requirements: Analysis and Specification, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: The goal of requirement analysis is to develop a requirement specification that contains all the true needs of customers <ref> [3] </ref>. It describes nonfunctional requirements and their constraints, such as cost and resource, and functional requirements in terms of inputs, output, and their relationships. However, there are at least three challenges with requirement engineering, which hinder the the wide application of requirement engineering methodologis and techniques in software development organizations.
Reference: [4] <author> T. Miyoshi and M. Azuma, </author> <title> "An empirical study of evaluating software development environment quality", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 19, no. 5, </volume> <pages> pp. 425-435, </pages> <year> 1993. </year>
Reference-contexts: First, it needs to bridge informal requirements, which are often vague and imprecise, to formal specification methods. For example, all the twenty-two requirements that are used to evaluate software development environment quality are imprecise <ref> [4] </ref>. Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process [5]. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other [6, 7, 1, 8].
Reference: [5] <author> R. Balzer, N. Goldman, and D. Wile, </author> <title> "Informality in program specifications", </title> <journal> IEEE Transactions on Software Enginering, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 94-103, </pages> <year> 1978. </year>
Reference-contexts: For example, all the twenty-two requirements that are used to evaluate software development environment quality are imprecise [4]. Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process <ref> [5] </ref>. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other [6, 7, 1, 8]. Many conflicts between requirements are implicit and difficult to identify. Moreover, tradeoffs among conflicting requirements are difficult to assess. Third, requirements change frequently. <p> The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely [9, 8] or convert imprecise requirements into precise ones <ref> [10, 5] </ref>. This limits their capability in trade-off analysis of conflicting requirements.
Reference: [6] <author> A. C. W. Finkelstein, D. Gabbay, A. Hunter, J. Kramer, and Bashar Nuseibeh, </author> <title> "Inconsistency Handling in Multiperspective Specifications", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 20, No. 8, </volume> <pages> pp. 569-578, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process [5]. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other <ref> [6, 7, 1, 8] </ref>. Many conflicts between requirements are implicit and difficult to identify. Moreover, tradeoffs among conflicting requirements are difficult to assess. Third, requirements change frequently. Identifying the impact of a requirement change to the rest of the system is challenging. <p> Conflicts are studied from a more positive perspective in the modern view. They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. <p> They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. Mylopoulos, Chung, and Nixon developed an approach for documenting the design rationale in terms of nonfunctional requirements [8].
Reference: [7] <author> W. N. Robinson, </author> <title> "Negotiation Behavior During Requirements Specification", </title> <booktitle> in Proc. of the 12th International Conference on Software Engineering, </booktitle> <pages> pp. 268-276, </pages> <year> 1990. </year>
Reference-contexts: Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process [5]. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other <ref> [6, 7, 1, 8] </ref>. Many conflicts between requirements are implicit and difficult to identify. Moreover, tradeoffs among conflicting requirements are difficult to assess. Third, requirements change frequently. Identifying the impact of a requirement change to the rest of the system is challenging. <p> Conflicts are studied from a more positive perspective in the modern view. They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. <p> They are considered to be inevitable in the early stage of requirement engineeri ng. They can be beneficial if they can be managed well <ref> [6, 7, 1] </ref>. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. Mylopoulos, Chung, and Nixon developed an approach for documenting the design rationale in terms of nonfunctional requirements [8].
Reference: [8] <author> John Mylopoulos, Lawrence Chung, and Brian Nixon, </author> <title> "Representing and using nonfunctional requirements: A process-oriented approach", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 18, no. 6, </volume> <pages> pp. 483-497, </pages> <month> June, </month> <year> 1992. </year>
Reference-contexts: Actually, as Balzer has pointed out, informality is an inevitable and ultimately desirable feature of the specification process [5]. Therefore, capturing the elasticity of imprecise requirements is an important issue. Second, requirements often conflict with each other <ref> [6, 7, 1, 8] </ref>. Many conflicts between requirements are implicit and difficult to identify. Moreover, tradeoffs among conflicting requirements are difficult to assess. Third, requirements change frequently. Identifying the impact of a requirement change to the rest of the system is challenging. <p> The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely <ref> [9, 8] </ref> or convert imprecise requirements into precise ones [10, 5]. This limits their capability in trade-off analysis of conflicting requirements. <p> Many design rationale documentation methods [11] can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. Mylopoulos, Chung, and Nixon developed an approach for documenting the design rationale in terms of nonfunctional requirements <ref> [8] </ref>. Even though these works can help to detect explicit conflicts, they are limited in detecting implicit conflicts and do not address the issue of trade-off analysis. In this papers, an analytic framework is developed for the specification and analysis of imprecise requirements.
Reference: [9] <author> J.M. Spivey, </author> <title> The Z-notation: A Reference Manual, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely <ref> [9, 8] </ref> or convert imprecise requirements into precise ones [10, 5]. This limits their capability in trade-off analysis of conflicting requirements.
Reference: [10] <author> W. Lewis Johnson, Martin S. Feather and David R. Harris, </author> <title> "The KBSA requirements/specification facet: ARIES", </title> <booktitle> in Proc. of the 6th Annual Knowledge-Based Software Engineering Conference, </booktitle> <address> Syracuse, NY, </address> <pages> pp. 156-162, </pages> <month> Sept. </month> <pages> 22-25, </pages> <year> 1991. </year>
Reference-contexts: The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely [9, 8] or convert imprecise requirements into precise ones <ref> [10, 5] </ref>. This limits their capability in trade-off analysis of conflicting requirements.
Reference: [11] <author> B. Ramesh and V. Dhar, </author> <title> "Support systems development by capturing deliberations during requirements engineering", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 18, no. 6, </volume> <pages> pp. 498-510, </pages> <year> 1992. </year>
Reference-contexts: They can be beneficial if they can be managed well [6, 7, 1]. Several research works have focused in conflict detection and resolution in a requirement engineering framework [6, 7, 1]. Many design rationale documentation methods <ref> [11] </ref> can also be used to identify conflicts by explicitly presenting arguments about issues although they were not developed specifically for the requirement analysis. Mylopoulos, Chung, and Nixon developed an approach for documenting the design rationale in terms of nonfunctional requirements [8].
Reference: [12] <author> L.A. Zadeh, </author> <title> "Test-score semantics as a basis for a computational approach to the representation of meaning", </title> <journal> Literacy Linguistic Computing, </journal> <volume> vol 5, no. 1, </volume> <pages> pp. 24-35, </pages> <year> 1986. </year>
Reference-contexts: The basis for expressing imprecise requirements is the canonical form in Zedah's test score semantics <ref> [12] </ref>. The representation of imprecise requirements on a system development process in canonical form is established by the following definition. <p> Let p denote a development process of the conference scheduling system. The requirements from two perspectives can be represented in the canonical form in fuzzy logic <ref> [12, 13] </ref> as follows: * R 1 : Development Cost (p) should be LOW. * R 2 : Resource (p) should be SMALL. * R 3 : AV G i (P rofit (Schedule (i; P roduct (p)))) should be HIGH, where i denotes an input. * R 4 : AV G
Reference: [13] <author> H.-J. Zimmermann, </author> <title> Fuzzy Set Theory and Its Applications, </title> <publisher> Kluwer Academic, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Let p denote a development process of the conference scheduling system. The requirements from two perspectives can be represented in the canonical form in fuzzy logic <ref> [12, 13] </ref> as follows: * R 1 : Development Cost (p) should be LOW. * R 2 : Resource (p) should be SMALL. * R 3 : AV G i (P rofit (Schedule (i; P roduct (p)))) should be HIGH, where i denotes an input. * R 4 : AV G <p> House 5 Trade-off analysis between require ments 5.1 Recommend aggregation operators Multiple requirements need to aggregated to formulate an overall requirement. There are three types of aggregation operators: fuzzy conjunction, fuzzy conjunction, and fuzzy compromise operators <ref> [13] </ref>. The operator M IN is an example of fuzzy conjunction operators, the operator M AX is an example of fuzzy disjunction operators, and the arithmetic average is an example of fuzzy compromise operators. A set of the cooperative requirements can usually be satisfied at the same time.
Reference: [14] <author> Xiaoqing Frank Liu, </author> <title> A Formal Methodology for the Specification and Analysis of Imprecise Requirements, </title> <institution> Texas A&M University, Department of Computer Science, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Since different treatment recommendations can be generated for different cases, an overall requirement can be obtained using AV ERAGE operator as follows: * The average negative impact of treatment recom mendations should be low. For more discussion about the formal representation of imprecise requirements, readers can refer to <ref> [14, 17, 18] </ref>. 2.2 Specifying imprecise requirements of a Conference Room Scheduling Sys tem (CRSS) Suppose that we are going to develop a conference room scheduler. <p> They are said to be mutually exclusive. Two requirements are said to be irrelevant if satisfying one requirement to a degree does not have any impact Subdomains on the degree another requirement is satisfied. The formal definitions of mutually exclusive and irrelevant requirements can be found in <ref> [14] </ref>. 3.3 Local analysis of relationships be tween requirements in subdomains Trade-off relationships in a subset of the domain is of interest, because they may provide additional insights about the areas in which the trade-off analysis should be focused.
Reference: [15] <author> John R. Hauser and Don Clausing, </author> <title> "The house of quality", </title> <journal> Harvard Business Review, </journal> <volume> vol. 32, no. 5, </volume> <pages> pp. 63-73, </pages> <year> 1988. </year>
Reference-contexts: 7, where the inferred relationships are represented in dashed lines and the original relationships are represented in solid lines. 4.2 Application to house of quality "The house of quality" has been widely used by Japanese and American manufacturers and can document and analyze even hundreds of customers' and engineers' requirements <ref> [15] </ref>. The basic idea behind the house of quality is that products should be designed to reflect customers' needs and engineers' desires so marketing people, design engineers, manufacturing staff must work closely together from the time a product is first conceived. <p> All requirements are then organized into the house of quality and the relationships between customers' requirements and engineers' requirements and the relationships between different engineers' requirements must be analyzed before products are produced. An example of house of quality regarding automobile, given by John R. Hauser <ref> [15] </ref>, is shown in Figure 9, which shows the relationships between customers' and engineers' requirements. We also need to identify the relationships between engineers' requirements. These relationships were usually identified manually [15]. <p> An example of house of quality regarding automobile, given by John R. Hauser <ref> [15] </ref>, is shown in Figure 9, which shows the relationships between customers' and engineers' requirements. We also need to identify the relationships between engineers' requirements. These relationships were usually identified manually [15]. Using the inference techniques about relationships between requirements developed in previous subsection, many of them can be inferred from the relationships between customers' and engineers' requirements shown in Figure 8. <p> The roof in Figure 9 shows some of the inferred relationships between engineers' requirements, which are consistent with the relationships identified manually in <ref> [15] </ref>. House 5 Trade-off analysis between require ments 5.1 Recommend aggregation operators Multiple requirements need to aggregated to formulate an overall requirement. There are three types of aggregation operators: fuzzy conjunction, fuzzy conjunction, and fuzzy compromise operators [13].
Reference: [16] <author> Ralph L. Keeney and Howard Raiffa, </author> <title> Decisions with Multiple Objectives: Preferences and Value Trade Offs, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Thus it is desirable to develop a technique to assist them in identifying the priority of each requirement. Keeney and Raiffa developed the concept of the marginal rate of substitution for the trade off analysis between multiple criteria in decision science <ref> [16] </ref>. It indicates the maximal amount of a decision attribute the customer is willing to sacrifice for a unit increase in another decision attribute. <p> In addition, we assume that the marginal rate of substitution of attribute x j for x i is a constant i;j . Then, w i = a i Proof: Since i;j is the marginal rate of substitution of attribute x j for x i , from its definition <ref> [16] </ref>, we have P n k=1 (w k fi Sat R k (x k )) = P n Sat R j (x j + i;j ): Function That is, w i fi Sat R i (x i ) + w j fi Sat R j (x j ) = Because of <p> It should point out that from the definition of the marginal rate of substitution <ref> [16] </ref>, i;j &lt; 0 if a i fia j &gt; 0 and i;j &gt; 0 if a i fi a j &lt; 0. Let us to give an example to illustrate the theorem.
Reference: [17] <author> John Yen, Xiaoqing Frank Liu and Swee Hor Teh, </author> <title> "A fuzzy logic-based methodology for the acquisition and analysis of imprecise requirements", </title> <journal> The International Journal of Concurrent Engineering: Research and Application (CERA), </journal> <volume> Vol. 2, No.4, </volume> <pages> pp. 265-277, </pages> <month> December, </month> <year> 1994. </year>
Reference-contexts: Since different treatment recommendations can be generated for different cases, an overall requirement can be obtained using AV ERAGE operator as follows: * The average negative impact of treatment recom mendations should be low. For more discussion about the formal representation of imprecise requirements, readers can refer to <ref> [14, 17, 18] </ref>. 2.2 Specifying imprecise requirements of a Conference Room Scheduling Sys tem (CRSS) Suppose that we are going to develop a conference room scheduler. <p> Assume that R i is strenthened to R i . Then, F easibility (R 0 ) F easibility (R): This theorem can be proved directly based on the definition of feasibility and the property of monotonicity of compromise operator <ref> [17, 18] </ref>. It is necessary to assess the impact of changing a requirement on the satisfiability of other requirements. We are particularly interested in the impact of changing the priority of a requirement on the satisfiability of other requirements.
Reference: [18] <author> John Yen and Xiaoqing Frank Liu, </author> <title> "A fuzzy logic-based foundation for analyzing imprecise conflicting requirements", </title> <booktitle> in Proc. of the Third IEEE International Conf. on Fuzzy Systems, </booktitle> <address> Orlando, FL, </address> <pages> pp. 1099-1104, </pages> <year> 1994. </year>
Reference-contexts: Since different treatment recommendations can be generated for different cases, an overall requirement can be obtained using AV ERAGE operator as follows: * The average negative impact of treatment recom mendations should be low. For more discussion about the formal representation of imprecise requirements, readers can refer to <ref> [14, 17, 18] </ref>. 2.2 Specifying imprecise requirements of a Conference Room Scheduling Sys tem (CRSS) Suppose that we are going to develop a conference room scheduler. <p> Assume that R i is strenthened to R i . Then, F easibility (R 0 ) F easibility (R): This theorem can be proved directly based on the definition of feasibility and the property of monotonicity of compromise operator <ref> [17, 18] </ref>. It is necessary to assess the impact of changing a requirement on the satisfiability of other requirements. We are particularly interested in the impact of changing the priority of a requirement on the satisfiability of other requirements.
References-found: 18

