URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/011.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: 
Title: A Verified Operating System Kernel  
Author: William R. Bevier 
Note: This work was sponsored in part by the University of (512) 322-9951 Texas at Austin by the Defense Advanced Research Projects Agency, ARPA Order 5246, issued by the Space and Naval Warfare Systems Command under Contract N00039-85-K-0085 and at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Orders 6082 and 9151. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government.  
Address: 1717 W. 6th St. Suite 290 Austin, Texas 78703  
Affiliation: Computational Logic Inc.  
Date: 11 October, 1987  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [Bach 86] <author> M.J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1986. </year>
Reference-contexts: KIT and its specification are defined in the Boyer-Moore logic, and the proof is mechanically checked with the Boyer-Moore theorem prover [Boyer 79]. It is important to say what we do not handle. We take UNIX as a point of comparison. The UNIX kernel 4 as described by Bach <ref> [Bach 86] </ref> contains two main components: the file subsystem, which besides implementing a file structure also hides the device interface from the user level; and the process control subsystem, which includes process creation and deletion, process communication, process scheduling and memory management. KIT deals with a subset of these phenomena.
Reference: [Bell 71] <author> C. Gordon Bell, Allen Newell. </author> <title> Computer Structures: Readings and Examples. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1971. </year>
Reference-contexts: TM is capable of asynchronous character I/O. It communicates with 16 input devices and 16 output devices by an array of input ports and an array of output ports. Table 4-1 gives a summary of the TM architecture in PMS notation <ref> [Bell 71] </ref>. The structure of the target machine is described in the Boyer-Moore logic by the shell TM. The fields defined by the shell correspond to the fields described in Table 4-1. Shell Definition -668-.
Reference: [Bell 75] <author> D.E. Bell, L.J. LaPadula. </author> <title> Secure Computer Systems: Unified Exposition and Multics Interpretation. </title> <type> Technical Report MTR-2997, </type> <institution> The Mitre Corporation, </institution> <month> July, </month> <year> 1975. </year>
Reference-contexts: In the early seventies the notion became current that a security policy should be implemented in the nucleus of an operating system, a security kernel. A number of efforts attempted to design, implement and verify a security kernel. A security policy given by Bell and LaPadula <ref> [Bell 75] </ref> was the first attempt to formalize a specification for a security kernel. Alternative formulations of security were given by Feiertag, Levitt and Robinson [Feiertag 77], and by Popek and Farber [Popek 78].
Reference: [Berson 79] <author> T.A. Berson, G.L. Barksdale, Jr. </author> <title> KSOS - Development Methodology for a Secure Operating System. </title> <booktitle> In AFIPS Conference Proceedings, </booktitle> <pages> pages 365-371. </pages> <year> 1979. </year>
Reference-contexts: Parts of the design proof were sketched. An implementation was not completed. The main result of the project was a hierarchical methodology for operating system design [Robinson 77]. A group at Ford Aerospace designed a kernelized secure operating system (KSOS) <ref> [McCauley 79, Berson 79] </ref> intended to provide a secure operating system with an interface compatible with UNIX. The security policy for KSOS was approximately the Bell and LaPadula model. Information flow theorems at the design level were checked on the Boyer-Moore theorem prover.
Reference: [Boebert 85] <author> W.E. Boebert, W.D. Young, R.Y. Kain, S.A. Hansohn. </author> <title> Secure Ada Target: Issues, System, Design, and Verification. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 176-183. </pages> <year> 1985. </year>
Reference-contexts: Other security kernels are reported in the literature, including the KVM/370 project [Gold 79], and SCOMP [Fraim 83]. The Secure Ada Target (SAT, now called LOCK) <ref> [Boebert 85] </ref> is an ongoing project at Honeywell. Landwehr [Landwehr 83] gives a useful summary of the state of the art circa 1983. Rushby criticizes the kernel approach to system security [Rushby 81b].
Reference: [Boyer 79] <editor> R.S. Boyer, J S. </editor> <publisher> Moore. </publisher>
Reference-contexts: A set of communicating processes will run as specified on KIT provided there are no hardware errors. The operating system is proved not to introduce implementation bugs. KIT and its specification are defined in the Boyer-Moore logic, and the proof is mechanically checked with the Boyer-Moore theorem prover <ref> [Boyer 79] </ref>. It is important to say what we do not handle. We take UNIX as a point of comparison. <p> Given the right compiler, it is possible to think of KIT as a verified run-time environment for a subset of Gypsy. Accomplishing this is another goal for the future. 95 Appendix A 1 The Boyer-Moore Logic and its Theorem Prover In <ref> [Boyer 79] </ref> we describe a quantifier free first-order logic and a large and complicated computer program that proves theorems in that logic. The major application of the logic and theorem prover is the formal verification of properties of computer programs, algorithms, system designs, etc. <p> In this section we describe the logic and the theorem prover. A.1 The Logic A complete and precise definition of the logic can be found in Chapter III of <ref> [Boyer 79] </ref> together with the minor revisions detailed in section 3.1 of [Boyer 81]. We use the prefix syntax of Pure Lisp to write down terms. For example, we write (PLUS I J) where others might write PLUS (I,J) or I+J. The logic is first-order, quantifier free, and constructive. <p> Using induction it is possible to prove such theorems as the associativity of APPEND: Theorem. (EQUAL (APPEND (APPEND A B) C) (APPEND A (APPEND B C))). A.2 The Mechanization of the Logic The theorem prover for the logic, as it stood in 1979, is described completely in <ref> [Boyer 79] </ref>. Many improvements have been added since. In [Boyer 81] we describe a "metafunction" facility which permits the user to define new proof procedures in the logic, prove them correct mechanically, and have them used efficiently in subsequent proof attempts.
References-found: 6

