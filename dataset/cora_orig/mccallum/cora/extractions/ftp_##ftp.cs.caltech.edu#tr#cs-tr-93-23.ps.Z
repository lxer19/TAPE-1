URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-93-23.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Production Rule Verification for Quasi-Delay-Insensitive Circuits  
Author: James N. Cook 
Degree: In Partial Fulfillment of the Requirements for the Degree of Master of Science  
Date: June 11, 1993  
Address: Pasadena, California  
Affiliation: Department of Computer Science California Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Shahid H. Bokhari. </author> <title> On the mapping problem. </title> <journal> IEEE Tran. Computers, </journal> <volume> 30(3) </volume> <pages> 207-213, </pages> <month> March </month> <year> 1981. </year>
Reference-contexts: In practice, uniformity can be traded for locality of communication. We give several hash functions with different locality/uniformity ratios. One deficiency of this method is that it only produces local communication on hypercube architectures. However, the problem of mapping hypercubes onto other architectures has been studied by other researchers <ref> [1, 6, 7] </ref>, and will not be discussed here. 3.3.1 String Hashing Substantial amounts of research has been spent looking for simple hash functions that generate uniform distributions from string inputs.
Reference: [2] <author> Steven M. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: Quasi-delay-insensitive circuits are a superset of speed-independent circuits; speed-independent circuits can be considered as quasi-delay-insensitive circuits where all wires are labeled isochronic <ref> [2] </ref>. In this document we exclusively consider quasi-delay-insensitive circuits, despite the use of the phrase delay-insensitive to refer to them. The synthesis method works as follows.
Reference: [3] <author> David L. Dill and Edmund M. Clarke. </author> <title> Automatic verification of asynchronous circuits using temporal logic. </title> <editor> In Henry Fuchs, editor, </editor> <booktitle> 1985 Chapel Hill Conference on VLSI, </booktitle> <pages> pages 127-143. </pages> <publisher> Computer Science Press, </publisher> <year> 1985. </year>
Reference-contexts: Delay-insensitive circuits must be asynchronous, since the use of a clock would bound the range of delays possible for correct operation. The property of delay-insensitivity has several desirable consequences for automated design <ref> [3, 10] </ref>: * Facilitated layout. A delay-insensitive design will function correctly after arbitrary changes to the lengths of its wires. * Elimination of global clock signals. This eliminates difficulties in dis tributing the clock signal simultaneously to all parts of the circuit. * Inherently modular designs.
Reference: [4] <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: The notation used for these programs is called CSP (Communicating Sequential Processes) and is based on C.A.R. Hoare's original notation <ref> [4] </ref>. The CSP program is next transformed into a handshaking expansion by reducing it to an equivalent set of processes where all communication actions have been replaced with manipulations of shared variables.
Reference: [5] <author> Donald E. Knuth. </author> <title> The Art of Computer Programming: Searching and Sorting, volume 3. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year> <note> Section 6.4. </note>
Reference-contexts: Unfortunately, this hash function does not distribute states as uniformly as the Pearson's method. 3.3.3 Prime Hashing There is a third choice for a hash function. We can treat our state as a large integer and hash it with the method suggested in Knuth <ref> [5] </ref>. return (state MOD prime) MOD process_count; Since the state may contain a large number of bits the modulo operations must be implemented as multiprecision calculations, but this can be easily done by 16 Pearson XOR Prime SD avg dist SD avg dist SD avg dist Test Case 1 3.04 2.11
Reference: [6] <author> Ten-Hwang Lai and Alan P. Sprague. </author> <title> Placement of the processors of a hypercube. </title> <journal> IEEE Tran. Computers, </journal> <volume> 40(6) </volume> <pages> 714-722, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In practice, uniformity can be traded for locality of communication. We give several hash functions with different locality/uniformity ratios. One deficiency of this method is that it only produces local communication on hypercube architectures. However, the problem of mapping hypercubes onto other architectures has been studied by other researchers <ref> [1, 6, 7] </ref>, and will not be discussed here. 3.3.1 String Hashing Substantial amounts of research has been spent looking for simple hash functions that generate uniform distributions from string inputs.
Reference: [7] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year> <note> Sections 3.2 and 3.3. </note>
Reference-contexts: In practice, uniformity can be traded for locality of communication. We give several hash functions with different locality/uniformity ratios. One deficiency of this method is that it only produces local communication on hypercube architectures. However, the problem of mapping hypercubes onto other architectures has been studied by other researchers <ref> [1, 6, 7] </ref>, and will not be discussed here. 3.3.1 String Hashing Substantial amounts of research has been spent looking for simple hash functions that generate uniform distributions from string inputs.
Reference: [8] <author> Alain J. Martin. </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits. </title> <journal> Distributed Computing, </journal> <volume> 1(4) </volume> <pages> 226-234, </pages> <year> 1986. </year>
Reference-contexts: Fortunately these types of errors can be detected in high-level descriptions of a circuit design. Circuits can be conveniently expressed as lists of production rules, a notation developed by Alain Martin at the California Institute of Technology <ref> [8, 10] </ref>. Lists of production rules can be guaranteed to be free of shorts and hazards by examining them for two properties called stability and noninterference. Delay-insensitive circuits must have these properties for all possible sets of component delays. <p> Under the isochronic fork assumption, some of the gate outputs that are connected to multiple gate inputs are labeled isochronic|these outputs are assumed to arrive at all the connected inputs simultaneously (see <ref> [8, 10] </ref> for details). Quasi-delay-insensitive circuits are a superset of speed-independent circuits; speed-independent circuits can be considered as quasi-delay-insensitive circuits where all wires are labeled isochronic [2]. In this document we exclusively consider quasi-delay-insensitive circuits, despite the use of the phrase delay-insensitive to refer to them.
Reference: [9] <author> Alain J. Martin. </author> <title> The limitations to delay-insensitivity in asynchronous circuits. </title> <editor> In William J. Dally, editor, </editor> <booktitle> Sixth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 263-278. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The class of completely delay-insensitive circuits has been proven to be quite limited <ref> [9] </ref>; quasi-delay-insensitive circuits are delay-insensitive under the assumption of isochronic forks and allow the design of a larger class of circuits.
Reference: [10] <author> Alain J. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <editor> In C. A. R. Hoare, editor, </editor> <booktitle> Developments in Concur-rency and Communication. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <booktitle> UT Year of Programming Institute on Concurrent Programming. </booktitle>
Reference-contexts: Delay-insensitive circuits must be asynchronous, since the use of a clock would bound the range of delays possible for correct operation. The property of delay-insensitivity has several desirable consequences for automated design <ref> [3, 10] </ref>: * Facilitated layout. A delay-insensitive design will function correctly after arbitrary changes to the lengths of its wires. * Elimination of global clock signals. This eliminates difficulties in dis tributing the clock signal simultaneously to all parts of the circuit. * Inherently modular designs. <p> Fortunately these types of errors can be detected in high-level descriptions of a circuit design. Circuits can be conveniently expressed as lists of production rules, a notation developed by Alain Martin at the California Institute of Technology <ref> [8, 10] </ref>. Lists of production rules can be guaranteed to be free of shorts and hazards by examining them for two properties called stability and noninterference. Delay-insensitive circuits must have these properties for all possible sets of component delays. <p> Under the isochronic fork assumption, some of the gate outputs that are connected to multiple gate inputs are labeled isochronic|these outputs are assumed to arrive at all the connected inputs simultaneously (see <ref> [8, 10] </ref> for details). Quasi-delay-insensitive circuits are a superset of speed-independent circuits; speed-independent circuits can be considered as quasi-delay-insensitive circuits where all wires are labeled isochronic [2]. In this document we exclusively consider quasi-delay-insensitive circuits, despite the use of the phrase delay-insensitive to refer to them. <p> We call a set of production rules stable and noninterfering if each individual production rule is stable and all complementary production rules are noninterfering <ref> [10] </ref>. Informally, the stability and noninterference requirements for production rules follow directly from their implementation in CMOS. Figure 2 gives the implementation of two complementary production rules that will illustrate these requirements. :a ! d # The stability and noninterference requirements now become clear.
Reference: [11] <author> Alain J. Martin et al. </author> <title> CAD tools for VLSI design. </title> <type> Report CS-TR-93-09, </type> <institution> California Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: We have devised a notation called port declarations that compactly describes both synchronization and data channels. This notation is convenient for closing production rule sets, and is accepted as input in prlint. The syntax for these declarations is based on that of channel declarations in the CAST program prif <ref> [11] </ref>; these dec larations can be copied into files that will be used with prlint. The syntax for a port declaration is as follows: hport typei port ( hinput listi ; houtput listi ) A port type is one of active or passive.
Reference: [12] <author> Peter K. Pearson. </author> <title> Fast hashing of variable-length text strings. </title> <journal> Communications of the ACM, </journal> <volume> 33(6) </volume> <pages> 677-680, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: One such hash function, described by Pearson <ref> [12] </ref>, has the benefits of being string-based and quick to compute even on small microprocessors. <p> The function is computed as follows: h := 0; for i in 1..length (state) loop h := Table [ h XOR state [i] ]; end loop; return h MOD process_count; 14 15 (As given, this hash function only works for up to 256 processes. In <ref> [12] </ref> Pearson describes ways of extending it to larger values.) Table contains the numbers 0-255 in random order. We use each character of String to store 8 bits of state information.
Reference: [13] <author> Charles L. Seitz. </author> <title> The Cosmic Cube. </title> <journal> Communications of the ACM, </journal> <volume> 28(1) </volume> <pages> 22-33, </pages> <month> January </month> <year> 1985. </year> <month> 33 </month>
Reference-contexts: Of course, this optimization will be dependent on the architecture of the multicomputer used to run the algorithm: the physical wires between processors determine which are neighbors and which are not. For multicomputers that use a hypercube architecture, such as C. L. Seitz's Cosmic Cube <ref> [13] </ref>, we can select a hash function that will cause most communications to be from a process to one of its neighbors.
Reference: [14] <author> Jan L. A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design, </title> <booktitle> volume 200 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year> <month> 34 </month>
Reference-contexts: A particularly interesting class of circuits for automatic generation are delay-insensitive circuits. Delay-insensitive circuits are designed to operate correctly with any arbitrary but finite delay in wires or in operators <ref> [14] </ref>. Delay-insensitive circuits must be asynchronous, since the use of a clock would bound the range of delays possible for correct operation. The property of delay-insensitivity has several desirable consequences for automated design [3, 10]: * Facilitated layout.
References-found: 14

