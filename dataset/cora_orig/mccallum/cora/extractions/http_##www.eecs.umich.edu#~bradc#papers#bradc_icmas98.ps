URL: http://www.eecs.umich.edu/~bradc/papers/bradc_icmas98.ps
Refering-URL: http://www.eecs.umich.edu/~bradc/
Root-URL: http://www.cs.umich.edu
Title: Abstract  
Abstract: Scheduling tasks among cooperative agents requires tradeoffs between various factors including task prior i-ties and context-dependent execution times. We have specifically been investigating the space of functions for evaluating alternative distributed task schedules for multi-operator applications. In this paper, we describe some candidate functions and converge on intuitively appealing functions, which we show to lead to equivalent preferences over distributed schedules. We then look at the computational complexity of finding schedules that (approximately) optimize this function. When context switching costs are thrown into the mix, moreover, the complexity becomes even more daunting. To address these problems, this paper summarizes our work on forging correspondences between our problems and those studied in operations research. Moreover, we have developed a new hill-climbing strategy for solving these problems, and we show that it performs well within the range of parameter settings that are representative of our application domain. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Avrim Blum, Prasad Chalasani, Don Coppersmith, Bill Pulleyblank, Prabhakar Raghavan, Madhu Sudan. </author> <title> The Minimum Latency Problem. </title> <booktitle> Proceedings of the 26 th Sympo sium on the Theory of Computing , pp. </booktitle> <pages> 163-171, </pages> <year> 1994. </year>
Reference-contexts: the cost function ( C) for the cumulative priority strategy for the case where context switches are computed in proportion to the number of mismatched attribute values is related to the NP-hard minimum l a-tency problem (MLT), also referred to as the delivery man problem and/or the traveling repairman problem <ref> [1] </ref>. This is the problem of finding a tour that minimizes the sum of the latencies (distances from the starting point) of all points. There is a constant factor 29 approximation for MLT in the case of a distance matrix adhering to the triangle inequality [1]. <p> and/or the traveling repairman problem <ref> [1] </ref>. This is the problem of finding a tour that minimizes the sum of the latencies (distances from the starting point) of all points. There is a constant factor 29 approximation for MLT in the case of a distance matrix adhering to the triangle inequality [1]. The context switching problem is the same in the relaxed case of a single operator and equal processing times for tasks.
Reference: [2] <author> Peter Brucker. </author> <title> Scheduling Algorithms . Springer-Verlag, </title> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: The optimal policy is to order all tasks according to ascending processing times and then to deal them out to the oper a tors such that the next task is assigned to the operator assigned the shortest total processing time <ref> [2] </ref>. If we assume uniform execution times, the best sche d ule never has a higher priority task begin after a lower priority task. <p> n ) 2 = timeresponse priority i _2 O ( n log n ) 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || a = 1.2 [12] j j Smiths Rule O ( n log n ) P C j SJF <ref> [2] </ref> Performance Evaluation Function No Exec. Times Precedence Constrs. Context Switch 1 = timeresponse priority i _ 1 O ( n log n ) ? NP-hard [2] i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime <p> _ 3 = j j || a = 1.2 [12] j j Smiths Rule O ( n log n ) P C j SJF <ref> [2] </ref> Performance Evaluation Function No Exec. Times Precedence Constrs. Context Switch 1 = timeresponse priority i _ 1 O ( n log n ) ? NP-hard [2] i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || j GPF P prec w C j j j NPC [9] [3] NP-hard [2] Table 1. <p> O ( n log n ) P C j SJF <ref> [2] </ref> Performance Evaluation Function No Exec. Times Precedence Constrs. Context Switch 1 = timeresponse priority i _ 1 O ( n log n ) ? NP-hard [2] i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || j GPF P prec w C j j j NPC [9] [3] NP-hard [2] Table 1. Complexity of scheduling problems case is minimizing weighted completion time. <p> n ) ? NP-hard <ref> [2] </ref> i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || j GPF P prec w C j j j NPC [9] [3] NP-hard [2] Table 1. Complexity of scheduling problems case is minimizing weighted completion time. In addition, recent results for approximation alg o-rithms are given. An a approximation algorithm gua r-antees that the performance will be a factor a of the o p-timal solution.
Reference: [3] <author> C. Chekuri, R. Motwani, B. Natarajan, C. Stein. </author> <title> Approxi mation Techniques for Average Completion Time Sche d uling. </title> <booktitle> Proceedings of the Annual ACM-SIAM Symposium on Discrete Algorithms. </booktitle> <pages> pp. 609-618, </pages> <year> 1997. </year>
Reference-contexts: n log n ) ? NP-hard [2] i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || j GPF P prec w C j j j NPC [9] <ref> [3] </ref> NP-hard [2] Table 1. Complexity of scheduling problems case is minimizing weighted completion time. In addition, recent results for approximation alg o-rithms are given. An a approximation algorithm gua r-antees that the performance will be a factor a of the o p-timal solution.
Reference: [4] <author> Bradley J. Clement, Edmund H. Durfee. </author> <title> Scheduling High-Level Tasks Among Cooperative Agents, </title> <note> http://www.eecs.umich.edu/~bradc/papers , Rev. </note> <month> Apr. </month> <year> 1998. </year>
Reference-contexts: For any two schedules for a set of tasks, they will always agree on which is better. A proof can be found in the longer ve r-sion of this paper <ref> [4] </ref>. 3.5. Schedule evaluation function summary In summary, by considering the relevant factors for schedule evaluation in TAIPE, we have been able to na r-row the space of appropriate evaluation functions. Clearly, the TAIPE starting point is inappropriate. <p> A proof of this is given in a longer version of this paper <ref> [4] </ref>. 4.2. Approximation techniques Clearly, one approximation would be to try to use simple algorithms like TAIPE currently uses, where we can just order based on a value that can be measured for each task. <p> Note that performance is better for fewer tasks and larger ranges of priorities and processing times. However, other results from our simulation <ref> [4] </ref> show that larger numbers of operators and smaller ranges of priorities and execution times improved the probability of finding a global optimum, which is well over 50% for all parameter configurations. Also, very few hill-climbing steps are needed to reach a local optimum, the worst case being 12.
Reference: [5] <author> Keith Decker, Victor Lesser. </author> <title> Quantitative Modeling of Complex Environments. </title> <booktitle> International Journal of Intelligent Sys. in Accounting, Finance, and Management , 2(4), </booktitle> <year> 1994. </year>
Reference-contexts: Context switches between tasks can also be viewed as a hindering relationship between tasks. Task relationships, such as hinders, enables, facilitates, and prec e-dence are computationally described in the TMS (Task Analysis, Environment Modeling, and Simulation) framework <ref> [5] </ref>. TMS provides a method for modeling complex computational task environments. A TMS model aims to analyze, explain, or predict the perfor m-ance of a system or some part of it.
Reference: [6] <author> Edmund Durfee, Jaeho Lee, Marcus Huber, Michael Kur now. TAIPE: </author> <title> Tactical Assistants for Interaction Planning and Execution. </title> <booktitle> Proceedings of the International Conference on Autonomous Agents , pp.443-450, </booktitle> <year> 1997. </year>
Reference-contexts: Specifically, we are looking at the latter application domain; TAIPE (Tactical Assistants for Interaction Planning and Execution) is a system d e-signed for the Navy to help automate ship operation <ref> [6] </ref>. In TAIPE, interaction plans determine the functional components that must be used to manage a display di a-logue for operators to process tasks.
Reference: [7] <author> Michael R. Garey, David S. Johnson. </author> <title> A Guide to the Theory of NP-Completeness . W. </title> <editor> H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: For example, the cost function is known in operations research as weighted average completion time or total weighted completion time. The corresponding decision problem, Scheduling to Minimize Weighted Completion Time, is strongly NP-complete for an arbitrary number of machines and is pseudopolynomial for a fixed number of machines <ref> [7] </ref>. What this means is that we need to co n-sider techniques for simplifying or approximating the calculations. 4.1. Simplifying strategies Several simplifications of the problem ignore factors that introduce complexity. These factors include the di s-tribution across multiple operators, the nonuniform pr i-orities, and the nonuniform execution times.
Reference: [8] <author> Fred Glover. </author> <title> Tabu SearchPart I, </title> <journal> ORSA Journal of Co m puting , 1(3) </journal> <pages> 190-206, </pages> <year> 1989. </year>
Reference-contexts: The idea stems from Tabu Search where tabu moves may be taken if they exceed an aspiration level <ref> [8] </ref>. 5.3 Performance with Context Switching The described algorithm was simulated on data ha v-ing the same characteristics as those of the experiment outlined in Section 4.3 but with the following additional varied parameters: number of task attributes 3, 5, 9 number of values per attribute 3, 10 max context switch
Reference: [9] <author> Leslie A. Hall, Andreas S. Schultz, David B. Shmoys, Joel Wein. </author> <title> Scheduling to Minimize Average Completion Time: Offline and OnLine Approximation Algorithms, </title> <note> http://brutus.mts.jhu.edu/~leslie/#papers . Rev. </note> <month> Mar. </month> <year> 1997. </year>
Reference-contexts: ( n log n ) ? NP-hard [2] i timeresponse priority i _2 O ( n log n ) ? NP-hard [2] 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || j GPF P prec w C j j j NPC <ref> [9] </ref> [3] NP-hard [2] Table 1. Complexity of scheduling problems case is minimizing weighted completion time. In addition, recent results for approximation alg o-rithms are given. An a approximation algorithm gua r-antees that the performance will be a factor a of the o p-timal solution.
Reference: [10] <author> Tsuyoshi Kawaguchi, Seiki Kyan. </author> <title> Worst Case Bound of an (LRF) Schedule for the Mean-Weighted Flow-Time Pro b lem. </title> <journal> Siam Journal on Computing . 15(4) </journal> <pages> 1106-1118, </pages> <year> 1986. </year>
Reference: [11] <author> Jyi-Shane Liu, Katia Sycara. </author> <title> Multiagent Coordination in Tightly Coupled Task Scheduling. </title> <booktitle> Proceedings of the 2nd International Conference on Multi-Agent Systems , pp. </booktitle> <pages> 181-188, </pages> <year> 1996. </year>
Reference: [12] <author> W. Smith. </author> <title> Various Optimizers for SingleStage Produ c tion. </title> <journal> Naval Res. Logist. Quart. </journal> <volume> 3 </volume> <pages> 59-66, </pages> <year> 1956. </year>
Reference-contexts: For the single machine case, schedules are optimized by applying Smiths Rule <ref> [12] </ref>, which o r ders tasks according to priority / execution_time ratios. If we assume uniform priorities, computing a distri b uted schedule is similarly easy. <p> Single Machine No Priorities 1 = timeresponse priority i _ 1 O ( n log n ) 2 = timeresponse priority i _2 O ( n log n ) 3 C pri resp time i i = _ periodtime dttprioritycum U _ 3 = j j || a = 1.2 <ref> [12] </ref> j j Smiths Rule O ( n log n ) P C j SJF [2] Performance Evaluation Function No Exec. Times Precedence Constrs.

References-found: 12

