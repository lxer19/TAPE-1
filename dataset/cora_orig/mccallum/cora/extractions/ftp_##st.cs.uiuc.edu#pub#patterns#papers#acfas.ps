URL: ftp://st.cs.uiuc.edu/pub/patterns/papers/acfas.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/patterns/papers/
Root-URL: http://www.cs.uiuc.edu
Date: 1/12  
Abstract: Much as object-oriented programming allows for the creation of more reusable components, it is the reuse of the design of an application that is most promising for attaining the goals of reusability. Object-oriented frameworks further design-level reuse, in that they allow for reusing the abstract design of an entire application, modelling each major component with an abstract class. Yet, application design based on frameworks remains a difficult endeavor, and a comprehensive approach to represent and document designs based on frameworks is still missing. In our work, we have developed a multi-layered model for framework reuse which comprises reuse objects at different levels of abstraction, most notably, micro-architectures. We have adopted, refined, and integrated novel techniques for the representation and documentation of micro-architectures and frameworks, namely, design patterns, contracts, and motifs. We believe that our approach is a valuable step towards better exploiting the reuse potential of frameworks. Keywords: Object-oriented, framework, design, reuse level, micro-architecture, design pattern, contract, motif. 
Abstract-found: 1
Intro-found: 1
Reference: [Ale79] <author> Christopher Alexander. </author> <title> The timeless way of building. </title> <publisher> Oxford University Press, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference-contexts: In architecture, a pattern is an architectural design or style. Alexander, an architect, was one of the early pio neers in design pattern theory <ref> [Ale79] </ref>, Indeed each building and each town is ultimately made out of patterns in the space, and out of nothing else; they [patterns in the space] are the atoms and molecules from which a building or town is made.
Reference: [BR87] <author> T. Biggerstaff and C. Richter. </author> <title> Reusability framework, assessment, and directions. </title> <journal> IEEE Software, </journal> <volume> 4(2):4149, </volume> <month> March </month> <year> 1987. </year>
Reference-contexts: It is important to note that not all contract/micro-architecture pairs will have a describing design pattern, in fact very few. A true design pattern will be non-trivial and will be applicable to several applications [GHJV93a]. This agrees with the claim made by Biggerstaff <ref> [BR87] </ref> that the broad structures (partial micro-architectures) are highly reusable and that the details typically are not. The broad structures must be, at a high-level, precisely described, while the details must be left incomplete and partially ambiguous.
Reference: [Bro87] <author> Frederick P. Brooks. </author> <title> No silver bullet - essence and accidents of software engineering. </title> <journal> IEEE Computer, </journal> <volume> 20(4):114, </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Brooks, for instance, has stated that software reuse is an area where the greatest productivity results can be achieved because reuse addresses the essence, as opposed to the accidents of the development problem <ref> [Bro87] </ref>. It is however a mistake to assume that reuse does not pose any challenges. According to Freeman, the state-of-the-practice of reuse is embarrassing [Fre87]. The present situation, and concern amongst researchers, is that software reuse is not living up to its original expectations [Kru92].
Reference: [Coa92] <author> Peter Coad. </author> <title> Object-oriented patterns. </title> <journal> Communications of the ACM, </journal> <volume> 35(9):152159, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: Design patterns, as presented by Gamma et al. in [GHJV93a] (see also <ref> [Coa92] </ref>), are a new way to identify and name micro-architectures. They are a mechanism for expressing how components interrelate as well as a high-level representation technique for properly capturing and expressing design experience and intent to ultimately facilitate design reuse.
Reference: [DK76] <author> Frank DeRemer and Hans H. Kron. </author> <title> Programming-in-the-large versus programming-in-the-small. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 2(2):8086, </volume> <month> June </month> <year> 1976. </year>
Reference-contexts: As criterion for classification, we have chosen, as did Krueger and several others before [Kru92], the abstraction level of the different software artifacts involved. Similar to the notion of programming-in-the-small, - in-the-middle, and -in-the-large <ref> [DK76] </ref>, we have identified three different levels of reuse and abstraction in frameworks (see Figure 1). The first, reuse-in-the-small, involves low-level reuse, i.e., the reuse of a class, method, and/or code fragment. For example, using a subclass that was derived from an abstract class is reuse-in-the-small.
Reference: [Fre87] <author> Peter Freeman. </author> <title> A perspective on reusability. </title> <booktitle> In Tutorial: Software Reusability, </booktitle> <pages> pages 28. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: It is however a mistake to assume that reuse does not pose any challenges. According to Freeman, the state-of-the-practice of reuse is embarrassing <ref> [Fre87] </ref>. The present situation, and concern amongst researchers, is that software reuse is not living up to its original expectations [Kru92]. Object-oriented approaches have been touted as means for significantly improving software quality and the underlying development effort.
Reference: [Gam92] <author> Erich Gamma. </author> <title> Object-oriented Software Development exemplified with ET++: Design Patterns, Class Library, and Tools. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany, </address> <year> 1992. </year> <type> Book version of PhD thesis, </type> <institution> University of Zrich, Switzerland, </institution> <note> 1991; in German. </note>
Reference-contexts: defining abstractions consequently, reducing a frameworks learning time; provide building blocks from which more complex designs can be built, for example, the framework itself; provide targets for the refactoring of class hierarchies. 4 Describing Micro-Architectures In this section, we shall discuss design patterns, as introduced by Gamma et al. in <ref> [Gam92, GHJV93a] </ref>, and contracts [HHG90], two techniques for describing micro-architectures at a very high level and an intermediate level respectively.
Reference: [GHJV93a] <author> E. Gamma, R. Helm, R Johnson, and J. Vlissides. </author> <title> Design patterns: Abstraction and reuse of object oriented design. </title> <booktitle> In Proceedings of the 7th EuropeanConference on Object-Oriented Programming (ECOOP 93), </booktitle> <address> Kaiserlauten, Germany, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: As part of the Macrotec work, we have developed a new approach to address these issues [Laj93]. The major contributions of our research are: the introduction and description of different levels of reuse in frameworks together with corresponding design components; the identification of framework micro-architectures <ref> [GHJV93a] </ref> as key components for reusable designs; the refinement of existing techniques for the representation and documentation of micro-architectures and frameworks; the integration of these techniques into a uniform model. In this paper, we first review frameworks and introduce a multi-layered model for their reuse. <p> They may have even been developed in a different programming language and/or with an approach that is not based on frameworks. Thus, the target system need not care about the design and implementation details of the 2 The term micro-architecture is introduced by Gamma et al. in <ref> [GHJV93a] </ref>. applications, given that there is no intention of modifying or extending them. In Figure 1, shading is used to represent the different abstraction levels of reuse objects and hence their varying degrees of encapsulation. <p> As class frameworks codify design knowledge of a particular domain, micro-architectures, as introduced in the previous section, codify design knowledge in terms of the behavior of object collaborations. Micro-architectures are a way to abstract and to reuse design experience. According to Gamma et al. <ref> [GHJV93a] </ref>, there are object-oriented design structures that emerge repeatedly in the development of frameworks. These structures, micro architectures, are of course known by the framework designers, but unfortunately by very few others. <p> Providing designers and application developers with a set of micro-architectures specified by way of design patterns may be beneficial in several ways (cf. <ref> [GHJV93a] </ref>). <p> defining abstractions consequently, reducing a frameworks learning time; provide building blocks from which more complex designs can be built, for example, the framework itself; provide targets for the refactoring of class hierarchies. 4 Describing Micro-Architectures In this section, we shall discuss design patterns, as introduced by Gamma et al. in <ref> [Gam92, GHJV93a] </ref>, and contracts [HHG90], two techniques for describing micro-architectures at a very high level and an intermediate level respectively. <p> Design patterns, as presented by Gamma et al. in <ref> [GHJV93a] </ref> (see also [Coa92]), are a new way to identify and name micro-architectures. They are a mechanism for expressing how components interrelate as well as a high-level representation technique for properly capturing and expressing design experience and intent to ultimately facilitate design reuse. <p> Design patterns become much clearer, when they are accompanied by example implementation code. We believe that examples, as described by contracts (see below), help designers understand some of the intended details behind the design. For this reason, we have modified the design pattern template originally proposed in <ref> [GHJV93a] </ref> to include the section Contract Examples (see 4.2 Contracts Design patterns describe framework design at a very high level. To ease the derivation of concrete designs from them, an intermediate representation is required. <p> It is important to note that not all contract/micro-architecture pairs will have a describing design pattern, in fact very few. A true design pattern will be non-trivial and will be applicable to several applications <ref> [GHJV93a] </ref>. This agrees with the claim made by Biggerstaff [BR87] that the broad structures (partial micro-architectures) are highly reusable and that the details typically are not. The broad structures must be, at a high-level, precisely described, while the details must be left incomplete and partially ambiguous.
Reference: [GHJV93b] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> A catalog of object-oriented design patterns. </title> <type> Technical report, </type> <institution> Taligent Inc., Cupertino, </institution> <address> CA, </address> <year> 1993. </year> <type> preprint. </type>
Reference-contexts: We, in developing the Macrotec prototype from the ET++ framework [WGM89], reused many design patterns, without initially understanding the internal protocol and functionality. It was not until receiving a catalog of design patterns <ref> [GHJV93b] </ref> that we realized we were indeed dealing with pre-designed micro-architectures. This consequently helped us improve our design and, more importantly, lead to the understanding and hence resolution of some run time errors we had previously been unable to deal with. <p> For lack of space, we have not provided examples in this paper. A rich collection of design patterns and examples can be found in <ref> [GHJV93b] </ref>; our work is further illustrated in [Laj93]. Just as the Inuit has many different words for snow, we have many words for reusability.
Reference: [HHG90] <author> Richard Helm, Ian M. Holland, and Dipayan Gangopadhyay. </author> <title> Contracts: Specifying behavioral compositions in object-oriented systems. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications, </booktitle> <pages> pages 169180, </pages> <address> Ottawa, Canada, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: a frameworks learning time; provide building blocks from which more complex designs can be built, for example, the framework itself; provide targets for the refactoring of class hierarchies. 4 Describing Micro-Architectures In this section, we shall discuss design patterns, as introduced by Gamma et al. in [Gam92, GHJV93a], and contracts <ref> [HHG90] </ref>, two techniques for describing micro-architectures at a very high level and an intermediate level respectively. <p> To ease the derivation of concrete designs from them, an intermediate representation is required. This intermediate representation applies best to behavioral design patterns, the patterns that are typically found at the core of most application designs. Often these intermediate representations are called contracts <ref> [HHG90, Hol92] </ref>. A contract is a construct for explicitly specifying interactions among groups of objects. Recent literature recognizes the importance of object behavior collaborations [WBJ90] and responsibilities [WBWW90]; contracts formalize these collaborations and behavior relationships. There is no consensus yet as to contract formalisms and their level of abstraction.
Reference: [HM84] <author> E. Horowitz and J.B. Munson. </author> <title> An expansive view of reusable software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(5):477487, </volume> <month> September </month> <year> 1984. </year>
Reference-contexts: Thats a model I can hold in my head, and when I look at code and interface files, I see that model realized. I dont really know how to draw pictures about it [WBVC + 90]. 7 Conclusions As Horowitz pointed out <ref> [HM84] </ref>, one of the main inhibiting factors for the reuse of design is the lack of design representations that promote reuse. We have proposed design patterns and contracts as design representations of micro-architectures. We have concentrated on micro-architectures (behavioral compositions, collaborating classes) and their underlying design rather than on classes.
Reference: [Hol92] <author> Ian M. Holland. </author> <title> Specifying reusable components using Contracts. </title> <booktitle> In Proceedings of the 6th European Conference on Object-Oriented Programming (ECOOP 92), </booktitle> <pages> pages 287308, </pages> <year> 1992. </year> <note> em LNCS/ 615. </note>
Reference-contexts: To ease the derivation of concrete designs from them, an intermediate representation is required. This intermediate representation applies best to behavioral design patterns, the patterns that are typically found at the core of most application designs. Often these intermediate representations are called contracts <ref> [HHG90, Hol92] </ref>. A contract is a construct for explicitly specifying interactions among groups of objects. Recent literature recognizes the importance of object behavior collaborations [WBJ90] and responsibilities [WBWW90]; contracts formalize these collaborations and behavior relationships. There is no consensus yet as to contract formalisms and their level of abstraction. <p> Recent literature recognizes the importance of object behavior collaborations [WBJ90] and responsibilities [WBWW90]; contracts formalize these collaborations and behavior relationships. There is no consensus yet as to contract formalisms and their level of abstraction. Attempts to use special-purpose programming languages have not been successful to date <ref> [Hol92] </ref>. Meyer has introduced contracts in the Eiffel language [Mey92], however, at a rather low level of abstraction. A recent approach by Wu and Barbeau attempts to apply them to requirements engineering and to transform them into colored Petri nets [WB94].
Reference: [JF88] <author> Ralph E. Johnson and Brian Foote. </author> <title> Designing reusable classes. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 4(2):2235, </volume> <month> June/July </month> <year> 1988. </year>
Reference-contexts: Object-oriented approaches have been touted as means for significantly improving software quality and the underlying development effort. Particularly, object-oriented frameworks are believed to facilitate sound software designs which lend themselves to reuse <ref> [JF88] </ref>. Yet, according to Wirfs-Brock and Johnson [WBJ90], several major research problems remain to be solved, including design and assessment of frameworks, application design based on frameworks, and adequate design notations for frameworks. Furthermore, the framework approach needs large-scale validation in practice. <p> Frameworks are typically designed by experts in a particular domain and then used by non-experts. A framework allows for reusing the abstract design of an entire application, modelling each major component with an abstract class 1 <ref> [JF88] </ref>. 1 Abstract classes are classes that are incompletely specified and designed to be subclassed rather than themselves instantiated. Frameworks are not class libraries, they are in fact much more.
Reference: [Joh92] <author> Ralph Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications, </booktitle> <pages> pages 6376, </pages> <address> Vancouver, B.C., </address> <month> October </month> <year> 1992. </year> <note> [KLO + 93] Rudolf K. </note> <author> Keller, Richard Lajoie, Marianne Ozkan, Fayez Saba, Xijin Shen, Tao Tao, and 12/12 G. v. Bochmann. </author> <title> The Macrotec toolset for CASE-based business modelling. </title> <booktitle> In Proceedings of the Sixth International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 114118, </pages> <address> Singapore, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: We propose the adoption of a set of motifs to show how to use a framework. The concept of motif was introduced by Johnson <ref> [Joh92] </ref> under the term pattern. We have slightly modified his ideas and adapted them to the abstraction levels of framework design descriptions proposed in the previous sections. We have introduced the term motif 4 in order to avoid confusion with design patterns.
Reference: [KOS94] <author> Rudolf K. Keller, Marianne Ozkan, and Xijin Shen. </author> <title> Towards comprehensive support for the dynamic analysis of Petri net based models. </title> <booktitle> In Proceedings of the 15th International Conference on Application and Theory of Petri Nets, </booktitle> <address> Zaragoza, Spain, </address> <month> June </month> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: Furthermore, the framework approach needs large-scale validation in practice. Over the past two years, we have been involved in the development of Macrotec, a prototype environment for business modelling and reengineering <ref> [KLO + 93, KOS94] </ref>, which we have engineered with ET++ [WGM89], an object-oriented framework. When using the framework, we faced issues similar to the ones raised by Wirfs-Brock and Johnson.
Reference: [Kru92] <author> Charles W. Krueger. </author> <title> Software reuse. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(2):131183, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: It is however a mistake to assume that reuse does not pose any challenges. According to Freeman, the state-of-the-practice of reuse is embarrassing [Fre87]. The present situation, and concern amongst researchers, is that software reuse is not living up to its original expectations <ref> [Kru92] </ref>. Object-oriented approaches have been touted as means for significantly improving software quality and the underlying development effort. Particularly, object-oriented frameworks are believed to facilitate sound software designs which lend themselves to reuse [JF88]. <p> Thus, in general, it is more difficult to learn using frameworks than class libraries. Also, frameworks carry the risk of being misused. However, their potential for reuse greatly exceeds that of class libraries. 3/12 2.2 Levels of Reuse in Frameworks As Krueger <ref> [Kru92] </ref> points out, there is a great diversity in the software engineering technologies that involve some form of software reuse. This applies also, on a smaller scale, to framework reuse. A prerequisite for adequately describing and representing the different objects of reuse in frameworks, is their classification. <p> This applies also, on a smaller scale, to framework reuse. A prerequisite for adequately describing and representing the different objects of reuse in frameworks, is their classification. As criterion for classification, we have chosen, as did Krueger and several others before <ref> [Kru92] </ref>, the abstraction level of the different software artifacts involved. Similar to the notion of programming-in-the-small, - in-the-middle, and -in-the-large [DK76], we have identified three different levels of reuse and abstraction in frameworks (see Figure 1).
Reference: [Laj93] <author> Richard Lajoie. </author> <title> Using, reusing and describing object-oriented frameworks. </title> <type> Masters thesis, </type> <institution> McGill University, </institution> <address> Montreal, PQ, Canada, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Specifically, we were confronted with the problem of understanding the preexisting software and with the challenge of designing and documenting our software for future reuse. As part of the Macrotec work, we have developed a new approach to address these issues <ref> [Laj93] </ref>. <p> We have slightly modified his ideas and adapted them to the abstraction levels of framework design descriptions proposed in the previous sections. We have introduced the term motif 4 in order to avoid confusion with design patterns. Below, we shall provide an overview of motifs, for details refer to <ref> [Laj93] </ref>. Each motif describes a situation which must be replicated in order to use the framework. All motifs have the same format (see Figure 5). They begin with a title of the format Motif:application name. <p> For lack of space, we have not provided examples in this paper. A rich collection of design patterns and examples can be found in [GHJV93b]; our work is further illustrated in <ref> [Laj93] </ref>. Just as the Inuit has many different words for snow, we have many words for reusability. A plausible conclusion is that reusability of framework components is (or should be) as important in our lives of software engineers as snow is in the life of the Inuit.
Reference: [Lea94] <author> Doug Lea. Christopher Alexander: </author> <title> an introduction for object-oriented designers. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 19(1):3946, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: Similarly, 3 each framework and its derived applications are ultimately implemented out of micro-architec 3 A detailed discussion of the relation between Alexanders patterns and design patterns is given in <ref> [Lea94] </ref>. 6/12 tures, they are the atoms and molecules from which a system is designed and built. Design patterns, as presented by Gamma et al. in [GHJV93a] (see also [Coa92]), are a new way to identify and name micro-architectures.
Reference: [Mey92] <author> Bertrand Meyer. </author> <title> Applying design by contract. </title> <journal> IEEE Computer, </journal> <volume> 25(10):4051, </volume> <month> October </month> <year> 1992. </year>
Reference-contexts: There is no consensus yet as to contract formalisms and their level of abstraction. Attempts to use special-purpose programming languages have not been successful to date [Hol92]. Meyer has introduced contracts in the Eiffel language <ref> [Mey92] </ref>, however, at a rather low level of abstraction. A recent approach by Wu and Barbeau attempts to apply them to requirements engineering and to transform them into colored Petri nets [WB94]. Most approaches, including our own, are based on some informal notation, typically pseudo code.
Reference: [OBHS86] <author> Tim OShea, Kent Beck, Dan Halbert, and Kurt J. Schmucker. </author> <title> Panel on: The learnability of object-oriented programming systems. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications, </booktitle> <pages> pages 502504, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: To successfully use and reuse frameworks, it is now up to us to become a new breed of developers, developers with a new attitude towards using not invented by me code, developers, to quote from Beck <ref> [OBHS86] </ref>, with an obsession for simplicity, who are willing to rewrite code several times to produce easy-to-understand and easy-to-subclass classes. For lack of space, we have not provided examples in this paper.
Reference: [WB94] <author> Qun Wu and Michel Barbeau. </author> <title> Verification of object-oriented specifications. </title> <type> Technical report, </type> <institution> Universit de Sherbrooke, Sherbrooke, Qubec, Canada, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Meyer has introduced contracts in the Eiffel language [Mey92], however, at a rather low level of abstraction. A recent approach by Wu and Barbeau attempts to apply them to requirements engineering and to transform them into colored Petri nets <ref> [WB94] </ref>. Most approaches, including our own, are based on some informal notation, typically pseudo code. The contract template presented in Figure 4 illustrates our contract description technique. Each contract begins with cross-references to the pertinent design pattern and/or motif (s) (described next section).
Reference: [WBJ90] <author> Rebecca J. Wirfs-Brock and Ralph E. Johnson. </author> <booktitle> Surveying current research in object-oriented design. Communications of the ACM, </booktitle> <address> 33(9):104124, </address> <month> September </month> <year> 1990. </year> <note> [WBVC + 90] Allen Wirfs-Brock, </note> <author> John Vlissides, Ward Cunningham, Ralph Johnson, and Lonnie Bollette. </author> <title> Designing reusable designs: Experiences designing object-oriented frameworks. </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming: Systems, Languages and Applications, Addendum to the Proceedings, pages 1924, </booktitle> <address> Ottawa, Canada, </address> <month> October </month> <year> 1990. </year> <title> Panel Discussion. </title>
Reference-contexts: Object-oriented approaches have been touted as means for significantly improving software quality and the underlying development effort. Particularly, object-oriented frameworks are believed to facilitate sound software designs which lend themselves to reuse [JF88]. Yet, according to Wirfs-Brock and Johnson <ref> [WBJ90] </ref>, several major research problems remain to be solved, including design and assessment of frameworks, application design based on frameworks, and adequate design notations for frameworks. Furthermore, the framework approach needs large-scale validation in practice. <p> Using frameworks thus allows designers to concentrate on the application-specific design issues. The designer is provided with both top-down and bottom-up support in the design decision process. Framework-based design reuse techniques are only now beginning to receive greater attention for their potential for reuse pay off <ref> [WBJ90] </ref>. 3.2 The Role of Micro-Architectures Clearly, frameworks provide a means for the reuse of both design and code. Some aspects of a design, such as the kind of objects, are easily described by code. Other aspects, however, such as the interaction among groups of objects, are not easily expressed. <p> Often these intermediate representations are called contracts [HHG90, Hol92]. A contract is a construct for explicitly specifying interactions among groups of objects. Recent literature recognizes the importance of object behavior collaborations <ref> [WBJ90] </ref> and responsibilities [WBWW90]; contracts formalize these collaborations and behavior relationships. There is no consensus yet as to contract formalisms and their level of abstraction. Attempts to use special-purpose programming languages have not been successful to date [Hol92].
Reference: [WBWW90] <author> Rebecca Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: Often these intermediate representations are called contracts [HHG90, Hol92]. A contract is a construct for explicitly specifying interactions among groups of objects. Recent literature recognizes the importance of object behavior collaborations [WBJ90] and responsibilities <ref> [WBWW90] </ref>; contracts formalize these collaborations and behavior relationships. There is no consensus yet as to contract formalisms and their level of abstraction. Attempts to use special-purpose programming languages have not been successful to date [Hol92].
Reference: [WGM89] <author> Andr Weinand, Erich Gamma, and Rudolf Marty. </author> <title> Design and implementation of ET++, a seamless object-oriented application framework. Structured Programming, </title> <address> 10(2):6387, </address> <month> April-June </month> <year> 1989. </year>
Reference-contexts: Furthermore, the framework approach needs large-scale validation in practice. Over the past two years, we have been involved in the development of Macrotec, a prototype environment for business modelling and reengineering [KLO + 93, KOS94], which we have engineered with ET++ <ref> [WGM89] </ref>, an object-oriented framework. When using the framework, we faced issues similar to the ones raised by Wirfs-Brock and Johnson. Specifically, we were confronted with the problem of understanding the preexisting software and with the challenge of designing and documenting our software for future reuse. <p> Design patterns may be described in an informal, template-based manner (see Figure 3). A designers familiarization with a set of design patterns (micro-architectures) is the starting point in design reuse. We, in developing the Macrotec prototype from the ET++ framework <ref> [WGM89] </ref>, reused many design patterns, without initially understanding the internal protocol and functionality. It was not until receiving a catalog of design patterns [GHJV93b] that we realized we were indeed dealing with pre-designed micro-architectures.
References-found: 24

