URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/scandal/public/papers/spaa96.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/jch/www/publications.html
Root-URL: 
Title: From AAPC Algorithms to High Performance Permutation Routing and Sorting  
Author: Thomas M. Stricker and Jonathan C. Hardwick 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: June 1996.  
Note: Proceedings of the 8th ACM Symposium on Parallel Algorithms and Architectures,  
Abstract: Several recent papers have proposed or analyzed optimal algorithms to route all-to-all personalized communication (AAPC) over communication networks such as meshes, hypercubes and omega switches. However, the constant factors of these algorithms are often an obscure function of system parameters such as link speed, processor clock rate, and memory access time. In this paper we investigate these architectural factors, showing the impact of the communication style, the network routing table, and most importantly, the local memory system, on AAPC performance and permutation routing on the Cray T3D. The fast hardware barriers on the T3D permit a straightforward AAPC implementation using routing phases separated by barriers, which improve performance by controlling congestion. However, we found that a practical implementation was difficult, and the resulting AAPC performance was less than expected. After detailed analysis, several corrections were made to the AAPC algorithm and to the machine's routing table, raising the performance from 41% to 74% of the nominal bisection bandwidth of the network. Most AAPC performance measurements are for permuting large, contiguous blocks of data (i.e., every processor has an array of P contiguous elements to be sent to every other processor). In practice, sorting and true h h permutation routing 1 require data elements to be gathered from their source location into a buffer, transferred over the network, and scattered into their final location in a destination array. We obtain an optimal T3D implementation by chaining local and remote memory operations together. We quantify the implementation's efficiency both experimentally and theoretically, using the recently-introduced copy transfer model, and present results for a counting sort based on this AAPC implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.H. Arpaci, D.E. Culler, A. Krishnamurthy, S.G. Steinberg, and K. Yelick. </author> <title> Empirical evaluation of the Cray T3D. </title> <booktitle> In Proc. 22nd Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 320-331, </pages> <address> Portofino, Italy, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). Again, we refer to previous surveys of sorting algorithms and implementations [3, 10, 2, 5]. In Section 2 we describe an AAPC implementation on the Cray T3D <ref> [1] </ref> that achieves performance close to nominal bandwidth. Section 3 shows how the performance of local and remote memory operations affects the end-to-end routing performance.
Reference: [2] <author> D. Bader, D. Helmann, and J. JaJa. </author> <title> Practical parallel algorithms for personalized communication and integer sorting. </title> <type> Technical Report TR-CS-95-3548, UMIACS, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: For further details, we refer the reader to a good description of the history of AAPC and a survey of algorithms <ref> [2] </ref>. An efficient AAPC implementation is critical, since it determines the speed of transposes and array redistributions. Furthermore, it is a significant factor in the overall performance of commonly-used algorithms such as sorting. For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). <p> Furthermore, it is a significant factor in the overall performance of commonly-used algorithms such as sorting. For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). Again, we refer to previous surveys of sorting algorithms and implementations <ref> [3, 10, 2, 5] </ref>. In Section 2 we describe an AAPC implementation on the Cray T3D [1] that achieves performance close to nominal bandwidth. Section 3 shows how the performance of local and remote memory operations affects the end-to-end routing performance. <p> A previously reported portable implementation of radix sort written in Split-C achieves a sorting performance of 4 million 32-bit keys in just under 6 seconds on an 8-processor T3D <ref> [2] </ref>, for a sorting performance of approximately 330 kBytes/s per processor. This is equivalent to two 16-bit counting sort passes, each with a memory performance of approximately 660 kBytes/s per processor.
Reference: [3] <author> G.E. Blelloch, C.E. Leiserson, B.M. Maggs, C.. Plaxton, S.J. Smith, and M. Zagha. </author> <title> A comparison of sorting algorithms for the Connection Machine CM-2. </title> <booktitle> In Proc. Symp. Parallel Algorithms and Architectures, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Furthermore, it is a significant factor in the overall performance of commonly-used algorithms such as sorting. For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). Again, we refer to previous surveys of sorting algorithms and implementations <ref> [3, 10, 2, 5] </ref>. In Section 2 we describe an AAPC implementation on the Cray T3D [1] that achieves performance close to nominal bandwidth. Section 3 shows how the performance of local and remote memory operations affects the end-to-end routing performance.
Reference: [4] <author> D. Helmann, D. Bader, and J. JaJa. </author> <title> A parallel sorting algorithm with an experimental study. </title> <type> Technical Report TR-CS-95-3549, UMIACS, </type> <institution> University of Maryland, College Park, MD 20742, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: A subsequent implementation of a highly optimized sample sort, which only requires a single counting and routing pass, sorts 4 million 64-bit integers in 0.894 seconds on a 16-processor T3D, for a sorting performance of 2.24 MBytes/s per processor <ref> [4] </ref>. 5 Conclusions We have quantified the performance benefits of a global well-synchronized all-to-all personalized communication implementation, using the best-known message-passingmechanism on the Cray T3D.
Reference: [5] <author> T. Stricker. </author> <title> Supporting the hypercube programming model on meshes; (a fast parallel sorter for iwarp). </title> <booktitle> In Proc. Symp. Parallel Algorithms and Architectures, </booktitle> <pages> pages 148-157, </pages> <address> San Diego, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Furthermore, it is a significant factor in the overall performance of commonly-used algorithms such as sorting. For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). Again, we refer to previous surveys of sorting algorithms and implementations <ref> [3, 10, 2, 5] </ref>. In Section 2 we describe an AAPC implementation on the Cray T3D [1] that achieves performance close to nominal bandwidth. Section 3 shows how the performance of local and remote memory operations affects the end-to-end routing performance.
Reference: [6] <author> T. Stricker and T. Gross. </author> <title> Optimizing memory system performance for communication in parallel computers. </title> <booktitle> In Proc. 22nd Intl. Symp. on Computer Architecture, </booktitle> <pages> pages 308-319, </pages> <address> Portofino, Italy, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The tradeoffs are described in <ref> [6] </ref>, which also introduces the copy-transfer model used to reason about the different internal data transfers involved in a composite communication primitive such as a full permutation AAPC. In the copy-transfer model a permutation is defined by its memory access pattern. <p> For the T3D we obtain two formulas, one for buffer packing and one for chained transfers, as shown below. For further details see <ref> [6] </ref>.
Reference: [7] <author> T. Stricker, J. Stichnoth, D. O'Hallaron, S. Hinrichs, and T. Gross. </author> <title> Decoupling synchronization and data transfer in message passing systems of parallel computers. </title> <booktitle> In Proc. Intl. Conf. on Supercomputing, </booktitle> <pages> pages 1-10, </pages> <address> Barcelona, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: While the data elements are stored in a distributed array, the permutation itself is specified by a table of index pairs, where each table entry contains a source index and a destination index. Using the direct deposit model <ref> [7] </ref>, synchronization and consistency are guaranteed by the use of hardware barriers, and the data transfers are performed by remote stores using the messaging system.
Reference: [8] <author> Thomas M. Stricker and Jonathan C. Hardwick. </author> <title> From AAPC algorithms to high performance permutation routing and sorting. </title> <type> Technical Report CMU-CS-96-120, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> April </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The bit patterns for the particular AAPC patterns used result in the same route being chosen every time. The solution is a revision of the AAPC patterns (see <ref> [8] </ref> for details). This improves aggregate performance to 23,910 MByte/s (46.7 MByte/s per processor), or 62% of the nominal bisection bandwidth. 2 The nominal bisection bandwidth is based on a link speed of 75 MByte/s.
Reference: [9] <author> A. Thakur, R. Ponnusamy, A. Choudhary, and G. Fox. </author> <title> Complete exchange on the CM-5 and Touchstone Delta. </title> <journal> Journal of Supercomputing, </journal> (8):305-328, 1995. 
Reference: [10] <author> Marco Zagha and Guy E. Blelloch. </author> <title> Radix sort for vector multiprocessors. </title> <booktitle> In Proceedings Supercomputing '91, </booktitle> <pages> pages 712-721, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Furthermore, it is a significant factor in the overall performance of commonly-used algorithms such as sorting. For many modern parallel machines, the fastest sorting algorithms are based on counting algorithms (e.g., radix sorts). Again, we refer to previous surveys of sorting algorithms and implementations <ref> [3, 10, 2, 5] </ref>. In Section 2 we describe an AAPC implementation on the Cray T3D [1] that achieves performance close to nominal bandwidth. Section 3 shows how the performance of local and remote memory operations affects the end-to-end routing performance. <p> The optimal trade-off between bucket work and key work must be computed separately: an explanation of how to do this is given in <ref> [10] </ref>.
References-found: 10

