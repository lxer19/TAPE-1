URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-behavior.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: faiken, widomg@almaden.ibm.com, joey@postgres.berkeley.edu  
Title: Behavior of Database Production Rules: Termination, Confluence, and Observable Determinism  
Author: Alexander Aiken Jennifer Widom Joseph M. Hellerstein 
Address: 650 Harry Road San Jose, CA 95120  
Affiliation: IBM Almaden Research Center  
Note: Proc. of 1992 ACM-SIGMOD Conference, pages 59-68  
Abstract: Static analysis methods are given for determining whether arbitrary sets of database production rules are (1) guaranteed to terminate; (2) guaranteed to produce a unique final database state; (3) guaranteed to produce a unique stream of observable actions. When the analysis determines that one of these properties is not guaranteed, it isolates the rules responsible for the problem and determines criteria that, if satisfied, guarantee the property. The analysis methods are presented in the context of the Starburst Rule System; they will form the basis of an interactive development environment for Starburst rule programmers. 
Abstract-found: 1
Intro-found: 1
Reference: [AS91] <author> S. Abiteboul and E. Simon. </author> <title> Fundamental properties of deterministic and nondeterministic extensions of datalog. </title> <journal> Theoretical Computer Science, </journal> <volume> 78 </volume> <pages> 137-158, </pages> <year> 1991. </year>
Reference-contexts: In [KU91], the issue of rule set termination is discussed, along with the issue of conflicting updates| determining when one rule may undo changes made by a previous rule. Although models and a problem-solving architecture for rule analysis are proposed, no algorithms are given. In <ref> [AS91] </ref>, issues of termination and unique fixed points are considered in the context of various extensions to Datalog. In addition to the very different semantics of Datalog (logic) and production rules, [AS91] does not address the issue of determining whether a given rule set exhibits certain properties (as we do), but <p> Although models and a problem-solving architecture for rule analysis are proposed, no algorithms are given. In <ref> [AS91] </ref>, issues of termination and unique fixed points are considered in the context of various extensions to Datalog. In addition to the very different semantics of Datalog (logic) and production rules, [AS91] does not address the issue of determining whether a given rule set exhibits certain properties (as we do), but rather states results about whether all rule sets in a given language are guaranteed to exhibit the properties.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <institution> IBM Research Report RJ 8562, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Theorem 5.1 (Termination) If there are no cycles in TG R then the rules in R are guaranteed to terminate. Proof: Omitted due to space constraints; see <ref> [AWH92] </ref>. Hence, to determine whether the rules in R are guaranteed to terminate, triggering graph TG R is constructed and checked for cycles. <p> execution graph EG for R, for any three states S, S i , and S j in EG such that S ! S i and S ! S j , there is a fourth state S 0 such that S i fl fl Proof: Omitted due to space constraints; see <ref> [AWH92] </ref>. (The formal proof parallels the motivation shown in Figure 4, although the full construction is slightly more complex.) Theorem 6.7 (Confluence Theorem) Suppose the Confluence Requirement holds for R and there are no infinite paths in any execution graph for R. <p> Proof: Omitted due to space constraints; see <ref> [AWH92] </ref>.
Reference: [BFKM85] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: First, it considers simplified versions of the OPS5 production rule language <ref> [BFKM85] </ref>. OPS5 has a quite different model of rule processing than most database production rule systems, including the Starburst Rule System. Second, the goal of previous work is to impose restrictions and/or orderings on OPS5 rule sets such that unique fixed points are guaranteed.
Reference: [CW90] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In <ref> [CW90] </ref> we presented initial methods for analyzing termination in the context of deriving production rules for integrity constraint maintenance; these methods form the basis of our approach to termination in this paper. 1.2 Outline of Paper As an introduction to database production rule languages and to establish a basis for our <p> We take as an assumption that individual rule actions terminate. Hence, in terms of execution graphs, the rules in R are guaranteed to terminate iff all paths in every execution graph for R are finite. As suggested in <ref> [CW90] </ref>, termination is analyzed by constructing a directed triggering graph for the rules in R, denoted TG R . The nodes in TG R represent the rules in R and the edges represent the Triggers relationship. <p> As part of a case study, we used this approach to establish termination for a set of rules in a power network design application <ref> [CW90] </ref>. 6 Confluence Next we want to determine whether the rules in R are confluent. That is, we want to determine if the final database state at termination of rule processing can depend on which rule is chosen for consideration when multiple non-prioritized rules are triggered.
Reference: [GJ91] <author> N. Gehani and H.V. Jagadish. </author> <title> Ode as an active database: Constraints and triggers. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [H + 90] <author> L.M. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Our analysis methods have been developed and are presented in the context of the Starburst Rule System [WCL91], a fully functional production rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center <ref> [H + 90] </ref>.
Reference: [Han89] <author> E.N. Hanson. </author> <title> An initial report on the design of Ariel: A DBMS with an integrated production rule system. </title> <booktitle> SIGMOD Record, Special Issue on Rule Management and Processing in Expert Database Systems, </booktitle> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> September </month> <year> 1989. </year>
Reference: [HH91] <author> J.M. Hellerstein and M. Hsu. </author> <title> Determinism in partially ordered production systems. </title> <institution> IBM Research Report RJ 8009, IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Some technical comparisons can be drawn between this work and the results in <ref> [HH91, Ras90, ZH90] </ref>. In [HH91], a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. <p> Some technical comparisons can be drawn between this work and the results in [HH91, Ras90, ZH90]. In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining a mapping between our language and the language in [HH91], we have shown that <p> In <ref> [HH91] </ref>, a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence. By defining a mapping between our language and the language in [HH91], we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to <p> By defining a mapping between our language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work. ings between all pairs of observable rules does <p> language and the language in <ref> [HH91] </ref>, we have shown that our confluence requirements properly subsume their fixed point requirements: if a rule set has the unique fixed point property according to [HH91], then our methods determine that the corresponding rule set is confluent, but not always vice-versa. The methods in [HH91] have previously been shown to subsume those in [Ras90,ZH90], hence our approach, although still conservative, appears quite accurate when compared with previous work. ings between all pairs of observable rules does not necessarily guarantee observable determinism.
Reference: [Hue80] <author> G. Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> Oc-tober </month> <year> 1980. </year>
Reference-contexts: most one final state. (Recall that all final states in an execution graph have an empty set of triggered rules, so two different final states cannot represent the same database state.) Confluence for production rules is a particularly difficult problem because, in addition to the standard problems associated with confluence <ref> [Hue80] </ref>, we must take into account the interactions between rule triggering and rule priorities. <p> Then for any three states S, S i , and S j in EG such that S fl S ! S j , there is a fourth state S 0 such that S i fl S j ! S 0 . Proof: Classic result; see e.g. <ref> [Hue80] </ref>. We use Lemma 6.4 as the basis for our analysis tech niques. <p> ! S j , there is a fourth state S 0 such that S i fl fl We assume that the first condition has been established through the analysis techniques of Section 5; we focus 5 Sometimes the term confluence is used to denote the sup position of this Lemma <ref> [Hue80] </ref>, which then implies conflu ence in the sense that we've defined it. S S j i j r i @ @R ? ? ? ? our attention on analysis techniques for establishing the second condition.
Reference: [KU91] <editor> A.P. Karadimce and S.D. Urban. </editor> <title> Diagnosing anomalous rule behavior in databases with integrity maintenance production rules. </title> <booktitle> In Third Workshop on Foundations of Models and Languages for Data and Objects, </booktitle> <address> Aigen, Austria, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Our goal, on the other hand, is to permit arbitrary rule sets and provide useful information about their behavior in the database setting. In Section 9 we make some additional, more technical, comparisons, and explain how our analysis techniques subsume results in [HH91,Ras90,ZH90]. In <ref> [KU91] </ref>, the issue of rule set termination is discussed, along with the issue of conflicting updates| determining when one rule may undo changes made by a previous rule. Although models and a problem-solving architecture for rule analysis are proposed, no algorithms are given.
Reference: [MD89] <author> D.R. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <address> Portland, Oregon, </address> <month> May </month> <year> 1989. </year>
Reference: [Ras90] <author> L. Raschid. </author> <title> Maintaining consistency in a stratified production system. </title> <booktitle> In Proceedings of the AAAI National Conference on Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Some technical comparisons can be drawn between this work and the results in <ref> [HH91, Ras90, ZH90] </ref>. In [HH91], a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference: [WCL91] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: If termination, confluence, or observable determinism is desired but not guaranteed, then the user may verify that the necessary criteria are satisfied or may modify the rule set and try again. Our analysis methods have been developed and are presented in the context of the Starburst Rule System <ref> [WCL91] </ref>, a fully functional production rules facility integrated into the Starburst extensible relational DBMS prototype at the IBM Almaden Research Center [H + 90].
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A formal theory of transitions and their net effects appears in <ref> [WF90] </ref>.
Reference: [ZH90] <author> Y. Zhou and M. Hsu. </author> <title> A theory for rule triggering systems. </title> <booktitle> In Advances in Database Technology| EDBT '90, Lecture Notes in Computer Science 416, </booktitle> <pages> pages 407-421. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Some technical comparisons can be drawn between this work and the results in <ref> [HH91, Ras90, ZH90] </ref>. In [HH91], a version of the OPS5 production rule language is considered, and a class of rule sets is identified that (conservatively) guarantees the unique fixed point property, which essentially corresponds to our notion of confluence.
References-found: 16

