URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/hauck-MontageJ.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/papers/
Root-URL: http://www.cs.washington.edu
Title: AN FPGA FOR IMPLEMENTING ASYNCHRONOUS CIRCUITS  
Author: Scott Hauck, Steven Burns, Gaetano Borriello, Carl Ebeling 
Keyword: Asynchronous Circuits, FPGA Architectures, Prototyping  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Date: 60-69, Fall, 1994.  
Note: IEEE Design Test of Computers, Vol. 11, No. 3, pp.  
Abstract: Field-programmable gate arrays are a dominant implementation medium for digital circuits, especially for glue logic. Unfortunately, they do not support asynchronous circuits. This is a significant problem because many aspects of glue logic and communication interfaces involve asynchronous elements, or require the interconnection of synchronous components operating under independent clocks. We describe Montage, the first FPGA to explicitly support asynchronous circuit implementation, and its mapping software. Montage can be used to realize asynchronous interface circuits or to prototype complete asynchronous systems, thus bringing the benefits of rapid prototyping to asynchronous design. 
Abstract-found: 1
Intro-found: 1
Reference: [Algotronix91] <author> Algotronix Limited, </author> <note> CAL1024 Preliminary Datasheet, </note> <year> 1991. </year>
Reference: [Brunvand89] <author> E. Brunvand, R. F. Sproull, </author> <title> Translating Concurrent Programs into Delay-Insensitive Circuits, </title> <booktitle> Proceedings of ICCAD89, </booktitle> <pages> pp. 262-265, </pages> <year> 1989. </year>
Reference: [Brunvand91] <author> E. Brunvand, </author> <title> Implementing Self-Timed Systems with FPGAs, </title> <booktitle> International Workshop on Field-Programmable Logic and Applications, </booktitle> <address> Oxford, </address> <year> 1991. </year>
Reference: [Chu87] <author> T. A. Chu, </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-Theoretic Specifications, M.I.T. </title> <type> Tech. Rep. </type> <institution> MIT/LCS/TR-393, </institution> <month> June </month> <year> 1987. </year>
Reference: [Concurrent91] <institution> Concurrent Logic, Inc., CFA6006 Field Programmable Gate Array, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Again, circuits may have unavoidable hazards that an implementation cannot avoid, but hazards that do not exist in the original circuit must not be introduced by the implementation. If one has only simple gates as logic elements (e.g., ANDs and XORs, as in the CFA FPGA <ref> [Concurrent91] </ref>), making them hazard-free is easy. However, lookup tables (LUTs), the element generally used in FPGAs to implement arbitrary n-input functions, are much more complex than simple gates.
Reference: [Ebergen89] <author> J. C. Ebergen, </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <institution> Centre for Mathematics and Computer Science, Amsterdam CWI Tract 56, </institution> <year> 1989. </year>
Reference-contexts: As an example of Montages power, all of Ebergens basic elements <ref> [Ebergen89] </ref> can be mapped as shown in figure 7.
Reference: [Hauck92] <author> S. Hauck, G. Borriello, C. Ebeling, Triptych: </author> <title> An FPGA Architecture with Integrated Logic and Routing, </title> <booktitle> Brown/MIT Conference on Advanced Research in VLSI and Parallel Systems, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: Shown in (d) are the connections between the two copies at diagonal crossings. The Montage FPGA is a version of the Triptych architecture designed to handle synchronous interface and asynchronous circuits. Since much of Montage is identical to Triptych, we direct readers wishing more information on the architecture to <ref> [Hauck92] </ref>. Like Triptych, Montage is an SRAM-based FPGA, which have the advantage over antifuse-based FPGAs of allowing the chip to be programmed for delay testing without permanently configuring it.
Reference: [Hollaar82] <author> L. A. Hollaar, </author> <title> Direct Implementation of Asynchronous Control Units, </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-31, No. 12, </volume> <pages> pp. 1133-1141, </pages> <month> Dec. </month> <year> 1982. </year>
Reference: [Kishinevsky92] <author> M. A. Kishinevsky, A. Y. Kondratyev, A. R. Taubin, V. I. Varshavsky, </author> <title> On Self-Timed Behavior Verification, </title> <booktitle> Proceedings of TAU92, </booktitle> <month> March </month> <year> 1992. </year>
Reference: [Kung92] <author> D. S. Kung, </author> <title> Hazard-non-increasing Gate-level Optimization Algorithms, </title> <booktitle> Proceedings of ICCAD92, </booktitle> <pages> pp. 631-634, </pages> <year> 1992. </year>
Reference: [Marple92] <author> D. Marple, L. Cooke, </author> <title> An MPGA Compatible FPGA Architecture, </title> <booktitle> First International ACM/SIGDA Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, </address> <year> 1992. </year>
Reference-contexts: Thus, they must appear as special, built-in blocks in any FPGA which hopes to implement asynchronous circuits, but which does not allow mappings to program circuits at the transistor level (for an example of an antifuse-based FPGA which might allow sufficient transistor-level programming to implement an arbiter, see <ref> [Marple92] </ref>). As an example of Montages power, all of Ebergens basic elements [Ebergen89] can be mapped as shown in figure 7.
Reference: [Martin90] <author> A. Martin, </author> <title> Programming in VLSI: From Communicating Processes to Delay-insensitive Circuits. </title> <editor> In C. </editor> <booktitle> Hoare, UT Year of Programming Institute on Concurrent Programming, </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Larger hand-mappings are shown in figure 8, including Martins Fair Arbiter <ref> [Martin90] </ref>, and a Sutherland-style FIFO [Sutherland89]. Currently we plan to have a 15:1 ratio between the number of logic blocks and arbiter blocks, as shown in figure 9. This number was chosen based on the relative infrequency of arbiters and synchronizers in typical asynchronous circuits.
Reference: [Nowick91] <author> S. M. Nowick, D. L. Dill, </author> <title> Synthesis of Asynchronous State Machines Using a Local Clock, </title> <booktitle> in Proceedings of ICCD, </booktitle> <pages> pp. 192-197, </pages> <year> 1991. </year>
Reference: [Rosenberger88] <author> F. U. Rosenberger, C. E. Molnar, T. J. Chaney, T.-P. Fang, Q-Modules: </author> <title> Internally Clocked Delay-Insensitive Modules, </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 37, no. 9, </volume> <pages> pp. 1005-1018, </pages> <year> 1988. </year>
Reference-contexts: Thus, FPGAs usually include D-latches in their logic blocks. Asynchronous circuits do not have any single way of storing information, but instead different methodologies use different structures. They use C-elements, asynchronous S-R flipflops, standard latches with local clocks, or even Q-flops <ref> [Rosenberger88] </ref> (locally clocked latches with metastability handling). While adding each of these elements into the standard logic cell would be expensive, all but the Q-latches can be implemented out of standard combination logic.
Reference: [Siegel93] <author> P. Siegel, G. De Micheli, D. Dill, </author> <title> Automatic Technology Mapping for Generalized Fundamental-Mode Asynchronous Designs, </title> <booktitle> Proceedings of DAC93, </booktitle> <year> 1993. </year>
Reference-contexts: However, this circuit has a hazard for the transition acd fi ac d . Thus, unless the circuit to be mapped does not allow this transition to happen, the circuit cannot be implemented with this element. Techniques exist for handling such situations in bounded-delay circuits <ref> [Siegel93] </ref>. 3. The Montage Architecture As discussed earlier, asynchronous circuits are not well served by current FPGA architectures. Asynchronous logic implementations must consider hazards, synchronization and arbitration of events, and strict adherence to the timing assumptions of the design methodologies. Unfortunately, these issues are not addressed in current FPGAs.
Reference: [Sutherland89] <author> I. Sutherland, </author> <title> Micropipelines, </title> <journal> CACM, </journal> <volume> Volume 32, Number 6, </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: Larger hand-mappings are shown in figure 8, including Martins Fair Arbiter [Martin90], and a Sutherland-style FIFO <ref> [Sutherland89] </ref>. Currently we plan to have a 15:1 ratio between the number of logic blocks and arbiter blocks, as shown in figure 9. This number was chosen based on the relative infrequency of arbiters and synchronizers in typical asynchronous circuits. <p> c2 c3 r2 x1 d2 x2 d4 d3 d3 d4 d1 x1 d1 x2 c1 c1 c1 x2 r1 x2 x1 r3 r5 x2 x2 x1 x1 x1 x1 x1 r4 x1 x1 d2 c2 x2 c3 r4 d4 d4 (arbiter blocks have grey outlines), and (right) Sutherlands micropipelined FIFO <ref> [Sutherland89] </ref>. Note that although only two levels of the FIFO are shown, the mapping fits together for longer FIFOs. An important point to be made about the architecture is how Montage handles bundled data, inserted delays for bounded-delay circuits, and isochronic forks.
Reference: [Unger69] <author> S. H. Unger, </author> <title> Asynchronous Sequential Switching Circuits. </title> <address> New York NY: </address> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference: [Xilinx92] <author> Xilinx, Inc., </author> <title> The Programmable Gate Array Data Book, </title> <year> 1992. </year>
Reference-contexts: The Sequencer is the only element including an arbiter block, which is used in the center left RLB of the Sequencer mapping. Since approximately eight Montage RLBs can be fit into the space of a single Xilinx CLB <ref> [Xilinx92] </ref> (the basic tile of one of the most popular current FPGAs, which can implement at most 2 functions in a single CLB), these are very efficient mappings. Larger hand-mappings are shown in figure 8, including Martins Fair Arbiter [Martin90], and a Sutherland-style FIFO [Sutherland89].
References-found: 18

