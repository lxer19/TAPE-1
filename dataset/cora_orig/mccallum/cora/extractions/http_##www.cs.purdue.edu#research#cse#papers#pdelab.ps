URL: http://www.cs.purdue.edu/research/cse/papers/pdelab.ps
Refering-URL: http://www.cs.purdue.edu/research/cse/pdelab/hrefs.html
Root-URL: http://www.cs.purdue.edu
Email: -saw,enh,jrr,acc,clc,chui,markus-@cs.purdue.edu  
Title: PDELab: An Object-Oriented Framework for Building Problem Solving Environments for PDE Based Applications  
Author: Sanjiva Weerawarana, Elias N. Houstis, John R. Rice, Ann Christine Catlin, Cheryl L. Crabill, Chi Ching Chui and Shahani Markus 
Address: West Lafayette, IN 47907, USA.  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: In this paper we present an object-oriented methodology and tools for creating high level, high performance problem solving systems (workbenches) for scientific applications modeled by partial differential equations. This methodology is validated by the creation of a scientific computing workbench for bioseparation analysis. One of the design objectives of PDELab is to provide workbench developers and users with much the same kind of independence in software as they have come to expect in hardware. The adopted architecture of this software platform for creating problem solving environments for PDE applications is devoted to clean layering. At the bottom are the various smart libraries that support the numerical simulation of various physical objects together with the corresponding knowledge bases needed to support the computational intelligence aspects of the various workbenches; at the top is a set of interactive tools that allow the user to carry out his objectives using natural tools. Between these layers sits a piece of middleware called a software bus. Its design objective is to allow the integration of a variety of software components needed to support hybrid (numeric and experimental) PDE based workbenches. Moreover, it comes with a software tool that allow its reconfiguration for specific applications. This paper discusses the design and implementation issues of this three layered architecture of PDELab.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Berners-Lee, </author> <title> Uniform Resource Locators: A unifying syntax for the expression of names and addresses of objects on the network, (Draft) Internet RFC, </title> <booktitle> 1993, </booktitle> <address> &lt;http://info.cern.ch/ hypertext/WWW/Addressing/URL/Overview.html&gt;. </address>
Reference-contexts: The services provided by PDEBus to clients can be categorized into three groups: location services, process management services and messaging services. For client/object location purposes, a global naming scheme based on uniform resource locators (URLs) <ref> [1] </ref>, a highly exible emerging standard for naming arbitrary resources, is being developed. The software bus will provide various directory services with URLs being the naming standard.
Reference: [2] <author> J. A. Berninger, R. D. Whitley, X. Zhang, N.-H. L. Wang, </author> <title> A Verstile Model for Simulation of Reaction and Nonequilibrium Dynamics in Multicomponent Fixed-Bed Adsorption Pro cesses, </title> <journal> Computers in Chemical Engineering, </journal> <volume> 15(11), </volume> <year> 1991, </year> <pages> pp. 749-768. </pages>
Reference-contexts: Bioseparation is a process for separating components by passing a solution mixture through an absorbent column, so that each component adsorbs to the surface differently from the others, and thus eludes at difference times <ref> [2] </ref>. This process is used in the purification of proteins and biochemicals, in the manufacture of pharmaceutical products, in water treatment, and in many other bio-chemical processes. The process is modelled by a sys-tem of 1D and 2D nonlinear, time-dependent PDEs.
Reference: [3] <author> J. C. Giarratano, </author> <note> CLIPS Users Guide, Version 5.1, </note> <author> NASA Lyndon B. Johnson Space Cen ter, </author> <year> 1991. </year>
Reference-contexts: PYTHIA supports this type of soft reasoning by providing an environment where one can integrate rule and knowledge bases and associated reasoning systems. PYTHIA is accessed as a tool in the PDELab environment and is implemented with an embedded version of CLIPS <ref> [3] </ref>. Component Composition. A major step in building an application PSE with PDELab is combining a set of components together into a PSE using PDEBus. The composition editor supports this activity by providing a graphical environment for selecting components (editors) and wiring them together appropriately.
Reference: [4] <author> D. E. Hall, W. H. Greiman, W. F. Johnston, A. X. Merola, S. C. Loken and D. W. Robertson, </author> <title> The Software Bus: A Vision for Scientific Software Development, </title> <journal> Computer Physics Communications, </journal> <volume> 57, </volume> <year> 1989, </year> <pages> pp. 211-216. </pages>
Reference: [5] <author> E. N. Houstis, J. R. Rice, S. Weerawarana and C. E. Houstis, </author> <title> PYTHIA: A Computationally Intelligent Paradigm to Support Smart Problem Solving Environments for PDE Based Applications, </title> <note> to appear, </note> <year> 1994. </year>
Reference-contexts: At this level, application PSE developers compose new PSEs by combining together components from PDELab and the application specific components they implement using PDELab provided development tools. This framework consists of several subsystems: PDE object editing tools, a graphical worksheet editor, the PDESpec language and associated tools, the PYTHIA <ref> [5] </ref> reasoning environment, the composer, and of course the developers kit described earlier. We discuss the object editing tools, the worksheet editor, PDESpec, PYTHIA and the composer here. PDE Object Editors.
Reference: [6] <author> G. J. MacRae, </author> <title> Role of High Performance Computing in Environmental Modeling, </title> <booktitle> Pro ceedings of Very Large Scale Computations in the 21st Century, </booktitle> <publisher> SIAM, </publisher> <year> 1991, </year> <pages> pp. 41-72. </pages>
Reference-contexts: Despite their positive impact and potential, their introduction has significantly increased the complexity of the scientific problem solving process. Figure 1 displays the PDELab view of the modern problem solving process for PDE based applications <ref> [6] </ref>. It includes pro cesses such as brain storming, trial and error reasoning, numeric and experimental data I/O and calibration, numeric and symbolic simulation, advanced reasoning, optimization, visualization and interpretation of results.
Reference: [7] <author> Macsyma Reference Manual, </author> <title> Version Nine, The MATHLAB Group, </title> <institution> Laboratory for Com puter Science, Massachusetts Institute of Technology, </institution> <year> 1977. </year>
Reference-contexts: Examples of graphical editors from PDELab. terms of the PDE objects and the language form of an object is generally viewed as an alternate representa-tion format for objects. PDESpec supports both a compile-execute model and an interpreted execution model and is defined as an extension of the MACSYMA <ref> [7] </ref> language. The MACSYMA parser is used to parse a PDESpec program and the compiler (implemented in MACSYMA, Common LISP and C) generates a program in FORTRAN using the GENCRAY [13] code generation package.
Reference: [8] <author> H. S. McFaddin, </author> <title> An Object-based Problem Solving Environment for Collaborating PDE Solvers and Editors, </title> <type> PhD Thesis, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <year> 1992. </year>
Reference: [9] <author> J. Ousterhout, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proc. USENIX Winter Confer ence, </booktitle> <month> January </month> <year> 1990, </year> <pages> pp. 133-146. </pages>
Reference-contexts: Since inter-component communication is transparently achieved via URLs and PDEBus messaging system, one only needs to have PDEBus initiate and manage those components. This is achieved via the session initiation script mechanism of PDEBus. This script (implemented using Tcl <ref> [9] </ref>) instructs PDEBus to initiate the components required for SB SB SB PDEBus Manager Process Client Key FIGURE 3. A view of the PDEBus architecture. Access Domain the session. Graphical development tools at the upper layer of PDELab assist in developing these session initialization scripts. 5.
Reference: [10] <author> J. Purtilo, R. T. Snodgrass and A. L. Wolf, </author> <title> Software Bus Organization: Reference Model and Comparison of Two Existing Systems, ARPA Module Interconnection Formalism Working Group, </title> <address> TR-8, </address> <year> 1991, </year> <month> &lt;file://thumper.cs.umd.edu/files/docs/refmodel.ps.Z&gt;. </month>
Reference-contexts: The custom interface communicates with the user in application domain terms (and not in mathematical PDE terms) by translating domain terminology to/from the appropriate mathematical representations. 4. The PDELab Software Bus The underlying communication fabric for PDELab is based on the software bus <ref> [10] </ref> model. The software bus concept is an attempt to emulate the hardware bus mechanism that provides a standard hardware interface to attach additional capabilities to a machine.
Reference: [11] <author> J. M. Purtilo, </author> <title> The Polylith Software Bus, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(1), </volume> <year> 1994, </year> <pages> pp. 151-174. </pages>
Reference: [12] <author> K. Sayre and M. A. Gray, </author> <title> Backtalk: A Generalized Dynamic Communication System for DAI, </title> <journal> Software-Practice and Experience, </journal> <volume> 23(9), </volume> <year> 1993, </year> <pages> pp. 1043-1057. </pages>
Reference: [13] <author> S. Weerawarana and P. S. Wang, </author> <title> A Portable Code Generator for CRAY FORTRAN, </title> <journal> ACM Transactions on Mathematical Software, </journal> <volume> 18(3), </volume> <year> 1992, </year> <pages> pp. 241-255. </pages>
Reference-contexts: The MACSYMA parser is used to parse a PDESpec program and the compiler (implemented in MACSYMA, Common LISP and C) generates a program in FORTRAN using the GENCRAY <ref> [13] </ref> code generation package. For interpreted programs, a parsed version of the program is handed over to the PDESpec interpreter for execution. By implementing the language as an extension of the MACSYMA computer algebra systems language, PDELab supports direct symbolic transformations at the language level. PYTHIA Environment.
References-found: 13

