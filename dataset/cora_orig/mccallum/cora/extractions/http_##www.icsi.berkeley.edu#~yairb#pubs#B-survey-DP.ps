URL: http://www.icsi.berkeley.edu/~yairb/pubs/B-survey-DP.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Title: Distributed Paging  
Author: Yair Bartal 
Affiliation: U.C. Berkeley International Computer Science Institute  
Abstract: We survey distributed data management problems including distributed paging, file allocation, and file migration.
Abstract-found: 1
Intro-found: 1
Reference: [AAB96] <author> B. Awerbuch, Y. Azar, and Y. Bartal. </author> <title> On-line Generalized Steiner Problem. </title> <booktitle> In Proc. of the 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 68-74, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In the case of k-page migration this would be the k-server problem. Awerbuch, Azar, and Bartal <ref> [AAB96] </ref> give a randomized transformation from k-server algorithms into k-page migration algorithms with competitive ratio O (k) against an adaptive on-line adversary. <p> Given a network represented by a r-HST, T , for some r 2 then there exists a randomized O (log m) competitive algorithm for the constrained file migration problem on G. Proof Sketch. We can concentrate on the case D = 1 (as follows from the general reductions in <ref> [AAB96, BCI96] </ref>). Apply a copy of the marking paging algorithm [FKLM + 88] for each subtree as follows. Given a request for a file invoke the algorithm at the topmost level containing the request, where the file is missing, and then repeat until the file arrives at the requesting processor.
Reference: [ABF93a] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Competitive Distributed File Allocation. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: The distributed paging problem [BFR92] further generalizes the model to deal with memory capacity limitations at the network processors. The file allocation problem <ref> [BFR92, ABF93a] </ref> is the fundamental case where a single file resides among the network nodes. Copies of the file may be stored in the local storage of some subset of processors. <p> In contrast to the competitive ratio of 3 against adaptive on-line adversaries, Chrobak et. al. [CLRW93] show a network with a lower bound greater than 3 for deterministic algorithms, specifically 85=27 3:148. Awerbuch, Bartal and Fiat <ref> [ABF93a] </ref> gave the first deterministic file migration algorithm called Move-To-Min (MTM) with competitive ratio 7 for all network topologies. The best currently known deterministic file migration algorithm is due to Bartal, Charikar, and Indyk [BCI96], called Move-To-Local-Min (MTLM) which has competitive ratio ~ 4:086. Fig. 2. Algorithm Move-To-Min (MTM). <p> In particular by using the greedy Steiner algorithm [IW91] we get an O (log n) competitive ratio. Deterministic Algorithm <ref> [ABF93a] </ref> give a deterministic O (log n)-competitive file allocation algorithm for arbitrary networks. The algorithm partitions the request sequence into phases. Each phase, except perhaps for the last one, contains exactly D successive write requests. Within each phase, the algorithm deals only with read requests. Fig. 4. <p> This seems to be an excellent problem for further study. Obvious generalizations of the problems discussed herein are to deal with network congestion and delay issues rather than simple communication costs. Distributed algorithms for data management problems are discussed in <ref> [BFR92, BR92, ABF93a, ABF96, Bart96] </ref>. These algorithms make decisions at the network processors based on the local information gathered via communication. However these results assume serialization of the requests, thus issues of con-currency must be addressed.
Reference: [ABF93b] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Heat & Dump: Randomized competitive distributed paging. </title> <booktitle> In Proc. 34rd IEEE Symp. on Foundations of Computer Science. IEEE, pages 22-31,November 1993. </booktitle>
Reference-contexts: While c F &gt; 0, if a write (p; F ) request is initiated by any other processor, decrease c F by 1. 4. Restart. Theorem 7. Algorithm DFWF is 3m-competitive for distributed paging on uniform networks. 4.3 Randomization Against an Oblivious Adversary Awerbuch, Bartal and Fiat <ref> [ABF93b] </ref> study randomized algorithms against an oblivious adversary for the distributed paging problem. They prove the following lower bound: Theorem 8. Let the f &gt; k be the number of different files in the network. <p> In particular it follows from a result of [FKLM + 88] that S (U ; m + 1 f ) = (log (m f )). Hence, Corollary 9. The competitive ratio of any randomized distributed paging algorithm is (maxflog (m f ); log kg) for uniform networks. <ref> [ABF93b] </ref> also give an O (maxflog (m f ); log kg) competitive algorithm for uniform networks called Heat & Dump. The algorithm is quite complicated and therefore we concentrate on the read-only distributed paging case and assume the file size D = 1.
Reference: [ABF96] <author> B. Awerbuch, Y. Bartal, and A. Fiat. </author> <title> Distributed Paging for General Networks. </title> <booktitle> In Proc. of the 7th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 574-583, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In particular by using local paging algorithms of [MS91, FKLM + 88] in all processors we get: Corollary 11. Algorithm Heat & Dump is O (maxflog (mf ); log kg)-competitive against oblivious adversaries. 4.4 Algorithms for Arbitrary Networks Awerbuch, Bartal and Fiat <ref> [ABF96] </ref> deal with the distributed paging problem on arbitrary networks. The solution they present holds against some weak adversary as will be explained in the sequel. However they develop a general framework for reducing the problem to the read-only case. <p> The goal of giving an algorithm for distributed paging seems to be very difficult. Moreover the best competitive ratio possible for deterministic algorithms is (m). This leads <ref> [ABF96] </ref> to defining a weaker but reasonable adversary, against which they can obtain an algorithm for read-only distributed paging with poly-logarithmic competitive ratio. The model they use was suggested in [ST85, KMRS88, MMS88, Young91] for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. <p> In this terminology, [ST85, KMRS88] give deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically. The situation is similar for the distributed paging problem. <ref> [ABF96] </ref> give a read-only distributed paging algorithm called Hierarchical Paging. The major idea is to use uni-processor paging on "areas of activity". These areas are defined using the sparse partitions of [AP90]. <p> This seems to be an excellent problem for further study. Obvious generalizations of the problems discussed herein are to deal with network congestion and delay issues rather than simple communication costs. Distributed algorithms for data management problems are discussed in <ref> [BFR92, BR92, ABF93a, ABF96, Bart96] </ref>. These algorithms make decisions at the network processors based on the local information gathered via communication. However these results assume serialization of the requests, thus issues of con-currency must be addressed.
Reference: [AK94] <author> S. Albers and H. Koga. </author> <title> New On-line Algorithms for the Page Replication Problem. </title> <booktitle> In Proc. of the 4th Scandinavian Workshop on Algorithmic Theory, </booktitle> <address> Aarhus, Denmark, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: Migration It is only natural to consider the migration version of the distributed paging problem where only one copy of each file is allowed to be kept in the network. (This problem is also sometimes referred to as constrained file migration.) This has been first consider by Albers and Koga <ref> [AK94] </ref> who give fi (k) and fi (log k) deterministic and randomized, upper and lower bounds for the problem on uniform networks, respectively.
Reference: [AK95] <author> S. Albers and H. Koga. </author> <title> Page Migration with Limited Local Memory Capacity. </title> <booktitle> In Proc. of the 4th Workshop on Algorithms and Data Structures, </booktitle> , <month> August </month> <year> 1995. </year>
Reference: [AKP92] <author> B. Awerbuch, S. Kutten, and D. Peleg. </author> <title> Competitive Distributed Job Scheduling. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <month> May </month> <year> 1992. </year>
Reference: [AP90] <author> B. Awerbuch and D. Peleg. </author> <title> Sparse Partitions. </title> <booktitle> In Proc. of the 31st Ann. Symp. on Foundations of Computer science, </booktitle> <pages> pages 503-513, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The situation is similar for the distributed paging problem. [ABF96] give a read-only distributed paging algorithm called Hierarchical Paging. The major idea is to use uni-processor paging on "areas of activity". These areas are defined using the sparse partitions of <ref> [AP90] </ref>. After sufficiently many accesses to a file have been issued by processors within such an "area of activity", a copy of the file is fetched into this area.
Reference: [Bart96] <author> Y. Bartal. </author> <title> Probabilistic Approximation of Metric Spaces and its Algorith--mic Applications. </title> <booktitle> To appear in Proc. of the 37rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Bartal <ref> [Bart96] </ref> gives a deterministic lower bound of (m), a randomized lower bound of (log m) for the problem in some network topology, and an O (log m log 2 n) randomized upper bound for arbitrary network topologies. <p> The edge weights along any path from the root to a leaf are decreasing by a factor of at least r. The result of <ref> [Bart96] </ref> can be summarized as follows: Theorem 15. Say there is a c-competitive algorithm on r-HST's. There exists a randomized algorithm with competitive ratio O (rc log n log r n) for arbitrary graphs against an oblivious adversary. <p> This seems to be an excellent problem for further study. Obvious generalizations of the problems discussed herein are to deal with network congestion and delay issues rather than simple communication costs. Distributed algorithms for data management problems are discussed in <ref> [BFR92, BR92, ABF93a, ABF96, Bart96] </ref>. These algorithms make decisions at the network processors based on the local information gathered via communication. However these results assume serialization of the requests, thus issues of con-currency must be addressed.
Reference: [BCI96] <author> Y. Bartal, M. Charikar and P. Indyk. </author> <title> On Page Migration and Other Relaxed Task Systems. </title> <booktitle> To appear in Proc. of the 8th Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1997. </year>
Reference-contexts: Awerbuch, Bartal and Fiat [ABF93a] gave the first deterministic file migration algorithm called Move-To-Min (MTM) with competitive ratio 7 for all network topologies. The best currently known deterministic file migration algorithm is due to Bartal, Charikar, and Indyk <ref> [BCI96] </ref>, called Move-To-Local-Min (MTLM) which has competitive ratio ~ 4:086. Fig. 2. Algorithm Move-To-Min (MTM). In the example D=7. m minimizes the sum of distances to the D access locations. We present here the proof of the simpler Move-To-Min algorithm. Algorithm Move-To-Min (MTM). <p> Let a 0 = a D . = 2D (d (a 0 ; m) d (a; b)) = 2D d (a 0 ; m) + D d (a; m) X d (a; v i ) i 7Cost Adv Cost MTM : The Move-To-Local-Min (MTLM) algorithm of <ref> [BCI96] </ref> also operates in phases. The length of a phase is L = cD. <p> In the case of k-page migration this would be the k-server problem. Awerbuch, Azar, and Bartal [AAB96] give a randomized transformation from k-server algorithms into k-page migration algorithms with competitive ratio O (k) against an adaptive on-line adversary. Bartal, Charikar and Indyk <ref> [BCI96] </ref> give a deterministic transformation yielding competitive ratio O (k 2 ). [BCI96] also give a (2k + 1) lower bound on the competitive ratio for the problem in any network topology. <p> Awerbuch, Azar, and Bartal [AAB96] give a randomized transformation from k-server algorithms into k-page migration algorithms with competitive ratio O (k) against an adaptive on-line adversary. Bartal, Charikar and Indyk <ref> [BCI96] </ref> give a deterministic transformation yielding competitive ratio O (k 2 ). [BCI96] also give a (2k + 1) lower bound on the competitive ratio for the problem in any network topology. <p> Given a network represented by a r-HST, T , for some r 2 then there exists a randomized O (log m) competitive algorithm for the constrained file migration problem on G. Proof Sketch. We can concentrate on the case D = 1 (as follows from the general reductions in <ref> [AAB96, BCI96] </ref>). Apply a copy of the marking paging algorithm [FKLM + 88] for each subtree as follows. Given a request for a file invoke the algorithm at the topmost level containing the request, where the file is missing, and then repeat until the file arrives at the requesting processor.
Reference: [BFR92] <author> Y. Bartal, A. Fiat, and Y. Rabani. </author> <title> Competitive algorithms for distributed data management. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <year> 1992. </year> <note> Also accepted for publication in the STOC 92 special issue Journal of Computer and Systems Sciences, </note> <year> 1993. </year>
Reference-contexts: The following are the main problems we survey: The file migration problem [BS89] allows only one copy of each file to be kept in the network. The file allocation problem <ref> [BFR92] </ref> deals with the more general case where files may be replicated and deleted in response to a sequence of read and write requests. The distributed paging problem [BFR92] further generalizes the model to deal with memory capacity limitations at the network processors. <p> The file allocation problem <ref> [BFR92] </ref> deals with the more general case where files may be replicated and deleted in response to a sequence of read and write requests. The distributed paging problem [BFR92] further generalizes the model to deal with memory capacity limitations at the network processors. The file allocation problem [BFR92, ABF93a] is the fundamental case where a single file resides among the network nodes. Copies of the file may be stored in the local storage of some subset of processors. <p> The distributed paging problem [BFR92] further generalizes the model to deal with memory capacity limitations at the network processors. The file allocation problem <ref> [BFR92, ABF93a] </ref> is the fundamental case where a single file resides among the network nodes. Copies of the file may be stored in the local storage of some subset of processors. <p> A matching upper bound is given for the uniform network and a (2k + 1)(1 + 1 D ) competitive ratio for trees. 3 File Allocation 3.1 Problem Definition The file allocation problem <ref> [BFR92] </ref> assumes that data is organized in indivisible blocks such as files (or pages), consisting of D data units. Let P denote the set of processors. Initially, a subset Q P of processors is each assigned a copy of the file. <p> The subset Q is called the configuration of the algorithm. 3.2 Lower Bounds A lower bound of 3 in any network topology follows from the lower bounds for file migration described in the previous section by restricting the request sequence to write requests. Bartal, Fiat and Rabani <ref> [BFR92] </ref> give a lower bound of (log n) for a specific family of networks based on a lower bound for the on-line Steiner tree problem [IW91]. This lower bound holds even against an oblivious adversary. 3.3 Specific Network Topologies [BFR92] give an optimal 3-competitive, deterministic file allocation algorithm for uniform networks. <p> Bartal, Fiat and Rabani <ref> [BFR92] </ref> give a lower bound of (log n) for a specific family of networks based on a lower bound for the on-line Steiner tree problem [IW91]. This lower bound holds even against an oblivious adversary. 3.3 Specific Network Topologies [BFR92] give an optimal 3-competitive, deterministic file allocation algorithm for uniform networks. This also gives an alternative algorithm for file migration when restricting to write requests only. [BFR92] also give a memoryless 3-competitive algorithm for continuous tree. [LRWY94] give a 3-competitive algorithm for trees based on work-functions. <p> This lower bound holds even against an oblivious adversary. 3.3 Specific Network Topologies <ref> [BFR92] </ref> give an optimal 3-competitive, deterministic file allocation algorithm for uniform networks. This also gives an alternative algorithm for file migration when restricting to write requests only. [BFR92] also give a memoryless 3-competitive algorithm for continuous tree. [LRWY94] give a 3-competitive algorithm for trees based on work-functions. In what follows we describe the optimal algorithm for uniform networks. Let P denote the set of processors in the network. Algorithm Count. <p> The reason is that during step 1 the processor initiated a total of D requests, counting read requests and write requests initiated while Count was waiting. 3.4 Arbitrary Networks Randomized Algorithm <ref> [BFR92] </ref> give a randomized algorithm for the file allocation problem on all networks, which is competitive against an adaptive on-line adversary. This is done by a reduction to the on-line Steiner tree problem. Let G be an arbitrary network. <p> The only lower bound is 2 + 1 2D which follows from the the lower bound for migration. The problem of obtaining a randomized algorithm for uniform networks with competitive ratio better than 3 is open. 4 Distributed Paging The distributed paging problem <ref> [BFR92] </ref>. paging is the solution of multiple file allocation problems, constrained by the local memory of the processors. (The problem is also sometimes referred to as constrained file allocation). 4.1 Preliminaries Let F denote the set of files and P denote the set of processors . <p> Let m = P p k p , the total number of files that can be stored in the network, and k = max p k p , the maximal number of files that can be stored in any one processor. 4.2 Deterministic Algorithms <ref> [BFR92] </ref> give a lower bound of 2m 1 on the competitive ratio of any deterministic algorithm for the distributed paging problem. They also describe the Distributed-Flush-When-Full algorithm (DFWF) which is 3m for uniform networks. The algorithm uses the following terminology. <p> This seems to be an excellent problem for further study. Obvious generalizations of the problems discussed herein are to deal with network congestion and delay issues rather than simple communication costs. Distributed algorithms for data management problems are discussed in <ref> [BFR92, BR92, ABF93a, ABF96, Bart96] </ref>. These algorithms make decisions at the network processors based on the local information gathered via communication. However these results assume serialization of the requests, thus issues of con-currency must be addressed.
Reference: [BLS87] <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An Optimal On-Line Algorithm for Metrical Task Systems. </title> <booktitle> In Proc. of the 19th Ann. ACM Symp on Theory of Computing, </booktitle> <pages> pages 373-382, </pages> <month> May </month> <year> 1987. </year>
Reference: [BR92] <author> Y. Bartal and A. Rosen. </author> <title> The Distributed k-Server Problem | A Competitive Distributed Translator for k-Server Algorithms. </title> <booktitle> In Proc. of the 33rd Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 344-353, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: This seems to be an excellent problem for further study. Obvious generalizations of the problems discussed herein are to deal with network congestion and delay issues rather than simple communication costs. Distributed algorithms for data management problems are discussed in <ref> [BFR92, BR92, ABF93a, ABF96, Bart96] </ref>. These algorithms make decisions at the network processors based on the local information gathered via communication. However these results assume serialization of the requests, thus issues of con-currency must be addressed.
Reference: [BS89] <author> D.L. Black and D.D. Sleator. </author> <title> Competitive Algorithms for Replication and Migration Problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: This approach makes no prior assumptions on the input sequence, and provides a worst-case guarantee on the performance of the algorithms. The following are the main problems we survey: The file migration problem <ref> [BS89] </ref> allows only one copy of each file to be kept in the network. The file allocation problem [BFR92] deals with the more general case where files may be replicated and deleted in response to a sequence of read and write requests. <p> An on-line file allocation algorithm must minimize communication costs, over arbitrary sequences of read and write requests issued at different locations over the network. The file allocation problem can be viewed as the generalization of two other basic problems due to Black and Sleator <ref> [BS89] </ref>. The file replication problem where only read requests are issued, and the file migration problem where only one copy of the file may be kept in the network, which admits with write-only file allocation. <p> In addition to serving the access requests, an algorithm is allowed at any time to migrate the file from its current location to another processor at a cost equal to the distance between them times the file size, D. 2.2 Lower Bound Black and Sleator <ref> [BS89] </ref> used a result of Karlin et al. [KMRS88] to get a lower bound of 3 for deterministic data migration algorithms. The following theorem is a modification that gives a lower bound on the competitive ratio of any file migration algorithm in any network topology against adaptive on-line adversaries. <p> d (b; v) The expected change in the potential is E () = 1 Therefore E (Cost CF ) + E () = 3 2 (d (a; v) + d (b; v) d (a; b)) 3 d (a; v) = 3 Cost Adv : 2.4 Deterministic Algorithms Black and Sleator <ref> [BS89] </ref> give optimal deterministic 3-competitive algorithms for the uniform network and for trees. In contrast to the competitive ratio of 3 against adaptive on-line adversaries, Chrobak et. al. [CLRW93] show a network with a lower bound greater than 3 for deterministic algorithms, specifically 85=27 3:148.
Reference: [CLRW93] <author> M. Chrobak, L. Larmore, N. Reingold, and J. Westbrook. </author> <title> Optimal Multiprocessor Migration Algorithms Using Work Functions. </title> <booktitle> In Proc. of the 4th International Symp. on Algorithms and Computation. Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 762, </volume> <pages> pages 406-415, </pages> <address> Hong Kong, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In contrast to the competitive ratio of 3 against adaptive on-line adversaries, Chrobak et. al. <ref> [CLRW93] </ref> show a network with a lower bound greater than 3 for deterministic algorithms, specifically 85=27 3:148. Awerbuch, Bartal and Fiat [ABF93a] gave the first deterministic file migration algorithm called Move-To-Min (MTM) with competitive ratio 7 for all network topologies. <p> This additional term is similar to, and in fact inspired by the additional term in the minimizer function used by the Work Function Algorithm for the k-server problem and metrical task systems. The competitive ratio of Move-To-Local-Min is approximately 4:086. 2.5 Randomization Against an Oblivious Adversary Chrobak et al. <ref> [CLRW93] </ref> studied randomized page migration algorithms against an oblivious adversary. They show that the optimal randomized competitive ratio for a network consisting of two nodes connected by an edge is 2 + 1 2D .
Reference: [DF81] <author> D. Dowdy and D. Foster. </author> <title> Comparative Models of The File Assignment Problem. </title> <journal> Computing Surveys, </journal> <volume> 14(2), </volume> <month> June </month> <year> 1982. </year>
Reference-contexts: Distributed file assignment problems have been extensively studied in management science, engineering, and computer systems. The 1981 survey paper by Dowdy and Foster <ref> [DF81] </ref>, compares studies on different models, and cites close to a hundred references. The 1990 paper by Gavish and Sheng [GS90], gives a survey of recent research on dynamic file assignment problems, where the locations of file copies may be changed over time.
Reference: [FKLM + 88] <author> A. Fiat, R.M. Karp, M. Luby, L.A. McGeoch, D.d. Sleator , and N.E. Young. </author> <title> Competitive Paging Algorithms. </title> <type> Technical Report, </type> <institution> Carnegie Mellon University, </institution> <year> 1988. </year>
Reference-contexts: The competitive ratio of any randomized distributed paging algorithm for N against oblivious adversaries is (maxf ~ S (minfm + 1 f; n 1g); logkg). In particular it follows from a result of <ref> [FKLM + 88] </ref> that S (U ; m + 1 f ) = (log (m f )). Hence, Corollary 9. <p> Let c = max p c (p). Theorem 10. Algorithm Heat & Dump is O (maxflog (m f ); cg)-competitive against oblivious adversaries, where c is the maximal competitive ratio for any of the local paging algorithms in the network. In particular by using local paging algorithms of <ref> [MS91, FKLM + 88] </ref> in all processors we get: Corollary 11. Algorithm Heat & Dump is O (maxflog (mf ); log kg)-competitive against oblivious adversaries. 4.4 Algorithms for Arbitrary Networks Awerbuch, Bartal and Fiat [ABF96] deal with the distributed paging problem on arbitrary networks. <p> Proof Sketch. We can concentrate on the case D = 1 (as follows from the general reductions in [AAB96, BCI96]). Apply a copy of the marking paging algorithm <ref> [FKLM + 88] </ref> for each subtree as follows. Given a request for a file invoke the algorithm at the topmost level containing the request, where the file is missing, and then repeat until the file arrives at the requesting processor. Now consider a marking algorithm for a particular subtree.
Reference: [FMRW95] <author> A. Fiat, Y. Mansour, A. Rosen, and O. Waarts. </author> <title> Competitive Access Time via Dynamic Storage Rearrangement. </title> <booktitle> In Proc. of the 36th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 392-403, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Modern distributed systems allow not only migrating data along the network, but also the migration of processes. The process allocation problem can be defined as the dynamic re-allocation of processes as to minimize the sum of communication costs between them (see <ref> [FMRW95] </ref>). Perhaps the most promising avenue of research is to attempt to implement some or all of the ideas presented here in real systems. Here, there are additional practical considerations and constraints that have to be addressed.
Reference: [GS90] <author> B. Gavish and O.R.L. Sheng. </author> <title> Dynamic File Migration in Distributed Computer Systems. </title> <journal> In Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 177-189, </pages> <year> 1990. </year>
Reference-contexts: Distributed file assignment problems have been extensively studied in management science, engineering, and computer systems. The 1981 survey paper by Dowdy and Foster [DF81], compares studies on different models, and cites close to a hundred references. The 1990 paper by Gavish and Sheng <ref> [GS90] </ref>, gives a survey of recent research on dynamic file assignment problems, where the locations of file copies may be changed over time. All of these models rely heavily on prior knowledge regarding potential usage patterns of the system databases. ? 1947 Center Street Suite 600, Berkeley, CA 94704-1198.
Reference: [IW91] <author> M. Imaze and B.M. Waxman. </author> <title> Dynamic Steiner Tree Problem. </title> <journal> In SIAM Journal on Discrete Mathematics, </journal> <volume> 4(3) </volume> <pages> 369-384, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Bartal, Fiat and Rabani [BFR92] give a lower bound of (log n) for a specific family of networks based on a lower bound for the on-line Steiner tree problem <ref> [IW91] </ref>. This lower bound holds even against an oblivious adversary. 3.3 Specific Network Topologies [BFR92] give an optimal 3-competitive, deterministic file allocation algorithm for uniform networks. <p> If A is a strictly c-competitive Steiner tree algorithm against adap tive on-line adversaries on a network G, then SB is a (2+ p 3)c-competitive algo rithm for the file allocation problem on G against adaptive on-line adversaries. In particular by using the greedy Steiner algorithm <ref> [IW91] </ref> we get an O (log n) competitive ratio. Deterministic Algorithm [ABF93a] give a deterministic O (log n)-competitive file allocation algorithm for arbitrary networks. The algorithm partitions the request sequence into phases. Each phase, except perhaps for the last one, contains exactly D successive write requests.
Reference: [KMRS88] <author> A.R. Karlin, M.S. Manasse, L. Rudolph, and D.D. Sleator. </author> <title> Competitive Snoopy Caching. </title> <journal> In Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: serving the access requests, an algorithm is allowed at any time to migrate the file from its current location to another processor at a cost equal to the distance between them times the file size, D. 2.2 Lower Bound Black and Sleator [BS89] used a result of Karlin et al. <ref> [KMRS88] </ref> to get a lower bound of 3 for deterministic data migration algorithms. The following theorem is a modification that gives a lower bound on the competitive ratio of any file migration algorithm in any network topology against adaptive on-line adversaries. Theorem 1. <p> Moreover the best competitive ratio possible for deterministic algorithms is (m). This leads [ABF96] to defining a weaker but reasonable adversary, against which they can obtain an algorithm for read-only distributed paging with poly-logarithmic competitive ratio. The model they use was suggested in <ref> [ST85, KMRS88, MMS88, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> Let c and s be constants at least 1. If for any adversary, Adv such that for all p, k p s h p , the algorithm is c-competitive against Adv, then we say the algorithm is (c; s)-competitive. In this terminology, <ref> [ST85, KMRS88] </ref> give deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically. The situation is similar for the distributed paging problem. [ABF96] give a read-only distributed paging algorithm called Hierarchical Paging.
Reference: [LRWY94] <author> C. Lund, N. Reingold, J. Westbrook, and D. Yan. </author> <title> On-Line Distributed Data Management. </title> <booktitle> In Proc. of European Symp. on Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: They show that the optimal randomized competitive ratio for a network consisting of two nodes connected by an edge is 2 + 1 2D . They then use the algorithm for an edge to obtain a (2 + 1 2D )-competitive algorithm for trees. Lund et al. <ref> [LRWY94] </ref> as similar result for uniform networks. All of these algorithms are work-function based, i.e., on the optimal costs of serving the requests and ending at different configurations. Westbrook [West91] gives randomized algorithms for arbitrary network topologies. The algorithm operates in phases. <p> This also gives an alternative algorithm for file migration when restricting to write requests only. [BFR92] also give a memoryless 3-competitive algorithm for continuous tree. <ref> [LRWY94] </ref> give a 3-competitive algorithm for trees based on work-functions. In what follows we describe the optimal algorithm for uniform networks. Let P denote the set of processors in the network. Algorithm Count. Count is defined for each processor p 2 P separately. <p> Theorem 6. Algorithm FA is O (minflog n; log ()g)-competitive for file allocation on arbitrary network topologies. 3.5 Randomization Against an Oblivious Advesary As mentioned above randomization against an oblivious adversaries cannot help in the general case. It is however interesting to study for specific network topologies. <ref> [LRWY94] </ref> give a randomized algorithm for trees with competitive ratio 2 + 1 D . The only lower bound is 2 + 1 2D which follows from the the lower bound for migration.
Reference: [MMS88] <author> M.S. Manasse, L.A. McGeoch, and D.D. Sleator. </author> <title> Competitive Algorithms for On-Line Problems. </title> <booktitle> In Proc. of the 20th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Moreover the best competitive ratio possible for deterministic algorithms is (m). This leads [ABF96] to defining a weaker but reasonable adversary, against which they can obtain an algorithm for read-only distributed paging with poly-logarithmic competitive ratio. The model they use was suggested in <ref> [ST85, KMRS88, MMS88, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size.
Reference: [MS91] <author> L.A. McGeoch and D.D. Sleator. </author> <title> A Strongly Competitive Randomized Paging Algorithm. </title> <note> In Algorithmica, </note> <year> 1991. </year>
Reference-contexts: Let c = max p c (p). Theorem 10. Algorithm Heat & Dump is O (maxflog (m f ); cg)-competitive against oblivious adversaries, where c is the maximal competitive ratio for any of the local paging algorithms in the network. In particular by using local paging algorithms of <ref> [MS91, FKLM + 88] </ref> in all processors we get: Corollary 11. Algorithm Heat & Dump is O (maxflog (mf ); log kg)-competitive against oblivious adversaries. 4.4 Algorithms for Arbitrary Networks Awerbuch, Bartal and Fiat [ABF96] deal with the distributed paging problem on arbitrary networks.
Reference: [ST85] <author> D. Sleator and R.E. Tarjan. </author> <title> Amortized Efficiency of List Update and Paging Rules. </title> <journal> Communications of ACM , 28(2) </journal> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: Research supported in part by the Rothschild Postdoctoral fellowship and National Science Foundation operat ing grants CCR-9304722 and NCR-9416101. E-mail: yairb@icsi.berkeley.edu This survey describes work concerning with the competitive analysis <ref> [ST85] </ref> of distributed data management problems. This approach makes no prior assumptions on the input sequence, and provides a worst-case guarantee on the performance of the algorithms. <p> Moreover the best competitive ratio possible for deterministic algorithms is (m). This leads [ABF96] to defining a weaker but reasonable adversary, against which they can obtain an algorithm for read-only distributed paging with poly-logarithmic competitive ratio. The model they use was suggested in <ref> [ST85, KMRS88, MMS88, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> Let c and s be constants at least 1. If for any adversary, Adv such that for all p, k p s h p , the algorithm is c-competitive against Adv, then we say the algorithm is (c; s)-competitive. In this terminology, <ref> [ST85, KMRS88] </ref> give deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically. The situation is similar for the distributed paging problem. [ABF96] give a read-only distributed paging algorithm called Hierarchical Paging.
Reference: [West91] <author> J. Westbrook. </author> <title> Randomized Algorithms for Multiprocess or Page Migration. </title> <booktitle> In Proc. of DIMACS Workshop on On-Line Algorithms. </booktitle> <publisher> American Mathematical Society, </publisher> <month> February, </month> <year> 1991. </year>
Reference-contexts: We therefore conclude that over the entire sequence of events the online cost is equal to the cost of the 3 adversaries up to an additive term, implying the lower bound. 2.3 A Simple Randomized Algorithm Westbrook <ref> [West91] </ref> gave a simple randomized algorithm that achieves the optimal competitive ratio of 3 in any network topology against adaptive on-line adversaries. The Coin-Flipping Algorithm. Given an access request issued at v move the file to v with probability 1=2D. Theorem 2. <p> Lund et al. [LRWY94] as similar result for uniform networks. All of these algorithms are work-function based, i.e., on the optimal costs of serving the requests and ending at different configurations. Westbrook <ref> [West91] </ref> gives randomized algorithms for arbitrary network topologies. The algorithm operates in phases. The length of a phase is drawn out of a fixed probability distribution.
Reference: [Young91] <author> N.E. Young. </author> <title> Competitive Paging as Cache Size Varies. </title> <booktitle> In Proc. 2nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Moreover the best competitive ratio possible for deterministic algorithms is (m). This leads [ABF96] to defining a weaker but reasonable adversary, against which they can obtain an algorithm for read-only distributed paging with poly-logarithmic competitive ratio. The model they use was suggested in <ref> [ST85, KMRS88, MMS88, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> The model they use was suggested in [ST85, KMRS88, MMS88, Young91] for uniprocessor paging, where the adversary has a smaller cache size than the online algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. <ref> [Young91] </ref>), but the algorithm should pay for enlarging its cache size.
References-found: 27

