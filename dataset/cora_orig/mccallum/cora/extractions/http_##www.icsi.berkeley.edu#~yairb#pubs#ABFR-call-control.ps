URL: http://www.icsi.berkeley.edu/~yairb/pubs/ABFR-call-control.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Email: E-mail: baruch@theory.lcs.mit.edu  E-mail: yairb@math.tau.ac.il, fiat@math.tau.ac.il,  adiro@cs.toronto.edu.  
Title: Competitive Non-Preemptive Call Control  
Author: Baruch Awerbuch Yair Bartal Amos Fiat Adi Rosen 
Note: Is-rael. Supported by a grant from the Israeli Academy of Sciences.  Work done while with the  
Address: MIT.  Tel-Aviv 69978,  Toronto, Toronto, Canada.  Tel-Aviv, Israel.  
Affiliation: Lab. for Computer Science,  Department of Computer Science, School of Mathematics, Tel-Aviv University,  Dept. of Computer Science, Univesity of  Department of Computer Science, Tel-Aviv University,  
Abstract: We deal with randomized competitive algorithms for non-preemptive call control on tree-like switching networks. We give an O(log n) competitive algorithm for non-preemptive call scheduling on trees. We then introduce the complexities of variable call rates, call durations, and arbitrary call benefits, resulting in a polylog competitive algorithm for the combined problem. We also show that many algorithms for similar problems that can deal with fixed parameters such as rates and benefits can be randomly transformed to deal with variable values of the parameters. Using randomization, this extends the work of [GGKMY] on call control for the line network to tree networks, without the preemption requirement, and while allowing arbitrary benefits, arbitrary rates, and arbitrary capacities on the links. Alternately, this can be viewed as a generalization of [AAP] for throughput competitive routing, limited to trees, but without the limitation of requiring that communication request rates be a small fraction of the link bandwidth. In common to all our results is an algorithmic paradigm we call "Classify and Randomly Select". This tool seems useful for a variety of online problems. 
Abstract-found: 1
Intro-found: 1
Reference: [AAFPW] <author> J.Aspenes, Y.Azar, A.Fiat, S.Plotkin, and O.Waarts. </author> <title> On-line machine scheduling with applications to load balancing and virtual circuit routing. </title> <booktitle> Proc. 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <address> San Diego, </address> <month> May </month> <year> 1993. </year>
Reference: [AAP] <author> B.Awerbuch, Y.Azar, and S.Plotkin, </author> <title> Throughput-Competitive Online Routing. </title> <booktitle> To appear in Proc. 34th Symposium on Foundations of Computer Science. </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: For the on-line version of the problem, when the pairs of nodes are given in an on-line manner, Awerbuch, Azar and Plotkin <ref> [AAP] </ref> give a deterministic competitive algorithm for general networks, but under the major simplification that no single communications request can require more than 1= log n of the bandwidth of a single link; this can also be modeled by the assumption that each link consists of log n parallel links. <p> Problems of this kind arise when there is some limited resource to be used, or when there are capacity constraints, as in our call admission control problem (e.g., <ref> [KVV, AAP, LT] </ref>). The algorithm accrues some benefit associated with each entity if it is accepted, and does not accrue any if it is rejected. The benefit need not be equal for all entities.
Reference: [APW] <author> Y.Azar., S.Plotkin, and O.Waarts, </author> <title> Routing of virtual circuits with limited duration. </title> <type> Manuscript. </type>
Reference: [BK] <author> B.Kalyanasundaram and K.Pruhs, </author> <title> Online load balancing of temporary tasks. </title> <type> Manuscript. </type>
Reference: [BBK + ] <author> S. Ben-David, A. Borodin, R.M. Karp, G. Tardos, and A. Wigderson. </author> <title> On the power of randomization in online algorithms. </title> <booktitle> In Proc.of the 22nd Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 379-386, </pages> <month> may </month> <year> 1990. </year>
Reference-contexts: In this case we are interested in the expectation of the benefit, over the random choices of the algorithm. That is, we prove competitive results against an oblivious adversary <ref> [BBK + ] </ref> of the form, 8I 2 I (n; R; T; B) E [Benefit A (I)] 1 Benefit OPT (I): 4 The Base Algorithm We first consider the base case where all call durations are infinite, all benefits associated with the calls are equal (without loss of generality assume they
Reference: [FKL + 88] <author> Fiat, Karp, Luby, McGeoch, Sleator, and Young. </author> <title> Competitive paging algorithms. </title> <type> Technical report, </type> <institution> Carnegie Mellon, </institution> <year> 1988. </year>
Reference: [GG] <author> J.A.Garay and I.S.Gopal, </author> <title> Call preemption in Communications Networks, </title> <booktitle> Proc. INFOCOM '92, </booktitle> <address> Florence, Italy, </address> <year> 1992. </year> <month> 11 </month>
Reference: [GGKMY] <author> J.Garay, I.S.Gopel, S.Kutten, Y.Mansour, and M.Yung, </author> <title> Efficient on-line call control algorithms, </title> <booktitle> In Proc. of 2nd Annual Israel Conference of Computing and Systems, </booktitle> <address> Netania, Israel, </address> <year> 1993. </year>
Reference: [LT] <author> R.J.Lipton, and A.Tomkins, </author> <title> Online Interval Scheduling, </title> <type> Manuscript. </type>
Reference-contexts: Problems of this kind arise when there is some limited resource to be used, or when there are capacity constraints, as in our call admission control problem (e.g., <ref> [KVV, AAP, LT] </ref>). The algorithm accrues some benefit associated with each entity if it is accepted, and does not accrue any if it is rejected. The benefit need not be equal for all entities. <p> Similar techniques have been implicitly used also by Lipton and Tomkins <ref> [LT] </ref>. Let the set of classes be P, and assume that for every P 2 P we have an on-line algorithm A P that is c-competitive if presented with entities of class P . <p> The above paradigm requires that the algorithm know in advance this number of classes in P (Note that it is not required to know the actual classes, only their number). Using techniques of Lipton and Tomkins <ref> [LT] </ref> the above paradigm can be modified to suit the case where the number of classes is not known in advance, incurring a slightly larger increase in the competitive ratio. Define f (*) = P 1 1 i 1+* .
Reference: [ST] <author> Sleator and Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communication of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference: [AAFPW] <author> J. Aspenes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-Line Load Balancing with Application to Machine Scheduling and Virtual Circuit Routing. </title> <booktitle> In Proc. 25th Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <year> 1993. </year>
Reference: [AAP] <author> B. Awerbuch, Y. Azar, and S. Plotkin. </author> <title> Throughput-Competitive On-Line Routing. </title> <booktitle> In Proc. 34th Symp. on Foundations of Computer Science, </booktitle> <pages> pages 32-40, </pages> <year> 1993. </year>
Reference-contexts: For the on-line version of the problem, when the pairs of nodes are given in an on-line manner, Awerbuch, Azar and Plotkin <ref> [AAP] </ref> give a deterministic competitive algorithm for general networks, but under the major simplification that no single communications request can require more than 1= log n of the bandwidth of a single link; this can also be modeled by the assumption that each link consists of log n parallel links. <p> Problems of this kind arise when there is some limited resource to be used, or when there are capacity constraints, as in our call admission control problem (e.g., <ref> [KVV, AAP, LT] </ref>). The algorithm accrues some benefit associated with each entity if it is accepted, and does not accrue any if it is rejected. The benefit need not be equal for all entities.
Reference: [AGLR] <author> B. Awerbuch, R. Gawlick, F.T. Leighton, and Y. Rabani. </author> <title> On-Line Admission Control and Circuit Routing for High Performance Computing and Communication. </title> <booktitle> In Proc. of the 35th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 412-423, </pages> <year> 1994. </year>
Reference-contexts: If the above assumption is not valid, then the only known algorithms are for specific networks, or networks having given properties <ref> [BFKR, AGLR, KT2] </ref>. <p> These works give competitive algorithms for the case where the link capacities are not arbitrary (either 1, uniform, or specific capacities due to a special structure of the network). [BFKR] give a deterministic O (n)-competitive algorithm for the n fi n mesh. <ref> [AGLR] </ref> give a randomized algorithm for trees with uniform capacities with competitive ratio of O (log d), where d is the diameter of the network. They also give a randomized O (log log n)-competitive algorithm for the n fi n tree of meshes. <p> This algorithm can be extended to give an O (log n log log n)-competitive algorithm for the n fi n mesh. [KT2] give a randomized O (log n)-competitive algorithm for a class of networks, that includes the mesh, and thus improve upon the result of <ref> [AGLR] </ref>. LOWER BOUNDS 2 On-line Benefit problems We consider on-line benefit problems of the following form: Entities are presented to an on-line algorithm and it has to either accept or reject each of them, under some consistency constraints defined by the problem.
Reference: [AKPPW] <author> Y. Azar., B. Kalyanasundaram, S. Plotkin, K. Pruhs and O. Waarts. </author> <title> Online Load Balancing of Temporary Tasks. </title> <booktitle> In Proc. 3rd Workshop on Algorithms and Data Structures. </booktitle> <pages> pages 119-130, </pages> <year> 1993. </year>
Reference: [Bu] <author> R. Buck. </author> <title> The Oracle Medai Server for nCUBE Massively Parallel Systems. </title> <booktitle> In Proc. of the 8th International Parallel Processing Symp. </booktitle> <pages> pages 670-673, </pages> <year> 1994. </year>
Reference-contexts: Networking technology focuses today on communication networks in which any communication is performed by the reservation of a certain "virtual circuit" between the communicating parties, and the transmission of their communication is done along these fixed lines <ref> [Bu, GKR] </ref>. This is in contrast to "packet switching" technology in which different portions of the communication between the parties may follow different routes.
Reference: [BFKR] <author> A. Blum, A. Fiat, H. Karloff and Y. Rabani. </author> <type> Personal communication. </type> <year> 1993. </year>
Reference-contexts: If the above assumption is not valid, then the only known algorithms are for specific networks, or networks having given properties <ref> [BFKR, AGLR, KT2] </ref>. <p> These works give competitive algorithms for the case where the link capacities are not arbitrary (either 1, uniform, or specific capacities due to a special structure of the network). <ref> [BFKR] </ref> give a deterministic O (n)-competitive algorithm for the n fi n mesh. [AGLR] give a randomized algorithm for trees with uniform capacities with competitive ratio of O (log d), where d is the diameter of the network. <p> We will thus obtain an O (log n) competitive algorithm, which we call the base algorithm. 4.1 The Classification Algorithm The classification algorithm that we present here builds upon an algorithm for the related problem of deterministic call admission control with preemption on trees <ref> [BFKR] </ref>. To define the classification we assign a number to each of the nodes in the following recursive way: Given a tree T of k nodes there always exists a vertex v such that its removal leaves a forest of trees, each of which contains at most (2=3)k nodes.
Reference: [BFL] <author> Y. Bartal, A. Fiat, and S. Leonardi. </author> <type> Personal communication. </type> <year> 1995. </year>
Reference: [GGKMY] <author> J. Garay, I.S. Gopel, S.Kutten, Y.Mansour, and M.Yung. </author> <title> Efficient on-line call control algorithms. </title> <booktitle> In Proc. 2nd Israel Symp. on Theory of Computing and Systems, </booktitle> <pages> pages 285-293, </pages> <year> 1993. </year>
Reference: [GKR] <author> R. Gawlick, C. Kamanek, and K.G. Ramakrishnan. </author> <title> On-Line Routing for Virtual Private Networks. </title> <type> Manuscript. </type> <year> 1994. </year>
Reference-contexts: Networking technology focuses today on communication networks in which any communication is performed by the reservation of a certain "virtual circuit" between the communicating parties, and the transmission of their communication is done along these fixed lines <ref> [Bu, GKR] </ref>. This is in contrast to "packet switching" technology in which different portions of the communication between the parties may follow different routes.
Reference: [GVY] <author> N. Garg, V. Vazirani, and M. Yannakakis. </author> <title> Primal Dual Approximation Algorithms for Integral Flow and Multicat in Trees, with Applications to Matching and Set Cover. </title> <booktitle> In Proc. of ICALP, </booktitle> <pages> pages 64-75, </pages> <year> 1993. </year>
Reference-contexts: This problem, known as the maximum disjoint paths problem in its off-line form, is NP-hard [Ka], and the recent interest in its on-line version has also moti 1 vated recent new results on approximation algorithms for it (for certain kinds of graphs) <ref> [GVY, KT1, KT2] </ref>.
Reference: [Ka] <author> R.M. Karp. </author> <title> Reducibility among Combinatorial Problems. Complexity of Computer Computations, R.E. </title> <editor> Miller, J.W. Thatcher, Eds. </editor> <address> New York: </address> <publisher> Plenum Press, </publisher> <year> 1972, </year> <pages> pages 85-103. </pages>
Reference-contexts: To enable such communication, a communication path connecting the two nodes has to be established, under the constraint that no two paths share an edge. This problem, known as the maximum disjoint paths problem in its off-line form, is NP-hard <ref> [Ka] </ref>, and the recent interest in its on-line version has also moti 1 vated recent new results on approximation algorithms for it (for certain kinds of graphs) [GVY, KT1, KT2].
Reference: [KT1] <author> J. Kleinberg, and E. Tardos. </author> <title> Approximations for the Disjoint Paths Problem in High-Diameter Planar networks. </title> <booktitle> In Proc. 27th Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pages 26-35, </pages> <year> 1995. </year> <month> 12 </month>
Reference-contexts: This problem, known as the maximum disjoint paths problem in its off-line form, is NP-hard [Ka], and the recent interest in its on-line version has also moti 1 vated recent new results on approximation algorithms for it (for certain kinds of graphs) <ref> [GVY, KT1, KT2] </ref>.
Reference: [KT2] <author> J. Kleinberg, and E. Tardos. </author> <title> Disjoint Paths in Densely Embedded Graphs. </title> <booktitle> In Proc. 36th Symp. on Foundations of Computer Science, </booktitle> <year> 1995, </year> <note> To appear. </note>
Reference-contexts: This problem, known as the maximum disjoint paths problem in its off-line form, is NP-hard [Ka], and the recent interest in its on-line version has also moti 1 vated recent new results on approximation algorithms for it (for certain kinds of graphs) <ref> [GVY, KT1, KT2] </ref>. <p> If the above assumption is not valid, then the only known algorithms are for specific networks, or networks having given properties <ref> [BFKR, AGLR, KT2] </ref>. <p> They also give a randomized O (log log n)-competitive algorithm for the n fi n tree of meshes. This algorithm can be extended to give an O (log n log log n)-competitive algorithm for the n fi n mesh. <ref> [KT2] </ref> give a randomized O (log n)-competitive algorithm for a class of networks, that includes the mesh, and thus improve upon the result of [AGLR].
Reference: [KVV] <author> R. Karp, U. Vazirani, and V. vazirani. </author> <title> An Optimal Algorithm for On-Line Bipartite Matching. </title> <booktitle> In Proc. 22nd Annual ACM Symp. on Theory of Computing, </booktitle> <pages> pages 352-358, </pages> <year> 1990. </year>
Reference-contexts: Problems of this kind arise when there is some limited resource to be used, or when there are capacity constraints, as in our call admission control problem (e.g., <ref> [KVV, AAP, LT] </ref>). The algorithm accrues some benefit associated with each entity if it is accepted, and does not accrue any if it is rejected. The benefit need not be equal for all entities.
Reference: [LT] <author> R.J. Lipton, and A. Tomkins. </author> <title> Online Interval Scheduling. </title> <booktitle> In Proc. 5th ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 302-320, </pages> <year> 1994. </year>
Reference-contexts: Problems of this kind arise when there is some limited resource to be used, or when there are capacity constraints, as in our call admission control problem (e.g., <ref> [KVV, AAP, LT] </ref>). The algorithm accrues some benefit associated with each entity if it is accepted, and does not accrue any if it is rejected. The benefit need not be equal for all entities. <p> Similar techniques have been implicitly used also by Lipton and Tomkins <ref> [LT] </ref>. Let the set of classes be P, and assume that for every P 2 P we have an on-line algorithm A P that is c-competitive if presented with entities of class P . <p> The above paradigm requires that the algorithm know in advance this number of classes in P (Note that it is not required to know the actual classes, only their number). Using techniques of Lipton and Tomkins <ref> [LT] </ref> the above paradigm can be modified to suit the case where the number of classes is not known in advance, incurring a slightly larger increase in the competitive ratio. Define f (*) = P 1 1 i 1+* .
Reference: [ST] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized Efficiency of List Update and Paging Rules. </title> <booktitle> Communication of the ACM, </booktitle> <pages> 28(2) pages 202-208, </pages> <year> 1985. </year>
Reference: [Le] <editor> J. Van Leeuwen, (ed.). </editor> <booktitle> Handbook of Theoretical Computer Science, Vol. A, Algorithms and Complexity. </booktitle> <publisher> The MIT Press, </publisher> <year> 1990. </year> <month> 13 </month>
Reference-contexts: Such a node always exists as trees have 2=3-separators of size 1 (cf. <ref> [Le] </ref>). We associate levels with the vertices recursively, starting with level l = 1. We choose a vertex v as described above, assign level l to v and apply the procedure recursively to each of the subtrees, starting at level l + 1.
References-found: 27

