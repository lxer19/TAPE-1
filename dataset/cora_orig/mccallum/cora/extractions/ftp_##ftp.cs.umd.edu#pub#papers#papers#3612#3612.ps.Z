URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3612/3612.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: Scheduling and Allocation in Multiprocessor Systems  
Degree: Sheng-Tzong Cheng, Doctor of Philosophy, 1995 Dissertation directed by: Professor Ashok K. Agrawala  
Affiliation: Department of Computer Science  
Note: Abstract Title of Dissertation:  
Abstract: The problem of allocation has always been one of the fundamental issues of building applications in multiprocessor systems. For real-time applications, the allocation problem should directly address the issues of task and communication scheduling. In this context, the allocation of tasks has to fully utilize the available processors and the scheduling of tasks has to meet the specified timing constraints. Clearly, the execution of tasks under the allocation and schedule has to satisfy the precedence, resources, and synchronization constraints. Traditionally time constraints for real-time tasks have been specified in terms of ready time and deadlines. Many application tasks have relative timing constraints in which the constraints for the execution of a task are defined in terms of the actual execution instances of prior tasks. In this dissertation we consider the allocation and scheduling problem of the periodic tasks with relative timing requirements. We take a time-based scheduling approach to generate a multiprocessor schedule for a set of periodic tasks. A simulated annealing algorithm is developed as the overall search algorithm for a feasible solution. Our results show that the algorithm performs well and finds feasible allocation and scheduling. We also investigate how to exploit the replication technique to increase the schedulability and performance of the systems. In this dissertation, we adopt the computation model in which each 
Abstract-found: 1
Intro-found: 1
Reference: [AR80a] <author> R. K. Arora and S. P. Rana. </author> <title> Analysis of the module assignment problem in distributed computing systems with limited storage. </title> <journal> Information Processing Letters, </journal> <volume> 10(3) </volume> <pages> 111-115, </pages> <year> 1980. </year>
Reference: [AR80b] <author> R. K. Arora and S. P. Rana. </author> <title> Heuristic algorithms for process assignment in distributed computing systems. </title> <journal> Information Processing Letters, </journal> <volume> 11(4,5):199-203, </volume> <year> 1980. </year>
Reference: [BFB91] <author> C. Barmon, M. N. Faruqui, and G. P. Battacharjee. </author> <title> Dynamic load balancing algorithm in a distributed system. </title> <journal> Microprocessing and microprogramming, </journal> <volume> 29(5) </volume> <pages> 273-285, </pages> <month> March </month> <year> 1991. </year>
Reference: [Bok81] <author> Shahid H. Bokhari. </author> <title> A shortest tree algorithm for optimal assignment across space and time in distributed processor system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7(11) </volume> <pages> 583-589, </pages> <month> Nov. </month> <year> 1981. </year>
Reference: [Bok87] <author> Shahid H. Bokhari. </author> <title> Assignment Problems in Parallel and Distributed Computing. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1987. </year>
Reference-contexts: As for the MCRP-SP problem, it can be shown to be NP-complete. In this chapter, we present a linear-time algorithm for computation-intensive applications with SP graphs, when the number of processors n is given. 6.3.1 Assignment Graph Bokhari <ref> [Bok87] </ref> introduced the assignment graph to solve the task assignment problem (6.2). To prove the NP completeness of problem (6.1) and solve the problem, we also adopt the concept of the assignment graph of an SP graph. The assignment graph of an SP graph can be defined similarly. <p> Communication costs are accounted for by giving the weight i;j (p; q) to the edge going from t i;p to t j;q . 6. Execution costs are assigned to the corresponding weighted nodes. Given an assignment graph, Bokhari <ref> [Bok87] </ref> solves Problem (6.2) by selecting one weighted node from each layer and including the weighted edges between any two selected nodes. This resulting subgraph is called an allocation graph. To solve Problem (6.1), more than one weighted node from each layer may be chosen. <p> Before the replacement of a T chain limb is performed (i.e. x is a T chain -type node), each constituent child limb has been replaced with a T unit or two-layer T chain limb. The shortest path algorithm <ref> [Bok87] </ref> can be used to compute the weights of the new edges between each node in the source layer and each node in the sink layer of the new T chain limb.
Reference: [Bur91] <author> A. Burns. </author> <title> Scheduling hard real-time systems: A review. </title> <journal> Software Engineering Journal, </journal> <volume> 6(3) </volume> <pages> 116-128, </pages> <year> 1991. </year>
Reference: [CA93] <author> Sheng-Tzong Cheng and Ashok K. Agrawala. </author> <title> Optimal replication of series-parallel graphs for computation-intensive applications. </title> <type> Technical Report CS-TR-3020, </type> <institution> UMIACS-TR-93-4, Department of Computer Science, University of Maryland, College Park, </institution> <month> Jan. </month> <year> 1993. </year> <note> to appear in Journal of Parallel and Distributed Computing, </note> <year> 1994. </year>
Reference-contexts: The purpose of schedulability-oriented replication is to increase the degree of schedulability. Under such consideration, there is no need to enforce multiple copy communication between any two modules. We propose the 1-out-of-n model <ref> [CA93] </ref> for schedulability-oriented replication.
Reference: [CA94] <author> Sheng-Tzong Cheng and Ashok K. Agrawala. </author> <title> Scheduling of periodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3392, </type> <institution> UMIACS-TR-94-135, Department of Computer Science, University of Maryland, College Park, </institution> <month> December. </month> <year> 1994. </year> <booktitle> Submitted to the 10th Annual IEEE Conference on Computer Assurance, COMPASS '95. </booktitle> <pages> 166 </pages>
Reference: [CA95] <author> Sheng-Tzong Cheng and Ashok K. Agrawala. </author> <title> Allocation and scheduling of real-time pe-riodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3402, </type> <institution> UMIACS-TR-95-6, Department of Computer Science, University of Maryland, College Park, </institution> <month> Jan-uary </month> <year> 1995. </year>
Reference: [CC90] <author> Y. Chen and T. Chen. </author> <title> Implementing fault-tolerance via modular redundancy with comparison. </title> <journal> IEEE Transactions on Reliability, </journal> <volume> 39 </volume> <pages> 217-225, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: The primary focus of the work in Chapter 4 is on 58 the assignment problem. 5.1.1 Schedulability-Oriented Replication Traditionally, the objective of reliability-oriented replication problems is to increase the degree of fault tolerance <ref> [CC90, LAMS92] </ref>. If some processors in the distributed system fail, the application may still survive using other copies. In such a model, a module has to communicate with multiple copies of other modules. <p> Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem. Traditionally, the main purpose of replicating a task on multiple processors is to increase the degree of fault tolerance <ref> [CC90, LAMS92] </ref>. If some processors in a system fail, the application may still survive using other copies. In such a model, a task has to communicate with multiple copies of other tasks.
Reference: [CHA94] <author> Sheng-Tzong Cheng, Shyhin Hwang, and Ashok K. Agrawala. </author> <title> Mission-oriented replication of periodic tasks in real-time distributed system. </title> <type> Technical Report CS-TR-3256, </type> <institution> UMIACS-TR-94-46, Department of Computer Science, University of Maryland, College Park, </institution> <year> 1994. </year> <booktitle> to appear in the 15th IEEE International Conference on Distributed Computing Systems, </booktitle> <address> ICDCS '95. </address>
Reference: [CHLE80] <author> Wesley W. Chu, Leslie J. Holloway, Min-Tsung Lan, and Kemal Efe. </author> <title> Task allocation in distributed data processing. </title> <journal> IEEE Computer, </journal> <volume> 13 </volume> <pages> 57-69, </pages> <month> Nov. </month> <year> 1980. </year>
Reference: [CL87] <author> Wesley W. Chu and Lance M-T Lan. </author> <title> Task allocation and precedence relations for distributed real-time systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(6) </volume> <pages> 667-679, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: In this chapter, we consider the replication problem and present algorithms to find optimally feasible solutions for replicating modules of real-time periodic tasks. 5.1 Introduction For real-time applications, the objective function of the allocation problem can be in terms of bottleneck processor time <ref> [CL87] </ref>, system hazard [PS89], the degree of reliability [SW89] or the degree of schedulability, etc. For real-time applications where the degree of schedulability is the most critical concern, the essential solution is to find an allocation in which there exists a feasible schedule for the given task set.
Reference: [CO91] <author> H.W.D. Chang and W.J.B. Oldham. </author> <title> A dynamic task allocation model for large distributed computing systems. </title> <journal> Journal of Microcomputer Applications, </journal> <volume> 10(3) </volume> <pages> 92-107, </pages> <year> 1991. </year>
Reference: [GH93] <author> R. Gerber and S. Hong. </author> <title> Semantics-based complier transformations for enhanced schedulability. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 232-242, </pages> <address> Raleigh-Durham, NC, </address> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: In code-based semantics, the timing constraints are established between blocks of code. Modules of tasks are associated with ready times and deadlines. Recently, Gerber and Hong <ref> [GH93] </ref> presented a time-constrained event language (TCEL) in which the timing semantics are based on the constraints relationships between observable events.
Reference: [GJ79] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to Theory of NP-Completeness. W.H. </title> <publisher> Freeman & Company, Publishers, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: We will now transform the VERTEX COVER <ref> [GJ79] </ref> problem to this problem.
Reference: [GMK + 91] <author> O. Gudmundsson, D. Mosse, K.T. Ko, A.K. Agrawala, and S.K. Tripathi. Maruti: </author> <title> A platform for hard real-time applications. </title> <editor> In K. Gordon, A.K. Agrawala, and P. Hwang (eds.), editors, </editor> <title> Mission Critical Operating Systems. </title> <publisher> IOS Press, </publisher> <year> 1991. </year>
Reference-contexts: The whole process terminates when a feasible solution is found in which the energy value is zero, or when it is not possible to improve over the current solution. 4.4 Experimental Results We implement the algorithm as the framework of the allocator on MARUTI <ref> [GMK + 91] </ref> [MSA92] [SdSA94], a real-time operating system developed at the University of Maryland, and conducted extensive experiments under various task characteristics. The tests involve the allocation of real-time tasks on a homogeneous distributed system connected by a communication channel. <p> These three modes are adequate to find a feasible solution from a starting point, if feasible solutions exist. 5.5 Experimental Results We implemented the algorithm (SA/R) as the framework of the allocator on MARUTI <ref> [GMK + 91, MSA92] </ref>, a real-time operating system developed at the University of Maryland, and conducted extensive experiments with tasks having different characteristics. The tests involve the allocation of real-time tasks on a homogeneous distributed system with seven sites connected by a communication channel.
Reference: [GPS] <author> R. Gerber, W. Pugh, and M. Saksena. </author> <title> Parametric dispatching of hard real-time tasks. </title> <journal> IEEE Transactions on Computers. </journal> <note> To appear. 167 </note>
Reference: [HL89] <author> C. C. Han and K. J. Lin. </author> <title> Job scheduling with temporal distance constraints. </title> <type> Technical Report UIUCDCS-R-89-1560, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1989. </year>
Reference: [HL92a] <author> C. C. Han and K. J. Lin. </author> <title> Scheduling distance-constrainted real-time tasks. </title> <booktitle> In Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 300-308, </pages> <address> Phoenix, AZ, </address> <month> Dec. </month> <year> 1992. </year>
Reference: [HL92b] <author> C. C. Han and K. J. Lin. </author> <title> Scheduling real-time computations with separation constraints. </title> <journal> Information Processing Letters, </journal> <volume> 42(5) </volume> <pages> 61-66, </pages> <month> May </month> <year> 1992. </year>
Reference: [HMR + 89] <author> R. Holte, A. Mok, L. Rosier, I. Tulchinsky, and D. Varvel. </author> <title> The pinwheel: A real-time scheduling problem. </title> <booktitle> In Proceedings of the 22nd Hawaii International Conference on System Science, </booktitle> <pages> pages 693-702, </pages> <month> Jan. </month> <year> 1989. </year>
Reference: [HS78] <author> E. Horowitz and S.Sahni. </author> <title> Fundamentals of Computer Algorithms. </title> <publisher> Computer Science Publishers, </publisher> <year> 1978. </year>
Reference: [HS92] <author> Chao-Ju Hou and Kang G. Shin. </author> <title> Allocation of periodic task modules with precedence and deadline constraints in distributed real-time systems. </title> <booktitle> In Proceedings of the 1992 IEEE 13th Real-Time Systems Symposium, </booktitle> <pages> pages 146-155, </pages> <address> Phoenix, AZ, </address> <year> 1992. </year>
Reference: [JLT] <author> Rong-Hong Jan, Deron Liang, and Satish K. Tripathi. </author> <title> A linear-time algorithm for computing distributed task reliability in pseudo two-terminal series-parallel graphs. </title>
Reference-contexts: G 0 is an SP graph of type T and (or type T or ) if there exists a parallel-and (or parallel-or) relation among G i 's. A convenient way of representing the structure of an SP graph is via a parsing tree <ref> [JLT] </ref>. The transformation of an SP graph to a parsing tree can be done in a recursive way. There are four kinds of internal nodes in a parsing tree: T unit , T chain , T and and T or nodes.
Reference: [KGV83] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220(4598) </volume> <pages> 671-680, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: The communications t 6 x 7! t 2 y 7! t 8 x are scheduled before and after the scheduling of t 2 y respectively. 4.3 The Simulated Annealing Algorithm Kirkpatrick et al. <ref> [KGV83] </ref> proposed a simulated annealing algorithm for combinatorial optimization problems. Simulated annealing is a global optimization technique. It is derived from the observation that an optimization problem can be identified with a fluid. <p> The termination condition for the outer loop is E p = 0. After thermal equilibrium is reached at a temperature, the value of T is decreased. Different approaches of temperature decrease function have been proposed <ref> [KGV83] </ref>. Here we consider a 47 simple multiplication function (i.e.
Reference: [LAMS92] <author> Deron Liang, Ashok K. Agrawala, Daniel Mosse, and Yiheng. Shi. </author> <title> Designing fault tolerant applications in maruti. </title> <booktitle> In Proceedings of the 3rd International Symposium on Software Reliability Engineering, </booktitle> <pages> pages 264-273, </pages> <address> Research Triangle Park, NC, </address> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: The primary focus of the work in Chapter 4 is on 58 the assignment problem. 5.1.1 Schedulability-Oriented Replication Traditionally, the objective of reliability-oriented replication problems is to increase the degree of fault tolerance <ref> [CC90, LAMS92] </ref>. If some processors in the distributed system fail, the application may still survive using other copies. In such a model, a module has to communicate with multiple copies of other modules. <p> Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem. Traditionally, the main purpose of replicating a task on multiple processors is to increase the degree of fault tolerance <ref> [CC90, LAMS92] </ref>. If some processors in a system fail, the application may still survive using other copies. In such a model, a task has to communicate with multiple copies of other tasks.
Reference: [LH91] <author> Feng-Tse Lin and Ching-Chi Hsu. </author> <title> Task assignment problems in distributed computing systems by simulated annealing. </title> <journal> Journal of the Chinese Institute of Engineers, </journal> <volume> 14(5) </volume> <pages> 537-550, </pages> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: The number of iterations for the inner loop is also a function of current temperature. The lower the temperature, the bigger the number. Several approaches on how to model the numbers of iterations and how to assign the number for each temperature have been proposed <ref> [LH91] </ref>. In this dissertation, we consider a simple incremental function. Namely, N = N + where N is the number of iterations and is a constant. The termination condition for the outer loop is E p = 0. <p> In order to escape from the local minimum and find a global minimum, the number of iterations needed at a low temperature is extremely large. The number of iterations has been modeled as a Markov Chain <ref> [LH91] </ref>, where an upper bound on the number of iterations at low temperatures is enforced to avoid infinite chains. In SA/R, Replicate (P ) is invoked to search for a feasible replication for P if E p is small.
Reference: [LL73] <author> C. L. Liu and James W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Cumputing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year> <month> 168 </month>
Reference: [Lo88] <author> V. M. Lo. </author> <title> Heuristic algorithms for task assignment in distributed systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(11) </volume> <pages> 1384-1397, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers [MLT82, MM89, PP82] presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo <ref> [Lo88] </ref> and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem. Traditionally, the main purpose of replicating a task on multiple processors is to increase the degree of fault tolerance [CC90, LAMS92]. If some processors in a system fail, the application may still survive using other copies.
Reference: [MLT82] <author> P.R. Ma, E.Y.S. Lee, and M. Tsuchiya. </author> <title> A task allocation model for distributed computing systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 31 </volume> <pages> 41-47, </pages> <month> Jan. </month> <year> 1982. </year>
Reference-contexts: For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers <ref> [MLT82, MM89, PP82] </ref> presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem.
Reference: [MM89] <author> V.F. Magirou and J.Z. Milis. </author> <title> An algorithm for the multiprocessor assignment problem. </title> <journal> Operations Research Letters, </journal> <volume> 8 </volume> <pages> 351-356, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: For general task graphs, the assignment problem has been proven <ref> [MM89] </ref> to be NP-complete. Many papers [MLT82, MM89, PP82] presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem. <p> For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers <ref> [MLT82, MM89, PP82] </ref> presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem. <p> However,the multiprocessor task assignment for general types of task graphs without replication has been reported to be NP-complete <ref> [MM89] </ref>. As for the MCRP-SP problem, it can be shown to be NP-complete.
Reference: [MSA92] <author> Daniel Mosse, M.C. Saksena, and Ashok K. Agrawala. Maruti: </author> <title> An approach to real-time system design. </title> <type> Technical Report CS-TR-2845, </type> <institution> UMIACS-TR-92-21, Department of Computer Science, University of Maryland, College Park, </institution> <year> 1992. </year>
Reference-contexts: The whole process terminates when a feasible solution is found in which the energy value is zero, or when it is not possible to improve over the current solution. 4.4 Experimental Results We implement the algorithm as the framework of the allocator on MARUTI [GMK + 91] <ref> [MSA92] </ref> [SdSA94], a real-time operating system developed at the University of Maryland, and conducted extensive experiments under various task characteristics. The tests involve the allocation of real-time tasks on a homogeneous distributed system connected by a communication channel. <p> These three modes are adequate to find a feasible solution from a starting point, if feasible solutions exist. 5.5 Experimental Results We implemented the algorithm (SA/R) as the framework of the allocator on MARUTI <ref> [GMK + 91, MSA92] </ref>, a real-time operating system developed at the University of Maryland, and conducted extensive experiments with tasks having different characteristics. The tests involve the allocation of real-time tasks on a homogeneous distributed system with seven sites connected by a communication channel.
Reference: [PK84] <author> C.C. Price and S. Krishnaprasad. </author> <title> Software allocation models for distributed computing systems. </title> <booktitle> In Proceedings of the 4th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 40-48, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers [MLT82, MM89, PP82] presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad <ref> [PK84] </ref>. All these works focused on the assignment problem. Traditionally, the main purpose of replicating a task on multiple processors is to increase the degree of fault tolerance [CC90, LAMS92]. If some processors in a system fail, the application may still survive using other copies.
Reference: [PP82] <author> C.C. Price and U.W. Pooch. </author> <title> Search techniques for a nonlinear multiprocessor scheduling problem. </title> <journal> Naval Res. Logist. Quart., </journal> <volume> 29 </volume> <pages> 213-233, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers <ref> [MLT82, MM89, PP82] </ref> presented branch-and-bound methods which yielded an optimal result. Other heuristic methods have been considered by Lo [Lo88] and Price and Krishnaprasad [PK84]. All these works focused on the assignment problem.
Reference: [PS89] <author> D. T. Peng and K. G. Shin. </author> <title> Static allocation of periodic tasks with precedence constraints in distributed real-time systems. </title> <booktitle> In The 9th International Conference on Distributed Computing Systems, </booktitle> <address> Newport Beach, CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: In this chapter, we consider the replication problem and present algorithms to find optimally feasible solutions for replicating modules of real-time periodic tasks. 5.1 Introduction For real-time applications, the objective function of the allocation problem can be in terms of bottleneck processor time [CL87], system hazard <ref> [PS89] </ref>, the degree of reliability [SW89] or the degree of schedulability, etc. For real-time applications where the degree of schedulability is the most critical concern, the essential solution is to find an allocation in which there exists a feasible schedule for the given task set.
Reference: [Ram90] <author> Krithi Ramamritham. </author> <title> Allocation and scheduling of complex periodic tasks. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 108-115, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: For real-time applications where the degree of schedulability is the most critical concern, the essential solution is to find an allocation in which there exists a feasible schedule for the given task set. Ramamritham <ref> [Ram90] </ref> proposes a global view where the purpose of allocation should directly address the schedulability of processors and communication network. Taking the same global view, we have developed the allocation and scheduling algorithms based on the simulated annealing technique in Chapter 4.
Reference: [RS94] <author> K. Ramamritham and J. A. Stankovic. </author> <title> Scheduling algorithms and operating systems support for real-time systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 82(1) </volume> <pages> 55-67, </pages> <month> Jan. </month> <year> 1994. </year>
Reference: [RSL89] <author> R. Rajkumar, L. Sha, and J. P. Lehoczky. </author> <title> An experimental investigation of synchronization protocols. </title> <booktitle> In Proceedings of IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pages 11-17, </pages> <month> May </month> <year> 1989. </year>
Reference: [SA93] <author> M. Saksena and A. K. Agrawala. </author> <title> Temproal analysis for hard-real time scheduling. </title> <booktitle> In Proceedings 12th International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 538-544, </pages> <address> Phoenix, AZ, </address> <month> March </month> <year> 1993. </year> <month> 169 </month>
Reference: [SdSA94] <author> M. Saksena, J. da Silva, and A. K. Agrawala. </author> <title> Design and implementation of maruti--ii. </title> <type> Technical Report CS-TR-2845, </type> <institution> Department of Computer Science, University of Maryland, College Park, </institution> <year> 1994. </year>
Reference-contexts: The whole process terminates when a feasible solution is found in which the energy value is zero, or when it is not possible to improve over the current solution. 4.4 Experimental Results We implement the algorithm as the framework of the allocator on MARUTI [GMK + 91] [MSA92] <ref> [SdSA94] </ref>, a real-time operating system developed at the University of Maryland, and conducted extensive experiments under various task characteristics. The tests involve the allocation of real-time tasks on a homogeneous distributed system connected by a communication channel.
Reference: [SK91] <author> David Stewart and Pradeep Khosla. </author> <title> Real-time scheduling of dynamically reconfigurable systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Systems Engineering, </booktitle> <pages> pages 139-142, </pages> <address> Dayton, Ohio, </address> <month> Aug. </month> <year> 1991. </year>
Reference: [SRL90] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> Sept. </month> <year> 1990. </year>
Reference: [SS91] <author> A. K. Sarje and G. Sagar. </author> <title> Heuristic models for task allocation in distributed computer systems. </title> <booktitle> IEE Proceedings, Part E, [Computers and Digital Techniques], </booktitle> <volume> 138(5) </volume> <pages> 313-318, </pages> <month> Sept. </month> <year> 1991. </year>
Reference: [SSA89] <author> G. Sagar, Anil K. Sarje, and Kamal U. Ahmed. </author> <title> Task allocation techniques for distributed computing systems: a review. </title> <journal> Journal of Microcomputer Applications, </journal> <volume> 12(2) </volume> <pages> 97-105, </pages> <month> April </month> <year> 1989. </year>
Reference: [ST85] <author> Chien-Chung Shen and Wen-Hsiang Tsai. </author> <title> A graph matching approach to optimal task assignment in distributed computing systems using a minimax criterion. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 34(3) </volume> <pages> 197-203, </pages> <month> March </month> <year> 1985. </year>
Reference: [Sto77] <author> Harold S. Stone. </author> <title> Multiprocessor scheduling with the aid of network flow algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 3 </volume> <pages> 85-93, </pages> <month> Jan. </month> <year> 1977. </year>
Reference-contexts: For the assignment problem in which the objective is to minimize the total cost of execution and interprocessor communication, Stone <ref> [Sto77] </ref> and Towsley [Tow86] presented O (n 3 M ) algorithms for tree-structure and series-parallel graphs, respectively, of M tasks and n processors. For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers [MLT82, MM89, PP82] presented branch-and-bound methods which yielded an optimal result. <p> Such replication may lead to a lower total cost than the optimal assignment problem. An example illustrating this point is presented in Section 6.3. In the assignment problem, polynomial-time algorithms exist for special cases, such as tree-structure <ref> [Sto77] </ref> and series-parallel [Tow86] task graphs. This work represents one of the first few attempts at finding special cases for the replication problem. The class of applications we consider in this chapter is computation-intensive applications in which the execution cost of a task is greater than its communication cost.
Reference: [SW89] <author> Sol M. Shatz and Jia-Ping Wang. </author> <title> Models & algorithms for reliability-oriented task-allocation in redundant distributed-computer systems. </title> <journal> IEEE Transactions on Reliability, </journal> <volume> 38(1) </volume> <pages> 16-27, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: this chapter, we consider the replication problem and present algorithms to find optimally feasible solutions for replicating modules of real-time periodic tasks. 5.1 Introduction For real-time applications, the objective function of the allocation problem can be in terms of bottleneck processor time [CL87], system hazard [PS89], the degree of reliability <ref> [SW89] </ref> or the degree of schedulability, etc. For real-time applications where the degree of schedulability is the most critical concern, the essential solution is to find an allocation in which there exists a feasible schedule for the given task set.
Reference: [TBW92] <author> K. W. Tindell, A. Burns, and A. J. Wellings. </author> <title> Allocating hard real-time tasks: an NP-hard problem made easy. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 4(2) </volume> <pages> 145-165, </pages> <month> June </month> <year> 1992. </year>
Reference: [Tow86] <author> Don Towsley. </author> <title> Allocating programs containing branches and loops within a multiple processor system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12 </volume> <pages> 1018-1024, </pages> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: For the assignment problem in which the objective is to minimize the total cost of execution and interprocessor communication, Stone [Sto77] and Towsley <ref> [Tow86] </ref> presented O (n 3 M ) algorithms for tree-structure and series-parallel graphs, respectively, of M tasks and n processors. For general task graphs, the assignment problem has been proven [MM89] to be NP-complete. Many papers [MLT82, MM89, PP82] presented branch-and-bound methods which yielded an optimal result. <p> Such replication may lead to a lower total cost than the optimal assignment problem. An example illustrating this point is presented in Section 6.3. In the assignment problem, polynomial-time algorithms exist for special cases, such as tree-structure [Sto77] and series-parallel <ref> [Tow86] </ref> task graphs. This work represents one of the first few attempts at finding special cases for the replication problem. The class of applications we consider in this chapter is computation-intensive applications in which the execution cost of a task is greater than its communication cost. <p> X i;p 1 and F (r) = 1; where r is the root of T (G) and X i;p = 0 or 1; 8i; p: (6.2) The task assignment problem (6.2) for SP graphs of M tasks onto n processors, has been solved in O (n 3 M ) time <ref> [Tow86] </ref>. However,the multiprocessor task assignment for general types of task graphs without replication has been reported to be NP-complete [MM89]. As for the MCRP-SP problem, it can be shown to be NP-complete.
Reference: [TT89] <author> P. Thambidurai and K. S. Trivedi. </author> <title> Transient overloads in fault-tolerant real-time systems. </title> <booktitle> In Proceedings of the 1989 IEEE 10th Real-Time Systems Symposium, </booktitle> <address> Santa Monica, CA, </address> <month> Dec. </month> <year> 1989. </year> <month> 170 </month>
Reference: [XP90] <author> J. Xu and D.L. Parnas. </author> <title> Scheduling processes with release times, deadlines, precedence, and exclusion relations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(3) </volume> <pages> 360-369, </pages> <month> March </month> <year> 1990. </year>
Reference: [XP91] <author> J. Xu and D.L. Parnas. </author> <title> On satisfying timing constraints in hard-real-time systems. </title> <booktitle> In Proceedings of the ACM SIGSOFT'91 Conference on Software for Critical Systems, </booktitle> <pages> pages 132-146, </pages> <month> Dec. </month> <year> 1991. </year>
Reference: [YSA94] <author> X. Yuan, M. Saksena, and A. K. Agrawala. </author> <title> A decomposition approach to real-time scheduling. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(1) </volume> <pages> 7-36, </pages> <month> Jan. </month> <year> 1994. </year>
Reference: [ZRS87] <author> W. Zhao, K. Ramamritham, and J. A. Stankovic. </author> <title> Scheduling tasks with resource requirements in a hard real-time system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(5) </volume> <pages> 564-577, </pages> <month> May </month> <year> 1987. </year> <month> 171 </month>
References-found: 55

