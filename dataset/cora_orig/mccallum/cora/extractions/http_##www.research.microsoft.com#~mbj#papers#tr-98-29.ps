URL: http://www.research.microsoft.com/~mbj/papers/tr-98-29.ps
Refering-URL: http://www.research.microsoft.com/~mbj/papers.html
Root-URL: http://www.research.microsoft.com
Title: Issues in Using Commodity Operating Systems for TimeDependent Tasks: Experiences from a Study of Windows NT  
Author: Michael B. Jones John Regehr 
Note: Paper published in Proceedings of the Eighth International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV 98), Cambridge, England, pages  
Address: One Microsoft Way Redmond, WA 98052  
Affiliation: Microsoft Research Microsoft Corporation  
Date: July, 1998  107-110, July 1998.  
Abstract: Technical Report MSR-TR-98-29 
Abstract-found: 1
Intro-found: 1
Reference: [Bolosky et al. 97] <author> William J. Bolosky, Robert P. Fitzgerald, and John R. Douceur. </author> <title> Distributed Schedule Management in the Tiger Video Fileserver. </title> <booktitle> In Proc. of the 16 th ACM Symposium on Operating Systems Principles, St-Malo, France, </booktitle> <pages> pp. 212-223, </pages> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: We are in the early stages of a study of Windows NT aimed at understanding and improving its limitations when used for timedependent tasks. Clearly there are time scales for which it can achieve effectively perfect reliability, such as for the onesecond deadlines present in the Tiger Video Filesystem <ref> [Bolosky et al. 97] </ref>. Other time scales, such as reliable sub-millisecond scheduling of periodic tasks, are clearly out of reach without resorting to special tricks. But there is an interesting range in the middle where tasks can often be executed, but not always.
Reference: [Jones et al. 96] <author> Michael B. Jones, Joseph S. Barrera III, Alessandro Forin, Paul J. Leach, Daniela Rou, Marcel-Ctlin Rou. </author> <title> An Overview of the Rialto Real-Time Architecture. </title> <booktitle> In Proc. of the Seventh ACM SIGOPS European Workshop, Connemara, Ireland, </booktitle> <pages> pp. 249-256, </pages> <month> Sep. </month> <year> 1996. </year>
Reference-contexts: Features not found include deadline-based scheduling, explicit CPU or resource management [Mercer et al. 94, Nieh & Lam 97, Jones et al. 97], priority inheritance, fine-granularity clock and timer services <ref> [Jones et al. 96] </ref>, and bounded response time for essential system services. Features that it does have include high-priority real-time thread priorities, interrupt routines that typically re-enable interrupts very quickly, and periodic callback routines [Solomon 98]. Windows NT schedules threads based on their priority and processor affinity.
Reference: [Jones et al. 97] <author> Michael B. Jones, Daniela Rou, Marcel-Ctlin Rou, </author> <title> CPU Reservations and Time Constraints: Efficient, Predictable Scheduling of Independent Activities, </title> <booktitle> In Proc. of the 16 th ACM Symposium on Operating System Principles, St-Malo, France, </booktitle> <pages> pp. 198-211, </pages> <month> Oct. </month> <year> 1997. </year>
Reference: [Mercer et al. 94] <author> Clifford W. Mercer, Stefan Savage, Hideyuki Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications. </title> <booktitle> In Proc. of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [Nieh et al. 93] <author> Jason Nieh, James G. Hanko, J. Duane Northcutt, and Gerald Wall. </author> <title> SVR4 UNIX Scheduler Unacceptable for Multimedia Applications. </title> <booktitle> In Proc. of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video. </booktitle> <address> Lancaster, U.K., </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: 1. Introduction Windows NT and other commonly available general-purpose operating systems such as Solaris and Linux are increasingly being used to run timedependent tasks such as those that arise for audio and video processing, despite good arguments against doing so <ref> [Nieh et al. 93] </ref>.
Reference: [Nieh & Lam 97] <author> Jason Nieh and Monica S. Lam. </author> <title> The Design, Implementation and Evaluation of SMART: A Scheduler for Multimedia Applications. </title> <booktitle> In Proc. of the 16 th ACM Symposium on Operating Systems Principles, St-Malo, France, </booktitle> <pages> pp. 184-197, </pages> <month> Oct. </month> <year> 1997. </year>
Reference: [Solomon 98] <author> David A. Solomon. </author> <title> Inside Windows NT, Second Edition. </title> <publisher> Microsoft Press, </publisher> <year> 1998. </year>
Reference-contexts: This is the case even though many such systems, and Windows NT <ref> [Solomon 98] </ref> in particular, were designed primarily to maximize aggregate throughput and to achieve approximately fair sharing of resources rather than to provide low-latency response to events, predictable time-based scheduling, or explicit resource allocation mechanisms. <p> Features that it does have include high-priority real-time thread priorities, interrupt routines that typically re-enable interrupts very quickly, and periodic callback routines <ref> [Solomon 98] </ref>. Windows NT schedules threads based on their priority and processor affinity. The priorities are divided into three ranges: real-time (16-31), normal (1-15), and idle (0). <p> The scheduler essentially selects the first thread of the highest runnable 2 priority and runs it for its quantum, then places it at the tail of its priority list. For more details on processor affinity and related issues, see <ref> [Solomon 98] </ref>. Under Windows NT, not all CPU time is controlled by the scheduler. Of course, time spent in interrupt handling is unscheduled, although the system is designed to minimize hardware interrupt latencies by doing as little work as possible at interrupt level.
References-found: 7

