URL: http://www.cs.bu.edu/techreports/94-014-strong-normalization.ps.gz
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: kfoury@cs.bu.edu  jbw@cs.bu.edu  
Title: New Notions of Reduction and Non-Semantic Proofs of fi-Strong Normalization in Typed -Calculi new notions
Author: A. J. Kfoury J. B. Wells 
Note: Two  This work is partly supported by NSF grant CCR-9113196.  
Date: December 19, 1994  
Address: Boston University  
Affiliation: Dept. of Computer Science Boston University  Dept. of Computer Science  
Abstract: Boston University Computer Science Department Technical Report 94-014 Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [Bar84] <author> H. P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North-Holland, </publisher> <address> revised edition, </address> <year> 1984. </year>
Reference-contexts: If M and N are -terms, then M N means that M and N are identical after allowing ff-conversion. N M denotes that N is a proper subterm of M and N M includes the possibility that N M . 2.2 Reduction. Our notation on reduction generally follows Barendregt's <ref> [Bar84, x 3.1, p. 50-59] </ref> with some minor differences. A reduction relation R is a set of pairs of -terms. If (M; N ) 2 R, then we say that M is an R-redex and N is its contractum. <p> of fl fl . 5 ffi A subterm occurrence N in M is passive if N M or N occurs as (P N ) M for some P or N occurs as (x:N ) where (x:N ) is passive, otherwise N is active. (Note that this definition is different from <ref> [Bar84, x 2.1.8 (iv), p. 25] </ref>.) Generally, if there is a -abstraction (z:Z) in X and X ! fl Y and there is a -abstraction (z:Z 0 ) in Y , we say that (z:Z) and (z:Z 0 ) are the same -abstraction, even though the bodies Z and Z 0 <p> For example, the marked fi-redex is written as (( i x:P )Q). The notation we use is in the style of <ref> [Bar84, x 11.1.2, p. 279 and x 11.2.4, p. 284] </ref>. It is also necessary to keep track of fl-redexes and their residuals relative to both fi-reduction and fl-reduction. For this, we also mark the leading of the fl-redex with an index j 2 N, but this time in superscript position. <p> It is already known that fiI-reduction preserves the fi-SN property. We present here the necessary observations to make use of this known result. Let ((x:P )Q). If x 2 FV (P ) then is an I-redex. Otherwise, if x 62 FV (P ) then is a K-redex. (Following <ref> [Bar84, x 11.3.6, p. 296] </ref>.) Lemma 3.7 Let M ! fi N where is an I-redex. Then M is fi-SN if and only if N is fi-SN. <p> Proof: The two directions of the equivalence are proved separately. 9 ) Immediate. ( This is true if and only if the contrapositive is true: fi-1 (M ) implies fi-1 (N ). This is exactly the statement of the Conservation Theorem <ref> [Bar84, x 13.4.12, p. 343] </ref>. ffi 3.4 ?-Reduction. In this subsection, we define ?-reduction, a combination of fl-reduction and fi-reduction. We then prove the major result of Theorem 3.11, showing that the question of fi-strong normalization can be reduced to the question of ?-normalization.
Reference: [Bar92] <author> H. P. Barendregt. </author> <title> Lambda calculi with types. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, eds., </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> vol. 2, chapter 2, </volume> <pages> pp. 117-309. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: So we give an equivalent Church-style presentation of the intersection-type discipline. (This is done despite Barendregt's fairly accurate observation that "for : : : the system of intersection types : : : it is not clear how to define a Church version" <ref> [Bar92] </ref>.) As with the simply-typed -calculus, -term variables are pairs of untyped variables and types written as x , y t , z , etc. The -terms will be required to satisfy the same property (y) as before, so that type assignments can be avoided.
Reference: [CC90] <author> F. Cardone and M. Coppo. </author> <title> Two extensions of Curry's type inference system. </title> <editor> In Odifreddi [Odi90], </editor> <volume> chapter 1, </volume> <pages> pp. 19-75. </pages>
Reference-contexts: The intersection-type discipline is defined as an extension of the simply-typed -calculus. Cardone and Coppo call the system presented here the system of simple intersection types, reserving the unqualified name for the system with the ! type constant that can be assigned to any -term <ref> [CC90] </ref>. Sometimes, a "" rule is included with the system for type inclusion, but this is not necessary here since this rule does not change the set of typable -terms.
Reference: [CDC80] <author> M. Coppo and M. Dezani-Ciancaglini. </author> <title> An extension of basic functionality theory for lambda-calculus. </title> <journal> Notre Dame J. Formal Log., </journal> <volume> 21 </volume> <pages> 685-693, </pages> <year> 1980. </year>
Reference-contexts: In any case, there is a certain amount of difficulty in understanding the semantic definitions. In this paper, we deal with the system of intersection types, so we briefly review the background of this system here. This type system was introduced by Coppo and Dezani just before 1980 <ref> [CDC80, CDCV81] </ref>. There are two important variants of the system, one of which is an extension of the other.
Reference: [CDCV81] <author> M. Coppo, M. Dezani-Ciancaglini, and B. Venneri. </author> <title> Functional characters of solvable terms. </title> <journal> Z. Math. Log. Grund. Math., </journal> <volume> 27 </volume> <pages> 45-58, </pages> <year> 1981. </year>
Reference-contexts: In any case, there is a certain amount of difficulty in understanding the semantic definitions. In this paper, we deal with the system of intersection types, so we briefly review the background of this system here. This type system was introduced by Coppo and Dezani just before 1980 <ref> [CDC80, CDCV81] </ref>. There are two important variants of the system, one of which is an extension of the other.
Reference: [DM79] <author> N. Dershowitz and Z. Manna. </author> <title> Proving termination with multiset orderings. </title> <journal> J. ACM, </journal> <volume> 22 </volume> <pages> 465-476, </pages> <year> 1979. </year>
Reference-contexts: Lemma 4.1 The ordering " " is well-founded, i.e. there cannot be an infinite descending chain S S 1 S 2 S i . Proof: See <ref> [DM79] </ref>. ffi 4.4 A Normalizing ?-Reduction Strategy. We now prove that a particular ?-reduction strategy terminates for all simply-typable -terms, implying all such terms are fi-SN. For a -term M , the I-redex is innermost if it does not properly contain another I-redex (but may contain K-redexes).
Reference: [Gal90] <author> J. H. Gallier. </author> <title> On Girard's "candidats de reductibilite". </title> <booktitle> In Odifreddi [Odi90], </booktitle> <pages> pp. 123-203. </pages>
Reference-contexts: Perhaps the least transparent part of this approach is the choice of closure conditions, which indeed vary from one proof to another, sometimes in subtle ways. (Gallier's paper <ref> [Gal90] </ref> is a useful comparative study of all proofs published until 1990.) In a very recent proof [MKO94], although the closure conditions are formally eliminated, they are still present in the guise of an evaluation function.
Reference: [Gir71] <author> J.-Y. Girard. </author> <title> Une extension de l'interpretation de Godel a l'analyse, et son application a l'elimination des coupures dans l'analyse et la theorie des types. </title> <editor> In J. E. Fenstad, ed., </editor> <booktitle> Proceedings of 2nd Scandinavian Logic Symposium, </booktitle> <pages> pp. 63-92, </pages> <address> Amsterdam, 1971. </address> <publisher> North Holland. </publisher>
Reference-contexts: Tait's proof that all -terms typable in the simply-typed -calculus (actually, Godel's system T) are fi-SN can be seen as the basis of Girard's proof of the fi-SN property for higher-order typed -calculi, specifically, for systems F and F ! <ref> [Tai67, Gir71, Gir72] </ref>. Girard's method, using the so-called reducibility candidates ("candidats de reductibilite"), has been the paradigm for all later fi-SN proofs for system F and other extensions of the simply-typed -calculus such as the system of positive-recursive types and the system of intersection types.
Reference: [Gir72] <institution> J.-Y. Girard. Interpretation Fonctionnelle et Elimination des Coupures de l'Arithmetique d'Ordre Superieur. These d'Etat, Universite Paris VII, </institution> <year> 1972. </year>
Reference-contexts: Tait's proof that all -terms typable in the simply-typed -calculus (actually, Godel's system T) are fi-SN can be seen as the basis of Girard's proof of the fi-SN property for higher-order typed -calculi, specifically, for systems F and F ! <ref> [Tai67, Gir71, Gir72] </ref>. Girard's method, using the so-called reducibility candidates ("candidats de reductibilite"), has been the paradigm for all later fi-SN proofs for system F and other extensions of the simply-typed -calculus such as the system of positive-recursive types and the system of intersection types.
Reference: [Lei86] <author> D. Leivant. </author> <title> Typing and computational properties of lambda expressions. </title> <journal> Theoretical Comput. Sci., </journal> <volume> 44 </volume> <pages> 51-68, </pages> <year> 1986. </year>
Reference-contexts: There are two important variants of the system, one of which is an extension of the other. We deal with the more basic system here which does not mention the ! type constant, for which the fi-SN property has been established in papers by Pottinger [Pot80] and Leivant <ref> [Lei86] </ref> by extending Girard's original method. This system has the interesting property that the set of -terms typable in this system is exactly the set of -terms which are fi-SN. 1.2 Contributions of This Paper.
Reference: [MKO94] <author> D. A. McAllester, J. Kucan, and D. Otth. </author> <title> A proof of strong normalization for F 2 , F ! , and beyond. </title> <type> Technical report, </type> <institution> Massachusetts Institute of Technology Laboratory for Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Perhaps the least transparent part of this approach is the choice of closure conditions, which indeed vary from one proof to another, sometimes in subtle ways. (Gallier's paper [Gal90] is a useful comparative study of all proofs published until 1990.) In a very recent proof <ref> [MKO94] </ref>, although the closure conditions are formally eliminated, they are still present in the guise of an evaluation function. In any case, there is a certain amount of difficulty in understanding the semantic definitions.
Reference: [Odi90] <editor> P. Odifreddi, ed. </editor> <booktitle> Logic and Computer Science. Number 31 in the APIC Series. </booktitle> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference: [Pot80] <author> G. Pottinger. </author> <title> A type assignment for the strongly normalizable -terms. </title> <editor> In J. P. Seldin and J. R. Hindley, eds., To H. B. </editor> <booktitle> Curry: Essays on Combinatory Logic, Lambda Calculus, and Formalism, </booktitle> <pages> pp. 561-577. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: There are two important variants of the system, one of which is an extension of the other. We deal with the more basic system here which does not mention the ! type constant, for which the fi-SN property has been established in papers by Pottinger <ref> [Pot80] </ref> and Leivant [Lei86] by extending Girard's original method. This system has the interesting property that the set of -terms typable in this system is exactly the set of -terms which are fi-SN. 1.2 Contributions of This Paper.
Reference: [Tai67] <author> W. W. Tait. </author> <title> Intensional interpretation of functionals of finite type I. </title> <journal> J. Symbolic Logic, </journal> <volume> 32 </volume> <pages> 198-212, </pages> <year> 1967. </year> <month> 22 </month>
Reference-contexts: Tait's proof that all -terms typable in the simply-typed -calculus (actually, Godel's system T) are fi-SN can be seen as the basis of Girard's proof of the fi-SN property for higher-order typed -calculi, specifically, for systems F and F ! <ref> [Tai67, Gir71, Gir72] </ref>. Girard's method, using the so-called reducibility candidates ("candidats de reductibilite"), has been the paradigm for all later fi-SN proofs for system F and other extensions of the simply-typed -calculus such as the system of positive-recursive types and the system of intersection types.
References-found: 14

