URL: http://www.cs.brandeis.edu/~bruncott/papier/bourse-inria.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~bruncott/papier/index.html
Root-URL: http://www.cs.brandeis.edu
Title: Coherence des objets repliques en environnement reparti  Directeur de These  
Author: Georges Brun-Cottan Professeur Claude Girault, Directeur du projet d'accueil Marc Shapiro, directeur 
Degree: Mesaac Makpangou, charge  
Address: Universite Paris 6.  Encadrement  
Affiliation: Laboratoire MASI,  de recherche, projet SOR, INRIA.  de recherche, Projet SOR, INRIA. Table des matieres  
Note: Revision: 2.9 Date: 1995/10/09 10:43:22  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Golding (R.) et D. E. Long (D.). </author> <title> Modeling replica divergence in a weak-consistency protocol for global-scale distributed data bases. Rapport technique n - CRL-93-03, </title> <type> UCSC, </type> <year> 1993. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications <ref> [1, 5, 24] </ref>. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [2] <author> Ahamad (M.), Burns (J. E.), Hutto (P. W.) et Neiger (G.). </author> <title> Causal memory. </title> <booktitle> In : Proceedings of the 5th International Workshop on Distributed Algorithms, </booktitle> <pages> pp. 9-30. </pages> - <address> Delphi (Greece), </address> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite <ref> [2, 8, 10, 22] </ref>, ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [3] <author> Attiya (H.), Chaudhuri (S.), Friedman (R.) et Welch (J. L.). </author> <title> Shared memory consistency conditions for non-sequential execution: Definition and programming strategies. </title> <booktitle> In : Proceedings of the 5th ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 241-250. </pages>
Reference-contexts: Nous avons repris le modele de specification 6 developpe par Attiya et Fried-man <ref> [3, 4] </ref>, et l'avons etendu aux operations de type arbitraire. Brievement, ce modele distingue des operations dites fortes et des operations dites faibles. Un modele de coherence est specifie par les relations d'ordre a garantir entre operations fortes, entre operations faibles et entre les operations fortes et faibles.
Reference: [4] <author> Attiya (H.) et Friedman (R.). </author> <title> A correctness condition for high-performance multiprocessors. </title> <booktitle> In : Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <pages> pp. 679-690. </pages> - <address> Victoria, Canada, </address> <year> 1992. </year>
Reference-contexts: La section 5.3 decrit deux realisations particulieres de coherence. 5.1 Classification des activites sur un objet Une bonne classification des activites doit repondre a deux criteres <ref> [4, 14] </ref> : - Permettre les optimisations desirees. 5: Nous ne nous interessons, dans le cadre de le these qu'au controle de concurrence intra objet. 8 - Permettre l'elaboration de garanties permettant a un utilisateur de faci- lement raisonner sur le modele de coherence offert par le gestionnaire. <p> Nous avons repris le modele de specification 6 developpe par Attiya et Fried-man <ref> [3, 4] </ref>, et l'avons etendu aux operations de type arbitraire. Brievement, ce modele distingue des operations dites fortes et des operations dites faibles. Un modele de coherence est specifie par les relations d'ordre a garantir entre operations fortes, entre operations faibles et entre les operations fortes et faibles. <p> Environnement : En presence d'un environnement grande echelle, une mise en uvre utilisant une gestion de groupe adaptee a la grande echelle (cluste ring par exemple) est un avantage. 6: Dans le papier d'Attiya et Friedman <ref> [4] </ref> presentant hybrid consistency, les ordonnance ments des differentes classes d'operations font partie de la definition. 9 5.3 Bibliotheque de gestionnaire de coherence Deux objets realisant deux modeles de coherence ont ete construits. Les deux protocoles assurent un ordonnancement total des acces forts.
Reference: [5] <author> Barbara (D.) et Garcia-Molina (H.). </author> <title> The case for controlled inconsistency in replicated data. </title> <booktitle> IEEE Computer Society Technical Committee on Operating Systems and Application Environments Newsletter, </booktitle> <volume> vol. 4, n - 3, </volume> <year> 1990, </year> <pages> pp. 8-11. </pages>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications <ref> [1, 5, 24] </ref>. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [6] <author> Bennett (J.), Carter (J. B.) et Zwaenepoel (W.). </author> <title> Adaptive software cache management for distributed shared memory architectures. </title> <booktitle> In : Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pp. 125-135. </pages> - <address> Seattle, WA (USA), </address> <month> Mai </month> <year> 1990. </year>
Reference-contexts: Munin [11] est une realisation de memoire virtuellement partagee (DSM) realisant la coherence au rel^achement de verrou (release consistency). Munin offre au programmeur plusieurs protocoles realisant ce modele de coherence. Ceux-ci sont cibles pour certains schemas de partage reconnus comme typiques de certaines applications <ref> [6, 13] </ref>. Bien que l'ensemble de ces travaux viennent de domaine tres divers allant de l'architecture de machines paralleles aux bases de donnees distribuees, cer-taines conclusions communes apparaissent.
Reference: [7] <author> Bershad (B. N.) et Zekauskas (M. J.). Midway: </author> <title> Shared Memory Parallel Programming with Entry Consistency for Distributed Memory Multiprocessors. - Rapport technique n - CMU-CS-91-170, </title> <institution> Pittsburgh, PA (USA), Carnegie-Mellon University, </institution> <month> Sept. </month> <year> 1991. </year> <month> 15 </month>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]).
Reference: [8] <author> Birman (K. P.). </author> <title> Maintaining Consistency in Distributed Systems. Rapport technique n - TR91-1240, </title> <institution> Ithaca NY (USA), Dept. of Computer Sc., Cornell U., </institution> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite <ref> [2, 8, 10, 22] </ref>, ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [9] <author> Birman (K. P.). </author> <title> Integrating runtime consistency models for distributed computing. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 23, </volume> <year> 1994, </year> <pages> pp. 158-176. </pages>
Reference-contexts: Lorsque le client d'un objet replique choisit un gestionnaire de coherence, il choisit tout a la fois, son modele de coherence, la realisation de ce modele de coherence et la realisation de la ges-tion de groupe sous-jacente <ref> [9] </ref>. Cette agregation est justifiee par l'importance du role de la gestion de groupe et des semantiques de communication qu'elle offre sur le protocole de replication.
Reference: [10] <author> Birman (K. P.), Cooper (R.) et Gleeson (B.). </author> <title> Programming with Process Groups: Group and Multicast Semantics. Rapport technique n - TR 91-1185, </title> <address> Ithaca, New York (USA), </address> <institution> Dept. of Computer Sc., Cornell University, </institution> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite <ref> [2, 8, 10, 22] </ref>, ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [11] <author> Carter (J. B.), Bennett (J. K.) et Zwaenepoel (W.). </author> <title> Implementation and performance of Munin. </title> <journal> Operating Systems Review, </journal> <volume> vol. 25, n - 5, </volume> <month> Oct. </month> <year> 1991, </year> <pages> pp. 152-164. </pages>
Reference-contexts: Le dernier axe utilise la connaissance des schemas d'acces aux donnees parta-gees. Munin <ref> [11] </ref> est une realisation de memoire virtuellement partagee (DSM) realisant la coherence au rel^achement de verrou (release consistency). Munin offre au programmeur plusieurs protocoles realisant ce modele de coherence. Ceux-ci sont cibles pour certains schemas de partage reconnus comme typiques de certaines applications [6, 13].
Reference: [12] <author> Dubois (M.), Scheurich (C.) et Briggs (F. A.). </author> <title> Synchronisation, coherence and event ordering in multiprocessors. </title> <booktitle> Computer, </booktitle> <address> Fev. </address> <year> 1988, </year> <pages> pp. 9-21. </pages>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]).
Reference: [13] <author> Eggers (S. J.) et Katz (R. H.). </author> <title> A characterization of sharing in parallel programs and its application to coherency protocol evaluation. </title> <booktitle> In : Proceedings of the 15th International Symposium on Computer Architecture, </booktitle> <pages> pp. 373-382. </pages> - <address> Honolulu (Hawai), </address> <year> 1988. </year>
Reference-contexts: Munin [11] est une realisation de memoire virtuellement partagee (DSM) realisant la coherence au rel^achement de verrou (release consistency). Munin offre au programmeur plusieurs protocoles realisant ce modele de coherence. Ceux-ci sont cibles pour certains schemas de partage reconnus comme typiques de certaines applications <ref> [6, 13] </ref>. Bien que l'ensemble de ces travaux viennent de domaine tres divers allant de l'architecture de machines paralleles aux bases de donnees distribuees, cer-taines conclusions communes apparaissent.
Reference: [14] <author> Gharachorloo (K.), Adve (S. V.), Gupta (A.), Hennessy (J. L.) et Hill (M. D.). </author> - <title> Programming for different memory consistency models. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 15, n - 4, Ao^ut. </volume> <year> 1992, </year> <pages> pp. 399-407. </pages>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]). <p> La section 5.3 decrit deux realisations particulieres de coherence. 5.1 Classification des activites sur un objet Une bonne classification des activites doit repondre a deux criteres <ref> [4, 14] </ref> : - Permettre les optimisations desirees. 5: Nous ne nous interessons, dans le cadre de le these qu'au controle de concurrence intra objet. 8 - Permettre l'elaboration de garanties permettant a un utilisateur de faci- lement raisonner sur le modele de coherence offert par le gestionnaire.
Reference: [15] <author> Gharachorloo (K.), Lenoski (D.), Laudon (J.), Gibbons (P.), Gupta (A.) et Hen-nessy (J.). </author> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> In : Proceedings of the 17th Annual International Symposium on Computer Architecture. ACM SIGARCH, </booktitle> <pages> pp. 15-26. </pages> - <address> Seattle, WA (USA), </address> <month> Mai </month> <year> 1990. </year>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]).
Reference: [16] <author> Gray (J.) et Reuter (A.). </author> <title> Transaction Processing: Concepts and Techniques. </title> - <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: [7, 12, 14, 15, 22, 23] exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation <ref> [16] </ref>). Le socle commun aux travaux regroupes dans la premiere et la deuxieme classe est le critere de correction des executions.
Reference: [17] <author> Guerraoui (R.). </author> <title> Programmation repartie par objets : etudes et propositions. </title> - <type> These de PhD, </type> <institution> Universite Paris XI-Orsay, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25]. <p> Un des ob-jectifs de notre travail est d'integrer ces differentes techniques dans une m^eme infrastructure. 3 Modele objet Notre solution repose sur un modele d'objet dans lequel le mecanisme ordon-nant les invocations est separe de la realisation des methodes de l'objet. Notre solution se distingue des travaux <ref> [17, 32] </ref> par le fait que l'ordonnancement des operations n'est pas choisi par le programmeur de l'objet mais par son utilisa 5 teur.
Reference: [18] <author> Herlihy (M.). </author> <title> Type specific replication algorithms for multiprocessor. </title> <booktitle> In : Proceedings of the 10th International Conference on Distributed Computing Systems. IEEE, </booktitle> <pages> pp. 70-74. </pages> - <address> Paris, France, </address> <month> Mai </month> <year> 1990. </year>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25].
Reference: [19] <author> Herlihy (M. P.) et Weihl (W. E.). </author> <title> Hybrid concurrency control for abstract data types. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> vol. 43, n - 1, Ao^ut. </volume> <year> 1991, </year> <pages> pp. 25-61. </pages>
Reference-contexts: D'autres proprietes telle, invalide-par, (invalidated-by, cf <ref> [19] </ref> ) semblent tout aussi interessantes. Leong et Agrawal dans [26] four-nissent une bonne introduction au probleme. Il est interessant de voir si nos gestionnaires de coherence peuvent facilement supporter ces differents types de proprietes.
Reference: [20] <author> Herlihy (M. P.) et Wing (J. M.). </author> - <title> Avalon: Language support for reliable distributed systems. </title> <booktitle> In : Proceedings of the 17th International Symposium on Fault Tolerant Computing. IEEE, </booktitle> <pages> pp. 89-94. </pages> - <address> Pittsburgh PA (USA), Juil. </address> <year> 1987. </year>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25].
Reference: [21] <author> Herlihy (M. P.) et Wing (J. M.). </author> - <title> Linearizability: A Correctness Condition for Concurrent Objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 12, n - 3, Juil. </volume> <year> 1990, </year> <pages> pp. 463-492. </pages>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite <ref> [21] </ref>, la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre. <p> Le premier protocole a ete realise et teste, la mise en uvre du second est quasiment terminee. Nous etudions actuellement le lien entre les garanties proposees par ces protocoles et des proprietes deja reconnues telle la coherence sequentielle [25] ou la linearisabilite <ref> [21] </ref>. 6 Plateforme de support d'objets en reparti La mise en uvre d'une architecture d'objets distribues repose sur une pla-teforme de gestion d'objets en reparti.
Reference: [22] <author> Hutto (P. W.) et Ahamad (M.). </author> <title> Slow memory: Weakening consistency in distributed shared memories. </title> <booktitle> In : Proceedings of the 10th International Conference on Distributed Computing Systems. IEEE, </booktitle> <pages> pp. 302-309. </pages> - <address> Paris, France, </address> <month> Mai </month> <year> 1990. </year> <month> 16 </month>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]). <p> Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite <ref> [2, 8, 10, 22] </ref>, ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [23] <author> Keleher (P.), Cox (A. L.) et Zwaenepoel (W.). </author> <title> Lazy release consistency for software distributed shared memory. </title> <booktitle> In : Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <pages> pp. 13-21. </pages> <address> Gold Coast (Australia), </address> <month> Mai </month> <year> 1992. </year>
Reference-contexts: La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. Tous ces travaux <ref> [7, 12, 14, 15, 22, 23] </ref> exploitent une semantique plus fine des acces pour augmenter le degre de concurrence. 4 utilisateurs interviennent soit sur la semantique du service rendu soit en pas--sant des informations permettant de ne pas contraindre certains acces a priori conflictuels (tel le choix du degre d'isolation [16]).
Reference: [24] <author> Ladin (R.), Liskov (B.) et Ghemawat (S.). </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> vol. 10, n - 4, </volume> <month> Nov. </month> <year> 1992, </year> <pages> pp. 360-391. </pages>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications <ref> [1, 5, 24] </ref>. Le deuxieme groupe [28, 33] vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [25] <author> Lamport (L.). </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions Computers, </journal> <month> Sept. </month> <year> 1979, </year> <pages> pp. 690-691. </pages>
Reference-contexts: Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle <ref> [25] </ref>. Les travaux sur ce domaine [27] se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence. <p> Cette optimisation est obtenue au pris d'une obsolescence des lectures distantes. Le premier protocole a ete realise et teste, la mise en uvre du second est quasiment terminee. Nous etudions actuellement le lien entre les garanties proposees par ces protocoles et des proprietes deja reconnues telle la coherence sequentielle <ref> [25] </ref> ou la linearisabilite [21]. 6 Plateforme de support d'objets en reparti La mise en uvre d'une architecture d'objets distribues repose sur une pla-teforme de gestion d'objets en reparti.
Reference: [26] <author> Leong (H.) et Agrawal (D.). </author> <title> Type specific coherence protocols for distributed shared memory. </title> <booktitle> In : Proceedings of the 12th International Conference on Distributed Computing Systems. IEEE, </booktitle> <pages> pp. 434-441. </pages>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25]. <p> En pratique, plusieurs groupes d'operations faibles peuvent ^etre candidats ; le pro-grammeur choisira alors celui a m^eme d'^etre le plus utilise. Une discussion plus etendue ainsi que des exemples peuvent ^etre trouves dans <ref> [BCM95, 26, 29] </ref>. 5.2 Personnalisation du protocole de replication Contrairement aux travaux de Attiya et Friedman, nous ne fixons pas a priori les ordonnancements des operations. Chaque gestionnaire de coherence definit les ordonnancements qu'il impose sur les differentes classes d'operations. <p> D'autres proprietes telle, invalide-par, (invalidated-by, cf [19] ) semblent tout aussi interessantes. Leong et Agrawal dans <ref> [26] </ref> four-nissent une bonne introduction au probleme. Il est interessant de voir si nos gestionnaires de coherence peuvent facilement supporter ces differents types de proprietes. Support de communication : Comme tout systeme distribue, l'efficacite de notre architecture repose sur la disponibilite d'une plateforme de communication adaptee.
Reference: [27] <author> Mosberger (D.). </author> <title> Memory consistency models. </title> <booktitle> In : Operating Systems Review. </booktitle> <pages> pp. 18-26. </pages> <publisher> ACM press. </publisher>
Reference-contexts: Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25]. Les travaux sur ce domaine <ref> [27] </ref> se sont concentres essentiellement sur la conception de nouveaux protocoles de coherence visant a augmenter la concurrence.
Reference: [28] <author> Panzieri (F.) et Roccetti (M.). </author> <title> A scalable architecture for reliable distributed multimedia applications. </title> <booktitle> In : Proceedings of the 14th International Conference on Distributed Computing Systems. IEEE, </booktitle> <pages> pp. 284-293. </pages> - <address> Poznan, Poland, </address> <month> Juin </month> <year> 1994. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe <ref> [28, 33] </ref> vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.
Reference: [29] <author> Raynal (M.) et Mizuno (M.). </author> <title> How to find his way in the jungle of consistency criteria for distributed shared memories (or how to escape from the minos'labyrinth). In : Fundamentals Concepts. BROADCAST. ESPRIT Basic Research Project 6360. </title>
Reference-contexts: En pratique, plusieurs groupes d'operations faibles peuvent ^etre candidats ; le pro-grammeur choisira alors celui a m^eme d'^etre le plus utilise. Une discussion plus etendue ainsi que des exemples peuvent ^etre trouves dans <ref> [BCM95, 26, 29] </ref>. 5.2 Personnalisation du protocole de replication Contrairement aux travaux de Attiya et Friedman, nous ne fixons pas a priori les ordonnancements des operations. Chaque gestionnaire de coherence definit les ordonnancements qu'il impose sur les differentes classes d'operations.
Reference: [30] <author> Renesse (R. V.), Birman (K. P.), Glade (B. B.), Guo (K.), Hayden (M.), Hickey (T.), Malki (D.), Vaysburd (A.) et Vogels (W.). - Horus: </author> <title> A Flexible Group Communications System. </title> <type> Technical Report n - 95-1500, </type> <address> Ithaca, New York (USA), </address> <institution> Department of Computer Science, Cornell University, </institution> <month> Mars </month> <year> 1995. </year>
Reference-contexts: Support de communication : Comme tout systeme distribue, l'efficacite de notre architecture repose sur la disponibilite d'une plateforme de communication adaptee. Celle-ci doit offrir des semantiques de communications de groupes varies (ABCAST, CBCAST, FIFOcast, etc) ainsi que des rea-lisations adaptables aux environnement d'execution. De telles plateformes emergent actuellement <ref> [30] </ref>. Un travail interessant est de voir comment de telle plateforme peuvent s'integrer a notre architecture.
Reference: [31] <author> Resende (R.), Agrawal (D.) et el Abbadi (A.). </author> <title> Semantic locking in object-oriented database systems. </title> <booktitle> In : OOPSLA 1994. ACM, </booktitle> <pages> pp. 388-402. </pages> - <address> Portland, Oregon USA, </address> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25].
Reference: [32] <author> Saleh (H.). </author> <title> Conception et Realisation d'un systeme pour la programmation d'applications objets concurrentes et reparties sur machines parralleles. </title> <type> These de PhD, </type> <institution> Universite Paris 6, </institution> <month> Mars </month> <year> 1992. </year>
Reference-contexts: Les travaux du premier groupe peuvent ^etre subdivises en trois classes. Ceux de la premiere classe supposent en general un environnement a objets 2 . Ils proposent des techniques pour exploiter les proprietes algebriques des operations <ref> [17, 18, 20, 26, 31, 32, 34] </ref>. Les travaux de la deuxieme classe proposent de laisser une plus grande responsabilite aux utilisateurs des donnees repliques. Les 2: Des travaux similaires ont eu lieu sur les memoires partagees reparties (DSM). La reference dans ce domaine est la coherence sequentielle [25]. <p> Un des ob-jectifs de notre travail est d'integrer ces differentes techniques dans une m^eme infrastructure. 3 Modele objet Notre solution repose sur un modele d'objet dans lequel le mecanisme ordon-nant les invocations est separe de la realisation des methodes de l'objet. Notre solution se distingue des travaux <ref> [17, 32] </ref> par le fait que l'ordonnancement des operations n'est pas choisi par le programmeur de l'objet mais par son utilisa 5 teur.
Reference: [33] <author> Verssimo (P.), Vogels (W.) et Rodrigues (L.). </author> <title> A Framework for Structuring Group Support in LSDCs. BROADCAST n - TR-20, http://www.newcastle.research.ec.org/broadcast, ESPRIT Basic Research Project 6360, </title> <year> 1993. </year>
Reference-contexts: Contrairement aux deux premieres classes les travaux de la troisieme classe, proposent d'augmenter la concurrence en autorisant des ordonnancements non serialisables offrant des garanties differentes, telles la linearisibilite [21], la causalite [2, 8, 10, 22], ou d'autres proprietes specifiques aux applications [1, 5, 24]. Le deuxieme groupe <ref> [28, 33] </ref> vise a offrir aux programmeurs une infrastructure de communication efficace au dessus de laquelle la replication puisse ^etre mise en uvre.

References-found: 33

