URL: http://www.cs.duke.edu/~jsv/Papers/NGV93.graphsearching.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node8.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Blocking for External Graph Searching  
Author: Mark H. Nodine Michael T. Goodrich Jeffrey Scott Vitter 
Note: 1 Support was provided in part by an IBM Graduate Fellowship, by NSF research grants CCR-9007851 and IRI-9116451, and by Army Research Office grant DAAL03-91-G-0035. 2 Support was provided in part by NSF Grants CCR-9003299 and IRI-9116843, and by NSF/DARPA Grant CCR-8908092. 3 Support was provided in part by a National Science Foundation Presidential Young Investigator Award CCR-9047466 with matching funds from IBM, by NSF research grant CCR-9007851, and by Army Research Office grant DAAL03-91-G-0035.  
Date: April 12, 1994  
Address: One Kendall Square, Building 200 Cambridge, MA 02139  Baltimore, MD 21218  Providence, RI 02912-1910  
Affiliation: Motorola Cambridge Research Center  Dept. of Computer Science The Johns Hopkins University  Dept. of Computer Science Brown University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Donald E. Knuth, </author> <title> in The Art of Computer Programming, Volume 3: Sorting and Searching, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: 1 Introduction External searching is a fundamental topic in computer science and databases <ref> [1] </ref>. By "external", we mean that the records to be searched cannot fit simultaneously in the internal memory. In this paper, we consider searching in graphs.
Reference: [2] <author> Alok Aggarwal and James Park, </author> <title> Notes on Searching in Multidimensional Monotone Arrays, </title> <booktitle> Proceedings of 29th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <address> White Plains, NY (October 1988), </address> <pages> 497-512. </pages>
Reference-contexts: There are many applications for using blocks efficiently in external graph searching. These include A.I. searching in constraint networks, robot motion planning, the simulation of large deterministic finite automata (DFA), browsing in hypertext applications, accesses in object-oriented databases, and some matrix algorithms such as searching in monotone arrays <ref> [2] </ref>. Sometimes the graphs are well-structured, as in the case of matrix searches and robot motion planning in a space discretized in a grid (which gives rise to grid graphs). At other times the graphs are unstructured, as in A.I. searching and DFA simulation.
Reference: [3] <author> Jeffrey D. Ullman, </author> <title> in Principles of Database and Knowledge-Base Systems, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1988. </year>
Reference-contexts: This assumption is stronger than that used, for example, by external B-trees, where a record of data may be pointed to from several places, although the data (exclusive of the key being indexed) exist in only one block <ref> [3] </ref>. We allow actual replication of the data and define the storage blow-up s to be the ratio between the 1 actual number of blocks used to represent the data and the minimum number that could be used.
Reference: [4] <author> Allan Borodin, Sandy Irani, Prabhakar Raghavan and Baruch Schieber, </author> <title> Competitive Paging with Locality of Reference, </title> <booktitle> Proc. of the 23rd ACM Symposium on Theory of Computing, </booktitle> <address> New Orleans, LA (May 1991), </address> <pages> 249-259. </pages>
Reference-contexts: We know of no previous work for this problem, but there is related work. Borodin et al. considered the similar problem of traversing an access graph, but they considered only block size B = 1 and worked on developing an efficient paging algorithm that minimized the competitive ratio <ref> [4] </ref>. Alternatively, all the work done in the database community on B-trees could be viewed as a solution to our problem for complete trees with s = 1. Ullman and Yannakakis considered the I/O complexity of the transitive closure problem [5] with block size B = 1.
Reference: [5] <author> Jeffrey D. Ullman and Mihalis Yannakakis, </author> <title> The Input/Output Complexity of Transitive Closure, </title> <journal> Annals of Mathematics and Artificial Intelligence (1991), </journal> <pages> 331-360. </pages>
Reference-contexts: Alternatively, all the work done in the database community on B-trees could be viewed as a solution to our problem for complete trees with s = 1. Ullman and Yannakakis considered the I/O complexity of the transitive closure problem <ref> [5] </ref> with block size B = 1. Their work differs from this in that they do not explicitly consider blocking, and that their lower bounds only need to consider the graph structure, and not an adversary trying to generate a path that will cause many page faults.
Reference: [6] <author> Arnold L. Rosenberg, </author> <title> Preserving Proximity in Arrays, </title> <journal> SIAM J. Comput. </journal> <volume> 4 (1975), </volume> <pages> 443-460. </pages>
Reference-contexts: Of course, this is only a heuristic, and local references in the target graph do not always get translated into local references in the host. For example, Rosenberg considered the problem of preserving proximity in arrays <ref> [6] </ref> when mapping onto a linear access structure. A grid graph describes the proximity properties of arrays, so the embedding problem here is to map a grid graph into a semi-infinite number line. <p> The problem of computing how large the neighborhoods of radius r in d-dimensional grid graphs was considered by Rosenberg <ref> [6] </ref>, where he derived the answer O (r d ).
Reference: [7] <author> Richard A. DeMillo, Stanley C. Eisenstat and Richard J. Lipton, </author> <title> Preserving Average Proximity in Arrays, </title> <booktitle> Communication of the ACM 21 (1978), </booktitle> <pages> 228-231. </pages>
Reference-contexts: Rosenberg showed that there is no linear mapping scheme that preserves proximity globally in arrays that are extendible in more than one dimension. DeMillo et al. considered the same problem and showed that proximity could be maintained if the storage mechanism was a binary tree <ref> [7] </ref>. Both concluded that the standard row-major (or column-major) way of storing arrays was asymptotically optimal for preserving locality in arrays. We find, however, that our earlier hypothesis concerning blocking does not hold even for finite arrays, as long as the array structure is much larger than the memory size.
Reference: [8] <author> Arnold L. Rosenberg, </author> <title> Encoding Data Structures in Trees, </title> <editor> J. </editor> <booktitle> Association for Computing Machinery 26 (1979), </booktitle> <pages> 668-689. </pages>
Reference: [9] <author> Arnold L. Rosenberg, </author> <title> Data Encodings and Their Costs, </title> <journal> Acta Informatica 9 (1978), </journal> <pages> 273-292. </pages>
Reference: [10] <author> Arnold L. Rosenberg and Lawrence Snyder, </author> <title> Bounds on the Costs of Data Encodings, Math. </title> <booktitle> Systems Theory 12 (1978), </booktitle> <pages> 9-39. </pages>
Reference: [11] <author> F.R.K. Chung, A. L. Rosenberg and Lawrence Snyder, </author> <title> Perfect Storage Representations for Families of Data Structures, </title> <booktitle> SIAM J. Algorithms and Discrete Methods 4 (1983), </booktitle> <pages> 548-565. </pages>
Reference: [12] <author> Romas Aleliunas and Arnold L. Rosenberg, </author> <title> On Embedding Rectangular Grids in Square Grids, </title> <journal> IEEE Transactions on Computers C-31 (1982), </journal> <pages> 907-913. 32 </pages>
Reference: [13] <author> R. J. Lipton, S. C. Eisenstat and R. A. DeMillo, </author> <title> Space and Time Hierarchies for Classes of Control Structures and Data Structures, </title> <editor> J. </editor> <booktitle> Association for Computing Machinery 23 (1976), </booktitle> <pages> 720-732. </pages>
Reference-contexts: approach is taken by Lipton et al., who consider hierarchies of em-beddings of graphs in which a given vertex can be replicated up to S times in going from one level of the hierarchy to the next, as well as a factor of T expansion in the distance between vertices <ref> [13] </ref>. Their paper, however, focuses on lower bounds for general graphs, and does not deal with the issue of how to find optimal embeddings. It is also not clear what the relevance of any optimal embeddings is to blocking.
Reference: [14] <author> Claude Berge, </author> <title> Graphs and Hypergraphs (second edition), </title> <publisher> North-Holland Publishing Company, </publisher> <address> Amsterdam, </address> <year> 1976. </year>
Reference-contexts: The following lemma gives such a bound with some restrictions on the blocking. We later generalize the lemma to remove any such restrictions. Before presenting the lemma, however, we want to make some observations about hypergraphs <ref> [14] </ref>. First, a hypergraph is a pair G = (V; H), where V is a set of vertices and H is a set of subsets of V called edges. If each set H 2 H has cardinality 2, then G is an ordinary graph.
Reference: [15] <author> Gabriele Reich and Peter Widmayer, </author> <title> Beyond Steiner's Problem: A VLSI Oriented Generalization, </title> <booktitle> in Graph-Theoretic Comcepts in Computer Science: Proceedings of the 15th International Workshop WG '89 (G. </booktitle> <editor> Goos and J. Hartmanis, eds.), </editor> <booktitle> Lecture Notes in Computer Science #411, </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990, </year> <pages> 196-210. </pages>
Reference-contexts: Reich and Widmayer gave an approximation algorithm for the minimum group Steiner tree problem, but did not give any guarantees on how much worse than optimal their results could be <ref> [15] </ref>. Ihler has shown the problem to be NP-hard, even if the graph is a tree, and gave a trivial algorithm to approximate the optimal tree within a factor of g 1, where g is the number of groups [16].
Reference: [16] <author> Edmund Ihler, </author> <title> Bounds on the Quality of Approximate Solutions to the Group Steiner Problem, </title> <booktitle> in Graph-Theoretic Concepts in Computer Science, Proceedings of the 16th International Workshop WG '90 (G. </booktitle> <editor> Goos and J. Hartmanis, eds.), </editor> <booktitle> Lecture Notes in Computer Science #484, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991, </year> <pages> 109-118. </pages>
Reference-contexts: Ihler has shown the problem to be NP-hard, even if the graph is a tree, and gave a trivial algorithm to approximate the optimal tree within a factor of g 1, where g is the number of groups <ref> [16] </ref>. The problem with applying Lemma 11 to blockings where there are not dn=Be strongly stable vertices is that we are not guaranteed that each of the "must-visit" vertices causes a page fault.

References-found: 16

