URL: http://www.cs.ucl.ac.uk/staff/L.Braine/ifl98.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/L.Braine/researchdocs.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Simulating an Object-Oriented Financial System in a Functional Language  
Author: Lee Braine Chris Clack 
Address: 2 Arundel Street University College London London, U.K. Gower Street London, U.K.  
Affiliation: Andersen Consulting Department of Computer Science  
Abstract: This paper summarises a successful application of functional programming within a commercial environment. We report on experience at Andersen Consulting's London Solution Centre with simulating an object-oriented financial system in order to assist analysis and design. The work was part of a large IT project for an international investment bank and provides a pragmatic case study. 
Abstract-found: 1
Intro-found: 1
Reference: [AP97] <author> P. Achten and R. Plasmeijer. </author> <title> Interactive Functional Objects in Clean. </title> <booktitle> In Proceedings of the 9th International Workshop on Implementation of Functional Languages (IFL'97), </booktitle> <pages> pages 387-406, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: noted, however, that recent functional research can ameliorate such a plethora of identifiers by applying suitable lexical scoping rules, for example the Clean language allows identifiers on the right-hand-side of an expression to be reused on the left-hand-side they are then internally tagged with a number by the compiler (see <ref> [AP97] </ref> for further details). 7 Results During the process of simulation, several algorithms were: 1. developed using Miranda; 2. validated through a high-level Miranda simulation of the entire system; 3. used as specifications for subsequent implementation in C++.
Reference: [BC96] <author> L. Braine and C. Clack. </author> <title> Introducing CLOVER: an Object-Oriented Functional Language. </title> <editor> In W. Kluge, editor, </editor> <booktitle> Implementation of Functional Languages, 8th International Workshop (IFL'96), Selected Papers, Lecture Notes in Computer Science 1268, </booktitle> <pages> pages 1-20, </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1996. </year>
Reference-contexts: Subsequent object-oriented languages, such as Smalltalk [GR83] and Eiffel [Mey91], widened this gap as functional languages offered few object-oriented features | see <ref> [BC96] </ref> for a brief history of research into object-oriented functional programming. 3 The Application The subject of simulation activities was a large financial system within an international investment bank. The system contained a set of complex business processes requiring novel optimisation and approximation algorithms in order to perform effectively. <p> However, only the behaviour (not the internal details) of those components had to be simulated, permitting the use of statistical approximation techniques in some cases. There are important semantic differences between the object-oriented and functional paradigms | <ref> [BC96] </ref> overviews the main theoretical differences. Some of the obvious mappings are sufficient (e.g. function signatures for modelling component interfaces), but others are insufficient (e.g. abstract data types for modelling classes). <p> Not only do general simulation activities benefit naturally from an object-oriented approach but, with many actual software systems being built using component/object-oriented techniques, simulations can more accurately specify the actual system. However, incorporating object-oriented features into functional programming is not trivial and should be regarded as on-going research (see <ref> [BC96] </ref> for re search directions). On a large project, many specifications are delivered as part of a set of documents created using a standard wordprocessor, such as Word or Word-Perfect.
Reference: [BC97] <author> L. Braine and C. Clack. Object-Flow. </author> <booktitle> In Proceedings of the 13th IEEE Symposium on Visual Languages (VL'97), </booktitle> <pages> pages 422-423, </pages> <month> September </month> <year> 1997. </year>
Reference: [BC97a] <author> L. Braine and C. Clack. </author> <title> The CLOVER Rewrite Rules: A Translation from OOFP to FP. </title> <booktitle> In Proceedings of the 9th International Workshop on Implementation of Functional Languages (IFL'97), </booktitle> <pages> pages 467-488, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: In this case, the coding style adopted by the Simulation Team was similar to the style of target code produced by the CLOVER compiler [BC96,BC97a], particularly in the areas of simulating classes with inheritance, overloading, overriding, and dynamic despatch. Full details can be found in <ref> [BC97a] </ref>, but we rehearse the essence of the technique here: Classes, inheritance and the meta type system In order to simulate certain aspects of the object-oriented system, it was necessary to create a meta type system.
Reference: [DB85] <author> A. Duijvestijn and G. Blaauw. </author> <title> Prototyping in Computer-Aided Design Applications Using a Functional Language. </title> <booktitle> In Proceedings of the First International Conference on Computer-Aided Technologies, </booktitle> <pages> pages 326-333, </pages> <month> September </month> <year> 1985. </year>
Reference-contexts: Functional languages are also used in the closely-related areas of prototyping and specification; examples include prototyping computer-aided design applications <ref> [DB85] </ref>, specifying image processing primitives [PC94], specifying complex tree transformations [Hec88] and describing telecommunications systems [Dem89]. However, there is little in the literature on commercial applications of functional languages to simulate financial systems.
Reference: [Dem89] <author> J. Deman. </author> <title> Description of Telecommunication Systems by Means of a Functional Language. </title> <booktitle> In Proceedings of the Seventh International Conference on Software Engineering for Telecommunications Switching Systems, </booktitle> <pages> pages 91-94, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Functional languages are also used in the closely-related areas of prototyping and specification; examples include prototyping computer-aided design applications [DB85], specifying image processing primitives [PC94], specifying complex tree transformations [Hec88] and describing telecommunications systems <ref> [Dem89] </ref>. However, there is little in the literature on commercial applications of functional languages to simulate financial systems.
Reference: [DN66] <author> O. Dahl and K. Nygaard. </author> <title> SIMULA: an ALGOL-Based Simulation Language. </title> <booktitle> In Communications of the ACM, </booktitle> <month> September </month> <year> 1966. </year>
Reference-contexts: However, there is little in the literature on commercial applications of functional languages to simulate financial systems. One reason for this is the often-held view that real-world processes can be represented more naturally in simulations using an object-oriented approach, as first advocated by SIMULA <ref> [DN66] </ref>, than using a standard functional approach.
Reference: [EL83] <author> M. Ercegovac and S. Lu. </author> <title> A Functional Language Approach in High-Speed Digital Simulation. </title> <booktitle> In Proceedings of the 1983 Summer Computer Simulation Conference, </booktitle> <pages> pages 383-387, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Illustrative examples of its use in simulation include: - [PW93] and [Poh94] discuss simulation programming in a functional lan guage; - [PM93] presents a case study of Amoco's use of Miranda to simulate oil reservoirs; - <ref> [EL83] </ref> describes a high-speed digital simulation using a functional language approach; - [GSW + 93] presents a functional programming solution to a computational fluid dynamics problem.
Reference: [GR83] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: One reason for this is the often-held view that real-world processes can be represented more naturally in simulations using an object-oriented approach, as first advocated by SIMULA [DN66], than using a standard functional approach. Subsequent object-oriented languages, such as Smalltalk <ref> [GR83] </ref> and Eiffel [Mey91], widened this gap as functional languages offered few object-oriented features | see [BC96] for a brief history of research into object-oriented functional programming. 3 The Application The subject of simulation activities was a large financial system within an international investment bank.
Reference: [GSW + 93] <author> P. Grant, J. Sharp, M. Webster, and X. Zhang. </author> <title> Functional Programming for a Computational Fluid Dynamics Problem. </title> <booktitle> In Proceedings of Computational Mechanics in UK, </booktitle> <pages> pages 75-79, </pages> <year> 1993. </year>
Reference-contexts: Illustrative examples of its use in simulation include: - [PW93] and [Poh94] discuss simulation programming in a functional lan guage; - [PM93] presents a case study of Amoco's use of Miranda to simulate oil reservoirs; - [EL83] describes a high-speed digital simulation using a functional language approach; - <ref> [GSW + 93] </ref> presents a functional programming solution to a computational fluid dynamics problem. Functional languages are also used in the closely-related areas of prototyping and specification; examples include prototyping computer-aided design applications [DB85], specifying image processing primitives [PC94], specifying complex tree transformations [Hec88] and describing telecommunications systems [Dem89].
Reference: [Hec88] <author> R. Heckmann. </author> <title> A Functional Language for the Specification of Complex Tree Transformations. </title> <editor> In H. Ganzinger, editor, </editor> <booktitle> Second European Symposium on Programming (ESOP'88), Lecture Notes in Computer Science 300, </booktitle> <pages> pages 175-190, </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1988. </year>
Reference-contexts: Functional languages are also used in the closely-related areas of prototyping and specification; examples include prototyping computer-aided design applications [DB85], specifying image processing primitives [PC94], specifying complex tree transformations <ref> [Hec88] </ref> and describing telecommunications systems [Dem89]. However, there is little in the literature on commercial applications of functional languages to simulate financial systems.
Reference: [LK98] <author> A. Law and D. </author> <title> Kelton. Simulation Modeling and Analysis, 3rd Edition. </title> <publisher> McGraw Hill, </publisher> <year> 1998. </year>
Reference-contexts: A variety of languages and tools are applied to problems ranging from analysing the movement of data packets in a network to predicting the value of financial derivatives see <ref> [LK98] </ref> for an introduction to simulation modelling and its applications. Functional programming has been applied to a wide range of problems ([RW95] summarises some recent applications).
Reference: [Mey91] <author> B. Meyer. </author> <title> Eiffel: The Language. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: One reason for this is the often-held view that real-world processes can be represented more naturally in simulations using an object-oriented approach, as first advocated by SIMULA [DN66], than using a standard functional approach. Subsequent object-oriented languages, such as Smalltalk [GR83] and Eiffel <ref> [Mey91] </ref>, widened this gap as functional languages offered few object-oriented features | see [BC96] for a brief history of research into object-oriented functional programming. 3 The Application The subject of simulation activities was a large financial system within an international investment bank.
Reference: [MTH90] <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Functional languages such as Miranda 3 [Tur85], Standard ML <ref> [MTH90] </ref>, Haskell [PHA + 97] and Clean [Pla95] are used extensively in academia for research and teaching. These languages offer a number of well-known software engineering and formal methods benefits, including rapid development, clear and concise expression of algorithms, and complete type safety.
Reference: [PC94] <author> I. Poole and D. </author> <title> Charleston. Formal Specification of Image Processing Primitives in a Functional Language. </title> <booktitle> In Proceedings of the 12th IAPR International Conference on Pattern Recognition (Conference A: Computer Vision and Image Processing), </booktitle> <pages> pages 539-542, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Functional languages are also used in the closely-related areas of prototyping and specification; examples include prototyping computer-aided design applications [DB85], specifying image processing primitives <ref> [PC94] </ref>, specifying complex tree transformations [Hec88] and describing telecommunications systems [Dem89]. However, there is little in the literature on commercial applications of functional languages to simulate financial systems.
Reference: [PHA + 97] <author> J. Peterson, K. Hammond, L. Augustsson, B. Boutel, W. Burton, J. Fasel, A. Gordon, J. Hughes, P. Hudak, T. Johnsson, M. Jones, E. Meijer, S. Peyton Jones, A. Reid, and P. Wadler. </author> <title> Report on the Programming Language Haskell. A Non-strict, Purely Functional Language, </title> <note> Version 1.4, April 1997. Available from http://haskell.org/report/ </note>
Reference-contexts: 1 Introduction Functional languages such as Miranda 3 [Tur85], Standard ML [MTH90], Haskell <ref> [PHA + 97] </ref> and Clean [Pla95] are used extensively in academia for research and teaching. These languages offer a number of well-known software engineering and formal methods benefits, including rapid development, clear and concise expression of algorithms, and complete type safety.
Reference: [Pla95] <author> M. Plasmeijer. </author> <title> Clean: a programming environment based on Term Graph Rewriting. </title> <booktitle> In Proceedings of the Joint COMPU GRAPH/SEMAGRAPH Workshop on Graph Rewriting and Computa--tion, Electronic Notes in Theoretical Computer Science, </booktitle> <pages> pages 233-240, </pages> <publisher> Elsevier, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Functional languages such as Miranda 3 [Tur85], Standard ML [MTH90], Haskell [PHA + 97] and Clean <ref> [Pla95] </ref> are used extensively in academia for research and teaching. These languages offer a number of well-known software engineering and formal methods benefits, including rapid development, clear and concise expression of algorithms, and complete type safety.
Reference: [PM93] <author> R. Page and B. Moe. </author> <title> Experience with a Large Scientific Application in a Functional Language. </title> <booktitle> In Proceedings of the Sixth Conference on Functional Programming Languages and Computer Architecture (FPCA'93), </booktitle> <pages> pages 3-11, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Functional programming has been applied to a wide range of problems ([RW95] summarises some recent applications). Illustrative examples of its use in simulation include: - [PW93] and [Poh94] discuss simulation programming in a functional lan guage; - <ref> [PM93] </ref> presents a case study of Amoco's use of Miranda to simulate oil reservoirs; - [EL83] describes a high-speed digital simulation using a functional language approach; - [GSW + 93] presents a functional programming solution to a computational fluid dynamics problem. <p> The language features offered by functional programming (e.g. higher-order functions, lazy evaluation and complete type safety) provide benefits of clarity, conciseness and speed of expression in excess of many imperative languages. See <ref> [PM93] </ref> for illustrative metrics. The only parts of the system design that required precise simulation of their object-oriented aspects were the high-level algorithms and their method calls via component interfaces. The internals of all other components could be simulated using a purely functional approach to speed development.
Reference: [Poh94] <author> W. Pohlmann. </author> <title> Simulation Programming in a Purely Functional Language 2 How to Do It With Some Optimism. </title> <booktitle> In Proceedings of the 1994 European Simulation Multiconference Modelling and Simulation 1994, </booktitle> <pages> pages 84-87, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Functional programming has been applied to a wide range of problems ([RW95] summarises some recent applications). Illustrative examples of its use in simulation include: - [PW93] and <ref> [Poh94] </ref> discuss simulation programming in a functional lan guage; - [PM93] presents a case study of Amoco's use of Miranda to simulate oil reservoirs; - [EL83] describes a high-speed digital simulation using a functional language approach; - [GSW + 93] presents a functional programming solution to a computational fluid dynamics problem.
Reference: [PW93] <author> W. Pohlmann and K. Weiss. </author> <title> Simulation Programming in a Purely Functional Language. </title> <booktitle> In Proceedings of the 1993 European Simulation Multi-conference Modelling and Simulation 1993, </booktitle> <pages> pages 176-180, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Functional programming has been applied to a wide range of problems ([RW95] summarises some recent applications). Illustrative examples of its use in simulation include: - <ref> [PW93] </ref> and [Poh94] discuss simulation programming in a functional lan guage; - [PM93] presents a case study of Amoco's use of Miranda to simulate oil reservoirs; - [EL83] describes a high-speed digital simulation using a functional language approach; - [GSW + 93] presents a functional programming solution to a computational fluid
Reference: [RW95] <editor> C. Runciman and D. Wakeling, editors. </editor> <booktitle> Applications of Functional Programming. </booktitle> <publisher> UCL Press, </publisher> <year> 1995. </year>
Reference: [Sto85] <author> W. Stoye. </author> <title> The Implementation of Functional Languages Using Custom Hardware. </title> <type> PhD Thesis, </type> <institution> Computer Laboratory, University of Cam-bridge, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: The input and output streams modelled the independent, buffered, commu-nication channels between the components; each stream was implemented as a lazy list of time-tagged data items. Network starvation (and possible deadlock due to blocking reads of the input streams) was avoided through the use of hiatons <ref> [Sto85] </ref>; whenever a component has nothing to output on a stream, it explicitly outputs an empty data item together with an appropriate time tag. 6.2 Behavioural Simulation of Component Internals For many components, it was only necessary to model the component behaviour and a straightforward style of functional programming was used.
Reference: [Tur85] <author> D. Turner. Miranda: </author> <title> A non-strict functional language with polymorphic types. </title> <booktitle> In Proceedings of the 2nd Conference on Functional Programming Languages and Computer Architecture (FPCA'85), Lecture Notes in Computer Science 201, </booktitle> <pages> pages 1-16, </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Functional languages such as Miranda 3 <ref> [Tur85] </ref>, Standard ML [MTH90], Haskell [PHA + 97] and Clean [Pla95] are used extensively in academia for research and teaching. These languages offer a number of well-known software engineering and formal methods benefits, including rapid development, clear and concise expression of algorithms, and complete type safety.
Reference: [Tur85a] <author> D. Turner. </author> <title> Functional Programs as Executable Specifications. </title> <editor> In C. Hoare and J. Shepherdson, editors, </editor> <booktitle> Mathematical Logic and Programming Languages, </booktitle> <pages> pages 29-54, </pages> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Simulation as executable specification By employing a functional language at the analysis and design stages, com plex processes were simulated in advance, allowing designs to be optimised early in the project lifecycle. The functional programs also served as exe-cutable specifications <ref> [Tur85a] </ref> | the algorithms were tested on actual data and, once confident of correctness, used as validated specifications for the final designs. Unit testing of the actual system found that fewer errors existed in C++ code that had been first specified and simulated using Miranda.
References-found: 24

