URL: ftp://gaia.cs.umass.edu/pub/Kasera96:Scalable.ps.Z
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Email: fkasera,kurose,towsleyg@cs.umass.edu  
Title: Scalable Reliable Multicast Using Multiple Multicast Groups  
Author: Sneha K. Kasera, Jim Kurose and Don Towsley 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: CMPSCI Technical Report TR 96-73 October 1996 Abstract We examine an approach for providing reliable, scalable multicast communication, involving the use of multiple multicast groups for reducing receiver processing costs in a multicast session. In this approach a single multicast group is used for the original transmission of packets. Retransmissions of packets are done to separate multicast groups, which receivers dynamically join or leave. We first show that protocols using an infinite number of multicast groups incur much less processing overhead at the receivers compared to protocols that use only a single multicast group. This is due to the fact that receivers do not receive retransmissions of packets they have already received correctly. Next, we derive the number of unwanted redundant packets at a receiver due to using only a finite number of multicast groups, for a specific negative acknowledgment (NAK)-based protocol. We then explore the minimum number of multicast groups required to keep the cost of processing unwanted packets to a sufficiently low value (i.e., to achieve most of the benefit of using an infinite number of multicast groups). For an application consisting of a single sender transmitting reliably to many receivers we find that only a small number of multicast groups are required for a wide range of system parameters. In the case of an application where all participants simultaneously act as both senders and receivers a moderate number of multicast groups is needed. Finally, we present a local filtering scheme for minimizing join/leave signaling when multiple multicast groups are used. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.H. Ammar and L. Wu, </author> <title> Improving the Throughput of Point-to-Multipoint ARQ Protocols Through Destination Set Splitting. </title> <booktitle> Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 262-269, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Cheriton [3] and Crowcroft [5] suggested the use of multiple multicast groups, for error recovery in reliable multicast, in a discussion on the end-end mailing list. Holbrook [11] proposes the use of separate retransmission channels for error recovery as future work. Even earlier, Ammar and Wu <ref> [1] </ref> proposed the idea of destination set splitting for improving the throughput of some specific positive acknowledgment based point-to-multipoint protocols. They suggested that receivers could be divided into groups based on their capabilities and the sender carries out as many simultaneous independent conversations as the number of groups. <p> An example of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order <ref> [1; 4; 3; 0; 5; 2] </ref> and sender 2 might a different order like [5; 3; 2; 0; 4; 1] and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order [1; 4; 3; 0; 5; 2] and sender 2 might a different order like <ref> [5; 3; 2; 0; 4; 1] </ref> and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> They have also observed some spatial correlation in loss. We have grouped packets in such a way that packets belonging to a group are recovered on a separate multicast channel. It would be interesting to combine our approach with the previously studied approach of destination set grouping <ref> [1] </ref> in which receivers are grouped based on their capabilities. Our local filtering reduces the processing overhead at the receivers but does not help in reducing the used network bandwidth.
Reference: [2] <author> A.J. Ballardie, P.F. Francis and J. Crowcroft, </author> <title> Core Based Trees. </title> <booktitle> Proceedings of ACM SIGCOMM. </booktitle> <year> 1993 </year>
Reference-contexts: An example of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order <ref> [1; 4; 3; 0; 5; 2] </ref> and sender 2 might a different order like [5; 3; 2; 0; 4; 1] and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order [1; 4; 3; 0; 5; 2] and sender 2 might a different order like <ref> [5; 3; 2; 0; 4; 1] </ref> and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> This information is then propagated to the nearest branching point of the multicast tree, rooted at the sender [6], or to a suitable core, in the case of core based trees <ref> [2] </ref>. Each join and leave message, results in processing overhead at all the intermediate routers thereby potentially reducing the router throughput. The significance of this processing burden is highly topology dependent.
Reference: [3] <author> D. Cheriton, End-to-End mailing list, </author> <month> September </month> <year> 1994. </year>
Reference-contexts: Designing a reliable multicast protocol for an application that can have several thousand receivers, (e.g., wb [8] which has been used with more than one thousand users) is a challenging task. In this paper we examine an approach for providing reliable, scalable multicast communication. This approach (first discussed in <ref> [3] </ref> and [5]) involves the use of multiple multicast groups for reducing receiver processing costs in a multicast session. To illustrate the problem in using a single multicast group, consider an ARQ-based reliable multicast scenario with a single multicast group. <p> Cheung et al. [4] and later McCanne [14] have proposed the use of multiple multicast groups for flow and congestion control, but not for error recovery. In [9] the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested. Cheriton <ref> [3] </ref> and Crowcroft [5] suggested the use of multiple multicast groups, for error recovery in reliable multicast, in a discussion on the end-end mailing list. Holbrook [11] proposes the use of separate retransmission channels for error recovery as future work. <p> An example of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order <ref> [1; 4; 3; 0; 5; 2] </ref> and sender 2 might a different order like [5; 3; 2; 0; 4; 1] and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order [1; 4; 3; 0; 5; 2] and sender 2 might a different order like <ref> [5; 3; 2; 0; 4; 1] </ref> and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on.
Reference: [4] <author> S.Y. Cheung, M.H. Ammar and X. Li, </author> <title> On the Use of Destination Set Grouping to Improve Fairness in Multicast Video Distribution. </title> <type> Tech Report: </type> <institution> GIT-CC-95-25, Georgia Institute of Technology, Atlanta, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Floyd et al. [8] have proposed a NAK based reliable multicast for a shared whiteboard application. They have also proposed the use of local recovery. All of the above work assumes that there is only a single multicast group, to which all the receivers belong. Cheung et al. <ref> [4] </ref> and later McCanne [14] have proposed the use of multiple multicast groups for flow and congestion control, but not for error recovery. In [9] the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested. <p> An example of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order <ref> [1; 4; 3; 0; 5; 2] </ref> and sender 2 might a different order like [5; 3; 2; 0; 4; 1] and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order [1; 4; 3; 0; 5; 2] and sender 2 might a different order like <ref> [5; 3; 2; 0; 4; 1] </ref> and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on.
Reference: [5] <author> J. Crowcroft, End-to-End mailing list, </author> <month> September </month> <year> 1994. </year>
Reference-contexts: In this paper we examine an approach for providing reliable, scalable multicast communication. This approach (first discussed in [3] and <ref> [5] </ref>) involves the use of multiple multicast groups for reducing receiver processing costs in a multicast session. To illustrate the problem in using a single multicast group, consider an ARQ-based reliable multicast scenario with a single multicast group. <p> Cheung et al. [4] and later McCanne [14] have proposed the use of multiple multicast groups for flow and congestion control, but not for error recovery. In [9] the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested. Cheriton [3] and Crowcroft <ref> [5] </ref> suggested the use of multiple multicast groups, for error recovery in reliable multicast, in a discussion on the end-end mailing list. Holbrook [11] proposes the use of separate retransmission channels for error recovery as future work. <p> An example of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order <ref> [1; 4; 3; 0; 5; 2] </ref> and sender 2 might a different order like [5; 3; 2; 0; 4; 1] and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on. <p> of one such rule is that each sender uses the retransmission groups in a different order, i.e. if there are 20 say 5 retransmission groups then sender 1 might use the retransmission groups in the order [1; 4; 3; 0; 5; 2] and sender 2 might a different order like <ref> [5; 3; 2; 0; 4; 1] </ref> and so on. This means that sender retransmits packet 0 on group 1, packet 2, on group 4 , packet 3 on group 3 and so on.
Reference: [6] <author> S. Deering, </author> <title> Multicast Routing in Datagram Internetwork. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University. </institution> <month> December, </month> <year> 1991. </year>
Reference-contexts: In P1, NAKs are received point-to-point and in P3, NAKs are received on the original transmission multicast address and there is no join/leave cost associated with a multicast group if one only sends to that group <ref> [6] </ref>. In P2 the sender has to be a member of all the retransmission groups before it starts transmitting packets because it receives NAKs on the retransmission groups. It remains a member until the multicast session ends. Hence it does not incur any join/leave processing costs during the session. <p> This information is then propagated to the nearest branching point of the multicast tree, rooted at the sender <ref> [6] </ref>, or to a suitable core, in the case of core based trees [2]. Each join and leave message, results in processing overhead at all the intermediate routers thereby potentially reducing the router throughput. The significance of this processing burden is highly topology dependent.
Reference: [7] <author> S. </author> <title> Deering Host Extensions for IP Multicasting. </title> <type> RFC 1112. </type> <month> August </month> <year> 1989. </year>
Reference-contexts: In the current networks supporting IP multicast routing, a join or leave from a receiver is detected by the nearest multicast router, the one attached to the subnet of the receiver, through the IGMP protocol <ref> [7] </ref>. This information is then propagated to the nearest branching point of the multicast tree, rooted at the sender [6], or to a suitable core, in the case of core based trees [2].
Reference: [8] <author> S. Floyd, V. Jacobson, S. McCanne, C. Liu and L. Zhang, </author> <title> A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. </title> <booktitle> Proceedings of ACM SIG-COMM, </booktitle> <pages> pages 342-356, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Many applications such as shared whiteboards, distributed interactive simulation and distributed computing, require reliable multicast, where sender (s) transmit data to a group of receivers in a reliable manner. Designing a reliable multicast protocol for an application that can have several thousand receivers, (e.g., wb <ref> [8] </ref> which has been used with more than one thousand users) is a challenging task. In this paper we examine an approach for providing reliable, scalable multicast communication. <p> Yavatkar [18] proposes error recovery that is driven by receivers who use a combination of restricted negative acknowledgment with NAK suppression and periodic positive ACKs. Grossglauser [10] has described a rigorous approach to the NAK implosion problem. Floyd et al. <ref> [8] </ref> have proposed a NAK based reliable multicast for a shared whiteboard application. They have also proposed the use of local recovery. All of the above work assumes that there is only a single multicast group, to which all the receivers belong. <p> Third, in addition to point-to-multipoint scenario, we have also considered the multipoint-to-multipoint scenario. 3 Protocols and System Model We now present three NAK-based protocols for using multiple multicast channels for reliable multicast from a sender to several receivers . Based on arguments presented in <ref> [8] </ref> and [16, 17] it is clear that for many applications receiver-based reliability is a better scheme (in terms of performance) for reliable multicast then sender-based reliability. Hence in our work we focus only on receiver-based recovery, or negative acknowledgment (NAK)-based schemes. <p> The important similarity between P2 and P3, which distinguishes them from P1, is that both have the capability to suppress NAKs <ref> [8] </ref> to the sender. They attempt to ensure that at most one NAK is sent out to the sender per packet by delaying the generation of the NAKs and multicasting them to all the participating receivers. The suppression of NAKs to the sender does not come for free, however.
Reference: [9] <author> S. Floyd, V. Jacobson, S. McCanne, C. Liu and L. Zhang, </author> <title> A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing. </title> <note> A later version of the ACM SIGCOMM paper.November 1995. </note>
Reference-contexts: All of the above work assumes that there is only a single multicast group, to which all the receivers belong. Cheung et al. [4] and later McCanne [14] have proposed the use of multiple multicast groups for flow and congestion control, but not for error recovery. In <ref> [9] </ref> the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested. Cheriton [3] and Crowcroft [5] suggested the use of multiple multicast groups, for error recovery in reliable multicast, in a discussion on the end-end mailing list.
Reference: [10] <author> M. Grossglauser, </author> <title> Optimal Deterministic Timeouts for Reliable Scalable Multicast. </title> <booktitle> Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 1425-1432, </pages> <month> April </month> <year> 1996. </year> <month> 23 </month>
Reference-contexts: In [16] and [17] the authors have provided a quantitative demonstration of the superiority of receiver-initiated NAK-based approaches over sender-initiated ACK-based approaches. Yavatkar [18] proposes error recovery that is driven by receivers who use a combination of restricted negative acknowledgment with NAK suppression and periodic positive ACKs. Grossglauser <ref> [10] </ref> has described a rigorous approach to the NAK implosion problem. Floyd et al. [8] have proposed a NAK based reliable multicast for a shared whiteboard application. They have also proposed the use of local recovery.
Reference: [11] <author> H.W. Holbrook, S.K. Singhal and D.R. Cheriton, </author> <title> Log-Based Receiver Reliable Multicast for Distributed Interactive Simulation. </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 328-341, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: In [9] the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested. Cheriton [3] and Crowcroft [5] suggested the use of multiple multicast groups, for error recovery in reliable multicast, in a discussion on the end-end mailing list. Holbrook <ref> [11] </ref> proposes the use of separate retransmission channels for error recovery as future work. Even earlier, Ammar and Wu [1] proposed the idea of destination set splitting for improving the throughput of some specific positive acknowledgment based point-to-multipoint protocols.
Reference: [12] <author> Institute for Simulation and Training, </author> <title> Standard for Distributed Interactive Simulation Application Protocols. </title> <type> Technical Report IST-CR-94-50, </type> <institution> University of Central Florida, </institution> <address> Orlando, Fla, </address> <year> 1994 </year>
Reference-contexts: In the first model, corresponding to the one-many application (e.g. telelecturing), we assume 5 that one sender transmits a continuous stream of packets to R identical receivers. In the second model, corresponding to the many-many application (e.g. distributed interactive simulations <ref> [12] </ref>), we assume that there are R + 1 identical nodes in the system. All nodes can function as both a sender and receiver. In this model we assume that a node is a sender with a probability 1=(R + 1) and a receiver with probability R=(R + 1) [17].
Reference: [13] <author> J. Kay and J. Pasquale, </author> <title> The Importance of Non-Data Touching Processing Overheads in TCP/IP. </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <year> 1993. </year>
Reference-contexts: The join and leave operations were "local" meaning that no IGMP reports were sent out on these operations. The concept of "local" join and leave is discussed later in the section on local filtering. It is worth noting that several measurement studies have been reported in the literature, notably <ref> [13] </ref> and [15].
Reference: [14] <author> S. McCanne, V. Jacobson and M. Vetterli, </author> <title> Receiver-driven Layered Multicast. </title> <booktitle> Proceedings of ACM SIGCOMM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: They have also proposed the use of local recovery. All of the above work assumes that there is only a single multicast group, to which all the receivers belong. Cheung et al. [4] and later McCanne <ref> [14] </ref> have proposed the use of multiple multicast groups for flow and congestion control, but not for error recovery. In [9] the possibility of using separate multicast groups for defining "local groups" for local recovery has been suggested.
Reference: [15] <author> C. Partridge and S. Pink, </author> <title> A Faster UDP. </title> <journal> IEEE/ACM Transactions in Networking, Vol1., </journal> <volume> No.4, </volume> <pages> pages 429-439, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The concept of "local" join and leave is discussed later in the section on local filtering. It is worth noting that several measurement studies have been reported in the literature, notably [13] and <ref> [15] </ref>.
Reference: [16] <author> S. Pingali, D. Towsley and J. Kurose, </author> <title> A Comparison of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols. </title> <booktitle> Proceedings of ACM Sigmetrics. </booktitle> <year> 1994. </year>
Reference-contexts: Our conclusions and suggestions for future work are contained in Section 8. 2 Related Work Much of the existing work on reliable multicast concerns the design and implementation of ACK-based and/or NAK-based error recovery. In <ref> [16] </ref> and [17] the authors have provided a quantitative demonstration of the superiority of receiver-initiated NAK-based approaches over sender-initiated ACK-based approaches. Yavatkar [18] proposes error recovery that is driven by receivers who use a combination of restricted negative acknowledgment with NAK suppression and periodic positive ACKs. <p> Third, in addition to point-to-multipoint scenario, we have also considered the multipoint-to-multipoint scenario. 3 Protocols and System Model We now present three NAK-based protocols for using multiple multicast channels for reliable multicast from a sender to several receivers . Based on arguments presented in [8] and <ref> [16, 17] </ref> it is clear that for many applications receiver-based reliability is a better scheme (in terms of performance) for reliable multicast then sender-based reliability. Hence in our work we focus only on receiver-based recovery, or negative acknowledgment (NAK)-based schemes. <p> Hence in our work we focus only on receiver-based recovery, or negative acknowledgment (NAK)-based schemes. The section ends with a description of the applications and the network model. 3.1 Protocol Description The protocols we describe below are modified versions of the generic protocols, N1 and N2, proposed in <ref> [16, 17] </ref> . In [16, 17], the authors have considered only one multicast group for both transmissions and retransmissions. The reliable multicast protocols we will consider will be denoted P1, P2 and P3. <p> The section ends with a description of the applications and the network model. 3.1 Protocol Description The protocols we describe below are modified versions of the generic protocols, N1 and N2, proposed in <ref> [16, 17] </ref> . In [16, 17], the authors have considered only one multicast group for both transmissions and retransmissions. The reliable multicast protocols we will consider will be denoted P1, P2 and P3. <p> Protocol N1 in <ref> [16, 17] </ref> is equivalent to P1 when only A org is used for both transmissions and retransmissions. <p> Protocol N2 in <ref> [16, 17] </ref> is equivalent to P2 when only A org is used for both transmissions and retransmissions. Protocol P3 exhibits the same behavior as P2 except that a receiver sends a NAK for packet i on the original multicast address A org instead of A i as in P2.
Reference: [17] <author> D. Towsley, J. Kurose and S. Pingali, </author> <title> A Comparison of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols. </title> <note> Submitted for Publication. </note>
Reference-contexts: For an application consisting of a single sender transmitting reliably to many receivers (referred to as a one-many application <ref> [17] </ref>) we found that only a small number of multicast groups are required for a wide range of system parameters. In the case of an application where all participants simultaneously act as both senders and receivers (referred to as a many-many application [17]) a moderate number of multicast groups is needed. <p> many receivers (referred to as a one-many application <ref> [17] </ref>) we found that only a small number of multicast groups are required for a wide range of system parameters. In the case of an application where all participants simultaneously act as both senders and receivers (referred to as a many-many application [17]) a moderate number of multicast groups is needed. One potential concern with using multiple multicast groups is the processing of "joins" and "leaves," as receivers dynamically add and delete themselves from these groups. <p> Our conclusions and suggestions for future work are contained in Section 8. 2 Related Work Much of the existing work on reliable multicast concerns the design and implementation of ACK-based and/or NAK-based error recovery. In [16] and <ref> [17] </ref> the authors have provided a quantitative demonstration of the superiority of receiver-initiated NAK-based approaches over sender-initiated ACK-based approaches. Yavatkar [18] proposes error recovery that is driven by receivers who use a combination of restricted negative acknowledgment with NAK suppression and periodic positive ACKs. <p> Third, in addition to point-to-multipoint scenario, we have also considered the multipoint-to-multipoint scenario. 3 Protocols and System Model We now present three NAK-based protocols for using multiple multicast channels for reliable multicast from a sender to several receivers . Based on arguments presented in [8] and <ref> [16, 17] </ref> it is clear that for many applications receiver-based reliability is a better scheme (in terms of performance) for reliable multicast then sender-based reliability. Hence in our work we focus only on receiver-based recovery, or negative acknowledgment (NAK)-based schemes. <p> Hence in our work we focus only on receiver-based recovery, or negative acknowledgment (NAK)-based schemes. The section ends with a description of the applications and the network model. 3.1 Protocol Description The protocols we describe below are modified versions of the generic protocols, N1 and N2, proposed in <ref> [16, 17] </ref> . In [16, 17], the authors have considered only one multicast group for both transmissions and retransmissions. The reliable multicast protocols we will consider will be denoted P1, P2 and P3. <p> The section ends with a description of the applications and the network model. 3.1 Protocol Description The protocols we describe below are modified versions of the generic protocols, N1 and N2, proposed in <ref> [16, 17] </ref> . In [16, 17], the authors have considered only one multicast group for both transmissions and retransmissions. The reliable multicast protocols we will consider will be denoted P1, P2 and P3. <p> Protocol N1 in <ref> [16, 17] </ref> is equivalent to P1 when only A org is used for both transmissions and retransmissions. <p> Protocol N2 in <ref> [16, 17] </ref> is equivalent to P2 when only A org is used for both transmissions and retransmissions. Protocol P3 exhibits the same behavior as P2 except that a receiver sends a NAK for packet i on the original multicast address A org instead of A i as in P2. <p> All nodes can function as both a sender and receiver. In this model we assume that a node is a sender with a probability 1=(R + 1) and a receiver with probability R=(R + 1) <ref> [17] </ref>. That is, for each packet there is a single sender and each node is equally likely to be the sender. <p> We now derive expressions for receiver processing requirements for the protocols P1, P2 and P3. Table 1 describes the notation used in the analysis. Most of the notation has been reintroduced from <ref> [17] </ref> for the sake of consistency. <p> Following an approach similar to the one in <ref> [17] </ref>, the mean per packet processing time for a randomly chosen packet at a receiver for the P1 protocol can be expressed as, E [Y P 1 ] = E [Y p ] + (E [Y j ] + E [Y l ])p + E [(M r 1) + ]E [Y <p> Since M r , the number of times a message must be sent before a given receiver receives the packet is independent of the number of multicast groups (and indeed is independent of whether an ACK or NAK protocol is used), we can use the results in <ref> [17] </ref> directly: E [M r ] = 1=(1 p); (2) E [(M r 2) + ] = p 2 =(1 p): (4) Substitution of (3) and (4) into (1) yields E [Y P 1 ] = E [Y p ] + (E [Y j ] + E [Y l ])p + <p> It remains a member until the multicast session ends. Hence it does not incur any join/leave processing costs during the session. We can thus use the expressions of sender processing costs from <ref> [17] </ref>. The mean sender processing time needed to successfully transmit a packet to all the receivers, for protocols P1, P2 and 8 P3 is given by the following expressions. <p> In the following, we will directly use the expressions derived in <ref> [17] </ref> to do the same for protocols N1 and N2. Figures 1-3 show how the ratio of receiver processing costs obtained under the N and P protocols varies with R and p. It can be seen that the family of P protocols always perform better in all the three graphs. <p> Observe that the relative performance of P2 over N2 is better than that of P1 over N1. This is because the receiver processing time of N2 is higher than that of N1 <ref> [17] </ref>. On the other hand the receiver processing times of P1 and P2 are almost same. <p> If the send processing rate is the bottleneck then the overall protocol throughput, for the one-many scenario, defined as the minimum of the send and receive processing rates, does not change even with the improvement in receiver processing cost (rate). In <ref> [17] </ref> it has been shown that the send processing rate is indeed the bottleneck for protocols N1 and N2. This means that the send processing rate is also the bottleneck for protocols P1, P2 and P3.
Reference: [18] <author> R. Yavatkar, J. Griffioen and M. Sudan, </author> <title> A Reliable Dissemination Protocol for Interactive Collaborative Applications. </title> <booktitle> Proceeding of ACM Multimedia. </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: In [16] and [17] the authors have provided a quantitative demonstration of the superiority of receiver-initiated NAK-based approaches over sender-initiated ACK-based approaches. Yavatkar <ref> [18] </ref> proposes error recovery that is driven by receivers who use a combination of restricted negative acknowledgment with NAK suppression and periodic positive ACKs. Grossglauser [10] has described a rigorous approach to the NAK implosion problem.
Reference: [19] <author> M. Yajnik, J. Kurose and D. Towsley, </author> <title> Packet Loss Correlation in the MBone Multicast Network. To appear in Global Internet Conference, </title> <month> November </month> <year> 1996. </year> <month> 24 </month>
Reference-contexts: We have considered a 22 round-robin approach in reusing the multiple retransmission groups; other approaches are also possible. Also, we have assumed that losses are spatially and temporally independent. In <ref> [19] </ref>, Yajnik et al. have observed some long bursts of losses on the MBone. They have also observed some spatial correlation in loss. We have grouped packets in such a way that packets belonging to a group are recovered on a separate multicast channel.
References-found: 19

