URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1998/TR03.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fyangy,singhalg@cis.ohio-state.edu  
Title: Summary Databases as Indexing Structures  
Author: Yuping Yang and Mukesh Singhal 
Keyword: Web or in mobile computing environments. Key words: Relational database, query execution, join, selection, equijoin, index, summary, disk I/O, performance.  
Date: January 28, 1998  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: This paper proposes a new summary database architecture (SDB) that employs summary information in the forms of signatures for text-valued data and statistics such as the average, minimum, and maximum for numerical-valued data in the execution of joins and selections in a large relational database. Its join execution performance is better than the B c tree method [4]. Its performance advantage is especially evident in large database for queries with low join selectivity or complex queries that have multiple joins and/or selections. A distinct feature of the SDB method is that for a given query, a full set of relational operations, including joins and/or selections, can be executed in the SDB before the main database is accessed. A detailed comparison between SDB and B c tree join execution performance is also included. The excellent performance in answering queries with low selectivity joins in large relational databases makes the SDB method ideal for various "online" databases such as the databases over the World Wide 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. B. Yao. </author> <title> "Approximating Block Accesses in Database Organizations". </title> <journal> Commun. ACM 20, </journal> <volume> 4, </volume> <pages> pp. 260-261, </pages> <month> April </month> <year> 1977. </year>
Reference-contexts: B. <ref> [1] </ref>: Y ao (k; m; n) = m m fl i=1 n i + 1 Query execution cost in the hybrid hash join: Some disk accesses of the hybrid hash join are sequential, such as reading of pages of B1 and B2 into the memory for hashing and reading of hashed
Reference: [2] <author> T. Haerder. </author> <title> "Implementing a Generalized Access Path Structure for a Relational Database System". </title> <journal> ACM Transactions on Database Systems, Vol.3, </journal> <volume> No.3, </volume> <pages> pp. 285-298, </pages> <month> September </month> <year> 1978. </year>
Reference-contexts: However, the SDB method belongs to those cross-relational indexed methods that are specially designed for the execution of joins such as the access path index <ref> [2] </ref>, join index [3], and B c tree [4]. Among cross-relational indexed methods, B c tree method is the closest to the SDB method because the B c tree is also a cross-relational index employing B+ trees.
Reference: [3] <author> P. Valduriez. </author> <title> "Join Indices". </title> <journal> ACM Transactions on Database Systems, Vol.12, No.2, </journal> <pages> pp. 218-246, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Techniques for executing joins can be classified as: (1) non-indexed: the nested loop join, the sort-merge join, and the hybrid hash join, etc.; (2) indexed: the nested block join with B+ index, the distributive join [9], the join index <ref> [3] </ref>, and the composite B+ tree index [4], etc. In a database environment, if the average size of join results is small, then using an index results in a few random disk accesses and thus can be much faster than scanning the entire relation. <p> For clarity, let us call these indexes the selection indexes. A selection index can be used to speed up join executions along with nested looping (nested block join with index), sorting [7], and hashing [9]. The join index <ref> [3] </ref> is one of the cross-relational indexes, specially designed for join executions. It is not widely used [4] in commercial implementation of relational database systems due largely to its excessive large disk storage requirement. The B c tree [4] is another cross-relational index with a much smaller data structure. <p> The join index is not widely used because its data structure may become excessively large [4]. One may have similar concern about the size of bonding tables. However, unlike the join index <ref> [3] </ref>, bonding tables are built between summary relations which are much smaller than main database relations (if the average size of each group is 100, then the size of a summary relation is only 1% of the size of its base relation). <p> However, the SDB method belongs to those cross-relational indexed methods that are specially designed for the execution of joins such as the access path index [2], join index <ref> [3] </ref>, and B c tree [4]. Among cross-relational indexed methods, B c tree method is the closest to the SDB method because the B c tree is also a cross-relational index employing B+ trees.
Reference: [4] <author> B. C. Desai. </author> <title> "Performance of a Composite Attribute and Join Index". </title> <journal> IEEE Transactions on Software Engineering, Vol.15, No.2, </journal> <pages> pp. 142-152, </pages> <month> February, </month> <year> 1989. </year> <month> 27 </month>
Reference-contexts: Techniques for executing joins can be classified as: (1) non-indexed: the nested loop join, the sort-merge join, and the hybrid hash join, etc.; (2) indexed: the nested block join with B+ index, the distributive join [9], the join index [3], and the composite B+ tree index <ref> [4] </ref>, etc. In a database environment, if the average size of join results is small, then using an index results in a few random disk accesses and thus can be much faster than scanning the entire relation. <p> A selection index can be used to speed up join executions along with nested looping (nested block join with index), sorting [7], and hashing [9]. The join index [3] is one of the cross-relational indexes, specially designed for join executions. It is not widely used <ref> [4] </ref> in commercial implementation of relational database systems due largely to its excessive large disk storage requirement. The B c tree [4] is another cross-relational index with a much smaller data structure. <p> The join index [3] is one of the cross-relational indexes, specially designed for join executions. It is not widely used <ref> [4] </ref> in commercial implementation of relational database systems due largely to its excessive large disk storage requirement. The B c tree [4] is another cross-relational index with a much smaller data structure. Except for the join index and the B c tree method, all other join methods require minimum of one pass over at least one of the joining relations, which can be time-consuming in large relational databases. <p> The B c tree method can execute joins faster than the join index because it uses a smaller data structure <ref> [4] </ref> and B+ trees. This paper proposes a summary database (SDB) method which is a further improvement over the B c tree method. In fact, the SDB method is more than just a join execution method. <p> The partitioning of S D affects the size of bonding tables and thus has a direct impact on the speed of join executions in the SDB. The join index is not widely used because its data structure may become excessively large <ref> [4] </ref>. One may have similar concern about the size of bonding tables. <p> After a query is 8 executed in the SDB, an addressing table is used to map resulting summary tuples to their corresponding base tuples. A B c tree <ref> [4] </ref> can be conveniently used as a part of an addressing table with logical addresses of summary tuples residing in non-leaf nodes and logical addresses of base tuples residing in leaf nodes. <p> Each data domain (of join attributes) has one B c tree. A B c tree can be used to do fast join executions since a B c tree is much smaller than joining relations <ref> [4] </ref>. With this implementation, leaf nodes of an addressing table can be used to complete the join execution started in summary relations. <p> This leads to a further reduction in the number of disk I/Os needed as compared to the B c method, especially for a full join (nonselective join, i.e., all join attribute values are possible candidates of matching values <ref> [4] </ref>). Not even all the pages of leaf nodes of the B c are needed in the join execution. <p> However, the SDB method belongs to those cross-relational indexed methods that are specially designed for the execution of joins such as the access path index [2], join index [3], and B c tree <ref> [4] </ref>. Among cross-relational indexed methods, B c tree method is the closest to the SDB method because the B c tree is also a cross-relational index employing B+ trees. <p> The B c tree method is an improvement over the join index <ref> [4] </ref>. As discussed previously in this section, the SDB method performs even better than the B c tree method when join selectivity is low and joining relations are very large. <p> (Q2) = j B1 j +maxf0; ( buckets + 1)(j B1 j b1 0 )g +s + maxf0; ( buckets + 1)(s b2 0 )g (5) Query execution cost in B c : For query Q1, a full scan over all leaf nodes of a B c tree is needed <ref> [4] </ref>. <p> For query Q2, the selection costs additional j B2 j +s disk I/Os and in the join execution, only some selective leaf nodes (as a result of the selection) are accessed <ref> [4] </ref>. <p> From Fig. 6 and Fig. 7, we observe that the B c tree method is competitive for executing a join without the selection (Q1), and is far less competitive for executing a join with a selection (Q2). This observation supports the finding in <ref> [4] </ref>. We also observe that with or without a selection, the SDB method consistently performs better than the B c tree method and the hybrid hash join. Both the indexed methods, B c and SDB, perform better in Fig. 7 than in Fig. 6 because of lower join selectivity. <p> Both the indexed methods, B c and SDB, perform better in Fig. 7 than in Fig. 6 because of lower join selectivity. Our result of the performance of the B c tree method is somewhat worse than the result in <ref> [4] </ref> because we take into account the time difference between a random disk access and a sequential disk access. <p> Then, the join execution is completed by using the loaded portion of leaf nodes of the addressing table, similar to what has been described in 24 <ref> [4] </ref>. The summary relations and bonding tables are small compared to the size of all leaf nodes of the addressing tables (which has the same size as all B c trees in the B c method).
Reference: [5] <author> D. L. Lee, C.-W. Leng. </author> <title> "Partitioned Signature File: Design Issues and Performance Evaluation". </title> <journal> ACM Transactions on Information Systems, Vol.7, No.2, </journal> <pages> pp. 158-180, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: The signature is used to reduce the search space <ref> [5] </ref> and it is used solely for attributes with text data domain such as name, address, descriptions, etc.
Reference: [6] <author> J. A. Blakeley, and N. L. Martin. </author> <title> "Join Index, Materialized View, and Hybrid-Hash Join: A Performance Analysis". </title> <booktitle> Proc of 6th Int'l Conf. on Data Engineering, IEEE, </booktitle> <pages> pp. 256-263, </pages> <month> Feb 5-9, </month> <year> 1990. </year>
Reference-contexts: Also, the performance advantage of join executions in a SDB (though SDB is more than just a join method) as compared to other join methods is evident from the results of other studies. For example, a performance comparison among the hybrid hash join, materialized view, and join index <ref> [6] </ref> found that when the data size is large and the selectivity is low (small join result), the performance of the hybrid hash join is the worst, the materialized view is better, and the join index is the best. <p> Formulas for estimating the number of disk I/Os: The number of disk pages accessed when accessing k tuples randomly distributed in a relation with m pages and n tuples via a 19 B+ index of two or three levels is given by <ref> [6] </ref>: Y io (k; m; n) = Y ao (k; m; n) + Y ao (k; n=F O; n) + T 3 (k; n); (1) where T 3 (k; n) = Y ao (Y ao (k; n=F O; n); n=(F O fl F O); n=F O): (2) The formula Y ao
Reference: [7] <author> J. Cheng, D. Haderle, R. Hedges, B. R. Iyer, T. Messinger, C. Mohan, Y. Wang. </author> <title> "An Efficient Hybrid Join Algorithm: A DB2 Prototype". </title> <booktitle> Proc. of 7th Int'l Conf. on Data Engineering, IEEE, </booktitle> <pages> pp. 171-180, </pages> <year> 1991. </year>
Reference-contexts: For clarity, let us call these indexes the selection indexes. A selection index can be used to speed up join executions along with nested looping (nested block join with index), sorting <ref> [7] </ref>, and hashing [9]. The join index [3] is one of the cross-relational indexes, specially designed for join executions. It is not widely used [4] in commercial implementation of relational database systems due largely to its excessive large disk storage requirement. <p> a 0 2 G is deleted from G, the new average value can be computed as: v 0 n1 n fl n n1 = avgflna 0 n1 5 Relations to Previous Techniques Indexes (e.g., B+ tree) that were originally designed for selections can be used to speed up join executions <ref> [7, 9] </ref>. However, the SDB method belongs to those cross-relational indexed methods that are specially designed for the execution of joins such as the access path index [2], join index [3], and B c tree [4].
Reference: [8] <author> J. Han, Y. Cai and N. Cercone. </author> <title> "Concept-Based Data Classification in Relational Databases". </title> <booktitle> Workshop Notes of 1991 AAAI Workshop on Knowledge Discovery in Databases (KDD'91), </booktitle> <address> Anaheim, CA, </address> <pages> pp. 77-94, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Since summary relations are very small, so are the bonding tables link them. The partitioning of values in join attributes can also be helped by using concept hierarchies. Concept hierarchy <ref> [8, 10, 12, 14] </ref> is a tree-like structure. Each concept is represented as a node in the concept hierarchy (tree) and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts.
Reference: [9] <author> M. Negri and G. Pelagatti. </author> <title> "Distributive Join: A New Algorithm for Joining Relations". </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 16, No. 4, </volume> <pages> pp. 655-689, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Techniques for executing joins can be classified as: (1) non-indexed: the nested loop join, the sort-merge join, and the hybrid hash join, etc.; (2) indexed: the nested block join with B+ index, the distributive join <ref> [9] </ref>, the join index [3], and the composite B+ tree index [4], etc. In a database environment, if the average size of join results is small, then using an index results in a few random disk accesses and thus can be much faster than scanning the entire relation. <p> For clarity, let us call these indexes the selection indexes. A selection index can be used to speed up join executions along with nested looping (nested block join with index), sorting [7], and hashing <ref> [9] </ref>. The join index [3] is one of the cross-relational indexes, specially designed for join executions. It is not widely used [4] in commercial implementation of relational database systems due largely to its excessive large disk storage requirement. <p> a 0 2 G is deleted from G, the new average value can be computed as: v 0 n1 n fl n n1 = avgflna 0 n1 5 Relations to Previous Techniques Indexes (e.g., B+ tree) that were originally designed for selections can be used to speed up join executions <ref> [7, 9] </ref>. However, the SDB method belongs to those cross-relational indexed methods that are specially designed for the execution of joins such as the access path index [2], join index [3], and B c tree [4].
Reference: [10] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> "Knowledge Discovery in Databases: An Attribute-Oriented Approach". </title> <booktitle> Proc. of 18th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pp. 547-559, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Since summary relations are very small, so are the bonding tables link them. The partitioning of values in join attributes can also be helped by using concept hierarchies. Concept hierarchy <ref> [8, 10, 12, 14] </ref> is a tree-like structure. Each concept is represented as a node in the concept hierarchy (tree) and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts.
Reference: [11] <author> K. Smith, M. Winslett. </author> <title> Entity Modeling in the MLS Relational Model. </title> <booktitle> Proc. of the 18th Int'l Conf. on Very Large Data Bases, </booktitle> <pages> pp. 199-210, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: The layered database concept has been proposed mostly for improving the modeling capability of the database or database security <ref> [11, 16] </ref>. Some have used multiple layers as a way of incorporating various databases in a heterogeneous system such as the World Wide Web [15].
Reference: [12] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> "Data-Driven Discovery of Quantitative Rules in Relational Databases". </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol.5, </volume> <pages> pp. 29-40, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Since summary relations are very small, so are the bonding tables link them. The partitioning of values in join attributes can also be helped by using concept hierarchies. Concept hierarchy <ref> [8, 10, 12, 14] </ref> is a tree-like structure. Each concept is represented as a node in the concept hierarchy (tree) and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts.
Reference: [13] <author> Valery Soloviev. </author> <title> "A Truncating Hash Algorithm for Processing Band-Join Queries". </title> <booktitle> Proc. 9th Int'l Conf. on Data Engineering, IEEE, </booktitle> <year> 1993. </year>
Reference-contexts: Each partition of join attribute values induces a partition of tuples in R. The two induced partitions of tuples in R should have approximately the same number of tuples. We would like to mention a way to evenly partition a set of values <ref> [13] </ref>. In order to evenly partition S D1 into k partitions R 1 , R 2 , ... , R k , first n (n is much larger than k) random samples are taken from S D1 and are sorted.
Reference: [14] <author> J. Han, Y. Fu and R.T. Ng. </author> <title> "Cooperative Query Answering Using Multiple Layered Databases". </title> <booktitle> Proc. of the 2nd Int'l Conf. on Cooperative Information Systems, </booktitle> <address> Toronto, Canada, </address> <pages> pp. 47-58, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Some have used multiple layers as a way of incorporating various databases in a heterogeneous system such as the World Wide Web [15]. A multi-layer approach was also proposed to speed up the query execution <ref> [14] </ref> However, due to difficulties in executing joins in upper layers, the join execution was not done in the upper layer [14]. This paper proposes a new summary database architecture (SDB) that can be used to speed up joins as well as selections in large relational databases. <p> A multi-layer approach was also proposed to speed up the query execution <ref> [14] </ref> However, due to difficulties in executing joins in upper layers, the join execution was not done in the upper layer [14]. This paper proposes a new summary database architecture (SDB) that can be used to speed up joins as well as selections in large relational databases. The major components of SDB are: summary relations, bonding tables, and addressing tables. <p> Since summary relations are very small, so are the bonding tables link them. The partitioning of values in join attributes can also be helped by using concept hierarchies. Concept hierarchy <ref> [8, 10, 12, 14] </ref> is a tree-like structure. Each concept is represented as a node in the concept hierarchy (tree) and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts.
Reference: [15] <author> J. Han, O. R. Zaiane, Y. Fu. </author> <title> "Resource and Knowledge Discovery in Global Information Systems: A Multiple Layered Database Approach". </title> <type> Technical Report CSS/LCCR TR94-24, </type> <institution> CMPT TR94-10, Database Systems Laboratory, School of Computing Science, Simon Fraser University, </institution> <year> 1994. </year> <month> 28 </month>
Reference-contexts: The layered database concept has been proposed mostly for improving the modeling capability of the database or database security [11, 16]. Some have used multiple layers as a way of incorporating various databases in a heterogeneous system such as the World Wide Web <ref> [15] </ref>. A multi-layer approach was also proposed to speed up the query execution [14] However, due to difficulties in executing joins in upper layers, the join execution was not done in the upper layer [14].
Reference: [16] <author> X. Qian. </author> <title> "A Model-Theoretic Semantics of the Multilevel Relational Model". </title> <booktitle> Advances in Database Technology - EDBT'94, Lecture Notes in Computer Science 779, </booktitle> <pages> pp. 201-214, </pages> <editor> Jarke, M., Bubenko, J. and Jeffery, K. (editors), </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The layered database concept has been proposed mostly for improving the modeling capability of the database or database security <ref> [11, 16] </ref>. Some have used multiple layers as a way of incorporating various databases in a heterogeneous system such as the World Wide Web [15].
Reference: [17] <author> M.-L. Lo and C. V. Ravishankar. </author> <title> "Towards Eliminating Random I/O in Hash Joins". </title> <booktitle> Proc. of 12th Int'l Conf. on Data Engineering, IEEE, </booktitle> <volume> February 26-March 1, </volume> <pages> pp. 422-429, </pages> <year> 1996. </year>
Reference-contexts: The writing of hashed results out to hash buckets on the disk is somewhat random and the extent of randomness depends on the size of the memory buffer for each hash bucket if we adopt the technique proposed in <ref> [17] </ref>.
Reference: [18] <author> T. Zhang, R. Ramakrishnan, and M. Livny. </author> <title> BIRCH: "An Efficient Data Clustering Method for Very Large Databases". </title> <booktitle> Proc. of the ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pp. 103-114, </pages> <month> June </month> <year> 1996. </year> <month> 29 </month>
Reference-contexts: Instead of group signatures, statistics such as the average, minimum, and maximum values are used to compactly represent a group of numerical values. Partitioning by range or clustering such as that used in the BIRCH project <ref> [18] </ref> can be employed to group numerical values.
References-found: 18

