URL: ftp://ftp.ifad.dk/pub/papers/id-tr-1994-151.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Instituttet for Datateknik  
Phone: Telephone +4545933332  
Author: s g Peter Gorm Larsen Bo Stig Hansen Danmarks Tekniske Universitet Bygning 
Date: December 1994  
Web: Expressions  
Address: ISSN 0902-2821  Under-determined  Denmark Building 344 DK-2800 Lyngby, Denmark  
Affiliation: DTU  Semantics of  b Department of Computer Science Technical University of  2800 Lyngby  
Abstract-found: 0
Intro-found: 1
Reference: [BFL + 94] <author> J. Bicarregui, J.S. Fitzgerald, P. Lindsay, R. Moore, and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> Springer-Verlag, </publisher> <address> 1994. ISBN 3-540-19813-X. s g </address>
Reference-contexts: Likewise, the conjoined predicates also form a deterministic expression so we may use ordinary reasoning about sets written in comprehension <ref> [BFL + 94, Jon90] </ref> to arrive at the reduced result in the conclusion of the above proof.
Reference: [Bro82] <author> Manfred Broy. </author> <title> A fixed point approach to applicative multiprogramming. </title> <editor> In M. Broy and G. Schmidt, editors, </editor> <booktitle> Theoretical Foundations of Programming Methodology, </booktitle> <pages> pages 565-622. </pages> <publisher> Reidel, </publisher> <year> 1982. </year>
Reference-contexts: As already mentioned, our source of inspiration for this approach was work by Wies law Paw lowski. However, the idea also underlies the work by M. Broy on fixed point semantics for communication and con-currency <ref> [Bro82] </ref>. A subset of Broy's applicative multi-programming language has been treated by T.
Reference: [BSI92] <institution> Z base standard, </institution> <month> November </month> <year> 1992. </year> <note> Version 1.0. </note>
Reference-contexts: So multiple references to the same variable within a given scope will yield the same result. This is the usual approach which Stndergaard and Sestoft call singular binding [SS92] and which is also used in related specification languages such as RSL [Gro92] and Z <ref> [BSI92] </ref>. The revised semantics of variables and constants is trivial. For most of the other expressions, set comprehensions are used to propagate and combine the looseness from the subexpressions.
Reference: [Gro92] <author> The RAISE Language Group. </author> <title> The RAISE Specification Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: So multiple references to the same variable within a given scope will yield the same result. This is the usual approach which Stndergaard and Sestoft call singular binding [SS92] and which is also used in related specification languages such as RSL <ref> [Gro92] </ref> and Z [BSI92]. The revised semantics of variables and constants is trivial. For most of the other expressions, set comprehensions are used to propagate and combine the looseness from the subexpressions.
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communication Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: The simplest candidate for such a construct is probably a dyadic operator for under-determined choice between two alternatives; this would resemble the internal choice operator often used in languages with parallelism such as CSP <ref> [Hoa85] </ref>. However, the inspiration for this work comes from the VDM Specification Language with its more general "let be such that" expression. Here, the number of alternatives may be infinite as they are only bounded by a type and a predicate which each alternative must satisfy.
Reference: [ISO93] <institution> Information Technology Programming Languages - VDM-SL. ISO/IEC JTC1/SC22/WG19 N-20, </institution> <month> November </month> <year> 1993. </year> <pages> CD 13817-1. </pages>
Reference-contexts: Such `loose specification' may be a convenient way of expressing that a number of alternative implementations are allowed. As noted, e.g., by Stndergaard and Sestoft, there are (at least) two different ways of interpreting loose specifications [SS90, SS92]. In connection with the specification language VDM-SL <ref> [ISO93] </ref> they are called `under-determinedness': allowing several different deterministic implementations and `non-determinism': allowing non-deterministic implementations. In the literature, the term `under-specification' is sometimes used instead of `under-determinedness'. <p> Acknowledgements and discussion of related work appears last in the paper but one specific source of inspiration deserves special mention. This is Wies law Paw lowski's contributions to the VDM-SL standard <ref> [ISO93] </ref>. The model-theoretic semantics which will be presented in Section 3 is to a large extent based on his ideas and this provides an important foundation for the rest of the work presented. 2 A Simple Deterministic Language Below we will first consider a small deterministic, functional language.
Reference: [Jon90] <author> C.B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Likewise, the conjoined predicates also form a deterministic expression so we may use ordinary reasoning about sets written in comprehension <ref> [BFL + 94, Jon90] </ref> to arrive at the reduced result in the conclusion of the above proof. <p> Also note that the rec-I rule is simply the traditional folding rule for recursive definitions. The proof rules can be applied to form proofs in the usual style of natural deduction proof trees or in Cliff Jones' linear style with explicit scoping and indentation <ref> [Jon90] </ref>. We use the latter in this exposition. 4.2 Logic The proof rules for reasoning about under-determined expressions should be seen as an extension of a set of rules for the usual logical connectives and quantifiers.
Reference: [Lar94] <author> Peter Gorm Larsen. </author> <title> Towards Proof Rules for Looseness in Explicit Definitions from VDM-SL. </title> <booktitle> In Proceedings of the "International Workshop on Semantics of Specification Languages (SoSL)", </booktitle> <pages> pages 118-134, </pages> <month> 25-27 October </month> <year> 1993, </year> <title> Utrecht, </title> <publisher> Springer-Verlag 1994. </publisher>
Reference-contexts: To our knowledge, this approach to proof systems for under-determined expressions in a model-oriented framework is novel and we consider it to be the main contribution of the work presented here. The first author has previously published work on the same topic <ref> [Lar94] </ref>, however with quite a different approach based on equality.
Reference: [Lei69] <author> A.C. Leisenring. </author> <title> Mathematical Logic and Hilbert's "-Symbol. </title> <publisher> Gordon and Breach Science Publishers, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: The difference between using the classical Hilbert epsilon operator <ref> [Lei69] </ref> and the under-determinedness approach presented here can be illustrated by a simple example. The expression: (lambda v . choicefj1,2 jg)(5) = (lambda v . choicefj1,2 jg)(5) will be true in the Hilbert framework (using epsilon for choice) because two choices from the same set must yield the same result.
Reference: [Nip86] <author> Tobias Nipkow. </author> <title> Non-deterministic Data Types: Models and Implementations. </title> <journal> Acta Informatica, </journal> <volume> 22 </volume> <pages> 629-661, </pages> <year> 1986. </year>
Reference-contexts: As already mentioned, our source of inspiration for this approach was work by Wies law Paw lowski. However, the idea also underlies the work by M. Broy on fixed point semantics for communication and con-currency [Bro82]. A subset of Broy's applicative multi-programming language has been treated by T. Nipkow <ref> [Nip86] </ref> in the context of non-deterministic data types, and in the field of algebraic specification, there is also related work based on non-determinism, e.g. by Walicki and Meldal [WM]. s g Regarding the proof system, the main idea is to base it on propositions of the form e : t ,
Reference: [RBS89] <author> Grant Malcolm Roland Backhouse, Paul Chisholm and Erik Saaman. </author> <title> Do-it-Yourself Type Theory. </title> <journal> Formal Aspects of Computing, </journal> <volume> 1(1) </volume> <pages> 19-84, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: In this respect our work is inspired by type theory <ref> [RBS89] </ref> and the concept of types restricted by invariants which are found in a number of specification languages such as VDM-SL and RSL.
Reference: [Sch86] <author> D.A. Schmidt. </author> <title> Denotational Semantics A Methodology for Language Development. </title> <publisher> Allyn and Bacon, Inc. </publisher> <year> 1986. </year>
Reference-contexts: The unary and binary operators which will be used in the examples are all considered constants. 2.2 Semantic Domains Expressions are interpreted using the following recursively defined domain V. The domain operators +, fi and ! are coalesced disjoint sum, smashed product and continuous function space respectively <ref> [Sch86] </ref>. V = B 0 + B 1 + : : : + P + F F = (V ! V) ? The domains B i are flat domains of basic values, each with a common bottom value ?.
Reference: [SS90] <author> H. Stndergaard and P. Sestoft. </author> <title> Referential Transparency, Definiteness and Unfoldability. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 505-517, </pages> <year> 1990. </year>
Reference-contexts: Such `loose specification' may be a convenient way of expressing that a number of alternative implementations are allowed. As noted, e.g., by Stndergaard and Sestoft, there are (at least) two different ways of interpreting loose specifications <ref> [SS90, SS92] </ref>. In connection with the specification language VDM-SL [ISO93] they are called `under-determinedness': allowing several different deterministic implementations and `non-determinism': allowing non-deterministic implementations. In the literature, the term `under-specification' is sometimes used instead of `under-determinedness'.
Reference: [SS92] <author> H. Stndergaard and P. Sestoft. </author> <title> Non-determinism in Functional Languages. </title> <journal> The Computer Journal, </journal> <volume> 35(5) </volume> <pages> 514-523, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Such `loose specification' may be a convenient way of expressing that a number of alternative implementations are allowed. As noted, e.g., by Stndergaard and Sestoft, there are (at least) two different ways of interpreting loose specifications <ref> [SS90, SS92] </ref>. In connection with the specification language VDM-SL [ISO93] they are called `under-determinedness': allowing several different deterministic implementations and `non-determinism': allowing non-deterministic implementations. In the literature, the term `under-specification' is sometimes used instead of `under-determinedness'. <p> It should be noted that, in a given environment, each variable is bound to a single value. So multiple references to the same variable within a given scope will yield the same result. This is the usual approach which Stndergaard and Sestoft call singular binding <ref> [SS92] </ref> and which is also used in related specification languages such as RSL [Gro92] and Z [BSI92]. The revised semantics of variables and constants is trivial. For most of the other expressions, set comprehensions are used to propagate and combine the looseness from the subexpressions.
Reference: [TW90] <author> Andrzej Tarlecki and Morten Wieth. </author> <title> A Naive Domain Universe for VDM. </title> <editor> In Dines Bjtrner, C.A.R. Hoare, and Hans Langmaack, editors, </editor> <booktitle> VDM '90 VDM and Z Formal Methods in Software Development, </booktitle> <pages> pages 552-579. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: However, as illustrated by RSL, it is possible to have both strong typing (with respect to a notion of so-called maximal types) and a notion of types described in comprehension (subtypes in RSL terminology). Also the work by Tarlecki and Wieth <ref> [TW90] </ref> justifies the use of logical type invariants for languages with a strong typing discipline. It is on our list of important future work to establish and verify some notion of completeness for the proof system presented.
Reference: [WM] <author> Michal Walicki and Sigurd Meldal. </author> <title> A complete calculus for the mul-tialgebraic and functional semantics of nondeterminism. </title> <note> To appear in TOPLAS. </note> <institution> s g </institution>
Reference-contexts: A subset of Broy's applicative multi-programming language has been treated by T. Nipkow [Nip86] in the context of non-deterministic data types, and in the field of algebraic specification, there is also related work based on non-determinism, e.g. by Walicki and Meldal <ref> [WM] </ref>. s g Regarding the proof system, the main idea is to base it on propositions of the form e : t , meaning: "the expression e has one of the values in the type t ." To allow a precise delimitation of the values, we use types described in comprehension:
References-found: 16

