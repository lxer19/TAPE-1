URL: http://www.cs.washington.edu/research/projects/spin/www/papers/OSDI96/eventsOSDI96.ps
Refering-URL: http://velvet.cs.washington.edu/spin/docs/spin.html
Root-URL: 
Email: fpardy,bershadg@cs.washington.edu  
Title: Dynamic Binding for an Extensible System  
Author: Przemys law Pardyak and Brian N. Bershad 
Address: Seattle, WA 98195, USA  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: A version of this paper appeared in the Proceedings of the Second Symposium on Operating Systems Design and Implementation Abstract An extensible system requires a means to dynamically bind extensions into executing code. The SPIN extensible operating system uses an event-based invocation mechanism to provide this functionality in a flexible, transparent, safe, and efficient way. Events offer a uniform model of extensibility, whereby the system's configuration can change without changing any of its components. Events are defined with the granularity and syntax of procedures but provide extended procedure call semantics such as conditional execution, multicast, and asynchrony. By installing a handler on an event, an extension's code can execute in response to activities at the granularity of procedure call. Our system uses run-time code generation to ensure that event delivery has low overhead and scales well with the number of handlers. This paper describes the design, use and performance of events in the SPIN operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [Banerji & Cohn 94] <author> A. Banerji and D. L. Cohn. </author> <title> Protected Shared Libraries. </title> <type> Technical Report 37, </type> <institution> University of Notre Dame, </institution> <year> 1994. </year>
Reference-contexts: However, this approach does not lend itself well to extending shared services since all communication must be channeled through the upcall mechanism. Some systems have used dynamic linking to address the performance problems of cross-address space IPC <ref> [Orr et al. 93, Banerji & Cohn 94] </ref>. Dynamic linking tightly couples clients to a particular service implementation and does not provide for transparent routing of requests to alternate or supplementary services.
Reference: [Bershad et al. 95] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. Fiuczynski, D. Becker, S. Eg-gers, and C. Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference: [Bhatti & Schlichting 95] <author> N. T. Bhatti and R. D. Schlicht-ing. </author> <title> A System For Constucting Configurable High-Level Protocols. </title> <booktitle> In Proceedings of the SIG-COMM '95 Symposium on Communications Architectures and Protocols, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: As a result, dynamic linking does not allow multiple independent extensions to provide different parts of a service without explicit cooperation. Events [Reiss 90, Sullivan & Notkin 92] have been used in several systems including network operating systems <ref> [Bhatti & Schlichting 95] </ref>, windowing systems such as X11, software engineering environments [Cagan 90], extensible applications such as Emacs, database servers [Sybase 96], and the Macintosh operating system. Events support flexible composition by allowing an extension to be executed in response to interactions between components of the system.
Reference: [Black et al. 92] <author> D. L. Black, D. B. Golub, D. P. Julin, R. F. Rashid, R. P. Draves, R. W. Dean, A. Forin, J. Barrera, H. Tokuda, G. Malan, and D. Bohman. </author> <title> Microkernel Operating System Architecture and Mach. </title> <booktitle> In Proceedings of the USENIX Workshop on Micro-Kernels and Other Kernel Architectures, </booktitle> <pages> pages 11-30, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1992. </year> <month> 11 </month>
Reference: [Brockschmidt 94] <author> K. Brockschmidt. </author> <title> Inside OLE 2. </title> <publisher> Mi--crosoft Press, </publisher> <year> 1994. </year>
Reference-contexts: In Section 3 we describe the implementation and performance of the event system. Finally, in Section 4 we conclude. Although this paper draws upon our experience with an extensible operating system, its ideas and mechanisms may be applicable to any software that admits dynamic restructuring <ref> [Sybase 96, Sun 95, Brockschmidt 94] </ref>. 2 Events in SPIN The SPIN kernel and its extensions are written in Modula-3, a modular, type-safe, ALGOL-like language. Extensions are incorporated into the system through a two-step process.
Reference: [Cagan 90] <author> M. Cagan. </author> <title> The HP SoftBench Environment: An Architecture for a New Generation of Software Tools. </title> <journal> Hewlett-Packard Journal, </journal> <month> June </month> <year> 1990. </year>
Reference-contexts: Events [Reiss 90, Sullivan & Notkin 92] have been used in several systems including network operating systems [Bhatti & Schlichting 95], windowing systems such as X11, software engineering environments <ref> [Cagan 90] </ref>, extensible applications such as Emacs, database servers [Sybase 96], and the Macintosh operating system. Events support flexible composition by allowing an extension to be executed in response to interactions between components of the system.
Reference: [Cooper 85] <author> E. C. Cooper. </author> <title> Replicated Distributed Programs. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 314-324, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The default handler for this event relies on a trusted default paging service provided by VM. The result handler for this event returns the logical-or of all the handler results. Previous structuring approaches have addressed the problem of handling multiple results in a similar fashion <ref> [Pardyak & Bershad 94, Cooper 85] </ref>. 2.4 Safety issues The fundamental property of the system's event model is that every procedure call can potentially be dispatched to any one of a number of handlers.
Reference: [Engler et al. 95] <author> D. R. Engler, M. F. Kaashoek, and J. James O'Toole. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain, CO, </address> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: Unfortunately, the high cost of protecting system code from extension code has generally limited the utility of this approach to coarse grain system interfaces. Some sys tems have relied on fast kernel upcalls to create specialized system services with lower kernel overhead <ref> [Thekkath & Levy 94, Engler et al. 95] </ref>. However, this approach does not lend itself well to extending shared services since all communication must be channeled through the upcall mechanism.
Reference: [Fiuczynski & Bershad 96] <author> M. E. Fiuczynski and B. N. Ber-shad. </author> <title> An Extensible Protocol Architecture for Application-Specific Networking. </title> <booktitle> In Proceedings of the 1996 Winter USENIX Conference, </booktitle> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: The validSpace argument passed into the imposed guard is a closure that was provided as the final argument to Dispatcher.ImposeGuard within AuthorizeSyscall. a guard that restricts an application's extension to receive packets only when the packets' destination is for a port that had been previously assigned to the application <ref> [Fiuczynski & Bershad 96] </ref>. 2.6 Denial of service Access control mechanisms ensure that only approved handlers execute in response to published events, but do not address the problem of service denial by those handlers. <p> In the second, we calculate a breakdown of where time is spent in the system when displaying a Postscript image using X11 on SPIN. Networking SPIN's networking support is implemented in terms of events and guards <ref> [Fiuczynski & Bershad 96] </ref>.
Reference: [Goldberg & Robson 83] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language And Its Implementation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: Programming languages provide a number of approaches to extensibility that have been successfully applied in operating systems. For example, modularity [Parnas 72] is used in Oberon [Mossen-bock 94], object-orientation <ref> [Goldberg & Robson 83] </ref> in Spring [Hamilton & Kougiouris 93], and reflection [Maes 87] in Apertos [Yokote et al. 89]. These approaches enable extensibility through the language mechanisms (for example inheritance) to modify language defined components (objects).
Reference: [Hamilton & Kougiouris 93] <author> G. Hamilton and P. Kougiouris. </author> <title> The Spring Nucleus: A Microkernel for Objects. </title> <booktitle> In Proceedings of the 1993 Summer USENIX Conference, </booktitle> <pages> pages 147-159, </pages> <address> Cincinnati, OH, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Programming languages provide a number of approaches to extensibility that have been successfully applied in operating systems. For example, modularity [Parnas 72] is used in Oberon [Mossen-bock 94], object-orientation [Goldberg & Robson 83] in Spring <ref> [Hamilton & Kougiouris 93] </ref>, and reflection [Maes 87] in Apertos [Yokote et al. 89]. These approaches enable extensibility through the language mechanisms (for example inheritance) to modify language defined components (objects).
Reference: [Heidemann & Popek 94] <author> J. Heidemann and G. Popek. </author> <title> File-System Development with Stackable Layers. </title> <journal> Communications of the ACM, </journal> <volume> 12(1) </volume> <pages> 58-89, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: All other services, such as user-space threads and virtual memory, are provided as extensions which are dynamically bound into the kernel as needed by applications. Consequently, the system's extensibility mechanism (events) must serve a broad range of purposes, including transparent interposition [Jones 93], multicast <ref> [Heidemann & Popek 94] </ref>, filtering [Ritchie 84], and conditional execution [Mogul et al. 87]. Moreover, the system must be responsive to rapid and frequent changes in configuration, since extensions may come and go with the frequency of individual applications.
Reference: [Hsieh et al. 96] <author> W. Hsieh, M. Fiuczynski, C. Garrett, S. Savage, D. Becker, and B. Bershad. </author> <title> Language Support for Extensible Systems. </title> <booktitle> In Proceedings of the First Workshop on Compiler Support for Systems Software, </booktitle> <pages> pages 127-133, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: The authorizer evaluates the request and then allows or prevents the operation. So that authority can be demonstrated, we added a new type to the language runtime that describes compilation units (interfaces and modules), as well as operations for obtaining instances of those types <ref> [Hsieh et al. 96] </ref>. The operations guarantee that the identity of a module can be obtained only inside of that module. <p> We address the interaction between early termination and safety by restricting the installation of procedures that might be terminated to those that explicitly invite termination. Handlers willing to be terminated must be explicitly declared as EPHEMERAL within the source <ref> [Hsieh et al. 96] </ref>. The expectation is that an EPHEMERAL handler returns quickly, but, if not, will be terminated. An authorizer can determine whether or not a particular handler is in fact EPHEMERAL, and refuse installation if it is not.
Reference: [Jones 93] <author> M. B. Jones. </author> <title> Interposition Agents: Transparently Interposing User Code at the System Call Interface. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 80-93, </pages> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: All other services, such as user-space threads and virtual memory, are provided as extensions which are dynamically bound into the kernel as needed by applications. Consequently, the system's extensibility mechanism (events) must serve a broad range of purposes, including transparent interposition <ref> [Jones 93] </ref>, multicast [Heidemann & Popek 94], filtering [Ritchie 84], and conditional execution [Mogul et al. 87]. Moreover, the system must be responsive to rapid and frequent changes in configuration, since extensions may come and go with the frequency of individual applications.
Reference: [Maes 87] <author> P. Maes. </author> <title> Concepts and Experiments in Computational Reflection. </title> <booktitle> In Proceedings of the Object-Oriented Programming, Systems, Languages and Applications, </booktitle> <pages> pages 147-155, </pages> <month> December </month> <year> 1987. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 22, number 12. </volume>
Reference-contexts: Programming languages provide a number of approaches to extensibility that have been successfully applied in operating systems. For example, modularity [Parnas 72] is used in Oberon [Mossen-bock 94], object-orientation [Goldberg & Robson 83] in Spring [Hamilton & Kougiouris 93], and reflection <ref> [Maes 87] </ref> in Apertos [Yokote et al. 89]. These approaches enable extensibility through the language mechanisms (for example inheritance) to modify language defined components (objects).
Reference: [Massalin & Pu 89] <author> H. Massalin and C. Pu. </author> <title> Threads and Input/Output in the Synthesis Kernel. </title> <booktitle> In Proceedings of the Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 191-201, </pages> <address> Litchfield Park, AZ, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: We use run-time code generation to build a specialized and optimized version of the dispatch routine. Our approach is similar to that taken in previous systems which have used run-time code generation for late-bound kernel code <ref> [Massalin & Pu 89] </ref>. We specialize the code to the number of arguments in each event, and unroll the dispatch loop to transform handler invocations from indirect procedure calls through a list of handlers to direct procedure calls.
Reference: [Mogul et al. 87] <author> J. Mogul, R. Rashid, and M. Accetta. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 39-51, </pages> <address> Austin, TX, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: Consequently, the system's extensibility mechanism (events) must serve a broad range of purposes, including transparent interposition [Jones 93], multicast [Heidemann & Popek 94], filtering [Ritchie 84], and conditional execution <ref> [Mogul et al. 87] </ref>. Moreover, the system must be responsive to rapid and frequent changes in configuration, since extensions may come and go with the frequency of individual applications.
Reference: [Mossenbock 94] <author> H. Mossenbock. </author> <title> Extensibility in the Oberon System. </title> <journal> Nordic Journal of Computing, </journal> <volume> 1(1) </volume> <pages> 77-93, </pages> <month> February </month> <year> 1994. </year>
Reference: [Orr et al. 93] <author> D. Orr, J. Bonn, J. Lepreau, and R. Meck-lenburg. </author> <title> Fast and Flexible Shared Libraries. </title> <booktitle> In Proceedings of the 1993 Winter USENIX Conference, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: However, this approach does not lend itself well to extending shared services since all communication must be channeled through the upcall mechanism. Some systems have used dynamic linking to address the performance problems of cross-address space IPC <ref> [Orr et al. 93, Banerji & Cohn 94] </ref>. Dynamic linking tightly couples clients to a particular service implementation and does not provide for transparent routing of requests to alternate or supplementary services.
Reference: [Pardyak & Bershad 94] <author> P. Pardyak and B. Bershad. </author> <title> A Group Structuring Mechanism for a Distributed Object-oriented Language. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 312-219, </pages> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The default handler for this event relies on a trusted default paging service provided by VM. The result handler for this event returns the logical-or of all the handler results. Previous structuring approaches have addressed the problem of handling multiple results in a similar fashion <ref> [Pardyak & Bershad 94, Cooper 85] </ref>. 2.4 Safety issues The fundamental property of the system's event model is that every procedure call can potentially be dispatched to any one of a number of handlers.
Reference: [Parnas 72] <author> D. L. Parnas. </author> <title> On the Criteria to Be Used in De-compositing Systems into Modules. </title> <journal> Communications of the ACM, </journal> <volume> 5(12) </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference-contexts: As a result, events have been limited to specific services of an operating system and have not been applied to provide a system-wide extensibility mechanism. Programming languages provide a number of approaches to extensibility that have been successfully applied in operating systems. For example, modularity <ref> [Parnas 72] </ref> is used in Oberon [Mossen-bock 94], object-orientation [Goldberg & Robson 83] in Spring [Hamilton & Kougiouris 93], and reflection [Maes 87] in Apertos [Yokote et al. 89]. These approaches enable extensibility through the language mechanisms (for example inheritance) to modify language defined components (objects).
Reference: [Patience 93] <author> S. Patience. </author> <title> Redirecting Systems Calls in Mach 3.0, An Alternative to the Emulator. </title> <booktitle> In Proceedings of the Third USENIX Mach Symposium, </booktitle> <pages> pages 57-73, </pages> <address> Santa Fe, NM, </address> <month> April </month> <year> 1993. </year>
Reference: [Reiss 90] <author> S. P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Envirnoment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Other parties, interested in learning of the occurrence, register event handlers which execute in response to a raised event. Events are generally recognized as an effective technique for implementing loosely-coupled, flexible systems in which relationships between code components must be dynamically established <ref> [Reiss 90, Sullivan & Notkin 92] </ref>. SPIN's use of events as its integration mechanism is novel in that interaction between components is entirely event-based down to the level of procedure call. <p> Dynamic linking tightly couples clients to a particular service implementation and does not provide for transparent routing of requests to alternate or supplementary services. As a result, dynamic linking does not allow multiple independent extensions to provide different parts of a service without explicit cooperation. Events <ref> [Reiss 90, Sullivan & Notkin 92] </ref> have been used in several systems including network operating systems [Bhatti & Schlichting 95], windowing systems such as X11, software engineering environments [Cagan 90], extensible applications such as Emacs, database servers [Sybase 96], and the Macintosh operating system.
Reference: [Ritchie 84] <author> D. M. Ritchie. </author> <title> A Stream Input-Output System. </title> <journal> Bell Labs Technical Journal, </journal> <volume> 63(8, Part </volume> 2):1897-1910, October 1984. 
Reference-contexts: All other services, such as user-space threads and virtual memory, are provided as extensions which are dynamically bound into the kernel as needed by applications. Consequently, the system's extensibility mechanism (events) must serve a broad range of purposes, including transparent interposition [Jones 93], multicast [Heidemann & Popek 94], filtering <ref> [Ritchie 84] </ref>, and conditional execution [Mogul et al. 87]. Moreover, the system must be responsive to rapid and frequent changes in configuration, since extensions may come and go with the frequency of individual applications.
Reference: [Sirer et al. 96] <author> E. Sirer, M. Fiuczynski, P. Pardyak, and B. Bershad. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> In Proceedings of the First Workshop on Compiler Support for Systems Software, </booktitle> <pages> pages 141-148, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Extensions are incorporated into the system through a two-step process. First, the extension's code is dynamically linked into the operating system kernel <ref> [Sirer et al. 96] </ref>. The dynamic linker resolves all outstanding unresolved references in the extension code against a collection of interfaces explicitly exported by the system.
Reference: [Sullivan & Notkin 92] <author> K. Sullivan and D. Notkin. </author> <title> Reconciling Environment Integration and Software Evolution. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 1(3) </volume> <pages> 229-268, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Other parties, interested in learning of the occurrence, register event handlers which execute in response to a raised event. Events are generally recognized as an effective technique for implementing loosely-coupled, flexible systems in which relationships between code components must be dynamically established <ref> [Reiss 90, Sullivan & Notkin 92] </ref>. SPIN's use of events as its integration mechanism is novel in that interaction between components is entirely event-based down to the level of procedure call. <p> Dynamic linking tightly couples clients to a particular service implementation and does not provide for transparent routing of requests to alternate or supplementary services. As a result, dynamic linking does not allow multiple independent extensions to provide different parts of a service without explicit cooperation. Events <ref> [Reiss 90, Sullivan & Notkin 92] </ref> have been used in several systems including network operating systems [Bhatti & Schlichting 95], windowing systems such as X11, software engineering environments [Cagan 90], extensible applications such as Emacs, database servers [Sybase 96], and the Macintosh operating system.
Reference: [Sun 95] <author> Sun Microsystems. </author> <title> The Java T M Language Specification, 1.0 beta edition, </title> <month> October </month> <year> 1995. </year>
Reference-contexts: In Section 3 we describe the implementation and performance of the event system. Finally, in Section 4 we conclude. Although this paper draws upon our experience with an extensible operating system, its ideas and mechanisms may be applicable to any software that admits dynamic restructuring <ref> [Sybase 96, Sun 95, Brockschmidt 94] </ref>. 2 Events in SPIN The SPIN kernel and its extensions are written in Modula-3, a modular, type-safe, ALGOL-like language. Extensions are incorporated into the system through a two-step process.
Reference: [Sybase 96] <author> Sybase. </author> <title> Sybase SQL Server 11. </title> <type> Technical report, </type> <institution> Sybase, Inc., </institution> <month> August </month> <year> 1996. </year> <note> http://www.sybase.com/products/system11/ sqlsrv11.html. </note>
Reference-contexts: Events [Reiss 90, Sullivan & Notkin 92] have been used in several systems including network operating systems [Bhatti & Schlichting 95], windowing systems such as X11, software engineering environments [Cagan 90], extensible applications such as Emacs, database servers <ref> [Sybase 96] </ref>, and the Macintosh operating system. Events support flexible composition by allowing an extension to be executed in response to interactions between components of the system. For example, in database systems, users can provide procedures that execute in response to certain database modification events, or triggers [Sybase 96]. <p> Emacs, database servers <ref> [Sybase 96] </ref>, and the Macintosh operating system. Events support flexible composition by allowing an extension to be executed in response to interactions between components of the system. For example, in database systems, users can provide procedures that execute in response to certain database modification events, or triggers [Sybase 96]. Under windowing systems and the Macintosh operating system, events are used primarily to offer programmers a rudimentary concurrent programming interface, without forcing them to use threads. <p> In Section 3 we describe the implementation and performance of the event system. Finally, in Section 4 we conclude. Although this paper draws upon our experience with an extensible operating system, its ideas and mechanisms may be applicable to any software that admits dynamic restructuring <ref> [Sybase 96, Sun 95, Brockschmidt 94] </ref>. 2 Events in SPIN The SPIN kernel and its extensions are written in Modula-3, a modular, type-safe, ALGOL-like language. Extensions are incorporated into the system through a two-step process.
Reference: [Thekkath & Levy 94] <author> C. A. Thekkath and H. M. Levy. </author> <title> Hardware and Software Support for Efficient Exception Handling. </title> <booktitle> In Proceedings of the Sixth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-VI), </booktitle> <pages> pages 145-156, </pages> <address> San Jose, CA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Unfortunately, the high cost of protecting system code from extension code has generally limited the utility of this approach to coarse grain system interfaces. Some sys tems have relied on fast kernel upcalls to create specialized system services with lower kernel overhead <ref> [Thekkath & Levy 94, Engler et al. 95] </ref>. However, this approach does not lend itself well to extending shared services since all communication must be channeled through the upcall mechanism.
Reference: [Vahdat et al. 94] <author> A. Vahdat, P. Ghormley, and T. Anderson. </author> <title> Efficient, Portable and Robust Extension of Operating System Functionality. </title> <type> Technical Report UCB CS-94-842, </type> <institution> University of California, Berke-ley, </institution> <month> December </month> <year> 1994. </year>
Reference: [Yokote et al. 89] <author> Y. Yokote, F. Teraoka, and M. Tokoro. </author> <title> A Reflective Architecture for an Object-Oriented Distributed Operating System. </title> <editor> In S. Cook, editor, </editor> <booktitle> Proceedings of the 1989 European Conference on Object Oriented Programming, </booktitle> <pages> pages 89-106, </pages> <address> Nottingham, </address> <month> July </month> <year> 1989. </year> <month> 12 </month>
Reference-contexts: Programming languages provide a number of approaches to extensibility that have been successfully applied in operating systems. For example, modularity [Parnas 72] is used in Oberon [Mossen-bock 94], object-orientation [Goldberg & Robson 83] in Spring [Hamilton & Kougiouris 93], and reflection [Maes 87] in Apertos <ref> [Yokote et al. 89] </ref>. These approaches enable extensibility through the language mechanisms (for example inheritance) to modify language defined components (objects).
References-found: 31

