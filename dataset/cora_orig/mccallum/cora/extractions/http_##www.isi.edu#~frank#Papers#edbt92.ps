URL: http://www.isi.edu/~frank/Papers/edbt92.ps
Refering-URL: http://www.isi.edu/~frank/Papers/papers.html
Root-URL: http://www.isi.edu
Email: fmartin,edwardo,shamg@cc.gatech.edu  
Title: Adaptive and Automated Index Selection in RDBMS  
Author: Martin R. Frank, Edward R. Omiecinski and Shamkant B. Navathe 
Address: Atlanta GA 30332-0280, USA  
Affiliation: College of Computing, Georgia Institute of Technology,  
Abstract: We present a novel approach for a tool that assists the database administrator in designing an index configuration for a relational database system. A new methodology for collecting usage statistics at run time is developed which lets the optimizer estimate query execution costs for alternative index configurations. Defining the workload specification required by existing index design tools may be very complex for a large integrated database system. Our tool automatically derives the workload statistics. These statistics are then used to efficiently compute an index configuration. Execution of a prototype of the tool against a sample database demonstrates that the proposed index configuration is reasonably close to the optimum for test query sets. 
Abstract-found: 1
Intro-found: 1
Reference: [CB74] <author> D. D. Chamberlin and R. F. Boyce. </author> <title> A Structured English Query Language. </title> <booktitle> In Proceedings of the ACM SIGMOD Workshop on Data Description, Access and Control, </booktitle> <month> May </month> <year> 1974. </year>
Reference-contexts: The cost estimate for it is c seq . Fig. 1. The Dialog between Tool and Optimizer The optimizer must provide the following functionality: presented with an SQL statement <ref> [CB74] </ref> and an index set to choose from for processing a given statement it must be able to export the index set it would choose and its cost estimate for processing the query using this set 4 : optimizer (st: statement, presented-with: index-set) ! chosen: index-set, cost: real The difference of
Reference: [FST88] <author> S. Finkelstein, M. Schkolnick, and P. Tiberio. </author> <title> Physical Database Design for Relational Databases. </title> <journal> ACM-TODS, </journal> <volume> 13(1), </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: Tools were 1 In the context of B-tree indices, not Grid files. 2 Martin R. Frank, Edward R. Omiecinski and Shamkant B. Navathe proposed which relieve some of this burden from the DBA, however even the most sophisticated ones like DBDSGN <ref> [FST88] </ref> still require the DBA to manually specify the workload. The designer has to specify the workload as a small set of weighted representative queries. <p> The general problem with this form of usage input is that the "representative" query set might not be representative of the real workload because it has to be of moderate size for complexity reasons. Finkelstein, Schkolnick and Tiberio <ref> [FST88] </ref> discuss the single-index multiple-relation index selection methodology used by the commercially available physical design tool RDT (Relational Design Tool) and its experimental prototype DBDSGN (DataBase DeSiGN Tool). The usage input consists of a weighted representative query set as in [WWS81]. <p> a given statement it must be able to export the index set it would choose and its cost estimate for processing the query using this set 4 : optimizer (st: statement, presented-with: index-set) ! chosen: index-set, cost: real The difference of this requirement as compared to the existing EXPLAIN statements <ref> [FST88] </ref> is that the combined functionality of the EXPLAIN COST and EXPLAIN PLAN statements only provides for the following: optimizer (st: statement) ! chosen: index-set, cost: real So EXPLAIN statements can only provide optimizer information based on the currently existing index configuration. <p> To our knowledge no tool was ever presented that is capable of detecting beneficial combined indices. 6 6 DBDSGN <ref> [FST88] </ref> has the option of specifying particular combined indices to be evaluated but it cannot detect such desirable combined indices itself. 14 Martin R. Frank, Edward R. Omiecinski and Shamkant B. <p> hardly be noticeable; and the response time during the critical usage peaks will be improved. 8 Comparison against DBDSGN Our research can also be used as a basis for an o*ine tool, which tailors the physical database design to a batch of queries provided to the tool as does DBDSGN <ref> [FST88] </ref>.
Reference: [HC76] <author> M. Hammer and A. Chan. </author> <title> Index Selection in a Self-Adaptive Data Base Management System. </title> <booktitle> In Proceedings of the ACM-SIGMOD Conference in Washington D.C., </booktitle> <month> June </month> <year> 1976. </year>
Reference-contexts: There are also the general problems of analytical approaches for an index selection tool as discussed above. Hammer and Chan <ref> [HC76] </ref> envision fully-automated index selection (single-index, single relation) but their approach is unrealistic for real-life databases in various ways. <p> It may be desirable to combine the results of the last several recording periods. A standard solution also used in <ref> [HC76] </ref> is to use exponential smoothing to combine the results of the last recording periods. Take index storage cost into account.
Reference: [Kin74] <author> W. F. King. </author> <title> On the Selection of Indices for a File. </title> <institution> IBM Research, </institution> <address> RJ 1341, San Jose, </address> <month> January </month> <year> 1974. </year>
Reference-contexts: The list is by no means complete. Research in the area not discussed here has been done by Palermo [Pal70], King <ref> [Kin74] </ref> and many others. Stonebraker [Sto74] constructs a probabilistic model for database activity and solves the single-index single-relation ISP for certain special cases in polynomial time.
Reference: [Pal70] <author> F. Palermo. </author> <title> A Quantitative Approach to the Selection of Secondary Indexes. </title> <institution> IBM Research, </institution> <address> RJ 730, San Jose, </address> <month> July </month> <year> 1970. </year>
Reference-contexts: The list is by no means complete. Research in the area not discussed here has been done by Palermo <ref> [Pal70] </ref>, King [Kin74] and many others. Stonebraker [Sto74] constructs a probabilistic model for database activity and solves the single-index single-relation ISP for certain special cases in polynomial time.
Reference: [Sch75] <author> M. Schkolnick. </author> <title> The Optimal Selection of Secondary Indices for Files. </title> <journal> Information Systems, </journal> <volume> 1, </volume> <year> 1975. </year>
Reference-contexts: There are also some general problems with analytical approaches to the ISP. First, substantial simplifications have to be made to derive an analytical solution. Second, the model becomes obsolete if there are changes to the query processing strategy or to other modeled aspects of the DBMS. Schkolnick <ref> [Sch75] </ref> presents a more general probabilistic model and an algorithm that solves the single-index single-relation ISP significantly faster than the naive approach. As in [Sto74] a cost function is derived that gives the expected average query execution cost depending on the index configuration.
Reference: [Sto74] <author> M. Stonebraker. </author> <title> The Choice of Partial Inversions and Combined Indices. </title> <journal> International Journal of Computer and Information Sciences, </journal> <volume> 3(2), </volume> <month> June </month> <year> 1974. </year>
Reference-contexts: The list is by no means complete. Research in the area not discussed here has been done by Palermo [Pal70], King [Kin74] and many others. Stonebraker <ref> [Sto74] </ref> constructs a probabilistic model for database activity and solves the single-index single-relation ISP for certain special cases in polynomial time. <p> Second, the model becomes obsolete if there are changes to the query processing strategy or to other modeled aspects of the DBMS. Schkolnick [Sch75] presents a more general probabilistic model and an algorithm that solves the single-index single-relation ISP significantly faster than the naive approach. As in <ref> [Sto74] </ref> a cost function is derived that gives the expected average query execution cost depending on the index configuration. An algorithm is presented that finds the optimal 2 Truly optimal only for a restricted version of the index selection problem. <p> An algorithm is presented that finds the optimal 2 Truly optimal only for a restricted version of the index selection problem. Adaptive and Automated Index Selection in RDBMS 3 index configuration provided that the target function is regular. The usage input has a similar flavor as in <ref> [Sto74] </ref>, for example the probability ff j (a) that column j is restricted to value a in a query.
Reference: [WWS81] <author> K.Y. Whang, G. Wiederhold, and D. Sagalowicz. </author> <title> Separability an Approach to Physical Database Design. </title> <booktitle> In Proceedings of the Very Large Data Base Conference in Cannes, </booktitle> <month> September </month> <year> 1981. </year>
Reference-contexts: An example for the database usage statistics used are the restrictive clauses for every query. Gathering, maintaining and evaluating such detailed statistics is clearly infeasible for an unrestricted query language. Whang et al. <ref> [WWS81] </ref> present a single-index multiple-relation index selection method based on a set of join methods that is separable. This property reduces the index selection problem to finding a locally optimal index configuration for each relation. <p> Finkelstein, Schkolnick and Tiberio [FST88] discuss the single-index multiple-relation index selection methodology used by the commercially available physical design tool RDT (Relational Design Tool) and its experimental prototype DBDSGN (DataBase DeSiGN Tool). The usage input consists of a weighted representative query set as in <ref> [WWS81] </ref>. An obstacle for its success is that the designer has to specify a set of non-intuitive parameters to reduce the run time of the tool which require insight into the internal algorithm of the tool.
References-found: 8

