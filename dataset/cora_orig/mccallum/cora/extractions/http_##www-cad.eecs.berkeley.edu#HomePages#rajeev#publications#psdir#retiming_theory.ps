URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/psdir/retiming_theory.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/rajeev/publications/publications.html
Root-URL: http://www.cs.berkeley.edu
Title: On the Optimization Power of Retiming and Resynthesis Transformations  
Author: Rajeev K. Ranjan Vigyan Singhal Fabio Somenzi Robert K. Brayton 
Abstract: Retiming and resynthesis transformations can be used for optimizing the area, power, and delay of sequential circuits. Even though this technique has been known for more than a decade, its exact optimization capability has not been formally established. We show that retiming and resynthesis can exactly implement 1-step equivalent state transition graph transformations. This result is the strongest to date. We also show how the notions of retiming and resynthesis can be moderately extended to achieve more powerful state transition graph transformations. Our work will provide theoretical foundation for practical retiming and resynthesis based optimization and verification. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Brayton, R. Rudell, A. L. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> MIS: A Multiple-Level Logic Optimization System. </title> <journal> IEEE Trans. Comput.- Aided Design Integrated Circuits, </journal> <volume> CAD-6(6):106281, </volume> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: 1 Introduction In combinational synthesis <ref> [1, 8] </ref>, the positions of the latches are fixed and the logic is optimized for area, delay, or power. In retiming [5], the latches are moved across combinational gates. Retiming can change the number of latches (and hence the area) and the minimum cycle time (i.e., the clock rate).
Reference: [2] <author> S. Hassoun and C. Ebling. </author> <title> Sequential Circuit Optimization Using Precomputation. </title> <booktitle> In Proc. IEEE/ACM Intl. Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Moreover, combinational synthesis can generate new latch locations, perhaps leading to further optimization. A sequence of retiming and combinational resynthesis steps can provide a powerful way to optimize a sequential circuit <ref> [2, 7] </ref>. Iyer et al. [3] used a retiming-reencoding method that transforms a circuit with a given encoding into a circuit with arbitrary encoding and code length, and an equivalent, but not necessarily identical state transition graph.
Reference: [3] <author> B. Iyer and M. Ciesielski. Metamorphosis: </author> <title> State Assignment by Retiming and Re-encoding. </title> <booktitle> In Proc. IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 6147, </pages> <year> 1996. </year>
Reference-contexts: Moreover, combinational synthesis can generate new latch locations, perhaps leading to further optimization. A sequence of retiming and combinational resynthesis steps can provide a powerful way to optimize a sequential circuit [2, 7]. Iyer et al. <ref> [3] </ref> used a retiming-reencoding method that transforms a circuit with a given encoding into a circuit with arbitrary encoding and code length, and an equivalent, but not necessarily identical state transition graph.
Reference: [4] <author> C. Legl, P. Vanbekbergen, and A. Wang. </author> <title> Retiming of Edge-Triggered Circuits with Mulitple Clocks and Load Enables. </title> <booktitle> In Proc. IEEE/ACM Intl. Workshop on Logic Synthesis, </booktitle> <year> 1997. </year>
Reference: [5] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1):4167, </volume> <month> Spring </month> <year> 1983. </year>
Reference-contexts: 1 Introduction In combinational synthesis [1, 8], the positions of the latches are fixed and the logic is optimized for area, delay, or power. In retiming <ref> [5] </ref>, the latches are moved across combinational gates. Retiming can change the number of latches (and hence the area) and the minimum cycle time (i.e., the clock rate). <p> Retiming: Retiming is the operation of assigning lag values to each combinational gate which corresponds to the number of latches moved from the outputs to the inputs of the gate (a negative lag value indicates the latch movement from the inputs to the outputs) <ref> [5] </ref>. State transition graph (STG): An STG is a labeled directed graph G (V; ~ E), where each vertex v 2 V corresponds to a state s, defined by the values of the latches, of the circuit. <p> Definition 5 Two STGs G 1 and G 2 are 1STEP EQUIVA LENT if one can be obtained from other by a sequence of 1-step equivalent transformations. Note that retiming sometimes results in transient states. In the presence of such states we use the notion of sufficiently old configuration <ref> [5] </ref> or delayed designs [9] and ignore them for the purpose of analysis. The following theorem follows by applying induction on Theorem 4.1.
Reference: [6] <author> S. Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, </institution> <month> Nov. </month> <year> 1990. </year> <note> Memorandum No. UCB/ERL M90/115. </note>
Reference-contexts: However, structural analysis gives only a local view of the transformation. A more global approach is to analyze the related STG transformations since there could be many circuit implementations of a given STG. Ma-lik <ref> [6] </ref> characterizes the optimization capability of retiming and resynthesis by relating them to STG transformations. In particular, he states a certain subset of STG transformations (non-CP) can be implemented using retiming and resynthesis. We prove the above classification result to be incorrect by two examples. <p> The rest of the paper is organized as follows. We present preliminary material and establish our terminology in Section 2. In Section 3 we present the exposition on the optimization power as given in <ref> [6] </ref>. Section 4 forms the core of the paper. We indicate the mistake in the exposition using counter-examples. We also correct and extend the results on the relationship between retiming and resynthesis steps and related STG transformations. <p> An edge e ij 2 ~ E with label a connects v i to v j if the circuit transitions from state s i to s j on primary input a. 3 Malik's Results In this section we present the results given by Malik <ref> [6] </ref> 1 . The two theorems presented here consider the cases of identical and distinct STGs. The following theorem asserts the state encoding power of retiming and resynthesis operations. <p> However, as shown in Figure 6 we can implement splitting of states using retiming and resynthesis. Next consider Malik's examples of non-CP <ref> [6] </ref> shown in Figure 12. The merger of states s 11 and s 12 in Figure 12a is not a valid 2-way merge because states s 11 with a self-loop. and s 12 are not 1-step equivalent. In Figure 12b, the transformation involves a switch.
Reference: [7] <author> S. Malik, E. M. Sentovich, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimization of Sequential Networks with Combinational Techniques. </title> <journal> IEEE Trans. Comput.-Aided Design Integrated Circuits, </journal> <volume> 10(1):7484, </volume> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: Moreover, combinational synthesis can generate new latch locations, perhaps leading to further optimization. A sequence of retiming and combinational resynthesis steps can provide a powerful way to optimize a sequential circuit <ref> [2, 7] </ref>. Iyer et al. [3] used a retiming-reencoding method that transforms a circuit with a given encoding into a circuit with arbitrary encoding and code length, and an equivalent, but not necessarily identical state transition graph. <p> G 1 may be modified to obtain G 2 through a series of three basic transformations. These transformations may create states that are equivalent to existing states, merge states that are equivalent to each other, and modify state transitions to go to states 1 These results partially appeared in <ref> [7] </ref> as well. equivalent to the original destinations.
Reference: [8] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> SIS: A System for Sequential Circuit Synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In combinational synthesis <ref> [1, 8] </ref>, the positions of the latches are fixed and the logic is optimized for area, delay, or power. In retiming [5], the latches are moved across combinational gates. Retiming can change the number of latches (and hence the area) and the minimum cycle time (i.e., the clock rate).
Reference: [9] <author> V. Singhal, C. Pixley, R. L. Rudell, and R. K. Bray-ton. </author> <title> The Validity of Retiming Sequential Circuits. </title> <booktitle> In Proc. of the IEEE/ACM Design Automation Conf., </booktitle> <pages> pages 31621, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Note that retiming sometimes results in transient states. In the presence of such states we use the notion of sufficiently old configuration [5] or delayed designs <ref> [9] </ref> and ignore them for the purpose of analysis. The following theorem follows by applying induction on Theorem 4.1. <p> Only partial STG is shown in a. The outputs are shown in boxes. retiming across a gate is equivalent to sequence of retiming moves across the primitive elements constituting the gate. Note that this notion is similar to the atomic retiming moves considered by Singhal et al. <ref> [9] </ref> (NAND and fanout gate being equivalent to justifiable and non-justifiable element respectively). Lemma 4.2 The basic retiming operations as shown in Figure 7 result in STG transformations that are 1STEP EQUIV ALENT. Proof: Consider the forward and backward retiming operations across the NAND gate.
Reference: [10] <author> H. Zhou, V. Singhal, and A. Aziz. </author> <title> How Powerful is Re-timing? In Proc. </title> <booktitle> IEEE/ACM Intl. Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1998. </year> <note> to appear. </note>
Reference-contexts: The other counter-example is shown in Figure 4 <ref> [10] </ref>. The original circuit with the associated state transition graph G 1 is shown on the left. A sequentially equivalent circuit is shown on the right with the corresponding state transition graph G 2 . <p> A sequentially equivalent circuit is shown on the right with the corresponding state transition graph G 2 . It can be proven that neither the latches can be retimed nor can the logic be optimized indicating that a sequence of retiming and resynthesis moves cannot make this circuit transformation <ref> [10] </ref>. However, Figure 5 shows a sequence of CP transformations which transform G 1 into G 2 contradicting Theorem 3.2. 4.1.2 Implementing Splitting of a State We modify the transformations given in the proof for Theorem 3.2, to handle the problem shown in Figure 3.
References-found: 10

