URL: http://www.idt.unit.no/~epos/Papers/vd.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Change-oriented version descriptions in EPOS  
Author: Bjtrn Gulla, Even-Andre Karlsson and Dashing Yeh 
Abstract: In EPOS, 1 software configuration management is based on the change-oriented versioning model. As part of a configured system specification, a version description is used to select the desired versions of different components that constitute the product. Furthermore version descriptions are used to specify which versions are affected by a certain change. For large software systems comprising many variants, building a consistent configuration meeting specified requirements is not an easy task. In this paper we propose a set of version description mechanisms and exemplify their use. An abstract description specifying desired properties and functional requirements is expanded using validities characterizing properties of versions, preferences and defaults. We believe that the proposed mechanisms provide simpler, more intuitive and more compact descriptions of versions of large-scale software systems than conventional tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rochkind, M.J.: </author> <title> 'The Source Code Control System', </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> December </month> <year> 1975, </year> <month> SE-1(4), </month> <pages> pp. 364-370. </pages>
Reference-contexts: The paper was first received on 30th May 1990 and in revised form 27th March 1991. 1 EPOS (Expert System for Program and System Development) is supported by the Royal Norwegian Council for Scientific and Industrial Research (NTNF) through grant ED0224.18457. ments (SCCS <ref> [1] </ref> and conditional compilation): * selection based on property: in UNIX a specific version of a component is usually selected by a combination of a SCCS revision number and switches for conditional compilation.
Reference: [2] <author> Holager, P.: </author> <title> 'Elements of the Design of a Change Oriented Configuration Management Tool'. </title> <type> Technical Report STF44-A88023, </type> <institution> ELAB, SINTEF, Trondheim, Nor-way, </institution> <month> February </month> <year> 1988. </year>
Reference-contexts: In EPOS, we provide the user with CM facilities to control and maintain evolving versioned products or configurations. In the EPOS CM system we try to cover all the aspects of version control listed above. This is accomplished by the change-oriented versioning (COV) model <ref> [2, 3] </ref> COV can be most easily understood as an extension and generalization of conditional compilation. COV can be considered to be dual to conventional component-based versioning models, which we will call version-oriented versioning (VOV).
Reference: [3] <author> Lie, A., Conradi, R., Didriksen, T.M., Karls-son, E.A., Hallsteinsen, S.O., and Holager, P.: </author> <title> 'Change Oriented Versioning in a Software Engineering Database'. </title> <editor> in Tichy, W.F. (Ed.): </editor> <booktitle> Proc. 2nd Int. Workshop on Software Configuration Management, </booktitle> <address> Princeton, </address> <note> (see also ACM SIGSOFT Software Engineering Notes, 17(7), </note> <month> November </month> <year> 1989, </year> <pages> pp. 56-65). </pages>
Reference-contexts: In EPOS, we provide the user with CM facilities to control and maintain evolving versioned products or configurations. In the EPOS CM system we try to cover all the aspects of version control listed above. This is accomplished by the change-oriented versioning (COV) model <ref> [2, 3] </ref> COV can be most easily understood as an extension and generalization of conditional compilation. COV can be considered to be dual to conventional component-based versioning models, which we will call version-oriented versioning (VOV).
Reference: [4] <author> Lie, A.: </author> <title> 'Versioning in Software Engineering Databases'. </title> <type> PhD Thesis, Technical Report 1/90, </type> <address> DCST, NTH, Trondheim, Nor-way, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: COV unifies conditional compilation and revision changes, and keeps the versioning largely orthogonal to the module structure. 2 Change-oriented versioning In this Section, we provide a short account of COV. Readers should see Reference <ref> [4] </ref> for a more complete description. Note that most COV concepts may be more easily understood if they are considered as sets, although they are represented as Boolean expressions. In COV, the variation of a product is described by a set of options. <p> We are also working on a partly automatic tool for transferring systems from traditional SCCS and conditional compilation-based development to be put under change-oriented versioning. A first version of a fully COV software engineering database (EPOSDB) has also been developed <ref> [4, 10] </ref>. 9 Acknowledgments The authors would like to thank the other members of the EPOS group, especially Reidar Con-radi, for discussions and critical reading of drafts of this article. We would also thank the referees for their constructive comments and suggestions.
Reference: [5] <author> Belady, L.A., and Merlin, </author> <title> P.M.: 'Evolving Parts and Relations | A Model of System Families'. </title> <type> Technical Report RC-6677, </type> <institution> IBM T.J.Watson Research Center, </institution> <address> Yorktown Heights, NY, </address> <year> 1977, </year> <note> (see also Lehman, </note> <editor> M.M., and Belady, L.A. (Eds.): </editor> <title> 'Program Evolution | Process of Software Change', </title> <publisher> Academic Press, </publisher> <year> 1985, </year> <pages> pp. 221-236). </pages>
Reference-contexts: SCCS also lacks the concept of configuration descriptions. 7.2 Related Work In an early work, Belady and Merlin <ref> [5] </ref> attempt to devise a formal model for evolving software systems, and they discuss how some actual systems used within IBM can be viewed as conforming to this model.
Reference: [6] <author> Goldstein, I.P., and Bobrow, D.G.: </author> <title> 'A Layered Approach to Software Design'. </title> <type> Report CSL-80-5, </type> <institution> Xerox Palo Alto Research Center, California, </institution> <note> (see also Barstow, D.R., </note> <editor> Shrobe, S.E., and Sandewall, E. (Eds.): </editor> <title> 'Interactive Programming Environments', </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1984, </year> <pages> pp. 387-413). </pages>
Reference-contexts: In this paper, we show how our approach also supports the development phase, including the creation of relations to describe useful configurations. Not only functional requirements, but also other properties (denoted by validities) may be used to describe the desired configuration. In the PIE system <ref> [6] </ref>, a layered network is used to allow alternative software designs to co-exist. Layers identify functional changes and may span several modules. A layer is either an alternative of another layers (placed in the same context) or independently selectable.
Reference: [7] <author> Kruskal, V.: </author> <title> 'Managing Multi-Version Programs with an Editor'. </title> <journal> IBM Journal of Research and Development, </journal> <month> January </month> <year> 1984, </year> <pages> 28(1), pp. 74-81. </pages>
Reference-contexts: A layer is either an alternative of another layers (placed in the same context) or independently selectable. However since the ver-sioning granularity is Smalltalk methods, some of the advantages of combining individual functional changes are lost. The work reported in References <ref> [7] </ref> and [8] is primarily concerned with editing and maintaining individual multi-version text files. Concerning versioning models, the papers contains notions very similar to those in COV.
Reference: [8] <author> Sarnak, N., Bernstein, N., and Kruskal, V.: </author> <title> 'Creation and maintenance of multiple versions'. </title> <editor> in Winkler, J.F.H. (Ed.): </editor> <booktitle> 'Proc. ACM Workshop on Software Version and Configuration Control', </booktitle> <address> Grassau, Germany, </address> <month> January </month> <year> 1988, </year> <title> B.G.Teubner Verlag, </title> <publisher> Stuttgart, </publisher> <pages> pp. 1-20. </pages>
Reference-contexts: A layer is either an alternative of another layers (placed in the same context) or independently selectable. However since the ver-sioning granularity is Smalltalk methods, some of the advantages of combining individual functional changes are lost. The work reported in References [7] and <ref> [8] </ref> is primarily concerned with editing and maintaining individual multi-version text files. Concerning versioning models, the papers contains notions very similar to those in COV.
Reference: [9] <author> Belkhatir, N., and Estublier, J.: </author> <title> 'Experience with a data base of programs'. </title> <editor> in Henderson, P.B. (Ed.): </editor> <booktitle> 'Proc. 2nd ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments', </booktitle> <address> Palo Alto, </address> <note> (see also ACM SIGPLAN Notices, </note> <month> January </month> <year> 1987, </year> <pages> 22(1), pp. 84-91). </pages>
Reference-contexts: There is also a notion comparable to ambition, which is called an edit set, but no validity concept. In their approach dimensions seem to be used to classify a set of existing versions, as opposed to our options which describe a space of potential versions. Adele <ref> [9] </ref> is a CM system with a classic VOV model. A configuration is specified using selection predicates and constraints over attributes, which are attached to versions of components.
Reference: [10] <author> Odberg, E., Munch, B., Gulla, B., and Bratsberg, </author> <title> S.E.: 'Preliminary design of EPOSDB II'. </title> <address> DCST, NTH, Trondheim, Nor-way, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: We are also working on a partly automatic tool for transferring systems from traditional SCCS and conditional compilation-based development to be put under change-oriented versioning. A first version of a fully COV software engineering database (EPOSDB) has also been developed <ref> [4, 10] </ref>. 9 Acknowledgments The authors would like to thank the other members of the EPOS group, especially Reidar Con-radi, for discussions and critical reading of drafts of this article. We would also thank the referees for their constructive comments and suggestions.
References-found: 10

