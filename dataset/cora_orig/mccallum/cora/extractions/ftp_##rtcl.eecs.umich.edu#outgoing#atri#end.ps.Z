URL: ftp://rtcl.eecs.umich.edu/outgoing/atri/end.ps.Z
Refering-URL: http://www.eecs.umich.edu/~atri/
Root-URL: http://www.cs.umich.edu
Email: fatri,ashish,kgshing@eecs.umich.edu  
Phone: 313-763-0391 (voice); 313-763-4617 (fax)  
Title: The END: Exploring QoS Issues in Adapter Design via an Emulated Network Device  
Author: Atri Indiresan, Ashish Mehra, and Kang G. Shin 
Keyword: Index terms Quality of service, network adapter design, device emulation, host interfaces, performance analysis.  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Real-time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: A new class of applications with stringent quality of service (QoS) requirements on communication (e.g., bandwidth, delay) are being made possible by the advent of high-speed networks. End-to-end communication performance is largely determined by a variety of factors, such as the underlying network technology, the end-host operating system, and the interface between the host and the network. As network speeds increase, the performance bottleneck tends to shift to the end host, especially to the hardware/software components of the communication subsystem. In this paper, we focus on the design of one such component, the network adapter, and how it interacts with the host communication software to provide QoS guarantees. In particular, we explore QoS issues in adapter design via an Emulated Network Device (END) that interfaces to a real communication protocol stack. The END can emulate all the operations required of a network adapter, without interfacing to a real network. This allows us to model the behavior of a host and its interaction with a network model of our choice. In general, network device emulation permits designers to experiment with network adapter and host interface design, including the partitioning of functionality between the host communication software and the hardware/firmware on the network adapter, before actually developing a prototype implementation of the adapter. More importantly, the experimentation can be carried out on the target host platform, thus accounting for software overheads and host architectural features that influence communication performance. We present the design and implementation of END and demonstrate its utility by studying the performance of our implementation of real-time channels, a model for provision of QoS guarantees in packet-switched networks. The work reported in this paper was supported in part by the National Science Foundation under Grant MIP-9203895 and the Office of Naval Research under Grants N00014-91-J-1115 and N00014-94-1-0229. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. M. Aras, J. F. Kurose, D. S. Reeves, and H. Schulzrinne, </author> <title> "Real-time communication in packet-switched networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 122-139, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The QoS requirements of these applications are typically defined in terms of a desired minimum bandwidth and maximum delay from the network; additional requirements on delay jitter and packet loss may also be specified <ref> [1] </ref>. In general, these applications require high data transfer throughput and low, bounded, end-to-end delay. A high-speed network by itself cannot guarantee high application-level throughput and/or bounded data transfer delays. In addition, precise characterization and control over system overheads in the end-host communication subsystem is required. <p> While we have considered real-time channels, our emulation framework can be employed when studying other models for guaranteed-QoS communication <ref> [1] </ref>. Our work relates to and builds upon the following areas of research. CPU and link bandwidth management: Provision of QoS guarantees necessitates support within end hosts to manage communication resources such as CPU and link bandwidth required to process and transmit application messages.
Reference: [2] <author> K. K. Ramakrishnan, </author> <title> "Performance considerations in designing network interfaces," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 203-219, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: More importantly, the experimentation can be performed on the target host platform, thus accounting for software overheads and host architectural features (such as bus transfer bandwidth and contention) that influence communication performance. Since most network interfaces are on the systems' I/O bus rather than the private memory bus <ref> [2] </ref>, END is implemented in a similar configuration, so as to generate the same overheads as a real adapter. This is very important when providing support for QoS guarantees, which typically involves management of communication resources such as CPU bandwidth, network bandwidth, and buffers. <p> Transmission and reception to/from host memory is accomplished via interaction between all of these components, as discussed below. Note that most network adapters are accessed by the host via the system I/O bus <ref> [2] </ref>. Network adapters can vary significantly in complexity depending on the desired performance goals of the design and the underlying network technology. The functionality provided by the above-mentioned architectural components can be quite complex. <p> In addition to modeling the source/sink behavior of the network, our approach captures significantly more details of adapter design and interaction with the protocol stack. Communication subsystem design and performance: Several researchers have studied the issues affecting the design and performance of network adapters <ref> [2, 16-18] </ref>, and communication subsystems in general [19, 20]. All of these efforts are geared towards best-effort adapters with the primary goal of maximizing data transfer throughput. In contrast, we focus on adapter design to provide QoS guarantees to applications.
Reference: [3] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 10, </volume> <pages> pp. 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: We present the design and implementation of END, and demonstrate its utility by studying the performance of our implementation of real-time channels <ref> [3] </ref>, a model for provision of QoS guarantees in packet-switched networks. We study the performance of real-time and best effort traffic using END, for a variety of adapter configurations. <p> In addition to basic operating system services like process management, interrupt handling etc., it has a configurable protocol stack that includes datagram and RPC services, as well has session management and run-time support for real-time channels <ref> [3] </ref>. It features a process-per-channel model that associates a channel handler process with each established channel. These processes inherit the priorities (deadlines or fixed priority) of their messages. <p> In the experiments that follow, we selected the host configuration that was most favorable to the performance of real-time channels <ref> [3] </ref>. The real-time channel handlers were scheduled by the deadlines they inherited from their messages. Preemption was cooperative, with any handler processing up to four packets before yielding the CPU. <p> The traffic is a set of real-time channels <ref> [3] </ref> specified by their maximum message size, S max , and the minimum interarrival time between messages, I min . The average data rate is given by R max , but short term bursts of up to B max messages may occur.
Reference: [4] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Structuring communication software for quality-of-service guarantees," </title> <booktitle> in Proc. of 17th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: Note that the host can exercise complete control over packet transmission order when the pipeline depth (the number of packets outstanding on the adapter) is one <ref> [4] </ref>. The queuing policy used by the adapter is relevant whenever the host pipelines transmission requests. Even if the host sends packets to the adapter in a QoS sensitive order, subsequent arrival 4 of high priority data may require transmission to be reordered on the adapter. <p> We have completed the implementation of the emulation of data transmission. Data reception will be similar, with some differences highlighted in the description of the implementation which follows. 4.1 Host/Network Processor The host/network processor has been described in detail in <ref> [4] </ref>. In brief, it runs a derivative of x-kernel 3.1 [8], an operating system designed for network services. <p> We used END in conjunction with our host operating system to evaluate different system configurations. We conclude this section with a discussion on the general applicability of the results and the portability of END. 5.1 Host Configuration In earlier work <ref> [4] </ref>, we established the necessity of QoS-sensitive protocol processing via CPU scheduling. In the experiments that follow, we selected the host configuration that was most favorable to the performance of real-time channels [3]. The real-time channel handlers were scheduled by the deadlines they inherited from their messages. <p> Preemption was cooperative, with any handler processing up to four packets before yielding the CPU. Link scheduling decisions were made by calling a scheduling function either by the channel handler, or by the transmission-complete interrupt service routine (Option 1 in [10]). 5.2 Experimental Configuration In the experiments reported in <ref> [4] </ref>, the device emulation was quite simple: The host computed the delay of the message, the emulator accepted the delay request, and interrupted the host on completion of the delay. <p> We have examined the issues involved in communication resource management [10] and implemented a QoS-sensitive communication subsystem architecture providing such resource management <ref> [4] </ref>. The issue of making protocol processing inside hosts predictable has been studied in [11]. Simulation-based evaluation: Performance evaluation via simulation can be conducted at various levels of detail, and hence, accuracy.
Reference: [5] <author> R. C. Bedichek, "Talisman: </author> <title> Fast and accurate multicomputer simulation," </title> <booktitle> in Proceedings of Sigmetrics 95/Performance 95, </booktitle> <pages> pp. 14-24, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: However, such models are usually simplified to make the analysis tractable, and they rarely account for system overheads of interrupt handling, context switches, etc., encountered in practice. Another feasible technique is simulation, which has several significant advantages <ref> [5] </ref>. Since a simulator is built in software, it can be readily modified and augmented to test new features and interfaces. Simulators are usually easier to build and cheaper than real systems. They can model "ideal" systems that are impossible to build, e.g., an infinitely fast network. <p> Simulation-based evaluation: Performance evaluation via simulation can be conducted at various levels of detail, and hence, accuracy. Recently, significant attention has been given to accurate, 20 low-level simulation to study machine architectures while capturing operating system overheads typically encountered in real systems <ref> [5, 12] </ref>. Other efforts have focused on protocol-level simulation with the ability to run the actual protocol stack during simulation [6], and network-level simulation with a focus on routing and end-to-end protocol performance [13, 14]. Most relevant to our work is architecture-level and protocol-level simulation.
Reference: [6] <author> L. S. Brakmo and L. L. Peterson, </author> <title> "Experiences with network simulation," </title> <booktitle> in Proceedings of ACM Sigmetrics 96, </booktitle> <pages> pp. 80-90, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: They can model "ideal" systems that are impossible to build, e.g., an infinitely fast network. However, a simulator is typically an artificial device, i.e., no real system components are involved. Exceptions to this do exist in approaches that execute actual software under control of the simulator, as in <ref> [6] </ref>. However, while sufficient to study the performance of communication protocols, such approaches are not applicable when hardware components (such as the system I/O bus, caches, device interrupts) must also be considered and hardware-software concurrency captured in the evaluation without excessive intrusion. <p> Recently, significant attention has been given to accurate, 20 low-level simulation to study machine architectures while capturing operating system overheads typically encountered in real systems [5, 12]. Other efforts have focused on protocol-level simulation with the ability to run the actual protocol stack during simulation <ref> [6] </ref>, and network-level simulation with a focus on routing and end-to-end protocol performance [13, 14]. Most relevant to our work is architecture-level and protocol-level simulation.
Reference: [7] <author> A. Gokhale and D. C. Schmidt, </author> <title> "Measuring the performance of communication middleware on high-speed networks," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: We note that at least one other study has evaluated protocol performance using the I/O bus of a multiprocessor host as a high-speed network <ref> [7] </ref>. 4 Implementation A substantial part of the emulator is determined by the platform on which it is implemented. In particular, the host processor (s), the I/O bus and the operating system are typically fixed.
Reference: [8] <author> N. C. Hutchinson and L. L. Peterson, </author> <title> "The x-Kernel: An architecture for implementing network protocols," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 17, no. 1, </volume> <pages> pp. 1-13, </pages> <month> January </month> <year> 1991. </year> <month> 22 </month>
Reference-contexts: Data reception will be similar, with some differences highlighted in the description of the implementation which follows. 4.1 Host/Network Processor The host/network processor has been described in detail in [4]. In brief, it runs a derivative of x-kernel 3.1 <ref> [8] </ref>, an operating system designed for network services. In addition to basic operating system services like process management, interrupt handling etc., it has a configurable protocol stack that includes datagram and RPC services, as well has session management and run-time support for real-time channels [3].
Reference: [9] <author> S. Han and K. G. Shin, </author> <title> "A non-intrusive distributed monitoring support in fault injection experiments," </title> <booktitle> in IEEE International Workshop on Evaluation Techniques for Dependable Systems, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: It reads a high resolution clock in each cycle, compares it to the expiration time of the entry at the head of the queue, and issues a completion notification when the time has passed. Time measurements themselves are provided by the VME StopWatch <ref> [9] </ref> 3 . It has a high resolution timer (25ns). The clock itself is a 24-bit value, and wraps around about every 0.4s.
Reference: [10] <author> A. Mehra, A. Indiresan, and K. Shin, </author> <title> "Resource management for real-time communication: Making theory meet practice," </title> <booktitle> in Proc. of 2nd Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Preemption was cooperative, with any handler processing up to four packets before yielding the CPU. Link scheduling decisions were made by calling a scheduling function either by the channel handler, or by the transmission-complete interrupt service routine (Option 1 in <ref> [10] </ref>). 5.2 Experimental Configuration In the experiments reported in [4], the device emulation was quite simple: The host computed the delay of the message, the emulator accepted the delay request, and interrupted the host on completion of the delay. <p> The average data rate is given by R max , but short term bursts of up to B max messages may occur. The real-time channels were established using the analysis and techniques presented in <ref> [10] </ref>. Using EDD scheduling for protocol processing and link scheduling, all real-time traffic is guaranteed to meet its deadline. All messages are 60KB, and the maximum packet size is configured as 4KB. Traffic on channels 0 and 1 is bursty, while channel 2 has strictly periodic real-time (RT) traffic. <p> CPU and link bandwidth management: Provision of QoS guarantees necessitates support within end hosts to manage communication resources such as CPU and link bandwidth required to process and transmit application messages. We have examined the issues involved in communication resource management <ref> [10] </ref> and implemented a QoS-sensitive communication subsystem architecture providing such resource management [4]. The issue of making protocol processing inside hosts predictable has been studied in [11]. Simulation-based evaluation: Performance evaluation via simulation can be conducted at various levels of detail, and hence, accuracy. <p> In contrast, we focus on adapter design to provide QoS guarantees to applications. Modeling of real-time operating systems: Several researchers have developed accurate models for real-time/multimedia operating systems [21, 22]. We have studied how to bridge the gap between theory and practice in resource management for real-time communication <ref> [10] </ref>. This is relevant to the present work since END must implement accurate models of QoS-enabled network adapters that handle time-sensitive data. I/O device modeling: Other researchers have studied the issues involved in modeling disks [23].
Reference: [11] <author> C. Lee, K. Yoshida, C. Mercer, and R. Rajkumar, </author> <title> "Predictable communication protocol processing in real-time mach," </title> <booktitle> in Proc. 2nd Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 220-229, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: We have examined the issues involved in communication resource management [10] and implemented a QoS-sensitive communication subsystem architecture providing such resource management [4]. The issue of making protocol processing inside hosts predictable has been studied in <ref> [11] </ref>. Simulation-based evaluation: Performance evaluation via simulation can be conducted at various levels of detail, and hence, accuracy. Recently, significant attention has been given to accurate, 20 low-level simulation to study machine architectures while capturing operating system overheads typically encountered in real systems [5, 12].
Reference: [12] <author> E. Witchell and M. Rosenblum, "Embra: </author> <title> Fast and flexible machine simulation," </title> <booktitle> in Proceedings of ACM Sigmetrics 96, </booktitle> <pages> pp. 68-79, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Simulation-based evaluation: Performance evaluation via simulation can be conducted at various levels of detail, and hence, accuracy. Recently, significant attention has been given to accurate, 20 low-level simulation to study machine architectures while capturing operating system overheads typically encountered in real systems <ref> [5, 12] </ref>. Other efforts have focused on protocol-level simulation with the ability to run the actual protocol stack during simulation [6], and network-level simulation with a focus on routing and end-to-end protocol performance [13, 14]. Most relevant to our work is architecture-level and protocol-level simulation.
Reference: [13] <author> S. Keshav, </author> <title> "REAL : A network simulator," </title> <type> UCB CS Tech Report 88/472, </type> <institution> University of Cali-fornia, Berkeley, </institution> <month> December </month> <year> 1988. </year>
Reference-contexts: Other efforts have focused on protocol-level simulation with the ability to run the actual protocol stack during simulation [6], and network-level simulation with a focus on routing and end-to-end protocol performance <ref> [13, 14] </ref>. Most relevant to our work is architecture-level and protocol-level simulation. Since END executes on its own processor concurrently with the host, it avoids any intrusion on the host operating system (including the protocol stack) executing on the host CPU.
Reference: [14] <author> S. McCanne and S. Floyd. </author> <title> NS (Network Simulator), </title> <note> 1995. Available via http://www-nrg.ee.lbl.gov/ns. </note>
Reference-contexts: Other efforts have focused on protocol-level simulation with the ability to run the actual protocol stack during simulation [6], and network-level simulation with a focus on routing and end-to-end protocol performance <ref> [13, 14] </ref>. Most relevant to our work is architecture-level and protocol-level simulation. Since END executes on its own processor concurrently with the host, it avoids any intrusion on the host operating system (including the protocol stack) executing on the host CPU.
Reference: [15] <author> M. Bjorkman and P. Gunningberg, </author> <title> "Locking effects in multiprocessor implementations of protocols," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 74-83, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Network adapter as source/sink of data: Network adapters have been modeled as simple data sources and sinks for parallel protocol implementations <ref> [15] </ref>. Interestingly, the adapter models are executed on a separate processor within the host. In addition to modeling the source/sink behavior of the network, our approach captures significantly more details of adapter design and interaction with the protocol stack.
Reference: [16] <author> C. Dalton, G. Watson, D. Banks, C. Calamvokis, A. Edwards, and J. Lumley, </author> <title> "Afterburner," </title> <journal> IEEE Network Magazine, </journal> <pages> pp. 36-43, </pages> <month> July </month> <year> 1993. </year>
Reference: [17] <author> P. A. Steenkiste, </author> <title> "A systematic approach to host interface design for high-speed networks," </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 47-57, </pages> <month> March </month> <year> 1994. </year>
Reference: [18] <author> P. Druschel, L. L. Peterson, and B. S. Davie, </author> <title> "Experiences with a high-speed network adaptor: A software perspective," </title> <booktitle> in Proc. of ACM SIGCOMM, </booktitle> <pages> pp. 2-13, </pages> <address> London, UK, </address> <month> October </month> <year> 1994. </year>
Reference: [19] <author> P. Druschel, M. Abbott, M. Pagels, and L. Peterson, </author> <title> "Network subsystem design," </title> <journal> IEEE Network Magazine, </journal> <pages> pp. 8-17, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Communication subsystem design and performance: Several researchers have studied the issues affecting the design and performance of network adapters [2, 16-18], and communication subsystems in general <ref> [19, 20] </ref>. All of these efforts are geared towards best-effort adapters with the primary goal of maximizing data transfer throughput. In contrast, we focus on adapter design to provide QoS guarantees to applications. Modeling of real-time operating systems: Several researchers have developed accurate models for real-time/multimedia operating systems [21, 22].
Reference: [20] <author> D. C. Schmidt and T. Suda, </author> <title> "Transport system architecture services for high-performance communications systems," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 11, no. 4, </volume> <pages> pp. 489-506, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Communication subsystem design and performance: Several researchers have studied the issues affecting the design and performance of network adapters [2, 16-18], and communication subsystems in general <ref> [19, 20] </ref>. All of these efforts are geared towards best-effort adapters with the primary goal of maximizing data transfer throughput. In contrast, we focus on adapter design to provide QoS guarantees to applications. Modeling of real-time operating systems: Several researchers have developed accurate models for real-time/multimedia operating systems [21, 22].
Reference: [21] <author> K. A. Kettler, D. I. Katcher, and J. K. Strosnider, </author> <title> "A modeling methodology for real-time/multimedia operating systems," </title> <booktitle> in Proc. of the Real-Time Technology and Applications Symposium, </booktitle> <pages> pp. 15-26, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: All of these efforts are geared towards best-effort adapters with the primary goal of maximizing data transfer throughput. In contrast, we focus on adapter design to provide QoS guarantees to applications. Modeling of real-time operating systems: Several researchers have developed accurate models for real-time/multimedia operating systems <ref> [21, 22] </ref>. We have studied how to bridge the gap between theory and practice in resource management for real-time communication [10]. This is relevant to the present work since END must implement accurate models of QoS-enabled network adapters that handle time-sensitive data.
Reference: [22] <author> A. Burns, K. Tindell, and A. Wellings, </author> <title> "Effectice analysis for engineering real-time fixed priority schedulers," </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> vol. 21, no. 5, </volume> <pages> pp. 475-480, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: All of these efforts are geared towards best-effort adapters with the primary goal of maximizing data transfer throughput. In contrast, we focus on adapter design to provide QoS guarantees to applications. Modeling of real-time operating systems: Several researchers have developed accurate models for real-time/multimedia operating systems <ref> [21, 22] </ref>. We have studied how to bridge the gap between theory and practice in resource management for real-time communication [10]. This is relevant to the present work since END must implement accurate models of QoS-enabled network adapters that handle time-sensitive data.
Reference: [23] <author> B. L. Worthington, G. R. Ganger, and Y. N. Patt, </author> <title> "On-line extraction of SCSI disk drive parameters," </title> <booktitle> in Proceedings of Sigmetrics 95/Performance 95, </booktitle> <pages> pp. 146-156, </pages> <month> May </month> <year> 1995. </year> <month> 23 </month>
Reference-contexts: This is relevant to the present work since END must implement accurate models of QoS-enabled network adapters that handle time-sensitive data. I/O device modeling: Other researchers have studied the issues involved in modeling disks <ref> [23] </ref>. While the focus of our work is network device emulation, our emulation framework can be extended to emulate disks and interact with the file system layer in the operating system.
References-found: 23

