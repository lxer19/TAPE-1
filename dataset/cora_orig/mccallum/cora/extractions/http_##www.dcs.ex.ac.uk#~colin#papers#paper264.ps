URL: http://www.dcs.ex.ac.uk/~colin/papers/paper264.ps
Refering-URL: http://www.dcs.ex.ac.uk/~colin/pages/research.html
Root-URL: http://www.dcs.ex.ac.uk
Title: A robot programming environment based on free-form CAD modelling.  
Author: C. G. Johnson D. Marsh 
Address: Library 219 Colinton Road  Road Edinburgh, EH14 1DJ Exeter, EX4 4PT  
Affiliation: Department of Computer Science Department of Mathematics University of Exeter Napier University The Old  Prince of Wales  
Abstract: This paper presents the mathematical and computational foundations of a robot programming environment embedded within a CAD system. The key ideas behind this system is that it will work offline, it will allow a high-level of task abstraction and it will be usable by designers and engineers who have a good knowledge of the desired task but only a basic grounding in robot engineering. In this paper we begin with a discussion of how robot workspace can be modelled using free-form CAD design concepts. The core of the paper is concerned with the application of these to well known problems of collision detection and path planning, showing how algorithms developed in CAD can be applied to these new problem-areas in an efficient way. In the closing section we use these ideas to consider the development of new, graphically-based, robot programming systems. Much work has been carried out on designing systems which attempt to simplify the process of robotic automation, making it easier for a robot programmer to prepare a robot to carry out a task. The important aspects of such automation are that it much work off-line, allowing programs to be prepared whilst the robot is engaged on another task, and that it must work at a high-level of abstractionthe intelligence about the fine detail of the robot's mechanics needs to be kept within the machine, liberating the designer to work on the task design not the fine-details of the programming. If this work is to find its way into industrial practice, then it must be grounded in techniques which are currently used in industry, so that skills learned in other industrial design fields can be transferred to robot programming. Our perspective here is to incorporate robot modelling into computer-aided design systems, and to represent the complicated geometry of the workspaces by trimmed B-spline curves and surfaces and generalizations thereof.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Cameron. </author> <title> Using space-time for collision detection : solving the general case. </title> <editor> In K. Warwick, editor, </editor> <booktitle> Robotics, Applied Mathematics and Computational Aspects, </booktitle> <pages> pages 403415. </pages> <address> Clarendon/IMA, </address> <year> 1993. </year>
Reference-contexts: We are also interested in the volume swept out by a particular motion m : <ref> [0; 1] </ref> ! C. This gives a composite mapping i = ! i ffi m i : [0; 1] fi P i ! R 3 (6) The image of this mapping is the volume of space swept out as the robot moves through the motion m. <p> We are also interested in the volume swept out by a particular motion m : <ref> [0; 1] </ref> ! C. This gives a composite mapping i = ! i ffi m i : [0; 1] fi P i ! R 3 (6) The image of this mapping is the volume of space swept out as the robot moves through the motion m. A well-known way of notating the kinematics of manipulators is the Denavit-Hartenberg notation [3, 5]. <p> For collision detection in a dynamic environment, for example where the robot is moving amidst obstacles which are also moving, or where a system requires the coordinated motion of multiple robots, we can extrude the motion into a four-dimensional space-time, as in <ref> [1] </ref>. The mathematical details of this are given in [9]. 2.2 Path Planning. More complicated problems are path planning and accessibility checking.
Reference: [2] <author> S. Cameron and J. Pitt-Francis. </author> <title> Motion planning for real problems. </title> <booktitle> In Proceedings of the 1998 International Sym posium on Robotics, </booktitle> <address> Birmingham, England, </address> <year> 1998. </year>
Reference-contexts: In order to create a system which can be programmed at a high level of task abstraction within a CAD system, there is a need for problems such as collision detection and path planning to be embedded into the CAD environment (see e.g. <ref> [2] </ref>). In this section we show how the work detailed above using B-splines facilitates this. 2.1 Collision Detection. The first problem which we study is the collision-detection problemgiven a motion m of the robot will it collide with obstacles within its environment.
Reference: [3] <author> J. Craig. </author> <title> Introduction to Robotics. </title> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: A well-known way of notating the kinematics of manipulators is the Denavit-Hartenberg notation <ref> [3, 5] </ref>. <p> Moving on from this we intend to develop a system whereby robots can be programmed in a wholly graphical environment, rather than graphical systems being used to test text-based programs <ref> [3] </ref>. This will build upon the work above, allowing the environment to be designed in a CAD system and desired positions and orientations of the robot indicated by interaction with a 3D model, drawing on the path-planning algorithms outlined in section 2.2 to hide the details of the robot's kinematics.
Reference: [4] <author> A. del Pobil and M. Serna. </author> <title> Spatial Representation and Mo tion Planning. </title> <booktitle> Number 1014 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphicssee <ref> [4, 7, 13, 18, 20] </ref> for details. A graphical snapshot of the data-structures in the middle of this algorithm is shown in figure 4.
Reference: [5] <author> J. Denavit and R. Hartenberg. </author> <title> A kinematics notation for lower-pair mechanisms based on matrices. </title> <journal> Journal of Ap plied Mechanics (Transactions of the ASME), </journal> <month> June </month> <year> 1955. </year>
Reference-contexts: A well-known way of notating the kinematics of manipulators is the Denavit-Hartenberg notation <ref> [3, 5] </ref>.
Reference: [6] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geo metric Design. </title> <publisher> Academic Press, </publisher> <address> third edition, </address> <year> 1993. </year>
Reference-contexts: In geometric design these is a need not just for simple shapes, such as lines, circles and tori, but also for more general smooth shapes. This work, stemming from the work of Bezier and others in the automobile industry (see <ref> [6] </ref>), has led to a large body of theoretical and practical results on free-form design. In this paper we make use of a free-form representation known as NURBS (non-uniform rational B-splines). <p> By changing these weights the shape of the curve can be modified [14]. Mathematically the weights can be thought of as the fourth coordinate in a homogeneous coordinate system, defining the projection of a 4-dimensional nonrational space curve into 3-dimensional space <ref> [6] </ref>. <p> There are a number of reasons why this type of curve is use in CAD systems (see <ref> [6, 15] </ref> for details). Firstly it is possible to interactively modify the curve by adjusting the control points and other control parameters, in a way which is geometrically intuitive. A second reason is the existence of powerful geometrical algorithms which act on these curves.
Reference: [7] <author> R. Featherstone. </author> <title> A hierarchical representation of the space occupancy of a robot mechanism. </title> <editor> In J.-P. Merlet and B. Ra vani, editors, </editor> <title> Computational Kinematics (INRIA, Septem ber 1995). </title> <publisher> Kluwer, </publisher> <year> 1995. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphicssee <ref> [4, 7, 13, 18, 20] </ref> for details. A graphical snapshot of the data-structures in the middle of this algorithm is shown in figure 4.
Reference: [8] <author> C. G. Johnson and D. Marsh. </author> <title> Modelling robot manipulators in a CAD environment using B-splines. </title> <editor> In N. Bourbakis, ed itor, </editor> <booktitle> Proceedings of the IEEE International Joint Symposia on Intelligence and Systems, pages 194201. </booktitle> <publisher> IEEE Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 A model of workspace. This section gives a brief outline of the model which we have developed for robot manipulator workspace. Further details are given in our other papers <ref> [8, 9] </ref>. 1.1 B-spline free-form design. A key concept in contemporary computer-aided design systems is the existence of free-form design systems. In geometric design these is a need not just for simple shapes, such as lines, circles and tori, but also for more general smooth shapes.
Reference: [9] <author> C. G. Johnson and D. Marsh. </author> <title> Modelling robot manipulators with multivariate B-splines. </title> <note> Submitted, </note> <year> 1998. </year>
Reference-contexts: 1 A model of workspace. This section gives a brief outline of the model which we have developed for robot manipulator workspace. Further details are given in our other papers <ref> [8, 9] </ref>. 1.1 B-spline free-form design. A key concept in contemporary computer-aided design systems is the existence of free-form design systems. In geometric design these is a need not just for simple shapes, such as lines, circles and tori, but also for more general smooth shapes. <p> We have demonstrated <ref> [9] </ref> that given a description of an open-chain mechanism in Denavit-Hartenberg form, and a description of the physical surface of the link in terms of NURBS, we can generate multivariate NURBS representing all of the functions i ; ! i for i = 1; : : : ; d, where d <p> The mathematical details of this are given in <ref> [9] </ref>. 2.2 Path Planning. More complicated problems are path planning and accessibility checking.
Reference: [10] <author> S. Lavallee and P. Szeliski. </author> <title> Recovering the position and orientation of free-form objects from image contours using 3D distance maps. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 17(4):378390, </volume> <year> 1995. </year>
Reference-contexts: A key to this lies in liberating robots from the constraints of the designed environment. One exciting avenue to explore here is incorporating work in computer-vision and range sensing, and recent work by Wang and Wang [19] and Lavallee and Szeliski <ref> [10] </ref> use B-spline surfaces as the basis of visual reconstruction experiments, which strengthens our use of B-splines as a mathematical basis for the system.
Reference: [11] <author> T. Lozano-Perez. </author> <title> A simple motion-planning algorithm for general robotic manipulators. </title> <journal> IEEE Journal on Robotics and Automation, </journal> <volume> RA-3(3):224238, </volume> <year> 1987. </year>
Reference-contexts: k ) i 1 =0 i k =0 w i 1 ;::: ;i k N i 1 ;p 1 (u 1 ) : : : N i k ;p k (u k ) Using these mappings we can form the image of a high-dimensional space (such as the configuration space <ref> [11] </ref> of a manipulator) in a lower dimensional space (such as R 3 ). This approach is followed below. 1.2 Kinematic functions as B-splines. One important aspect of kinematics is studying the space occupied by a robot as it moves. <p> Once we have found such a contiguous free-space region, then we can interpolate a NURBS path through it. One major advantage of this (compared with, for example, <ref> [11] </ref>) is that the same structure works on any scale. If a large amount of space is free then these regions are marked off as free near the beginning of the algorithm, rather than being pointlessly further subdivided.
Reference: [12] <author> M. Mitchell. </author> <title> An Introduction to Genetic Algorithms. Series in Complex Adaptive Systems. </title> <publisher> Bradford Books, </publisher> <year> 1996. </year>
Reference-contexts: There are several approaches to this. Firstly we can consider working with individual paths and recombining these paths in a versions of a genetic algorithm <ref> [12] </ref>. This algorithm works by taking a wide variety of paths, specified as NURBS in configuration space, and iteratively splitting, combining and then selecting the best paths, gradually converging to a good path. This relies on a fast collision-checking algorithm such as the one outlined above.
Reference: [13] <author> Q. Peng. </author> <title> An algorithm for finding the intersection lines between two B-spline surfaces. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 16(4), </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphicssee <ref> [4, 7, 13, 18, 20] </ref> for details. A graphical snapshot of the data-structures in the middle of this algorithm is shown in figure 4.
Reference: [14] <author> L. Piegl. </author> <title> Modifying the shape of rational B-splines. part 1 : curves. </title> <booktitle> Computer Aided Design, </booktitle> <address> 21(8):509518, </address> <year> 1989. </year>
Reference-contexts: The w i are a set of weights, one corresponding to each point. By changing these weights the shape of the curve can be modified <ref> [14] </ref>. Mathematically the weights can be thought of as the fourth coordinate in a homogeneous coordinate system, defining the projection of a 4-dimensional nonrational space curve into 3-dimensional space [6].
Reference: [15] <author> L. Piegl and W. Tiller. </author> <title> The N U RBS Book. </title> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: There are a number of reasons why this type of curve is use in CAD systems (see <ref> [6, 15] </ref> for details). Firstly it is possible to interactively modify the curve by adjusting the control points and other control parameters, in a way which is geometrically intuitive. A second reason is the existence of powerful geometrical algorithms which act on these curves.
Reference: [16] <author> H. Samet. </author> <title> Connected component labeling using quadtrees. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(3):487501, </volume> <year> 1981. </year>
Reference-contexts: This has a number of advantages. One valuable property that we use here is the existence of algorithms which find connected regions in trees <ref> [16] </ref>, thus giving an algorithm for checking whether there exists a path or not. Once we have found such a contiguous free-space region, then we can interpolate a NURBS path through it.
Reference: [17] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2), </volume> <year> 1984. </year>
Reference-contexts: EndIf If no collisions were detected If current node is on last link mark the current node as free and traverse the tree until another grey-node is found Else create 2 i+1 daughter nodes, initialized to (! i+1 ; obs list; 1) EndIf EndWhile End We have used a tree-structure <ref> [17] </ref> to store information about the patches as we continue subdividing (see figure 6).
Reference: [18] <author> T. W. Sederberg and S. R. Parry. </author> <title> Comparison of three curve intersection algorithms. </title> <booktitle> Computer-Aided Design, </booktitle> <address> 18(1):5863, </address> <month> January/February </month> <year> 1986. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphicssee <ref> [4, 7, 13, 18, 20] </ref> for details. A graphical snapshot of the data-structures in the middle of this algorithm is shown in figure 4.
Reference: [19] <author> Y. Wang and J. Wang. </author> <title> On 3D model construction by fusing heterogeneous sensor data. </title> <booktitle> CVGIP-Image Understanding, </booktitle> <address> 60(2):210229, </address> <year> 1994. </year>
Reference-contexts: A key to this lies in liberating robots from the constraints of the designed environment. One exciting avenue to explore here is incorporating work in computer-vision and range sensing, and recent work by Wang and Wang <ref> [19] </ref> and Lavallee and Szeliski [10] use B-spline surfaces as the basis of visual reconstruction experiments, which strengthens our use of B-splines as a mathematical basis for the system.
Reference: [20] <author> J. Yen, S. Sprach, M. Smith, and R. Pulleyblank. </author> <title> Parallel boxing in B-spline intersection. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 7279, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This list is in rough order of complexity, the earlier ones being fast to calculate but offering a cruder approximation, the later ones offering tighter bounds but requiring more complex intersection algorithms. Variations on these bounding-box methods are commonly found in computer graphicssee <ref> [4, 7, 13, 18, 20] </ref> for details. A graphical snapshot of the data-structures in the middle of this algorithm is shown in figure 4.
References-found: 20

