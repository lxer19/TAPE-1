URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/papers/cs25arctic.ps.Z
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/rbd/www/bib-arctic.html
Root-URL: 
Title: Expressing Temporal Behavior Declaratively  
Author: Roger B. Dannenberg 
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: The programming language Arctic specifies real-time behavior declaratively by using temporal control constructs and by indicating starting times and durations explicitly, much the way timing is specified in a cue sheet or a musical score. Values in Arctic are functions of time, which may be combined with various arithmetic and logical operators. Since Arctic is a single assignment language, the execution order is implied by data dependencies, simplifying synchronization problems for the programmer. Arctic supports behavioral abstraction, in which a single program module gives rise, through various transformations, to a class of behaviors. An implementation of Arctic is described, and experience with the declarative approach to real-time control is discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abbot, Curtis. </author> <title> The 4CED Program. </title> <journal> Computer Music Journal 5(1) </journal> <pages> 13-33, </pages> <month> Spring, </month> <year> 1981. </year>
Reference-contexts: A real-time implementation of Arctic is in progress and will also be described. 2. Related Work Arctic is based on earlier work in the computer music field including the Music V language [14] by Max Mathews and 4CED <ref> [1] </ref> by Curtis Abbot. Music V was designed to synthesize music in non-real-time and consists of two parts called the score language and the orchestra language.
Reference: [2] <author> Anderson, David P. and Ron Kuivila. </author> <title> Accurately Timed Generation of Discrete Musical Events. </title> <journal> Computer Music Journal 10(3) </journal> <pages> 48-56, </pages> <month> Fall, </month> <year> 1986. </year>
Reference-contexts: Unfortunately, many typographical errors were introduced in that version of the text. This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages <ref> [2, 4, 6, 9, 19] </ref> and systems [7, 12, 13, 18] for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [3] <author> Ashcroft, E. A. and W. W. Wadge. </author> <title> Lucid, a Nonprocedural Language with Iteration. </title> <journal> Communications of the ACM 20(7) </journal> <pages> 519-526, </pages> <month> July, </month> <year> 1977. </year>
Reference-contexts: Assuming that these continuous-time signals in Arctic are actually implemented as sequences of discrete values, Arctic bears a similarity to the languages Lucid <ref> [3] </ref> and Val [16] which are also functional or data-flow languages for manipulating sequences.
Reference: [4] <author> Balaban, Mira. </author> <title> Music Structures: A Temporal-Hierarchical Representation For Music. </title> <type> Technical Report FC-TR-021 MCS-313, </type> <institution> Ben Gurion University Department of Mathematics and Computer Science, </institution> <year> 1989. </year>
Reference-contexts: Unfortunately, many typographical errors were introduced in that version of the text. This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages <ref> [2, 4, 6, 9, 19] </ref> and systems [7, 12, 13, 18] for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [5] <author> Cameron, E. J., D. M. Cohen, B. Gopinath, W. M. Keese II, L. Ness, P. Uppaluru, and J. R. Vollaro. </author> <title> The IC* Model of Parallel Computation and Programming Environment. </title> <journal> IEEE Transactions on Software Engineering :317-326, </journal> <month> March, </month> <year> 1988. </year>
Reference-contexts: In contrast, discrete events occur at some countable set of time points. In practice, even continuous-time signals require a finite (and therefore discrete) representation such as samples or piece-wise linear representations. 3 sequences can be computed and indexed without any connection to time. Another related language is L.0 <ref> [5] </ref>, which treats time as a sequence of discrete steps and uses a very general naming and scoping mechanism, but is otherwise much like Arctic. 3. The Programming Language Arctic Arctic has two primary ingredients that distinguish it from other functional languages.
Reference: [6] <author> Cointe, Pierre and Xavier Rodet. </author> <title> Formes: an Object & Time Oriented System for Music Composition and Synthesis. </title> <booktitle> In 1984 Symposium on LISP and Functional Programming, </booktitle> <pages> pages 85-95. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: Unfortunately, many typographical errors were introduced in that version of the text. This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages <ref> [2, 4, 6, 9, 19] </ref> and systems [7, 12, 13, 18] for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [7] <author> Collinge, D. J. MOXIE: </author> <title> A Language for Computer Music Performance. </title> <booktitle> In Proceedings of the 1984 International Computer Music Conference, </booktitle> <pages> pages 217-220. </pages> <publisher> Computer Music Association, </publisher> <year> 1984. </year>
Reference-contexts: This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages [2, 4, 6, 9, 19] and systems <ref> [7, 12, 13, 18] </ref> for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [8] <author> Dannenberg, Frances K., Roger B. Dannenberg, and Philip Miller. </author> <title> Teaching Programming to Musicians. </title> <booktitle> In 1984 Proceedings of the Fourth Annual Symposium on Small Computers in the Arts, </booktitle> <pages> pages 114-122. </pages> <publisher> IEEE, </publisher> <month> October, </month> <year> 1984. </year>
Reference-contexts: This is not too surprising given that music can be defined as sound organized in time. Long before electronic computers, traditional music notation allowed composers to create temporal specifications which include loops, counters, conditionals and other constructs familiar to modern-day programmers. <ref> [8] </ref> In the following sections, I will describe the language Arctic [17], for expressing temporal behavior. Two variants of Arctic called Canon [10] and Fugue [11], have similar semantics but deal with different domains. A real-time implementation of Arctic is in progress and will also be described. 2.
Reference: [9] <author> Dannenberg, Roger B. </author> <title> Arctic: A Functional Language for Real-Time Control. </title> <booktitle> In 1984 ACM Symposium on LISP and Functional Programming, </booktitle> <pages> pages 96-103. </pages> <publisher> ACM, </publisher> <month> August, </month> <year> 1984. </year>
Reference-contexts: Unfortunately, many typographical errors were introduced in that version of the text. This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages <ref> [2, 4, 6, 9, 19] </ref> and systems [7, 12, 13, 18] for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [10] <author> Dannenberg, Roger B. </author> <title> The Canon Score Language. </title> <journal> Computer Music Journal 13(1) </journal> <pages> 47-56, </pages> <month> Spring, </month> <year> 1989. </year>
Reference-contexts: Long before electronic computers, traditional music notation allowed composers to create temporal specifications which include loops, counters, conditionals and other constructs familiar to modern-day programmers. [8] In the following sections, I will describe the language Arctic [17], for expressing temporal behavior. Two variants of Arctic called Canon <ref> [10] </ref> and Fugue [11], have similar semantics but deal with different domains. A real-time implementation of Arctic is in progress and will also be described. 2. <p> All other points in the result are defined by the linear interpolation of these breakpoints. 8 7.2. Canon Unlike the first variant, which implements Arctic syntax, the second variant, named Canon <ref> [10] </ref>, is embedded in Lisp. Canon operates on sequences of musical notes which have several properties including pitch, loudness, starting time, and duration. These properties can be altered using transformations analogous to the shift and stretch transformations already discussed.
Reference: [11] <author> Dannenberg, Roger B. and Christopher Lee Fraley. Fugue: </author> <title> Composition and Sound Synthesis With Lazy Evaluation and Behavioral Abstraction. </title> <booktitle> In Proceedings of the 1989 International Computer Music Conference, </booktitle> <pages> pages 76-79. </pages> <publisher> Computer Music Association, </publisher> <address> San Francisco, </address> <year> 1989. </year> <month> 19 </month>
Reference-contexts: Two variants of Arctic called Canon [10] and Fugue <ref> [11] </ref>, have similar semantics but deal with different domains. A real-time implementation of Arctic is in progress and will also be described. 2.
Reference: [12] <author> Greenberg, Gary. </author> <title> Procedural Composition. </title> <booktitle> In Proceedings of the 1987 International Computer Music Conference, </booktitle> <pages> pages 25-32. </pages> <publisher> Computer Music Association, </publisher> <year> 1987. </year>
Reference-contexts: This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages [2, 4, 6, 9, 19] and systems <ref> [7, 12, 13, 18] </ref> for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [13] <author> Greenberg, Gary. </author> <title> Composing With Performer Objects. </title> <booktitle> In Proceedings of the 1988 International Computer Music Conference, </booktitle> <pages> pages 142-149. </pages> <publisher> Computer Music Association, </publisher> <year> 1988. </year>
Reference-contexts: This printing contains the corrections. 2 Simulation is another example of a non-real-time application area in which (virtual) time is still important. Research in computer music has resulted in a number of innovative languages [2, 4, 6, 9, 19] and systems <ref> [7, 12, 13, 18] </ref> for dealing with virtual and real time. This is not too surprising given that music can be defined as sound organized in time.
Reference: [14] <author> Mathews, Max V. </author> <title> The Technology of Computer Music. </title> <publisher> MIT Press, </publisher> <address> Boston, </address> <year> 1969. </year>
Reference-contexts: A real-time implementation of Arctic is in progress and will also be described. 2. Related Work Arctic is based on earlier work in the computer music field including the Music V language <ref> [14] </ref> by Max Mathews and 4CED [1] by Curtis Abbot. Music V was designed to synthesize music in non-real-time and consists of two parts called the score language and the orchestra language.
Reference: [15] <author> Mathews, Max V. and F. </author> <title> Richard Moore. </title>
Reference-contexts: The real-time requirements of Arctic are application dependent, but for music it is desirable to process input and compute several interesting control functions at rates of 100 to 200 samples per second <ref> [15] </ref>. This data rate represents approximately the bandwidth of a human interacting with a musical instrument. The determination of what is an ``interesting'' control function is very subjective: with the expressive power of Arctic, the computation per sample can become substantial with only a modest programming effort.
References-found: 15

