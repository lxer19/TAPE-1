URL: http://polaris.cs.uiuc.edu/reports/1324.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: FINDING AND EXPLOITING PARALLELISM IN A PRODUCTION COMBUSTION SIMULATION PROGRAM  
Degree: BY GREGG MACLEAN SKINNER B.A., Goshen College, 1990 THESIS Submitted in partial fulfillment of the requirements for the degree of Master of Science in Computer Science in the Graduate College of the  
Address: 1994 Urbana, Illinois  
Affiliation: University of Illinois at Urbana-Champaign,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Dongarra, C. Moler, J. Bunch, and G. Stewart. </author> <title> LINPACK Users' Guide. </title> <institution> Society of Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1979. </year>
Reference-contexts: Any parallelism exploited in outer loops simply multiplies the performance gains due to parallelism in the inner loops. Inner loop parallelism (including vectorization) can usually be found automatically by today's compilers, using intraprocedural analysis with inline subroutine expansion. Many high performance libraries, such as Linpack <ref> [1] </ref>, exploit inner loop parallelism. Some production codes can benefit directly from inner loop parallelism by replacing innermost serial loops with their vector or parallel counterparts. However, in many production codes inner loop parallelism is too fine-grained to yield appreciable speedup. <p> Figure 2.1 shows the decomposition of Premix into a driver and four libraries: Chemkin [19], used to analyze gas-phase chemical kinetics; Transport [21], used to evaluate gas-phase multicomponent transport properties; Twopnt [30], a two point boundary value problem solver; and Linpack <ref> [1] </ref>, a popular numerical linear algebra package. Each is a standardized, extensible library intended for use on a wide variety of platforms. The code, approximately thirty thousand lines of standard FORTRAN 77, is highly modular, robust, and portable.
Reference: [2] <author> D. Schneider. </author> <title> A manifesto on the structure and parllelization of large production FORTRAN codes. </title> <note> Unpublished. </note>
Reference-contexts: For many production codes, optimization is only successful if parallelism can be discovered and exploited in outer loops. This typically corresponds to executing a sequence of library calls independently. Thus, the libraries must be designed or modified to allow concurrent invocation. 1.3 Production versus research codes Schneider <ref> [2] </ref> notes several characteristic properties of production codes which favor better overall organization. He suggests meaningful progress toward developing automated parallelization methodologies must be based on recognizing common structural motifs in these codes. He puts forth several provocative hypotheses with important implications for parallelization. <p> This is as it should be, for the number of research codes is large, and their shorter lengths and lifetimes do not diminish their importance. Clearly most FORTRAN compiler invocations are for this large class of codes. However, Schneider <ref> [2] </ref> suggests production codes, though considerably fewer in number, consume a majority of high performance CPU cycles. Thus, they should be of greater interest to machine designers and performance researchers. We emphasize the importance of focusing attention on general strategies to exploit parallelism in this class of codes. <p> Thus, they should be of greater interest to machine designers and performance researchers. We emphasize the importance of focusing attention on general strategies to exploit parallelism in this class of codes. A production code is defined as a program which adheres principally to the following objectives <ref> [2] </ref>: Generality A single code, or small set of codes implementing logically distinct phases of the compu tation, is capable of handling all aspects of the solution strategy, without modification. Flexibility The program provides alternative solution strategies and/or algorithms for individual computational phases. <p> Schneider <ref> [2] </ref> notes that progress toward developing a parallelization methodology must be based on recognizing these common structural motifs. Modularity is perhaps the most important of these. Consider as an example a finite elements structural mechanics code (Figure 1.1) used to determine an object's natural vibrational modes and frequencies. <p> A manual interprocedural analysis of a large production code is a time-consuming and error-prone task. Efforts have been undertaken to automate interprocedural analysis [12-14]. Even a rudimentary success at automating interprocedural analysis could have a significant impact on the parallel optimization of production codes. To motivate this point Schneider <ref> [2] </ref> introduces several hypotheses which have important implications to developing a general parallelization methodology. First, Each computational phase is conceptually independent and implemented as an integrated subprogram which communicates with other subprograms through well defined interfaces.
Reference: [3] <author> R. Kee, J. Grcar, M. Smooke, and J. Miller. </author> <title> A FORTRAN program for modeling steady laminar one-dimensional premixed flames. </title> <type> Technical Report SAND85-8240, </type> <institution> Sandia National Laboratories, </institution> <year> 1985. </year>
Reference-contexts: Typically a number of alternative algorithms are included for each phase of the computation. The input data may include instructions from a simple meta-language which determines what portions of the code to execute <ref> [3, 4] </ref>. The validity of the input data is usually verified, and mechanisms are included to handle errors and failures. Large production codes are designed with portability, maintenance, and extensibility in mind. <p> Spin [24] is used to model one-dimensional rotating-disk or stagnation-flow chemical vapor deposition reactors. Psr [25] predicts the steady-state temperature and species composition in a perfectly stirred reactor. Senkin [26], computes the time evolution of a 12 homogeneous reaction gas mixture in a closed system. Premix <ref> [3] </ref> is used to predict the steady state temperature and species concentrations in one-dimensional burner-stabilized and freely propagating premixed laminar flames. These programs can be used in concert to investigate the properties of a specific class of combustion reactions. <p> A mathematical description of the general problem appears in several references <ref> [3, 33] </ref>. Section 2.1.1 contains a brief review of that description. In Section 2.1.2 we consider the numerical methods incorporated in Premix. In Section 2.1.3 we discuss the granularity of the parallelism inherent to the mathematical model and computational method. <p> The steady state is defined by the following conservation equations <ref> [3] </ref>: _ M = uA = constant (mass); (2:1) 19 2 6 S e d p Number of processors ffi original version (fortran -Ogc) fl ideal ffi ffi ffi ffi ffi ffi fl fl fl fl FX/FORTRAN parallelizing compiler. <p> This model has been used throughout this thesis for performance analysis. The chemical kinetics computations occur in evaluating the molar rates of species production _! k , the specific form of which is determined by the input dataset <ref> [3] </ref>, _! k = i=1 21 where the -k;i are user-specified integer stoichiometric coefficients and q i the computed reaction rates. Determining the value of q i is computationally intensive. <p> The diffusive term of the species conservation equation, d dx (AZ k ) (2.3), is approximated in the same manner. Appropriate boundary conditions are implemented for both the cold and hot boundaries, yielding a two point boundary value problem. (See equations (10)-(21) in <ref> [3] </ref> and discussion therein for a detailed description.) The nitrogen combustion problem is solved first using windward differences for the convective terms. This initial solution is used as a starting condition for a run using central differences. <p> Should the Newton algorithm fail to converge, a user-specified number of artificial time integrations are performed to improve the conditioning of the nonlinear system. Time derivatives are added to equations (2.2) and (2.3) to produce a system of parabolic partial differential equations <ref> [3] </ref>, A @t @T + c p @x A @x c p k=1 @T c p k=1 26 solution vector is perturbed at every third grid point, the residual is computed, and the corresponding block diagonal columns are updated. <p> on Reference T (n+1) j temperature p; T (n) j1 ; T (n) j+1 ; _ M (n) j ; Equation (2.2) (nn 0 ) 2 j 1 ; c (n) p K;j ; Subroutine fun c (n) j+ 1 ; A (n) 2 j 1 ; (n) 2 ; <ref> [3] </ref> Eqns. (10)-(13) _! 1;j ; : : : ; _! K;j ; h 1;j ; : : : ; h K;j k;j mass fractions p; Y (n) k;j1 ; Y (n) k;j+1 ; Equation (2.3) Z (n) k;j1 ; _! (n) j 1 ; (n) 2 ; Subroutine fun A <p> _! K;j ; h 1;j ; : : : ; h K;j k;j mass fractions p; Y (n) k;j1 ; Y (n) k;j+1 ; Equation (2.3) Z (n) k;j1 ; _! (n) j 1 ; (n) 2 ; Subroutine fun A (n) 2 j+ 1 ; _ M (n) j <ref> [3] </ref> Eqns. (14)-(17) _ M (n+1) j mass flow rate _ M (n) j1 ; _ M (n) j+1 Equation (2.28) Subroutine fun [3] Eqns. (31)-(35) j thermal conductivity T (nn 0 ) (nn 0 ) (nn 0 ) K;j Subroutines mcmcdt, mcacon [21] Eqns. (50), (60)-(62) D (nn 0 ) <p> ; Equation (2.3) Z (n) k;j1 ; _! (n) j 1 ; (n) 2 ; Subroutine fun A (n) 2 j+ 1 ; _ M (n) j <ref> [3] </ref> Eqns. (14)-(17) _ M (n+1) j mass flow rate _ M (n) j1 ; _ M (n) j+1 Equation (2.28) Subroutine fun [3] Eqns. (31)-(35) j thermal conductivity T (nn 0 ) (nn 0 ) (nn 0 ) K;j Subroutines mcmcdt, mcacon [21] Eqns. (50), (60)-(62) D (nn 0 ) 2 diffusion coefficients p; T (nn 0 ) j ; X (nn 0 ) K;j Subroutine mcadif [21] Eqns. (48), (49); [3] Eqn. <p> fun <ref> [3] </ref> Eqns. (31)-(35) j thermal conductivity T (nn 0 ) (nn 0 ) (nn 0 ) K;j Subroutines mcmcdt, mcacon [21] Eqns. (50), (60)-(62) D (nn 0 ) 2 diffusion coefficients p; T (nn 0 ) j ; X (nn 0 ) K;j Subroutine mcadif [21] Eqns. (48), (49); [3] Eqn. (8) k;j+ 1 diffusion ratios T (nn 0 ) (nn 0 ) (nn 0 ) 2 (nn 0 ) 2 Subroutines mcatdr, mtrnpr [21] Eqns. (51)-(56) Z (n) 2 diffusion velocities p; D (nn 0 ) 1;j+ 1 ; : : : ; D (nn 0 ) 2 ; <p> Subroutines mcatdr, mtrnpr [21] Eqns. (51)-(56) Z (n) 2 diffusion velocities p; D (nn 0 ) 1;j+ 1 ; : : : ; D (nn 0 ) 2 ; Subroutine mdifv X (n) K;j ; (n) 2 j+ 1 [21] equations (41), (42), (71)-(73); (nn 0 ) 2 K;j+ 1 <ref> [3] </ref> Eqns. (6), (7), (9), (14)-(16) j+ 1 mass density p; W (n) 2 (n) 2 Subroutine ckrhoy [19] Eqns. (2) h (n) k;j enthalpies T (n) j Subroutine ckhml c (n) p k;j specific heats T (n) j Subroutine ckcpms [19] Eqns. (26) c (n) p j mean specific heat <p> It is important to note that the COMMON blocks for a particular library are declared only in procedures within the library. The flame code documentation <ref> [3] </ref> instructs the programmer to write a small main program that opens all files, allocates the working storage space, and calls the flame program, premix, with the working storage areas and its sizes as parameters. An example of a program driver appears in Appendix C. <p> A manual interprocedural analysis of the library procedures called during of the loops over the grid points in fun and consultation of available documentation <ref> [3, 19, 21] </ref> reveals the last argument to each of the called procedures is its sole output argument. These output arguments, along with any variables local to the called procedures in the loop, create memory dependences which inhibit parallelism.
Reference: [4] <author> M. Frisch. </author> <title> Gaussian 86 User's Guide. </title> <institution> Corporate Research Laboratories, Eastman Kodak Co., Rochester, </institution> <address> NY 14650, </address> <year> 1987. </year>
Reference-contexts: Typically a number of alternative algorithms are included for each phase of the computation. The input data may include instructions from a simple meta-language which determines what portions of the code to execute <ref> [3, 4] </ref>. The validity of the input data is usually verified, and mechanisms are included to handle errors and failures. Large production codes are designed with portability, maintenance, and extensibility in mind.
Reference: [5] <author> T. Butler and D. Michel. </author> <title> NASTRAN. </title> <publisher> GPO, </publisher> <year> 1971. </year>
Reference: [6] <author> R. DeMeis. </author> <title> A code with dynamic impact (DYNA 3D). </title> <journal> Aerospace America, </journal> <volume> 30 </volume> <pages> 42-43, </pages> <month> May </month> <year> 1992. </year>
Reference: [7] <author> O.-J. Dahl, E. Dijkstra, and C. Hoare. </author> <title> Structured Programming. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Complex codes could not be manageable, or even execute correctly, if they were not comprised of simpler components. To cope with the task of creating a large production code, developers must inevitably turn to simplifying methodologies, such as structured programming <ref> [7, 8] </ref>. 4 Present compiler research has been oriented toward discovering loop-level parallelism (including some outer loops) in tactical research codes. This is as it should be, for the number of research codes is large, and their shorter lengths and lifetimes do not diminish their importance.
Reference: [8] <author> J. Wagener. </author> <title> Principles of FORTRAN 77 Programming. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Complex codes could not be manageable, or even execute correctly, if they were not comprised of simpler components. To cope with the task of creating a large production code, developers must inevitably turn to simplifying methodologies, such as structured programming <ref> [7, 8] </ref>. 4 Present compiler research has been oriented toward discovering loop-level parallelism (including some outer loops) in tactical research codes. This is as it should be, for the number of research codes is large, and their shorter lengths and lifetimes do not diminish their importance.
Reference: [9] <author> J. Kral. </author> <title> Empirical laws of software development and their implications. </title> <journal> Computational Physics Communications, </journal> <volume> 41 </volume> <pages> 385-391, </pages> <year> 1986. </year>
Reference-contexts: Modular construction is strongly associated with structured, top-down software engineering techniques which lend themselves naturally to functional procedure decomposition. Importantly, empirical observations indicate the assembly of large codes by loosely coupling smaller, independent subprograms tends to decrease overall development time <ref> [9] </ref>. Thus, we can expect numerous programs to meet the general criteria of production codes set out in Section 1.3. 1.4.1 Implications for parallelization For a shared memory system, parallelism is expressed by the parallel loop, whose iterations are executed concurrently by different processors [10].
Reference: [10] <author> H. Zima and B. Chapman. </author> <title> Supercompilers for Parallel and Vector Computers. </title> <publisher> ACM Press Frontier Series. ACM Press, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Thus, we can expect numerous programs to meet the general criteria of production codes set out in Section 1.3. 1.4.1 Implications for parallelization For a shared memory system, parallelism is expressed by the parallel loop, whose iterations are executed concurrently by different processors <ref> [10] </ref>. A FORTRAN loop is inhibited from parallel execution by loop-carried dependences. Dependences have two flavors: data and control. A data dependence is a relationship between two statements that refer to the same memory location. <p> In many cases, only a partial ordering is needed at the conceptual level. The role of automatic parallelization technology is to detect the instances where a partial ordering is sufficient. A discussion of this technology can be found in a number of references, including <ref> [10, 28, 29] </ref>. We must therefore make a reasonably sharp distinction between the mathematical model of a problem, the computational method for its solution and the particular implementation of the method. <p> can see that we will need to answer the following questions: * Within the procedure, is the argument read, modified, or both? * Within the procedure, is the argument first read or modified? * How is the argument used after the procedure has finished? Some terminology will facilitate our discussion <ref> [10] </ref>. A definition of a program variable v is a statement which assigns a value to v. A use of v is a statement which reads v. To avoid having to make pessimistic assumptions about the definition and use of v, we need to perform an interprocedural definition-use analysis.
Reference: [11] <author> K. Cooper, M. Hall, and L. Torczon. </author> <title> An experiment with inline substitution. </title> <journal> Software Practice and Experience, </journal> <volume> 21(6) </volume> <pages> 581-601, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Either the modules must be expanded inline or interprocedural analysis must be performed. A summary of interprocedural analysis is generally less precise than the analysis of inlined code. The drawback of inline expansion is the potentially exponential growth in code size <ref> [11] </ref>, making it generally infeasible for all but the smallest modules. It does have value when used selectively, as when it is incorporated into an interactive compiler. Interprocedural analysis is effective, but difficult to perform. A manual interprocedural analysis of a large production code is a time-consuming and error-prone task.
Reference: [12] <author> M. Ganapathi and K. Kennedy. </author> <title> Interprocedural analysis and optimization. </title> <type> Technical Report COMP TR89-96, </type> <institution> Department of Computer Science, Rice University, </institution> <address> P.O Box 1892, Houston, TX 77251-1892, </address> <month> July </month> <year> 1989. </year>
Reference: [13] <author> P. Havlak and K. Kennedy. </author> <title> Experience with interprocedural analysis of array side effects. </title> <booktitle> Supercomputing '90 Proceedings, </booktitle> <year> 1990. </year>
Reference: [14] <author> D. Callahan and K. Kennedy. </author> <title> Analysis of interprocedural side effects in a parallel programming environment. </title> <booktitle> Proceedings of the First International Conference on Supercomputing, </booktitle> <month> June </month> <year> 1987. </year>
Reference: [15] <author> C. Curtiss and J. Hirschfelder. </author> <title> Integration of stiff equations. </title> <booktitle> Proceedings of the National Academy of Sciences of the United States of America, </booktitle> <volume> 38 </volume> <pages> 235-243, </pages> <year> 1952. </year> <month> 63 </month>
Reference-contexts: It was in the context of chemical kinetics that Curtiss and Hirschfelder <ref> [15] </ref> first identified the problem of stiffness in ordinary differential equations in 1952.
Reference: [16] <author> R. Kee and J. Miller. </author> <title> A structured approach to the computational modeling of chemical kinetics and molecular transport in flowing systems. </title> <type> Technical Report SAND86-8841, </type> <institution> Sandia National Laboratories, </institution> <year> 1986. </year>
Reference-contexts: The combustion field is rich with examples of problems requiring an understanding of elementary chemical kinetic processes, including control of combustion-generated pollutants, knocking in internal combustion engines, environmental impact of compounds emitted from combustion, and disposal of toxic waste <ref> [16] </ref>. A common element in all the work is a need to understand the chemical kinetics behavior of large chemical reaction systems and the associated convective and diffusive transport of mass, momentum, and energy. <p> This approach is successful because the governing equations for each reactive flow applications must share a number of features. A general discussion of this structured approach to simulating reactive flow is found in <ref> [16] </ref>. Several codes have been built by Sandia to exploit Chemkin, Transport, and Surfkin. All are general purpose codes for use in solving a class of combustion problems. A common computational description of the chemical reaction rates is used in all.
Reference: [17] <author> E. Oran and J. Boris. </author> <title> Numerical Simulation of Reactive Flow. </title> <publisher> Elsevier, </publisher> <year> 1987. </year>
Reference-contexts: The high temperatures 11 resulting from the transfer of chemical energy to heat lead to rapid expansion of the gases which in turn affect the convective flow. Stiffness arises as a result of the differing time scales of the chemical kinetics and the hydrodynamics <ref> [17] </ref>. Chemical reactions occur on the order of picoseconds, while the convective flow occurs on the order of seconds. Stiffness also results from combustion's large temperature gradients. To overcome these numerical difficulties one must use time-implicit algorithms and adaptive gridding [18].
Reference: [18] <author> V. Giovangigli and N. Darabiha. </author> <title> Vector computers and complex chemistry combustion. </title> <booktitle> Mathematical Modeling in Combustion and Related Topics, </booktitle> <pages> pages 491-503, </pages> <year> 1988. </year>
Reference-contexts: Chemical reactions occur on the order of picoseconds, while the convective flow occurs on the order of seconds. Stiffness also results from combustion's large temperature gradients. To overcome these numerical difficulties one must use time-implicit algorithms and adaptive gridding <ref> [18] </ref>. Combustion problems provide an unique opportunity to study the properties of chemical species which do not occur elsewhere.
Reference: [19] <author> R. Kee, F. Rupley, and J. Miller. CHEMKIN-II: </author> <title> A FORTRAN chemical kinetics package for the analysis of gas-phase chemical kinetics. </title> <type> Technical Report SAND89-8009, </type> <institution> Sandia National Laboratories, </institution> <year> 1989. </year>
Reference-contexts: A group at Sandia has developed a number of software tools which facilitate simulation of reactive flow. Three basic tools lie at the heart of their effort. The Chemkin library <ref> [19] </ref> and the Chemkin Thermodynamic Database [20] are used to analyze gas-phase chemical kinetics. The Transport [21] library is used for evaluating gas-phase multicomponent transport properties. Surfkin [22] is a package for analyzing heterogeneous chemical kinetics at a solid-surface - gas-phase interface. <p> It is a flexible code developed to analyze general problems involving combustion of premixed gases in a flame. Figure 2.1 shows the decomposition of Premix into a driver and four libraries: Chemkin <ref> [19] </ref>, used to analyze gas-phase chemical kinetics; Transport [21], used to evaluate gas-phase multicomponent transport properties; Twopnt [30], a two point boundary value problem solver; and Linpack [1], a popular numerical linear algebra package. Each is a standardized, extensible library intended for use on a wide variety of platforms. <p> Therefore, if a single level of parallelism is implemented, it must be done at the level of residual evaluation. 2.1.4 Specific implementation The control flow of the code can be viewed as in Figure 2.9. The Chemkin Interpreter <ref> [19] </ref> and Transport Property Fitting Code [21] are each external modules which access databases to create so-called linking files to be read during execution. The Chemkin and Transport libraries require access to many problem-specific constants, such as the molecular weights of the species. <p> ; : : : ; D (nn 0 ) 2 ; Subroutine mdifv X (n) K;j ; (n) 2 j+ 1 [21] equations (41), (42), (71)-(73); (nn 0 ) 2 K;j+ 1 [3] Eqns. (6), (7), (9), (14)-(16) j+ 1 mass density p; W (n) 2 (n) 2 Subroutine ckrhoy <ref> [19] </ref> Eqns. (2) h (n) k;j enthalpies T (n) j Subroutine ckhml c (n) p k;j specific heats T (n) j Subroutine ckcpms [19] Eqns. (26) c (n) p j mean specific heat c (n) p 1;j ; : : : ; c (n) 1;j ; : : : ; Y <p> (41), (42), (71)-(73); (nn 0 ) 2 K;j+ 1 [3] Eqns. (6), (7), (9), (14)-(16) j+ 1 mass density p; W (n) 2 (n) 2 Subroutine ckrhoy <ref> [19] </ref> Eqns. (2) h (n) k;j enthalpies T (n) j Subroutine ckhml c (n) p k;j specific heats T (n) j Subroutine ckcpms [19] Eqns. (26) c (n) p j mean specific heat c (n) p 1;j ; : : : ; c (n) 1;j ; : : : ; Y (n) K;j Subroutine ckcpbs [19] Eqns. (34) _! (n) k;j molar production rates p; T (n) j ; Y (n) k;j Subroutines ckwyp, <p> k;j enthalpies T (n) j Subroutine ckhml c (n) p k;j specific heats T (n) j Subroutine ckcpms <ref> [19] </ref> Eqns. (26) c (n) p j mean specific heat c (n) p 1;j ; : : : ; c (n) 1;j ; : : : ; Y (n) K;j Subroutine ckcpbs [19] Eqns. (34) _! (n) k;j molar production rates p; T (n) j ; Y (n) k;j Subroutines ckwyp, ckrat [19] Eqns. (49)-(72) W j mean molecular weight W 1 ; : : : ; W K ; Y (n) 1;j ; : : : ; Y (n) K;j Subroutine ckmmwy <p> (26) c (n) p j mean specific heat c (n) p 1;j ; : : : ; c (n) 1;j ; : : : ; Y (n) K;j Subroutine ckcpbs <ref> [19] </ref> Eqns. (34) _! (n) k;j molar production rates p; T (n) j ; Y (n) k;j Subroutines ckwyp, ckrat [19] Eqns. (49)-(72) W j mean molecular weight W 1 ; : : : ; W K ; Y (n) 1;j ; : : : ; Y (n) K;j Subroutine ckmmwy [19] Eqn. (3) k mole fractions Y (n) k;j ; W k ; W Subroutine ckytx [19] Eqn. (6) j+ <p> Eqns. (34) _! (n) k;j molar production rates p; T (n) j ; Y (n) k;j Subroutines ckwyp, ckrat <ref> [19] </ref> Eqns. (49)-(72) W j mean molecular weight W 1 ; : : : ; W K ; Y (n) 1;j ; : : : ; Y (n) K;j Subroutine ckmmwy [19] Eqn. (3) k mole fractions Y (n) k;j ; W k ; W Subroutine ckytx [19] Eqn. (6) j+ 1 area user supplied Subroutine area p pressure constant W k molecular weight constant R universal gas constant constant Table 2.5: Quantities computed during residual evaluation. <p> Subroutines ckwyp, ckrat <ref> [19] </ref> Eqns. (49)-(72) W j mean molecular weight W 1 ; : : : ; W K ; Y (n) 1;j ; : : : ; Y (n) K;j Subroutine ckmmwy [19] Eqn. (3) k mole fractions Y (n) k;j ; W k ; W Subroutine ckytx [19] Eqn. (6) j+ 1 area user supplied Subroutine area p pressure constant W k molecular weight constant R universal gas constant constant Table 2.5: Quantities computed during residual evaluation. Appendix A contains a glossary of procedure names and functions. <p> A manual interprocedural analysis of the library procedures called during of the loops over the grid points in fun and consultation of available documentation <ref> [3, 19, 21] </ref> reveals the last argument to each of the called procedures is its sole output argument. These output arguments, along with any variables local to the called procedures in the loop, create memory dependences which inhibit parallelism.
Reference: [20] <author> R. Kee, F. Rupley, and J. Miller. </author> <title> The CHEMKIN thermodynamic data base. </title> <type> Technical Report SAND87-8215B, </type> <institution> Sandia National Laboratories, </institution> <year> 1987. </year>
Reference-contexts: A group at Sandia has developed a number of software tools which facilitate simulation of reactive flow. Three basic tools lie at the heart of their effort. The Chemkin library [19] and the Chemkin Thermodynamic Database <ref> [20] </ref> are used to analyze gas-phase chemical kinetics. The Transport [21] library is used for evaluating gas-phase multicomponent transport properties. Surfkin [22] is a package for analyzing heterogeneous chemical kinetics at a solid-surface - gas-phase interface.
Reference: [21] <author> R. Kee, G. Dixon-Lewis, J. Warnatz, M. Coltrin, and J. Miller. </author> <title> A FORTRAN computer code package for the evaluation of gas-phase, multicomponent transport properties. </title> <type> Technical Report SAND86-8426, </type> <institution> Sandia National Laboratories, </institution> <year> 1986. </year>
Reference-contexts: A group at Sandia has developed a number of software tools which facilitate simulation of reactive flow. Three basic tools lie at the heart of their effort. The Chemkin library [19] and the Chemkin Thermodynamic Database [20] are used to analyze gas-phase chemical kinetics. The Transport <ref> [21] </ref> library is used for evaluating gas-phase multicomponent transport properties. Surfkin [22] is a package for analyzing heterogeneous chemical kinetics at a solid-surface - gas-phase interface. These three combustion libraries undergo continual revision as part of an ongoing effort to provide the numerical combustion community with standardized software. <p> It is a flexible code developed to analyze general problems involving combustion of premixed gases in a flame. Figure 2.1 shows the decomposition of Premix into a driver and four libraries: Chemkin [19], used to analyze gas-phase chemical kinetics; Transport <ref> [21] </ref>, used to evaluate gas-phase multicomponent transport properties; Twopnt [30], a two point boundary value problem solver; and Linpack [1], a popular numerical linear algebra package. Each is a standardized, extensible library intended for use on a wide variety of platforms. <p> Therefore, if a single level of parallelism is implemented, it must be done at the level of residual evaluation. 2.1.4 Specific implementation The control flow of the code can be viewed as in Figure 2.9. The Chemkin Interpreter [19] and Transport Property Fitting Code <ref> [21] </ref> are each external modules which access databases to create so-called linking files to be read during execution. The Chemkin and Transport libraries require access to many problem-specific constants, such as the molecular weights of the species. <p> j+ 1 ; _ M (n) j [3] Eqns. (14)-(17) _ M (n+1) j mass flow rate _ M (n) j1 ; _ M (n) j+1 Equation (2.28) Subroutine fun [3] Eqns. (31)-(35) j thermal conductivity T (nn 0 ) (nn 0 ) (nn 0 ) K;j Subroutines mcmcdt, mcacon <ref> [21] </ref> Eqns. (50), (60)-(62) D (nn 0 ) 2 diffusion coefficients p; T (nn 0 ) j ; X (nn 0 ) K;j Subroutine mcadif [21] Eqns. (48), (49); [3] Eqn. (8) k;j+ 1 diffusion ratios T (nn 0 ) (nn 0 ) (nn 0 ) 2 (nn 0 ) 2 <p> j+1 Equation (2.28) Subroutine fun [3] Eqns. (31)-(35) j thermal conductivity T (nn 0 ) (nn 0 ) (nn 0 ) K;j Subroutines mcmcdt, mcacon <ref> [21] </ref> Eqns. (50), (60)-(62) D (nn 0 ) 2 diffusion coefficients p; T (nn 0 ) j ; X (nn 0 ) K;j Subroutine mcadif [21] Eqns. (48), (49); [3] Eqn. (8) k;j+ 1 diffusion ratios T (nn 0 ) (nn 0 ) (nn 0 ) 2 (nn 0 ) 2 Subroutines mcatdr, mtrnpr [21] Eqns. (51)-(56) Z (n) 2 diffusion velocities p; D (nn 0 ) 1;j+ 1 ; : : : ; D (nn <p> D (nn 0 ) 2 diffusion coefficients p; T (nn 0 ) j ; X (nn 0 ) K;j Subroutine mcadif <ref> [21] </ref> Eqns. (48), (49); [3] Eqn. (8) k;j+ 1 diffusion ratios T (nn 0 ) (nn 0 ) (nn 0 ) 2 (nn 0 ) 2 Subroutines mcatdr, mtrnpr [21] Eqns. (51)-(56) Z (n) 2 diffusion velocities p; D (nn 0 ) 1;j+ 1 ; : : : ; D (nn 0 ) 2 ; Subroutine mdifv X (n) K;j ; (n) 2 j+ 1 [21] equations (41), (42), (71)-(73); (nn 0 ) 2 K;j+ 1 [3] Eqns. (6), (7), <p> (nn 0 ) (nn 0 ) 2 (nn 0 ) 2 Subroutines mcatdr, mtrnpr <ref> [21] </ref> Eqns. (51)-(56) Z (n) 2 diffusion velocities p; D (nn 0 ) 1;j+ 1 ; : : : ; D (nn 0 ) 2 ; Subroutine mdifv X (n) K;j ; (n) 2 j+ 1 [21] equations (41), (42), (71)-(73); (nn 0 ) 2 K;j+ 1 [3] Eqns. (6), (7), (9), (14)-(16) j+ 1 mass density p; W (n) 2 (n) 2 Subroutine ckrhoy [19] Eqns. (2) h (n) k;j enthalpies T (n) j Subroutine ckhml c (n) p k;j specific heats T (n) j Subroutine <p> A manual interprocedural analysis of the library procedures called during of the loops over the grid points in fun and consultation of available documentation <ref> [3, 19, 21] </ref> reveals the last argument to each of the called procedures is its sole output argument. These output arguments, along with any variables local to the called procedures in the loop, create memory dependences which inhibit parallelism.
Reference: [22] <author> M. Coltrin, R. Kee, and F. Rupley. </author> <title> Surface CHEMKIN: A FORTRAN package for analyzing heterogeneous chemical kinetics at a solid-surface-gas-phase interface. </title> <type> Technical Report SAND90-8003, </type> <institution> Sandia National Laboratories, </institution> <year> 1990. </year>
Reference-contexts: Three basic tools lie at the heart of their effort. The Chemkin library [19] and the Chemkin Thermodynamic Database [20] are used to analyze gas-phase chemical kinetics. The Transport [21] library is used for evaluating gas-phase multicomponent transport properties. Surfkin <ref> [22] </ref> is a package for analyzing heterogeneous chemical kinetics at a solid-surface - gas-phase interface. These three combustion libraries undergo continual revision as part of an ongoing effort to provide the numerical combustion community with standardized software.
Reference: [23] <author> R. Mitchell and R. Kee. </author> <title> A general-purpose computer code for predicting chemical behavior behind incident and reflected shocks. </title> <type> Technical Report SAND82-8205, </type> <institution> Sandia National Laboratories, </institution> <year> 1982. </year>
Reference-contexts: All are general purpose codes for use in solving a class of combustion problems. A common computational description of the chemical reaction rates is used in all. Simulation of shock heating of a reactive gas mixture is accomplished using Shock <ref> [23] </ref>, a general purpose code for predicting chemical kinetic behavior behind incident and reflected shocks. Spin [24] is used to model one-dimensional rotating-disk or stagnation-flow chemical vapor deposition reactors. Psr [25] predicts the steady-state temperature and species composition in a perfectly stirred reactor.
Reference: [24] <author> M. Coltrin, R. Kee, G. Evans, E. Meeks, F. Rupley, and J. Grcar. </author> <title> SPIN: A FORTRAN program for modeling one-dimensional rotating-disk/stagnation-flow chemical vapor deposition reactors. </title> <type> Technical Report SAND91-8003, </type> <institution> Sandia National Labs, </institution> <year> 1991. </year>
Reference-contexts: A common computational description of the chemical reaction rates is used in all. Simulation of shock heating of a reactive gas mixture is accomplished using Shock [23], a general purpose code for predicting chemical kinetic behavior behind incident and reflected shocks. Spin <ref> [24] </ref> is used to model one-dimensional rotating-disk or stagnation-flow chemical vapor deposition reactors. Psr [25] predicts the steady-state temperature and species composition in a perfectly stirred reactor. Senkin [26], computes the time evolution of a 12 homogeneous reaction gas mixture in a closed system.
Reference: [25] <author> P. Glarborg, R. Kee, J. Grcar, and J. Miller. PSR: </author> <title> A FORTRAN program for modeling well-stirred reactors. </title> <type> Technical Report SAND86-8209, </type> <institution> Sandia National Labs, </institution> <year> 1986. </year>
Reference-contexts: Simulation of shock heating of a reactive gas mixture is accomplished using Shock [23], a general purpose code for predicting chemical kinetic behavior behind incident and reflected shocks. Spin [24] is used to model one-dimensional rotating-disk or stagnation-flow chemical vapor deposition reactors. Psr <ref> [25] </ref> predicts the steady-state temperature and species composition in a perfectly stirred reactor. Senkin [26], computes the time evolution of a 12 homogeneous reaction gas mixture in a closed system.
Reference: [26] <author> A. Lutz, R. Kee, and J. Miller. SENKIN: </author> <title> A FORTRAN program for predicting homogeneous gas phase chemical kinetics with sensitivity analysis. </title> <type> Technical Report SAND87-8248, </type> <institution> Sandia National Laboratories, </institution> <year> 1987. </year>
Reference-contexts: Spin [24] is used to model one-dimensional rotating-disk or stagnation-flow chemical vapor deposition reactors. Psr [25] predicts the steady-state temperature and species composition in a perfectly stirred reactor. Senkin <ref> [26] </ref>, computes the time evolution of a 12 homogeneous reaction gas mixture in a closed system. Premix [3] is used to predict the steady state temperature and species concentrations in one-dimensional burner-stabilized and freely propagating premixed laminar flames.
Reference: [27] <author> J. Miller and C. Bowman. </author> <title> Mechanism and modeling of nitrogen chemistry in combustion. </title> <booktitle> Progress in Energy Combustion Science, </booktitle> <volume> 15 </volume> <pages> 287-338, </pages> <year> 1989. </year>
Reference-contexts: These programs can be used in concert to investigate the properties of a specific class of combustion reactions. For example, Premix, Psr, and Senkin have been used to model nitrogen chemistry in combustion to study, among other things, the environmental impact of the nitrogen compounds emitted from combustion <ref> [27] </ref>. The group at Sandia has developed interests in applications where time to solution is critical, such as CAD environments for designing reactors or pseudo real-time applications such as monitoring reactors. Sequential execution is not fast enough for these applications. <p> Each is a standardized, extensible library intended for use on a wide variety of platforms. The code, approximately thirty thousand lines of standard FORTRAN 77, is highly modular, robust, and portable. A sequential profile for an execution of a nitrogen combustion model <ref> [27] </ref> appears in Figures 2.2 and 2.3. Our testing environment is an Alliant FX/80 with eight processors. Table 2.1 gives the system specifications, and Table 2.2 lists some relevant compiler options. The program spends most of its execution time in routines from the Chemkin and Transport libraries. <p> The high temperatures of a burning flame give rise to many exotic chemical species and complicated chemical reactions. Appendix B lists the species and reactions for the nitrogen chemistry model we used in our study <ref> [27] </ref>. This model has been used throughout this thesis for performance analysis.
Reference: [28] <author> U. Banerjee, R. Eigenmann, A. Nicolau, and D.A. Padua. </author> <title> Automatic program parallelization. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 81(2) </volume> <pages> 211-243, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: In many cases, only a partial ordering is needed at the conceptual level. The role of automatic parallelization technology is to detect the instances where a partial ordering is sufficient. A discussion of this technology can be found in a number of references, including <ref> [10, 28, 29] </ref>. We must therefore make a reasonably sharp distinction between the mathematical model of a problem, the computational method for its solution and the particular implementation of the method.
Reference: [29] <author> D. Padua and M. Wolfe. </author> <title> Advanced compiler optimization for supercomputers. </title> <journal> CACM, </journal> <volume> 29(12) </volume> <pages> 1184-1201, </pages> <month> December, </month> <year> 1986. </year>
Reference-contexts: In many cases, only a partial ordering is needed at the conceptual level. The role of automatic parallelization technology is to detect the instances where a partial ordering is sufficient. A discussion of this technology can be found in a number of references, including <ref> [10, 28, 29] </ref>. We must therefore make a reasonably sharp distinction between the mathematical model of a problem, the computational method for its solution and the particular implementation of the method.
Reference: [30] <author> J. Grcar. </author> <title> The Twopnt program for boundary value problems. </title> <type> Technical Report SAND91-8230, </type> <institution> Sandia National Laboratories, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: It is a flexible code developed to analyze general problems involving combustion of premixed gases in a flame. Figure 2.1 shows the decomposition of Premix into a driver and four libraries: Chemkin [19], used to analyze gas-phase chemical kinetics; Transport [21], used to evaluate gas-phase multicomponent transport properties; Twopnt <ref> [30] </ref>, a two point boundary value problem solver; and Linpack [1], a popular numerical linear algebra package. Each is a standardized, extensible library intended for use on a wide variety of platforms. The code, approximately thirty thousand lines of standard FORTRAN 77, is highly modular, robust, and portable.
Reference: [31] <institution> Alliant Computer Systems Corporation, Acton, MA. FX/FORTRAN Programmer's Handbook, </institution> <year> 1985. </year>
Reference-contexts: fi * fi ' $ Twopnt Linpack Transport Chemkin Premix Driver ckinit mcinit Libraries 15 Machine Alliant FX/80 Organization shared-memory MIMD Operating system Xylem 2 (3) based on Concentrix 3.0 Compiler FX/FORTRAN version 3.1.33 Memory 64mb Cache 128kb I/O processors 6 Computation processors 8 Table 2.1: Configuration of Alliant FX/80 <ref> [31] </ref>. The processors are register-based with chained functional units and memory port. The computation processors are connected by a concurrency bus, which keeps the overhead for concurrency small. <p> Serial -Og sequential optimization Concurrent -Ogc sequential and concurrent optimization Recursive -recursive local variables allocated on the stack Profile -pg produce an execution profile with gprof Table 2.2: FX/FORTRAN compiler flags and their meanings <ref> [31] </ref>. 2.1 Overview of the original code Premix is a typical example of a library-oriented production FORTRAN code. It is a flexible code developed to analyze general problems involving combustion of premixed gases in a flame.
Reference: [32] <author> J. Tyler, A. Bourgoyne, D. Logan, J. Baron, T. Li, and D. Schneider. </author> <title> A vector-parallel version of BOAST II for the IBM 3090. </title> <type> Internal Report, </type> <institution> IBM Kingston, </institution> <year> 1990. </year> <month> 64 </month>
Reference-contexts: report results for vector optimizations, as they invariably resulted in worse execution times.) A description of the mathematical model and the computational method assists in discovering which level of outer loop parallelism is best to obtain a granularity sufficient to saturate available processors with reasonably sized parcels of independent work <ref> [32] </ref>. A mathematical description of the general problem appears in several references [3, 33]. Section 2.1.1 contains a brief review of that description. In Section 2.1.2 we consider the numerical methods incorporated in Premix.
Reference: [33] <author> V. Giovangigli. </author> <title> Convergent iterative methods for multicomponent diffusion. </title> <booktitle> Impact of Computing in Science and Engineering, </booktitle> <volume> 3 </volume> <pages> 244-276, </pages> <year> 1991. </year>
Reference-contexts: A mathematical description of the general problem appears in several references <ref> [3, 33] </ref>. Section 2.1.1 contains a brief review of that description. In Section 2.1.2 we consider the numerical methods incorporated in Premix. In Section 2.1.3 we discuss the granularity of the parallelism inherent to the mathematical model and computational method.
Reference: [34] <author> A. Curtis, M. Powell, and J. Reid. </author> <title> On the estimation of sparse Jacobian matrices. </title> <journal> Journal of the Institute of Mathematics and its Applications, </journal> <volume> 13 </volume> <pages> 117-119, </pages> <year> 1974. </year>
Reference-contexts: Equation 2.31 becomes (n+1) = (n) (n) (J (n) ) 1 F ( (n) ) (2:32) where, 0 &lt; (n) 1, and J (n) = J (n1) or J (n) = @F (2:33) The Jacobian is approximated by a finite difference perturbations suggested in <ref> [34] </ref> J i;j ffi j where ffi j = r j + a (2:35) with the relative and absolute perturbations, r and a respectively, chosen to be the square root of the unit roundoff. Because J is block tridiagonal, several of its columns can be computed simultaneously [35].
Reference: [35] <author> J. Olsson, O. Lindgren, and O. Andersson. </author> <title> Efficient formation of numerical Jacobian used in flame codes. </title> <institution> Combustion Science and Technology, </institution> <year> 1991. </year>
Reference-contexts: Because J is block tridiagonal, several of its columns can be computed simultaneously <ref> [35] </ref>. This is done by perturbing (n) at every third grid point, evaluating the residual, and forming the corresponding diagonal columns of J , as in Figure 2.8.
Reference: [36] <author> P. Deuflhard. </author> <title> A modified newton method for the solution of ill-conditioned systems of nonlinear equations with application to multiple shooting. Numerical Mathematics, </title> <address> 22:289, </address> <year> 1974. </year>
Reference-contexts: Because J is block tridiagonal, several of its columns can be computed simultaneously [35]. This is done by perturbing (n) at every third grid point, evaluating the residual, and forming the corresponding diagonal columns of J , as in Figure 2.8. The criterion <ref> [36] </ref> for accepting (n+1) is a decrease in magnitude of the undamped steps, fi fi 1 fi fi fi fi 1 fi fi If (n+1) is rejected, the step is retried with a halved damping parameter or a new Jacobian matrix.
Reference: [37] <author> D. Kuck, E. Davidson, D. Lawrie, A. Sameh, C.-Q. Zhu, A. Veidenbaum, J. Konicek, P. Yew, K. Gallivan, W. Jalby, H. Wijshoff, R. Bramley, U.M. Yang, P. Emrath, D. Padua, R. Eigenmann, J. Hoeflinger, G. Jaxon, Z. Li, T. Murphy, J. Andrews, and S. Turner. </author> <title> The Cedar system and an initial performance study. </title> <booktitle> Proceedings of the 20th International Symposium on Computer Architecture, </booktitle> <address> San Diego, CA, </address> <month> May 16-19, </month> <year> 1993. </year>
Reference-contexts: Others are not, but several have the form of a reduction, a computational form amenable to partial parallelization. Thus, there exists the potential for several levels of significant parallelism in Premix. The code is therefore well-suited for execution on a hierarchical machine (for example, the CEDAR machine <ref> [37] </ref>). Note the hierarchy is not strict; because Jacobians are reused, a significant number of residual evaluations occur which are not part of the Jacobian evaluation. Table 2.6 gives the proportion of these events for a nitrogen combustion problem.
Reference: [38] <author> E. Organick, A. Forsythe, and R. Plummer. </author> <title> Programming Language Structures. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: The code in module Twopnt forms an independent library; it can be used to solve other problems not related to flames. Twopnt contains a procedure, aptly named twopnt, which is intended to function as a coroutine <ref> [38, 39] </ref> with a user-written routine in the main program. For Premix the coroutine is fldriv, which contains all flame-specific code. After initialization, fldriv is invoked.
Reference: [39] <author> M. Marcotty and H. Ledgard. </author> <title> Programming Language Landscape. </title> <publisher> Macmillan, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1986. </year>
Reference-contexts: The code in module Twopnt forms an independent library; it can be used to solve other problems not related to flames. Twopnt contains a procedure, aptly named twopnt, which is intended to function as a coroutine <ref> [38, 39] </ref> with a user-written routine in the main program. For Premix the coroutine is fldriv, which contains all flame-specific code. After initialization, fldriv is invoked.
Reference: [40] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. DuCroz, A. Greenbaum, S. Ham-marling, A. McKenney, and D. Sorensen. </author> <title> LAPACK: A portable linear algebra library for high-performance computers. </title> <type> Technical Report CS-90-105, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> May </month> <year> 1990. </year>
Reference: [41] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammar-ling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <note> LAPACK Users' Guide. </note> <institution> Society for Industrial and Applied Mathematics, </institution> <address> Philadelphia, </address> <year> 1992. </year>
Reference: [42] <author> E. Anderson and J. Dongarra. </author> <title> Evaluating block algorithm variants in LAPACK. </title> <type> Technical Report CS-90-103, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> April </month> <year> 1990. </year>
Reference: [43] <author> J. Demmel, N. Higham, and R. Schreiber. </author> <title> Block LU factorization. </title> <type> Technical Report CS-90-110, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> February </month> <year> 1992. </year>
Reference: [44] <author> E. Anderson. </author> <title> Robust triangular solves for use in condition estimation. </title> <type> Technical report, </type> <institution> The University of Tennessee, </institution> <month> August </month> <year> 1991. </year>
Reference: [45] <author> J. Demmel and N. Higham. </author> <title> Improved error bounds for underdetermined system solvers. </title> <type> Technical Report CS-90-113, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> August </month> <year> 1990. </year>
Reference: [46] <author> J. Demmel and N. Higham. </author> <title> Stability of block algorithms with fast level 3 BLAS. </title> <type> Technical Report CS-90-110, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> July </month> <year> 1990. </year>
Reference: [47] <author> J. Demmel, J. Dongarra, and W. Kahan. </author> <title> On designing portable high performance numerical libraries. </title> <type> Technical Report CS-90-110, </type> <institution> The University of Tennessee Computer Science Department, </institution> <month> March </month> <year> 1992. </year>
Reference: [48] <author> S. Wright. </author> <title> Stable parallel algorithms for two-point boundary value problems. </title> <journal> SIAM Journal on Scientific and Statistical Computing, </journal> <year> 1992. </year>
Reference-contexts: However, the present version of the factor and backsolve routines did not produce any performance improvement in the optimized version of Premix). 2 Some discussion of parallel methods for solving two point boundary value problems can be found in <ref> [48] </ref>.
Reference: [49] <author> S. Wright. </author> <title> Parallel algorithms for banded linear systems. </title> <journal> SIAM Journal on Scietific and Statistical Computing, </journal> <volume> 12(4) </volume> <pages> 824-842, </pages> <month> July </month> <year> 1991. </year> <month> 65 </month>
Reference-contexts: Parallel algorithms for banded linear systems such as the block tridiagonal system in Premix are explored in <ref> [49] </ref>. 50 2 6 S e d p Number of processors fl ideal predicted (95% parallel) * optimized (fortran -Ogc [-recursive]) ffi original version (fortran -Ogc) * * * * fl fl fl fl ffi ffi ffi ffi ffi ffi an Alliant FX/80 with the FX/FORTRAN parallelizing compiler.
Reference: [50] <author> T. Coffee and J. Heimerl. </author> <title> Transport algorithms for premixed laminar, steady-state flames. </title> <journal> Com--bustion and Flame, </journal> <volume> 43(273), </volume> <year> 1981. </year> <note> [51] ed. </note> <author> E. Clementi. </author> <title> Modern Techniques in Computational Chemistry: </title> <publisher> MOTECC-89. ESCOM, </publisher> <year> 1989. </year>
Reference-contexts: The convective terms of equations (2.2) and (2.3), can be discretized by either windward or central differences. The effect of thermal diffusion can be included or neglected. Thermodynamic properties are computed using either multicomponent or mixture averaged 52 formulas. The "conservation diffusion velocity" recommended by <ref> [50] </ref> can be included to enforce species conservation. Temperatures can be determined from an a priori profile or computed from the coupled energy-species equations (2.2). Tolerances can be specified, as can the number of time integrations. Keywords included in the input file select which kind of problem to solve.
Reference: [52] <author> S. Chin, E. Cleminti, G. Corongui, M. Dupuis, D. Frye, D. Logan, A. Mohanty, and V. Sonnad. MOTECC-89: </author> <title> Input/Output Documentation. </title> <institution> IBM Corp., Kingston, </institution> <address> NY 12401, </address> <year> 1990. </year>
Reference-contexts: An example is the "dynamic" working storage allocation scheme used by Chemkin and Transport. This is really the only way to produce a general FORTRAN program which is both flexible and portable. The same scheme is used by many quantum chemistry codes such as Hondo <ref> [51, 52] </ref> and several codes in the Perfect Club Benchmarks R fl suite [53] such as Adm and Trfd.
Reference: [53] <author> M. Berry, D. Chen, P. Koss, D. Kuck, L. Pointer, S. Lo, Y. Pang, R. Roloff, A. Sameh, E. Clementi, S. Chin, D. Schneider, G. Fox, P. Messina, D. Walker, C. Hsiung, J. Schwarzmeier, K. Lue, S. Orszag, F. Seidl, O. Johnson, G. Swanson, R. Goodrum, and J. Martin. </author> <title> The Perfect Club R fl Benchmarks: Effective performance evaluation of supercomputers. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 3(3) </volume> <pages> 5-40, </pages> <month> Fall </month> <year> 1989. </year>
Reference-contexts: This is really the only way to produce a general FORTRAN program which is both flexible and portable. The same scheme is used by many quantum chemistry codes such as Hondo [51, 52] and several codes in the Perfect Club Benchmarks R fl suite <ref> [53] </ref> such as Adm and Trfd. Once this storage allocation scheme is reconized, we can be reasonably sure that array section boundaries will be respected. 58 3.3 Automatability For each candidate loop we must analyze any called procedures to determine how their arguments are used.

References-found: 52

