URL: http://kirmes.inferenzsysteme.informatik.tu-darmstadt.de/~reports/notes/ibn-94-15.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fstefan|nolteg@inferenzsysteme.informatik.th-darmstadt.de  
Title: Choosing Induction Relations Automatically  
Author: Stefan Gerberding and Axel Noltemeier 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: Technical University of Darmstadt Dept. of Computer Science  
Abstract: To achieve this goal Walther introduced the containment test to check whether relations are contained in one another and the quasi-commutation test which is used to prove the union of two well-founded relations well-founded. Both test methods work by proving the validity of some first-order formula in the initial model of the specification. Since both tests are relatively expensive it is important to use as much additional information about the relations as possible to avoid unnecessary tests. In this paper we present a heuristic to control the search for an induction relation as large as possible. Using our heuristic an optimal sequence of Walther's test methods is computed in most cases which avoids many computational expensive tests which would have been necessary if a nave approach would have been taken instead.
Abstract-found: 1
Intro-found: 1
Reference: [Aubin, 1979] <author> Raymond Aubin. </author> <title> Mechanizing structural induction. </title> <journal> Theoretical Computer Science, </journal> <volume> 9 </volume> <pages> 329-362, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction and Motivation Mathematical induction is an essential proof technique not only in various fields of mathematics but also in automated program verification, in deductive plan formation and other areas of AI. The automation of explicit induction has been investigated by <ref> [Burstall, 1969, Aubin, 1979, Boyer & Moore, 1979] </ref> and [Walther, 1994] among others.
Reference: [Bachmair & Dershowitz, 1986] <author> Leo Bachmair & Nachum Dershowitz. </author> <title> Commutation, transformation, and termination. </title> <booktitle> In Proceedings of the 8th International Conference on Automated Deduction, </booktitle> <address> Oxford, UK. </address> <publisher> Springer, </publisher> <year> 1986. </year>
Reference-contexts: The idea is to compute a formula whose inductive validity is sufficient for the well-foundedness of the union. Walther's method uses the notion of quasi-commutation of two relations introduced in <ref> [Bachmair & Dershowitz, 1986] </ref>. A relation &lt; 1 quasi-commutes over another relation &lt; 2 iff for all q; t; r with q &lt; 2 t &lt; 1 r some t 0 exists such that q (&lt; 1 [ &lt; 2 ) fl t 0 &lt; 2 r.
Reference: [Boyer & Moore, 1979] <author> Robert S. Boyer & J Strother Moore. </author> <title> A Computational Logic. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction and Motivation Mathematical induction is an essential proof technique not only in various fields of mathematics but also in automated program verification, in deductive plan formation and other areas of AI. The automation of explicit induction has been investigated by <ref> [Burstall, 1969, Aubin, 1979, Boyer & Moore, 1979] </ref> and [Walther, 1994] among others. <p> The operation of an automated induction theorem proving system can be sketched as follows: To prove some conjecture the induction heuristic suggests various relation descriptions known 1 to the system in order to compute induction formulas from them, cf. <ref> [Boyer & Moore, 1979, Bundy et al., 1989, Walther, 1994] </ref>. By recognizing function occurrences in the conjecture (recursion analysis) relation descriptions associated with the functions are selected from the set of well-founded relation descriptions. <p> Concepts like the notion of flawed induction schemes and the tie-breaking rules from <ref> [Boyer & Moore, 1979] </ref> may become useful here.
Reference: [Bundy et al., 1989] <author> Alan Bundy, Frank van Harmelen, Jane Hesketh, Alan Smail, & Andrew Stevens. </author> <title> A rational reconstruction and extension of recursion analysis. </title> <booktitle> In Proceedings of the 11th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 359-365. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: The operation of an automated induction theorem proving system can be sketched as follows: To prove some conjecture the induction heuristic suggests various relation descriptions known 1 to the system in order to compute induction formulas from them, cf. <ref> [Boyer & Moore, 1979, Bundy et al., 1989, Walther, 1994] </ref>. By recognizing function occurrences in the conjecture (recursion analysis) relation descriptions associated with the functions are selected from the set of well-founded relation descriptions.
Reference: [Burstall, 1969] <author> R. M. Burstall. </author> <title> Proving properties of programs by structural induction. </title> <journal> Comput. J., </journal> <volume> 12(1), </volume> <year> 1969. </year>
Reference-contexts: 1 Introduction and Motivation Mathematical induction is an essential proof technique not only in various fields of mathematics but also in automated program verification, in deductive plan formation and other areas of AI. The automation of explicit induction has been investigated by <ref> [Burstall, 1969, Aubin, 1979, Boyer & Moore, 1979] </ref> and [Walther, 1994] among others.
Reference: [Gerberding & Noltemeier, 1994] <author> Stefan Gerberding & Axel Noltemeier. </author> <title> Utilizing transitivity in containment tests. </title> <type> Technical report, </type> <institution> Technische Hochschule Darm-stadt, </institution> <month> November </month> <year> 1994. </year> <month> IBN-94-20. </month>
Reference-contexts: This is done by a clever graph expansion algorithm which computes the graph representing the containment relation. Due to lack of space we refer to <ref> [Gerberding & Noltemeier, 1994] </ref> for details. 3.2 Computing the Schedule Following our observation that the majority of unions is not well-founded we try to combine relation descriptions resulting in a smaller union first.
Reference: [Gerberding, 1994] <author> Stefan Gerberding. </author> <title> A rational reconstruction of partial substitutions. </title> <type> Technical report, </type> <institution> Technische Hochschule Darmstadt, </institution> <year> 1994. </year> <month> IBN-94-19. </month>
Reference-contexts: For a variable y =2 dom (ffi) the result of applying ffi to y is ffi (y) = ! for a fresh don't-care variable ! 2 . For details concerning the semantics of the -variables we refer to <ref> [Gerberding, 1994] </ref>. 3 2.1 Comparing Relations The containment relation is an extension of the subset relation.
Reference: [Walther, 1992] <author> Christoph Walther. </author> <title> Computing induction axioms. </title> <booktitle> In Proceedings of the Conference on Logic Programming and Automated reasoning (LPAR-92), </booktitle> <address> St. Petersburg, </address> <publisher> LNAI 624. Springer, </publisher> <year> 1992. </year>
Reference-contexts: This is called the subset principle. A sufficient criterion for proving &lt; 1 &lt; 2 is the containment test described in <ref> [Walther, 1992] </ref>. In section 2 we will introduce the notion of relation descriptions which are syntactical representations of relations. The containment test computes a formula from the relation descriptions of &lt; 1 and &lt; 2 whose inductive validity is sufficient for &lt; 1 &lt; 2 . <p> Furthermore the unions of every pair of those relation descriptions cannot be proved to be well-founded. One of those is chosen as induction relation and the induction formulas are computed as described in <ref> [Walther, 1992] </ref>. Our heuristic has been implemented in the automated induction theorem proving system inka. 2 Relation Descriptions Relation descriptions are a syntactical means to represent relations. They are computed automatically from data structure definitions and from information gathered during the termination proofs of the functions, cf. [Walther, 1992]. <p> as described in <ref> [Walther, 1992] </ref>. Our heuristic has been implemented in the automated induction theorem proving system inka. 2 Relation Descriptions Relation descriptions are a syntactical means to represent relations. They are computed automatically from data structure definitions and from information gathered during the termination proofs of the functions, cf. [Walther, 1992]. Example 2.1 Let nat be the data structure modeling the positive integers. <p> For the above example this means that &lt; A 0 is extended to a relation on nat 4 . The extended relation is comparable with &lt; B 0 wrt. . We write &lt; A 0 v &lt; B 0 or AvB. In <ref> [Walther, 1992] </ref> a sufficient condition is introduced to test whether XvY holds for two relation descriptions X and Y . The test consists of the inductive validity proof of the so-called containment formula for XvY . <p> The validity of (2) is easily proved by propositional reasoning therefore DvE is established. The containment formula for any two relation descriptions D 1 , D 2 can be computed in a uniform way. The validity of that formula is sufficient for D 1 vD 2 , cf. <ref> [Walther, 1992] </ref>. 2.2 Combining Relations Following the subset principle introduced in section 1 we want to use well-founded induction relations as large as possible. One way to obtain larger relations from known ones is to use the unions of the relations. <p> But it is advantageous to use the representation AD (the separated union) instead of A [ B, because 4 more induction hypotheses are available when using AD as description for an induction relation, because the cases are mutually exclusive and therefore the range formulas provide more information, cf. <ref> [Walther, 1992] </ref>. In general the union of two well-founded relations is not well-founded. We therefore have to prove the well-foundedness of the union before using it as a relation in an inductive proof. <p> Therefore the combination of C and E is canceled. combine returns CR = (AE). There is no recursive call to compute Ind Rel in our example. 4 Conclusion and Future Work We have shown how the methods introduced in <ref> [Walther, 1992, Walther, 1993] </ref> can be efficiently implemented in an induction theorem proving system. Our example has demonstrated that many computationally expensive quasi-commutation tests can be avoided by using the information supplied by the containment relation.
Reference: [Walther, 1993] <author> Christoph Walther. </author> <title> Combining induction axioms by machine. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence, Chambery, France, </booktitle> <volume> volume 1, </volume> <pages> pages 95-101. </pages> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: A sufficient criterion for proving the well-foundedness of &lt; 1 [ &lt; 2 is the quasi-commutation test , <ref> [Walther, 1993] </ref>. Again formulas are computed whose validity is sufficient for &lt; 1 [ &lt; 2 to be well-founded, cf. section 2.2. <p> In general the union of two well-founded relations is not well-founded. We therefore have to prove the well-foundedness of the union before using it as a relation in an inductive proof. In <ref> [Walther, 1993] </ref> a method to prove the well-foundedness of the union of two well-founded relations (which is undecidable in general) has been invented. The idea is to compute a formula whose inductive validity is sufficient for the well-foundedness of the union. <p> Therefore the combination of C and E is canceled. combine returns CR = (AE). There is no recursive call to compute Ind Rel in our example. 4 Conclusion and Future Work We have shown how the methods introduced in <ref> [Walther, 1992, Walther, 1993] </ref> can be efficiently implemented in an induction theorem proving system. Our example has demonstrated that many computationally expensive quasi-commutation tests can be avoided by using the information supplied by the containment relation.
Reference: [Walther, 1994] <author> Christoph Walther. </author> <title> Mathematical induction. </title> <editor> In D. M. Gabbay, C. J. Hogger, & J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 2. </volume> <publisher> Oxford University Press, </publisher> <year> 1994. </year> <month> 12 </month>
Reference-contexts: The automation of explicit induction has been investigated by [Burstall, 1969, Aubin, 1979, Boyer & Moore, 1979] and <ref> [Walther, 1994] </ref> among others. <p> The operation of an automated induction theorem proving system can be sketched as follows: To prove some conjecture the induction heuristic suggests various relation descriptions known 1 to the system in order to compute induction formulas from them, cf. <ref> [Boyer & Moore, 1979, Bundy et al., 1989, Walther, 1994] </ref>. By recognizing function occurrences in the conjecture (recursion analysis) relation descriptions associated with the functions are selected from the set of well-founded relation descriptions.
References-found: 10

