URL: http://www.win.tue.nl/cs/fm/timw/omrr_protocol.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/timw/
Root-URL: http://www.win.tue.nl
Author: Advisors Ir. A. Klomp and Dr.ir J.Tretmans 
Degree: MASTER'S THESIS The Specification and Validation of the OM/RR-Protocol by T.A.C. Willemse Supervisor Prof.dr. J.C.M. Baeten  
Date: June 1998  
Affiliation: EINDHOVEN UNIVERSITY OF TECHNOLOGY Department of Mathematics and Computing Science  
Abstract-found: 0
Intro-found: 1
Reference: [AVV97] <institution> AVV. OM/RR and Association Management Specifications, </institution> <month> July </month> <year> 1997. </year>
Reference-contexts: This data communications protocol was christened the OM/RR protocol. The OM/RR-protocol is, according to <ref> [AVV97] </ref>, a two layered data communications protocol, loosely modelled after the OSI's CMIS [ISO90b], CMIP [ISO90a] and some parts of System Management [ISO90d] for the OM-layer, and OSI Remote Operation [ISO90c] for the RR-layer. <p> Finally, in Section 2.3, the dynamic behaviour of the OM-service model will be described using Lotos. 2.1 The OM-service Provider and the OM-service Users The service users for the OM/RR-service are, according to <ref> [AVV97] </ref>, Managed Objects. The definition for a Managed Object is: Definition 2.1 (Managed Object) A Managed Object is the management view of a resource. This definition, however, will not have any impact on the work presented here, as it is too obscure and in essence can mean anything. <p> Usually, a distinction can be made between binary and multiple associations. This distinction will have its impact in the dynamic specification of the OM-service. As was understood within CMG, and was hinted at in <ref> [AVV97] </ref>, an association involved only two Managed Objects, and as such associations are hereafter considered binary. The definition for an association, used in this report is as follows: Definition 2.2 (Association) A relation between two different Managed Objects and the OM-service provider. <p> Often, this initiative plays a role during the lifetime of the association, and as such, it is easy to make a distinction between the Managed Object initiating the association and the Managed Object responding to the initiation. In <ref> [AVV97] </ref>, 6 both the terms Invoker and Performer, and Initiator and Responder are coined, yet the relation between them is unclear. Because of this uncertainty, it has been decided to use neither terms, but introduce new terms that will be defined uniquely. <p> The environment of the OM-service is depicted in figure 2.2. Both Manager and Agent are OM-service users. The protocol stack used in this thesis (see figure 2.3) differs from the one given in <ref> [AVV97] </ref> (see figure 2.4). <p> depicted in figure 2.3, is how the original protocol stack was interpreted within CMG. this report to AVV The service which the fifth and sixth layer of the OSI-model | the session and the presentation layer | are supposed to offer is only informally described in a few sentences in <ref> [AVV97] </ref>. The presentation layer is described as being able to code and decode PDUs and the session layer is described to use "sockets". <p> No specification of these layers could be found, and this is thus considered to be an omission of the OM/RR-protocol specifications. 2.2 Determining the Service Elements and Service Primi tives for the OM-service This Section deals with the service elements described in <ref> [AVV97] </ref>. In [Kap91], as well as in [AVV97] a distinction is made between two types of service the OM-service offers to its users: * a Management Operation Service (MOS). * the Management Notification Service (MNS). <p> No specification of these layers could be found, and this is thus considered to be an omission of the OM/RR-protocol specifications. 2.2 Determining the Service Elements and Service Primi tives for the OM-service This Section deals with the service elements described in <ref> [AVV97] </ref>. In [Kap91], as well as in [AVV97] a distinction is made between two types of service the OM-service offers to its users: * a Management Operation Service (MOS). * the Management Notification Service (MNS). <p> Besides this difference in the optic of management, there is a difference in the initiation of the MOS and the MNS. The Manager is allowed to initiate both MOS and MNS, whereas the Agent is only allowed to initiate the MNS. This is not explicitly stated in <ref> [AVV97] </ref>, but has been assumed, as this was the case in [Kap91]. The following Sections will discuss the MOS and the MNS in greater detail. 2.2.1 The MOS The service provided by the MOS is used to manage and control objects. The service elements that can be distinguished, according to [AVV97] <p> <ref> [AVV97] </ref>, but has been assumed, as this was the case in [Kap91]. The following Sections will discuss the MOS and the MNS in greater detail. 2.2.1 The MOS The service provided by the MOS is used to manage and control objects. The service elements that can be distinguished, according to [AVV97] are the following: 8 get, set, action, create, delete. Furthermore, according to [AVV97], the following distinction can be made: * The get, set, action, create and delete service elements are all user confirmed service elements. * The set service element can also be an unconfirmed service element. <p> The service elements that can be distinguished, according to <ref> [AVV97] </ref> are the following: 8 get, set, action, create, delete. Furthermore, according to [AVV97], the following distinction can be made: * The get, set, action, create and delete service elements are all user confirmed service elements. * The set service element can also be an unconfirmed service element. <p> These service elements can be parameterized with specific operations, both Manager and Agent have agreed upon. In this thesis, the MOS shall be extended with two more service elements: the enable and the disable service elements, which, according to <ref> [AVV97] </ref> are parameters for the action service elements. A time-sequence diagram in [AVV97] (pages 56-57), however, describes a provider confirmed service for these specific parameters, instead of a user confirmed service. <p> In this thesis, the MOS shall be extended with two more service elements: the enable and the disable service elements, which, according to <ref> [AVV97] </ref> are parameters for the action service elements. A time-sequence diagram in [AVV97] (pages 56-57), however, describes a provider confirmed service for these specific parameters, instead of a user confirmed service. <p> The set of service elements providing the MOS now is the following: get, cset, uset, action, create, delete, enable, disable. These service elements have different meanings as to what purpose they are used for. These purposes are described in <ref> [AVV97] </ref> as follows: * A Manager issues a get in order to obtain the attributes of the Agent. * A Manager uses a cset, to set the attributes of the Agent and information concerning the operation is returned to the Manager. * A Manager uses a uset, to set the attributes <p> Table 2.1 shows the relationship between the service primitives and the corresponding service element, and the kind of service that is offered. Note that this table does not specify any dynamic behaviour. The <ref> [AVV97] </ref> document is very vague about the effects of the service elements on the behaviour of the OM/RR-protocol itself. <p> The <ref> [AVV97] </ref> document describes four kinds of report service elements. The impact these reports have on the service provider is not clear. Therefore, for the time being, it is assumed there is no impact. <p> Therefore, for the time being, it is assumed there is no impact. As a result, these four different report service elements are mapped onto a generic report service element, that represents all four kinds of report service elements. Furthermore the <ref> [AVV97] </ref> document states that these reports can either be classified as addressed or non-addressed. Finally, a notification service element is introduced. This notification is used by Managers to notify other Managed Objects in the role of Managers, that a report received earlier has been read. <p> This notification service element is non-addressed. The total set of service elements then is the following set: addressed report, non addressed report, non addressed notification. role of an Agent to Managed Objects in the role of Managers. Note that some form of broadcast is suggested. In <ref> [AVV97] </ref> the term subscription is coined. This term is used to distinguish between Managers which are capable of receiving non-addressed reports from their Agent, and Managers which are capable of receiving addressed reports only. <p> In order to enable the subscribers to inform the other subscribed Managed Objects, a non-addressed notification is used. Here a problem emerges: the term subscription is not defined in <ref> [AVV97] </ref> (nor in any other document). Due to this gap no proper relationship between the users of the non-addressed report and notification service can be described. <p> Moreover, this "permit", is assumed to be something that can be verified. This definition however, is too vague to be used in a model. For instance, the permission mechanism should be defined. Furthermore, the dynamic behaviour of the non-addressed report service is not described in <ref> [AVV97] </ref>. It is unclear whether it acts either as the "addressed" report service (in this case the Agent is responsible for distributing the non-addressed reports to the Managers), or as a "broadcast" report service (in this case the OM-service is responsible for distributing the non-addressed reports to the subscribed Managers). <p> It follows that the OM-service must somehow be able to access the information concerning these receivers in order to deliver the report to them. The use of multiple associations, however, is not in line with both <ref> [AVV97] </ref> and [Kap91], since in both documents a binary association is suggested. As a consequence, the non-addressed -report and -notification service, under the assumption that they cannot be described by the addressed services, cannot be supported. <p> Another solution could be to describe multiple associations instead of the binary association, but this would no longer be in accordance with <ref> [AVV97] </ref>. In this document, the first solution shall be adopted, since no guidelines can be found in [AVV97] concerning this matter. <p> Another solution could be to describe multiple associations instead of the binary association, but this would no longer be in accordance with <ref> [AVV97] </ref>. In this document, the first solution shall be adopted, since no guidelines can be found in [AVV97] concerning this matter. Two consequences follow from adopting this solution: * The non-addressed notification service element is replaced with an addressed notification service element that uses only one association. * The OM-service must allow for both the Manager and the Agent to initiate the notification service. <p> Another issue is, that, strange as it may seem, no causality between reports and notifications is described in <ref> [AVV97] </ref>, thus allowing for the following "anomaly": Suppose Agent A has two subscribers, Managers B and C. Now a non-addressed report is sent (either by the responsibility of the OM-service or the Agent), which arrives at C much later than at B. <p> The non-addressed service elements cannot be offered, and as such, the complete set of service elements belonging to the MNS is the following: report, notification Clearly, both MNS service elements are unconfirmed service elements, as described in <ref> [AVV97] </ref>. Table 2.3 lists the service elements and the corresponding service primitives offered in the MNS as it will be modelled. In the model under consideration in this report, the MNS is further restricted to only one service element: the report service element. This is done for reasons of conciseness. <p> Some of these requirements have been assumed, others can be found (implicitly or explicitly) in <ref> [AVV97] </ref>. The list below describes these requirements: 1. An Association can be identified by its Manager and its Agent (thus the tuple (Man ager,Agent) uniquely identifies the association) | This has been assumed. 2. Once an association is established, it can only be relinquished by a disable request. <p> Once an association is established, it can only be relinquished by a disable request. This disable request can be issued both by the Manager and by the Agent and always succeeds | <ref> [AVV97] </ref>. 3. A service provider initiated termination is allowed | assumed. 4. Associations can only be set up between existing, different Managed Objects | assumed. 19 5. Both the disable indication and the disable confirmation denote the definite end of the corresponding association. | [AVV97] 6. <p> the Agent and always succeeds | <ref> [AVV97] </ref>. 3. A service provider initiated termination is allowed | assumed. 4. Associations can only be set up between existing, different Managed Objects | assumed. 19 5. Both the disable indication and the disable confirmation denote the definite end of the corresponding association. | [AVV97] 6. Message reordering is allowed. | [AVV97] These requirements are stated in the following top level process: BEHAVIOUR association [OSAP] (AID (offset,neighbour)) WHERE One of the requirements omitted in this OM-service model is the possibility of having a number of concurrent associations. <p> A service provider initiated termination is allowed | assumed. 4. Associations can only be set up between existing, different Managed Objects | assumed. 19 5. Both the disable indication and the disable confirmation denote the definite end of the corresponding association. | <ref> [AVV97] </ref> 6. Message reordering is allowed. | [AVV97] These requirements are stated in the following top level process: BEHAVIOUR association [OSAP] (AID (offset,neighbour)) WHERE One of the requirements omitted in this OM-service model is the possibility of having a number of concurrent associations. The OM-service model describes only one association between two different OM-protocol entities. <p> This interferes with the disable indication that is the result of a previously communicated disable request. 2.4 Summary In this Chapter the OM-service model was presented. The information found in Sections 2.1 and 2.2 was mainly based on <ref> [AVV97] </ref>, and [Kap91]. Section 2.3 was based on an OM-service specification in Lotos, made first, which can be found in Appendix A. This specification was based on requirements found in [AVV97], knowledge within CMG and some assumptions based on common sense. <p> The information found in Sections 2.1 and 2.2 was mainly based on <ref> [AVV97] </ref>, and [Kap91]. Section 2.3 was based on an OM-service specification in Lotos, made first, which can be found in Appendix A. This specification was based on requirements found in [AVV97], knowledge within CMG and some assumptions based on common sense. <p> Furthermore, the RR protocol layer supports the exchange of event reports and notification reports. To this purpose, six service elements are defined in <ref> [AVV97] </ref>, being the following : invoke, result, error, reject, addressed eventreport, non-addressed eventreport, notification. Again, in [AVV97] a distinction is made between, in this case, addressed eventreports and non-addressed eventreports. The notification service element again is only non-addressed. <p> Furthermore, the RR protocol layer supports the exchange of event reports and notification reports. To this purpose, six service elements are defined in <ref> [AVV97] </ref>, being the following : invoke, result, error, reject, addressed eventreport, non-addressed eventreport, notification. Again, in [AVV97] a distinction is made between, in this case, addressed eventreports and non-addressed eventreports. The notification service element again is only non-addressed. Subscriptions are used to determine which protocol entities are to receive these non-addressed eventreports and notifications. <p> The notification service element again is only non-addressed. Subscriptions are used to determine which protocol entities are to receive these non-addressed eventreports and notifications. Although now described at a lower level, these service elements still cause the same problems as before in chapter 2. Due to the underspecification in <ref> [AVV97] </ref>, in this thesis the non-addressed eventreport service element shall be omitted and the notification service element is considered to be addressed only. In [AVV97], again no distinction is made between the notion of service-elements and service-primitives, and the kind of service that is provided is not mentioned. <p> Although now described at a lower level, these service elements still cause the same problems as before in chapter 2. Due to the underspecification in <ref> [AVV97] </ref>, in this thesis the non-addressed eventreport service element shall be omitted and the notification service element is considered to be addressed only. In [AVV97], again no distinction is made between the notion of service-elements and service-primitives, and the kind of service that is provided is not mentioned. It is assumed that an unconfirmed service is used. <p> It is assumed that an unconfirmed service is used. Since the RR-service is situated on top of a TCP/IP network, it is assumed, the RR-service offers reliable data transmission. According to <ref> [AVV97] </ref>, a connectionless service is offered. The terminology used in [AVV97] is as follows: an invoker is a protocol entity that initiated an invoke request carrying a specific operation and a performer is the protocol entity that is to perform an operation carried by an invoke service element. <p> It is assumed that an unconfirmed service is used. Since the RR-service is situated on top of a TCP/IP network, it is assumed, the RR-service offers reliable data transmission. According to <ref> [AVV97] </ref>, a connectionless service is offered. The terminology used in [AVV97] is as follows: an invoker is a protocol entity that initiated an invoke request carrying a specific operation and a performer is the protocol entity that is to perform an operation carried by an invoke service element. The meaning associated to the service elements is, according to [AVV97] as follows: <p> used in <ref> [AVV97] </ref> is as follows: an invoker is a protocol entity that initiated an invoke request carrying a specific operation and a performer is the protocol entity that is to perform an operation carried by an invoke service element. The meaning associated to the service elements is, according to [AVV97] as follows: * The invoke service element is used by the invoker to send an invoke request to a specific 29 Service Element Service Primitive type of service invoke invoke.req unconfirmed invoke.ind result result.req unconfirmed result.ind error error.req unconfirmed error.ind reject reject.req unconfirmed reject.ind eventreport eventreport.req unconfirmed eventreport.ind notification notification.req <p> A second alteration that is made is the omission of the error service element. This is done because it is felt that the distinction between the result service element and the error service element, as specified in <ref> [AVV97] </ref>, is made at a level too low: the OM-protocol entities are not performing operations, instead the OM-service users are performing operations. Thus, to the OM-protocol entities, it is of no importance whether the results of an operation are communicated utilizing error service elements or result service elements. <p> Tuplet Map (Uset) = One; Map (Enable) = Two; Map (Disable) = Three; Map (Report) = Four; Map (Get) = Five; ENDTYPE (* OMPDU_Classification *) This concludes the Abstract Data Types definitions for the RR-service model specification. 3.2.2 The Dynamic Behaviour of the RR-service Model The RR-service, as described in <ref> [AVV97] </ref>, is a connectionless service which offers reliable data communications to take place, and it depends on the underlying layers to do so. A connection-less service dictates that two subsequent messages sent from A to B can involve message reordering. <p> Note that a constraint oriented specification is given in Section 3.2.2 but the RR-service model could equally well have been described using the monolythic specification style. Section 3.1 is mainly based on <ref> [AVV97] </ref>. Some adaptions were made in the service specification (e.g. the non-addressed service elements were omitted), since [AVV97] was too obscure concerning the specification of these service elements. <p> Note that a constraint oriented specification is given in Section 3.2.2 but the RR-service model could equally well have been described using the monolythic specification style. Section 3.1 is mainly based on <ref> [AVV97] </ref>. Some adaptions were made in the service specification (e.g. the non-addressed service elements were omitted), since [AVV97] was too obscure concerning the specification of these service elements. <p> None of these requirements have been found in <ref> [AVV97] </ref>, since no requirements for the OM-protocol entity were stated in [AVV97]. Therefore, all requirements have been assumed, yet these assumptions are based on one or more arguments. The following list states the requirements, and the arguments for assuming this is required. 1. <p> None of these requirements have been found in <ref> [AVV97] </ref>, since no requirements for the OM-protocol entity were stated in [AVV97]. Therefore, all requirements have been assumed, yet these assumptions are based on one or more arguments. The following list states the requirements, and the arguments for assuming this is required. 1. It is assumed the OM-protocol entity accesses the RR-service using only one Service Access Point. <p> These initial specifications, described in full-Lotos, represented the information found in <ref> [AVV97] </ref> and some additional requirements (see Appendices A and B for the specifications and the requirements). A first step in the validation of these specifications was to check the syntax and the static semantics of the Lotos-descriptions. Lite was used to check for this automatically. <p> Finally, Section 6.5 gives an overview for issues for further research. 6.1 Formalizing Informal Documents This thesis is based on documents written by AVV, and in particular on the document <ref> [AVV97] </ref>. One of the major omissions in this latter document is, as already mentioned, the lack of specifications concerning the dynamic behaviour of the OM/RR-data communications protocol. This omission formed the starting point for the investigation for this thesis. Another omission, not noticed until a thorough study was made of [AVV97], <p> <ref> [AVV97] </ref>. One of the major omissions in this latter document is, as already mentioned, the lack of specifications concerning the dynamic behaviour of the OM/RR-data communications protocol. This omission formed the starting point for the investigation for this thesis. Another omission, not noticed until a thorough study was made of [AVV97], is the lack of requirements the OM/RR-protocol has to adhere to. Requirements are felt to be at the heart of both formal specifications and informal specifications for any system. <p> This is because the requirements state what the demands are for the system and what the system's users expects the system to do. As such, these requirements are essential for writing service specifications, arguing about these specifications, validating these specifications and testing implementations for these specifications. Requirements found in <ref> [AVV97] </ref>, and related documents were mostly concerned with the performance aspects of the systems instead of functional requirements. Although important as well, this reflects only a minor part of the requirements needed to design or specify the actual system. Since no dynamic behaviour was specified in [AVV97] on the one hand, <p> Requirements found in <ref> [AVV97] </ref>, and related documents were mostly concerned with the performance aspects of the systems instead of functional requirements. Although important as well, this reflects only a minor part of the requirements needed to design or specify the actual system. Since no dynamic behaviour was specified in [AVV97] on the one hand, and hardly any requirements regarding the behaviour of the OM/RR-protocol could be found on the other hand, the specifications and the models described in this thesis can only be considered to be a first step towards a real specification. <p> Most notably are the underspeci--fication concerning the OM/RR-protocol and the lack of documents relating to the authorization protocol. 6.2 Relation with Respect to AVV The formal specification for the OM/RR-protocol was to be based on the documents written by AVV, in particular <ref> [AVV97] </ref>. Soon, it was understood, as mentioned in Section 6.1 that these document alone were not a sufficient basis for this task. Although knowledge of some of the requirements concerning the OM/RR-protocol was available within CMG, several questions remained unanswered. <p> With respect to the dynamic behaviour of the RR-service layer, the Routing Support Agents (RSAs), described in one of the documents for the OSS, can be taken as a guideline. Other, conceptual changes are the terminology used in <ref> [AVV97] </ref> and this thesis. It was found out, that the Invoker and Performer, described in [AVV97], are equivalent to the Manager and Agent, described in this thesis. The Initiator and Responder then are terms used for the (connection-oriented) RR-service layer. <p> Other, conceptual changes are the terminology used in <ref> [AVV97] </ref> and this thesis. It was found out, that the Invoker and Performer, described in [AVV97], are equivalent to the Manager and Agent, described in this thesis. The Initiator and Responder then are terms used for the (connection-oriented) RR-service layer. Besides these changes, several obscurities remain: 71 * The notion of subscribers on the level of the RR-service layer is still unclear. <p> It is hard to say which of these two approaches is best. Probably a mixture of both approaches yields the best (and fastest) results. 73 Appendix A The OM-Service Specification The requirements that can be found (although in no case, explicitly formulated) in <ref> [AVV97] </ref>, or have been assumed, are the following : 1. A number of concurrent Associations are to be provided by the OM Service Provider | [AVV97]. 2. <p> yields the best (and fastest) results. 73 Appendix A The OM-Service Specification The requirements that can be found (although in no case, explicitly formulated) in <ref> [AVV97] </ref>, or have been assumed, are the following : 1. A number of concurrent Associations are to be provided by the OM Service Provider | [AVV97]. 2. An Association can be identified by its Manager and its Agent (thus the tuple (Manager,Agent) uniquely identifies the association) | This has been assumed |as stated before, [AVV97] does not acknowledge the roles of Managers and Agents |. 3. <p> A number of concurrent Associations are to be provided by the OM Service Provider | <ref> [AVV97] </ref>. 2. An Association can be identified by its Manager and its Agent (thus the tuple (Manager,Agent) uniquely identifies the association) | This has been assumed |as stated before, [AVV97] does not acknowledge the roles of Managers and Agents |. 3. Once an association has started, it can only be terminated by a disable request. This disable request can be issued both by the Manager and the Agent and always succeeds | [AVV97]. 4. <p> This has been assumed |as stated before, <ref> [AVV97] </ref> does not acknowledge the roles of Managers and Agents |. 3. Once an association has started, it can only be terminated by a disable request. This disable request can be issued both by the Manager and the Agent and always succeeds | [AVV97]. 4. Furthermore, a service provided termination is allowed | assumed. 5. Associations can only be set up between existing, different Managed Objects | assumed. 6. Both a disable indication and a disable confirmation denote the definite end of the corresponding association. | [AVV97] 7. <p> and the Agent and always succeeds | <ref> [AVV97] </ref>. 4. Furthermore, a service provided termination is allowed | assumed. 5. Associations can only be set up between existing, different Managed Objects | assumed. 6. Both a disable indication and a disable confirmation denote the definite end of the corresponding association. | [AVV97] 7. A Managed Object can always be deleted when it is not one of the association members engaging in this operation | assumed. 8. A Managed Object can only be created when it does not already exist | assumed. 9.
Reference: [BB88] <author> T. Bolognesi and E. Brinksma. </author> <title> Introduction to the ISO Specification Language LOTOS. </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <year> 1988. </year>
Reference-contexts: Another restriction that played a part in the choice for a suitable FDT, was the availability of supporting tools at CMG, combined with the knowledge of how to deal with these tools and the FDT. This narrowed the number of suitable FDTs down to only one: the FDT Lotos <ref> [BB88, ISO88] </ref>. 1.4 Specification Styles There exist several styles for writing formal specifications for systems. Each style has its own advantages and disadvantages, and as such, it is vital to choose the right style or combination of styles at the right time.
Reference: [BFG + 91] <author> A. Bouajjani, J.C. Fernandez, S. Graf, C. Rodriguez, and J.Sifakis. </author> <title> Safety for Branching Time Semantics. </title> <booktitle> In 18th ICALP. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Since it is unlikely equivalence exists between these two models (the OM-protocol model only describes one session), first an attempt is made to check for various preorder relations. The preorders that can be checked are strong preorder, o fl a preorder and safety preorder <ref> [BFG + 91] </ref>. According to Aldebaran the two latter preorders are equivalent. Aldebaran was able to prove that the modulo strong equivalence reduced LTS for the OM-protocol model was indeed a o fl a preorder and a safety preorder for the modulo strong equivalence reduced LTS for the OM-service model.
Reference: [BW90] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: The must test cases are usually more general than the specification that is to be tested, and as such no deadlock may occur when run in parallel with a specification. The following example will clarify the distinction between these two classes of test cases. The example is taken from <ref> [BW90] </ref>, and although there it is used to show the difference between two processes, it can also be used to show the difference between the two classes of test cases.
Reference: [Eer95] <author> H. Eertink. </author> <title> Executing LOTOS specifications: The SMILE tool. </title> <editor> In T. Bolognesi, J. van de Lagemaat, and C. Vissers, editors, LOTOSphere: </editor> <booktitle> Software Development with LOTOS, </booktitle> <pages> pages 221-234. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: The validation was performed using two toolboxes, Lite <ref> [Eer95] </ref> and Eucalyptus [Gar96]. A brief introduction on these toolboxes will be given in Section 5.1. Validation using Lite will be described in Section 5.2 and the validation using Eucalyptus will be discussed in Section 5.3. 5.1 Toolboxes The toolboxes used for the validation are Lite and Eucalyptus.
Reference: [Gar96] <author> Hubert Garavel. </author> <title> An Overview of the Eucalyptus Toolbox. </title> <editor> Editors Z. Brezocnik and T. Kapus, </editor> <booktitle> Proceedings of the COST 247 International Workshop on Applied Formal Methods in System Design (Maribor, Slovenia), University of Maribor, </booktitle> <pages> pages 76-88, </pages> <year> 1996. </year>
Reference-contexts: Since the specifications are too large to prove equivalent, or analyse by hand, two toolboxes have been used, viz. Lite and Eucalyptus <ref> [Gar96] </ref>. This, however, means that several simplifications with respect to the formal specifications will have to be introduced. The OM-service specification and the OM-protocol, found in Appendices A and B, are modelled to accomodate for the restrictions the toolboxes pose on Lotos-descriptions. <p> The validation was performed using two toolboxes, Lite [Eer95] and Eucalyptus <ref> [Gar96] </ref>. A brief introduction on these toolboxes will be given in Section 5.1. Validation using Lite will be described in Section 5.2 and the validation using Eucalyptus will be discussed in Section 5.3. 5.1 Toolboxes The toolboxes used for the validation are Lite and Eucalyptus.
Reference: [ISO88] <author> ISO/IEC. </author> <title> Lotos | A Formal Description Technique Based on the Temporal Ordering of Observational Behaviour. ISO, </title> <year> 1988. </year>
Reference-contexts: Another restriction that played a part in the choice for a suitable FDT, was the availability of supporting tools at CMG, combined with the knowledge of how to deal with these tools and the FDT. This narrowed the number of suitable FDTs down to only one: the FDT Lotos <ref> [BB88, ISO88] </ref>. 1.4 Specification Styles There exist several styles for writing formal specifications for systems. Each style has its own advantages and disadvantages, and as such, it is vital to choose the right style or combination of styles at the right time.
Reference: [ISO90a] <author> ISO/IEC. </author> <title> Common Management Information Protocol Specification. ISO, </title> <year> 1990. </year>
Reference-contexts: This data communications protocol was christened the OM/RR protocol. The OM/RR-protocol is, according to [AVV97], a two layered data communications protocol, loosely modelled after the OSI's CMIS [ISO90b], CMIP <ref> [ISO90a] </ref> and some parts of System Management [ISO90d] for the OM-layer, and OSI Remote Operation [ISO90c] for the RR-layer. A problem that was encountered, reading the documents concerning the OSS project, was the brief documentation of the OM/RR-protocol.
Reference: [ISO90b] <author> ISO/IEC. </author> <title> Common Management Information Service Definition. ISO, </title> <year> 1990. </year>
Reference-contexts: This data communications protocol was christened the OM/RR protocol. The OM/RR-protocol is, according to [AVV97], a two layered data communications protocol, loosely modelled after the OSI's CMIS <ref> [ISO90b] </ref>, CMIP [ISO90a] and some parts of System Management [ISO90d] for the OM-layer, and OSI Remote Operation [ISO90c] for the RR-layer. A problem that was encountered, reading the documents concerning the OSS project, was the brief documentation of the OM/RR-protocol.
Reference: [ISO90c] <author> ISO/IEC. </author> <title> Remote Operations. ISO, </title> <year> 1990. </year>
Reference-contexts: This data communications protocol was christened the OM/RR protocol. The OM/RR-protocol is, according to [AVV97], a two layered data communications protocol, loosely modelled after the OSI's CMIS [ISO90b], CMIP [ISO90a] and some parts of System Management [ISO90d] for the OM-layer, and OSI Remote Operation <ref> [ISO90c] </ref> for the RR-layer. A problem that was encountered, reading the documents concerning the OSS project, was the brief documentation of the OM/RR-protocol.
Reference: [ISO90d] <institution> ISO/IEC. Systems Management. ISO, </institution> <year> 1990. </year>
Reference-contexts: This data communications protocol was christened the OM/RR protocol. The OM/RR-protocol is, according to [AVV97], a two layered data communications protocol, loosely modelled after the OSI's CMIS [ISO90b], CMIP [ISO90a] and some parts of System Management <ref> [ISO90d] </ref> for the OM-layer, and OSI Remote Operation [ISO90c] for the RR-layer. A problem that was encountered, reading the documents concerning the OSS project, was the brief documentation of the OM/RR-protocol.
Reference: [Kap91] <author> Kimberly W. Kappel. </author> <title> OSI Management Model and Its Impact on Network Management. Network Management Solutions, </title> <publisher> Inc, </publisher> <year> 1991. </year>
Reference-contexts: In [AVV97], 6 both the terms Invoker and Performer, and Initiator and Responder are coined, yet the relation between them is unclear. Because of this uncertainty, it has been decided to use neither terms, but introduce new terms that will be defined uniquely. In accordance to <ref> [Kap91] </ref>, henceforth the term Manager is used for the Managed Object initiating the association and the term Agent is used for the Managed Object responding to the initiation. The environment of the OM-service is depicted in figure 2.2. Both Manager and Agent are OM-service users. <p> No specification of these layers could be found, and this is thus considered to be an omission of the OM/RR-protocol specifications. 2.2 Determining the Service Elements and Service Primi tives for the OM-service This Section deals with the service elements described in [AVV97]. In <ref> [Kap91] </ref>, as well as in [AVV97] a distinction is made between two types of service the OM-service offers to its users: * a Management Operation Service (MOS). * the Management Notification Service (MNS). <p> The Manager is allowed to initiate both MOS and MNS, whereas the Agent is only allowed to initiate the MNS. This is not explicitly stated in [AVV97], but has been assumed, as this was the case in <ref> [Kap91] </ref>. The following Sections will discuss the MOS and the MNS in greater detail. 2.2.1 The MOS The service provided by the MOS is used to manage and control objects. The service elements that can be distinguished, according to [AVV97] are the following: 8 get, set, action, create, delete. <p> Since this clearly is different with respect to the observable behaviour, and shall have its impact on the service specification, the enable and disable parameters have been introduced as new service elements. These service elements are provider confirmed, and this is done in accordance with <ref> [Kap91] </ref>. In order to be able to distinguish between the two set service elements, the user confirmed set service element is hereafter refered to as the cset service element, whereas the unconfirmed set service element is henceforth refered to as the uset service element. <p> It follows that the OM-service must somehow be able to access the information concerning these receivers in order to deliver the report to them. The use of multiple associations, however, is not in line with both [AVV97] and <ref> [Kap91] </ref>, since in both documents a binary association is suggested. As a consequence, the non-addressed -report and -notification service, under the assumption that they cannot be described by the addressed services, cannot be supported. <p> This interferes with the disable indication that is the result of a previously communicated disable request. 2.4 Summary In this Chapter the OM-service model was presented. The information found in Sections 2.1 and 2.2 was mainly based on [AVV97], and <ref> [Kap91] </ref>. Section 2.3 was based on an OM-service specification in Lotos, made first, which can be found in Appendix A. This specification was based on requirements found in [AVV97], knowledge within CMG and some assumptions based on common sense.
Reference: [SPKV93] <author> G. Scollo, L. Ferreira Pires, H. Kremer, </author> <title> and C.A. Visser. Protocol Design. </title> <institution> Twente University, </institution> <year> 1993. </year>
Reference-contexts: The service user can communicate with the OM-protocol entity by means of service primitives. These service primitives have to be translated into service primitives the RR-layer can use. The protocol entity shall be specified using the techniques described in <ref> [SPKV93] </ref>, which prescribes a step-by-step design. The first step in this technique, is to distinguish two separate functional units, which, by separation of concerns can be sufficiently modelled in a constraint oriented way. <p> These independent gates can be used to make a clear distinction between different events and communications. More information concerning the techniques sketched in this Section can be found in <ref> [SPKV93] </ref>. 4.3 The Specification of the OM-protocol Entity Model The OM-protocol entity model is described using a mixture of a constraint oriented and resource oriented specification style. The service boundaries for the OM-protocol entity model are represented by gates OSAP and RSAP.
Reference: [VL86] <author> C.A. Vissers and L. Logrippo. </author> <title> The Importance of the Service Concept in the Design of Data Communications Protocols. </title> <publisher> Elsevier Science Publishers B.V. (North-Holland), </publisher> <year> 1986. </year>
Reference-contexts: Henceforth, when discussing the (N)-service, the extensional approach is meant, whereas when discussing the (N)-protocol, the intensional approach is meant. As is to be expected, the intensional approach is often much more elaborate than the extensional approach. Much of the information presented in this Section is taken from <ref> [VL86] </ref>. 1.3 Formal Description Techniques When describing a protocol formally, the first question is which formalism is to be used. The answer to this question depends mainly on what the goals are for the formal description, and the nature of the protocol.
Reference: [VSvSB91] <author> C.A. Vissers, G. Scollo, M. van Sinderen, and E. Brinksma. </author> <title> Specification styles in distributed systems design and verification. </title> <booktitle> Theoretical Computer Science 89, </booktitle> <publisher> Elsevier, </publisher> <pages> pages 179-206, </pages> <year> 1991. </year> <month> 117 </month>
Reference-contexts: These resources may again be specified using any style. For a more extensive discussion on the differences and the situations when to use which style, the reader is refered to <ref> [VSvSB91] </ref>. The styles mainly used in the Lotos-specifications, discussed in this thesis are the resource-oriented style and the constraint-oriented style. 1.5 Analysis and Validation of the OM/RR-protocol Once a formal specification of the OM-service and the OM-protocol (i.e.
References-found: 15

