URL: ftp://ftp.cs.washington.edu/tr/1998/12/UW-CSE-98-12-03.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-date.html
Root-URL: http://www.cs.washington.edu
Email: fsds,shawg@cs.washington.edu  
Title: Requirement Specifications For Real-Time Communication  
Author: Sean David Sandys Alan Shaw 
Date: December 14, 1998  
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Abstract: Distributed communications are an essential part of many current and proposed real-time systems. However, no existing requirements specification language provides explicit and general support for distributed real-time communications (DRTC), most likely because of its diversity and complexity. Through examples, we first justify the need for handling DRTC at the specification level; an air traffic control application is discussed in some detail. A useful model for DRTC is then presented, emphasizing real-time requirements and differences between DRTC and conventional communications; these differences include time and message constraints, as well as failure and reliability issues. We then describe our approach to specifying the many kinds of send and receive actions, communications channels, and message types within a real-time framework. The specification scheme is currently under development and is an extension of a state machine language that has been used successfully for some large applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrews, G. R. </author> <booktitle> Concurrent Programming Principles and Practice. </booktitle> <address> Benjamin/Cummings, Redwood City, CA, </address> <year> 1991. </year> <month> 16 </month>
Reference-contexts: message passing systems, while state message have semantics similar to those of shared memory system with the exception that writes are atomic and there is a single sender [9]. 6 3.2 A Brief Taxonomy of DRTC The taxonomy that we use is similar to that given for conventional distributed communication <ref> [1] </ref>. The classification is divided into three categories: Properties of the sending side, the receiving side, and the communication channel.
Reference: [2] <author> Berry, G., and Georges, G. </author> <title> The esterel synchronous programming language: </title> <booktitle> design, se-mantics and implementation. Science of Computer Programming 19, </booktitle> <month> 87-152 </month> <year> (1992). </year>
Reference-contexts: It supports both synchronous (blocking) and asynchronous (non-blocking) communication. In ROOM, communication is based on message passing. Messages can be typed as well as have priorities associated with them. Our third category of schemes include Esterel <ref> [2] </ref>, Spec [3], and PSDL [13]. Communication in Esterel is done through signals (messages with no values). All sends are explicit through an emit command. Esterel uses non-blocking, broadcast sends and blocking receives. The Spec and PSDL languages are designed for distributed systems. <p> This is necessary to perform any formal analysis of a specification, either manual or automated, and in order to simulate or execute a specification. The role of time needs to be handled carefully. One appealing approach is to use the synchrony hypothesis <ref> [2] </ref> (zero time transitions) for the conventional component state machines, with time increasing only as a result of explicit timing statements or communication. Much work and testing is necessary to determine the expressiveness, completeness, and convenience of the notation, no doubt resulting in many changes.
Reference: [3] <author> Berzins, V., and Luqi. </author> <title> Software Engineering with Abstractions. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachucetts, </address> <year> 1991. </year>
Reference-contexts: It supports both synchronous (blocking) and asynchronous (non-blocking) communication. In ROOM, communication is based on message passing. Messages can be typed as well as have priorities associated with them. Our third category of schemes include Esterel [2], Spec <ref> [3] </ref>, and PSDL [13]. Communication in Esterel is done through signals (messages with no values). All sends are explicit through an emit command. Esterel uses non-blocking, broadcast sends and blocking receives. The Spec and PSDL languages are designed for distributed systems.
Reference: [4] <author> Bolgnesi, T., and Brinksma, E. </author> <title> Introduction to the ISO specification language LOTOS. </title> <booktitle> Computer Networks and ISDN systems 14 (1987), </booktitle> <pages> 25-59. </pages>
Reference-contexts: Most examples of CSP communication are used in a programming language framework to the describe the behavior of systems. Examples of languages with a CSP style of communication includes CSP [8], timed CSP [16], CRSMs [18], CSRs [5] and LOTOS <ref> [4] </ref>. 8 Communication in most state-machine based languages occurs through the use of messages or events. Messages are mainly broadcast and often the communication is implicit. These schemes tend to use the same mechanism for exchanging intra-component information as they use for exchanging inter-component information.
Reference: [5] <author> Gerber, R., and Lee, I. </author> <title> A layered approach to automating the verification of real-time systems. </title> <journal> IEEE Transactions on Software Engineering 19, </journal> <month> 9 (September </month> <year> 1992), </year> <pages> 768-784. </pages>
Reference-contexts: Most examples of CSP communication are used in a programming language framework to the describe the behavior of systems. Examples of languages with a CSP style of communication includes CSP [8], timed CSP [16], CRSMs [18], CSRs <ref> [5] </ref> and LOTOS [4]. 8 Communication in most state-machine based languages occurs through the use of messages or events. Messages are mainly broadcast and often the communication is implicit. These schemes tend to use the same mechanism for exchanging intra-component information as they use for exchanging inter-component information.
Reference: [6] <author> Harel, D. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, 8 (1987), </booktitle> <pages> 231-274. </pages>
Reference-contexts: As such, it is not clear that communication in these systems can be distributed | the style is more akin to shared memory. Systems that fit in this category include: Statecharts <ref> [6, 7] </ref>, RSML [11], SpecTRM-RL [12], and ROOM [17]. SpecTRM-RL does not use events as the basis for communication | it has state message semantics. However, its limitations are similar to those discussed above for other state-machine based systems.
Reference: [7] <author> Harel, D., and Naamad, A. </author> <title> The statemate semantics of statecharts. </title> <journal> ACM Transactions on Software Engineering and Methodology 5, </journal> <month> 4 (October </month> <year> 1996), </year> <pages> 293-333. </pages>
Reference-contexts: As such, it is not clear that communication in these systems can be distributed | the style is more akin to shared memory. Systems that fit in this category include: Statecharts <ref> [6, 7] </ref>, RSML [11], SpecTRM-RL [12], and ROOM [17]. SpecTRM-RL does not use events as the basis for communication | it has state message semantics. However, its limitations are similar to those discussed above for other state-machine based systems.
Reference: [8] <author> Hoare, C. A. R. </author> <title> Communication sequential processes. </title> <booktitle> Communication of the ACM 21, </booktitle> <month> 8 (August </month> <year> 1978), </year> <pages> 666-677. </pages>
Reference-contexts: Communication in CSP is done over typed 1-1 channels; sends and receives are both synchronous. Most examples of CSP communication are used in a programming language framework to the describe the behavior of systems. Examples of languages with a CSP style of communication includes CSP <ref> [8] </ref>, timed CSP [16], CRSMs [18], CSRs [5] and LOTOS [4]. 8 Communication in most state-machine based languages occurs through the use of messages or events. Messages are mainly broadcast and often the communication is implicit.
Reference: [9] <author> Kopetz, H. </author> <title> Real-Time Systems, Design Principles for Distributed Embedded Applications. </title> <publisher> Kluwer Academic Publisher, </publisher> <address> Boston, </address> <year> 1997. </year>
Reference-contexts: It is convenient to distinguish between event and state messages. Event messages have semantics close to those of message passing systems, while state message have semantics similar to those of shared memory system with the exception that writes are atomic and there is a single sender <ref> [9] </ref>. 6 3.2 A Brief Taxonomy of DRTC The taxonomy that we use is similar to that given for conventional distributed communication [1]. The classification is divided into three categories: Properties of the sending side, the receiving side, and the communication channel.
Reference: [10] <author> Leveson, N., Alfaro, L., Alvarado, C., Brown, M., Hunt, E. B., Jaffe, M., Joslyn, S., Pinnel, D., Reese, J., Samarziya, J., Sandys, S., Shaw, A., and Zabinsky, Z. </author> <title> Demonstration of a safety analysis on a complex system. </title> <note> In Software Engineering Laboratory Workshop (December 1997), </note> <institution> NASA Goddard. </institution>
Reference-contexts: First, they are an important, widely known, and difficult application [15]. Second, they also contain examples of virtually every known communication styles. Finally, it is an application with which we have some knowledge and experience, based on a recent safety study supported by NASA <ref> [10] </ref> and several years of using these systems in research and educational exercises. Overview of ATMs. Although there are many air traffic management systems, the ATMs that are outlined here are those that monitor aircraft flying in United States airspace. <p> We made this choice because of our familiarity with the language and its associated tools. 1 In addition, this family of languages has been used to specify a number of large systems <ref> [10, 11, 14] </ref>. A SpecTRM-RL description of a system consists of a set of components. <p> This send is a blocking, directed, unicast send. The minimum response time for this send is 0 seconds; the maximum response time is 10 seconds; i.e. after the enabling condition becomes true, a rendezvous occurs within the bounds <ref> [0; 10] </ref>.
Reference: [11] <author> Leveson, N. G., Heimdahl, M. P. E., Hildreth, H., and Reese, J. D. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering (September 1994), </journal> <pages> 684-707. </pages>
Reference-contexts: As such, it is not clear that communication in these systems can be distributed | the style is more akin to shared memory. Systems that fit in this category include: Statecharts [6, 7], RSML <ref> [11] </ref>, SpecTRM-RL [12], and ROOM [17]. SpecTRM-RL does not use events as the basis for communication | it has state message semantics. However, its limitations are similar to those discussed above for other state-machine based systems. <p> We made this choice because of our familiarity with the language and its associated tools. 1 In addition, this family of languages has been used to specify a number of large systems <ref> [10, 11, 14] </ref>. A SpecTRM-RL description of a system consists of a set of components.
Reference: [12] <author> Leveson, N. G., Reese, J. D., and Heimdahl, M. SpecTRM: </author> <title> A cad system for digital automation. In Digital Avionics System Conference (November 1998). </title> <type> 17 </type>
Reference-contexts: As such, it is not clear that communication in these systems can be distributed | the style is more akin to shared memory. Systems that fit in this category include: Statecharts [6, 7], RSML [11], SpecTRM-RL <ref> [12] </ref>, and ROOM [17]. SpecTRM-RL does not use events as the basis for communication | it has state message semantics. However, its limitations are similar to those discussed above for other state-machine based systems. Among these systems, ROOM is the only one offering more than one explicit communication abstraction. <p> SpecTRM-RL is a state-based specification language that is currently under development as part of a CAD system for digital automation <ref> [12] </ref>. We made this choice because of our familiarity with the language and its associated tools. 1 In addition, this family of languages has been used to specify a number of large systems [10, 11, 14]. A SpecTRM-RL description of a system consists of a set of components.
Reference: [13] <author> Luqi. </author> <title> Computer-aided prototyping for a command-and-control system using caps. </title> <booktitle> IEEE Software (January 1992), </booktitle> <pages> 56-67. </pages>
Reference-contexts: It supports both synchronous (blocking) and asynchronous (non-blocking) communication. In ROOM, communication is based on message passing. Messages can be typed as well as have priorities associated with them. Our third category of schemes include Esterel [2], Spec [3], and PSDL <ref> [13] </ref>. Communication in Esterel is done through signals (messages with no values). All sends are explicit through an emit command. Esterel uses non-blocking, broadcast sends and blocking receives. The Spec and PSDL languages are designed for distributed systems.
Reference: [14] <author> Modugno, F., Leveson, N. G., Reese, J. D., Partridge, K., and Sandys, S. </author> <title> Integrated safety analysis of requirements specifications. </title> <booktitle> In IEEE International Symposium on Requirements Engineering (1997), </booktitle> <pages> pp. 148-159. </pages>
Reference-contexts: We made this choice because of our familiarity with the language and its associated tools. 1 In addition, this family of languages has been used to specify a number of large systems <ref> [10, 11, 14] </ref>. A SpecTRM-RL description of a system consists of a set of components.
Reference: [15] <author> Perry, T. </author> <title> In search of the future of air traffic control. </title> <journal> IEEE Spectrum (August 1997), </journal> <pages> 18-35. </pages>
Reference-contexts: ATM systems were selected as an example for a number of reasons. First, they are an important, widely known, and difficult application <ref> [15] </ref>. Second, they also contain examples of virtually every known communication styles. Finally, it is an application with which we have some knowledge and experience, based on a recent safety study supported by NASA [10] and several years of using these systems in research and educational exercises. Overview of ATMs.
Reference: [16] <author> Reed, G., and Roscoe, A. </author> <title> A timed model for communicating sequential processes. </title> <booktitle> In International Colloquium on Automata, Languages and Programming (1986), </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 314-323. </pages>
Reference-contexts: Communication in CSP is done over typed 1-1 channels; sends and receives are both synchronous. Most examples of CSP communication are used in a programming language framework to the describe the behavior of systems. Examples of languages with a CSP style of communication includes CSP [8], timed CSP <ref> [16] </ref>, CRSMs [18], CSRs [5] and LOTOS [4]. 8 Communication in most state-machine based languages occurs through the use of messages or events. Messages are mainly broadcast and often the communication is implicit.
Reference: [17] <author> Selic, B., Gullekson, G., and Ward, P. T. </author> <title> Real-Time Object-Oriented Modeling. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: As such, it is not clear that communication in these systems can be distributed | the style is more akin to shared memory. Systems that fit in this category include: Statecharts [6, 7], RSML [11], SpecTRM-RL [12], and ROOM <ref> [17] </ref>. SpecTRM-RL does not use events as the basis for communication | it has state message semantics. However, its limitations are similar to those discussed above for other state-machine based systems. Among these systems, ROOM is the only one offering more than one explicit communication abstraction.
Reference: [18] <author> Shaw, A. C. </author> <title> Communicating real-time state machines. </title> <journal> IEEE Transactions on Software Engineering 18, </journal> <month> 9 (September </month> <year> 1992), </year> <pages> 805-816. 18 </pages>
Reference-contexts: Most examples of CSP communication are used in a programming language framework to the describe the behavior of systems. Examples of languages with a CSP style of communication includes CSP [8], timed CSP [16], CRSMs <ref> [18] </ref>, CSRs [5] and LOTOS [4]. 8 Communication in most state-machine based languages occurs through the use of messages or events. Messages are mainly broadcast and often the communication is implicit. These schemes tend to use the same mechanism for exchanging intra-component information as they use for exchanging inter-component information.
References-found: 18

