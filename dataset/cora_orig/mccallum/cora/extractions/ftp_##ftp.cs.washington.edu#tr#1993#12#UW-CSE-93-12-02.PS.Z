URL: ftp://ftp.cs.washington.edu/tr/1993/12/UW-CSE-93-12-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Multiresolution Tiling  
Author: David Meyers 
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Technical Report No. 93-12-02 December 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Charles K. Chui. </author> <title> An Introduction To Wavelets. </title> <publisher> Academic Press, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Although we do not prove this time bound, we show experimental results that support it. 2 Multiresolution Analysis This section provides a brief introduction to multiresolution analysis and wavelets. For a more detailed treatment than is possible here, the reader is referred to <ref> [1] </ref> and [5].
Reference: [2] <author> Tony D. DeRose, Michael Lounsbery, and Joe Warren. </author> <title> Multiresolution analysis for surfaces of arbitrary topological type. </title> <type> Technical Report 93-10-05, </type> <institution> University of Washington, Dept. of Computer Science and Engineering, </institution> <year> 1993. </year>
Reference-contexts: For the wavelet function (x) we use the "single knot wavelet" of DeRose, Lounsbery and Warren <ref> [2] </ref>. To obtain (x), first define (x) to be the projection of (2x 1) 2 V 1 into V 0 . Then define (x) (x) = (2x 1) (x): This definition of (x) has an unfortunate consequence: (x) has infinite support. <p> This modification has the consequence that (x) is no longer orthogonal to V 0 . One implication of this loss of orthogonality is that the sequence c n1 is no longer the best least squares approximation to c n (see <ref> [2] </ref> for more detail). By appropriately choosing the number of non-zero terms in the projection of (2x 1) into V 0 , orthogonality can be approached as closely as desired. Another approach to the problem of infinite support is to truncate an infinite sequence.
Reference: [3] <author> H. Fuchs, Z.M. Kedem, and S.P. Uselton. </author> <title> Optimal surface reconstruction from planar contours. </title> <journal> Communications of the ACM, </journal> 20(10) 693-702, October 1977. 
Reference-contexts: Numerous methods have been devised to solve the tiling problem. A method which computes a tiling optimal with respect to a goal function was devised by Keppel [4], and later improved by Fuchs, Kedem and Uselton <ref> [3] </ref>. The goal function assigns a cost to each triangle of the tiling, and minimizes the sum over the triangles in the tiling. In part because of the computational cost of their algorithm, numerous other methods have been devised which do not perform a global optimization. <p> A discussion of many of the methods can be found in [6]. 3 This paper describes a new method for solving the tiling problem which represents a significant improvement in speed and space required over the algorithm of <ref> [3] </ref>. Their algorithm requires O (n 2 log (n)) time and O (n 2 ) space to construct a tiling for a pair of contours each of size n (if the contours are of different size, replace n 2 with n fl m). In many cases, this performance is acceptable. <p> In many cases, this performance is acceptable. However, when the number of vertices in a contour is large, the performance of the algorithm of <ref> [3] </ref> becomes unacceptable, particularly in an interactive environment. Contours containing 1000 vertices are encountered in actual data sets. With current hardware and sufficient memory, their algorithm takes approximately 2 minutes to construct a tiling from a pair of contours each with 1000 vertices. <p> The multiresolution tiling algorithm presented here takes about 1 second to compute a tiling for the same input, on the "normally configured" machine. sorted single wavelet algorithm, for the contours in Figure 1. Since even the "optimal" algorithm of <ref> [3] </ref> can construct unacceptable tilings (Figure 3), user interaction is a necessary part of a system for reconstructing surfaces from a set of contours. In an interactive system, delays of the magnitude encountered with the optimizing algorithm are unacceptable, and have led to the use of faster, non-optimal methods. <p> In an interactive system, delays of the magnitude encountered with the optimizing algorithm are unacceptable, and have led to the use of faster, non-optimal methods. The algorithm we describe uses methods from multiresolution analysis to reduce the size of the contours, then uses the optimizing tiling algorithm of <ref> [3] </ref> to construct a tiling for the reduced problem size, and finally uses multires 4 olution reconstruction and local optimization to construct a tiling. Our algorithm uses O (n) space and what appears to be O (n log (n)) time. <p> The first step is to reduce the size of the problem by using multiresolution analysis to find low resolution approximations to the original contours (Figure 2). These low resolution contours are tiled using the method of <ref> [3] </ref>. Detail is then added to the low resolution tiling by adding wavelets, inserting edges at newly added vertices, and improving the tiling by local edge swapping. <p> Next compute a tiling for this pair of low-resolution contours using the optimizing tiling method of <ref> [3] </ref>. Finally, reconstruct the original contours by repeating the following steps for each level of the filter bank (see Figure 7): * Construct a new polygon for each contour using one level of the filter bank. <p> An optimal tiling is computed for the base case using the algorithm of Fuchs, Kedem and Uselton <ref> [3] </ref> in step 2 of our algorithm. The size of this base case needs to be chosen to balance overall execution time and quality of the resulting tiling. Since the base case is of constant size, its tiling can be computed in constant time. <p> Since the base case is of constant size, its tiling can be computed in constant time. The smallest possible base case is a pair of quadrilaterals. Reducing the original contours to this size should result in the maximum speedup of the multiresolution tiling method over that of <ref> [3] </ref>. However, the quality of tiling constructed is likely to depend on how far removed the base case is from the original contour. <p> The low-resolution version requires significantly less space to store, and less time to display. 5 Conclusions We have described a multiresolution approach to improving the performance of a well known algorithm for solving the tiling problem, that of Fuchs, Kedem and Uselton <ref> [3] </ref>. Their algorithm computes a tiling which is optimal with respect to a goal function that assigns a cost to each triangle in the tiling. Perhaps the most commonly used such goal function is to minimize the sum of the area of the triangles. <p> Since unacceptable tilings can occur, a practical system for reconstructing surfaces from contours must be interactive. The computational cost of the Fuchs, Kedem, Uselton algorithm <ref> [3] </ref>, both in time and space required, have caused implementors of practical systems to use other methods. The method we present in this paper is dramatically faster than the method of [3]. <p> The computational cost of the Fuchs, Kedem, Uselton algorithm <ref> [3] </ref>, both in time and space required, have caused implementors of practical systems to use other methods. The method we present in this paper is dramatically faster than the method of [3]. It does not guarantee a globally optimal tiling, but in view of the need for user interaction in many complex cases (even when using a globally optimal algorithm), that may not be a large defect.
Reference: [4] <author> E. Keppel. </author> <title> Approximating complex surfaces by triangulation of contour lines. </title> <journal> IBM J. Res. Develop., </journal> <volume> 19 </volume> <pages> 2-11, </pages> <month> January </month> <year> 1975. </year>
Reference-contexts: Numerous methods have been devised to solve the tiling problem. A method which computes a tiling optimal with respect to a goal function was devised by Keppel <ref> [4] </ref>, and later improved by Fuchs, Kedem and Uselton [3]. The goal function assigns a cost to each triangle of the tiling, and minimizes the sum over the triangles in the tiling.
Reference: [5] <author> Stephane Mallat. </author> <title> A theory for multiresolution signal decomposition: The wavelet representa tion. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 11(7) </volume> <pages> 674-693, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: Although we do not prove this time bound, we show experimental results that support it. 2 Multiresolution Analysis This section provides a brief introduction to multiresolution analysis and wavelets. For a more detailed treatment than is possible here, the reader is referred to [1] and <ref> [5] </ref>. <p> Use of the filter bank outlined above makes it possible to compute the wavelet transformation in linear time if the analysis and synthesis filters are of finite width. The multiresolution analysis framework developed by Mallat <ref> [5] </ref> provides a particularly convenient framework for understanding the relationship between the analysis and synthesis filters mentioned above.
Reference: [6] <author> David Meyers, Shelley Skinner, and Kenneth Sloan. </author> <title> Surfaces from contours. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 228-258, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Reconstruction of surfaces from a set of planar contours is an important problem in medical and biological research, geology, and other areas. The problem can be broken into several subproblems <ref> [6] </ref>, one of which, the tiling problem, is the subject of this paper. contain 195 (closed dots) and 172 (open dots) vertices. The spacing between the contours is 1.3 mm and the larger of the contours has a short dimension of 4.6 cm and long dimension of 7.5 cm. <p> In part because of the computational cost of their algorithm, numerous other methods have been devised which do not perform a global optimization. A discussion of many of the methods can be found in <ref> [6] </ref>. 3 This paper describes a new method for solving the tiling problem which represents a significant improvement in speed and space required over the algorithm of [3].
Reference: [7] <author> Joseph O'Rourke and Vinita Subramanian. </author> <title> On reconstructing polyhedra from parallel slices. </title> <type> Technical Report TR # 008, </type> <institution> Smith College Department of Computer Science, </institution> <address> Northampton, MA 01063, </address> <month> June 20, </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: To be a valid solution, the polyhedron constructed must be simple. Figure 2a and d show a pair of contours and a solution to the tiling problem for those contours. It has been shown by O'Rourke and Subramanian <ref> [7] </ref> that such a solution is not always possible. They show that if the shape of the polygons differs sufficiently, no simple polyhedron can be constructed subject to the above restrictions. In practice, adjacent contours are usually fairly similar in shape. There are exceptions. <p> Notice that the shape of the contours differs dramatically. In cases such as the one shown in Figure 1, the shape difference can be large enough that no simple polyhedral tiling can be constructed within the definition of <ref> [7] </ref>. Numerous methods have been devised to solve the tiling problem. A method which computes a tiling optimal with respect to a goal function was devised by Keppel [4], and later improved by Fuchs, Kedem and Uselton [3]. <p> When run on a machine with sufficient memory to avoid thrashing (65 mbytes), the Fuchs, Kedem, Uselton algorithm took approximately 80 seconds to compute a tiling. A problem with all known tiling algorithms is that they can produce unacceptable tilings. In fact, O'Rourke and Subramanian <ref> [7] </ref> have shown that the tiling problem is not always solvable. Problems arise when the pair of contours to be tiled differ greatly in shape. That these problems occur in real data sets can be seen by examining the pair of contours shown in Figure 1. <p> In general, the optimal tiling differs significantly from the multiresolution results only in complex cases for which neither algorithm produces a completely acceptable result. 19 5.1 Future Work When the shape of a pair of contours is significantly different, it becomes difficult or impossible to construct an acceptable tiling <ref> [7] </ref>. Some of the data sets we have used to test our methods exhibit this characteristic. User interaction therefore remains an important part of a practical system.
References-found: 7

