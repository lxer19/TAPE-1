URL: http://www.iscs.nus.edu.sg/~liub/publications/ecai96.ps
Refering-URL: 
Root-URL: 
Title: Intelligent Route Finding: Combining Knowledge, Cases and An Efficient Search Algorithm  
Author: Bing Liu 
Abstract: One of the major road transportation problems is route finding. With the massive and complicated road network of a modern city (or country), finding a good route to travel from one place to another is not a simple task. In Network Theory, this is a shortest path problem. Shortest path algorithms are often used to solve the problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. They may also produce routes that are not suitable for human drivers. Furthermore, finding a route only solves part of the route finding problem. Accepting users feedback and learning from past experiences are also crucial to the success of a route finding system. In this paper, we present an integrated approach of using knowledge about the road network, past cases and an efficient search algorithm for route finding. This technique not only substantially reduces the time and space required in computation, but also produces human-oriented and personalized solutions. Based on this approach, a system has been implemented for route finding in Singapore. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Bovy and E. Stern, </author> <title> Route Choice: Wayfinding in Transport Networks, </title> <publisher> Studies in Industial Organization . Kluwer Academic Publisher, </publisher> <year> 1990. </year>
Reference-contexts: Liu ECAI 96. 12th European Conference on Artificial Intelligence Edited by W. Wahlster Published in 1996 by John Wiley & Sons, Ltd. system of his/her driving experiences, and the system in turn should take some appropriate actions. Furthermore, according to human behavior study <ref> [1] </ref>, people also prefer to travel on familiar roads. To meet these requirements, it seems that a case-based reasoning (CBR) [4] approach is required. A number of systems have used the CBR approach [4, 5, 8]. However, we will show that the CBR approach is inefficient for this problem. <p> Knowledge-based technique Knowledge-based problem solving emphasizes the use of human problem solving strategies on a computer. For route finding, a number of behavior studies have resulted in some important findings about peoples route finding <ref> [1] </ref>: 1) People prefer to travel on major roads. 2) Peoples route finding process is characterized by minimizing the angle between the present direction of travel and the calculated direction to the destination. 3) People like to travel on familiar routes. 4) People learn from driving experiences.
Reference: [2] <author> L. P. Chew, </author> <title> Constrained delaunay triangulations. </title> <journal> Algorithmica 4, </journal> <volume> 97 108, </volume> <year> 1989. </year>
Reference-contexts: The cases are connected as a planar case graph. For route finding, the system first triangulates the case graph together with the source and the destination into a Delaunay triangulation <ref> [2] </ref>, which is then used for search to find the path in the triangulation. Since the solution path in the triangulation is only an approximation, the path has to be given to a separate planner to generate the final solution. This is a quite complex process.
Reference: [3] <author> G. Gallo, and S. Pallottino, </author> <title> "Shortest path methods: a unified approach," </title> <booktitle> Mathematical Programming Study , 26,38-64, </booktitle> <year> 1986. </year>
Reference-contexts: It was estimated that excess travel amounted to 83.5 billion miles and 914,00 person-year annually at a total estimated cost of more than 45 billion dollars per year in United States alone [7]. Route finding is a shortest path problem [4, 13]. Shortest path algorithms, such as Dijkstra algorithm <ref> [3] </ref> and A * [11], are often used for solving this problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. Most of the roads searched by the algorithms are actually irrelevant as they cannot possibly be part of the solution. <p> Shortest path algorithms Shortest path problem is modeled as finding the shortest path between two nodes in a weighted network G = ( N , A ) with a node set N and an arc set A . In route finding, G is the road network. Dijkstra algorithm <ref> [3, 13] </ref> is perhaps one of the most efficient algorithms for the problem. Most of the other algorithms are its variations. <p> It has been studied for decades, and many algorithms have been produced <ref> [3, 4, 6, 11, 12] </ref>. However, limited research has been done in adapting those algorithms for practical route finding. [14] proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently.
Reference: [4] <author> A.K Goel, K S. Ali, M W. Donnellan, A G de Silva Garza, and T J. Callantine. </author> <title> Multistrategy adaptive path planning, </title> <booktitle> IEEE Expert , 9(6), </booktitle> <pages> 57-64, </pages> <year> 1994. </year>
Reference-contexts: It was estimated that excess travel amounted to 83.5 billion miles and 914,00 person-year annually at a total estimated cost of more than 45 billion dollars per year in United States alone [7]. Route finding is a shortest path problem <ref> [4, 13] </ref>. Shortest path algorithms, such as Dijkstra algorithm [3] and A * [11], are often used for solving this problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. <p> Furthermore, according to human behavior study [1], people also prefer to travel on familiar roads. To meet these requirements, it seems that a case-based reasoning (CBR) <ref> [4] </ref> approach is required. A number of systems have used the CBR approach [4, 5, 8]. However, we will show that the CBR approach is inefficient for this problem. Then, the challenge is how to realize CBRs effect of choosing familiar roads, while avoiding its difficulties. <p> Furthermore, according to human behavior study [1], people also prefer to travel on familiar roads. To meet these requirements, it seems that a case-based reasoning (CBR) [4] approach is required. A number of systems have used the CBR approach <ref> [4, 5, 8] </ref>. However, we will show that the CBR approach is inefficient for this problem. Then, the challenge is how to realize CBRs effect of choosing familiar roads, while avoiding its difficulties. This paper proposes a simple method that integrates well with the route finding approach above. <p> These findings suggest at least two types of AI-based reasoning, i.e., model-based reasoning <ref> [4] </ref> and case-based reasoning (CBR) [4], are needed. Model-based reasoning in route finding is characterized by a combination of direction finding and route finding [4]. However, we believe that model-based method is not efficient. The reason is that human beings are not efficient route finders. <p> These findings suggest at least two types of AI-based reasoning, i.e., model-based reasoning <ref> [4] </ref> and case-based reasoning (CBR) [4], are needed. Model-based reasoning in route finding is characterized by a combination of direction finding and route finding [4]. However, we believe that model-based method is not efficient. The reason is that human beings are not efficient route finders. <p> These findings suggest at least two types of AI-based reasoning, i.e., model-based reasoning <ref> [4] </ref> and case-based reasoning (CBR) [4], are needed. Model-based reasoning in route finding is characterized by a combination of direction finding and route finding [4]. However, we believe that model-based method is not efficient. The reason is that human beings are not efficient route finders. They are seldom able to find the best route unless the distance of travel is very short. Thus, we should not simply copy the human ways of route finding. <p> It has been studied for decades, and many algorithms have been produced <ref> [3, 4, 6, 11, 12] </ref>. However, limited research has been done in adapting those algorithms for practical route finding. [14] proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently. <p> Our approach also offers a way to partition the whole network into small subnetworks that can be stored separately. A related AI-based system is ROUTER <ref> [4] </ref>. It uses both model-based method and case-based method (CBR) for route finding. The road network in ROUTER is represented as neighborhoods in a space hierarchy that is based on spatial proximity, level of detail and relative directions. Route finding consists of direction finding and route finding. <p> KB-RFinder does not use the knowledge of neighborhoods based on spatial proximity and relative directions. This type of information is not required by KB-RFinder because of its search algorithm. ROUTER uses the traditional CBR approach, but not KB-RFinder. ROUTERs performance <ref> [4] </ref> also cannot compare with those presented in Section 5. Last but not least ROUTER stores the whole network in memory, but not KB-RFinder. [5] describes a sophisticated case-based route finding system. The cases are connected as a planar case graph.
Reference: [5] <author> K.Z. Haigh and M. Veloso, </author> <title> Route planning by analogy, </title> <booktitle> Proceedings of International Conference on Case-based Reasoning , 169-180, </booktitle> <year> 1995, </year>
Reference-contexts: Furthermore, according to human behavior study [1], people also prefer to travel on familiar roads. To meet these requirements, it seems that a case-based reasoning (CBR) [4] approach is required. A number of systems have used the CBR approach <ref> [4, 5, 8] </ref>. However, we will show that the CBR approach is inefficient for this problem. Then, the challenge is how to realize CBRs effect of choosing familiar roads, while avoiding its difficulties. This paper proposes a simple method that integrates well with the route finding approach above. <p> This type of information is not required by KB-RFinder because of its search algorithm. ROUTER uses the traditional CBR approach, but not KB-RFinder. ROUTERs performance [4] also cannot compare with those presented in Section 5. Last but not least ROUTER stores the whole network in memory, but not KB-RFinder. <ref> [5] </ref> describes a sophisticated case-based route finding system. The cases are connected as a planar case graph.
Reference: [6] <author> R.V. Helgason, J.L Kennington, </author> <title> "The one-to-one shortest-path problems: an empirical analysis with the two-tree Dijkstra algorithm," </title> <journal> Compu. Opt. and Appl , 1, </journal> <pages> 45-75, </pages> <year> 1993. </year>
Reference-contexts: Most of the other algorithms are its variations. In our research, we performed a comparison with eight best known algorithms, i.e., D 1 (Dijkstra algorithm), A 1 ( A *) [11], S 1, S 2, D 2, A 2 [12], S 12, and S 22 <ref> [6] </ref>. D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively [6, 12]. Due to the space limitation, we are unable to show the running time results, Interested reader see [10]. <p> our research, we performed a comparison with eight best known algorithms, i.e., D 1 (Dijkstra algorithm), A 1 ( A *) [11], S 1, S 2, D 2, A 2 [12], S 12, and S 22 <ref> [6] </ref>. D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively [6, 12]. Due to the space limitation, we are unable to show the running time results, Interested reader see [10]. From the results, A * is found to be the fastest algorithm. <p> D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively <ref> [6, 12] </ref>. Due to the space limitation, we are unable to show the running time results, Interested reader see [10]. From the results, A * is found to be the fastest algorithm. The performances of the others are similar. <p> It has been studied for decades, and many algorithms have been produced <ref> [3, 4, 6, 11, 12] </ref>. However, limited research has been done in adapting those algorithms for practical route finding. [14] proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently.
Reference: [7] <author> G. F King and T M Mast, </author> <title> "Excess travel: causes, extent, and consequences," Transport. </title> <booktitle> Research Record , 1111, </booktitle> <pages> 126-134. </pages>
Reference-contexts: Inefficiency of human route finding also results in a large amount of excessive travel. It was estimated that excess travel amounted to 83.5 billion miles and 914,00 person-year annually at a total estimated cost of more than 45 billion dollars per year in United States alone <ref> [7] </ref>. Route finding is a shortest path problem [4, 13]. Shortest path algorithms, such as Dijkstra algorithm [3] and A * [11], are often used for solving this problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task.
Reference: [8] <author> B. Liu, </author> <title> et al , "Finding the shortest route using cases, knowledge, and Dijkstra's algorithm," </title> <booktitle> IEEE Expert , 9(5), </booktitle> <pages> 149-155, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Furthermore, according to human behavior study [1], people also prefer to travel on familiar roads. To meet these requirements, it seems that a case-based reasoning (CBR) [4] approach is required. A number of systems have used the CBR approach <ref> [4, 5, 8] </ref>. However, we will show that the CBR approach is inefficient for this problem. Then, the challenge is how to realize CBRs effect of choosing familiar roads, while avoiding its difficulties. This paper proposes a simple method that integrates well with the route finding approach above. <p> It is these problems that we have encountered in building our earlier system R-Finder <ref> [8] </ref> that have prompted us to find a better solution technique. However, old cases are useful because people do like to travel on familiar routes. Then, the system must meet this preference. <p> Then, a reasonable compromise between using old roads and finding new ones is automatically ensured. Thus, we have avoided the use of CBR, and we do not have the problems associated with it. In building our first system R-Finder <ref> [8] </ref>, we meet all those difficult problems. The technique used in R-Finder was so complicated, and yet it does not work well. This simple method integrated with the route finding technique in Section 3 solves all the problems. <p> When the network is very irregular, the approximated solution could also be quite far from the optimal solution. In contrast, our system is much simpler. It guarantees good and human-oriented solutions. In addition, our disk-and-memory design can save a great deal of memory space. Our earlier system R-Finder <ref> [8] </ref> uses Dijkstra algorithm, knowledge and the CBR approach. KB-RFinder has made substantial improvements over R-Finder. The most important improvements are on the grid formation and on the use of old cases.
Reference: [9] <author> B. Liu, </author> <title> Using Knowledge to Isolate Search in Route Finding, </title> <booktitle> IJCAI-95 , pp. </booktitle> <pages> 119-125, </pages> <year> 1995. </year>
Reference-contexts: Using only these algorithms may also produce solutions that are not suitable for human drivers. For example, human drivers would normally like to drive on major roads, although using some minor roads may give the shortest path. In <ref> [9] </ref>, we proposed a novel approach of using knowledge about the road network to help a shortest path algorithm to perform the route finding task. This approach dramatically reduces the time and space required in computation, and also produces human oriented solutions. <p> This paper further improves this technique by addressing an important case, which was not properly handled in <ref> [9] </ref>. Finding a route efficiently only solves part of the route finding problem. After a route is found, the user needs to feedback to the ______________________________________________________ 1 Department of Information Systems and Computer Science, National University of Singapore, Lower Kent Ridge Road, Singapore, 119260. 1996 B. <p> Then, the system must meet this preference. In Section 4, we will present a simple and effective method that meets our needs and also avoids the problems associated with CBR. 3 USING KNOWLEDGE FOR ROUTE FINDING In <ref> [9] </ref>, we presented the main idea of using knowledge to isolate search in route finding. This section discusses the improvement made to the original approach. For completeness, we review the whole approach here. Along with it, we will point out its problem and present an improvement that overcomes the problem. <p> Part 1 Part 3 Part 2 A B C D 3) In a normal road network, there are underpasses and fly-overs. They make a road network nonplanar. However, this issue was not properly handled in <ref> [9] </ref>. The old grid formation algorithm could not detect underpasses and fly-overs, which results in much bigger grids being formed. For example, in Figure 6 (A), the road segment 1-2 does not meet 3-4. 1-2 is a underpass. <p> The bottleneck of the method is the slow i/o accesses. 3.2.2. Problem solving algorithm Here, we present the problem solving algorithm for the disk-and-memory design. Due the handling of underpasses and fly-overs, the algorithm in <ref> [9] </ref> has to be modified to consider them. This is reflected in line 12 below. 1 Step 1. <p> Then, the grid subnetworks and DMRs can be connected to the MJN very quickly with no i/o access. Two alternative designs were proposed and implemented, which are Disjointed-networks design Grid-testing design. Details on them can be found in <ref> [9, 10] </ref>. 4 4 USING PAST EXPERIENCES AND CASES Finding a good route efficiently only solves part of the route finding problem. It is also crucial for the system to learn from past experiences. <p> Secondly, R-Finder has the difficult problems associated with CBR. Thirdly, R-Finder does not save any space, and actually requires more due to the case base. Finally, the performance of R-Finder cannot compare with KB-RFinder if the D-N or GT design is used. The improvements of this paper over <ref> [9] </ref> have been discussed earlier.
Reference: [10] <author> B. Liu, </author> <title> Route finding by using knowledge, past cases and an search algorithm , DISCS Technical Report, </title> <year> 1995. </year>
Reference-contexts: D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively [6, 12]. Due to the space limitation, we are unable to show the running time results, Interested reader see <ref> [10] </ref>. From the results, A * is found to be the fastest algorithm. The performances of the others are similar. Although these algorithms are relatively efficient, as discussed earlier, applying them directly to route finding is not appropriate. 2.2. <p> Hence, we can statically assign each node (or junction) in the small area that area as its grid. Thus, the road network can be represented as a major road network and many small subnetworks (or grids). The main cases of grid formation are as follows (see <ref> [10] </ref> for details): 1) Major roads surrounding a set of minor roads form a grid for every node (or junction) in the minor roads. Figure 4 shows such a grid. <p> Run the shortest path algorithm (e.g., A* ) with the augmented MJN 14 Step 4. Remove the subnetworks added into the MJN. More details about the algorithm can be found in <ref> [10] </ref>. The disk-and-memory design saves 90% of memory compared to a system that loads the entire network into memory with the Singapore road network. However, its bottleneck is the slow i/o accesses. When memory is not a limitation, all the various networks can be stored in memory. <p> Then, the grid subnetworks and DMRs can be connected to the MJN very quickly with no i/o access. Two alternative designs were proposed and implemented, which are Disjointed-networks design Grid-testing design. Details on them can be found in <ref> [9, 10] </ref>. 4 4 USING PAST EXPERIENCES AND CASES Finding a good route efficiently only solves part of the route finding problem. It is also crucial for the system to learn from past experiences. <p> Regarding the travel distance, D-A-M , D-N and GT produce routes around 9% longer than the optimal routes produced by ZK (the travel times are similar). But, their routes meet peoples preferences. These results can actually be greatly improved by making use of shortcuts. See <ref> [10] </ref> on how to do this. When Dijkstra algorithm is used, D-N improves the running time by 11 times comparing to ZK , and GT improves the running time by 4.5 times comparing to ZK . When A * is used, the improvement is also substantial.
Reference: [11] <author> J. Pearl, </author> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference-contexts: Route finding is a shortest path problem [4, 13]. Shortest path algorithms, such as Dijkstra algorithm [3] and A * <ref> [11] </ref>, are often used for solving this problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. Most of the roads searched by the algorithms are actually irrelevant as they cannot possibly be part of the solution. <p> Dijkstra algorithm [3, 13] is perhaps one of the most efficient algorithms for the problem. Most of the other algorithms are its variations. In our research, we performed a comparison with eight best known algorithms, i.e., D 1 (Dijkstra algorithm), A 1 ( A *) <ref> [11] </ref>, S 1, S 2, D 2, A 2 [12], S 12, and S 22 [6]. D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively [6, 12]. <p> It has been studied for decades, and many algorithms have been produced <ref> [3, 4, 6, 11, 12] </ref>. However, limited research has been done in adapting those algorithms for practical route finding. [14] proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently.
Reference: [12] <author> I. Pohl, </author> <title> "Bi-directional search," </title> <editor> Machine Intelligence , B Meltzer and D. Michie (eds), </editor> <volume> 6, </volume> <pages> 127-140, </pages> <year> 1971. </year>
Reference-contexts: Most of the other algorithms are its variations. In our research, we performed a comparison with eight best known algorithms, i.e., D 1 (Dijkstra algorithm), A 1 ( A *) [11], S 1, S 2, D 2, A 2 <ref> [12] </ref>, S 12, and S 22 [6]. D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively [6, 12]. <p> D 1, A 1, S 1, and S 2 all perform unidirectional search [6]. D 2, A 2, S 12, and S 22 are their bidirectional counterparts respectively <ref> [6, 12] </ref>. Due to the space limitation, we are unable to show the running time results, Interested reader see [10]. From the results, A * is found to be the fastest algorithm. The performances of the others are similar. <p> It has been studied for decades, and many algorithms have been produced <ref> [3, 4, 6, 11, 12] </ref>. However, limited research has been done in adapting those algorithms for practical route finding. [14] proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently.
Reference: [13] <author> R. </author> <title> Sedgewick, </title> <publisher> Algorithms , Addison-Wesley Publishing Company, </publisher> <pages> Chapter 11, 145-163, </pages> <year> 1988. </year>
Reference-contexts: It was estimated that excess travel amounted to 83.5 billion miles and 914,00 person-year annually at a total estimated cost of more than 45 billion dollars per year in United States alone [7]. Route finding is a shortest path problem <ref> [4, 13] </ref>. Shortest path algorithms, such as Dijkstra algorithm [3] and A * [11], are often used for solving this problem. However, these algorithms are wasteful in terms of computation when applied to the route finding task. <p> Shortest path algorithms Shortest path problem is modeled as finding the shortest path between two nodes in a weighted network G = ( N , A ) with a node set N and an arc set A . In route finding, G is the road network. Dijkstra algorithm <ref> [3, 13] </ref> is perhaps one of the most efficient algorithms for the problem. Most of the other algorithms are its variations.
Reference: [14] <author> J. Shapiro, J. Waxman, and D. </author> <title> Nir, "Level graphs and approximate shortest path algorithm," </title> <booktitle> Networks , 22, </booktitle> <year> 1992. </year>
Reference-contexts: It has been studied for decades, and many algorithms have been produced [3, 4, 6, 11, 12]. However, limited research has been done in adapting those algorithms for practical route finding. <ref> [14] </ref> proposed a technique to use level structure (which is similar to our major and minor road structure) of the road network to help searching for a path efficiently.
References-found: 14

