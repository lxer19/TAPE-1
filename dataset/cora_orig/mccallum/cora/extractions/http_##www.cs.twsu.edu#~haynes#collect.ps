URL: http://www.cs.twsu.edu/~haynes/collect.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: haynes@euler.mcs.utulsa.edu  
Title: Collective Memory Search  
Author: Thomas Haynes 
Address: 600 South College Ave.  Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical Computer Sciences  The University of Tulsa  
Abstract: Collective action has been examined to expedite search in optimization problems [ Dorigo et al., 1996 ] . Collective memory has been applied to learning in multiagent systems [ Garland and Alterman, 1996 ] . We integrate the simplicity of collective action with the pattern detection of collective memory to significantly improve both the gathering and processing of knowledge. We investigate the augmentation of distributed search in genetic programming based systems with collective memory. Four models of collective memory search are defined based on the interaction of the search agents and the process agents which manipulate the collective memory. We present implementations of two of the collective memory search models and further show how collective memory search facilitates "scaling up" a problem domain. An Active-Passive model, which gathers results from the independent searchers, is examined and found to provide a springboard from which search agents can extend their exploration. A Passive-Active model, in which the gathered results are collated, is employed by the process agents to piece together the solution from the parts collected by the search agents. 
Abstract-found: 1
Intro-found: 1
Reference: [ Chandy and Misra, 1988 ] <author> K. Mani Chandy and Jay-adev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: We encode sentences using UNITY 2 <ref> [ Chandy and Misra, 1988 ] </ref> operators to form both the KB and ff, and, then, use propositional inference rules from the UNITY proof logic to show that the knowledge base entails that sentence, KB j= i ff. <p> The terminal set is comprised of the predicate variables fP, Q, R, S, Tg. Both a subset of the theorems presented in Chandy and Misra <ref> [ Chandy and Misra, 1988 ] </ref> and some additional simple logic rules were chosen as the propositional inference rules used to prove entailment. The subset and the simple rules combine to form the function set as reported in [ Haynes et al., 1996a ] . <p> The members of the function set map trees from GP space into trees in propositional logic space. A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule.
Reference: [ Davis, 1991 ] <editor> Lawrence Davis, editor. </editor> <booktitle> Handbook of genetic algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1991. </year>
Reference-contexts: Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc <ref> [ Davis, 1991, Goldberg, 1989 ] </ref> . Genetic programming is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: [ DeJong, 1990 ] <author> Kenneth A. DeJong. </author> <title> Genetic-algorithm-based learning. </title> <editor> In Y. Kodratoff and R.S. Michal-ski, editors, </editor> <booktitle> Machine Learning, Volume III. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Alamos, CA, </address> <year> 1990. </year>
Reference-contexts: A notable exception arises in genetic-based machine learning (GBML) systems; both rules and rulesets must be maintained. In the "Michigan approach" each chromosome is a rule and the population as a whole is the ruleset. In the "Pitt approach" each chromosome is a ruleset, being comprised of multiple rules <ref> [ DeJong, 1990 ] </ref> . In this paper, we investigate the addition of collective memory to GP-based learning systems. We allow the explicit reuse of knowledge from one generation to the next 1 .
Reference: [ Dorigo et al., 1996 ] <author> Marco Dorigo, Vittorio Maniezzo, and Alberto Colorni. </author> <title> The Ant System: Optimization by a colony of cooperating agents. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics Part B: Cybernetics, </journal> <volume> 26(1) </volume> <pages> 29-41, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction A computational agent society can exhibit collective behavior in two dimensions: action and memory. Collective action can be defined as the complex interaction that arises out of the sum of simpler actions by the agents <ref> [ Dorigo, 1992, Dorigo et al., 1996 ] </ref> . These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent.
Reference: [ Dorigo, 1992 ] <editor> Marco Dorigo. </editor> <title> Optimization, Learning and Natural Algorithms. </title> <type> PhD thesis, </type> <institution> Politecnico di Milano, Italy, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction A computational agent society can exhibit collective behavior in two dimensions: action and memory. Collective action can be defined as the complex interaction that arises out of the sum of simpler actions by the agents <ref> [ Dorigo, 1992, Dorigo et al., 1996 ] </ref> . These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent.
Reference: [ Fennell and Lesser, 1977 ] <author> Richard D. Fennell and Victor R. Lesser. </author> <title> Parallelism in Artificial Intelligence problem solving: A case study of Hearsay II. </title> <journal> IEEE Transactions on Computers, </journal> <note> C-26(2):98-111, Febru-ary 1977. (Also published in Readings in Distributed Artificial Intelligence, </note> <editor> Alan H. Bond and Les Gasser, editors, </editor> <address> pages 106-119, </address> <publisher> Morgan Kaufmann, 1988.). </publisher>
Reference-contexts: The theorem prover presented in Section 4 is an example of this model. Active-Active This collective memory is interactively accessed by the independent search agents. The process agents can manipulate the memory, and thus the search agents. Blackboard technology falls into this model <ref> [ Fennell and Lesser, 1977 ] </ref> . Passive-Passive This form of collective memory is actually no collective memory at all. The family of genetic algorithms falls into this model. Passive-Active This collective memory does not interact with the search agents.
Reference: [ Garey and Johnson, 1979 ] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent. Such bounds are caused by the combinatorial explosion found in either search or optimization of the class of NP complete problems <ref> [ Garey and Johnson, 1979 ] </ref> . Collective memory can be defined as the combined knowledge gained by the interaction of the agents with both themselves and their environment [ Garland and Alter-man, 1995, Garland and Alterman, 1996 ] . <p> Both finding the maximum and all cliques in a graph is NP complete <ref> [ Garey and Johnson, 1979 ] </ref> . We conjecture, without formal proof, that finding all of the cliques in a graph is "more difficult", i.e., more computationally expensive, than finding the maximum clique of a graph. <p> One brute force algorithm is presented in pseudocode in Figure 5. The algorithm builds candidate cliques in increasing levels of size, k. Since the clique detection problem is NP complete <ref> [ Garey and Johnson, 1979 ] </ref> , this algorithm is not guaranteed to be able to find a solution. A viable search heuristic is to detect cliques from the Passive-Active collective memory. In this section, we experiment with a dataset from the DIMACS repository: hamming6-4.clq 7 .
Reference: [ Garland and Alterman, 1995 ] <author> Andrew Garland and Richard Alterman. </author> <title> Preparation of multi-agent knowledge for reuse. </title> <editor> In David W. Aha and Ashwin Ram, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation of Knowldege for Reuse, </booktitle> <address> Cambridge, MA, </address> <month> November </month> <year> 1995. </year> <note> AAAI. </note> [ <author> Garland and Alterman, 1996 ] Andrew Garland and Richard Alterman. </author> <title> Multiagent learning through collective memory. </title> <editor> In Sandip Sen, editor, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multiagent Systems, </booktitle> <pages> pages 33-38, </pages> <address> Stanford University, CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Section 9 examines further avenues of research in utilizing collective memory in distributed search. 2 Collective Memory Garland and Alterman present a distributed collective memory in their research: agents manipulate their own slice of the collective memory <ref> [ Garland and Alterman, 1995, Garland and Alterman, 1996 ] </ref> . We present a centralized collective memory, which is a knowledge repository, not local to the agents. As agents gather knowledge, they deposit it into the collective memory. Agents can have read, write, and delete privileges.
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc <ref> [ Davis, 1991, Goldberg, 1989 ] </ref> . Genetic programming is an off-shoot of GA's, and is typically used in the automatic induction of programs. Both GA and GP represent search strategies in a population of chromosomes.
Reference: [ Haynes et al., 1995 ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Larry Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA, 1995. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Both GA and GP represent search strategies in a population of chromosomes. Each chromosome in the population can be searching different parts of the search space or fitness landscape. Each chromosome can be considered to be a behavioral strategy to control an agent <ref> [ Haynes et al., 1995 ] </ref> . The agents, i.e. chromosomes, are considered to be autonomous in the sense that they do not typically interact to find a solution. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . <p> Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. The fitness function evaluates the soundness of an inference from the KB.
Reference: [ Haynes et al., 1996a ] <author> Thomas Haynes, Rose Gamble, Leslie Knight, and Roger Wainwright. </author> <title> Entailment for specification refinement. </title> <booktitle> In Proceedings of the First Genetic Programming Conference, </booktitle> <year> 1996. </year>
Reference-contexts: The STGP variant mainly restricts the construction and reproduction of chromosomes; the basic algorithm is GP. 4 Theorem Proving We have used STGP to apply inference rules in the derivation of a target sentence ff from a knowledge base KB <ref> [ Haynes et al., 1996a ] </ref> . <p> Both a subset of the theorems presented in Chandy and Misra [ Chandy and Misra, 1988 ] and some additional simple logic rules were chosen as the propositional inference rules used to prove entailment. The subset and the simple rules combine to form the function set as reported in <ref> [ Haynes et al., 1996a ] </ref> . Both the terminal and function set provide sufficient functionality and representation to prove the entailment of sentences from the provided KB. The members of the function set map trees from GP space into trees in propositional logic space.
Reference: [ Haynes et al., 1996b ] <author> Thomas Haynes, Dale Schoene-feld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: They do not need to re-derive everything from scratch. 3 leads-to is a UNITY progress property which is denoted by p 7! q. 5 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996b ] </ref> . A collection of cliques in a graph can be represented as a list of a list of nodes which, in turn, can be represented by a tree structure. <p> Each curve shown in Figure 3 is an average of 10 different runs. Each of the methods extends the previous methods. The first method (R0) is a STGP system modified with the type inheritance presented in <ref> [ Haynes et al., 1996b ] </ref> . In this method, chromosomes are repaired during the fitness evaluation, but they are not returned into the population. The second search method (R10Q7) replaces the original chromosome with the repaired one with a probability of :1.
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: They do not need to re-derive everything from scratch. 3 leads-to is a UNITY progress property which is denoted by p 7! q. 5 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [ Haynes, 1996, Haynes et al., 1996b ] </ref> . A collection of cliques in a graph can be represented as a list of a list of nodes which, in turn, can be represented by a tree structure. <p> This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. In our prior research <ref> [ Haynes, 1996 ] </ref> , we utilized these regularities to identify and enumerate the building blocks, i.e., the connected components. We repaired chromosomes by stripping out all invalid candidate cliques. We investigated various rates of return of repaired chromosomes into the population. <p> In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 . <p> In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 . The repair of chromosome by duplication of coding segments strategy holds promise in automating the detection of building blocks <ref> [ Haynes, 1996 ] </ref> . <p> We could also employ simple process agents, 10 Building block are easier to find in GA chromosomes, but the typical string representation is the binary alphabet and of fixed length. As such, GA building blocks are at the structural level, whilst GP building blocks are at the semantical level <ref> [ Haynes, 1996 ] </ref> . capitalizing on the reduced search space. We have shown collective memory can be used to augment distributed search.
Reference: [ Holland, 1975 ] <author> John H. Holland. </author> <booktitle> Adpatation in Natural and Artificial Systems. </booktitle> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: The collective memory allows for either communication among the agents or for a centralized search of the gathered knowledge. In this paper, we consider simple computational search agents, which are chromosomes in a genetic programming (GP) [ Koza, 1992 ] population. Genetic algorithms (GA) <ref> [ Holland, 1975 ] </ref> are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc [ Davis, 1991, Goldberg, 1989 ] .
Reference: [ Johnson and Trick, 1996 ] <author> David S. Johnson and M. A. </author> <title> Trick, editors. Cliques, Coloring, and Satisfiability: </title> <booktitle> The Second DIMACS Challange. DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1996. </year> <note> (to appear). 8 </note>
Reference-contexts: The search for the optimal solution for this graph is not trivial with either plain GP or STGP systems. In the Second DIMACS Challenge <ref> [ Johnson and Trick, 1996 ] </ref> random graphs were generated as tests for the maximum clique detection problem. While the duplication of coding segments repair process is able to search such graphs, the plain STGP system will prematurely converge.
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The collective memory allows for either communication among the agents or for a centralized search of the gathered knowledge. In this paper, we consider simple computational search agents, which are chromosomes in a genetic programming (GP) <ref> [ Koza, 1992 ] </ref> population. Genetic algorithms (GA) [ Holland, 1975 ] are a class of distributed search algorithms inspired by biological evolutionary adaptation. GA's are used for parameter optimization, process control, learning classifier systems, etc [ Davis, 1991, Goldberg, 1989 ] . <p> We examine the coordination of knowledge of loosely-coupled, heterogeneous, and initially simple agents. The agents can adapt during the search process, eventually becoming quite complex. 3 Genetic Programming Genetic programming is a machine learning technique used in the automatic induction of computer programs <ref> [ Koza, 1992 ] </ref> . A GP system is primarily comprised of three main parts: * A population of chromosomes. * A chromosome evaluator. * A selection and recombination mechanism.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year> <note> (Also published as BBN Technical Report #7866, </note> <institution> Cambridge, </institution> <address> MA, March 1994.). </address>
Reference-contexts: Montana claims that closure is a serious limitation to genetic programming. He introduces a variant of GP in strongly typed genetic programming (STGP), in which variables, constants, arguments, and returned values can be of any type <ref> [ Montana, 1995 ] </ref> . The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. <p> The only restriction is that the data type for each element be specified beforehand. This causes the initialization process and the various genetic operations to only construct syntactically correct trees. It has been shown that STGP can significantly reduce the search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . <p> Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Montana, 1995, Haynes et al., 1995 ] </ref> . Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. The fitness function evaluates the soundness of an inference from the KB.
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carelton University, Ottawa-Carleton Institute for Computer Science, </institution> <address> Ott-awa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference-contexts: In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 .
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In P. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: In the clique detector domain, candidate cliques form the building blocks. The identification of building blocks in genetic programming is in general a difficult task <ref> [ O'Reilly, 1995, Rosca and Ballard, 1996, Haynes, 1996 ] </ref> . In part this is due to the domain dependent nature of the alphabet, i.e. the members of the function and terminal sets 10 .
Reference: [ Russell and Norvig, 1995 ] <author> Stuart Russell and Peter Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <month> 9 </month>
Reference-contexts: The members of the function set map trees from GP space into trees in propositional logic space. A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule.
References-found: 20

