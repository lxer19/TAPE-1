URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/EvolvAM.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Email: ferikp,tvdwg@cs.kun.nl  
Title: A General Theory for the Evolution of Application Domains  
Author: H.A. Proper and Th.P. van der Weide 
Keyword: Evolving Information Systems, Temporal Information Systems, Schema Evolution, Data Modelling, Type Related ness, Predicator Set Model, ER Model  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Department of Information Systems, University of Nijmegen  
Abstract: In this article we focus on evolving information systems. First a delimitation of the concept of evolution is discussed. The main results are a first attempt to a general theory for such evolutions, and a general study on the issue of type relatedness of object types. In this theory, the underlying data model is a parameter, making the theory applicable for a wide range of modelling techniques. Published as: H.A. Proper and Th.P. van der Weide. A General Theory for the Evolution of Application Models. Technical Report 92-26, Department of Information Systems, University of Nijmegen, The Netherlands, 1992.
Abstract-found: 1
Intro-found: 1
Reference: [AH87] <author> S. Abiteboul and R. Hull. </author> <title> IFO: A Formal Semantic Database Model. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(4) </volume> <pages> 525-565, </pages> <month> December </month> <year> 1987. </year>
Reference: [All84] <author> J.F. Allen. </author> <title> Towards a General Theory of Action and Time. </title> <journal> Artificial Intelligence, </journal> 1984(23) 123-154, 1984. 
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. [CR87], [WJL91] or <ref> [All84] </ref>. The time axis is the axis along which the application model evolves. With this time axis, an application model history is a (partial) mapping T AME . 2 AMH is the set of all such histories. In a later section, we will pose well formedness restrictions on histories. 3.
Reference: [BW89] <author> P.D. Bruza and Th.P. van der Weide. </author> <title> The Semantics of Data Flow Diagrams. </title> <booktitle> In Proceedings of the International Conference on Management of Data, </booktitle> <address> Hyder-abad, India, </address> <year> 1989. </year>
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship Model: Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference: [CR87] <author> J. Clifford and A. Rao. </author> <title> A simple, general structure for Temporal Domains. </title> <editor> In C. Rolland, F. Bodart, and M. Leonard, editors, </editor> <booktitle> Temporal Aspects in Information Systems, </booktitle> <pages> pages 17-28. </pages> <address> North-Holland/IFIP, </address> <year> 1987. </year>
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. <ref> [CR87] </ref>, [WJL91] or [All84]. The time axis is the axis along which the application model evolves. With this time axis, an application model history is a (partial) mapping T AME . 2 AMH is the set of all such histories.
Reference: [FOP92a] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> A Conceptual Framework for Evolving Information Systems. </title> <editor> In H.G. Sol and R.L. Crosslin, editors, </editor> <booktitle> Dynamic Modelling of Information Systems II, </booktitle> <pages> pages 353-375. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: The set AME is the domain for the evolvable 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see <ref> [FOP92a] </ref> or [FOP92b]. Page 4 elements of an application model. A formal def- inition of AME will be provided in section 5. 2.
Reference: [FOP92b] <author> E.D. Falkenberg, J.L.H. Oei, and H.A. Proper. </author> <title> Evolving Information Systems: Beyond Temporal Information Systems. </title> <editor> In A.M. Tjoa and I. Ramos, editors, </editor> <booktitle> Proceedings of the Data Base and Expert System Applications Conference (DEXA 92), </booktitle> <pages> pages 282-287, </pages> <address> Valencia, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: 1 Introduction As has been argued in [Rod91] and <ref> [FOP92b] </ref>, there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases, structure modifications will lead to costly data conversions and reprogramming. <p> The set AME is the domain for the evolvable 1 In this paper, the difference between recording and event time [SA85], and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or <ref> [FOP92b] </ref>. Page 4 elements of an application model. A formal def- inition of AME will be provided in section 5. 2.
Reference: [Gri82] <editor> J.J. van Griethuysen, editor. </editor> <title> Concepts and Terminology for the Conceptual Schema and the Information Base. </title> <publisher> Publ. nr. </publisher> <address> ISO/TC97/SC5-N695, </address> <year> 1982. </year>
Reference-contexts: From this identification, the difference between a traditional information system, and its evolving counterpart, will become clear. This is followed by a discussion on how the evolution of an information system is modelled. 2.1 A hierarchy of models According to <ref> [Gri82] </ref>, a conceptual (i.e. complete and minimal) specification of (a version of) a universe of discourse consists of the following components: 1. an information structure, a set of constraints and a population conforming to these requirements. 2. a set of action specifications describing the tran sitions that can be performed by
Reference: [HPW92a] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Data Mod-elling in Complex Application Domains. </title> <editor> In P. Loucopoulos, editor, </editor> <booktitle> Proceedings of the Fourth International Conference CAiSE'92 on Advanced Information Systems Engineering, volume 593 of Lecture Notes in Computer Science, </booktitle> <pages> pages 364-377, </pages> <address> Manchester, United Kingdom, May 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference: [HPW92b] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal Definition of a Conceptual Language for the Description and Manipulation of Information Models. </title> <type> Technical Report 92/10, </type> <institution> SERC, Software Engineering Research Centre, </institution> <address> Utrecht, The Netherlands, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: The RootOf relation for this data model, is given in figure 13. The type relatedness of D and E, which itself follows from the type relatedness of B and C ([HW93]), is propagated to F and G by means of the RootOf relationship and theorem 3.3. In [HW93], <ref> [HPW92b] </ref>, the inheritance of type relatedness via type constructions, e.g. powertyping, is elaborated. 4 Generalised Application Models Besides the information structure, an application model contains a number of other elements. The hierarchy of models in figure 1 describes how an application model is constructed from other (sub)models.
Reference: [HSV89] <author> K.M. van Hee, L.J. Somers, and M. Voorhoeve. </author> <title> Executable Specifications for Distributed Information Systems. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information System Concepts: An In-depth Analysis, </booktitle> <pages> pages 139-156. </pages> <address> North-Holland/IFIP, Amsterdam, The Nether-lands, </address> <year> 1989. </year>
Reference: [HW93] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The example of figure 2 contains nine object types: three entity types Record, Song and Frequency, two relation types Recording and Lending-frequency, and four label types Title, Artist, Author and Times. 3.1.2 Type relatedness The relation ~ O fi O expresses type relatedness between object types (see <ref> [HW93] </ref>). Object types x and y are termed type related (x ~ y) iff populations of object types x and y may have values in common in any version of the application model. Type relatedness corresponds to mode equivalence in programming languages ([WMP + 76]). <p> The RootOf relation for this data model, is given in figure 13. The type relatedness of D and E, which itself follows from the type relatedness of B and C (<ref> [HW93] </ref>), is propagated to F and G by means of the RootOf relationship and theorem 3.3. In [HW93], [HPW92b], the inheritance of type relatedness via type constructions, e.g. powertyping, is elaborated. 4 Generalised Application Models Besides the information structure, an application model contains a number of other elements. The hierarchy of models in figure 1 describes how an application model is constructed from other (sub)models.
Reference: [JMSV92] <author> M. Jarke, J. Mylopoulos, J.W. Schmidt, and Y. Vassiliou. DAIDA: </author> <title> An Environment for Evolving Information Systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 20(1) </volume> <pages> 1-50, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Version modelling in engineering databases can be seen as a restricted form of evolving information systems ([Kat90], <ref> [JMSV92] </ref>). An important requirement for evolving information systems, not covered by version modelling systems, is that changes to the structure can be made on-line. In version modelling, a structural change requires the replacement of the old system by a new system.
Reference: [Kat90] <author> R.H. Katz. </author> <title> Toward a Unified Framework for Version Modelling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-408, </pages> <year> 1990. </year>
Reference: [MS90] <author> E. McKenzie and R. Snodgrass. </author> <title> Schema Evolution and the Relational Algebra. </title> <journal> Information Systems, </journal> <volume> 15(2) </volume> <pages> 207-232, </pages> <year> 1990. </year>
Reference-contexts: In version modelling, a structural change requires the replacement of the old system by a new system. Other research regarding evolving information systems can be found in <ref> [MS90] </ref>, in which an algebra is presented that allows relational tables to evolve by changing their arity. The structure of the paper is as follows. In section 2 we describe the approach that has been taken to the concept of evolution.
Reference: [NH89] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference: [PW93] <author> H.A. Proper and Th.P. van der Weide. </author> <title> Towards a General Theory for the Evolution of Application Models. In M.E. </title> <editor> Orlowska and M. Papazoglou, editors, </editor> <booktitle> Proceedings of the Fourth Aus-tralian Database Conference, Advances in Database Research, </booktitle> <pages> pages 346-362. </pages> <publisher> World Scientific, </publisher> <address> Brisbane, Australia, </address> <month> February </month> <year> 1993. </year> <pages> Page 19 </pages>
Reference-contexts: The theory of such systems should, however, be independent of whatever modelling technique is used to describe the application model. In this paper, we discuss a general theory for the evolution of application models. In <ref> [PW93] </ref>, an informal introduction to this theory is provided. <p> The world model encompasses the combination of information structure, constraints and population. A conceptual specification of a universe of discourse, containing both the action and world model, is called an application model ([FOP92a], <ref> [PW93] </ref>). The resulting hierarchy of models is depicted in figure 1. 2.2 The extent of the corpus evolutio nis The part of an (evolving) information system that is allowed to change over time, will be referred to as corpus evolutionis.
Reference: [Rod91] <author> J.F. Roddick. </author> <title> Dynamically chang-ing schemas within database models. </title> <journal> The Australian Computer Journal, </journal> <volume> 23(3) </volume> <pages> 105-109, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction As has been argued in <ref> [Rod91] </ref> and [FOP92b], there is a growing demand for information systems, not only allowing for changes of their information base, but also for modifications in their underlying structure (conceptual schema and specification of dynamic aspects). In case of snapshot databases, structure modifications will lead to costly data conversions and reprogramming.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A Taxonomy of Time in Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 236-246, </pages> <address> Austin, </address> <year> 1985. </year>
Reference-contexts: The domain AMH for application model histories is determined by the following components: 1. The set AME is the domain for the evolvable 1 In this paper, the difference between recording and event time <ref> [SA85] </ref>, and the ability to correct stored information are not taken into consideration. For more details, see [FOP92a] or [FOP92b]. Page 4 elements of an application model. A formal def- inition of AME will be provided in section 5. 2.
Reference: [Tro91] <author> O.M.F. de Troyer. </author> <title> The OO-Binary Relationship Model: A Truly Object Oriented Conceptual Model. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 561-578, </pages> <address> Trond-heim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Constraints are inherited via the identification hierarchy. However, as in object oriented data mod-elling techniques, overriding of constraint definition in identification hierarchies is possible (see for instance <ref> [Tro91] </ref>). This will be discussed in more detail in a later section. As an illustration of the assignment of constraints to object types, consider figure 14. The depicted data model is conforming to NIAM, while the subtype defining rules have been formulated in LISA-D.
Reference: [WHO92] <author> G.M. Wijers, A.H.M. ter Hofstede, and N.E. van Oosterom. </author> <title> Representation of Information Modelling Knowledge. </title> <editor> In V.-P. Tahvanainen and K. Lyytinen, editors, </editor> <title> Next Generation CASE Tools, </title> <booktitle> volume 3 of Studies in Computer and Communication Systems, </booktitle> <pages> pages 167 - 223. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference: [WJL91] <author> G. Wiederhold, S. Jajodia, and W. Lit-win. </author> <title> Dealing with the Granularity of Time in Temporal Databases. </title> <editor> In R. An-dersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 124-140, </pages> <address> Trond-heim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For the moment, F is assumed to contain the one-step increment operator ., and the comparison operator . Several ways of defining a time axis exist, see e.g. [CR87], <ref> [WJL91] </ref> or [All84]. The time axis is the axis along which the application model evolves. With this time axis, an application model history is a (partial) mapping T AME . 2 AMH is the set of all such histories.
Reference: [WMP + 76] <author> A. van Wijngaarden, B.J. Mailloux, J.E.L. Peck, C.H.A. Koster, M. Sint-zoff, C.H. Lindsey, L.T. Meertens, and R.G. Fisker. </author> <title> Revised Report on the Algorithmic Language ALGOL 68. </title> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>

References-found: 23

