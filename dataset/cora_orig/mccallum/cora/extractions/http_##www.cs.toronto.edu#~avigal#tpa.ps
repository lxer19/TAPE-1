URL: http://www.cs.toronto.edu/~avigal/tpa.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Title: High Level Change Management using Temporal Agents  
Author: Avigdor Gal, Opher Etzion 
Keyword: change management, information agents, cooperative databases, temporal databases, active databases  
Address: Haifa, 32000, Israel  
Affiliation: Technion Israel Institute of Technology Faculty of Industrial and Management Engineering  
Date: September 28, 1995  
Abstract: Business Re-engineering requires frequent changes in the enterprises' information systems, however the current technology of data dictionaries is not effective for the tracing of required changes and their management. In this paper we introduce an architecture of change management using active temporal repositories. Flexible change management allows the support of information about past or future versions of information systems, as well as the capability to retrieve and update temporal information. The implementation of change management in a temporal environment is carried out by the partition of the temporal universe among temporal agents, each of them handles a single version of an application with a required collaboration among them. The change management process, and the inter and intra agent processing are described in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Allen, M. Loomis, M. </author> <title> Mannino The integrated Dictionary/Directory System. </title> <journal> ACM Computing Surveys, </journal> <volume> 14(2), </volume> <month> June </month> <year> 1982, </year> <pages> pp 245-286. </pages>
Reference-contexts: Alas, current information technologies, using abstractions such as data dictionaries form an obstacle to the implementation of re-engineering due to difficulties in tracing the consequences of such changes on the information systems and on the application programs. Data dictionaries <ref> [1] </ref> have been proposed as abstractions of concepts that are vital to model information systems. However, the contribution of data dictionaries to change management has been marginal due to the following three major problems: 1 * Data dictionaries are loosely coupled with the actual applications. <p> The class Globally-Defined-Data-Item represents information about data-items that are shared among the repositories. This information resides in the global repository that contains only the meta-data entities. 5 Product-Price-Type= (s1) N3, Dec 1 1990, Dec 1 1990, <ref> [Dec 1 1990; 1] </ref> (s3) N5, Oct 23 1992; Oct 23 1992; [F eb 1 1993; 1] (s4) N7, June 5 1993; | -z - June 4 1993; | -z - [Sep 1 1993; 1] t v The values of the data itself reside in local repositories and may vary from <p> The class Globally-Defined-Data-Item represents information about data-items that are shared among the repositories. This information resides in the global repository that contains only the meta-data entities. 5 Product-Price-Type= (s1) N3, Dec 1 1990, Dec 1 1990, [Dec 1 1990; 1] (s3) N5, Oct 23 1992; Oct 23 1992; <ref> [F eb 1 1993; 1] </ref> (s4) N7, June 5 1993; | -z - June 4 1993; | -z - [Sep 1 1993; 1] t v The values of the data itself reside in local repositories and may vary from one repository to another. <p> the global repository that contains only the meta-data entities. 5 Product-Price-Type= (s1) N3, Dec 1 1990, Dec 1 1990, [Dec 1 1990; 1] (s3) N5, Oct 23 1992; Oct 23 1992; [F eb 1 1993; 1] (s4) N7, June 5 1993; | -z - June 4 1993; | -z - <ref> [Sep 1 1993; 1] </ref> t v The values of the data itself reside in local repositories and may vary from one repository to another. The class Local-Data-Item represents information about data-items in the various repositories, their location, their accessibility and their type. <p> However, transactions may generate update operations with temporal validity that exceeds the limits of a single time region. Hence, cooperation among temporal agents is required. For example, a modification of Global-Range for a certain instance is issued in August 1, 1993, for the interval <ref> [June 25 1993, 1] </ref>. This retroactive modification activates (i2), in the old TDG. However, since a Global-Range is enforced only 7 days after the change, the consequences of the activation of (i2) is in the interval [July 2 1993, 1]. <p> This retroactive modification activates (i2), in the old TDG. However, since a Global-Range is enforced only 7 days after the change, the consequences of the activation of (i2) is in the interval <ref> [July 2 1993, 1] </ref>. This time interval belongs to a new temporal agent with a new TDG. Thus, a message regarding this activation should pass between the agents.
Reference: [2] <author> U. Dayal, M. Hsu, R. </author> <title> Ladin ATransactional Model for Long-Running Activities. </title> <booktitle> Proc VLDB 1991, </booktitle> <pages> pp 113-122 </pages>
Reference-contexts: Schema and functionality evolution over time generate additional update operations. Consequently, the issue of handling very long transactions becomes a critical issue in this framework. As noted in the literature <ref> [2] </ref>, long transactions can be decomposed by relaxing the atomicity. In our framework, temporal partition of transactions may enable parallel execution of sub-transactions. The transaction model should support both decisions about the level of possible parallelism and a control model that executes parallel sub-transactions.
Reference: [3] <author> Chakravarthy S. et al. HiPAC: </author> <title> A research Project in Active, Time-Constrained Database Management, </title> <type> Final Technical Report, </type> <institution> XAIT-89-02, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: For each agent, the process is completed, when there are no more activated edges. 4.4 Atomicity modes In long-lived transactions, the atomicity requirement of databases may be relaxed in two ways [7]: * enabling asynchronous execution of a portion of the transaction (the "defer mode" in HiPac <ref> [3] </ref>). * enabling "commit" of some sub-transactions and "abort" of other sub-transactions of the same transaction.
Reference: [4] <author> O. </author> <title> Etzion - PARDES, Efficient Support for Computational Invariants in a Semantic Active Database Model, </title> <type> Ph.D. Thesis, </type> <institution> Temple University, </institution> <month> Apr </month> <year> 1990. </year>
Reference-contexts: For example, if the Default-Type of an instance is also modified, (i1) would not be activated until both &lt;Given-Type, (i1)&gt; and &lt;Default-Type, (i1)&gt; are activated. This restriction guarantees update minimality by avoiding redundant updates <ref> [4] </ref>.
Reference: [5] <author> O. Etzion, A. Gal, A. </author> <title> Segev Temporal Active Databases, </title> <booktitle> Proceedings of the International Workshop on an Infrastructure for Temporal Database, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: The rest of the paper is organized as follows. Section 2 describes the data model of a temporal active database, based on <ref> [5] </ref>. Section 3 describes the major tool for the implementation of the change management, a dependency graph which is an executable data structure. Section 4 discusses the change management process. 2 The temporal active data model In recent papers ([5], [10]) we investigated the combination of temporal database technology and active <p> We use this combination as an information model for the repository. This section a temporal active database. A full description of the temporal active database model can be found in <ref> [5] </ref>. <p> Decision Time (t d ) The time at which the data-item's value was decided in the database's domain of discourse <ref> [5] </ref>. For example, if a decision about the type of a product price was decided in November 11 1991, and inserted to the database in November 12 1991, t d would be November 11 1991, and t x would be November 12 1991.
Reference: [6] <author> O. </author> <title> Etzion - PARDES-A Data-Driven Oriented Active Database Model, </title> <booktitle> SIGMOD RECORD, 22(1),pp. </booktitle> <pages> 7-14, </pages> <month> Mar </month> <year> 1993. </year>
Reference-contexts: Dec 1, 1990 Jan 1, 1992 Feb 1, 1993 Sep 1 1993 June 4 , 1993 Oct 23, 1992 Dec 1 , 1990 t d N5 N7 2.2 The active dimension in a temporal database For the active dimension we use the invariant language as introduced in the PARDES model <ref> [6] </ref>. An invariant is a declarative definition of a value dependency that should be satisfied for any instance in a defined temporal-element in the database. There are two types of invariants, derivations and constraints. A derivation states the dependency between a derived data-item and other data-items in the database. <p> The change management process creates derived update operations, executes them and evaluates relevant constraints. An update process for a non-temporal active database is presented in the PARDES project framework <ref> [6] </ref>. We extend the PARDES approach to support the following operations: 1. Schema evolution, i.e., the ability to change any component in the information system and trace changes that have been performed over time. 2. <p> The inference mechanism in the temporal case is similar to the one in the non-temporal case, and is defined in <ref> [6] </ref>.
Reference: [7] <author> O. </author> <title> Etzion- Flexible Consistency Modes for Active Database Applications. </title> <note> to appear in Information Systems Journal </note>
Reference-contexts: For each agent, the process is completed, when there are no more activated edges. 4.4 Atomicity modes In long-lived transactions, the atomicity requirement of databases may be relaxed in two ways <ref> [7] </ref>: * enabling asynchronous execution of a portion of the transaction (the "defer mode" in HiPac [3]). * enabling "commit" of some sub-transactions and "abort" of other sub-transactions of the same transaction.
Reference: [8] <author> O. </author> <title> Etzion The reflective Approach for Data-Driven Rules, </title> <note> to appear in International Journal of Intelligent and cooperative Information Systems, </note> <year> 1994. </year>
Reference-contexts: In this paper we propose an architecture for a change management based on a combination of several technologies: * The information repository technology which controls the application behavior in a tightly-coupled manner [13]. * The active technology that supports automatic activation of derived changes <ref> [8] </ref>. * The temporal technology which supports several versions of the information repository entities and sustain the modelling of time characteristics for any information about the application [15]. The combination of these technologies creates a powerful tool for modeling complex applications. <p> As proposed in <ref> [8] </ref>, the nodes of the dependency graph designate the application's elements (data-items, invariants, and events).
Reference: [9] <author> S.K. </author> <title> Gadia The Role of Temporal Elements in Temporal Databases, </title> <journal> Data Engineering Bulletin, </journal> <volume> 7, </volume> <pages> pp. 197-203, </pages> <year> 1988. </year>
Reference-contexts: In a temporal framework, each operation is effective in a temporal element, i.e., a time-point, an interval or a collection of intervals and time-points <ref> [9] </ref>. Thus, an operation can be partitioned to a collection of sub-operations, each of which is applied to a single time-point. We may require to 2 relax the atomicity restriction among operations on different time-points, i.e., to allow the failure of a sub-operation without aborting the entire operation.
Reference: [10] <author> A. Gal, E. Etzion, A. </author> <title> Segev Representation of Highly-Complex Knowledge in a Database, </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 3(2), </volume> <month> Mar. </month> <year> 1994. </year> <month> 19 </month>
Reference-contexts: Section 3 describes the major tool for the implementation of the change management, a dependency graph which is an executable data structure. Section 4 discusses the change management process. 2 The temporal active data model In recent papers ([5], <ref> [10] </ref>) we investigated the combination of temporal database technology and active database technology as a key combination for supporting complex applications. We use this combination as an information model for the repository. This section a temporal active database.
Reference: [11] <author> S. Hudson, R. King - CACTIS: </author> <title> A Database System for Specification Functionally Defined Data, </title> <booktitle> proc. IEEE OOBDS Workshop, </booktitle> <year> 1986. </year>
Reference-contexts: In addition to the dependency graph, the transitive closure of each node in the graph (denoted as TC (node)) is created. The transitive closure is used for performance purposes <ref> [11] </ref> as discussed in Section 4. 3.2 The implications of schema evolution Schema evolution results in modifications of meta-data entities. For example, some local repository administrators complained that a week period is not sufficient to override a change in the global range. <p> This transitive closure is required to avoid update redundancy <ref> [11] </ref>. If a connector has been marked in this process, a message is passed to the appropriate agent, to expand its subgraph to include the transitive closure of the matching connector as well. Each temporal agent executes independently the atomic operations that were assigned to it.
Reference: [12] <author> S.E. </author> <title> Madnick Integration Technology: The reinvention of the Linkage Between Information Systems and Computer Science. </title> <note> To appear in Decision Support Systems </note>
Reference-contexts: 1 Introduction and motivation 1.1 Background In today's business environment, re-engineering has become a vital process in many enterprises <ref> [12] </ref>. The process of re-engineering involves changes in the enterprise's structure and processes to meet its evolving goals in a constantly changing environment.
Reference: [13] <author> J. Mylopoulos, E. </author> <title> Yu Aligning Information System Strategy with Business Strategy: A Technical Perspective, A keynote address in the International Workshop on Next Generation Technologies and Systems, </title> <institution> Haifa, Israel, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In this paper we propose an architecture for a change management based on a combination of several technologies: * The information repository technology which controls the application behavior in a tightly-coupled manner <ref> [13] </ref>. * The active technology that supports automatic activation of derived changes [8]. * The temporal technology which supports several versions of the information repository entities and sustain the modelling of time characteristics for any information about the application [15]. <p> The high-level abstractions created by the temporal and active combination, can cope with enterprises' change management without the need to manually rewrite software programs. This approach is consistent with the trend presented in <ref> [13] </ref> where: "Information systems of the future will require advances in database technology to accommodate a broad spectrum of modeling and implementation techniques". Three major challenges should be considered while designing the change management architecture in the temporal active repository environment. <p> The information of "no threat of war" would cause an infinite temporal cycle, where a threat of war is inferred and refuted in a cyclic way. In this paper we introduce a change management architecture, that utilize the notions of information repositories and information agents <ref> [13] </ref> and copes with the challenges discussed above. An information agent is a robust, situated, embodied, goal-driven application program. In our context, an information repository controls all the components of an information system including both the structural and the behavioral aspects.
Reference: [14] <author> R. Snodgrass, I. </author> <title> Ahn Temporal Databases, </title> <booktitle> IEEE Computer 19, </booktitle> <pages> pp. 35-42, </pages> <month> Sep </month> <year> 1986. </year>
Reference-contexts: This section a temporal active database. A full description of the temporal active database model can be found in [5]. Section 2.1 describes the temporal data model and section 2.2 extend the model to include the active extension. 2.1 The temporal data model 2.1.1 Time types As argued in <ref> [14] </ref>, more than one type of time is required to be associated with a data-item in order to model temporal functionality.
Reference: [15] <author> A.U. Tansel, Clifford J., Gadia S., Jajodia S., Segev A., Snodgrass R. </author> <title> Temporal Databases, </title> <publisher> The Benjamin/Commings Publishing Company, Inc., </publisher> <address> Redwood City, CA., </address> <year> 1993. </year> <month> 20 </month>
Reference-contexts: repository technology which controls the application behavior in a tightly-coupled manner [13]. * The active technology that supports automatic activation of derived changes [8]. * The temporal technology which supports several versions of the information repository entities and sustain the modelling of time characteristics for any information about the application <ref> [15] </ref>. The combination of these technologies creates a powerful tool for modeling complex applications. It is especially useful in the meta-data modeling of cooperative applications characterizes by interdependencies and schema evolution control.
References-found: 15

