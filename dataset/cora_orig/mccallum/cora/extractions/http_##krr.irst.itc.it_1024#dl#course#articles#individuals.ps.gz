URL: http://krr.irst.itc.it:1024/dl/course/articles/individuals.ps.gz
Refering-URL: http://krr.irst.itc.it:1024/dl/course/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Andrea Schaerf Reasoning with Individuals in Concept Languages  
Address: via Salaria 113, I-00198 Roma, Italy.  
Affiliation: Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza",  
Abstract-found: 0
Intro-found: 1
Reference: [BBH + 91] <author> Franz Baader, Hans-Jurgen Burkert, Jochen Heinson, Bernhard Hollunder, Jurgen Muller, Bernard Nebel, Werner Nutt, and Hans-Jurge Profitlich. </author> <title> Terminological knowledge representation: A proposal for a terminological logic. </title> <type> Technical Report TM-90-04, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intel-ligenz, </institution> <address> Postfach 2080, D-6750 Kaiserslautern, Germany, </address> <year> 1991. </year>
Reference-contexts: It is also confirmed by the fact that they are both included in the recent proposal for a standard concept-based system in [PS93] (O was also included in the previous proposal <ref> [BBH + 91] </ref>). Moreover, in Section 3, we show that the use of O is also related to the introduction of an epistemic operator K in the concept-based system, as proposed in [DLN + 92]. <p> For example, ALEU is the same language as ALC (and ALEU C), ALEO is the same as ALEOB and so on. We do not claim the list of the considered constructors to be exhaustive. The description of some other useful constructors can be found in <ref> [BBH + 91] </ref> and in [PS93]. From this point on, we call the languages without O and B pure languages and those including at least one of them mixed languages. <p> Some of them are concerned with 9 reasoning about concept expressions and they fall under the name of TBox--reasoning. Some others require to reason on a set of assertions, they are called ABox-reasoning. In this paper, we are mainly interested in the following basic reasoning tasks (see <ref> [BBH + 91] </ref> for a list of more complex reasoning services). Definition 2.3 Let L be any concept language.
Reference: [BBMAR89] <author> Alexander Borgida, Ronald J. Brachman, Deborah L. McGuin-ness, and Lori Alperin Resnick. </author> <title> CLASSIC: A structural data model for objects. </title> <booktitle> In ACM SIGMOD, </booktitle> <year> 1989. </year>
Reference-contexts: The reason why this fact results in a mixing of the two components will clarified in the sequel. In particular, one of these constructors is obtained by building a concept 3 from a set of enumerated individuals. This constructor, called ONE-OF in <ref> [BBMAR89] </ref> and simply O in this paper, allows one to express many natural concepts. For example, the concept Permanent onu member can be defined as fchina, france, russia, uk, usag, where china,..., usa are individuals. Another constructor of the same kind, called FILLS in [BBMAR89] and B here, is the one <p> This constructor, called ONE-OF in <ref> [BBMAR89] </ref> and simply O in this paper, allows one to express many natural concepts. For example, the concept Permanent onu member can be defined as fchina, france, russia, uk, usag, where china,..., usa are individuals. Another constructor of the same kind, called FILLS in [BBMAR89] and B here, is the one for denoting the set of objects having a particular individual as a filler of a specified role. For example the concept representing the set of USA citizens can be expressed as CITIZENSHIP:usa, where CITIZENSHIP is a role and usa is an individual.
Reference: [BH91] <author> Franz Baader and Bernhard Hollunder. </author> <title> A terminological knowledge representation system with complete inference algorithm. </title> <booktitle> In Proc. of the Workshop on Processing Declarative Knowledge, PDK-91, Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: We briefly describe some of the strategies chosen by the implementors of the actual systems in order to deal with O and B (Section 4). We extend the reasoning procedure proposed in <ref> [SSS91, DLNN91, BH91, DLNS92] </ref> in order to develop a complete technique for reasoning with O and B (Section 5). We present several complexity results (Section 6). <p> Example 3.1 Consider the following ALEO-concept formed by a conjunction of three existential quantifications 9R.(A u fa; bg) u 9R.(:A u fag) u 9R.(:A u fbg): Suppose that we want to check its satisfiability. The standard approach (e.g. <ref> [SSS91, BH91] </ref>) to this problem is to separately check for the satisfiabil-ity of the three concepts involved in the existential quantifications, namely A u fa; bg, :A u fag, and :A u fbg. It is easy to see that this technique fails to recognize that the whole concept is unsatisfiable. <p> For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP [SSS91] [LS91a] ALE NP PSPACE ALEO PSPACE [DHL + 92] [DLNS92] ALC PSPACE PSPACE ALCO PSPACE [SSS91] <ref> [BH91] </ref> Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously disjoint: ( 2 R) and ( 3 R).
Reference: [BL84] <author> Ronald J. Brachman and Hector J. Levesque. </author> <title> The tractability of subsumption in frame-based description languages. </title> <booktitle> In Proc. 40 of the 4th Nat. Conf. on Artificial Intelligence AAAI-84, </booktitle> <pages> pages 34-37, </pages> <year> 1984. </year>
Reference-contexts: The simplest language of this family, called AL, is an extension of the basic language F L introduced in <ref> [BL84] </ref> including a constructor for denoting the complement of primitive concepts and the two special concepts &gt; and ?.
Reference: [BM77] <author> John L. Bell and Moshe Machover. </author> <title> A Course in Mathematical Logic. </title> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference-contexts: However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic <ref> [BM77] </ref>, and is employed in [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] both for the design of algorithms for the various reasoning tasks, and for studying their computational properties.
Reference: [BMPS + 91] <author> Ronald J. Brachman, Deborah L. McGuinness, Peter F. Patel-Schneider, Lori Alperin Resnick, and Alex Borgida. </author> <title> Living with CLASSIC: when and how to use a KL-ONE-like language. </title> <editor> In John F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 401-456. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: For this reason, an inconsistency can be generated by the conjunction of two concept of the form 8R.fa 1 ; : : : ; a n g and ( m R), in the case m &gt; n. As pointed out in <ref> [BMPS + 91] </ref>, using O it is possible to express the complement of a concept with respect to another concept. Let clarify this point by means of the following example (which is a slight modification of the example in [BMPS + 91, page 44]). <p> As pointed out in [BMPS + 91], using O it is possible to express the complement of a concept with respect to another concept. Let clarify this point by means of the following example (which is a slight modification of the example in <ref> [BMPS + 91, page 44] </ref>). <p> For this purpose we have chosen to describe two systems, namely CLASSIC and Back. A more detailed description of them can be found in <ref> [BMPS + 91, BPS92] </ref> and [QK90] respectively. In CLASSIC, individuals are treated with a non-standard semantics.
Reference: [BPGL85] <author> Ronald J. Brachman, Victoria Pigman Gilbert, and Hector J. Levesque. </author> <title> An essential hybrid reasoning system: Knowledge and symbol level accounts in KRYPTON. </title> <booktitle> In Proc. of the Int. Joint Conf. on Artificial Intelligence, </booktitle> <pages> pages 532-539, </pages> <address> Los An-geles, </address> <institution> Cal., </institution> <year> 1985. </year>
Reference-contexts: The hierarchical structure is defined in such a way that more specific concepts inherit the properties of the more general ones. One of the main characteristics of concept-description-based knowledge bases is the clear distinction between terminological and assertional knowledge (see <ref> [BPGL85, Neb90a, Mac91, NvL88] </ref>). The former deals with concepts and roles and their relationship, the latter with individuals and their membership to concepts and roles. The two kinds of knowledge are stored in two different components of the knowledge base and each component has its specialized reasoner. <p> The transformation is then defined by the following rules (where Q is a role not appearing in ): (R (a; b)) = 9R.fbg (a) (10) (~ p) = :(p) (12) 9Q.(C (l n ) u fa (l n ) g)(i k ) (13) () = ff2 4 except for KRIPTON <ref> [BPGL85] </ref>, which allows all the propositional connectives. 17 Example 3.5 Consider the following complex ALCO-knowledge base 1 : 1 = f9R.D (a) _ R (b; c); ~ R (a; b)g Applying the reduction , we obtain: ( 1 ) = f9Q.(9R.Dufag)t9Q.((9R.fcg)ufbg)(i 1 ); 9Q.((:9R.fbg)ufag)(i 2 )g Lemma 3.6 A complex ALCO-knowledge
Reference: [BPS92] <author> Alexander Borgida and Peter F. Patel-Schneider. </author> <title> A semantics and complete algorithm for subsumption in the CLASSIC description logic. </title> <note> Submitted for publication, </note> <year> 1992. </year>
Reference-contexts: For this purpose we have chosen to describe two systems, namely CLASSIC and Back. A more detailed description of them can be found in <ref> [BMPS + 91, BPS92] </ref> and [QK90] respectively. In CLASSIC, individuals are treated with a non-standard semantics. <p> The reason why the CLASSIC designers have left the standard semantics is mostly related to the drawbacks described in Section 3 (in particular in Sections 3.1 and 3.2), and to the computational intractability of subsumption (see Section 6), which, in their opinion (see <ref> [BPS92] </ref>), is not relegated only to few non-practical worst cases. Roughly speaking, the individuals appearing in concept descriptions are interpreted as primitive disjoint concepts, i.e. as subsets of the domain, instead of as single elements of it. This semantics eliminates the effects of implicit assertions. <p> In other words, even when a knowledge base is involved the type of subsumption considered is always the terminological one. This semantics is weaker than the standard one, in fact it fails to draw several conclusions that are entailed in the standard semantics. The following example is taken from <ref> [BPS92, page 13] </ref>. The names are modified w.r.t. the original version. 21 Example 4.1 Let 3 be the following CLASSIC-knowledge base: 3 = f8FRIEND.fsusang (john), Married (susan)g The proposed semantics fails to draw the correct conclusion that 3 j=8FRIEND.Married (john). In Back, O and B are not allowed.
Reference: [Bra92] <author> Ronald J. Brachman. </author> <title> "reducing" CLASSIC to practise: Knowledge representation meets reality. </title> <booktitle> In Proc. of the 3nd Int. Conf. on Principles of Knowledge Representation and Reasoning KR-92, </booktitle> <pages> pages 247-258, </pages> <year> 1992. </year>
Reference-contexts: This treatment avoids the reasoning complications of Section 3. It is simple and efficient; in fact reasoning with collections of attributes in Back is just a matter of computing intersection, union, and difference between sets. The possible usefulness of sets of non-individual elements is argued also in <ref> [Bra92] </ref>, where they are called Host Individuals.
Reference: [DE92] <author> Francesco M. Donini and Angelo Era. </author> <title> Most specific concepts for knowledge bases with incomplete information. </title> <editor> In Y. Yesha, editor, </editor> <booktitle> Information and Knowledge Management, CIKM-92, </booktitle> <pages> pages 545-551, </pages> <year> 1992. </year>
Reference-contexts: It follows that the use of O gives the possibility to complete reasoning using the Abstraction/Subsumption technique (see <ref> [DE92] </ref> for a detailed discussion on this topic). 15 3.4 Epistemic Operator In [DLN + 92], the addition of an epistemic operator K to concept languages is investigated. Among other things, it is considered the possibility of enhancing the language used to query a knowledge by means of that operator.
Reference: [DHL + 92] <author> Francesco M. Donini, Bernhard Hollunder, Maurizio Lenzerini, Alberto Marchetti Spaccamela, Daniele Nardi, and Werner Nutt. </author> <title> The complexity of existential quantification in concept languages. </title> <journal> Artificial Intelligence, </journal> <volume> 2-3:309-327, </volume> <year> 1992. </year>
Reference-contexts: Hence B can be viewed as a limited form of the combination of E and O. Reasoning with E has been proved to be generally hard (see <ref> [DHL + 92, DLNS92] </ref>). However, the hardness of E is related to the possibility of nesting 19 arbitrary numbers of existential quantification. Since B does not offer the possibility of nesting, the issues related to E do not regard B. <p> However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers. <p> Therefore the intractability is directly extended to several other languages. For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP [SSS91] [LS91a] ALE NP PSPACE ALEO PSPACE <ref> [DHL + 92] </ref> [DLNS92] ALC PSPACE PSPACE ALCO PSPACE [SSS91] [BH91] Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously disjoint: ( 2 R) and ( 3
Reference: [DLN + 92] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, Werner Nutt, and Andrea Schaerf. </author> <title> Adding epistemic operators to concept languages. </title> <booktitle> In Proc. of the 3nd Int. Conf. on 41 Principles of Knowledge Representation and Reasoning KR-92, </booktitle> <pages> pages 342-353, </pages> <year> 1992. </year>
Reference-contexts: Moreover, in Section 3, we show that the use of O is also related to the introduction of an epistemic operator K in the concept-based system, as proposed in <ref> [DLN + 92] </ref>. The epistemic operator K turned out to be very useful both for providing a highly expressive query language and for a formal characterization of some procedural mechanisms usually considered in concept-based systems. <p> It follows that the use of O gives the possibility to complete reasoning using the Abstraction/Subsumption technique (see [DE92] for a detailed discussion on this topic). 15 3.4 Epistemic Operator In <ref> [DLN + 92] </ref>, the addition of an epistemic operator K to concept languages is investigated. Among other things, it is considered the possibility of enhancing the language used to query a knowledge by means of that operator. In particular, the constructor KC is inserted in such query language, called ALCK. <p> Nevertheless reasoning in ALCO can be done in PSPACE. In fact, in [DLN + 93], following the idea in <ref> [DLN + 92] </ref>, a polynomial space algorithm for instance checking j= D (a), where is an ALC-knowledge base and D is an ALCK-concept. It is also shown that such problem is at least as hard as the same problem where C is an ALCO-concept.
Reference: [DLN + 93] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, Werner Nutt, and Andrea Schaerf. </author> <title> Adding epistemic operators to concept languages. </title> <type> Technical report, </type> <institution> Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza", </institution> <year> 1993. </year> <month> Forthcoming. </month>
Reference-contexts: For this reason, as shown in <ref> [DLN + 93] </ref>, reasoning with O turned out to be a basic tool for reasoning with K. 3.5 Number Restrictions and Complements The ability offered by the constructor O to express concepts of a fixed extension gives also the possibility to express implicit number restrictions on the roles. <p> In the calculus shown in Section 5, this possibility is taken into account by the ! [=] -rule which allows for the substitution of variable in different traces with the same individual. Nevertheless reasoning in ALCO can be done in PSPACE. In fact, in <ref> [DLN + 93] </ref>, following the idea in [DLN + 92], a polynomial space algorithm for instance checking j= D (a), where is an ALC-knowledge base and D is an ALCK-concept. <p> It follows that concept satisfiability in ALCO, being at least as easy as a PSPACE problem, is in PSPACE too. In conclusion, we have the following theorem, whose proof derives from the results in <ref> [DLN + 93] </ref> and the above observation. Theorem 6.7 Terminological subsumption in ALCO is a PSPACE-complete problem. The intuition of the fact that reasoning in ALCO is still in PSPACE is that, although the constraint system has in general exponential size, the informations regarding the individuals are polynomial. <p> Whereas, in those cases in which reasoning is in the same complexity class as the underlying language (ALC), the algorithms are generally more complex and less efficient (in term of both time and space) than in the underlying language (see <ref> [DLN + 93] </ref>). We have also identified an intuitive explanation of this intractability: On one side, it is related to the implicit disjunction carried by the use of sets with more then one object.
Reference: [DLNN91] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Werner Nutt. </author> <title> The complexity of concept languages. </title> <editor> In James Allen, Richard Fikes, and Erik Sandewall, editors, </editor> <booktitle> Proc. of the 2nd Int. Conf. on Principles of Knowledge Representation and Reasoning KR-91, </booktitle> <pages> pages 151-162. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: We briefly describe some of the strategies chosen by the implementors of the actual systems in order to deal with O and B (Section 4). We extend the reasoning procedure proposed in <ref> [SSS91, DLNN91, BH91, DLNS92] </ref> in order to develop a complete technique for reasoning with O and B (Section 5). We present several complexity results (Section 6). <p> Unfortunately, besides of the gained expressive power, such constructors usually increase the complexity of reasoning in concept languages. An extensive study of the complexity of computing subsumption in these languages is performed in <ref> [DLNN91] </ref>. Apart from the above ones, two further particular constructors have been considered in concept languages. <p> However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers. <p> For the sake of simplicity, we restrict our attention to the language ALCO (ALCOB) and its sublanguages. The calculus can be easily extended to other languages (following the line of <ref> [DLNN91] </ref>). The calculus operates on constraints consisting of individuals, variables, concepts and roles. Concepts are assumed to be simple, i.e. they contain complements only of one of the forms :fa 1 ; : : : ; a n g or :A, where A is a primitive concept. <p> that ALCO is a superlanguage of ALEO). 33 Theorem 6.8 Terminological subsumption in ALEO is a PSPACE-complete problem. 6.4 Reasoning in ALO In this section we state that subsumption in ALO is coNP-complete, besides the fact that in AL both subsumption and instance checking are in P, as proved in <ref> [DLNN91] </ref> and [LS91a] respectively. Since ALO does not have E, ALO is not equivalent to ALOB and therefore (unlike previous sections) the results obtained for the language with O, are not directly extended to the language with O and B. <p> Therefore we have proved the following lemma: Lemma 6.12 Concept satisfiability in ALO is an NP problem. Theorem 6.13 Terminological subsumption in ALO is coNP-complete. Proof. The NP-hardness follows from Lemma 6.10. Regarding the upper bound, using the technique in <ref> [DLNN91, Sec. 5] </ref>, Lemma 6.12 can be easily extended to state that subsumption in ALO is in NP too. In [LS91a], it is observed that it is not necessary to have a constructor for primitive negation for intractability, but it suffices to have the possibility to express disjointness between concepts.
Reference: [DLNS92] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Andrea Schaerf. </author> <title> From subsumption to instance checking. </title> <type> Technical Report 15.92, </type> <institution> Dipartimento di Informatica e Sistemistica, Universita di Roma "La Sapienza", </institution> <year> 1992. </year>
Reference-contexts: We briefly describe some of the strategies chosen by the implementors of the actual systems in order to deal with O and B (Section 4). We extend the reasoning procedure proposed in <ref> [SSS91, DLNN91, BH91, DLNS92] </ref> in order to develop a complete technique for reasoning with O and B (Section 5). We present several complexity results (Section 6). <p> Hence B can be viewed as a limited form of the combination of E and O. Reasoning with E has been proved to be generally hard (see <ref> [DHL + 92, DLNS92] </ref>). However, the hardness of E is related to the possibility of nesting 19 arbitrary numbers of existential quantification. Since B does not offer the possibility of nesting, the issues related to E do not regard B. <p> However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers. <p> The results of Theorem 6.6 are important because they relate ABox problems with TBox ones. To this regard, in <ref> [DLNS92] </ref> it was already proved that for a large class of languages concept satisfiability and knowledge base satis-fiability are in the same complexity class, and therefore the latter is reducible to the former. However, that result is achieved considering each language separately. <p> This result is important, since it relates the complexity of an ABox-problem to the complexity of a TBox-problem. Such a relationship is crucial for the design of efficient reasoning algorithms and it is still not completely clear. In [Sch93] and <ref> [DLNS92] </ref> it was also shown that there are languages such that instance checking and subsumption are in different complexity classes. 8 Since no primitive complement are considered, the results are valid even for the less expressive language than the ones considered here (i.e. <p> FLOB ). 31 6 6 - fi fi fi fi fi fi 6 fi ficoncept terminological knowledge base satisfiability instance hybrid subsumptionchecking subsumption satisfiability ABox reasoning TBox reasoning In particular, in <ref> [DLNS92] </ref> it is shown that in ALE instance checking is PSPACE-complete while subsumption is NP-complete. Therefore (assuming NP6=PSPACE), such result proves that, in ALE, instance checking is strictly harder than subsumption. <p> In fact, since the number of concepts to be considered is linear and the number of individuals is linear too, the membership relation of the individuals to the subconcepts can be stored in a table of polynomial size. 6.3 Reasoning in ALE O In <ref> [DLNS92] </ref> it is proven that instance checking in ALE is PSPACE-complete. It follows that instance checking in ALEO is PSPACE-hard, and therefore (Proposition 6.5) subsumption in ALEO is PSPACE-hard too. <p> Therefore the intractability is directly extended to several other languages. For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP [SSS91] [LS91a] ALE NP PSPACE ALEO PSPACE [DHL + 92] <ref> [DLNS92] </ref> ALC PSPACE PSPACE ALCO PSPACE [SSS91] [BH91] Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously disjoint: ( 2 R) and ( 3 R).
Reference: [FMV90] <author> Anna Formica, Michele Missikoff, and S. Vazzana. </author> <title> An object-oriented data model for artificial intelligence applications. </title> <editor> In J. W. Schmidt and A. A. Stogny, editors, </editor> <booktitle> next generation information systems technology: first int. east/west database workshop, number 504 in Lecture Notes in Computer Science, </booktitle> <pages> pages 26-41, </pages> <address> Kiev, USSR, </address> <month> October </month> <year> 1990. </year> <note> Springer-Verlag. </note>
Reference-contexts: On the other hand, if the underlying language does not include any form of disjointness, reasoning with O is in general polynomial. For example, in <ref> [FMV90] </ref>, it is shown that in the language OOL, which extends F LO , subsumption can be checked in polynomial time. The Table 1 summarize the results obtained in this section together with previous known results on the underlying languages.
Reference: [HNSS90] <author> Bernhard Hollunder, Werner Nutt, and Manfred Schmidt-Schau. </author> <title> Subsumption algorithms for concept description languages. </title> <booktitle> In Proc. of 9th the European Conf. on Artificial Intelligence ECAI-90, </booktitle> <address> London, 1990. </address> <publisher> Pitman. </publisher>
Reference-contexts: However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers.
Reference: [Hol90] <author> Bernhard Hollunder. </author> <title> Hybrid inferences in KL-ONE-based knowledge representation systems. </title> <booktitle> In Proc. of the German Workshop on Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers. <p> Furthermore, if the nondeterministic rule applies to S, then it can be applied in a way that it yields a constraint system S 0 such that S 0 is satisfiable if S is satisfiable. Proof. The correctness of rules 1-4 is stated in <ref> [Hol90] </ref>, the extension to rules 5 and 6 is straightforward. <p> The following theorem ensures the termination of the calculus. It is a straightforward extension of the corresponding theorem in <ref> [Hol90] </ref>. Theorem 5.2 Let S be a constraint system. Then: 1. If S is complete then it is satisfiable if and only if it contains no clash. 2.
Reference: [Kin90] <author> Carsten Kindermann. </author> <title> Class instances in a terminological framework-an experience report. </title> <booktitle> In Proc. of the German Workshop on Artificial Intelligence, </booktitle> <pages> pages 48-57. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In fact, given the problem of checking whether j= C (a), with the abstraction process, we compute M SC (a) and, after that, instance checking can be performed by checking whether C subsumes M SC (a). This technique, called Abstraction/Subsumption, has been broadly exploited in actual systems (see <ref> [Kin90, QK90, Neb90b] </ref>). However, the problem of exploiting this technique is that, in general, it is not possible to completely fit the information relevant to an individual into a single concept of the language.
Reference: [LB87] <author> Hector J. Levesque and Ron J. Brachman. </author> <title> Expressiveness and tractability in knowledge representation and reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 3 </volume> <pages> 78-93, </pages> <year> 1987. </year>
Reference-contexts: Later, concept description logics (also called terminological languages or concept languages) have been introduced with the aim of providing a simple and well-established first order semantics to capture the meaning of the most popular features of the structured representations of knowledge (see for example <ref> [LB87, Neb90a] </ref>). In concept languages, concepts are used to represent classes as sets of individuals, and roles are binary relations used to specify their properties or attributes. Typically concepts are structured into hierarchies determined by the properties associated with them.
Reference: [LS91a] <author> Maurizio Lenzerini and Andrea Schaerf. </author> <title> Concept languages as query languages. </title> <booktitle> In Proc. of the 9th Nat. Conf. on Artificial Intelligence AAAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: is a superlanguage of ALEO). 33 Theorem 6.8 Terminological subsumption in ALEO is a PSPACE-complete problem. 6.4 Reasoning in ALO In this section we state that subsumption in ALO is coNP-complete, besides the fact that in AL both subsumption and instance checking are in P, as proved in [DLNN91] and <ref> [LS91a] </ref> respectively. Since ALO does not have E, ALO is not equivalent to ALOB and therefore (unlike previous sections) the results obtained for the language with O, are not directly extended to the language with O and B. <p> This proof is based on a reduction from SAT, the satisfiability problem for a propositional conjunctive normal form (CNF) formula, to the concept satisfiability problem in ALO. This reduction has been sketched in <ref> [LS91a] </ref>, here it is proposed in the full version and its correctness is proven. We define a pos-neg CNF-formula, a CNF-formula 0 such that every clause of 0 is either positive (i.e. it is constituted by positive literals) or negative (i.e. it is constituted by negative literals). <p> Now, it is easy to see that each completion of fx: Cg is smaller than S 0 ; in fact S C contains at least the constraint x: C. We now show that S 0 is polynomial w.r.t. S C (and therefore w.r.t. C). To this aim, in <ref> [LS91a] </ref>, it is shown that for every AL-knowledge base , the unique completion of the constraint system S , has polynomial size w.r.t. jj. <p> Theorem 6.13 Terminological subsumption in ALO is coNP-complete. Proof. The NP-hardness follows from Lemma 6.10. Regarding the upper bound, using the technique in [DLNN91, Sec. 5], Lemma 6.12 can be easily extended to state that subsumption in ALO is in NP too. In <ref> [LS91a] </ref>, it is observed that it is not necessary to have a constructor for primitive negation for intractability, but it suffices to have the possibility to express disjointness between concepts. Therefore the intractability is directly extended to several other languages. <p> Therefore the intractability is directly extended to several other languages. For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP [SSS91] <ref> [LS91a] </ref> ALE NP PSPACE ALEO PSPACE [DHL + 92] [DLNS92] ALC PSPACE PSPACE ALCO PSPACE [SSS91] [BH91] Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously disjoint:
Reference: [LS91b] <author> Maurizio Lenzerini and Andrea Schaerf. </author> <title> Querying concept-based knowledge bases. </title> <booktitle> In Proc. of the Workshop on Processing Declarative Knowledge, PDK-91, Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The usefulness of O in the query language is discussed in <ref> [LS91b] </ref>. In particular, using O it is possible to express various forms of selection that 38 can be usually admitted in database query languages but are missing in standard concept languages. <p> For example it is possible to ask for the books whose author is Newton and whose subject it mathematics: Booku9AUTHOR.fnewtongu9SUBJECT.fmath.g In <ref> [LS91b] </ref>, it is shown that it is possible to query an AL-knowledge base using ALO concepts in polynomial time, opposite to the fact that reasoning in ALO is in general coNP-complete.
Reference: [Mac91] <author> Robert MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In John F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 385-400. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: The hierarchical structure is defined in such a way that more specific concepts inherit the properties of the more general ones. One of the main characteristics of concept-description-based knowledge bases is the clear distinction between terminological and assertional knowledge (see <ref> [BPGL85, Neb90a, Mac91, NvL88] </ref>). The former deals with concepts and roles and their relationship, the latter with individuals and their membership to concepts and roles. The two kinds of knowledge are stored in two different components of the knowledge base and each component has its specialized reasoner.
Reference: [MB92] <author> Robert MacGregor and David Brill. </author> <title> Recognition algorithms for the loom classifier. </title> <booktitle> In Proc. of the 10th Nat. Conf. on Artificial Intelligence AAAI-92, </booktitle> <pages> pages 774-779, </pages> <year> 1992. </year>
Reference-contexts: For this reason, the algorithms for instance checking based on abstraction are, in general, incomplete. For instance, in the above example, the Abstraction/Subsumption technique fails to draw the conclusion that j= 9R.9R.B (a). As pointed out in <ref> [MB92] </ref> there are even other drawbacks about using the Abstraction/Subsumption technique. However they are out of the scope of this paper. Nevertheless, if the language includes O it is possible to make a lostless abstraction.
Reference: [Neb90a] <author> Bernhard Nebel. </author> <title> Reasoning and Revision in Hybrid Representation Systems. </title> <booktitle> Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Later, concept description logics (also called terminological languages or concept languages) have been introduced with the aim of providing a simple and well-established first order semantics to capture the meaning of the most popular features of the structured representations of knowledge (see for example <ref> [LB87, Neb90a] </ref>). In concept languages, concepts are used to represent classes as sets of individuals, and roles are binary relations used to specify their properties or attributes. Typically concepts are structured into hierarchies determined by the properties associated with them. <p> The hierarchical structure is defined in such a way that more specific concepts inherit the properties of the more general ones. One of the main characteristics of concept-description-based knowledge bases is the clear distinction between terminological and assertional knowledge (see <ref> [BPGL85, Neb90a, Mac91, NvL88] </ref>). The former deals with concepts and roles and their relationship, the latter with individuals and their membership to concepts and roles. The two kinds of knowledge are stored in two different components of the knowledge base and each component has its specialized reasoner. <p> The importance of TBox-reasoning has been stressed by several authors (see for example <ref> [Neb90a] </ref>). Knowledge base satisfiability is used for verifying whether the information contained in a knowledge base is coherent. Hybrid subsumption is the problem of checking whether a subsumption relation holds with respect to the set of models of a knowledge base 2 . <p> More precisely, the following theorem holds for a large class of languages (in <ref> [Neb90a] </ref>, here simplified slightly from the original version): Theorem 3.2 ([Neb90a]) Given a satisfiable knowledge base then for every pair of concepts C; D: j= C v D () C v D: The above theorem states that hybrid subsumption can be trivially reduced to terminological subsumption (plus knowledge base satisfiability).
Reference: [Neb90b] <author> Bernhard Nebel. </author> <title> Terminological reasoning is inherently intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 235-249, </pages> <year> 1990. </year>
Reference-contexts: It is well known that any reasoning process over knowledge bases comprising an acyclic terminology can be reduced to a reasoning process over a knowledge base with an empty terminology, in particular by substituting in the assertions every concept name with the corresponding definition (see <ref> [Neb90b] </ref> for a discussion of this technique and its computational properties). For the above reason, in our analysis we do not take into account terminologies and, therefore, we conceive a knowledge base as just a set of L-assertions. <p> In fact, given the problem of checking whether j= C (a), with the abstraction process, we compute M SC (a) and, after that, instance checking can be performed by checking whether C subsumes M SC (a). This technique, called Abstraction/Subsumption, has been broadly exploited in actual systems (see <ref> [Kin90, QK90, Neb90b] </ref>). However, the problem of exploiting this technique is that, in general, it is not possible to completely fit the information relevant to an individual into a single concept of the language.
Reference: [Neb91] <author> Bernhard Nebel. </author> <title> Terminological cycles: Semantics and computational properties. </title> <editor> In John F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 331-361. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: However, almost all implemented systems assume that such definitions are acyclic, i.e. in the definition of concept C no reference, direct or indirect, to C itself may occur (see <ref> [Neb91] </ref> for a discussion on terminological cycles).
Reference: [NvL88] <author> Bernhard Nebel and Kai von Luck. </author> <title> Hybrid reasoning in BACK. </title> <booktitle> In Proc. of the 3rd Int. Symp. on Methodologies for Intelligent Systems ISMIS-88, </booktitle> <pages> pages 260-269. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: The hierarchical structure is defined in such a way that more specific concepts inherit the properties of the more general ones. One of the main characteristics of concept-description-based knowledge bases is the clear distinction between terminological and assertional knowledge (see <ref> [BPGL85, Neb90a, Mac91, NvL88] </ref>). The former deals with concepts and roles and their relationship, the latter with individuals and their membership to concepts and roles. The two kinds of knowledge are stored in two different components of the knowledge base and each component has its specialized reasoner.
Reference: [PS93] <author> P.F. Patel-Schneider and Bill Swartout. </author> <note> Working version (draft): Description logic specification from the krss effort. Jan-uary 1993. Unpublished Manuscript. 43 </note>
Reference-contexts: It is also confirmed by the fact that they are both included in the recent proposal for a standard concept-based system in <ref> [PS93] </ref> (O was also included in the previous proposal [BBH + 91]). Moreover, in Section 3, we show that the use of O is also related to the introduction of an epistemic operator K in the concept-based system, as proposed in [DLN + 92]. <p> We do not claim the list of the considered constructors to be exhaustive. The description of some other useful constructors can be found in [BBH + 91] and in <ref> [PS93] </ref>. From this point on, we call the languages without O and B pure languages and those including at least one of them mixed languages.
Reference: [QK90] <author> Joachim Quantz and Carsten Kindermann. </author> <title> Implementation of the BACK system version 4. </title> <type> Technical Report KIT-Report 78, </type> <institution> FB Informatik, Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <year> 1990. </year>
Reference-contexts: In fact, given the problem of checking whether j= C (a), with the abstraction process, we compute M SC (a) and, after that, instance checking can be performed by checking whether C subsumes M SC (a). This technique, called Abstraction/Subsumption, has been broadly exploited in actual systems (see <ref> [Kin90, QK90, Neb90b] </ref>). However, the problem of exploiting this technique is that, in general, it is not possible to completely fit the information relevant to an individual into a single concept of the language. <p> For this purpose we have chosen to describe two systems, namely CLASSIC and Back. A more detailed description of them can be found in [BMPS + 91, BPS92] and <ref> [QK90] </ref> respectively. In CLASSIC, individuals are treated with a non-standard semantics.
Reference: [Sch93] <author> Andrea Schaerf. </author> <title> On the complexity of the instance checking problem in concept languages with existential quantification. </title> <booktitle> In Proc. of the 7th Int. Symp. on Methodologies for Intelligent Systems ISMIS-93, </booktitle> <pages> pages 508-517, </pages> <year> 1993. </year> <note> An extended version will appear in Journal of Intelligent Information Systems. </note>
Reference-contexts: This result is important, since it relates the complexity of an ABox-problem to the complexity of a TBox-problem. Such a relationship is crucial for the design of efficient reasoning algorithms and it is still not completely clear. In <ref> [Sch93] </ref> and [DLNS92] it was also shown that there are languages such that instance checking and subsumption are in different complexity classes. 8 Since no primitive complement are considered, the results are valid even for the less expressive language than the ones considered here (i.e.
Reference: [SSS91] <author> Manfred Schmidt-Schau and Gert Smolka. </author> <title> Attributive concept descriptions with complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48(1) </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: We briefly describe some of the strategies chosen by the implementors of the actual systems in order to deal with O and B (Section 4). We extend the reasoning procedure proposed in <ref> [SSS91, DLNN91, BH91, DLNS92] </ref> in order to develop a complete technique for reasoning with O and B (Section 5). We present several complexity results (Section 6). <p> Example 3.1 Consider the following ALEO-concept formed by a conjunction of three existential quantifications 9R.(A u fa; bg) u 9R.(:A u fag) u 9R.(:A u fbg): Suppose that we want to check its satisfiability. The standard approach (e.g. <ref> [SSS91, BH91] </ref>) to this problem is to separately check for the satisfiabil-ity of the three concepts involved in the existential quantifications, namely A u fa; bg, :A u fag, and :A u fbg. It is easy to see that this technique fails to recognize that the whole concept is unsatisfiable. <p> However, they miss the expressive power of the full use of O. 5 A technique for complete reasoning The technique we present here is a refinement of the tableaux calculus for first order logic [BM77], and is employed in <ref> [DHL + 92, DLNN91, DLNS92, HNSS90, SSS91, Hol90] </ref> both for the design of algorithms for the various reasoning tasks, and for studying their computational properties. The calculus in this paper is a straightforward extension, to deal with O and B, of the calculus in the cited papers. <p> On the other hand, the result in Theorem 6.6 ensures that, as far as O and B are included in the language, no result of that kind are possible since the two problems are reducible to each other. 6.2 Reasoning in ALCO Using a technique based on constraint systems, in <ref> [SSS91] </ref> both concept satis-fiability and subsumption in ALC are proved to be PSPACE-complete problems. That paper also presents a linear space algorithm for these problems. <p> This result is achieved showing that the algorithm obtained by the application of the propagation rule runs in nondeterministic polynomial time. The first step is to show that, for any ALO-concept C, each completion of the constraint system fx: Cg has polynomial size. In <ref> [SSS91] </ref> it is shown that for every AL-concept C, the constraint system fx: Cg has the unique completion (up to variable renaming), which has linear size w.r.t. jCj. <p> Therefore the intractability is directly extended to several other languages. For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP <ref> [SSS91] </ref> [LS91a] ALE NP PSPACE ALEO PSPACE [DHL + 92] [DLNS92] ALC PSPACE PSPACE ALCO PSPACE [SSS91] [BH91] Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously <p> Therefore the intractability is directly extended to several other languages. For example, it applies to CLASSIC, 37 without O with O subsumption instance subsumption checking & inst. ch. AL P P ALO coNP <ref> [SSS91] </ref> [LS91a] ALE NP PSPACE ALEO PSPACE [DHL + 92] [DLNS92] ALC PSPACE PSPACE ALCO PSPACE [SSS91] [BH91] Table 1: Complexity of reasoning which extend F L in several ways including O and N In fact using N , it is possible to express the following two concepts which are obviously disjoint: ( 2 R) and ( 3 R).
References-found: 32

