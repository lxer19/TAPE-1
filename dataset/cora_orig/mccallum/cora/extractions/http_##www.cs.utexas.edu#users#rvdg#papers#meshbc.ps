URL: http://www.cs.utexas.edu/users/rvdg/papers/meshbc.ps
Refering-URL: http://www.cs.utexas.edu/users/rvdg/journal.html
Root-URL: 
Email: mbarnett@cs.uidaho.edu  payne@ssd.intel.com  rvdg@cs.utexas.edu  jwatts@chpc.utexas.edu  
Title: Broadcasting on Meshes with Worm-Hole Routing  
Author: Michael Barnett David G. Payne Robert A. van de Geijn Jerrell Watts 
Date: November 2, 1993  
Address: Moscow, Idaho 83844-1010  15201 N.W. Greenbrier Pkwy Beaverton, Oregon 97006  Austin, Texas 78712-1188  Austin, Texas 78758-4497  
Affiliation: Department of Computer Science University of Idaho  Supercomputer Systems Division Intel Corporation  Department of Computer Sciences The University of Texas at Austin  Center for High Performance Computing The University of Texas System  
Abstract: We address the problem of broadcasting on mesh architectures with arbitrary (non-power-two) dimensions. It is assumed that such mesh architectures employ cut-through or worm-hole routing. The main results are an algorithm for performing an optimal minimum-spanning tree broadcast when messages are not pipelined, a pipelined algorithm that is similar to Ho and Johnson's EDST algorithm for hypercubes, and a novel scatter-collect approach that is a natural choice for communication libraries due to its simplicity. Results obtained on the Intel Touchstone Delta system are included. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Barnett, D. Payne, and R. van de Geijn. </author> <title> Optimal broadcasting in mesh-connected architectures. </title> <type> Technical Report TR-91-38, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Under our assumptions, this algorithm completes execution in time log 2 (p)ff+log 2 (p)nfi on a hypercube. It is optimal in the sense that the constant multiplying ff is optimal, making it a good algorithm for short messages. In earlier work <ref> [1] </ref>, we showed how this exact algorithm can be implemented on mesh architectures: both linear arrays and two dimensional meshes. On hypercubes, the order that bits are toggled is immaterial, but on a linear array, network conflicts occur unless the bits are toggled from most significant to least significant. <p> use the same variables as in (1)-(3). 4 s s s s s s - s s s ? 3 4 5 linear array to the mesh. (a) The paths h1; 0i and h2; 3i do not conflict. (b) The logical path h1; 0i is routed on the physical path <ref> [1; 0] </ref>, while the logical path h2; 3i is routed on the physical path [2; 1; 0; 3] inducing conflict on the link between 0 and 1. <p> - s s s ? 3 4 5 linear array to the mesh. (a) The paths h1; 0i and h2; 3i do not conflict. (b) The logical path h1; 0i is routed on the physical path [1; 0], while the logical path h2; 3i is routed on the physical path <ref> [2; 1; 0; 3] </ref> inducing conflict on the link between 0 and 1. Lemma 1 Assume the routing algorithm for the network is such that hi; ji takes the shortest path, changes direction at most once, and traverses the network in counter-clockwise direction. <p> In [11], a broadcast is presented that has somewhat of a flavor of our "scatter-collect". In essence, the author followed our suggestion that the broadcast can be implemented as a modified global summation and used some of the techniques for such algorithms developed in <ref> [1, 2, 3, 12] </ref>. The resulting algorithms are not asymptotically optimal, but do avoid network conflicts.
Reference: [2] <author> M. Barnett, R. Littlefield, D.G. Payne, and R. van de Geijn. </author> <title> Efficient Communication Primitives on Mesh Architectures with Hardware Routing. </title> <booktitle> Sixth SIAM Conf. on Par. Proc. for Sci. Comp., </booktitle> <address> Norfolk, Virginia, March 22-24, </address> <year> 1993. </year>
Reference-contexts: - s s s ? 3 4 5 linear array to the mesh. (a) The paths h1; 0i and h2; 3i do not conflict. (b) The logical path h1; 0i is routed on the physical path [1; 0], while the logical path h2; 3i is routed on the physical path <ref> [2; 1; 0; 3] </ref> inducing conflict on the link between 0 and 1. Lemma 1 Assume the routing algorithm for the network is such that hi; ji takes the shortest path, changes direction at most once, and traverses the network in counter-clockwise direction. <p> In [11], a broadcast is presented that has somewhat of a flavor of our "scatter-collect". In essence, the author followed our suggestion that the broadcast can be implemented as a modified global summation and used some of the techniques for such algorithms developed in <ref> [1, 2, 3, 12] </ref>. The resulting algorithms are not asymptotically optimal, but do avoid network conflicts.
Reference: [3] <author> M. Barnett, R. Littlefield, D.G. Payne, and R. van de Geijn, </author> <title> Global Combine on Mesh Architectures with Wormhole Routing, </title> <booktitle> 7th International Parallel Processing Symposium, </booktitle> <pages> pages 156-162, </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Newport Beach, CA, </address> <month> April 13-16, </month> <year> 1993. </year>
Reference-contexts: - s s s ? 3 4 5 linear array to the mesh. (a) The paths h1; 0i and h2; 3i do not conflict. (b) The logical path h1; 0i is routed on the physical path [1; 0], while the logical path h2; 3i is routed on the physical path <ref> [2; 1; 0; 3] </ref> inducing conflict on the link between 0 and 1. Lemma 1 Assume the routing algorithm for the network is such that hi; ji takes the shortest path, changes direction at most once, and traverses the network in counter-clockwise direction. <p> traverse a minimum of r + c 1 links to get from the root to the most distant node. 5 Alternative Algorithm: Scatter-Collect Ideas from our previous work done for performing the global combine can be used to obtain a further tradeoff between the startup cost and the transfer cost <ref> [3] </ref>. We first present a simple hybrid algorithm for one-dimensional meshes, and then extend it for the two-dimensional case. 5.1 1-D scatter-collect The RSbcast algorithm can be modified by splitting the vector in half at each step of the algorithm (the "scatter"). <p> In [11], a broadcast is presented that has somewhat of a flavor of our "scatter-collect". In essence, the author followed our suggestion that the broadcast can be implemented as a modified global summation and used some of the techniques for such algorithms developed in <ref> [1, 2, 3, 12] </ref>. The resulting algorithms are not asymptotically optimal, but do avoid network conflicts.
Reference: [4] <author> J.-C. Bermond, P. Michallon, and D. Trystram. </author> <title> Broadcasting in wraparound meshes with parallel monodi-rectional links. </title> <journal> Parallel Computing, </journal> <volume> 18 </volume> <pages> 639-648, </pages> <year> 1992. </year>
Reference-contexts: Our approach to edge-disjoint fences is closely related to the work in <ref> [4] </ref>, where the embedding of edge-disjoint trees in wraparound (torii) meshes is discussed. The true wraparound links provide a mesh that has roughly half the diameter of the worm-hole meshes we consider.
Reference: [5] <author> C.-T. Ho and S. L. Johnsson, </author> <title> Distributed Routing Algorithms for Broadcasting and Personalized Communication in Hypercubes. </title> <booktitle> Proceedings of the 1986 International Conference on Parallel Processing, </booktitle> <pages> pages 640-648, </pages> <publisher> IEEE, </publisher> <year> 1986. </year>
Reference-contexts: For hypercubes, better algorithms exist. In particular, if communication latency is ignored, asymptotically the cost of a broadcast can be fl This research was sponsored in part by Intel Supercomputing Systems Division. 1 reduced to be proportional to n, independent of p, by using Ho and Johnson's EDST algorithm <ref> [5] </ref>. This algorithm is not widely used, probably because its complexity makes it less attractive for a library and difficult to modify for special cases. The two-dimensional (2D) mesh architecture with wormhole routing is an attractive interconnection architecture for distributed-memory multicomputers. <p> For reasonable ff and fi, the break even point is for messages of unreasonable length. This is overcome on hypercubes by embedding log 2 (p) edge-disjoint minimum spanning trees, with successive messages alternating between the disjoint trees, yielding the EDST broadcast <ref> [5] </ref>. The resulting effective pipe length becomes log 2 (p) + 1. When designing pipelined algorithms, it is important to restrict communication to nearest neighbor in the physical mesh, in order to avoid undue network conflicts. Indeed, the EDST broadcast inherently incurs communication conflicts when implemented on a mesh. <p> odd data points for the EDF algorithm in Figures 9, 10, and 11 are due to the erratic behavior of the EDF algorithm. * In practice the scatter/collect outperforms the theoretically better EDF algorithm. 7 Related Work As mentioned previously, the state of the art in broadcasting on hypercubes is <ref> [5, 6] </ref>. Our approach to edge-disjoint fences is closely related to the work in [4], where the embedding of edge-disjoint trees in wraparound (torii) meshes is discussed. The true wraparound links provide a mesh that has roughly half the diameter of the worm-hole meshes we consider.
Reference: [6] <author> C.-T. Ho and M.T. Raghunath. </author> <title> Efficient communication primitives on hypercubes. </title> <type> Technical Report RJ 7932 (72915), </type> <institution> IBM, </institution> <month> Jan. </month> <year> 1991. </year> <month> 19 </month>
Reference-contexts: odd data points for the EDF algorithm in Figures 9, 10, and 11 are due to the erratic behavior of the EDF algorithm. * In practice the scatter/collect outperforms the theoretically better EDF algorithm. 7 Related Work As mentioned previously, the state of the art in broadcasting on hypercubes is <ref> [5, 6] </ref>. Our approach to edge-disjoint fences is closely related to the work in [4], where the embedding of edge-disjoint trees in wraparound (torii) meshes is discussed. The true wraparound links provide a mesh that has roughly half the diameter of the worm-hole meshes we consider.
Reference: [7] <author> S.L. Lillevik, </author> <title> The Touchsone 30 Gigaflop Delta Prototype. </title> <booktitle> In Sixth Distributed Memory Computing Conference Proceedings, </booktitle> <pages> pages 671-677. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: On such an idealized architecture, all but the naive algorithm show merit for a region of vector lengths. 6.2 Adjustments Necessary to Model the Delta The closest architecture available to us to check our theoretical results is the Intel Touchstone Delta <ref> [7, 8] </ref>. The Delta routing scheme uses the x-direction first, as in Lemma 2, then the y-direction. It conforms to all of the Assumptions 1-8 except Assumption 4: The interconnection network on the Delta is bidirectional.
Reference: [8] <author> R. Littlefield. </author> <title> Characterizing and Tuning Communications Performance on the Touchstone Delta and iPSC/860. </title> <booktitle> Proceedings of the 1992 Intel User's Group Meeting, </booktitle> <address> Dallas, TX, </address> <month> October 4-7. </month>
Reference-contexts: On such an idealized architecture, all but the naive algorithm show merit for a region of vector lengths. 6.2 Adjustments Necessary to Model the Delta The closest architecture available to us to check our theoretical results is the Intel Touchstone Delta <ref> [7, 8] </ref>. The Delta routing scheme uses the x-direction first, as in Lemma 2, then the y-direction. It conforms to all of the Assumptions 1-8 except Assumption 4: The interconnection network on the Delta is bidirectional.
Reference: [9] <author> L. M. Ni and P. K. McKinley. </author> <title> A survey of wormhole routing techniques in direct networks. </title> <journal> IEEE Computer, </journal> <volume> 26(2) </volume> <pages> 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference: [10] <author> Y. Saad and M. H. Schultz. </author> <title> Data Communiciation in Parallel Architectures. </title> <institution> Yale University Research Report YALEU/DCS/RR-461, </institution> <month> 857-873, </month> <year> 1986. </year>
Reference-contexts: Pipelining can trade off the ff and fi terms, as we shall see next. 4 Pipelined Broadcast When the p nodes are arranged as a linear array then a broadcast from P 0 can be accomplished by partitioning the message into k equal packets which are pipelined along the array <ref> [10] </ref>. In other words, the first packet is sent from the root to the next node. After this next node passes it to its neighbor, the second packet is sent by the root, etc.
Reference: [11] <author> S. R. Seidel. </author> <title> Broadcasting on Linear Arrays and Meshes. </title> <institution> Oak Ridge National Laboratory Technical Report ORNL/TM-12356, </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: The true wraparound links provide a mesh that has roughly half the diameter of the worm-hole meshes we consider. Their trees are much more complicated than the ones presented here; it is not clear whether their construction would lead to network conflict in a worm-hole mesh. In <ref> [11] </ref>, a broadcast is presented that has somewhat of a flavor of our "scatter-collect". In essence, the author followed our suggestion that the broadcast can be implemented as a modified global summation and used some of the techniques for such algorithms developed in [1, 2, 3, 12].
Reference: [12] <author> R. A. van de Geijn. </author> <title> Efficient Global Combine Operations. </title> <booktitle> In Sixth Distributed Memory Computing Conference Proceedings, </booktitle> <pages> pages 291-294. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year> <month> 20 </month>
Reference-contexts: In [11], a broadcast is presented that has somewhat of a flavor of our "scatter-collect". In essence, the author followed our suggestion that the broadcast can be implemented as a modified global summation and used some of the techniques for such algorithms developed in <ref> [1, 2, 3, 12] </ref>. The resulting algorithms are not asymptotically optimal, but do avoid network conflicts.
References-found: 12

