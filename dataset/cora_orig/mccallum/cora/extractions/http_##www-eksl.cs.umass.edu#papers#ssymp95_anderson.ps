URL: http://www-eksl.cs.umass.edu/papers/ssymp95_anderson.ps
Refering-URL: http://eksl-www.cs.umass.edu/publications.html
Root-URL: 
Email: fanderson,coheng@cs.umass.edu  
Title: Segregating Planners and Their Environments  
Author: Scott D. Anderson Paul R. Cohen 
Note: To be published in the proceedings of the Spring Symposium on Integrated Planning Applications  
Address: Amherst MA 01003-4610  
Affiliation: Experimental Knowledge Systems Laboratory Computer Science Department, LGRC University of Massachusetts  
Abstract: By implementing agents and environments using a domain-independent, extensible simulation substrate, described in this paper, agents will have clean interfaces to their environments. These makes it easier for agents to be plugged into other environments that have been similarly defined. If agents can interact with multiple environments, their behaviors and the associated experimental results will be more general and interesting.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Paul Bratley, Bennett L. Fox, and Linus E. </author> <title> Schrage. A Guide to Simulation. </title> <publisher> Springer-Verlag, </publisher> <year> 1983. </year> <month> 4 </month>
Reference-contexts: An example of a TileWorld event might be the appearance or disappearance of a tile or hole, or the moving of a tile by an agent [8, 13] The simulation literature usually puts simulator designs into one of the following two categories <ref> [1, p. 13] </ref>: event oriented Each event determines what subsequent events follow from it (that it "causes").
Reference: [2] <author> Paul R. Cohen, Michael L. Greenberg, David M. Hart, and Adele E. Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 32-48, </pages> <month> Fall </month> <year> 1989. </year>
Reference: [3] <author> Edmund H. Durfee and T. A. Montgomery. </author> <title> MICE: A flexible testbed for intelligent coordination experiments. </title> <editor> In L. Erman, editor, </editor> <title> Intelligent Real-Time Problem Solving: </title> <booktitle> Workshop Report, </booktitle> <address> Palo Alto, CA, </address> <year> 1990. </year> <institution> Cimflex Teknowl-edge Corp. </institution>
Reference: [4] <author> Sean P. Engelson and Niklas Bertani. Ars Magna: </author> <title> The abstract robot simulator manual, version 1.0. </title> <type> Technical Report 928, </type> <institution> Yale University, </institution> <address> New Haven, CT, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Consider just the agent's and environment's model of space. There are gridworlds, such as Mice and TileWorld, graphworlds, such as Trains [9] and Truckworld [6, 12], and worlds with continuous space, such as Phoenix or Ars Magna <ref> [4] </ref>. A Phoenix agent cannot be put into TileWorld and work, because its movement commands are all wrong. Nevertheless, we believe that our approach will eliminate many of the problems in running an agent in a different environment.
Reference: [5] <author> Michael Greenberg and David L. Westbrook. </author> <title> The Phoenix testbed. </title> <type> Technical Report COINS TR 90-19, </type> <institution> Computer and Information Science, University of Massachusetts at Amherst, </institution> <year> 1990. </year>
Reference: [6] <author> Steve Hanks, Martha E. Pollack, and Paul R. Cohen. </author> <title> Benchmarks, testbeds, controlled experimentation, and the design of agent architectures. </title> <journal> AI Magazine, </journal> <volume> 13(4) </volume> <pages> 17-42, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction We argue against a tight integration of planners and their environments. This is not because we think integration is a bad thing, but because we think it's important to run planners in a variety of environments. An AI Magazine article <ref> [6] </ref> describes a number of AI environment simulators, including costs and benefits. By running an agent in a variety of environments, we can hope to get the benefits of all worlds. To make it easier to mix and match planners and environments, they must have compatible interfaces. <p> Our approach does not solve all compatibility issues, since agents necessarily think in terms of the environment they intend to operate in. Consider just the agent's and environment's model of space. There are gridworlds, such as Mice and TileWorld, graphworlds, such as Trains [9] and Truckworld <ref> [6, 12] </ref>, and worlds with continuous space, such as Phoenix or Ars Magna [4]. A Phoenix agent cannot be put into TileWorld and work, because its movement commands are all wrong.
Reference: [7] <author> Eric J. Horvitz, Gregory F. Cooper, and David E. Heckerman. </author> <title> Reflection and action under scarce resources: Theoretical principles and empirical study. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Itelligence, </booktitle> <pages> pages 1121-1127, </pages> <year> 1989. </year> <institution> De-troit, Michigan. </institution>
Reference-contexts: We use "real-time" in the sense that the usefulness of a result depends not only on its intrinsic attributes but also on its timeliness <ref> [7, 14, 15] </ref>. Mess is designed to support real-time agents. It does this by requiring agents to be written in a general agent language, which is essentially Lisp except that there is a database of duration models.
Reference: [8] <author> David Joslin, Arthur Nunes, and Martha E. Pollack. </author> <title> TileWorld user's manual. </title> <type> Technical Report 93-12, </type> <institution> Department of Computer Science, University of Pittsburgh, </institution> <year> 1993. </year> <note> Contact tileworld-request@cs.pitt.edu. </note>
Reference-contexts: The illustration of the event might draw a small square of red on the map window on the user's screen. An example of a TileWorld event might be the appearance or disappearance of a tile or hole, or the moving of a tile by an agent <ref> [8, 13] </ref> The simulation literature usually puts simulator designs into one of the following two categories [1, p. 13]: event oriented Each event determines what subsequent events follow from it (that it "causes"). <p> Consequently, our experiments suffered from unwanted sources of variance. These experiences were shared by the users of TileWorld [13], which is why they, too, switched to a platform-independent way of advancing time in agent code <ref> [8] </ref>. Their solution, however, requires committing to the IRMA agent architecture. Our solution only requires using Lisp. Mess differs from commercial simulation software primarily in allowing the execution of arbitrary code to determine how much time passes in a process.
Reference: [9] <author> Nathaniel G. Martin and Gregory J. Mitchell. </author> <title> A transportation domain simulation for debugging plans. Obtained from the author, </title> <editor> martin@ cs.rochester.edu, </editor> <year> 1994. </year>
Reference-contexts: Our approach does not solve all compatibility issues, since agents necessarily think in terms of the environment they intend to operate in. Consider just the agent's and environment's model of space. There are gridworlds, such as Mice and TileWorld, graphworlds, such as Trains <ref> [9] </ref> and Truckworld [6, 12], and worlds with continuous space, such as Phoenix or Ars Magna [4]. A Phoenix agent cannot be put into TileWorld and work, because its movement commands are all wrong.
Reference: [10] <author> Thomas A. Montgomery and Edmund H. Dur-fee. </author> <title> Using MICE to study intelligent dynamic coordination. </title> <booktitle> In Second International Conference on Tools for Artificial Intelligence, </booktitle> <pages> pages 438-444. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference: [11] <author> Thomas A. Montgomery, Jaeho Lee, David J. Musliner, Edmund H. Durfee, Daniel Damouth, Young-pa So, </author> <title> and the rest of the University of Michigan Distributed Intelligent Agents Group. MICE users guide. </title> <type> Technical report, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: The next section discusses this kind of event stream. 3 Real-time Agents An agent interacts with the environment by producing events, just like any other event stream. For example, in a gridworld simulator like Mice <ref> [3,10, 11] </ref>, an agent might produce movement events such as 2 MESS Engine script ES function ES function ES interpreter ES interpreter ES scenario script fire-simulation function weather-simulation function fireboss thinking bulldozer thinking domain-independent simulation substrate environment agents stream (ES).
Reference: [12] <author> D. Nguyen, Steve Hanks, and C. Thomas. </author> <title> The TRUCKWORLD manual. </title> <type> Technical Report 93-09-08, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <year> 1993. </year> <note> Contact truckworld-request@cs. washington.edu. </note>
Reference-contexts: Our approach does not solve all compatibility issues, since agents necessarily think in terms of the environment they intend to operate in. Consider just the agent's and environment's model of space. There are gridworlds, such as Mice and TileWorld, graphworlds, such as Trains [9] and Truckworld <ref> [6, 12] </ref>, and worlds with continuous space, such as Phoenix or Ars Magna [4]. A Phoenix agent cannot be put into TileWorld and work, because its movement commands are all wrong.
Reference: [13] <author> Martha E. Pollack and Marc Ringuette. </author> <title> Introducing the Tileworld: Experimentally evaluating agent architectures. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 183-189. </pages> <booktitle> American Association for Artificial Intelligence, </booktitle> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The illustration of the event might draw a small square of red on the map window on the user's screen. An example of a TileWorld event might be the appearance or disappearance of a tile or hole, or the moving of a tile by an agent <ref> [8, 13] </ref> The simulation literature usually puts simulator designs into one of the following two categories [1, p. 13]: event oriented Each event determines what subsequent events follow from it (that it "causes"). <p> In experiments with Phoenix, we found that CPU time is difficult to measure precisely and repeatably, and it differs between computers, even those of the same CPU type. Consequently, our experiments suffered from unwanted sources of variance. These experiences were shared by the users of TileWorld <ref> [13] </ref>, which is why they, too, switched to a platform-independent way of advancing time in agent code [8]. Their solution, however, requires committing to the IRMA agent architecture. Our solution only requires using Lisp.
Reference: [14] <author> Stuart J. Russell and Eric H. </author> <title> Wefald. </title> <booktitle> Principles of metareasoning. Artificial Intelligence, </booktitle> <volume> 49 </volume> <pages> 361-395, </pages> <year> 1991. </year>
Reference-contexts: We use "real-time" in the sense that the usefulness of a result depends not only on its intrinsic attributes but also on its timeliness <ref> [7, 14, 15] </ref>. Mess is designed to support real-time agents. It does this by requiring agents to be written in a general agent language, which is essentially Lisp except that there is a database of duration models.
Reference: [15] <author> John A. Stankovic. </author> <title> Misconceptions about real-time computing: A serious problem for next-generation systems. </title> <journal> Computer, </journal> <volume> 21(10) </volume> <pages> 10-19, </pages> <month> October </month> <year> 1988. </year> <month> 5 </month>
Reference-contexts: We use "real-time" in the sense that the usefulness of a result depends not only on its intrinsic attributes but also on its timeliness <ref> [7, 14, 15] </ref>. Mess is designed to support real-time agents. It does this by requiring agents to be written in a general agent language, which is essentially Lisp except that there is a database of duration models.
References-found: 15

