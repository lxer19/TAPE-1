URL: http://www.cs.unc.edu/~dm/UNC/PHYSICS/Papers/alg.ps.gz
Refering-URL: http://www.cs.unc.edu/~dm/UNC/PHYSICS/papers.html
Root-URL: http://www.cs.unc.edu
Title: An Opportunistic Global Path Planner  
Author: John F. Canny and Ming C. Lin 
Keyword: Key Words: Obstacle Avoidance, Global Path Planner, Roadmap Algorithm, Robot Motion Planning, Artificial Potential Field.  
Abstract: In this paper we describe a robot path planning algorithm that constructs a global skeleton of free-space by incremental local methods. The curves of the skeleton are the loci of maxima of an artificial potential field that is directly proportional to distance of the robot from obstacles. Our method has the advantage of fast convergence of local methods in uncluttered environments, but it also has a deterministic and efficient method of escaping local extremal points of the potential function. We first describe a general roadmap algorithm, for configuration spaces of any dimension, and then describe specific applications of the algorithm for robots with two and three degrees of freedom. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Khatib. </author> <title> Real-time obstable avoidance for manipulators and mobile robots. </title> <journal> IJRR, </journal> <volume> 5(1) </volume> <pages> 90-98, </pages> <year> 1986. </year> <month> 25 </month>
Reference-contexts: 1 Introduction There have been two major approaches to motion planning for manipulators, (i) local methods, such as artificial potential field methods <ref> [1] </ref>, which are usually fast but are not guaranteed to find a path, and (ii) global methods, like the first Roadmap Algorithm [2], which is guaranteed to find a path but may spend a long time doing it. In this paper we present an algorithm which has characteristics of both. <p> The skeleton we define here is a subset of a roadmap (in the sense of [2]) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] [3], [4], [5], and local planners, <ref> [1] </ref>. Our method shares a common theme with the work of Barraquand and Latombe [6] in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima.
Reference: [2] <author> J. F. Canny. </author> <title> The Complexity of Robot Motion Planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction There have been two major approaches to motion planning for manipulators, (i) local methods, such as artificial potential field methods [1], which are usually fast but are not guaranteed to find a path, and (ii) global methods, like the first Roadmap Algorithm <ref> [2] </ref>, which is guaranteed to find a path but may spend a long time doing it. In this paper we present an algorithm which has characteristics of both. Our method is an incremental construction of a skeleton of free-space. <p> The skeleton we define here is a subset of a roadmap (in the sense of <ref> [2] </ref>) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] [3], [4], [5], and local planners, [1]. <p> The skeleton we define here is a subset of a roadmap (in the sense of <ref> [2] </ref>) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] [3], [4], [5], and local planners, [1]. Our method shares a common theme with the work of Barraquand and Latombe [6] in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima. <p> The set of configurations where the robot overlaps some obstacle is the configuration space obstacle CO, and the complement of CO is the set of free (non-overlapping) configurations F P . As 2 described in <ref> [2] </ref>, F P is bounded by algebraic hypersurfaces in the parameters t i after the standard substitution t i = tan ( i 2 ). This result is needed for the complexity bounds in [2] but we will not need it here. <p> As 2 described in <ref> [2] </ref>, F P is bounded by algebraic hypersurfaces in the parameters t i after the standard substitution t i = tan ( i 2 ). This result is needed for the complexity bounds in [2] but we will not need it here. A roadmap is a one-dimensional subset of F P that is guaranteed to be connected within each connected component of F P . Roadmaps are described in some detail in [2] where it is shown that they can be computed in time O <p> This result is needed for the complexity bounds in <ref> [2] </ref> but we will not need it here. A roadmap is a one-dimensional subset of F P that is guaranteed to be connected within each connected component of F P . Roadmaps are described in some detail in [2] where it is shown that they can be computed in time O (n k log n (d O (n 2 ) )) for a robot with k degrees of freedom, and where free space is defined by n polynomial constraints of degree d [7]. <p> A roadmap has two components: (i) Freeways (called silhouette curves in <ref> [2] </ref>) and 4 (ii) Bridges (called linking curves in [2]). A freeway is a connected one-dimensional subset of a channel that forms a backbone for the channel. The key properties of a freeway are that it should span the channel, and be continuable into adjacent channels. <p> A roadmap has two components: (i) Freeways (called silhouette curves in <ref> [2] </ref>) and 4 (ii) Bridges (called linking curves in [2]). A freeway is a connected one-dimensional subset of a channel that forms a backbone for the channel. The key properties of a freeway are that it should span the channel, and be continuable into adjacent channels. <p> In the original roadmap algorithm, linking curves had to be defined recursively, because it is not possible to hill-climb to a maximum with an algebraic curve. Another difference is that the freeways do not necessarily lie near the boundary of free space as they did in <ref> [2] </ref>. In our present implementation we are in fact using maximum clearance freeways. But the most important difference is that we now only enumerate true split or join points. <p> This is true for almost all practical situations: most of obstacles have a reasonably large interior that a small perturbation will not affect much of the obstacle configuration space. Based on the transversality condition of general position assumptions in <ref> [2] </ref>, the interesting critical points can be computed as follows. The set S is defined by inequalities, and its boundary is a union of surfaces of various dimensions. Let S ff be such a surface; it will be defined as the intersection of several configuration space constraint surfaces. <p> g = 0 (2) where l is the number of equations which are zero on S ff , the x 2 ; : : : ; x k are coordinates which are orthogonal to x 1 , and * is an infinitesimal that is used to simplify the computation (see <ref> [2] </ref>). It can be shown [8] that the solutions of interest can be recovered from the lowest degree coefficient in * of the resultant of this system. This normally involves computing a symbolic determinant which is a polynomial in * [9]. <p> The graph of the function is a surface in CS fiR. Let u and v denote two coordinate axes, the Roadmap Algorithm fixes v and then follows the extremal points in direction u as the value of v varies. But, the new algorithm differs from the original roadmap algorithm <ref> [2] </ref> in the following respects: * It does not always construct the entire roadmap * In the new algorithm, v = x i , where x i is one of the CS coordinates while u = h, where h is the height of the potential function. <p> As mentioned earlier, the algorithm is no longer recursive in calculating the critical points and linking curves (bridges) as in <ref> [2] </ref>, the complexity bound calculated in [2] does not apply here. (Please refer to Appendix II for more details.) 6 Summary and Discussion By following the maxima of a well-designed potential field, and taking slice projections through critical points and at random values, our approach builds incrementally an obstacle-avoiding path to <p> As mentioned earlier, the algorithm is no longer recursive in calculating the critical points and linking curves (bridges) as in <ref> [2] </ref>, the complexity bound calculated in [2] does not apply here. (Please refer to Appendix II for more details.) 6 Summary and Discussion By following the maxima of a well-designed potential field, and taking slice projections through critical points and at random values, our approach builds incrementally an obstacle-avoiding path to guide a robot toward the desired <p> In the worst case, it should run at least as fast as the original roadmap algorithm. But, it should run faster in almost all practical cases. Appendix I: Proof of Completeness for an Op portunistic Global Path Planner Careful completeness proofs for the roadmap algorithm are given in <ref> [2] </ref> and [13]. These proofs apply with very slight modification to the roadmap algorithm that we describe in this paper. The roadmap of [2] is the set of extremal points in a certain direction in free space. Therefore it hugs the boundary of free space. <p> Appendix I: Proof of Completeness for an Op portunistic Global Path Planner Careful completeness proofs for the roadmap algorithm are given in <ref> [2] </ref> and [13]. These proofs apply with very slight modification to the roadmap algorithm that we describe in this paper. The roadmap of [2] is the set of extremal points in a certain direction in free space. Therefore it hugs the boundary of free space. The roadmap described in this paper follows extrema 18 of the distance function, and therefore stays well clear of obstacles (except at critical points). <p> This is a surface S in R (n+1) and if we follow the extrema of distance on this surface, the roadmap of this paper is exactly a roadmap in the sense of <ref> [2] </ref> and [13]. The silhouette curves of [2] correspond to the freeway curves of this paper, and the linking curves correspond to bridges. <p> This is a surface S in R (n+1) and if we follow the extrema of distance on this surface, the roadmap of this paper is exactly a roadmap in the sense of <ref> [2] </ref> and [13]. The silhouette curves of [2] correspond to the freeway curves of this paper, and the linking curves correspond to bridges. Recall the basic property required of roadmaps: Definition A subset of R of a set S satisfies the roadmap condition if every connected component of S contains a single connected component of R. <p> See <ref> [2] </ref> for the definition of O e i ;f j . For a fixed robot complexity, the number of branches for the disjunctive tree grows linearly w.r.t. the environment complexity. Each O e i ;f j has constant size, if the polyhedron is preprocessed [11].
Reference: [3] <author> T. Lozano-Perez and M. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Comm. ACM, </journal> <volume> 22(10) </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference-contexts: The skeleton we define here is a subset of a roadmap (in the sense of [2]) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] <ref> [3] </ref>, [4], [5], and local planners, [1]. Our method shares a common theme with the work of Barraquand and Latombe [6] in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima.
Reference: [4] <author> J. Reif. </author> <title> Complexity of the Mover's Problem and Generalizations, </title> <booktitle> chapter 11, </booktitle> <pages> pages 267-281. </pages> <publisher> Ablex publishing corp., </publisher> <address> New Jersey, </address> <year> 1987. </year>
Reference-contexts: The skeleton we define here is a subset of a roadmap (in the sense of [2]) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] [3], <ref> [4] </ref>, [5], and local planners, [1]. Our method shares a common theme with the work of Barraquand and Latombe [6] in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima.
Reference: [5] <author> J.T. Schwartz and M. Sharir. </author> <title> On the `Piano Movers' Problem, II. General Techniques for Computing Topological Properties of Real Algebraic Manifolds, </title> <booktitle> chapter 5, </booktitle> <pages> pages 154-186. </pages> <publisher> Ablex publishing corp., </publisher> <address> New Jersey, </address> <year> 1987. </year>
Reference-contexts: The skeleton we define here is a subset of a roadmap (in the sense of [2]) of this hypersurface. This work builds on a considerable volume of work in both global motion planning methods [2] [3], [4], <ref> [5] </ref>, and local planners, [1]. Our method shares a common theme with the work of Barraquand and Latombe [6] in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima.
Reference: [6] <author> B. Langlois J. Barraquand and J-C. Latombe. </author> <title> Robot motion planning with many degrees of freedom and dynamic constraints. </title> <booktitle> In Proceedings 5th ISRR, </booktitle> <pages> pages 74-83, </pages> <address> Tokyo, Japan, </address> <year> 1989. </year>
Reference-contexts: This work builds on a considerable volume of work in both global motion planning methods [2] [3], [4], [5], and local planners, [1]. Our method shares a common theme with the work of Barraquand and Latombe <ref> [6] </ref> in that it attempts to use a local potential field planner for speed with some procedure for escaping local maxima. <p> But whereas Barraquand and Latombe's method is a local method made global, we have taken a global method (the Roadmap Algorithm) and found a local opportunistic way to compute it. Although our starting point was completely different, there are some other similarities with <ref> [6] </ref>. Our "freeways" resemble the valleys intuitively described in [6]. But the main difference between our method and the method in [6] is that we have a guaranteed (and reasonably efficient) method of escaping local potential extremal points and that our potential function is computed in the configuration space. <p> Although our starting point was completely different, there are some other similarities with <ref> [6] </ref>. Our "freeways" resemble the valleys intuitively described in [6]. But the main difference between our method and the method in [6] is that we have a guaranteed (and reasonably efficient) method of escaping local potential extremal points and that our potential function is computed in the configuration space. <p> Although our starting point was completely different, there are some other similarities with <ref> [6] </ref>. Our "freeways" resemble the valleys intuitively described in [6]. But the main difference between our method and the method in [6] is that we have a guaranteed (and reasonably efficient) method of escaping local potential extremal points and that our potential function is computed in the configuration space. The paper is organized as follows: Section 2 contains a simple and general description of roadmaps. <p> But n k may still be too large for many applications, and in many cases the free space is much simpler than its worst case complexity, which is O (n k ). We would like to exploit this simplicity to the maximum extend possibly. The results of <ref> [6] </ref> suggest that in practice free space is usually much simpler than the worst case bounds. What we will describe is a method aimed at getting a minimal description of the connectivity of a particular free space. The original description of roadmaps is quite technical and intricate.
Reference: [7] <author> J. Canny. </author> <title> Computing roadmaps of general semi-algebraic sets. </title> <booktitle> In AAECC-91, </booktitle> <pages> pages 94-107, </pages> <year> 1991. </year>
Reference-contexts: are described in some detail in [2] where it is shown that they can be computed in time O (n k log n (d O (n 2 ) )) for a robot with k degrees of freedom, and where free space is defined by n polynomial constraints of degree d <ref> [7] </ref>. But n k may still be too large for many applications, and in many cases the free space is much simpler than its worst case complexity, which is O (n k ). We would like to exploit this simplicity to the maximum extend possibly. <p> We will assume henceforth that the configuration space is bounded in every coordinate. This is certainly always the 19 case for any practical robot. If it is not bounded, there are technical ways to reduce to a bounded problem, see for example <ref> [7] </ref>. The set of free configurations is also assumed to be closed. The closed and bounded assumptions ensure that the distance function will attain locally maximal values on every connected component of free space.
Reference: [8] <author> J.F. Canny. </author> <title> Generalized characteristic polynomials. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9(3), </volume> <year> 1990. </year>
Reference-contexts: It can be shown <ref> [8] </ref> that the solutions of interest can be recovered from the lowest degree coefficient in * of the resultant of this system. This normally involves computing a symbolic determinant which is a polynomial in * [9].
Reference: [9] <author> D. Manocha and J. F. Canny. </author> <title> Efficient teniques for multipolynomial resultant algorithms. </title> <booktitle> Proceedings of ISSAC'91, 1991. </booktitle> <address> Bonn, Germany. </address>
Reference-contexts: It can be shown [8] that the solutions of interest can be recovered from the lowest degree coefficient in * of the resultant of this system. This normally involves computing a symbolic determinant which is a polynomial in * <ref> [9] </ref>. But a more practical approach is to recover only the lowest coefficient in * by using straight line program representations and differentiating [10]. 8 To enumerate all the interesting critical points is computationally ex-pensive, since we have to solve O (n (k1) ) systems of non-linear equations.
Reference: [10] <author> Canny and Rege. </author> <title> An efficient algorithm for computing perturbed polynomial systems. </title> <note> In preparation, 1992. </note> <institution> University of California, Berkeley. </institution>
Reference-contexts: This normally involves computing a symbolic determinant which is a polynomial in * [9]. But a more practical approach is to recover only the lowest coefficient in * by using straight line program representations and differentiating <ref> [10] </ref>. 8 To enumerate all the interesting critical points is computationally ex-pensive, since we have to solve O (n (k1) ) systems of non-linear equations. Thus, we also plan to experiment with randomly chosen slice values in some bounded ranges, alternating with slices taken at true split or join points.
Reference: [11] <author> M. C. Lin and J. F. Canny. </author> <title> A fast algorithm for incremental distance calculation. </title> <journal> IEEE ICRA'91 Proceedings, </journal> <volume> 2 </volume> <pages> 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: D (O i ; L j (x)) is obtained by a local method for fast computation of distance between convex polyhedra <ref> [11] </ref>. 9 Notice that the proposed U art (x) is not a continuously differentiable func-tion as in many potential field methods. U art (x) is piecewise continuous and differentiable. This is perfectly all right for the application in our Roadmap algorithm. <p> By using the incremental distance calculation algorithm described in <ref> [11] </ref>, we can compute the distance between the robot and the closest obstacle in constant time. <p> See [2] for the definition of O e i ;f j . For a fixed robot complexity, the number of branches for the disjunctive tree grows linearly w.r.t. the environment complexity. Each O e i ;f j has constant size, if the polyhedron is preprocessed <ref> [11] </ref>. Each clause, O e i ;f j , is a conjunction of inequalities. This disjunctive tree structure is useful for computing the maximum number of critical points by combinatorics.
Reference: [12] <author> C. G. Gibson K. Wirthmuller and A. A. du Plessis E. J. N. Looijenga. </author> <title> Topological Stability of Smooth Mappings. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin . Hei-delberg . New York, </address> <year> 1976. </year>
Reference-contexts: This is all the better because it means that local maxima that do not occur where the function is smooth are all the more sharply defined. The graph of the distance function certainly has a stratification into a finite number of smooth pieces <ref> [12] </ref>. Its maxima will be the union of certain local maxima of these smooth pieces. So we can still use the system of equations defined earlier to find them. With this scheme, a manipulator moves in such a way to maximize the artificial potential field U art (x). <p> If we have chosen a general direction x 1 , the set Sj a 1 consists of a single point which will also be part of the roadmap. For the inductive step we start with some basic results from Chapter 2 in <ref> [12] </ref>, which state that we can smoothly deform or retract a manifold (or union of manifolds like the surface S) in the absence of critical points.
Reference: [13] <author> J. F. Canny. </author> <title> Constructing roadmaps of semi-algebraic sets I: Completeness. </title> <journal> Artificial Intelligence, </journal> <volume> 37 </volume> <pages> 203-222, </pages> <year> 1988. </year> <month> 26 </month>
Reference-contexts: But, it should run faster in almost all practical cases. Appendix I: Proof of Completeness for an Op portunistic Global Path Planner Careful completeness proofs for the roadmap algorithm are given in [2] and <ref> [13] </ref>. These proofs apply with very slight modification to the roadmap algorithm that we describe in this paper. The roadmap of [2] is the set of extremal points in a certain direction in free space. Therefore it hugs the boundary of free space. <p> This is a surface S in R (n+1) and if we follow the extrema of distance on this surface, the roadmap of this paper is exactly a roadmap in the sense of [2] and <ref> [13] </ref>. The silhouette curves of [2] correspond to the freeway curves of this paper, and the linking curves correspond to bridges. <p> A silhouette point is a locally maximal point of the function h (:) on some slice Sj a of S. The silhouette (S) of S is the set of all such points for all a. The key properties of the silhouette are ([2], <ref> [13] </ref>): (i) Within each slice of S, each connected component of Sj a must contain at least one silhouette point. (ii) The silhouette should be one-dimensional. (iii) The critical points of the silhouette w.r.t the function x 1 (:) should include the critical points of the set S.
Reference: [14] <author> J. Milnor. </author> <title> On the betti numbers of real varieties. </title> <journal> Proc. Amer. Math. Soc., </journal> <volume> 15 </volume> <pages> 275-280, </pages> <year> 1964. </year>
Reference-contexts: This is an upper bound on the number of critical points from <ref> [14] </ref> and [15]. <p> we have seen that there are O ((2d) k n (k1) ) candidates; or they may lie on higher dimensional intersection surfaces, but these are certainly defined by fewer than k equations, and the number of possible critical points is not more than O ((2d) k n (k1) ) [15], <ref> [14] </ref>. Therefore, the number of interesting critical points is at most O ((2d) k n (k1) ).
Reference: [15] <author> R. Thom. Sur l'homologie des varietes algebriques reelles. </author> <booktitle> Differential and Combinatorial Topology, </booktitle> <pages> pages 255-265, </pages> <year> 1965. </year> <month> 27 </month>
Reference-contexts: This is an upper bound on the number of critical points from [14] and <ref> [15] </ref>. <p> and we have seen that there are O ((2d) k n (k1) ) candidates; or they may lie on higher dimensional intersection surfaces, but these are certainly defined by fewer than k equations, and the number of possible critical points is not more than O ((2d) k n (k1) ) <ref> [15] </ref>, [14]. Therefore, the number of interesting critical points is at most O ((2d) k n (k1) ).
References-found: 15

