URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1993/UM-CS-1993-064.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/93-064.html
Root-URL: 
Title: Pleiades: An Object Management System for Software Engineering Environments  
Author: Peri Tarr Lori A. Clarke 
Address: Amherst, MA 01003  
Affiliation: Software Development Laboratory Department of Computer Science University of Massachusetts  
Abstract: Software engineering environments impose challenging requirements on the design and implementation of an object management system. Existing object management systems have been limited in both the kinds of functionality they have provided and in the models of support they define. This paper describes a system, called Pleiades, which provides many of the object management capabilities required to support software engineering environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Alagic. </author> <title> Persistent Metaobjects. </title> <booktitle> In Proceedings of the Fourth International Workshop on Persistent Object Systems, </booktitle> <pages> pages 31-42, </pages> <month> Sept </month> <year> 1990. </year>
Reference-contexts: Programming languages, file systems, and database systems currently fail to satisfy these requirements. Recent work on database programming languages (e.g., <ref> [52, 1, 21, 13, 16] </ref>) and object-oriented database systems (e.g., [3, 7, 26, 60]) are attempting to overcome some of their limitations, but to date, none of these efforts have sufficiently provided the capabilities needed to support the spectrum of software engineering activities. <p> These efforts can be divided into database programming language and object-oriented database approaches. Database programming languages have generally attempted to extend programming languages with some of the kinds of functionality that are typically found in databases, such as set constructors, concur-rency control, associative access, and persistence (e.g., <ref> [52, 18, 1, 21, 13, 16] </ref>). While database programming languages provide the computational completeness of traditional programming languages, they have tended to limit their support for persistence, associative access, and concurrency control to a subset of types (usually sets) and have provided highly restricted models of support.
Reference: [2] <author> A. Albano, L. Cardelli, and R. Orsini. </author> <note> Galileo: </note>
Reference-contexts: The database approaches focused on using relational database systems, either alone or embedded in a programming language, for object management (e.g., [34, 45, 43, 23]), while the programming language-based work attempted to use file systems or low-level storage management systems to provide persistence of programming language structures (e.g., <ref> [6, 2, 61, 15] </ref>). Database systems support persistence and coarse-grained concur-rency control and consistency management, but they fail to satisfy the other functionality requirements and except for provision of meta data, they do not address the cross-cutting issues.
References-found: 2

