URL: http://now.cs.berkeley.edu/Sysadmin/esm/lisa97extabs-esm.ps
Refering-URL: http://now.cs.berkeley.edu/Sysadmin/index.html
Root-URL: http://www.cs.berkeley.edu
Email: -eanders,patterson-@cs.berkeley.edu  
Title: Extensible, Scalable Monitoring for Clusters of Computers  
Author: Eric Anderson and Dave Patterson 
Address: Berkeley  
Affiliation: Computer Science Division, U.C.  
Note: Extended abstract accepted to LISA 97; full paper in production 1  
Abstract: We describe a system for monitoring large clusters of cooperating computers. The system scales both in capacity and in visualization to at least 150 machines, and can in principle scale far beyond that. The architecture is easily extensible to monitor new cluster software. The system detects and recovers from some faults automatically. We use a Java applet as our primary interface allowing users anywhere in the world to monitor our system from their browser. 
Abstract-found: 1
Intro-found: 1
Reference: [Acha97] <author> Balancing Push and Pull for Data Broadcast Swarup Acharya, Michael Franklin, and Stan Zdonik. </author> <booktitle> ACM SIGMOD Intl. Conference on Management of Data. </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Pointcast [Poin97] and Marimba Castanet [Mari97] use a push protocol. A push protocol delivers data all the time and allows sinks to ignore data if they dont want it. Multicast [Deer90] uses a pruned push model, and broadcast disks <ref> [Acha97] </ref> use a push model with broadcasts. A push system is ideal when the sinks needs match the sources schedule since the data is current, and the network traffic is reduced because the sink is not generating requests.
Reference: [Ande95] <institution> A Case for NOW (Networks of Workstations) T. </institution> <note> Anderson, </note> <author> D. Culler, D. Patterson, </author> <title> and the NOW team. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 54-64, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: Timestamps have been very useful in detecting internal system failures and automatically recovering from them. Aggregation in visualization was required by the scale and class of the system we wanted to monitor since the machines are used on a research project <ref> [Ande95] </ref> exploring how to use hundreds of machines in cooperation to solve complex problems.
Reference: [Apis96] <author> OC3MON: </author> <title> Flexible, Affordable, High Performance Statistics Collection. </title> <editor> Joel Apisdorf, k claffy, Kevin Thompson, and Rick Wilder. </editor> <booktitle> Proceedings of the 1996 LISA X Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Case90] <institution> A Simple Network Management Protocol (SNMP) J. </institution> <note> Case, </note> <author> M. Fedor, M. Schoffstall, and J. Davin. </author> <note> Available as RFC 1157 from http://wwww.internic.net/ds/dspg1intdoc.html </note>
Reference: [Case96] <institution> Management Information Base for Version 2 of the Simple Network Management Protocol (SNMPv2) J. </institution> <note> Case, </note> <author> K. McCloghrie, M. Rose, S. Waldbusser. </author> <note> Available as RFC 1907. </note>
Reference-contexts: Pulsar does not support monitoring of rapidly changing statistics. SunNet Manager [SNM] is a commercially supported, SNMP-based network monitoring program. Other companies can extend it by writing drop-in modules to manage their equipment. Using SNMP version 2 <ref> [Case96] </ref>, or Sun proprietary protocols, it has some support for multiple monitoring stations to communicate with each other. As with other monolithic systems, it has poor scalability and weak extensibility.
Reference: [Cham76] <author> SEQUEL 2: </author> <title> A unified approach to data definition, manipulation, and control. </title> <type> Chamberlin, D.D., </type> <institution> et al. IBM J. Res. and Develop. </institution> <month> Nov. </month> <year> 1976. </year> <note> (also see errata in Jan. 1977 issue) </note>
Reference-contexts: To make our system flexible and extensible, we have chosen to gather data and store it in a relational database [Codd76]. New subsystems can access the data through SQL <ref> [Cham76] </ref> without requiring modification of old programs. We use SQL to both execute ad-hoc queries over the database, and to extract data for visualization in our Java [Gosl95] applet. Relational tables make our system naturally extensible because new data can go into a new table without affecting old tables.
Reference: [Chan85] <author> Distributed snapshots: </author> <title> Determining global states of distributed systems. </title> <editor> M. Chandy and L. </editor> <title> Lamport. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1985. </year>
Reference-contexts: When the javaserver generated repeated updates of old data, the client was fooled into thinking the system was performing correctly. Now that we forward timestamps, we would detect this error. We also use timestamps for consistency control <ref> [Chan85] </ref>. Timestamps allow quick comparisons of data to determine if it has been updated. We use this to keep data caches weakly consistent with the authoritative source without requiring a complex consistency protocol. Timestamp consistency protocols continue to allow data access even when parts of the system have failed.
Reference: [Codd71] <institution> A Data Base Sublanguage Founded on the Relational Calculus. </institution> <note> Codd, </note> <editor> E. </editor> <booktitle> Proceedings of the 1971 ACM-SIGFIDET Workshop on Data Description, Access and Control. </booktitle> <address> San Diego, CA. </address> <month> Nov </month> <year> 1971. </year>
Reference: [Deer90] <editor> Multicast Routing in Datagram Internetworks and Extended LANs Stephen E. Deering and David R. </editor> <title> Cheriton. </title> <journal> ACM Transactions on Computer Systems. </journal> <month> May </month> <year> 1990. </year>
Reference-contexts: Pointcast [Poin97] and Marimba Castanet [Mari97] use a push protocol. A push protocol delivers data all the time and allows sinks to ignore data if they dont want it. Multicast <ref> [Deer90] </ref> uses a pruned push model, and broadcast disks [Acha97] use a push model with broadcasts. A push system is ideal when the sinks needs match the sources schedule since the data is current, and the network traffic is reduced because the sink is not generating requests.
Reference: [Dolphin96] <institution> HP Dolphin research project Personal communication with author and some of the development group. </institution>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Eswa76] <author> Specifications, </author> <title> Implementations, and Interactions of a Trigger Subsystem in an Integrated DataBase System. Eswaran, </title> <type> K.P. </type> <institution> IBM Research Report RJ1820. </institution> <month> August </month> <year> 1976. </year>
Reference-contexts: We use this to keep data caches weakly consistent with the authoritative source without requiring a complex consistency protocol. Timestamp consistency protocols continue to allow data access even when parts of the system have failed. Because mSQL doesnt support triggers <ref> [Eswa76] </ref>, we simulate them using timestamp Extended abstract accepted to LISA 97; full paper in production 4 consistency, which is also more robust than triggers for handling failures or backlogs.
Reference: [Fink97] <author> Pulsar: </author> <title> An extensible tool for monitoring large Unix sites. </title> <editor> Raphael A. </editor> <address> Finkel. </address> <note> Accepted to Software Practice and Experience. </note>
Reference-contexts: Since the data is not accessible outside of the TkIned program, new modules either have to be added to TkIned, or have to repeat the data gathering. TkIned provides simple support for visualization and does not aggregate data before displaying it. TkIneds centralized pull model limits its scalability. Pulsar <ref> [Fink97] </ref> uses short scripts (pulse monitors) which measure a statistic, and send an update to a central display server if the value is out of some hardcoded bounds. Pulse monitors run infrequently out of a cron-like tool. <p> The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Gosl95] <institution> The Java Language Environment: </institution> <note> A White Paper J. </note> <author> Gosling and H. McGilton. </author> <note> http://java.dimensionx.com/whitePaper/java-whitepaper-1.html </note>
Reference-contexts: New subsystems can access the data through SQL [Cham76] without requiring modification of old programs. We use SQL to both execute ad-hoc queries over the database, and to extract data for visualization in our Java <ref> [Gosl95] </ref> applet. Relational tables make our system naturally extensible because new data can go into a new table without affecting old tables. In addition, new columns can be added to tables without breaking older programs. The column names also help users understand the structure of the data when browsing.
Reference: [Hans93] <author> Automated System Monitoring and Notification With Swatch. Stephen E. Hansen & E. Todd Atkins. </author> <booktitle> Proceedings of the 1993 LISA VII Conference. </booktitle> <editor> [Hard92] buzzerd: </editor> <title> Automated Systems Monitoring with Notification in a Network Environment. Darren Hardy & Herb Morreale. </title> <booktitle> Proceedings of the 1992 LISA VI Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [HSV] <author> Hue, </author> <title> Saturation, and Value Color Model http://loki.cs.gsu.edu/edcom/hypgraph/color/colorhs.htm </title>
Reference: [Hugh97] <institution> Mini SQL 2.0 http://hughes.com.au/ </institution>
Reference-contexts: The applet also provides a simple way to select a pane of information to view. We currently store configuration information in various files, but given our success using databases, we are now moving the configuration information into the databases. We have found that the freely available mSQL <ref> [Hugh97] </ref> database is sufficient for our needs since we dont require complex SQL queries. We have extended mSQL in the few places needed to allow fine-grained timestamps, and batched updates. Our use of mSQL also lets other sites try our system without an expensive initial investment.
Reference: [Livn96] <institution> Visual Exploration of Large Data Sets. </institution> <note> Miron Livny, </note> <author> Raghu Ramakrishnan, and Jussi Myllymaki. </author> <booktitle> In Proceedings of the IS&T/SPIE Conference on Visual Data Exploration and Analysis, </booktitle> <month> January, </month> <year> 1996. </year>
Reference-contexts: Using SNMP version 2 [Case96], or Sun proprietary protocols, it has some support for multiple monitoring stations to communicate with each other. As with other monolithic systems, it has poor scalability and weak extensibility. Extended abstract accepted to LISA 97; full paper in production 2 The DEVise <ref> [Livn96, Livn97] </ref> system is a generic trace file visualization tool. DEVise supports converting a sequence of records (rows in a table) into a sequence of graphical object, displaying the graphical objects, and performing graphical queries on the objects.
Reference: [Livn97] <author> DEVise: </author> <title> an Environment for Data Exploration and Visualization Miron Livny, </title> <editor> et. al. </editor> <address> http://www.cs.wisc.edu/~devise/ </address>
Reference-contexts: Using SNMP version 2 [Case96], or Sun proprietary protocols, it has some support for multiple monitoring stations to communicate with each other. As with other monolithic systems, it has poor scalability and weak extensibility. Extended abstract accepted to LISA 97; full paper in production 2 The DEVise <ref> [Livn96, Livn97] </ref> system is a generic trace file visualization tool. DEVise supports converting a sequence of records (rows in a table) into a sequence of graphical object, displaying the graphical objects, and performing graphical queries on the objects.
Reference: [Mari97] <institution> Marimba Castanet http://www.marimba.com/ </institution>
Reference-contexts: Between polls, the data goes steadily out of date. In a pull-based system, there is a linear tradeoff between the guaranteed freshness of the data and the wasted request traffic. Pointcast [Poin97] and Marimba Castanet <ref> [Mari97] </ref> use a push protocol. A push protocol delivers data all the time and allows sinks to ignore data if they dont want it. Multicast [Deer90] uses a pruned push model, and broadcast disks [Acha97] use a push model with broadcasts.
Reference: [Murc84] <institution> Physiological Principles for the Effective Use of Color, G. Murch, IEEE CG&A, </institution> <month> Nov. </month> <year> 1984 </year>
Reference: [Poin97] <author> PointCast: </author> <note> the desktop newscast http://www.pointcast.com/ </note>
Reference-contexts: Between polls, the data goes steadily out of date. In a pull-based system, there is a linear tradeoff between the guaranteed freshness of the data and the wasted request traffic. Pointcast <ref> [Poin97] </ref> and Marimba Castanet [Mari97] use a push protocol. A push protocol delivers data all the time and allows sinks to ignore data if they dont want it. Multicast [Deer90] uses a pruned push model, and broadcast disks [Acha97] use a push model with broadcasts.
Reference: [Scha93] <editor> A Practical Approach to NFS Response Time Monitoring. Gary Schaps and Peter Bishop. </editor> <booktitle> Proceedings of the 1993 LISA VII Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Sch93] <editor> How to Keep Track of Your Network Configuration J. Schnwlder & H Langendrfer. </editor> <booktitle> Proceedings of the 1993 LISA VII Conference </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Sch97] <editor> Scotty Tnm Tcl Extension. Jrgen Schnwlder. </editor> <address> http://wwwsnmp.cs.utwente.nl/~schoenw/scotty/ </address>
Reference: [Seda95] <author> LACHESIS: </author> <title> A Tool for Benchmarking Internet Service Providers. </title> <editor> Jeff Sedayao and Kotaro Akita. </editor> <booktitle> Proceedings of the 1995 LISA IX Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Ship91] <editor> Monitoring Activity on a Large Unix Network with perl and Syslogd. Carl Shipley & Chingyow Wang. </editor> <booktitle> Proceedings of the 1991 LISA V Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [Simo91] <institution> System Resource Accounting on UNIX Systems. </institution> <address> John Simonson. </address> <booktitle> Proceedings of the 1991 LISA V Conference </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
Reference: [SNM] <institution> Sun Net Manager Sun Solstice product. </institution>
Reference-contexts: Pulsar can be extended by writing additional pulse monitors, and adding them to a configuration file. Pulsars centralized design is not fault tolerant, and only simple support for external access to updates. Pulsar does not support monitoring of rapidly changing statistics. SunNet Manager <ref> [SNM] </ref> is a commercially supported, SNMP-based network monitoring program. Other companies can extend it by writing drop-in modules to manage their equipment. Using SNMP version 2 [Case96], or Sun proprietary protocols, it has some support for multiple monitoring stations to communicate with each other.
Reference: [Sun86] <institution> Remote Procedure Call Programming Guide Sun Microsystems, Inc. </institution> <month> Feb </month> <year> 1986. </year>
Reference-contexts: Most systems use a centralized polling architecture. A few also have occasional updates. We have developed a hybrid push-pull protocol that minimizes wasted data delivery, maximizes freshness, and reduces network traffic. The canonical pull protocol is RPC <ref> [Sun86] </ref>, and SNMP is a mostly pull protocol. A pull-based system requires the sink to request every piece of data it wants from the source. If the sink wants regular updates, it polls the source.
Reference: [Wall96] <author> Perl 5: </author> <title> Practical Extraction and Report Language Larry Wall, </title> <note> et. al. Available from ftp://ftp.funet.fi/pub/languages/perl/CPAN/ </note>
Reference-contexts: We initially tried implementing those processes in Perl, but the code was too inefficient to support 150 nodes, and using threads reduced concerns about blocking while reconnecting. The javaserver is implemented in Perl <ref> [Wall96] </ref> to simplify implementation and to support runtime extension.
Reference: [Walt95] <editor> Tracking Hardware Configurations in a Heterogeneous Network with syslogd. Rex Walters. </editor> <booktitle> Proceedings of the 1995 LISA IX Conference. </booktitle>
Reference-contexts: The database increases extensibility because new tables can be easily added, and new columns can be added to old tables without breaking old applications. Using a database is a significant departure from previous systems <ref> [Apis96, Dolphin96, Fink97, Hans93, Hard92, Scha93, Sch93, Seda95, Ship91, Simo91, Walt95] </ref>, which all use a custom module for data storage and few provide any external access to the data. 4.2 Moving data where it is needed The second problem in a monitoring system is efficiently transferring data from sources to sinks.
References-found: 31

