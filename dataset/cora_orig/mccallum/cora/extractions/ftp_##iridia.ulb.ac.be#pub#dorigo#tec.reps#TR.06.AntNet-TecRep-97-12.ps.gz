URL: ftp://iridia.ulb.ac.be/pub/dorigo/tec.reps/TR.06.AntNet-TecRep-97-12.ps.gz
Refering-URL: http://iridia.ulb.ac.be/dorigo/ACO/ACO.html
Root-URL: 
Title: AntNet: A Mobile Agents Approach to Adaptive Routing  
Author: Gianni Di Caro and Marco Dorigo 
Date: 97-12  
Address: 50, av. F. Roosevelt, CP 194/6, 1050 Brussels, Belgium  
Affiliation: IRIDIA, Universite Libre de Bruxelles  
Pubnum: Technical Report IRIDIA  
Abstract: This paper introduces AntNet, a new routing algorithm for communications networks. AntNet is an adaptive, distributed, mobile-agents-based algorithm which was inspired by recent work on the ant colony metaphor. We apply AntNet to a datagram network and compare it with both static and adaptive state-of-the-art routing algorithms. We ran experiments for various paradigmatic temporal and spatial traffic distributions. AntNet showed both very good performance and robustness under all the experimental conditions with respect to its competitors.
Abstract-found: 1
Intro-found: 1
Reference: <author> Barto, A. G., Sutton, R. S., & Anderson, C. W. </author> <year> (1983). </year> <title> Neuronlike adaptive elements that can solve difficult learning control problems. </title> <journal> IEEE Transaction on Systems, Man and Cybernetics, </journal> <volume> SMC-13, </volume> <pages> 834-846. </pages> <note> 25 Beckers, </note> <author> R., Deneubourg, J. L., & Goss, S. </author> <year> (1992). </year> <title> Trails and U-turns in the selection of the shortest path by the ant Lasius Niger. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 159, </volume> <pages> 397-415. </pages>
Reference-contexts: More sophisticated and computationally-demanding models could be learnt to generate a more effective traffic-dependent evaluation measure. The situation is similar to that in Actor-Critic systems <ref> (Barto, Sutton, & Anderson, 1983) </ref>: a raw "reinforcement" signal (the experienced trip time, in our case) is processed by a critic module which is learning a model of the underlying process, and then is fed to the learning system.
Reference: <author> Bellman, R. </author> <year> (1957). </year> <title> Dynamic programming. </title> <publisher> Princeton University Press. </publisher>
Reference: <author> Bellman, R. </author> <year> (1958). </year> <title> On a routing problem. </title> <journal> Quarterly of Applied Mathematics, </journal> <volume> 16 (1), </volume> <pages> 87-90. </pages>
Reference: <author> Bertsekas, D. </author> <year> (1995). </year> <title> Dynamic Programming and Optimal Control. </title> <publisher> Athena Scientific. </publisher>
Reference: <author> Bertsekas, D., & Gallager, R. </author> <year> (1992). </year> <title> Data Networks. </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: In addition, adaptive routing can lead more easily to inconsistent situations, associated with node or link failures or 2 local topological changes. These stability and inconsistency problems are more evident for datagram networks than for virtual circuit networks <ref> (Bertsekas & Gallager, 1992) </ref>. In fact, in datagram networks every packet selects the path hop by hop. This allows the system to react quickly and adapt to changes in routing tables but can also easily lead to an oscillatory behavior. <p> Minimal routers allow packets to choose only minimal cost paths, while non-minimal algorithms allow choosing among all the available paths following some heuristic strategies. Examples of non-minimal routers are deflection routers, hierarchical routers, cut-through routers, queuing routers (see for example (Bolding et al., 1994) and <ref> (Bertsekas & Gallager, 1992) </ref> for descriptions and references). Oblivious and minimal adaptive routing algorithms are the most widely used routing paradigms (at least taking in consideration wide-area communication networks). <p> <ref> (Bertsekas & Gallager, 1992) </ref> for descriptions and references). Oblivious and minimal adaptive routing algorithms are the most widely used routing paradigms (at least taking in consideration wide-area communication networks). Considering different perspectives in minimal length paths computation, these algorithms can be further classified as optimal routing and shortest path algorithms (Bertsekas & Gallager, 1992), which are discussed in the following. <p> This can lead to undesirable oscillations, as has been theoretically predicted and observed in practice <ref> (Bertsekas & Gallager, 1992) </ref>. Considering the different content stored in each switch 1 routing table, shortest path algorithms can be further subdivided in two classes called distance-vector and link-state (Steenstrup, 1995). The common behavior of most shortest path algorithms can be depicted as follows. 1. <p> It can be shown that this process converges in finite time to the shortest paths with respect to the used metric if no link cost changes after a given time <ref> (Bertsekas & Gallager, 1992) </ref>. The above briefly described algorithm is known in literature as distributed Bellman-Ford (Bellman, 1958; Ford & Fulkerson, 1962; Bertsekas & Gallager, 1992) and it is based on the principles of dynamic programming (Bellman, 1957; Bertsekas, 1995). <p> Each routing information packet is broadcast to all the neighbor nodes that in turn send the packet to their neighbors and so on. A distributed flooding <ref> (Bertsekas & Gallager, 1992) </ref> mechanism supervises this information transmission trying to minimize the number of re-transmissions. <p> Shortest paths for a sample data packet of size 512 bytes are computed and stored in routing tables at the start of the simulation. BF: is an implementation of the asynchronous distributed Bellman-Ford algorithm with dynamic metrics <ref> (Bertsekas & Gallager, 1992) </ref>. The algorithm has been implemented following the guidelines of sections 2.2 and 2.2.1). Vector-distance Bellman-Ford-like algorithms are today in use mainly for intradomain routing, because they are used in 13 the Routing Information Protocol (RIP) (Malkin & Steenstrup, 1995) supplied with the BSD version of Unix.
Reference: <author> Bertsekas, D., & Tsitsiklis, J. </author> <year> (1996). </year> <title> Neuro-Dynamic Programming. </title> <publisher> Athena Scientific. </publisher>
Reference: <author> Bolding, K., Fulgham, M. L., & Snyder, L. </author> <year> (1994). </year> <title> The case for chaotic adaptive routing. </title> <type> Tech. rep. </type> <institution> CSE-94-02-04, Department of Computer Science, University of Washington, </institution> <address> Seattle. </address>
Reference-contexts: Virtual circuit networks do not exhibit re-ordering problems and their (lower) sensitivity to routing tables updates strictly depends on the circuits creation rate and holding time. Adaptive routers can be broken down in two broad categories: minimal and non-minimal <ref> (Bolding, Fulgham, & Snyder, 1994) </ref>. Minimal routers allow packets to choose only minimal cost paths, while non-minimal algorithms allow choosing among all the available paths following some heuristic strategies. <p> Minimal routers allow packets to choose only minimal cost paths, while non-minimal algorithms allow choosing among all the available paths following some heuristic strategies. Examples of non-minimal routers are deflection routers, hierarchical routers, cut-through routers, queuing routers (see for example <ref> (Bolding et al., 1994) </ref> and (Bertsekas & Gallager, 1992) for descriptions and references). Oblivious and minimal adaptive routing algorithms are the most widely used routing paradigms (at least taking in consideration wide-area communication networks).
Reference: <author> Brakmo, L. S., O'Malley, S. W., & Peterson, L. L. </author> <year> (1994). </year> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In Proceedings of ACM SIGCOMM 94. </booktitle>
Reference: <author> Cherkassky, B. V., Goldberg, A. V., & Radzik, T. </author> <year> (1994). </year> <title> Shortest Paths Algorithms: Theory and Experimental Evaluation. </title> <editor> In Sleator, D. D. (Ed.), </editor> <booktitle> Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA 94), </booktitle> <pages> pp. </pages> <address> 516-525 Arlington, VA. </address> <publisher> ACM Press. </publisher>
Reference-contexts: This database is essentially a dynamic map of the complete network, describing the details of its components and their current interconnections. Using this database as input each node calculates its best paths using an appropriate algorithm (usually Dijkstra's (Dijkstra, 1959) algorithm is used, but, as described in <ref> (Cherkassky, Goldberg, & Radzik, 1994) </ref>, a wide variety of alternative efficient algorithms for shortest paths computations are available). The memory space occupation required for each node is in this case of order O (N 2 ).
Reference: <author> Crawley, E., Nair, R., Rajagopalan, B., & Sandick, H. </author> <year> (1996). </year> <title> A framework for QoS-based routing in the internet. </title> <note> Internet Draft (expired in September, 1997) draft-ietf-qosr-framework-00, </note> <institution> Internet Engineering Task Force (IEFT). </institution>
Reference-contexts: In this scenario, it will be of critical importance an efficient adaptive routing policy able to support the flow admission control algorithm both in the creation of QoS sessions with very strict requirements, and in the global optimization of the network resources usage <ref> (Crawley et al., 1996) </ref>. It is in this perspective that we developed a robust, adaptive, and distributed routing system, AntNet, implemented following alternative schemes with respect to those of classical shortest path implementations here briefly reported and that showed more than one limitation 2 . 2.
Reference: <author> Danzig, P. B., Liu, Z., & Yan, L. </author> <year> (1994). </year> <title> An Evaluation of TCP Vegas by Live Emulation. </title> <type> Tech. rep. </type> <institution> UCS-CS-94-588, Computer Science Department, University of Southern California, </institution> <address> Los Angeles. </address>
Reference-contexts: As an example, some authors reported an improvement ranging from 2 to 30% in various performance measures for real Internet traffic <ref> (Danzig, Liu, & Yan, 1994) </ref>, changing from the Reno version to the Vegas version of the TCP (Peterson & Davie, 1996) (other authors even claimed an improvement ranging from 40 to 70% (Brakmo, O'Malley, & Peterson, 1994)).
Reference: <author> Dijkstra, E. W. </author> <year> (1959). </year> <title> A Note on Two Problems in Connection with Graphs. </title> <journal> Numer. Math, </journal> <volume> 1, </volume> <pages> 269-271. </pages>
Reference-contexts: This database is essentially a dynamic map of the complete network, describing the details of its components and their current interconnections. Using this database as input each node calculates its best paths using an appropriate algorithm (usually Dijkstra's <ref> (Dijkstra, 1959) </ref> algorithm is used, but, as described in (Cherkassky, Goldberg, & Radzik, 1994), a wide variety of alternative efficient algorithms for shortest paths computations are available). The memory space occupation required for each node is in this case of order O (N 2 ).
Reference: <author> Dorigo, M. </author> <year> (1992). </year> <title> Optimization, Learning and Natural Algorithms (in Italian). </title> <type> Ph.D. thesis, </type> <institution> Politecnico di Milano (IT), Dipartimento di Elettronica ed Informatica. </institution>
Reference: <author> Dorigo, M., & Gambardella, L. M. </author> <year> (1997). </year> <title> Ant Colony System: A Cooperative Learning Approach to the Traveling Salesman Problem. </title> <journal> IEEE Transactions on Evolutionary Computation, </journal> <volume> 1 (1), </volume> <pages> 53-66. </pages>
Reference: <author> Dorigo, M., Maniezzo, V., & Colorni, A. </author> <year> (1991). </year> <title> The Ant System: An Autocatalytic Optimizing Process. </title> <type> Tech. rep. 91-016, </type> <institution> Politecnico di Milano (IT), Dipartimento di Elettronica ed Informatica. </institution>
Reference: <author> Dorigo, M., Maniezzo, V., & Colorni, A. </author> <year> (1996). </year> <title> The Ant System: Optimization by a colony of cooperating agents. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics-PartB, </journal> <volume> 26 (1), </volume> <pages> 29-41. </pages>
Reference: <author> Efron, B., & Tibshirani, R. </author> <year> (1993). </year> <title> An Introduction to Bootstrap. </title> <publisher> Chapman & Hall. </publisher>
Reference-contexts: We observed that after this time interval the behavior of the algorithm is already well characterized. A 100 seconds of "learning" time has been assigned to the algorithms to learn routing tables over the network in absence of traffic. Reported values are averaged over 10 trials and a bootstrap <ref> (Efron & Tibshirani, 1993) </ref> procedure has been applied to get a better estimate of the variance.
Reference: <author> Ford, L., & Fulkerson, D. </author> <year> (1962). </year> <title> Flows in Networks. </title> <publisher> Prentice-Hall. </publisher>
Reference: <author> Goss, S., Aron, S., Deneubourg, J. L., & Pasteels, J. M. </author> <year> (1989). </year> <title> Self-organized shortcuts in the Argentine ant. </title> <journal> Naturwissenschaften, </journal> <volume> 76, </volume> <pages> 579-581. </pages>
Reference: <author> Grasse, P. P. </author> <year> (1959). </year> <institution> La reconstruction du nid et les coordinations interindividuelles chez Bellicositermes Natalensis et Cubitermes sp. La theorie de la stigmergie: es-sai d'interpretation du comportement des termites constructeurs. Insectes Sociaux, </institution> <month> 6, </month> <pages> 41-81. </pages>
Reference-contexts: The routing algorithm that we propose in this paper was inspired by previous works on ant colonies and, more generally, by the notion of stigmergy. The term stigmergy was first introduced by Grasse <ref> (Grasse, 1959) </ref> to describe the indirect communication taking place among individuals through modifications induced in their environment.
Reference: <author> Kaelbling, L. P., Littman, M. L., & Moore, A. W. </author> <year> (1996). </year> <title> Reinforcement Learning: A Survey. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 4, </volume> <pages> 237-285. </pages>
Reference: <author> Khanna, A., & Zinky, J. </author> <year> (1989). </year> <title> The Revised ARPANET Routing Metric. </title> <booktitle> SIGCOMM 89, </booktitle> <volume> 19 (4), </volume> <pages> 45-56. </pages>
Reference-contexts: It has been implemented respecting the indications of sections 2.2 and 2.2.1 for link-state algorithms. A similar algorithm was implemented in the second version of ARPANET (McQuillan et al., 1980) and in its successive revisions <ref> (Khanna & Zinky, 1989) </ref>. We implemented it with state-of-the-art link costs evaluation and flooding algorithms. SPF 1F: is the same as SPF but with flooding limited to the first neighbors. As far as we know, this is the first time that a similar algorithm is presented in literature. <p> We call this metric DEL. 14 4. The mean of the transmission time over the link, T l , and the mean delay in the link's queue, D q (l) , are computed over the last time-window. They are used to compute the link cost in the following way <ref> (Khanna & Zinky, 1989) </ref>: 1 T l . We call this metric HND (hop normalized delay). 5. The link cost is a weighted combination of a pair of the above metrics.
Reference: <author> Malkin, G. S., & Steenstrup, M. E. </author> <year> (1995). </year> <title> Distance-Vector Routing. </title> <editor> In Steenstrup, M. E. (Ed.), </editor> <title> Routing in Communications Networks, </title> <journal> chap. </journal> <volume> 3, </volume> <pages> pp. 83-98. </pages> <publisher> Prentice-Hall. </publisher>
Reference-contexts: It is the prototype and the ancestor of a more wide class of distance-vector algorithms <ref> (Malkin & Steenstrup, 1995) </ref> developed with the aim of reducing the risk of circular loops and to accelerate the convergence in case of rapid changes in link costs. Link-state algorithms make use of routing tables containing much more information than those used in vector-distance algorithms. <p> The algorithm has been implemented following the guidelines of sections 2.2 and 2.2.1). Vector-distance Bellman-Ford-like algorithms are today in use mainly for intradomain routing, because they are used in 13 the Routing Information Protocol (RIP) <ref> (Malkin & Steenstrup, 1995) </ref> supplied with the BSD version of Unix. SPF: is the prototype of link-state algorithms with dynamic metric for link costs evalua tions. It has been implemented respecting the indications of sections 2.2 and 2.2.1 for link-state algorithms.
Reference: <author> McQuillan, J. M., Richer, I., & Rosen, E. C. </author> <year> (1980). </year> <title> The New Routing Algorithm for the ARPANET. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28, </volume> <pages> 711-719. </pages>
Reference-contexts: SPF: is the prototype of link-state algorithms with dynamic metric for link costs evalua tions. It has been implemented respecting the indications of sections 2.2 and 2.2.1 for link-state algorithms. A similar algorithm was implemented in the second version of ARPANET <ref> (McQuillan et al., 1980) </ref> and in its successive revisions (Khanna & Zinky, 1989). We implemented it with state-of-the-art link costs evaluation and flooding algorithms. SPF 1F: is the same as SPF but with flooding limited to the first neighbors.
Reference: <author> Moy, J. </author> <year> (1994). </year> <title> OSPF Version 2. Request For Comments (RFC) 1583, Network Working Group. </title>
Reference-contexts: So, after some revisions concerning the reduction of the allowed variability of the links costs (Khanna & Zinky, 1989; Zinky, Vichniac, & Khanna, 1989), the current routing algorithm of Internet, Open Shortest Path First (OSPF) <ref> (Moy, 1994) </ref> is a link-state algorithm with a static metric assigned by network administrators. Only temporary or permanent topological alterations are flooded in the network. This short historical retrospective is intended to highlight the difficulties encountered in the implementation of adaptive routing algorithms for the Internet. <p> We wanted to compare our algorithm with the current Internet standards and with some improved versions of them closely reflecting state-of-the-art for routing algorithms. The following algorithms have been implemented. OSPF: is our implementation of the official Internet routing algorithm <ref> (Moy, 1994) </ref>. The Internet OSPF has a lot of features for the full network management. Here we are only interested in data packet routing in simplified conditions, as described in section 4. Therefore, the original algorithm is reduced to a simple static shortest path calculation.
Reference: <author> Moy, J. </author> <year> (1995). </year> <title> Link-State Routing. </title> <editor> In Steenstrup, M. E. (Ed.), </editor> <title> Routing in Communications Networks, </title> <journal> chap. </journal> <volume> 5, </volume> <pages> pp. 135|157. </pages> <publisher> Prentice-Hall. </publisher>
Reference-contexts: As in the case of vector-distance, the described algorithm is a general template and a variety of different versions has been implemented to make the algorithm behavior more robust and efficient <ref> (Moy, 1995) </ref>. 5 2.2.1 Links Costs Updates We conclude our discussion of shortest paths algorithms stressing the critical role played by the choice of an appropriate link costs updating policy in case of non-static costs and time-varying traffic patterns.
Reference: <author> Peterson, L. L., & Davie, B. </author> <year> (1996). </year> <title> Computer Networks: A System Approach. </title> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: As an example, some authors reported an improvement ranging from 2 to 30% in various performance measures for real Internet traffic (Danzig, Liu, & Yan, 1994), changing from the Reno version to the Vegas version of the TCP <ref> (Peterson & Davie, 1996) </ref> (other authors even claimed an improvement ranging from 40 to 70% (Brakmo, O'Malley, & Peterson, 1994)). In presence of variations of this entity, it becomes difficult to choose the "right" congestion avoidance mechanism and to understand its relationships with the underlying routing algorithm.
Reference: <author> Pinelli, D. </author> <year> (1996). </year> <title> Evaluation of dynamic metrics for IP routing supporting integrated services (in Italian). </title> <type> Master's thesis, </type> <institution> CEFRIEL, Milano (IT). </institution>
Reference-contexts: More stable metrics can show a poor responsivity to traffic fluctuations and congestion conditions. Link costs are usually assigned in the following way attempting to reduce big variations and taking into account both long-term and short-term statistics of link congestion states <ref> (Pinelli, 1996) </ref>: 1. The first step is to define a metric for the links cost evaluation. The cost is updated at regular instants t 0 ; t 1 ; t 2 ; : : : ; t i : : : . <p> This correction is weighted by the ff value set to 0.4. Algorithms BF , SP F and SP F 1F use a dynamic metric for link costs. We tried the following different metrics documented in literature <ref> (Pinelli, 1996) </ref>. 1. The links costs are all set to 1. This is in reality a static metric counting only the number of hops (for this and the next metrics, a value of infinity is assigned to the cost in case of link failure). 2. <p> In our experimental settings, we considered only one-session applications, so in the following we will use the terms session and application interchangeably. Two models, static and dynamic, of temporal traffic patterns have been used, modeling respectively the case of Constant Bit Rate (CBR) and of Variable Bit Rate (VBR) <ref> (Pinelli, 1996) </ref>. 15 agation delays in msec. Each edge in the graph represents a pair of directed links. * In the static model all the sessions start at the beginning of the simulation and they last until the end. In this way, we simulate a stationary situation.
Reference: <author> Schoonderwoerd, R., Holland, O., & Bruten, J. </author> <year> (1997a). </year> <title> Ant-like agents for load balancing in telecommunications networks. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents,, </booktitle> <pages> pp. </pages> <address> 209-216 Marina del Rey, CA. </address> <publisher> ACM Press. </publisher>
Reference: <author> Schoonderwoerd, R., Holland, O., Bruten, J., & Rothkrantz, L. </author> <year> (1997b). </year> <title> Load Balancing in Telecommunications Networks. Adaptive Behavior, </title> <type> 5 (2). </type>
Reference: <author> Steenstrup, M. E. (Ed.). </author> <year> (1995). </year> <title> Routing in Communications Networks. </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: This information is then back-propagated by another ant moving in the opposite direction and is used to modify the routing tables of visited nodes. We report on the behavior of AntNet as compared to some effective static and adaptive vector-distance and link-state shortest paths routing algorithms <ref> (Steenstrup, 1995) </ref>. AntNet shows the best performance and the more stable behavior for all the paradigmat-ical temporal and spatial traffic distributions considered. Its best competitor is still another new algorithm we introduce. Absolute performance is scored according to a scale defined by an ideal algorithm giving an empirical bound. <p> This can lead to undesirable oscillations, as has been theoretically predicted and observed in practice (Bertsekas & Gallager, 1992). Considering the different content stored in each switch 1 routing table, shortest path algorithms can be further subdivided in two classes called distance-vector and link-state <ref> (Steenstrup, 1995) </ref>. The common behavior of most shortest path algorithms can be depicted as follows. 1. Each node assigns a cost to each of its outgoing links. This cost can be static or dynamic. <p> It is the prototype and the ancestor of a more wide class of distance-vector algorithms <ref> (Malkin & Steenstrup, 1995) </ref> developed with the aim of reducing the risk of circular loops and to accelerate the convergence in case of rapid changes in link costs. Link-state algorithms make use of routing tables containing much more information than those used in vector-distance algorithms. <p> The algorithm has been implemented following the guidelines of sections 2.2 and 2.2.1). Vector-distance Bellman-Ford-like algorithms are today in use mainly for intradomain routing, because they are used in 13 the Routing Information Protocol (RIP) <ref> (Malkin & Steenstrup, 1995) </ref> supplied with the BSD version of Unix. SPF: is the prototype of link-state algorithms with dynamic metric for link costs evalua tions. It has been implemented respecting the indications of sections 2.2 and 2.2.1 for link-state algorithms.
Reference: <author> Stone, P., & Veloso, M. </author> <year> (1996). </year> <title> Multiagent systems: a survey from a Machine Learning persective. </title> <note> Submitted. </note>
Reference-contexts: Routing decisions can only be made on the basis of local and approximate information about the current and the future network states. These features make the problem well suited for a multiagent approach like our AntNet system, composed by two sets of homogeneous mobile agents (see <ref> (Stone & Veloso, 1996) </ref> for an agents taxonomy), called in the following forward and backward ants. Agents 3 in each set possess the same structure, but they are differently situated in the environment; that is, they can sense different inputs and they can produce different, independent outputs.
Reference: <author> Zinky, J., Vichniac, G., & Khanna, A. </author> <year> (1989). </year> <title> Performance of the Revised Routing Metric in the ARPANET and MILNET. </title> <booktitle> In MILCOM 89. </booktitle> <pages> 27 </pages>
Reference-contexts: It has been implemented respecting the indications of sections 2.2 and 2.2.1 for link-state algorithms. A similar algorithm was implemented in the second version of ARPANET (McQuillan et al., 1980) and in its successive revisions <ref> (Khanna & Zinky, 1989) </ref>. We implemented it with state-of-the-art link costs evaluation and flooding algorithms. SPF 1F: is the same as SPF but with flooding limited to the first neighbors. As far as we know, this is the first time that a similar algorithm is presented in literature. <p> We call this metric DEL. 14 4. The mean of the transmission time over the link, T l , and the mean delay in the link's queue, D q (l) , are computed over the last time-window. They are used to compute the link cost in the following way <ref> (Khanna & Zinky, 1989) </ref>: 1 T l . We call this metric HND (hop normalized delay). 5. The link cost is a weighted combination of a pair of the above metrics.
References-found: 33

