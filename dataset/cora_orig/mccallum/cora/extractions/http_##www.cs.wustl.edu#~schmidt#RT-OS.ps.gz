URL: http://www.cs.wustl.edu/~schmidt/RT-OS.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/new.html
Root-URL: http://www.cs.wustl.edu
Title: An Empirical Evaluation of OS Support for Real-time CORBA Object Request Brokers  
Author: David L. Levine, Sergio Flores-Gaitan, and Douglas C. Schmidt 
Keyword: Real-time CORBA Object Request Broker, QoS-enabled OO Middleware, Performance Measurements  
Note: Submitted to the Real-Time Technology and Applications Symposium (RTAS),  This work was supported in part by Boeing, CDI/GDIS, DARPA contract 9701516, Lucent, Motorola, NSF grant NCR-9628218, Siemens, and Sprint.  
Address: St. Louis, MO 63130, USA  Canada,  
Affiliation: Department of Computer Science, Washington University  Vancouver, British Columbia,  
Email: flevine,sergio,schmidtg@cs.wustl.edu  
Date: June 24, 1999.  
Abstract: There is increasing demand to extend Object Request Broker (ORB) middleware to support distributed applications with stringent real-time requirements. However, lack of proper OS support can yield substantial inefficiency and unpredictability for ORB middleware. This paper provides two contributions to the study of OS support for real-time ORBs. First, we empirically compare and evaluate the suitability of real-time operating systems, VxWorks and LynxOS, and general-purpose operating systems with real-time extensions, Windows NT, Solaris, and Linux, for real-time ORB middle-ware. While holding the hardware and ORB constant, we vary the operating system and measure platform-specific variations, such as latency, jitter, operation throughput, and CPU processing overhead. Second, we describe key areas where these operating systems must improve to support predictable, efficient, and scalable ORBs. Our findings illustrate that general-purpose operating systems like Windows NT and Solaris are not yet suited to meet the demands of applications with stringent QoS requirements. However, LynxOS does enable predictable and efficient ORB performance, thereby making it a compelling OS platform for real-time CORBA applications. Linux provides good raw performance, though it is not a real-time operating system. Surprisingly, VxWorks does not scale robustly. In general, our results underscore the need for a measure-driven methodology to pinpoint sources of priority inversion and non-determinism in real-time ORB endsystems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Gopalakrishnan and G. Parulkar, </author> <title> Bringing Real-time Scheduling Theory and Practice Closer for Multimedia Computing, </title> <booktitle> in SIGMETRICS Conference, </booktitle> <address> (Philadelphia, PA), </address> <publisher> ACM, </publisher> <month> May </month> <year> 1996. </year> <month> 13 </month>
Reference-contexts: 1 Introduction Next-generation distributed real-time applications, such as teleconferencing, avionics mission computing, and process control, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency <ref> [1] </ref>, bandwidth, and reliability [2].
Reference: [2] <author> S. Landis and S. Maffeis, </author> <title> Building Reliable Distributed Sys--tems with CORBA, </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Next-generation distributed real-time applications, such as teleconferencing, avionics mission computing, and process control, require endsystems that can provide statistical and deterministic quality of service (QoS) guarantees for latency [1], bandwidth, and reliability <ref> [2] </ref>.
Reference: [3] <author> R. Johnson, </author> <title> Frameworks = Patterns + Components, </title> <journal> Communications of the ACM, </journal> <volume> vol. 40, </volume> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: following trends are shaping the evolution of software development techniques for these distributed real-time applications and endsystems: Increased focus on middleware and integration frameworks: There is a trend in real-time R&D projects away from developing real-time applications from scratch to integrating applications using reusable components based on object-oriented (OO) middleware <ref> [3] </ref>. The objective of mid-dleware is to increase quality and decrease the cycle-time and effort required to develop software by supporting the integration of reusable components implemented by different suppliers.
Reference: [4] <author> Z. Deng and J. W.-S. Liu, </author> <title> Scheduling Real-Time Applications in an Open Environment, </title> <booktitle> in Proceedings of the 18th IEEE Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: Increased focus on QoS-enabled components and open systems: There is increasing demand for remote method invocation and messaging technology to simplify the collaboration of open distributed application components <ref> [4] </ref> that possess deterministic and statistical QoS requirements. These components must be customizable to meet the functionality and QoS requirements of applications developed in diverse contexts.
Reference: [5] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: Several international standardization efforts are currently addressing QoS-related issues associated with COTS hardware and software. One particularly noteworthy standardization effort has yielded the Object Management Group's (OMG) Common Object Request Broker Architecture (CORBA) specification <ref> [5] </ref>. CORBA is OO middleware software that allows clients to invoke operations on objects without concern for 1 where the objects reside, what language the objects are writ-ten in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects [6]. <p> ORB RUNTIME SCHEDULER REAL-TIME ORB CORE operation () RIDL STUBS REAL-TIME OBJECT ADAPTER RIDL SKELETON in args out args + return value CLIENT OS KERNEL HIGHSPEED NETWORK INTERFACE REAL-TIME I/O SUBSYSTEM GIOP/RIOP OBJECT (SERVANT) OS KERNEL HIGHSPEED NETWORK INTERFACE REAL-TIME I/O SUBSYSTEM ACE COMPONENTS OBJ standard OMG CORBA reference model <ref> [5] </ref>, with the following enhancements designed to overcome the shortcomings of conventional ORBs [18] for high-performance and real-time applications: Real-time IDL Stubs and Skeletons: TAO's IDL stubs and skeletons efficiently marshal and demarshal operation parameters, respectively [22]. <p> In particular, the I/O subsystem is an important factor for determining a bound on responsiveness, which is crucial for certain types of real-time applications [17]. Many real-time applications can benefit from flexible and open distributed architectures, such as those defined by CORBA <ref> [5] </ref>. Our previous work [18] has shown that conventional CORBA ORBs have limitations that make them inadequate for real-time middleware with stringent QoS requirements. TAO has overcome these limitations, however, through careful design and implementation.
Reference: [6] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: CORBA is OO middleware software that allows clients to invoke operations on objects without concern for 1 where the objects reside, what language the objects are writ-ten in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects <ref> [6] </ref>. There has been recent progress towards standardizing CORBA for real-time [7] and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications.
Reference: [7] <institution> Object Management Group, </institution> <note> Realtime CORBA 1.0 Joint Submission, OMG Document orbos/98-12-05 ed., </note> <month> December </month> <year> 1998. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time <ref> [7] </ref> and embedded [8] systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. <p> TAO's real-time Object Adapter [19] uses perfect hashing [24] and active demultiplexing [15] optimizations to dispatch servant operations in constant O (1) time, regardless of the number of active connections, servants, and operations defined in IDL interfaces. ORB Run-time Scheduler: A real-time scheduler <ref> [7] </ref> maps application QoS requirements, such as include bounding end-to-end latency and meeting periodic scheduling deadlines, to ORB endsystem/network resources, such as ORB endsys-tem/network resources include CPU, memory, network connections, and storage devices. TAO's run-time scheduler supports both static [10] and dynamic [14] real-time scheduling strategies.
Reference: [8] <author> Object Management Group, </author> <title> Minimum CORBA Request for Proposal, </title> <editor> OMG Document orbos/97-06-14 ed., </editor> <month> June </month> <year> 1997. </year>
Reference-contexts: There has been recent progress towards standardizing CORBA for real-time [7] and embedded <ref> [8] </ref> systems. Several OMG groups, most notably the Real-Time Special Interest Group (RT SIG), are actively investigating standard extensions to CORBA to support distributed real-time applications. The goal of standardizing real-time CORBA is to enable real-time applications to interwork throughout embedded systems and heterogeneous distributed environments, such as the Internet.
Reference: [9] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: Conventional CORBA ORBs are generally unsuited for performance-sensitive, distributed real-time applications due to their (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) overall lack of performance and predictability <ref> [9] </ref>. Although some operating systems, networks, and protocols now support real-time scheduling, they do not provide integrated end-to-end solutions [10]. Moreover, relatively little systems research has focused on strategies and tactics for real-time ORB endsystems.
References-found: 9

