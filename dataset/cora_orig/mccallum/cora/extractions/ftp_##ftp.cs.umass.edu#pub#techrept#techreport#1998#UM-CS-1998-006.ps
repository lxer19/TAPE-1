URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1998/UM-CS-1998-006.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/98-006.html
Root-URL: 
Email: lerner@cs.umass.edu, sutton@cs.umass.edu, ljo@cs.umass.edu  
Title: Enhancing Design Methods to Support Real Design Processes  Preferred track: Traceability, Integrity, and Change  
Author: Barbara Staudt Lerner Stanley M. Sutton Jr., and Leon J. Osterweil 
Address: Amherst, Massachusetts 01003  
Affiliation: Computer Science Department University of Massachusetts  
Abstract: Software design methods typically focus on the activities that individual designers should perform under ideal circumstances. They rarely, if ever, address the activities that should be performed when things do not go according to plan, such as when a customer requests changes to the specification, or when early design decisions must be changed. They also rarely address issues involving coordination of multiple designers in cooperative design tasks or in competition for limited resources. We are investigating fundamental concepts required for more complete definition of design methods, developing linguistic mechanisms within a process programming language to support these concepts, and validating these through the definition of a process program that incorporates the Booch method. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <publisher> Benjamin Cummings, </publisher> <address> Redwood City, CA, </address> <note> second edition edition, </note> <year> 1994. </year>
Reference-contexts: 1 Motivation In recent years, numerous software design methods (for example, <ref> [1, 4, 2, 6, 3] </ref>) have been proposed to describe how successful software designers build systems so that others may learn from their experiences and use the same techniques. <p> While the thrust of this work is quite broad, and often highly conceptual, we have found that it is quite beneficial to also reduce it to operational practice. We have done this by developing a formal process definition for a specific software design method, namely Booch Object Oriented Design <ref> [1] </ref>, expressing the process definition in the JIL process programming language [5]. This process definition work has had a number of significant benefits.
Reference: [2] <author> D. Coleman, P. Arnold, S. Bodoff, C. Dollin, H. Gilchrist, F. Hayes, and P. Jeremaes. </author> <title> Object-Oriented Development: The FUSION Method. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: 1 Motivation In recent years, numerous software design methods (for example, <ref> [1, 4, 2, 6, 3] </ref>) have been proposed to describe how successful software designers build systems so that others may learn from their experiences and use the same techniques.
Reference: [3] <author> I. Jacobson, M. Christerson, P. Jonsson, and G. Overgaard. </author> <title> Object-Oriented Software Engineering: A Use Case Driven Approach. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: 1 Motivation In recent years, numerous software design methods (for example, <ref> [1, 4, 2, 6, 3] </ref>) have been proposed to describe how successful software designers build systems so that others may learn from their experiences and use the same techniques.
Reference: [4] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference-contexts: 1 Motivation In recent years, numerous software design methods (for example, <ref> [1, 4, 2, 6, 3] </ref>) have been proposed to describe how successful software designers build systems so that others may learn from their experiences and use the same techniques.
Reference: [5] <author> Stanley M. Sutton, Jr. and Leon J. Osterweil. </author> <title> The design of a next-generation process language. </title> <booktitle> In Proceedings of the Joint 6th European Software Engineering Conference and the 5th ACM SIGSOFT Symposium on the Foundations of Software Engineering. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: We have done this by developing a formal process definition for a specific software design method, namely Booch Object Oriented Design [1], expressing the process definition in the JIL process programming language <ref> [5] </ref>. This process definition work has had a number of significant benefits. First, because defining a process by means of a programming language provides a precise semantics, we are able to be quite rigorous in the definition of the method.
Reference: [6] <author> R. Wirfs-Brock, B. Wilkerson, and L. Weiner. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year> <month> 7 </month>
Reference-contexts: 1 Motivation In recent years, numerous software design methods (for example, <ref> [1, 4, 2, 6, 3] </ref>) have been proposed to describe how successful software designers build systems so that others may learn from their experiences and use the same techniques.
References-found: 6

