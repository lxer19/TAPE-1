URL: http://www.pmg.lcs.mit.edu/papers/lockup-cache.ps.gz
Refering-URL: http://www.pmg.lcs.mit.edu/Thor-papers.html
Root-URL: 
Email: mday@lcs.mit.edu  
Title: Lockup of a Client Object Cache and How to Avoid It (Student Paper)  
Author: Mark Day 
Address: 545 Technology Square Cambridge, MA 02139, USA  
Affiliation: MIT Laboratory for Computer Science  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Fran~cois Bancilhon, Claude Delobel, and Paris Kanellakis, </author> <title> editors. Building an Object-Oriented Database: </title> <publisher> The Story of O 2 . Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: I consider the case where objects are moved or copied to the client for at least the duration of the client transaction. A number of existing object-oriented databases work partially or entirely in this mode of executing operations on the client machine: examples are O2 <ref> [1] </ref>, GemStone [2, 9], and Orion [7]. 2 Complicating factors The Thor system [8] includes three features that improve performance but complicate cache management: inter-transaction caching, swizzling, and object groups as the unit of transfer. fl Telephone: +1 (617) 253-6015 Fax: +1 (617) 258-8682 This research was supported in part by
Reference: [2] <author> Paul Butterworth, Allen Otis, and Jacob Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: I consider the case where objects are moved or copied to the client for at least the duration of the client transaction. A number of existing object-oriented databases work partially or entirely in this mode of executing operations on the client machine: examples are O2 [1], GemStone <ref> [2, 9] </ref>, and Orion [7]. 2 Complicating factors The Thor system [8] includes three features that improve performance but complicate cache management: inter-transaction caching, swizzling, and object groups as the unit of transfer. fl Telephone: +1 (617) 253-6015 Fax: +1 (617) 258-8682 This research was supported in part by the Advanced
Reference: [3] <author> Mark Day. </author> <title> Client cache management in a distributed object system. </title> <type> PhD Thesis, </type> <institution> MIT Department of Electrical Engineering and Computer Science (forthcoming). </institution>
Reference-contexts: In simulations of Thor using garbage collection and shrinking, I have demonstrated that computations can proceed without cache lockup with larger and larger workloads or smaller and smaller caches until performance has greatly degraded due to cache misses and other cache-related overheads <ref> [3] </ref>. Surrogates are not strictly necessary, since the garbage collector can fix up the relevant pointers; however, surrogates simplify the task of the garbage collector.
Reference: [4] <author> Mark Day. </author> <title> Object groups may be better than pages. </title> <booktitle> 4th Workshop on Workstation Operating Systems, </booktitle> <address> Napa, California, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Finally, the need to cluster objects statically into pages limits the flexibility of prefetching, and may reduce performance accordingly <ref> [4] </ref>. 3 Cache lockup and how to avoid it Because Thor fetches object groups, swizzles references, and caches objects across transaction boundaries, it needs a different approach to cache management. 3.1 Garbage collection Garbage collection is one obvious mechanism for managing the client object cache.
Reference: [5] <author> Michael Carey, David J. DeWitt, and Jeffrey F. Naughton. </author> <title> The OO7 Benchmark. </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Wisconsin, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: This condition can arise without warning: there is typically little or no degradation of performance before such a problem stops the computation, a condition I call "cache lockup". In a simulation of Thor using OO7 traversal 1 on a small OO7 database <ref> [5] </ref>, caches smaller than 1571 KBytes locked up when using only garbage collection. 3.2 Shrinking to surrogates Another way to recover space is to shrink an unmodified persistent object.
Reference: [6] <author> Ted Kaehler. </author> <title> Virtual memory on a narrow machine for an object-oriented language. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <pages> pages 87-106, </pages> <year> 1986. </year>
Reference-contexts: So when an object is shrunk, it is replaced by a surrogate, a small data structure containing only the information needed to refetch the object if needed (cf. leaves in LOOM <ref> [6] </ref>, forwarders in Mneme [10]). The surrogate ensures that any attempt to use a shrunk object causes the object to be refetched. When a garbage collector fails to reclaim enough space, it can shrink some objects and then proceed. The combination of shrinking and garbage collection is quite robust.
Reference: [7] <author> Won Kim, Nat Ballou, Hong-Tai Chou, Jorge F. Garza, Darrell Woelk, and Jay Banerjee. </author> <title> Integrating an object-oriented programming system with a database system. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <pages> pages 142-152, </pages> <year> 1988. </year>
Reference-contexts: A number of existing object-oriented databases work partially or entirely in this mode of executing operations on the client machine: examples are O2 [1], GemStone [2, 9], and Orion <ref> [7] </ref>. 2 Complicating factors The Thor system [8] includes three features that improve performance but complicate cache management: inter-transaction caching, swizzling, and object groups as the unit of transfer. fl Telephone: +1 (617) 253-6015 Fax: +1 (617) 258-8682 This research was supported in part by the Advanced Research Projects Agency of
Reference: [8] <author> Barbara Liskov, Mark Day, and Liuba Shrira. </author> <title> Distributed object management in Thor. </title> <editor> In M. Tamer Ozsu, Umesh Dayal, and Patrick Valduriez, editors, </editor> <booktitle> Distributed Object Management. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: A number of existing object-oriented databases work partially or entirely in this mode of executing operations on the client machine: examples are O2 [1], GemStone [2, 9], and Orion [7]. 2 Complicating factors The Thor system <ref> [8] </ref> includes three features that improve performance but complicate cache management: inter-transaction caching, swizzling, and object groups as the unit of transfer. fl Telephone: +1 (617) 253-6015 Fax: +1 (617) 258-8682 This research was supported in part by the Advanced Research Projects Agency of the Department of Defense, monitored by the
Reference: [9] <author> David Maier, Jacob Stein, Allen Otis, and Alan Purdy. </author> <title> Development of an object-oriented DBMS. </title> <booktitle> In Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <pages> pages 472-482, </pages> <year> 1986. </year>
Reference-contexts: I consider the case where objects are moved or copied to the client for at least the duration of the client transaction. A number of existing object-oriented databases work partially or entirely in this mode of executing operations on the client machine: examples are O2 [1], GemStone <ref> [2, 9] </ref>, and Orion [7]. 2 Complicating factors The Thor system [8] includes three features that improve performance but complicate cache management: inter-transaction caching, swizzling, and object groups as the unit of transfer. fl Telephone: +1 (617) 253-6015 Fax: +1 (617) 258-8682 This research was supported in part by the Advanced
Reference: [10] <author> J. Eliot B. Moss. </author> <title> Design of the Mneme persistent object store. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(2) </volume> <pages> 103-139, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: So when an object is shrunk, it is replaced by a surrogate, a small data structure containing only the information needed to refetch the object if needed (cf. leaves in LOOM [6], forwarders in Mneme <ref> [10] </ref>). The surrogate ensures that any attempt to use a shrunk object causes the object to be refetched. When a garbage collector fails to reclaim enough space, it can shrink some objects and then proceed. The combination of shrinking and garbage collection is quite robust.
Reference: [11] <author> J. E. B. Moss. </author> <title> Working with persistent objects: To swizzle or not to swizzle. </title> <type> Technical Report 90-38, COINS, </type> <institution> University of Massachusetts - Amherst, </institution> <year> 1990. </year>
Reference-contexts: For many workloads, it is more efficient to swizzle the inter-object reference at the client, actually mutating a cached copy of an object so that each server name is replaced by its corresponding client address <ref> [11] </ref>. 2.3 Transferring object groups, not pages In many systems, the unit transferred from server to client is a page. The client then manages a cache of pages much like a paged virtual memory, treating the server as a backing store.
References-found: 11

