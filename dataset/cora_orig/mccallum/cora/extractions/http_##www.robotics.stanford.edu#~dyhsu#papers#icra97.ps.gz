URL: http://www.robotics.stanford.edu/~dyhsu/papers/icra97.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~dyhsu/publications.html
Root-URL: http://www.robotics.stanford.edu
Email: fdyhsu, latombe, rajeevg@cs.stanford.edu  
Title: Path Planning in Expansive Configuration Spaces  
Author: David Hsu Jean-Claude Latombe Rajeev Motwani 
Address: Stanford, CA 94305  
Affiliation: Department of Computer Science Stanford University  
Abstract: We introduce the notion of expansiveness to characterize a family of robot configuration spaces whose connectivity can be effectively captured by a roadmap of randomly-sampled milestones. The analysis of expansive configuration spaces has inspired us to develop a new randomized planning algorithm. This algorithm tries to sample only the portion of the configuration space that is relevant to the current query, avoiding the cost of precomputing a roadmap for the entire configuration space. Thus, it is well-suited for problems where a single query is submitted for a given environment. The algorithm has been implemented and successfully applied to complex assembly maintainability problems from the automotive industry. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 113-120, </pages> <year> 1996. </year>
Reference-contexts: There are several different techniques for constructing roadmaps, including uniform sampling followed by enhancement in difficult regions [12], using random reflections at C-space obstacles [8], and sampling on contact surfaces in the configuration space <ref> [1] </ref>. These randomized planners have demonstrated good performance empirically, but are not complete. Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists. Note that if no path exists, the planner may never terminate.
Reference: [2] <author> J. Barraquand, L. Kavraki, J.-C. Latombe, T.-Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling scheme for path planning. </title> <editor> In G. Giralt and G. Hirzinger, editors, </editor> <booktitle> Proc. of the 7th Int. Symp. on Robotics Research, </booktitle> <pages> pp. 249-264, </pages> <year> 1996. </year>
Reference-contexts: However, recently, randomization has been successfully exploited to provide an efficient and general path-planning scheme for many-dof robots <ref> [2] </ref>. The Randomized Path Planner (RPP) [3] searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and escapes local minima of the potential function by random walks.
Reference: [3] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> The Int. J. of Robotics Research, </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: However, recently, randomization has been successfully exploited to provide an efficient and general path-planning scheme for many-dof robots [2]. The Randomized Path Planner (RPP) <ref> [3] </ref> searches for a path by following the negated gradient of an artificial potential field constructed over the configuration space and escapes local minima of the potential function by random walks. It has been used in practice with good results, but there are several cases where RPP behaves poorly [4].
Reference: [4] <author> D. Challou and M. Gini. </author> <title> Parallel robot motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 46-51, </pages> <year> 1993. </year>
Reference-contexts: It has been used in practice with good results, but there are several cases where RPP behaves poorly <ref> [4] </ref>. Usually this happens when the robot is trapped in a local minimum and the only way to escape is to go through a narrow passage. The probability that a random walk goes through a narrow passage is extremely small.
Reference: [5] <author> H. Chang and T.-Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: A good example is assembly maintainability problems, where we must determine whether there exists a path to remove a part from an assembly for maintenance <ref> [5] </ref>. For single-query path planning problems, the configuration space may contain many connected components, but only one of them is relevant to the query being processed if the initial and the goal configuration are path-connected.
Reference: [6] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing distance between objects in three-dimensional space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 4(2), </volume> <year> 1988. </year>
Reference-contexts: Our experience indicates that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and ob (a) (b) (c) obstacle is 128 fi 128.
Reference: [7] <author> S. Gottschalk, M. C. Lin, and D. Manocha. OBBtree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In SIGGRAPH '96 Proc., </booktitle> <year> 1996. </year>
Reference-contexts: Our experience indicates that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and ob (a) (b) (c) obstacle is 128 fi 128.
Reference: [8] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3318-3323, </pages> <year> 1994. </year>
Reference-contexts: This planner is particularly suitable for problems where multiple path-planning queries have to be answered in the same static environment. There are several different techniques for constructing roadmaps, including uniform sampling followed by enhancement in difficult regions [12], using random reflections at C-space obstacles <ref> [8] </ref>, and sampling on contact surfaces in the configuration space [1]. These randomized planners have demonstrated good performance empirically, but are not complete. Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists.
Reference: [9] <author> L. Kavraki, M. N. Kolountzakis, and J.-C. Latombe. </author> <title> Analysis of probabilistic roadmaps for path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3020-3025, </pages> <year> 1996. </year>
Reference-contexts: Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In [13], potential field planners are analyzed based on the study of Markov chains and diffusion processes. In <ref> [9] </ref>, an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists.
Reference: [10] <author> L. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configurations space for fast path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 2138-2139, </pages> <year> 1994. </year>
Reference-contexts: Currently the roadmap planner generates most of the milestones by sampling uniformly at random from the configuration space. Typically most of the configurations picked (more than 99:5%) are in collision with obstacles <ref> [10] </ref> and discarded. It would be highly desirable to sample collision-free configurations more efficiently. One idea is to pick uniformly a small number of collision-free configurations and use the new planner to expand from these configurations in order to generate additional milestones.
Reference: [11] <author> L. Kavraki, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query processing in robot path planning. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pp. 353-362, </pages> <year> 1995. </year>
Reference-contexts: In [9], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists. A variant of the roadmap planner is described in <ref> [11] </ref>, and the connectivity property of roadmaps that it produces is analyzed under an assumption called *-goodness of the configuration space. Unfortunately this variant assumes a complete planner is available to be invoked in order to improve the connectivity of the roadmap. 1 This assumption is clearly not realistic. <p> Unlike in <ref> [11] </ref>, there is no need for a complete planner here. Although the roadmap planner offers an efficient solution for multiple-query path planning problems, it is not suitable when only a single query is submitted for a given environment. <p> The first condition guarantees that F is *-good <ref> [11] </ref>. That is, every point in F can see at least an * fraction of the free space.
Reference: [12] <author> L. Kavraki, P. Svestka, J.-C. Latombe, and M. H. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration space. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <year> 1996. </year>
Reference-contexts: Usually this happens when the robot is trapped in a local minimum and the only way to escape is to go through a narrow passage. The probability that a random walk goes through a narrow passage is extremely small. Another planner, described in <ref> [12] </ref>, uses random sampling to construct a roadmap of the configuration space and tries to find a path between any two input configurations by connecting them to the roadmap. After paying a relatively high cost for building the packaging model having 60,000 triangles. roadmap, it answers queries very efficiently. <p> This planner is particularly suitable for problems where multiple path-planning queries have to be answered in the same static environment. There are several different techniques for constructing roadmaps, including uniform sampling followed by enhancement in difficult regions <ref> [12] </ref>, using random reflections at C-space obstacles [8], and sampling on contact surfaces in the configuration space [1]. These randomized planners have demonstrated good performance empirically, but are not complete. <p> The expansive property of the space has helped to explain the success of this planner. One direction of future research would be to integrate the new planner with the roadmap planner <ref> [12] </ref> for multiple-query path planning problems. Currently the roadmap planner generates most of the milestones by sampling uniformly at random from the configuration space. Typically most of the configurations picked (more than 99:5%) are in collision with obstacles [10] and discarded.
Reference: [13] <author> F. Lamiroux and J. P. Laumond. </author> <title> On the expected complexity of random path planning. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3014-3019, </pages> <year> 1996. </year>
Reference-contexts: Some of them achieve the weaker notion of probabilistic completeness, i.e., they find a path with high probability whenever one exists. Note that if no path exists, the planner may never terminate. There have been several attempts to provide theoretical justification for the observed success of these planners. In <ref> [13] </ref>, potential field planners are analyzed based on the study of Markov chains and diffusion processes. In [9], an estimate is given for the probability that the roadmap planner can find a path between two given configurations, assuming that a path of certain clearance exists.
Reference: [14] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Path planning is an important problem in robotics <ref> [14] </ref>. Given the geometry of a robot and obstacles, a path planner is required to generate a collision-free path between an initial and a goal configuration. <p> Path smoothing. Usually the path generated by this planner has too many zig-zags, but it can be smoothed by a simple algorithm <ref> [14, page 248] </ref>. 6 Experimental Results The planner is written in C++. Measurements reported in this section are the average of five independent runs for each problem.
Reference: [15] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: The intuitive explanation for the success of this scheme is via an analogy to the rapid mixing property of random walks on expander graphs <ref> [15] </ref>. We have implemented this algorithm and tested it on assembly maintainability problems from the automotive industry. These problems contain complex CAD models that describe cluttered environments having up to 200,000 triangles.
Reference: [16] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proc. IEEE Int. Conf. on Robotics and Automation, </booktitle> <pages> pp. 3324-3329, </pages> <year> 1994. </year>
Reference-contexts: Our experience indicates that the second approach works better. We will discuss this further in the next paragraph. There is considerable literature on collision checking and distance computation, notably, <ref> [6, 7, 16] </ref>. Checking straight-line connection. The function link checks whether there is a straight-line path between two configurations p and q. Suppose that clearance computes the distance between a robot and ob (a) (b) (c) obstacle is 128 fi 128.
Reference: [17] <author> J. H. Reif. </author> <title> Complexity of the mover's problem and generalizations. </title> <booktitle> In Proc. 20th IEEE Symp. on Foundations of Computer Science (FOCS), </booktitle> <pages> pp. 421-427, </pages> <year> 1979. </year>
Reference-contexts: There is strong evidence that a complete planner, i.e., a planner that finds a path whenever one exists and indicates that none exists otherwise, will take time exponential in the number of degrees of freedom (dof) of the robot <ref> [17] </ref>. However, recently, randomization has been successfully exploited to provide an efficient and general path-planning scheme for many-dof robots [2].
Reference: [18] <author> K. Shoemake. </author> <title> Animating rotation with quaternion curves. </title> <booktitle> In Computer Graphics (SIGGRAPH '85 Pro ceedings), </booktitle> <volume> volume 19, </volume> <pages> pp. 245-254, </pages> <year> 1985. </year> <month> 8 </month>
Reference-contexts: Compared to other representations, unit quaternion best reveals the topology of the 3-D rotation space. Its advantages include low memory usage and robustness 5 against floating point errors. Interpolating between two quaternions is also very easy <ref> [18] </ref>. Distance between two configurations. We have used two distance metrics in our algorithm, dist c and dist w .
References-found: 18

