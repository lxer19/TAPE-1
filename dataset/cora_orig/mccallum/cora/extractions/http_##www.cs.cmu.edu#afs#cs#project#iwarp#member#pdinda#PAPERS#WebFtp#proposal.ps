URL: http://www.cs.cmu.edu/afs/cs/project/iwarp/member/pdinda/PAPERS/WebFtp/proposal.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/usr/pdinda/html/papers.html
Root-URL: 
Title: Dynamic Mapping of Activation Trees  
Author: Peter A. Dinda 
Degree: Thesis Proposal  
Date: January 21, 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> ADOBE CORPORATION. </author> <note> Adobe Photoshop 4.0 User's Guide, </note> <year> 1997. </year>
Reference-contexts: Every time he moves the mouse, the operating system sends the application a message 1 To better understand these applications, we implemented very simple versions which we believe are similar to their full-featured counterparts (eg, Adobe Photoshop <ref> [1] </ref>) except for their feature sets. 2 Ignoring the listener's Head Related Transfer Function, Doppler effects during movement, and other issues that are beyond the scope of this document. Interested parties should look at [8]. 5 (a) Listener Moved (b) Step Simulation announcing that fact. <p> Next generation stream-oriented systems like the VuSystem [48] filter the streams in computationally intensive ways, such as extracting titling text from video streams. Image editing programs such as Photoshop <ref> [1] </ref> were also ripe for distributed systems because of the increasingly huge size of photographic images [18]. Games are becoming increasingly interesting applications for distributed systems.
Reference: [2] <author> ALLEN, J. B., AND BERKLEY, D. A. </author> <title> Method for simulating small-room acoustics. </title> <journal> Journal of the Acoustical Society of America 65, </journal> <month> 4 (April </month> <year> 1979), </year> <month> 943950. </month>
Reference-contexts: In addition to multiplayer games, we expect that single player games will become increasingly rely on com-putationally intensive physical simulations for realism. For example, the use of physically based acoustics and music <ref> [2, 41, 72] </ref> in games may not be far off. Remote execution Our machine model includes a remote execution facility, which allows a procedure call to be executed on any host in the system. The purpose of our work is to decide which host is best for a given call.
Reference: [3] <author> ARABE, J., BEGUELIN, A., LOWEKAMP, B., E. SELIGMAN, M. S., AND STEPHAN, P. Dome: </author> <title> Parallel programming in a heterogeneous multi-user environment. </title> <type> Tech. Rep. </type> <institution> CMU-CS-95-137, Carnegie Mellon University, School of Computer Science, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: For example, in data parallel applications built in DOME <ref> [3] </ref>, neighboring hosts periodically exchange measurements of execution time and redistribute their data accordingly. The system described in [70] uses a global approach where one centralized agent makes load balancing decisions based on execution times reported by all of the hosts.
Reference: [4] <author> BAO, H., BIELAK, J., GHATTAS, O., KALLIVOKAS, L. F., O'HALLARON, D. R., SHEWCHUK, J. R., AND XU, J. </author> <title> Large-scale Simulation of Elastic Wave Propagation in Heterogeneous Media on Parallel Computers. </title> <booktitle> Computer Methods in Applied Mechanics and Engineering 152, </booktitle> <month> 12 (Jan. </month> <year> 1998), </year> <pages> 85102. 36 </pages>
Reference-contexts: In this mode, the acoustic room modeling application shares many characteristics with the design optimization applications (for example, shape optimization [50]) currently being discussed in the Quake project <ref> [5, 4] </ref>. In both acoustic room modeling and design optimization, the user repeatedly adjusts the model parameters (furniture position and composition; soil and rock composition), simulates the physical system, and views the results.
Reference: [5] <author> BAO, H., BIELAK, J., GHATTAS, O., O'HALLARON, D. R., KALLIVOKAS, L. F., SHEWCHUK, J. R., AND XU, J. </author> <title> Earthquake Ground Motion Modeling on Parallel Computers. </title> <booktitle> In Supercomputing '96 (Pittsburgh, </booktitle> <address> Penn-sylvania, </address> <month> Nov. </month> <year> 1996). </year>
Reference-contexts: In this mode, the acoustic room modeling application shares many characteristics with the design optimization applications (for example, shape optimization [50]) currently being discussed in the Quake project <ref> [5, 4] </ref>. In both acoustic room modeling and design optimization, the user repeatedly adjusts the model parameters (furniture position and composition; soil and rock composition), simulates the physical system, and views the results.
Reference: [6] <author> BARBACCI, M. R., AND WING, J. M. DURRA: </author> <title> A task-level description language. </title> <booktitle> In Proceedings of The International Conference on Parallel Processing (August 1987), </booktitle> <pages> pp. 370376. </pages>
Reference-contexts: Qual is a language for expressing the quality requirements of program modules. These specifications can then be compiled into a monitoring agent which switches between different regions of operation. Compilable specification languages to support binding modules and services have also been developed in the parallel computing community. DURRA <ref> [6] </ref> is a well known example. In our work, the bounds placed on the execution time of an activation tree could be seen as a QoS specification. In mobile computing the QoS challenge is to detect changing wireless network conditions quickly and adapt to them gracefully.
Reference: [7] <author> BASSINGTHWAIGHTE, J. B., BEARD, D. A., PERCIVAL, D. B., AND RAYMOND, G. M. </author> <title> Fractal structures and processes. In Chaos and the Changing Nature of Science and Medicine: An Introduction (April 1995), </title> <editor> D. E. Herbert, Ed., </editor> <volume> no. </volume> <booktitle> 376 in AIP Conference Proceedings, American Institute of Physics, </booktitle> <pages> pp. 5479. </pages>
Reference-contexts: These stochastic processes model the sort of the mechanisms that give rise to self-similar signals. We shall avoid a mathematical treatment here, but interested readers may want to consult [47] 13 or [55] for a treatment in the context of networking or <ref> [7] </ref> for its connection to fractal geometry. What is important is that self-similarity can arise from a long-memory process. The idea of self-similarity and the statistic used to characterize it arose not in theory, but from the experimental physical sciences and engineering. <p> This is the approach we took in our analysis of the host load series. The four Hurst parameter estimators we used were R/S analysis, the variance-time method, dispersional analysis, and power spectral analysis. A description of these estimators as well as several others may be found in <ref> [7] </ref>. We implemented R/S analysis and the variance-time method using Matlab and performed dispersional analysis and power spectral analysis by hand on graphs prepared via Matlab. We validated each method by examining degenerate series with known H and series with specific H generated using the random midpoint displacement method.
Reference: [8] <author> BEGAULT, D. R. </author> <title> 3-D Sound For Virtual Reality and Multimedia. AP Professional, </title> <year> 1994. </year>
Reference-contexts: Interested parties should look at <ref> [8] </ref>. 5 (a) Listener Moved (b) Step Simulation announcing that fact. He may slow down due to indecision, or stop, or release the mouse button ending his drawing.
Reference: [9] <author> BERSHAD, B. N., ANDERSON, T. E., LAZOWSKA, E. D., AND LEVY, H. M. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems 8, </journal> <month> 1 (February </month> <year> 1990), </year> <month> 3755. </month>
Reference-contexts: The purpose of our work is to decide which host is best for a given call. Examples of remote execution facilities include remote procedure call systems, distributed shared memory mechanisms, and distributed object systems. Remote procedure call systems <ref> [12, 9] </ref>, such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server.
Reference: [10] <author> BESTAVROS, A. </author> <title> Load profiling: A methodology for scheduling real-time tasks in a distributed system. </title> <note> In Proceedings of ICDCS '97 (May 1997). </note>
Reference-contexts: Bestavros extends this work by arguing that load balancing is actually detrimental to real-time performance and develops an alternative which intentionally tries to keep loads out of balance and makes task mapping decisions based on the underlying load profile it is trying to maintain <ref> [10] </ref>. We suspect that Bestavros has more success with simple stochastic models than we do because he is modeling the remote schedulers that are a part of his system and are therefore a known quantity.
Reference: [11] <author> BESTAVROS, A., AND SPARTIOTIS, D. </author> <title> Probabilistic job scheduling for distributed real-time applications. </title> <booktitle> In Proceedings of the First IEEE Workshop on Real-Time Applications (May 1993). </booktitle>
Reference-contexts: Bestavros and Spartiotis suggest a scheme in which simple stochastic 35 models of other hosts' load conditions are formed based on infrequent, opportunistic information exchanges and task mappings are chosen probabilistically from among hosts that qualify according to the models <ref> [11] </ref>. Bestavros extends this work by arguing that load balancing is actually detrimental to real-time performance and develops an alternative which intentionally tries to keep loads out of balance and makes task mapping decisions based on the underlying load profile it is trying to maintain [10].
Reference: [12] <author> BIRREL, A. D., AND NELSON, B. J. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 1 (February </month> <year> 1984), </year> <month> 3959. </month>
Reference-contexts: The purpose of our work is to decide which host is best for a given call. Examples of remote execution facilities include remote procedure call systems, distributed shared memory mechanisms, and distributed object systems. Remote procedure call systems <ref> [12, 9] </ref>, such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server.
Reference: [13] <author> BRADEN, R., ZHANG, L., BERSON, S., HERZOG, S., AND JAMIN, S. </author> <title> Resource ReSerVation protocol (RSVP) version 1 functional specification. Internet RFC 2205, </title> <month> September </month> <year> 1997. </year> <month> ftp://ftp.isi.edu/in-notes/rfc2205.txt. </month>
Reference-contexts: In this sense, our work can be seen as a QoS service for a specific class of applications. In the networking community, QoS has meant providing deterministic and statistical guarantees of the bandwidth and latency of connections for media applications [29, 45]. Tenet [30], RSVP <ref> [13] </ref> and the ATM CBR and VBR service classes are examples of network QoS systems. Although we make no assumptions about the network, one could imagine using such mechanisms to simplify the dynamic mapping problem by making the communication costs known a priori.
Reference: [14] <author> BROWN, N., AND KINDEL, C. </author> <title> Distributed component object model protocol dcom/1.0. </title> <type> Tech. rep., </type> <institution> Microsoft, </institution> <month> May </month> <year> 1996. </year> <note> http://ds1.internic.net/internet-drafts/draft-brown-dcom-v1-spec-00.txt. </note>
Reference-contexts: Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM <ref> [14] </ref> and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [15] <author> BUBENDORFER, K. P. </author> <title> Resource based policies for load distribution. </title> <type> Master's thesis, </type> <institution> Victoria University of Wellington, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: The idea is to schedule independent, sequential tasks on a group of hosts such that each host has approximately the same load. A distinction is sometimes drawn between load sharing <ref> [15] </ref> (also called load distribution and load leveling), which offers only a rough approximation to equalizing load across the hosts, and load balancing, which attempts more precision [25].
Reference: [16] <author> CHIN, R., AND CHANSON, S. </author> <title> Distributed object-based programming systems. </title> <journal> ACM Computing Surveys 23, </journal> <month> 1 (March </month> <year> 1991), </year> <month> 91124. </month>
Reference-contexts: Examples of remote execution facilities include remote procedure call systems, distributed shared memory mechanisms, and distributed object systems. Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems <ref> [60, 16] </ref>, such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [17] <author> DEWITT, T., GROSS, T., LOWEKAMP, B., MILLER, N., STEENKISTE, P., SUBHLOK, J., AND SUTHERLAND, D. ReMoS: </author> <title> A resource monitoring system for network aware applications. </title> <type> Tech. Rep. </type> <institution> CMU-CS-97-194, School of Computer Science, Carnegie Mellon University, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: Durations of additional traffic can then be computed either at the packet level or by the residual bandwidth. I have experience using this methodology in prior work charac 28 terizing network traffic of Fx programs [19]. Another possibility is to use the Remos system <ref> [17] </ref> which is currently being developed by the Remulac group or by in-switch monitoring using the active networking facilities being developed by the Darwin group [73].
Reference: [18] <author> DINDA, P. A. </author> <title> Network personal computing for world simulation. </title> <type> Tech. Rep. </type> <institution> Working Paper, Carnegie Mellon University School of Computer Science, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: Next generation stream-oriented systems like the VuSystem [48] filter the streams in computationally intensive ways, such as extracting titling text from video streams. Image editing programs such as Photoshop [1] were also ripe for distributed systems because of the increasingly huge size of photographic images <ref> [18] </ref>. Games are becoming increasingly interesting applications for distributed systems. For example, the Department of Defense's DIS effort is trying to create large scale (100,000 users or more) simulated war games by connecting different kinds of simulators located all over the world [21].
Reference: [19] <author> DINDA., P. A., GARCIA, B. M., AND LEUNG, K. S. </author> <title> Traffic characterization of parallel programs. </title> <address> http://www.cs.cmu.edu/afs/cs/project/iwarp/member/pdinda/PAPERS/traf char/report.ps, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Durations of additional traffic can then be computed either at the packet level or by the residual bandwidth. I have experience using this methodology in prior work charac 28 terizing network traffic of Fx programs <ref> [19] </ref>. Another possibility is to use the Remos system [17] which is currently being developed by the Remulac group or by in-switch monitoring using the active networking facilities being developed by the Darwin group [73].
Reference: [20] <author> DIPIPPO, L. C., GINIS, R., SQUADRITO, M., WOHLEVER, S., WOLFE, V. F., ZYKH, I., AND JOHNSTON, R. </author> <title> Expressing and enforcing timing constraints in a CORBA environment. </title> <type> Tech. Rep. 97-252, </type> <institution> Department of Computer Science, University of Rhode Island, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: This is the approach taken in [78] and in proposals to the Real-time CORBA standardization effort <ref> [59, 20] </ref>. Another approach is to implement resource schedulers that provide reservation mechanisms, such as in SONIC [61]. In contrast, we make no attempt to control the system in order to meet our goals.
Reference: [21] <author> DIS STEERING COMMITTEE. </author> <title> The dis vision: A map to the future of distributed simulation. </title> <type> Tech. Rep. Version 1, </type> <institution> DIS Steering Committee, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Games are becoming increasingly interesting applications for distributed systems. For example, the Department of Defense's DIS effort is trying to create large scale (100,000 users or more) simulated war games by connecting different kinds of simulators located all over the world <ref> [21] </ref>. At least three companies, Silicon Graphics, Zombie Entertainment, and Military Simulations, Inc., are working on extending the emerging DIS technology for civilian games, with an example of a DIS-based game being shown at SIGGRAPH '96.
Reference: [22] <author> DISZ, T. L., PAPKA, M. E., PELLEGRINO, M., AND STEVENS, R. </author> <title> Sharing visualization experiences among remote virtual environments. </title> <booktitle> In Proceedings of the International Workshop on High Performance Computing for Computer Graphics and Visualization (1995), </booktitle> <pages> pp. 217237. </pages>
Reference-contexts: Scientific visualization involves the useful display of large, complex datasets, while computational steering lets the user use this display to focus a running physical simulation on areas of interest [35]. For example, the CAVE project <ref> [22] </ref> involves connecting immersive virtual environment simulators to remote physical simulations. CAVE has also proven to be a good environment for scientific and engineering collaboration [63]. Cumulus [33] is a library and run-time system for adding adding visualization and computational steering to simulations based on iterative operations on dense matrices.
Reference: [23] <author> DWARKADAS, S., COX, A., AND ZWAENEPOEL, W. </author> <title> An integrated compile-time/run-time software distributed shared memory system. </title> <booktitle> In Proc. Sixth Intl. Conf. on Architectural Support for Prog. Languages and Operating Systems (ASPLOS VI) (Boston, </booktitle> <month> Oct </month> <year> 1996), </year> <note> ACM. </note>
Reference-contexts: Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures. Distributed shared memory systems such as Tempest [64], Shasta [66], and ThreadMarks <ref> [23] </ref> provide the appearance of a global address space shared by some number of private memory hosts. This is combined with a multithreading model where threads that may be assigned to different hosts communicate via shared variables.
Reference: [24] <author> EAGER, D. L., LAZOWSKA, E. D., AND ZAHORJAN, J. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering SE-12, </journal> <month> 5 (May </month> <year> 1986), </year> <pages> 662675. 37 </pages>
Reference-contexts: In either case, the distributed operating system is comprised of host-local schedulers which interact to implement transfer (should task be moved?) and location (where should task go?) policies <ref> [24] </ref>. In our work, we schedule dependent tasks (activation tree nodes) and do not balance loads across different hosts. Early work in operating system-centric dynamic load balancing assumed simple, analytically tractable distributions for job length and other properties.
Reference: [25] <author> EAGER, D. L., LAZOWSKA, E. D., AND ZAHORJAN, J. </author> <title> A comparison of receiver-initiated and sender-initiated adaptive load sharing. Performance Evaluation 6 (March 1986), </title> <type> 5368. </type>
Reference-contexts: A distinction is sometimes drawn between load sharing [15] (also called load distribution and load leveling), which offers only a rough approximation to equalizing load across the hosts, and load balancing, which attempts more precision <ref> [25] </ref>. In either case, the distributed operating system is comprised of host-local schedulers which interact to implement transfer (should task be moved?) and location (where should task go?) policies [24]. In our work, we schedule dependent tasks (activation tree nodes) and do not balance loads across different hosts. <p> Early work in operating system-centric dynamic load balancing assumed simple, analytically tractable distributions for job length and other properties. Under these assumptions, simple heuristics and initial placement were found to be adequate <ref> [26, 25] </ref>. However, measurement studies [46] have cast doubt on these assumptions, and more recent work [37] argues strongly for process migration.
Reference: [26] <author> EAGER, D. L., LAZOWSKA, E. D., AND ZAHORJAN, J. </author> <title> The limited performance benefits of migrating active processes for load sharing. </title> <booktitle> In SIGMETRICS '88 (May 1988), </booktitle> <pages> pp. 6372. </pages>
Reference-contexts: Early work in operating system-centric dynamic load balancing assumed simple, analytically tractable distributions for job length and other properties. Under these assumptions, simple heuristics and initial placement were found to be adequate <ref> [26, 25] </ref>. However, measurement studies [46] have cast doubt on these assumptions, and more recent work [37] argues strongly for process migration.
Reference: [27] <author> EMER, J., AND GLOY, N. </author> <title> A language for describing predictors and its application to automatic synthesis. </title> <booktitle> In Proceedings of the 24th Annual International Symposium on Computer Architecture (June 1997). </booktitle>
Reference-contexts: We have also found some success with a neural networks approach. Indeed, it is interesting to note that machine learning [53] approaches are also finding success in related scheduling problems. For example, genetic algorithms have been successful in branch prediction <ref> [27] </ref> and scheduling loop level parallelism in multiprocessors [79]. Distributed soft real-time systems A real-time system allows a programmer to specify a deadline for the execution of a one-time or periodic task. The bounds in our dynamic mapping problem correspond to these deadlines.
Reference: [28] <author> ENDO, Y., WANG, Z., CHEN, J. B., AND SELTZER, M. </author> <title> Using latency to evaluate interactive system performance. </title> <booktitle> In Proceedings of the 1996 Symposium on Operating Systems Design and Implementation (1996). </booktitle>
Reference-contexts: Aperiodic user actions generate aperiodic messages Most computation in an interactive application arises from aperiodic user actions that result in aperiodic messages being delivered to the program. The aperiodicity is due to from the variable think time humans need to decide their next action <ref> [28] </ref>. Consider a user using a brush tool to draw freehand in an image editing application.
Reference: [29] <author> FERRARI, D. </author> <title> Client requirements for real-time communication services. </title> <journal> IEEE Communications Magazine 11, </journal> <month> 11 (November </month> <year> 1990), </year> <month> 6572. </month>
Reference-contexts: In this sense, our work can be seen as a QoS service for a specific class of applications. In the networking community, QoS has meant providing deterministic and statistical guarantees of the bandwidth and latency of connections for media applications <ref> [29, 45] </ref>. Tenet [30], RSVP [13] and the ATM CBR and VBR service classes are examples of network QoS systems. Although we make no assumptions about the network, one could imagine using such mechanisms to simplify the dynamic mapping problem by making the communication costs known a priori.
Reference: [30] <author> FERRARI, D., BANERJEA, A., AND ZHANG, H. </author> <title> Network support for multimedia a discussion of the tenet approach. </title> <booktitle> Computer Networks and ISDN Systems 26, </booktitle> <month> 10 (July </month> <year> 1994), </year> <month> 11671180. </month>
Reference-contexts: In this sense, our work can be seen as a QoS service for a specific class of applications. In the networking community, QoS has meant providing deterministic and statistical guarantees of the bandwidth and latency of connections for media applications [29, 45]. Tenet <ref> [30] </ref>, RSVP [13] and the ATM CBR and VBR service classes are examples of network QoS systems. Although we make no assumptions about the network, one could imagine using such mechanisms to simplify the dynamic mapping problem by making the communication costs known a priori.
Reference: [31] <author> FLORISSI, P. G. S. QuAL: </author> <title> Quality Assurance Language (Thesis Proposal). </title> <type> PhD thesis, </type> <institution> Columbia University Computer Science Department, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: The challenge is in translating between the object level and the network level and in providing a clean way for the programmer to identify different regions of operation and when to switch between them. Another example of translation and adaptation involves the Qual language being developed at Columbia <ref> [31] </ref>. Qual is a language for expressing the quality requirements of program modules. These specifications can then be compiled into a monitoring agent which switches between different regions of operation. Compilable specification languages to support binding modules and services have also been developed in the parallel computing community.
Reference: [32] <author> GARRETT, M., AND WILLINGER, W. </author> <title> Analysis, modeling and genreation of self-similar VBR video traffic. </title> <booktitle> In Proceedings of SIGCOMM '94 (London, </booktitle> <month> September </month> <year> 1994). </year>
Reference-contexts: In particular, load appears to spend much of its time in a small number 12 of well differentiated states, and the manner in which it switches between states seems to be qualitatively simple. Other researchers have found some of these properties in network measurements <ref> [47, 77, 32] </ref>. We begin by describing our measurement methodology.
Reference: [33] <author> GEIST, G. A., KOHL, J. A., AND PAPADOPOULOS, P. M. </author> <title> CUMULVS: Providing fault-tolerance, visualization, and steering of parallel applications. </title> <type> Tech. rep., </type> <institution> Oak Ridge National Laboratory, </institution> <year> 1996. </year>
Reference-contexts: For example, the CAVE project [22] involves connecting immersive virtual environment simulators to remote physical simulations. CAVE has also proven to be a good environment for scientific and engineering collaboration [63]. Cumulus <ref> [33] </ref> is a library and run-time system for adding adding visualization and computational steering to simulations based on iterative operations on dense matrices. Tele-operation is related to computational, except that the remote physical simulation is replaced with an actual physical system.
Reference: [34] <author> GOKHALE, A., AND SCHMIDT, D. C. </author> <title> Measuring the performance of communication middleware on high-speed networks. </title> <note> In Proceedings of SIGCOMM 96 (August 1996). Extended version available as TR. </note>
Reference-contexts: This is combined with a multithreading model where threads that may be assigned to different hosts communicate via shared variables. Although today's common remote execution facilities have relatively high overheads 33 in the millisecond range <ref> [34] </ref>, our experience is that this is due mostly to the latency of network protocol stacks and we expect that this latency will improve.
Reference: [35] <author> HAGGEN, H., MUELLER, H., AND NIELSON, G. M., Eds. </author> <title> Focus On Scientific Visualization. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The goal of the thesis work is to simplify building these sorts of of applications. Scientific visualization involves the useful display of large, complex datasets, while computational steering lets the user use this display to focus a running physical simulation on areas of interest <ref> [35] </ref>. For example, the CAVE project [22] involves connecting immersive virtual environment simulators to remote physical simulations. CAVE has also proven to be a good environment for scientific and engineering collaboration [63].
Reference: [36] <author> HAILPERIN, M. </author> <title> Load Balancing using Time Series Analysis For Soft Real-Time Systems with Statistically Periodic Loads. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: By exploiting subtle properties of specific distributed systems or application workloads, some systems can put their limited knowledge to better use. In essence, this is what we intend to do for a specific class of applications. One example of exploiting such properties is Hailperin's thesis <ref> [36] </ref>, which takes advantage 6 The marshalling/unmarshalling and dispatch overhead of a call in LDOS is only about 100 times greater than that of a C++ virtual function call. 34 of the statistical periodicity of his sensor-driven applications. Our applications have aperiodically arriving activation trees. <p> We suspect that Bestavros has more success with simple stochastic models than we do because he is modeling the remote schedulers that are a part of his system and are therefore a known quantity. In addition to load balancing, Hailperin's thesis <ref> [36] </ref> also takes advantage of the statistical periodicity of his sensor-driven applications to help place and migrate objects so that method invocations meet their deadlines. We must deal with aperiodically arriving activation trees.
Reference: [37] <author> HARCHOL-BALTER, M., AND DOWNEY, A. B. </author> <title> Exploiting process lifetime distributions for dynamic load balancing. </title> <booktitle> In Proceedings of ACM SIGMETRICS '96 (May 1996), </booktitle> <pages> pp. 1324. </pages>
Reference-contexts: Early work in operating system-centric dynamic load balancing assumed simple, analytically tractable distributions for job length and other properties. Under these assumptions, simple heuristics and initial placement were found to be adequate [26, 25]. However, measurement studies [46] have cast doubt on these assumptions, and more recent work <ref> [37] </ref> argues strongly for process migration.
Reference: [38] <author> HOARE, R., DIETZ, H. G., MATTOX, T., AND KIM, S. </author> <title> Bitwise aggregate networks. </title> <booktitle> In Proceedings of the Eighth IEEE Symposium on Parallel and Distributed Processing (October 1996). </booktitle>
Reference-contexts: With microsecond range application-to-application communication latencies such as the PAPERS network <ref> [38] </ref> can provide, the overhead of remote execution in a system like LDOS or CORBA could be within a couple of orders of magnitude of the overhead of a local call. 6 Such an improvement would drastically increase the fraction of procedures in a typical program that could be profitably executed
Reference: [39] <author> HOLLINGSWORTH, J. K., AND BUCK, B. </author> <title> DynInstAPI Programmer's Guide Release 1.0, </title> <month> July </month> <year> 1997. </year> <note> http://www.cs.umd.edu/ hollings/dyninstAPI/dyninstUserGuide.pdf. </note>
Reference-contexts: I have written a tool based on the DyninstAPI run-time dynamic instrumentation library <ref> [40, 39] </ref> that lets me instrument the entry point and exit points of any procedure in a Windows COFF binary. An input file lets me specify which procedures to instrument.
Reference: [40] <author> HOLLINGSWORTH, J. K., MILLER, B. P., AND CARGILLE, J. </author> <title> Dynamic program intstrumentation for scalable perforamnce tools. </title> <note> In Proceedings of SHPCC '94 (May 1994). </note>
Reference-contexts: I have written a tool based on the DyninstAPI run-time dynamic instrumentation library <ref> [40, 39] </ref> that lets me instrument the entry point and exit points of any procedure in a Windows COFF binary. An input file lets me specify which procedures to instrument.
Reference: [41] <author> HUOPANIEMI, J., KARJALAINEN, M., VAELIMAEKI, V., AND HOUTILAINEN, T. </author> <title> Virtual intstruments in virtual rooms a real-time binaural room simulation environment for physical models of musical instruments. </title> <booktitle> In Proceedings of the International Computer Music Conference (ICMC '94) (September 1994). </booktitle>
Reference-contexts: In addition to multiplayer games, we expect that single player games will become increasingly rely on com-putationally intensive physical simulations for realism. For example, the use of physically based acoustics and music <ref> [2, 41, 72] </ref> in games may not be far off. Remote execution Our machine model includes a remote execution facility, which allows a procedure call to be executed on any host in the system. The purpose of our work is to decide which host is best for a given call.
Reference: [42] <author> HURST, H. E. </author> <title> Long-term storage capacity of reservoirs. </title> <journal> Transactions of the American Society of Civil Engineers 116 (1951), </journal> <volume> 770808. </volume>
Reference-contexts: What is important is that self-similarity can arise from a long-memory process. The idea of self-similarity and the statistic used to characterize it arose not in theory, but from the experimental physical sciences and engineering. Hurst <ref> [42] </ref> invented the notion and the statistic (now called the Hurst parameter) in order to characterize how the amount of water in reservoirs changes over time. He then applied it to summarize many other data series arising from natural processes.
Reference: [43] <author> JENSEN, E. D. </author> <title> A real-time manifesto. </title> <note> http://www.realtime-os.com, 1996. </note>
Reference-contexts: A soft real-time system is one where it is permissible for some tasks to miss their deadlines. What it means to miss a deadline depends on the system. A common approach is is to generalize a deadline into a utility function of the duration since the task arrival time <ref> [43] </ref>. The system then attempts to maximize the collective or individual utilities of tasks in the system. The functional form of a hard deadline in this kind of system is a unit step function.
Reference: [44] <author> KAPLAN, J. A., AND NELSON, M. L. </author> <title> A comparison of queueing, cluster, and distributed computing systems. </title> <type> Tech. Rep. NASA TM 109025 (Revision 1), </type> <institution> NASA Langley Research Center, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: All of the hosts were DEC Alpha machines and they form four groups: * PSC Hosts: 13 hosts of the PSC's Supercluster, including two front-end machines, four interactive machines, and eight batch machines scheduled by a DQS <ref> [44] </ref> variant. * Manchester testbed: eight machines in an experimental cluster in the CMCL. * Compute servers: two high performance large memory machines used by the CMCL group as com pute servers for simulations and the like. * Desktops: 15 desktop workstations owned by members of the CMCL. 7.2 Overview of
Reference: [45] <author> KUROSE, J. </author> <title> Open issues and challenges in providing quality of service guarantees in high speed networks. </title> <journal> ACM Computer Communication Review 23, </journal> <month> 1 (January </month> <year> 1993), </year> <month> 615. </month>
Reference-contexts: In this sense, our work can be seen as a QoS service for a specific class of applications. In the networking community, QoS has meant providing deterministic and statistical guarantees of the bandwidth and latency of connections for media applications <ref> [29, 45] </ref>. Tenet [30], RSVP [13] and the ATM CBR and VBR service classes are examples of network QoS systems. Although we make no assumptions about the network, one could imagine using such mechanisms to simplify the dynamic mapping problem by making the communication costs known a priori.
Reference: [46] <author> LELAND, W. E., AND OTT, T. J. </author> <title> Load-balancing heuristics and process behavior. </title> <booktitle> In Proceedings of Performance and ACM SIGMETRICS (1986), </booktitle> <volume> vol. 14, </volume> <pages> pp. 5469. 38 </pages>
Reference-contexts: Early work in operating system-centric dynamic load balancing assumed simple, analytically tractable distributions for job length and other properties. Under these assumptions, simple heuristics and initial placement were found to be adequate [26, 25]. However, measurement studies <ref> [46] </ref> have cast doubt on these assumptions, and more recent work [37] argues strongly for process migration.
Reference: [47] <author> LELAND, W. E., TAQQU, M. S., WILLINGER, W., AND WILSON, D. V. </author> <title> On the self-similar nature of ethernet traffic. </title> <booktitle> In Proceedings of ACM SIGCOMM '93 (September 1993). </booktitle>
Reference-contexts: In particular, load appears to spend much of its time in a small number 12 of well differentiated states, and the manner in which it switches between states seems to be qualitatively simple. Other researchers have found some of these properties in network measurements <ref> [47, 77, 32] </ref>. We begin by describing our measurement methodology. <p> These stochastic processes model the sort of the mechanisms that give rise to self-similar signals. We shall avoid a mathematical treatment here, but interested readers may want to consult <ref> [47] </ref> 13 or [55] for a treatment in the context of networking or [7] for its connection to fractal geometry. What is important is that self-similarity can arise from a long-memory process.
Reference: [48] <author> LINDBLAD, C. J., WETHERALL, D. J., AND TENNENHOUSE, D. L. </author> <title> The VuSystem: A programming system for visual processing of digital video. </title> <booktitle> In Proceedings of the ACM Multimedia 94 (October 1994), ACM. </booktitle>
Reference-contexts: For example, medical imaging systems [62], involve acquiring, processing, storing, and making medical images easily available to physicians no matter where they are. Next generation stream-oriented systems like the VuSystem <ref> [48] </ref> filter the streams in computationally intensive ways, such as extracting titling text from video streams. Image editing programs such as Photoshop [1] were also ripe for distributed systems because of the increasingly huge size of photographic images [18]. Games are becoming increasingly interesting applications for distributed systems.
Reference: [49] <author> LIU, C. L., AND LAYLAND, J. W. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM 20, </journal> <month> 1 (January </month> <year> 1973), </year> <month> 4661. </month>
Reference-contexts: These systems are necessary for some applications, but are very difficult to build, place many constraints on the hardware, and typically require knowledge of all tasks at design time. The rate-monotonic scheduling and earliest deadline first scheduling algorithms <ref> [49] </ref> can be used to produce feasible schedules for fixed sets of tasks with known characteristics. Distributed hard real-time systems have been built (eg, MARS [67]), but these tend to rely on specialized hardware.
Reference: [50] <author> MALCEVIC, I. </author> <title> Large-scale unstructured mesh shape optimization on parallel computers. </title> <type> Master's thesis, </type> <institution> School of Civil and Environmental Engineering, </institution> <address> Pittsburgh, PA, </address> <year> 1997. </year>
Reference-contexts: As an alternative to sound, the user can view the impulse response functions directly, or can view the frequency response characteristics of the room computed from them. In this mode, the acoustic room modeling application shares many characteristics with the design optimization applications (for example, shape optimization <ref> [50] </ref>) currently being discussed in the Quake project [5, 4]. In both acoustic room modeling and design optimization, the user repeatedly adjusts the model parameters (furniture position and composition; soil and rock composition), simulates the physical system, and views the results.
Reference: [51] <author> MEHRA, P. </author> <title> Automated Learning of Load-Balancing Strategies for a Distributed Computer System. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: Our applications have aperiodically arriving activation trees. In [68], the authors present location policies that adapt to system load to avoid instability. Mehra and Wah [52] use comparator neural networks to predict current workload indices on remote hosts using outdated information about resource utilization. Mehra's thesis <ref> [51] </ref> describes a whole load balancing system based on automated strategy learning using comparator neural networks. We have also found some success with a neural networks approach. Indeed, it is interesting to note that machine learning [53] approaches are also finding success in related scheduling problems.
Reference: [52] <author> MEHRA, P., AND WAH, B. W. </author> <title> Automated learning of workload measures for load balancing on a distributed system. </title> <booktitle> In Proceedings of IPPS '93 (August 1993), </booktitle> <publisher> CRC Press, </publisher> <pages> pp. </pages> <month> III263III270. </month>
Reference-contexts: Our applications have aperiodically arriving activation trees. In [68], the authors present location policies that adapt to system load to avoid instability. Mehra and Wah <ref> [52] </ref> use comparator neural networks to predict current workload indices on remote hosts using outdated information about resource utilization. Mehra's thesis [51] describes a whole load balancing system based on automated strategy learning using comparator neural networks. We have also found some success with a neural networks approach.
Reference: [53] <author> MITCHELL, T. M. </author> <title> Machine Learning. </title> <publisher> McGraw-Hill, </publisher> <year> 1997. </year>
Reference-contexts: The idea is to encourage exploration and risk taking, but to react quickly and decisively to failure. The aging process discourages complacency. The NeuralNet (W) algorithm consists of a multilayer feed-forward neural network <ref> [53] </ref> where each host contributes W inputs, the durations of the last W executions on that host. For N hosts, the intermediate layer has N W=2 nodes and the output layer has N nodes. <p> Mehra's thesis [51] describes a whole load balancing system based on automated strategy learning using comparator neural networks. We have also found some success with a neural networks approach. Indeed, it is interesting to note that machine learning <ref> [53] </ref> approaches are also finding success in related scheduling problems. For example, genetic algorithms have been successful in branch prediction [27] and scheduling loop level parallelism in multiprocessors [79].
Reference: [54] <author> MOON, F. C. </author> <title> Chaotic and Fractal Dynamics: An Introduction for Applied Scientists and Engineers. </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Intuitively, the fewer the number of states the system has and the simpler its state transitions, the easier it is to predict. In chaotic dynamics, a basic tool is a plot of the trajectory of the system through its phase space <ref> [54] </ref>. The dimensions of a phase space are the values in the system that change over time. <p> The series h (l i ; l i+1 )i forms the trajectory through the space. This technique is known as the pseudo-phase space method <ref> [54] </ref>. Phase space plots for two load traces are given in Figure 7. Another way of looking at these plots is as to how well the load at time t predicts the load at time t + 1.
Reference: [55] <author> MORIN, P. R. </author> <title> The impact of self-similarity on network performance analysis. </title> <type> Tech. Rep. </type> <institution> Computer Science 95.495, Carleton University, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: These stochastic processes model the sort of the mechanisms that give rise to self-similar signals. We shall avoid a mathematical treatment here, but interested readers may want to consult [47] 13 or <ref> [55] </ref> for a treatment in the context of networking or [7] for its connection to fractal geometry. What is important is that self-similarity can arise from a long-memory process.
Reference: [56] <author> NAHRSTEDT, K., AND SMITH, J. M. </author> <title> An application-driven approach to networked multimedia systems. </title> <booktitle> In Proceedings of the 18th Annual Conference on Local Area Computer Networks (1993), IEEE, </booktitle> <pages> pp. 361368. </pages>
Reference-contexts: Tele-operation is related to computational, except that the remote physical simulation is replaced with an actual physical system. Tele-operation systems such as the one discussed in <ref> [56] </ref>, involve operating robots by remote control over conventional networks. While most current distributed multimedia systems involve communicating and synchronizing different audio and video streams, manipulating media on a distributed system in computationally significant ways is becoming increasingly important.
Reference: [57] <author> NOBLE, B. D., SATYANARAYANAN, M., NARAYANAN, D., TILTON, J. E., FLINN, J., AND WALKER, K. R. </author> <title> Agile application-aware adaptation for mobility. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles (1997). To Appear. </booktitle>
Reference-contexts: In our work, the bounds placed on the execution time of an activation tree could be seen as a QoS specification. In mobile computing the QoS challenge is to detect changing wireless network conditions quickly and adapt to them gracefully. For example, the Odyssey system <ref> [57] </ref> provides the application with typed data streams (eg, video) and switches between different quality levels (data rates) as it detects changing available network bandwidth. When quality strays outside of the range that the application registered initially, an upcall is made to the application, which decides the course of action.
Reference: [58] <author> OBJECT MANAGEMENT GROUP. </author> <title> The common object request broker: Architecture and specification. </title> <type> Tech. Rep. Version 2.0, </type> <institution> Object Management Group, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA <ref> [76, 58, 69] </ref>, DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [59] <institution> OBJECT MANAGEMENT GROUP. </institution> <note> Realtime corba: A white paper. http://www.omg.org, December 1996. In Progess. </note>
Reference-contexts: This is the approach taken in [78] and in proposals to the Real-time CORBA standardization effort <ref> [59, 20] </ref>. Another approach is to implement resource schedulers that provide reservation mechanisms, such as in SONIC [61]. In contrast, we make no attempt to control the system in order to meet our goals.
Reference: [60] <author> ORFALI, R., HARKEY, D., AND EDWARDS, J. </author> <title> The Essential Distributed Objects Survival Guide. </title> <publisher> John Wiley and Sons, Inc., </publisher> <address> New York, New York, </address> <year> 1996. </year>
Reference-contexts: Examples of remote execution facilities include remote procedure call systems, distributed shared memory mechanisms, and distributed object systems. Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems <ref> [60, 16] </ref>, such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [61] <author> POLZE, A., WERNER, M., AND FOHLER, G. </author> <title> Predictable network computing. </title> <type> Tech. rep., </type> <institution> Humboldt University of Berlin, </institution> <year> 1996. </year>
Reference-contexts: This is the approach taken in [78] and in proposals to the Real-time CORBA standardization effort [59, 20]. Another approach is to implement resource schedulers that provide reservation mechanisms, such as in SONIC <ref> [61] </ref>. In contrast, we make no attempt to control the system in order to meet our goals. Rather, we monitor and predict the system in order to adapt the application's behavior (the mapping of activation tree nodes) to the system and meet our bounds.
Reference: [62] <author> PYARALI, I., HARRISON, T. H., AND SCHMIDT, D. C. </author> <title> Design and performance of an object-oriented framework for high-speed electronic medical imaging. </title> <journal> Usenix Computing Systems Journal 9, </journal> <note> 3 (November/December 1996). earlier version appeared in the Usenix COOTS Conference, </note> <month> June, </month> <year> 1996. </year>
Reference-contexts: While most current distributed multimedia systems involve communicating and synchronizing different audio and video streams, manipulating media on a distributed system in computationally significant ways is becoming increasingly important. For example, medical imaging systems <ref> [62] </ref>, involve acquiring, processing, storing, and making medical images easily available to physicians no matter where they are. Next generation stream-oriented systems like the VuSystem [48] filter the streams in computationally intensive ways, such as extracting titling text from video streams.
Reference: [63] <author> RANTZAU, D., LANG, U., LANG, R., NEBEL, H., WIERSE, A., AND RUEHLE, R. </author> <title> Collaborative and interactive visualization in a distributed high performance software environment. </title> <booktitle> In Proceedings of the International Workshop on High Performance Computing for Computer Graphics and Visualization (1995), </booktitle> <pages> pp. </pages> <year> 207216. </year>
Reference-contexts: For example, the CAVE project [22] involves connecting immersive virtual environment simulators to remote physical simulations. CAVE has also proven to be a good environment for scientific and engineering collaboration <ref> [63] </ref>. Cumulus [33] is a library and run-time system for adding adding visualization and computational steering to simulations based on iterative operations on dense matrices. Tele-operation is related to computational, except that the remote physical simulation is replaced with an actual physical system.
Reference: [64] <author> REINHARDT, S., LARUS, J., AND WOOD, D. Tempest and typhoon: </author> <title> User-level shared memory. </title> <booktitle> In Proceedings of ISCA '94 (April 1994), ACM, </booktitle> <pages> pp. 325 336. </pages>
Reference-contexts: Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures. Distributed shared memory systems such as Tempest <ref> [64] </ref>, Shasta [66], and ThreadMarks [23] provide the appearance of a global address space shared by some number of private memory hosts. This is combined with a multithreading model where threads that may be assigned to different hosts communicate via shared variables.
Reference: [65] <author> RINARD, M., SCALES, D., AND LAM, M. </author> <title> Jade: A high-level machine-independent language for parallel programming. </title> <booktitle> IEEE Computer 26, </booktitle> <month> 6 (June </month> <year> 1993), </year> <month> 2838. </month>
Reference-contexts: The system described in [70] uses a global approach where one centralized agent makes load balancing decisions based on execution times reported by all of the hosts. Jade <ref> [65] </ref> load balances unfolding task parallel computations by dynamically mapping task graph nodes to hosts to minimize communication and overall execution time. In contrast, our work dynamically maps activation tree nodes that are executed sequentially.
Reference: [66] <author> SCALES, D. J., GHARACHORLOO, K., AND THEKKATH, C. A. </author> <title> Shasta: A low overhead, software-only approach for supporting fine-grain shared memory. </title> <booktitle> In Proceedings of the Seventh International Conference on Architectural Support for Programming Languages and Operating Systems (October 1996). </booktitle>
Reference-contexts: Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures. Distributed shared memory systems such as Tempest [64], Shasta <ref> [66] </ref>, and ThreadMarks [23] provide the appearance of a global address space shared by some number of private memory hosts. This is combined with a multithreading model where threads that may be assigned to different hosts communicate via shared variables.
Reference: [67] <author> SCHWABL, W., REISINGER, J., AND GRUENSTEIDL, G. </author> <title> A survey of MARS. </title> <type> Tech. Rep. 16/89, </type> <institution> Technische Universitaet Wien, </institution> <month> October </month> <year> 1989. </year> <month> 39 </month>
Reference-contexts: The rate-monotonic scheduling and earliest deadline first scheduling algorithms [49] can be used to produce feasible schedules for fixed sets of tasks with known characteristics. Distributed hard real-time systems have been built (eg, MARS <ref> [67] </ref>), but these tend to rely on specialized hardware. In contrast, our work offers only a best effort service, but the tasks and deadlines are discovered only as the program is executed. A soft real-time system is one where it is permissible for some tasks to miss their deadlines.
Reference: [68] <author> SHIVARATRI, N. G., AND KRUEGER, P. </author> <title> Two adaptive location policies for global scheduling algorithms. </title> <booktitle> In Proceedings of ICDCS '90 (May 1990), </booktitle> <pages> pp. 502509. </pages>
Reference-contexts: Our applications have aperiodically arriving activation trees. In <ref> [68] </ref>, the authors present location policies that adapt to system load to avoid instability. Mehra and Wah [52] use comparator neural networks to predict current workload indices on remote hosts using outdated information about resource utilization.
Reference: [69] <author> SIEGAL, J. </author> <title> CORBA Fundamentals and Programming. </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA <ref> [76, 58, 69] </ref>, DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [70] <author> SIEGELL, B., AND STEENKISTE, P. </author> <title> Automatic generation of parallel programs with dynamic load balancing. </title> <booktitle> In Proceedings of the Third International Symposium on High-Performance Distributed Computing (August 1994). </booktitle>
Reference-contexts: For example, in data parallel applications built in DOME [3], neighboring hosts periodically exchange measurements of execution time and redistribute their data accordingly. The system described in <ref> [70] </ref> uses a global approach where one centralized agent makes load balancing decisions based on execution times reported by all of the hosts. Jade [65] load balances unfolding task parallel computations by dynamically mapping task graph nodes to hosts to minimize communication and overall execution time.
Reference: [71] <author> SMITH, G. D. </author> <title> Numerical Solution of Partial Differential Equations: Finite Difference Methods. </title> <publisher> Clarendon Press, </publisher> <year> 1985. </year>
Reference-contexts: By doing this for each loudspeaker and summing the resulting room-filtered signals, we simulate what the listener would hear given the room configuration. 2 The impulse responses are computed by simulating the wave equation using a finite difference method <ref> [71] </ref>. In steady state, periodic convolution and summation occurs to compute the sound output. When the user changes the room configuration by moving a loudspeaker, wall, or himself, the (expensive) computation of the impulse responses is repeated.
Reference: [72] <author> SMITH, J. O. </author> <title> Physical modeling synthesis update. Computer Music Journal 20, </title> <booktitle> 2 (Summer 1996), </booktitle> <pages> 4456. </pages>
Reference-contexts: In addition to multiplayer games, we expect that single player games will become increasingly rely on com-putationally intensive physical simulations for realism. For example, the use of physically based acoustics and music <ref> [2, 41, 72] </ref> in games may not be far off. Remote execution Our machine model includes a remote execution facility, which allows a procedure call to be executed on any host in the system. The purpose of our work is to decide which host is best for a given call.
Reference: [73] <author> STEENKISTE, P., FISHER, A., AND ZHANG, H. Darwin: </author> <title> Resource management for application-aware networks. </title> <type> Tech. rep., </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1997. </year> <note> Draft overview paper (http://www.cs.cmu.edu/afs/cs/usr/prs/WWW/darwin.ps). </note>
Reference-contexts: Another possibility is to use the Remos system [17] which is currently being developed by the Remulac group or by in-switch monitoring using the active networking facilities being developed by the Darwin group <ref> [73] </ref>. While these approaches would allow me to collect data on more sophisticated ATM and switched Ethernet networks, it is unclear when they will be available and in what form. Another issue is the granularity at which measurements will be able to be done in these systems.
Reference: [74] <author> SUN MICROSYSTEMS, INC. </author> <title> Java remote method invocation specification. </title> <note> http://java.sun.com/products/jdk/1.1/docs/guide/rmi/spec/rmiTOC.doc.html, 1997. </note>
Reference-contexts: Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM [14] and Java RMI <ref> [74] </ref>, extend the RPC abstraction to objects by allowing the association of state with a group of procedures. Distributed shared memory systems such as Tempest [64], Shasta [66], and ThreadMarks [23] provide the appearance of a global address space shared by some number of private memory hosts.
Reference: [75] <author> THE OPEN GROUP. </author> <title> DCE 1.2.2: Introduction to OSF DCE. The Open Group, </title> <month> September </month> <year> 1997. </year> <note> http://www.opengroup.org/pubs/catalog/f201.htm. </note>
Reference-contexts: The purpose of our work is to decide which host is best for a given call. Examples of remote execution facilities include remote procedure call systems, distributed shared memory mechanisms, and distributed object systems. Remote procedure call systems [12, 9], such as the one specified by the DCE <ref> [75] </ref> standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA [76, 58, 69], DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [76] <author> VINOSKI, S. </author> <title> Distributed object computing with CORBA. </title> <note> C++ Report (July/August 1993). </note>
Reference-contexts: Remote procedure call systems [12, 9], such as the one specified by the DCE [75] standard, provide a procedure call-like abstraction over network communication with a remote server. Distributed object systems [60, 16], such as CORBA <ref> [76, 58, 69] </ref>, DCOM [14] and Java RMI [74], extend the RPC abstraction to objects by allowing the association of state with a group of procedures.
Reference: [77] <author> WILLINGER, W., MURAD S, T., SHERMAN, R., AND WILSON, D. V. </author> <title> Self-similarity through high-variability: Statistical analysis of ethernet lan traffic at the source level. </title> <booktitle> In Proceedings of ACM SIGCOMM '95 (1995), </booktitle> <pages> pp. 100113. </pages>
Reference-contexts: In particular, load appears to spend much of its time in a small number 12 of well differentiated states, and the manner in which it switches between states seems to be qualitatively simple. Other researchers have found some of these properties in network measurements <ref> [47, 77, 32] </ref>. We begin by describing our measurement methodology.
Reference: [78] <author> WOLFE, V. F., BLACK, J. K., THURAISINGHAM, B., AND KRUPP, P. </author> <title> Real-time method invocations in distributed environments. </title> <type> Tech. Rep. 95-244, </type> <institution> Department of Computer Science, University of Rhode Island, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: One approach is to create a notion of a global priority, require that all resources in the system be scheduled by fixed priority schedulers that respect the fixed priority, and require that all communication delays be bounded. This is the approach taken in <ref> [78] </ref> and in proposals to the Real-time CORBA standardization effort [59, 20]. Another approach is to implement resource schedulers that provide reservation mechanisms, such as in SONIC [61]. In contrast, we make no attempt to control the system in order to meet our goals.
Reference: [79] <author> YUE, K. K., AND LILJA, D. J. </author> <title> Designing multiprocessor scheduling algorithms using a distributed genetic algorithm system. </title> <type> Tech. Rep. </type> <institution> HPPC-96-03, University of Minnesota High-Performance Parallel Computing Research Group, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: We have also found some success with a neural networks approach. Indeed, it is interesting to note that machine learning [53] approaches are also finding success in related scheduling problems. For example, genetic algorithms have been successful in branch prediction [27] and scheduling loop level parallelism in multiprocessors <ref> [79] </ref>. Distributed soft real-time systems A real-time system allows a programmer to specify a deadline for the execution of a one-time or periodic task. The bounds in our dynamic mapping problem correspond to these deadlines.
Reference: [80] <author> ZINKY, J. A., BAKKEN, D. E., AND SCHANTZ, R. </author> <title> Overview of quality of service for distributed objects. </title> <booktitle> In Proceedings of the IEEE Dual Use Technologies Conference (May 1995). </booktitle>
Reference-contexts: Recently, interest has focused on how to expose network and host QoS features to the application programmer in an understandable fashion. For example, work at BBN <ref> [81, 80] </ref> is considering how to express QoS requirements and guarantees for distributed objects in a collaboration system and similar applications.
Reference: [81] <author> ZINKY, J. A., BAKKEN, D. E., AND SCHANTZ, R. E. </author> <title> Architectural support for quality of service for CORBA objects. </title> <note> Theory and Practice of Object Systems (January 1997). 40 </note>
Reference-contexts: Recently, interest has focused on how to expose network and host QoS features to the application programmer in an understandable fashion. For example, work at BBN <ref> [81, 80] </ref> is considering how to express QoS requirements and guarantees for distributed objects in a collaboration system and similar applications.
References-found: 81

