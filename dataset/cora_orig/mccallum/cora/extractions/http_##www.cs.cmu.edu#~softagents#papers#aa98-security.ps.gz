URL: http://www.cs.cmu.edu/~softagents/papers/aa98-security.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications.html
Root-URL: 
Email: qihe@cs.cmu.edu, katia@cs.cmu.edu  finin@cs.umbc.edu  
Title: Personal Security Agent: KQML-Based PKI  
Author: Qi He, Katia P. Sycara Timothy W. Finin 
Keyword: Area: Software Agents Keywords: security, agent architecture, PKI (Public Key Infrastructure), KQML, authen tication, interoperability.  
Date: October 1, 1997  
Address: Pittsburgh, PA. 15213  Baltimore, MD 21250  
Affiliation: The Robotics Institute Carnegie Mellon University  Dept of Computer Science and Electrical Engineering University of Maryland, Baltimore County  
Abstract: Certificate management infrastructure, a.k.a. PKI (Public Key Infrastructure), which issues and provides access to public key certificates to preserve the integrity of a public key, is fundamental for electronic commerce and business across the Internet. To satisfy the requirements of various applications, PKI should demonstrate customization to user needs, interoperability and flexibility in its implementations so it can satisfy the needs of various applications. Particularly, due to the popularity of software agent-based applications over the Internet, security will be urgently needed by the "agent society". We propose to implement the authority of authentication verification service systems as personal autonomous software agents, called security agents. In this paper, we present two aspects of KQML-based PKI: 1. the security agent concept and its functional modules; 2. an extension of KQML, which is needed for public key management and secure communications among security agents and application agents. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Timothy Polk, Donna F. Dodson, </author> <title> etc, Public Key Infrastructure: From Theory to Implementation, </title> <note> http://csrc.ncsl.nist.gov/pki/panel/overview.html, NIST </note>
Reference: [2] <author> Tim Finin, Yannis Labrou, and James Mayfield, </author> <title> KQML as an agent communication language, </title> <editor> in Jeff Bradshaw (Ed.), </editor> <booktitle> "Software Agents", </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge (1997). </address>
Reference-contexts: Such performatives and parameters are not currently available in the KQML specification document <ref> [2] </ref> or in KQML implementations. 3 2 Security Agent Existing PKI implementations began with specifying their certificate formats and the name spaces through a pre-defined hierarchies, such as the DNS name hierarchy. This method entails inflexible implementation. <p> reduce the overhead of communication mitigate the bottleneck in authentication service system, and simplify some secure communication protocols. 3 Extensions to KQML KQML (Knowledge Query and Manipulation Language), is a communication language and protocol which enables autonomous and asynchronous agents to share their knowledge and work towards cooperative problem solving <ref> [2] </ref>. However, agent security issues were not taken into consideration in the original version of KQML specification. Some changes were made for secure communications based on KQML [14]. But it is still incomplete, especially since it does not satisfy the requirements of public key certification management.
Reference: [3] <author> URL, </author> <title> Public-Key Infrastructure (X.509) (pkix), </title> <address> http://www.ietf.org/html.charters/pkix-charter.html </address>
Reference: [4] <institution> URL, RSA Laboratories, </institution> <note> PKCS (Public Key Crypto System) http://www.rsa.com/rsalabs/pubs/PKCS/ </note>
Reference: [5] <author> Philip R. Zimmermann, </author> <title> The Official PGP User's Guide MIT Press 1995. </title>
Reference-contexts: The format of the certificate depends on the certificate name included in the performative as the value of parameter "language". For example, if the name is SPKI, then the format will be: <ref> [5] </ref> ISSUER : a principal or a single top-level name in a principal's name space. The principal is identified as a public key or the hash of that key; the corresponding private key signs the certificate.
Reference: [6] <author> Carl M. Ellison, Bill Frantz, Butler Lampson, Ron Rivest, Brian M. Thomas, Tatu Ylonen, </author> <title> Simple Public Key Certificate, </title> <address> http://www.clark.net/pub/cme/spki.txt </address>
Reference-contexts: This system is the so called public key certificate management infrastructure, or PKI (Public Key Infrastructure)[1]. However, several PKI implementations are currently evolving (such as IETF's PKIx (Public-Key Infrastructure,X.509)[3], PKCS (Public Key Crypto System)[4], PGP (Pretty Good Privacy)[5], SPKI (Simple Public Key Infrastructure) <ref> [6] </ref>, SDSI (Simple Distributed Security Infrastructure)[7], etc.), and there is no single PKI implementation nor even a single agreed-upon standard for setting up a PKI.
Reference: [7] <author> Ronald L. Rivest, Butler Lampson, </author> <title> SDSI A Simple Distributed Security Infrastructure, </title> <address> http://theory.lcs.mit.edu/ cis/sdsi.html </address>
Reference-contexts: With the increasing use of agents for different applications, increasing agent decentralization and need for agent communication and interoperation, such flexibility is essential. This has been recognized in recent security literature <ref> [7] </ref>. This flexibility in PKI implementation requires that multiple types of certificates, definition of name space, and management protocols tailored for various applications must be developed.
Reference: [8] <institution> URL, </institution> <note> International Telcommunication Union, X.509, http://www.itu.int/itudoc/itu-t/rec/x/x500up/ </note>
Reference-contexts: Even those implementations that are based on the same standard X.509 recommendation <ref> [8] </ref> are still incompatible with each other because of independent interpretations in their actual implementations [9][10]. So, overcoming this incompatibility and enabling wide spread authentication verification offered by the PKI is a crucial issue. It is also one of the motivations of our work.
Reference: [9] <author> E. </author> <title> Gerck,Overview of Certification Systems: X.509, </title> <address> CA, </address> <note> PGP and SKIP, http://novaware.cps.softex.br/mcg/cert.html. </note>
Reference: [10] <author> Peter Gutmann, </author> <title> X.509 Style Guide, </title> <address> http://www.cs.auckland.ac.nz/ pgut001/x509guide.txt </address>
Reference: [11] <author> Bruce Schneier,Applied Cryptography, </author> <title> Second Edition, </title> <publisher> John Wiley and Sons, Inc., </publisher> <year> 1996. </year>
Reference-contexts: but in other situations, this information is not needed and it shouldn't be included in the certificate for the sake of security and privacy | this is a basic principle of security: "It should not be possible to do more or learn more than what is specified in the protocol <ref> [11] </ref> 1 . With the increasing use of agents for different applications, increasing agent decentralization and need for agent communication and interoperation, such flexibility is essential. This has been recognized in recent security literature [7].
Reference: [12] <author> Matt Blaze, Joan Feigenbaum, Jack Lacy, </author> <title> Decentralized Trust Management, </title> <booktitle> In Pro--ceedings 1996 IEEE Symposium on Security and Privacy, </booktitle> <month> May, </month> <year> 1996. </year>
Reference-contexts: In this context, our research effort at developing a way to flexibly implement decentralized PKI is also a 1 In fact, only the public key and a signature are the essential parameters that must always be present in a certificate. 2 basic and critical step for decentralization of trust management <ref> [12] </ref>. Another direct motivation of our research is that the development of the Internet is changing the traditional paradigm of software, which is monolithic and passively operated by humans, to the new agent-based technology which works cooperatively and autonomously.
Reference: [13] <author> Sycara, K., Decker, K, Pannu, A., Williamson, M and Zeng, D., </author> <title> Distributed Intelligent Agents. </title> <journal> IEEE Expert, </journal> <volume> pp.36-45, </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: The security agent architecture is based on the agent architecture we have developed in the RETSINA multiagent infrastructure <ref> [13] </ref> 3 . Every RETSINA agent has the following modules: communicator, planner, scheduler, and execution monitor. We give a brief overview of the general processing of a message by a RETSINA agent. The modules of a RETSINA agent are implemented as Java threads and operate asynchronously.
Reference: [14] <author> Tim Finin, James Mayfield, Chelliah Thirunavukkarasu, </author> <title> Secret Agents A Security Architecture for the KAML Agent Communication Language, </title> <booktitle> CIKM'95 Intelligent Information Agents Workshop, </booktitle> <address> Baltimore, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The new generation of software, agents, will be delegated by humans to automatically perform tasks, including digitally conducting transactions across the Internet. Security issues are identified as critical for the success of agent-based Internet programming <ref> [14] </ref>. Agent-oriented authentication verification services must be supplied for most agent-based applications. In fact, agents as primarily human-delegated software, will be an ideal application domain of modern cryptography in the very near future. <p> Agent-oriented authentication verification services must be supplied for most agent-based applications. In fact, agents as primarily human-delegated software, will be an ideal application domain of modern cryptography in the very near future. Treatment of security in the agent literature has been very scant. <ref> [17, 14] </ref> discuss some issues from the point of view of cryptography. In particular, [17] discussed some useful principles, which, although well-known in the security community, could be useful to agent developers. <p> For example, an agent developer could understand that any design which depends on secrecy of the design is guaranteed to fail and that the public cryptographic algorithms are the right approach for agent security. In <ref> [14] </ref> language for agents to support the secret communication was discussed based on cryptography techniques. However, like the applications of public key cryptosystem in human society, without a scalable authentication service, all of security schemes and protocols designed for open agent society cannot make any sense. <p> Security agents, like other application agents, communicate with each other with KQML. However, the current version of KQML does not support many security operations needed in public key management, although some changes were made for agent security in <ref> [14] </ref>. We propose a security extension of KQML in this paper and will discuss it in next section, section 3. <p> However, agent security issues were not taken into consideration in the original version of KQML specification. Some changes were made for secure communications based on KQML <ref> [14] </ref>. But it is still incomplete, especially since it does not satisfy the requirements of public key certification management. In order to implement KQML-based PKI, we propose a KQML ontology, several new parameters, and new performatives as follows.
Reference: [15] <author> Darrell Kindred, Jeannette M. Wing, </author> <title> Fast, Automatic Checking of Security Protocols, </title> <booktitle> Proc. of the USENIX 1996 Workshop on Electronic Commerce, </booktitle> <month> November </month> <year> 1996. </year>
Reference: [16] <author> Nevin Heintze, Doug Tygar, Jeannette Wing, and Hao-Chi Wong, </author> <title> Model Checking Electronic Commerce Protocols, </title> <booktitle> Proc. of the USENIX 1996 Workshop on Electronic Commerce, </booktitle> <month> November </month> <year> 1996. </year>
Reference: [17] <author> Leonard N. Foner, </author> <title> A Security Architecture for Multi-Agent Matchmaking, </title> <booktitle> Proceeding of Second International Conference on Multi-Agent System, </booktitle> <editor> Mario Tokoro, </editor> <year> 1996 </year> <month> 14 </month>
Reference-contexts: Agent-oriented authentication verification services must be supplied for most agent-based applications. In fact, agents as primarily human-delegated software, will be an ideal application domain of modern cryptography in the very near future. Treatment of security in the agent literature has been very scant. <ref> [17, 14] </ref> discuss some issues from the point of view of cryptography. In particular, [17] discussed some useful principles, which, although well-known in the security community, could be useful to agent developers. <p> In fact, agents as primarily human-delegated software, will be an ideal application domain of modern cryptography in the very near future. Treatment of security in the agent literature has been very scant. [17, 14] discuss some issues from the point of view of cryptography. In particular, <ref> [17] </ref> discussed some useful principles, which, although well-known in the security community, could be useful to agent developers.
References-found: 17

