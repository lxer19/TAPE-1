URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR432.ps.Z
Refering-URL: http://www.cs.rice.edu/~kfisler/publications.html
Root-URL: 
Email: kfisler@cs.indiana.edu  
Title: A Canonical Form for Circuit Diagrams  
Author: Kathi Fisler 
Keyword: based upon finite automata minimization and Shannon's canonical form for boolean expressions.  
Date: May 1, 1995  
Address: Lindley Hall 215  Bloomington, IN 47405  
Affiliation: Department of Computer Science  Indiana University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [Bry86] <author> Randal E. Bryant. </author> <title> Graph based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C35(8):677-691, </volume> <year> 1986. </year>
Reference-contexts: Each of these forms concentrates on the transition structure of a system only; they do not address the canonicalization of the boolean expressions that represent the state transition functions. Canonical forms for boolean expressions such as Shannon's canonical form [Sha38] and binary decision diagrams <ref> [Bry86] </ref> are well known, but do not provide any means for handling sequential components. Our notion of behavioral equivalence, defined with respect to single, fixed start states, is more restrictive than some other classifications of behavioral equivalence such as that proposed in [SP94].
Reference: [Fis94] <author> Kathi Fisler. </author> <title> A logical formalization of hardware design diagrams. </title> <type> Technical Report TR416, </type> <institution> Indiana University, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: 1 Introduction This paper presents a canonical form for circuit diagrams with a designated start state. It builds upon our previous work in the logic of hardware diagrams <ref> [Fis94] </ref>. This canonical form will be used to prove a set of inference rules on circuit diagrams logically complete in a companion paper. <p> present interest is in studying the formal use of diagrams in hardware reasoning; the use of a simpler definition allows us to focus more on the logical aspects of the research. 2 3 The Logic of Circuit Diagrams Much of the material in this section is provided for reference from <ref> [Fis94] </ref>. The original logic has been modified slightly in order to handle start states. In addition, we provide a few new definitions required by the proofs in this paper. <p> In the particular case of circuit diagrams, they have a natural homomorphism with physical devices as defined below. This will make the semantic definitions of this work seem rather trivial, but the semantics are more complicated when capturing other representations <ref> [Fis94] </ref>. 3.1 Physical Devices Our model of physical hardware is defined in two stages. First, we capture the structural aspects of a device along with its interface with the external environment. <p> Similarly, two concrete devices are isomorphic iff their respective abstract devices are isomorphic. We are interested in determining when two devices exhibit the same external behavior. This requires that we be able to operate our devices over time. We established in <ref> [Fis94] </ref> that given a concrete device and an assignment to its input ports, there exists a unique concrete device reflecting the new values on the delay element and interface output ports; this unique device will be said to follow from the original device.
Reference: [Gin62] <author> Seymour Ginsburg. </author> <title> An Introduction to Mathematical Machine Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1962. </year>
Reference-contexts: Several papers have addressed the problem of determining observational equivalence between sequential machines. Myhill-Nerode based minimization algorithms [HU79] yield canonical forms for deterministic finite automata; similar results exist for Moore machines and general sequential machines which encorporate Mealy outputs as well as Moore outputs <ref> [Gin62] </ref> [Moo56]. The spirit of the minimizations for each type of machine are analogous, though this work most closely follows that of [Gin62]. <p> algorithms [HU79] yield canonical forms for deterministic finite automata; similar results exist for Moore machines and general sequential machines which encorporate Mealy outputs as well as Moore outputs <ref> [Gin62] </ref> [Moo56]. The spirit of the minimizations for each type of machine are analogous, though this work most closely follows that of [Gin62]. Each of these forms concentrates on the transition structure of a system only; they do not address the canonicalization of the boolean expressions that represent the state transition functions.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: Our combinational logic canonicalizer is essentially the same as Shannon's canonicalizer for boolean expressions [Sha38], which imposes organization by using an ordering on the variables within the expression. Several papers have addressed the problem of determining observational equivalence between sequential machines. Myhill-Nerode based minimization algorithms <ref> [HU79] </ref> yield canonical forms for deterministic finite automata; similar results exist for Moore machines and general sequential machines which encorporate Mealy outputs as well as Moore outputs [Gin62] [Moo56]. The spirit of the minimizations for each type of machine are analogous, though this work most closely follows that of [Gin62].
Reference: [Moo56] <author> Edward F. Moore. </author> <title> Gedanken-experiments on sequential machines. </title> <editor> In Claude Shannon and John McCarthy, editors, </editor> <booktitle> Automata Studies, </booktitle> <pages> pages 129-153. </pages> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: Several papers have addressed the problem of determining observational equivalence between sequential machines. Myhill-Nerode based minimization algorithms [HU79] yield canonical forms for deterministic finite automata; similar results exist for Moore machines and general sequential machines which encorporate Mealy outputs as well as Moore outputs [Gin62] <ref> [Moo56] </ref>. The spirit of the minimizations for each type of machine are analogous, though this work most closely follows that of [Gin62].
Reference: [PW87] <author> Franklin P. Prosser and David E. </author> <title> Winkel. </title> <booktitle> The Art of Digital Design. Prentice-Hall, 2nd edition, </booktitle> <year> 1987. </year>
Reference-contexts: The key to remaining at the circuit diagram level is what we call the one-hot representation of a circuit diagram. There are many techniques for implementing state machines in physical hardware; two examples are the state-encoding method and the one-hot method <ref> [PW87] </ref>. In state-encoding, the states of the device are encoded in binary labels with length logarithmic base two in the number of states in the machine. State encoded designs are compact in the number of delay elements they require and are thus quite common.
Reference: [Sha38] <author> C. E. Shannon. </author> <title> A symbolic analysis of relay and switching circuits. </title> <journal> Transactions AIEE, </journal> <volume> 57 </volume> <pages> 713-723, </pages> <year> 1938. </year>
Reference-contexts: As a result, we need to impose some organization within the individual clauses in order to achieve isomorphism. Our combinational logic canonicalizer is essentially the same as Shannon's canonicalizer for boolean expressions <ref> [Sha38] </ref>, which imposes organization by using an ordering on the variables within the expression. Several papers have addressed the problem of determining observational equivalence between sequential machines. <p> Each of these forms concentrates on the transition structure of a system only; they do not address the canonicalization of the boolean expressions that represent the state transition functions. Canonical forms for boolean expressions such as Shannon's canonical form <ref> [Sha38] </ref> and binary decision diagrams [Bry86] are well known, but do not provide any means for handling sequential components. Our notion of behavioral equivalence, defined with respect to single, fixed start states, is more restrictive than some other classifications of behavioral equivalence such as that proposed in [SP94]. <p> Given that these rules introduce no changes in functionality, C 1 and C 2 are behaviorally equivalent. 4.3 Canonicalizing Boolean Logic Our combinational logic canonicalization procedure is a diagrammatic version of Shannon's canonical form <ref> [Sha38] </ref>. Figure 1 shows the valid canonical forms for expressions on a single variable, while 9 figure 2 shows the valid canonical forms for expressions on more than one variable. The remainder of this section presents our implementation of Shannon's form and proves it canonical with respect to the diagrams.
Reference: [SP94] <author> V. Singhal and C. Pixley. </author> <title> The verification problem for safe replaceability. </title> <editor> In D. Dill, editor, </editor> <booktitle> Proc. 6th International Conference on Computer Aided Verification, Springer-Verlag Lecture Notes in Computer Science vol. </booktitle> <volume> 818, </volume> <pages> pages 311-323, </pages> <month> June </month> <year> 1994. </year> <month> 20 </month>
Reference-contexts: Our notion of behavioral equivalence, defined with respect to single, fixed start states, is more restrictive than some other classifications of behavioral equivalence such as that proposed in <ref> [SP94] </ref>. We have chosen to use the simpler, more restrictive definition in order to simplify our current project.
References-found: 8

