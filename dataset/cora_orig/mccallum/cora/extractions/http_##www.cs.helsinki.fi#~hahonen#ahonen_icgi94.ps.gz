URL: http://www.cs.helsinki.fi/~hahonen/ahonen_icgi94.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~hahonen/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: fhahonen,mannilag@cs.helsinki.fi  E-mail: enikunen@domlang.fi  
Title: Forming grammars for structured documents: an application of grammatical inference  
Author: Helena Ahonen Heikki Mannila Erja Nikunen 
Address: P.O. Box 26 (Teollisuuskatu 23) FIN-00014 University of Helsinki, Finland  Sornaisten rantatie 25 FIN-00500 Helsinki, Finland  
Affiliation: Department of Computer Science University of Helsinki  Research Centre for Domestic Languages  
Abstract: We consider the problem of generating grammars for classes of structured documents | dictionaries, encyclopedias, user manuals, and so on | from examples. The examples consist of structures of individual documents, and they can be collected either by converting typographical tagging of documents prepared for printing into structural tags, or by using document recognition techniques. Our method forms first finite-state automata describing the examples completely. These automata are modified by considering certain context conditions; the modifications correspond to generalizing the underlying language. Finally, the automata are converted into regular expressions, and they are used to construct the grammar. In addition to automata, an alternative representation, characteristic k-grams, is introduced. Some interactive operations are also described that are necessary for generating a grammar for a large and complicated document. 
Abstract-found: 1
Intro-found: 1
Reference: [AFQ89] <author> J. Andre, R. Furuta, and V. Quint. </author> <title> By way of an introduction. Structured documents: </title> <editor> What and why? In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 1-6. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: The text body consists of a list of sections, every section consists of subsections or paragraphs, and so on. Other typical examples of structured documents are dictionaries, encyclopedias, user manuals, and annual reports. Recent surveys of the research concerning structured documents are <ref> [AFQ89, Qui89] </ref>. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) [ODA89, SGM86, Bro89, Gol90].
Reference: [Aho94] <author> Helena Ahonen. </author> <title> Generating grammars for structured documents using grammatical inference methods. </title> <type> PhD thesis, </type> <institution> University of Helsinki, Department of Computer Science, </institution> <year> 1994. </year> <note> in preparation. </note>
Reference-contexts: A k-gram of the form # k a, where a 2 , is called an initial k-gram. Respectively, a k-gram of the form u#, where u 2 k is called a final k-gram. Any (k; h)-contextual automaton can be converted into a set of characteristic k-grams <ref> [Aho94] </ref>. Hence, the set of k-grams can be used as an efficient representation alternative to automata. Generalizing a set of examples to a k-contextual language can be done simply by adding all substrings of length k + 1 to the set of k-grams.
Reference: [Ang82] <author> Dana Angluin. </author> <title> Inference of reversible languages. </title> <journal> Journal of the ACM, </journal> <volume> 29(3) </volume> <pages> 741-765, </pages> <year> 1982. </year>
Reference-contexts: This property states roughly that in the structure of the document what can follow a certain component is completely determined by the k preceding components at the same level. Steps 1 and 2 are based on the synthesis of finite automata presented in <ref> [Ang82, Mug90] </ref>, specifically (k; h)-contextuality is a modification of k-reversibility [Ang82] and k contextuality [Mug90]. 3. The resulting automata are transformed to regular expressions, which form the right-hand sides of the productions for the corresponding non terminals. Practically our setting differs from the usual theoretical grammatical inference problems. <p> Steps 1 and 2 are based on the synthesis of finite automata presented in [Ang82, Mug90], specifically (k; h)-contextuality is a modification of k-reversibility <ref> [Ang82] </ref> and k contextuality [Mug90]. 3. The resulting automata are transformed to regular expressions, which form the right-hand sides of the productions for the corresponding non terminals. Practically our setting differs from the usual theoretical grammatical inference problems. The alphabet is not known beforehand.
Reference: [AS83] <author> Dana Angluin and Carl H. Smith. </author> <title> Inductive inference: Theory and methods. </title> <journal> Computing Surveys, </journal> <volume> 15(3) </volume> <pages> 237-269, </pages> <year> 1983. </year>
Reference-contexts: Thus, one should be able to generalize the productions in some meaningful way. For the generalization, we formulate the problem as a grammatical inference problem <ref> [AS83] </ref>. The method we have developed proceeds as follows. 1. The example productions are transformed to a set of finite automata, one for each nonterminal. These automata accept exactly the right-hand sides of the example productions for the corresponding nonterminal. 2.
Reference: [Bro89] <author> Heather Brown. </author> <title> Standards for structured documents. </title> <journal> The Computer Journal, </journal> <volume> 32(6) </volume> <pages> 505-514, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Recent surveys of the research concerning structured documents are [AFQ89, Qui89]. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) <ref> [ODA89, SGM86, Bro89, Gol90] </ref>. The common way to describe the structure of a document is to use context-free grammars. It is typical to use regular expressions on the right-hand sides of the productions of the grammar.
Reference: [FX94] <author> Peter Fankhauser and Yi Xu. </author> <title> Markitup! An incremental approach to document structure recognition. Electronic Publishing Origination, Dissemination and Design, </title> <booktitle> 6(4) </booktitle> <pages> 447-456, </pages> <year> 1994. </year>
Reference-contexts: Due to these practical reasons our automatic inference method is augmented by some interactive operations that allow the user to influence the learning process (See Section 6). A related approach to the grammar generating problem is presented in <ref> [FX94] </ref>. While containing more developed environment for recognizing document structures it is not intended to be used with very large and complicated structures as our method is. The rest of this paper is organized as follows. Section 3 describes our method of generalizing the right-hand sides of productions.
Reference: [Gol90] <author> C. F. Goldfarb. </author> <title> The SGML Handbook. </title> <publisher> Oxford University Press, </publisher> <year> 1990. </year>
Reference-contexts: Recent surveys of the research concerning structured documents are [AFQ89, Qui89]. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) <ref> [ODA89, SGM86, Bro89, Gol90] </ref>. The common way to describe the structure of a document is to use context-free grammars. It is typical to use regular expressions on the right-hand sides of the productions of the grammar.
Reference: [HI94] <author> Tao Hu and Rolf Ingold. </author> <title> A mixed approach toward an efficient logical structure recognition from document images. Electronic Publishing Origination, Dissemination and Design, </title> <booktitle> 6(4) </booktitle> <pages> 457-468, </pages> <year> 1994. </year>
Reference-contexts: The entries are further modified by removing the text and the end tags, and simple productions are formed. Nested tags form productions of their own. If the documents do not have any typographical tagging, it may be possible to use some document recognition techniques <ref> [TYS94, HI94, SEM94, SZ86] </ref> that try to recognize the parts using, for instance, keywords, fonts, or the physical layout of the text.
Reference: [HU79] <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1979. </year>
Reference-contexts: Section 7 gives some experimental results. Finally, Section 8 contains some concluding remarks. 2 Basic definitions Our method uses finite automata to represent and manipulate the collection of examples. We assume that the reader is familiar with finite-state automata, context-free grammars, and regular expressions (see, e.g., <ref> [HU79] </ref> for details), and just give the basic definitions for reference. <p> To obtain a useful description of the structure of the document, we still have to produce a grammar from these. An automaton can be converted into a regular expression by using standard dynamic programming methods <ref> [HU79] </ref>. The expressions produced by the standard method are not always so short as they could be, and therefore they have to be simplified. The simplified regular expressions form the right-hand sides of the productions for the corresponding nonterminals.
Reference: [KLMN90] <author> Pekka Kilpelainen, Greger Linden, Heikki Mannila, and Erja Nikunen. </author> <title> A structured document database system. </title> <editor> In Richard Fu-ruta, editor, </editor> <booktitle> EP90 Proceedings of the International Conference on Electronic Publishing, Document Manipulation & Typography, The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 139-151. </pages> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: When the sample is going to be rather small, or the user is just designing a new document structure, maybe the best way is to use an interactive program. Such a program is implemented in connection with the structured text database system HST <ref> [KLMN90] </ref>. It lets the user paint a part of a text with a pointing device and give a name to that part. The productions are constructed automatically from this information. The marking with a pointing device is inappropriate when the text considered is large and has a complicated structure.
Reference: [Mug90] <author> Stephen Muggleton. </author> <title> Inductive Acquisition of Expert Knowledge. </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: This property states roughly that in the structure of the document what can follow a certain component is completely determined by the k preceding components at the same level. Steps 1 and 2 are based on the synthesis of finite automata presented in <ref> [Ang82, Mug90] </ref>, specifically (k; h)-contextuality is a modification of k-reversibility [Ang82] and k contextuality [Mug90]. 3. The resulting automata are transformed to regular expressions, which form the right-hand sides of the productions for the corresponding non terminals. Practically our setting differs from the usual theoretical grammatical inference problems. <p> Steps 1 and 2 are based on the synthesis of finite automata presented in [Ang82, Mug90], specifically (k; h)-contextuality is a modification of k-reversibility [Ang82] and k contextuality <ref> [Mug90] </ref>. 3. The resulting automata are transformed to regular expressions, which form the right-hand sides of the productions for the corresponding non terminals. Practically our setting differs from the usual theoretical grammatical inference problems. The alphabet is not known beforehand. <p> If a sufficiently long sequence of nonterminals occurs in two places, the components that can follow this sequence are independent of the position of the sequence in the document structure. A language satisfying this condition is called k-contextual <ref> [Mug90] </ref>. The condition of k-contextuality can be described simply in terms of automata.
Reference: [ODA89] <institution> Information Processing Text and Office Systems Office Document Architecture (ODA) and Interchange Format. </institution> <type> Technical Report ISO/IEC 8613, </type> <institution> International Organization for Standardization ISO/IEC, </institution> <address> Geneva/New York, </address> <year> 1989. </year>
Reference-contexts: Recent surveys of the research concerning structured documents are [AFQ89, Qui89]. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) <ref> [ODA89, SGM86, Bro89, Gol90] </ref>. The common way to describe the structure of a document is to use context-free grammars. It is typical to use regular expressions on the right-hand sides of the productions of the grammar.
Reference: [Qui89] <author> Vincent Quint. </author> <title> Systems for the manipulation of structured documents. </title> <editor> In J. Andre, R. Furuta, and V. Quint, editors, </editor> <title> Structured Documents, </title> <booktitle> The Cambridge Series on Electronic Publishing, </booktitle> <pages> pages 39-74. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: The text body consists of a list of sections, every section consists of subsections or paragraphs, and so on. Other typical examples of structured documents are dictionaries, encyclopedias, user manuals, and annual reports. Recent surveys of the research concerning structured documents are <ref> [AFQ89, Qui89] </ref>. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) [ODA89, SGM86, Bro89, Gol90].
Reference: [SEM94] <author> Giovanni Semeraro, Floriana Esposito, and Donato Malerba. </author> <title> Learning contextual rules for document understanding. </title> <booktitle> In Proceedings of the Tenth IEEE Conference on Artificial Intelligence for Applications, </booktitle> <pages> pages 108-115, </pages> <year> 1994. </year>
Reference-contexts: The entries are further modified by removing the text and the end tags, and simple productions are formed. Nested tags form productions of their own. If the documents do not have any typographical tagging, it may be possible to use some document recognition techniques <ref> [TYS94, HI94, SEM94, SZ86] </ref> that try to recognize the parts using, for instance, keywords, fonts, or the physical layout of the text.
Reference: [SGM86] <institution> Information Processing Text and Office Systems Standard Generalized Markup Language (SGML). </institution> <type> Technical Report ISO/IEC 8879, </type> <institution> International Organization for Standardization ISO/IEC, </institution> <address> Geneva/New York, </address> <year> 1986. </year>
Reference-contexts: Recent surveys of the research concerning structured documents are [AFQ89, Qui89]. The interest in the area has led to the creation of several document standards, of which the best known are Open Document Architecture (ODA) and Standard Generalized Markup Language (SGML) <ref> [ODA89, SGM86, Bro89, Gol90] </ref>. The common way to describe the structure of a document is to use context-free grammars. It is typical to use regular expressions on the right-hand sides of the productions of the grammar.
Reference: [Suo90] <editor> Suomen kielen perussanakirja. Ensimmainen osa (A-K). Valtion painatuskeskus, </editor> <address> Helsinki, </address> <year> 1990. </year>
Reference-contexts: As a representation of data we have used sets of (2; 1)-contextual 2-grams. Our principal test data was the part A - K of a Finnish dictionary <ref> [Suo90] </ref>.
Reference: [SZ86] <author> S.N. Srihari and G.W. Zack. </author> <title> Document image analysis. </title> <booktitle> In Proceedings of the Eighth International Conference on Pattern Recognition, </booktitle> <pages> pages 434-436. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year>
Reference-contexts: The entries are further modified by removing the text and the end tags, and simple productions are formed. Nested tags form productions of their own. If the documents do not have any typographical tagging, it may be possible to use some document recognition techniques <ref> [TYS94, HI94, SEM94, SZ86] </ref> that try to recognize the parts using, for instance, keywords, fonts, or the physical layout of the text.
Reference: [TYS94] <author> Yuan Yan Tang, Chang De Yan, and Ching Y. Suen. </author> <title> Document processing for automatic knowledge acquisition. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 6(1) </volume> <pages> 3-21, </pages> <year> 1994. </year>
Reference-contexts: The entries are further modified by removing the text and the end tags, and simple productions are formed. Nested tags form productions of their own. If the documents do not have any typographical tagging, it may be possible to use some document recognition techniques <ref> [TYS94, HI94, SEM94, SZ86] </ref> that try to recognize the parts using, for instance, keywords, fonts, or the physical layout of the text.
References-found: 18

