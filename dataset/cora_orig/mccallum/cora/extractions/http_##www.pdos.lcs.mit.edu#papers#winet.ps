URL: http://www.pdos.lcs.mit.edu/papers/winet.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~adj/papers.html
Root-URL: 
Email: fadj, kaashoekg@lcs.mit.edu  
Title: Building Reliable Mobile-Aware Applications using the Rover Toolkit  
Author: Anthony D. Joseph and M. Frans Kaashoek 
Date: October 2, 1996 DRAFT  
Note: DRAFT  
Address: Cambridge, MA 02139, U.S.A.  
Affiliation: M.I.T. Laboratory for Computer Science  
Abstract: This paper discusses extensions to the Rover toolkit for constructing reliable mobile-aware applications. The extensions improve upon the existing failure model, which addressed client or communication failures and guaranteed reliable message delivery from clients to server, but did not address server failures (e.g., the loss of an incoming message due to server failure) [16]. Due to the unpredictable, intermittent communication connectivity typically found in mobile client environments, it is inappropriate to make clients responsible for guaranteeing request completion at servers. The extensions discussed in this paper provide both system- and language-level support for reliable operation in the form of stable logging of each message received by a server, per-application stable variables, programmer-supplied failure recovery procedures, server process failure detection, and automatic server process restart. The design and implementation of fault-tolerance support is optimized for high performance in the normal case (network connectivity provided by a high latency, low bandwidth, wireless link): measurements show a best-case overhead of less than 7% for a reliable null RPC over wired and cellular dialup links. Experimental results from both micro-benchmarks and applications, such as the Rover Web Browser proxy, show that support for reliable operation can be provided at an overhead of only a few percent of execution time during normal operation.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ahamad, P. Dasgupta, and R.J. Leblanc. </author> <title> Fault-tolerant atomic computations in a object-based distributed system. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 69-80, </pages> <year> 1990. </year>
Reference-contexts: In keeping with the design philosophy of the Rover toolkit, application designers are allowed to build their own transactional models. The techniques used by the extensions are not novel; for example, other systems using similar approaches are Clouds <ref> [1] </ref>, Tacoma [15], and Argus [17] (for more details see Section 6). <p> The state of guardians in the the transaction-based Argus system is split into stable and volatile variables [17]. Recovery relies upon replay of a local stable log. Likewise, the state of objects in the Clouds distributed operating system project <ref> [1] </ref> is split into permanent and volatile data. Clouds also provided computation fault-tolerance support for mobile objects by using primary and backup schedulers.
Reference: [2] <author> K. Arnold and J. Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: These results are directly applicable to other mobile application environments. The tools and techniques provided by the Rover toolkit could be applied towards building reliable agents, fault-tolerant Java applets <ref> [2] </ref>, or other reliable mobile code environments. <p> Conflicts are resolved using log replay. Several commercial systems for mobile environments, including Telescript [25] and Oracle Mobile Agents [7], offer reliable message delivery. Other systems providing mobile code that most closely resembles the mobile code aspect of RDOs are Ousterhout's Tcl agents [19] and Java <ref> [2, 20] </ref>. However, none of these systems support reliable mobile code. 7 Conclusions Long-running applications are the most likely to be affected by transient software and hardware faults.
Reference: [3] <author> A. Avizienis. </author> <title> Software fault tolerance. </title> <booktitle> In Proc. 1989 IFIP World Computer Conference, </booktitle> <pages> pages 491-497, </pages> <address> Geneva, 1989. </address> <publisher> IFIP Press. </publisher>
Reference-contexts: In addition, they may corrupt system state, leaving the system unrecoverable even after a restart. As with permanent hardware faults, there are many research techniques that can be applied to hard faults <ref> [3] </ref>, but they do not concern us here. Past studies have shown [11] that most hardware and software errors are transient, recoverable failures.
Reference: [4] <author> K. Birman and T. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: The Tacoma project explored the use of rear guard agents to guarantee agent delivery and execution [15]. More recent work on Tacoma relies upon Horus for fault-tolerant communication and execution [23]. ISIS defined an environment for fault-tolerant, group communication-based computing <ref> [4] </ref>. The failure model used by ISIS is a fail-stop model, which requires recovering processes to recover their state from other active processes instead of a log. The state of guardians in the the transaction-based Argus system is split into stable and volatile variables [17].
Reference: [5] <author> A.D. Birrell and B.J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> Feb. </month> <year> 1984. </year>
Reference-contexts: Queued remote procedure call is a communication system that permits applications to continue to make non-blocking remote procedure calls <ref> [5] </ref> even when a host is disconnected: requests and responses are exchanged upon network reconnection. In the meantime, they are stored in a stable client log. QRPC supports split-phase communications: different connections or communications transports may be used for sending and receiving responses.
Reference: [6] <author> R. Card, T. Ts'o, and S. Tweedie. </author> <title> Second extended filesystem. </title> <booktitle> In Proc. of the First Dutch International Symposium on Linux, </booktitle> <address> Amsterdam, Holland, </address> <year> 1994. </year>
Reference-contexts: The clients have IBM DBOA-2540 disks. Both clients and servers are equipped with Intel Series 2+ Flash Memory PCMCIA cards. We used RAM disks to simulate the performance of battery-backed Static RAM PCMCIA cards. All of the devices used Linux's ext2 filesystem <ref> [6] </ref> with 1024 byte block and fragment sizes. The attributes of the various storage media are listed in Table 2.
Reference: [7] <author> Oracle Corporation. </author> <title> Oracle mobile agents: Technical product summary, </title> <month> August </month> <year> 1995. </year>
Reference-contexts: Conflicts are resolved using log replay. Several commercial systems for mobile environments, including Telescript [25] and Oracle Mobile Agents <ref> [7] </ref>, offer reliable message delivery. Other systems providing mobile code that most closely resembles the mobile code aspect of RDOs are Ousterhout's Tcl agents [19] and Java [2, 20].
Reference: [8] <author> A. Demers, K. Petersen, M. Spreitzer, D. Terry, M. Theimer, and B. Welch. </author> <title> The Bayou architecture: Support for data sharing among mobile users. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 2-7, </pages> <address> Santa Cruz, CA, </address> <year> 1994. </year>
Reference-contexts: Recovery relies upon replay of a local stable log. Likewise, the state of objects in the Clouds distributed operating system project [1] is split into permanent and volatile data. Clouds also provided computation fault-tolerance support for mobile objects by using primary and backup schedulers. The Bayou project <ref> [8, 22] </ref> uses a peer-to-peer database model for sharing data among mobile users, where mobile hosts store updates locally in a stable log and communicate with other mobile hosts to propagate the changes. Conflicts are resolved using log replay.
Reference: [9] <author> F. Douglis, R. Caceres, F. Kaashoek, K. Li, B. Marsh, and J. Tauber. </author> <title> Storage alternatives for mobile computers. </title> <booktitle> In First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 25-37, </pages> <address> Monterey, CA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The use of an alternative filesystem or a Flash RAM coupled with a small battery-backed SRAM cache could offer substantial performance benefits <ref> [9] </ref>. The results of the stable logging experiments are presented in Table 3. The faster processor and better disk subsystem of the server yield significantly better logging performance than the client. The Flash RAM also performed significantly better than the disk.
Reference: [10] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: Using Tcl's variable tracing features, the toolkit also traces writes to the variables and then records the changes in the stable server log. The recorded values are used during recovery as a form of REDO log <ref> [10] </ref>. <p> There is a large body of research on logging and distributed fault-tolerant transactions; for an excellent discussions of some of the issues, see <ref> [10] </ref> and [11]. Other systems have addressed some of the problems relating to reliable communications. The Tacoma project explored the use of rear guard agents to guarantee agent delivery and execution [15]. More recent work on Tacoma relies upon Horus for fault-tolerant communication and execution [23].
Reference: [11] <author> J. Gray and D. </author> <title> Siewiorek. </title> <journal> High-availability computer systems. IEEE Computer, </journal> <volume> 24(9) </volume> <pages> 39-48, </pages> <year> 1991. </year>
Reference-contexts: The extensions do not address repeatable or non-recoverable failures (e.g., those due to critical design or implementation errors). Although transient and recoverable failures are a restricted class of failures, they represent a significant fraction of actual system and application failures <ref> [11] </ref>. Furthermore, in a mobile environment, the incidence of communications faults (e.g., dropped phone calls, lost carriers, etc.) will be significantly higher than for fixed workstations connected by wired networks. <p> In addition, they may corrupt system state, leaving the system unrecoverable even after a restart. As with permanent hardware faults, there are many research techniques that can be applied to hard faults [3], but they do not concern us here. Past studies have shown <ref> [11] </ref> that most hardware and software errors are transient, recoverable failures. The best recovery mechanism for these failures is to restart the application or system. 2.3 Existing Rover Support for Reliable Applications The existing Rover toolkit handles only client software/hardware failures and failures of the communication link while sending QRPCs. <p> There is a large body of research on logging and distributed fault-tolerant transactions; for an excellent discussions of some of the issues, see [10] and <ref> [11] </ref>. Other systems have addressed some of the problems relating to reliable communications. The Tacoma project explored the use of rear guard agents to guarantee agent delivery and execution [15]. More recent work on Tacoma relies upon Horus for fault-tolerant communication and execution [23].
Reference: [12] <author> Intel Corporation. </author> <title> Series 2+ Flash Memory Cards: </title> <editor> 4-, 8-, 20- and 40-Megabyte. </editor> <booktitle> Order Number: </booktitle> <pages> 290491-006, </pages> <month> March </month> <year> 1996. </year> <month> 16 </month>
Reference-contexts: The attributes of the various storage media are listed in Table 2. Flash RAM was chosen as an alternate stable storage media to disks because it offers the advantage of significantly lower power utilization (0.06 milliwatts to 1 watt, 0.6 milliwatts average) <ref> [12] </ref>, versus the DBOA-2540 disk drive (0.1 to 4.65 watts, 2.3 watts average) [13]. However, the reduction in power utilization comes at a price. One important consideration with Flash RAM is the highly variable write time.
Reference: [13] <institution> International Business Machine Corporation. </institution> <note> 2.5-Inch Travelstar LP 360, 540 and 720 MB Low Profile Disk Drives. http://www.ibmlink.ibm.com/HTML/SPEC/goem7054.html, April 1996. </note>
Reference-contexts: Flash RAM was chosen as an alternate stable storage media to disks because it offers the advantage of significantly lower power utilization (0.06 milliwatts to 1 watt, 0.6 milliwatts average) [12], versus the DBOA-2540 disk drive (0.1 to 4.65 watts, 2.3 watts average) <ref> [13] </ref>. However, the reduction in power utilization comes at a price. One important consideration with Flash RAM is the highly variable write time. While the time to read a 16-bit word is a constant 250 nanoseconds, the time to write a 16-bit word varies from 6 microseconds to 3 milliseconds.
Reference: [14] <author> V. Jacobson. </author> <title> Compressing TCP/IP Headers for Low-Speed Serial Links. Internet RFC 1144, </title> <month> February </month> <year> 1990. </year>
Reference-contexts: Latencies are in milliseconds, throughput is in Mbit/s. The network options consist of switched 10 Mbit/s Ethernet, 2 Mbit/s wireless AT&T WaveLAN, 128 Kbit/s and 64 Kbit/s Integrated Digital Services Network (ISDN) links, and Serial Line IP with Van Jacob-son TCP/IP header compression (CSLIP) <ref> [14] </ref> over 19.2 Kbit/s V.32terbo wired and 9.6 Kbit/s Enhanced Throughput Cellular (ETC) cellular dial-up links 2 . The test environment consisted of a single server and multiple clients. The server machine was a Intel Advanced/EV workstation running the standalone TCP server. The clients were IBM ThinkPad 701C laptops.
Reference: [15] <author> D. Johansen, R. van Renesse, and F. B. Schneider. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proc. of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: In keeping with the design philosophy of the Rover toolkit, application designers are allowed to build their own transactional models. The techniques used by the extensions are not novel; for example, other systems using similar approaches are Clouds [1], Tacoma <ref> [15] </ref>, and Argus [17] (for more details see Section 6). <p> Other systems have addressed some of the problems relating to reliable communications. The Tacoma project explored the use of rear guard agents to guarantee agent delivery and execution <ref> [15] </ref>. More recent work on Tacoma relies upon Horus for fault-tolerant communication and execution [23]. ISIS defined an environment for fault-tolerant, group communication-based computing [4].
Reference: [16] <author> A. D. Joseph, A. F. deLespinasse, J. A. Tauber, D. K. Gifford, and M. F. Kaashoek. </author> <title> Rover: A toolkit for mobile information access. </title> <booktitle> In Proc. of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, Colorado, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction The Rover toolkit provides mobile application developers with a client/server distributed object model that isolates mobile applications from the limitations of mobile communication systems <ref> [16] </ref>. This paper discusses extensions to the Rover toolkit for the construction of reliable mobile-aware applications. These extensions improve upon the existing Rover failure model, which addressed client or communication failures and guaranteed reliable message delivery from clients to server, but did not address server failures. <p> (Section 5), discuss related work (Section 6), and conclude with observations on the benefits and limitations of the extensions (Section 7). 2 Rover Toolkit This section presents a brief overview of the design and implementation of the original Rover toolkit and its failure model. 2.1 Rover Overview The Rover toolkit <ref> [16] </ref> offers applications a distributed object system based on a client/server architecture. Client applications typically run on mobile hosts, but could run on stationary hosts as well. Server applications typically run on stationary hosts and hold the long-term state of the system. <p> Because of the state sharing restrictions of the CGI-based server, the extensions are only applicable to the standalone server; as such, in this paper, we discuss only the standalone server in detail. For more information about the CGI server, see <ref> [16] </ref>. 4.2 Stable Server Log Crucial to the implementation of reliable operation is a stable log of the server's actions. <p> The extensions to the server allow it to retry sending a response if the connection back to the client is lost. The client-side support for this reuses functionality added to the Access Manager to support the Rover Web Browser proxy application <ref> [16] </ref>. The Access Manager provides an httpd-like interface port that allows unmodified client WWW browsers to operate in an o*ine manner by submitting HTTP requests directly to the Access Manager (instead of a remote WWW server). <p> To examine the effects of the extensions, we repeated the QRPC cost experiments from <ref> [16] </ref>. The cost of a QRPC has several primary components: 1. Transport cost. This is the time to transmit the request and receive the reply. The cost should not have changed from the original implementation. 2. Stable logging cost.
Reference: [17] <author> B. Liskov, D. Curtis, P. Johnson, and R. Scheifler. </author> <title> Implementation of Argus. </title> <booktitle> In Proc of the Eleventh Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Austin, Texas, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: In keeping with the design philosophy of the Rover toolkit, application designers are allowed to build their own transactional models. The techniques used by the extensions are not novel; for example, other systems using similar approaches are Clouds [1], Tacoma [15], and Argus <ref> [17] </ref> (for more details see Section 6). However, the techniques are applied in a unique way to the problems of mobile computing, specifically the movement of computation from a client to a server in an environment in which intermittent connectivity and limited bandwidth are the norm and not the exception. <p> The failure model used by ISIS is a fail-stop model, which requires recovering processes to recover their state from other active processes instead of a log. The state of guardians in the the transaction-based Argus system is split into stable and volatile variables <ref> [17] </ref>. Recovery relies upon replay of a local stable log. Likewise, the state of objects in the Clouds distributed operating system project [1] is split into permanent and volatile data. Clouds also provided computation fault-tolerance support for mobile objects by using primary and backup schedulers.
Reference: [18] <institution> National Center for Supercomputing Applications. Common Gateway Interface. http://- hoohoo.ncsa.uiuc.edu/cgi. University of Illinois in Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: There are two implementations of Rover servers. One is a standalone TCP/IP server that provides a very restricted subset of HTTP/1.0. A single standalone server provides service to multiple clients. The other implementation is compatible with the Common Gateway Interface (CGI) <ref> [18] </ref> of standard, unmodified HTTP compliant servers (e.g., CERN or NCSA's httpd servers). A new copy of the CGI-based server is executed for each connection from a client; this makes it expensive to maintain shared state.
Reference: [19] <institution> J.K. Ousterhout. The Tcl/Tk project at Sun Labs, </institution> <year> 1995. </year> <note> http://www.sunlabs.com/research/tcl. </note>
Reference-contexts: Conflicts are resolved using log replay. Several commercial systems for mobile environments, including Telescript [25] and Oracle Mobile Agents [7], offer reliable message delivery. Other systems providing mobile code that most closely resembles the mobile code aspect of RDOs are Ousterhout's Tcl agents <ref> [19] </ref> and Java [2, 20]. However, none of these systems support reliable mobile code. 7 Conclusions Long-running applications are the most likely to be affected by transient software and hardware faults.
Reference: [20] <author> Sun Microsystems Corporation. </author> <title> Remote Method Invocation for Java. </title> <address> http://chatsubo.javasoft.com/- current/rmi/index.html, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Conflicts are resolved using log replay. Several commercial systems for mobile environments, including Telescript [25] and Oracle Mobile Agents [7], offer reliable message delivery. Other systems providing mobile code that most closely resembles the mobile code aspect of RDOs are Ousterhout's Tcl agents [19] and Java <ref> [2, 20] </ref>. However, none of these systems support reliable mobile code. 7 Conclusions Long-running applications are the most likely to be affected by transient software and hardware faults.
Reference: [21] <author> J. A. Tauber. </author> <title> Issues in building mobile-aware applications with the Rover toolkit. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Because Rover can employ type-specific concurrency control [24], many conflicts can be resolved automatically. Rover provides the mechanisms for detecting conflicts and leaves it up to applications to reconcile them <ref> [21] </ref>. Any results are sent back to the client. 3 2.2 Rover Fault Model The fault model for the Rover toolkit addresses transient client software/hardware and communication link failures.
Reference: [22] <author> D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. </author> <title> Managing update conflicts in a weakly connected replicated storage system. </title> <booktitle> In Proc. of the Fifteenth ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, Colorado, </address> <year> 1995. </year>
Reference-contexts: Recovery relies upon replay of a local stable log. Likewise, the state of objects in the Clouds distributed operating system project [1] is split into permanent and volatile data. Clouds also provided computation fault-tolerance support for mobile objects by using primary and backup schedulers. The Bayou project <ref> [8, 22] </ref> uses a peer-to-peer database model for sharing data among mobile users, where mobile hosts store updates locally in a stable log and communicate with other mobile hosts to propagate the changes. Conflicts are resolved using log replay.
Reference: [23] <author> R. Van Renesse, T. Hickey, and K. Birman. </author> <title> Design and performance of Horus: A lightweight group communications system. </title> <type> Technical Report TR 94-1442, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithica, New York, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Other systems have addressed some of the problems relating to reliable communications. The Tacoma project explored the use of rear guard agents to guarantee agent delivery and execution [15]. More recent work on Tacoma relies upon Horus for fault-tolerant communication and execution <ref> [23] </ref>. ISIS defined an environment for fault-tolerant, group communication-based computing [4]. The failure model used by ISIS is a fail-stop model, which requires recovering processes to recover their state from other active processes instead of a log.
Reference: [24] <author> W. Weihl and B. Liskov. </author> <title> Implementation of resilient, atomic data types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(2) </volume> <pages> 244-269, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: The application uses the RDO's version vector (maintained by the toolkit) to check whether the RDO has changed since it was imported by a mobile host. Because Rover can employ type-specific concurrency control <ref> [24] </ref>, many conflicts can be resolved automatically. Rover provides the mechanisms for detecting conflicts and leaves it up to applications to reconcile them [21].

References-found: 24

