URL: http://www.cs.columbia.edu/~hgs/rtp/drafts/draft-ietf-avt-rtp-05.ps
Refering-URL: http://www.cs.columbia.edu/~hgs/rtp/drafts/
Root-URL: http://www.cs.columbia.edu
Title: Internet Engineering Task Force Audio-Video Transport WG Expires: 10/1/94 RTP: A Transport Protocol for Real-Time
Author: INTERNET-DRAFT Schulzrinne/Casner/Frederick/Jacobson draft-ietf-avt-rtp-.ps GMD/ISI/Xerox/LBL 
Note: this Memo This document is an Internet Draft. Internet Drafts are working documents of the Internet Engineering Task Force (IETF), its Areas, and its Working Groups. Note that other groups may also distribute working documents as Internet Drafts. Please check the I-D abstract listing contained in each Internet Draft directory to learn the current status of this or any other Internet Draft. Distribution of this document is unlimited. This specification is a product of the Audio/Video Transport working group within the Internet Engineering Task Force. Comments are solicited and should be addressed to the working group's mailing list at rem-conf@es.net and/or the authors.  to be discussed are marked with TBD.  
Date: July 18, 1994  
Abstract: Internet Drafts are draft documents valid for a maximum of six months. Internet Drafts may be updated, replaced, or obsoleted by other documents at any time. It is not appropriate to use Internet Drafts as reference material or to cite them other than as a "working draft" or "work in progress." Abstract This memorandum describes the real-time transport protocol, RTP. RTP provides end-to-end network transport functions suitable for applications transmitting real-time data, such as audio, video or simulation data over multicast or unicast network services. RTP does not address resource reservation and does not guarantee quality-of-service for real-time services. The data transport is augmented by a control protocol (RTCP) designed to provide minimal control and identification functionality, particularly in multicast networks. RTP and RTCP are designed to be independent of the underlying transport and network layers. The protocol supports the use of RTP-level translators and bridges.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. E. </author> <title> Comer, </title> <journal> Internetworking with TCP/IP, </journal> <volume> vol. </volume> <pages> 1. </pages> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: A single packet of the underlying protocol may contain several RTP packets if permitted by the encapsulation method. A (protocol) port is the "abstraction that transport protocols use to distinguish among multiple destinations within a given host computer. TCP/IP protocols identify ports using small positive integers." <ref> [1] </ref> The transport selectors (TSEL) used by the OSI transport layer are equivalent to ports. A content source is the actual source of the data carried in an RTP packet, for example, the application that originally generated some audio data. <p> flag */ unsigned int x:1; /* header extension flag */ unsigned int cc:4; /* CSRC count */ unsigned int m:1; /* marker bit */ unsigned int pt:7; /* payload type */ u_int16 seq; /* sequence number */ u_int32 ts; /* timestamp */ u_int32 ssrc; /* synchronization source */ u_int32 csrc <ref> [1] </ref>; /* optional CSRC list */ - rtp_hdr_t; typedef struct - unsigned int type:2; /* packet type */ unsigned int p:1; /* padding flag */ unsigned int count:5; /* varies by payload type */ unsigned int pt:8; /* payload type */ u_int16 length; /* packet length */ - rtcp_common_t; /* reception <p> jitter; /* interarrival jitter */ u_int32 lsr; /* last SR packet from this source */ u_int32 dlsr; /* delay since last SR packet */ - rtcp_rr_t; typedef struct - u_int8 type; /* type of SDES item (rtcp_sdes_type_t) */ u_int8 length; /* length of SDES item (in bytes) */ char data <ref> [1] </ref>; /* text, not zero-terminated */ - rtcp_sdes_item_t; /* one RTCP packet */ typedef struct - rtcp_common_t common; /* common header */ union - /* sender report (SR) */ struct - Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 29] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, 1994 u_int32 rtp_ts; /* RTP timestamp */ u_int32 ssrc; /* source <p> */ union - /* sender report (SR) */ struct - Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 29] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, 1994 u_int32 rtp_ts; /* RTP timestamp */ u_int32 ssrc; /* source this RTCP packet refers to */ u_int32 ntp_sec; /* NTP timestamp */ u_int32 ntp_frac; /* variable-length list */ rtcp_rr_t rr <ref> [1] </ref>; - sr; /* reception report (RR) */ struct - u_int32 rtp_ts; /* RTP timestamp */ u_int32 ssrc; /* source this RTCP packet refers to */ /* variable-length list */ rtcp_rr_t rr [1]; - rr; struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text */ <p> packet refers to */ u_int32 ntp_sec; /* NTP timestamp */ u_int32 ntp_frac; /* variable-length list */ rtcp_rr_t rr <ref> [1] </ref>; - sr; /* reception report (RR) */ struct - u_int32 rtp_ts; /* RTP timestamp */ u_int32 ssrc; /* source this RTCP packet refers to */ /* variable-length list */ rtcp_rr_t rr [1]; - rr; struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text */ bye; /* source description (SDES) */ struct rtcp_sdes_t - u_int32 src; /* first SSRC/CSRC */ rtcp_sdes_item_t s [1]; /* list of SDES */ - sdes; /* format (FMT) */ struct - u_int32 <p> NTP timestamp */ u_int32 ntp_frac; /* variable-length list */ rtcp_rr_t rr <ref> [1] </ref>; - sr; /* reception report (RR) */ struct - u_int32 rtp_ts; /* RTP timestamp */ u_int32 ssrc; /* source this RTCP packet refers to */ /* variable-length list */ rtcp_rr_t rr [1]; - rr; struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text */ bye; /* source description (SDES) */ struct rtcp_sdes_t - u_int32 src; /* first SSRC/CSRC */ rtcp_sdes_item_t s [1]; /* list of SDES */ - sdes; /* format (FMT) */ struct - u_int32 src; /* SSRC */ u_int32 freq; /* <p> /* source this RTCP packet refers to */ /* variable-length list */ rtcp_rr_t rr <ref> [1] </ref>; - rr; struct - u_int32 src [1]; /* list of sources */ /* can't express trailing text */ bye; /* source description (SDES) */ struct rtcp_sdes_t - u_int32 src; /* first SSRC/CSRC */ rtcp_sdes_item_t s [1]; /* list of SDES */ - sdes; /* format (FMT) */ struct - u_int32 src; /* SSRC */ u_int32 freq; /* clock frequency */ char name [4]; /* format name */ - fmt; - rtcp_t; A.1 RTP Header Consistency Check The following checks may be used to determine whether an
Reference: [2] <author> J. Postel, </author> <title> "Internet protocol," Request for Comments (Standard) RFC 791, </title> <institution> Internet Engineering Task Force, </institution> <month> Sept. </month> <year> 1981. </year> <note> Obsoletes RFC0760. </note>
Reference-contexts: Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 8] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, 1994 4 Byte Order, Alignment, and Reserved Values All integer fields are carried in network byte order, that is, most significant byte (octet) first. This byte order is commonly known as big-endian. The transmission order is described in detail in <ref> [2] </ref>, Appendix A. Unless otherwise noted, numeric constants are in decimal (base 10). All header data is aligned to its natural length, i.e., 16-bit words are aligned on even byte addresses, 32-bit long words are aligned at addresses divisible by four, etc. Octets designated as padding have the value zero.
Reference: [3] <author> International Standards Organization, </author> <title> "ISO/IEC DIS 10646-1:1993 information technology - universal multiple-octet coded character set (UCS) part I: Architecture and basic multilingual plane," </title> <year> 1993. </year>
Reference-contexts: Octets designated as padding have the value zero. Fields designated as "reserved" or R are set aside for future use; they should be set to zero by senders and ignored by receivers. Textual information is encoded according to the UTF-2 encoding specified in Annex F of ISO standard 10646 <ref> [3, 4] </ref>. US-ASCII is a subset of this encoding and requires no additional encoding. The presence of multi-octet encodings is indicated by setting the most significant bit to a value of one.
Reference: [4] <author> The Unicode Consortium, </author> <title> The Unicode Standard. </title> <address> New York, New York: </address> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Octets designated as padding have the value zero. Fields designated as "reserved" or R are set aside for future use; they should be set to zero by senders and ignored by receivers. Textual information is encoded according to the UTF-2 encoding specified in Annex F of ISO standard 10646 <ref> [3, 4] </ref>. US-ASCII is a subset of this encoding and requires no additional encoding. The presence of multi-octet encodings is indicated by setting the most significant bit to a value of one. <p> /* can't express trailing text */ bye; /* source description (SDES) */ struct rtcp_sdes_t - u_int32 src; /* first SSRC/CSRC */ rtcp_sdes_item_t s [1]; /* list of SDES */ - sdes; /* format (FMT) */ struct - u_int32 src; /* SSRC */ u_int32 freq; /* clock frequency */ char name <ref> [4] </ref>; /* format name */ - fmt; - rtcp_t; A.1 RTP Header Consistency Check The following checks may be used to determine whether an RTP header is likely to be valid, given a previously received RTP packet: * RTP type field value equal to 2 Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 30] INTERNET-DRAFT <p> */ #include &lt;stdio.h&gt; /* printf () */ #include "global.h" /* from RFC 1321 */ #include "md5.h" /* from RFC 1321 */ #define MD_CTX MD5_CTX #define MDInit MD5Init #define MDUpdate MD5Update #define MDFinal MD5Final static u_long md_32 (char *string, int length) - MD_CTX context; union - char c [16]; u_long x <ref> [4] </ref>; digest; u_long r; int i; MDInit (&context); MDUpdate (&context, string, length); MDFinal ((unsigned char *)&digest, &context); r = 0; r ^= digest.x [i]; - return r; - /* md_32 */ * Return random unsigned 32-bit quantity. */ u_long random32 (void) Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 32] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, 1994
Reference: [5] <author> D. Mills, </author> <title> "Network time protocol (v3)," Request for Comments (Proposed Standard) RFC 1305, </title> <institution> Internet Engineering Task Force, </institution> <month> Apr. </month> <year> 1992. </year> <note> Obsoletes RFC1119. </note>
Reference-contexts: NTP timestamps are represented as a 64-bit unsigned fixed-point number, in seconds relative to 0h UTC on 1 January 1900. The integer part is in the first 32 bits and the fraction part in the last 32 bits <ref> [5] </ref>. 5 RTP Data Transfer Protocol 5.1 RTP Fixed Header Fields The RTP header has the following format: 0 1 2 3 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |T=2|P|X| CC |M| PT | sequence number | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | timestamp | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | synchronization source identifier (SSRC) | +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+ | content source identifiers (CSRCs) | | ....
Reference: [6] <author> W. Feller, </author> <title> An Introduction to Probability Theory and its Applications, </title> <journal> Volume 1, </journal> <volume> vol. </volume> <pages> 1. </pages> <address> New York, New York: </address> <publisher> John Wiley and Sons, </publisher> <editor> third ed., </editor> <year> 1968. </year>
Reference-contexts: If N is the number of sources and L the length of the identifier (here, 32 bits), the probability that two sources independently pick the same value can be approximated for large N <ref> [6, p. 33] </ref> as 1 exp (N 2 =2 L+1 ): For N = 1000, the probability is roughly 0.01%. Because the random identifiers are globally unique, they can be used to detect loops that may be introduced by bridges.
Reference: [7] <author> S. Stubblebine, </author> <title> "Security services for multimedia conferencing," </title> <booktitle> in 16th National Computer Security Conference, </booktitle> <address> (Baltimore, Maryland), </address> <pages> pp. 391-395, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: Rightly or not, users may be more sensitive to privacy concerns with audio and video communication than they have been with more traditional forms of network communication <ref> [7] </ref>. Therefore, the use of security mechanisms with RTP is important. As a first step, RTCP makes it easy for all participants in a session to identify themselves; if deemed important for a particular application, it is the responsibility of the application writer to make listening without identification difficult.
Reference: [8] <author> D. Balenson, </author> <title> "Privacy enhancement for internet electronic mail: Part III: algorithms, modes, and identifiers," Request for Comments (Proposed Standard) RFC 1423, </title> <institution> Internet Engineering Task Force, </institution> <month> Feb. </month> <year> 1993. </year> <note> Obsoletes RFC1115. Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 35] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, </note> <year> 1994 </year>
Reference-contexts: An example of such a consistency check is given in Section A.1. The default encryption algorithm is the Data Encryption Standard (DES) algorithm in CBC (cipher block chaining) mode, as described in Section 1.1 of RFC 1423 <ref> [8] </ref>, except that padding to a multiple of 8 octets is indicated as described for the P bit in Section 5.1. The initialization vector is zero because random values are supplied in the RTP header or by the random prefix for RTCP packets. <p> *)&digest, &context); r = 0; r ^= digest.x [i]; - return r; - /* md_32 */ * Return random unsigned 32-bit quantity. */ u_long random32 (void) Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 32] INTERNET-DRAFT draft-ietf-avt-rtp-05.ps July 18, 1994 - struct - struct timeval tv; pid_t pid; u_long hostid; uid_t uid; char name <ref> [8] </ref>; - s; gettimeofday (&s.tv, 0); s.pid = getpid (); s.hostid = gethostid (); s.uid = getuid (); s.gid = getgid (); gethostname (s.name, sizeof (s.name)); return md_32 ((char *)&s, sizeof (s)); - /* random32 */ A.4 Estimating the Number of Participants and Computing the RTCP Trans mission Period This algorithm
Reference: [9] <author> V. L. Voydock and S. T. Kent, </author> <title> "Security mechanisms in high-level network protocols," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 15, </volume> <pages> pp. 135-171, </pages> <month> June </month> <year> 1983. </year> <note> Schulzrinne/Casner/Frederick/Jacobson Expires 10/1/94 [Page 36] </note>
Reference-contexts: The initialization vector is zero because random values are supplied in the RTP header or by the random prefix for RTCP packets. For details on the use of CBC initialization vectors, see <ref> [9] </ref>. Implementations that support encryption should always support the DES algorithm in CBC mode. As an alternative to encryption at the RTP level as described above, profiles may define additional payload types for encrypted encodings. Those encodings must specify how padding and other aspects of the encryption should be handled.
References-found: 9

