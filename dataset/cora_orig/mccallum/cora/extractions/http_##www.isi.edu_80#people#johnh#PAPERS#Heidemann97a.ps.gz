URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann97a.ps.gz
Refering-URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann97a.html
Root-URL: http://www.isi.edu
Title: Performance Interactions Between P-HTTP and TCP Implementations  
Author: John Heidemann 
Affiliation: USC Information Sciences Institute  
Date: 27(2):64-73, April 1997.  May 19, 1997  
Note: Appeared in ACM Computer Communication Review,  
Abstract: This document describes several performance problems resulting from interactions between implementations of persistent-HTTP (P-HTTP) and TCP. Two of these problems tie P-HTTP performance to TCP delayed-acknowledgments, thus adding up to 200ms to each P-HTTP transaction. A third results in multiple slow-starts per TCP connection. Unresolved, these problems result in P-HTTP transactions which are 14 times slower than standard HTTP and 20 times slower than potential P-HTTP over a 10 Mb/s Ethernet. We describe each problem and potential solutions. After implementing our solutions to two of the problems, we observe that P-HTTP performs better than HTTP on a local Ethernet. Although we observed these problems in specific implementations of HTTP and TCP (Apache-1.1b4 and SunOS 4.1.3, respectively), we believe that these problems occur more widely. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Braden. </author> <title> Requirements for Internet hosts communication layers. RFC 1122, Internet Request For Comments, </title> <month> October </month> <year> 1989. </year>
Reference-contexts: It then waits for an ACK before continuing. The client reads both of these segments. TCP's delayed-acknowledgment algorithm specifies that ACKs should be delayed in hopes of piggybacking the ACK on return traffic. The host requirements RFC adds that at least every other full segment must be acknowledged <ref> [1] </ref>. Unfortunately, the client has received only one full segment and one partial segment. The client therefore delays ACKing the data until the delayed ACK timer expires, which can take up to 200ms on BSD-derived TCPs or 500ms according to the specification [1]. <p> least every other full segment must be acknowledged <ref> [1] </ref>. Unfortunately, the client has received only one full segment and one partial segment. The client therefore delays ACKing the data until the delayed ACK timer expires, which can take up to 200ms on BSD-derived TCPs or 500ms according to the specification [1]. A packet trace illustrating this problem can be seen in Figure 1. Details of the packet exchanges are listed in Figure 2. Although this trace represents a single response, time between the second and third data segments is consistently 170190ms in our experiments. <p> TCP breaks this data into three segments of lengths 1460, 1460, and 1175. The client will acknowledge the first two segments immediately upon receipt (recall that according to the host requirements RFC, every two full segments must be acknowledged <ref> [1] </ref>). The client will delay acknowledgment of the third segment according to the TCP delayed acknowledgment algorithm. Next assume that the server has only a small amount is short.
Reference: [2] <author> L. Brakmo and L. Peterson. </author> <title> TCP Vegas: End to end congestion avoidance on a global internet. </title> <journal> IEEE Journal of Selected Areas in Communication, </journal> <volume> 13(8):14651480, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: A rate-based algorithm for mid-stream re-starts provides a good balance between the desires for good HTTP performance and steady packet traffic. Solutions like this one can be deployed incrementally since for HTTP traffic only the server's TCP implementation need change. We have implemented this approach using TCP-Vegas mechanisms <ref> [2] </ref> to measure the transfer rate and are currently examining its performance through experiment and simulation. Finally, the question of how to initialize or reset TCP status information over time and space arises not only when a connection goes idle, but also when initiating new connections in parallel or serial.
Reference: [3] <author> David D. Clark. </author> <title> Modularity and efficiency in pro-tocol implementation. RFC 817, Internet Request For Comments, </title> <month> July </month> <year> 1982. </year>
Reference-contexts: Apache will immediately write this data. TCP, however will refuse to send it because of sender-side SWS avoidance <ref> [3] </ref>.
Reference: [4] <author> David D. Clark. </author> <title> Window and acknowlegement strategy in TCP. RFC 813, Internet Request For Comments, </title> <month> July </month> <year> 1982. </year>
Reference-contexts: traffic would be to delay ACKs by slightly more than the back-to-back segment interarrival time and then immediately send an ACK, thus consolidating every other ACK without unnecessarily delay. 2.3 The Odd/Short-Final-Segment Problem The second problem we encountered involved odd numbers of segments interacting with the silly-window-syndrome (SWS) avoidance algorithm <ref> [4] </ref>. The problem occurs when the Nagle algorithm is enabled and a response requires an odd number of full segments followed by a short final segment.
Reference: [5] <author> Jon Crowcroft, Ian Wakeman, Zheng Wang, and Dejan Strovica. </author> <title> Is layering harmful? IEEE Network Magazine, </title> <address> 6(xxx):2024, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: We have implemented solutions to the first two problems we describe and show that, with these solutions, P-HTTP performs better than HTTP. We outline a solution to the third problem. Problems similar to the first two problems we describe have been encountered in other contexts <ref> [14, 5] </ref>. We compare this work to ours in Section 3. 2 The Performance Problems Of the three performance problems identified in our work, two involve delayed acknowledgments, and the third concerns congestion control. This section describes each problem and their solutions. <p> Until it bug is resolved, it may be necessary to disable persistent connections for clients with such problems. 3 Related Work Problems similar to the short-initial-segment problem and the odd/short-final-segment problem have been encountered by Moldeklev and Gunningberg [14] and Crowcroft, Wakeman, Wang, and Strovica <ref> [5] </ref>. Moldeklev and Gunningberg describe how MTU affects TCP transfer efficiency [14].
Reference: [6] <author> R. Fielding, H. Frystyk, T. Berners-Lee, J. Get-tys, and J. Mogul. </author> <title> Hypertext transfer protocol HTTP/1.1. RFC draft-ietf-http-v11-spec-04.txt, Internet Request For Comments, </title> <month> June </month> <year> 1996. </year>
Reference-contexts: Although the problems that we found are due to our particular implementations of P-HTTP and TCP, we believe that there are several reasons broader understanding of these issues is needed in the web community. First, P-HTTP is a relatively new protocol and is only now becoming standardized in HTTP/1.1 <ref> [6] </ref>. Although P-HTTP is derived from HTTP, P-HTTP exhibits very different network dynamics. To a first approximation, simple HTTP is identical to the data channel of FTP: a new connection is opened for each data object. FTP behavior has been studied for many years.
Reference: [7] <author> John Franks. </author> <title> Change log for WN. WN distribution, </title> <note> http://hopf.math.nwu.edu/, August 1995. </note>
Reference-contexts: Second, we have observed these problems in widely deployed implementations of HTTP and TCP. We have also made an early draft of this work available to others and been told that similar problems exist in at least one other HTTP server <ref> [7] </ref>. Together, these observations suggest that the web development community is not widely familiar with these problems. Finally, HTTP is becoming very widely deployed outside its original domain of hypertext exchange.
Reference: [8] <author> John Heidemann, Katia Obraczka, and Joe Touch. </author> <title> Modeling the performance of HTTP over several transport protocols. </title> <journal> Submitted to IEEE/ACM Transactions on Networking, </journal> <month> November </month> <year> 1996. </year>
Reference-contexts: 1 Introduction At ISI we are currently examining HTTP protocol performance across various transport protocols <ref> [8, 20] </ref>. As a part of this work we have examined the performance fl This research is supported by the Defense Advanced Research Projects Agency (DARPA) through FBI contract J-FBI-95-185 entitled LSAM. <p> Request permissions from the authors. of HTTP and persistent-HTTP (P-HTTP) in detail. We have developed a model for HTTP performance based on a function of server and network characteristics <ref> [8] </ref>. To validate our HTTP performance model we compared predicted performance to measured performance in an actual web server. Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. <p> We resolved these interactions through application-level implementation changes, providing an HTTP implementation where P-HTTP is 40% faster than simple HTTP over an Ethernet. With these implementation changes, most P-HTTP overhead is accurately accounted for by our analytic model <ref> [8] </ref>. Although the problems that we found are due to our particular implementations of P-HTTP and TCP, we believe that there are several reasons broader understanding of these issues is needed in the web community. <p> With this fix we observe actual P-HTTP performance over wide-area connections that is with 5% of that predicted by our model of TCP connection setup behavior <ref> [8] </ref>. 2.4 The Slow-Start Re-Start Problem A final potential problem we are aware of involves conservative assumptions made in some TCP implementations about congestion control. These assumptions originated in later versions of BSD TCP [11] and do not occur in many BSD-derived systems (such as SunOS). <p> Web pages today typically require a cluster of HTTP requests, one for the HTML document and one for each embedded image. While P-HTTP's optimizations will be successful across a cluster, they will not be between clusters, thus limiting P-HTTP performance <ref> [8] </ref>. We have not yet experimentally verified that this behavior occurs. We have, however, examined the source code of several existing Unix implementations. SunOS 4.x does not reduce the congestion window except due to packet loss. 4.4BSD, FreeBSD 2.1, and Linux 2.0 will reset the congestion window.
Reference: [9] <author> Janey C. Hoe. </author> <title> Start-up dynamics of TCP's congestion control and avoidance schemes. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: This work is complementary to our approach where we pace packets instead of slow-starting after an idle connection. Hoe also has suggested (independent of our work) rate-based pacing as a potential future alternative to slow-start <ref> [9] </ref>. We are currently examining the effects of augmenting slow-start with rate-based pacing during re-starts; we expect to have a performance evaluation of our implementation shortly. 4 Conclusions We have identified three performance problems that occur due to interactions between specific implementations of TCP and P-HTTP.
Reference: [10] <author> Janey C. Hoe. </author> <title> Improving the start-up behavior of a congestion control scheme for tcp. </title> <booktitle> In Proceedings of the ACM SIGCOMM '96, </booktitle> <pages> pages 270280, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: Hoe has addressed the problem of excessive packet loss due to aggressive slow-start rates by limiting the aggressive phase of slow-start <ref> [10] </ref>. This work is complementary to our approach where we pace packets instead of slow-starting after an idle connection. Hoe also has suggested (independent of our work) rate-based pacing as a potential future alternative to slow-start [9].
Reference: [11] <author> Van Jacobson and Mike Karels. </author> <title> Congestion avoidance and control. </title> <journal> ACM Computer Communication Review, </journal> <volume> 18(4):314329, </volume> <month> August </month> <year> 1990. </year> <note> Revised version of his SIGCOMM '88 paper. </note>
Reference-contexts: These assumptions originated in later versions of BSD TCP <ref> [11] </ref> and do not occur in many BSD-derived systems (such as SunOS). The interaction between these assumptions and P-HTTP was originally observed in other work on P-HTTP performance [20]. BSD TCP makes a very conservative assumption about the congestion window. <p> The motivation for this algorithm was the observation that some applications such as SMTP and NNTP typically have a negotiation phase followed by a data transfer phase <ref> [11] </ref>. The negotiation phase can artificially open the congestion window; data transfer will then result in a burst of packets which can move the network out of equilibrium, potentially resulting in congestion or packet loss.
Reference: [12] <author> J.C. Mogul and S.E. Deering. </author> <title> Path MTU discovery. RFC 1191, Internet Request For Comments, </title> <month> November </month> <year> 1990. </year>
Reference-contexts: Odd numbers of segments arise when Apache sends data over a TCP connection with a large MSS. TCP connections between Ethernet-connected hosts typically have an MSS of 1460B, as might wide-area connections where the hosts implement MTU-discovery <ref> [12] </ref>. (Without MTU-discovery wide-area connections typically see a 512B or 536B MSS.) Apache writes data at the application-layer in 4KB chunks. TCP breaks this data into three segments of lengths 1460, 1460, and 1175. <p> Most current HTTP systems have combinations of buffering and MTU values which avoid the deadlocks observed Mold-eklev and Gunningberg, however these problems could arise as MTU-discovery and large-MTU networks become more widely deployed <ref> [12] </ref>. Crowcroft, Wakeman, Wang, and Strovica experimented with SunRPC traffic over TCP. SunRPC calls have very similar behavior with HTTP requests and responses in P-HTTP. They found that mismatches between user- and TCP-level buffering caused a problem similar to the odd/short-final-segment problem we describe.
Reference: [13] <author> Jeffrey C. </author> <title> Mogul. </title> <booktitle> The case for persistent-connection HTTP. In Proceedings of the SIG-COMM '95, </booktitle> <pages> pages 299313. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. This result is surprising since P-HTTP is intended to improve performance by amortizing costs of connection creation across multiple requests <ref> [16, 13] </ref>. We found several interactions between P-HTTP and TCP which explain the exceedingly poor P-HTTP performance.
Reference: [14] <author> Kjersti Moldeklev and Per Gunningberg. </author> <title> How a large ATM MTU causes deadlocks in TCP data transfers. </title> <journal> ACM/IEEE Transactions on Networking, </journal> <volume> 3(4):409422, </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: We have implemented solutions to the first two problems we describe and show that, with these solutions, P-HTTP performs better than HTTP. We outline a solution to the third problem. Problems similar to the first two problems we describe have been encountered in other contexts <ref> [14, 5] </ref>. We compare this work to ours in Section 3. 2 The Performance Problems Of the three performance problems identified in our work, two involve delayed acknowledgments, and the third concerns congestion control. This section describes each problem and their solutions. <p> Until it bug is resolved, it may be necessary to disable persistent connections for clients with such problems. 3 Related Work Problems similar to the short-initial-segment problem and the odd/short-final-segment problem have been encountered by Moldeklev and Gunningberg <ref> [14] </ref> and Crowcroft, Wakeman, Wang, and Strovica [5]. Moldeklev and Gunningberg describe how MTU affects TCP transfer efficiency [14]. <p> may be necessary to disable persistent connections for clients with such problems. 3 Related Work Problems similar to the short-initial-segment problem and the odd/short-final-segment problem have been encountered by Moldeklev and Gunningberg <ref> [14] </ref> and Crowcroft, Wakeman, Wang, and Strovica [5]. Moldeklev and Gunningberg describe how MTU affects TCP transfer efficiency [14]. They find that interactions between sender and receiver window sizes, Na-gle's algorithm, delayed acknowledgements, and BSD socket buffering code can result in a number of conditions where TCP data transfer is tied to delayed ac-knowledgements (a throughput deadlock in their terminology).
Reference: [15] <author> Henrik Frystyk Nielsen, Jim Gettys, Anselm Baird-Smith, Eric Prud'hommeaux, Hakon Wium Lie, and Chris Lilley. </author> <title> Network performance effects of HTTP/1.1, CSS1, </title> <journal> and PNG. </journal> <note> NOTE-pipelining-970207, availble as web page http://www.w3.org/pub/- WWW/Protocols/HTTP/Performance/- Pipeline.html, 7 February 1997. </note>
Reference-contexts: We have informed the Apache developers of the problems and fixes we discuss below; we expect that some of our patches will be part of a future Apache release. Pipelining requests across a P-HTTP connection is necessary to maximize performance <ref> [15] </ref>.
Reference: [16] <author> Venkata N. Padmanabhan and Jeffrey C. Mogul. </author> <title> Improving HTTP latency. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Our early experiments suggested that P-HTTP performance was ten times slower than the corresponding HTTP transactions in a simple page-retrieval benchmark. This result is surprising since P-HTTP is intended to improve performance by amortizing costs of connection creation across multiple requests <ref> [16, 13] </ref>. We found several interactions between P-HTTP and TCP which explain the exceedingly poor P-HTTP performance.
Reference: [17] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Apache will immediately write this data. TCP, however will refuse to send it because of sender-side SWS avoidance [3]. According to Stevens' summary of the BSD TCP algorithms <ref> [17] </ref> (paraphrased from page 326), the server won't send data until: (a) a full-size segment can be sent, (b) we can send half of the client's advertised window, (c) we can send everything we have and either are not expecting an ACK or the Na-gle algorithm is disabled.
Reference: [18] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> volume 2. </volume> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: We have, however, examined the source code of several existing Unix implementations. SunOS 4.x does not reduce the congestion window except due to packet loss. 4.4BSD, FreeBSD 2.1, and Linux 2.0 will reset the congestion window. Stevens describes this behavior (Section 26.2, <ref> [18] </ref>), although he states that the idle time is one round-trip time rather than the retransmission time-out interval. Several solutions exist to unify the goals of the TCP layer (congestion avoidance via packet conservation) and P-HTTP (maximum throughput).
Reference: [19] <author> Joe Touch. </author> <title> TCP control block interdependence. Work in progress (Internet draft draft-touch-tcp-interdep-00.txt, </title> <month> expires 11 December </month> <year> 1996), </year> <month> June </month> <year> 1996. </year>
Reference-contexts: Finally, the question of how to initialize or reset TCP status information over time and space arises not only when a connection goes idle, but also when initiating new connections in parallel or serial. For a more detailed discussion of the alternatives, see <ref> [19] </ref>. 2.5 Other problems In addition to interactions between P-HTTP and TCP we have observed two performance problems not specific to P-HTTP. These problems and their solutions have been widely explored; we describe them here briefly in the context of Apache.
Reference: [20] <author> Joe Touch, John Heidemann, and Katia Obraczka. </author> <title> Analysis of HTTP performance. </title> <note> Released as web page http://www.isi.edu/lsam /publications/http-perf/, Currently submitted for publication to IEEE Communications Magazine, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction At ISI we are currently examining HTTP protocol performance across various transport protocols <ref> [8, 20] </ref>. As a part of this work we have examined the performance fl This research is supported by the Defense Advanced Research Projects Agency (DARPA) through FBI contract J-FBI-95-185 entitled LSAM. <p> These assumptions originated in later versions of BSD TCP [11] and do not occur in many BSD-derived systems (such as SunOS). The interaction between these assumptions and P-HTTP was originally observed in other work on P-HTTP performance <ref> [20] </ref>. BSD TCP makes a very conservative assumption about the congestion window. If at any time all data sent has been acknowledged and nothing has been sent for one retransmission time-out period, then it reinitializes the congestion window to 1 segment, forcing a slow-start.
References-found: 20

