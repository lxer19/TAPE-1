URL: http://www.cs.umd.edu/users/kutluhan/Papers/AIJnote.ps
Refering-URL: http://www.cs.umd.edu/users/kutluhan/
Root-URL: 
Email: email: fkutluhan,nau,vsg@cs.umd.edu  
Title: Domain-Independent Planning whether the planning operators are given as part of the input to the
Author: Kutluhan Erol, Dana S. Nau, and V.S. Subrahmanian 
Date: 16 September 1994  
Note: whether or not delete lists are allowed; whether or not negative preconditions are allowed; whether or not the predicates are restricted to be propositional (i.e., 0-ary);  Preprint submitted to Elsevier Science  
Address: 20742, U.S.A.  
Affiliation: Department of Computer Science, Institute for Systems Research, and Institute for Advanced Computer Studies. University of Maryland College Park, Maryland  
Web: http: //www.cs.umd.edu/users/fkutluhan,nau,vsg  
Abstract: Complexity, Decidability and Undecidability Results for Abstract In this paper, we examine how the complexity of domain-independent planning with STRIPS-style operators depends on the nature of the planning operators. We show conditions under which planning is decidable and undecidable. Our results on this topic solve an open problem posed by Chapman [5], and clear up some difficulties with his undecidability theorems. For those cases where planning is decidable, we explain how the time complexity varies depending on a wide variety of conditions: ? This work was supported in part by the Army Research Office under Grant Number DAAL-03-92-G-0225, by the Air Force Office of Scientific Research under grant F49620-93-1-0065, by an NSF Young Investigator Award IRI-93-57756, as well as by NSF Grant NSFD CDR-88003012 to the University of Maryland Systems Research Center, and NSF grants IRI-8907890 and IRI-9109755. whether or not function symbols are allowed;
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1976. </year>
Reference-contexts: This problem is at least as difficult as plan length, and in some cases harder. For example, in the Towers of Hanoi problem <ref> [1] </ref> and certain generalizations of it [15], the length of the shortest plan can be found in low-order polynomial time| but actually producing this plan requires exponential time and space, since the plan has exponential length.
Reference: [2] <author> Christer Backstrom and Inger Klein. </author> <title> Planning in polynomial time: the sas-pubs class. </title> <journal> Computational Intelligence, </journal> <volume> 7, </volume> <year> 1991. </year> <month> 15 </month>
Reference-contexts: His complexity results for this case range from polynomial time to pspace-complete. Chapman was the first to study issues relating to the undecidability of planning; we have discussed his work in detail in Section 3. Backstrom and Klein <ref> [2] </ref> found a class of planning problems called SAS-PUBS, for which planning can be done in polynomial time.
Reference: [3] <author> Tom Bylander. </author> <title> Complexity results for planning. </title> <booktitle> In IJCAI-91, </booktitle> <year> 1991. </year>
Reference-contexts: independent of whether or not the operators are allowed to have conditional effects. ff No operator has more than one precondition. fi Every operator with more than one precondition is the composition of other operators. fl With pspace- or np-completeness for some sets of operators. * Results due to Bylander <ref> [3] </ref>. whether the planning operators are given as part of the input to the planning problem, or instead are fixed in advance.
Reference: [4] <author> Tom Bylander. </author> <title> Complexity results for extended planning. </title> <booktitle> In Proc. First International Conference on AI Planning Systems, </booktitle> <year> 1992. </year>
Reference-contexts: We have stated some of his results in Table 2. More recently, he has studied the complexity of propositional planning extended to allow a limited amount of inference in the domain theory <ref> [4] </ref>. His complexity results for this case range from polynomial time to pspace-complete. Chapman was the first to study issues relating to the undecidability of planning; we have discussed his work in detail in Section 3.
Reference: [5] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 333-379, </pages> <year> 1987. </year>
Reference-contexts: whether or not we allow delete lists and/or negative preconditions, whether or not we restrict the predicates to be propositional (i.e., 0 ary), whether we fix the planning operators in advance, or give them as part of the input. (iii) We have solved an open problem stated by Chapman in <ref> [5] </ref>: whether or not planning is undecidable when the language contains infinitely many constants but the initial state is finite. In particular, this problem is decidable in the case where the planning operators have no negative preconditions and no delete lists. <p> planning operators are allowed to have negative preconditions and/or delete lists, then the problem is undecidable. (iv) Chapman's Second Undecidability Theorem states that "planning is undecidable even with a finite initial situation if the action representation is extended to represent actions whose effects are a function of their input situation" <ref> [5] </ref>, i.e., if the language contains function symbols and infinitely many constants. Our results show that even with a number of additional restrictions, planning is still undecidable. <p> We also correct a misimpression about this theorem, which has been thought by some researchers [26,11] to refer to operators that have conditional effects. It does not|and our decidability and complexity results are unaffected by whether or not the operators have conditional effects. (v) Chapman <ref> [5] </ref> and Dean and Boddy [8] studied planning with conditional operators, and showed that the problem of deciding whether a proposition is necessarily true after a partially ordered plan (a.k.a modal truth criterion) is NP-hard in the presence of conditional operators. <p> However, for comparison with Chapman's <ref> [5] </ref> results, we also consider the cases where they are infinite. fi No operator has more than one precondition. fl With acyclicity and boundedness restrictions as described in Section 2.2.1. ffi In this case, the other restrictions ensure that the initial state will always be finite. <p> Whether the planning operators are fixed in advance or given as part of the input, and whether or not they are conditional, does not affect these results. For comparison with Chapman's <ref> [5] </ref> results, Table 1 also includes decidability and undecidability results for the cases where we allow infinitely many constant symbols, infinite initial states, and operators with conditional effects. These results relate to Chapman's work as follows: Our results solve an open problem stated by Chapman in [5]: whether or not planning <p> For comparison with Chapman's <ref> [5] </ref> results, Table 1 also includes decidability and undecidability results for the cases where we allow infinitely many constant symbols, infinite initial states, and operators with conditional effects. These results relate to Chapman's work as follows: Our results solve an open problem stated by Chapman in [5]: whether or not planning is undecidable when the language contains infinitely many constants but the initial state is finite. In particular, our results show that this problem is decidable in the case where the planning operators have no negative preconditions and no delete lists. <p> planning operators are allowed to have negative preconditions and/or delete lists, then the problem is undecidable. - Chapman's Second Undecidability Theorem states that "planning is undecidable even with a finite initial situation if the action representation is extended to represent actions whose effects are a function of their input situation" <ref> [5] </ref>, i.e., if the language contains function symbols and infinitely many constants. 3 Our results subsume this theorem, by showing that even with a number of additional restrictions, planning is still undecidable. 4 Complexity Results Based on various syntactic criteria on what planning operators are allowed to look like, we have <p> speculations that enabling-condition interactions are important for planning in general seem to be corroborated by some of our results, as discussed above. 13 5.2 Temporal Projection Another problem that is closely related to planning is the problem of temporal projection, or what Chapman calls the "modal truth" of an atom <ref> [5] </ref>. Given an atom a, an initial state S 0 , and a partially ordered set of actions P , the question is whether a is necessarily/possibly true after execution of P . This question is especially important in partial-order planners such as NOAH [28], NONLIN [32], and SIPE [33]. <p> One problem is what it means for a to be necessarily true if not all total orderings of P are executable. Chapman <ref> [5] </ref> assumes that a is necessarily true after executing P only if every total ordering of P is both executable and achieves a; and in return, he comes up with a polynomial-time algorithm for determining the necessary truth of a. <p> Among other things, our results solve an open problem posed by Chapman <ref> [5] </ref>, and clear up some difficulties with his undecidability theorems. It is not a 4 In both cases, they state that the problem is NP-hard, but their proofs establish co-NP-hardness. 14 trivial task to extend this equivalence, because negation has different semantics for logic programming and planning.
Reference: [6] <author> Eugene Charniak and Drew McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference: [7] <author> Stephen V. Chenoweth. </author> <title> On the NP-hardness of blocks world. </title> <booktitle> In AAAI-91: Proc. Ninth National Conf. Artificial Intelligence, </booktitle> <pages> pages 623-628, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Under this same set of goal interactions, they have also developed some efficient algorithms for merging plans to achieve multiple goals [34,35]. Complexity results have been developed for blocks-world planning by Gupta and Nau [16,17] and also by Chenoweth <ref> [7] </ref>. Gupta and Nau [16,17] have shown that the complexity of blocks-world planning arises not from deleted-condition interactions as was previously thought, but instead from enabling-condition interactions.
Reference: [8] <author> Thomas Dean and Mark Boddy. </author> <title> Reasoning about partially ordered events. </title> <journal> Artificial Intelligence, </journal> <volume> 36 </volume> <pages> 375-399, </pages> <year> 1988. </year>
Reference-contexts: It does not|and our decidability and complexity results are unaffected by whether or not the operators have conditional effects. (v) Chapman [5] and Dean and Boddy <ref> [8] </ref> studied planning with conditional operators, and showed that the problem of deciding whether a proposition is necessarily true after a partially ordered plan (a.k.a modal truth criterion) is NP-hard in the presence of conditional operators. <p> The following formulation of conditional planning operators is due to Dean and Boddy <ref> [8] </ref>. A conditional operator ff is a finite set ft 1 ; t 2 ; : : : ; t n g, where each t i is a triple of the form hPre i ; Del i ; Add i i. <p> However, his algorithm does not work correctly for establishing the possible truth of a (Nau [23] proves that problem is NP-hard). Chapman also proves that with conditional planning operators, establishing the necessary truth of a is co-NP-hard; and Dean and Boddy <ref> [8] </ref> prove a similar result with a more general notion of conditional planning operators (the same definition we gave in Section 2.2). 4 Dean and Boddy [8] also try to come up with approximate solutions for the problem. <p> Chapman also proves that with conditional planning operators, establishing the necessary truth of a is co-NP-hard; and Dean and Boddy <ref> [8] </ref> prove a similar result with a more general notion of conditional planning operators (the same definition we gave in Section 2.2). 4 Dean and Boddy [8] also try to come up with approximate solutions for the problem. They present algorithms for computing a subset of the propositions that are necessarily true, and for computing a superset of the propositions that are possibly true.
Reference: [9] <author> K. Erol, J. Hendler, and D. Nau. </author> <title> Complexity results for hierarchical task-network planning. </title> <note> 1993. Submitted for journal publication. </note>
Reference: [10] <author> K. Erol, D. Nau, and V. S. Subrahmanian. </author> <title> Complexity, decidability and undecidability results for domain-independent planning. </title> <type> Technical Report CS-TR-2797, </type> <institution> UMIACS-TR-91-154, SRC-TR-91-96, Computer Science Department and Institute for Systems Research, University of Maryland, College Park, MD, </institution> <year> 1991. </year>
Reference-contexts: Section 2 contains the basic definitions. Section 3 discusses the decidability and undecidability results. Section 4 discusses the complexity results. Section 5 discusses the related work. Section 6 contains concluding remarks, and discusses future research directions. For a more extensive treatment, including all of the mathematical details, see <ref> [10] </ref>. 2 Preliminaries Researchers in planning have long been interested in planning with STRIPS-style operators, and this interest still continues [3,5,16,22,20]. In the original 3 STRIPS planner [13], the planning operators' precondition lists, add lists, and delete lists were allowed to contain arbitrary well-formed formulas in first-order logic. <p> Note that all triples with satisfied preconditions contribute to the output state. Our results are independent of whether we use conditional operators such as the ones defined above, or the ordinary STRIPS-style planning operators in Section 2.1. 3 Decidability and Undecidability Results In <ref> [10] </ref>, we have proved theorems that show: (i) how to transform a planning domain with delete lists into one without delete lists when L contains no function symbols; (ii) how to transform, in polynomial time, a planning domain without delete lists and without negative preconditions into a logic program such that <p> This equivalence allows us to transport many results from logic programming to planning, leading to a number of decidabil-ity and undecidability results. Our decidability and undecidability results are summarized in Table 1 (for their details, see <ref> [10] </ref>). <p> The results are summarized in Table 2; for details see <ref> [10] </ref>. <p> Otherwise, we can replace the conditional operators with a number of ordinary STRIPS-style operators, to obtain an equivalent planning domain <ref> [10] </ref>. (ii) Comparing the complexity of plan existence in the propositional case (in which all predicates are restricted to be 0-ary) with the datalog case (in which the predicates may have constants or variables as arguments) reveals a regular pattern.
Reference: [11] <author> K. Erol, D. Nau, and V. S. Subrahmanian. </author> <title> When is planning decidable? In Proc. </title> <booktitle> First Internat. Conf. AI Planning Systems, </booktitle> <pages> pages 222-227, </pages> <month> June </month> <year> 1992. </year>
Reference: [12] <author> K. Erol, D. S. Nau, and J. Hendler. </author> <title> Toward a general framework for hierarchical task-network planning. </title> <booktitle> In AAAI Spring Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference: [13] <author> R. E. Fikes and N. J. Nilsson. </author> <title> Strips: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference-contexts: Section 6 contains concluding remarks, and discusses future research directions. For a more extensive treatment, including all of the mathematical details, see [10]. 2 Preliminaries Researchers in planning have long been interested in planning with STRIPS-style operators, and this interest still continues [3,5,16,22,20]. In the original 3 STRIPS planner <ref> [13] </ref>, the planning operators' precondition lists, add lists, and delete lists were allowed to contain arbitrary well-formed formulas in first-order logic. However, there were a number of problems with this formulation, such as the difficulty of providing a well-defined semantics for it [19].
Reference: [14] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The definition of plan length follows the standard procedure for converting optimization problems into yes/no decision problems (cf. <ref> [14, pp. 115-117] </ref>). 5 2.2 Special-Case Definitions 2.2.1 Acyclicity and Boundedness In this section, we introduce various restrictions on the structure of planning domains and/or goals which guarantee that the planning problem is decidable, even if function symbols are allowed in the language.
Reference: [15] <author> R. L. Graham, D. E. Knuth, and O. Patashnik. </author> <title> Concrete Mathematics: a Foundation for Computer Science. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: This problem is at least as difficult as plan length, and in some cases harder. For example, in the Towers of Hanoi problem [1] and certain generalizations of it <ref> [15] </ref>, the length of the shortest plan can be found in low-order polynomial time| but actually producing this plan requires exponential time and space, since the plan has exponential length.
Reference: [16] <author> Naresh Gupta and Dana S. Nau. </author> <title> Complexity results for blocks-world planning. </title> <booktitle> In Proc. AAAI-91, </booktitle> <year> 1991. </year> <note> Honorable mention for the best paper award. </note>
Reference: [17] <author> Naresh Gupta and Dana S. Nau. </author> <title> On the complexity of blocks-world planning. </title> <journal> Artificial Intelligence, </journal> <volume> 56(2-3):223-254, </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: This is because what makes the problem hard is how to handle enabling-condition interactions. Enabling-condition interactions are discussed in more detail in <ref> [17] </ref>, but the basic idea is that a sequence of actions that achieves one subgoal might also achieve other subgoals or make it easier to achieve them. Although such interactions will not affect plan existence, they will affect plan length, because they make it possible to produce a shorter plan. <p> For those cases where planning is decidable, we have shown how the time complexity varies depending on a wide variety of conditions. Our results suggest that for finding optimum plans, enabling-condition interactions (first described by Gupta and Nau <ref> [17] </ref>) can be just as important as the better-known deleted-condition interactions. In addition, we have also shown that delete lists are more powerful than negated preconditions, and that conditional operators do not affect the complexity of planning.
Reference: [18] <author> Richard Korf. </author> <title> Planning as search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 65-88, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: When these restrictions are released, their planning algorithm performs in exponential time. It is not very easy to compare our results with theirs, because we use a different formalism, but we can safely state that we analyze a much broader range of problems. Korf <ref> [18] </ref> has pointed out that given certain assumptions, one can reduce exponentially the time required to solve a conjoined-goal planning problem, provided that the individual goals are independent.
Reference: [19] <author> Vladimir Lifschitz. </author> <title> On the semantics of STRIPS. </title> <editor> In James Allen, James Hendler, and Austin Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 523-530. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year> <month> 16 </month>
Reference-contexts: In the original 3 STRIPS planner [13], the planning operators' precondition lists, add lists, and delete lists were allowed to contain arbitrary well-formed formulas in first-order logic. However, there were a number of problems with this formulation, such as the difficulty of providing a well-defined semantics for it <ref> [19] </ref>. Thus, in subsequent work, researchers have placed some restrictions on the nature of the planning operators [24]. Typically, the precondition lists, add lists and delete lists contain only atoms, and the goal is a conjunct of ground or existentially quantified atoms.
Reference: [20] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In AAAI-91, </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference: [21] <author> Drew McDermott. </author> <title> Regression planning. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: This question is especially important in partial-order planners such as NOAH [28], NONLIN [32], and SIPE [33]. For example, McDermott <ref> [21] </ref> says "unfortunately, partial orders have a big problem, that there is no way of deciding what is true for sure before a step without considering all possible step sequences consistent with the current partial order," and Pednault [25] also expresses similar sentiments.
Reference: [22] <author> S. Minton, J. Bresna, and M. Drummond. </author> <title> Commitment strategies in planning. </title> <booktitle> In Proc. IJCAI-91, </booktitle> <month> July </month> <year> 1991. </year>
Reference: [23] <author> D. Nau. </author> <title> On the complexity of possible truth. </title> <booktitle> In AAAI Spring Symposium, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: However, his algorithm does not work correctly for establishing the possible truth of a (Nau <ref> [23] </ref> proves that problem is NP-hard).
Reference: [24] <author> N. J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga, </publisher> <address> Palo Alto, </address> <year> 1980. </year>
Reference-contexts: However, there were a number of problems with this formulation, such as the difficulty of providing a well-defined semantics for it [19]. Thus, in subsequent work, researchers have placed some restrictions on the nature of the planning operators <ref> [24] </ref>. Typically, the precondition lists, add lists and delete lists contain only atoms, and the goal is a conjunct of ground or existentially quantified atoms. <p> Shoenfield [29]) for the language L, and hence each formula of first-order logic is either satisfied or not satisfied in S according to the usual first-order logic definition of satisfaction. We use STRIPS-style planning operators similar to those used by Nilsson <ref> [24] </ref>.
Reference: [25] <author> Edwin Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: This research has yielded some surprising results. For example, Gupta and Nau [16,17] have shown that contrary to prior expectations, deleted-condition interactions are easy to handle in blocks-world planning. Pednault <ref> [25] </ref> suggests that since planning is intractable in general, researchers should try to identify constraints that will lead to efficient planning. The current paper addresses this goal, by examining how the complexity of domain-independent planning depends on the nature of the planning operators. <p> For example, McDermott [21] says "unfortunately, partial orders have a big problem, that there is no way of deciding what is true for sure before a step without considering all possible step sequences consistent with the current partial order," and Pednault <ref> [25] </ref> also expresses similar sentiments. One problem is what it means for a to be necessarily true if not all total orderings of P are executable.
Reference: [26] <author> M. A. Peot. </author> <title> Conditional nonlinear planning. </title> <booktitle> In Proc. First International Conference on AI Planning Systems, </booktitle> <pages> pages 189-197, </pages> <year> 1992. </year>
Reference: [27] <author> E. D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference: [28] <author> Earl D. Sacerdoti. </author> <title> The nonlinear nature of plans. </title> <editor> In James Allen, James Hendler, and Austin Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 162-170. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year> <note> Originally appeared in Proc. IJCAI-75, pp. 206-214. </note>
Reference-contexts: Given an atom a, an initial state S 0 , and a partially ordered set of actions P , the question is whether a is necessarily/possibly true after execution of P . This question is especially important in partial-order planners such as NOAH <ref> [28] </ref>, NONLIN [32], and SIPE [33].
Reference: [29] <author> J. Shoenfield. </author> <title> Mathematical Logic. </title> <publisher> Academic Press, </publisher> <year> 1967. </year>
Reference-contexts: Intuitively, a state tells us which ground atoms are currently true: if a ground atom A is in state S, then A is true in state S, and if B =2 S, then B is false in state S. Thus, a state is simply an Herbrand interpretation (cf. Shoenfield <ref> [29] </ref>) for the language L, and hence each formula of first-order logic is either satisfied or not satisfied in S according to the usual first-order logic definition of satisfaction. We use STRIPS-style planning operators similar to those used by Nilsson [24].
Reference: [30] <author> V.S. Subrahmanian, C. Zaniolo. </author> <title> Database Updates and AI Planning Domains. </title> <type> Technical Report CS-TR-3173, </type> <institution> UMIACS-TR-93-118, Computer Science Department, University of Maryland, College Park, MD, </institution> <year> 1993. </year>
Reference-contexts: It is not a 4 In both cases, they state that the problem is NP-hard, but their proofs establish co-NP-hardness. 14 trivial task to extend this equivalence, because negation has different semantics for logic programming and planning. One recent result in this direction is the following: Subrahmanian and Zaniolo <ref> [30] </ref> have shown that STRIPS-style planning (with delete lists and negative preconditions) can be transformed, in polynomial time, to a class of logic programs with negation. Based on this transformation, they show how logic programming update techniques can be used to handle "surprises" that may occur during plan execution.
Reference: [31] <editor> A. Tate, J. Hendler, and M. </editor> <title> Drummond. A review of ai planning techniques. </title> <editor> In James Allen, James Hendler, and Austin Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 26-49. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference: [32] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. 5th International Joint Conf. Artificial Intelligence, </booktitle> <year> 1977. </year>
Reference-contexts: Given an atom a, an initial state S 0 , and a partially ordered set of actions P , the question is whether a is necessarily/possibly true after execution of P . This question is especially important in partial-order planners such as NOAH [28], NONLIN <ref> [32] </ref>, and SIPE [33]. For example, McDermott [21] says "unfortunately, partial orders have a big problem, that there is no way of deciding what is true for sure before a step without considering all possible step sequences consistent with the current partial order," and Pednault [25] also expresses similar sentiments.
Reference: [33] <author> David E. Wilkins. </author> <title> Domain-independent planning: Representation and plan generation. </title> <editor> In James Allen, James Hendler, and Austin Tate, editors, </editor> <booktitle> Readings in Planning, </booktitle> <pages> pages 319-335. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year> <note> Originally appeared in Artificial Intelligence 22(3), </note> <month> April </month> <year> 1984. </year>
Reference-contexts: Given an atom a, an initial state S 0 , and a partially ordered set of actions P , the question is whether a is necessarily/possibly true after execution of P . This question is especially important in partial-order planners such as NOAH [28], NONLIN [32], and SIPE <ref> [33] </ref>. For example, McDermott [21] says "unfortunately, partial orders have a big problem, that there is no way of deciding what is true for sure before a step without considering all possible step sequences consistent with the current partial order," and Pednault [25] also expresses similar sentiments.
Reference: [34] <author> Q. Yang, D. S. Nau, and J. Hendler. </author> <title> Optimization of multiple-goal plans with limited interaction. </title> <booktitle> In Proc. DARPA Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <year> 1990. </year>
Reference: [35] <author> Q. Yang, D. S. Nau, and J. Hendler. </author> <title> Merging separately generated plans with restricted interactions. </title> <journal> Computational Intelligence, </journal> <volume> 8(2) </volume> <pages> 648-676, </pages> <month> February </month> <year> 1992. </year> <month> 17 </month>
Reference-contexts: Korf [18] has pointed out that given certain assumptions, one can reduce exponentially the time required to solve a conjoined-goal planning problem, provided that the individual goals are independent. Yang, Nau, and Hendler <ref> [35] </ref> have generalized this, showing that one can still exponentially reduce the time required for planning even if the goals are not independent, provided that only certain kinds of goal interactions are allowed.
References-found: 35

