URL: http://www.eecs.umich.edu/HPS/pub/mhybrid_isca23.ps
Refering-URL: http://www.eecs.umich.edu/HPS/hps_branchpred.html
Root-URL: http://www.cs.umich.edu
Email: email: folaf,pychang,pattg@eecs.umich.edu  
Title: Using Hybrid Branch Predictors to Improve Branch Prediction Accuracy in the Presence of Context Switches  
Author: Marius Evers Po-Yung Chang Yale N. Patt 
Keyword: branch prediction, context switch, superscalar, speculative execution  
Address: Ann Arbor, Michigan 48109-2122  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: In a less idealized environment, such as a time-shared system, code of interest involves context switches. Context switches, even at fairly large intervals, can seriously degrade the performance of many of the most accurate branch prediction schemes. In this paper, we introduce a new hybrid branch predictor and show that it is more accurate (for a given cost) than any previously published scheme, especially if the branch histories are periodically flushed due to the presence of context switches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Chang and U. Banerjee, </author> <title> "Profile-guided Multi-heuristic Branch Prediction", </title> <booktitle> Proceedings of the International Conference on Parallel Processing, </booktitle> <month> July, </month> <year> 1995. </year>
Reference-contexts: To improve branch prediction, various branch prediction strategies have been studied [13, 14]. These sophisticated branch predictors use branch history to achieve higher performance. Recently, several hybrid branch predictors have been proposed that combine multiple prediction strategies into a single predictor <ref> [7, 2, 1] </ref>. These predictors use a selection mechanism to determine the most suitable 0 component predictor for predicting each branch. Hybrid branch predictors have achieved higher prediction accuracies than single-scheme predictors by exploiting the strengths of each of their component predictors. <p> Since the contents of PHT are determined statically, the PSg scheme trades the benefits of having the ability to adapt for the benefits of having no PHT warm-up time and simpler implementation. To further improve prediction accuracy, hybrid branch predictors have recently been proposed <ref> [7, 2, 1, 3] </ref>. A hybrid branch predictor is composed of two or more single-scheme predictors and a mechanism to select among these predictors. <p> By classifying branches based on their dynamic taken-rates, they proposed a hybrid branch predictor which uses the profile-guided predictor for branches that are mostly-taken or mostly-not-taken and McFarling's hybrid predictor for the remaining branches. Chang and Banerjee <ref> [1] </ref> proposed the AVG predictor which can accurately predict loop branches. The AVG predictor keeps track of the average number of iterations executed for each loop. <p> As the number of branches executed after a context switch increases, the large dynamic predictors will become more accurate. The small dynamic predictors are included to provide a smooth transition from the static schemes to the large dynamic branch predictors. Chang and Banerjee <ref> [1] </ref> showed that the AVG predictor is particularly effective in capturing the behavior of regular loop branches. The Multi-Hybrid includes the AVG predictor because of its superior accuracy in predicting these branches. 4 Experiments We simulated the Multi-Hybrid and other relevant predictors for various predictor sizes and context switch intervals. <p> As in the gshare scheme, the branch history is XORed with the branch address to select the appropriate PHT entry. 2 11 m + 2 m+1 loop (m) an AVG predictor <ref> [1] </ref> where the prediction of a loop's exit is based on the iteration count of the previous run of this loop. A 2K entry array of two m-bit counters is used to keep the iteration counts of loops.
Reference: [2] <author> P.-Y. Chang, E. Hao, T.-Y. Yeh, and Y.N. Patt, </author> <title> "Branch Classification: a New Mechanism for Improving Branch Predictor Performance", </title> <booktitle> 27th ACM/IEEE International Symposium on Microar-chitecture, </booktitle> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: To improve branch prediction, various branch prediction strategies have been studied [13, 14]. These sophisticated branch predictors use branch history to achieve higher performance. Recently, several hybrid branch predictors have been proposed that combine multiple prediction strategies into a single predictor <ref> [7, 2, 1] </ref>. These predictors use a selection mechanism to determine the most suitable 0 component predictor for predicting each branch. Hybrid branch predictors have achieved higher prediction accuracies than single-scheme predictors by exploiting the strengths of each of their component predictors. <p> Effective dynamic selection mechanisms have been proposed for hybrid branch predictors that consist of only two components [7]. For predictors with larger numbers of predictor components, a static selection mechanism, Branch Classification, has been proposed <ref> [2] </ref>. However, the effectiveness of this mechanism is limited because of its inability to adapt to changes during program execution. Previous studies [9, 11] have shown that the performance of single-scheme predictors deteriorates when the branch history information is periodically destroyed. <p> Since the contents of PHT are determined statically, the PSg scheme trades the benefits of having the ability to adapt for the benefits of having no PHT warm-up time and simpler implementation. To further improve prediction accuracy, hybrid branch predictors have recently been proposed <ref> [7, 2, 1, 3] </ref>. A hybrid branch predictor is composed of two or more single-scheme predictors and a mechanism to select among these predictors. <p> The most significant bit of the counter determines which one of the two predictors to use. Predictor 1 Predictor 2 Update to Counter Correct Correct No Change Correct Incorrect Increment Incorrect Correct Decrement Incorrect Incorrect No Change Table 1: Counter Update Rules Chang et al. <ref> [2] </ref> proposed branch classification as another method to construct hybrid branch predictors. Branch classification allows an individual branch instruction to be associated with the branch predictor best suited to predict its direction.
Reference: [3] <author> P.-Y. Chang, E. Hao, and Y.N. Patt, </author> <title> "Alternative Implementations of Hybrid Branch Predictors", </title> <booktitle> 28th ACM/IEEE International Symposium on Microar-chitecture, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Since the contents of PHT are determined statically, the PSg scheme trades the benefits of having the ability to adapt for the benefits of having no PHT warm-up time and simpler implementation. To further improve prediction accuracy, hybrid branch predictors have recently been proposed <ref> [7, 2, 1, 3] </ref>. A hybrid branch predictor is composed of two or more single-scheme predictors and a mechanism to select among these predictors. <p> Thus, when the branch is fetched, the previously calculated priority encoding is used to select the appropriate prediction; the resulting selection mechanism will require only one extra mux delay for choosing the appropriate prediction from the component predictors. 3.2 Component Predictors Chang et al <ref> [3] </ref> showed that the gshare and PAs combination effectively exploits both inter-branch and intra-branch correlation. The gshare component is able to accurately predict branches whose outcomes are dependent on the outcomes of other static branches.
Reference: [4] <author> P. Chow and M. Horowitz, </author> <title> "Architecture tradeoffs in the design of MIPS-X," </title> <booktitle> Proceedings of the 14th Annual International Symposium on Computer Architecture, </booktitle> <month> June </month> <year> 1987. </year>
Reference-contexts: These prediction schemes can be divided into two groups: static and dynamic predictors. Static branch prediction schemes use information gathered before program execution, such as branch op-codes or profiles, to predict branch direction. The simplest of these predicts that all conditional branches are always taken as in Stanford MIPS-X <ref> [4] </ref>, or always not-taken as in Motorola MC88000 [8]. With additional hint bits in the branch opcodes, some processors [10] allow the compiler to pass prediction information to the hardware.
Reference: [5] <author> J. A. Fisher and S. M. Freudenberger, </author> <title> "Predicting Conditional Branch Directions from Previous Runs of a Program", </title> <booktitle> 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: The profile guided branch predictor bases its prediction on the direction the branch most frequently takes, which is determined by profiling the program on a training input data set <ref> [5] </ref>. Dynamic branch prediction algorithms use information gathered at run-time to predict branch direction. Smith [13] proposed a branch prediction scheme which uses a table of 2-bit saturating up-down counters to keep track of the direction a branch is more likely to take.
Reference: [6] <author> J.K.F. Lee and A.J. Smith, </author> <title> "Branch Prediction StrategiesBranch Target Buffer Design," </title> <journal> IEEE Computer, </journal> <volume> pp.6-22, </volume> <month> January </month> <year> 1984. </year>
Reference-contexts: The gshare scheme tries to better identify the machine execution states by using both the branch address and the branch history. Lee and Smith <ref> [6] </ref> proposed a scheme where the value of each Pattern History Table entry is determined statically, using profile information; this scheme is referred to as the PSg scheme by Yeh and Patt [16].
Reference: [7] <author> S. McFarling, </author> <title> "Combining Branch Predictors", </title> <note> WRL Technical Note TN-36, </note> <institution> Digital Equipment Corporation, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: To improve branch prediction, various branch prediction strategies have been studied [13, 14]. These sophisticated branch predictors use branch history to achieve higher performance. Recently, several hybrid branch predictors have been proposed that combine multiple prediction strategies into a single predictor <ref> [7, 2, 1] </ref>. These predictors use a selection mechanism to determine the most suitable 0 component predictor for predicting each branch. Hybrid branch predictors have achieved higher prediction accuracies than single-scheme predictors by exploiting the strengths of each of their component predictors. <p> For hybrid branch predictors to achieve high prediction accuracy, they must be able to apply the most appropriate component branch predictor to each branch. Effective dynamic selection mechanisms have been proposed for hybrid branch predictors that consist of only two components <ref> [7] </ref>. For predictors with larger numbers of predictor components, a static selection mechanism, Branch Classification, has been proposed [2]. However, the effectiveness of this mechanism is limited because of its inability to adapt to changes during program execution. <p> The lower bits of the branch address are used to select the appropriate Pattern History Table (PHT) and the contents of the branch history register select the appropriate 2-bit counter to use within that PHT. Several variations of the Two-Level Branch Predictor have been proposed [15]. McFarling <ref> [7] </ref> introduced gshare, a variation of the global-history Two-Level Branch Predictor which XORs the global branch history with the branch address to index into the PHT. <p> Since the contents of PHT are determined statically, the PSg scheme trades the benefits of having the ability to adapt for the benefits of having no PHT warm-up time and simpler implementation. To further improve prediction accuracy, hybrid branch predictors have recently been proposed <ref> [7, 2, 1, 3] </ref>. A hybrid branch predictor is composed of two or more single-scheme predictors and a mechanism to select among these predictors. <p> A hybrid branch predictor can exploit the different strengths of its single-scheme component predictors, enabling it to achieve a prediction accuracy greater than that achieved by any of its components alone. McFarling <ref> [7] </ref> proposed a selection mechanism that combines two branch predictors using an array of 2-bit saturating up-down counters to keep track of which predictor is currently more accurate for each branch; each branch is mapped to a counter via its address. <p> The version of PSg used in this study is the PSg (algo) [12]. 2 11 m + 2 m gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor <ref> [7] </ref> consisting of a single m-bit global branch history and a single pattern history table. m + 2 m+1 pshare (m) a modified version of the per-address variation of the Two-Level Adaptive Branch Predictor [15] consisting of 2K m-bit branch history registers and one pattern history table. <p> The PAs/gshare and the 2bC/gshare schemes are hybrid branch predictors that combine gshare with PAs and gshare with 2bC (the 2-bit counter scheme) respectively <ref> [7] </ref>. For these two schemes, 2048 2-bit counters are used for selecting the more accurate component predictor at run-time. We first analyze performance for the branch predictors when no context switches are modeled.
Reference: [8] <author> C. Melear, </author> <title> "The design of the 88000 RISC family," </title> <journal> IEEE MICRO, </journal> <volume> pp.26-38, </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: Static branch prediction schemes use information gathered before program execution, such as branch op-codes or profiles, to predict branch direction. The simplest of these predicts that all conditional branches are always taken as in Stanford MIPS-X [4], or always not-taken as in Motorola MC88000 <ref> [8] </ref>. With additional hint bits in the branch opcodes, some processors [10] allow the compiler to pass prediction information to the hardware.
Reference: [9] <author> R. Nair, </author> <title> "Dynamic Path-Based Branch Correlation", </title> <booktitle> 28th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: For predictors with larger numbers of predictor components, a static selection mechanism, Branch Classification, has been proposed [2]. However, the effectiveness of this mechanism is limited because of its inability to adapt to changes during program execution. Previous studies <ref> [9, 11] </ref> have shown that the performance of single-scheme predictors deteriorates when the branch history information is periodically destroyed. During the execution of programs, context switches may occur for various reasons, including I/O, page faults, end of time quantum, etc.
Reference: [10] <author> The PowerPC Architecture: </author> <title> A Specification for a New Family of RISC Processors, </title> <editor> Ed. C. May et al, </editor> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Francisco, CA, </address> <year> 1994. </year>
Reference-contexts: The simplest of these predicts that all conditional branches are always taken as in Stanford MIPS-X [4], or always not-taken as in Motorola MC88000 [8]. With additional hint bits in the branch opcodes, some processors <ref> [10] </ref> allow the compiler to pass prediction information to the hardware. The profile guided branch predictor bases its prediction on the direction the branch most frequently takes, which is determined by profiling the program on a training input data set [5].
Reference: [11] <author> C. Perleberg and A.J. Smith, </author> <title> "Branch Target Buffer Design and Optimization," </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(4) </volume> <pages> 396-412, </pages> <month> Apr. </month> <year> 1993. </year> <booktitle> 28th ACM/IEEE International Symposium on Mi-croarchitecture, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: For predictors with larger numbers of predictor components, a static selection mechanism, Branch Classification, has been proposed [2]. However, the effectiveness of this mechanism is limited because of its inability to adapt to changes during program execution. Previous studies <ref> [9, 11] </ref> have shown that the performance of single-scheme predictors deteriorates when the branch history information is periodically destroyed. During the execution of programs, context switches may occur for various reasons, including I/O, page faults, end of time quantum, etc.
Reference: [12] <author> S. Sechrest, C.-C. Lee, and Trevor Mudge, </author> <title> "The Role of Adaptivity in Two-Level Adaptive Branch Prediction," </title> <booktitle> 28th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Lee and Smith [6] proposed a scheme where the value of each Pattern History Table entry is determined statically, using profile information; this scheme is referred to as the PSg scheme by Yeh and Patt [16]. Sechrest et al. <ref> [12] </ref> introduced another method, PSg (algo), of statically determining the values in the PHT and showed that a statically determining table could perform nearly as well as an adaptive PHT for short branch histories. <p> two bit counters. 2 12 GAs (m,n) the global variation of the Two-Level Adaptive Branch Predictor [15] consisting of a single m-bit global branch history and n pattern history tables. m + 2 m+1 n PSg (m) a modified version of the per-address variation of the Two-Level Adaptive Branch Predictor <ref> [16, 12] </ref> consisting of 2K m-bit branch history registers and a single pattern history table (each PHT entry uses one statically determined hint bit instead of a 2bC). <p> The version of PSg used in this study is the PSg (algo) <ref> [12] </ref>. 2 11 m + 2 m gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor [7] consisting of a single m-bit global branch history and a single pattern history table. m + 2 m+1 pshare (m) a modified version of the per-address variation of
Reference: [13] <author> J.E. Smith, </author> <title> "A Study of Branch Prediction Strategies," </title> <booktitle> 8th International Symposium on Computer Architecture, </booktitle> <month> June </month> <year> 1981. </year>
Reference-contexts: 1 Introduction Branch prediction accuracy is a major performance factor in superscalar processor design. To improve branch prediction, various branch prediction strategies have been studied <ref> [13, 14] </ref>. These sophisticated branch predictors use branch history to achieve higher performance. Recently, several hybrid branch predictors have been proposed that combine multiple prediction strategies into a single predictor [7, 2, 1]. <p> The profile guided branch predictor bases its prediction on the direction the branch most frequently takes, which is determined by profiling the program on a training input data set [5]. Dynamic branch prediction algorithms use information gathered at run-time to predict branch direction. Smith <ref> [13] </ref> proposed a branch prediction scheme which uses a table of 2-bit saturating up-down counters to keep track of the direction a branch is more likely to take. Each branch is mapped via its address to a counter. <p> The results for a Multi-Hybrid of size 64 KByte also show that the performance for 2-bit and 3-bit up-down counters is similar. For the following experiments, we only consider the Multi-Hybrid using 2-bit up-down counters. Predictor Algorithm Cost (bits) 2bC the two bit counter predictor <ref> [13] </ref> consisting of an 2K entry array of two bit counters. 2 12 GAs (m,n) the global variation of the Two-Level Adaptive Branch Predictor [15] consisting of a single m-bit global branch history and n pattern history tables. m + 2 m+1 n PSg (m) a modified version of the per-address
Reference: [14] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "Two-level Adaptive Branch Prediction," </title> <booktitle> 24th ACM/IEEE International Symposium on Microarchitecture, </booktitle> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Branch prediction accuracy is a major performance factor in superscalar processor design. To improve branch prediction, various branch prediction strategies have been studied <ref> [13, 14] </ref>. These sophisticated branch predictors use branch history to achieve higher performance. Recently, several hybrid branch predictors have been proposed that combine multiple prediction strategies into a single predictor [7, 2, 1]. <p> These counters are updated based on the branch outcomes. When a branch is taken, the 2-bit value of the associated counter is incremented by one; otherwise, the value is decremented by one. By keeping more history information, a higher level of branch prediction accuracy can be attained <ref> [14] </ref>.
Reference: [15] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "Alternative Implementations of Two-level Adaptive Branch Prediction," </title> <booktitle> 19th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: The lower bits of the branch address are used to select the appropriate Pattern History Table (PHT) and the contents of the branch history register select the appropriate 2-bit counter to use within that PHT. Several variations of the Two-Level Branch Predictor have been proposed <ref> [15] </ref>. McFarling [7] introduced gshare, a variation of the global-history Two-Level Branch Predictor which XORs the global branch history with the branch address to index into the PHT. <p> For the following experiments, we only consider the Multi-Hybrid using 2-bit up-down counters. Predictor Algorithm Cost (bits) 2bC the two bit counter predictor [13] consisting of an 2K entry array of two bit counters. 2 12 GAs (m,n) the global variation of the Two-Level Adaptive Branch Predictor <ref> [15] </ref> consisting of a single m-bit global branch history and n pattern history tables. m + 2 m+1 n PSg (m) a modified version of the per-address variation of the Two-Level Adaptive Branch Predictor [16, 12] consisting of 2K m-bit branch history registers and a single pattern history table (each PHT <p> m gshare (m) a modified version of the global variation of the Two-Level Adaptive Branch Predictor [7] consisting of a single m-bit global branch history and a single pattern history table. m + 2 m+1 pshare (m) a modified version of the per-address variation of the Two-Level Adaptive Branch Predictor <ref> [15] </ref> consisting of 2K m-bit branch history registers and one pattern history table.
Reference: [16] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> "A Comparison of Dynamic Branch Predictors that Use Two Levels of Branch History", </title> <booktitle> 20th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Lee and Smith [6] proposed a scheme where the value of each Pattern History Table entry is determined statically, using profile information; this scheme is referred to as the PSg scheme by Yeh and Patt <ref> [16] </ref>. Sechrest et al. [12] introduced another method, PSg (algo), of statically determining the values in the PHT and showed that a statically determining table could perform nearly as well as an adaptive PHT for short branch histories. <p> two bit counters. 2 12 GAs (m,n) the global variation of the Two-Level Adaptive Branch Predictor [15] consisting of a single m-bit global branch history and n pattern history tables. m + 2 m+1 n PSg (m) a modified version of the per-address variation of the Two-Level Adaptive Branch Predictor <ref> [16, 12] </ref> consisting of 2K m-bit branch history registers and a single pattern history table (each PHT entry uses one statically determined hint bit instead of a 2bC).
References-found: 16

