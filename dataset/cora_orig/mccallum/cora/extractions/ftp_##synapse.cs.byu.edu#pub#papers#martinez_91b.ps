URL: ftp://synapse.cs.byu.edu/pub/papers/martinez_91b.ps
Refering-URL: ftp://synapse.cs.byu.edu/pub/papers/details.html
Root-URL: 
Title: A Self-Organizing Binary Decision Tree For Incrementally Defined Rule Based  
Author: Sy ste ms Tony R. Martinez and Douglas M. Campbell 
Address: Provo, Utah 84602  
Affiliation: Computer Science Department Brigham Young University  
Note: In IEEE Systems, Man, and Cybernetics, vol. 21, No. 5, pp.1231-1238, 1991.  
Abstract: This paper presents an ASOCS (adaptive self-organizing concurrent system) model for massively parallel processing of incrementally defined rule systems in such areas as adaptive logic, robotics, logical inference, and dynamic control. An ASOCS is an adaptive network composed of many simple computing elements operating asynchronously and in parallel. This paper focuses on adaptive algorithm 3 (AA3) and details its architecture and learning algorithm. It has advantages over previous ASOCS models in simplicity, implementability, and cost. An ASOCS can operate in either a data processing mode or a learning mode. During the data processing mode, an ASOCS acts as a parallel hardware circuit. In learning mode, rules expressed as boolean conjunctions are incrementally presented to the ASOCS. All ASOCS learning algorithms incorporate a new rule in a distributed fashion in a short, bounded time. 
Abstract-found: 1
Intro-found: 1
Reference: 10. <author> Martinez, T. R., </author> <title> Adaptive Self-Organizing Concurrent Systems, </title> <booktitle> in Progress in Neural Networks, </booktitle> <publisher> Ablex Publishing, </publisher> <year> 1989. </year>
Reference-contexts: 1. Introduction This paper gives an ASOCS (Adaptive Self-Organizing Concurrent System) architecture <ref> [7, 10] </ref> which guarantees learning for boolean rule based systems in bounded time. This particular ASOCS uses adaptive algorithm 3 and has significant simplicity, implementability, and cost advantages over previous ASOCS models [8,11]. Target applications include rule based systems for logical inference, robotics, adaptive logic, fault-recovery, and real-time dynamic control.
Reference: 11. <author> Martinez, T. R., </author> <title> Memory Efficient Adaptive Logic, </title> <note> Submitted. </note>
Reference-contexts: The majority of ASOCS research on adaptive algorithms has focused on adaptive algorithm 1, adaptive algorithm 2, and adaptive algorithm 3. Details for AA1 can be found in [8]; details for 2 AA2 can be found in <ref> [6, 11] </ref>. These three algorithms vary dramatically, although AA3 shares has some similarity to AA2. ASOCS arose from reexamining perceptron [13] related ideas. The basic building block, however, is that of digital programmable nodes, an idea spawned by the notion of a universal logic module (ULM) [17].
Reference: 12. <author> Martinez, T. R., </author> <title> Neural Network Applicability: Classifying the Problem Space, </title> <booktitle> Proceedings of the IASTED International Symposium on Expert Systems and Neural Networks, </booktitle> <month> August, </month> <year> 1989. </year>
Reference-contexts: There are random functions which appear to always require exponential demands, such as recognizing white noise on a raster screen, but these types of applications are expressly outside of the application domain targeted by both artificial and natural neural systems <ref> [12] </ref>. The application space for which neural networks and ASOCS are targeted feature input/output mappings where generalization and minimization can take place, thus allowing a parsimonious network solution.
Reference: 13. <author> Rosenblatt, F., </author> <title> Principles of Neurodynamics, </title> <publisher> Spartan Books, </publisher> <address> Washington, D.C. </address> <year> (1962). </year>
Reference-contexts: Details for AA1 can be found in [8]; details for 2 AA2 can be found in [6, 11]. These three algorithms vary dramatically, although AA3 shares has some similarity to AA2. ASOCS arose from reexamining perceptron <ref> [13] </ref> related ideas. The basic building block, however, is that of digital programmable nodes, an idea spawned by the notion of a universal logic module (ULM) [17]. Verstraete [16] sought methods of programming fixed ULM structures to solve arbitrary boolean mappings.
Reference: 14. <author> Rudolph, G., and T. R. Martinez, </author> <title> DNA: Towards an Implementation of ASOCS, </title> <booktitle> Proceedings of the IASTED International Symposium on Expert Systems and Neural Networks, </booktitle> <month> August, </month> <year> 1989. </year>
Reference-contexts: Complex connections exceeding 10 variables pass through a dynamic router into another 10-depth AA3 module. Extra modules are thus only used where required. Another class of mechanisms uses a logicallyindependent network with a single network node representing a Dnode, with the nodes connected to a broadcast topology <ref> [14] </ref> i.e. tree, mesh, optical, etc. These allow dynamic structure while maintaining parsimony of node usage at an implementation level. 8. Simulation and Comparison With Two Other Algorithms Software simulation of AA3 indicates that each instance generates two nodes on the average [6] for a single variable output.
Reference: 15. <author> Rumelhart, D. and McClelland, J., </author> <title> Parallel Distributed Processing: Explorations in the Microstructure of Cognition, Vol. I, </title> <publisher> MIT Press, </publisher> <year> (1986). </year>
Reference: 16. <author> Verstraete, R.A., </author> <title> Assignment of Functional Responsibility in Perceptrons, </title> <type> Ph.D. Dissertation, </type> <institution> Computer Science Department, University of California, </institution> <address> Los Angeles, CA, </address> <month> (June </month> <year> 1986). </year>
Reference-contexts: These three algorithms vary dramatically, although AA3 shares has some similarity to AA2. ASOCS arose from reexamining perceptron [13] related ideas. The basic building block, however, is that of digital programmable nodes, an idea spawned by the notion of a universal logic module (ULM) [17]. Verstraete <ref> [16] </ref> sought methods of programming fixed ULM structures to solve arbitrary boolean mappings. ASOCS departs drastically from these efforts by having a nonpassive network which adapts in a self-organizing fashion [6, 9]. This technique has led to models promising parallel inference, high speed adaptation, and internal consistency control [6,7,8,11].
Reference: 17. <author> Yau, S. S. and C. K. Tang, </author> <title> Universal Logic Circuits and their Modular Realizations, </title> <booktitle> AFIPS Conference Proceedings, </booktitle> <volume> vol. 32, </volume> <pages> pp. 297-305, </pages> <year> (1968). </year>
Reference-contexts: These three algorithms vary dramatically, although AA3 shares has some similarity to AA2. ASOCS arose from reexamining perceptron [13] related ideas. The basic building block, however, is that of digital programmable nodes, an idea spawned by the notion of a universal logic module (ULM) <ref> [17] </ref>. Verstraete [16] sought methods of programming fixed ULM structures to solve arbitrary boolean mappings. ASOCS departs drastically from these efforts by having a nonpassive network which adapts in a self-organizing fashion [6, 9].
References-found: 8

