URL: ftp://dirleton.csres.utexas.edu/pub/reports/095.ps
Refering-URL: http://www.cli.com/reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: for the Specification and Verification of Synchronous and Asynchronous Circuits  
Author: David M. Russinoff 
Date: September 1993  
Address: Austin, Texas  
Affiliation: COMPUTATIONAL LOGIC, INC.  
Note: A Formal Language  Contract NAS1-18878  
Abstract: NASA Contractor Report 191509 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bevier, William R. and Young, William D., </author> <title> Machine checked proofs of the Design and Implementation of a Fault-Tolerant Circuit, </title> <type> Technical Report 62, </type> <institution> Computational Logic, Inc., NASA CR-182099, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Our past work in the formalization and verification of fault-tolerant systems has consisted of three tasks: 1. The formal design and verification of a circuit that achieves Byzantine agreement among four synchronous processors <ref> [1] </ref>; 2. The mechanical verification of the Interactive Convergence clock syn chronization algorithm [9]; 3. The formalization of the Biphase Mark protocol for asynchronous com munication [7].
Reference: [2] <author> Borrione, Dominique D., Pierre, Laurence V., and Salem, Ashraf M., </author> <title> Formal verification of VHDL descriptions in the PREVAIL environment, </title> <booktitle> in IEEE Design and Test, </booktitle> <month> June, </month> <year> 1992. </year>
Reference: [3] <author> Boyer, R. S. and Moore, J, </author> <title> A Computational Logic Handbook, </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: Following [5], we have developed our language within the logical framework of the Nqthm system of Boyer and Moore <ref> [3] </ref>. Its simulator (operational) semantics are expressed by a recursive function SIM, defined in the Nqthm logic.
Reference: [4] <author> Brock, Bishop C. and Hunt, Warren A., Jr., </author> <title> A Formal HDL and its use in the FM9001 verification, </title> <booktitle> in Proceedings of the Royal Society, </booktitle> <year> 1992. </year>
Reference-contexts: Our previous research in hardware modeling and verification has been based on an HDL developed at CLI by Brock and Hunt [5]. The utility of the Brock-Hunt HDL as a verification tool, as demonstrated in the verification of the FM9001 microprocessor <ref> [4] </ref>, stems from the simplicity of its semantics. All circuits designed in this language are assumed to be driven by an implicit global clock. Simulation of a circuit amounts to a computation of a sequence of states corresponding to clock cycles.
Reference: [5] <author> Brock, Bishop C., Hunt, Warren A., Jr., and Young, William D., </author> <title> Introduction to a formally defined hardware description language. </title> <booktitle> In Proceedings of the IFIP Conference on Theorem Provers in Circuit Design, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: Thus, a prerequisite for the realization of our goal is the selection of a formal hardware description language (HDL), along with an underlying behavioral model. Our previous research in hardware modeling and verification has been based on an HDL developed at CLI by Brock and Hunt <ref> [5] </ref>. The utility of the Brock-Hunt HDL as a verification tool, as demonstrated in the verification of the FM9001 microprocessor [4], stems from the simplicity of its semantics. All circuits designed in this language are assumed to be driven by an implicit global clock. <p> At the same time, our language should provide for * faithful implementation of the VHDL notions of time and propagation delay; * gate-level construction of sequential devices by means of feedback loops, e.g., flip-flops implemented by cross-coupled nand gates; * modeling of asynchronous communication. Following <ref> [5] </ref>, we have developed our language within the logical framework of the Nqthm system of Boyer and Moore [3]. Its simulator (operational) semantics are expressed by a recursive function SIM, defined in the Nqthm logic. <p> Thus, one packet is said to generalize another if the relation holds between corresponding waveforms. 2.3 Propagation The functions POST-INERTIAL-EVENT-DEFINITE and POST-TRANSPORT-EVENT-DEFINITE implement inertial and transport delay, as defined in the VHDL standard <ref> [5] </ref>. Each of these functions takes as arguments a waveform w, a value v, and a time t1 at which v is to be scheduled on w.
Reference: [6] <author> Filippenko, Ivan V., </author> <title> VHDL verification in the State Delta Verification System, </title> <booktitle> in ACM SIGDA International Workshop on Formal Methods in VLSI Design, </booktitle> <month> January </month> <year> 1991. </year>
Reference: [7] <institution> Institute of Electrical and Electronic Engineers, </institution> <note> IEEE Standard VHDL Language Reference Manual, </note> <year> 1988. </year>
Reference-contexts: The formal design and verification of a circuit that achieves Byzantine agreement among four synchronous processors [1]; 2. The mechanical verification of the Interactive Convergence clock syn chronization algorithm [9]; 3. The formalization of the Biphase Mark protocol for asynchronous com munication <ref> [7] </ref>. The purpose of the present task, Task 4, is to investigate the integration of these previous efforts in the design of an asynchronous Byzantine-resilient computing system. The ultimate goal is a formally verified gate-level implementation. <p> Thus, no explicit representation of time or propagation delays is provided, so that the class of circuits that can be satisfactorily modeled is limited. In particular, the language is unsuitable for any application involving asynchrony. Commercial event-driven simulation languages provide for a broader range of hardware behaviors. VHDL <ref> [7] </ref> in particular has gained wide acceptance in the hardware design community as a validation tool. Since the limitations of simulation as a method of validation are well known, a formal verification 1 system based on VHDL would have clear practical value. <p> The top-level simulator function SIM is defined recursively in terms of STEP, as described in Section 4. The simulator is complicated considerably by the possible presence of delta delays, which represent zero-delay devices as prescribed in the VHDL standard <ref> [7] </ref>. In conformance with commercial VHDL simulators, in order to guarantee that simulation terminates, an extra argument is passed to SIM, representing a uniform bound on the lengths of all zero-delay paths within a circuit. Related constraints are also imposed on the input waveforms to a module. <p> Once this body of theorems is established, our next goal will be to extend the theory to the asynchronous realm. This effort will be driven by the design of a circuit that achieves communication between two asynchronous processors according to a version of the protocol that was formalized in <ref> [7] </ref>. The formal specification and verification of this design will be delivered with the report on Task 5.
Reference: [8] <author> Moore, J Strother, </author> <title> A Formal model of asynchronous communication and its use in mechanically verifying a biphase mark protocol, </title> <type> Technical Report 68, </type> <institution> Computational Logic, Inc., NASA CR-4433, </institution> <month> June </month> <year> 1992. </year> <month> 27 </month>
Reference: [9] <author> Young, William D., </author> <title> Verifying the interactive convergence clock synchro-nization algorithm using the Boyer-Moore theorem prover, </title> <type> Technical Report 77, </type> <institution> Computational Logic, Inc., NASA CR-189649, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Our past work in the formalization and verification of fault-tolerant systems has consisted of three tasks: 1. The formal design and verification of a circuit that achieves Byzantine agreement among four synchronous processors [1]; 2. The mechanical verification of the Interactive Convergence clock syn chronization algorithm <ref> [9] </ref>; 3. The formalization of the Biphase Mark protocol for asynchronous com munication [7]. The purpose of the present task, Task 4, is to investigate the integration of these previous efforts in the design of an asynchronous Byzantine-resilient computing system. The ultimate goal is a formally verified gate-level implementation.
References-found: 9

