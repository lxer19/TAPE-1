URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/dpetrou/www/papers/slic98.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/dpetrou/www/research.html
Root-URL: 
Email: ghorm@cs.berkeley.edu  dpetrou@cs.cmu.edu  steverod@netapp.com  tom@cs.washington.edu  
Title: SLIC: An Extensibility System for Commodity Operating Systems  
Author: Douglas P. Ghormley David Petrou Steven H. Rodrigues Thomas E. Anderson 
Note: This work was supported in part by the Defense Advanced Research Projects Agency (N00600-93-C-2481, F30602-95-C-0014), the National Sci- ence Foundation (CDA 9401156),  Anderson was also supported by a National Science Foundation Presidential Faculty Fellowship.  
Address: Berkeley  Washington  
Affiliation: U.C.  Carnegie Mellon University  Network Appliance, Inc.  University of  Sun Microsystems, California MICRO, Hewlett Packard, Intel, Microsoft, and Mitsubishi.  
Abstract: Modern commodity operating systems are large and complex systems developed over many years by large teams of programmers, containing hundreds of thousands of lines of code. Consequently, it is extremely difficult to add significant new functionality to these systems. In response to this problem, a number of recent research projects have explored novel operating system architectures to support untrusted extensions, including SPIN, VINO, Exokernel, and Fluke. Un- fortunately, these architectures require substantial implementation effort and are not generally available in commodity systems. In contrast, by leveraging the technique of interposition, we have designed and implemented a prototype extension system called SLIC which requires only trivial operating system changes. SLIC efficiently inserts trusted extension code into commodity operating systems, enabling a large class of trusted extensions for existing commodity operating systems such as Solaris and Linux, while retaining full compatibility with existing application binaries. By interposing trusted extensions on existing kernel interfaces, our solution enables extensions which are protected from malicious applications, are enforced upon uncooperative applications, are compos- able with extensions from other third-party sources, and can be developed at the user-level using state-of-the-art development tools. We have used SLIC to implement and demonstrate a number of useful operating system extensions, including a patch to fix a security hole described in a CERT advisory, a simple encryption file system, and a restricted execution environment for arbitrary untrusted binaries. Perfor- mance measurements of the SLIC prototype demonstrate a one-time installation cost of 2-8 msec and a per-extension invocation overhead commensurate with a procedure call. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation For UNIX Development. </title> <booktitle> In Proceedings of the 1986 USENIX Summer Conference, </booktitle> <pages> pages 93-112, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state of the art. Conse- quently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [12, 1, 34] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains. <p> We believe that no other system provides this powerful combination of features for extending existing commodity operating systems. Prior attempts to extend the operating system without significant modification suffered from significant limitations. Interposition Agents [20] leverages the Mach <ref> [1] </ref> system call redirection facility to transparently insert user-level extensions at the system call interface. However, because extensions run unprotected in the application's address space and require application cooperation, extensions cannot enforce security guarantees or manage shared resources for competing applications. <p> The disadvantage of this approach is that invoking the extension from the dispatcher requires costly context switches and kernel boundary crossings. This organization is similar to that employed by micro-kernels such as Mach <ref> [1] </ref> and /proc based systems such as Ufo [2] but differs in that it supports extension stacking. To maximize performance once development and testing are complete, extensions can be loaded directly into the kernel where they are invoked directly from the dispatcher with a procedure call.
Reference: [2] <author> Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman. </author> <title> Extending the Operating System at the User-Level: the Ufo Global File System. </title> <booktitle> In USENIX, editor, Proceedings of the 1997 USENIX Conference, </booktitle> <pages> pages 77-90, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The disadvantage of this approach is that invoking the extension from the dispatcher requires costly context switches and kernel boundary crossings. This organization is similar to that employed by micro-kernels such as Mach [1] and /proc based systems such as Ufo <ref> [2] </ref> but differs in that it supports extension stacking. To maximize performance once development and testing are complete, extensions can be loaded directly into the kernel where they are invoked directly from the dispatcher with a procedure call.
Reference: [3] <author> C. Amza, Alan L. Cox, Sandhya Dwarkadas, Peter Keleher, H. Lu, R. Rajamony, Weimin Yu, and Willy Zwaenepoel. TreadMarks: </author> <title> Shared memory comput-ing on networks of workstations. </title> <journal> IEEE Computer, </journal> <volume> 29(2) </volume> <pages> 18-28, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its widespread use throughout modern computing systems. Forms of interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks <ref> [3] </ref>, the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system
Reference: [4] <author> Arindam Banerji, John M. Tracey, and David L. Cohn. </author> <title> Protected Shared Libraries a new approach to modu-larity and sharing. </title> <booktitle> In Proceedings of the 1997 USENIX Technical Conference, </booktitle> <pages> pages 59-76, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Software Fault Isolation (SFI) [45] can be used to protect extensions from applications even when loaded in the same address space. Unfortunately, SFI requires a number of compiler optimizations to achieve low overhead and therefore cannot be applied efficiently to existing application binaries. Protected Shared Libraries <ref> [4] </ref> has the same capability as SFI without the need for compiler optimizations, but does not enforce extensions on applications. <p> COLA [24] enables interposition at the system call interface, but without any modification of the operating system kernel. It operates through interposition at the library level and consequently suffers from the same security drawbacks as the Mach interposition technology described above. Protected Shared Libraries (PSL) <ref> [4] </ref> enables extensions to be securely loaded into an application's address space, so that user programs cannot access or modify extension code or data. PSL does not provide a mechanism for enforcing extensions on applications, which SLIC does.
Reference: [5] <author> B. N. Bershad, S. Savage, E. G. Sirer P. Pardyak, M. Fiuczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Over the years, a number of systems have attempted to reduce the cost of adding new operating system functionality by re-engineering the operating system to be extensible. Systems built using this approach include Hydra [48], SPIN <ref> [5] </ref>, VINO [36], Exokernel [14], and Fluke [15]. While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT [50]. <p> This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system. <p> Managing shadow structures for processes and threads complicates SLIC and increases kernel memory consumption. Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work <ref> [36, 5, 14, 15] </ref> that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN [5] and VINO [36] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. <p> Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work [36, 5, 14, 15] that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN <ref> [5] </ref> and VINO [36] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility.
Reference: [6] <author> Brian Bershad, Thomas Anderson, Edward Lazowska, and Henry Levy. </author> <title> Lightweight Remote Procedure Calls. </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pages 3754, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives <ref> [6, 44] </ref>, upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [7] <author> C. Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Manber, and Michael F. Schwartz. </author> <title> The Harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Forms of interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches <ref> [7] </ref>, MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [8] <author> Edouard Bugnion, Scott Devine, and Mendel Rosenblum. </author> <title> Disco: Running Commodity Operating Systems on Scalable Multiprocessors. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 27-37, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: Finally, the PSL protection technique relies on per-thread segment protections supported by the IBM RS/6000 architecture, while the principles in SLIC are generally applicable across a variety of operating system platforms. Disco <ref> [8] </ref> and Fluke [15] are virtual machine monitors which use strategies similar to those of SLIC for different purposes. Disco uses interposition and binary rewriting to ease the implementation of operating systems for new architectures, rather than adding extensibility to existing operating systems, as SLIC does.
Reference: [9] <author> David D. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 171-180, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls <ref> [9] </ref>, distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [10] <institution> Chaos Computer Club. CCC: Microsoft security alert. </institution> <address> http://berlin.ccc.de/radioactivex.html, March 1997. </address>
Reference-contexts: There are many cases, however, in which the user does not fully trust the program being run. For example, programs downloaded from untrusted sources may actually be Tro- jan horses designed to steal or destroy information <ref> [47, 10] </ref>. In addition, there are cases in which the user trusts the program, but not the data being processed, as in the case of web browser helper applications used by web browsers to display various data formats.
Reference: [11] <author> Apple Computers. </author> <title> Inside Macintosh, Macintosh Toolbox Essentials. </title> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions <ref> [11] </ref>. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [12] <author> Fred Douglis and John Ousterhout. </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-85, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state of the art. Conse- quently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [12, 1, 34] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains. <p> Although modifying commodity operating systems is complex and difficult, the need to do so remains. There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration <ref> [43, 12] </ref>, fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27].
Reference: [13] <author> Andrea C. Dusseau, Remzi H. Arpaci, and David E. Culler. </author> <title> Effective Distributed Scheduling of Parallel Workloads. </title> <booktitle> In Proceedings of the 1996 ACM SIGMETRICS Conference, </booktitle> <year> 1996. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers <ref> [46, 13, 27] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [14] <author> D. R. Engler, M. F. Kaashoek, and Jr J. O'Toole. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Over the years, a number of systems have attempted to reduce the cost of adding new operating system functionality by re-engineering the operating system to be extensible. Systems built using this approach include Hydra [48], SPIN [5], VINO [36], Exokernel <ref> [14] </ref>, and Fluke [15]. While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT [50]. <p> Managing shadow structures for processes and threads complicates SLIC and increases kernel memory consumption. Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work <ref> [36, 5, 14, 15] </ref> that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN [5] and VINO [36] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility.
Reference: [15] <author> Bryan Ford, Mike Hibler, Jay Lepreau, Patrick Tullman, Godmar Back, and Steven Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Over the years, a number of systems have attempted to reduce the cost of adding new operating system functionality by re-engineering the operating system to be extensible. Systems built using this approach include Hydra [48], SPIN [5], VINO [36], Exokernel [14], and Fluke <ref> [15] </ref>. While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT [50]. <p> Managing shadow structures for processes and threads complicates SLIC and increases kernel memory consumption. Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work <ref> [36, 5, 14, 15] </ref> that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN [5] and VINO [36] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. <p> Finally, the PSL protection technique relies on per-thread segment protections supported by the IBM RS/6000 architecture, while the principles in SLIC are generally applicable across a variety of operating system platforms. Disco [8] and Fluke <ref> [15] </ref> are virtual machine monitors which use strategies similar to those of SLIC for different purposes. Disco uses interposition and binary rewriting to ease the implementation of operating systems for new architectures, rather than adding extensibility to existing operating systems, as SLIC does.
Reference: [16] <author> Simon Garfinkel. PGP: </author> <title> Pretty Good Privacy. </title> <publisher> O'Reilly and Associates, </publisher> <address> Sebastopol, CA, first edition, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: In a networked environment with a central file server, traditional Unix file protections can be easily circumvented by monitoring network traffic. To protect sensitive files, users may use encryption tools such as PGP <ref> [16] </ref>. However, stand-alone encryption tools and libraries can be time consuming or cumbersome to use and are not easily integrated with existing applications.
Reference: [17] <author> Ian Goldberg, David Wagner, Randy Thomas, and Eric Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Input data could potentially exploit bugs in helper applications such as ghostview to insert viruses into the system [38]. The tracing facility of the standard Solaris /proc file system is one method that has been used to construct a restricted execution environment <ref> [17] </ref>. Potentially insecure system calls are captured and then selectively denied or altered. The /proc approach, however, suffers from two primary shortcomings. First, intercepting system calls using /proc is expensive, requiring two context switches over the base system call overhead. This is especially problematic for system-call intensive applications. <p> Using SLIC we have implemented a restricted execution environment extension that does not have these limitations. This extension is a modified version of the Janus sys <p>- tem <ref> [17] </ref> and provides the user with a configurable security environment. For example, applications can be given a subset of read/write/execute access to any number of directory subtrees. The ability to fork () or to perform a variety of other system calls can be disabled.
Reference: [18] <author> Wilson Hsieh, Marc Fiuczynski, Charles Garrett, Stefan Savage, David Becker, and Brian N. Bershad. </author> <title> Language support for extensible operating systems. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system. <p> Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language <ref> [35, 18] </ref>, and VINO through software fault isolation [45] and in-kernel transactions [33]. In contrast, SLIC assumes trusted extensions and focuses on an evaluation of the technique of interposition and its suitability for legacy operating systems.
Reference: [19] <institution> IBM Virtual Machine Facility /370 Planning Guide. </institution> <type> Technical Report GC20-1801-0, </type> <institution> IBM Corporation, </institution> <year> 1974. </year>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its widespread use throughout modern computing systems. Forms of interposition can be found in virtual machines <ref> [19] </ref>, object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the
Reference: [20] <author> Michael B. Jones. </author> <title> Interposition Agents: Transparently Interposing User Code at the System Interface. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 80-93, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: We believe that no other system provides this powerful combination of features for extending existing commodity operating systems. Prior attempts to extend the operating system without significant modification suffered from significant limitations. Interposition Agents <ref> [20] </ref> leverages the Mach [1] system call redirection facility to transparently insert user-level extensions at the system call interface. However, because extensions run unprotected in the application's address space and require application cooperation, extensions cannot enforce security guarantees or manage shared resources for competing applications. <p> In contrast, SLIC assumes trusted extensions and focuses on an evaluation of the technique of interposition and its suitability for legacy operating systems. Interposition Agents <ref> [20] </ref> demonstrated the usefulness of constructing extensions in terms of the high- level abstractions of an interface (such as path names), rather than the low-level events crossing that interface (such as open ()). <p> Additionally, the multiple protection boundary crossings limit the performance of the system. SLIC enables high-performance interposition that is both enforced on and protected from applications, enabling a significantly larger class of extensions. In principle, the toolkit presented in <ref> [20] </ref> could be ported to SLIC, further simplifying the process of extension development. COLA [24] enables interposition at the system call interface, but without any modification of the operating system kernel.
Reference: [21] <author> Yousef Khalidi and Michael Nelson. </author> <title> Extensible File Systems in Spring. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 114, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Systems with poorly decomposed functionality may have few such interfaces. Second, new functionality can only be implemented in terms of existing functionality; for example, a cache-coherent file system can only be constructed through interposition if underlying layers expose a cache management mechanism in the file system interface <ref> [21] </ref>. Despite these limitations, the power and flexibility of interposition has led to its widespread use throughout modern computing systems.
Reference: [22] <author> Gregor Kiczales, Jim des Rivieres, and Daniel G. Bo-brow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its widespread use throughout modern computing systems. Forms of interposition can be found in virtual machines [19], object-oriented programming language systems <ref> [22] </ref>, distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding
Reference: [23] <author> Steven R. Kleiman. Vnodes: </author> <title> An architecture for mul-tiple file system types in Sun UNIX. </title> <booktitle> In Proceedings of the 1986 Summer USENIX Technical Conference, </booktitle> <pages> pages 238-247, </pages> <year> 1986. </year>
Reference-contexts: Consequently, extensibility architectures developed using this approach will remain unavailable to the average user for the foreseeable future. A small number of projects have taken the second approach of re-engineering certain kernel interfaces to reduce the complexity of adding new functionality at those interfaces. The vnode interface <ref> [23] </ref> is a prime example of this approach. However, applying this technique to make existing commodity operating systems generally extensible would require modifying and exposing all interfaces where additional functionality is desired, effectively re-engineering the majority of the operating system.
Reference: [24] <author> Eduardo Krell and Balachander Krishnamurthy. COLA: </author> <title> Customized overlaying. </title> <booktitle> In Proceedings of the 1992 USENIX Winter Conference, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: SLIC enables high-performance interposition that is both enforced on and protected from applications, enabling a significantly larger class of extensions. In principle, the toolkit presented in [20] could be ported to SLIC, further simplifying the process of extension development. COLA <ref> [24] </ref> enables interposition at the system call interface, but without any modification of the operating system kernel. It operates through interposition at the library level and consequently suffers from the same security drawbacks as the Mach interposition technology described above.
Reference: [25] <author> Kai Li and Paul Hudak. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory <ref> [25] </ref>, user-level pagers [49], and novel schedulers [46, 13, 27]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [26] <author> George C. Necula and Peter Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 229-243, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system.
Reference: [27] <author> Jason Nieh and Monica S. Lam. </author> <title> The Design, Implementation and Evaluation of SMART: A Scheduler for Multimedia Applications. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 184-197, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers <ref> [46, 13, 27] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [28] <author> John Ousterhout. </author> <booktitle> Why Aren't Operating Systems Getting Faster As Fast As Hardware? In Proceedings of the 1990 Summer USENIX Conference, </booktitle> <pages> pages 247-256, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: system calls outright (e.g., chown ()) and performs security checks, such as checking the path or file access permissions, for 21 additional system calls (e.g., rmdir ()). 4.4 Performance To evaluate the impact of these extensions on system performance, we ran the extensions under three benchmarks: the Modified Andrew Benchmark <ref> [28] </ref>, a T E X compilation of a 494-page (1.32 MB) document, and a gcc compilation of emacs-19.34 without support for X Windows.
Reference: [29] <author> Przemysaw Pardyak and Brian N. Bershad. </author> <title> Dynamic binding in an extensible system. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 201-212, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system.
Reference: [30] <author> Dennis M Ritchie and Ken Thompson. </author> <title> The UNIX Time-Sharing System. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 365-375, </pages> <year> 1974. </year>
Reference-contexts: Forms of interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells <ref> [30] </ref>, World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [31] <author> R. Sandberg, D. Goldberg, Steven Kleiman, D. Walsh, and B. Lyon. </author> <title> Design and implementation of the Sun network filesystem. </title> <booktitle> In Proceedings of the Summer 1985 USENIX Technical Conference, </booktitle> <pages> pages 119-130. </pages> <institution> Sun Microsystems, </institution> <month> June </month> <year> 1985. </year>
Reference-contexts: Despite these limitations, the power and flexibility of interposition has led to its widespread use throughout modern computing systems. Forms of interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS <ref> [31] </ref>, distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities [32] and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we
Reference: [32] <author> Andrew Schulman, Raymond J. Michels, Jim Kyle, Time Paterson, David Maxey, and Ralf Brown. </author> <title> Undocumented DOS. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Forms of interposition can be found in virtual machines [19], object-oriented programming language systems [22], distributed file systems such as NFS [31], distributed shared memory systems such as TreadMarks [3], the `pipe' construct of UNIX shells [30], World Wide Web proxy caches [7], MS-DOS terminate-and-stay-resident (TSR) utilities <ref> [32] </ref> and Macintosh toolbox extensions [11]. 3 Design and Implementation To investigate the suitability of interposition for adding new functionality to existing operating systems, we have designed and implemented SLIC, an interposition system for commodity Unix operating systems.
Reference: [33] <author> Margo I. Seltzer, Yasuhiro Endo, Christoper Small, and Keith A. Smith. </author> <title> Dealing With Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system. <p> We have implemented a simple extension to demonstrate the feasibility of file system encryption using SLIC. This extension implements a trivial exclusive-or encryption algorithm similar to that used to test VINO <ref> [33] </ref>. The prototype extension watches for open () and creat () system calls of files with a particular suffix and then records the process identifier and the file descriptor returned to the application. <p> SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language [35, 18], and VINO through software fault isolation [45] and in-kernel transactions <ref> [33] </ref>. In contrast, SLIC assumes trusted extensions and focuses on an evaluation of the technique of interposition and its suitability for legacy operating systems.
Reference: [34] <author> Margo I. Seltzer, Yasuhiro Endo, Christopher Small, and Keith A. Smith. </author> <title> Issues in extensible operating sys-tems. </title> <type> Technical Report TR-18-97, </type> <institution> Harvard University, </institution> <year> 1997. </year>
Reference-contexts: Compounding these problems, the development and debugging environments for operating system kernels are considerably behind the state of the art. Conse- quently, it is extremely difficult in practice to add significant new functionality to modern commodity operating systems <ref> [12, 1, 34] </ref>. Although modifying commodity operating systems is complex and difficult, the need to do so remains.
Reference: [35] <author> Emin Gun Sirer, Stefan Savage, Przemysaw Pardyak, Greg DeFouw, Mary Ann Alapat, and Brian N. Bershad. </author> <title> Writing an operating system using Modula-3. </title> <booktitle> In Proceedings of the Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language <ref> [35, 18] </ref>, and VINO through software fault isolation [45] and in-kernel transactions [33]. In contrast, SLIC assumes trusted extensions and focuses on an evaluation of the technique of interposition and its suitability for legacy operating systems.
Reference: [36] <author> Christopher Small and Margo Seltzer. VINO: </author> <title> An Integrated Platform for Operating System and Database Research. </title> <type> Technical Report TR-30-94, </type> <institution> Harvard, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: Over the years, a number of systems have attempted to reduce the cost of adding new operating system functionality by re-engineering the operating system to be extensible. Systems built using this approach include Hydra [48], SPIN [5], VINO <ref> [36] </ref>, Exokernel [14], and Fluke [15]. While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT [50]. <p> Managing shadow structures for processes and threads complicates SLIC and increases kernel memory consumption. Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work <ref> [36, 5, 14, 15] </ref> that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN [5] and VINO [36] are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. <p> Adding a hook to the kernel's process and thread structures would eliminate these problems. 6 Related Work There has been a considerable amount of recent work [36, 5, 14, 15] that has explored novel kernel designs for extensible operating systems. Of these systems, SPIN [5] and VINO <ref> [36] </ref> are the closest in concept to our work. Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility.
Reference: [37] <author> David C. Steere, James J. Kistler, and M. Satyanarayanan. </author> <title> Efficient User-Level File Cache Management on the Sun Vnode Interface. </title> <booktitle> In Proceedings of the 1990 USENIX Summer Conference, </booktitle> <pages> pages 325-331, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Using a simple upcall/downcall interface, SLIC extensions can also use both models simultaneously. Performance-critical sections of an extension can be located in the kernel, while functionality that is rarely used or which requires access to user-level libraries can be located in a user-level server <ref> [37] </ref>. 3.2 SLIC Implementation The current implementation of SLIC provides dispatchers on the system call and signal interfaces of So- laris 2.5.1 running on SPARC 10, 20, and UltraSPARC workstations 1 .
Reference: [38] <institution> Computer Emergency Response Team. Ghostscript Vulnerability. CERT Advisory CA-95.10, CERT, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Input data could potentially exploit bugs in helper applications such as ghostview to insert viruses into the system <ref> [38] </ref>. The tracing facility of the standard Solaris /proc file system is one method that has been used to construct a restricted execution environment [17]. Potentially insecure system calls are captured and then selectively denied or altered. The /proc approach, however, suffers from two primary shortcomings.
Reference: [39] <editor> Computer Emergency Response Team. Vulnerability in expreserve. CERT Advisory CA-96.19, CERT, </editor> <month> August </month> <year> 1996. </year>
Reference-contexts: When- ever possible, these advisories include information on how to resolve the reported problem. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [39, 40, 41] </ref>. However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problems without requiring changes to kernel source code. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [42].
Reference: [40] <editor> Computer Emergency Response Team. Vulnerability in Solaris admintool. CERT Advisory CA-96.16, CERT, </editor> <month> August </month> <year> 1996. </year>
Reference-contexts: The prototype currently runs on Solaris 2.5.1. We have used the SLIC prototype to implement a number of extensions which would have been significantly more difficult to accomplish by other means. One extension patches a security flaw publicized by CERT <ref> [40] </ref>. A second extension encrypts file, while a third provides a restricted process execution environment. The rest of this paper is organized as follows. Sec tion 2 provides background on interposition. In sec-tion 3, we describe the design, implementation, and performance of SLIC, our prototype interposition system. <p> When- ever possible, these advisories include information on how to resolve the reported problem. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [39, 40, 41] </ref>. However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problems without requiring changes to kernel source code. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [42]. <p> Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [42]. To demonstrate patching a security hole in this manner, we have implemented an extension to patch a security hole discovered in the Solaris admintool <ref> [40] </ref> which allowed unprivileged users to truncate arbitrary files. The admintool utility creates a local lock file to control access to shared files. By creating a symbolic link at the lock file location, malicious users could cause arbitrary files to be truncated when the lock file was created.
Reference: [41] <institution> Computer Emergency Response Team. Vulnerability in WorkMan. CERT Advisory CA-96.23, CERT, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: When- ever possible, these advisories include information on how to resolve the reported problem. However, due to the lack of extensibility in existing systems, frequently this advice is to completely disable the insecure feature <ref> [39, 40, 41] </ref>. However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problems without requiring changes to kernel source code. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available [42].
Reference: [42] <editor> Computer Emergency Response Team. Vulnerability in talkd. CERT Advisory CA-97.04, CERT, </editor> <month> January </month> <year> 1997. </year>
Reference-contexts: De- spite the need for immediate repair to prevent wide exploitation of these flaws, the required patches can take weeks to become available <ref> [42] </ref>. This work aims to significantly simplify the process of evolving existing commodity operating systems by enabling new extensions which can manage global resources and/or enforce security guarantees. <p> However, using SLIC, many of these advisories could be accompanied by small extensions which would resolve the problems without requiring changes to kernel source code. Though operating system vendors do respond to these advisories by supplying patches, those patches can take weeks to become available <ref> [42] </ref>. To demonstrate patching a security hole in this manner, we have implemented an extension to patch a security hole discovered in the Solaris admintool [40] which allowed unprivileged users to truncate arbitrary files. The admintool utility creates a local lock file to control access to shared files.
Reference: [43] <author> Marvin Theimer, K. Landtz, and David Cheriton. </author> <title> Preemptable Remote Execution Facilities for the V System. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Although modifying commodity operating systems is complex and difficult, the need to do so remains. There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration <ref> [43, 12] </ref>, fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27].
Reference: [44] <author> Thorsten von Eicken, David E. Culler, Seth C. Goldstein, and Klaus Erik Schauser. </author> <title> Active Messages: a Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proc. of the 19th Int'l Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives <ref> [6, 44] </ref>, upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [45] <author> Robert Wahbe, Steven Lucco, Thomas Anderson, and Susan Graham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 203-216, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: However, because extensions run unprotected in the application's address space and require application cooperation, extensions cannot enforce security guarantees or manage shared resources for competing applications. Software Fault Isolation (SFI) <ref> [45] </ref> can be used to protect extensions from applications even when loaded in the same address space. Unfortunately, SFI requires a number of compiler optimizations to achieve low overhead and therefore cannot be applied efficiently to existing application binaries. <p> This feature enables extensions which manage shared resources and/or enforce security guarantees. (Note that SLIC assumes that extensions are trusted. Other research efforts have addressed issues involved with un <br>- trusted extensions <ref> [45, 5, 18, 26, 29, 33] </ref>.) Ease of Development: During development and testing, extension writers are able to use state-of-the- art programming tools such as symbolic debug <br>- gers and performance analysis utilities. Efficiency: Once development is complete, extensions impose minimal overhead on the system. <p> Both offer extensibility through interposition on a number of kernel interfaces, but have explicitly crafted those interfaces for extensibility. SPIN and VINO also aggressively focus on ensuring kernel protection from untrusted extensions, SPIN by using a type-safe language [35, 18], and VINO through software fault isolation <ref> [45] </ref> and in-kernel transactions [33]. In contrast, SLIC assumes trusted extensions and focuses on an evaluation of the technique of interposition and its suitability for legacy operating systems.
Reference: [46] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> Lottery Scheduling: Flexible Proportional-Share Resource Management. </title> <booktitle> In Proceedings of the 1st USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 1-11, </pages> <year> 1994. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers <ref> [46, 13, 27] </ref>. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [47] <author> Nick Wingfield. </author> <title> ActiveX used as hacking tool. </title> <address> http://www.news.com/News/Item/0%2C4%- 2C7761%2C00.html, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: There are many cases, however, in which the user does not fully trust the program being run. For example, programs downloaded from untrusted sources may actually be Tro- jan horses designed to steal or destroy information <ref> [47, 10] </ref>. In addition, there are cases in which the user trusts the program, but not the data being processed, as in the case of web browser helper applications used by web browsers to display various data formats.
Reference: [48] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The Kernel of a Multiprocessor Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 17(6) </volume> <pages> 337-344, </pages> <month> June </month> <year> 1974. </year>
Reference-contexts: Over the years, a number of systems have attempted to reduce the cost of adding new operating system functionality by re-engineering the operating system to be extensible. Systems built using this approach include Hydra <ref> [48] </ref>, SPIN [5], VINO [36], Exokernel [14], and Fluke [15]. While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT [50].
Reference: [49] <author> M. Young, A. Tevanian, R. Rashid, D. Golub, J. Eppinger, J. Chew, W. Bolosky, D. Black, and R. Baron. </author> <title> The Duality of Memory and Communication in the Implementation of a Multiprocessor Operating System. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing [51], process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers <ref> [49] </ref>, and novel schedulers [46, 13, 27]. In addition, security flaws are routinely discovered and reported by organizations such as Carnegie-Mellon's Computer Emergency Re- sponse Team (CERT) and the Department of Energy's Computer Incident Advisory Capability (CIAC).
Reference: [50] <author> G. Pascal Zachary. </author> <title> Showstopper! The Breakneck Race to Create Windows NT and the Next Generation at Microsoft. </title> <publisher> Macmillan, Inc., </publisher> <year> 1994. </year>
Reference-contexts: While many of these systems have successfully demonstrated greatly reduced costs for adding new functionality, the initial cost of replacing existing commodity operating systems is prohibitive; for example, Microsoft spent over $300 M developing Windows NT <ref> [50] </ref>. Consequently, extensibility architectures developed using this approach will remain unavailable to the average user for the foreseeable future. A small number of projects have taken the second approach of re-engineering certain kernel interfaces to reduce the complexity of adding new functionality at those interfaces.
Reference: [51] <author> Sognian Zhou, Jingwen Wang, Xiaohn Zheng, and Pierre Delisle. </author> <title> Utopia: A Load Sharing Facility for Large, Heterogeneous Distributed Computing Systems. </title> <type> Technical Report CSRI-257, </type> <institution> University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: Although modifying commodity operating systems is complex and difficult, the need to do so remains. There is a large catalog of operating system functionality which has not been widely deployed, in part because of the difficulty of modifying existing systems: load sharing <ref> [51] </ref>, process migration [43, 12], fast communication primitives [6, 44], upcalls [9], distributed shared memory [25], user-level pagers [49], and novel schedulers [46, 13, 27].
References-found: 51

