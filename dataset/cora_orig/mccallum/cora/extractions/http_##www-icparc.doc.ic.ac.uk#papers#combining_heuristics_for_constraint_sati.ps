URL: http://www-icparc.doc.ic.ac.uk/papers/combining_heuristics_for_constraint_sati.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: E-mail: rr5@doc.ic.ac.uk  
Title: Combining Heuristics for Constraint Satisfaction Problems  
Author: Robert Rodosek 
Address: London SW7 2AZ, England  
Affiliation: IC-Parc Imperial College  
Abstract: In order to reduce the search space in Constraint Satisfaction Problems (CSPs), we propose a framework for combining heuristics which relax, reduce and decompose such problems. We introduce the notion of sub-quadrangle and show how to represent any constraint by intersections and unions of sub-quadrangles. This allows us to reduce a given problem to subproblems by reducing or even removing subquadrangles from the problem. A decomposition of the underlying structure of the problem is given by using the variables on which the subquadrangles are defined. Thus, all three aspects of heuristic search can be connected in the same framework. We derive a new tractable class of CSPs in this framework and show how to efficiently combine and generate new heuristics. Finally, we present some experimental results. 
Abstract-found: 1
Intro-found: 1
Reference: [ Berge, 1989 ] <author> C. Berge. </author> <title> Hypergraphs. </title> <publisher> North Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1989. </year>
Reference-contexts: A formal definition of the constraint network as a hypergraph (see <ref> [ Berge, 1989 ] </ref> ) is given as follows: Definition 2.3 (constraint network) The constraint network of a given CSP P = (V; D; C) is the hypergraph H (P ) = (V; fscope (C) j C 2 Cg) where vertices present variables and edges present the scopes of constraints.
Reference: [ Dechter and Pearl, 1988 ] <author> R. Dechter and J. Pearl. </author> <title> Network-Based Heuristics for Constraint Satisfaction Problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34, </volume> <year> 1988. </year>
Reference-contexts: There exist several such general heuristics, each of which is `good' for a specific class of problems. For example, problems with tree-like underlying structures can be solved very efficiently by using the tree-structured decomposition <ref> [ Dechter and Pearl, 1988 ] </ref> . However, given a specific problem, it may be hard to decide whether it falls into one of the classes covered by these heuristics. <p> Indeed, if we identify m variables which form such a cycle-cutset, the solutions to the hinge are derived in O (njDj m+2 ) time (see <ref> [ Dechter and Pearl, 1988 ] </ref> ). The search for a solution of the whole problem is dependent on the largest cycle-cutset in any hinge and on the largest intersection between the hinges. The cycle-cutset strategy does not use the information about constraints which are subquadrangles.
Reference: [ Dechter and Pearl, 1989 ] <author> R. Dechter and J. Pearl. </author> <title> Tree Clustering for Constraint Networks. </title> <journal> Artificial Intelligence, </journal> <volume> 38, </volume> <year> 1989. </year>
Reference-contexts: 1 ; res 2 ; res 3 g; w 2 fres 2 ; res 3 gg Table 1: The constraints and their scopes of the CSP in Example 2.2. 2.2 Constraint Networks There are many CSP solution techniques which exploit the topology of the underlying structure, namely constraint network (e.g., <ref> [ Dechter and Pearl, 1989 ] </ref> , [ Freuder, 1985 ] , [ Seidel, 1981 ] ). <p> non-simple edge C 6 to simple edge fr 2 ; r 3 g (see Figure 3), then this reduction presents the constraint: activities a 2 and a 3 use different resources. 3.3 Decomposition of the Problem There are many decomposition techniques which exploit the topology of the constraint network (e.g., <ref> [ Dechter and Pearl, 1989 ] </ref> , [ Freuder, 1985 ] , [ Seidel, 1981 ] ). <p> The proposed heuristics can be combined with other solution techniques, e.g., the tree-clustering technique and the cycle-cutset strategy (see <ref> [ Dechter and Pearl, 1989 ] </ref> ).
Reference: [ Fikes, 1970 ] <author> R. E. Fikes. REF-ARF: </author> <title> A System for Solving Problems Stated as Procedures. </title> <journal> Artificial Intelligence, </journal> <volume> 1, </volume> <year> 1970. </year>
Reference-contexts: 1 Introduction Since in general combinatorial problems are NP-hard, current practical approaches for solving them employ heuristics. For CSPs (see <ref> [ Fikes, 1970 ] </ref> , [ Freuder, 1978 ] ) finding a solution means constructing an assignment of values to variables such that all constraints are satisfied. A solution is constructed by stepwise extension of partial solutions including backtracking whenever necessary. <p> Finally, Section 6 summarizes the paper. 2 Definitions and Preliminaries 2.1 Constraint Satisfaction Problems A constraint is usually defined in the CSP notation as a set of allowed combinations of values for some subset of a finite set of variables (cf. <ref> [ Fikes, 1970 ] </ref> ). Solving a CSP implies searching for combinations of values for all variables satisfying all constraints of this CSP.
Reference: [ Freuder, 1978 ] <author> E. C. Freuder. </author> <title> Synthesising Constraint Expressions. </title> <journal> Communications of ACM, </journal> <volume> 21(11), </volume> <year> 1978. </year>
Reference-contexts: 1 Introduction Since in general combinatorial problems are NP-hard, current practical approaches for solving them employ heuristics. For CSPs (see [ Fikes, 1970 ] , <ref> [ Freuder, 1978 ] </ref> ) finding a solution means constructing an assignment of values to variables such that all constraints are satisfied. A solution is constructed by stepwise extension of partial solutions including backtracking whenever necessary.
Reference: [ Freuder, 1985 ] <author> E. C. Freuder. </author> <title> A Sufficient Condition for Backtrack-bounded Search. </title> <journal> J. ACM, </journal> <volume> 32(4), </volume> <year> 1985. </year>
Reference-contexts: g; w 2 fres 2 ; res 3 gg Table 1: The constraints and their scopes of the CSP in Example 2.2. 2.2 Constraint Networks There are many CSP solution techniques which exploit the topology of the underlying structure, namely constraint network (e.g., [ Dechter and Pearl, 1989 ] , <ref> [ Freuder, 1985 ] </ref> , [ Seidel, 1981 ] ). <p> fr 2 ; r 3 g (see Figure 3), then this reduction presents the constraint: activities a 2 and a 3 use different resources. 3.3 Decomposition of the Problem There are many decomposition techniques which exploit the topology of the constraint network (e.g., [ Dechter and Pearl, 1989 ] , <ref> [ Freuder, 1985 ] </ref> , [ Seidel, 1981 ] ).
Reference: [ Jeavons, 1990 ] <author> P. G. Jeavons. </author> <title> The Expressive Power of Constraint Networks. </title> <note> In Technical Report CSD-TR-640, </note> <institution> Royal Holloway and Bedford New College, University of London, </institution> <year> 1990. </year>
Reference: [ Gyssens et al., 1994 ] <author> M. Gyssens, D. Cohen and P. Jeavons. </author> <title> Decomposing Constraint Satisfaction Problems Using Database Techniques. </title> <journal> Artificial Intelligence, </journal> <volume> 65, </volume> <year> 1994. </year>
Reference-contexts: Considering hypergraphs as the constraint network, a CSP can be decomposed according to a "covering" of minimal hinges of the underlying hy-pergraph (V; E) into a tree-structure in O (jV jjEj 2 ) time <ref> [ Gyssens et al., 1994 ] </ref> . <p> time <ref> [ Gyssens et al., 1994 ] </ref> . A CSP where m is the size of the largest minimal hinge of H (P ), and l is the maximal size of a constraint in Q can be solved in O (jV jjEj 2 ) + O (jEjl m logl) time [ Gyssens et al., 1994 ] . <p> Algorithm 4.2 needs O (jV j 2 ) time to reduce G 1 and G 2 to edge-free graphs if such a reduction exists. 4.2 General Subquadrangle-Based Heuristics An efficient tree-structured decomposition of the hy-pergraph into hinges has been presented in <ref> [ Gyssens et al., 1994 ] </ref> . Moreover, the size of the largest minimal hinge in any such decomposition is an invariant of the hypergraph and it presents the upper estimation of the search effort.
Reference: [ Meseguer, 1989 ] <author> P. Meseguer. </author> <title> Constraint Satisfaction Problems: An Overview. </title> <journal> AICOM, </journal> <volume> Vol. 2, No. 1, </volume> <year> 1989. </year>
Reference-contexts: For every variable v, if the domain of v is the same set for every constraint C 2 C, v 2 scope (C), the problem is called an arc-consistent CSP. An arc-consistent CSP is derived from a given CSP in polynomial time (see <ref> [ Meseguer, 1989 ] </ref> ). To illustrate these definitions, we give an example of an arc-consistent CSP, which will be used throughout the paper. The example presents a scheduling problem which can be described in a CSP notation.
Reference: [ Rodosek, 1993 ] <author> R. Rodosek. </author> <title> Complexity and Heuristics for the Scheduling Problems. </title> <booktitle> Proceedings of the IEEE Electrotechnical and Computer Science Conference, Portoroz, Slovenia, </booktitle> <year> 1993. </year>
Reference-contexts: For example, scheduling problems belong to this class if constraints over temporal and resource variables are binary constraints. A lot of industrial scheduling problems can be represented by such binary constraints <ref> [ Rodosek, 1993 ] </ref> .
Reference: [ Rodosek, 1994 ] <author> R. Rodosek. </author> <title> Combining Constraint Network and Causal Theory to Solve Scheduling Problems form a CSP Perspective. </title> <booktitle> Proceedings of 11th European Conference on Artificial Intelligence, </booktitle> <year> 1994. </year>
Reference-contexts: Notice that Operation 3.2 computes v-relaxed hyper-graph of (V; E; R) in O (jV j + jEj) time. We show that Operation 3.2 preserves the set of solutions, i.e., each solution to the relaxed CSP by using this operation can be extended to a solution to the original CSP <ref> [ Rodosek, 1994 ] </ref> . If every partial solution of a CSP on variables V fvg can be extended to a global solution, then this CSP is called a 1-backtrack-free CSP. Lemma 3.3 Let P be a CSP.
Reference: [ Seidel, 1981 ] <author> R. Seidel. </author> <title> A New Method for Solving Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <year> 1981. </year>
Reference-contexts: ; res 3 gg Table 1: The constraints and their scopes of the CSP in Example 2.2. 2.2 Constraint Networks There are many CSP solution techniques which exploit the topology of the underlying structure, namely constraint network (e.g., [ Dechter and Pearl, 1989 ] , [ Freuder, 1985 ] , <ref> [ Seidel, 1981 ] </ref> ). <p> g (see Figure 3), then this reduction presents the constraint: activities a 2 and a 3 use different resources. 3.3 Decomposition of the Problem There are many decomposition techniques which exploit the topology of the constraint network (e.g., [ Dechter and Pearl, 1989 ] , [ Freuder, 1985 ] , <ref> [ Seidel, 1981 ] </ref> ). Considering hypergraphs as the constraint network, a CSP can be decomposed according to a "covering" of minimal hinges of the underlying hy-pergraph (V; E) into a tree-structure in O (jV jjEj 2 ) time [ Gyssens et al., 1994 ] .
Reference: [ Spragg and Smith, 1993 ] <author> J. E. Spragg and B. M. Smith. </author> <title> Application of Constraint Satisfaction to Scheduling Problems. </title> <booktitle> The Newsletter of the Society for the Study of Artificial Intelligence and Simulation of Behaviour, </booktitle> <volume> 83/84, </volume> <year> 1993. </year>
Reference-contexts: To illustrate these definitions, we give an example of an arc-consistent CSP, which will be used throughout the paper. The example presents a scheduling problem which can be described in a CSP notation. A scheduling problem (see, e.g., <ref> [ Spragg and Smith, 1993 ] </ref> ) is generally defined by two basic sets, a set of activities and a set of resources, with some requirements over them.
Reference: [ Tsang, 1993 ] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <address> San Diego, </address> <year> 1993. </year>
Reference-contexts: Basic heuristics for CSPs are algorithms to define an ordering of variables along which values are assigned. A number of such basic heuristics has been proposed in the literature; as an example, variables which appear in more constraints can be assigned earlier (see, e.g., <ref> [ Tsang, 1993 ] </ref> ). Taking into account the specific representation of the problem as a set of constraints, basic heuristics can be refined and improved. Among the methods developed for solving CSPs are the decomposition of problems into subproblems, and the reduction and relaxation of constraints.
References-found: 14

