URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/coda/Web/docdir/sigops96.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/project/coda/Web/docs-new.html
Root-URL: http://www.cs.cmu.edu
Title: AFS and the Web: Competitors or Collaborators?  
Author: M. Satyanarayanan Mirjana Spasojevic 
Address: Pittsburgh, PA Palo Alto, CA  
Affiliation: Carnegie Mellon University Hewlett-Packard Laboratories  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Almeida, V., Bestavros, A., Crovella, M., de Oliveira, [2] Berners-Lee, T., Calliau, R., Luotonen, A., Frystyk A. Nielsen, H., Secret, A. </author> <title> Characterizing Reference Locality in the WWW. The World-Wide Web. </title> <type> Technical Report TR-96-11, </type> <institution> Boston University Communications of the ACM 37(8), </institution> <month> August, </month> <year> 1994. </year> <institution> Computer Science Department, </institution> <year> 1996. </year>
Reference-contexts: AFS references exhibit substantial temporal locality, thus making client caching useful. In contrast, Web references from a client tend to exhibit poor temporal locality; this renders conventional client caching much less effective <ref> [1, 3, 5] </ref>. On the other hand, there is substantial collective locality in the Web references of an organization. In other words, Web documents that are accessed by one user in an organization are likely to also be accessed by other users in that organization. <p> There are also important differences with respect to spatial locality. Once an AFS file is opened, it is likely to be read sequentially in its entirety. This makes simple sequential read-ahead useful. Web traffic additionally exhibits a more complex form of spatial locality <ref> [1, 5] </ref> chains of URL references that tend to occur in the same sequence each time. Exploiting this form of spatial locality requires a prefetching mechanism that is considerably more sophisticated than simple read-ahead. In addition, AFS workloads are influenced by the fact that servers maintain state information regarding clients.
Reference: [3] <author> Bestavros, A., Carter, R.L., Crovella, M.E., Cunha, [13] Ousterhout, J.K. C.R., Heddaya, A., Mirdad, S.A. </author> <title> The Role of State in Distributed Systems. Application-Level Document Caching in the Internet. </title> <booktitle> CMU Computer Science: A 25th Anniversary In Proceedings of the Second International Workshop Perspective. on Services in Distributed and Networked In Rashid, R.F., Environments (SDNE'95). </booktitle> <address> June, 1995. </address> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: AFS references exhibit substantial temporal locality, thus making client caching useful. In contrast, Web references from a client tend to exhibit poor temporal locality; this renders conventional client caching much less effective <ref> [1, 3, 5] </ref>. On the other hand, there is substantial collective locality in the Web references of an organization. In other words, Web documents that are accessed by one user in an organization are likely to also be accessed by other users in that organization.
Reference: [4] <author> Bowman, M., Danzig, P.B., Hardy, D.R., Manber, U., [14] Satyanarayanan, M. Schwartz M.F. </author> <title> Integrating Security in a Large Distributed System. The Harvest Information Discovery and Access ACM Transactions on Computer Systems 7(3), System. August, </title> <booktitle> 1989. Computer Networks and ISDN Systems 28 </booktitle> <pages> 119-125, </pages>
Reference-contexts: As the space of accessible data grows, searching it to locate relevant information becomes an increasing problem. Indexing facilities such as Lycos, Yahoo and AltaVista, new client abstractions such as dynamic sets [22], and mechanisms for resource discovery such as Harvest <ref> [4] </ref> represent initial steps toward solving this problem. But the full scope of this challenge is likely to occupy us well into the 21st century.
Reference: [15] <author> Satyanarayanan, M., Howard, J.H., Nichols, D.N., </author> <month> August, </month> <year> 1995. </year> <title> Sidebotham, </title> <type> R.N., Spector, </type> <institution> A.Z., West, M.J. </institution>
Reference-contexts: With much less fanfare, another world-wide information system, AFS, has also been operational on the Internet. AFS was originally designed to support the file sharing needs of a campus-sized community of five to seven thousand workstations <ref> [11, 15] </ref>. In current parlance, AFS was conceived as an information sharing mechanism for the Intranet of an organization. Since then, AFS has been evolved to function effectively over the Internet [17, 21]. Many organizations have been part of a single distributed Unix file name space supported by AFS. <p> With the growth of the Web and its increasing potential for electronic commerce, it has become clear that secure data transfer protocols, authentication and access control must be introduced. 2.6. Scalability Concern for scalability pervaded the design of the first prototype of AFS <ref> [15] </ref>, and has continued to be the dominant theme of its evolution.
Reference: [5] <author> Dharap, C., Bowman, M. </author> <title> The ITC Distributed File System: Principles and Preliminary Analysis of Wide-Area Access Traces. Design. Technical Report CSE-95-030, </title> <booktitle> Department of In Proceedings of the 10th ACM Symposium on Computer Science, </booktitle> <institution> Penn. State Univ., </institution> <year> 1995. </year> <booktitle> Operating System Principles. </booktitle> <month> December, </month> <year> 1985. </year>
Reference-contexts: AFS references exhibit substantial temporal locality, thus making client caching useful. In contrast, Web references from a client tend to exhibit poor temporal locality; this renders conventional client caching much less effective <ref> [1, 3, 5] </ref>. On the other hand, there is substantial collective locality in the Web references of an organization. In other words, Web documents that are accessed by one user in an organization are likely to also be accessed by other users in that organization. <p> There are also important differences with respect to spatial locality. Once an AFS file is opened, it is likely to be read sequentially in its entirety. This makes simple sequential read-ahead useful. Web traffic additionally exhibits a more complex form of spatial locality <ref> [1, 5] </ref> chains of URL references that tend to occur in the same sequence each time. Exploiting this form of spatial locality requires a prefetching mechanism that is considerably more sophisticated than simple read-ahead. In addition, AFS workloads are influenced by the fact that servers maintain state information regarding clients.
Reference: [6] <author> Gwertzman, J.S., Seltzer, M. [16] Satyanarayanan, M., Kistler, J.J., Kumar, P., Okasaki, </author> <title> The Case for Geographical Push-Caching. M.E., Siegel, E.H., Steere, D.C. In Proceedings of the Fifth Workshop on Hot Topics Coda: A Highly Available File System for a in Operating Systems. </title> <month> May, </month> <year> 1995. </year> <title> Distributed Workstation Environment. </title> <journal> IEEE Transactions on Computers 39(4), </journal> <month> April, </month> <year> 1990. </year>
Reference-contexts: This suggests the utility of a shared organizational cache [10]. A variant of this idea uses geography rather than organizational boundaries as the basis of collective caching <ref> [6] </ref>. In contrast, intermediate caches have been shown to be of little value in AFS [12]. There are also important differences with respect to spatial locality. Once an AFS file is opened, it is likely to be read sequentially in its entirety. This makes simple sequential read-ahead useful.
Reference: [7] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., Sidebotham, R.N., West, [17] Satyanarayanan, M. M.J. </author> <title> Scalable, Secure, and Highly Available Distributed Scale and Performance in a Distributed File System. File Access. </title> <journal> ACM Transactions on Computer Systems 6(1), IEEE Computer 23(5), </journal> <month> May, </month> <year> 1990. </year> <month> February, </month> <year> 1988. </year>
Reference-contexts: Scalability Concern for scalability pervaded the design of the first prototype of AFS [15], and has continued to be the dominant theme of its evolution. Many aspects of AFS contribute to its scalability: the use of callback-based caching <ref> [7] </ref> to minimize server and network load. the use of volumes for ease of system administration [18]. attention to security issues, as elaborated in the previous section. the decomposition of the system into independent cells to support organizational autonomy [17].
Reference: [18] <author> Sidebotham, </author> <note> R.N. </note>
Reference-contexts: Many aspects of AFS contribute to its scalability: the use of callback-based caching [7] to minimize server and network load. the use of volumes for ease of system administration <ref> [18] </ref>. attention to security issues, as elaborated in the previous section. the decomposition of the system into independent cells to support organizational autonomy [17]. In contrast, scalability was not a significant influence on the early evolution of the Web.
Reference: [8] <author> Katz, E.D., Butler, M., McGrath, R. </author> <title> Volumes: The Andrew File System Data Structuring </title>
Reference-contexts: We describe several such systems in this section. 3.1. NCSA: Server Load Balancing A recent paper reports on the use of AFS as the shared back end for a scalable Web server at the National Center for Supercomputing Applications (NCSA) <ref> [8] </ref>. In this design, AFS enables a collection of physical Web servers to masquerade as a single, large, virtual Web server.
References-found: 9

