URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/uist97.ps.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/uist97.html
Root-URL: 
Email: fborning,marriottg@cs.monash.edu.au  pjs@cs.mu.oz.au; yxiao@maths.mu.oz.au  
Title: Solving Linear Arithmetic Constraints for User Interface Applications  
Author: Alan Borning and Kim Marriott Peter Stuckey and Yi Xiao 
Keyword: Linear constraints, inequality constraints, simplex algorithm  
Address: Clayton, Victoria 3168, AUSTRALIA  Parkville, Victoria 3052, AUSTRALIA  
Affiliation: Department of Computer Science Monash University  Department of Computer Science; Department of Mathematics Statistics University of Melbourne  
Abstract: Linear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost 1/3 of a window, or preferring that an object be contained within a rectangle if possible. Current constraint solvers designed for UI applications cannot efficiently handle simultaneous linear equations and inequalities. This is a major limitation. We describe incremental algorithms based on the dual simplex and active set methods that can solve such systems of constraints efficiently. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Baraff. </author> <title> Fast contact force computation for nonpenetrating rigid bodies. </title> <booktitle> In SIGGRAPH '94, </booktitle> <pages> pages 23-32. </pages>
Reference-contexts: These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [14]. The current implementation is much improved, in particular through the use of the active set method described in Section 4.1. Baraff <ref> [1] </ref> describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. <p> In this case, a scalar ff 2 <ref> [0; 1] </ref> is selected, such that it is as large as possible and the point x 0 + ff (x fl 0 x 0 ) is feasible. <p> If the desired value does not change too much, it is quite likely that x fl 0 is also optimal for QP 3 . Unfortunately, this is not the case for this example, since x fl 0 violates the 3rd constraint x r 100. Choos ing ff 2 <ref> [0; 1] </ref> to be as big as possible while still ensuring that x 1 = x 0 + ff (x fl 0 x 0 ) is feasible, we have ff = 0:6687 and x 1 = x 0 + ff (x fl 0 x 0 ) as the new approximate solution,
Reference: 2. <author> A. Borning, R. Anderson, and B. Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In UIST'96, </booktitle> <pages> pages 129-136, </pages> <address> Seattle, </address> <month> Nov </month> <year> 1996. </year>
Reference-contexts: The other strengths all label non-required constraints. A constraint of a given strength completely dominates any constraint with a weaker strength. In the theory, a comparator is used to compare different possible solutions to the constraints and select among them. As described in <ref> [2] </ref>, it is important to use a metric rather than a predicate comparator for inequality constraints. Thus, plausible comparators for use with linear equality and inequality constraints are locally-error-better, weighted-sum-better, and least-squares-better. The least-squares-better comparator strongly penalizes outlying values when trading off constraints of the same strength. <p> Most of the current systems use one-way constraints (e.g. [13, 17]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [19, 21]). Indigo <ref> [2] </ref> handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet [3].
Reference: 3. <author> A. Borning and B. Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Proc. Constraint Programming'95, </booktitle> <publisher> Springer-Verlag LNCS Vol 910, </publisher> <month> Sep </month> <year> 1995. </year>
Reference-contexts: to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution [4].) It is thus easier to implement algorithms to find a locally-error-better 1 solution, and in particular to design hybrid algorithms that include subsolvers for simultaneous equations and inequalities and also subsolvers for nonnumeric constraints <ref> [3] </ref>. Since each of these different comparators is preferable in certain situations we give algorithms for each. 1.2 Adapting the Simplex Algorithm Linear programming is concerned with solving the following problem. <p> Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet <ref> [3] </ref>. A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [10] and [11].
Reference: 4. <author> A. Borning, B. Freeman-Benson, and M. Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> Sep </month> <year> 1992. </year>
Reference-contexts: Constraint hierarchies <ref> [4] </ref> provide a general theory for this. In a constraint hierarchy each constraint has a strength. The required strength is special, in that required constraints must be satisfied. The other strengths all label non-required constraints. A constraint of a given strength completely dominates any constraint with a weaker strength. <p> Locally-error-better, on the other hand, is a more permissive comparator, in that it admits more solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>.) It is thus easier to implement algorithms to find a locally-error-better 1 solution, and in particular to design hybrid algorithms that include subsolvers for simultaneous equations and inequalities and also subsolvers for nonnumeric constraints [3]. <p> We now show how we can solve the problem using optimization algorithms based on the two alternate objective functions: quasi-linear optimization and quadratic optimization. 3 CASSOWARY: QUASI-LINEAR OPTIMIZATION Cassowary finds either locally-error-better or weighted-sum-better solutions. Since every weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>; the weighted-sum part of the optimization comes automatically from the manner in which the objective function is constructed.
Reference: 5. <author> A. Borning, R. Lin, and K. Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proc. ACM MULTIMEDIA'97, </booktitle> <month> Nov </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes [9]. A Cassowary application currently being developed is a web authoring tool <ref> [5] </ref>, in which the appearance of a page is determined by constraints from both the web author and the viewer. Acknowledgments This project has been funded in part by the National Science Foundation under Grants IRI-9302249 and CCR-9402551 and by Object Technology International.
Reference: 6. <author> A. Borning, K. Marriott, P. Stuckey, and Y. Xiao. </author> <title> Solving linear arithmetic constraints for user interface applications: Algorithm details. </title> <type> Tech report 97-06-01, </type> <institution> Dept. Computer Science & Engr, Univ of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: However, QOCA is inherently a more complex algorithm, and re-implementing it with a comparable level of performance would be a daunting task. In contrast, Cas-sowary is straightforward, and a reimplementation based on this paper is more reasonable, given a knowledge of the simplex algorithm. A companion technical report <ref> [6] </ref> gives additional details for both algorithms. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [20]. <p> We make s 1 basic by treating it as an entry variable, determining the most restrictive equation, and using that equation to pivot s 1 into the basis. (See <ref> [6] </ref> for details.) We then remove the row. Here the row x l = 90s 1 s 2 is the most constraining equation. <p> In the presentation, we will use s = 1000 and w = 1. (Cassowary actually uses symbolic weights and a lexicographic ordering, which ensures that strong constraints are always satisfied in preference to weak ones <ref> [6] </ref>. However, QOCA is not able to employ symbolic weights.) Unfortunately neither of these objective functions is linear and hence the simplex method is not applicable directly. <p> However, by choosing a suitably large constant we found a solution that is least-squares-better to under a one-pixel resolution, so that the deviation from a least-squares-better solution would not be visible in an interactive system. (See <ref> [6] </ref> for more on this issue.) To modify the active set method so that it is incremental for resolving, we observe that changing the desired variable val ues only changes the optimization function f .
Reference: 7. <author> S.S. Chok and K. Marriott. </author> <title> Automatic construction of user interfaces from constraint multiset grammars. </title> <booktitle> In IEEE Symposium on Visual Languages, </booktitle> <pages> pages 242-250, </pages> <year> 1995. </year>
Reference-contexts: QOCA is used for both error correction in parsing and for diagram manipulation in the editor <ref> [7] </ref>. A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes [9].
Reference: 8. <author> R. Fletcher. </author> <title> Practical Methods of Optimization. </title> <publisher> Wiley, </publisher> <year> 1987. </year>
Reference-contexts: This is fortunate, since convex quadratic programming has been well-studied and efficient methods for solving these problems are well-known in the operations research community. 4.1 Active Set Method Our implementation of QOCA uses the active set method <ref> [8] </ref> to solve the convex quadratic programming problem. This method is an iterative technique for solving constrained optimization problems with inequality constraints. It is reasonably robust and quite fast, and is the method of choice for medium scale problems consisting of up to 1000 variables and constraints.
Reference: 9. <author> W. He and K. Marriott. </author> <title> Constrained graph layout. In Graph Drawing '96, </title> <publisher> Springer-Verlag LNCS Vol 1190, </publisher> <pages> pages 217-232. </pages>
Reference-contexts: QOCA is used for both error correction in parsing and for diagram manipulation in the editor [7]. A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes <ref> [9] </ref>. A Cassowary application currently being developed is a web authoring tool [5], in which the appearance of a page is determined by constraints from both the web author and the viewer.
Reference: 10. <author> R. Helm, T. Huynh, C. Lassez, and K. Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year>
Reference-contexts: A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references <ref> [10] </ref> and [11]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [14]. The current implementation is much improved, in particular through the use of the active set method described in Section 4.1.
Reference: 11. <author> R. Helm, T. Huynh, K. Marriott, and J. Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Proc. Third Eurographics Workshop on Object-oriented Graphics, </booktitle> <address> Champery, Switzerland, </address> <month> Oct </month> <year> 1992. </year>
Reference-contexts: A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [10] and <ref> [11] </ref>. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [14]. The current implementation is much improved, in particular through the use of the active set method described in Section 4.1.
Reference: 12. <author> H. Hosobe, S. Matsuoka, and A. Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Proc. Constraint Programming'96, </booktitle> <publisher> Springer-Verlag LNCS Vol 1118, </publisher> <month> Aug </month> <year> 1996. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [13, 17]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [19, 21]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL <ref> [12] </ref> and Ultraviolet [3]. A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [10] and [11].
Reference: 13. <author> S.E. Hudson and I. Smith. </author> <title> SubArctic UI toolkit user's manual. </title> <type> Tech report, </type> <institution> College of Computing, Georgia Tech, </institution> <year> 1996. </year>
Reference-contexts: A companion technical report [6] gives additional details for both algorithms. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [20]. Most of the current systems use one-way constraints (e.g. <ref> [13, 17] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [19, 21]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet [3].
Reference: 14. <author> T. Huynh and K. Marriott. </author> <title> Incremental constraint deletion in systems of linear constraints. </title> <journal> Information Processing Letters, </journal> <volume> 55 </volume> <pages> 111-115, </pages> <year> 1995. </year>
Reference-contexts: An earlier version of QOCA is described in references [10] and [11]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in <ref> [14] </ref>. The current implementation is much improved, in particular through the use of the active set method described in Section 4.1. Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems.
Reference: 15. <author> J. Jaffar, S. Michaylov, P. Stuckey, and R. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM TOPLAS, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) <ref> [15] </ref> include efficient solvers for linear equalities and inequalities. (See [16] for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change.
Reference: 16. <author> K. Marriott and P. Stuckey. </author> <title> Introduction to Constraint Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) [15] include efficient solvers for linear equalities and inequalities. (See <ref> [16] </ref> for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change. <p> Augmented simplex form allows us to handle unrestricted variables efficiently and simply; it was developed for implementing constraint logic programming languages <ref> [16] </ref>, and we have adopted it here. Essentially it uses two tableaux rather than one.
Reference: 17. <author> B.A. Myers. </author> <title> The Amulet user interface development environment. </title> <booktitle> In ACM CHI'96 Conference Companion, </booktitle> <month> Apr </month> <year> 1996. </year>
Reference-contexts: A companion technical report [6] gives additional details for both algorithms. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [20]. Most of the current systems use one-way constraints (e.g. <ref> [13, 17] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [19, 21]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet [3].
Reference: 18. <author> W.H. Press, B.P. Flannery, S.A. Teukolsky, and W.T. Vetter-ling. </author> <title> Numerical Recipes: </title> <booktitle> The Art of Scientific Computing. </booktitle> <address> Cambridge, </address> <year> 1989. </year>
Reference-contexts: Both of these thorny defenses are lovingly cultivated by a coterie of stern acolytes who have devoted themselves to the field. Actually, the basic ideas of linear programming are quite simple. Numerical Recipes, <ref> [18, page 424] </ref> We now describe an incremental version of the simplex algorithm, adapted to the task at hand.
Reference: 19. <author> M. Sannella, J. Maloney, B. Freeman-Benson, and A. Born-ing. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [13, 17]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [19, 21] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet [3].
Reference: 20. <author> I. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proc. Spring Joint Computer Conference, </booktitle> <pages> pages 329-346. IFIPS, </pages> <year> 1963. </year>
Reference-contexts: A companion technical report [6] gives additional details for both algorithms. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system <ref> [20] </ref>. Most of the current systems use one-way constraints (e.g. [13, 17]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [19, 21]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities).
Reference: 21. <author> B. Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM TOPLAS, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <month> Jan </month> <year> 1996. </year> <month> 10 </month>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [13, 17]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [19, 21] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [12] and Ultraviolet [3].
References-found: 21

