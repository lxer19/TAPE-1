URL: http://www.cs.purdue.edu/homes/hosking/papers/checkpoint.ps.gz
Refering-URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/pjava.html
Root-URL: http://www.cs.purdue.edu
Title: Lightweight write detection and checkpointing for fine-grained persistence  
Author: Antony L. Hosking J. Eliot B. Moss 
Keyword: Categories and Subject Descriptors: General Terms: Additional Key Words and Phrases:  
Address: Amherst  
Affiliation: Purdue University and  University of Massachusetts at  
Abstract: Purdue University Department of Computer Sciences Technical Report 95-084 Many systems must dynamically track writes to cached data, for the purpose of reconciling those updates with respect to the permanent or global state of the data. For example, distributed systems employ coherency protocols to ensure a consistent view of shared data. Similarly, database systems log updates both for concurrency control and to ensure the resilience of those updates in the face of system failures. Here, we measure and compare the absolute performance of several alternative mechanisms for the lightweight detection of writes to cached data in a persistent system, and the relative overhead to log those writes to stable storage in the form of a checkpoint. A checkpoint defines a consistent state to which the system will be restored in the event of any subsequent failure. The efficient detection and logging of updates is critical to the performance of persistent systems that embody a fine-grained data model, since per-object overheads are typically very low. Our results reveal a wide range of performance for the alternatives, indicating that the right choice of mechanism is important. They also demonstrate that software write detection mechanisms can significantly outperform approaches that rely solely on the hardware and operating system. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Appel, A. W. and Li, K. </author> <year> 1991. </year> <title> Virtual memory primitives for user programs. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Santa Clara, California, </address> <pages> pp. 96-107. </pages>
Reference: <author> Atkinson, M., Chisolm, K., and Cockshott, P. </author> <year> 1982. </year> <title> PS-Algol: an Algol with a persistent heap. </title> <journal> ACM SIGPLAN Notices 17, </journal> <volume> 7 (July), </volume> <pages> 24-31. </pages>
Reference: <author> Atkinson, M. P., Bailey, P. J., Chisholm, K. J., Cockshott, P. W., and Morrison, R. </author> <month> 28 </month> <year> 1983. </year> <title> An approach to persistent programming. </title> <journal> The Computer Journal 26, </journal> <volume> 4 (Nov.), </volume> <pages> 360-365. </pages>
Reference: <author> Atkinson, M. P. and Buneman, O. P. </author> <year> 1987. </year> <title> Types and persistence in database programming languages. </title> <journal> ACM Computing Surveys 19, </journal> <month> 2 (June), </month> <pages> 105-190. </pages>
Reference: <author> Atkinson, M. P., Chisholm, K. J., Cockshott, W. P., and Marshall, R. M. </author> <year> 1983. </year> <title> Algorithms for a persistent heap. </title> <journal> Software: Practice and Experience 13, </journal> <volume> 7 (March), </volume> <pages> 259-271. </pages>
Reference: <author> Bell, J. R. </author> <year> 1973. </year> <title> Threaded code. </title> <journal> Commun. ACM 16, </journal> <month> 6 (June), </month> <pages> 370-372. </pages>
Reference: <author> Brown, A. L., Dearle, A., Morrison, R., Munro, D. S., and Rosenberg, J. </author> <year> 1990. </year> <title> A layered persistent architecture for Napier88. </title> <type> Technical report (May), </type> <institution> University of St Andrews, Bremen, Germany. </institution>
Reference: <author> Brown, A. L., Mainetto, G., Matthes, F., Mueller, R., and McNally, D. J. </author> <year> 1991. </year> <title> An open system architecture for a persistent object store. </title> <institution> Research Report CS/91/9, University of St Andrews. </institution>
Reference: <author> Cattell, R. G. G. and Skeen, J. </author> <year> 1992. </year> <title> Object operations benchmark. </title> <journal> ACM Transactions on Database Systems 17, </journal> <volume> 1 (March), </volume> <pages> 1-31. </pages>
Reference: <author> Cheney, C. J. </author> <year> 1970. </year> <title> A nonrecursive list compacting algorithm. </title> <journal> Commun. ACM 13, </journal> <volume> 11 (Nov.), </volume> <pages> 677-678. </pages>
Reference: <author> Cmelik, B. and Keppel, D. </author> <year> 1994. </year> <title> Shade: A fast instruction-set simulator for execution profiling. </title> <booktitle> In Proceedings of the ACM Conference on the Measurement and Modeling of Computer Systems, </booktitle> <pages> pp. 128-137. </pages>
Reference: <author> Date, C. J. </author> <year> 1983. </year> <title> An Introduction to Database Systems, Volume II. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Date, C. J. </author> <year> 1986. </year> <title> An Introduction to Database Systems (Fourth ed.), Volume I. </title> <publisher> Addison-Wesley. </publisher> <address> Corrected in 1987. </address>
Reference: <author> Elhardt, K. and Bayer, R. </author> <year> 1984. </year> <title> A database cache for high performance and fast restart in database systems. </title> <journal> ACM Transactions on Database Systems 9, </journal> <volume> 4 (Dec.), </volume> <pages> 503-525. </pages>
Reference: <author> Goldberg, A. and Robson, D. </author> <year> 1983. </year> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> Hosking, A. L. </author> <year> 1991. </year> <title> Main memory management for persistence. Position paper presented at the OOPSLA'91 Workshop on Garbage Collection. </title>
Reference: <author> Hosking, A. L. </author> <year> 1995. </year> <title> Lightweight Support for Fine-Grained Persistence on Stock Hardware. </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts at Amherst. </institution> <note> Available as Department of Computer Science Technical Report 95-02. </note>
Reference: <author> Hosking, A. L., Brown, E., and Moss, J. E. B. </author> <year> 1993. </year> <title> Update logging for persistent programming languages: A comparative performance evaluation. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, Dublin, Ireland, </booktitle> <pages> pp. 429-440. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Hosking, A. L. and Moss, J. E. B. </author> <year> 1990. </year> <title> Towards compile-time optimisations for persistence. </title>
Reference: <editor> In A. Dearle, G. M. Shaw, and S. B. Zdonik (Eds.), </editor> <booktitle> Proceedings of the International Workshop on Persistent Object Systems, </booktitle> <address> Martha's Vineyard, Massachusetts, </address> <pages> pp. </pages> <month> 17-27. </month> <title> Implementing Persistent Object Bases: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: <author> Hosking, A. L. and Moss, J. E. B. </author> <year> 1991. </year> <title> Compiler support for persistent programming. </title> <type> Technical Report 91-25 (March), </type> <institution> Department of Computer Science, University of Massachusetts at Amherst. </institution>
Reference: <author> Hosking, A. L. and Moss, J. E. B. </author> <year> 1993a. </year> <title> Object fault handling for persistent programming languages: A performance evaluation. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> Washington, DC, </address> <pages> pp. 288-303. </pages>
Reference: <author> Hosking, A. L. and Moss, J. E. B. </author> <year> 1993b. </year> <title> Protection traps and alternatives for memory management of an object-oriented language. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles, </booktitle> <address> Asheville, </address> <publisher> North Carolina, </publisher> <pages> pp. 106-119. </pages>
Reference: <author> Hosking, A. L., Moss, J. E. B., and Stefanovi c, D. </author> <year> 1992. </year> <title> A comparative performance evaluation of write barrier implementations. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> Vancouver, Canada, </address> <pages> pp. 92-109. </pages> <note> 29 Kemper, </note> <author> A. and Kossman, D. </author> <year> 1994. </year> <title> Dual-buffering strategies in object bases. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <address> Santiago, Chile. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> McCall, K. </author> <year> 1983. </year> <title> The Smalltalk-80 benchmarks. </title> <editor> In G. Krasner (Ed.), </editor> <title> Smalltalk-80: Bits of History, Words of Advice, </title> <booktitle> Chapter 9, </booktitle> <pages> pp. 153-173. </pages> <publisher> Addison-Wesley. </publisher>
Reference: <author> Moss, J. E. B. </author> <year> 1987. </year> <title> Managing stack frames in Smalltalk. </title> <booktitle> In Proceedings of the ACM Symposium on Interpreters and Interpretive Techniques, </booktitle> <address> St. Paul, </address> <publisher> Minnesota, </publisher> <pages> pp. 229-240. </pages>
Reference: <author> Moss, J. E. B. </author> <year> 1990. </year> <title> Design of the Mneme persistent object store. </title> <journal> ACM Transactions on Information Systems 8, </journal> <volume> 2 (April), </volume> <pages> 103-139. </pages>
Reference: <author> Moss, J. E. B. and Hosking, A. L. </author> <year> 1994. </year> <title> Expressing object residency optimizations using pointer type annotations. </title> <editor> In M. Atkinson, D. Maier, and V. Benzaken (Eds.), </editor> <booktitle> Proceedings of the International Workshop on Persistent Object Systems, Workshops in Computing, Tarascon, France, </booktitle> <pages> pp. 3-15. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: <author> Shaw, R. A. </author> <year> 1987. </year> <title> Improving garbage collector performance in virtual memory. </title> <type> Technical Report CSL-TR-87-323 (March), </type> <institution> Stanford University. </institution>
Reference: <author> Sobalvarro, P. G. </author> <year> 1988. </year> <title> A lifetime-based garbage collector for LISP systems on general-purpose computers. B.S. </title> <type> Thesis, </type> <institution> Dept. of EECS, Massachusetts Institute of Technology, </institution> <address> Cambridge. </address>
Reference: <author> Thekkath, C. A. and Levy, H. M. </author> <year> 1994. </year> <title> Hardware and software support for efficient exception handling. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> San Jose, California, </address> <pages> pp. 110-119. </pages>
Reference: <author> Ungar, D. </author> <year> 1984. </year> <title> Generation scavenging: A non-disruptive high performance storage reclamation algorithm. </title> <booktitle> In Proceedings of the ACM Symposium on Practical Software Development Environments, </booktitle> <address> Pittsburgh, Pennsylvania, </address> <pages> pp. 157-167. </pages>
Reference: <author> Ungar, D. M. </author> <year> 1987. </year> <title> The Design and Evaluation of a High Performance Smalltalk System. </title> <publisher> ACM Distinguished Dissertations. MIT Press, </publisher> <address> Cambridge, Massachusetts. </address>
Reference: <author> Wahbe, R. </author> <year> 1992. </year> <title> Efficient data breakpoints. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Boston, Massachusetts, </address> <pages> pp. 200-212. </pages>
Reference: <author> White, S. J. and DeWitt, D. J. </author> <year> 1992. </year> <title> A performance study of alternative object faulting and pointer swizzling strategies. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <address> Vancouver, Canada, </address> <pages> pp. 419-431. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> White, S. J. and DeWitt, D. J. </author> <year> 1994. </year> <title> QuickStore: A high performance mapped object store. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <address> Minneapolis, </address> <publisher> Minnesota, </publisher> <pages> pp. 395-406. </pages>
Reference: <author> White, S. J. and DeWitt, D. J. </author> <year> 1995. </year> <title> Implementing crash recovery in QuickStore: A performance study. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <address> San Jose, California, </address> <pages> pp. 187-198. </pages>
Reference: <author> Wilson, P. R. and Moher, T. G. </author> <year> 1989a. </year> <title> A "card-marking" scheme for controlling intergenera-tional references in generation-based garbage collection on stock hardware. </title> <journal> ACM SIGPLAN Notices 24, </journal> <volume> 5 (May), </volume> <pages> 87-92. </pages>
Reference: <author> Wilson, P. R. and Moher, T. G. </author> <year> 1989b. </year> <title> Design of the opportunistic garbage collector. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pp. 23-35. </pages>
Reference: <author> Zekauskas, M. J., Sawdon, W. A., and Bershad, B. N. </author> <year> 1994. </year> <title> Software write detection for a distributed shared memory. </title> <booktitle> In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <address> Monterey, California, </address> <pages> pp. 87-100. </pages>
References-found: 40

