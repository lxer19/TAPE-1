URL: http://www.cs.cornell.edu/home/kleinber/ipl-bal.ps
Refering-URL: http://www.cs.cornell.edu/home/kleinber/kleinber.html
Root-URL: 
Title: A Lower Bound for Two-Server Balancing Algorithms optimal on-line algorithm for two servers can be
Author: Jon M. Kleinberg 
Note: 7)=2 3:82), and consequently shows that no  
Address: Ithaca, NY 14853, U.S.A.  
Affiliation: Department of Computer Science Cornell University,  
Abstract: We consider the class of balancing algorithms for two servers. Such algorithms have appeared in a number of the early papers on this problem; they are so named because they seek to "balance" the distance traveled evenly among the servers. In this paper, we show a universal lower bound on the competitive ratio of any balancing algorithm for two servers. The lower bound is equal to (5 + p 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Chrobak, H. Karloff, T. Payne, S. Vishwanathan, </author> <title> "New Results on Server Problems," </title> <journal> SIAM J. Discrete Math., </journal> <volume> 4(1991), </volume> <pages> pp. 172-181. </pages>
Reference-contexts: This rule was shown to be k-competitive for k servers when the cardinality of the request space M is k + 1 [5], and for the "weighted-cache" problem, which includes the paging problem as a special case <ref> [1] </ref>. However, the algorithm is not c-competitive for any c, even for two servers, in a general metric space M .
Reference: [2] <author> M. Chrobak, L. Larmore, </author> <title> "On Fast Algorithms for Two Servers," </title> <journal> J. Algorithms, </journal> <volume> 12(1991), </volume> <pages> pp. 607-614. </pages>
Reference-contexts: Supported by an ONR Graduate Fellowship. 1 shown to be 10-competitive for two servers [4]. A later construction showed that this algorithm was no better than 6-competitive <ref> [2] </ref>. In this note, we show a new lower bound for the class of balancing algorithms in general. <p> It is clear that a very similar construction involving metric space M 2 shows that if f = 1, then B f is not competitive. The final lemma is based on a construction in <ref> [2] </ref>. b U W Z X Lemma 4 If f = p &gt; 1, then (B f ) 3p=(p 1). 4 Proof. <p> does there exist a 2-competitive 2-server algorithm which uses only constant time and space per request? Finally, it is worth noting that the lower bound given here is less than the best known upper bound of 4 on the competitive ratio of a 2-server algorithm using constant time and space <ref> [2] </ref>. It would be interesting to determine more precisely the best possible competitive ratio that can be achieved by a 2-server balancing algorithm.
Reference: [3] <author> M. Chrobak, L. Larmore, </author> <title> "A New Approach to the Server Problem," </title> <journal> SIAM J. Discrete Math., </journal> <volume> 4(1991), </volume> <pages> pp. 323-328. </pages>
Reference-contexts: Observe that we make no restrictions whatsoever on the nature of the function f . Our main result is a lower bound of (5 + p 7)=2 (~ 3:82) on the competitive ratio of any such balancing algorithm for two servers. In view of the 2-competitive algorithms of <ref> [5, 3] </ref>, this shows that no optimal on-line 2-server algorithm can be expressed as a decision rule B f for any f . 2. The Lower Bound Proof We first define some notation that will be useful in what follows.
Reference: [4] <author> S. Irani, R. Rubinfeld, </author> <title> "A Competitive 2-Server Algorithm," </title> <journal> Information Processing Letters, </journal> <volume> 39(1991), </volume> <pages> pp. 85-91. </pages>
Reference-contexts: Supported by an ONR Graduate Fellowship. 1 shown to be 10-competitive for two servers <ref> [4] </ref>. A later construction showed that this algorithm was no better than 6-competitive [2]. In this note, we show a new lower bound for the class of balancing algorithms in general.
Reference: [5] <author> M. Manasse, L. McGeoch, D. Sleator, </author> <title> "Competitive Algorithms for Server Problems," </title> <journal> J. Algorithms, </journal> <volume> 11(1990), </volume> <pages> pp. 208-230. </pages>
Reference-contexts: 1. Introduction In the k-server problem <ref> [5] </ref>, an algorithm is given a metric space M and k mobile robots ("servers") that can occupy points in this space. A finite request sequence is presented to the algorithm, one request at a time. <p> This rule was shown to be k-competitive for k servers when the cardinality of the request space M is k + 1 <ref> [5] </ref>, and for the "weighted-cache" problem, which includes the paging problem as a special case [1]. However, the algorithm is not c-competitive for any c, even for two servers, in a general metric space M . <p> Observe that we make no restrictions whatsoever on the nature of the function f . Our main result is a lower bound of (5 + p 7)=2 (~ 3:82) on the competitive ratio of any such balancing algorithm for two servers. In view of the 2-competitive algorithms of <ref> [5, 3] </ref>, this shows that no optimal on-line 2-server algorithm can be expressed as a decision rule B f for any f . 2. The Lower Bound Proof We first define some notation that will be useful in what follows.
Reference: [6] <author> D. Sleator, R. Tarjan, </author> <title> "Amortized Efficiency of List Update and Paging Rules," </title> <journal> Comm. ACM, </journal> <volume> 23(1985), </volume> <pages> pp. 202-208. </pages>
Reference-contexts: The goal is to minimize the total distance traveled by the servers, over the entire request sequence. The server algorithm S is called on-line <ref> [6] </ref> because it must make decisions without knowledge of future requests. One can imagine an off-line algorithm A which sees the entire request sequence ahead of time and can thus determine the optimal strategy for serving .
References-found: 6

