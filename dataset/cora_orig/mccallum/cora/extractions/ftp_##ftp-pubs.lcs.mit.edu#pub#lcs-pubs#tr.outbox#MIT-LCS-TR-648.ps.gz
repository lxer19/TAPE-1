URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-648.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: MIT/LCS/TR-648 A DISTRIBUTED PROGRAMMING SYSTEM FOR MEDIA APPLICATIONS  
Author: Brent M. Phillips 
Affiliation: MIT Laboratory for Computer Science.  
Note: This document has been made available free of charge via ftp from the  
Date: February, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Mike Accetta, Robert Baron, William Bolosky, David Golub, Richard Rashid, Avadis Tevanian, and Michael Young. </author> <title> Mach: A new foundation for Unix development. </title> <booktitle> In Summer Conference Proceedings. USENIX Association, </booktitle> <year> 1986. </year>
Reference-contexts: Finally, support for distributed programming can either be in the form of general operating system 12 facilities for distributed programming or extensions to a specific language to ease writing distributed programs in that language. The Client-Shell Distributed Architecture [20], the ISIS [6] project, Mach <ref> [1] </ref>, and Chorus [19] provide general operating system level support for distributed programming in any language, while the rest of the related work focuses on either creating a new distributed programming language or extending an existing language to facilitate distributed programming. <p> Using ISIS, fault-tolerant software can be written by first writing and debugging an application entirely in a conventional programming language, reimplementing the critical sections as resilient objects, and interfacing the resilient objects with the conventional sections of the application. 1.4.3 Mach Mach <ref> [1] </ref> is a multiprocessing operating system kernel and environment meant to be used as a foundation for UNIX development.
Reference: [2] <author> Joel F. Adam. </author> <title> The vidboard: A video capture and processing peripheral for a distributed multimedia system. </title> <booktitle> In Proceedings of the ACM Multimedia Conference. ACM, </booktitle> <month> Aug </month> <year> 1993. </year>
Reference-contexts: The ViewStation [24] project integrates the VuSystem with the VuNet, a high speed ATM-based local area network developed within the TNS group. It includes several modern workstations, high-speed links between nodes, and video capture cards known as Vidboards <ref> [2] </ref>. The research described here extends the VuSystem to allow for distributed programming. In the traditional VuSystem, program distribution is limited to the 10 use of NFS, X Windows, and Vidboards (which may be accessed by any machine on the VuNet). All application-specific modules execute in a common address space. <p> The sliding window provides flow control, network congestion control, and reliability (via retransmission of lost and delayed packets) while maintaining good performance through pipelining. The reliability of the protocol is not costless, though. The Vidboard protocol <ref> [2] </ref> is an example of a lossy protocol with windowless closed-loop flow control. <p> name "out-of-band") because out-of-band communication is generally very low bandwidth. 102 Configuration Local VuDP X 640x480, color 3.75 3.33 3.33 640x480, mono 9.5 3.33 3.33 320x240, color 10 10 10 320x240, mono 15 13 10 Table 6.1: Throughput in Frames/Sec sources were live television feeds captured and digitized by vidboards <ref> [2] </ref>.
Reference: [3] <author> Joel F. Adam, Henry H. Houh, and David L. Tennenhouse. </author> <title> A network architecture for distributed multimedia systems. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 76-86, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This makes the VuSystem a programming environment well suited to the creation, debugging, and testing of media applications. There are several reasons why the VuSystem is an appropriate platform for this research. First, it is a working programming system which, when coupled with its companion, the VuNet <ref> [3] </ref>, a high speed network, is well suited for the development of media-based applications. Second, it is interesting to write distributed programs in the VuSystem because of its interpretive textual and graphical programming environment. And, finally, the traditional VuSystem does not allow for generic distributed programming.
Reference: [4] <author> Joshua Auerbach, Arthur P. Goldberg, German S. Goldszmidt, Ajei Gopal, Mark T. Kennedy, and James Russel. </author> <title> Concert/C manual: A programmer's guide to a language for distributed computing. </title> <type> Technical Report IBM RC 19232, </type> <institution> IBM Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: This facilitates breaking programs into separate communicating pieces that may be easily distributed over a network without getting the programmer bogged down in the details of low-level IPC mechanisms. 2 1.4.8 Concert/C Concert/C <ref> [4] </ref> is an extension to the C language to provide improved process management, new data types, and communication mechanisms to ease IPC among C programs.
Reference: [5] <author> Mario R. Barbacci and Jeanette M. Wing. </author> <title> A language for distributed applications. </title> <booktitle> In Proceedings of the International Conference on Computer Languages, </booktitle> <pages> pages 59-68. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: In PROFIT, processes running anywhere over a network can be sharing objects. A main feature of PROFIT is that it allows dynamic reconfiguration of the primitive objects processes are using and sharing. 1.4.15 Durra Durra <ref> [5] </ref> is an application-level programming language whose philosophy is similar to the VuSystem in that Durra programs connect and configure component modules which may be implemented in any language. Like the VuSystem, Durra separates concerns of component development from the use of those components.
Reference: [6] <author> Kenneth P. Birman. </author> <title> Isis: A system for fault-tolerant distributed computing. </title> <type> Technical Report TR-86-744, </type> <institution> Cornell University Dept. of Computer Science, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: Finally, support for distributed programming can either be in the form of general operating system 12 facilities for distributed programming or extensions to a specific language to ease writing distributed programs in that language. The Client-Shell Distributed Architecture [20], the ISIS <ref> [6] </ref> project, Mach [1], and Chorus [19] provide general operating system level support for distributed programming in any language, while the rest of the related work focuses on either creating a new distributed programming language or extending an existing language to facilitate distributed programming. <p> This allows users to easily set up and manipulate distributed programs, even if the component processes are running on different machines. 1.4.2 ISIS ISIS <ref> [6] </ref> is a system for fault-tolerant distributed computing. The focus of ISIS is to use distribution to provide fault-tolerance, since a program or data object that exists at several sites can use its extra copies as backups that can take over in the case of a network or machine failure.
Reference: [7] <author> S.M. Clamen, L.D. Leibergood, S.M. Nettles, and J.M. Wing. </author> <title> Reliable distributed computing with Avalon/Common Lisp. </title> <type> Technical Report CMU-CS-89-186, </type> <institution> Carnegie-Mellow Univ. Computer Science Dept., </institution> <month> Sep </month> <year> 1989. </year>
Reference-contexts: Avalon/C++ encourages writing applications in a client/server fashion, and supports server classes which can export certain methods for use by other processes via an RPC-like mechanism. 1.4.10 Avalon/LISP Avalon/LISP <ref> [7] </ref> contrasts with Avalon/C++ in that it is a set of extensions to LISP to provide support for general remote evaluation. In Avalon/LISP, evaluators are first class objects, and can be passed in messages from clients to servers.
Reference: [8] <author> Douglas E. Comer and David L. Stevens. </author> <title> Internetworking with TCP/IP, volume III: Client-Server Programming and Applications, BSD socket version. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <month> 117 </month>
Reference-contexts: At a low level, UNIX provides system calls which allow programs to send and receive packets over a local area network using a variety of communication protocols. Berkeley UNIX provides a socket <ref> [8] </ref> abstraction for handling this style of point-to-point intermachine communication. However, this built-in support for point-to-point communications is often too low-level for everyday use in applications development. Little or no direct support is provided for data marshalling, synchronous communication, handling partial failures, and other concerns. <p> The VsTcpClient will accept the data, buffer it for transmission, and reply to the video source that the payload was accepted. 4 When the VsTcpClient accepts more payloads than it can buffer, it is necessary to look more closely at the socket interface presented by the BSD TCP implementation <ref> [8] </ref>. Once a connection is established, the VsTcp modules see the connection as a file descriptor. If a VsTcp module attempts to write more data than can be stored in the connection buffers, the process is blocked until enough buffers are available to accept the new data. <p> Alternatives to per-user Daemons The main alternative to having the daemon started when a user logs into a machine is to use inetd <ref> [8] </ref> to start a new daemon on a host each time a connection to a daemon on that host is requested. This has the advantage of always having a daemon available on every host, even if no user is logged in.
Reference: [9] <author> Arthur Goldberg, Robert Strom, and Shaula Yemini. </author> <title> Hermes: A high-level process-model language for distributed computing. </title> <type> Technical Report IBM RC 17707, </type> <institution> IBM Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> Feb </month> <year> 1992. </year>
Reference-contexts: Medusa is similar to the VuSystem in many respects, though two notable differences are the VuSystem's in-band and out-of-band hierarchy and interactive programming environment. Medusa grew out of the Pandora project described in [11]. 15 1.4.7 Hermes Hermes <ref> [9] </ref> is a high level language in which it is simple to start up new processes and connect them together to allow distribution of different parts of a program.
Reference: [10] <author> Brent Hailpern and Gail E. Kaiser. </author> <title> An architecture for dynamic reconfiguration in a distributed object-based programming language. </title> <type> Technical Report IBM RC 18269, </type> <institution> IBM Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> Aug </month> <year> 1992. </year>
Reference-contexts: Marionette uses a master-slave model for parallel computing, where a "master" process sends work to "slaves" that are transparently distributed over a network. 1.4.14 PROFIT PROFIT <ref> [10] </ref> is a distributed object-based language designed for financial analysis where distributed processes must share primitive objects. In PROFIT, processes running anywhere over a network can be sharing objects.
Reference: [11] <author> A. Hopper. </author> <title> Pandora an experimental system for multimedia applications. </title> <journal> ACM Operating Systems Review, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: Medusa is similar to the VuSystem in many respects, though two notable differences are the VuSystem's in-band and out-of-band hierarchy and interactive programming environment. Medusa grew out of the Pandora project described in <ref> [11] </ref>. 15 1.4.7 Hermes Hermes [9] is a high level language in which it is simple to start up new processes and connect them together to allow distribution of different parts of a program.
Reference: [12] <author> Clifford Dale Krumvieda. </author> <title> Distributed ML: Abstractions for Efficient and Fault-Tolerant Programming. </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <month> Aug </month> <year> 1993. </year>
Reference-contexts: This adds a great deal of flexibility to the construction of distributed programs, but also raises security concerns. REV also provides a transaction mechanism that is used to deal with partial failures. 1.4.12 Distributed ML Distributed ML (DML) <ref> [12] </ref> provides distributed programming extensions to Concurrent ML, which is itself a version of Standard ML enhanced to support concurrent programming.
Reference: [13] <author> C. J. Lindblad, D. Wetherall, and D. L. Tennenhouse. </author> <title> The VuSystem: A programming system for visual processing of digital video. </title> <booktitle> In Proceedings of ACM Multimedia, </booktitle> <month> October </month> <year> 1994. </year>
Reference: [14] <author> Christopher J. Lindblad. </author> <title> A System for the Dynamic Manipulation of Temporally Sensitive Date. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> Aug </month> <year> 1994. </year> <month> MIT/LCS/TR-637. </month>
Reference-contexts: For each such object, a new Tcl command is registered with the interpreter. Operations on objects are invoked by the object command, with the first argument typically specifying the operation and the other arguments specifying the arguments for the operation. For more details on Tcl and VuSystem programming, see <ref> [14] </ref>. 2.2.1 The VsPuzzle Application VsPuzzle is an example of a traditional VuSystem application. VsPuzzle opens a video source and displays a scrambled image of the video in a window; the user can then attempt to unscramble the image. <p> A new option command, the "net" command, allows an application to specify either "ethernet" or "vunet" as the network that the VsTcp modules use for communication. 2 See <ref> [14] </ref> for more details. 41 3.3 In-Band Communication Protocols 3.3.1 The VuSystem Module Data Protocol The VuSystem module data protocol [14] is a closed-loop protocol that governs the transfer of in-band data between modules in a traditional VuSystem application. (That is, between modules executed by the same thread.) The protocol provides <p> A new option command, the "net" command, allows an application to specify either "ethernet" or "vunet" as the network that the VsTcp modules use for communication. 2 See <ref> [14] </ref> for more details. 41 3.3 In-Band Communication Protocols 3.3.1 The VuSystem Module Data Protocol The VuSystem module data protocol [14] is a closed-loop protocol that governs the transfer of in-band data between modules in a traditional VuSystem application. (That is, between modules executed by the same thread.) The protocol provides for tightly-coupled flow control to match the ability of the upstream module to send "payloads" (the unit of media data
Reference: [15] <author> Barbara Liskov. </author> <title> Distributed programming in Argus. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 300-312, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: Within a single machine, the Chorus nucleus handles inter-actor communication; between machines, the nuclei and a network server (built on top of the nucleus) work to route messages to the appropriate machine so they can be delivered to the appropriate port. 1.4.5 Argus Argus <ref> [15] </ref> is a programming language and system designed to support distributed implementation of systems that must maintain on-line state. Argus supports both distributed programming and transactions through mechanisms known as guardians and actions.
Reference: [16] <author> Michael R. Macedonia and Donald P. Brutzman. </author> <title> Mbone provides audio and video across the internet. </title> <journal> IEEE Computer, </journal> <volume> 27(4) </volume> <pages> 30-36, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Like the VuSystem, Durra separates concerns of component development from the use of those components. Unlike the VuSystem, Durra is meant as a general purpose application-level language, and is not specifically designed for writing media applications. 17 1.4.16 The Multicast Backbone The Multicast Backbone, or Mbone <ref> [16] </ref>, is a virtual network on the Internet used for multicast of audio and video. The Mbone uses IP multicast addressing and special routers that handle multicast addressing to support the multicast of audio and video streams over wide areas using the same physical layer as existing point-to-point networks. <p> An arbitrary number of slaves can be added to a VsMultiCast session. However, it is important to note that when a video stream is shared in this manner it is 7 The VuSystem VsMultiCast is implemented by multiple point-to-point connections. By contrast, the Mbone <ref> [16] </ref> is used to perform video conferencing over a network that supports multicast addressing. 88 necessary to do a substantial amount of copying of the underlying media. Further, in the original implementation, shared video source will operate at the rate of its slowest sink.
Reference: [17] <author> John Outerhout. </author> <title> TCL: An embeddable command language. </title> <booktitle> USENIX, </booktitle> <year> 1990. </year>
Reference-contexts: Because in-band and out-of-band processing have very different characteristics, separating them allows their architectures to be optimized independently. VuSystem applications are written as out-of-band Tcl <ref> [17] </ref> scripts which typically create and configure a variety of modules and then dedicate themselves to control message passing where they decode user events, initiate the appropriate actions, and display feedback to the user. <p> As a general rule, substitution for any variable name that is surrounded by curly braces is performed in the remote environment, and all other variables are evaluated in the local environment. See <ref> [17] </ref> for more details. To receive data from an out-of-band connection, an application must set up a callback routine that will be automatically called when new data is received.
Reference: [18] <author> F.N. Parr and R.E. Strom. </author> <title> Nil: A high level language for distributed systems programming. </title> <type> Technical Report IBM RC 9750, </type> <institution> IBM Research Center, </institution> <address> Yorktown Heights, NY, </address> <month> Dec </month> <year> 1982. </year>
Reference-contexts: In Avalon/LISP, evaluators are first class objects, and can be passed in messages from clients to servers. This gives fine-grain control over where evaluation is done for different 2 Hermes grew out of the NIL programming language <ref> [18] </ref>, and so NIL will not be discussed here. 16 parts of a program; some parts can be evaluated locally, and others remotely.
Reference: [19] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrman, C. Kaiser, S. Langlois, P. Leonard, and W. Neuhauser. </author> <title> Chorus distributed operating systems. </title> <journal> Computing Systems, </journal> <volume> 1(4) </volume> <pages> 305-370, </pages> <year> 1988. </year>
Reference-contexts: Finally, support for distributed programming can either be in the form of general operating system 12 facilities for distributed programming or extensions to a specific language to ease writing distributed programs in that language. The Client-Shell Distributed Architecture [20], the ISIS [6] project, Mach [1], and Chorus <ref> [19] </ref> provide general operating system level support for distributed programming in any language, while the rest of the related work focuses on either creating a new distributed programming language or extending an existing language to facilitate distributed programming. <p> Network ports are ports to which processes on multiple hosts have access rights, so that a message sent to a network port is actually sent over the network to the host running the process that owns the network port. 1.4.4 Chorus Similar to Mach, Chorus <ref> [19] </ref> is a nucleus upon which distributed operating systems may be built. Chorus is not built on top of a specific sub-system; instead, it provides generic tools designed to support various host systems that can co-exist on top of the Chorus nucleus.
Reference: [20] <author> Stuart Sechrest. </author> <title> A Client-Server Shell Architecture for Distributed Programming. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> Aug </month> <year> 1993. </year>
Reference-contexts: Finally, support for distributed programming can either be in the form of general operating system 12 facilities for distributed programming or extensions to a specific language to ease writing distributed programs in that language. The Client-Shell Distributed Architecture <ref> [20] </ref>, the ISIS [6] project, Mach [1], and Chorus [19] provide general operating system level support for distributed programming in any language, while the rest of the related work focuses on either creating a new distributed programming language or extending an existing language to facilitate distributed programming.
Reference: [21] <author> James W. Stamos. </author> <title> Remote Evaluation. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> Jan </month> <year> 1986. </year>
Reference-contexts: No support is provided for transactions or other locking mechanisms; the focus of Avalon/LISP is to allow for general remote evaluation. 1.4.11 REV REV <ref> [21] </ref> is a set of extensions to CLU to provide transactions and support general remote evaluation. Servers are not viewed as providing a fixed set of services, but are rather seen as programmable devices that may be sent both code to execute and data to execute it on.
Reference: [22] <author> W. Richard Stevens. </author> <title> TCP/IP Illustrated, volume I. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The details of TCP are well documented <ref> [22] </ref> and will not be described here. The VsTcp Modules To see how the TCP connection works with the VuSystem Module Data protocol, consider a upstream video source trying to send a payload to the downstream 44 VsTcpClient module.
Reference: [23] <author> Mark Sullivan and David Anderson. Marionette: </author> <title> A system for parallel distributed programming using a master/slave model. </title> <type> Technical Report UCB/CSD-88/460, </type> <institution> University of California, Berkeley, Computer Science Division, </institution> <month> Nov </month> <year> 1988. </year> <month> 118 </month>
Reference-contexts: DML provides a data object called a port group, which is a fault informative asynchronous multicast channel that can be used as the basis for writing distributed programs. 1.4.13 Marionette Marionette <ref> [23] </ref> is a language designed for distributing computation over a network for parallelism and increased performance.
Reference: [24] <author> D. L. Tennenhouse, J. Adam, D. Carver, H. Houh, M. Ismert, C. Lindblad, W. Stasior, D. Weatherall, D. Bacher, , and T. Chang. </author> <title> A software-oriented approach to the design of media processing environments. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems. IEEE, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Two features that distinguish the VuSystem from other video programming toolkits are that the VuSystem is designed to create computer participative applications (where the computer directly manipulates the media) and that the VuSystem is designed to work with live video sources. The ViewStation <ref> [24] </ref> project integrates the VuSystem with the VuNet, a high speed ATM-based local area network developed within the TNS group. It includes several modern workstations, high-speed links between nodes, and video capture cards known as Vidboards [2]. The research described here extends the VuSystem to allow for distributed programming.
Reference: [25] <author> David J. Wetherall. </author> <title> An interactive programming system for media computation. </title> <type> Master's thesis, </type> <institution> MIT, </institution> <month> Aug </month> <year> 1994. </year> <month> MIT/LCS/TR-640. </month>
Reference-contexts: The VuSystem has a run-time visual and textual programming environment that allows a user to quickly and easily reconfigure an existing program either by entering Tcl commands to be interpreted or by simply moving around graphic representations of modules <ref> [25] </ref>. This makes the VuSystem a programming environment well suited to the creation, debugging, and testing of media applications. There are several reasons why the VuSystem is an appropriate platform for this research.
Reference: [26] <author> Jeanette M. Wing, Maurice Herlihy, Stewart Clamen, David Detlefs, Karen Kietzke, Richard Lerner, and Su-Tuen Ling. </author> <title> The Avalon/C++ programming language. </title> <type> Technical Report CMU-CS-88-209, </type> <institution> Carnegie-Mellow Univ. Computer Science Dept., </institution> <month> Dec </month> <year> 1988. </year>
Reference-contexts: Both synchronous and asynchronous point-to-point communication mechanisms (which hide the details of the underlying IPC mechanism) are provided. Hermes and Concert/C provide a similar set of utilities for network programming. 1.4.9 Avalon/C++ Avalon/C++ <ref> [26] </ref> is a set of extensions to the C++ language that provide support for developing fault-tolerant software via the use of transactions and modules with recoverable state. Avalon/C++ focuses on providing tools to use distributed programming for increased fault tolerance.
Reference: [27] <author> Stuart Wray, Tim Glauert, and Andy Hopper. </author> <title> The medusa application environment. </title> <booktitle> In Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <pages> pages 265-273. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1994. </year> <month> 119 </month>
Reference-contexts: Next, computations in Argus may be encapsulated within "actions" which (like transactions) are both serializable and total. By providing guardians and actions, Argus eases the job of writing reliable distributed programs that deal with partial failures and concurrency. 1.4.6 Medusa Medusa <ref> [27] </ref> is a system that uses a peer to peer architecture to create, control, and configure networked media devices. All Medusa entities are active modules which may represent applications as well as lower-level modules such as cameras and displays.
References-found: 27

