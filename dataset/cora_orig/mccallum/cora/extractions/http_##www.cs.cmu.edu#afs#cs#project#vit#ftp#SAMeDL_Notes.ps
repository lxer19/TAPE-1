URL: http://www.cs.cmu.edu/afs/cs/project/vit/ftp/SAMeDL_Notes.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/gz/www/Zelesnik.html
Root-URL: 
Title: of the SQL Ada Module Description Language (SAMeDL)  
Author: Gary Chastek Marc H. Graham Gregory Zelesnik 
Date: June 1991  
Note: CMU/SEI-91-TR-12 Notes on Applications  
Abstract: Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Ada 9X Project Report - Requirements Workshop. Office of the Undersecretary of Defense for Acquisition, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Chapter 4 describes techniques for constructing Ada applications that wish to present multiple, simultaneous transactions to a DBMS. 4. SQL Decimal Support in the SAMeDL. The lack of support for decimal arithmetic and decimal representations in Ada has been the subject of much discussion <ref> [1] </ref>. Chapter 5 presents a suggested implementation of decimal support. Interested readers are advised to examine the decimal support being prepared as part of the Ada9X revision project [2]. This chapter discusses the steps needed to add decimal support, in the form of base domains, to the SAMeDL.
Reference: 2. <institution> Ada 9X Project Report DRAFT Mapping Document. Ada 9X Project Office, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: The lack of support for decimal arithmetic and decimal representations in Ada has been the subject of much discussion [1]. Chapter 5 presents a suggested implementation of decimal support. Interested readers are advised to examine the decimal support being prepared as part of the Ada9X revision project <ref> [2] </ref>. This chapter discusses the steps needed to add decimal support, in the form of base domains, to the SAMeDL. The Ada semantics for those base domains can be supplied by anyone, including the authors of [2]. <p> to examine the decimal support being prepared as part of the Ada9X revision project <ref> [2] </ref>. This chapter discusses the steps needed to add decimal support, in the form of base domains, to the SAMeDL. The Ada semantics for those base domains can be supplied by anyone, including the authors of [2]. The remainder of this introduction discusses issues that we considered important, but not sufficiently complicated to warrant a chapter of their own. <p> This is not quite true, however, for the following reason. As discussed in <ref> [2] </ref>, there is a strong assumption that the underlying implementation of fixed point in an Ada compiler will be in binary, as discussed in 3.5.9 of [3], which defines the model numbers as covering a binary range, described by the mantissa value B. <p> The number is followed by a sign, also represented in four bits, and zero filled on the left when there is an even number of digits. 35 It is important to note (see <ref> [2] </ref>) that there is no relation between packed decimal and decimal small values. Packed decimal is simply another way of representing integers, and it is possible to use packed decimal for any fixed-point values, including those with binary small values.
Reference: 3. <institution> Reference Manual for the Ada Programming Language. Ada Joint Program Office, </institution> <month> Jan-uary </month> <year> 1983. </year>
Reference-contexts: To make life easier for those application programmers processing one transaction at a time, the above described Transaction_Identifier formal parameter is supplied with a default_expression (see Section 6.1 of <ref> [3] </ref>). This default expression names a default transaction identifier object, supplied by the SAMeDL compiler vendor in the same Ada package in which the transaction identifier Ada data type is declared (see Section 4.4.1 above). The default transaction identifier has a predefined name, such as Default_Transaction. <p> This is not quite true, however, for the following reason. As discussed in [2], there is a strong assumption that the underlying implementation of fixed point in an Ada compiler will be in binary, as discussed in 3.5.9 of <ref> [3] </ref>, which defines the model numbers as covering a binary range, described by the mantissa value B. Current Ada compiler implementations, therefore, require that the specified value for the 'SMALL attribute (the small value) of a fixed point type be a power of two.
Reference: 4. <institution> Database Language - SQL with Integrity Enhancement. American National Standards Institute, </institution> <year> 1989. X3.135-1989. </year>
Reference-contexts: The name of the SQL module is implementation defined. The language clause of the SQL module shall specify Ada. The module authorization clause is implementation defined. In the SQL standard <ref> [4] </ref>, Syntax rule 2 of Section 7.1 reads: A &lt;module&gt; shall be associated with an application program during its execution. <p> Database Schemas and SAMeDL Schema Modules The SAMeDL Schema Module language, given in Section 4.2 of the reference manual, is modeled after the schema definition language in Section 6 of the SQL standard <ref> [4] </ref>. The schema definition language assumes the database is defined once and for all, an unrealistic assumption that is discussed at length in Chapter 3. The discussion here concerns the relationship between the SAMeDL database definition as described in the schema modules and the DBMS database definition. <p> Dynamic SQL in the SAMeDL by Gary Chastek and Marc H. Graham 2.1. Introduction The SAMeDL (see [8]) is designed to facilitate the construction of Ada application programs that access and manipulate data stored in a database management system whose data manipulation language is ANSI standard SQL (see <ref> [4] </ref>). Dynamic SQL is frequently offered by commercial database management systems (see [14] and [12]), but is not part of the standard. Hence the SAMeDL does not currently support dynamic SQL. The SAMeDL can, however, be extended to support dynamic SQL. <p> The DIS is available as [10]. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. Introduction SQL, as defined by the ANSI standard ( <ref> [4] </ref>), is static; that is, the names and types of the parameters are known at compile time. Parameters may represent objects whose values, for example, appear in search conditions or as values to insert into a table. Most SQL statements can take parameters. <p> ANSI Standard SQL ANSI standard SQL only partially addresses issues of database definition. This section discusses the concepts and semantics of database definition as specified in the standard. 3.2.1.1. Terminology The primary concept of database definition in ANSI standard SQL is the schema (see Section 4.6 of <ref> [4] </ref>). The schema is a persistent object in the environment and is comprised of all table, view, and privilege definitions known to the environment for a specified authorization identifier. The tables, views, and privileges are defined by the schema definition, and cannot exist in the environment except within a schema. <p> The environment in the ANSI SQL standard is implementation defined. However, the ANSI standard implies that the environment contains the schema object, and that it may contain more than one (see Section 4.7 of <ref> [4] </ref>). The database in ANSI standard SQL is defined as the collection of all data defined by the schemas in an environment. 3.2.1.2. Database Declaration and Evolution In [4] the semantics of database definition in ANSI standard SQL is described by: NOTE: An implementation may provide facilities (such as DROP TABLE, <p> ANSI standard implies that the environment contains the schema object, and that it may contain more than one (see Section 4.7 of <ref> [4] </ref>). The database in ANSI standard SQL is defined as the collection of all data defined by the schemas in an environment. 3.2.1.2. Database Declaration and Evolution In [4] the semantics of database definition in ANSI standard SQL is described by: NOTE: An implementation may provide facilities (such as DROP TABLE, DROP VIEW, ALTER TABLE, and REVOKE) that allow the definitions of the tables, views, and privileges for a given &lt;authorization identifier&gt; to be created, destroyed, and modified incrementally <p> The standard does not define a means for evolving a database definition, and inadequately addresses practical aspects of initial database declaration through schema definition. 3.2.1.3. Executable DDL ANSI standard SQL does not define executable DDL. The syntax for an embedded SQL statement (see Annex A of <ref> [4] </ref>) does not include schema definition language elements (see Chapter 6 of [4]). Therefore, the standard does not address database definition from within application programs. 3.2.2. <p> Executable DDL ANSI standard SQL does not define executable DDL. The syntax for an embedded SQL statement (see Annex A of <ref> [4] </ref>) does not include schema definition language elements (see Chapter 6 of [4]). Therefore, the standard does not address database definition from within application programs. 3.2.2. Commercial Implementations Because ANSI standard SQL does not adequately address the pragmatic aspects of database definition, commercial SQL implementations typically deviate from the standard to sufficiently address these issues, especially with respect to database evolution. <p> This chapter describes alternative strategies by which a SAMeDL compiler might support multiple concurrent transaction applications. 21 A transaction is a sequence of database operations that is atomic with respect to recovery and concurrency (see Section 4.16 of <ref> [4] </ref>). <p> In the traditional model of transaction processing, concurrent transactions in a multi-user DBMS environment are considered to be independent and non-interfering. Transactions executing concurrently are guaranteed by the ANSI standard to be serializable (see Section 4.16 of <ref> [4] </ref>). That is, the execution of concurrent transactions produces the same effect as if the transactions were executed serially, where one transaction runs to completion before another one is begun. Ada tasking, however, has the potential to destroy this model of transaction processing. <p> An advantage of using an integer binding is that, if scaled properly, the data will retain exactness. No loss of accuracy will occur during the conversion. 38 The use of the term precision in this chapter is consistent with its use in <ref> [4] </ref>, where it is used to refer to the number of significant digits. CMU/SEI-91-TR-12 57 5.2.1.2. Floating-Point Bindings A floating-point binding converts the decimal data to an SQL real representation in the SQL module.
Reference: 5. <institution> Database Language - Embedded SQL X3.168-1989. American National Standards Institute, </institution> <year> 1989. </year>
Reference-contexts: Database Evolution As described above in Paragraph 3.2.2.2, all commercial DBMS implementations provide DDL that performs the necessary task of database evolution. The ANSI draft proposed follow-on standard for SQL, called SQL2 (see <ref> [5] </ref>), also recognizes the need for database evolution and provides SQL statements that modify and delete schema elements. The SAMeDL can be extended to support database evolution. <p> Many application development organizations wish to take advantage of Ada tasking in ap 21 plications that access data from SQL databases to perform multiple transactions in parallel. The problem is that neither ANSI standard SQL nor the follow-on standard, SQL2 (see <ref> [5] </ref>), allows for the execution of multiple concurrent transactions from within one application program. This is because there is no way in the standard to associate the execution of an individual database operation with a particular transaction among a concurrent set of transactions. <p> The objective is to choose data types in both Ada and SQL that have identical concrete representations so that no data conversion is necessary as the data pass across the interface. Section 8 of <ref> [5] </ref> specifies the ANSI standard programming language type bindings for Ada and SQL, but adherence to the standard may be too restrictive because it prohibits the use of the SQL data type decimal in a parameter declaration. <p> The following two sections discuss Ada/SQL bindings that may be of interest to the SAMeDL compiler implementor. Both ANSI standard bindings and bindings not described by this standard are presented. 5.2.1. Standard Bindings The embedded SQL standard (see <ref> [5] </ref>) requires that the SQL data type in an Ada/SQL binding specify either character, smallint, integer, real, or double precision. The Ada type of this 37 binding is required to be a data type from the Ada package SQL_Standard. <p> An advantage of using a floating-point binding, however, is that no scaling of the data is necessary in the SQL module and the application. 5.2.2. Non-Standard Bindings Non-standard Ada/SQL bindings are those bindings not described by the ANSI SQL standard (see Section 8 of <ref> [5] </ref>). As in the case of decimal, described below, the SAMeDL compiler implementor may be required to bind SQL data types to Ada data types that do not reside in the Ada package SQL_Standard.
Reference: 6. <author> Booch Grady. </author> <title> Software Engineering with Ada. </title> <publisher> The Benjamin/Cummings Publishing Company Inc., </publisher> <year> 1983. </year>
Reference-contexts: The tasking capability of Ada allows application programs to perform separate units of work in parallel. For example, in process control applications such as avionics software, tasks are used to monitor many different sensors simultaneously, regularly reporting their status in real time (see Section 6.3 of <ref> [6] </ref>). Many application development organizations wish to take advantage of Ada tasking in ap 21 plications that access data from SQL databases to perform multiple transactions in parallel.
Reference: 7. <author> Brykczynski, B. R.; Friedman, F. </author> <title> Preliminary Version: Ada/SQL: A Standard, Portable, Ada-DBMS Interface. </title> <type> Tech. </type> <institution> Rept. P-1944, Institute for Defense Analyses, Alexandria, Vir-ginia, </institution> <month> July </month> <year> 1986. </year>
Reference-contexts: Such a generation facility is likely to be easier to use and less error prone than a simple string facility. The so-called WIS approach <ref> [7] </ref> to SQL Ada interfacing is an example of a dynamic SQL generation facility. There is an alternative that is particularly appealing to applications that are only "slightly dynamic." The processor column lookup problem introduced earlier is an example of such an application.
Reference: 8. <author> Chastek, Gary, Graham, Marc H., and Zelesnik Gregory. </author> <title> The SQL Ada Module Description Language - SAMeDL. </title> <type> Tech. </type> <institution> Rept. CMU/SEI-90-TR-26, Software Engineering Institute, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: In the SQL standard [4], Syntax rule 2 of Section 7.1 reads: A &lt;module&gt; shall be associated with an application program during its execution. An application program shall be associated with at most one &lt;module&gt;. 2 In the version of the reference manual published as an SEI technical report <ref> [8] </ref>, a paragraph like this appeared in Section 3.1 (Compilation Units), assigning a single SQL module to an entire SAMeDL compilation. <p> Only the name of the database, and not the application software itself, need be changed when a newly developed or modified application is put into production. 1.3. Optional Base Domain Options The so-called fundamental base domain options (see Section 4.1.1.3 of <ref> [8] </ref>) are sufficient for the purposes of defining the SAMeDL. <p> For a SAMeDL compiler to implement that specification, it will need to know more. Consider the declaration of the Weight domain, as defined in the Parts Suppliers Database of Section 4.1.3 of <ref> [8] </ref>. domain Weight is new SQL_Int ( First =&gt; 0, 4 CMU/SEI-91-TR-12 Last =&gt; Max_SQL_Int); -- Note: This text must have visibility to -- the SAMeDL standard definition modules -- SAMeDL_Standard and SAMeDL_System. from which, using the domain pattern for SQL_Int (see Appendix C.1) the following Ada type 3 and package <p> Dynamic SQL in the SAMeDL by Gary Chastek and Marc H. Graham 2.1. Introduction The SAMeDL (see <ref> [8] </ref>) is designed to facilitate the construction of Ada application programs that access and manipulate data stored in a database management system whose data manipulation language is ANSI standard SQL (see [4]). <p> The Ada declarations for Example_Using are not shown, but are derived in a straightforward way. In particular, no subpackage corresponding to the cursor is generated in the Ada package. A record type might be generated for the FETCH, and an into_clause ( <ref> [8] </ref>, Section 5.9) might be used to control it. Unlike the case of a static cursor in the SAMeDL, the example in Figure 2-1 does not treat the cursor as an entity. Such a treatment is possible. <p> Such a treatment is possible. A dynamic cursor might be defined by the following grammar rule: extended dynamic cursor cursor_name [with inputs ( input_parameter_list )] with select list dynamic_select_list ; A SAMeDL input_parameter_list ( <ref> [8] </ref> 5.6) specifies the names and types of the input parameters to the cursor and may be used unmodified to describe the inputs of dynamic cursors. A SAMeDL select_list ( [8] Section 5.7) must be modified slightly to describe the outputs of dynamic cursors. <p> grammar rule: extended dynamic cursor cursor_name [with inputs ( input_parameter_list )] with select list dynamic_select_list ; A SAMeDL input_parameter_list ( <ref> [8] </ref> 5.6) specifies the names and types of the input parameters to the cursor and may be used unmodified to describe the inputs of dynamic cursors. A SAMeDL select_list ( [8] Section 5.7) must be modified slightly to describe the outputs of dynamic cursors. The value_expressions of a SAMeDL select parameter cannot be used here. Instead, a dynamic_select_list might use domain names, as the domain of the select parameter is all that is of use here. <p> If such tools are to be written in Ada, support for those statements should appear in the SAMeDL processor. The SAMeDL supports nonstandard data types through user-defined base domains (see Section 4.1 of <ref> [8] </ref> and Section 5.2 of [9]). There is no need to extend the language, provided that the type of the data at the concrete interface (see [11]) is one of those in SQL_Standard. In ORACLE, INGRES, and DB2, calendar data appear as character strings at the concrete interface. <p> These schema module elements are modeled after the schema elements of ANSI standard SQL. SAMeDL schema modules, however, are not modeled after ANSI standard SQL schemas, and they do not have similar semantics. In fact, the SAMeDL language definition (see <ref> [8] </ref>) remains silent on the SQL semantics of the SAMeDL schema module. Schema modules simply provide a mechanism with which to declare schema elements such as tables, views, and privileges, and a way to logically group these objects for use by SAMeDL abstract modules (see Chapter 5 of [8]) and other <p> definition (see <ref> [8] </ref>) remains silent on the SQL semantics of the SAMeDL schema module. Schema modules simply provide a mechanism with which to declare schema elements such as tables, views, and privileges, and a way to logically group these objects for use by SAMeDL abstract modules (see Chapter 5 of [8]) and other schema modules (see Section 4.2 of [8]). The environment in the SAMeDL is implementation defined, as it is in ANSI standard SQL. However, the environment is assumed to contain information about schema module and definitional module elements that have been previously processed by the SAMeDL compiler. <p> Schema modules simply provide a mechanism with which to declare schema elements such as tables, views, and privileges, and a way to logically group these objects for use by SAMeDL abstract modules (see Chapter 5 of <ref> [8] </ref>) and other schema modules (see Section 4.2 of [8]). The environment in the SAMeDL is implementation defined, as it is in ANSI standard SQL. However, the environment is assumed to contain information about schema module and definitional module elements that have been previously processed by the SAMeDL compiler. <p> Database Declaration and Evolution Because the SAMeDL does not discuss schemas or databases, or any other means for partitioning the data in the SQL environment, the language definition (see <ref> [8] </ref>) makes no correlation between these objects and SAMeDL schema modules. Therefore, SAMeDL schema elements are defined incrementally and logically grouped to support application development. All database definitions in the SAMeDL, then, are essentially evolutionary. <p> All database definitions in the SAMeDL, then, are essentially evolutionary. Even initial database declaration is considered to be just the first increment, and a special case, of a constantly evolving SAMeDL database definition. 3.2.3.3. Executable DDL As specified in the language definition (see <ref> [8] </ref>), the SAMeDL does not define syntax for executable DDL. The SAMeDL compiler implementor may, however, implement language extensions to provide the SAMeDL programmer with this capability (see Section 3.7 of [8] and Chapter 3.3 below). CMU/SEI-91-TR-12 29 3.2.3.4. <p> Executable DDL As specified in the language definition (see <ref> [8] </ref>), the SAMeDL does not define syntax for executable DDL. The SAMeDL compiler implementor may, however, implement language extensions to provide the SAMeDL programmer with this capability (see Section 3.7 of [8] and Chapter 3.3 below). CMU/SEI-91-TR-12 29 3.2.3.4. The Data Dictionary As described above in Subsection 3.2.3.1, the SAMeDL environment contains information about schema module and definitional module elements that have been previously processed by the SAMeDL compiler. <p> Extending the SAMeDL As described above in Section 3.2.3 database definition in the SAMeDL is essentially evolutionary. The SAMeDL, however, specifies only the creation of schema elements in the language definition (see <ref> [8] </ref>). It does not address the modification and deletion of schema elements because the DDL of the SAMeDL is modeled after the DDL of ANSI standard SQL. Commercial DBMS, however, do implement DDL that performs modification and deletion of database objects. <p> The following sections describe examples for extending the language. 3.3.1. Extended Schema Elements All SAMeDL statements, including language extensions, that modify the SAMeDL data dictionary are considered to be DDL and must be implemented as schema elements (see Section 4.2 of <ref> [8] </ref>). Any schema element that does not have identical syntax to the table definition, view definition, or SQL privilege definition of the SAMeDL must be implemented as an extended schema element (see Section 3.7 of [8]). <p> considered to be DDL and must be implemented as schema elements (see Section 4.2 of <ref> [8] </ref>). Any schema element that does not have identical syntax to the table definition, view definition, or SQL privilege definition of the SAMeDL must be implemented as an extended schema element (see Section 3.7 of [8]). Therefore, any SAMeDL language extensions that are implemented to support the modification and deletion of SAMeDL schema elements, the creation of schema elements not specified in the language definition (see Section 4.2 of [8]), and executable DDL (see Section 3.3.3 below) must be implemented as an extended schema element in <p> definition of the SAMeDL must be implemented as an extended schema element (see Section 3.7 of <ref> [8] </ref>). Therefore, any SAMeDL language extensions that are implemented to support the modification and deletion of SAMeDL schema elements, the creation of schema elements not specified in the language definition (see Section 4.2 of [8]), and executable DDL (see Section 3.3.3 below) must be implemented as an extended schema element in the schema module. As described in [9], extensions must maintain the syntactic and semantic style of the SAMeDL so as to minimize portability problems. <p> Furthermore, extensions must remain strongly typed. Column definitions in extended schema elements, for example, must contain domain references to maintain the strong type 18 checking semantics of the SAMeDL. Furthermore, as a general guideline, the language definition for the SAMeDL (see Section 3.7 of <ref> [8] </ref>) states that "any portion of an extension whose semantics may be expressed in standard SAMeDL, shall be expressed in standard SAMeDL syntax." 3.3.2. Database Evolution As described above in Paragraph 3.2.2.2, all commercial DBMS implementations provide DDL that performs the necessary task of database evolution. <p> to extend the language to support any DDL statement found in a commercial implementation, or in SQL2. 18 See the rules for extending value expressions, search conditions, input parameter lists, table elements, select parameter lists, and into clauses, as specified in Sections 5.10, 5.11, 5.6, 4.2, 5.7, and 5.9 of <ref> [8] </ref>, respectively. CMU/SEI-91-TR-12 31 Examples The following is an example of an ALTER TABLE SAMeDL language extension. <p> It may not be necessary to extend any other SAMeDL statements, unless support for a transaction identifier in the statement causes the SAMeDL syntax to deviate from its specification in <ref> [8] </ref> (see Section 4.4.2 below). 4.3.1. Extending the SAMeDL Before implementing a language extension in the SAMeDL for a CONNECT or a BEGIN TRANSACTION statement, the SAMeDL compiler implementor must decide whether or not an extension is actually necessary.
Reference: 9. <author> Chastek, Gary, and Graham, Marc H. </author> <title> Rationale for SQL Ada Module Description Language - SAMeDL. </title> <type> Tech. </type> <institution> Rept. CMU/SEI-91-TR-4, Software Engineering Institute, </institution> <year> 1991. </year>
Reference-contexts: The method is described in SEI technical report Guidelines for the Use of the SAME [11]. The language is defined in The SQL Ada Module Description Language SAMeDL [18] and explained in Rationale for the SQL Ada Module Description Language <ref> [9] </ref>. As we've worked on this technology, we've confronted a number of issues that, although not important to the "average" DBMS application are important to a significant minority of the DBMS community. This report is our response to those needs. <p> Introduction Dynamic SQL presents a serious challenge to any Ada SQL interface mechanism that, like the SAMeDL, extends Ada-like type checking to the interactions of an Ada program with a database. To get a grasp of the difficulties involved, consider the following list, taken from Section 1.5 of <ref> [9] </ref>), of "requirements for the SAMeDL": 1. Modular program construction; separate compilation. 2. Application oriented, strong typing within the description of the database interaction (i.e., within the SAMeDL); and at the application interface. 16 CMU/SEI-91-TR-12 3. <p> If such tools are to be written in Ada, support for those statements should appear in the SAMeDL processor. The SAMeDL supports nonstandard data types through user-defined base domains (see Section 4.1 of [8] and Section 5.2 of <ref> [9] </ref>). There is no need to extend the language, provided that the type of the data at the concrete interface (see [11]) is one of those in SQL_Standard. In ORACLE, INGRES, and DB2, calendar data appear as character strings at the concrete interface. <p> As described in <ref> [9] </ref>, extensions must maintain the syntactic and semantic style of the SAMeDL so as to minimize portability problems. The syntax and semantics of SAMeDL 30 CMU/SEI-91-TR-12 extended schema elements must adhere to these guidelines. <p> The options discussed here are the predefined ones (see Section 4.1.1.3 of [18]) for the SQL_Decimal base domain; however, the SAMeDL compiler implementor may require the specification of additional options to generate the necessary code for the interface (see <ref> [9] </ref>). The first two options that are declared, for not null type name and for null type name, simply make the name of the types in the domain known to the SAMeDL.
Reference: 10. <institution> Database Language SQL. International Standards Organization, </institution> <month> April </month> <year> 1991. </year> <note> DIS 9075:199x(E). </note>
Reference-contexts: The DIS is available as <ref> [10] </ref>. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. <p> The DIS is available as <ref> [10] </ref>. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. <p> The DIS is available as <ref> [10] </ref>. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. Introduction SQL, as defined by the ANSI standard ( [4]), is static; that is, the names and types of the parameters are known at compile time.
Reference: 11. <author> Graham, Marc H. </author> <title> Guidelines for the Use of the SAME. </title> <type> Tech. </type> <institution> Rept. CMU/SEI-89-TR-16, ADA228027, Software Engineering Institute, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The method is described in SEI technical report Guidelines for the Use of the SAME <ref> [11] </ref>. The language is defined in The SQL Ada Module Description Language SAMeDL [18] and explained in Rationale for the SQL Ada Module Description Language [9]. <p> The SAMeDL supports nonstandard data types through user-defined base domains (see Section 4.1 of [8] and Section 5.2 of [9]). There is no need to extend the language, provided that the type of the data at the concrete interface (see <ref> [11] </ref>) is one of those in SQL_Standard. In ORACLE, INGRES, and DB2, calendar data appear as character strings at the concrete interface. SAMeDL support for the DDL extensions DROP TABLE and ALTER TABLE is discussed in Section 3.3.2 below. 3.2.2.4. <p> The two descriptions need only be identical for the common information about a database object; each data dictionary will contain information that is specific to its respective environment. For example, a description of a table in a SAMeDL data dictionary will contain a domain reference (see <ref> [11] </ref>) for each column, whereas a description in the DBMS data dictionary will contain the data type specification instead. Consistency also means that there must be a description in each data dictionary for every existing database object. <p> Communication Between Transactions In the traditional model of transaction processing, transactions are considered to be non-interfering and execute without intercommunication. In an Ada DBMS application program, however, two transactions executing in independent tasks may communicate with each other through global variables and rendezvous. 32 See Section 9.2 of <ref> [11] </ref> for a complete discussion of SQL and Ada tasks. 52 CMU/SEI-91-TR-12 This communication can result in the sharing of information derived from the execution of the database operations within the transactions themselves. <p> First, a binding between an Ada data type and an SQL data type must be selected for the particular implementation of SQL of the DBMS. This binding facilitates the transfer of the decimal data across the concrete interface (see Chapter 1 of <ref> [11] </ref>) into the abstract module without conversion. This level of support will be referred to throughout the chapter as the concrete level. Second, support must be provided on a more abstract level. <p> detail. 36 An Ada/SQL binding is the specification of an Ada data type/SQL data type pair that is used to describe a parameter at the concrete interface between the Ada procedure and the corresponding SQL procedure. 37 For a more detailed description of the Ada package SQL_Standard, please refer to <ref> [11] </ref>. 56 CMU/SEI-91-TR-12 Notice that decimal is excluded from the list of SQL data types that have standard bindings (see Section 8 of [ansi2]). <p> Otherwise the arithmetic operation is identical to the operation for the not null-bearing type. There are two sets of comparison operators for the null-bearing type. One set returns Boolean_With_Unknown values (see Section 3.1.2 of <ref> [11] </ref>), and the other returns Standard.Boolean values. For the Boolean_With_Unknown comparison operators, the comparison of any value to an object whose value is null results in a new truth value called unknown. Otherwise the comparison operation is identical to the operation for the not null-bearing type. <p> Other Operations A generic subpackage called SQL_Decimal_Ops is implemented in SQL_Decimal_Pkg to provide operations that require operands of both the null-bearing and not null-bearing types of domains derived from the types of the SQL_Decimal base domain (see Section 3.3 of <ref> [11] </ref>). The SAMeDL compiler generates Ada code for the domain declaration that instantiates the generic subpackage with the not null-bearing and the null-bearing types of the domain (see Section 5.3.2.2). The subpackage exports two functions that convert between the types of the domain.
Reference: 12. <institution> IBM DATABASE2 Reference. International Business Machines (IBM) Corporation, </institution> <month> March </month> <year> 1986. </year>
Reference-contexts: Introduction The SAMeDL (see [8]) is designed to facilitate the construction of Ada application programs that access and manipulate data stored in a database management system whose data manipulation language is ANSI standard SQL (see [4]). Dynamic SQL is frequently offered by commercial database management systems (see [14] and <ref> [12] </ref>), but is not part of the standard. Hence the SAMeDL does not currently support dynamic SQL. The SAMeDL can, however, be extended to support dynamic SQL. This chapter discusses how the SAMeDL may be extended to provide such support. Dynamic SQL presents a problem to any Ada program. <p> In [19], ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and <ref> [12] </ref>). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> For example, the ORACLE database exists when the ORACLE DBMS has been installed. In a DB2 installation, a default database already exists after installation of the DBMS, and subsequent databases are created by the nonstandard CREATE DATABASE SQL statement (see Chapter 4 of <ref> [12] </ref>). The execution of this statement causes the creation of an empty database in the DB2 DBMS. In INGRES, the DBA tool Createdb (see Chapter 4 of [15]) similarly creates an empty database in an INGRES DBMS. <p> For example, the DB2 DBMS provides SQL syntax that allows the DBAN to qualify a database object's name with the name of the database when creating, altering, or dropping that object (see Chapter 4 of <ref> [12] </ref>). INGRES, however, provides two SQL statements not found in the ANSI standard that allow an application to be attached to a specific database within the system. These SQL statements are CONNECT and DISCONNECT. <p> The nonstandard statement DROP TABLE is probably found in every SQL implementation. The nonstan CMU/SEI-91-TR-12 27 dard statement ALTER TABLE, which adds or deletes columns in an existing table, appears in both ORACLE and DB2 (see Chapter 2 of [19] and Chapter 4 of <ref> [12] </ref>, respectively.). It may well be wise for a SAMeDL processor to ignore the performance-oriented DDL statements, since those statements have no effect on the meaning of any application. On the other hand, commercial DBMS allow those DDL statements in applications, primarily for the use of system software tools. <p> More importantly, however, it provides application programmers with the means to create and delete temporary tables, as described in the introduction. DB2, INGRES, and ORACLE all allow their complete sets of DDL statements to be embedded in application programs (see Chapter 4 of <ref> [12] </ref>, Chapter 8 of [14], and Chapter 1 of [17], respectively). 3.2.2.5. The Data Dictionary Whenever a database object is defined, altered, or deleted in a commercial DBMS, system-specific information about that object is either added, updated, or deleted from the data dictionary tables, respectively. <p> However, because executable DDL is precompiled, some DBMS implementations perform updates to the data dictionary prior to the actual creation of the database object. For example, DB2 has a BIND step that must be performed before an application program containing executable DDL can be executed (see Chapter 4 of <ref> [12] </ref>). This step verifies the existence of tables and columns used in the embedded SQL statements and checks that the application has authorization to execute the statement.
Reference: 13. <institution> IBM DATABASE2 Data Base Planning and Administration Guide. International Business Machines (IBM) Corporation, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Although there are as many definitions of database as there are commercial im 17 plementations, the term is generally defined as a collection of database objects and storage spaces used to store application data. In Chapter 1 of <ref> [13] </ref>, DB2 defines a database as a collection of tables and associated indexes, as well as the table spaces in which they reside, used to store application data. <p> In [19], ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see <ref> [13] </ref> and [12]). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> DB2 refers to its data dictionary as the DB2 catalog. The DB2 catalog is comprised of tables of data in a system-defined database that contain information about everything defined to the DB2 system (see Chapter 1 of <ref> [13] </ref>). Finally INGRES refers to its data dictionary as the INGRES System Catalogs. These catalogs are tables and views that contain information about every database and database object in the system. The concept of the data dictionary is not defined by the ANSI SQL standard.
Reference: 14. <institution> INGRES/EMBEDDED SQL User's Guide and Reference Manual. Relational Technology Inc., </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Graham 2.1. Introduction The SAMeDL (see [8]) is designed to facilitate the construction of Ada application programs that access and manipulate data stored in a database management system whose data manipulation language is ANSI standard SQL (see [4]). Dynamic SQL is frequently offered by commercial database management systems (see <ref> [14] </ref> and [12]), but is not part of the standard. Hence the SAMeDL does not currently support dynamic SQL. The SAMeDL can, however, be extended to support dynamic SQL. This chapter discusses how the SAMeDL may be extended to provide such support. <p> In [19], ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and <ref> [14] </ref>), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and [12]). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> These SQL statements are CONNECT and DISCONNECT. Once the DBA or application is connected to a particular database, any execution of SQL including DDL will affect only that database (see Chapter 8 of <ref> [14] </ref>). ORACLE also provides a CONNECT and DISCONNECT, even though there is only one database in the DBMS (see Chapter 2 of [19]). 3.2.2.3. Commercial DDL Implementations Commercial DBMS implementations generally extend standard SQL with features for database evolution. These extensions fall into three general categories. 1. <p> More importantly, however, it provides application programmers with the means to create and delete temporary tables, as described in the introduction. DB2, INGRES, and ORACLE all allow their complete sets of DDL statements to be embedded in application programs (see Chapter 4 of [12], Chapter 8 of <ref> [14] </ref>, and Chapter 1 of [17], respectively). 3.2.2.5. The Data Dictionary Whenever a database object is defined, altered, or deleted in a commercial DBMS, system-specific information about that object is either added, updated, or deleted from the data dictionary tables, respectively.
Reference: 15. <institution> INGRES/SQL Reference Manual. Relational Technology Inc., </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: In [19], ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see <ref> [15] </ref> and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and [12]). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> Tables and views are two examples of database objects. CMU/SEI-91-TR-12 25 storage area in which tables, views, and other objects are stored; ORACLE also defines it as the set of objects stored in that area. In INGRES (see <ref> [15] </ref>), the database is used to store database objects such as tables, views, indexes, and procedures. The meaning of the term database defined by commercial implementations differs from its definition in the ANSI standard. <p> The execution of this statement causes the creation of an empty database in the DB2 DBMS. In INGRES, the DBA tool Createdb (see Chapter 4 of <ref> [15] </ref>) similarly creates an empty database in an INGRES DBMS. Because of the above semantics, the initial declaration of tables, views, and other database objects in a commercial DBMS implementation is a special case of database evolution. 3.2.2.2.
Reference: 16. <editor> Melton J. (Editor). </editor> <title> Database Language SQL2 (ISO working draft). </title> <booktitle> International Organization for Standardization and American National Standards Institute X3H2, </booktitle> <year> 1990. </year>
Reference-contexts: It is inappropriate for our purposes to select a particular vendor's dialect of dynamic SQL, and beyond the scope of this work to consider a large subset of vendors that offer dynamic SQL. Therefore, the follow-on standard SQL2 was chosen as our SQL model <ref> [16] </ref>. SQL2 is still being 6 developed; therefore, the statements we make about it may not be true of the final standard. Nonetheless, it serves as a good example of what can be expected from dynamic SQL facilities. <p> Included in these illustrations is a complete example, in SAMeDL and Ada, of a procedural interface to dynamic SQL. 6 Recently, the proposal of <ref> [16] </ref> has been accepted by ISO as a Draft International Standard (DIS), the final step before being accepted as an International Standard. The DIS is available as [10]. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section <p> complete example, in SAMeDL and Ada, of a procedural interface to dynamic SQL. 6 Recently, the proposal of <ref> [16] </ref> has been accepted by ISO as a Draft International Standard (DIS), the final step before being accepted as an International Standard. The DIS is available as [10]. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. <p> proposal of <ref> [16] </ref> has been accepted by ISO as a Draft International Standard (DIS), the final step before being accepted as an International Standard. The DIS is available as [10]. The primary difference between [16] and [10] is the section numbering. The dynamic SQL section, which was Section 12 of [16], is Section 17 of [10]. CMU/SEI-91-TR-12 11 2.2. Dynamic SQL in SQL2 2.2.1. Introduction SQL, as defined by the ANSI standard ( [4]), is static; that is, the names and types of the parameters are known at compile time. <p> CMU/SEI-91-TR-12 13 2.2.3. Dynamic SQL Parameters The previous section discussed dynamic SQL statements that did not involve parameters. Parameters are associated with dynamic SQL statements by the &lt;using clause&gt;. The operand of the SQL2 &lt;using clause&gt; (see Section 12.1 in <ref> [16] </ref>) specifies how dynamic SQL runtime parameters are described. There are two cases: parameters may be described by a list of identifiers, or by an SQL descriptor. In the simpler case, the operand of the &lt;using clause&gt; is a list of identifiers. <p> Table_Name = T ); n where T ,...T is the list of table names in scope. The question mark in the equality com-1 n parison Column_Name = ? is a so-called dynamic parameter ( <ref> [16] </ref>, Section 5.7) and occupies the location of an input parameter; the statement can be used to look up any putative column name. <p> If the previous GET DESCRIPTOR statement indicated that the first parameter was an integer, then that parameter's value (i.e., its DATA field in the descriptor area) could be set to 12 by: 11 Actually, PARAM1_TYPE will contain a code for the parameter's type, as specified in <ref> [16] </ref>, Clause 12.1. CMU/SEI-91-TR-12 15 SET DESCRIPTOR IN_DESCRIPTOR VALUE 1 DATA = 12; Note that the SET DESCRIPTOR statement's use is similar to the use of the GET DESCRIPTOR, except that in the SET DESCRIPTOR statement, the keyword indicating the desired attribute appears to the left of the equals sign. <p> A suggested procedural interface for dynamic SQL, given as a collection of extended procedures in an extended abstract module, is shown in Figure A-1. Essentially, each dynamic SQL statement in Sections 12.2 through 12.15 of <ref> [16] </ref> is turned into a procedure in a straightforward way. The domains used to declare the parameters in those procedures are defined in the definition module Dynamic_Domains in Figure A-2. The domains Descriptor_Name, Dynamic_Statement, Dynamic_Statement_Identifier, and Dynamic_Cursor_Identifier are character strings with implementation-defined length. <p> Dynamic_Char needs a new base domain that can accommodate strings of any length. This base domain definition, SQL_Unconstrained_Char, is found in the definition module Dynamic_Base_Domains in Figure A-3. Notice that its pattern is identical to SQL_Char with the constrained subtype declarations removed from its patterns. The SQL2 proposal <ref> [16] </ref> has a varying length character string data type, VARCHAR. SQL_Unconstrained_Char may serve as a model for the Ada type declarations to support VARCHAR. The dbms type option of SQL_Unconstrained_Char specifies VARCHAR, an implementation-defined dbms type, assuming an implementation for such a type exists in the target DBMS. <p> This requires the application programmer to keep track of these things. Further, a target DBMS may not support these extended forms. The SQL2 defined "Intermediate Level" SQL does not have extended descriptor names. The dynamic cursor update and delete statements ( <ref> [16] </ref>, Clauses 12.16 and 12.17) cannot be supported by a procedural interface. The &lt;table name&gt; must be coded into these statements.
Reference: 17. <institution> Pro*C User's Guide (Version 1.1). Oracle Corporation, </institution> <month> April </month> <year> 1987. </year>
Reference-contexts: In [19], ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and <ref> [17] </ref>), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and [12]). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> DB2, INGRES, and ORACLE all allow their complete sets of DDL statements to be embedded in application programs (see Chapter 4 of [12], Chapter 8 of [14], and Chapter 1 of <ref> [17] </ref>, respectively). 3.2.2.5. The Data Dictionary Whenever a database object is defined, altered, or deleted in a commercial DBMS, system-specific information about that object is either added, updated, or deleted from the data dictionary tables, respectively.
Reference: 18. <institution> SQL Ada Module Description Language. ISO/JTC1/SC22/WG9, </institution> <month> May </month> <year> 1991. </year> <note> CMU/SEI-91-TR-12 75 </note>
Reference-contexts: The method is described in SEI technical report Guidelines for the Use of the SAME [11]. The language is defined in The SQL Ada Module Description Language SAMeDL <ref> [18] </ref> and explained in Rationale for the SQL Ada Module Description Language [9]. As we've worked on this technology, we've confronted a number of issues that, although not important to the "average" DBMS application are important to a significant minority of the DBMS community. <p> This is not the way Ada likes to do things. Chapter 2 illustrates several solu tions to this problem. 2. Database Definition in the SAMeDL. The database description facilities of the SAMeDL, particularly the view and table declarations of <ref> [18] </ref>, Section 4.2, are essentially those of SQL. These facilities operate as though a database were defined once and for all. In fact, however, database definitions evolve and are modified incrementally. Furthermore, database applications occasionally have a need to execute database definition dynamically. <p> If no range constraints are specified, default range constraints are supplied for the domain by the instantiation of the generic subpackage SQL_Decimal_Ops (see Appendix C). 47 Refer to Section 4.1 of <ref> [18] </ref> for a complete discussion of SAMeDL base domain declarations. 48 All base domains with data class fixed are required to have a scale parameter (see Section 4.1.1.1 of [18]). CMU/SEI-91-TR-12 69 5.3.2.2. <p> supplied for the domain by the instantiation of the generic subpackage SQL_Decimal_Ops (see Appendix C). 47 Refer to Section 4.1 of <ref> [18] </ref> for a complete discussion of SAMeDL base domain declarations. 48 All base domains with data class fixed are required to have a scale parameter (see Section 4.1.1.1 of [18]). CMU/SEI-91-TR-12 69 5.3.2.2. Domain and Subdomain Patterns Domain and subdomain patterns are specifically designed for use with a particular base domain support package. The patterns in the SQL_Decimal base domain in Appendix D are designed specifically for use with the SQL_Decimal_Pkg support package in Appendix C. <p> Base Domain Options As discussed above, the base domain options are necessary for the SAMeDL processor to produce Ada and SQL code for the application/DBMS interface. The options discussed here are the predefined ones (see Section 4.1.1.3 of <ref> [18] </ref>) for the SQL_Decimal base domain; however, the SAMeDL compiler implementor may require the specification of additional options to generate the necessary code for the interface (see [9]).
Reference: 19. <institution> SQL*Plus Reference Guide (Version 2.0). Oracle Corporation, </institution> <month> July </month> <year> 1987. </year>
Reference-contexts: In Chapter 1 of [13], DB2 defines a database as a collection of tables and associated indexes, as well as the table spaces in which they reside, used to store application data. In <ref> [19] </ref>, ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and [12]). <p> In <ref> [19] </ref>, ORACLE defines a database as a disk 16 Throughout this section INGRES refers to INGRES version 6.2 for Unix (see [15] and [14]), ORACLE refers to ORACLE version 5.1A for MS-DOS (see [19] and [17]), and DB2 refers to IBM DATABASE2 Release 2 for TSO (see [13] and [12]). The discussion of database definition semantics in this section is synthesized from the sources cited in the previous sentence. <p> For example, DB2 and INGRES can both manage more than one application database per DBMS installation, whereas ORACLE will only manage one. The internal data are usually referred to as the data dictionary and used by the DBMS to properly manage the application data in the system. In <ref> [19] </ref>, ORACLE defines the data dictionary as a set of views and tables that contain information about the definitions of objects in the database. DB2 refers to its data dictionary as the DB2 catalog. <p> Once the DBA or application is connected to a particular database, any execution of SQL including DDL will affect only that database (see Chapter 8 of [14]). ORACLE also provides a CONNECT and DISCONNECT, even though there is only one database in the DBMS (see Chapter 2 of <ref> [19] </ref>). 3.2.2.3. Commercial DDL Implementations Commercial DBMS implementations generally extend standard SQL with features for database evolution. These extensions fall into three general categories. 1. Creation and maintenance of performance oriented structures. These are variously called clusters, indexes, partitions, spaces, etc. <p> Modification to and deletion of existing structures. The nonstandard statement DROP TABLE is probably found in every SQL implementation. The nonstan CMU/SEI-91-TR-12 27 dard statement ALTER TABLE, which adds or deletes columns in an existing table, appears in both ORACLE and DB2 (see Chapter 2 of <ref> [19] </ref> and Chapter 4 of [12], respectively.). It may well be wise for a SAMeDL processor to ignore the performance-oriented DDL statements, since those statements have no effect on the meaning of any application.
Reference: 20. <author> Ullman, Jeffrey D.. </author> <title> Principles of DATABASE SYSTEMS. </title> <publisher> Computer Science Press, Inc., </publisher> <year> 1982. </year> <note> 76 CMU/SEI-91-TR-12 </note>
Reference-contexts: a common subexpression (an expression appearing in more than one query) is not a large relation, and can be read from the database faster than it can be computed, then it is advantageous to compute the common subexpression once, and store it in a temporary table (see Chapter 8 of <ref> [20] </ref>). CMU/SEI-91-TR-12 23 3.2. Database Definition Each section below describes the semantics of database definition for one of the following: ANSI standard SQL, the SAMeDL, and commercial SQL implementations.
References-found: 20

