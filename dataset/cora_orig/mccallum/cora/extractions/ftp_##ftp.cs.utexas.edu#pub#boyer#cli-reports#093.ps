URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/093.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: 
Title: Modeling and Verification of a Simple Real-Time Railroad Gate Controller  
Author: William D. Young 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: young@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 93 September, 1994  
Abstract: This research was supported in part by ONR Contract N00014-91-C-0130 and by by the Defense Advanced Research Projects Agency, ARPA Order 7406. The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Office of Naval Research, the Defense Advanced Research Projects Agency, or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Odyssey Research Associates. </author> <title> Introduction to EVES: Exercises and Notes. </title> <address> ORA, Ottawa, Canada, </address> <year> 1992. </year>
Reference-contexts: This problem has been proposed [10] as a benchmark for investigating the expressiveness and proof power of various formal systems. Specifications of the gate controller have been performed in the EVES prover of Odyssey Research <ref> [1] </ref>, with SRI's PVS prover [18], and with the Modechart graphical language [11]. Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool [17].
Reference: [2] <author> W.R. Bevier, W.A. Hunt, Jr., J S. Moore, and W.D. Young. </author> <title> An approach to systems verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(4) </volume> <pages> 411-428, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The requisite lemmas are given in the appendix. 8 Conclusions Nqthm proved to be an excellent tool for modeling and reasoning about this problem. Our specification took a very "operational" form, a style quite familiar to seasoned Nqthm users (see e.g. <ref> [2] </ref>) and well-supported by the Nqthm prover.
Reference: [3] <author> W.R. Bevier and W.D. Young. </author> <title> Machine checked proofs of the design of a fault-tolerant circuit. </title> <journal> Formal Aspects of Computing, </journal> <volume> 4 </volume> <pages> 755-775, </pages> <year> 1992. </year>
Reference-contexts: We have previously used such an operational model to reason about some simple fuzzy controllers [8] and about a Byzantine-resilient control system <ref> [3] </ref>. The major proof effort involved identifying an appropriate system property and proving that our control algorithm maintained it invariantly. This is an inductive proof over the structure of legal train traces. Nqthm excels at just such tasks.
Reference: [4] <author> R.S. Boyer, D. Goldschlag, M. Kaufmann, and J S. Moore. </author> <title> Functional instantiation in first order logic. </title> <booktitle> In Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 7-26. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: A version of the multiple train problems has also been specified using Nqthm [19]. We accepted the challenge of formalizing the Leveson/Stolzy benchmark with the Boyer-Moore logic Nqthm <ref> [4, 6, 13] </ref> and proving the relevant safety and utility properties with the Nqthm theorem prover. Because of limited time, the problem we solved is slightly more restricted than that proposed as a general benchmark by Heitmeyer. In particular, we do not consider multiple trains.
Reference: [5] <author> R.S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press, Inc., </publisher> <year> 1979. </year>
Reference-contexts: Railroad Gate Controller CLI Technical Report 93 3 The latest version of Nqthm was released in 1994 along with a companion version of Pc-Nqthm. Nqthm is documented in two books <ref> [5, 6] </ref>. The release includes 1.3 megabytes of updated documentation consisting of new versions of the five most important chapters in [6]. In addition, the release includes more than 15 megabytes of example input for Nqthm and Pc-Nqthm, including many of the important benchmarks listed above.
Reference: [6] <author> R.S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: A version of the multiple train problems has also been specified using Nqthm [19]. We accepted the challenge of formalizing the Leveson/Stolzy benchmark with the Boyer-Moore logic Nqthm <ref> [4, 6, 13] </ref> and proving the relevant safety and utility properties with the Nqthm theorem prover. Because of limited time, the problem we solved is slightly more restricted than that proposed as a general benchmark by Heitmeyer. In particular, we do not consider multiple trains. <p> The appendix contains the complete text of the railroad gate specification in an infix form derived from our Nqthm script. 2 2 Nqthm The logic in which we performed our modeling work is the Nqthm (or Boyer-Moore) computational logic <ref> [6] </ref>. Nqthm is well known for the extensive body of verification work done with it. We briefly summarize it here. The Nqthm logic is a first order, quantifier-free 1 logic resembling pure Lisp. <p> Railroad Gate Controller CLI Technical Report 93 3 The latest version of Nqthm was released in 1994 along with a companion version of Pc-Nqthm. Nqthm is documented in two books <ref> [5, 6] </ref>. The release includes 1.3 megabytes of updated documentation consisting of new versions of the five most important chapters in [6]. In addition, the release includes more than 15 megabytes of example input for Nqthm and Pc-Nqthm, including many of the important benchmarks listed above. <p> Nqthm is documented in two books [5, 6]. The release includes 1.3 megabytes of updated documentation consisting of new versions of the five most important chapters in <ref> [6] </ref>. In addition, the release includes more than 15 megabytes of example input for Nqthm and Pc-Nqthm, including many of the important benchmarks listed above. The system is available free of charge by anonymous ftp. Boyer, Kaufmann, and Moore are currently developing the successor to Nqthm, called ACL2.
Reference: [7] <author> B.C. Brock, W.A. Hunt, Jr., and W.D. Young. </author> <title> Introduction to a formally defined hardware description language. </title> <booktitle> In Proceedings of the IFIP Conference on Theorem Provers in Circuit Design, </booktitle> <pages> pages 3-36. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: This contrasts with some other solutions such as the PVS solution [18] which involves embedding temporal operators in the PVS logic. Nqthm is certainly powerful enough to embed a rich specification language and this has been done several times, e.g. <ref> [7, 9] </ref>. However, we feel that while such an 5 Some 740 cases were generated for the large inductive theorem; all were handled automatically in around 250 seconds on a Sun Sparc2-workstation.
Reference: [8] <author> M. Carranza and W.D. Young. </author> <title> Verifying a fuzzy controller. </title> <booktitle> In Proceedings of the Second International Workshop on Industrial Fuzzy Control and Intelligent Systems, </booktitle> <pages> pages 194-203. </pages> <publisher> IFIP, </publisher> <month> December </month> <year> 1992. </year>
Reference-contexts: We have previously used such an operational model to reason about some simple fuzzy controllers <ref> [8] </ref> and about a Byzantine-resilient control system [3]. The major proof effort involved identifying an appropriate system property and proving that our control algorithm maintained it invariantly. This is an inductive proof over the structure of legal train traces. Nqthm excels at just such tasks.
Reference: [9] <author> D.M. Goldschlag. </author> <title> Mechanically Verifying Concurrent Programs. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <year> 1991. </year>
Reference-contexts: This contrasts with some other solutions such as the PVS solution [18] which involves embedding temporal operators in the PVS logic. Nqthm is certainly powerful enough to embed a rich specification language and this has been done several times, e.g. <ref> [7, 9] </ref>. However, we feel that while such an 5 Some 740 cases were generated for the large inductive theorem; all were handled automatically in around 250 seconds on a Sun Sparc2-workstation.
Reference: [10] <author> C.L. Heitmeyer, R.D. Jeffords, and B.G. Labaw. </author> <title> Comparing different approaches for specifying and verifying real-time systems. </title> <note> in preparation, </note> <year> 1993. </year>
Reference-contexts: A potential benchmark in the area of safety-critical systems is a simple problem suggested by Leveson and Stolzy [15] involving modeling of the controller for a gate at a railroad crossing. This problem has been proposed <ref> [10] </ref> as a benchmark for investigating the expressiveness and proof power of various formal systems. Specifications of the gate controller have been performed in the EVES prover of Odyssey Research [1], with SRI's PVS prover [18], and with the Modechart graphical language [11]. Heitmeyer, et al.[10] report that solutions using CSP <p> The system should have the properties that: 4 * the gate is down whenever the train is in the crossing, and * the gate is up as often as possible. These are called, respectively, the safety property and utility property <ref> [10] </ref>. Whether this is genuinely a "real-time" problem is a matter of debate; trains and crossing gates have very coarse timing requirements compared with the microsecond response time requirements of some application areas. However, we feel that this is a matter of degree and not of kind.
Reference: [11] <author> F. Jahanian and D.A. Stuart. </author> <title> A method for verifying properties of Modechart specifications. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: This problem has been proposed [10] as a benchmark for investigating the expressiveness and proof power of various formal systems. Specifications of the gate controller have been performed in the EVES prover of Odyssey Research [1], with SRI's PVS prover [18], and with the Modechart graphical language <ref> [11] </ref>. Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool [17]. A related but more complex problem involving the control of multiple trains has been specified by Wood [21] using the Z specification language [20].
Reference: [12] <author> M. Kaufmann. </author> <title> A user's manual for an interactive enhancement to the Boyer-Moore theorem prover. </title> <type> Technical Report CLI 19, </type> <institution> Computational Logic, Inc., </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: The Nqthm theorem prover is a collection of hundreds of heuristics to orchestrate the application of rewrite rules, decision procedures, mathematical induction, and other proof techniques. An interactive proof checker for Nqthm, called "Pc-Nqthm," has also been developed <ref> [12, 14] </ref>. Important to Nqthm's success has been the fact that when a new user-supplied theorem is proved, rules are derived from it and stored in its data base; these rules change the way the system behaves.
Reference: [13] <author> M. Kaufmann. </author> <title> An extension of the Boyer-Moore theorem prover to support first-order quantification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9(3) </volume> <pages> 355-372, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: A version of the multiple train problems has also been specified using Nqthm [19]. We accepted the challenge of formalizing the Leveson/Stolzy benchmark with the Boyer-Moore logic Nqthm <ref> [4, 6, 13] </ref> and proving the relevant safety and utility properties with the Nqthm theorem prover. Because of limited time, the problem we solved is slightly more restricted than that proposed as a general benchmark by Heitmeyer. In particular, we do not consider multiple trains. <p> Numerous other proofs have been done in the area of hardware and software verification. 1 A treatment of quantified formulas has been added by Matt Kaufmann <ref> [13] </ref>, and used in our work. Railroad Gate Controller CLI Technical Report 93 3 The latest version of Nqthm was released in 1994 along with a companion version of Pc-Nqthm. Nqthm is documented in two books [5, 6]. <p> However, it is worth noting that we can give quantified versions of our safety and utility properties in Nqthm, using the first-order quantifiers provided by an extension to the prover by Matt Kaufmann <ref> [13] </ref>.
Reference: [14] <author> Matt Kaufmann. </author> <title> A mechanically-checked correctness proof for generalization in the presence of free variables. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 7, </volume> <year> 1991. </year>
Reference-contexts: The Nqthm theorem prover is a collection of hundreds of heuristics to orchestrate the application of rewrite rules, decision procedures, mathematical induction, and other proof techniques. An interactive proof checker for Nqthm, called "Pc-Nqthm," has also been developed <ref> [12, 14] </ref>. Important to Nqthm's success has been the fact that when a new user-supplied theorem is proved, rules are derived from it and stored in its data base; these rules change the way the system behaves.
Reference: [15] <author> N.G. Leveson and J.L. Stolzy. </author> <title> Safety analysis using Petri nets. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(3) </volume> <pages> 386-97, </pages> <month> March </month> <year> 1987. </year> <type> Railroad Gate Controller CLI Technical Report 93 21 </type>
Reference-contexts: Hopefully, the results of such comparisons can be extrapolated to gain insights into the applicability of these systems on problems of interest. A potential benchmark in the area of safety-critical systems is a simple problem suggested by Leveson and Stolzy <ref> [15] </ref> involving modeling of the controller for a gate at a railroad crossing. This problem has been proposed [10] as a benchmark for investigating the expressiveness and proof power of various formal systems.
Reference: [16] <author> P. Lincoln and J. Rushby. </author> <title> The formal verification of an algorithm for interactive consistency under a hybrid fault model. </title> <booktitle> In Proceedings of CAV '93, </booktitle> <pages> pages 292-304. </pages> <note> Springer-Verlag Lecture Notes in Computer Science 697, June 1993. Matt Wilding has the book. </note>
Reference-contexts: 1 Introduction Safety-critical systems with real-time aspects often involve complex and time-sensitive interactions between the environment and the system. Consequently, informal reasoning may be inadequate for providing assurance of the correct functioning of such systems (see e.g. <ref> [16] </ref>). The use of mechanically supported formal reasoning can often provide a much higher level of assurance than informal reasoning alone. Given the diversity of automated reasoning systems, it is reasonable to ask which is the "right" system for a given problem.
Reference: [17] <author> Formal Systems (Europe) Ltd. </author> <title> Failure Divergence Refinement, User Manual and Tutorial. Formal Systems Ltd., </title> <publisher> Oxford, </publisher> <address> UK, </address> <year> 1992. </year>
Reference-contexts: Specifications of the gate controller have been performed in the EVES prover of Odyssey Research [1], with SRI's PVS prover [18], and with the Modechart graphical language [11]. Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool <ref> [17] </ref>. A related but more complex problem involving the control of multiple trains has been specified by Wood [21] using the Z specification language [20]. A version of the multiple train problems has also been specified using Nqthm [19].
Reference: [18] <author> N. Shankar. </author> <title> Mechanized verification of real-time systems using PVS. </title> <note> to appear, </note> <month> March </month> <year> 1993. </year>
Reference-contexts: This problem has been proposed [10] as a benchmark for investigating the expressiveness and proof power of various formal systems. Specifications of the gate controller have been performed in the EVES prover of Odyssey Research [1], with SRI's PVS prover <ref> [18] </ref>, and with the Modechart graphical language [11]. Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool [17]. <p> It is worth noting that we chose quite deliberately to implement an operational solution that we believe is in keeping with the "standard" uses of Nqthm. This contrasts with some other solutions such as the PVS solution <ref> [18] </ref> which involves embedding temporal operators in the PVS logic. Nqthm is certainly powerful enough to embed a rich specification language and this has been done several times, e.g. [7, 9].
Reference: [19] <author> M.K. Smith. </author> <title> Track-segment safety in Nqthm. Internal note (unnumbered), Computational Logic, </title> <publisher> Inc., </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: A related but more complex problem involving the control of multiple trains has been specified by Wood [21] using the Z specification language [20]. A version of the multiple train problems has also been specified using Nqthm <ref> [19] </ref>. We accepted the challenge of formalizing the Leveson/Stolzy benchmark with the Boyer-Moore logic Nqthm [4, 6, 13] and proving the relevant safety and utility properties with the Nqthm theorem prover.
Reference: [20] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <address> New York, N.Y., </address> <year> 1989. </year>
Reference-contexts: Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool [17]. A related but more complex problem involving the control of multiple trains has been specified by Wood [21] using the Z specification language <ref> [20] </ref>. A version of the multiple train problems has also been specified using Nqthm [19]. We accepted the challenge of formalizing the Leveson/Stolzy benchmark with the Boyer-Moore logic Nqthm [4, 6, 13] and proving the relevant safety and utility properties with the Nqthm theorem prover.
Reference: [21] <author> W.G. Wood. </author> <title> Specification of operation and controller design constraints for a real-time system. </title> <type> Unpublished, </type> <month> September </month> <year> 1992. </year>
Reference-contexts: Heitmeyer, et al.[10] report that solutions using CSP and Modecharts are underway as well as a solution using the FDR tool [17]. A related but more complex problem involving the control of multiple trains has been specified by Wood <ref> [21] </ref> using the Z specification language [20]. A version of the multiple train problems has also been specified using Nqthm [19].
References-found: 21

