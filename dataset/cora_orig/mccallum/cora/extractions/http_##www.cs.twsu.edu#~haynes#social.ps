URL: http://www.cs.twsu.edu/~haynes/social.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (haynes@arch.umsl.edu)  
Title: Modeling Distributed Search via Social Insects  
Author: Thomas Haynes 
Address: St. Louis 8001 Natural Bridge Rd St. Louis, MO 63121-4499  
Affiliation: Department of Mathematics Computer Sciences University of Missouri,  
Abstract: Complex group behavior arises in social insects colonies as the integration of the actions of simple and redundant individual insects [Adler and Gordon, 1992, Oster and Wilson, 1978]. Furthermore, the colony can act as an information center to expedite foraging [Brown, 1989]. We apply these lessons from natural systems to model collective action and memory in a computational agent society. Collective action can expedite search in combinatorial optimization problems [Dorigo et al., 1996]. Collective memory can improve learning in multi-agent systems [Garland and Alterman, 1996]. Our collective adaptation integrates the simplicity of collective action with the pattern detection of collective memory to significantly improve both the gathering and processing of knowledge. As a test of the role of the society as an information center, we examine the ability of the society to distribute task allocation without any omnipotent centralized control. 
Abstract-found: 1
Intro-found: 1
Reference: [Adler and Gordon, 1992] <author> Adler, F. R. and Gordon, D. M. </author> <year> (1992). </year> <title> Information collection and spread by networks of patrolling ants. </title> <journal> American Naturalist, </journal> <volume> 140 </volume> <pages> 373-400. </pages>
Reference-contexts: Introduction A popular misconception of intelligence in insect societies is that of the group mind: somehow the limited processing abilities of the insects is combined to form a collective intelligence. The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects <ref> [Adler and Gordon, 1992, Gordon, 1994] </ref>. Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level [Herbers and Choiniere, 1996, Oster and Wilson, 1978]. <p> In the context of ant colonies, Adler and Gordon have identified that integration of such simple behavior into more complex colony-level behavior must take place through information exchange <ref> [Adler and Gordon, 1992] </ref>. They further state that such exchange can be either centralized in the nest or distributed outside the nest. We are not concerned with how information is communicated, i.e., once one agent is aware of a piece of knowledge, all agents are aware of that knowledge. <p> In this domain, the coding segments correspond to that material which was not stripped out. ized coordination, the individual ants allocate themselves to perform tasks necessary for the survival of the colony <ref> [Gordon, 1989, Adler and Gordon, 1992, Gordon, 1994] </ref>. In this paper we model this in our computational agent society and investigate if the cooperation of collective adaptation can solve the problem.
Reference: [Brown, 1989] <author> Brown, C. R. </author> <year> (1989). </year> <title> Enhanced foraging efficiency through information centers: A benefit of colonies in cliff swallows. </title> <journal> Ecology, </journal> <volume> 69 </volume> <pages> 602-613. </pages>
Reference-contexts: Besides the power the queen (s) can exert over the colony, centralized control exists in the potential of the colony as an information center. Brown has shown, with cliff swallows (Hirundo pyrrhonota), that animal groups other than the social insects can exploit information transfer among colony residents <ref> [Brown, 1989] </ref>. We present an algorithm for distributed search via collective adaptation which combines the power of the group mind (i.e. collective memory via an information center), the simplicity of distributed action (i.e. search), and the focus of centralized control.
Reference: [Dorigo et al., 1996] <author> Dorigo, M., Maniezzo, V., and Col-orni, A. </author> <year> (1996). </year> <title> The Ant System: Optimization by a colony of cooperating agents. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics Part B: Cybernetics, </journal> <volume> 26(1) </volume> <pages> 29-41. </pages>
Reference-contexts: As such, we do not model societies where the individual agents directly exchange information, i.e., we disallow both antennae contact and pheromone trails. We are not downplaying the importance of such communication (which has been shown to be effective in solving combinatorial optimization problems <ref> [Dorigo et al., 1996] </ref>), but rather we are exploring the applicability of the centralized communication model to computational tasks and in particular to combinatorial search and optimization problems. The model of the collective memory can itself be either centralized or distributed.
Reference: [Garey and Johnson, 1979] <author> Garey, M. R. and Johnson, D. S. </author> <year> (1979). </year> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Co., </publisher> <address> San Francisco, CA. </address>
Reference-contexts: These simpler actions reflect a computational bound on either the reasoning power or memory storage of the individual agent. Such bounds are caused by the combinatorial explosion found in either search or optimization of the class of NP complete problems <ref> [Garey and Johnson, 1979] </ref>. We define collective memory as the combined knowledge gained by the interaction of the agents with both themselves and their environment. We combine the raw power of collective action with the expressiveness of collective memory to enhance a distributed search process.
Reference: [Garland and Alterman, 1996] <author> Garland, A. and Alter-man, R. </author> <year> (1996). </year> <title> Multiagent learning through collective memory. </title> <editor> In Sen, S., editor, </editor> <booktitle> Working Notes for the AAAI Symposium on Adaptation, Co-evolution and Learning in Multiagent Systems, </booktitle> <pages> pages 33-38, </pages> <address> Stan-ford University, CA. </address>
Reference-contexts: The model of the collective memory can itself be either centralized or distributed. Garland and Alter-man present a distributed collective memory in their research: agents manipulate their own slice of the collective memory <ref> [Garland and Alterman, 1996] </ref>. We present a centralized collective memory, which is a knowledge repository, not local to the agents. Computational Agent Society As problem spaces increase in complexity, the search for a solution can overwhelm a single computational agent.
Reference: [Gordon, 1989] <author> Gordon, D. M. </author> <year> (1989). </year> <title> Dynamics of task switching in harvester ants. Animal Behaviour, </title> <booktitle> 38 </booktitle> <pages> 194-204. </pages>
Reference-contexts: While the collective application of physical force is distributed in social insect colonies, e.g. ants sorting and upkeeping the colony refuse pile <ref> [Gordon, 1989] </ref>, the control of the colony need not be distributed. Besides the power the queen (s) can exert over the colony, centralized control exists in the potential of the colony as an information center. <p> In this domain, the coding segments correspond to that material which was not stripped out. ized coordination, the individual ants allocate themselves to perform tasks necessary for the survival of the colony <ref> [Gordon, 1989, Adler and Gordon, 1992, Gordon, 1994] </ref>. In this paper we model this in our computational agent society and investigate if the cooperation of collective adaptation can solve the problem.
Reference: [Gordon, 1994] <author> Gordon, D. M. </author> <year> (1994). </year> <title> The development of organization in ant colonies. </title> <journal> American Scientist, </journal> <volume> 83 </volume> <pages> 50-57. </pages>
Reference-contexts: Introduction A popular misconception of intelligence in insect societies is that of the group mind: somehow the limited processing abilities of the insects is combined to form a collective intelligence. The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects <ref> [Adler and Gordon, 1992, Gordon, 1994] </ref>. Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level [Herbers and Choiniere, 1996, Oster and Wilson, 1978]. <p> In this domain, the coding segments correspond to that material which was not stripped out. ized coordination, the individual ants allocate themselves to perform tasks necessary for the survival of the colony <ref> [Gordon, 1989, Adler and Gordon, 1992, Gordon, 1994] </ref>. In this paper we model this in our computational agent society and investigate if the cooperation of collective adaptation can solve the problem.
Reference: [Guha and Lenat, 1990] <author> Guha, R. V. and Lenat, D. B. </author> <year> (1990). </year> <title> Cyc: A midterm report. </title> <journal> AI Magazine, </journal> <volume> 11(3) </volume> <pages> 33-59. </pages>
Reference-contexts: The central thesis of the Cyc project is that the inability of computational systems to effectively interact with humans (whether it be in direct communication or by reading encyclopedia articles) is due to computational systems lacking the basic common knowledge which humans possess <ref> [Guha and Lenat, 1990] </ref>; thus the goal of the Cyc project is to encode the common knowledge of a four year old human into a computational system.
Reference: [Haynes, 1996] <author> Haynes, T. </author> <year> (1996). </year> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR. </address>
Reference-contexts: Thus, more fit chromosomes are likely to contribute genetic material to successive generations. This generational process is then repeated until either a preset number of generations has passed or the population converges. 3 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [Haynes, 1996, Haynes et al., 1996] </ref>. A collection of cliques in a graph can be represented as a list of a list of vertices which, in turn, can be represented by a tree structure. <p> This example graph exhibits nice regularities which allows for the efficient comparison of results across different test runs. These regularities have been utilized to identify and enumerate the building blocks, i.e., the connected components <ref> [Haynes, 1996] </ref>. Chromosomes were repaired by stripping out all invalid candidate cliques. Various rates of return of repaired chromosomes into the population were investigated and we found that by duplicating the coding segments the search process could be significantly improved 2 .
Reference: [Haynes, 1997] <author> Haynes, T. </author> <year> (1997). </year> <title> Collective memory search. </title> <booktitle> In Proceedings of the 1997 ACM Symposium on Applied Computing. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: The evaluation of one chromosome is independent of all others. We have found that collective adaptation, which is the addition of collective memory to a GP-based learning system, significantly improves the search process as problem complexity is increased <ref> [Haynes, 1997] </ref>. We believe that this improvement is a direct result of the change of focus from strict competition to cooperation.
Reference: [Haynes et al., 1996] <author> Haynes, T., Schoenefeld, D., and Wainwright, R. </author> <year> (1996). </year> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kinnear, Jr., K. E. and Angeline, P. J., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Thus, more fit chromosomes are likely to contribute genetic material to successive generations. This generational process is then repeated until either a preset number of generations has passed or the population converges. 3 Clique Detection We have used clique detection as a benchmark for improving learning in GP systems <ref> [Haynes, 1996, Haynes et al., 1996] </ref>. A collection of cliques in a graph can be represented as a list of a list of vertices which, in turn, can be represented by a tree structure.
Reference: [Haynes et al., 1995] <author> Haynes, T., Wainwright, R., Sen, S., and Schoenefeld, D. </author> <year> (1995). </year> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In Eshelman, L., editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278, </pages> <address> San Francisco, CA. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: They both represent search strategies in a population of chromosomes. Each chromosome in the population can be searching different parts of the search space or fitness landscape. Each chromosome can be considered to be a behavioral strategy to control an agent <ref> [Haynes et al., 1995] </ref> and are considered to be autonomous in the sense that they do not interact to find 1 a solution. <p> the maximum edges incident to any of the vertices. fi has to be large enough so that a large clique contributes more to the fitness of one chromosome than a collection of proper subcliques contributes to the fitness of a different chromosome. 1 Strong typing [Montana, 1995] and type inheritance <ref> [Haynes et al., 1995] </ref> are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. are exactly 10 cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; An example chromosome for the 10 <p> As such, the reported parameters are not optimized for the task at hand and are actually taken from parameters we used in an other domain <ref> [Haynes et al., 1995] </ref>. 5 agent per generation for exchange of control information (Exchange) and no exchange of control information (Blind). All points represent the average of 10 runs. social insects. It allows the society to harness the competitive nature of its members via cooperation.
Reference: [Herbers and Choiniere, 1996] <author> Herbers, J. M. and Choiniere, E. </author> <year> (1996). </year> <title> Foraging behavior and colony structure in ants. Animal Behavior, </title> <booktitle> 51 </booktitle> <pages> 141-153. </pages>
Reference-contexts: The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects [Adler and Gordon, 1992, Gordon, 1994]. Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level <ref> [Herbers and Choiniere, 1996, Oster and Wilson, 1978] </ref>. While the group mind theory is not a valid topic in the "natural" research community, we in the "artificial" research community can exploit the concept in creating computational agent societies.
Reference: [Holland, 1975] <author> Holland, J. H. </author> <year> (1975). </year> <title> Adpatation in Natural and Artificial Systems. </title> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI. </address>
Reference-contexts: We consider simple computational search agents, which are chromosomes in a genetic programming (GP) [Koza, 1992] population. Genetic algorithms (GA) <ref> [Holland, 1975] </ref> are a class of parallel search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GAs, and is used in the automatic induction of programs. They both represent search strategies in a population of chromosomes.
Reference: [Koza, 1992] <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: The integration of action and memory leads to a distributed society of search agents which interact via collective memory; allowing for either agent communication or for a centralized search of the gathered knowledge. We consider simple computational search agents, which are chromosomes in a genetic programming (GP) <ref> [Koza, 1992] </ref> population. Genetic algorithms (GA) [Holland, 1975] are a class of parallel search algorithms inspired by biological evolutionary adaptation. GP is an off-shoot of GAs, and is used in the automatic induction of programs. They both represent search strategies in a population of chromosomes. <p> The information center is a focusing of the problem space from which process agents can manipulate the knowledge. Genetic Programming Genetic programming is a machine learning technique used in the automatic induction of computer programs <ref> [Koza, 1992] </ref>. A GP system is primarily comprised of three main parts: * a population of chromosomes * a chromosome evaluator * a selection and recombination mechanism.
Reference: [Krebs and Davies, 1993] <author> Krebs, J. R. and Davies, N. B. </author> <year> (1993). </year> <title> An Introduction to Behavioural Ecology. </title> <publisher> Blackwell Scientific Publications. </publisher>
Reference-contexts: To avoid this confusion, we define ancestral knowledge to be knowledge which is not explicitly communicated from one individual to another. Examples of ancestral knowledge include dogs and cats not getting along, stickleback fish (Gasterosteus aculeatus) hiding when a model kingfisher (Alecedo at-this) swoops overhead <ref> [Krebs and Davies, 1993] </ref>, and female cuckoos (Cuculus canorus) depositing their eggs in the nests of other birds, with the hatchling pushing out the eggs or hatchlings of the "host" parents [Krebs and Davies, 1993]. <p> dogs and cats not getting along, stickleback fish (Gasterosteus aculeatus) hiding when a model kingfisher (Alecedo at-this) swoops overhead <ref> [Krebs and Davies, 1993] </ref>, and female cuckoos (Cuculus canorus) depositing their eggs in the nests of other birds, with the hatchling pushing out the eggs or hatchlings of the "host" parents [Krebs and Davies, 1993]. Examples of common knowledge include cars have four wheels, boiling water will burn you, and James Bond always gets the girl.
Reference: [Montana, 1995] <author> Montana, D. J. </author> <year> (1995). </year> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230. </pages>
Reference-contexts: , and inc max is the maximum edges incident to any of the vertices. fi has to be large enough so that a large clique contributes more to the fitness of one chromosome than a collection of proper subcliques contributes to the fitness of a different chromosome. 1 Strong typing <ref> [Montana, 1995] </ref> and type inheritance [Haynes et al., 1995] are used to ensure that the parent of an ExtCon node is either the root or another ExtCon node. are exactly 10 cliques: C = f f0; 3; 4g; f0; 1; 4g; f1; 4; 5g; f1; 2; 5g; f2; 5; 6g; An
Reference: [Oster and Wilson, 1978] <author> Oster, G. F. and Wilson, E. O. </author> <year> (1978). </year> <title> Caste and Ecology in the Social Insects. Monographs in Population Biology. </title> <publisher> Princeton University Press. </publisher> <pages> 6 </pages>
Reference-contexts: The colony-level behavior which arises in insect societies is a complex dynamical result of the interactions of simple insects [Adler and Gordon, 1992, Gordon, 1994]. Indeed, the insects exhibit redundancy in their operations, allowing mistakes at the individual level to not influence success at the colony-level <ref> [Herbers and Choiniere, 1996, Oster and Wilson, 1978] </ref>. While the group mind theory is not a valid topic in the "natural" research community, we in the "artificial" research community can exploit the concept in creating computational agent societies.
References-found: 18

