URL: http://www.cs.umn.edu/Users/dept/users/riedl/Papers/Silence.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/riedl/Papers/
Root-URL: http://www.cs.umn.edu
Title: Abstract  
Abstract: This paper seeks to identify improvements that reduce audioconference CPU load. A major contribution is the comparison of the performance benefits of five potential audioconference improvements: faster CPU, faster communication, better compression, Digital Signal Processing (DSP) hardware, and Silence Deletion. To compare audio-conference CPU load, we develop a model that identifies components of a typical audioconference. We hypothesize that silence deletion will improve the scalability of audio more than any of the above four improvements. We parameterize our model with measurements of the actual component performance. Overall, we find audioconference CPU loads with silence deletion scale better than audioconfer-ence CPU loads with any of the other four improvements. Techniques based on DSP hardware alone do not scale as well as silence deletion alone. However, DSP based silence deletion and compression together scale better than any other technique. These results hold even when using compression and even for ten times faster processors, networks and DSP hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [Bhar91] <editor> Communication in the Raid Distributed Database System, Bharat Bhargava, Enrique Maa, </editor> <title> and John Riedl, </title> <journal> Interna tional Journal on Computers and ISDN Systems, </journal> <volume> 21(1991). </volume>
Reference-contexts: They find checksumming and copying dominate the processing time for high throughput applications. Bhargava, Mueller and Riedl, divide communications delay in Suns implementation of UDP/IP into categories such as buffer copying, context switching, protocol layering, internet address translation, and checksum implementation <ref> [Bhar91] </ref>. They find socket layering and connection are the most expensive categories. We use their analysis of their kernel buffering techniques in defining our experiment. 2.4 Using silence deletion Rabiner views voice as a measure of energy and presents an algorithm for discovering the endpoints of words [Rabi75].
Reference: [Cabr88] <institution> User-Process Communication Performance in Net works of Computers, </institution> <note> Luis-Filipe Cabrera, </note> <author> Edward Hunter, </author> <title> FIGURE 17. Audioconference CPU load with different amounts of silence deleted. The 15% is based on a fairly poor algorithm. 60% is the maximum observed during our pilot tests. We consider 90% deletion to be a conservative upper bound on silence deletion algorithms. The maximum load is 200 seconds. </title> <editor> Michael J. Karels, and David A. </editor> <title> Mosher, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 1, </volume> <month> January </month> <year> 1988. </year>
Reference-contexts: They show the CPU loads quickly become prohibitive under increasingly large audioconfer-ences. We provide further analysis and a component breakdown of the CPU load. 2.3 Analyzing UDP Cabrera measures throughput for UDP and TCP for connected Sun workstations <ref> [Cabr88] </ref>. In analyzing the call-stack for UDP in detail, he determines the checksum at the receiving end takes the most CPU time; this checksum may not be needed for adequate quality sound. Kay and Pasquale measure delay at the CPU end for sending UDP packets for a DEC 5000 [Kay93].
Reference: [Casn92] <editor> First IETF Internet Audiocast, S. Casner, S. Deering, </editor> <booktitle> ACM SIGCOMM, Computer Communication Review, </booktitle> <pages> pages 92-97, </pages> <year> 1992. </year>
Reference-contexts: Casner and Deering perform a wide-area network audioconference using UDP multicast <ref> [Casn92] </ref>. They find disabling silence suppression increases average bandwidth and eliminates the gaps between packets that give routers a chance to empty their queues. They recognize that experimenters need better tools to measure audi-oconference performance. Our model may be one of the tools they seek.
Reference: [Cave90] <institution> A Visual Design for Collaborative Work: </institution> <note> Columns for Commenting and Annotation, </note> <author> Todd Cavalier, Ravinder Chand-hok, James Morris, David Kaufer, and Chris Neuwirth, </author> <title> Pro ceedings of HICSS, </title> <booktitle> IEEE 1990. </booktitle>
Reference-contexts: 1 Introduction Today, there are many computer applications that use audio. Electronic mail includes audio along with text [Thom85]. Multimedia editors enhance text documents with audio annotations <ref> [Cave90] </ref>. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere [Rowe92]. And audioconferences synchronously link workstations [Ried93, Mash93, Schu92]. Why are audioconferences becoming so important? Hearing is one of our is one of our strongest senses.
Reference: [Clay93] <institution> Silence is Golden? - The Effects of Silence Deletion on the CPU Load of an Audioconference, Mark Claypool and John Riedl, University of Minnesota Department of Computer Sci ence TR, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Silence deletion may remove these pauses. Although silence deletion algorithms themselves take additional processing time, they may yield a net savings in total CPU load by decreasing the CPU costs of the communication. We consider four common silence deletion algorithms <ref> [Clay93] </ref>: 1. HAM uses the energy in each byte (b [n]). It removes chunks with enough consecutive byte energies below a threshold. HAM decreases a counter for each byte with energy below the threshold. When the counter reaches zero, the chunk is not sent on. <p> obtain the CPU load for each component of the model, we ran the counter process in conjunction with a P n ( ) size ( ) b i [ ] size = 4 process for each of the components of the audioconfer-ence: read, deletion, send, receive, mix and write (see <ref> [Clay93] </ref> for the process descriptions). 4.2 Data collection Since the counter process measurements are sensitive to other processes, we performed the experiments on machines in single user mode. In single user mode, the CPU runs a bare minimum of system processes and no other user processes. <p> We can obtain similar graphs for the SLC and for other components of the model (See <ref> [Clay93] </ref>), but to avoid redundancy we do not do so here. TABLE 1. Bare Counts for SLC and IPX with a 95% Confidence Interval (Indicated by the Left and Right Endpoints). Machine Bare Count Left Endpoint Right Endpoint SLC 123924595 123920808 123928381 FIGURE 3.
Reference: [Gons83] <institution> Packet-Voice Communication on an Ethernet Local Computer Network: </institution> <note> an Experimental Study, Timothy A Gon salves, ACM 1983. </note>
Reference-contexts: They describe the structure and performance of their system. In particular, they describe a strategy for dealing with real-time guarantees. Gonsalves predicts that without software or protocol overhead, a three Mbps Ethernet could support 40 simultaneous 2-way 64Kbps conversations <ref> [Gons83] </ref>. Thus, if our results show what is needed to enable the CPUs to handle the conversation loads, the networks can. Riedl, Mashayekhi, Schnepf, Frankowski and Clay-pool measure network loads of audioconferences using silence deletion [Ried93]. They find silence deletion significantly reduces network loads.
Reference: [Jeff92] <editor> Kernel support for live digital audio and video, K. Jef-fay, D.L. Stone and F.D. </editor> <title> Smith, </title> <journal> Computer Communications, </journal> <volume> Vol. 15, No. 6, </volume> <pages> pages 388-95, </pages> <month> July/August </month> <year> 1992. </year>
Reference-contexts: They find silence deletion significantly reduces network loads. We analyze how silence deletion affects CPU loads. 2.2 Measuring CPU load Jeffay, Stone and Smith discuss a real-time kernel designed for the support of multi-media applications <ref> [Jeff92] </ref>. They achieve some real-time guarantees through utilizing close to eighty percent of the CPU. Our results may indicate methods that can trim audioconference CPU loads, while achieving the same guarantees. Lazowska parameterizes queuing network performance models to assess the alternatives for diskless workstations [Lazo86].
Reference: [Kay93] <author> Measurement, </author> <title> Analysis, and Improvement of UDP/IP Throughput for the DECstation 5000, </title> <institution> Jonathan Kay and Joseph Pasquale, University of California, San Diego, Department of Computer Science TR 1993. </institution>
Reference-contexts: In analyzing the call-stack for UDP in detail, he determines the checksum at the receiving end takes the most CPU time; this checksum may not be needed for adequate quality sound. Kay and Pasquale measure delay at the CPU end for sending UDP packets for a DEC 5000 <ref> [Kay93] </ref>. They find checksumming and copying dominate the processing time for high throughput applications. Bhargava, Mueller and Riedl, divide communications delay in Suns implementation of UDP/IP into categories such as buffer copying, context switching, protocol layering, internet address translation, and checksum implementation [Bhar91].
Reference: [Kroo92] <editor> A High-Quality Multirate Real-Time CELP Coder, </editor> <title> Peter Kroon and Kumar Swaminathan, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> Vol. 10, No. 5, </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: He discusses mlaw, Adaptive Differential Pulse Code Modulation (ADPCM) and Motion Picture Experts Group (MPEG), compression techniques which are not specifically tuned to human voice. Gerson and Jas-iuk describes techniques to improve performance of Code Excited Linear Prediction (CELP) Type coders, compression techniques tuned to human voice <ref> [Kroo92] </ref>. We predict the CPU load of audioconferences using such compression techniques. 3 Model load. Our model is based on the components of reading, silence deletion, sending, receiving, mixing and writing. Reading is the CPU load for taking the digitized sound samples from the audio device.
Reference: [Lazo93] <author> File Access Performance of Diskless Workstations, Edward D. Lazowska, John Zahorjan, David R. Cheriton and Willy Zwaenepoel, </author> <booktitle> ACM Transactions on Computer Systems, </booktitle> <volume> Vol 4, No. 3, </volume> <pages> p. 238-268, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: We did not use the Unix time command because the reporting of per-process CPU consumption by most operating systems is unreliable. Often, the system gives an incorrect account of interrupt level processing and fails to capture processor degradation from DMA <ref> [Lazo93] </ref>. In our pilot tests, the counter process attributed 10 out of 200 seconds to sending packets, while the time command only credited 0.3 seconds, a factor of 30 discrepancy. To obtain a baseline, we ran the counter process on a bare machine.
Reference: [Mash93] <institution> Distributed Collaborative Software Inspection, </institution> <note> Vahid Mashayekhi, </note> <author> Janet Drake, Wei-Tek Tsai, and John Riedl, </author> <booktitle> IEEE Software, p. </booktitle> <pages> 66-75, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Electronic mail includes audio along with text [Thom85]. Multimedia editors enhance text documents with audio annotations [Cave90]. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere [Rowe92]. And audioconferences synchronously link workstations <ref> [Ried93, Mash93, Schu92] </ref>. Why are audioconferences becoming so important? Hearing is one of our is one of our strongest senses. Thus, sound is one of our most powerful forms of communication.
Reference: [Pan93] <editor> Digital Audio Compression, </editor> <title> Davis Yen Pan, </title> <journal> Digital Technical Journal, </journal> <volume> Vol. 5, No. 2, </volume> <pages> p. 28-40, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Henning Schulzrinne implements an audiocon-ferencer with silence deletion [Schu92]. We adapt and build upon their view of voice and silence deletion algorithms. 2.5 Digital audio compression Pan surveys techniques used to compress digital audio signals <ref> [Pan93] </ref>. He discusses mlaw, Adaptive Differential Pulse Code Modulation (ADPCM) and Motion Picture Experts Group (MPEG), compression techniques which are not specifically tuned to human voice. Gerson and Jas-iuk describes techniques to improve performance of Code Excited Linear Prediction (CELP) Type coders, compression techniques tuned to human voice [Kroo92].
Reference: [Rabi75] <institution> An Algorithm for Determining the Endpoints of Isolated Utterances, </institution> <note> L. </note> <author> R. Rabiner and M. R. Sambur, </author> <note> The Bell System Technical Journal February 1975. </note>
Reference-contexts: They find socket layering and connection are the most expensive categories. We use their analysis of their kernel buffering techniques in defining our experiment. 2.4 Using silence deletion Rabiner views voice as a measure of energy and presents an algorithm for discovering the endpoints of words <ref> [Rabi75] </ref>. Henning Schulzrinne implements an audiocon-ferencer with silence deletion [Schu92]. We adapt and build upon their view of voice and silence deletion algorithms. 2.5 Digital audio compression Pan surveys techniques used to compress digital audio signals [Pan93]. <p> It is effective when signal-to-noise ratio is very high. This may occur in a recording studio or with very high fidelity magnetic tape. However, it is not practical in real-world situations <ref> [Rabi75] </ref>. Pilot tests of our own showed that this algorithm does, indeed, often yield poor sound quality. 4. Differential uses the changes in energy of each byte. All chunks with changes below a threshold are interpreted as silence. The algorithm keeps a counter of the number of non-changes.
Reference: [Ried93] <author> SuiteSound: </author> <title> A System for Distributed Collaborative Multimedia, </title> <editor> John Riedl, Vahid Mashayekhi, James Schnepf, Mark Claypool, </editor> <title> and Dan Frankowski, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: Electronic mail includes audio along with text [Thom85]. Multimedia editors enhance text documents with audio annotations [Cave90]. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere [Rowe92]. And audioconferences synchronously link workstations <ref> [Ried93, Mash93, Schu92] </ref>. Why are audioconferences becoming so important? Hearing is one of our is one of our strongest senses. Thus, sound is one of our most powerful forms of communication. <p> Thus, if our results show what is needed to enable the CPUs to handle the conversation loads, the networks can. Riedl, Mashayekhi, Schnepf, Frankowski and Clay-pool measure network loads of audioconferences using silence deletion <ref> [Ried93] </ref>. They find silence deletion significantly reduces network loads. We analyze how silence deletion affects CPU loads. 2.2 Measuring CPU load Jeffay, Stone and Smith discuss a real-time kernel designed for the support of multi-media applications [Jeff92]. <p> He uses a counter process to measure CPU loads. We use a similar process (see Section 4.1 of the present document). Riedl, Mashayekhi, Schnepf, Frankowski and Clay-pool measure the CPU load of an audio conference with no oor control and no silence deletion using a counter process <ref> [Ried93] </ref>. They show the CPU loads quickly become prohibitive under increasingly large audioconfer-ences. We provide further analysis and a component breakdown of the CPU load. 2.3 Analyzing UDP Cabrera measures throughput for UDP and TCP for connected Sun workstations [Cabr88]. <p> Our model asserts we can predict audioconference CPU load from the sum of the above components. Silence deletion removes silent parts from speech. Experiments have shown that silence deletion substantially reduces network load for two reasons: <ref> [Ried93] </ref> In a typical N person conversation, at any given time one person is talking and N-1 are silent. With silence deletion, only the talking persons packets are sent; each workstation must send only 1/N of the packets on average.
Reference: [Rowe92] <author> A Continuous Media Player, Lawrence A. Rowe and Brian C. Smith, </author> <booktitle> Proc. 3rd Int. Workshop on Network and OS Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Today, there are many computer applications that use audio. Electronic mail includes audio along with text [Thom85]. Multimedia editors enhance text documents with audio annotations [Cave90]. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere <ref> [Rowe92] </ref>. And audioconferences synchronously link workstations [Ried93, Mash93, Schu92]. Why are audioconferences becoming so important? Hearing is one of our is one of our strongest senses. Thus, sound is one of our most powerful forms of communication.
Reference: [Schu92] <institution> Voice Communication Across the Internet: A Network Voice Terminal, Henning Schulzrinne, University of Massachu-setts Department of Electrical Engineering, </institution> <month> August 6, </month> <year> 1992. </year> <note> Nevot is available via anonymous ftp. </note>
Reference-contexts: Electronic mail includes audio along with text [Thom85]. Multimedia editors enhance text documents with audio annotations [Cave90]. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere [Rowe92]. And audioconferences synchronously link workstations <ref> [Ried93, Mash93, Schu92] </ref>. Why are audioconferences becoming so important? Hearing is one of our is one of our strongest senses. Thus, sound is one of our most powerful forms of communication. <p> We use their analysis of their kernel buffering techniques in defining our experiment. 2.4 Using silence deletion Rabiner views voice as a measure of energy and presents an algorithm for discovering the endpoints of words [Rabi75]. Henning Schulzrinne implements an audiocon-ferencer with silence deletion <ref> [Schu92] </ref>. We adapt and build upon their view of voice and silence deletion algorithms. 2.5 Digital audio compression Pan surveys techniques used to compress digital audio signals [Pan93].
Reference: [Tere91] <editor> Experiences with Audio Conferencing Using the X Window System, UNIX, and TCP/IP, R. Terek and J. Pasquale, </editor> <booktitle> USENIX, Summer 1991, </booktitle> <pages> pages 405-417. </pages>
Reference-contexts: Our model may be one of the tools they seek. They conjecture that ubiquitous multicast routing support can greatly reduce network and CPU loads. In addition, they described several on-going experiments in which readers can participate. Terek and Pasquale implement an audioconference with an Xwindow server <ref> [Tere91] </ref>. They describe the structure and performance of their system. In particular, they describe a strategy for dealing with real-time guarantees. Gonsalves predicts that without software or protocol overhead, a three Mbps Ethernet could support 40 simultaneous 2-way 64Kbps conversations [Gons83].
Reference: [Thom85] <author> Diamond: </author> <title> A Multimedia Message System Built on a Distributed Architecture, </title> <editor> Robert H. Thomas, Harry C. Frisked, Terrence R. Crowley, Richard W. Schaaf, Raymond S. Tomlin-son, Virginia M. Travers and George G. Robertson, IEEE Com puter, </editor> <month> December </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Today, there are many computer applications that use audio. Electronic mail includes audio along with text <ref> [Thom85] </ref>. Multimedia editors enhance text documents with audio annotations [Cave90]. Internet Talk Radio spreads audio across the world. Movies, containing audio in addition to video, are starting to grace consoles everywhere [Rowe92]. And audioconferences synchronously link workstations [Ried93, Mash93, Schu92].
References-found: 18

