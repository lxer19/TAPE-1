URL: http://www.csl.sri.com/~millen/ffggpaper.ps
Refering-URL: http://www.csl.sri.com/~millen/
Root-URL: 
Title: A Necessarily Concurrent Attack DRAFT  
Author: J. K. Millen 
Date: July 4, 1998  
Abstract: An artificial protocol called the "ffgg" protocol is constructed, with an assumed security objective to keep a certain data item secret. A message modification attack is given that exposes the data item; in this attack there are two concurrently-running responder processes belonging to the same agent. To show that a concurrent attack is necessary, we use an inductive approach to prove that the protocol is secure under the assumption that this kind of concurrency is excluded.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Lowe, </author> <title> "Towards a completeness result for model checking of security protocols," </title> <booktitle> 1998 Computer Security Foundations Workshop, IEEE Computer Society, </booktitle> <year> 1998. </year> <month> 13 </month>
Reference-contexts: Under certain restrictive assumptions about the protocol, Lowe has shown that it is sufficient to analyze a system with one honest agent in each role, each of whom can run the protocol just once with the other honest agents <ref> [1] </ref>.
Reference: [2] <author> W. Marrero, E. Clarke, and S. Jha, </author> <title> "Model checking for security protocols," </title> <institution> Carnegie Mellon University, CMU-CS-97-139, </institution> <year> 1997. </year>
Reference-contexts: 1 Introduction Model checking has proved to be a successful way to find vulnerabilities in cryptographic protocols. See, for example, <ref> [6, 3, 2] </ref>. If a model checker fails to find an attack, however, it may only mean that there is no attack on the particular finite system analyzed.
Reference: [3] <author> J. C. Mitchell, M. Mitchell, and U. Stern, </author> <title> "Automated analysis of cryptographic protocols using Murphi," </title> <booktitle> IEEE Symposium on Security and Privacy, IEEE Computer Society, </booktitle> <year> 1997, </year> <pages> pp. 141-151. </pages>
Reference-contexts: 1 Introduction Model checking has proved to be a successful way to find vulnerabilities in cryptographic protocols. See, for example, <ref> [6, 3, 2] </ref>. If a model checker fails to find an attack, however, it may only mean that there is no attack on the particular finite system analyzed.
Reference: [4] <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke, </author> <title> "Formal verification for fault-tolerant architectures: prolegomena to the design of PVS," </title> <journal> IEEE Trans. Software Eng. </journal> <volume> 21(2), </volume> <month> Feb. </month> <year> 1995, </year> <pages> pp. 107-125. </pages>
Reference-contexts: The proof technique is based primarily on Paulson's work [5], but it borrows the "ideal" concept from the Thayer, Herzog and Guttman paper [7], and the proof is constructed and checked in the PVS verification environment <ref> [4] </ref>. 2 The ffgg Protocol In this protocol, A and B are agents (sometimes called "principals"), N 1 and N 2 are nonces, M is a secret message, and PKB is B's public key. 1: A ! B : A 3: A ! B : fN 1 ; N 2 ;
Reference: [5] <author> L. Paulson, </author> <title> "Proving properties of security protocols by induc tion," </title> <booktitle> 10th IEEE Computer Security Foundations Workshop, IEEE Computer Society, </booktitle> <year> 1997, </year> <pages> pp. 70-83. </pages>
Reference-contexts: To show that a concurrent attack is necessary, we use an inductive approach to prove that the protocol is secure under the assumption that role concurrency is excluded. The proof technique is based primarily on Paulson's work <ref> [5] </ref>, but it borrows the "ideal" concept from the Thayer, Herzog and Guttman paper [7], and the proof is constructed and checked in the PVS verification environment [4]. 2 The ffgg Protocol In this protocol, A and B are agents (sometimes called "principals"), N 1 and N 2 are nonces, M
Reference: [6] <author> A. W. Roscoe, </author> <title> "Modelling and verifying key exchange protocols using FDR," </title> <booktitle> 1995 Computer Security Foundations Workshop, IEEE Computer Society, </booktitle> <year> 1995, </year> <pages> pp. 98-107. </pages>
Reference-contexts: 1 Introduction Model checking has proved to be a successful way to find vulnerabilities in cryptographic protocols. See, for example, <ref> [6, 3, 2] </ref>. If a model checker fails to find an attack, however, it may only mean that there is no attack on the particular finite system analyzed.
Reference: [7] <author> F. J. Thayer, J. Herzog, and J. Guttman, </author> <title> "Honest ideals on strand spaces," </title> <booktitle> 1998 Computer Security Foundations Workshop, IEEE Computer Society, </booktitle> <year> 1998. </year>
Reference-contexts: The proof technique is based primarily on Paulson's work [5], but it borrows the "ideal" concept from the Thayer, Herzog and Guttman paper <ref> [7] </ref>, and the proof is constructed and checked in the PVS verification environment [4]. 2 The ffgg Protocol In this protocol, A and B are agents (sometimes called "principals"), N 1 and N 2 are nonces, M is a secret message, and PKB is B's public key. 1: A ! B <p> The invariant that we will actually prove is that X =2 I k [S], where I k [S] is a Thayer-Herzog-Guttman ideal, a set of fields that includes S and which is closed under concatenation with any fields and encryption with keys in k. As defined in <ref> [7] </ref>, I k [S] is the smallest set of fields including S such that for all X 2 I k [S], keys K 2 k, and fields Y , 1. (X; Y ) 2 I k [S] 3. fXg K 2 I k [S] The reason for protecting the whole ideal
References-found: 7

