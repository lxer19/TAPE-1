URL: ftp://ftp.csd.uu.se/pub/papers/reports/0067.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: hakanm@csd.uu.se  
Title: Reforming Compilation of Logic Programs  
Author: H-akan Millroth 
Note: Electronic mail:  
Address: Box 520, S-751 20 Uppsala, Sweden  
Affiliation: Computing Science Dept., Uppsala University  
Abstract: We present a new method for parallel logic programming which is based on compilation of Tarnlund's inference system Reform. The idea is to compile recursively defined programs to parallel iterative code. Beside earlier parallel concepts, such as OR-parallelism and AND-parallelism, we have new forms of Reform parallelism: unification parallelism and recursion parallelism. These are implemented in our method by applying standard loop parallelization techniques to the iterative code obtained by compilation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barklund, J. </author> <title> (1990) Parallel Unification, </title> <type> Ph.D. Thesis, </type> <institution> Computing Science Dept., Uppsala University. </institution>
Reference-contexts: It might seem that the problem of unifying, say, two lists of n elements exhibits very little parallelism when lists are implemented as linked structures. This is not the case, however. There are algorithms that carry out such problems in log n steps for typical lists <ref> (Barklund, 1990) </ref>. 4. REFORM SERIES Program variables and variant variables (terms). A new variant of the recursive program clause is created for each step in a Reform transformation. Each variant contains a new set of variables.
Reference: <author> Kuck, D. J., Y. Muraoka & S. Chen. </author> <title> (1972) On the number of operations simultaneously executable in Fortran-like programs and their resulting speedup. </title> <journal> IEEE Trans. Computers C-21, </journal> <volume> no. 12, </volume> <pages> 1293-1310. </pages>
Reference-contexts: The loop can then get a n-fold speedup if the different iterations are independent (the loop program is assumed available on each processor). This technique, which has been successful for running Fortran-like programs in parallel, is known as loop parallelization <ref> (Kuck et al., 1972) </ref>. Loop parallelization works only for bounded iteration (that is, FOR-loops) since the number of iterations to be performed must be known when the loop is entered. Hence unbounded iteration (WHILE-loops) cannot be parallelized in this way.
Reference: <author> Kowalski, R. A. </author> <title> (1974) Predicate logic as a computer language. </title> <booktitle> In Information Processing 74, </booktitle> <pages> pp. 569-574. </pages> <publisher> North-Holland, Amster-dam. </publisher>
Reference: <author> Millroth, H. </author> <title> (1990) Reforming Compilation of Logic Programs, </title> <type> Ph.D. Thesis, </type> <institution> Computing Science Dept., Uppsala University. </institution>
Reference-contexts: This is a form of parallel processing that is very efficient, since the computation can be directly mapped to an array of parallel processors without overheads for run-time scheduling and load balancing. Our compilation technique apply also to nonlinear recursion on, for example, binary trees <ref> (Millroth, 1990) </ref>. However, we only discuss the linear case in this paper. 2. REFORM Reform (Tarnlund, 1991) is a new inference system for logic programming that employs program transformation as computation. The idea is to specialize recursive programs at runtime with respect to a particular size of the input data.
Reference: <author> Millroth, H. </author> <title> (1991) Compiling Reform, (to appear in) Massively Parallel Reasoning Systems (eds. </title> <editor> J. A. Robinson & E. E. Sibert), </editor> <publisher> MIT Press. </publisher>
Reference-contexts: Since this step can be performed by the compiler, the variables in a clause can be classified at compile-time. Proofs of the theorems in this section can be found elsewhere <ref> (Millroth 1991) </ref>. NONE-variables. A variable x is a NONE-variable if it is not bound in the first Reform step.
Reference: <author> Robinson, J. A. </author> <title> (1965) A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM 12, </journal> <pages> 23-41. </pages>
Reference-contexts: REFORM Reform (Tarnlund, 1991) is a new inference system for logic programming that employs program transformation as computation. The idea is to specialize recursive programs at runtime with respect to a particular size of the input data. Reform can be formulated as a Resolution <ref> (Robinson, 1965) </ref> proof procedure. Due to space limitations we present Reform here by means of an example.
Reference: <author> T arnlund, S. A. </author> <year> (1991) </year> <month> Reform, </month> <note> (to appear in) Massively Parallel Reasoning Systems (eds. </note> <editor> J. A. Robinson & E. Sibert), </editor> <publisher> MIT Press. </publisher>
Reference-contexts: Our compilation technique apply also to nonlinear recursion on, for example, binary trees (Millroth, 1990). However, we only discuss the linear case in this paper. 2. REFORM Reform <ref> (Tarnlund, 1991) </ref> is a new inference system for logic programming that employs program transformation as computation. The idea is to specialize recursive programs at runtime with respect to a particular size of the input data. Reform can be formulated as a Resolution (Robinson, 1965) proof procedure. <p> Since this step can be performed by the compiler, the variables in a clause can be classified at compile-time. Proofs of the theorems in this section can be found elsewhere <ref> (Millroth 1991) </ref>. NONE-variables. A variable x is a NONE-variable if it is not bound in the first Reform step.
Reference: <author> Warren, D. H. D. </author> <title> (1977) Implementing Prolog|compiling predicate logic programs. </title> <note> Research Reports 39 and 40, </note> <institution> Dept. of AI, Univ. of Edinburgh, </institution> <note> Edinburgh Warren, </note> <author> D. H. D. </author> <title> (1983) An abstract Prolog instruction set. </title> <type> Report 309, </type> <institution> SRI International, Menlo Park, Calif. </institution>
References-found: 8

