URL: http://www.wi.leidenuniv.nl/home/joost/concur95.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: marcello@cs.vu.nl, vink@cs.vu.nl  joost@cs.ruu.nl  
Title: Metric Predicate Transformers: Towards a Notion of Refinement for Concurrency  
Author: Marcello M. Bonsangue, Erik de Vink Joost N. Kok 
Note: Contents  
Address: Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands  P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Department of Computer Science, Vrije Universiteit Amsterdam De  Department of Computer Science, Utrecht University  
Abstract: For two parallel languages with recursion a compositional weakest precondition semantics is given using two new metric resumption domains. The underlying domains are characterized by domain equations involving functors that deliver `observable' and `safety' predicate transformers. Further a refinement relation is defined for this domains and illustrated by rules dealing with concurrent composition. It turns out, by extending the classical duality of predicate vs. state transformers, that the weakest precondition semantics for the parallel languages is isomorphic to the standard metric state transformers semantics. Moreover, the proposed refinement relation on the predicate transformer domain will correspond to the familiar notion of simulation in the state transformer domain.
Abstract-found: 1
Intro-found: 1
Reference: [Abr87] <author> S. Abramsky. </author> <title> Domain Theory and the Logic of Observable Properties. </title> <type> PhD thesis, </type> <institution> Queen Mary College, University of London, </institution> <year> 1987. </year>
Reference-contexts: Clearly, this intuition is consistent with the topological axioms: open sets are closed under finite intersections and arbitrary unions. (For an extensive treatment of this topological view of observable predicates, see <ref> [Smy83, Abr87, Vic89, Kwi91, BK94a] </ref>.) In a metric space M , every predicate can be expressed as intersection of metric observable predicates because the topological space (M; O (M )) is T 1 .
Reference: [AR89] <author> P. America and J.J.M.M. Rutten. </author> <title> Solving Reflexive Domain Equations in a Category of Complete Metric Spaces. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 39(3) </volume> <pages> 343-375, </pages> <year> 1989. </year>
Reference-contexts: If X and Y are two complete metric space, then (X 1 ! Y; d F ) is also a complete metric space, where X 1 ! Y is the collection of all non-expansive functions from X to Y . In <ref> [AR89, RT93] </ref>, generalizing the results of [BZ82], a method has been developed to obtain complete metric spaces as solutions of domain equations of the form M ~ = F (M ), where F is a functor from the category CMS of complete metric spaces and non-expansive functions to CMS. <p> If F X;Y is non-expansive, for all objects X; Y , then the functor is called locally non-expansive. For example, for complete metric spaces X and Y and a set S, the following operations (with associated metrics as defined above) can be extended to non-expansive functors <ref> [AR89, RT93] </ref>: S ! X, X + Y , X fi Y , P co (X) and P cl (X).
Reference: [Bac80] <author> R.-J.R. </author> <title> Back. Correctness Preserving Program Refinements: Proof Theory and Applications, volume 131 of Mathematical Centre Tracts. </title> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1980. </year>
Reference-contexts: Moreover, for every non-empty index set I we have (i) pt ( 1 ; 2 ) = pt ( 1 );pt ( 2 ), where 1 ; 2 and i 2 1 for all i 2 I. 2 A refinement relation preserving partial and total correctness is defined in <ref> [Bac80] </ref> for the domains 0 and 1 . It coincides with pointwise extension of the subset order in P (S).
Reference: [Bac81] <author> R.-J.R. </author> <title> Back. On Correct Refinement of Programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 23(1) </volume> <pages> 49-68, </pages> <year> 1981. </year>
Reference: [Ban22] <author> S. </author> <title> Banach. Sur les Operations dans les Ensembles Abstraits et leurs Applications aux Equations Integrales. </title> <journal> Fundamentae Mathematicae, </journal> <volume> 3 </volume> <pages> 133-181, </pages> <year> 1922. </year>
Reference-contexts: (x); f (y)) * d (x; y): If (X; d) is a complete metric space and f : X ! X is a contracting function then f has a unique fixed point, which is the limit of the Cauchy sequence (f n (x)) n for an arbitrary x 2 X <ref> [Ban22] </ref>. Let (X; d) and (Y; e) be two one-bounded (pseudo) metric spaces. Define a metric on the disjoint union X + Y by taking the original distance if two points are elements of the same set and distance 1 otherwise.
Reference: [Bes89] <author> E. </author> <title> Best. Towards Compositional Predicate Transformer Semantics for Concurrent Programs. </title> <editor> In J.W. de Bakker, </editor> <volume> 25 jaar Semantiek, </volume> <pages> pages 111-117, </pages> <address> Amsterdam, </address> <year> 1989. </year>
Reference: [BHR90] <author> J.W. de Bakker, E. Horita, and J.J.M.M. Rutten. </author> <title> Fully Abstract Models for Nonuniform Concurrent Languages. </title> <journal> Information and Computation, </journal> ??:???-???, <note> 1990. To appear. </note>
Reference-contexts: Complementary to this is the issue of full abstractness or, more restrictedly, of the adequacy of linear models for L 2 and L 3 . Since no such feature as message-passing is present in the languages we may expect that a mixture of the `sequences of pairs'-techniques of <ref> [BHR90] </ref> and the linear semantics of Lukkien (cf. [Luk91, Luk94]) will provide a more abstract model. Probably the isomorphism of the domains of predicate transformers vs. state transformers may be of help in the comparison.
Reference: [BJK95] <author> M.M. Bonsangue, B. Jacobs, and J.N. Kok. </author> <title> Duality beyond Sober Spaces: Topological Spaces and Observation Frames. </title> <booktitle> Theoretical Computer Science, </booktitle> ??:???-???, <year> 1995. </year>
Reference-contexts: introduction of a so-called backward distance, which enables us to deal with predicate transformers in a metric framework. The domain 2 encounters opens, whereas the domain 3 will deal with closed sets. This suggests, following <ref> [Smy83, Vic89, Kwi91, BJK95] </ref>, the suitability of the former for observable or liveness properties in contrast to the latter which might very well be used for safety properties. The weakest precondition semantics for the languages are given in Section 5. <p> are determined by the values on the observable predicates o 2 O (M ), because for every P 2 P (M ) we have by multiplicativity (P ) = ( fo 2 O (M ) j P og = f (o) j P og: For readers familiar with the paper <ref> [BJK95] </ref> it follows that OPT (M; S) coincides with the set of all M-multiplicative and continuous functions from the observation frame O (M ).!P (M ) to the observation frame P (S).!P (S).
Reference: [BK94a] <author> M.M. Bonsangue and J.N. Kok. </author> <title> Relating Multifunctions and Predicate Transformers through Closure Operators. </title> <editor> In Masami Hagiya and John C. Mitchell, editors, </editor> <booktitle> TACS '94, Sendai, Japan, volume 789 of Lecture Notes in Computer Science, </booktitle> <pages> pages 35 822-843. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> Available through anonymous ftp from ftp.cs.vu.nl as /pub/bonsangue/multifunct.ps.Z. </note>
Reference-contexts: Clearly, this intuition is consistent with the topological axioms: open sets are closed under finite intersections and arbitrary unions. (For an extensive treatment of this topological view of observable predicates, see <ref> [Smy83, Abr87, Vic89, Kwi91, BK94a] </ref>.) In a metric space M , every predicate can be expressed as intersection of metric observable predicates because the topological space (M; O (M )) is T 1 . <p> Hence every predicate P 2 P (M ) is the intersection (not necessarily finite) of all observable predicates in which P is included (see <ref> [BK94a, lemma 3:5] </ref>). The same does not holds in general for T 0 spaces (complete partial order, quasi-metric spaces, SFP-domains, etc.) since every predicate which is not upper closed (with respect to the induced topological order) cannot be expressed as intersection of observable predicates. 8 4.2. Definition. <p> On the basis of the general isomorphisms between state an predicate transformers studied in <ref> [BK94a] </ref> we can formulate the relationship between 2 and 2 . The two domains are isomorphic. <p> Probably the isomorphism of the domains of predicate transformers vs. state transformers may be of help in the comparison. Acknowledgments We wish to thank Jaco de Bakker for suggesting us to apply the general framework of <ref> [BK94a] </ref> to a concurrent language. Several discussions with Franck van Breugel, Jan Rutten and Daniele Turi have been very helpful. We appreciate the feedback of the members of the Amsterdam Concurrency Group on a preliminary version of the paper. We finally wish to thank Frits Vaandrager for his kind bibliographic assistance.
Reference: [BK94b] <author> M.M. Bonsangue and J.N. Kok. </author> <title> The Weakest Precondition Calculus: Recursion and Duality. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6A:???-???, </volume> <year> 1994. </year>
Reference-contexts: The following diagram shows the relationships among the four languages. L 3 L 1 L 2 L 0 The languages L 0 and L 1 are variations of languages for which the weakest precondition semantics are well known (see <ref> [Dij76, Hes89, BW90, BK94b] </ref>). The compositional weakest precondition semantics for the languages L 2 and L 3 |to be presented in Section 5| constitute the main contribution of the present paper. <p> This problem can be avoided by using another technique which acts more locally than the higher-order function: the environments. Such an approach to a predicate transformer semantics for a language with recursion and unbounded nondeterminism has been used for example in <ref> [BK94b] </ref>. 5.6. Definition. Let I be a non-empty index set.
Reference: [BKS88] <author> R.J.R. Back and R. Kurki-Suonio. </author> <title> Distributed Cooperation with Action Systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10 </volume> <pages> 513-554, </pages> <year> 1988. </year>
Reference: [Bre93] <author> F. van Breugel. </author> <title> Relating State Transformation Semantics and Predicate Transformer Semantics for Parallel Programs. </title> <type> Technical Report CS-9339, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1993. </year>
Reference: [Bre94] <author> F. van Breugel. </author> <title> Topological Models in Comparative Semantics. </title> <type> PhD thesis, </type> <institution> Vrije Uni-versiteit Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: Also this domain comes equipped with operations similar to those on 2 . A main difference, however, is that we need to apply a closure operator to their definitions in order to ensure well-definedness. See, for a discussion, Section 6:3 in <ref> [Bre94] </ref>. 6.15. Definition. Let I be a non empty index set.
Reference: [BS92] <author> R.J.R. Back and K. Sere. </author> <title> Superposition Refinement of Parallel Algorithms. </title> <editor> In K.R. Parker and G. Rose, editors, </editor> <booktitle> Formal Description Techniques IV, </booktitle> <pages> pages 475-494. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference: [BS94] <author> R.J.R. Back and K. Sere. </author> <title> Action Systems with Synchronous Communication. </title> <editor> In E.- R. Olderog, editor, </editor> <booktitle> Programming Concepts, Methods and Calculi, volume A-56 of IFIP Transaction, </booktitle> <pages> pages 107-126. </pages> <publisher> Elsevier Science Publishers B.V. North-Holland, </publisher> <year> 1994. </year>
Reference: [BV95] <author> J.W. de Bakker and E. de Vink. </author> <title> Control Flow Semantics. </title> <publisher> MIT Press, </publisher> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: S 2 i)g + 1; The function wgt 0 is well defined for each pair hd; Si 2 L 0 as can be easily seen by induction on the syntactic complexity first of guarded statements and then of general statements (for more on the use of the weight function see <ref> [BV95] </ref>). We are now ready for the justification of wp 0 . It is based on a mapping 0 : Sem 0 ! Sem 0 where (F 2) Sem 0 = L 0 ! 0 . <p> Conjunctivity will replace the multiplicativity condition. The dual domains of state transformers need to be extended with a special element to cater for a denotation for abort. Locality can be dealt with, using techniques developed in the metric setting. (Cf. <ref> [BV95] </ref>.) It is an open problem, however, how to deal with angelic nondeterminacy here. Complementary to this is the issue of full abstractness or, more restrictedly, of the adequacy of linear models for L 2 and L 3 .
Reference: [BW90] <author> R.-J.R. Back and J. von Wright. </author> <title> Refinement Calculus, part I: Sequential Nondeterministic Programs. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, </title> <booktitle> volume 430 of Lecture Notes in Computer Science, </booktitle> <pages> pages 42-66. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The following diagram shows the relationships among the four languages. L 3 L 1 L 2 L 0 The languages L 0 and L 1 are variations of languages for which the weakest precondition semantics are well known (see <ref> [Dij76, Hes89, BW90, BK94b] </ref>). The compositional weakest precondition semantics for the languages L 2 and L 3 |to be presented in Section 5| constitute the main contribution of the present paper. <p> In fact, L 1 coincides with the demonic part of the monotonic predicate transformers presented in <ref> [BW90] </ref>. Notice, however, that the language L 1 is a proper class since the index I in the construct `2 I ' can be any non-empty set.
Reference: [BZ82] <author> J.W. de Bakker and J.I. Zucker. </author> <title> Processes and the Denotational Semantics of Concur-rency. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 70-120, </pages> <year> 1982. </year>
Reference-contexts: For the predicate transformer domains 0 , 1 the isomorphism with domains of state transformers is well known ([Plo79, Bac81, BK94b]). In Section 6 we will extend this duality by showing 2 that 2 and 3 are isomorphic to metric resumption domains 2 and 3 introduced in <ref> [BZ82] </ref>. The main purpose of establishing such a relationship is to explain, for L 2 , the correspondence of refinement in predicate transformer semantics and simulation in state transformer semantics. <p> If X and Y are two complete metric space, then (X 1 ! Y; d F ) is also a complete metric space, where X 1 ! Y is the collection of all non-expansive functions from X to Y . In [AR89, RT93], generalizing the results of <ref> [BZ82] </ref>, a method has been developed to obtain complete metric spaces as solutions of domain equations of the form M ~ = F (M ), where F is a functor from the category CMS of complete metric spaces and non-expansive functions to CMS. <p> The domains 0 and 1 are based on the Smyth power domain, while the domains 2 and 3 are (variations of) the metric resumption domains of De Bakker and Zucker <ref> [BZ82] </ref>. We start with the definition of (two versions of) the Smyth power domain. 6.1. Definition. Let S be a set of state and let S ? be the set S [ f?g ordered by x y if and only if x =? or x = y. <p> Their soundness can be proved by a simple application of Definitions 4.15 and 5.18. Turning back to the isomorphisms between state and predicate transformers, we define 2 as a variation of the domain introduced in <ref> [BZ82] </ref>. <p> The domain 2 comes equipped with the following operations (cf. <ref> [BZ82] </ref>). 6.4. Definition.
Reference: [CM88] <author> K.M. Chandy and J. Misra. </author> <title> A Foundation of Parallel Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [Dij76] <author> E.W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: The following diagram shows the relationships among the four languages. L 3 L 1 L 2 L 0 The languages L 0 and L 1 are variations of languages for which the weakest precondition semantics are well known (see <ref> [Dij76, Hes89, BW90, BK94b] </ref>). The compositional weakest precondition semantics for the languages L 2 and L 3 |to be presented in Section 5| constitute the main contribution of the present paper. <p> that wp 0 [[hd; v := ei]] = P: P [e=v]; wp 0 [[hd; xi]] = wp 0 [[hd; d (x)i]]; wp 0 [[hd; [S 1 2S 2 ]i]] = wp 0 [[hd; S 1 i]]2wp 0 [[hd; S 2 i]]: The above semantics for L 0 is well-known (see <ref> [Dij76] </ref>) including the separate treatment of guards b! ([Hes88a]). Probably less familiar is the justification of the above definition of wp 0 .
Reference: [DS90] <author> E.W. Dijkstra and C.S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference: [Dug66] <author> J. Dugundji. </author> <title> Topology. </title> <publisher> Allyn and Bacon, inc., </publisher> <year> 1966. </year>
Reference-contexts: This issue is, amongst others, discussed in the closing section of concluding remarks and future work. 2 Mathematical Preliminaries In this section we provide some basic notions and facts on topological and metric spaces. For a more detailed discussion consult <ref> [Dug66] </ref> or [Eng89]. A topology O (X) on a set X is a collection of subsets of X that is closed under finite intersections and arbitrary unions. Every topology O (X) is ordered by subset inclusion.
Reference: [Eng89] <author> R. Engelking. </author> <title> General Topology, volume 6 of Sigma Series in Pure Mathematics. </title> <publisher> Hel-dermann Verlag, </publisher> <address> Berlin, </address> <note> revised and completed edition, </note> <year> 1989. </year>
Reference-contexts: This issue is, amongst others, discussed in the closing section of concluding remarks and future work. 2 Mathematical Preliminaries In this section we provide some basic notions and facts on topological and metric spaces. For a more detailed discussion consult [Dug66] or <ref> [Eng89] </ref>. A topology O (X) on a set X is a collection of subsets of X that is closed under finite intersections and arbitrary unions. Every topology O (X) is ordered by subset inclusion. <p> Then for all ffi 0 it holds that d H (A; B) ffi , 8* &gt; 0: (8a 2 A: 9b 2 B: d (a; b) ffi + *) for all A; B M . 2 While the above proposition is standard (see <ref> [Eng89] </ref>) the following one seems to be new. 2.2. Proposition.
Reference: [GM91] <author> P. Gardiner and C. Morgan. </author> <title> Data Refinement of Predicate Transformers. </title> <journal> Theoretical Computer Science, </journal> <volume> 87 </volume> <pages> 143-162, </pages> <year> 1991. </year>
Reference: [GR89] <author> R. van Glabbek and J. Rutten. </author> <title> The processes of De Bakker and Zucker represent bisimulation equivalence classes. </title> <editor> In J.W. de Bakker, </editor> <volume> 25 jaar Semantiek, </volume> <pages> pages 243-246, </pages> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: But this means that there exists ht; 0 i 2 (s) with pt ( 0 ) = 0 and hence ( 0 ; t 0 ) 2 ^ R. (ii) Similar to <ref> [GR89] </ref> and hence omitted. (iii) Immediate by (iii) and Theorems 6.10 and 6.16. 2 Using Theorem 6.10, Definition 6.12 and Theorem 6.14 one can straightforwardly prove the correctness of the refinement rules for the language L 2 given in Figures 3 and 4.
Reference: [Hah48] <author> H. </author> <title> Hahn. </title> <journal> Reelle Funktionen, </journal> <volume> volume 1: </volume> <publisher> Punktfuntionen. Chelsea Publishing Company, </publisher> <address> New York, </address> <year> 1948. </year>
Reference-contexts: Also, if (X; d) is a complete metric space then both (P co (M ); d H ) and (P cl (M ); d H ) are complete metric spaces <ref> [Hah48, Kur56] </ref>. Below we give two properties of the Hausdorff distance which will be useful later. 2.1. Proposition. Let (M; d) be a metric space.
Reference: [Hes88a] <author> W.H. Hesselink. </author> <title> An Algebraic Calculus of Command. </title> <type> Technical Report CS-8808, </type> <institution> Rijk-suniversiteit Groningen, Department of Mathematics and Computing Science, </institution> <year> 1988. </year> <month> 36 </month>
Reference: [Hes88b] <author> W.H. Hesselink. </author> <title> Deadlock and fairness in morphisms of transition systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 235-257, </pages> <year> 1988. </year>
Reference-contexts: The rather arbitrary choice for the bracketing of L 0 is motivated by the wish to make the several definitions in Section 5 fit well. Dijkstra's guarded commands ([Dij76, DS90]) are a subset of L 0 . Indeed, following <ref> [Hes88b] </ref>, the guarded command b! S is equivalent in L 0 |in the sense that they have the same meaning| to [b! ;S]; the conditional command if b! S fi corresponds in L 0 to the procedure variable x declared as d (x) = [[b! ;S]2 [:b! ;x]] and the iteration
Reference: [Hes89] <author> W.H. Hesselink. </author> <title> Predicate Transformer Semantics of General Recursion. </title> <journal> Acta Informat-ica, </journal> <volume> 26 </volume> <pages> 309-332, </pages> <year> 1989. </year>
Reference-contexts: The following diagram shows the relationships among the four languages. L 3 L 1 L 2 L 0 The languages L 0 and L 1 are variations of languages for which the weakest precondition semantics are well known (see <ref> [Dij76, Hes89, BW90, BK94b] </ref>). The compositional weakest precondition semantics for the languages L 2 and L 3 |to be presented in Section 5| constitute the main contribution of the present paper.
Reference: [HP72] <author> P. Hitchcock and D. Park. </author> <title> Induction Rules and Termination Proofs. </title> <editor> In M. Nivat, editor, </editor> <booktitle> Proc. 1st ICALP, </booktitle> <address> Rocquencourt, France, 1972. </address> <publisher> North-Holland. </publisher>
Reference-contexts: It is ultimately based on the monotonic ity of `;' and `2 I '. Since 1 is a complete partial order, we have that also Env 1 is a complete partial order. Therefore for every declaration d 2 Decl 1 the function H d has least fixed point <ref> [HP72] </ref>. The technique is adapted from [Vin90]. Note that this way environments as place holders for temporary meanings of procedure variables intricate problems induced by the cardinality of L 1 are avoided. 5.8. Lemma.
Reference: [KR90] <author> J.N. Kok and J.J.M.M. Rutten. </author> <title> Contractions in Comparing Concurrency Semantics. </title> <journal> Theoretical Computer Science, </journal> <volume> 76 </volume> (2/3):179-222, 1990. 
Reference-contexts: Probably less familiar is the justification of the above definition of wp 0 . The semantics can be obtained as least fixed point of a higher order transformation, as promoted originally in a metric setting in <ref> [KR90] </ref>, thus avoiding employment of environments. We need at first a map which assigns a natural number to every statement in L 0 to be used in proofs based on induction. 5.4. Definition.
Reference: [Kur56] <author> K. </author> <title> Kuratowski. Sur une Methode de Metrisation Complete des Certain Espaces d'Ensembles Compacts. </title> <journal> Fund. Math., </journal> <volume> 42:114, </volume> <year> 1956. </year>
Reference-contexts: Also, if (X; d) is a complete metric space then both (P co (M ); d H ) and (P cl (M ); d H ) are complete metric spaces <ref> [Hah48, Kur56] </ref>. Below we give two properties of the Hausdorff distance which will be useful later. 2.1. Proposition. Let (M; d) be a metric space. <p> Put, for s 2 S, Q s = lim i Q (s; i ), then Q s in compact in M since P co (M ) is a complete metric space <ref> [Kur56] </ref>. Now define : P (M ) ! P (S) by (P ) = fs 2 S j Q s P g: We claim 2 OPT (M; S) and = lim i i . (multiplicativity) Let X P (M ).
Reference: [Kwi91] <author> M.Z. Kwiatowska. </author> <title> On Topological Characterization of Behavioural Properties. </title> <editor> In G.M. Reed, A.W. Roscoe, and R.F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Sciences Proc. Oxford Topology Symposioum, </booktitle> <month> June </month> <year> 1990, </year> <pages> pages 153-177. </pages> <publisher> Oxford Science Publications, </publisher> <year> 1991. </year>
Reference-contexts: introduction of a so-called backward distance, which enables us to deal with predicate transformers in a metric framework. The domain 2 encounters opens, whereas the domain 3 will deal with closed sets. This suggests, following <ref> [Smy83, Vic89, Kwi91, BJK95] </ref>, the suitability of the former for observable or liveness properties in contrast to the latter which might very well be used for safety properties. The weakest precondition semantics for the languages are given in Section 5. <p> Clearly, this intuition is consistent with the topological axioms: open sets are closed under finite intersections and arbitrary unions. (For an extensive treatment of this topological view of observable predicates, see <ref> [Smy83, Abr87, Vic89, Kwi91, BK94a] </ref>.) In a metric space M , every predicate can be expressed as intersection of metric observable predicates because the topological space (M; O (M )) is T 1 .
Reference: [Lam90] <author> L. Lamport. </author> <title> win and sin: Predicate Transformers for Concurrency. </title> <journal> ACM Transaction on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 396-428, </pages> <year> 1990. </year>
Reference: [Luk91] <author> J.J. Lukkien. </author> <title> Parallel Program Design and Generalized Weakest Precondition. </title> <type> PhD thesis, </type> <institution> Rijksuniversiteit Groningen, </institution> <year> 1991. </year>
Reference-contexts: Since no such feature as message-passing is present in the languages we may expect that a mixture of the `sequences of pairs'-techniques of [BHR90] and the linear semantics of Lukkien (cf. <ref> [Luk91, Luk94] </ref>) will provide a more abstract model. Probably the isomorphism of the domains of predicate transformers vs. state transformers may be of help in the comparison. Acknowledgments We wish to thank Jaco de Bakker for suggesting us to apply the general framework of [BK94a] to a concurrent language.
Reference: [Luk94] <author> J.J. Lukkien. </author> <title> Operational Semantics and Generalized Weakest Precondition. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 22 </volume> <pages> 137-155, </pages> <year> 1994. </year>
Reference-contexts: Since no such feature as message-passing is present in the languages we may expect that a mixture of the `sequences of pairs'-techniques of [BHR90] and the linear semantics of Lukkien (cf. <ref> [Luk91, Luk94] </ref>) will provide a more abstract model. Probably the isomorphism of the domains of predicate transformers vs. state transformers may be of help in the comparison. Acknowledgments We wish to thank Jaco de Bakker for suggesting us to apply the general framework of [BK94a] to a concurrent language.
Reference: [LV93] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and Backward Simulation part I: Untimed Systems. </title> <type> Technical Report CS-R9313, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1993. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: We say that a state transformer simulates t denoted by t if there exists a simulation relation R with (; t ) 2 R. We refer to the paper <ref> [LV93] </ref> for a survey on simulation for transition systems. Intuitively, a state transformer simulates t if for all input states s every computation of t (s) can be performed by (s), preserving all the output states of the atomic steps of the computation.
Reference: [Mor87] <author> J. Morris. </author> <title> A Theoretical Basis for Stepwise Refinement and the Programming Calculus. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9 </volume> <pages> 287-306, </pages> <year> 1987. </year>
Reference: [Par81] <author> D.M.R. Park. </author> <title> Concurrency and Automata on Infinite Sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> Proc. 5th GI Conference, volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Notice that this implies not only that all the interleaving states are preserved, but also the branching structure. Of special interest for concurrency is the notion of bisimulation for transition systems <ref> [Par81] </ref>. If we look at (backward) simulation as recursively defined superset order, then bisimulation is recursively defined equality. 6.13. Definition.
Reference: [Plo79] <author> G.D. Plotkin. </author> <title> Dijkstra's Predicate Transformer and Smyth's Powerdomain. </title> <editor> In D. Bjorner, editor, </editor> <booktitle> Proc. of the Winter School on Abstract Software Specification, volume 86 of Lecture Notes in Computer Science, </booktitle> <pages> pages 527-553. </pages> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference: [RT93] <author> J.J.M.M. Rutten and D. Turi. </author> <title> On the Foundations of Final Semantics: Non-Standard Sets, Metric Spaces, Partial Orders. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozen-berg, editors, </editor> <booktitle> Rex Workshop '92 'Semantics: Foundations and Applications', volume 666 of Lecture Notes in Computer Science, </booktitle> <pages> pages 477-530. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: If X and Y are two complete metric space, then (X 1 ! Y; d F ) is also a complete metric space, where X 1 ! Y is the collection of all non-expansive functions from X to Y . In <ref> [AR89, RT93] </ref>, generalizing the results of [BZ82], a method has been developed to obtain complete metric spaces as solutions of domain equations of the form M ~ = F (M ), where F is a functor from the category CMS of complete metric spaces and non-expansive functions to CMS. <p> If F X;Y is non-expansive, for all objects X; Y , then the functor is called locally non-expansive. For example, for complete metric spaces X and Y and a set S, the following operations (with associated metrics as defined above) can be extended to non-expansive functors <ref> [AR89, RT93] </ref>: S ! X, X + Y , X fi Y , P co (X) and P cl (X).
Reference: [Rut92] <author> J.J.M.M. Rutten. </author> <title> Processes as Terms: Non-Well-Founded Models for Bisimulation. </title> <type> Technical Report CS-R9211, </type> <institution> Centre for Mathematics and Computer Science, Amster-dam, </institution> <year> 1992. </year> <note> To appear in Mathematical Structures in Computer Science. </note>
Reference-contexts: First notice that the domain 2 can be seen as the transition system ! (S fi 2 ) fi ((S fi 2 ) [ S), where hs; i ! t if t 2 (s) This is an instance of the so-called `processes as terms' paradigm <ref> [Rut92] </ref>. For 2 , interpreted as transition system, the notion of (backward) simulation is given in the following definition. 6.12. Definition.
Reference: [Ser90] <author> K. Sere. </author> <title> Stepwise Derivation of Parallel Algorithms. </title> <type> PhD thesis, </type> <institution> Abo Akademi, </institution> <year> 1990. </year>
Reference: [Smy83] <author> M.B. Smyth. </author> <title> Power Domains and Predicate Transformers: A Topological View. </title> <editor> In J. Diaz, editor, </editor> <booktitle> Proc. 10th ICALP, volume 154 of Lecture Notes in Computer Science, </booktitle> <pages> pages 662-675, </pages> <address> Barcelona, Spain, 1983. </address> <publisher> Springer-Verlag. </publisher> <pages> 37 </pages>
Reference-contexts: introduction of a so-called backward distance, which enables us to deal with predicate transformers in a metric framework. The domain 2 encounters opens, whereas the domain 3 will deal with closed sets. This suggests, following <ref> [Smy83, Vic89, Kwi91, BJK95] </ref>, the suitability of the former for observable or liveness properties in contrast to the latter which might very well be used for safety properties. The weakest precondition semantics for the languages are given in Section 5. <p> Clearly, this intuition is consistent with the topological axioms: open sets are closed under finite intersections and arbitrary unions. (For an extensive treatment of this topological view of observable predicates, see <ref> [Smy83, Abr87, Vic89, Kwi91, BK94a] </ref>.) In a metric space M , every predicate can be expressed as intersection of metric observable predicates because the topological space (M; O (M )) is T 1 .
Reference: [SZ92] <author> D. Scholefield and H.S.M. Zedan. </author> <title> Weakest Precondition Semantics for Time and Con--currency. </title> <journal> Information Processing Letters, </journal> <volume> 43(6) </volume> <pages> 301-308, </pages> <year> 1992. </year>
Reference: [US93] <author> A. Udaya Shankar. </author> <title> An Introduction to Assertional Reasoning for Concurrent Systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 25 </volume> <pages> 225-262, </pages> <year> 1993. </year>
Reference-contexts: As a more involving and likely more interesting application of the semantics wp 2 , we treat the accumulator example (cf. <ref> [US93] </ref>) x := x + 2 0 kx := x + 2 1 k : : : kx := x + 2 n : Under the assumption of atomic execution of the assignments x := x + 2 i , we want to calculate the weakest precondition for P = fs
Reference: [Vic89] <author> S.J. Vickers. </author> <title> Topology via Logic, </title> <booktitle> volume 5 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: introduction of a so-called backward distance, which enables us to deal with predicate transformers in a metric framework. The domain 2 encounters opens, whereas the domain 3 will deal with closed sets. This suggests, following <ref> [Smy83, Vic89, Kwi91, BJK95] </ref>, the suitability of the former for observable or liveness properties in contrast to the latter which might very well be used for safety properties. The weakest precondition semantics for the languages are given in Section 5. <p> Clearly, this intuition is consistent with the topological axioms: open sets are closed under finite intersections and arbitrary unions. (For an extensive treatment of this topological view of observable predicates, see <ref> [Smy83, Abr87, Vic89, Kwi91, BK94a] </ref>.) In a metric space M , every predicate can be expressed as intersection of metric observable predicates because the topological space (M; O (M )) is T 1 .
Reference: [Vin90] <author> E.P. de Vink. </author> <title> Comparative semantics for Prolog with cut. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 13 </volume> <pages> 237-264, </pages> <year> 1989/90. </year>
Reference-contexts: Since 1 is a complete partial order, we have that also Env 1 is a complete partial order. Therefore for every declaration d 2 Decl 1 the function H d has least fixed point [HP72]. The technique is adapted from <ref> [Vin90] </ref>. Note that this way environments as place holders for temporary meanings of procedure variables intricate problems induced by the cardinality of L 1 are avoided. 5.8. Lemma.
Reference: [Wri90] <author> J. von Wright. </author> <title> A Lattice-theoretical Basis for Program Refinement. </title> <type> PhD thesis, </type> <institution> Abo Akademi, </institution> <year> 1990. </year> <month> 38 </month>
References-found: 49

