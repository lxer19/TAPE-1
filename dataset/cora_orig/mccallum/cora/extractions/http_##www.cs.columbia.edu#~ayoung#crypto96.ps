URL: http://www.cs.columbia.edu/~ayoung/crypto96.ps
Refering-URL: http://www.cs.columbia.edu/~ayoung/papers.html
Root-URL: http://www.cs.columbia.edu
Title: The Dark Side of "Black-Box" Cryptography  
Keyword: Key words: Cryptanalytic attacks, hardware, software, RSA, DSA, ElGa-mal, Kerberos, Private key, Public Key, applied systems, design and manufacturing of cryptographic devices and software, Capstone, key escrow, auto-escrowing keys, subliminal channels, randomness, pseudorandomness.  
Abstract: or: Should We Trust Capstone? ? Abstract. The use of cryptographic devices as "black boxes", namely trusting their internal designs, has been suggested and in fact Capstone technology is offered as a next generation hardware-protected escrow encryption technology. Software cryptographic servers and programs are being offered as well, for use as library functions, as cryptography gets more and more prevalent in computing environments. The question we address in this paper is how the usage of cryptography as a black box exposes users to various threats and attacks that are undetectable in a black-box environment. We present the SETUP (Secretly Embedded Trapdoor with Universal Protection) mechanism, which can be embedded in a cryptographic black-box device. It enables an attacker (the manufacturer) to get the user's secret (from some stage of the output process of the device) in an unnoticeable fashion, yet protects against attacks by others and against reverse engineering (thus, maintaining the relative advantage of the actual attacker). We also show how the SETUP can, in fact, be employed for the design of "auto-escrowing key" systems. We present embeddings of SETUPs in RSA, El-Gamal, DSA, and private key systems (Kerberos). We implemented an RSA key-generation based SETUP that performs favorably when compared to PGP, a readily available RSA implementation. We also relate message-based SETUPs and subliminal channel attacks. Finally, we reflect on the potential implications of "trust management" in the context of the design and production of cryptosystems. 
Abstract-found: 1
Intro-found: 1
Reference: [ACGS] <author> W. Alexi, B. Chor, O. Goldreich and C. Schnorr. </author> <title> RSA and Rabin Functions: Certain Parts are as Hard as the Whole. </title> <journal> In SIAM Journal of Computing, </journal> <volume> volume 17, </volume> <editor> n. </editor> <volume> 2, </volume> <pages> pages 194-209, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: At the same time, it contains published bits (of the user's secret key) which are easily derivable by the attacker but are otherwise hidden. (The output can be generated during key-generation or during system operation). 5. Furthermore, the output of C and C 0 are polynomially indistinguishable (see, e.g., <ref> [ACGS] </ref>) to everyone (including those who have access to the code of C 0 ) except the attacker. Definition 2: Let C be a publicly known cryptosystem. A contaminated cryptosystem C 0 is a modified version of C that contains a SETUP mechanism. <p> In this case the encryption is split into two halves, half being put in N and half in e. In this case we can also use RSA as a strong encryption (pseudo-random generator <ref> [ACGS] </ref>), hiding the final seed for the attacker to invert in e. 4 An Application: Auto-Escrowing-Keys in Hardware The notion of embedding a public key within a cryptosystem may lead to a globally trusted and efficient hardware key escrow mechanism. Each device would have its own unique public key.
Reference: [And71] <author> G. E. Andrews. </author> <title> "Number Theory," page 100, 1971. </title> <publisher> Dover Publications Inc. </publisher>
Reference-contexts: It can be shown using suitable values for B 1 and B 2 that the probability of finding a valid p and q is appreciable, using the Prime Number Theorem <ref> [And71] </ref>. PAP initially sets the value of the public exponent e being generated to 17. Once a valid q is found, PAP checks to see if e and (n) are relatively prime.
Reference: [Bac88] <author> E. Bach. </author> <title> How To Generate Factored Random Numbers. </title> <journal> In SIAM Journal of Computing, </journal> <volume> volume 17, </volume> <editor> n. </editor> <volume> 2, </volume> <month> April </month> <year> 1988. </year>
Reference-contexts: To generate a key pair, a prime number p is chosen at random (typically with known factorization <ref> [Bac88] </ref>). Two numbers, g and x are chosen at random such that they are both less than p and g is a generator. The value for y is then found by calculating g x (mod p). Two simple versions of the subliminal channel in ElGamal will now be described.
Reference: [BFL95] <author> M. Blaze, J. Feigenbaum and F.T. Leighton. </author> <note> Masterkey Cryptosystems, CRYPTO 95 Rump session, </note> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: We have shown that under the hardware protection of key generation and assuming the use of RSA, we have, in effect, an escrow system. This is somewhat in the opposite direction of <ref> [BFL95] </ref> who showed that private encryption with universal escrow keys implies public-key cryptography. Claim 1 Given RSA (or a more general public-key function) with a SETUP in its key generation procedure, we can implement a tamper-proof hardware key escrow system with no system overhead.
Reference: [Des90] <author> Yvo Desmedt. </author> <title> Abuses in Cryptography and How to Fight Them. </title> <booktitle> In Advances in Cryptology|CRYPTO '88, </booktitle> <pages> pages 375-389, </pages> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Related Work Gus Simmons has pioneered the research in the area of subliminal channels and their inclusion in cryptosystems [Sim85]. He has published channels in the Ong-Schnorr-Shamir, ElGamal, Esign, and DSA digital signature schemes. Another channel was discovered by Desmedt <ref> [Des90] </ref>. Killian and Leighton [KL95] showed how a key distribution channel containing a subliminal channel can be exploited by attackers that agree on a way to exploit it. <p> PAP hides p 0 in the upper order bit representation of the public modulus, using a storage method for information within the RSA key that was first pointed out by Desmedt <ref> [Des90] </ref>). PAP works as follows. It contains the k-bit RSA public key of the attacker which is half the length of the key being generated. It first generates a random k-bit prime p.
Reference: [Diffie] <author> W. Diffie, </author> <type> Personal Communication. </type>
Reference-contexts: The user should be able to check the devices manufactured by various vendors and compare the results. This would limit the avenues that an attacker could use to install a SETUP. It was pointed out to us by Diffie <ref> [Diffie] </ref> that in a typical cryptographic system, a key generation program is often put into hardware in order to be able to declare that "our system is secure". This "traditional wisdom" may need revision in light of the attacks presented herein.
Reference: [DSS91] <institution> Proposed Federal Information Processing Standard for Digital Signature Standard (DSS). </institution> <note> In volume 56, </note> <editor> n. </editor> <booktitle> 169 of Federal Register, </booktitle> <pages> pages 42980-42982, </pages> <year> 1991. </year>
Reference: [ElG85] <author> T. ElGamal. </author> <title> A Public-Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. </title> <booktitle> In Advances in Cryptology|CRYPTO '84, </booktitle> <pages> pages 10-18, </pages> <address> Berlin, 1985. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This hierarchy of attacks demonstrates the extreme level of caution that must be taken in regards to cryptosystems. 5 SETUPs in ElGamal, DSA, and Kerberos SETUP in ElGamal Key Generation A similar subliminal channel can be implemented in ElGamal. The following is a summary of normal ElGamal encryption <ref> [ElG85] </ref>: Public Key: p,g,y Private Key: x Encryption: a = g k (mod p), b = y k M (mod p) Decryption: M = b=a x (mod p) Here M is the message being encrypted and (a,b) is the ciphertext of M.
Reference: [Has] <author> Matthew B. Hastings, </author> <title> private communication. </title>
Reference-contexts: The B 2 bound gives a work factor that trades off the required work of finding the prime number q for increasing the work of recovering p <ref> [Has] </ref>. It can be shown using suitable values for B 1 and B 2 that the probability of finding a valid p and q is appreciable, using the Prime Number Theorem [And71]. PAP initially sets the value of the public exponent e being generated to 17.
Reference: [KL95] <author> J. Killian and F.T. Leighton. </author> <title> Fair Cryptosystems Revisited. </title> <booktitle> In Advances in Cryptology|CRYPTO '95, </booktitle> <pages> pages 208-221, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Related Work Gus Simmons has pioneered the research in the area of subliminal channels and their inclusion in cryptosystems [Sim85]. He has published channels in the Ong-Schnorr-Shamir, ElGamal, Esign, and DSA digital signature schemes. Another channel was discovered by Desmedt [Des90]. Killian and Leighton <ref> [KL95] </ref> showed how a key distribution channel containing a subliminal channel can be exploited by attackers that agree on a way to exploit it.
Reference: [LMS] <author> J. Lacy, D. Mitchell, W. Schell. CryptoLib: </author> <title> Cryptography in Software. </title> <institution> AT&T Bell Laboratories, section 2.2.1. </institution>
Reference: [MB95] <author> D. Mitchell, M. </author> <type> Blaze. </type> <institution> truerand.c, AT&T Laboratories, </institution> <year> 1995. </year>
Reference: [NT94] <author> B. C. Neuman, T. Ts'o. </author> <title> Kerberos: An Authentication Service for Computer Networks. </title> <journal> In IEEE Communications Magazine, </journal> <pages> pages 33-38, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: SETUP in Kerberos In this section we show how Kerberos <ref> [NT94] </ref> can be modified to leak session keys exclusively to an attacker without putting the attacker at risk. The Kerberos model is based on a client server model in which the client is either a user or a program.
Reference: [Rabin] <author> M. Rabin. </author> <title> A Public-key and Signature Scheme as Secure as Factoring, </title> <type> MIT Tech. Report, </type> <year> 1978. </year>
Reference-contexts: This SETUP mechanism cannot be used effectively in programs like PGP, since PGP uses very small exponents (on the order of 5 bits). Therefore, any such attack is unlikely to go unnoticed. Also, attacks with small e will enable attacks on Rabin's scheme <ref> [Rabin] </ref>. We will now introduce our strongest version of the RSA SETUP mechanism by describing a program called Pretty-Awful-Privacy. PAP is very similar to PGP, except that the author of PAP has the exclusive ability to factor the public keys that are generated by PAP.
Reference: [RSA78] <author> R. Rivest, A. Shamir, L. Adleman. </author> <title> A method for obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> In Communications of the ACM, </journal> <volume> volume 21, </volume> <editor> n. </editor> <volume> 2, </volume> <pages> pages 120-126, </pages> <year> 1978. </year>
Reference-contexts: Furthermore, even if all agreements among the parties are known, the danger persists due to "new" applications of cryptography itself (i.e., using crypto to attack crypto). 3 SETUP in RSA Key Generation The obvious way to attack the RSA <ref> [RSA78] </ref> key generation process is to include a fixed prime number p. Since q will be chosen randomly, the modulus will look random to the casual observer. Obviously, this is not a SETUP since anyone can find all keys after two have been generated (using the Euclidean Algorithm).
Reference: [Sim85] <author> G. J. Simmons. </author> <title> The Subliminal Channel and Digital Signatures. </title> <booktitle> In Advances in Cryptology|EUROCRYPT '84, </booktitle> <pages> pages 51-57, </pages> <address> Berlin, 1985. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Such an attack is carried out without letting the users know that the cryptosystem in question is contaminated, and without giving any advantage to those who discover the contamination. Related Work Gus Simmons has pioneered the research in the area of subliminal channels and their inclusion in cryptosystems <ref> [Sim85] </ref>. He has published channels in the Ong-Schnorr-Shamir, ElGamal, Esign, and DSA digital signature schemes. Another channel was discovered by Desmedt [Des90]. Killian and Leighton [KL95] showed how a key distribution channel containing a subliminal channel can be exploited by attackers that agree on a way to exploit it.
Reference: [Sim94] <author> G. J. Simmons. </author> <title> Subliminal Channels: Past and Present. </title> <journal> In European Trans. on Telecommunication, </journal> <volume> 5(4), </volume> <year> 1994, </year> <pages> PAGES 459-473. </pages>
Reference-contexts: SETUP in DSA: SETUP from subliminal channels In fact, the concept of securely disclosing keys via a SETUP can be used to extend subliminal channels in general (ignoring speed and bandwidth), e.g. the one found in DSA by Gus Simmons <ref> [Sim94] </ref>. One of the shortcomings of the attack on DSA is that only a few bits (roughly 14) can be leaked in a given signature. The other drawback is that if anyone successfully reverse-engineers the tamperproof device, they will have access to the secret primes.
Reference: [Tho84] <author> K. Thompson. </author> <title> Reflections on Trusting Trust. </title> <journal> In Communications of the ACM, </journal> <volume> volume 27, </volume> <editor> n. </editor> <volume> 8, </volume> <month> August </month> <year> 1984. </year>
Reference-contexts: If the user publishes y, g, and p, then the attacker can compute x by decrypting g and p with his private key. The key generation attacks against RSA and ElGamal bear a strong resemblance to the ideas described in "Reflections on Trusting Trust" by Ken Thomp-son <ref> [Tho84] </ref>.
Reference: [WN] <author> D. Wheeler, R. Needham. </author> <title> Tiny Encryption Algorithm (TEA). In Fast Software Encryption: </title> <booktitle> second internation workshop, volume 1008 of Lecture Notes in computer science, </booktitle> <address> Dec. 1994. </address> <publisher> Springer. </publisher>
Reference: [Zim92] <author> Phil Zimmerman. </author> <note> PGP User's Guide, 4 Dec. </note> <year> 1992. </year>
References-found: 20

