URL: http://www.cs.tamu.edu/faculty/bettati/Papers/euromicro93.ps
Refering-URL: http://www.cs.tamu.edu/faculty/bettati/selected_papers.html
Root-URL: http://www.cs.tamu.edu
Title: On-Line Scheduling for Checkpointing Imprecise Computation  
Author: Riccardo Bettati Nicholas S. Bowen, Jen-Yao Chung 
Date: June 1993, pages 238-243.  
Address: Oulu, Finland,  P.O. Box 704 Urbana, Illinois 61801 Yorktown Heights, NY 10598  
Affiliation: Real-Time Systems,  Department of Computer Science IBM T. J. Watson Research Center University of Illinois at Urbana-Champaign  
Note: Appeared in: Proceedings of the Fifth Euromicro Workshop on  
Abstract: When a failure occurs in a real-time system, the temporary loss of service and the recovery can cause a transient overload with an increase in the number of tasks that can not meet their timing constraints. The imprecise-computation technique allows one to trade off computation accuracy with computation time and offers therefore the necessary scheduling flexibility required during the recovery process after a failure. In this paper we investigate how the imprecise-computation approach can be combined with check-pointing; the result is a technique for fault-tolerance for real-time system. We define optimality criteria for the checkpointed imprecise-computation model. In an earlier work we have described algorithms to statically schedule imprecise tasks to meet these criteria. These approaches are conservative for systems with very rare failures. We take advantage of new results in on-line scheduling of imprecise computation to design an algorithm that dynamically adapts to failure occurrences. Simulations are described to evaluate the performance of this algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. J. Lin, S. Natarajan, J. W.-S. Liu, and T. Krauskopf, </author> <title> "Concord: a System of Imprecise Computations," </title> <booktitle> Proceedings of the 1987 IEEE Compsac, </booktitle> <address> Japan, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: 1 Introduction The imprecise-computation model has been proposed in <ref> [1, 2, 3] </ref> as a means to provide flexibility in scheduling time-critical tasks. In this model, tasks are composed of a mandatory part, where an acceptable result is made available, and an optional part, where this initial result is improved monotonically to reach the desired accuracy. <p> In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu [9] developed an algorithm to schedule imprecise tasks on-line. The imprecise-computation model and its applications in real-time systems are described in detail in <ref> [1, 2, 3] </ref>. 3 Checkpointing Time-Critical Tasks We assume a fault model where faults are transient. Tasks do not communicate with each other. Therefore the effect of a fault is confined to the task that was executing at the time when the fault occurred.
Reference: [2] <author> Lin, K. J., S. Natarajan, J. W. S. Liu, </author> <title> "Imprecise results: utilizing partial computations in real-time systems," </title> <booktitle> Proceedings of the IEEE 8th Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: 1 Introduction The imprecise-computation model has been proposed in <ref> [1, 2, 3] </ref> as a means to provide flexibility in scheduling time-critical tasks. In this model, tasks are composed of a mandatory part, where an acceptable result is made available, and an optional part, where this initial result is improved monotonically to reach the desired accuracy. <p> In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu [9] developed an algorithm to schedule imprecise tasks on-line. The imprecise-computation model and its applications in real-time systems are described in detail in <ref> [1, 2, 3] </ref>. 3 Checkpointing Time-Critical Tasks We assume a fault model where faults are transient. Tasks do not communicate with each other. Therefore the effect of a fault is confined to the task that was executing at the time when the fault occurred.
Reference: [3] <author> Chung, J. Y. and J. W. S. Liu, </author> <title> "Algorithms for scheduling periodic jobs to minimize average error," </title> <booktitle> Proceedings of the 9th IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <month> Decem-ber </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The imprecise-computation model has been proposed in <ref> [1, 2, 3] </ref> as a means to provide flexibility in scheduling time-critical tasks. In this model, tasks are composed of a mandatory part, where an acceptable result is made available, and an optional part, where this initial result is improved monotonically to reach the desired accuracy. <p> In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu [9] developed an algorithm to schedule imprecise tasks on-line. The imprecise-computation model and its applications in real-time systems are described in detail in <ref> [1, 2, 3] </ref>. 3 Checkpointing Time-Critical Tasks We assume a fault model where faults are transient. Tasks do not communicate with each other. Therefore the effect of a fault is confined to the task that was executing at the time when the fault occurred.
Reference: [4] <author> Muppala, J. K., S. P. Woolet and K. S. Trivedi, </author> <title> "Real-Time-Systems Performance in the Presence of Failures," </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Checkpointing can therefore be viewed as another method to reduce the temporary overload caused by failures. Due to its limited rollback and its predictable recovery behavior, checkpointing is besides various parallel redundancy and replication schemes <ref> [4, 5] </ref> - a widely used technique for fault tolerance in real-time systems. In [8] we described ways to combine imprecise computation and traditional checkpointing to provide fault tolerance in time-critical systems. We proposed the model of checkpointed imprecise computation to achieve dependability in time-critical systems.
Reference: [5] <author> Ramamritham, K. and J. A. Stankovic, </author> <title> "Dynamic Task Scheduling in Distributed Hard Real-Time Systems," </title> <journal> IEEE Software, </journal> <volume> Vol. 1, No. 3, </volume> <year> 1984. </year>
Reference-contexts: Checkpointing can therefore be viewed as another method to reduce the temporary overload caused by failures. Due to its limited rollback and its predictable recovery behavior, checkpointing is besides various parallel redundancy and replication schemes <ref> [4, 5] </ref> - a widely used technique for fault tolerance in real-time systems. In [8] we described ways to combine imprecise computation and traditional checkpointing to provide fault tolerance in time-critical systems. We proposed the model of checkpointed imprecise computation to achieve dependability in time-critical systems.
Reference: [6] <author> Shih, W.K., J. Y. Chung, J. W. S. Liu, and D. W. Gillies, </author> <title> "Scheduling tasks with ready times and deadlines to minimize average error," </title> <journal> ACM Operating Systems Review, </journal> <month> July </month> <year> 1989. </year>
Reference-contexts: If the deadline of a task is reached, the portion of the task that has not been executed yet is discarded. If any portion of the mandatory part has not been executed, a timing fault is said to occur. Shih et al. <ref> [6, 7, 9] </ref> have developed several scheduling algorithms that address the problem of scheduling imprecise task sets to minimize the total error. In [6] they formulate it as a network-flow problem. In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. <p> If any portion of the mandatory part has not been executed, a timing fault is said to occur. Shih et al. [6, 7, 9] have developed several scheduling algorithms that address the problem of scheduling imprecise task sets to minimize the total error. In <ref> [6] </ref> they formulate it as a network-flow problem. In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu [9] developed an algorithm to schedule imprecise tasks on-line. <p> An algorithm (such as described in <ref> [6, 7] </ref>) to schedule this modified imprecise task set is applied to generate an optimal k-tolerant schedule. The assumption that all K failures do occur is conservative. Under normal circumstances, very few failures occur, if any at all.
Reference: [7] <author> Shih, W. K., J. W. S. Liu and J. Y. Chung, </author> <title> "Algorithms for scheduling tasks to minimize total error," </title> <journal> SIAM Journal of Computing, </journal> <year> 1991. </year>
Reference-contexts: If the deadline of a task is reached, the portion of the task that has not been executed yet is discarded. If any portion of the mandatory part has not been executed, a timing fault is said to occur. Shih et al. <ref> [6, 7, 9] </ref> have developed several scheduling algorithms that address the problem of scheduling imprecise task sets to minimize the total error. In [6] they formulate it as a network-flow problem. In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. <p> Shih et al. [6, 7, 9] have developed several scheduling algorithms that address the problem of scheduling imprecise task sets to minimize the total error. In [6] they formulate it as a network-flow problem. In <ref> [7] </ref> much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu [9] developed an algorithm to schedule imprecise tasks on-line. <p> An algorithm (such as described in <ref> [6, 7] </ref>) to schedule this modified imprecise task set is applied to generate an optimal k-tolerant schedule. The assumption that all K failures do occur is conservative. Under normal circumstances, very few failures occur, if any at all.
Reference: [8] <author> Bettati, R., N. S. Bowen and J. Y. Chung, </author> <title> "Checkpointing Imprecise Computation", </title> <booktitle> Proceedings of the IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <address> Phoenix, Ari-zona, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Checkpointing can therefore be viewed as another method to reduce the temporary overload caused by failures. Due to its limited rollback and its predictable recovery behavior, checkpointing is besides various parallel redundancy and replication schemes [4, 5] - a widely used technique for fault tolerance in real-time systems. In <ref> [8] </ref> we described ways to combine imprecise computation and traditional checkpointing to provide fault tolerance in time-critical systems. We proposed the model of checkpointed imprecise computation to achieve dependability in time-critical systems. <p> Under the assumption that k i failures occur, a checkpoint interval ~s i can be determined that minimizes the worst case execution time of T i . We call ~s i the optimal checkpoint interval. In <ref> [8] </ref> we showed ~s i = t i c i =k i to be optimal. The problem of deriving optimal checkpoint intervals has been extensively discussed under a variety of assumptions. Most previous research assumes stochastic failure occurrences, mostly in form of Poisson processes. <p> We call a k-tolerant schedule of T that minimizes the total error an optimal k-tolerant schedule of T . In <ref> [8] </ref> we described an algorithm (Algorithm C) to generate optimal k-tolerant schedules in an imprecise-computation-system. The general idea is to increase the mandatory part m i of each task T i by the time 1. <p> We envision the check-pointed imprecise-computation model being an integral part of an imprecise system architecture such as [10], where system-directed checkpointing guarantees fault-tolerance with a minimum amount of error. The number k of planned failures would then be a parameter that is determined at service-negotiation time. In <ref> [8] </ref> we presented two algorithms to optimally schedule checkpointed imprecise task sets. These algorithms are not suitable for systems with very low failure rates, however. In this paper, we present an on-line algorithm to schedule checkpointed imprecise task sets.
Reference: [9] <author> Shih, W. K. and J. W. S. Liu, </author> <title> "On-line Scheduling of Imprecise Computations to Minimize Error," </title> <booktitle> Proceedings of the 13th IEEE Real-Time Systems Symposium, </booktitle> <address> Phoenix, Arizona, </address> <month> Decem-ber </month> <year> 1992. </year>
Reference-contexts: If the deadline of a task is reached, the portion of the task that has not been executed yet is discarded. If any portion of the mandatory part has not been executed, a timing fault is said to occur. Shih et al. <ref> [6, 7, 9] </ref> have developed several scheduling algorithms that address the problem of scheduling imprecise task sets to minimize the total error. In [6] they formulate it as a network-flow problem. In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. <p> In [6] they formulate it as a network-flow problem. In [7] much faster algorithms are found, that are based on a variation of the traditional earliest-deadline-first algorithm. Recently Shih and Liu <ref> [9] </ref> developed an algorithm to schedule imprecise tasks on-line. The imprecise-computation model and its applications in real-time systems are described in detail in [1, 2, 3]. 3 Checkpointing Time-Critical Tasks We assume a fault model where faults are transient. Tasks do not communicate with each other. <p> We introduce a much more efficient approach based on Shih and Liu's recent results on on-line scheduling of imprecise computation <ref> [9] </ref>. Shih and Liu describe various algorithms to schedule imprecise task systems with tasks whose parameters are only known after the processor starts executing some tasks. We describe here how their algorithm NORA can be extended to generate optimal k-tolerant schedules. Algorithm NORA has been proved in [9] to minimize the <p> of imprecise computation <ref> [9] </ref>. Shih and Liu describe various algorithms to schedule imprecise task systems with tasks whose parameters are only known after the processor starts executing some tasks. We describe here how their algorithm NORA can be extended to generate optimal k-tolerant schedules. Algorithm NORA has been proved in [9] to minimize the total error for imprecise task systems with no offline tasks and on-line tasks that are ready upon arrival. This algorithm maintains a reservation list for all tasks that have arrived but are not yet completed.
Reference: [10] <author> Shih-Wei Liao, Kwei-Jay Lin, </author> <title> "Implementing a Fault-Tolerant Imprecise Computation Server on Mach", </title> <booktitle> Proceedings of the IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <address> Phoenix, Arizona, </address> <month> December </month> <year> 1992. </year> <title> (a) (b) (a) (b) </title>
Reference-contexts: We may think of it as a checkpoint being generated. We envision the check-pointed imprecise-computation model being an integral part of an imprecise system architecture such as <ref> [10] </ref>, where system-directed checkpointing guarantees fault-tolerance with a minimum amount of error. The number k of planned failures would then be a parameter that is determined at service-negotiation time. In [8] we presented two algorithms to optimally schedule checkpointed imprecise task sets.
References-found: 10

