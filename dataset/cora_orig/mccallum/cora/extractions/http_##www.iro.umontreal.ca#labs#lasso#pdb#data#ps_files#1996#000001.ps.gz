URL: http://www.iro.umontreal.ca/labs/lasso/pdb/data/ps_files/1996/000001.ps.gz
Refering-URL: http://www.iro.umontreal.ca/people/zhouz/research/project_papers.html
Root-URL: http://www.iro.umontreal.ca
Email: E-mail: -tahar,zhouz,song,cerny-@iro.umontreal.ca  E-mail: langevin@borneo.gmd.de  
Title: Formal Verification of an ATM Switch Fabric using Multiway Decision Graphs  
Author: Sofine Tahar, Zijian Zhou, Xiaoyu Song, Eduard Cerny and Michel Langevin 
Address: Canada.  GMD-SET, Germany.  
Affiliation: University of Montreal, IRO Dept.,  
Abstract: In this paper we present our results on formally verifying the implementation of an Asynchronous Transfer Mode (ATM) network switching fabric using a new class of decision graphs, called Multiway Decision Graphs (MDG). The design we consider is in use for real applications in the Cambridge Fairisle network. We produced the description of the hardware implementation at different levels of abstraction. We then performed the verification of an abstract description model against the description of the gate-level implementation. Using this abstract model, we accomplished the verification of specific properties that reflect the behavior of the Fairisle ATM switch fabric. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bryant, R.: </author> <title> Graph-Based Algorithms for Boolean Function Manipulation; IEEE Transactions on Computers, </title> <journal> Vol. </journal> <volume> C-35, No. 8, </volume> <month> August </month> <year> 1986, </year> <pages> pp. 677-691. </pages>
Reference-contexts: In this paper, we present our results on formally verifying an ATM network component using a new class of decision graphs, called Multiway Decision Graphs (MDG) [3]. These decision graphs subsume the class of Bryants Reduced Ordered Binary Decision Diagrams (ROBDD) <ref> [1] </ref> while accommodating abstract sorts and uninterpreted function symbols. The device we investigated is part of a network which carries real user data: the Fairisle ATM net work [8], designed and in use at the Computer Laboratory of the University of Cambridge. It provides a realistic formal verification case study. <p> lines from a bundle of bits to a compact word of abstract sort, we have abstracted the behavior of the dataswitch unit by modelling it using simple DEF DMUX4T2 (d [0..3],x:IN;dout [0..1]:IO); xBar:IO; BEGIN Clb:=XiCLBMAP5i20 (d [0..1],x,d [2..3],dout [0..1]); InvX:= XiINV (x,xBar); B [0]:= AO (d [0],xBar,d <ref> [1] </ref>,x,dout [0]); B [1]:= AO (d [2],xBar,d [3],x,dout [1]); END; module (DMUX4T2 port (inputs ((d0,bool),(d1,bool), (d2,bool),(d3,bool)),(x,bool)), outputs ((dout0,bool),(dout1,bool))), structure ( signals (xBar,bool), component (InvX,NOT (input (x),output (xBar))), component (AO_0,AO (input (d0,xBar,d1,x), output (dout0))), component (AO_1,AO (input (d2,xBar,d3,x), output (dout1))))). data multiplexors instead of collections of logic gates. <p> bits to a compact word of abstract sort, we have abstracted the behavior of the dataswitch unit by modelling it using simple DEF DMUX4T2 (d [0..3],x:IN;dout [0..1]:IO); xBar:IO; BEGIN Clb:=XiCLBMAP5i20 (d [0..1],x,d [2..3],dout [0..1]); InvX:= XiINV (x,xBar); B [0]:= AO (d [0],xBar,d <ref> [1] </ref>,x,dout [0]); B [1]:= AO (d [2],xBar,d [3],x,dout [1]); END; module (DMUX4T2 port (inputs ((d0,bool),(d1,bool), (d2,bool),(d3,bool)),(x,bool)), outputs ((dout0,bool),(dout1,bool))), structure ( signals (xBar,bool), component (InvX,NOT (input (x),output (xBar))), component (AO_0,AO (input (d0,xBar,d1,x), output (dout0))), component (AO_1,AO (input (d2,xBar,d3,x), output (dout1))))). data multiplexors instead of collections of logic gates.
Reference: [2] <author> Chen, B.; Yamazaki, M.; Fujita, M.: </author> <title> Bug Identification of a Real Chip Design by Symbolic Model Checking; Proc. </title> <booktitle> International Conference on Circuits And Systems (ISCAS94), </booktitle> <address> London, UK, </address> <month> June </month> <year> 1994, </year> <pages> pp. 132-136. </pages>
Reference-contexts: GLS-VLSI96 Great Lakes Symposium on VLSI Ames, Iowa, USA, March 1996 IEEE Computer Society Press Another approach of formal verification of an ATM cir-cuit was made by B. Chen et al. at Fujitsu Digital Technology Ltd. <ref> [2] </ref>. The authors identified a design error in an ATM circuit using the tool SMV (Symbolic Model Verifier) [7] by verifying some properties expressed in CTL (Computational Tree Logic) [7]. To avoid the state explosion problem, the authors abstracted the datapath from 8 bits to 1 bit.
Reference: [3] <author> Corella, F.; Zhou, Z.; Song, X.; Langevin, M.; Cerny, E.: </author> <title> Multiway Decision Graphs for Automated Hardware verification. </title> <note> To appear in the journal of Formal Methods in System Design. Available as IBM research report RC19676(87224), </note> <month> July </month> <year> 1994. </year>
Reference-contexts: However, there is currently little experience on the application of formal verification to ATM network hardware. In this paper, we present our results on formally verifying an ATM network component using a new class of decision graphs, called Multiway Decision Graphs (MDG) <ref> [3] </ref>. These decision graphs subsume the class of Bryants Reduced Ordered Binary Decision Diagrams (ROBDD) [1] while accommodating abstract sorts and uninterpreted function symbols. <p> Hence, the size of an ROBDD grows, sometimes exponentially, with the number of variables. ROBDD-based verification thus cannot be applied to circuits with complex datapaths. Recently, Multiway Decision Graphs (MDG) have been proposed to represent circuits at a more abstract level <ref> [3] </ref>. It is based on a subset of a many-sorted first-order logic augmented with a distinction between abstract sorts and concrete sorts. Concrete sorts have enumerations, while abstract sorts do not. <p> For circuits with large datapaths, MDGs are thus much more compact than ROBDDs, and hence greatly increase the range of circuits that can be verified since the verification is independent of the width of the datapath. For details about MDGs refer to <ref> [3] </ref>. Using abstract sorts, we are able to represent circuits at the RT-level (Register Transfer). We have developed a reachability analysis algorithm (based on a technique called abstract implicit enumeration [3]) where we use MDGs to represent sets of abstract states as well as the transition and output relations of sequential <p> For details about MDGs refer to <ref> [3] </ref>. Using abstract sorts, we are able to represent circuits at the RT-level (Register Transfer). We have developed a reachability analysis algorithm (based on a technique called abstract implicit enumeration [3]) where we use MDGs to represent sets of abstract states as well as the transition and output relations of sequential RTL designs. We also have developed applications for hardware verification such as combinational circuits verification, safety property checking and equivalence checking of two state machines.
Reference: [4] <author> Curzon, P.: </author> <title> The Formal Verification of the Fairisle ATM Switching Element; Technical Reports No. 328 & No. </title> <type> 329, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: In Section 6, we explore the different verifications we accomplished using the models. Experimental results are presented in Section 7 and Section 8 finally concludes the paper. 2. Related works There exists in the literature only few work which addressed the formal verification of ATM related circuits. P. Curzon <ref> [4] </ref> formally verified the 4 by 4 fabric of the Fairisle switch using the HOL theorem prover [6]. <p> In these cases, a more detailed da-tapath model was built to pinpoint the source of the error. If the error was not identified in that block, then the more abstract model was used for the remaining verification. The approach of P. Curzon <ref> [4] </ref> provided a successful case study of applying HOL theorem prover to the verification of an ATM switch. However, the use of HOL is interactive and requires lots of expertise to guide the verification process. <p> Similarly to the description ACK DATASWITCH DataOut FrameStart (fs) AckIn [0..3] outputDisable Grant ARBITRATION 4 x 8 4 x 2 DataIn 4 x 8 AckOut [0..3] 4 x 1 TCHES LA TCHES LA TCHES [0..3] [0..3] done by Curzon in HOL <ref> [4] </ref>, we organized the hardware description in several levels of hierarchy, making use of modularity within MDG-HDL that is lacking in Qudos HDL, thus facilitating both the specification and the verification. The Fairisle switch fabric is composed of the acknowledgment, arbitration and dataswitch units (Figure 3). <p> FABRIC DataOut 32 DataIn 32 FABRIC (word-level) (gate-level) Dec. 32 32 Enc. FABRIC DataOut 32 DataIn 32 FABRIC (word-level) (gate-level) ? w w (d)(c) FABRIC DataIn 32 FABRIC (gate-level) (word-level) ? DataOut w w 32 Dec. routing. In contrast to the previous verification of the switch fabric in HOL <ref> [4] </ref>, we perform the verification under the conditions of its operating environment, which is sound and can greatly reduce the cost of verification. We consider the behavior of the fabric in the real Fairisle switch. <p> When the active bit in this routing tag is set, the cell is called active. Otherwise it is inactive (an empty cell). To simplify our presentation, we consider the case for active cells only. In analogy to the specification of P. Curzon <ref> [4] </ref>, we use the time points t s , t a and t e to denote the start of a frame, the start of an active cell and the end of a frame (which is the start of the next frame), respectively. <p> Using these time points, we can state several properties which reflect the behavior of the switch fabric. These properties are indeed inspired by the top-level behavioral specification of the switch fabric as given in <ref> [4] </ref> and the other documentation about the switch element design. <p> We also accomplished the verification of several faulty implementations where the introduced errors were successfully identified. These different achievements illustrate the practicability of such a complete formal verification down to the gate level using tools based on Multiway Decision Graphs. In <ref> [4] </ref> it is reported that the time spent testing would have been in the order of several weeks. However, errors were discovered after the testing process was completed when the first version of the fabric was in use.
Reference: [5] <author> Edgcombe, K.: </author> <title> The Qudos Quick Chip User Guide; Qudos Limited. </title>
Reference-contexts: The switch fabric is built on a 4200 gate equivalent Xilinx programmable gate array. 5. Description of the switch fabric hardware The Fairisle switch fabric was designed using the Qudos HDL <ref> [5] </ref> hardware description language. To formally verify the fabric using MDGs, we translated these descriptions into very similar descriptions using a prolog-style HDLMDG-HDL which is supported by the MDG software package. 5.1.
Reference: [6] <author> Gordon, M.; Melham, T.: </author> <title> Introduction to HOL: A Theorem Proving Environment for Higher Order Logic; Cambridge, </title> <publisher> University Press, </publisher> <year> 1993. </year>
Reference-contexts: Related works There exists in the literature only few work which addressed the formal verification of ATM related circuits. P. Curzon [4] formally verified the 4 by 4 fabric of the Fairisle switch using the HOL theorem prover <ref> [6] </ref>. He verified each of the modules used in the design of the switching element separately by describing the behavioral and structural specifications down to the gate level, and then proving the related correctness theorems in HOL.
Reference: [7] <editor> McMillan, M.: </editor> <publisher> Symbolic Model Checking; Kluwer Academic Publishers, </publisher> <address> Boston, Massachusetts, </address> <year> 1993. </year>
Reference-contexts: Chen et al. at Fujitsu Digital Technology Ltd. [2]. The authors identified a design error in an ATM circuit using the tool SMV (Symbolic Model Verifier) <ref> [7] </ref> by verifying some properties expressed in CTL (Computational Tree Logic) [7]. To avoid the state explosion problem, the authors abstracted the datapath from 8 bits to 1 bit. <p> Chen et al. at Fujitsu Digital Technology Ltd. [2]. The authors identified a design error in an ATM circuit using the tool SMV (Symbolic Model Verifier) <ref> [7] </ref> by verifying some properties expressed in CTL (Computational Tree Logic) [7]. To avoid the state explosion problem, the authors abstracted the datapath from 8 bits to 1 bit. However, since the datapath was only 1 bit in the state model, in certain blocks the property could not be checked because of this reduction.
Reference: [8] <author> Leslie, I.; McAuley, D.: Fairisle: </author> <title> An ATM Network for Local Area; ACM Communication Review, </title> <journal> Vol. </journal> <volume> 19, No. 4, </volume> <month> September </month> <year> 1991, </year> <pages> pp. 237-336. </pages>
Reference-contexts: These decision graphs subsume the class of Bryants Reduced Ordered Binary Decision Diagrams (ROBDD) [1] while accommodating abstract sorts and uninterpreted function symbols. The device we investigated is part of a network which carries real user data: the Fairisle ATM net work <ref> [8] </ref>, designed and in use at the Computer Laboratory of the University of Cambridge. It provides a realistic formal verification case study. The component we consider is the Fairisle 4 by 4 switching fabric.
Reference: [9] <author> Thuau, G.; Berkane B.: </author> <title> A Unified Framework for Describing and Verifying Hardware Synchronous Sequential Systems; Journal of Formal Methods in System Design, </title> <journal> Vol. </journal> <volume> 2, </volume> <year> 1993, </year> <pages> pp 259-276. </pages>
Reference-contexts: Although the (informal) description of the above properties explicitly involves the notion of time, we can verify them using only safety property checking based on a state machine model inspired by <ref> [9] </ref>.
References-found: 9

