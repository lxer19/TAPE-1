URL: http://ai.eecs.umich.edu/people/douglasp/pubs/robojournal.ps
Refering-URL: http://ai.eecs.umich.edu/people/douglasp/pubs/robojournal.html
Root-URL: 
Email: E-mail: dpearson@engin.umich.edu  
Title: A Symbolic Solution to Intelligent Real-Time Control  
Author: Douglas J. Pearson, Scott B. Huffman, Mark B. Willis, John E. Laird, and Randolph M. Jones 
Address: 1101 Beal Ave. Ann Arbor, Michigan 48109-2122  
Affiliation: Artificial Intelligence Laboratory The University of Michigan  
Abstract: Autonomous systems must operate in dynamic, unpredictable environments in real time. The task of flying a plane is an example of an environment in which the agent must respond quickly to unexpected events while pursuing goals at different levels of complexity and granularity. We present a system, Air-Soar, that achieves intelligent control through fully symbolic reasoning in a hierarchy of simultaneously active problem spaces. Achievement goals, changing to a new state, and homeostatic goals, continuously maintaining a constraint, are smoothly integrated within the system. The hierarchical approach and support for multiple, simultaneous goals gives rise to multi-level reactive behavior, in which Air-Soar responds to unexpected events at the same granularity where they are first sensed.
Abstract-found: 1
Intro-found: 1
Reference: [Agre and Chapman, 1987] <author> Phillip E. Agre and David Chapman. Pengi: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 196-201, </pages> <address> Seattle, </address> <year> 1987. </year>
Reference-contexts: One possible approach to this problem is to develop a purely reactive system, which would reason only at this level, mapping perceived inputs directly to motor actions (e.g., Pengi <ref> [Agre and Chapman, 1987] </ref>). Given enough time and the appropriate feedback, such a system could learn a enough such mappings to maintain controlled flight in a large number of situations. <p> As the Figure shows Air-Soar corrects the change in climb-rate directly, without allowing the plane to violate its homeostatic altitude goal. The multi-level nature of reactive control in Air-Soar stands in contrast to single level approaches, such as reactive planning in Pengi <ref> [Agre and Chapman, 1987] </ref>, and reinforcement based approaches (e.g., [Sutton, 1990]). Soar's integrated approach to reactive, hierarchical planning and execution also differs from approaches in which planner and executor are separated into different modules (e.g., [Gat, 1992; Drummond and Bresina, 1990; Cohen et al., 1989]).
Reference: [Brooks, 1986] <author> Rodney A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(1):14-23, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: Air-Soar affords the possibility of dynamically creating different problem space hierarchies in response to the demands of particular tasks. This capability differs from methods that employ a static hierarchy of levels (e.g. <ref> [Brooks, 1986] </ref>). 7 Performance and Evaluation One of Air-Soar's flight plan's involves flying a circular path between two runways (taking about 30 minutes) as shown in Figure 10.
Reference: [Cohen et al., 1989] <author> Paul R. Cohen, Michael L. Greenberg, David M. Hart, and Adele E. Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 34-48, </pages> <year> 1989. </year>
Reference-contexts: Soar's integrated approach to reactive, hierarchical planning and execution also differs from approaches in which planner and executor are separated into different modules (e.g., <ref> [Gat, 1992; Drummond and Bresina, 1990; Cohen et al., 1989] </ref>).
Reference: [Covrigaru and Lindsay, 1991] <author> Arie A. Covrigaru and Robert K. Lindsay. </author> <title> Deterministic autonomous systems. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 110-117, </pages> <year> 1991. </year>
Reference-contexts: Air-Soar meets this requirement by allowing an operator simultaneously to pursue more than one goal within each level of the hierarchy. These goals may be removed and added independently, since they may be achieved at different times. Air-Soar supports two types of goals <ref> [Covrigaru and Lindsay, 1991; Kaelbling, 1986] </ref>: * Achievement Goals where the goal is to achieve a particular state. Examples include achieving a particular altitude, a certain level of pitch etc. * Homeostatic Goals (or "maintenance goals") continuously maintain a constraint.
Reference: [Drummond and Bresina, 1990] <author> M. Drummond and J. Bresina. </author> <title> Anytime synthetic projection: Maximizing the probability of goal satisfaction. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 138-144, </pages> <address> Boston, MA, 1990. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Soar's integrated approach to reactive, hierarchical planning and execution also differs from approaches in which planner and executor are separated into different modules (e.g., <ref> [Gat, 1992; Drummond and Bresina, 1990; Cohen et al., 1989] </ref>).
Reference: [Gat, 1992] <author> Erann Gat. </author> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 809-815, </pages> <address> San Jose, CA, 1992. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Soar's integrated approach to reactive, hierarchical planning and execution also differs from approaches in which planner and executor are separated into different modules (e.g., <ref> [Gat, 1992; Drummond and Bresina, 1990; Cohen et al., 1989] </ref>).
Reference: [Jones et al., 1993] <author> Randy M. Jones, Milind Tambe, John E. Laird, and Paul S. Rosenbloom. </author> <title> Intelligent automated agents for flight training simulators. </title> <booktitle> In Proceedings of the Third Conference on Computer Generated Forces and Behavioral Representation, </booktitle> <pages> pages 33-42, </pages> <address> Orlando, FL, </address> <year> 1993. </year>
Reference-contexts: Second, Air-Soar currently performs a pre-determined flight pattern. We have already integrated Air-Soar with a system that generates tactical flight plans for air combat <ref> [Jones et al., 1993] </ref>, and we intend to build a more general mission planning capability, allowing the system to produce its own flight patterns from high-level specifications.
Reference: [Kaelbling, 1986] <author> Leslie Pack Kaelbling. </author> <title> An architecture for intelligent reactive systems. </title> <editor> In Michael P. Georgeff and Amy L. Lansky, editors, </editor> <booktitle> Reasoning about actions and plans: Proceedings of the 1986 Workshop, </booktitle> <pages> pages 395-410. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference-contexts: Air-Soar meets this requirement by allowing an operator simultaneously to pursue more than one goal within each level of the hierarchy. These goals may be removed and added independently, since they may be achieved at different times. Air-Soar supports two types of goals <ref> [Covrigaru and Lindsay, 1991; Kaelbling, 1986] </ref>: * Achievement Goals where the goal is to achieve a particular state. Examples include achieving a particular altitude, a certain level of pitch etc. * Homeostatic Goals (or "maintenance goals") continuously maintain a constraint.
Reference: [Laird et al., 1987] <author> John E. Laird, Allen Newell, and Paul S. Rosenbloom. </author> <title> Soar: An architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 1-64, </pages> <year> 1987. </year> <note> REFERENCES 18 </note>
Reference-contexts: To fly the plane, our system must perform a range of tasks at different levels of complexity and granularity while responding to unpredictable events in the environment. To provide intelligent control in this domain, we have constructed Air-Soar, built within the general problem solving and learning architecture of Soar <ref> [Laird et al., 1987] </ref>. Air-Soar reasons simultaneously in a hierarchy of problem spaces at different levels of control granularity. At the highest level, it reasons within a world-centered coordinate frame about absolute quantities such as altitude and heading.
Reference: [Mitchell et al., 1986] <author> Tom M. Mitchell, R. M. Keller, and S. T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1, </volume> <year> 1986. </year>
Reference-contexts: For example, the system might learn to pull back on the stick to increase altitude, allowing it to bypass the intermediate levels of reasoning that led to this result. This occurs through Soar's general learning mechanism, chunking (a form of explanation-based learning <ref> [Mitchell et al., 1986; Rosenbloom and Laird, 1986] </ref>). It increases the reaction speed of the system slightly; in essence, over time it selectively compiles portions of Air-Soar's knowledge into a single-level reactive rules.
Reference: [Rosenbloom and Laird, 1986] <author> Paul S. Rosenbloom and John E. Laird. </author> <title> Mapping explanation-based generalization onto Soar. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 561-567, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: For example, the system might learn to pull back on the stick to increase altitude, allowing it to bypass the intermediate levels of reasoning that led to this result. This occurs through Soar's general learning mechanism, chunking (a form of explanation-based learning <ref> [Mitchell et al., 1986; Rosenbloom and Laird, 1986] </ref>). It increases the reaction speed of the system slightly; in essence, over time it selectively compiles portions of Air-Soar's knowledge into a single-level reactive rules.
Reference: [Sutton, 1990] <author> Richard S. Sutton. </author> <title> Integrated architectures for learning, planning and reacting based on approximating dynamic programming. </title> <booktitle> In Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <pages> pages 216-224, </pages> <year> 1990. </year>
Reference-contexts: The multi-level nature of reactive control in Air-Soar stands in contrast to single level approaches, such as reactive planning in Pengi [Agre and Chapman, 1987], and reinforcement based approaches (e.g., <ref> [Sutton, 1990] </ref>). Soar's integrated approach to reactive, hierarchical planning and execution also differs from approaches in which planner and executor are separated into different modules (e.g., [Gat, 1992; Drummond and Bresina, 1990; Cohen et al., 1989]).
References-found: 12

