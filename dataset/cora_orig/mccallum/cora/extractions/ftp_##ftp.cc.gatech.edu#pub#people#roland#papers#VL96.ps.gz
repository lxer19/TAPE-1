URL: ftp://ftp.cc.gatech.edu/pub/people/roland/papers/VL96.ps.gz
Refering-URL: http://www.cs.gatech.edu/people/home/roland/papers/vl96.html
Root-URL: 
Email: roland@cc.gatech.edu  
Title: Composing Complex Behavior from Simple Visual Descriptions  
Author: Roland Hubscher 
Address: Atlanta, GA 30319-0280  
Affiliation: EduTech Institute College of Computing Georgia Institute of Technology  
Abstract: An often-mentioned advantage of rule-based programming languages is that a program can be extended simply by adding a few more rules. In practice however, the rules tend to be dependent on each other and instead of just adding rules, existing rules need to be changed. The unique rules in Cartoonist, a rule-based visual programming environment to build simulations, provides a solution to this problem. Cartoonist's rules can be used in a more modular way supporting an iterative mode of programming. Libraries of visual descriptions can be built and reused to compose complex behavior from these descriptions. This makes exploring the space of possible descriptions of simulations easier, which is valuable for intended educational use of Cartoonist. Another advantage of Cartoonist is that its programs tend to have fewer and simpler rules than programs written for comparable systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Bell and C. Lewis. Chemtrains: </author> <title> A language for creating behaving pictures. </title> <booktitle> In Proc. 1993 IEEE Symposium Visual Languages, </booktitle> <pages> pages 188-195, </pages> <address> Bergen, Nor-way, </address> <year> 1993. </year>
Reference-contexts: A modular approach also supports an iterative programming style, where the student can refine the behavior of the objects by adding more and more rules to the description of the behavior. All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) [9], Science Theater, Agentsheets [8], ChemTrains <ref> [1] </ref>, and BitPict [5] are based on production systems using rewrite rules [3, 6]. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice.
Reference: [2] <author> R. A. Brooks. </author> <title> Intelligence without reason. </title> <type> Technical Report 1293, </type> <institution> Massachusetts Institute of Technology, A.I. Laboratory, </institution> <year> 1991. </year>
Reference-contexts: It votes for the person moving to the right. Instances (b) and (e) are no voters. Finally, instances (c) and (d) vote for four actions each, namely, moving either person in any of the four directions. 4.2 Voting Scheme The voting scheme implements the subsumption-like architecture <ref> [2] </ref> of Cartoonist. In the current state of the simulation, each action of each character gener ates a new state. Voting scheme is the algorithm that chooses one of these states as the next state. The algorithm works the way the following example suggests.
Reference: [3] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming in Expert Systems: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) [9], Science Theater, Agentsheets [8], ChemTrains [1], and BitPict [5] are based on production systems using rewrite rules <ref> [3, 6] </ref>. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice. Rules can interact with each other in subtle ways and adding new rules often requires some existing ones to change in non-trivial ways.
Reference: [4] <author> C. Forgy. </author> <title> Rete: A fast algorithm for many pattern / many object match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: The current prototype is implemented on top of Agentsheets and employs an expensive look-ahead search using a temporally extended Rete network <ref> [4] </ref>. Current research suggest that the look-ahead search can be completely avoided using some more advanced techniques at compile time and by slightly constraining what actions the characters may execute. which are not voters because their last constraint does not match a state in the immediate future.
Reference: [5] <author> G. Furnas. </author> <title> Formal models for imaginal deduction. </title> <booktitle> In Proceedings of the Twelve Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 662-669, </pages> <address> Hillsdale, NJ, July 1990. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) [9], Science Theater, Agentsheets [8], ChemTrains [1], and BitPict <ref> [5] </ref> are based on production systems using rewrite rules [3, 6]. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice.
Reference: [6] <author> F. Hayes-Roth, D. A. Waterman, and D. B. Lenat. </author> <title> Building Expert Systems. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) [9], Science Theater, Agentsheets [8], ChemTrains [1], and BitPict [5] are based on production systems using rewrite rules <ref> [3, 6] </ref>. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice. Rules can interact with each other in subtle ways and adding new rules often requires some existing ones to change in non-trivial ways.
Reference: [7] <author> R. Hubscher. </author> <title> Visual programming with temporal constraints in a subsumption-like architecture. </title> <type> Technical Report CU-CS-778-95, </type> <institution> Department of Computer Science, University of Colorado at Boulder, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Cartoonist, a rule-based visual programming environment to build simulations <ref> [7] </ref>, was designed to be used by students up to the 12th grade to create models and run them as simulations. <p> A set V i of votes is better than another set V j of votes if V i has more voters with higher priority values. The exact definition can be found in <ref> [7] </ref>. The action with the best set of votes will be executed, where the sets of votes for the actions are e: f a, c g n: f a, b g The best set is found assuming the following rules. 1. Voters of equal importance neutralize each other. 2.
Reference: [8] <author> A. Repenning and T. Sumner. Agentsheets: </author> <title> A medium for creating domain-oriented visual languages. </title> <journal> Computer, </journal> <volume> 28 </volume> <pages> 17-25, </pages> <year> 1995. </year>
Reference-contexts: A modular approach also supports an iterative programming style, where the student can refine the behavior of the objects by adding more and more rules to the description of the behavior. All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) [9], Science Theater, Agentsheets <ref> [8] </ref>, ChemTrains [1], and BitPict [5] are based on production systems using rewrite rules [3, 6]. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice.
Reference: [9] <author> D. C. Smith, A. Cypher, and J. Spohrer. KidSim: </author> <title> Programming agents without a programming language. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <year> 1994. </year>
Reference-contexts: A modular approach also supports an iterative programming style, where the student can refine the behavior of the objects by adding more and more rules to the description of the behavior. All the existing rule-based visual programming systems including Cocoa (formerly called KidSim) <ref> [9] </ref>, Science Theater, Agentsheets [8], ChemTrains [1], and BitPict [5] are based on production systems using rewrite rules [3, 6]. Although, it is sometimes claimed that these rule-based systems can be extended by simply adding rules, this does not always work in practice.
References-found: 9

