URL: http://www.eecs.berkeley.edu/~tah/Publications/algorithmic_analysis_of_nonlinear_hybrid_systems.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/algorithmic_analysis_of_nonlinear_hybrid_systems.html
Root-URL: 
Email: tah@eecs.berkeley.edu pho@ichips.intel.com howard@cadence.com  
Title: Algorithmic Analysis of Nonlinear Hybrid Systems  
Author: Thomas A. Henzinger Pei-Hsin Ho Howard Wong-Toi 
Address: Berkeley, CA, USA Hillsboro, OR, USA Berkeley, CA, USA  
Affiliation: Electrical Engineering Computer Sciences Strategic CAD Labs Cadence Berkeley Labs University of California Intel Corporation Cadence Design Systems  
Abstract: Hybrid systems are digital real-time systems that are embedded in analog environments. Model-checking tools are available for the automatic analysis of linear hybrid automata, whose environment variables are subject to piecewise-constant polyhedral differential inclusions. In most embedded systems, however, the environment variables have differential inclusions that vary with the values of the variables, e.g. _x = x. Such inclusions are prohibited in the linear hybrid automaton model. We present two methods for translating nonlinear hybrid systems into linear hybrid automata. Properties of the nonlinear systems can then be inferred from the automatic analysis of the translated linear hybrid automata. The first method, called clock translation, replaces constraints on nonlinear variables by constraints on clock variables. The clock translation is efficient but has limited applicability. The second method, called linear phase-portrait approximation, conservatively overapproximates the phase portrait of a hybrid automaton using piecewise-constant polyhedral differential inclusions. Both methods are sound for safety properties; that is, if we establish a safety property of the translated linear system, we may conclude that the original nonlinear system satisfies the property. When applicable, the clock translation is also complete for safety properties; that is, the original system and the translated system satisfy the same safety properties. The phase-portrait approximation method is not complete for safety properties, but it is asymptotically complete; intuitively, for every safety property, and for every relaxed nonlinear system arbitrarily close to the original, if the relaxed system satisfies the safety property, then there is a linear phase-portrait approximation that also satisfies the property. We illustrate both methods by using HyTech|a symbolic model checker for linear hybrid automata|to automatically check properties of a nonlinear temperature controller and of a predator-prey ecology. fl This research was supported in part by the Office of Naval Research Young Investigator award N00014-95-1-0520, by the National Science Foundation CAREER award CCR-9501708, by the National Science Foundation grant CCR-9504469, by the Air Force Office of Scientific Research contract F49620-93-1-0056, by the Army Research Office MURI grant DAAH-04-96-1-0341, by the Advanced Research Projects Agency grant NAG2-892, and by the Semiconductor Research Corporation contract 95-DC-324.036. y An extended version of this paper appeared in the IEEE Transactions on Automatic Control 43 (special issue on Hybrid Control Systems), 1998, pp. 540-554. Preliminary reports on this work appeared in Thomas A. Henzinger and Pei-Hsin Ho, "Algorithmic analysis of nonlinear hybrid systems," Proceedings of the Seventh International Conference on Computer-aided Verification (CAV), Lecture Notes in Computer Science 939, Springer-Verlag, 1995, pp. 225-238, and in Thomas A. Henzinger and Howard Wong-Toi, "Linear phase-portrait approximations for nonlinear hybrid systems," Hybrid Systems III: Verification and Control, Lecture Notes in Computer Science 1066, Springer-Verlag, 1996, pp. 377-388. 
Abstract-found: 1
Intro-found: 1
Reference: [ACH + 95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T.A. Henzinger, P.-H. Ho, X. Nicollin, A. Oliv-ero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Hybrid systems combine discrete and continuous dynamics. The analysis of hybrid systems, therefore, requires techniques from both computer science and control theory. From computer science, we have the model of hybrid automata, which combines discrete control graphs with continuously evolving variables <ref> [ACH + 95] </ref>. A hybrid automaton exhibits two kinds of state changes: discrete jump transitions occur instantaneously, and continuous flow transitions occur while time elapses. <p> The corresponding unsafe states are specified by the final conditions final (on) = final (off ) = (z = 60 ^ y z=2). Remark. The definition of hybrid automata used here differs from previous definitions in the literature <ref> [ACH + 95, Hen96] </ref>. In a minor change, we add final conditions so that system safety can be conveniently expressed as automaton emptiness.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Corollary 3.5 The nonemptiness problem for rationally solvable hybrid automata is recursively enumerable. Remark. The nonemptiness problem is known to be recursive for certain classes of rationally linear hybrid automata, such as timed automata and initialized rectangular automata <ref> [AD94, HKPV95] </ref>.
Reference: [AHH96] <author> R. Alur, T.A. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: source and target values of the variables are constrained by linear inequalities; for each flow, the possible values of the variables during the flow are constrained by linear inequalities on the variables, and the possible derivatives of the variables during the flow are constrained by linear inequalities on the derivatives <ref> [AHH96] </ref>. It is important to realize that the definition of linearity used here is more restrictive than in systems theory. For instance, linear hybrid automata cannot represent constraints of the form _x = x, which relate the derivative of x with the value of x. <p> Control switches labeled by t are called silent. For convenience, we require that jump (e) = stable (X; _ X) for all silent control switches e. Although not done here, the events can be used to define the parallel composition of hybrid automata <ref> [AHH96] </ref>. Initial conditions A labeling function init that assigns an initial condition to each control mode v 2 V . The initial condition init (v) is a predicate over X [ _ X. The automaton control may start in the control mode v when init (v) holds. <p> the control modes of an automaton to be split in order to meet the conditions for applying the clock translation (see Section 3), and to allow more accurate phase-portrait approximation (see Section 4). 2.5 Linearity The linear hybrid automata form a subclass of hybrid automata that can be analyzed effectively <ref> [AHH96] </ref>. A linear term over a set Y of variables is a linear combination = P k of variables y i 2 Y with real-valued coefficients ff i 2 R. The linear term has rational coefficients if all coefficients ff i are rational. <p> Proof sketch. The proof of the theorem is similar to the proof of the analogous theorem for previous definitions of hybrid automata, where states do not include flow tangents <ref> [AHH96] </ref>. Here we consider only the post operator, and omit many details. It suffices to show that the successor region of a single (rational) state is (rationally) linear. <p> It suffices to show that the successor region of a single (rational) state is (rationally) linear. We compute the successor states via jump transitions and the successor states via flow transitions separately; the former can be computed as in <ref> [AHH96] </ref>, by treating the variables in _ X like those in X . So consider flow transitions with the source state s = (v; a; _ a). <p> So consider flow transitions with the source state s = (v; a; _ a). We assume that the flow condition of v has the form ' ^ _' for convex linear predicates ' over X and _' over _ X; nonconvex flow conditions can be treated as in <ref> [AHH96] </ref>, by splitting into convex parts. We need to compute the possible target points b, and the possible flow tangents _ b for these points, such that s ffi for some ffi 2 R 0 . If ffi = 0, then b = a and _ b = _ a. <p> Remark. The safety of a rationally linear hybrid automaton can be checked, alternatively, by iterating the pre operator, starting from the region Q F of final states. The pre operator is also useful for checking more general classes of properties than safety <ref> [AHH96] </ref>. 3 Clock Translation For certain nonlinear hybrid automata, we can construct timed bisimilar linear hybrid automata, by replacing all nonlinear variables with clocks. For a hybrid automaton A, the variable t is a clock if t is linear and all flow conditions of A imply _ t = 1.
Reference: [Hal93] <author> N. Halbwachs. </author> <title> Delay analysis in synchronous programs. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> CAV 93: Computer-aided Verification, Lecture Notes in Computer Science 697, </booktitle> <pages> pages 333-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 25 </month>
Reference-contexts: Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In <ref> [Hal93, HRP94, HH95c, OSY94, PV95] </ref>, abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems.
Reference: [Hen96] <author> T.A. Henzinger. </author> <title> The theory of hybrid automata. </title> <booktitle> In Proceedings of the 11th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 278-292. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Formally, the hybrid automaton that results from translating the constraints on a nonlinear variable into clock constraints is timed bisimilar to the original automaton, i.e. the translation preserves all properties of interest <ref> [Hen96] </ref>. The method, called clock translation, is detailed in Section 3 and illustrated on a simple temperature controller. The hybrid automaton that results from overapproximating the set of possible flow vectors time simulates the original automaton. <p> The corresponding unsafe states are specified by the final conditions final (on) = final (off ) = (z = 60 ^ y z=2). Remark. The definition of hybrid automata used here differs from previous definitions in the literature <ref> [ACH + 95, Hen96] </ref>. In a minor change, we add final conditions so that system safety can be conveniently expressed as automaton emptiness. <p> The hybrid automaton A is empty if no final state of A is reachable, i.e. Q F " reach (A) = ;. Otherwise A is nonempty. 2.3 Time simulation and timed bisimilarity We define the concepts of time simulation and timed bisimilarity for timed transition systems <ref> [Hen96] </ref>. In the sense of Milner our simulations are weak [Mil89], with silent transitions being invisible. In addition, a flow transition of duration ffi cannot be distinguished from two or more consecutive flow transitions whose durations add up to ffi. <p> Remark. The notions of time simulation and timed bisimilarity are unnecessarily strong conditions for emptiness checking. They are, however, useful for checking also more general classes of properties than safety, precisely because they provide such a tight coupling between systems <ref> [Hen96] </ref>. 2.4 Control-mode splitting We often find it useful to split the control modes of a hybrid automaton in order to obtain simpler or more constrained flow conditions.
Reference: [HH95a] <author> T.A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In [Hal93, HRP94, HH95c, OSY94, PV95], abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems. In <ref> [HH95a, PBV96] </ref>, restricted cases of linear phase-portrait approximations for nonlinear hybrid systems are considered. 2 Hybrid Automata Hybrid automata are a mathematical model for systems with both discrete and continuous components. Informally, a hybrid automaton consists of a finite set X of real-valued variables and a labeled multigraph (V; E). <p> We show that already a restricted form of linear phase-portrait approximations are asymptotically complete, namely, when all automaton constraints are overapproximated using independent, rational lower and upper bounds on the values and derivatives of each variable <ref> [HH95a] </ref>. The predicate ' is rectangular if [[']] has the form Q n i=1 I i , where each I i is a (possibly unbounded) interval over R.
Reference: [HH95b] <author> T.A. Henzinger and P.-H. Ho. HyTech: </author> <title> The Cornell Hybrid Technology Tool. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 265-293. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For instance, linear hybrid automata cannot represent constraints of the form _x = x, which relate the derivative of x with the value of x. Model-checking methods for linear hybrid automata have been implemented in HyTech [HHW95b], and used to verify distributed real-time protocols <ref> [HH95b, HW95, HHW95a] </ref>. This paper extends the model-checking approach to the analysis of nonlinear hybrid systems, by reduction to the linear problem. For automata, the verification problem for safety properties reduces to the emptiness problem, i.e. whether there exists a trajectory from an initial state to a final state.
Reference: [HH95c] <author> T.A. Henzinger and P.-H. Ho. </author> <title> A note on abstract-interpretation strategies for hybrid automata. </title> <editor> In P. Antsaklis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 252-264. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In <ref> [Hal93, HRP94, HH95c, OSY94, PV95] </ref>, abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems.
Reference: [HHW95a] <author> T. A. Henzinger, P.-H. Ho, and H. Wong-Toi. HyTech: </author> <title> the next generation. </title> <booktitle> In Proceedings of the 16th Annual Real-time Systems Symposium, </booktitle> <pages> pages 56-65. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: For instance, linear hybrid automata cannot represent constraints of the form _x = x, which relate the derivative of x with the value of x. Model-checking methods for linear hybrid automata have been implemented in HyTech [HHW95b], and used to verify distributed real-time protocols <ref> [HH95b, HW95, HHW95a] </ref>. This paper extends the model-checking approach to the analysis of nonlinear hybrid systems, by reduction to the linear problem. For automata, the verification problem for safety properties reduces to the emptiness problem, i.e. whether there exists a trajectory from an initial state to a final state.
Reference: [HHW95b] <author> T.A. Henzinger, P.-H. Ho, and H. Wong-Toi. </author> <title> A user guide to HyTech. </title> <editor> In E. Brinksma, W.R. Cleaveland, K.G. Larsen, T. Margaria, and B. Steffen, editors, </editor> <booktitle> TACAS 95: Tools and Algorithms for the Construction and Analysis of Systems, Lecture Notes in Computer Science 1019, </booktitle> <pages> pages 41-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For instance, linear hybrid automata cannot represent constraints of the form _x = x, which relate the derivative of x with the value of x. Model-checking methods for linear hybrid automata have been implemented in HyTech <ref> [HHW95b] </ref>, and used to verify distributed real-time protocols [HH95b, HW95, HHW95a]. This paper extends the model-checking approach to the analysis of nonlinear hybrid systems, by reduction to the linear problem. <p> Corollary 2.4 The nonemptiness problem for rationally linear hybrid automata ("Given a ratio nally linear hybrid automaton A, is A nonempty?") is recursively enumerable. 10 Algorithmic analysis techniques for rationally linear hybrid automata have been implemented in tools such as HyTech <ref> [HHW95b] </ref> and Polka [HRP94]. In particular, when applied to an unsafe system, the emptiness-checking procedures of these tools are guaranteed to detect a violation of the safety property.
Reference: [HKPV95] <author> T.A. Henzinger, P.W. Kopke, A. Puri, and P. Varaiya. </author> <booktitle> What's decidable about hybrid automata? In Proceedings of the 27th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 373-382. </pages> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: Corollary 3.5 The nonemptiness problem for rationally solvable hybrid automata is recursively enumerable. Remark. The nonemptiness problem is known to be recursive for certain classes of rationally linear hybrid automata, such as timed automata and initialized rectangular automata <ref> [AD94, HKPV95] </ref>.
Reference: [HRP94] <author> N. Halbwachs, P. Raymond, and Y.-E. Proy. </author> <title> Verification of linear hybrid systems by means of convex approximation. </title> <editor> In B. LeCharlier, editor, </editor> <booktitle> SAS 94: Static Analysis Symposium, Lecture Notes in Computer Science 864, </booktitle> <pages> pages 223-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In <ref> [Hal93, HRP94, HH95c, OSY94, PV95] </ref>, abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems. <p> Corollary 2.4 The nonemptiness problem for rationally linear hybrid automata ("Given a ratio nally linear hybrid automaton A, is A nonempty?") is recursively enumerable. 10 Algorithmic analysis techniques for rationally linear hybrid automata have been implemented in tools such as HyTech [HHW95b] and Polka <ref> [HRP94] </ref>. In particular, when applied to an unsafe system, the emptiness-checking procedures of these tools are guaranteed to detect a violation of the safety property.
Reference: [HS74] <author> M.W. Hirsch and S. Smale. </author> <title> Differential Equations, Dynamical Systems, and Linear Algebra. </title> <publisher> Academic Press, </publisher> <year> 1974. </year>
Reference-contexts: Related work Phase portraits have been studied extensively in the literature on dynamical systems <ref> [HS74] </ref>. Typically, researchers concentrate on nontrivial properties of continuous dynamics, such as stability and convergence. Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. <p> t (a) using flow split P 1 (b) using flow split P 2 _x 2 [3; 2] _x 2 [3; 2] _x 2 [2; 1:5] 1 3 1.5 x x 3 A predator-prey ecology with limited growth Much of our exposition defining predator-prey systems is derived from Chapter 12 of <ref> [HS74] </ref>. One species is the predator, whose population is modeled by the variable y, and the other its prey, modeled using the variable x.
Reference: [HW95] <author> P.-H. Ho and H. Wong-Toi. </author> <title> Automated analysis of an audio control protocol. </title> <editor> In P. Wolper, editor, </editor> <booktitle> CAV 95: Computer-aided Verification, Lecture Notes in Computer Science 939, </booktitle> <pages> pages 381-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For instance, linear hybrid automata cannot represent constraints of the form _x = x, which relate the derivative of x with the value of x. Model-checking methods for linear hybrid automata have been implemented in HyTech [HHW95b], and used to verify distributed real-time protocols <ref> [HH95b, HW95, HHW95a] </ref>. This paper extends the model-checking approach to the analysis of nonlinear hybrid systems, by reduction to the linear problem. For automata, the verification problem for safety properties reduces to the emptiness problem, i.e. whether there exists a trajectory from an initial state to a final state.
Reference: [HW96a] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Linear phase-portrait approximations for nonlinear hybrid systems. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 377-388. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The approximations may be obtained manually, leveraging techniques from dynamics theory, or in some cases automatically, when lower and upper bounds on derivatives can be obtained from bounds on the values of the variables <ref> [HW96a] </ref>. The approximations can be made arbitrarily accurate by approximating over suitably small regions of the state space.
Reference: [HW96b] <author> T.A. Henzinger and H. Wong-Toi. </author> <title> Using HyTech to synthesize control parameters for a steam boiler. </title> <editor> In J.-R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> Lecture Notes in Computer Science 1165, </booktitle> <pages> pages 265-282. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <month> 26 </month>
Reference-contexts: Linear phase-portrait approximation, however, is applicable to all hybrid systems, supports the successive refinement of approximations, and in many cases can be automated. The combined methodology has been successfully applied to the benchmark industrial steam-boiler specification <ref> [HW96b] </ref>, and to an electronic automotive suspension-control system developed by BMW [SMF97]. Acknowledgement. We thank Peter Kopke for numerous helpful suggestions.
Reference: [Lot20] <author> A.J. Lotka. </author> <title> Analytical note on certain rhythmic relations in organic systems. </title> <booktitle> Proceed--ings of the National Academy of Sciences of the United States of America, </booktitle> <volume> 6 </volume> <pages> 410-415, </pages> <year> 1920. </year>
Reference-contexts: We assume that these negative growth factors are proportional to the species population and its difference from the threshold population. This leads to the Volterra-Lotka predator-prey equations <ref> [Lot20] </ref>: _x = (A By x)x where A, B, C, D, , and are all positive real-valued constants.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Q F " reach (A) = ;. Otherwise A is nonempty. 2.3 Time simulation and timed bisimilarity We define the concepts of time simulation and timed bisimilarity for timed transition systems [Hen96]. In the sense of Milner our simulations are weak <ref> [Mil89] </ref>, with silent transitions being invisible. In addition, a flow transition of duration ffi cannot be distinguished from two or more consecutive flow transitions whose durations add up to ffi.
Reference: [OSY94] <author> A. Olivero, J. Sifakis, and S. Yovine. </author> <title> Using abstractions for the verification of linear hybrid systems. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 81-94. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In <ref> [Hal93, HRP94, HH95c, OSY94, PV95] </ref>, abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems.
Reference: [Par81] <author> D.M.R. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> Proceedings of 5th GI conference, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year> <note> LNCS 104. </note>
Reference-contexts: By induction on the length of trajectories, it is easy to check that if A time simulates B, then for every trajectory of B there exists a trajectory of A that follows the same sequence of non-silent events. Therefore, if A is empty, then so is B. Proposition 2.1 <ref> [Par81] </ref> Let A and B be hybrid automata. * If A time simulates B and A is empty, then B is empty. * If A and B are timed bisimilar, then A is empty iff B is empty. Remark.
Reference: [PBV96] <author> A. Puri, V. Borkar, and P. Varaiya. </author> <title> "-approximation of differential inclusions. </title> <editor> In R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <booktitle> Hybrid Systems III, Lecture Notes in Computer Science 1066, </booktitle> <pages> pages 362-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In [Hal93, HRP94, HH95c, OSY94, PV95], abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems. In <ref> [HH95a, PBV96] </ref>, restricted cases of linear phase-portrait approximations for nonlinear hybrid systems are considered. 2 Hybrid Automata Hybrid automata are a mathematical model for systems with both discrete and continuous components. Informally, a hybrid automaton consists of a finite set X of real-valued variables and a labeled multigraph (V; E).
Reference: [PV95] <author> A. Puri and P. Varaiya. </author> <title> Verification of hybrid systems using abstractions. </title> <editor> In P. Antsak-lis, A. Nerode, W. Kohn, and S. Sastry, editors, </editor> <booktitle> Hybrid Systems II, Lecture Notes in Computer Science 999, </booktitle> <pages> pages 259-369. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Our work differs in two respects. First, we consider products of nondeterministic dynamical systems with discrete control graphs. Second, our goal is to analyze and derive simple properties of such systems automatically. In computer science, the technique of deriving system properties using conservative approximations is called abstract interpretation. In <ref> [Hal93, HRP94, HH95c, OSY94, PV95] </ref>, abstract interpretation techniques are used for improving the efficiency of analyzing linear hybrid systems, whereas here we approximate nonlinear hybrid systems.
Reference: [SMF97] <author> T. Stauner, O. Muller, and M. Fuchs. </author> <title> Using HyTech to verify an automotive control system. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-Time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 139-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <month> 27 </month>
Reference-contexts: Linear phase-portrait approximation, however, is applicable to all hybrid systems, supports the successive refinement of approximations, and in many cases can be automated. The combined methodology has been successfully applied to the benchmark industrial steam-boiler specification [HW96b], and to an electronic automotive suspension-control system developed by BMW <ref> [SMF97] </ref>. Acknowledgement. We thank Peter Kopke for numerous helpful suggestions.
References-found: 23

