URL: http://www.cs.bu.edu/techreports/96-022-f+eta-typability-undecidable.ps.gz
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: jbw@cs.bu.edu  
Title: Typability is Undecidable for F+Eta  
Author: J. B. Wells 
Date: March 9, 1996  
Address: Boston, MA 02215, U.S.A.  
Affiliation: Boston Univ. Dept. of Computer Science  
Abstract: System F is the well-known polymorphically-typed -calculus with universal quantifiers ("8"). F+ is System F extended with the eta rule, which says that if term M can be given type t and M -reduces to N , then N can also be given the type t . Adding the eta rule to System F is equivalent to adding the subsumption rule using the subtyping ("containment") relation that Mitchell defined and axiomatized [Mit88]. The subsumption rule says that if M can be given type t and t is a subtype of type , then M can be given type . Mitchell's subtyping relation involves no extensions to the syntax of types, i.e., no bounded polymorphism and no supertype of all types, and is thus unrelated to the system F ("F-sub"). Typability for F+ is the problem of determining for any term M whether there is any type t that can be given to it using the type inference rules of F+. Typability has been proven undecidable for System F [Wel94] (without the eta rule), but the decidability of typability has been an open problem for F+. Mitchell's subtyping relation has recently been proven undecidable [TU95, Wel95b], implying the undecidability of "type checking" for F+. This paper reduces the problem of subtyping to the problem of typability for F+, thus proving the undecidability of typability. The proof methods are similar in outline to those used to prove the undecidability of typability for System F, but the fine details differ greatly.
Abstract-found: 1
Intro-found: 1
Reference: [Bar84] <author> H. P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North-Holland, </publisher> <address> revised edition, </address> <year> 1984. </year>
Reference-contexts: If R is denoted by a directional symbol (such as "&lt;"), the reversed symbol (such as "&gt;") denotes R 1 . 2.2 Terms Our notation for the -calculus generally follows Barendregt's <ref> [Bar84] </ref>.
Reference: [Gir72] <institution> J.-Y. Girard. Interpretation Fonctionnelle et Elimination des Coupures de l'Arithmetique d'Ordre Superieur. These d'Etat, Universite Paris 7, </institution> <year> 1972. </year>
Reference-contexts: 1 Introduction 1.1 Background and Motivation Girard <ref> [Gir72] </ref> and Reynolds [Rey74] independently formulated the type system of the second-order, parametrically-polymorphic -calculus about twenty years ago.
Reference: [Jim95] <author> T. Jim. </author> <title> Type inference in system F plus subtyping. </title> <type> Manuscript., </type> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: We conjecture that the full problem of type checking can be reduced to typability in F+. T. Jim has recently reduced typability in F+ to subtyping using principal typings of terms in distinct operator form <ref> [Jim95] </ref>. Since typability is reducible to subtyping, and since subtyping is reducible to type checking, our conjecture would imply that all three problems are equivalent. There are other systems related to System F and F+ for which the decidability of typability is unknown.
Reference: [Lei83] <author> D. Leivant. </author> <title> Polymorphic type inference. </title> <booktitle> In Conf. Rec. 10th Ann. ACM Symp. Princ. Program. Lang., </booktitle> <pages> pp. 88-98, </pages> <address> Austin, TX, U.S.A., </address> <month> Jan. </month> <pages> 24-26, </pages> <year> 1983. </year>
Reference-contexts: Both Girard and Reynolds formulated F in the "Church style", but we deal with the "Curry style" formulation first given by Leivant <ref> [Lei83] </ref>. In the Church style, types are embedded in terms and the term-formation rules are also the typing rules, while in the Curry style, types are given to pure terms of the -calculus.
Reference: [LMS95] <author> G. Longo, K. Milsted, and S. Soloviev. </author> <title> A logic of subtyping. </title> <booktitle> In Proc. 10th Ann. IEEE Symp. Logic Comput. Sci., </booktitle> <pages> pp. 292-299, </pages> <month> June 26-29, </month> <year> 1995. </year>
Reference-contexts: Longo, Milsted, and Soloviev recently devised a new axiomatization of the subtyping relation which avoids having an explicit rule for transitivity <ref> [LMS95] </ref>. Using this new axiomatization, Tiuryn and Urzyczyn recently proved the undecidability of the subtyping relation by a reduction from the halting problem for 2-counter automata [TU95]. Also using this new axiomatization, I devised a syntax-directed rule system for subtyping and proven its correctness. <p> Longo, Milsted, and Soloviev give another axiomatization of the subtyping relation called System F ` 4 , which is presented in Figure 3 <ref> [LMS95] </ref>. This rule system may be used interchangeably with Mitchell's. 4 This name is used because when the inference rules of the system are labelled with proof terms, it becomes a fragment of System F. <p> The co subscript stands for coercion. 9 Theorem 2.1 For all types and t , it holds that t if and only if ` co t . Proof: This is Theorem 11 in <ref> [LMS95] </ref>. ffi (var) ff ~ ff (f!) 8~ff:( L ! R ) ~ 8~fl:(t L ! t R ) where ~ fi =2 FTV ( L ! R ) and ~fl =2 FTV (8~ff:( L ! R )) Consider the rule system in Figure 4, which we call the syntax-directed subtyping
Reference: [Mit88] <author> J. C. Mitchell. </author> <title> Polymorphic type inference and containment. </title> <journal> Inf. Comput., </journal> 76(2/3):211-249, Feb./Mar. 1988. 
Reference-contexts: Proof: By Theorems 4 and 5 in [Mit90] (Theorems 13 and 18 in <ref> [Mit88] </ref>). ffi When working with F+, it is convenient to remove the INST rule from the system and to require that the GEN rule be used only immediately after the ABS rule. <p> Theorem 2.14 The sequent A ` M : t is derivable in System F extended with the (subsum) rule if and only if it is derivable using the rules of Figure 8. Proof: Also by Theorems 4 and 5 in [Mit90] (Theorems 13 and 18 in <ref> [Mit88] </ref>).
Reference: [Mit90] <author> J. C. Mitchell. </author> <title> Polymorphic type inference and containment. </title> <editor> In G. Huet, ed., </editor> <booktitle> Logical Foundations of Functional Programming, chapter 8, </booktitle> <pages> pp. 153-193. </pages> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> An earlier, but nearly identical version is [Mit88]. </note>
Reference-contexts: System F does not already have the subject -reduction property, so an additional type inference rule is necessary. The rule (! ) defined according to the pattern for (R) above is actually more general than necessary <ref> [Mit90] </ref>; the following more restricted rule is sufficient: A ` x:M x : ! t x 62 FV (M ) () F+ is then defined to be System F extended by rule (). It will be described below how this extension is equivalent to adding a particular subtyping relation. <p> Adding the () rule to System F turns out to have a model-theoretic justification. First, we will present the background and then we will explain the connection. Mitchell devised a notion of a type inference model for System F to explain the assignment of types to terms <ref> [Mit90] </ref>. <p> Thus, F+ satisfies the stronger requirement in equation (3). Mitchell showed that F+ is also complete with respect to (3) because it derives the additional typings that are implied by (3) <ref> [Mit90] </ref>. 2 Mitchell proved that adding the () rule to System F is equivalent to adding the subsumption rule with a particular subtyping relation. <p> A ` M : t (subsum) Theorem 2.13 The sequent A ` M : t is derivable in System F extended with the () rule if and only if it is derivable in System F extended with the (subsum) rule. Proof: By Theorems 4 and 5 in <ref> [Mit90] </ref> (Theorems 13 and 18 in [Mit88]). ffi When working with F+, it is convenient to remove the INST rule from the system and to require that the GEN rule be used only immediately after the ABS rule. <p> Theorem 2.14 The sequent A ` M : t is derivable in System F extended with the (subsum) rule if and only if it is derivable using the rules of Figure 8. Proof: Also by Theorems 4 and 5 in <ref> [Mit90] </ref> (Theorems 13 and 18 in [Mit88]).
Reference: [Pie92] <author> B. Pierce. </author> <title> Bounded quantification is undecidable. </title> <booktitle> In Conf. Rec. 19th Ann. ACM Symp. Princ. Program. Lang., </booktitle> <pages> pp. 305-315. </pages> <note> ACM, 1992. Superseded by [Pie94]. </note>
Reference-contexts: Adding Mitchell's subtyping relation involves no extensions to the syntax of types, i.e., no bounded polymorphism and no supertype of all types. It has little in common with the subtyping relation of the system F , which was proven undecidable by Pierce <ref> [Pie92] </ref>. In F , quantifiers have bounds, e.g., 8ff:t , and the subtyping relation is not closed under a rule for quantifier instantiation. It is unknown if there is any relation between the decidability of the two kinds of subtyping.
Reference: [Pie94] <author> B. Pierce. </author> <title> Bounded quantification is undecidable. </title> <journal> Inf. Comput., </journal> <volume> 112 </volume> <pages> 131-165, </pages> <year> 1994. </year>
Reference: [Rey74] <author> J. C. Reynolds. </author> <title> Towards a theory of type structure. </title> <booktitle> In Symposium on Programming, vol. 19 of LNCS, </booktitle> <pages> pp. 408-425, </pages> <address> Paris, France, 1974. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction 1.1 Background and Motivation Girard [Gir72] and Reynolds <ref> [Rey74] </ref> independently formulated the type system of the second-order, parametrically-polymorphic -calculus about twenty years ago. Girard developed his system (named by chance "System F") to prove properties of second-order propositional logic (hence F's other name, "the second-order -calculus") while Reynolds wanted to express polymorphic typing in programming explicitly.
Reference: [Tiu95] <author> J. Tiuryn. </author> <title> Equational axiomatization of bicoercibility for polymorphic types. </title> <type> Technical Report 95-004, </type> <institution> Comp. Sci. Dept., Boston Univ., </institution> <month> Feb. </month> <year> 1995. </year> <note> URL: ftp://cs-ftp.bu.edu/ techreports/95-004-coercibility.ps.Z. </note>
Reference-contexts: If a term like our term J can be constructed for a type system, then the overall outline of our methods can probably be applied, but the details will likely differ. 1.3 Acknowledgements Trevor Jim made me aware of Tiuryn's paper on bicoercibility <ref> [Tiu95] </ref>, which was essential for my understanding of the subtyping relation. <p> Otherwise, leafvar gives the name of the free variable at the leaf. quant (; ) = ( undefined otherwise. leafvar (; ) = ( undefined otherwise. The function quantsign is directly inspired by Tiuryn's notion of positive and negative marking of leaves in types <ref> [Tiu95] </ref>: quantsign (; ) = 8 &gt; : sign (quant (; )) if quant (; ) defined, 0 if quant (; ) not defined but leaf (; ) is, undefined otherwise. <p> Theorem 2.3 For all types and t , it holds that t if and only if ~ t . Proof: See [Wel95b]. ffi Tiuryn has devised a set of rewriting-style rules for the subtyping relation <ref> [Tiu95] </ref>. We use a modified version of these rules shown in Figure 5. Although the presentation here is not identical to that in [Tiu95], they are equivalent. <p> Proof: See [Wel95b]. ffi Tiuryn has devised a set of rewriting-style rules for the subtyping relation <ref> [Tiu95] </ref>. We use a modified version of these rules shown in Figure 5. Although the presentation here is not identical to that in [Tiu95], they are equivalent. Tiuryn's system has rules for introducing and removing redundant quantifiers, which we omit because this need is handled by our definition of type contexts. Recall that the notation "@ fl " denotes the transitive, reflexive closure of "@". <p> Then (h-shift' s) proves that t [8ff:((8ff:) ! )] @ s t [(8ff:) ! (8ff:)], which is the desired result. ffi Unfortunately, Tiuryn does not provide a proof of the correctness of his rules in <ref> [Tiu95] </ref>, so we supply the following lemmas and theorem to handle this need. Lemma 2.5 If , then t [] s t [] where s = holesign (t [ ]). 11 Proof: Let = hole (t [ ]). <p> Tiuryn devised the axiomatization in Figure 6 and proved that it captures precisely the notion of bicoercibility <ref> [Tiu95] </ref>. Tiuryn used this rule system to prove the decidability of bicoercibility. The following lemma is an immediate consequence of Tiuryn's rule system. <p> Lemma 2.10 If ( L ! R ) 7 (t L ! t R ) then L 7 t L and R 7 t R . Proof: This is Lemma 6 in <ref> [Tiu95] </ref>. ffi 2.5 Type Inference A pair x: where x 2 V and 2 T is called a type assumption. 5 A finite set of type assumptions A = fx 1 : 1 ; : : : ; x n : n g which associates at most one type with any <p> The most important lemma is based on the quantsign function. The main message of the lemma is that as subtyping proceeds, the quantsign value for any infinite path can only get smaller. This was first demonstrated by Tiuryn <ref> [Tiu95] </ref>. The lemma also states useful properties of path lengths in types and how subtyping affects them. Lemma 3.1 If t then for all 2 P ! the following properties hold: 1.
Reference: [TU95] <author> J. Tiuryn and P. Urzyczyn. </author> <title> The subtyping problem for second-order types is undecidable. </title> <type> Technical report, </type> <institution> Inst. of Informatics, Univ. of Warsaw, </institution> <month> Nov. </month> <year> 1995. </year> <note> URL: ftp://ftp.mimuw.edu.pl/pub/users/urzy/sub-undec.ps.Z. </note>
Reference-contexts: Longo, Milsted, and Soloviev recently devised a new axiomatization of the subtyping relation which avoids having an explicit rule for transitivity [LMS95]. Using this new axiomatization, Tiuryn and Urzyczyn recently proved the undecidability of the subtyping relation by a reduction from the halting problem for 2-counter automata <ref> [TU95] </ref>. Also using this new axiomatization, I devised a syntax-directed rule system for subtyping and proven its correctness.
Reference: [Wel94] <author> J. B. Wells. </author> <title> Typability and type checking in the second-order -calculus are equivalent and undecidable. </title> <booktitle> In Proc. 9th Ann. IEEE Symp. </booktitle> <institution> Logic Comput. Sci., </institution> <month> July 4-6, </month> <year> 1994. </year>
Reference-contexts: Since typability and type checking for System F are both undecidable <ref> [Wel94] </ref>, it is natural to examine extensions and restrictions of F in the hope of finding a type system for which typability or type checking is decidable. One way of extending a type system is to require typings to be closed under some relation on untyped -terms. <p> The main contribution of this paper is the first proof that typability is undecidable for F+. The methods used in <ref> [Wel94] </ref> to reduce the problem of type checking to typability for System F are adapted to work for F+. The top-level outline is very similar, but the fine details differ greatly.
Reference: [Wel95a] <author> J. B. Wells. </author> <title> Typability is undecidable for F+eta. </title> <type> Technical report, </type> <institution> Comp. Sci. Dept., Boston Univ., </institution> <month> Dec. </month> <year> 1995. </year>
Reference: [Wel95b] <author> J. B. Wells. </author> <title> The undecidability of Mitchell's subtyping relation. </title> <type> Technical report, </type> <institution> Comp. Sci. Dept., Boston Univ., </institution> <month> December </month> <year> 1995. </year> <note> URL: ftp://cs-ftp.bu.edu/pub/jbw/subtyping-undecidable.ps.gz. 47 </note>
Reference-contexts: Also using this new axiomatization, I devised a syntax-directed rule system for subtyping and proven its correctness. Then using the syntax-directed rules, I proved the subtyping relation to be undecidable by technique totally different from Tiuryn and Urzyczyn's and significantly simpler, namely a reduction from the problem of semi-unification <ref> [Wel95b] </ref>. <p> and some type variables ~fl =2 FTV () and there exist some types ~ and some type variables ~ fi =2 FTV ( L ! R ) such that: t L ~ 8 ~ fi:( L [~ff:=~ ]) and 8 ~ fi:( R [~ff:=~ ]) ~ t R Proof: See <ref> [Wel95b] </ref>. ffi This rule system is yet another axiomatization of the subtyping relation. Theorem 2.3 For all types and t , it holds that t if and only if ~ t . Proof: See [Wel95b]. ffi Tiuryn has devised a set of rewriting-style rules for the subtyping relation [Tiu95]. <p> fi:( L [~ff:=~ ]) and 8 ~ fi:( R [~ff:=~ ]) ~ t R Proof: See <ref> [Wel95b] </ref>. ffi This rule system is yet another axiomatization of the subtyping relation. Theorem 2.3 For all types and t , it holds that t if and only if ~ t . Proof: See [Wel95b]. ffi Tiuryn has devised a set of rewriting-style rules for the subtyping relation [Tiu95]. We use a modified version of these rules shown in Figure 5. Although the presentation here is not identical to that in [Tiu95], they are equivalent.
References-found: 15

