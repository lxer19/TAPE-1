URL: http://www.cs.toronto.edu/~avigal/cas.ps
Refering-URL: http://www.cs.toronto.edu/~avigal/publications.html
Root-URL: http://www.cs.toronto.edu
Phone: 2  
Title: TALE A Temporal Active Language and Execution Model  
Author: Avigdor Gal Opher Etzion ?? and Arie Segev ??? 
Note: The work was conducted while the author was in the Technion. He is currently at  The work of this author was supported by the fund for the promotion of research at the Technion. The work of this author was supported by the Applied Mathematical Sciences Research Program of the Office of Energy Research, U.S. Department of Energy under Contract DE-AC03-76SF00098.  
Address: Haifa, 32000, Israel  CA 94720, USA  Toronto, Toronto, Ontario, M5S 3H5 CANADA.  
Affiliation: 1 Department of Information Systems Engineering, Faculty of Industrial Engineering and Management, Technion-Israel Institute of Technology,  Haas School of Business, University of California and Information Computing Sciences Division, Lawrence Berkeley Laboratory Berkeley,  the Department of Computer Science, University of  
Abstract: Complex applications in domains such as decision support systems and real time systems require a functionality that is achieved by combining the active and temporal database technologies. In this paper we present TALE, a Temporal Active Language and Execution model. TALE is a temporal active database programming language, combined with an execution model that enables a correct and efficient processing of operations. As such, TALE is a step in accommodating software engineering challenges in modern information systems. TALE primitives are presented using examples and an EBNF. The run-time control mechanism of the model is introduced and TALE properties, namely active and temporal capabilities, and reflective programming capabilities are discussed. Keywords: Active databases, Temporal databases, Information model ing, Database programming languages 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence and observable determinism. </title> <booktitle> In Proceedings of ACM SIG-MOD, </booktitle> <pages> pages 59-68, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: However, none of the existing temporal query languages offers the wide range of possible inter-relationships between a valid time of a deriving value and a valid time of a derived value that is supported in TALE. Dependency graphs are used in several active data models (e.g. <ref> [1] </ref> and [7]). In [1], the dependency graph is generated for analysis purposes only, using a given set of ECA rules. TALE and PARDES [7] use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. <p> Dependency graphs are used in several active data models (e.g. <ref> [1] </ref> and [7]). In [1], the dependency graph is generated for analysis purposes only, using a given set of ECA rules. TALE and PARDES [7] use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. Both [1] and [7] lack <p> In <ref> [1] </ref>, the dependency graph is generated for analysis purposes only, using a given set of ECA rules. TALE and PARDES [7] use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. Both [1] and [7] lack the capability of handling temporal conditions and temporal actions. <p> The temporal dependency graph extends previous works in active databases [15], [7], <ref> [1] </ref> to include the temporal functionality. It consists of all the relationships among properties, events and operations in a database. The temporal dependency graph is generated from a given database structure, a given set of operation clauses, and a given set of events.
Reference: 2. <author> S. Chakravarthy and D. Mishra. </author> <title> An expressive event specification language for active databases. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 13(3), </volume> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: A thorough discussion of events' classification and detection techniques can be found in <ref> [2] </ref> and [5]. A user update operation in a temporal active database updates a single object in a given temporal element. For example, an object can be inserted to the database or deleted from it.
Reference: 3. <author> U.S. Chakravarthy. </author> <title> Rule management and evaluation: An active DBMS perspective. </title> <journal> ACM SIGMOD Record, </journal> <volume> 18(3) </volume> <pages> 20-28, </pages> <month> Sep </month> <year> 1989. </year>
Reference-contexts: Consequently, these decisions should be re-evaluated whenever there are retroactive changes of data. A temporal active database [9] provides the required support for those applications by combining the functionality of both temporal databases [16] and active databases <ref> [3] </ref>. A temporal active database supports time stamped data, and contains a mechanism to activate operations in response to detected events. This combination of the temporal and the active capabilities enables the execution of direct updates, derived updates and retrieval operations that refer to past, present and future time points. <p> The need for such a model was recognized during the 1993 ARPA/NSF Workshop on an infrastructure for temporal databases. However, only limited discussions of the temporal and active inter-relationships exist in both research areas. Several works (e.g. <ref> [3] </ref> and [14]) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. <p> Some other issues that are not discussed in this paper relate to composite events and coupling modes. The issue of composite events is an issue orthogonal to the temporal capabilities as discussed in this paper. Therefore, any model of composite events definition and manipulation (e.g. <ref> [3] </ref>) can be adopted by TALE. The default coupling mode used in TALE falls into the deferred category. An extension to support other coupling modes is not discussed in this paper. <p> An extension to support other coupling modes is not discussed in this paper. Conflict resolution among different operations are resolved by syntactic restriction as well as by imposing a totally ordered priority. 5 The term ECA statement refers to a simple ECA rule <ref> [3] </ref>. 5.2 Temporal capabilities of TALE TALE enables three temporal effect types on operations. Derived valid-time temporal projection: An activation of an operation results in the generation of values with bounded temporal validity.
Reference: 4. <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transaction model for long-running activities. </title> <booktitle> In Proceedings of the 17th VLDB, </booktitle> <pages> pages 113-122, </pages> <month> Sep </month> <year> 1991. </year>
Reference-contexts: The execution process preserves the database consistency [10]. Therefore, applying a transaction on a database that all of its operation clauses are satisfied, results in a database 0 in which all operation clauses are satisfied as well. In addition, to handle the problem of long transactions <ref> [4] </ref>, the update process minimizes the time required for processing a transaction, due to the use of a temporal dependency graph [10]. 5 The properties of TALE This section discusses three of TALE properties, namely active properties (Section 5.1), temporal properties (Section 5.2) and linguistic properties (Section 5.3). 5.1 Active capabilities
Reference: 5. <author> K.R. Dittrich and S. Gatziu. </author> <title> Time issues in active database systems. In R.T. </title> <editor> Snodgrass, editor, </editor> <booktitle> Proceedings of the International Workshop on Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: A thorough discussion of events' classification and detection techniques can be found in [2] and <ref> [5] </ref>. A user update operation in a temporal active database updates a single object in a given temporal element. For example, an object can be inserted to the database or deleted from it.
Reference: 6. <author> O. Etzion. </author> <title> Active interdatabase dependencies. </title> <journal> Information Sciences, </journal> <volume> 75 </volume> <pages> 133-163, </pages> <year> 1993. </year>
Reference-contexts: When the participants of an operation clause are not of the same class, a matching process, similar to a join operator in relational algebra, is used to identify the objects that are involved in the operation. In this paper we use an implicit matching, based on <ref> [6] </ref>. 3.2 Derive A derive operation preserves a data dependency by deriving the values of variables. For example, Fine-Due := 15 * (Violating-Speed Speed-Limit) defines an operation that derives the fine that is due for a given violation.
Reference: 7. <author> O. Etzion. </author> <title> The reflective approach for data-driven rules. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 2(4) </volume> <pages> 399-424, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. Temporal models (e.g. [17], [22], [23] and [20]) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming <ref> [7] </ref> as well. Temporal query languages (e.g. [21]) enable the manipulation of time attributes as part of the language, and the use of defaults in defining time bounded values. <p> However, none of the existing temporal query languages offers the wide range of possible inter-relationships between a valid time of a deriving value and a valid time of a derived value that is supported in TALE. Dependency graphs are used in several active data models (e.g. [1] and <ref> [7] </ref>). In [1], the dependency graph is generated for analysis purposes only, using a given set of ECA rules. TALE and PARDES [7] use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. <p> Dependency graphs are used in several active data models (e.g. [1] and <ref> [7] </ref>). In [1], the dependency graph is generated for analysis purposes only, using a given set of ECA rules. TALE and PARDES [7] use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. Both [1] and [7] lack the capability of handling temporal conditions and temporal actions. <p> TALE and PARDES <ref> [7] </ref> use the dependency graph as an executable data structure, with a well defined translation mechanism from the user definition of operation clauses to the graph. Both [1] and [7] lack the capability of handling temporal conditions and temporal actions. As a concrete motivating case study, we present a simple example of a traffic law enforcement system, that imposes a fine as a penalty for speeding offenses. 3 The support of the language for constraints was discussed in [13]. <p> The temporal dependency graph extends previous works in active databases [15], <ref> [7] </ref>, [1] to include the temporal functionality. It consists of all the relationships among properties, events and operations in a database. The temporal dependency graph is generated from a given database structure, a given set of operation clauses, and a given set of events.
Reference: 8. <author> O. Etzion and B. Dahav. </author> <title> Self-stabilization in databse consistency maintenance. </title> <type> Technical Report ISE-TR-95-1, </type> <institution> Technion-Israel Institute of Technology, </institution> <month> Feb </month> <year> 1995. </year>
Reference-contexts: Although it is equivalent to the first order logic formula 8x 2 Traffic-Citation : Fine-Due (x) 500, the former representation is much easier to write and comprehend [11]. A constraint violation results in invoking a stabilizer <ref> [8] </ref>, an alternative operation activated in the wake of a constraint violation to restore the database's consistency. The trivial, and most conservative stabilizer is abort, according to which a transaction that violates the constraint fails.
Reference: 9. <author> O. Etzion, A. Gal, and A. Segev. </author> <title> Temporal active databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Database, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: For example, in decision support applications the validity of current decisions may be dependent upon data that was valid in the past. Consequently, these decisions should be re-evaluated whenever there are retroactive changes of data. A temporal active database <ref> [9] </ref> provides the required support for those applications by combining the functionality of both temporal databases [16] and active databases [3]. A temporal active database supports time stamped data, and contains a mechanism to activate operations in response to detected events. <p> In this paper we introduce TALE, a Temporal Active Language and Execution model. TALE is an extension of the model presented in <ref> [9] </ref>, [19], in which rules that affect past or future valid times were briefly discussed. The model consists of a high level language 3 that enable the use of events, conditions and actions relating to past, present and future time points.
Reference: 10. <author> A. Gal. </author> <title> TALE | A Temporal Active Language and Execution Model. </title> <type> PhD thesis, </type> <institution> Technion|Israel Institute of Technology, Technion City, Haifa, Israel, </institution> <month> May </month> <year> 1995. </year> <note> Available through the author's WWW home page, http://www.cs.toronto.edu/avigal. </note>
Reference-contexts: There are two types of operations that can retrieve and update the database, namely the enforce operation and the derive operation. In this section we present the language primitives of TALE 4 In the temporal model as presented in <ref> [10] </ref>, the t x is replaced with a decision time, a time type that captures the time of the real-world event (s) that lead to the trans actions that affect the temporal database. using examples. The EBNF definition of the language's grammar is given in Appendix A. <p> stabilizer is (conditionally) activated by the operation. 4.2 The temporal dependency graph The control of a transaction at runtime is based on a temporal dependency graph, an executable data structure that monitors the activation of operations to achieve consistency in a minimal number of update operations and using maximal parallelism <ref> [10] </ref>. The temporal dependency graph extends previous works in active databases [15], [7], [1] to include the temporal functionality. It consists of all the relationships among properties, events and operations in a database. <p> Operations o 01 -o 07 are user update operations, designating the update of a single variable. For example, o 03 updates the Road-Points variable. The time complexity of generating the temporal dependency graph is computed in <ref> [10] </ref>. Its worse case is bounded by O (jVj 3 ), the time complexity of generating the trigger and request edges that are not explicitly given by the relationships sets. <p> At this point, there are no outgoing edges to trigger, and the transaction is terminated. The execution process preserves the database consistency <ref> [10] </ref>. Therefore, applying a transaction on a database that all of its operation clauses are satisfied, results in a database 0 in which all operation clauses are satisfied as well. <p> In addition, to handle the problem of long transactions [4], the update process minimizes the time required for processing a transaction, due to the use of a temporal dependency graph <ref> [10] </ref>. 5 The properties of TALE This section discusses three of TALE properties, namely active properties (Section 5.1), temporal properties (Section 5.2) and linguistic properties (Section 5.3). 5.1 Active capabilities of TALE TALE is aimed at defining operations that contain valid times.
Reference: 11. <author> A. Gal and O. Etzion. </author> <title> Maintaining data driven rules in databases. </title> <journal> IEEE Computer, </journal> <volume> 28(1) </volume> <pages> 28-38, </pages> <month> Jan </month> <year> 1995. </year>
Reference-contexts: For example, the operation clause Fine-Due 500 limits a fine to be less than $500. Although it is equivalent to the first order logic formula 8x 2 Traffic-Citation : Fine-Due (x) 500, the former representation is much easier to write and comprehend <ref> [11] </ref>. A constraint violation results in invoking a stabilizer [8], an alternative operation activated in the wake of a constraint violation to restore the database's consistency. The trivial, and most conservative stabilizer is abort, according to which a transaction that violates the constraint fails.
Reference: 12. <author> A. Gal and O. Etzion. </author> <title> A parallel execution model for updating temporal databases. </title> <note> to appear in the International Journal of Computer Systems Science and Engineering, </note> <year> 1995. </year>
Reference-contexts: An ongoing work focuses on the parallel execution model of the update process of a temporal active database, and the use of parallel execution to support schema versioning <ref> [12] </ref>. An additional work focuses on an extensive temporal support in the TALE framework.
Reference: 13. <author> A. Gal, O. Etzion, and A. Segev. </author> <title> A language for the support of constraints in temporal active databases. </title> <booktitle> In Proc. Workshop on Constraints, Databases and Logic Programming, </booktitle> <pages> pages 42-58, </pages> <address> Portland, Oregon, </address> <month> Dec </month> <year> 1995. </year>
Reference-contexts: As a concrete motivating case study, we present a simple example of a traffic law enforcement system, that imposes a fine as a penalty for speeding offenses. 3 The support of the language for constraints was discussed in <ref> [13] </ref>. If a fine is not paid within 30 days of the traffic violation, the fine is doubled. If a fine is not paid within 60 days of the traffic violation, a court order to summon the driver is requested.
Reference: 14. <author> N. Gehani, H.V. Jagadish, and O. Shmueli. </author> <title> Composite event specification in active databases. </title> <booktitle> In International Conference on Very Large Databases, </booktitle> <address> Vancouver, Canada, </address> <month> Aug </month> <year> 1992. </year>
Reference-contexts: The need for such a model was recognized during the 1993 ARPA/NSF Workshop on an infrastructure for temporal databases. However, only limited discussions of the temporal and active inter-relationships exist in both research areas. Several works (e.g. [3] and <ref> [14] </ref>) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled.
Reference: 15. <author> S. Hudson and R. King. CACTIS: </author> <title> A database system for specification functionality defined data. </title> <booktitle> In Proceedings of the IEEE OOBDS Workshop, </booktitle> <pages> pages 26-37, </pages> <month> Sep </month> <year> 1986. </year>
Reference-contexts: The temporal dependency graph extends previous works in active databases <ref> [15] </ref>, [7], [1] to include the temporal functionality. It consists of all the relationships among properties, events and operations in a database. The temporal dependency graph is generated from a given database structure, a given set of operation clauses, and a given set of events.
Reference: 16. <author> C.S. Jensen et al. </author> <title> A consensus glossary of temporal database concepts. </title> <journal> ACM SIGMOD Record, </journal> <volume> 23(1) </volume> <pages> 52-63, </pages> <year> 1994. </year>
Reference-contexts: Consequently, these decisions should be re-evaluated whenever there are retroactive changes of data. A temporal active database [9] provides the required support for those applications by combining the functionality of both temporal databases <ref> [16] </ref> and active databases [3]. A temporal active database supports time stamped data, and contains a mechanism to activate operations in response to detected events. <p> Section 5 presents the properties of TALE, including the temporal and active capabilities of the model. The EBNF definition of the language's grammar is presented in Appendix A. 2 The temporal database The underlying temporal data model is a bi-temporal database <ref> [16] </ref> with a valid time (t v ) which designates the time points at which the value is considered to be true in the modeled reality, and a transaction time (t x ) which designates the time when a value becomes current in the database.
Reference: 17. <author> M.R. </author> <title> Klopprogge and P.C. Lockmann. Modeling information preserving databases; consequences of the concept of time. </title> <booktitle> In Proceedings of the International Conference of VLDB, </booktitle> <address> Florance, Italy, </address> <year> 1983. </year>
Reference-contexts: Several works (e.g. [3] and [14]) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. Temporal models (e.g. <ref> [17] </ref>, [22], [23] and [20]) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming [7] as well.
Reference: 18. <author> S.B. Navathe and R. Ahmed. </author> <title> A temporal relational model and a query language. </title> <journal> Information Sciences, </journal> <volume> 49 </volume> <pages> 147-175, </pages> <year> 1989. </year>
Reference-contexts: A prototype of a system that is based on TALE is currently under development on the basis of MS-Access 2.0 for Windows, in the Windows 3.11 environment. A temporal database model is mapped to the MS-Access environment using an extension to the Temporal Normal Form (TNF) <ref> [18] </ref>, in which a relation consist of all the variables that share the same time stamp. An ongoing work focuses on the parallel execution model of the update process of a temporal active database, and the use of parallel execution to support schema versioning [12].
Reference: 19. <author> N. Pissinou. </author> <title> Towards an infrastructure for temporal databases|A workshop report. </title> <booktitle> ACM SIGMOD Record, </booktitle> <address> 23(1):35, </address> <year> 1994. </year>
Reference-contexts: In this paper we introduce TALE, a Temporal Active Language and Execution model. TALE is an extension of the model presented in [9], <ref> [19] </ref>, in which rules that affect past or future valid times were briefly discussed. The model consists of a high level language 3 that enable the use of events, conditions and actions relating to past, present and future time points.
Reference: 20. <author> N.L. Sarda. HSQL: </author> <title> Historical query language. In Temporal Databases, </title> <booktitle> chap-ter 5, </booktitle> <pages> pages 110-140. </pages> <publisher> The Benjamin/Commings Publishing Company, Inc., </publisher> <address> Redwood City, CA., </address> <year> 1993. </year>
Reference-contexts: Several works (e.g. [3] and [14]) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. Temporal models (e.g. [17], [22], [23] and <ref> [20] </ref>) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming [7] as well.
Reference: 21. <author> R. Snodgrass et al. </author> <title> TSQL2 language specification. </title> <journal> ACM SIGMOD Record, </journal> <volume> 23(1) </volume> <pages> 65-86, </pages> <month> Mar </month> <year> 1994. </year>
Reference-contexts: Temporal models (e.g. [17], [22], [23] and [20]) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming [7] as well. Temporal query languages (e.g. <ref> [21] </ref>) enable the manipulation of time attributes as part of the language, and the use of defaults in defining time bounded values.
Reference: 22. <author> S.Y.W. Su and H.M. Chen. </author> <title> A temporal knowledge representation model OSAM*/T and its query language OQL/T. </title> <booktitle> In Proceedings of the International Conference on VLDB, </booktitle> <year> 1991. </year>
Reference-contexts: Several works (e.g. [3] and [14]) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. Temporal models (e.g. [17], <ref> [22] </ref>, [23] and [20]) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming [7] as well.
Reference: 23. <author> G.T.J. Wuu. SERQL: </author> <title> An ER query language supporting temporal data retrieval. </title> <booktitle> In The Proceedings of the 10th International Pheonix Conference on Computers and Communications, </booktitle> <month> Mar </month> <year> 1991. </year>
Reference-contexts: Several works (e.g. [3] and [14]) in the active database research area discuss the use of temporal events in active databases. Since these works do not utilize temporal data models, temporal conditions and temporal actions are disabled. Temporal models (e.g. [17], [22], <ref> [23] </ref> and [20]) discuss the propagation of the temporal effect on a reactive activation of programs, while TALE enables the use of reflective programming [7] as well.
References-found: 23

