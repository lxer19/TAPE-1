URL: file://ftp.cs.purdue.edu/pub/seh/Papers/OBT.ps.Z
Refering-URL: http://www.cs.purdue.edu/people/seh/
Root-URL: http://www.cs.purdue.edu
Email: seh@cs.purdue.edu  ashfaq@eecis.udel.edu  
Title: Maintaining Spatial Data Sets in Distributed-Memory Machines  
Author: Susanne E. Hambrusch Ashfaq A. Khokhar 
Address: West Lafayette, IN 47907  19716  
Affiliation: Department of Computer Sciences Purdue University  Department of Electrical Engineering University of Delaware Newark, DE  
Abstract: We propose a distributed data structure for maintaining spatial data sets on message-passing, distributed memory machines. The data structure is based on orthogonal bisection trees and it captures relevant characteristics of parallel machines. The operations we consider include insertion, deletion, and range queries. We introduce parameters to control how much imbalance is tolerated at processors and how close to an optimal load to balance. When balancing, we first determine and broadcast point counts of a data-dependent partition of the data. Based on this partition, we propose load balancing methods with different communication and computation requirements. We present initial experimental results for the Cray T3D. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agrawal, A. Sussman, J. Saltz, </author> <title> Compiler and Run-time Support for Structured and Block Structured Applications, </title> <booktitle> Proc. of Supercomputing `93, </booktitle> <pages> pp. 578-587, </pages> <year> 1993. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [2] <author> D. Bader, J. Ja Ja, </author> <title> Practical Parallel Algorithms for Dynamic Data Redistribution, Median Finding, and Selection, </title> <type> Techn. Report, </type> <institution> CS-TR-3494, University of Maryland, </institution> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [3] <author> J. Bentley, </author> <title> Multidimensional Binary Search Trees used for Associative Searching, </title> <journal> CACM, </journal> <volume> Vol. 8, </volume> <pages> pp. 509-517, </pages> <year> 1975. </year>
Reference-contexts: In this paper we address dynamic load balancing of distributed data structures for spatial data sets on message-passing, distributed memory machines. We propose a distributed data structure based on orthogonal bisection trees (OBT), also known as 2-d K-D trees <ref> [3, 14] </ref>, which broadens the definition of OBTs to capture relevant characteristics of parallel machines. The operations we consider include insertion, deletion, and range-queries. To facilitate efficient location of data, we allow each processor to store a copy of the OBT.
Reference: [4] <author> S. Chakrabarti, E. Deprit, E. Im, J. Jones, A. Krishnamurti, C. Wen, and K. Yelick, Multipol: </author> <title> A Distributed Data Structure Library, </title> <type> Techn. Report, </type> <institution> CSD-95-879, UC Berkeley, </institution> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools [1, 2, 6, 9, 11, 12]. The distribution of recursive structures such as linked lists and trees have also been investigated recently <ref> [4, 5, 13, 15] </ref>. Most of the techniques developed for dynamic redistribution of arrays, linked lists, or trees assume that data elements repre fl Research supported in part by DARPA under contract DABT63-92-C-0022ONR.
Reference: [5] <author> C. Chang, A. Sussman, J. Saltz, </author> <title> Object-Oriented Runtime Support for Complex Distributed Data Structures, </title> <type> Techn. Report, </type> <institution> UMIACS-TR-95-35, University of Maryland, </institution> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools [1, 2, 6, 9, 11, 12]. The distribution of recursive structures such as linked lists and trees have also been investigated recently <ref> [4, 5, 13, 15] </ref>. Most of the techniques developed for dynamic redistribution of arrays, linked lists, or trees assume that data elements repre fl Research supported in part by DARPA under contract DABT63-92-C-0022ONR.
Reference: [6] <author> R. Das, M. Uysal, J. Saltz, Y.S. Hwang, </author> <title> Communication Optimizations for Irregular Scientific Computations on Distributed Memory Architectures, </title> <journal> JPDC, </journal> <pages> pp. 462-479, </pages> <year> 1994. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [7] <author> S.E. Hambrusch, F. Hameed, A. A. Khokhar, </author> <title> Communication Operations on Coarse-Grained Mesh Architectures, </title> <journal> Parallel Computing, </journal> <volume> Vol. 21, </volume> <pages> pp. 731-751, </pages> <year> 1995. </year>
Reference-contexts: We also want to establish guidelines under which conditions balancing an OBT improves the overall performance. We expect that, similar to results obtained for related work <ref> [7, 10] </ref>, answers depend on parameters and factors influencing scalability. We report on preliminary performance results for OBTs with different loads for the Cray T3E. We refer to [8] for additional experimental results. Our code is written in C and uses MPI.
Reference: [8] <author> S.E. Hambrusch, A. Khokhar, </author> <title> Maintaining Spatial Data Sets in Distributed-Memory Machines, </title> <type> Techn. Report, </type> <year> 1997. </year>
Reference-contexts: In the tree implementation, we no longer maintain this association in an explicit way, but generate this information when needed. Region counts and necessary associations between squares and processors can be maintained in O (minfff p p v log p; p log pg) time. Details are described in <ref> [8] </ref>. Balancing methods based on slab counts use the same pool of projected cuts and determine the same cuts. Slab counts give a somewhat coarser partitioning of the point space and require less space. <p> When slab counts are stored in matrices, one iteration uses O (ffp v ) sequential time and performs one broadcast. In <ref> [8] </ref> we describe two improved implementations. <p> This new cut and computed counts are then broadcast to all processors that need to know the position of the cut. We expect that the number of points sent to the leader processor will, in general, be small. In <ref> [8] </ref> we describe other solutions discuss additional communication issues. 5. Overall balancing of the OBT Balancing starts at the root. A node v is balanced when all nodes on the path from the root to v have been considered. <p> We expect that, similar to results obtained for related work [7, 10], answers depend on parameters and factors influencing scalability. We report on preliminary performance results for OBTs with different loads for the Cray T3E. We refer to <ref> [8] </ref> for additional experimental results. Our code is written in C and uses MPI. The OBT is implemented using an array of size 2p. Within each processor, the assigned point set is maintained sorted lists.
Reference: [9] <author> S.R. Kohn, </author> <title> S.B. Baden, A Robust Parallel Programming Model for Dynamic Non-uniform Scientific Computations, </title> <booktitle> Proc. of the High Perf. Comp. Conf., </booktitle> <pages> pp. 509-517, </pages> <year> 1994. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [10] <author> V. Kumar, A. Grama, A. Gupta, G. Karypis, </author> <title> Introduction to Parallel Computing, </title> <address> Benjamin/Cummings, </address> <year> 1994. </year>
Reference-contexts: We also want to establish guidelines under which conditions balancing an OBT improves the overall performance. We expect that, similar to results obtained for related work <ref> [7, 10] </ref>, answers depend on parameters and factors influencing scalability. We report on preliminary performance results for OBTs with different loads for the Cray T3E. We refer to [8] for additional experimental results. Our code is written in C and uses MPI.
Reference: [11] <author> C.-W. Ou, S. Ranka, </author> <title> Parallel Remapping Algorithms for Adaptive Problems, </title> <booktitle> Proc. of the Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 367-374, </pages> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [12] <author> R. Parsons, D. Quinlan, </author> <title> Run-time Recognition of Task Parallelism within the P++ Parallel Array Class Library, </title> <booktitle> Proc. of 1993 Scalable Parallel Libraries Conf., </booktitle> <year> 1993. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools <ref> [1, 2, 6, 9, 11, 12] </ref>. The distribution of recursive structures such as linked lists and trees have also been investigated recently [4, 5, 13, 15].
Reference: [13] <author> A. Rogers, M.C. Carlile, J. Reppy, L.J. Hendren, </author> <title> Supporting Dynamic Data Structures on Distributed-Memory Machines, </title> <journal> TOPLAS, </journal> <volume> 17(2), </volume> <pages> pp. 233-263, </pages> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools [1, 2, 6, 9, 11, 12]. The distribution of recursive structures such as linked lists and trees have also been investigated recently <ref> [4, 5, 13, 15] </ref>. Most of the techniques developed for dynamic redistribution of arrays, linked lists, or trees assume that data elements repre fl Research supported in part by DARPA under contract DABT63-92-C-0022ONR.
Reference: [14] <author> H. Samet, </author> <title> Applications of Spatial Data Structures, Computer Graphics, and Image Processing, </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: In this paper we address dynamic load balancing of distributed data structures for spatial data sets on message-passing, distributed memory machines. We propose a distributed data structure based on orthogonal bisection trees (OBT), also known as 2-d K-D trees <ref> [3, 14] </ref>, which broadens the definition of OBTs to capture relevant characteristics of parallel machines. The operations we consider include insertion, deletion, and range-queries. To facilitate efficient location of data, we allow each processor to store a copy of the OBT.
Reference: [15] <author> K. Yelick et al., </author> <title> Portable Parallel Irregular Applications, </title> <booktitle> Workshop on Parallel Symbolic Languages and Systems, Lecture Notes in Computer Science, </booktitle> <year> 1995. </year>
Reference-contexts: For simple structures, such as arrays, data location and load balancing have have been studied, analyzed, and incorporated into compiler tools [1, 2, 6, 9, 11, 12]. The distribution of recursive structures such as linked lists and trees have also been investigated recently <ref> [4, 5, 13, 15] </ref>. Most of the techniques developed for dynamic redistribution of arrays, linked lists, or trees assume that data elements repre fl Research supported in part by DARPA under contract DABT63-92-C-0022ONR.
References-found: 15

