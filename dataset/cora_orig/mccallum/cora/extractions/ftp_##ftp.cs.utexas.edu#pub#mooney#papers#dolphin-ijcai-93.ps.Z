URL: ftp://ftp.cs.utexas.edu/pub/mooney/papers/dolphin-ijcai-93.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/ml/abstracts.html
Root-URL: 
Email: zelle@cs.utexas.edu, mooney@cs.utexas.edu  
Title: Combining FOIL and EBG to Speed-up Logic Programs  
Author: John M. Zelle and Raymond J. Mooney 
Address: Austin, TX 78712  
Affiliation: Department of Computer Sciences University of Texas  
Abstract: This paper presents an algorithm that combines traditional EBL techniques and recent developments in inductive logic programming to learn effective clause selection rules for Prolog programs. When these control rules are incorporated into the original program, significant speed-up may be achieved. The algorithm is shown to be an improvement over competing EBL approaches in several domains. Additionally, the algorithm is capable of automatically transforming some intractable algorithms into ones that run in polynomial time.
Abstract-found: 1
Intro-found: 1
Reference: [ Bratko, 1990 ] <author> I. Bratko. </author> <title> Prolog Programming for Artificial Intelligence. </title> <publisher> Addison Wesley, </publisher> <address> Reading:MA, </address> <year> 1990. </year>
Reference-contexts: The N-queens problem is adapted from a Prolog program given in <ref> [ Bratko, 1990 ] </ref> . The problem is to find a placement of N queens on an NxN chessboard such that no queen is attacking another. The program implements a generate and test strategy where a configuration is represented by a permutation of the list, [1..N].
Reference: [ Braudaway and Tong, 1989 ] <author> Wesley Braudaway and Chris Tong. </author> <title> Automatic synthesis of constrained generators. </title> <booktitle> In Proceedings of the Eleventh International Joint conference on Artificial intelligence, </booktitle> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: Dolphin improves on AxA-EBL by using a more powerful inductive learning mechanism (Foil) and considering the entire top-level proof as the explanation for the successful application of a clause to a subgoal. Researchers in knowledge compilation and logic programming have examined test incorporation as an optimization technique <ref> [ Braudaway and Tong, 1989; Bruynooghe et al., 1989 ] </ref> . Research has concentrated on analytically identifying sound program transformations.
Reference: [ Bruynooghe et al., 1989 ] <author> Maurice Bruynooghe, Danny De Schreye, and Bruno Krekels. </author> <title> Compiling control. </title> <journal> Journal of Logic Programming, </journal> <volume> 6 </volume> <pages> 135-243, </pages> <year> 1989. </year>
Reference-contexts: Dolphin improves on AxA-EBL by using a more powerful inductive learning mechanism (Foil) and considering the entire top-level proof as the explanation for the successful application of a clause to a subgoal. Researchers in knowledge compilation and logic programming have examined test incorporation as an optimization technique <ref> [ Braudaway and Tong, 1989; Bruynooghe et al., 1989 ] </ref> . Research has concentrated on analytically identifying sound program transformations.
Reference: [ Chase et al., 1989 ] <author> M. Chase, M. Zweban, R. Piazza, J. Burger, P. Maglio, and H. Hirsh. </author> <title> Approximating learned search control knowledge. </title> <booktitle> In Proceedings of the Sixth International Workshop on Machine Learning, </booktitle> <pages> pages 40-42, </pages> <address> Ithaca, NY, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: The first use of approximations in learning control rules was probably MetaLEX [ Keller, 1987 ] . However, it used a fairly simple method of simplifying learned rules by removing conditions. Approximating control rules was also investigated in <ref> [ Chase et al., 1989 ] </ref> ; however, their system, ULS, does not employ induction and is therefore limited to conservative approximations, producing relatively modest improvements in efficiency. The most closely related work is AxA-EBL [ Cohen, 1990 ] mentioned above.
Reference: [ Cohen, 1990 ] <author> W. W. Cohen. </author> <title> Learning approximate control rules of high utility. </title> <booktitle> In Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <pages> pages 268-276, </pages> <address> Austin, TX, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Recently, Cohen <ref> [ Cohen, 1990 ] </ref> has argued the advantages of learning search control rules for the clause selection problem in logic programming. Clause selection is the process of deciding which of several applicable clauses to use in reducing a particular subgoal in the course of a proof. <p> [ Dietterich, 1986 ] which, as illustrated here, can sometimes dramatically enhance the efficiency of an algorithm. 3 Experimental Results 3.1 Experimental Design The Dolphin system has been evaluated on five problem domains: Two generate-and-test programs, naivesort and N-queens, and three "standard" EBL problems LEX, RW, and BW borrowed from <ref> [ Cohen, 1990 ] </ref> . The N-queens problem is adapted from a Prolog program given in [ Bratko, 1990 ] . The problem is to find a placement of N queens on an NxN chessboard such that no queen is attacking another. <p> These programs were then run on the examples in the testing set to evaluate their performance. For each training set size, 10 trials were run and the results averaged. In order to guarantee the completeness of the final program, we adopt the strategy used by <ref> [ Cohen, 1990 ] </ref> and retain the original clauses. In testing, we first attempt to solve the problem using the optimized program. If this fails, the original program is then used to find a solution to the problem. <p> The LEX training and testing problems are from [ Keller, 1987 ] . In the planning domains, problems were generated by taking a random walk of bounded length in the state space of the planner in a manner identical to <ref> [ Cohen, 1990 ] </ref> . 3.2 Results In all domains tested, Dolphin was able to significantly improve the performance of the initial program. Figure 5 shows an average learning curve for the naivesort. It is not surprising that Dolphin produces programs for the sorting problem that are significantly faster. <p> During testing, each problem was first attempted using only the learned macros; if no macro matched the problem, it was solved using the original solver without the macros. The results for AxA-EBL and EBL-Control were taken from <ref> [ Cohen, 1990 ] </ref> . AxA-EBL is Cohen's integration of induction and explanation discussed earlier. EBL-control is a "rational reconstruction" of standard EBL control rule learning applied to the clause selection problem. <p> Approximating control rules was also investigated in [ Chase et al., 1989 ] ; however, their system, ULS, does not employ induction and is therefore limited to conservative approximations, producing relatively modest improvements in efficiency. The most closely related work is AxA-EBL <ref> [ Cohen, 1990 ] </ref> mentioned above. AxA-EBL "explains" correct uses of a clause by compiling out a generalized macro for the subgoal to which the clause was applied.
Reference: [ DeJong and Mooney, 1986 ] <author> G. F. DeJong and R. J. Mooney. </author> <title> Explanation-based learning: An alternative view. </title> <journal> Machine Learning, </journal> <volume> 1(2) </volume> <pages> 145-176, </pages> <year> 1986. </year>
Reference-contexts: Standard EBG techniques <ref> [ DeJong and Mooney, 1986; Mitchell et al., 1986 ] </ref> are used to generalize the proof trees of the training problems.
Reference: [ Dietterich, 1986 ] <author> T. Dietterich. </author> <title> Learning at the knowledge level. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 287-316, </pages> <year> 1986. </year>
Reference-contexts: By inserting conditions from the testing portion of a generate-and-test program into the generating portion, Dolphin is performing test incorporation <ref> [ Dietterich, 1986 ] </ref> which, as illustrated here, can sometimes dramatically enhance the efficiency of an algorithm. 3 Experimental Results 3.1 Experimental Design The Dolphin system has been evaluated on five problem domains: Two generate-and-test programs, naivesort and N-queens, and three "standard" EBL problems LEX, RW, and BW borrowed from [
Reference: [ Keller, 1987 ] <author> R. Keller. </author> <title> The Role of Explicit Contextual Knowledge in Learning Concepts to Improve Performance. </title> <type> PhD thesis, </type> <institution> Rutgers University, </institution> <address> New Brunswick, N, </address> <year> 1987. </year> <note> Also appears as tech. report ML-TR-7. </note>
Reference-contexts: The data for the N-queens domain consisted of the nine problems corresponding to the 4-queens through 12-queens problems. The four largest problems were used as the test set, and training was done on successively larger subsets of the smaller problems. The LEX training and testing problems are from <ref> [ Keller, 1987 ] </ref> . <p> Dolphin on the other hand, uses induction to select the most useful pieces of EBL generalizations. Also, Dolphin takes advantage of recent progress in relational learning, namely, Foil. The first use of approximations in learning control rules was probably MetaLEX <ref> [ Keller, 1987 ] </ref> . However, it used a fairly simple method of simplifying learned rules by removing conditions.
Reference: [ Laird et al., 1986 ] <author> J. Laird, P. Rosenbloom, and A. Newell. </author> <title> Chunking in soar: The anatomy of a general learning mechanism. </title> <journal> Machine Learning, </journal> <volume> 1(1), </volume> <year> 1986. </year>
Reference-contexts: 1 Introduction Explanation-based learning (EBL) research in logic programming has generally focussed on learning macros (compiled rules) [ Mitchell et al., 1986; DeJong and Mooney, 1986; Prieditis and Mostow, 1987 ] , while EBL work in planning and production systems has tended to focus on learning search-control rules <ref> [ Minton, 1988; Laird et al., 1986 ] </ref> . Recently, Cohen [ Cohen, 1990 ] has argued the advantages of learning search control rules for the clause selection problem in logic programming.
Reference: [ Langley, 1985 ] <author> P. Langley. </author> <title> Learning to search: From weak methods to domain specific heuristics. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 217-260, </pages> <year> 1985. </year>
Reference-contexts: These two problems nicely illustrate the advantage of considering the surrounding proof context when explaining a successful clause application. Finally, EBL-control shares the shortcomings of both EBL-macro and AxA-EBL. 4 Related Work Early research in learning control rules <ref> [ Mitchell et al., 1986; Langley, 1985 ] </ref> did not focus on the utility problem, approximation, or application to logic programming. LEX-2 combined induction and EBL by inducing over complete explanation-based generalizations. Dolphin on the other hand, uses induction to select the most useful pieces of EBL generalizations.
Reference: [ Minton, 1988 ] <author> S. Minton. </author> <title> Quantitative results concerning the utility of explanation-based learning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 564-569, </pages> <address> St. Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Explanation-based learning (EBL) research in logic programming has generally focussed on learning macros (compiled rules) [ Mitchell et al., 1986; DeJong and Mooney, 1986; Prieditis and Mostow, 1987 ] , while EBL work in planning and production systems has tended to focus on learning search-control rules <ref> [ Minton, 1988; Laird et al., 1986 ] </ref> . Recently, Cohen [ Cohen, 1990 ] has argued the advantages of learning search control rules for the clause selection problem in logic programming. <p> Standard EBL methods can be applied to clause selection; however, they tend to produce control rules that are accurate but highly complex. The complexity of the rules makes them costly to use and can often degrade overall performance rather than improving it <ref> [ Minton, 1988 ] </ref> . Cohen's system, AxA-EBL, handles this problem by combining EBL with induction to learn a small set of "approximate" control rules with reduced match cost. AxA-EBL was shown to out-perform standard EBL control rules across a number of problem solving domains.
Reference: [ Mitchell et al., 1986 ] <author> Tom M. Mitchell, Richard M. Keller, and Smadar T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 47-80, </pages> <year> 1986. </year>
Reference-contexts: Standard EBG techniques <ref> [ DeJong and Mooney, 1986; Mitchell et al., 1986 ] </ref> are used to generalize the proof trees of the training problems. <p> These two problems nicely illustrate the advantage of considering the surrounding proof context when explaining a successful clause application. Finally, EBL-control shares the shortcomings of both EBL-macro and AxA-EBL. 4 Related Work Early research in learning control rules <ref> [ Mitchell et al., 1986; Langley, 1985 ] </ref> did not focus on the utility problem, approximation, or application to logic programming. LEX-2 combined induction and EBL by inducing over complete explanation-based generalizations. Dolphin on the other hand, uses induction to select the most useful pieces of EBL generalizations.
Reference: [ Pazzani and Kibler, 1992 ] <author> M. Pazzani and D. Kibler. </author> <title> The utility of background knowledge in inductive learning. </title> <journal> Machine Learning, </journal> <volume> 9 </volume> <pages> 57-94, </pages> <year> 1992. </year>
Reference-contexts: Second, the general Foil algorithm has a "most general" bias which tends to produce simple definitions. This is important in creating classification rules with low match cost. Third, it is easy to bias Foil with prior knowledge <ref> [ Pazzani and Kibler, 1992 ] </ref> ; we use the generalized proofs produced in the example analysis phase to guide the induction. 2.2.1 Basic Foil Algorithm Foil attempts to learn a definition of a concept in terms of some given background predicates.
Reference: [ Prieditis and Mostow, 1987 ] <author> A. Prieditis and J. Mostow. Prolearn: </author> <title> Towards a prolog interpreter that learns. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <month> Jul </month> <year> 1987. </year>
Reference: [ Quinlan, 1990 ] <author> J.R. Quinlan. </author> <title> Learning logical definitions from relations. </title> <journal> Machine Learning, </journal> <volume> 5(3) </volume> <pages> 239-266, </pages> <year> 1990. </year>
Reference-contexts: Our system, Dolphin, (Dynamic Optimization of Logic Programs through Heuristics INduction) can be viewed as an extension of the AxA-EBL approach. Dolphin improves on AxA-EBL in two significant ways. First, we employ a more powerful induction algorithm, namely Quinlan's Foil <ref> [ Quinlan, 1990 ] </ref> . Second, whereas AxA-EBL "explains" clause selection decisions for subgoals without considering the structure of the surrounding proof, Dolphin explicitly considers the surrounding proof during induction. <p> A number of recent systems have addressed the issue of relational concept learning in a logic programming framework <ref> [ Quinlan, 1990 ] </ref> . The choice of a Foil-like framework was motivated by a number of factors. First, Foil is relatively simple and has proven efficient in a number of domains. Second, the general Foil algorithm has a "most general" bias which tends to produce simple definitions.
References-found: 15

