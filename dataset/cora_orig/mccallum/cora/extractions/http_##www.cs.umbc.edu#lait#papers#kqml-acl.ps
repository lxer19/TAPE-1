URL: http://www.cs.umbc.edu/lait/papers/kqml-acl.ps
Refering-URL: http://www.paoli.atm.lmco.com/kqml/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: ffinin,jklabrou,mayfieldg@cs.umbc.edu  
Title: KQML as an agent communication language  
Author: Tim Finin, Yannis Labrou and James Mayfield 
Note: Cambridge, to appear, (1995).  
Date: September, 1995  
Address: Baltimore MD USA  
Affiliation: Computer Science and Electrical Engineering University of Maryland Baltimore County  
Abstract: One of the defining characteristics of an information agent is its ability for flexible interaction and interoperation with other, similar software agents. This focus on interoperability has been the foundation of the approach of the Knowledge Sharing Effort (KSE) in developing a basic framework for intelligent systems. We present KSE approach and the solutions suggested for the subproblems identified by the consortium, emphasizing the KSE's communication language and protocol KQML (Knowledge Query and Manipulation Language). In addition to presenting specific solutions, we are interested in demonstrating the conceptual decomposition of the problem of knowledge sharing into smaller more manageable problems, and in arguing that there is merit to those concepts independent of the success of individual solutions. This paper will appear as a chapter in Jeff Bradshaw (Ed.), "Software Agents", MIT Press, 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yigal Arens. </author> <title> Planning and reformulating queries for semantically-modeled multidatabase systems. </title> <booktitle> In First International Conference on Information and Knowledge Management, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, an information agent was constructed by integrating CoBASE [6], a cooperative front-end, SIMS <ref> [1, 2] </ref>, an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [2] <author> Yigal Arens, Chin Chee, Chun-Nan Hsu, Hoh In, and Craig A. Knoblock. </author> <title> Query processing in an information mediator. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, an information agent was constructed by integrating CoBASE [6], a cooperative front-end, SIMS <ref> [1, 2] </ref>, an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [3] <author> M. Barbuceanu and M.S.Fox. </author> <title> the information agent: an infrastructure agent supporting collaborative enterprise architectures. </title> <booktitle> In Proceedings of the Third Workshop on Enabling Technologies: Infrastructure for Collaborative Enterprises, </booktitle> <pages> pages 112-117. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference: [4] <author> Marie Bienkowski, Marie desJardins, and Roberto Desimone. SOCAP: </author> <title> system for operations crisis action planning. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative. One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE <ref> [29, 4] </ref>), with a scheduler (in Common Lisp), a knowledge base (in LOOM [20]), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
Reference: [5] <author> Mark Burstein, </author> <title> editor. Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop. </title> <publisher> Morgan Kuafmann Publishers, Inc., </publisher> <month> February </month> <year> 1994. </year>
Reference-contexts: Current KQML-based applications have used one of two simple techniques. In the PACT project [7], for example, all agents used a central, common facilitator whose location was a parameter initialized when the agents were launched. In the ARPI applications <ref> [5] </ref>, finding and establishing contact with a local facilitator is one of the functions of the KQML API.
Reference: [6] <author> Wes Chu and Hua Yang. Cobase: </author> <title> A cooperative query answering system for database systems. </title> <booktitle> In Proceedings of the ARPA/Rome Lab 1994 Knowledge-Based Planning and Scheduling Initiative Workshop, </booktitle> <month> February </month> <year> 1994. </year> <note> DRAFT: </note> <author> Finin, Labrou and Mayfield, </author> <title> KQML as an agent communication language 21 </title>
Reference-contexts: All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, an information agent was constructed by integrating CoBASE <ref> [6] </ref>, a cooperative front-end, SIMS [1, 2], an information mediator for planning information access, and LIM [26], an information mediator for translating relational data into knowledge structures.
Reference: [7] <author> M. Cutkosky, E. Engelmore, R. Fikes, T. Gruber, M. Genesereth, and W. Mark. </author> <title> PACT: An experiment in integrating concurrent engineering systems. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 28-38, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The problem of how agents find facilitators in the first place is not strictly an issue for KQML and has a variety of possible solutions. Current KQML-based applications have used one of two simple techniques. In the PACT project <ref> [7] </ref>, for example, all agents used a central, common facilitator whose location was a parameter initialized when the agents were launched. In the ARPI applications [5], finding and establishing contact with a local facilitator is one of the functions of the KQML API.
Reference: [8] <editor> D. Kuokka et. al. Shade: </editor> <booktitle> Technology for knowledge-based collaborative. In AAAI Workshop on AI in Collaborative Design, </booktitle> <year> 1993. </year>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [14, 22, 8, 9] </ref>. KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [9] <author> William Mark et. al. Cosmos: </author> <title> A system for supporting design negotiation. </title> <journal> Journal of Concurrent Engineering: Applications and Research (CERA), </journal> <volume> 2(3), </volume> <year> 1994. </year>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [14, 22, 8, 9] </ref>. KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [10] <author> Tim Finin, Don McKay, Rich Fritzson, and Robin McEntire. </author> <title> KQML: an information and knowledge exchange protocol. </title> <editor> In Kazuhiro Fuchi and Toshio Yokoi, editors, </editor> <title> Knowledge Building and Knowledge Sharing. </title> <publisher> Ohmsha and IOS Press, </publisher> <year> 1994. </year>
Reference: [11] <author> Tim Finin, Don McKay, Rich Fritzson, and Robin McEntire. </author> <title> The KQML information and knowledge exchange protocol. </title> <booktitle> In Third International Conference on Information and Knowledge Management, </booktitle> <month> November </month> <year> 1994. </year>
Reference: [12] <author> M. Genesereth and R. Fikes et. al. </author> <title> Knowledge interchange format, version 3.0 reference manual. </title> <type> Technical report, </type> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: DRAFT: Finin, Labrou and Mayfield, KQML as an agent communication language 4 The Interlingua Group is developing a common language for expressing the content of a knowledge-base. This group has published a specification document describing the Knowledge Interchange Format, or KIF <ref> [12] </ref>. KIF can be used to support translation from one content language to another, or as a common content language between two agents which use different native representation languages. <p> In linguistic terms, this means that they must share a common syntax, semantics and pragmatics. Getting information processes or software agents to share a common syntax is a major problem. There is no universally accepted language in which to represent information and queries. Languages such as KIF <ref> [12] </ref>, extended SQL, and LOOM [20] have their supporters, but there is also a strong position that it is too early to standardize on any representation language [16].
Reference: [13] <author> Michael R. Genesereth and Steven P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, 147, </pages> <year> 1994. </year>
Reference-contexts: The importance of such communication is emphasized by Genesereth, who goes so far as to suggest that an entity is a software agent if and only if it communicates correctly in an agent communication language <ref> [13] </ref>. After all, it is hard to picture cyberspace with entities that exist only in isolation; it would go against our perception of a decentralized, interconnected electronic universe. <p> ensures that there is a fresh line on the standard output stream; the second step prints Hello! to the standard output stream; the final step adds a carriage return to the output. (progn (fresh-line t) (print "Hello!") (fresh-line t)) 9 This presentation of KIF is based on a similar presentation <ref> [13] </ref>. 10 Symbols beginning with a question mark are taken to be variables. 11 The use of commas signals that the variables should not be taken literally. Without the commas, this sentence would say that agent joe is interested in the sentence (salary ?x ?y ?z) instead of its instances. <p> Our approach to this is to introduce a small number of KQML performatives which are used by agents to describe the meta-data specifying the information requirements and capabilities and then to introduce a special class of agents called communication facilitators <ref> [13] </ref>. <p> Agent-Based Software Integration [15] is an effort underway at Stanford University which is applying KQML as an integrating framework for general software systems. Using KQML, a federated architecture incorporating a sophisticated facilitator is developed which supports an agent-based view of software integration and interoperation <ref> [13] </ref>. The facilitator in this architecture is an intelligent agent which processes and reasons about the content of KQML messages, supporting tighter integration of disparate software systems. <p> Several start-up companies are proposing to offer commercial products for processing ACL; and a number of established computer system vendors are looking at ACL as a possible language for communication among heterogeneous systems. Genesereth provides more about the specifics of this approach <ref> [13] </ref> whose success is tied to the advantages and feature of KIF. We have also successfully used KQML in other smaller demonstrations integrating distributed clients (in C) with mediators which were retrieving data from distributed databases. Mediators are not just limited distributed database access.
Reference: [14] <author> Mike Genesereth. Designworld. </author> <booktitle> In Proceedings of the IEEE Conference on Robotics and Automation, pages 2,785-2,788. </booktitle> <publisher> IEEE CS Press. </publisher>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [14, 22, 8, 9] </ref>. KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [15] <author> Mike Genesereth. </author> <title> An agent-based approach to software interoperability. </title> <type> Technical Report Logic-91-6, </type> <institution> Logic Group, CSD, Stanford University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: A LIM server front-ends each different database. This experiment was run over the internet involving three, geographically dispersed sites. Agent-Based Software Integration <ref> [15] </ref> is an effort underway at Stanford University which is applying KQML as an integrating framework for general software systems. Using KQML, a federated architecture incorporating a sophisticated facilitator is developed which supports an agent-based view of software integration and interoperation [13].
Reference: [16] <author> Matt Ginsberg. </author> <title> Knowledge interchange format: The KIF of death. </title> <journal> AI Magazine, </journal> <year> 1991. </year>
Reference-contexts: There is no universally accepted language in which to represent information and queries. Languages such as KIF [12], extended SQL, and LOOM [20] have their supporters, but there is also a strong position that it is too early to standardize on any representation language <ref> [16] </ref>. As a result, it is currently necessary to say that two agents can communicate with each other if they have a common representation language or use languages that are inter-translatable.
Reference: [17] <author> Thomas R. Gruber. </author> <title> A translation approach to portable ontology specification. </title> <journal> Knowledge Acauisition, </journal> <volume> 5(2) </volume> <pages> 199-220, </pages> <year> 1993. </year>
Reference: [18] <author> Yannis Labrou and Tim Finin. </author> <title> A semantics approach for KQML a general purpose communication language for software agents. </title> <booktitle> In Third International Conference on Information and Knowledge Management, </booktitle> <month> November </month> <year> 1994. </year> <note> Available as http://www.cs.umbc.edu/kqml/- papers/kqml-semantics.ps. </note>
Reference-contexts: KQML semantics is still an open issue. For now there are only natural language descriptions of the intended meaning of the performatives and their use (protocols). An approach that emphasizes the speech act flavor of the communication acts is a thread of ongoing research <ref> [18] </ref>. Implementation. In two current implementations of KQML interfaces, the Lockheed KQML API and the Loral/UMBC KQML API, each provides a content-independent message router and a facilitator.
Reference: [19] <author> Nancy Lehrer. </author> <title> The knowledge representation specification language manual. </title> <type> Technical report, </type> <institution> ISX Corporation, Thousand Oaks, California, </institution> <year> 1994. </year>
Reference-contexts: The content languages used have included languages intended for knowledge exchange including the Knowledge Interchange Format (KIF) and the Knowledge Representation Specification Language (KRSL) <ref> [19] </ref> as well as other more traditional languages such as SQL. Early experimentations with KQML began in 1990. The following is a representative selection of applications and experiments developed using KQML.
Reference: [20] <author> Robert MacGregor and Raymond Bates. </author> <title> The LOOM knowledge representation language. </title> <type> Technical Report ISI/RS-87-188, </type> <institution> USC/ISI, </institution> <year> 1987. </year> <note> Also appears in Proceedings of the Knowledge-Based Systems Workshop held in St. </note> <institution> Louis, Missouri, </institution> <month> April 21-23, </month> <year> 1987. </year>
Reference-contexts: Getting information processes or software agents to share a common syntax is a major problem. There is no universally accepted language in which to represent information and queries. Languages such as KIF [12], extended SQL, and LOOM <ref> [20] </ref> have their supporters, but there is also a strong position that it is too early to standardize on any representation language [16]. <p> One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE [29, 4]), with a scheduler (in Common Lisp), a knowledge base (in LOOM <ref> [20] </ref>), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
Reference: [21] <author> Don McKay, Tim Finin, and Anthony O'Hare. </author> <title> The intelligent database interface. </title> <booktitle> In Proceedings of the 7 th National Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [22] <author> M.Tenenbaum, J. Weber, and T. Gruber. </author> <title> Enterprise integration: Lessons from shade and pact. </title> <editor> In C. Petrie, editor, </editor> <title> Enterprise Integration Modeling. </title> <publisher> MIT Press, </publisher> <year> 1993. </year> <note> DRAFT: </note> <author> Finin, Labrou and Mayfield, </author> <title> KQML as an agent communication language 22 </title>
Reference-contexts: The use of KQML in these demonstrations has allowed the integrators to focus on what the integration of design and engineering tools can accomplish and appropriately deemphasized how the tools communicate <ref> [14, 22, 8, 9] </ref>. KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative.
Reference: [23] <author> R. Neches, R. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. Swartout. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3) </volume> <pages> 36-56, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: The Knowledge-Sharing Effort (KSE), sponsored by the Advanced Research Projects Agency (ARPA), the Air Force Office of Scientific Research (ASOFR), the Corporation for National Research Initiative (NRI) and the National Science Foundation (NSF), is an initiative to develop technical infrastructure to support knowledge sharing among systems <ref> [23] </ref>. <p> Although the problem of understanding what must be held in common among communicating agents is a fundamental question of philosophy and science, the SRKB is focusing on the practical problem of building knowledge-based software that can be reused as off-the-shelf technology. The approach is to focus on common ontologies <ref> [23] </ref>. Every knowledge-based system relies on some conceptualization of the world (objects, qualities, distinctions and relationships that matter for performing some task) that is embodied in concepts, distinctions, etc. in a formal representation scheme.
Reference: [24] <author> Allen Newell. </author> <title> The knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 18 </volume> <pages> 87-127, </pages> <year> 1982. </year>
Reference-contexts: We take this "description" to be a helpful abstract model for viewing software agents, even if their actual implementation does not make claims to such ambitious concepts. Agents then reside at the knowledge level <ref> [24, 25] </ref> and are not well served by general languages and protocols developed for distributed computing. Such languages and protocols focus on processes rather than on the programs or collection of programs that constitute the agents.
Reference: [25] <author> Allen Newell. </author> <title> Reflections on the knowledge level. </title> <journal> Artificial Intelligence, </journal> <volume> 59 </volume> <pages> 31-38, </pages> <year> 1993. </year>
Reference-contexts: We take this "description" to be a helpful abstract model for viewing software agents, even if their actual implementation does not make claims to such ambitious concepts. Agents then reside at the knowledge level <ref> [24, 25] </ref> and are not well served by general languages and protocols developed for distributed computing. Such languages and protocols focus on processes rather than on the programs or collection of programs that constitute the agents.
Reference: [26] <author> Jon Pastor, Don McKay, and Tim Finin. View-concepts: </author> <title> Knowledge-based access to databases. </title> <booktitle> In First International Conference on Information and Knowledge Management, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: Special attention has been given to two important cases|communication between two knowledge-based systems and communication between a knowledge-based system and a conventional database management system <ref> [26] </ref>. <p> All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment. In a second experiment, an information agent was constructed by integrating CoBASE [6], a cooperative front-end, SIMS [1, 2], an information mediator for planning information access, and LIM <ref> [26] </ref>, an information mediator for translating relational data into knowledge structures. CoBASE processes a query, and, if no responses are found relaxes the query based upon approximation operators and domain semantics and executes the query again.
Reference: [27] <author> Ramesh Patil, Richard Fikes, Peter Patel-Schneider, Donald McKay, Tim Finin, Thomas Gruber, and Robert Neches. </author> <title> The DARPA knowledge sharing effort: Progress report. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Third International Conference (KR'92), </booktitle> <address> San Mateo, CA, November 1992. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [28] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60 </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: Interoperability with other communication languages remains to be addressed as such languages appear. One such attempt has been made by Davis, whose Agent-K attempts to bridge KQML and Shoham's Agent Oriented Programming <ref> [28] </ref>. The existence of facilitators in the KQML environment can provide the means for knowledge discovery in large networks, especially if facilitators can cooperate with other knowledge discovery applications available in the World Wide Web. Reliability. <p> In AOP <ref> [28] </ref> agents are viewed as entities whose state is viewed as consisting of mental components such as beliefs, capabilities, choices and commitments.
Reference: [29] <author> David Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA., </address> <year> 1988. </year>
Reference-contexts: KQML has been used as the communication language in several technology integration experiments in the ARPA Rome Lab Planning Initiative. One of these experiments supported an integrated planning and scheduling system for military transportation logistics linking a planning agent (in SIPE <ref> [29, 4] </ref>), with a scheduler (in Common Lisp), a knowledge base (in LOOM [20]), and a case based reasoning tool (in Common Lisp). All of the components integrated were preexisting systems which were not designed to work in a cooperative distributed environment.
References-found: 29

