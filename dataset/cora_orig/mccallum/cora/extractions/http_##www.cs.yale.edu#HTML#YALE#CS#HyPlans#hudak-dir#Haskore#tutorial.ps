URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/Haskore/tutorial.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/Haskore/
Root-URL: http://www.cs.yale.edu
Email: hudak@cs.yale.edu  
Title: Haskore Music Tutorial  
Author: Paul Hudak 
Date: February 14, 1997  
Address: New Haven, CT 06520  
Affiliation: Yale University Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [AK92] <author> D.P. Anderson and R. Kuivila. </author> <title> Formula: A programming language for expressive computer music. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Ary94] <author> K. Arya. </author> <title> A functional animation starter-kit. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(1) </volume> <pages> 1-18, </pages> <year> 1994. </year>
Reference-contexts: There we find a structure that is in spirit very similar to ours: most importantly, a clear distinction between object description and interpretation (which in this paper we have been calling musical objects and their performance). A similar structure can be found in Arya's functional animation work <ref> [Ary94] </ref>. There are many interesting avenues to pursue with this research. On the theoretical side, we need a deeper investigation of the algebraic structure of music, and would like to express certain modern theories of music in Haskore.
Reference: [Bal92] <author> M. Balaban. </author> <title> Music structures: Interleaving the temporal and hierarchical aspects of music. </title> <editor> In M. Balaban, K. Ebcioglu, and O. Laske, editors, </editor> <booktitle> Understanding Music With AI, </booktitle> <pages> pages 110-139. </pages> <publisher> AAAI Press, </publisher> <year> 1992. </year>
Reference-contexts: On the other hand, Balaban describes an abstract notion (apparently not yet a programming language) of "music structure," and provides various operators that look similar to ours <ref> [Bal92] </ref>. In addition, she describes an operation called flatten that resembles our literal interpretation perform. It would be interesting to translate her ideas into Haskell; the match would likely be good.
Reference: [BW88] <author> R. Bird and P. Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: If not, I encourage reading at least A Gentle Introduction to Haskell [HF92] before proceeding. I also assume some familiarity with equational reasoning; an excellent introductory text on this is <ref> [BW88] </ref>. 2 The Architecture of Haskore structures from the "music platform"|it is desirable for Haskore compositions to run equally well as conventional midi-files [IMA90], NeXT MusicKit score files [JB91], and csound score files [Ver86], and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem.
Reference: [Col84] <author> D. Collinge. Moxie: </author> <title> A languge for computer music performance. </title> <booktitle> In Proc. Int'l Computer Music Conference, </booktitle> <pages> pages 217-220. </pages> <publisher> Computer Music Association, </publisher> <year> 1984. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [CR84] <author> P. Cointe and X. Rodet. </author> <title> Formes: an object and time oriented system for music composition and synthesis. </title> <booktitle> In Proceedings of the 1984 ACM Symposium on Lisp and Functional Programmming, </booktitle> <pages> pages 85-95. </pages> <publisher> ACM, </publisher> <year> 1984. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Dan89] <author> R.B. Dannenberg. </author> <title> The Canon score language. </title> <journal> Computer Music Journal, </journal> <volume> 13(1) </volume> <pages> 47-56, </pages> <year> 1989. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [DFV92] <author> R.B. Dannenberg, C.L. Fraley, and P. Velikonja. </author> <title> A functional language for sound synthesis with behavioral abstraction and lazy evaluation. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here. <p> There are some other related approaches based on variants of Lisp, most notably Dannenberg's Fugue language <ref> [DFV92] </ref>, in which operators similar to ours can be found but where the emphasis is more on instrument synthesis rather than note-oriented composition.
Reference: [For73] <author> A. Forte. </author> <title> The Structure of Atonal Music. </title> <publisher> Yale University Press, </publisher> <address> New Haven, CT, </address> <year> 1973. </year>
Reference-contexts: little advantage of one over the other: &gt; pitToInt :: Chord -&gt; Chord &gt; pitToInt ch = aux ch &gt; where aux (n1:n2:ns) = (n2-n1) : aux (n2:ns) &gt; aux [n] = [head ch - n] &gt; 2 For example, Forte prescribes normal forms for chords in an atonal setting <ref> [For73] </ref>. 25 &gt; intToPit :: Chord -&gt; Chord &gt; intToPit ch = 0 : aux 0 ch &gt; where aux p [n] = [] &gt; aux p (n:ns) = n' : aux n' ns where n' = p+n Exercise 8 Show that pitToInt and intToPit are inverses in the following sense:
Reference: [HB95] <author> P. Hudak and J. Berger. </author> <title> A model of performance, interaction, </title> <booktitle> and improvisation. In Proceedings of International Computer Music Conference. Int'l Computer Music Association, </booktitle> <year> 1995. </year>
Reference-contexts: On the practical side, the potential of a graphical interface to Haskore is appealing. We are also interested in extending the methodology to sound synthesis. Our primary goal currently, however, is to continue using Haskore as a vehicle for interesting algorithmic composition (for example, see <ref> [HB95] </ref>).
Reference: [Hen82] <author> P. Henderson. </author> <title> Functional geometry. </title> <booktitle> In Proceedings of the 1982 ACM Symposium on Lisp and Functional Programmming. ACM, </booktitle> <year> 1982. </year>
Reference-contexts: It would be interesting to translate her ideas into Haskell; the match would likely be good. Perhaps surprisingly, the work that we find most closely related to ours is not about music at all: it is Henderson's functional geometry, a functional language approach to generating computer graphics <ref> [Hen82] </ref>. There we find a structure that is in spirit very similar to ours: most importantly, a clear distinction between object description and interpretation (which in this paper we have been calling musical objects and their performance). A similar structure can be found in Arya's functional animation work [Ary94].
Reference: [HF92] <author> P. Hudak and J. Fasel. </author> <title> A gentle introduction to Haskell. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(5), </volume> <month> May </month> <year> 1992. </year>
Reference-contexts: If not, I encourage reading at least A Gentle Introduction to Haskell <ref> [HF92] </ref> before proceeding.
Reference: [HMGW96] <author> P. Hudak, T. Makucevich, S. Gadde, and B. Whong. </author> <title> Haskore music notation an algebra of music. </title> <journal> Journal of Functional Programming, </journal> <volume> 6(3), </volume> <month> June </month> <year> 1996. </year> <note> available via ftp://nebula.systemsz.cs.yale.edu/pub/yale-fp/papers/haskore/hmn-lhs.ps. </note>
Reference-contexts: There is no supreme theory of music that dictates my decisions, and what I present is actually one of several versions that we have developed (this version is much richer than the one described in <ref> [HMGW96] </ref>; it is the "Haskore in practice" version alluded to in Section 6 of that paper). I believe this version is suitable for many practical purposes, but the reader may wish to modify it to better satisfy her intuitions and/or application.
Reference: [HS92] <author> G. Haus and A. Sametti. Scoresynth: </author> <title> A system for the synthesis of music scores based on petri nets and a music algebra. In Denis Baggi, editor, Computer Generated Music. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year> <month> 41 </month>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [IMA90] <institution> Midi 1.0 detailed specification: </institution> <note> Document version 4.1.1, </note> <month> February </month> <year> 1990. </year>
Reference-contexts: I also assume some familiarity with equational reasoning; an excellent introductory text on this is [BW88]. 2 The Architecture of Haskore structures from the "music platform"|it is desirable for Haskore compositions to run equally well as conventional midi-files <ref> [IMA90] </ref>, NeXT MusicKit score files [JB91], and csound score files [Ver86], and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem.
Reference: [JB91] <author> D. Jaffe and L. Boynton. </author> <title> An overview of the sound and music kits for the NeXT computer. </title> <editor> In S.T. Pope, editor, </editor> <booktitle> The Well-Tempered Object, </booktitle> <pages> pages 107-118. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: I also assume some familiarity with equational reasoning; an excellent introductory text on this is [BW88]. 2 The Architecture of Haskore structures from the "music platform"|it is desirable for Haskore compositions to run equally well as conventional midi-files [IMA90], NeXT MusicKit score files <ref> [JB91] </ref>, and csound score files [Ver86], and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem. This independence is accomplished by having abstract notions of musical object, player, instrument, and performance that are eventually mapped down to a particular music platform.
Reference: [OFLB94] <author> O. Orlarey, D. Fober, S. Letz, and M. Bilton. </author> <title> Lambda calculus and music calculi. </title> <booktitle> In Proceedings of International Computer Music Conference. Int'l Computer Music Association, </booktitle> <year> 1994. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here. <p> None of them (perhaps surprisingly) are based on a pure functional language, with one exception: the recent work done by Orlarey et al. at GRAME <ref> [OFLB94] </ref>, which uses a pure lambda calculus approach to music description, and bears a strong resemblance to our effort (but unfortunately has not been implemented).
Reference: [Sch83] <author> B. Schottstaedt. </author> <title> Pla: A composer's idea of a language. </title> <journal> Computer Music Journal, </journal> <volume> 7(1) </volume> <pages> 11-20, </pages> <year> 1983. </year>
Reference-contexts: 0 m :+: Rest 0 m Rest 0 :+: m m :=: Rest 0 m Rest 0 :=: m Exercise 9 Establish the validity of each of the above axioms. 30 9 Related and Future Research Many proposals have been put forth for programming languages targeted for computer music composition <ref> [Dan89, Sch83, Col84, AK92, DFV92, HS92, CR84, OFLB94] </ref>, so many in fact that it would be difficult to describe them all here.
Reference: [Ver86] <author> B. Vercoe. Csound: </author> <title> A manual for the audio processing system and supporting programs. </title> <type> Technical report, </type> <institution> MIT Media Lab, </institution> <year> 1986. </year> <month> 42 </month>
Reference-contexts: I also assume some familiarity with equational reasoning; an excellent introductory text on this is [BW88]. 2 The Architecture of Haskore structures from the "music platform"|it is desirable for Haskore compositions to run equally well as conventional midi-files [IMA90], NeXT MusicKit score files [JB91], and csound score files <ref> [Ver86] </ref>, and to print Haskore compositions in traditional notation using the CMN (Common Music Notation) subsystem. This independence is accomplished by having abstract notions of musical object, player, instrument, and performance that are eventually mapped down to a particular music platform.
References-found: 19

