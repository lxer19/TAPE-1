URL: http://www-graphics.stanford.edu/papers/vqtexture/paper.ps
Refering-URL: http://www-graphics.stanford.edu/papers/vqtexture/
Root-URL: http://www.cs.stanford.edu
Title: Rendering from Compressed Textures  
Author: Andrew C. Beers, Maneesh Agrawala, and Navin Chaddha 
Affiliation: Computer Science Department Computer Systems Laboratory Stanford University Stanford University  
Abstract: We present a simple method for rendering directly from compressed textures in hardware and software rendering systems. Textures are compressed using a vector quantization (VQ) method. The advantage of VQ over other compression techniques is that textures can be decompressed quickly during rendering. The drawback of using lossy compression schemes such as VQ for textures is that such methods introduce errors into the textures. We discuss techniques for controlling these losses. We also describe an extension to the basic VQ technique for compressing mipmaps. We have observed compression rates of up to 35 : 1, with minimal loss in visual quality and a small impact on rendering time. The simplicity of our technique lends itself to an efficient hardware implementation. CR categories: I.3.7 [Computer Graphics]: 3D Graphics and Realism Texture; I.4.2 [Image Processing]: Compression Coding 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kurt Akeley. </author> <title> RealityEngine graphics. </title> <booktitle> In Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <volume> volume 27, </volume> <pages> pages 109-116, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: In hardware systems supporting real-time texture mapping, textures are generally placed in dedicated memory that can be accessed quickly as pixels are generated. In some hardware systems, textures are replicated in memory to facilitate fast parallel access <ref> [1] </ref>. Because texture memory is a limited resource in these systems, it can be consumed quickly. Although memory concerns are less severe for software rendering systems since textures are stored in main memory, there are advantagesto conserving texture memory.
Reference: [2] <author> N. Chaddha, P. Chou, and T. Meng. </author> <title> Scalable compressionbased on tree structured vector quantization of perceptually weighted generic block, lapped and wavelet transforms. </title> <booktitle> IEEE International Conference on Image Processing, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: Designing codebooks currently requires some experimentation with the various VQ encoding parameters. While an automatic method for designing optimal codebooks would be useful, designing a measure of optimality is difficult. There has been some work on designing perceptual distortion measures to minimize such distortions in compressed images <ref> [2] </ref>. For texture mapping however, distortion in the rendered scene, not the compressed textures, must be minimized, so the distortion measure must use information about how the textures will be mapped into the scene.
Reference: [3] <author> Lawrence French. </author> <title> Toy story. </title> <journal> Cinefantastique, </journal> <volume> 27(2) </volume> <pages> 36-37, </pages> <year> 1995. </year>
Reference-contexts: For a particular scene, the memory required by the textures is dependent on the number of textures and the size of each texture. In some cases, the size of the textures may exceed the size of the scene geometry <ref> [3] </ref>. In hardware systems supporting real-time texture mapping, textures are generally placed in dedicated memory that can be accessed quickly as pixels are generated. In some hardware systems, textures are replicated in memory to facilitate fast parallel access [1].
Reference: [4] <author> A. Gersho and R. M. Gray. </author> <title> Vector Quantizationand Signal Compression. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: The centroids of the groups are chosen as the new set of codewords, and the process repeats until the set of codewords converges. Although this Full Search approach is locally optimal, generating the codebook is computationally expensive. A faster technique for producing the codebook is Tree Structured VQ <ref> [4] </ref>. This approach designs the codebook recursively, organizing the code-book as a binary tree. The first step is to find the centroid of the set of training vectors, which becomes the root level codeword. <p> Note that once the child codewords have been chosen, the training vectors are permanently grouped with the nearest codeword. Since codewords cannot jump across subtrees, this approach is not guaranteed to produce the locally optimal codebook, but is substantially faster than Full Search VQ <ref> [4] </ref>. Once the codebook has been generated we encode a texture by mapping each block of pixels to the nearest codeword. With Full Search VQ we exhaustively search for the nearest codeword. With Tree Structured VQ, we can traverse the codebook tree always taking the path with the closest codeword. <p> The drawback of our mipmap encoding approach is that the quality of the compressed level 1 and level 2 mipmaps can not be any better than the quality of the compressed level 0 mipmap, even though smaller sized codewords are used for levels 1 and 2. Interpolative VQ [5] <ref> [4] </ref> is an alternative technique for compressing image pyramids such as mipmaps. The general approach is to perform VQ on a subsampled image, decompress the image, interpolate it up to the next larger image size and VQ the difference between the interpolated image and the original.
Reference: [5] <author> H.-M. Hang and B. </author> <title> Haskell. Interpolative vector quantization of color images. </title> <booktitle> In TCOM, </booktitle> <pages> pages 465-470, </pages> <year> 1987. </year>
Reference-contexts: The drawback of our mipmap encoding approach is that the quality of the compressed level 1 and level 2 mipmaps can not be any better than the quality of the compressed level 0 mipmap, even though smaller sized codewords are used for levels 1 and 2. Interpolative VQ <ref> [5] </ref> [4] is an alternative technique for compressing image pyramids such as mipmaps. The general approach is to perform VQ on a subsampled image, decompress the image, interpolate it up to the next larger image size and VQ the difference between the interpolated image and the original.
Reference: [6] <author> Paul S. Heckbert. </author> <title> Color image quantizationfor frame buffer display. </title> <booktitle> In Computer Graphics (SIGGRAPH '82 Proceedings), </booktitle> <volume> volume 16, </volume> <pages> pages 297-307, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The texture can be decompressed by looking up each block of pixels in the codebook via its index. In [9], such an indexed-lookup technique is used to page in uncompressed textures from disk on demand. Color quantization algorithms such as the Median Cut Algorithm <ref> [6] </ref> use this same indexed-lookup technique for representing 24 bit images with 8 bits per pixel. A method for compressing 3D volumes using VQ and a fast technique for volume rendering directly from this compressed format is presented in [8].
Reference: [7] <author> Paul S. Heckbert. </author> <title> Survey of texture mapping. </title> <editor> In M. Green, editor, </editor> <booktitle> Proceedings of Graphics Interface '86, </booktitle> <pages> pages 207-212, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Texture mapping is employed on high-end graphics workstations and rendering systems to increase the visual complexity of a scene without increasing its geometric complexity <ref> [7] </ref>. Texture mapping allows a rendering system to map an image onto simple scene geometry to make objects look much more complex or realistic than the underlying geometry. Recently, texture mapping hardware has become available on lower-end workstations, personal computers, and home game systems.
Reference: [8] <author> P. Ning and L. Hesselink. </author> <title> Fast volume renderingof compressed data. </title> <editor> In G. Niel-son and D. Bergeron, editors, </editor> <booktitle> Proc. Visualization'93, pages 11-18,October 1993. </booktitle>
Reference-contexts: Color quantization algorithms such as the Median Cut Algorithm [6] use this same indexed-lookup technique for representing 24 bit images with 8 bits per pixel. A method for compressing 3D volumes using VQ and a fast technique for volume rendering directly from this compressed format is presented in <ref> [8] </ref>. While we will describe exactly how to encode textures using VQ in section 4, we first show how to render directly from VQ compressed textures. The rendering algorithm is outlined in the following algorithm.
Reference: [9] <author> Darwyn Peachey. </author> <title> Texture on demand. </title> <type> Technical report, </type> <institution> Pixar, </institution> <year> 1990. </year>
Reference-contexts: This set of indices is called the index map. The texture can be decompressed by looking up each block of pixels in the codebook via its index. In <ref> [9] </ref>, such an indexed-lookup technique is used to page in uncompressed textures from disk on demand. Color quantization algorithms such as the Median Cut Algorithm [6] use this same indexed-lookup technique for representing 24 bit images with 8 bits per pixel.
Reference: [10] <author> W.B. Pennebaker and J.L. Mitchell. </author> <title> JPEG Still Image Data Compression Standard. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1993. </year>
Reference-contexts: With VQ, decompression is performed through table lookups and is very fast. A transform coding scheme such as JPEG <ref> [10] </ref> is more expensive because extracting the value of a texture pixel would require an expensive inverse Discrete Cosine Transform (DCT) computation. Random Access. It is difficult to know in advance how a renderer will access a texture.
Reference: [11] <author> Lance Williams. Pyramidal parametrics. </author> <booktitle> In Computer Graphics (SIGGRAPH'83 Proceedings), </booktitle> <volume> volume 17, </volume> <pages> pages 1-11, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: A single codebook may be enough to characterize all of the textures in a scene. If one codebook results in too many compression artifacts, we can group the textures and design one codebook per group. 6 Mipmapping An effective way to resample textures is by using a mipmap <ref> [11] </ref>. A mipmap stores a texture as an image pyramid, and is designed to allow efficient filtering of a texture. Each mipmap level stores a filtered version of the texture corresponding to a particular image pixel to texture pixel ratio.
Reference: [12] <author> L. Ziv and A. Lempel. </author> <title> A universal algorithm for sequential data compression. </title> <journal> IEEE Trans. Inform.Theory, Vol.IT-23, </journal> <volume> (3), </volume> <month> May </month> <year> 1977. </year>
Reference-contexts: Unlike variable rate codes, fixed-rate VQ represents each block of texture pixels with a fixed number of bits. Since the number of bits is known in advance, indexing any particular pixel is fast and easy. Compression Rate and Visual Quality. While lossless compression schemes, such as Lempel-Ziv compression <ref> [12] </ref>, will perfectly preserve a texture, they achieve much lower compression rates than lossy schemes. However, using a lossy compression scheme introduces errors into the textures. With VQ, there are many parameters that can be used to control these errors.
References-found: 12

