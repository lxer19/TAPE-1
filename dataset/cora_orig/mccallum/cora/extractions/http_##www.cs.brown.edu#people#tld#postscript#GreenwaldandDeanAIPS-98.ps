URL: http://www.cs.brown.edu/people/tld/postscript/GreenwaldandDeanAIPS-98.ps
Refering-URL: http://www.cs.brown.edu/research/ai/publications/
Root-URL: http://www.cs.brown.edu/
Email: lgg@linc.cis.upenn.edu  tld@cs.brown.edu  
Title: A Conditional Scheduling Approach to Designing Real-Time Systems  
Author: Lloyd Greenwald Thomas Dean 
Address: 200 S. 33rd St., Philadelphia, PA 19104-6389  Box 1910, Providence, RI 02912  
Affiliation: Department of Computer and Information Science University of Pennsylvania  Department of Computer Science Brown University  
Abstract: We present an approach to designing real-time systems based on dynamically sequencing condition-specific task-execution schedules. A system that dynamically alters its real-time execution component provides flexibility in the face of changing on-line conditions. For domains in which real-time response and safety must be guaranteed at design time, achieving this flexibility requires the introduction of new modeling and analysis tools. We provide analytical techniques for validating the behavior of a real-time system designed under our conditional scheduling approach. We demonstrate the approach through the detailed design and analysis of a conditional real-time avionics scheduling solution. This solution involves architectural changes to existing avionics system hardware and relies on predictive models of in-flight dynamics to provide real-time behavior guarantees at design time. The approach described in this paper is an example of the use of a general framework that we have developed for analyzing tradeoffs when designing systems in which an agent with limited computational resources is required to respond in a timely manner to situations arising in a dynamic environment. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Carpenter, T.; Driscoll, K.; Hoyme, K.; and Carciofini, J. </author> <year> 1994. </year> <title> Arinc 659 scheduling: Problem definition. </title> <booktitle> In Proceedings of the 15th IEEE Real-Time Systems Symposium. </booktitle>
Reference: <author> Fohler, G. </author> <year> 1992. </year> <title> Realizing changes of operational modes with a pre run-time scheduled hard real-time system. </title> <booktitle> In Proceedings of the Second International Workshop on Responsive Computer Systems. </booktitle>
Reference: <author> Gat, E. </author> <year> 1991. </year> <title> Integrating reaction and planning in a heterogeneous asynchronous architecture for mobile robot navigation. </title> <journal> SIGART Bulletin 2(4). </journal>
Reference: <author> Georgeff, M. P., and Lansky, A. L. </author> <year> 1987. </year> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings AAAI-87, </booktitle> <pages> 677-682. </pages> <publisher> AAAI. </publisher>
Reference: <author> Gerber, R.; Pugh, W.; and Saksena, M. </author> <year> 1995. </year> <title> Parametric dispatching of hard real-time tasks. </title> <journal> IEEE Transactions on Computers 44(3). </journal>
Reference-contexts: As an alternative, conditional scheduling provides a direct path for extending traditional deterministic methods. Dynamically altering schedules has been discussed in work on mode changes (Sha et al. 1989; Fohler 1992) and parametric dispatching <ref> (Gerber, Pugh, & Saksena 1995) </ref>. A mode change consists of swapping static schedules at execution-time in response to a specific mode change event that triggers the change. Modes and mode change events are specified as part of the design problem.
Reference: <author> Greenwald, L., and Dean, T. </author> <year> 1997. </year> <title> Tradeoffs in the design of on-line systems. </title> <booktitle> In Working Notes of AAAI-97 Workshop on On-Line Search. </booktitle>
Reference-contexts: All rights reserved. schedules. Conditional scheduling is an example of the use of a general framework for analyzing tradeoffs when designing systems in which an agent with limited computational resources is required to respond in a timely manner to situations arising in a dynamic environment <ref> (Greenwald & Dean 1997) </ref>. In a real-time avionics system multiple flight operations, including those critical to the safe operation of the aircraft, share the resources of a distributed multiprocessor system. The schedule for executing flight operations is designed to satisfy traditional robustness requirements concerning safe behavior and time-critical responsiveness. <p> In other words, the frequency at which a flight operation is sampled in the current time interval may affect the in-flight conditions of future time intervals. A detailed discussion of these implications may be found in <ref> (Greenwald 1997) </ref>. Another way to look at the traditional approach to real-time avionics scheduling is to note that, as long as the specified worst-case frequency requirements are achieved by the static solution, safe behavior is guaranteed. <p> Namely, the collection that has been implemented on the schedule server. This collection may be a subset of a larger space of possible schedules C. The theorem does not say anything about the existence of such a subset. Proving that a solution exists in general is NP-complete <ref> (Greenwald 1997) </ref>. Since C 0 includes only those schedules satisfying the resource tradeoffs of the given architecture, the trivial solution of choosing the worst-case schedule (covering all requirements) is not necessarily feasible. <p> However, in this paper we develop a simplified conditional real-time scheduling solution that allow us to combine the executabilty equations and set covering constraints into a single mixed integer linear program (MILP). We may then use standard techniques to determine whether or not real-time behavior may be guaranteed <ref> (Greenwald 1997) </ref>. Let M define the total space available on the schedule server for storing conditional schedules and let B ffi (c S ) define the amount of space required to store conditional schedule c S 2 C on the schedule server. <p> With respect to the conditional real-time avionics scheduling approach, there exist neither conditional frequency models, conditional schedules nor schedule servers. While it is difficult to evaluate the practical benefits of conditional real-time scheduling over traditional static scheduling without such real-world models, in <ref> (Greenwald 1997) </ref> we provide a limited empirical study of these claims. Our results demonstrate that our analytical techniques for evaluating conditional real-time scheduling solutions may be practically applied at design time.
Reference: <author> Greenwald, L. G. </author> <year> 1997. </year> <title> Analysis and Design of On-line Decision-Making Solutions for Time-Critical Planning and Scheduling Under Uncertainty. </title> <type> Ph.D. Dissertation, </type> <institution> Brown University, Providence, RI. </institution>
Reference-contexts: All rights reserved. schedules. Conditional scheduling is an example of the use of a general framework for analyzing tradeoffs when designing systems in which an agent with limited computational resources is required to respond in a timely manner to situations arising in a dynamic environment <ref> (Greenwald & Dean 1997) </ref>. In a real-time avionics system multiple flight operations, including those critical to the safe operation of the aircraft, share the resources of a distributed multiprocessor system. The schedule for executing flight operations is designed to satisfy traditional robustness requirements concerning safe behavior and time-critical responsiveness. <p> In other words, the frequency at which a flight operation is sampled in the current time interval may affect the in-flight conditions of future time intervals. A detailed discussion of these implications may be found in <ref> (Greenwald 1997) </ref>. Another way to look at the traditional approach to real-time avionics scheduling is to note that, as long as the specified worst-case frequency requirements are achieved by the static solution, safe behavior is guaranteed. <p> Namely, the collection that has been implemented on the schedule server. This collection may be a subset of a larger space of possible schedules C. The theorem does not say anything about the existence of such a subset. Proving that a solution exists in general is NP-complete <ref> (Greenwald 1997) </ref>. Since C 0 includes only those schedules satisfying the resource tradeoffs of the given architecture, the trivial solution of choosing the worst-case schedule (covering all requirements) is not necessarily feasible. <p> However, in this paper we develop a simplified conditional real-time scheduling solution that allow us to combine the executabilty equations and set covering constraints into a single mixed integer linear program (MILP). We may then use standard techniques to determine whether or not real-time behavior may be guaranteed <ref> (Greenwald 1997) </ref>. Let M define the total space available on the schedule server for storing conditional schedules and let B ffi (c S ) define the amount of space required to store conditional schedule c S 2 C on the schedule server. <p> With respect to the conditional real-time avionics scheduling approach, there exist neither conditional frequency models, conditional schedules nor schedule servers. While it is difficult to evaluate the practical benefits of conditional real-time scheduling over traditional static scheduling without such real-world models, in <ref> (Greenwald 1997) </ref> we provide a limited empirical study of these claims. Our results demonstrate that our analytical techniques for evaluating conditional real-time scheduling solutions may be practically applied at design time.
Reference: <author> Hoyme, K., and Driscoll, K. </author> <year> 1993. </year> <title> Safebus(tm). </title> <journal> IEEE Aerospace Electronics and Systems Magazine 34-39. </journal>
Reference: <author> Lyons, D. M., and Hendriks, A. J. </author> <year> 1994. </year> <title> Testing incremental adaptation. </title> <booktitle> In Second International Conference on AI Planning Systems. </booktitle>
Reference: <author> Musliner, D. J. </author> <year> 1993. </year> <title> CIRCA: The Cooperative Intelligent Real-Time Control Architecture. </title> <type> Ph.D. Dissertation, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI. </address>
Reference-contexts: Many systems have been designed that modify plans incrementally on-line (Georgeff & Lansky 1987; Lyons & Hendriks 1994). A typical architectural design is to combine fast reactive components with slower deliberative components (Gat 1991; Simmons 1991). In CIRCA <ref> (Musliner 1993) </ref>, a deliberative on-line planner constructs real-time task-execution schedules that are individually provably safe. Applying intelligent planning and scheduling solutions in real-time environments requires developing new modeling and analysis tools. We develop the conditional scheduling approach to designing and analyzing real-time systems.
Reference: <author> Sha, L.; Rajkumar, R.; Lehoczky, J.; and Ramam-ritham, K. </author> <year> 1989. </year> <title> Mode change protocols for priority-driven preemptive scheduling. </title> <booktitle> Real-Time Systems 1(3) </booktitle> <pages> 243-265. </pages>
Reference: <author> Simmons, R. </author> <year> 1991. </year> <title> Coordinating planning, perception, and action for mobile robots. </title> <journal> SIGART Bulletin 2(4). </journal>
References-found: 12

