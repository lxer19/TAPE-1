URL: ftp://ftp.cs.ucsd.edu/pub/team/consensusInAsyncSystems.ps.Z
Refering-URL: http://www.cs.ucsd.edu/users/flaviu/publications.html
Root-URL: http://www.cs.ucsd.edu
Email: e-mail: fcfetzer,flaviug@cs.ucsd.edu  
Title: On the Possibility of Consensus in Asynchronous Systems  
Author: Christof Fetzer and Flaviu Cristian 
Date: December 3, 1995  
Web: http://www-cse.ucsd.edu/users/fcfetzer,flaviug CSE95-415  
Address: La Jolla, CA 920930114  
Affiliation: Department of Computer Science Engineering University of California, San Diego  
Abstract: We demonstrate that the leader election and consensus problems are solvable in a timed asynchronous distributed system provided a majority of processes are always eventually able to communicate in a timely manner for a sufficiently long time. Failures and recoveries affecting the other processes and the communications between them do not prevent consensus. The timed asynchronous system model describes with accuracy existing asynchronous distributed systems such as those based on networks of workstations. We describe two protocols that implement leadership and consensus services and prove their correctness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Chandra, V. Hadzilacos, and S. Toueg. </author> <title> The weakest failure detector for solving consensus. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 147-158, </pages> <month> Aug </month> <year> 1992. </year>
Reference-contexts: To overcome the theoretical impossibility of solving these problems in time-free asynchronous systems, several authors have investigated mechanisms that add a "sufficient amount of synchrony" to the time-free asynchronous system model to allow deterministic implementations for these basic distributed services <ref> [9, 10, 1] </ref>. This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. [3]), was named in [8] and is formally defined in [7]. <p> Recent research has explored failure detectors such as the "weakest failure detector" <ref> [1] </ref> for implementing consensus. Failure detectors do not seem appropriate for describing timed systems since they are time-free. The always eventually majority-stable progress assumption is strictly weaker than the process and communication assumptions of the global stabilization model [9], the model that resembles ours the most. <p> The contributions of this paper are as follows. Unlike in other approaches that introduce partial synchrony to solve consensus <ref> [9, 10, 1] </ref>, the timed asynchronous system model allows processes to restart after they have crashed. Restarts are essential in fault-tolerant systems to provide a high degree of availability and reliability. <p> Restarts are essential in fault-tolerant systems to provide a high degree of availability and reliability. The majority stability progress assumption used in this paper is strictly weaker than the assumptions of the global stabilization model [10] which resembles ours the most. A comparison with the weakest failure detector <ref> [1] </ref> is hard to make because the model considered in [1] is time-free, assumes that properties of failure detectors eventually always hold, and does not include process restarts. <p> The majority stability progress assumption used in this paper is strictly weaker than the assumptions of the global stabilization model [10] which resembles ours the most. A comparison with the weakest failure detector <ref> [1] </ref> is hard to make because the model considered in [1] is time-free, assumes that properties of failure detectors eventually always hold, and does not include process restarts.
Reference: [2] <author> T. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost. </author> <title> Impossibility of group membership in asynchronous systems. </title> <type> Technical Report 95-1533, </type> <institution> Computer Science Department, Cornell University, Ithaca, </institution> <year> 1995. </year>
Reference-contexts: Despite the existence of the above negative results, fault-tolerant applications often need to rely on services such as leader election or consensus. For example, applications using a group-membership service implicitly need to solve consensus since processes need to agree on the current membership (see <ref> [2] </ref>). To overcome the theoretical impossibility of solving these problems in time-free asynchronous systems, several authors have investigated mechanisms that add a "sufficient amount of synchrony" to the time-free asynchronous system model to allow deterministic implementations for these basic distributed services [9, 10, 1].
Reference: [3] <author> F. Cristian. </author> <title> Probabilistic clock synchronization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 146-158, </pages> <year> 1989. </year>
Reference-contexts: This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. <ref> [3] </ref>), was named in [8] and is formally defined in [7]. We call conditions which restrict the pace of the processes and the transmission delay of messages progress assumptions. Several progress assumptions are reasonable to investigate for timed asynchronous systems.
Reference: [4] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: For example, in the membership protocols given in <ref> [4] </ref> there is no upper bound placed on the the number of processes which can be crashed. 2 2.1 Assumptions on Processes Non-crashed processes undergo state transitions in response to trigger events such as message receptions and timeouts. <p> The termination conditions for synchronous systems are in general time bounded in the sense that they require that operation executions terminate in a bounded amount of time (see for example <ref> [4] </ref>). The termination conditions for a timed asynchronous system are (conditionally) timed: in an always eventually majority-stable system they have the form: when a process p is majority-stable in an interval [t; t + E], then an operation at p started by time t must terminate by t + E. <p> In fault-tolerant systems this kind of leader election is of limited interest because it is often required that a new leader be known in a bounded amount of time after the current leader has crashed. This requirement has lead to the definition of the "highly available leadership" service in <ref> [4] </ref>. To solve the consensus problem, we define a variant of highly available leadership service that we call the "rotating leadership" service. In this new service, each process is given a chance to be leader for a limited amount of time before the leadership is passed on to another process.
Reference: [5] <author> F. Cristian. </author> <title> Understanding fault-tolerant distributed systems. </title> <journal> Communications of ACM, </journal> <volume> 34(2) </volume> <pages> 56-78, </pages> <month> Feb </month> <year> 1991. </year>
Reference-contexts: Indeed, the specification of the services provided by such systems describes not only the state transitions and outputs that must occur in response to operation invocations, but also a real-time interval within which such state transitions and outputs must be observed <ref> [5] </ref>. Recent research has explored failure detectors such as the "weakest failure detector" [1] for implementing consensus. Failure detectors do not seem appropriate for describing timed systems since they are time-free. <p> All services provided by the system are timed: their specification describes not only the state transitions and outputs that must occur in response to operation invocations, but also a real-time interval within which such state transitions and outputs must be observed <ref> [5] </ref>. This allows clients of a service to associate a timeout delay with each of the provided operations. <p> As for timeout delays, the bound is chosen so as to make the probability of performance failures acceptably low. For example, a timely process waiting for messages will react to a message arrival within real-time units. We assume that processes have crash / performance failure semantics <ref> [5] </ref>. That is, the execution of a process can be interrupted, delayed, or terminated by the underlying operating system, but all results that a process outputs are functionally correct. Processes are in one of the following three states: down, restarting, and up. Initially, all processes are in state down. <p> Hence, we will not consider process scheduling delays in equations we will derive below. We assume that the datagram and broadcast services have omission/performance failure semantics <ref> [5] </ref>. That is, the datagram or broadcast service can fail to deliver a message or can fail to deliver it in a timely manner, but if a message is delivered, it is uncorrupted.
Reference: [6] <author> F. Cristian and C. </author> <title> Fetzer. Fault-tolerant internal clock synchronization. </title> <booktitle> In Proceedings of the Thirteenth Symposium on Reliable Distributed Systems, Dana Point, </booktitle> <address> Ca., </address> <month> Oct </month> <year> 1994. </year>
Reference-contexts: The processes measure the round-trip times of the message pairs used to read remote clocks to calculate an upper bound on the clock reading error in a manner similar to that described in <ref> [6] </ref>. Constant fl is chosen such that a majority-stable process always reads all clocks in the same stable majority successfully. <p> by the round-trip time of the message pair (m q ; m p ) measured with its hardware clock minus the difference between the time p received m q and the time p sent m p plus a small error which is introduced by the drift of the hardware clocks <ref> [6] </ref>. For two processes in the same stable majority, the calculated bound is at most fl because message delays within the same stable majority are bounded by ffi and any two non-crashed hardware clocks drift apart from each other by up to 2R during a time interval of length R.
Reference: [7] <author> F. Cristian and C. </author> <title> Fetzer. Timed asynchronous systems: A formal model. </title> <type> Technical Report CSE95-454, UCSD, </type> <year> 1995. </year> <note> Available via anonymous ftp at cs.ucsd.edu as /pub/team/timedAsynchronousModel.ps.Z. </note>
Reference-contexts: This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. [3]), was named in [8] and is formally defined in <ref> [7] </ref>. We call conditions which restrict the pace of the processes and the transmission delay of messages progress assumptions. Several progress assumptions are reasonable to investigate for timed asynchronous systems. <p> The converse is not true: the crash of a process does not generally affect its hardware clock, which can continue to be correct. We call a distributed system that satisfies the above assumptions on processes, communication services and hardware clocks a timed asynchronous system (see <ref> [7] </ref> for a formal description). 2.4 Progress Assumption Due to the low communication failure rates achievable with current hardware and software technologies, the availability of operating systems supporting soft real-time applications like Solaris 2.x, and the use of load-shed mechanisms, it is reasonable to expect that the computational and communication operations
Reference: [8] <author> F. Cristian and F. Schmuck. </author> <title> Agreeing on processor-group membership in aynchronous distributed systems. </title> <type> Technical Report CSE95-428, </type> <institution> Dept of Computer Science and Engineering, University of California, </institution> <address> San Diego, La Jolla, CA, </address> <year> 1995. </year>
Reference-contexts: This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. [3]), was named in <ref> [8] </ref> and is formally defined in [7]. We call conditions which restrict the pace of the processes and the transmission delay of messages progress assumptions. Several progress assumptions are reasonable to investigate for timed asynchronous systems. <p> Two processes are connected in [s; t] if they are timely during [s; t] and each message sent by one process to the other in [s; t ffi] is received in a timely manner <ref> [8] </ref>. Thus, for connected processes all message transmission delays are at most ffi. If all processes of a majority S are up, timely and pair-wise connected in an interval [s; t], we say that S is a stable majority during [s; t].
Reference: [9] <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchronism needed for distributed consensus. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan </month> <year> 1987. </year>
Reference-contexts: To overcome the theoretical impossibility of solving these problems in time-free asynchronous systems, several authors have investigated mechanisms that add a "sufficient amount of synchrony" to the time-free asynchronous system model to allow deterministic implementations for these basic distributed services <ref> [9, 10, 1] </ref>. This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. [3]), was named in [8] and is formally defined in [7]. <p> Failure detectors do not seem appropriate for describing timed systems since they are time-free. The always eventually majority-stable progress assumption is strictly weaker than the process and communication assumptions of the global stabilization model <ref> [9] </ref>, the model that resembles ours the most. However, the timed asynchronous system model assumes the existence of local hardware clocks. Unlike the other models, the timed asynchronous system model allows crashed processes to recover. This reflects the often used technique of automatically restarting a process that has crashed. <p> The contributions of this paper are as follows. Unlike in other approaches that introduce partial synchrony to solve consensus <ref> [9, 10, 1] </ref>, the timed asynchronous system model allows processes to restart after they have crashed. Restarts are essential in fault-tolerant systems to provide a high degree of availability and reliability.
Reference: [10] <author> C. Dwork, N. Lynch, and L. Stockmeyer. </author> <title> Consensus in the presence of partial synchrony. </title> <journal> Journal of the ACM, </journal> <volume> 35(2) </volume> <pages> 288-323, </pages> <month> Feb </month> <year> 1988. </year>
Reference-contexts: To overcome the theoretical impossibility of solving these problems in time-free asynchronous systems, several authors have investigated mechanisms that add a "sufficient amount of synchrony" to the time-free asynchronous system model to allow deterministic implementations for these basic distributed services <ref> [9, 10, 1] </ref>. This paper investigates under which conditions leader election and consensus services can be implemented in the timed asynchronous system model, a model that has been implicitly in use for some time (e.g. [3]), was named in [8] and is formally defined in [7]. <p> The contributions of this paper are as follows. Unlike in other approaches that introduce partial synchrony to solve consensus <ref> [9, 10, 1] </ref>, the timed asynchronous system model allows processes to restart after they have crashed. Restarts are essential in fault-tolerant systems to provide a high degree of availability and reliability. <p> Restarts are essential in fault-tolerant systems to provide a high degree of availability and reliability. The majority stability progress assumption used in this paper is strictly weaker than the assumptions of the global stabilization model <ref> [10] </ref> which resembles ours the most. A comparison with the weakest failure detector [1] is hard to make because the model considered in [1] is time-free, assumes that properties of failure detectors eventually always hold, and does not include process restarts.
Reference: [11] <author> M. J. Fischer, N. A. Lynch, and M. S. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> Apr </month> <year> 1985. </year>
Reference-contexts: 1 Introduction Most current distributed systems are asynchronous in the sense that they do not guarantee an upper bound on communication delays and process scheduling delays. The "standard" theoretical model <ref> [11] </ref> used to describe asynchronous distributed systems is characterized by the following two properties: (1) each non-crashed process executes with a finite, positive speed but there exists no bound on the relative speed of two processes, and (2) message delays between non-crashed processes are finite but unbounded. <p> We call this model time-free since it has no notion of time. Since in time-free asynchronous systems processes cannot correctly distinguish between crashed and merely slow but correct processes, basic services like consensus and leader election services cannot be implemented by deterministic algorithms <ref> [11] </ref>. Despite the existence of the above negative results, fault-tolerant applications often need to rely on services such as leader election or consensus. For example, applications using a group-membership service implicitly need to solve consensus since processes need to agree on the current membership (see [2]). <p> Hence, p will become the leader for LD clock-time units in time-slot i. 2 6 Consensus In the consensus problem a set of processes has to agree on a single value <ref> [11] </ref>. Each process has an initial value. After a finite number of steps each non-crashed process has to decide on the same value and this value has to be the initial value of at least one of the processes.
Reference: [12] <author> H. Garcia-Molina. </author> <title> Elections in a distributed computing system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(1):49-59, </volume> <month> Jan </month> <year> 1982. </year>
Reference-contexts: implies time-free termination when the system is eventually majority-stable for a sufficient amount of time to allow an operation to terminate. 5 Rotating Leadership The leader election problem requires that (1) a unique process be elected as leader, and (2) eventually all non-crashed processes know the identity of this leader <ref> [12] </ref>. In fault-tolerant systems this kind of leader election is of limited interest because it is often required that a new leader be known in a bounded amount of time after the current leader has crashed.
Reference: [13] <author> H. Kopetz and G. Grundsteidl. Ttp: </author> <title> A time-triggered protocol for fault-tolerant real-time systems. </title> <booktitle> In Proc. of 23d Symp. on Fault-Tolerant Computing, </booktitle> <pages> pages 524-533, </pages> <address> Toulouse, France, </address> <month> Jun </month> <year> 1993. </year> <month> 14 </month>
Reference-contexts: Another advantage of the timed asynchronous system model is that the protocols designed for timed asynchronous systems are also usable in synchronous systems with blackouts <ref> [13] </ref>.
References-found: 13

