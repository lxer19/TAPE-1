URL: http://www.cis.ohio-state.edu/~rjmiller/papers/Mil98.ps
Refering-URL: http://www.cis.ohio-state.edu/~rjmiller/Research/hetero.html
Root-URL: http://www.cis.ohio-state.edu
Email: rjmiller@cis.ohio-state.edu  
Phone: Tel: +1 614 292 7027  
Title: Using Schematically Heterogeneous Structures  
Author: Renee J. Miller 
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science Ohio State University  
Abstract: Schematic heterogeneity arises when information that is represented as data under one schema, is represented within the schema (as metadata) in another. Schematic heterogeneity is an important class of heterogeneity that arises frequently in integrating legacy data in federated or data warehousing applications. Traditional query languages and view mechanisms are insufficient for reconciling and translating data between schematically heterogeneous schemas. Higher order query languages, that permit quantification over schema labels, have been proposed to permit querying and restructuring of data between schematically disparate schemas. We extend this work by considering how these languages can be used in practice. Specifically, we consider a restricted class of higher order views and show the power of these views in integrating legacy structures. Our results provide insights into the properties of restructuring transformations required to resolve schematic discrepancies. In addition, we show how the use of these views permits schema browsing and new forms of data independence that are important for global information systems. Furthermore, these views provide a framework for integrating semi-structured and unstructured queries, such as keyword searches, into a structured querying environment. We show how these views can be used with minimal extensions to existing query engines. We give conditions under which a higher order view is usable for answering a query and provide query translation algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, H. Garcia-Molina, Y. Papakonstanti-nou, and R. Yerneni. </author> <title> Fusion Queries over Internet Databases. </title> <type> Technical Report unpublished manuscript, </type> <institution> Stanford University, </institution> <year> 1997. </year>
Reference: [2] <author> R. Ahmed, P. DeSmedt, W. Du, W. Kent, M. A. Ketabchi, W. A. Litwin, A. Rafii, and M. C. Shan. </author> <title> The Pegasus Heterogeneous Multidatabase System. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 19-27, </pages> <month> December </month> <year> 1991. </year>
Reference: [3] <author> Y. Arens, C. Y. Chee, C. N. Hsu, and C. A. Knoblock. </author> <title> Retrieving and Integrating Data from Multiple Information Sources. </title> <journal> Intl. J. of Intelligent and Cooperative Info. Systems, </journal> <volume> 2(2) </volume> <pages> 127-158, </pages> <year> 1993. </year>
Reference-contexts: Under traditional integration paradigms [5], the integrated view depends directly on the source schemas. So we adopt the approach of <ref> [3, 26] </ref>, in which the integrated schema 192 select D, P from s1::stock T, T.company C, T.date D, T.price P v5 create view s3::stock (date, C) as v6 create view A::avg (date, avgprice) as select D, avg (P) from s3::stock T, s2::stock-&gt; A, T.A P, T.date D group by A, D
Reference: [4] <author> T. Barsalou and D. Gangopadhyay. </author> <title> M(DM): An Open Framework for Interoperation of Multimodel Multi-database Systems. </title> <booktitle> In Proc. of the Int'l Conf. on Data Eng., </booktitle> <pages> pages 218-227, </pages> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference: [5] <author> C. Batini, M. Lenzerini, and S. B. Navathe. </author> <title> A Comparative Analysis of Methodologies for Database Schema Integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4) </volume> <pages> 323-364, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: As we will show the restructuring properties of dynamic views are very powerful. 3.2 Architecture Definition The requirements outlined in Section 1 necessitate the use of an integration that is independent of specific source structures. Under traditional integration paradigms <ref> [5] </ref>, the integrated view depends directly on the source schemas.
Reference: [6] <author> M. L. Brodie and M. Stonebraker. </author> <title> Migrating Legacy Systems: Gateways, Interfaces, and the Incremental Approach. </title> <publisher> Morgan Kaufmann Series in Data Mngmt. </publisher> <editor> Sys., Jim Gray, Ed. </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference: [7] <author> M. J. Carey, L. M. Haas, P. M. Schwarz, M. Arya, W. F. Cody, R. Fagin, M. Flickner, A. W. Luniewski, W. Niblack, D. Petkovic, J. Thomas, J. H. Williams, and E. L. Wimmers. </author> <title> Towards Heterogeneous Multimedia Information Systems: The Garlic Approach. </title> <booktitle> In Proc. of the Fifth Int'l IEEE Wksp. on Research Issues in Data Eng. (RIDE-95): Distributed Object Mngmt., </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference: [8] <author> S. Chaudhuri, R. Krishnamurthy, S. Potamianos, and K. Shim. </author> <title> Optimizing Queries with Materialized Views. </title> <booktitle> In Proc. of the Int'l Conf. on Data Eng., </booktitle> <pages> pages 190-200. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: However, they do not address the issue of optimizing queries over a set of views. For SPJ queries and views, this issue has been addressed <ref> [8, 37] </ref> by extending the common dynamic programming style optimizer [34] to consider plans using views. Two primary extensions are necessary. First, in addition to access methods to base relation, the optimizer must consider the use of views to build a query plan. <p> A conventional optimizer begins by finding execution plans for single relations, then iteratively finds execution plans for successively larger portions of a query. In the presence of materialized views or indices described by views, the initial set of access plans is extended to include these views. Chaudhuri et al <ref> [8] </ref> show how for SPJ views, a simple data structure can be used to record the portion of the query answered by the view.
Reference: [9] <author> S. Chaudhuri and M. Y. Vardi. </author> <title> Optimization of Real Conjunctive Queries. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Database Systems (PODS), </booktitle> <year> 1993. </year>
Reference-contexts: These results generalize earlier work on conjunctive queries with set and multi-set semantics <ref> [25, 9] </ref>. We begin with a few definitions. Definition 4.1 Queries Q1 and Q2 are set equivalent if they compute the same set of answers for any database. Queries Q1 and Q2 are multi-set equivalent if they compute the same multi-set of answers for any database.
Reference: [10] <author> S. Chawathe, H. Garcia-Molina, J. Hammer, K. Ire-land, Y. Papakonstantinou, J. Ullman, and J. Widom. </author> <title> The TSIMMIS Project: Integration of Heterogeneous Information Sources. </title> <booktitle> In Proc. of the 100th Anniversary Meeting of the Information Processing Society of Japan(IPSJ), </booktitle> <pages> pages 7-18, </pages> <address> Tokyo, Japan, </address> <month> October </month> <year> 1994. </year>
Reference: [11] <author> W. Chen, M. Kifer, and D. S. Warren. </author> <title> HiLog as a Platform for Database Languages. </title> <booktitle> In Int'l Workshop on Database Programming Languages, </booktitle> <pages> pages 315-329, </pages> <address> Gleneden Beach, OR, </address> <month> June </month> <year> 1989. </year> <month> 199 </month>
Reference: [12] <author> E.F Codd and S. B. Codd. </author> <title> Providing OLAP (On-line Analytical Processing) to User-Analysts: An IT Mandate. </title> <type> Technical report, </type> <institution> E.F. Codd and Associates, </institution> <year> 1994. </year>
Reference: [13] <author> U. Dayal and H. Y. Hwang. </author> <title> View Definition and Generalization for Database Integration in a Multidatabase System. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-10(6):628-644, </volume> <month> November </month> <year> 1984. </year>
Reference: [14] <author> J. Gary, A. Bosworth, A. Layman, and H. Pirahesh. </author> <title> Data Cube: A Relational Aggregation Operator Generalizing Group-By, </title> <booktitle> Cross-Tab, and Sub-Totals. In Proc. of the Int'l Conf. on Data Eng., </booktitle> <pages> pages 152-159, </pages> <year> 1996. </year>
Reference: [15] <author> R. Hull. </author> <title> Relative Information Capacity of Simple Relational Database Schemata. </title> <journal> Society for Industrial and Applied Mathematics (SIAM) Journal of Computing, </journal> <volume> 15(3) </volume> <pages> 856-886, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: That is, for each instance of r there is a unique instance of the view. Intuitively, this means that the restructuring done to create the view does not lose any information <ref> [15] </ref>. We can use this intuition when considering whether a query can be answered using a dynamic view with a relation variable. The query defining the view may (and probably will) lose information, but the restructuring provided by the relation variable will not augment this loss.
Reference: [16] <author> R. Hull. </author> <title> Managing Semantic Heterogeneity in Databases: A Theoretical Perspective. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Database Systems (PODS), </booktitle> <pages> pages 51-61, </pages> <year> 1997. </year>
Reference: [17] <author> D. Van Gucht J. Van den Bussche and G. Vossen. </author> <title> Reflective Programming in the Relational Algebra. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Database Systems (PODS), </booktitle> <pages> pages 17-25, </pages> <year> 1993. </year>
Reference: [18] <author> V. Kashyap and A. Sheth. </author> <title> Semantic and Schematic Similarities between Database Objects: A Context-based Approach. </title> <booktitle> The Int'l Journal on Very Large Data Bases, </booktitle> <volume> 5(4) </volume> <pages> 276-304, </pages> <month> December </month> <year> 1996. </year>
Reference: [19] <author> W. Kent. </author> <title> The Many Forms of a Single Fact. </title> <booktitle> In Proc. of IEEE Int'l Computer Conf. (COMPCON), </booktitle> <pages> pages 438-443, </pages> <year> 1989. </year>
Reference-contexts: Many of the more than thirty representations for a single data fact, enumerated by Kent result from some type of schematic heterogeneity <ref> [19] </ref>. Despite its prevalence, and despite the plethora of work on enumerating and categorizing types of schematic heterogeneity, no systematic study of how this schematically heterogeneous structures can be used and queried in practice has been undertaken. We have provided a first step in such a study.
Reference: [20] <author> M. Kifer, W. Kim, and Y. Sagiv. </author> <title> Querying Object-Oriented Databases. </title> <booktitle> In ACM SIGMOD Int'l Conf. on the Management of Data, </booktitle> <pages> pages 393-402, </pages> <year> 1992. </year>
Reference: [21] <author> W. Kim and J. Seo. </author> <title> Classifying Schematic and Data Heterogeneity in Multidatabase Systems. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 12-18, </pages> <month> December </month> <year> 1991. </year>
Reference: [22] <author> R. Krishnamurthy, W. Litwin, and W. Kent. </author> <title> Language Features for Interoperability of Databases with Schematic Discrepancies. </title> <booktitle> In ACM SIGMOD Int'l Conf. on the Management of Data, </booktitle> <pages> pages 40-49, </pages> <year> 1991. </year>
Reference-contexts: introduction. Several proposals have consider the definition of higher order views for defining integrated views <ref> [22, 24] </ref>. We build on this work to consider how these views can be used in practice with minimal extensions to query processing engines. 3 Proposed Architecture To present our solution, we will use SchemaSQL, a higher order extension of SQL [24].
Reference: [23] <author> L. Lakshmanam, F. Sadri, and I. N. Subramanian. </author> <title> On the Logical Foundations of Schema Integration and Evolution in Heterogeneous Database Systems. </title> <booktitle> In Proc. of the Int'l. Conf. on Deductive and Object-Oriented Databases, </booktitle> <year> 1993. </year>
Reference: [24] <author> L. Lakshmanam, F. Sadri, and I. N. Subramanian. </author> <title> SchemaSQL A Language for Interoperability in Relational Multi-database Systems. </title> <booktitle> In Proc. of the Int'l Conf. on Very Large Data Bases (VLDB), </booktitle> <address> Bombay, In-dia, </address> <year> 1996. </year>
Reference-contexts: introduction. Several proposals have consider the definition of higher order views for defining integrated views <ref> [22, 24] </ref>. We build on this work to consider how these views can be used in practice with minimal extensions to query processing engines. 3 Proposed Architecture To present our solution, we will use SchemaSQL, a higher order extension of SQL [24]. <p> We build on this work to consider how these views can be used in practice with minimal extensions to query processing engines. 3 Proposed Architecture To present our solution, we will use SchemaSQL, a higher order extension of SQL <ref> [24] </ref>. We briefly overview the relevant features of SchemaSQL, defining the concept of dynamic views and first order views that will be central to our proposed solution. <p> In this example, suppose s1 contains information about only two companies, coA and coB. Then v5 can be expressed as the following relational query, where denotes the full outer-join. The full semantics of these views is given elsewhere <ref> [24] </ref>.
Reference: [25] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Sri-vastava. </author> <title> Answering Queries Using Views. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Database Systems (PODS), </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: These results generalize earlier work on conjunctive queries with set and multi-set semantics <ref> [25, 9] </ref>. We begin with a few definitions. Definition 4.1 Queries Q1 and Q2 are set equivalent if they compute the same set of answers for any database. Queries Q1 and Q2 are multi-set equivalent if they compute the same multi-set of answers for any database. <p> Theorem 5.1 <ref> [25] </ref> Let Q be an SPJ SQL query and let V be an SPJ SQL view. Then V is set usable in Q if: 1. There exist a variable mapping OE from V to Q. 2.
Reference: [26] <author> A. Y. Levy, A. Rajaraman, and J. J. Ordille. </author> <title> Querying Heterogeneous Information Sources Using Source Descriptions. </title> <booktitle> In Proc. of the Int'l Conf. on Very Large Data Bases (VLDB), </booktitle> <pages> pages 251-262, </pages> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: Under traditional integration paradigms [5], the integrated view depends directly on the source schemas. So we adopt the approach of <ref> [3, 26] </ref>, in which the integrated schema 192 select D, P from s1::stock T, T.company C, T.date D, T.price P v5 create view s3::stock (date, C) as v6 create view A::avg (date, avgprice) as select D, avg (P) from s3::stock T, s2::stock-&gt; A, T.A P, T.date D group by A, D
Reference: [27] <author> W. Litwin and A. Abdellatif. </author> <title> Multidatabase Interoperability. </title> <journal> IEEE Computer, </journal> 19(12) 10-18, December 1986. 
Reference: [28] <author> W. Litwin, M. Ketabchi, and R. Krishnamurthy. </author> <title> First Order Normal Form for Relational Databases and Mul-tidatabases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 20(4), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: For a set of queries Q, a schema is first order if all queries in Q can be written in a first order language such as SQL. This concept is closely related to first order normal form proposed in <ref> [28] </ref>. Schema s2 of Figure 1 may be first order for an application that does statistical analysis on individual company stocks and does not require the ability to issue queries that iterate over all companies.
Reference: [29] <author> R. J. Miller. </author> <title> Using Schematically Heterogeneous Structures: Extended Version. </title> <type> Technical Report OSU-CISRC-3/98-TR09, </type> <institution> Ohio State University, Dept of Computer and Information Science, </institution> <year> 1998. </year>
Reference-contexts: The mapping OE is 1-1 if every variable of Q1 maps to a unique variable of Q2. To simplify the presentation, we assume the integration does not conatin nul values. However, this restriction is not required <ref> [29] </ref>. 5.1 Select-Project-Join Queries We first consider queries involving only select, project and join operations (select, from and where clauses without aggregate functions in SQL), or SPJ queries. The queries may have built-in predicates (; &gt;) used in the where clause of the query. <p> For economy of presentation, we do not present the full details of the mappings and query translation <ref> [29] </ref>. Instead, we present a few examples highlighting the major issues involved in using dynamic views with aggregation to answer queries (which may also include aggregates).
Reference: [30] <author> R. J. Miller, Y. E. Ioannidis, and R. Ramakrishnan. </author> <title> The Use of Information Capacity in Schema Integration and Translation. </title> <booktitle> In Proc. of the Int'l Conf. on Very Large Data Bases (VLDB), </booktitle> <pages> pages 120-133, </pages> <address> Dublin, Ire-land, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: simple dynamic view using a relation variable. create view A 0 (a 1 ; a 2 ; ::; a n ) as select T:a 1 ; T:a 2 ; :::; T:a n from r T, T:a 0 A 0 The query defining the view is an information capacity preserving mapping <ref> [30] </ref>. That is, for each instance of r there is a unique instance of the view. Intuitively, this means that the restructuring done to create the view does not lose any information [15].
Reference: [31] <author> R. J. Miller, O. G. Tsatalos, and J. H. Williams. Data-Web: </author> <title> Customizable Database Publishing for the Web. </title> <journal> IEEE Multimedia, </journal> <volume> 4(4) </volume> <pages> 14-21, </pages> <month> Oct-Dec </month> <year> 1997. </year>
Reference: [32] <author> Y. Papakonstantinou, H. GarciaMolina, and J. Widom. </author> <title> Object Exchange Across Heterogeneous Information Sources. </title> <booktitle> In Proc. of the Int'l Conf. on Data Engineering, </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference: [33] <author> K. A. Ross. </author> <title> Relations with Relation Names as Arguments: Algebra and Calculus. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Database Systems (PODS), </booktitle> <pages> pages 346-353, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference: [34] <author> P. Selinger, M. Astrahan, D. Chamberlin, R. Lorie, and T. Price. </author> <title> Access Path Selection in a Relational Database Management System. </title> <booktitle> In ACM SIGMOD Int'l Conf. on the Management of Data, </booktitle> <pages> pages 23-34, </pages> <year> 1979. </year>
Reference-contexts: However, they do not address the issue of optimizing queries over a set of views. For SPJ queries and views, this issue has been addressed [8, 37] by extending the common dynamic programming style optimizer <ref> [34] </ref> to consider plans using views. Two primary extensions are necessary. First, in addition to access methods to base relation, the optimizer must consider the use of views to build a query plan. These views may in turn describe index structures.
Reference: [35] <author> D. Srivastava, S. Dar, H. V. Jagadish, and A. Y Levy. </author> <title> Answering Queries with Aggregation Using Views. </title> <booktitle> In Proc. of the Int'l Conf. on Very Large Data Bases (VLDB), </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: = 'Sofitel' Q and T2.attribute = 'city' and T2.value = 'Athens' from hotel select T.hid, T.attribute given value create index keywords as inverted by create view hotel (hid, A) as select T.hid, T.value from hotelwords T, hotelwords.attribute A hid attribute valuehotelwords We make use of results by Srivastava et al <ref> [35] </ref> in which views and queries with aggregation and multi-set (bag) semantics are considered. These results generalize earlier work on conjunctive queries with set and multi-set semantics [25, 9]. We begin with a few definitions. <p> We begin with a few definitions. Definition 4.1 Queries Q1 and Q2 are set equivalent if they compute the same set of answers for any database. Queries Q1 and Q2 are multi-set equivalent if they compute the same multi-set of answers for any database. Definition 4.2 <ref> [35] </ref> A view V is set usable (respectively, multi-set usable) in Q if there exists a query Q 0 that is set equivalent (respectively, multi-set equivalent) to Q and Q 0 contains one or more occurrences of V . 4.1 Restructuring using SQL To determining whether a dynamic view can be <p> In <ref> [35] </ref>, the mappings are expressed from columns of V to columns of Q. <p> The queries may have built-in predicates (; &gt;) used in the where clause of the query. In considering whether a view V can be used by Q, one must ensure the following conditions <ref> [35] </ref>. * V does not project out any columns needed in Q * V does not discard any tuples needed by Q 5.1.1 Set Semantics We first state the conditions for an SPJ view to be set usable in answering an SPJ query. <p> In such a mapping, all associations between relevant tuples are preserved. However, multiplicities of tuples are not necessarily preserved. This observation motivates the following result from <ref> [35] </ref>. Theorem 5.3 [35] Let Q be an SPJ query and let V be an SPJ view. Then V is multi-set usable in Q if the conditions of Theorem 5.1 hold and OE is one-to-one. However, the same result does not carry over as directly to dynamic views. <p> In such a mapping, all associations between relevant tuples are preserved. However, multiplicities of tuples are not necessarily preserved. This observation motivates the following result from <ref> [35] </ref>. Theorem 5.3 [35] Let Q be an SPJ query and let V be an SPJ view. Then V is multi-set usable in Q if the conditions of Theorem 5.1 hold and OE is one-to-one. However, the same result does not carry over as directly to dynamic views.
Reference: [36] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> A Data Model and Query Processing Techniques for Scaling Access to Distributed Heterogeneous Databases in Disco. </title> <journal> IEEE Trans on Computers, </journal> <year> 1997. </year>
Reference: [37] <author> O. Tsatalos, M. Solomon, and Y. Ioannidis. </author> <title> The GMAP: A Versatile Tool for Physical Data Independence. </title> <booktitle> The Int'l Journal on Very Large Data Bases, </booktitle> <volume> 5(2), </volume> <month> April </month> <year> 1996. </year> <month> 200 </month>
Reference-contexts: However, they do not address the issue of optimizing queries over a set of views. For SPJ queries and views, this issue has been addressed <ref> [8, 37] </ref> by extending the common dynamic programming style optimizer [34] to consider plans using views. Two primary extensions are necessary. First, in addition to access methods to base relation, the optimizer must consider the use of views to build a query plan.
References-found: 37

