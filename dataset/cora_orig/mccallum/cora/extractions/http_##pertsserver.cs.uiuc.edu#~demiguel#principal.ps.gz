URL: http://pertsserver.cs.uiuc.edu/~demiguel/principal.ps.gz
Refering-URL: http://pertsserver.cs.uiuc.edu/~demiguel/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: fmmiguel,aalonso,jpuenteg@dit.upm.es  mmiguel@dit.upm.es  
Phone: Phone: 34-91-5100-456 Fax:  
Title: Design and Evaluation of Object-Oriented Real-Time Systems  
Author: Miguel A. de Miguel, Alejandro Alonso, Juan A. de la Puente Miguel A. de Miguel 
Note: Contact:  
Address: Madrid, E-28040 Spain  DIT, 34-91-336-7333  
Affiliation: E.T.S.I. Telecomunicacion, Universidad Politecnica de Madrid, Ciudad Universitaria, s/n,  Dept.  
Date: August 8, 1998  
Abstract: Recently, object-oriented techniques and methodologies have been used for the construction of Real-Time systems. These techniques include new problems related with the construction of models and their integration in Real-Time systems. The methods for the description of the designs and the techniques used for their evaluation are especially important. They allow both the development of representation of the designs to be developed and the validation of these designs. This article presents some techniques for the description and evaluation of designs and their integration into development tools. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Alonso, H. Christensen, L. Baresi, and M. Heikkinen. Iders: </author> <title> An integrated environment for the development of hard real-time systems. </title> <booktitle> In 7th EUROMICRO Workshop on Real-Time Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: The ideas proposed in this paper have been evaluated by the implementation of a toolset used for the description of the design models presented and their simulation, analysis, testing, and integration with other software development phases (specification and implementation) <ref> [1, 7, 23] </ref>. 19
Reference: [2] <author> M. Awad, J. Kuusela, and J. Ziegler. </author> <title> Object-Oriented Technology for Real-Time Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Some researche has been done, but some characteristics of object-oriented techniques make it difficult to study temporal requirements. These problems can be constrained and avoided. Some examples of real-time object-oriented methodologies are: Octopus <ref> [2] </ref>; Octopus provides a guide to the development of soft real-time object-oriented software. The method is based on OMT and Fusion methodologies. It describes how to integrate object oriented concurrency in real-time software. Hard real-time requirements are not handled.
Reference: [3] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <publisher> The Benjamin / Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: structure can be described using these classes and objects, and their semantic is established by means of a stereotype. 2.3 Objects Models Notation The graphical notation that we will use to represent classes will be the same as HRT-HOOD, and objects will be represented by clouds, as in Booch's notation <ref> [3] </ref>. (HRT-HOOD does not make a distinction between classes and objects) Figure 2 includes a set of classes and objects; each class is represented by two boxes.
Reference: [4] <author> A. Burns and A.J. Wellings. HRT-HOOD: </author> <title> A Structured Design Method for Hard Real-Time Ada Systems. </title> <publisher> ELSEVIER, </publisher> <year> 1995. </year>
Reference-contexts: Some approaches have been proposed recently [24], but they constrain the models and do not take into account problems presented in this paper (polymorphic executions, automatic generations of analysis, etc.). HRT-HOOD <ref> [4] </ref>; HRT-HOOD is an extension of HOOD design methodology for hard real-time systems development. HRT-HOOD can be used to describe the system architecture, and scheduling analysis techniques can be used to validate the temporal requirements. HRT-HOOD notation does not support some object-oriented ideas like inheritance, polymorphism and class instantiation.
Reference: [5] <author> Rational Software Corporation. </author> <title> UML: Unified Modeling Language. </title> <type> Technical report, </type> <institution> Rational Software Corporation, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: HRT-HOOD can be used to describe the system architecture, and scheduling analysis techniques can be used to validate the temporal requirements. HRT-HOOD notation does not support some object-oriented ideas like inheritance, polymorphism and class instantiation. Real-Time UML [9]; this is the application of UML (Unified Modeling Language) <ref> [5] </ref> to the development of real-time systems. It represents the system with structural and behaviors models. These models are class diagrams and statecharts [16]. The design modeling includes three phases: architectural, mechanistic and detailed design. Some techniques have been developed to get temporal predictable systems. <p> In Section 2 we describe a notation, based on HRT-HOOD, which extends the applicability of object-oriented design to real-time systems. The notation is based on the concept of stereotypes <ref> [5] </ref>, and is suitable for hard real-time systems with strict time constraints. Some notations for describing behavioral aspects of the model will also be presented. <p> When a class includes another class, the methods of the included class can be used to describe the behavior of the main class. 2.4 Stereotypes Organization for Classes Description The ODS and OBCS documents HRT-HOOD and HOOD include the information related to the objects (operations, arguments, temporal parameters). UML <ref> [5] </ref> the modeling language by it self is used to describe the language notations. In Smalltalk-80 [13] a class is an instance of a metaclass. All classes are instances of metaclasses that are described as classes. The metaclass is created at the same time as the class.
Reference: [6] <author> M. de Miguel, A. Alonso, and J. de la Puente. </author> <title> Object-oriented design of real-time systems with stereotypes. </title> <booktitle> In 9th EUROMICRO Workshop on Real-Time Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1997. </year>
Reference-contexts: The following subsections will describe the models' notation. 5 2.2 Stereotypes for Real-Time Systems Real-time system designs include objects with different properties <ref> [6] </ref>. Some examples of differences are the following: * There are objects that can be classified as active objects. Examples of active objects in real-time systems are cyclic objects (cyclic tasks) or sporadic objects (sporadic servers). Practical examples are error detectors and data samplers.
Reference: [7] <author> M. de Miguel and J. Due~nas. </author> <title> Hard real-time systems modeling and simulation. </title> <booktitle> In European Simulation Multiconference. </booktitle> <address> ESM96, </address> <publisher> SCS Publishers, </publisher> <year> 1996. </year>
Reference-contexts: The methods of the stereotype describe characteristics of the class, its relations, description, and instantiation. Characteristics are also treated as objects. We have used this notation for the design models representation in the tools developed for simulations and analysis <ref> [7] </ref>. These tools represent the metaclasses and design model in a command language implemented with [incr tcl] (an extension of tcl"tk). 2.5 Behavior Models Notation Stereotypes can be used to describe the system structure. <p> The ideas proposed in this paper have been evaluated by the implementation of a toolset used for the description of the design models presented and their simulation, analysis, testing, and integration with other software development phases (specification and implementation) <ref> [1, 7, 23] </ref>. 19
Reference: [8] <author> M. de Miguel, J. Due~nas, A. Rendon, J. de la Puente, A. Alonso, and G. Leon. </author> <title> Early validation of real-time systems by model execution. </title> <booktitle> In 13th World Congress International Federation of Automatic Control Conference. IFAC, IFAC, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Model executions and animations allow the evaluation of the temporal and functional behavior of design models. A specific design solution with its own temporal parameters may not fulfill the temporal requirements, and simulations can detect these problems under specific scenarios <ref> [8, 10] </ref>. If this kind of problem it not discovered in time, cost increases and time delays are unavoidable. Moreover, the simulation can be used to understand the functional behavior of models and to detect some functional errors. Object-oriented and schedulability analysis methods are very different techniques.
Reference: [9] <author> B. Douglass. </author> <title> Real-Time UML. Developing Efficient Objects for Embedded Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1998. </year>
Reference-contexts: HRT-HOOD can be used to describe the system architecture, and scheduling analysis techniques can be used to validate the temporal requirements. HRT-HOOD notation does not support some object-oriented ideas like inheritance, polymorphism and class instantiation. Real-Time UML <ref> [9] </ref>; this is the application of UML (Unified Modeling Language) [5] to the development of real-time systems. It represents the system with structural and behaviors models. These models are class diagrams and statecharts [16]. The design modeling includes three phases: architectural, mechanistic and detailed design.
Reference: [10] <author> J. Due~nas, A. Rendon, and M. de Miguel. </author> <title> Integrated validation of real-time systems models. </title> <booktitle> In 9th EUROMICRO Workshop on Real-Time Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1997. </year>
Reference-contexts: Model executions and animations allow the evaluation of the temporal and functional behavior of design models. A specific design solution with its own temporal parameters may not fulfill the temporal requirements, and simulations can detect these problems under specific scenarios <ref> [8, 10] </ref>. If this kind of problem it not discovered in time, cost increases and time delays are unavoidable. Moreover, the simulation can be used to understand the functional behavior of models and to detect some functional errors. Object-oriented and schedulability analysis methods are very different techniques.
Reference: [11] <author> M. Felder, C. Ghezzi, and M. Pezze. </author> <title> High-level timed petri nets as a kernel for executable specifications. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 5(3), </volume> <month> May </month> <year> 1993. </year>
Reference-contexts: The definition of a mapping of these models to High Level Time Petri Nets (HLTPN) [12] solves the problem, because a Petri Net that represents the design model can be used as a kernel for the execution of the design model <ref> [11] </ref>. The execution of the Petri Net simulates the model's execution and animates the design model.
Reference: [12] <author> C. Ghezzi, D. Mandrioli, S. Morasca, and M. Pezze. </author> <title> A unified high-level Petri Net formalism for time-critical systems. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 17(2), </volume> <month> February </month> <year> 1991. </year> <month> 20 </month>
Reference-contexts: This information defines the execution flow of the model. The structural and behavior models are much too complex to be executed directly. The definition of a mapping of these models to High Level Time Petri Nets (HLTPN) <ref> [12] </ref> solves the problem, because a Petri Net that represents the design model can be used as a kernel for the execution of the design model [11]. The execution of the Petri Net simulates the model's execution and animates the design model.
Reference: [13] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: the language and its implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: UML [5] the modeling language by it self is used to describe the language notations. In Smalltalk-80 <ref> [13] </ref> a class is an instance of a metaclass. All classes are instances of metaclasses that are described as classes. The metaclass is created at the same time as the class. HRT-HOOD, UML and Smalltalk employ very distinct methods to describe the system classes and formalize their semantic.
Reference: [14] <author> M. Gonzalez-Harbour, M. Klein, and J. Lechoczky. </author> <title> Timing analysis for fixed-priority scheduling of hard real-time systems. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 20(1) </volume> <pages> 13-28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: We will represent the sheet classes' behavior with a directed graph. Directed graphs describe both the temporal dependencies of execution described with other types of graphs <ref> [14, 26] </ref> and the functional behavior described with DFDs (data flow diagrams) [27]. A graph is composed of nodes and flows, (A; F ). * F is a set of flows. Each flow can include a set of tokens and has associated a data type.
Reference: [15] <author> D. Harel. </author> <title> Biting the Silver Bullet. Toward a Brighter Future for System Development. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In this phase, system resources must be constrained and the system architecture determined. Design methods describe approaches for decomposing the system into subsystems to handle the system complexity. Real-time design methodologies are defined to handle some specific problems <ref> [15, 18] </ref>: Temporal restrictions. A real-time design method must include mechanisms to represent and study temporal requirements. These requirements are fixed in the specification, but different architectures can handle them in different ways. Concurrent activities. Task decomposing is widely used as the decomposing method in real-time systems.
Reference: [16] <author> D. Harel and E. Gery. </author> <title> Executable object modeling with statecharts. </title> <journal> Computer IEEE, </journal> <volume> 30(7) </volume> <pages> 31-42, </pages> <month> July </month> <year> 1997. </year> <note> [17] introspect. iRAT User's Guide. </note> <institution> introspect TECHNOLOGIES, INC, </institution> <year> 1995. </year>
Reference-contexts: HRT-HOOD notation does not support some object-oriented ideas like inheritance, polymorphism and class instantiation. Real-Time UML [9]; this is the application of UML (Unified Modeling Language) [5] to the development of real-time systems. It represents the system with structural and behaviors models. These models are class diagrams and statecharts <ref> [16] </ref>. The design modeling includes three phases: architectural, mechanistic and detailed design. Some techniques have been developed to get temporal predictable systems. Simulators, model executors and prototype generators are examples of facilities included in CASE tools.
Reference: [18] <author> K. Kavi and S. Yang. </author> <title> Real-time systems design methodologies: An introduction and a survey. </title> <journal> The Journal of Systems and Software, </journal> <volume> 18(1) </volume> <pages> 85-99, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: In this phase, system resources must be constrained and the system architecture determined. Design methods describe approaches for decomposing the system into subsystems to handle the system complexity. Real-time design methodologies are defined to handle some specific problems <ref> [15, 18] </ref>: Temporal restrictions. A real-time design method must include mechanisms to represent and study temporal requirements. These requirements are fixed in the specification, but different architectures can handle them in different ways. Concurrent activities. Task decomposing is widely used as the decomposing method in real-time systems.
Reference: [19] <author> M. Klein, T. Ralya, B. Pollak, R. Obenza, and M. Gonzalez. </author> <title> A Practitioner's Handbook for Real-Time Analysis: Guide to Monotonic Analysis for Real-Time Systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: In general, this is a static analysis (testing or simulations could be defined as dynamic validation). There are several scheduling paradigms (cyclic scheduling, static and dynamic priority scheduling, etc.). RMA <ref> [19] </ref> (Rate Monotonic Analysis) defines a framework for representing and analyzing real-time systems; events, responses, actions, resources, and their temporal parameters describe the systems and scheduling analysis technique that can be applied. The framework is independent of development or application domain.
Reference: [20] <author> J. Mathai. </author> <title> Real-time Systems: Specification, Verification and Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: Simulators, model executors and prototype generators are examples of facilities included in CASE tools. These techniques 3 facilitate the construction and evaluation of very different types of software systems. Scheduling anal-ysis is perhaps the most widely researched area in hard real-time systems <ref> [20] </ref>. Schedulability analysis supports validation of temporal requirements, and its results can be used in system construction (design decisions in general). These techniques evaluate time and resource allocation, but the set of resources and activities involved must be known and specified during analysis.
Reference: [21] <author> K. Nilsen. </author> <title> Issues in the design and implementation of real-time java. </title> <journal> Java Developer's Journal, </journal> (1):44-57, 1996. 
Reference-contexts: The relations between these objects are constrained. The objects are described is done using the ODS and OBCS documents, which have BNF structure. The set of class stereotypes that we will use is based on HRT-HOOD object types. Real-time extensions of Java <ref> [21, 22] </ref> define classes and tasks that are also similar to this set of stereotypes. The stereotypes are: Subsystem Class: A subsystem is an abstraction of a complex component which is itself made up of lower-level components of any kind.
Reference: [22] <author> K. Nilsen and S. Lee. </author> <title> PERC Real-Time API (Draft 1.2). </title> <publisher> NewMonics Inc., </publisher> <year> 1998. </year>
Reference-contexts: The relations between these objects are constrained. The objects are described is done using the ODS and OBCS documents, which have BNF structure. The set of class stereotypes that we will use is based on HRT-HOOD object types. Real-time extensions of Java <ref> [21, 22] </ref> define classes and tasks that are also similar to this set of stereotypes. The stereotypes are: Subsystem Class: A subsystem is an abstraction of a complex component which is itself made up of lower-level components of any kind.
Reference: [23] <author> A. Rendon, J. Due~nas, M. de Miguel, J. Leskela, J. de la Puente, G. Leon, and A. Alonso. </author> <title> Animation of heterogeneous prototypes of real-time systems. </title> <booktitle> In First IEEE International Conference on Engineering of Complex Computer Systems. </booktitle> <address> ICECCS, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: The ideas proposed in this paper have been evaluated by the implementation of a toolset used for the description of the design models presented and their simulation, analysis, testing, and integration with other software development phases (specification and implementation) <ref> [1, 7, 23] </ref>. 19
Reference: [24] <author> M. Saksena, P. Freedman, and P. Rodziewicz. </author> <title> Guidelines for automated implementation of executable object oriented models for real-time embedded control systems. </title> <booktitle> In Real-Time Systems Symposium. </booktitle> <address> RTSS, </address> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1997. </year>
Reference-contexts: Its behavior modeling is based on statecharts. The validation of hard real-time requirements can be done with simulations and prototype generation, but those validations cannot guarantee fulfillment of the temporal requirements. Some approaches have been proposed recently <ref> [24] </ref>, but they constrain the models and do not take into account problems presented in this paper (polymorphic executions, automatic generations of analysis, etc.). HRT-HOOD [4]; HRT-HOOD is an extension of HOOD design methodology for hard real-time systems development.
Reference: [25] <author> B. Selic, G. Gullekson, and P.T. Ward. </author> <title> Real-Time Object-Oriented Modeling. </title> <publisher> Wiley, </publisher> <year> 1994. </year>
Reference-contexts: Some examples of real-time object-oriented methodologies are: Octopus [2]; Octopus provides a guide to the development of soft real-time object-oriented software. The method is based on OMT and Fusion methodologies. It describes how to integrate object oriented concurrency in real-time software. Hard real-time requirements are not handled. ROOM <ref> [25] </ref>; ROOM is based on object-oriented concepts and employs simulation and prototype generation for validation of models. Its behavior modeling is based on statecharts. The validation of hard real-time requirements can be done with simulations and prototype generation, but those validations cannot guarantee fulfillment of the temporal requirements.
Reference: [26] <author> J. Sun, M. Gardner, and J. Liu. </author> <title> Bounding completion times of jobs with arbitrary release times variable execution times, and resource sharing. </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 23(10) </volume> <pages> 603-615, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: We will represent the sheet classes' behavior with a directed graph. Directed graphs describe both the temporal dependencies of execution described with other types of graphs <ref> [14, 26] </ref> and the functional behavior described with DFDs (data flow diagrams) [27]. A graph is composed of nodes and flows, (A; F ). * F is a set of flows. Each flow can include a set of tokens and has associated a data type.
Reference: [27] <author> P. Ward and S. Mellor. </author> <title> Structured Development for Real-Time Systems. </title> <publisher> Volumen 1,2,3. Prentice Hall, </publisher> <year> 1985. </year> <month> 22 </month>
Reference-contexts: We will represent the sheet classes' behavior with a directed graph. Directed graphs describe both the temporal dependencies of execution described with other types of graphs [14, 26] and the functional behavior described with DFDs (data flow diagrams) <ref> [27] </ref>. A graph is composed of nodes and flows, (A; F ). * F is a set of flows. Each flow can include a set of tokens and has associated a data type.
References-found: 26

