URL: http://cs.nyu.edu/~yap/visual/home/pub/online-sched.ps.gz
Refering-URL: http://cs.nyu.edu/~yap/visual/home/pub.html
Root-URL: http://www.cs.nyu.edu
Email: emails: fyap,eechieng@cs.nyu.edu  
Title: (extended abstract) Competitive Online Scheduling with Level of Service  
Author: Ee-Chien Chang and Chee Yap 
Date: July 7, 1998  
Address: 251 Mercer Street New York, NY 10012  
Affiliation: Courant Institute, New York University  
Abstract: Motivated by an application in thinwire visualization, we study an abstract on-line scheduling problem where the size of each request is scalable. We describe two schedulers and show that they are 2-competitive. These two schedulers can be generalized to a class of greedy schedulers whose members are 3-competitive.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Susanne Albers. </author> <title> Competitive online algorithms. </title> <booktitle> BRICS Lecture Series LS-96-2, BRICS, </booktitle> <institution> Department of Computer Science, University of Aarhus, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: The competitive ratio of S is defined by C (S) := sup merit (opt (I)) merit (S (I)) : The original paging problem studied by Sleator and Tarjan is a special case of the k-server problem [9]. There is a fairly large literature on competitive algorithms (e.g., <ref> [1, 2, 10] </ref>). The class of problems most closely related to ours is the online interval packing problem for 1-server. A schedule here is a subset of non-overlapping intervals. Lipton and Tomkins [8] study a variant where the input intervals are sorted by their left endpoints.
Reference: [2] <author> Susanne Albers and Jeffery Westbrook. </author> <title> A survey of self-organizing data structures. </title> <institution> Research Report MPI-I-96-1-026, Max-Planck-Institut fur Informatik, Im Stadtwald, D-66123 Saarbrucken, Germany, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: The competitive ratio of S is defined by C (S) := sup merit (opt (I)) merit (S (I)) : The original paging problem studied by Sleator and Tarjan is a special case of the k-server problem [9]. There is a fairly large literature on competitive algorithms (e.g., <ref> [1, 2, 10] </ref>). The class of problems most closely related to ours is the online interval packing problem for 1-server. A schedule here is a subset of non-overlapping intervals. Lipton and Tomkins [8] study a variant where the input intervals are sorted by their left endpoints.
Reference: [3] <author> R. Braden, L. Zhang, S. Berson, S. Herzog, and S. Janin. </author> <title> Resource ReSerVation Protocol (RSVP) version 1 functional specifications internet draft, </title> <month> November </month> <year> 1996. </year> <pages> 82 pages. </pages>
Reference-contexts: New applications in multimedia often require realtime responses and involve multiusers. The network protocols must now distinguish among the various types of applications and assign each data stream appropriate QoS properties (latency, delay jitter, availability, setup time, throughput, peak rate, error rate, etc). New network protocols such as RSVP <ref> [3] </ref> address deficiencies in traditional protocols such as TCP/IP. Our level-of-service algorithms can be used in two ways in QoS work: one is at the application level (our original motivation). However, our algorithms can also be inserted into new QoS-aware network protocols.
Reference: [4] <author> A. T. Campbell, G. Coulson, and D. Hutchinson. </author> <title> Supporting adaptive flows in Quality of Service architectures.Multimedia Systems J., </title> <month> May </month> <year> 1998. </year> <note> Special Issue on QoS Architecture. Also, http: //comet.ctr.columbia.edu/~campbell/andrew/publications/publications.html. </note>
Reference-contexts: It should be noted that this ability fl Current address: Department of Computational Science, National University of Singapore. 1 to scale-down the level of service is not present in traditional scheduling problems, where a job is either serviced or rejected. Our work has some bearing on current research (e.g. <ref> [4, 13] </ref>) in integrated network services where the concept of Quality of Service (QoS) is of paramount concern. Traditional internet services such as email and ftp are based on point-to-point remote procedure calls that use a `best effort' delivery scheme, resulting in variable latency for message packets.
Reference: [5] <author> E.C. Chang. </author> <title> Foveation Techniques and Scheduling Issues in Thinwire Visualization. </title> <type> PhD thesis, </type> <institution> Computer Science, Courant Institute, </institution> <address> New York University, </address> <month> May </month> <year> 1998. </year>
Reference-contexts: To achieve realtime responses, the use of multifoveated images coupled with an interactive transmission framework is used in a prototype system <ref> [5, 6] </ref>. The user on the client side can control the transmission process by moving a mouse cursor (or eye-gaze, if we use eye-tracking) over a low-resolution copy of the image to be visualized. This mouse motion generates, in realtime, a sequence of sampled positions along the mouse cursor trajectory. <p> Depending on the history of previously transmitted data, each request q translates into request for a number v = v (q) of bytes (or `volume') of data. We call the ratio v (q 0 )=v (q) 1 the level-of-service for request q. In our application <ref> [5, 6] </ref>, the scheduler could effectively compute v (q 0 ) from any q 0 ; so, in effect it is choosing the level-of-service for each q.
Reference: [6] <author> E.C. Chang, C. Yap, and T.-J. Yen. </author> <title> Realtime visualization of large images over a thinwire. </title> <booktitle> In IEEE Visualization '97 (Late Breaking Hot Topics), </booktitle> <pages> pages 45-48, </pages> <year> 1997. </year> <note> See CD proceedings of conference. Paper from ftp://cs.nyu.edu/pub/local/yap/visual/thinwire.ps.gz. </note>
Reference-contexts: To achieve realtime responses, the use of multifoveated images coupled with an interactive transmission framework is used in a prototype system <ref> [5, 6] </ref>. The user on the client side can control the transmission process by moving a mouse cursor (or eye-gaze, if we use eye-tracking) over a low-resolution copy of the image to be visualized. This mouse motion generates, in realtime, a sequence of sampled positions along the mouse cursor trajectory. <p> Depending on the history of previously transmitted data, each request q translates into request for a number v = v (q) of bytes (or `volume') of data. We call the ratio v (q 0 )=v (q) 1 the level-of-service for request q. In our application <ref> [5, 6] </ref>, the scheduler could effectively compute v (q 0 ) from any q 0 ; so, in effect it is choosing the level-of-service for each q.
Reference: [7] <author> J.A. Eoogeveen and A.P.A. Vestjens. </author> <title> Optimal on-line algorithm for single-machine scheduling. </title> <booktitle> Integer Programming and Combinatorial Opt., </booktitle> <pages> pages 404-414, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: They give a randomized scheduler that is 2-competitive. As we will see, our problem is different from theirs in several ways. Woeginger [14] studied a problem that has several of the features of our problem (see below). Other online interval packing problems can be found in <ref> [12, 7] </ref>. 2 Problem Formulation We formalize our problem as a reservation problem.
Reference: [8] <author> Richard J. Lipton and Andrew Tomkins. </author> <title> Online interval scheduling. </title> <booktitle> Proceedings of the 5th annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 304-311, </pages> <year> 1994. </year>
Reference-contexts: There is a fairly large literature on competitive algorithms (e.g., [1, 2, 10]). The class of problems most closely related to ours is the online interval packing problem for 1-server. A schedule here is a subset of non-overlapping intervals. Lipton and Tomkins <ref> [8] </ref> study a variant where the input intervals are sorted by their left endpoints. They give a randomized scheduler that is 2-competitive. As we will see, our problem is different from theirs in several ways. <p> However, the start times of the q i 's may have arbitrary order (unlike the problem of Lipton-Tomkins <ref> [8] </ref>). 2 Schedules.
Reference: [9] <author> M. Manasse, L.A. McGeoch, and D. Sleator. </author> <title> Competitive algorithms for server problems. </title> <booktitle> In Proc. 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <year> 1988. </year>
Reference-contexts: The competitive ratio of S is defined by C (S) := sup merit (opt (I)) merit (S (I)) : The original paging problem studied by Sleator and Tarjan is a special case of the k-server problem <ref> [9] </ref>. There is a fairly large literature on competitive algorithms (e.g., [1, 2, 10]). The class of problems most closely related to ours is the online interval packing problem for 1-server. A schedule here is a subset of non-overlapping intervals.
Reference: [10] <editor> Lyle A. McGeoch and Daniel D. Sleator, editors. </editor> <booktitle> On-Line Algorithms. DIMACS series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> volume 7. </volume> <publisher> American Mathematical Society, </publisher> <year> 1992. </year>
Reference-contexts: The competitive ratio of S is defined by C (S) := sup merit (opt (I)) merit (S (I)) : The original paging problem studied by Sleator and Tarjan is a special case of the k-server problem [9]. There is a fairly large literature on competitive algorithms (e.g., <ref> [1, 2, 10] </ref>). The class of problems most closely related to ours is the online interval packing problem for 1-server. A schedule here is a subset of non-overlapping intervals. Lipton and Tomkins [8] study a variant where the input intervals are sorted by their left endpoints.
Reference: [11] <author> D. Sleator and R. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year> <month> 8 </month>
Reference-contexts: Our level-of-service algorithms can be used in two ways in QoS work: one is at the application level (our original motivation). However, our algorithms can also be inserted into new QoS-aware network protocols. We use the standard notion of `competitiveness' in the sense of Sleator and Tarjan <ref> [11] </ref> to judge the quality of our online schedulers. A scheduler S produces a feasible schedule S (I) for each instance I of our scheduling problem. Each S (I) has an associated merit, merit (S (I)) 0. Let opt (I) denote any feasible schedule for I that maximizes the merit.
Reference: [12] <author> Frances Yao, Alan Demers, and Scoot Shenker. </author> <title> A scheduling model for reduced cpu energy. </title> <booktitle> Symposium on Foundations of Computer Science, </booktitle> <pages> pages 374-382, </pages> <year> 1995. </year>
Reference-contexts: They give a randomized scheduler that is 2-competitive. As we will see, our problem is different from theirs in several ways. Woeginger [14] studied a problem that has several of the features of our problem (see below). Other online interval packing problems can be found in <ref> [12, 7] </ref>. 2 Problem Formulation We formalize our problem as a reservation problem.
Reference: [13] <author> D. G. Waddington, G. Coulson, and D. Hutchinson. </author> <title> Specifying QoS multimedia communication within distributed programming environments. Multimedia, Telecommunications and Applications: </title> <booktitle> Proc. 3rd Int'l. COST 237 Workshop, </booktitle> <pages> pages 104-130, </pages> <month> Nov </month> <year> 1996. </year> <note> Lecture Notes in CS No.1185. </note>
Reference-contexts: It should be noted that this ability fl Current address: Department of Computational Science, National University of Singapore. 1 to scale-down the level of service is not present in traditional scheduling problems, where a job is either serviced or rejected. Our work has some bearing on current research (e.g. <ref> [4, 13] </ref>) in integrated network services where the concept of Quality of Service (QoS) is of paramount concern. Traditional internet services such as email and ftp are based on point-to-point remote procedure calls that use a `best effort' delivery scheme, resulting in variable latency for message packets.
Reference: [14] <author> Gerhard J. Woeginger. </author> <title> On-line scheduling of jobs with fixed start and end times. </title> <journal> Theoretical Computer Science, </journal> <volume> 130 </volume> <pages> 5-16, </pages> <year> 1994. </year> <note> 9 APPENDIX </note>
Reference-contexts: A schedule here is a subset of non-overlapping intervals. Lipton and Tomkins [8] study a variant where the input intervals are sorted by their left endpoints. They give a randomized scheduler that is 2-competitive. As we will see, our problem is different from theirs in several ways. Woeginger <ref> [14] </ref> studied a problem that has several of the features of our problem (see below). Other online interval packing problems can be found in [12, 7]. 2 Problem Formulation We formalize our problem as a reservation problem. <p> The "reservation" nature of q comes from the fact that r can be less than s, and the request has an explicit span. Multimedia applications such as "video-on-demand" need such reservation properties: a customer may request for one hour of viewing time in some future time. Woeginger <ref> [14] </ref> study the case r = s and t s = v. Write rt (q), st (q), dl (q); sz (q); wt (q) for the above parameters of q, respectively.
References-found: 14

