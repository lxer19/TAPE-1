URL: ftp://ftp.cs.dartmouth.edu/TR/TR95-259.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR95-259/
Root-URL: http://www.cs.dartmouth.edu
Title: Multiple Discrete Pass Algorithm on a DEC Alpha 2100  
Author: Scott R. Cushman 
Date: June 7, 1995  
Note: A  
Abstract: Dartmouth College Computer Science Technical Report PCSTR95-259 
Abstract-found: 1
Intro-found: 1
Reference: [Cor93] <author> Thomas H. Cormen. </author> <title> Fast permuting on disk arrays. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 17 </volume> <pages> 41-57, </pages> <year> 1993. </year>
Reference-contexts: Numbers indicate record indices. example introduced in <ref> [Cor93] </ref>, we use the following notation: n = lg N; m = lg M; b = lg B; d = lg D; s = lg S: relative to the other records. <p> Alternatively, we can view the complement 1 According to <ref> [Cor93, CSW94] </ref>, "Matrix multiplication over GF (2) is like standard matrix multiplication over the reals but with all arithmetic performed modulo 2. Equivalently, multiplication is replaced by logical-and, and addition is replaced by exclusive-or." 9 vector as specifying a subset of bits of the product to complement. <p> the upper right m fi (n m) submatrix are not restricted beyond the f0, 1g requirement, and so an MRC permutation's characteristic matrix is of the form m n m nonsingular arbitrary 0 nonsingular n m Gray-code and inverse Gray-code permutations are examples of the MRC sub class. 11 Cormen <ref> [Cor93] </ref> shows that any MRC permutation may be performed in one pass by reading, in turn, each memoryload (i.e., M records) of M=BD consecutive stripes from the source portion, permuting them in memory, and writing them out to a (possibly different) set of M=BD consecutive stripes in the target portion.
Reference: [CSW94] <author> Thomas H. Cormen, Thomas Sundquist, and Leonard F. Wisniewski. </author> <title> Asymptotically tight bounds for performing BMMC permutations on parallel disk systems. </title> <type> Technical Report PCS-TR94-223, </type> <institution> Dartmouth College Department of Computer Science, </institution> <month> July </month> <year> 1994. </year> <booktitle> Preliminary version appeared in Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures. </booktitle>
Reference-contexts: Alternatively, we can view the complement 1 According to <ref> [Cor93, CSW94] </ref>, "Matrix multiplication over GF (2) is like standard matrix multiplication over the reals but with all arithmetic performed modulo 2. Equivalently, multiplication is replaced by logical-and, and addition is replaced by exclusive-or." 9 vector as specifying a subset of bits of the product to complement. <p> The matrix A used in the example above is the characteristic matrix for a Gray-code permutation. 3.2 MRC, MLD, and MLDI Permutations This section defines three subclasses of BMMC permutations. The first two classes, MRC and MLD permutations, are used by the BMMC algorithm described in <ref> [CSW94] </ref>. The final BMMC subclass presented, MLDI permutations, replaces the MLDs in our implementation of this algorithm. Memory-rearrange/complement, or MRC, permutations are BMMC permutations with additional restrictions placed on the characteristic matrix. <p> A memoryload-dispersal, or MLD, permutation <ref> [CSW94] </ref> has a characteristic matrix that is nonsingular and of the form m n m 2 arbitrary arbitrary 5 m b ; subject to the kernel condition ker ker ; or x = 0 implies x = 0. <p> Therefore, we can perform any MLDI permutation by reading records from 12 the target addresses of some MLD permutation, and writing them to that per-mutation's source addresses. MLDI permutations may therefore be performed in one pass using independent reads and striped writes. 3.3 The CSW Algorithm In <ref> [CSW94] </ref>, Cormen, Sundquist, and Wisniewski present a lower bound on the number of parallel I/O operations for an arbitrary BMMC permutation and an asymptotically optimal algorithm to perform BMMC permutations. <p> Before starting each new memoryload, the read thread uses this routine to determine which blocks to read. The last step in implementing the single-disk BMMC algorithm was to write a factoring routine, which follows the steps described in <ref> [CSW94] </ref> for factoring the BMMC permutation's characteristic matrix into a series of MRC and MLD matrices. I changed the order in which it combines matrices so that it produces one MRC permutation followed by a series of MLDIs rather than the series of MLDs followed by one MRC described in [CSW94]. <p> <ref> [CSW94] </ref> for factoring the BMMC permutation's characteristic matrix into a series of MRC and MLD matrices. I changed the order in which it combines matrices so that it produces one MRC permutation followed by a series of MLDIs rather than the series of MLDs followed by one MRC described in [CSW94]. As noted in Section 3.2, MLDI permutations use striped writes and independent reads, whereas MLD permutations use striped reads and independent reads.
Reference: [VS94] <author> Jeffrey Scott Vitter and Elizabeth A. M. Shriver. </author> <title> Algorithms for parallel memory I: Two-level memories. </title> <journal> Algorithmica, </journal> 12(2/3):110-147, August and September 1994. <volume> 27 </volume>
Reference-contexts: organizing data on a parallel-disk system, the machine used (focusing on its I/O devices), relevant characteristics of the program chosen for running tests, and our options for dividing the available disk space into source and destination portions. 2.1 The Vitter-Shriver Parallel-Disk Model We organize our information according to the Vitter-Shriver <ref> [VS94] </ref> model for organizing and accessing information on a parallel-disk system. In this model, data consists of N records, evenly distributed over D disks. The disks are denoted D 0 ; D 1 ; : : : ; D D1 .
References-found: 3

