URL: http://www.cs.dartmouth.edu/~agent/papers/cikm95.ps.Z
Refering-URL: http://www.cnri.reston.va.us/home/koe/bib/mobile-abs.bib.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: robert.s.gray@dartmouth.edu  
Title: Agent Tcl: A transportable agent system  
Author: Robert S. Gray 
Date: 17 November 1995  
Address: Hanover, New Hampshire 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: Agent Tcl is a transportable-agent system that is under development at Dartmouth College. A transportable agent is a named program that can migrate from machine to machine in a heterogeneous network. Such programs are a powerful tool for implementing information agents since the electronic resources in a user's information space are often distributed across a network and can contain tremendous quantities of data. Sending a user-specific program to the network location of the resource is often the most convenient and efficient alternative. The goal of Agent Tcl is to address the weaknesses of existing transportable-agent systems. Agent Tcl will run on standard hardware, support multiple languages and transport mechanisms, provide transparent migration and communication, and provide effective security and fault-tolerance in the uncertain world of the Internet. This paper describes the architecture of Agent Tcl and its current implementation and presents four information-management applications in which Agent Tcl has proven useful. 
Abstract-found: 1
Intro-found: 1
Reference: [Bel95] <author> Marc Belgrave. </author> <title> The Unified Agent Architecture: </title> <note> A white paper. Available at http:// www.ee.mcgill.ca/~belmarc/ agent_root.html, </note> <year> 1995. </year>
Reference-contexts: With the addition of appropriate service agents, Agent Tcl can become the lowest level of more complex agent architectures such as Agent-0 [Sho93], KQML-based facilitators [GK94], the Open Agent Architecture, [CCeWB94], the proposed IBM Itinerant Agents [CGH + 95] and the evolving Unified Agent Architecture <ref> [Bel95] </ref>. The third level of the Agent Tcl architecture consists of one interpreter for each available agent language. We say interpreter since it is expected that most of the languages will be interpreted due to security and portability constraints.
Reference: [Bha95] <author> Aditya Bhasin. </author> <title> Development of an agent-based distributed search system for three-dimensional objects. </title> <type> Master's thesis, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: The parent then contacts the user's "mail" agent to send the email message. Agent Tcl has also been used in three information-retrieval applications. The first application involves technical reports [Cai95]; the second involves text-based medical records [Wu95]; and the third involves three-dimensional drawings of mechanical parts <ref> [Bha95, Coh95] </ref>. In all three cases the "documents" are distributed across a small network. An agent is sent to each network site. Each agent finds the relevant documents at its site and returns the relevant documents to the home site for final processing and display.
Reference: [BN84] <author> A. D. Birrell and B. J. Nel-son. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Remote procedure call (RPC) hides these low level details by allowing a client to invoke a server operation using the standard procedure call mechanism <ref> [BN84] </ref>. Most implementations of RPC use stub procedures. The problem with message passing and RPC is that the client is limited to the operations provided at the server.
Reference: [Cai95] <author> Ting Cai. </author> <title> A technical report agent. </title> <type> Technical report, </type> <institution> Department of Computer Science, 13 Dartmouth College, </institution> <year> 1995. </year> <note> In progress. </note>
Reference-contexts: The parent then contacts the user's "mail" agent to send the email message. Agent Tcl has also been used in three information-retrieval applications. The first application involves technical reports <ref> [Cai95] </ref>; the second involves text-based medical records [Wu95]; and the third involves three-dimensional drawings of mechanical parts [Bha95, Coh95]. In all three cases the "documents" are distributed across a small network. An agent is sent to each network site.
Reference: [Car94] <author> Luca Cardelli. Obliq: </author> <title> A language with distributed scope. Digital White Paper, </title> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1994. </year>
Reference-contexts: Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. The current status of the intelligent router work is unclear. Also notable are the object-oriented systems Obliq, SmallTalk Agents and IBM Intelligent Communications, each of which allows objects to dynamically move through a network <ref> [Car94, Way95, Rei94] </ref>.
Reference: [CCeWB94] <author> Phillip R. Cohen, Adam Chey-er, Michelle Wang, and Soon Cheol Baeg. </author> <title> An open agent architecture. </title> <booktitle> In Proceedings of the AAAI Spring Symposium, </booktitle> <year> 1994. </year>
Reference-contexts: Such services include planning, scheduling, dynamic blackboards, group communication, location-independent addressing and fault tolerance. With the addition of appropriate service agents, Agent Tcl can become the lowest level of more complex agent architectures such as Agent-0 [Sho93], KQML-based facilitators [GK94], the Open Agent Architecture, <ref> [CCeWB94] </ref>, the proposed IBM Itinerant Agents [CGH + 95] and the evolving Unified Agent Architecture [Bel95]. The third level of the Agent Tcl architecture consists of one interpreter for each available agent language.
Reference: [CGH + 95] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant agents for mobile computing. </title> <type> Technical Report RC 20010, </type> <institution> IBM T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year> <note> Revised October 17, </note> <year> 1995. </year>
Reference-contexts: The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript [Whi94, Whi95b, Whi95a], M ff [DiMMTH95, TDiMMH94] and IBM Itinerant Agents <ref> [CGH + 95] </ref>. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance. The single abstraction in Tacoma is the meet operation which an agent uses to execute another agent. <p> The development team has focused on distributed operating systems. M ff does not directly provide transportable agent functionality but could be used as the lowest layer in a transportable agent system. IBM Itinerant Agents is a proposed system that combines transportable agents with knowledge-based resource discovery <ref> [CGH + 95] </ref>. The development team has focused on the knowledge-based aspects. There are numerous other systems that exhibit aspects of transportable-agent behavior. <p> With the addition of appropriate service agents, Agent Tcl can become the lowest level of more complex agent architectures such as Agent-0 [Sho93], KQML-based facilitators [GK94], the Open Agent Architecture, [CCeWB94], the proposed IBM Itinerant Agents <ref> [CGH + 95] </ref> and the evolving Unified Agent Architecture [Bel95]. The third level of the Agent Tcl architecture consists of one interpreter for each available agent language. We say interpreter since it is expected that most of the languages will be interpreted due to security and portability constraints.
Reference: [Coe94] <author> Michael D. Coen. Sod-aBot: </author> <title> A software agent environment and construction system. </title> <editor> In Yannis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Management (CIKM 94), </booktitle> <address> Gaithersburg, Maryland, </address> <month> De-cember </month> <year> 1994. </year>
Reference-contexts: Transportable agents, however, are autonomous, named programs that communicate and migrate at will. Transportable agents support the peer-to-peer model in which processes communicate as peers and act as either clients or servers depending on their current needs <ref> [Coe94] </ref>. Transportable agents do not require the maintenance of state information at both the local and remote machines and do not require a permanent connection between machines. <p> [WVF89] move from machine to machine to accomplish a given task; the Safe-Tcl/MIME combination allows Tcl scripts to be embedded in electronic mail messages [Way95]; the HotJava browser al 3 lows Java scripts to be embedded in World Wide Web documents [Sun94]; a SodaBot application can dynamically distribute its components <ref> [Coe94] </ref>; and Postscript programs are often sent to remote displays. Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. The current status of the intelligent router work is unclear.
Reference: [Coh95] <author> Kurt Cohen. </author> <title> Feature extraction and pattern analysis of three-dimensional objects. </title> <type> Master's thesis, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: The parent then contacts the user's "mail" agent to send the email message. Agent Tcl has also been used in three information-retrieval applications. The first application involves technical reports [Cai95]; the second involves text-based medical records [Wu95]; and the third involves three-dimensional drawings of mechanical parts <ref> [Bha95, Coh95] </ref>. In all three cases the "documents" are distributed across a small network. An agent is sent to each network site. Each agent finds the relevant documents at its site and returns the relevant documents to the home site for final processing and display.
Reference: [DiMMTH95] <author> Giovanna Di Marzo, Murhi-manya Muhugusa, Christian Tschudin, and Jurgen Harms. </author> <title> The Messenger paradigm and its implications on distributed systems. </title> <booktitle> In Proceedings of the ICC'95 Workshop on Intelligent Computer Communication, </booktitle> <year> 1995. </year>
Reference-contexts: The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript [Whi94, Whi95b, Whi95a], M ff <ref> [DiMMTH95, TDiMMH94] </ref> and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance. <p> Unfortunately, Telescript is not open to researchers and is only available on two Personal Digital Assistants (PDA) and three high-end Unix workstations. The M ff system allows code fragments or messengers to be sent to and executed on remote machines <ref> [DiMMTH95] </ref>. Each machine provides an execution environment that includes an interpreter, synchronization primitives and a dictionary of shared data. M ff is a low-level system that is intended for a range of distributed applications. The development team has focused on distributed operating systems.
Reference: [Fal87] <author> Joseph R. Falcone. </author> <title> A programmable interface language for heterogeneous systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The subprogram executes at the server and returns only the final result to the client. All intermediate data transfer is eliminated, conserving bandwidth and reducing overall latency. The subprogram approach is exemplified in the Network Command Language (NCL), Remote Evaluation (REV) and SUPRA-RPC <ref> [Fal87, SG90, Sto94] </ref>. The subprograms of NCL, REV and SUPRA-RPC are limited in that they can not migrate after their initial transfer, can not communicate easily with each other, maintain the fixed 2 client-server division and are explicitly tied to the client.
Reference: [Gai94] <author> R. Stockton Gaines. </author> <booktitle> Dixie language design and intepreter issues. In Proceedings of the USENIX Symposium on Very High Level Languages (VHLL), </booktitle> <address> Sante Fe, New Mexico, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: The architecture of Agent Tcl is shown in Figure 2. The architecture builds on the server model of Telescript [Whi94], the multiple languages of Dixie <ref> [Gai94] </ref> and the transport mechanisms of two predecessors at Dartmouth [Har95, KK94]. The architecture has four levels. The lowest level consists of an API for each transport mechanism. The second level is a server that runs at each network site.
Reference: [GK94] <author> Michael R. Genesereth and Steven P. Ketchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: As in Tacoma all other services are provided by agents. Such services include planning, scheduling, dynamic blackboards, group communication, location-independent addressing and fault tolerance. With the addition of appropriate service agents, Agent Tcl can become the lowest level of more complex agent architectures such as Agent-0 [Sho93], KQML-based facilitators <ref> [GK94] </ref>, the Open Agent Architecture, [CCeWB94], the proposed IBM Itinerant Agents [CGH + 95] and the evolving Unified Agent Architecture [Bel95]. The third level of the Agent Tcl architecture consists of one interpreter for each available agent language.
Reference: [Gra95a] <author> Robert S. Gray. </author> <title> Agent Tcl: Alpha Release 1.1, </title> <note> 1995. Available at http://www.cs. dartmouth.edu/~rgray/ transportable.html. </note>
Reference-contexts: These languages do not need the security or state modules and can be compiled. The top level of the architecture contains the agents themselves. 5 4 Agent Tcl Version 1.1 Agent Tcl is far from complete but an alpha release is available <ref> [Gra95a] </ref>. The alpha release supports a single language (Tcl) and a single transport mechanism (TCP/IP). It provides migration, message passing, direct connections and rudimentary security. No service agents have been implemented and the names-pace is flat rather than hierarchical.
Reference: [Gra95b] <author> Robert S. Gray. </author> <type> Ph.d. Thesis Proposal: Transportable agents. Technical Report PCS-TR95-261, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: application-specific code had to be installed at the remote sites (all of the necessary primitives were already available for local use). 6 Future work The first phase of future work is to implement the remainder of the proposed architecture and certain low-level services that are critical in a production-quality system <ref> [Gra95b] </ref>. Eight components must be implemented. The first three are primarily programming tasks while the last five address open research issues. * Events. An event provides asynchronous notification of an important occurrence. Events are needed to support interrupts and event-driven languages such as Tcl/Tk. * Multiple languages and transport mechanisms.
Reference: [Har95] <author> Kenneth E. Harker. TIAS: </author> <title> A Transportable Intelligent Agent System. </title> <type> Technical Report PCS-TR95-258, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: The architecture of Agent Tcl is shown in Figure 2. The architecture builds on the server model of Telescript [Whi94], the multiple languages of Dixie [Gai94] and the transport mechanisms of two predecessors at Dartmouth <ref> [Har95, KK94] </ref>. The architecture has four levels. The lowest level consists of an API for each transport mechanism. The second level is a server that runs at each network site.
Reference: [JvRS95] <author> Dag Johansen, Robbert van Renesse, and Fred B. Scheid-ner. </author> <title> Operating system support for mobile agents. </title> <booktitle> In Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Thus transportable agents are more efficient than the traditional client-server paradigm and allow the rapid development of distributed applications. Transportable agents are a new research area. The few existing systems include Telescript T M from General Magic and Tacoma from the University of Tromst and the University of Cor-nell <ref> [Whi94, JvRS95] </ref>. These initial systems suffer from a range of weaknesses. Tacoma, for example, requires the programmer to explicitly capture state information before migration and provides no security mechanisms. Telescript requires powerful or special-purpose hardware, is not open to researchers and limits the programmer to a single language. <p> Finally, transportable agents ease the development, testing and deployment of distributed applications since an application can dynamically distribute its components as it sees fit. The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma <ref> [JvRS95] </ref>, Telescript [Whi94, Whi95b, Whi95a], M ff [DiMMTH95, TDiMMH94] and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance.
Reference: [KK94] <author> Keith Kotay and David Kotz. </author> <title> Transportable agents. </title> <editor> In Yan-nis Labrou and Tim Finin, editors, </editor> <booktitle> Proceedings of the CIKM Workshop on Intelligent Information Agents, Third International Conference on Information and Knowledge Man 14 agement (CIKM 94), </booktitle> <address> Gaith--ersburg, Maryland, </address> <month> December </month> <year> 1994. </year>
Reference-contexts: The architecture of Agent Tcl is shown in Figure 2. The architecture builds on the server model of Telescript [Whi94], the multiple languages of Dixie [Gai94] and the transport mechanisms of two predecessors at Dartmouth <ref> [Har95, KK94] </ref>. The architecture has four levels. The lowest level consists of an API for each transport mechanism. The second level is a server that runs at each network site.
Reference: [Nog95] <author> Saurab Nog. </author> <title> TCP/IP connections in Agent Tcl. Class Project, </title> <type> CS 108: </type> <institution> Artificial Intelligence, Department of Computer Science, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: Direct connections are not required for communication but are more efficient since they bypass the server. The agent meet command requests a direct connection while agent accept either accepts or rejects the connection. The two commands first exchange a round of messages as suggested in <ref> [Nog95] </ref> and shown in send a connection request to the destination agent. The destination agent uses agent accept to get the connection request and to send either an acceptance or rejection. An acceptance includes a TCP/IP port number. The source agent connects to that port on the recipient's machine.
Reference: [Ous94] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: No service agents have been implemented and the names-pace is flat rather than hierarchical. Here we briefly discuss Tcl and then the details of the alpha release. 4.1 Tcl Tcl is a high-level scripting language that was developed in 1987 and has enjoyed enormous popularity <ref> [Ous94] </ref>. Tcl has several advantages as a transportable-agent language. Tcl is easy to learn and use due to its elegant simplicity and an imperative style that is immediately familiar to any programmer.
Reference: [Rei94] <author> Andy Reinhardt. </author> <title> The network with smarts. </title> <journal> Byte, </journal> <pages> pages 51-64, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. The current status of the intelligent router work is unclear. Also notable are the object-oriented systems Obliq, SmallTalk Agents and IBM Intelligent Communications, each of which allows objects to dynamically move through a network <ref> [Car94, Way95, Rei94] </ref>.
Reference: [Sah94] <author> Adam Sah. </author> <title> TC: An efficient implementation of the Tcl language. </title> <type> Master's thesis, </type> <institution> University of California at Berkeley, </institution> <month> May </month> <year> 1994. </year> <note> Available as technical report UCB-CSD-94-812. </note>
Reference-contexts: In addition Tcl is not object-oriented and provides no code modularization aside from procedures. This makes it difficult to write and debug large scripts. Fortunately several groups are working on object-oriented extensions to Tcl and on faster Tcl interpreters <ref> [Sah94] </ref>. There are also efficient and structured alternatives to Tcl such as the new Java language [Sun94]. The lack of efficiency and structure has not been an issue so far since our agents are small and rely on existing tools at each site for intensive processing.
Reference: [SBD94] <author> Adam Sah, Jon Blow, and Brian Dennis. </author> <title> An introduction to the Rush language. </title> <booktitle> In Proceedings of the 1994 Tcl Workshop, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This is more efficient than encapsulating the resource within an agent and will be an attractive alternative in certain applications. Tcl has several disadvantages however. Tcl is inefficient compared to most other interpreted languages and is ten thousand times slower than optimized C <ref> [SBD94] </ref>. In addition Tcl is not object-oriented and provides no code modularization aside from procedures. This makes it difficult to write and debug large scripts. Fortunately several groups are working on object-oriented extensions to Tcl and on faster Tcl interpreters [Sah94].
Reference: [SG90] <author> J. Stamos and D. Gifford. </author> <title> Remote evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The subprogram executes at the server and returns only the final result to the client. All intermediate data transfer is eliminated, conserving bandwidth and reducing overall latency. The subprogram approach is exemplified in the Network Command Language (NCL), Remote Evaluation (REV) and SUPRA-RPC <ref> [Fal87, SG90, Sto94] </ref>. The subprograms of NCL, REV and SUPRA-RPC are limited in that they can not migrate after their initial transfer, can not communicate easily with each other, maintain the fixed 2 client-server division and are explicitly tied to the client.
Reference: [Sho93] <author> Yoav Shoham. </author> <title> Agent oriented programming. </title> <journal> Journal of Artificial Intelligence, </journal> <year> 1993. </year>
Reference-contexts: As in Tacoma all other services are provided by agents. Such services include planning, scheduling, dynamic blackboards, group communication, location-independent addressing and fault tolerance. With the addition of appropriate service agents, Agent Tcl can become the lowest level of more complex agent architectures such as Agent-0 <ref> [Sho93] </ref>, KQML-based facilitators [GK94], the Open Agent Architecture, [CCeWB94], the proposed IBM Itinerant Agents [CGH + 95] and the evolving Unified Agent Architecture [Bel95]. The third level of the Agent Tcl architecture consists of one interpreter for each available agent language.
Reference: [SS94] <author> Mukesh Singhal and Niran-jan G. Shivaratri. </author> <title> Advanced concepts in operating systems: Distributed, database and multiprocessor operating systems. </title> <publisher> McGraw-Hill Series in Computer Science. McGraw-Hill, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: The most common communication mechanism is message passing. Message passing is powerful and flexible but requires the programmer to handle low-level details such as determining the network address of the server, matching responses with requests and handling communication errors <ref> [SS94] </ref>. Remote procedure call (RPC) hides these low level details by allowing a client to invoke a server operation using the standard procedure call mechanism [BN84]. Most implementations of RPC use stub procedures.
Reference: [Sto94] <author> A. D. Stoyenko. SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls. </title> <journal> Software-Practice and Experience, </journal> <volume> 24(1) </volume> <pages> 27-49, </pages> <month> Jan-uary </month> <year> 1994. </year>
Reference-contexts: The subprogram executes at the server and returns only the final result to the client. All intermediate data transfer is eliminated, conserving bandwidth and reducing overall latency. The subprogram approach is exemplified in the Network Command Language (NCL), Remote Evaluation (REV) and SUPRA-RPC <ref> [Fal87, SG90, Sto94] </ref>. The subprograms of NCL, REV and SUPRA-RPC are limited in that they can not migrate after their initial transfer, can not communicate easily with each other, maintain the fixed 2 client-server division and are explicitly tied to the client.
Reference: [Sun94] <institution> The Java language: A white paper. Sun Microsystems White Paper, Sun Microsys-tems, </institution> <year> 1994. </year>
Reference-contexts: The intelligent routers of [WVF89] move from machine to machine to accomplish a given task; the Safe-Tcl/MIME combination allows Tcl scripts to be embedded in electronic mail messages [Way95]; the HotJava browser al 3 lows Java scripts to be embedded in World Wide Web documents <ref> [Sun94] </ref>; a SodaBot application can dynamically distribute its components [Coe94]; and Postscript programs are often sent to remote displays. Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. The current status of the intelligent router work is unclear. <p> This makes it difficult to write and debug large scripts. Fortunately several groups are working on object-oriented extensions to Tcl and on faster Tcl interpreters [Sah94]. There are also efficient and structured alternatives to Tcl such as the new Java language <ref> [Sun94] </ref>. The lack of efficiency and structure has not been an issue so far since our agents are small and rely on existing tools at each site for intensive processing.
Reference: [TDiMMH94] <author> Christian Tschudin, Gio-vanna Di Marzo, Murhimanya Muhugusa, and Jurgen Harms. </author> <title> Messenger-based operating systems. </title> <type> Technical report, </type> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference-contexts: The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript [Whi94, Whi95b, Whi95a], M ff <ref> [DiMMTH95, TDiMMH94] </ref> and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance.
Reference: [Way95] <author> Peter Wayner. </author> <title> Agents Unleashed: A public domain look at agent technology. AP Professional, </title> <address> Chestnut Hill, Mas-sachusetts, </address> <year> 1995. </year>
Reference-contexts: The development team has focused on the knowledge-based aspects. There are numerous other systems that exhibit aspects of transportable-agent behavior. The intelligent routers of [WVF89] move from machine to machine to accomplish a given task; the Safe-Tcl/MIME combination allows Tcl scripts to be embedded in electronic mail messages <ref> [Way95] </ref>; the HotJava browser al 3 lows Java scripts to be embedded in World Wide Web documents [Sun94]; a SodaBot application can dynamically distribute its components [Coe94]; and Postscript programs are often sent to remote displays. Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. <p> Only the intelligent routers provide arbitrary migration and only SodaBot provides arbitrary communication. The current status of the intelligent router work is unclear. Also notable are the object-oriented systems Obliq, SmallTalk Agents and IBM Intelligent Communications, each of which allows objects to dynamically move through a network <ref> [Car94, Way95, Rei94] </ref>.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year>
Reference-contexts: Thus transportable agents are more efficient than the traditional client-server paradigm and allow the rapid development of distributed applications. Transportable agents are a new research area. The few existing systems include Telescript T M from General Magic and Tacoma from the University of Tromst and the University of Cor-nell <ref> [Whi94, JvRS95] </ref>. These initial systems suffer from a range of weaknesses. Tacoma, for example, requires the programmer to explicitly capture state information before migration and provides no security mechanisms. Telescript requires powerful or special-purpose hardware, is not open to researchers and limits the programmer to a single language. <p> This figure was adapted from <ref> [Whi94] </ref>. the Internet. Although Agent Tcl is far from complete, it has been used in four information-management applications in which the relevant resources are distributed across a small network. These applications demonstrate the convenience and efficiency of transportable agents. Section 2 discusses existing transportable-agent systems. <p> Transportable agents do not require the maintenance of state information at both the local and remote machines and do not require a permanent connection between machines. This makes transportable agents more fault-tolerant and, in combination with their efficient use of network resources, makes them ideally suited to mobile computing <ref> [Whi94] </ref>. Transportable agents are a more natural fit for applications such as workflow, information filtering and network management in which processing must be performed on multiple machines in sequence. A transportable agent simply migrates through the machines in the desired order. <p> Finally, transportable agents ease the development, testing and deployment of distributed applications since an application can dynamically distribute its components as it sees fit. The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript <ref> [Whi94, Whi95b, Whi95a] </ref>, M ff [DiMMTH95, TDiMMH94] and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance. <p> The architecture of Agent Tcl is shown in Figure 2. The architecture builds on the server model of Telescript <ref> [Whi94] </ref>, the multiple languages of Dixie [Gai94] and the transport mechanisms of two predecessors at Dartmouth [Har95, KK94]. The architecture has four levels. The lowest level consists of an API for each transport mechanism. The second level is a server that runs at each network site.
Reference: [Whi95a] <author> James E. White. </author> <title> Telescript technology: An introduction to the language. General Magic White Paper, General Magic, </title> <year> 1995. </year>
Reference-contexts: Finally, transportable agents ease the development, testing and deployment of distributed applications since an application can dynamically distribute its components as it sees fit. The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript <ref> [Whi94, Whi95b, Whi95a] </ref>, M ff [DiMMTH95, TDiMMH94] and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance.
Reference: [Whi95b] <author> James E. White. </author> <title> Telescript technology: Scenes from the electronic marketplace. General Magic White Paper, General Magic, </title> <year> 1995. </year>
Reference-contexts: Finally, transportable agents ease the development, testing and deployment of distributed applications since an application can dynamically distribute its components as it sees fit. The advantages of transportable agents have led to a flurry of recent implementation work. The four most notable systems are Tacoma [JvRS95], Telescript <ref> [Whi94, Whi95b, Whi95a] </ref>, M ff [DiMMTH95, TDiMMH94] and IBM Itinerant Agents [CGH + 95]. Tacoma agents are written in Tcl/Horus which is a version of the Tcl scripting language that uses Ho-rus to provide group communication and fault tolerance.
Reference: [Wu95] <author> Yunxin Wu. </author> <title> Advanced algorithms of information organization and retrieval. </title> <type> Master's thesis, </type> <institution> Thayer School of Engineering, Dartmouth College, </institution> <year> 1995. </year>
Reference-contexts: The parent then contacts the user's "mail" agent to send the email message. Agent Tcl has also been used in three information-retrieval applications. The first application involves technical reports [Cai95]; the second involves text-based medical records <ref> [Wu95] </ref>; and the third involves three-dimensional drawings of mechanical parts [Bha95, Coh95]. In all three cases the "documents" are distributed across a small network. An agent is sent to each network site.
Reference: [WVF89] <author> C. Daniel Wolfson, Ellen M. Voorhees, and Maura M. Flat-ley. </author> <title> Intelligent routers. </title> <booktitle> In Proceedings of the Ninth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 371-376. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: IBM Itinerant Agents is a proposed system that combines transportable agents with knowledge-based resource discovery [CGH + 95]. The development team has focused on the knowledge-based aspects. There are numerous other systems that exhibit aspects of transportable-agent behavior. The intelligent routers of <ref> [WVF89] </ref> move from machine to machine to accomplish a given task; the Safe-Tcl/MIME combination allows Tcl scripts to be embedded in electronic mail messages [Way95]; the HotJava browser al 3 lows Java scripts to be embedded in World Wide Web documents [Sun94]; a SodaBot application can dynamically distribute its components [Coe94];
References-found: 35

