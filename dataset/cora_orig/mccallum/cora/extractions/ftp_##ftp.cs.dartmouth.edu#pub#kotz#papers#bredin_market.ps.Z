URL: ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/bredin:market.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~agent/papers/index.html
Root-URL: http://www.cs.dartmouth.edu
Title: Market-based Resource Control for Mobile Agents  
Author: Jonathan Bredin, David Kotz, and Daniela Rus 
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Note: In Proceedings of "Autonomous Agents", pages  Copyright 1998 by Association of Computing Machinery (ACM). Also available as  
Email: fjonathan, dfk, rusg@cs.dartmouth.edu  
Date: 197-204, May 1998.  
Web: ftp://ftp.cs.dartmouth.edu/pub/kotz/papers/bredin:market.ps.Z  
Abstract: Mobile agents are programs that can migrate from machine to machine in a heterogeneous, partially disconnected network. As mobile agents move across a network, they consume resources. We discuss a system for controlling the activities of mobile agents that uses electronic cash, a banking system, and a set of resource managers. We describe protocols for transactions between agents. We present fixed-pricing and dynamic-pricing policies for resources. We focus on and analyze the sealed-bid second-price auction as a mechanism for dynamic pricing. 
Abstract-found: 1
Intro-found: 1
Reference: [CMM97] <author> Anthony Chavez, Alexandros Moukas, and Pat-tie Maes. Challenger: </author> <title> A multiagent system for distributed resource allocation. </title> <booktitle> In Proceedings of the International Conference on Autonomous Agents, </booktitle> <pages> pages 323-331, </pages> <address> Marina Del Rey, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: Seller-driven auctions: auctions are feasible when there are many buyers competing for the same item (resource), particularly when there are more buyers than there are items. 4. Buyer-driven auctions: here, sellers broadcast their prices, essentially bidding for buyers (for example, <ref> [CMM97] </ref>). In the following section we discuss our work on seller-driven auctions. 5.2 Dynamic Pricing with Auctions Auctions allow buyers to competitively set the price for goods being sold, although the seller may have a reservation price below which sale will not occur.
Reference: [Gra96] <author> Robert S. Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the 1996 Tcl/Tk Workshop, </booktitle> <pages> pages 9-23, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: An agent can use the Tk toolkit to present a graphical user interface on either its home machine or on a remote machine to which it has migrated. D'Agents protects individual machines from malicious agents (as well as groups of machines that are under single administrative control) <ref> [Gra97, Gra96] </ref>. 4 Resource Control As mobile agents move across a network, they consume resources. <p> Section 5 we describe our experiments using auctions to allow the resource managers to dynamically set prices based on supply, demand, and "market conditions," such as the prices it sees offered by its "competitors." In D'Agents we use the Safe-Tcl [OLW97] infrastructure to enforce the decisions of the resource managers <ref> [Gra96] </ref>. The Safe-Tcl kernel interpreter intercepts sensitive procedure calls. On the first access, it asks the resource manager for its decision; it caches the decision to avoid asking the resource manager on subsequent resource accesses.
Reference: [Gra97] <author> Robert Gray. </author> <title> Agent Tcl: A flexible and secure mobile-agent system. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> June </month> <year> 1997. </year> <note> Available as Dartmouth Computer Science Technical Report TR98-327. </note>
Reference-contexts: This co-location enhances programmers' flexibility in much the same manner as does multi-threaded programming, by allowing software authors another dimension to express solutions. D'Agents <ref> [Gra97, KGN + 97] </ref> and Telescript [Whi94] are examples of systems supporting this form of migratory computation. Allowing processes to relocate, however, reinforces the importance of regulation. Social systems have evolved markets as simple distributed solutions to limiting consumption and facilitating trade. <p> By adding a penalty for decommitting [SL96], agents can be persuaded to act in responsible fashion, while still having the flexibility to back out of a transaction in an emergency. 3 D'Agents: a Mobile Agent System D'Agents <ref> [RGK97, Gra97, KGN + 97] </ref> was developed to support mobile agents written in Agent Tcl, Agent Java, and Agent Scheme (extensions of Tcl, Java, and Scheme, respectively) over the past two years. <p> An agent can use the Tk toolkit to present a graphical user interface on either its home machine or on a remote machine to which it has migrated. D'Agents protects individual machines from malicious agents (as well as groups of machines that are under single administrative control) <ref> [Gra97, Gra96] </ref>. 4 Resource Control As mobile agents move across a network, they consume resources.
Reference: [GSW97] <author> Alok Gupta, Dale O. Stahl, and Andrew B. Whinston. </author> <title> Priority pricing of integrated services networks. </title> <editor> In Lee McKnight and J. P. Bailey, editors, </editor> <title> Internet Economics. </title> <publisher> MIT Press, </publisher> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Holding a share ensures that an agent will receive a fraction of processor use proportional to the number of shares in circulation. Finally, it is possible to fix prices for multiple levels of service quality as described in <ref> [GSW97] </ref>. Prices can periodically be calibrated to match changing demand and encourage responsible consumption. Markets require a mechanism to ensure reliable and legitimate transactions among agents. We propose using a trusted third party as an arbiter, though that is not the only solution.
Reference: [KGN + 97] <author> David Kotz, Robert Gray, Saurab Nog, Daniela Rus, Sumit Chawla, and George Cybenko. </author> <title> Agent Tcl: Targeting the needs of mobile computers. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4) </volume> <pages> 58-67, </pages> <month> July/August </month> <year> 1997. </year>
Reference-contexts: Thus, mobile agents co-locate data and computation by bringing the computation to the data, rather than by bringing the data to the computation. Agents have the necessary autonomy to make decisions, and to interact with other agents and services to accomplish their goals. Our previous research <ref> [RGK97, KGN + 97] </ref> shows that mobile agents have tremendous promise as a uniform paradigm for developing distributed applications, primarily because agents are easier to write than message- or RPC-based applications, their autonomy makes them well suited to poorly connected network environments, and they remove the need for distributed applications to <p> This co-location enhances programmers' flexibility in much the same manner as does multi-threaded programming, by allowing software authors another dimension to express solutions. D'Agents <ref> [Gra97, KGN + 97] </ref> and Telescript [Whi94] are examples of systems supporting this form of migratory computation. Allowing processes to relocate, however, reinforces the importance of regulation. Social systems have evolved markets as simple distributed solutions to limiting consumption and facilitating trade. <p> By adding a penalty for decommitting [SL96], agents can be persuaded to act in responsible fashion, while still having the flexibility to back out of a transaction in an emergency. 3 D'Agents: a Mobile Agent System D'Agents <ref> [RGK97, Gra97, KGN + 97] </ref> was developed to support mobile agents written in Agent Tcl, Agent Java, and Agent Scheme (extensions of Tcl, Java, and Scheme, respectively) over the past two years. <p> The server restores the state image and the Tcl script continues execution on the new machine from the exact point at which it left off. Our agents can communicate via message passing, stream connections, or remote procedure call <ref> [KGN + 97] </ref>. An agent can use the Tk toolkit to present a graphical user interface on either its home machine or on a remote machine to which it has migrated.
Reference: [OLW97] <author> John K. Ousterhout, Jacob Y. Levy, and Brent B. Welch. </author> <title> The Safe-Tcl security model. </title> <type> Technical report, </type> <institution> Sun Microsystems Laboratories, </institution> <year> 1997. </year> <note> In progress. Draft available at http:// www.sunlabs.com/ people/ john.ousterhout/ safeTcl.html. </note>
Reference-contexts: In Section 5 we describe our experiments using auctions to allow the resource managers to dynamically set prices based on supply, demand, and "market conditions," such as the prices it sees offered by its "competitors." In D'Agents we use the Safe-Tcl <ref> [OLW97] </ref> infrastructure to enforce the decisions of the resource managers [Gra96]. The Safe-Tcl kernel interpreter intercepts sensitive procedure calls. On the first access, it asks the resource manager for its decision; it caches the decision to avoid asking the resource manager on subsequent resource accesses.
Reference: [RGK97] <author> Daniela Rus, Robert Gray, and David Kotz. </author> <title> Transportable information agents. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 9 </volume> <pages> 215-238, </pages> <year> 1997. </year>
Reference-contexts: Thus, mobile agents co-locate data and computation by bringing the computation to the data, rather than by bringing the data to the computation. Agents have the necessary autonomy to make decisions, and to interact with other agents and services to accomplish their goals. Our previous research <ref> [RGK97, KGN + 97] </ref> shows that mobile agents have tremendous promise as a uniform paradigm for developing distributed applications, primarily because agents are easier to write than message- or RPC-based applications, their autonomy makes them well suited to poorly connected network environments, and they remove the need for distributed applications to <p> By adding a penalty for decommitting [SL96], agents can be persuaded to act in responsible fashion, while still having the flexibility to back out of a transaction in an emergency. 3 D'Agents: a Mobile Agent System D'Agents <ref> [RGK97, Gra97, KGN + 97] </ref> was developed to support mobile agents written in Agent Tcl, Agent Java, and Agent Scheme (extensions of Tcl, Java, and Scheme, respectively) over the past two years. <p> Agents are also used to explore the vendor catalogs and search for products that meet the customer's needs. In all cases, the agents are mobile and can function while the salesperson's laptop is disconnected <ref> [RGK97] </ref>. traveling salesperson can gather information about a particular type of purchase by sending an agent to locate all the vendors of the required type of product. The agents locate vendors by interacting with a distributed system of yellow pages, and bring back the most recent catalogs from the vendors.
Reference: [SL95] <author> Tuomas W. Sandholm and Victor R. Lesser. </author> <title> Equilibrium analysis of the possibilities of unenforced exchange in multiagent systems. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI-95), </booktitle> <pages> pages 694-701, </pages> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: Prices can periodically be calibrated to match changing demand and encourage responsible consumption. Markets require a mechanism to ensure reliable and legitimate transactions among agents. We propose using a trusted third party as an arbiter, though that is not the only solution. Sandholm <ref> [SL95] </ref> proposes game-theoretical situations where trade is likely to be safe given the maximum loss of a single transaction and the effect of defaulting on one's reputation.
Reference: [SL96] <author> Tuomas W. Sandholm and Victor R. Lesser. </author> <title> Advantages of a leveled commitment contracting protocol. </title> <booktitle> In Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 126-133, </pages> <address> Portland, Oregon, </address> <year> 1996. </year>
Reference-contexts: Sandholm [SL95] proposes game-theoretical situations where trade is likely to be safe given the maximum loss of a single transaction and the effect of defaulting on one's reputation. By adding a penalty for decommitting <ref> [SL96] </ref>, agents can be persuaded to act in responsible fashion, while still having the flexibility to back out of a transaction in an emergency. 3 D'Agents: a Mobile Agent System D'Agents [RGK97, Gra97, KGN + 97] was developed to support mobile agents written in Agent Tcl, Agent Java, and Agent Scheme
Reference: [Tan95] <author> Mike Tanner. </author> <title> Practical Queueing Analysis. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> London, </address> <year> 1995. </year>
Reference-contexts: It is possible to derive the expected wait time for any particular client given the expected time to service all the clients with higher bids. The utilization of a M/M/1 queued server is just the Poisson ratio function: = R (K; z) = 1 K! j=0 j! <ref> [Tan95, p. 244] </ref> where K is the number of clients in the system and z is the service ratio (the time taken between service requests, divided by time taken up by service).
Reference: [Vic61] <author> William Vickery. Counterspeculation, auctions, </author> <title> and competitive sealed tenders. </title> <journal> Journal of Finance, </journal> <volume> 16 </volume> <pages> 8-37, </pages> <year> 1961. </year>
Reference-contexts: While English auctions are efficient in extracting buyer values, they often take many rounds to complete and thus can be inefficient for agents. Instead, we investigate the sealed-bid second-price auction proposed by Vickery <ref> [Vic61] </ref>. The sealed-bid second-price auction is strategically identical to the English auction but it requires only a single round of bidding. Buyers privately submit their own valuations. The winner is the competitor submitting the highest bid, though the price of the good is the highest losing bid.
Reference: [Wel96] <author> Michael P. Wellman. </author> <title> Market-oriented programming: Some early lessons. </title> <editor> In Scott H. Clear-water, editor, </editor> <booktitle> Market-Based Control, chapter 4, </booktitle> <pages> pages 74-96. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1996. </year>
Reference-contexts: Spawn [WHH + 92] is an example of a system using second-price sealed-bid auctions to distribute resources. In Spawn, tasks compete for resources by submitting bids to the resource's owner. Bids can be expressed in a more complex manner than a simple price in systems like WAL-RAS <ref> [Wel96] </ref>, where agents submit demand functions expressing the quantity desired at given prices. The market then computes a clearing price for goods. Waldspurger and Weihl [WW96] describe their allocation framework for selling shares that represent options for processor use.
Reference: [WHH + 92] <author> Carl A. Waldspurger, Tad Hogg, Bernardo A. Huberman, Jeffrey O. Kephart, and W. Scott Stornetta. Spawn: </author> <title> A distributed computational economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2) </volume> <pages> 103-117, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: There have been several major approaches to setting prices in computational markets: sealed-bid auctions, reservation-style resource options, and priority pricing. Spawn <ref> [WHH + 92] </ref> is an example of a system using second-price sealed-bid auctions to distribute resources. In Spawn, tasks compete for resources by submitting bids to the resource's owner.
Reference: [Whi94] <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper, </title> <year> 1994. </year>
Reference-contexts: This co-location enhances programmers' flexibility in much the same manner as does multi-threaded programming, by allowing software authors another dimension to express solutions. D'Agents [Gra97, KGN + 97] and Telescript <ref> [Whi94] </ref> are examples of systems supporting this form of migratory computation. Allowing processes to relocate, however, reinforces the importance of regulation. Social systems have evolved markets as simple distributed solutions to limiting consumption and facilitating trade.
Reference: [WW96] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> An object-oriented framework for modular resource management. </title> <booktitle> In Proceedings of the Fifth International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 138-143. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1996. </year>
Reference-contexts: Bids can be expressed in a more complex manner than a simple price in systems like WAL-RAS [Wel96], where agents submit demand functions expressing the quantity desired at given prices. The market then computes a clearing price for goods. Waldspurger and Weihl <ref> [WW96] </ref> describe their allocation framework for selling shares that represent options for processor use. Holding a share ensures that an agent will receive a fraction of processor use proportional to the number of shares in circulation.
References-found: 15

