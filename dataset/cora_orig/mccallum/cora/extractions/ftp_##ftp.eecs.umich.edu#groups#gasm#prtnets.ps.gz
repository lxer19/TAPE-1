URL: ftp://ftp.eecs.umich.edu/groups/gasm/prtnets.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: glaesser@uni-paderborn.de  
Title: Combining Abstract State Machines with Predicate Transition Nets  
Author: Uwe Glasser 
Address: Germany  
Affiliation: Heinz Nixdorf Institut, Paderborn,  
Abstract: Abstract State Machines (ASMs) [13] and Predicate Transition (Pr/T-) Nets [10] constitute alternative approaches to mathematical modelling of concurrent and embedded computing systems. In fact, they are based on similar combinations of the same mathematical concepts: they both combine declarative concepts of first-order logic with the operational view of transition systems; moreover, they are closely related with respect to the underlying notions of concurrency and non-determinism. On the other hand, the resulting system representations differ considerably (e.g., they use distinct notations and are based on complementary system views) so that it is not immediately clear how they can be combined or transformed into each other. The work presented here investigates the formal relation between ASMs and Pr/T-nets with the aim to integrate them into a common framework for modelling concurrent and embedded systems, where Pr/T-nets are considered as a graphical interface for distributed ASMs. For the class of strict Pr/T-nets (which constitutes the basic form of Pr/T-nets) a transformation to distributed ASMs will be given. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> J.-R. Abrial, E. Borger, and H. Langmaack, editors. </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, volume 1165 of LNCS (State-of-the-Art Survey). </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Mathematical modelling of embedded computing systems often deals with concurrent and reactive behaviour (typical examples are distributed control systems in industrial production plants, e.g. as described in <ref> [1, 7] </ref>). The work presented here investigates the formal relation between two alternative approaches to model concurrency and reactivity, namely: Abstract State Machines (ASMs)| originally called Evolving Algebras|, as defined by Yuri Gurevich in [13], and Predicate/Transition (Pr/T-) Nets, as defined by Hartmann Genrich in [10].
Reference: 2. <author> Ch. Beierle, E. Borger, I. D - urd -anovic, U. Glasser, and E. Riccobene. </author> <title> Refining abstract machine specifications of the steam boiler control to well documented executable code. </title> <editor> In J.-R. Abrial, E. Borger, and H. Langmaack, editors, </editor> <title> Formal Methods for Industrial Applications: Specifying and Programming the Steam Boiler Control, </title> <booktitle> volume 1165 of LNCS (State-of-the-Art Survey), </booktitle> <pages> pages 52-78. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations [8, 15]|a fact which is often considered as an advantage when dealing with complex technical systems (see <ref> [2, 4, 3, 6] </ref>) 2 .
Reference: 3. <author> E. Borger and U. Glasser. </author> <title> A formal specification of the PVM architecture. </title> <editor> In B. Pehrson and I. Simon, editors, </editor> <booktitle> Proc. of the IFIP 13th World Computer Congress 1994, Volume I: Technology and Foundations, </booktitle> <pages> pages 402-409. </pages> <publisher> Elsevier Science Publishers B. V., </publisher> <year> 1994. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations [8, 15]|a fact which is often considered as an advantage when dealing with complex technical systems (see <ref> [2, 4, 3, 6] </ref>) 2 . <p> to functions which represent external interfaces and may therefore be altered by actions in the environment, as well (see [5] for details). 3.2 Distributed ASMs The concept of distributed ASMs 7 provides a flexible framework for analysis, modelling and validation of distributed architectures, concurrent languages, and (real-time) protocols (examples are <ref> [3, 4, 12, 14] </ref>). In a distributed ASM M several autonomous agents cooperatively model a concurrent computation a system in an asynchronous manner.
Reference: 4. <author> E. Borger, U. Glasser, and W. Mueller. </author> <title> Formal definition of an abstract VHDL'93 simulator by EA-machines. </title> <editor> In C. Delgado Kloos and P.T. Breuer, editors, </editor> <booktitle> Semantics of VHDL, volume 307 of The Kluwer International Series in Engineering and Computer Science. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations [8, 15]|a fact which is often considered as an advantage when dealing with complex technical systems (see <ref> [2, 4, 3, 6] </ref>) 2 . <p> to functions which represent external interfaces and may therefore be altered by actions in the environment, as well (see [5] for details). 3.2 Distributed ASMs The concept of distributed ASMs 7 provides a flexible framework for analysis, modelling and validation of distributed architectures, concurrent languages, and (real-time) protocols (examples are <ref> [3, 4, 12, 14] </ref>). In a distributed ASM M several autonomous agents cooperatively model a concurrent computation a system in an asynchronous manner.
Reference: 5. <author> Egon Borger. </author> <title> Why use evolving algebras for hardware and software engineering. </title> <booktitle> In Proc. of SOFSEM'95, volume 1012 of LNCS, </booktitle> <pages> pages 236-271. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: For a comprehensive definition of the semantic foundations of ASMs see [13]. An instructive treatment of methodological aspects concerning modelling and validation of complex systems can be found in <ref> [5] </ref>. 3.1 The Basic Model An ASM M is defined by its program P consisting of a finite number of transition rules and its initial state S 0 . States of M are defined as structures over a given vocabulary . <p> Interactions between a system and its external environment are considered by extending the basic ASM model to functions which represent external interfaces and may therefore be altered by actions in the environment, as well (see <ref> [5] </ref> for details). 3.2 Distributed ASMs The concept of distributed ASMs 7 provides a flexible framework for analysis, modelling and validation of distributed architectures, concurrent languages, and (real-time) protocols (examples are [3, 4, 12, 14]).
Reference: 6. <author> Maria Brielmann. </author> <title> Modelling differential equations by basic information technology means. </title> <editor> In R. Moreno-Diaz F. Pichler and R. Albrecht, editors, </editor> <booktitle> Computer Aided Systems Theory-EUROCAST'95 (Proc. of the Fifth International Workshop on Computer Aided Systems Theory), volume 1030 of LNCS, </booktitle> <pages> pages 163-174. </pages> <publisher> Springer--Verlag, </publisher> <year> 1996. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations [8, 15]|a fact which is often considered as an advantage when dealing with complex technical systems (see <ref> [2, 4, 3, 6] </ref>) 2 .
Reference: 7. <author> T. Lindner C. Lewerentz, </author> <title> editor. Formal Development of Reactive Systems, </title> <booktitle> volume 891 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Mathematical modelling of embedded computing systems often deals with concurrent and reactive behaviour (typical examples are distributed control systems in industrial production plants, e.g. as described in <ref> [1, 7] </ref>). The work presented here investigates the formal relation between two alternative approaches to model concurrency and reactivity, namely: Abstract State Machines (ASMs)| originally called Evolving Algebras|, as defined by Yuri Gurevich in [13], and Predicate/Transition (Pr/T-) Nets, as defined by Hartmann Genrich in [10].
Reference: 8. <author> G. Del Castillo, I. D - urd -anovic and U. Glasser. </author> <title> An evolving algebra abstract machine. </title> <editor> In H. Kleine Buning, editor, </editor> <booktitle> Computer Science Logic, volume 1092 of LNCS, </booktitle> <pages> pages 191-214. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations <ref> [8, 15] </ref>|a fact which is often considered as an advantage when dealing with complex technical systems (see [2, 4, 3, 6]) 2 . <p> For a rigorous semantic definition of ASM rules we refer to [13] or <ref> [8] </ref>. 7 In this context the term distributed actually refers to the distribution of control rather than to the distribution of data. 8 For details see the notion of partially ordered runs in [13]).
Reference: 9. <author> H. J. Genrich and K. Lautenbach. </author> <title> System modelling with high-level Petri nets. </title> <booktitle> In Theoretical Computer Science, </booktitle> <volume> volume 13, </volume> <pages> pages 109-136. </pages> <publisher> North-Holland, </publisher> <year> 1981. </year>
Reference-contexts: of concurrency of distributed ASMs guarantees that agents do not interfere with each other; it can therefore not happen that two or more agents try to `pick up' the same (available) ticket within the same computation step of M. 4 Predicate/Transition Nets Pr/T-nets, originally introduced by Genrich and Lautenbach in <ref> [9] </ref>, provide an easily understandable graphical notation for modelling concurrency in a direct and intuitive way. Considered as mathematical objects they are however not that simple. We concentrate here on the basic form of Pr/T-nets.
Reference: 10. <editor> Hartmann J. Genrich. Predicate/Transition nets. In W. Brauer, W. Reisig, and G. Rozenberg, editors, </editor> <title> Petri Nets: Central Models and Their Properties, </title> <booktitle> volume 254 of Lecture Notes in Computer Science, </booktitle> <pages> pages 207-247. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: The work presented here investigates the formal relation between two alternative approaches to model concurrency and reactivity, namely: Abstract State Machines (ASMs)| originally called Evolving Algebras|, as defined by Yuri Gurevich in [13], and Predicate/Transition (Pr/T-) Nets, as defined by Hartmann Genrich in <ref> [10] </ref>. ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations [8, 15]|a fact which is often considered as an advantage when dealing with complex technical systems (see [2, 4, 3, 6]) 2 . <p> with f x 1 ; : : : ; x n g D, instead of writing 8x 2 D : R (x) , x 2 f x 1 ; : : : ; x n g. 4 The informal description of the system model is a slightly modified version from <ref> [10] </ref>. 3 Abstract State Machines We describe here only the basic concepts of the ASM model. For a comprehensive definition of the semantic foundations of ASMs see [13]. <p> This basic model provides a kind of normal form which has been used to compare Pr/T-nets that are supposed to be equivalent. More precisely, the basic form of Pr/T-nets is constituted by the so-called class of strict Pr/T-nets 11 as defined by Genrich in <ref> [10] </ref> (resp., the class of concrete Pr/T-nets 12 The basic Pr/T-net model has been extended in various ways, e.g., by Genrich through the definition of abstract Pr/T-nets [11] or by Rammig through the introduction of hierarchy and recursions [18]. <p> The definition given below reflects the view on strict Pr/T-nets according to <ref> [10] </ref>, though we use here a slightly different notation (similar to the one in [11]). 4.1 Pr/T-Net Syntax Let L denote a first-order language defined over a given vocabulary and R be a suitable structure for , where consists of a finite collection of function names and predicate names as follows: <p> basic form with annotations in L is defined by a pair (N ; R) where N is a marked annotated net, N = (N; A; M 0 ), consisting of the directed net structure N , the annotation A, and the initial marking M 0 as follows. 11 According to <ref> [10] </ref>, strict means here that the places of a Pr/T-net represent dynamic relations (as explained below) instead of multi-relations. 12 In contrast to concrete Pr/T-nets, which are defined over a fixed structure, abstract Pr/T-nets treat the underlying structure as a free parameter (see [11]). The Net Structure N. <p> its characteristic function through a linear combination in D r with Boolean coefficients as follows: the constituting elements of Q are denoted by a symbolic sum of r-ary tuples of closed terms, such that the coefficients of explicitly represented tuples are 1, while tuples with coefficient 0 are suppressed (see <ref> [10] </ref> for details). In this context 0 and 1 refer to linear combinations in D r which respectively represent the empty set ; and D r itself. <p> Pr/T-net model of the RMS underlying semantics ensures that concurrent transitions do not interfere with each other. In <ref> [10] </ref>, Genrich defines the formal semantics of strict Pr/T-nets in two ways, namely by means of condition event systems 14 and in terms of a symbolic transition rule. Both semantic definitions are consistent and commute. We concentrate here on the latter alternative. <p> Both semantic definitions are consistent and commute. We concentrate here on the latter alternative. As it will turn out this view considerably simplifies the transformation of Pr/T-nets into ASMs. We summarize here only the central aspects of the symbolic transition rule semantics and refer to <ref> [10] </ref> for further details. Let (N ; R) denote a Pr/T-net in basic form with N = (N; A; M 0 ) and N = (P; T ; F ) as defined in Sect. 4.1. <p> The result of applying a substitution ff to the variables in the index of t is denoted by t : ff. A substitution ff replacing all variables in the index of t by constants is called feasible iff the following conditions hold <ref> [10] </ref>: 1. There is a substituition fi replacing the dangling variables in A T (t) such that R ((A T (t) : ff) : fi) = true. 2. <p> Concurrency and Non-Determinism. Two transitions t and t 0 of N may occur simultaneously for substitutions ff and ff 0 (t = t 0 or ff = ff 0 included) iff they both may occur and the instances t : ff and t 0 : ff 0 are independent <ref> [10] </ref>.
Reference: 11. <author> Hartmann J. Genrich. </author> <title> Equivalence transformations of Pr/T-nets. </title> <editor> In Grzegorz Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets 1989, volume 424 of Lecture Notes in Computer Science, </booktitle> <pages> pages 179-208. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: More precisely, the basic form of Pr/T-nets is constituted by the so-called class of strict Pr/T-nets 11 as defined by Genrich in [10] (resp., the class of concrete Pr/T-nets 12 The basic Pr/T-net model has been extended in various ways, e.g., by Genrich through the definition of abstract Pr/T-nets <ref> [11] </ref> or by Rammig through the introduction of hierarchy and recursions [18]. The definition given below reflects the view on strict Pr/T-nets according to [10], though we use here a slightly different notation (similar to the one in [11]). 4.1 Pr/T-Net Syntax Let L denote a first-order language defined over a <p> in various ways, e.g., by Genrich through the definition of abstract Pr/T-nets <ref> [11] </ref> or by Rammig through the introduction of hierarchy and recursions [18]. The definition given below reflects the view on strict Pr/T-nets according to [10], though we use here a slightly different notation (similar to the one in [11]). 4.1 Pr/T-Net Syntax Let L denote a first-order language defined over a given vocabulary and R be a suitable structure for , where consists of a finite collection of function names and predicate names as follows: ffi all function names in are static names by default, while predicate names may <p> M 0 as follows. 11 According to [10], strict means here that the places of a Pr/T-net represent dynamic relations (as explained below) instead of multi-relations. 12 In contrast to concrete Pr/T-nets, which are defined over a fixed structure, abstract Pr/T-nets treat the underlying structure as a free parameter (see <ref> [11] </ref>). The Net Structure N. <p> Several transition may occur concurrently according to an asynchronous computation model. The 13 This example is taken from <ref> [11] </ref>. WAITING USING IDLE AVAILABLE &lt;x,m&gt; &lt;x,e&gt; &lt;x&gt; &lt;x,m&gt; T T 1 3 5 &lt;x,s&gt; MODE (m) &lt;t&gt; m=s TICKET (t &lt;t&gt; S AGENT (x) S &lt;x&gt; TICKET (t &lt;t&gt; S TICKET (t &lt;t&gt; S Fig. 2.
Reference: 12. <author> Y. Gurevich and J. Huggins. </author> <title> The railroad crossing problem: An experiment with instantaneous actions and immediate reactions. </title> <editor> In H. Kleine Buning, editor, </editor> <booktitle> Computer Science Logic, volume 1092 of LNCS, </booktitle> <pages> pages 266-290. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: to functions which represent external interfaces and may therefore be altered by actions in the environment, as well (see [5] for details). 3.2 Distributed ASMs The concept of distributed ASMs 7 provides a flexible framework for analysis, modelling and validation of distributed architectures, concurrent languages, and (real-time) protocols (examples are <ref> [3, 4, 12, 14] </ref>). In a distributed ASM M several autonomous agents cooperatively model a concurrent computation a system in an asynchronous manner.
Reference: 13. <author> Yuri Gurevich. </author> <title> Evolving Algebra 1993: Lipari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The work presented here investigates the formal relation between two alternative approaches to model concurrency and reactivity, namely: Abstract State Machines (ASMs)| originally called Evolving Algebras|, as defined by Yuri Gurevich in <ref> [13] </ref>, and Predicate/Transition (Pr/T-) Nets, as defined by Hartmann Genrich in [10]. <p> For a comprehensive definition of the semantic foundations of ASMs see <ref> [13] </ref>. An instructive treatment of methodological aspects concerning modelling and validation of complex systems can be found in [5]. 3.1 The Basic Model An ASM M is defined by its program P consisting of a finite number of transition rules and its initial state S 0 . <p> For a rigorous semantic definition of ASM rules we refer to <ref> [13] </ref> or [8]. 7 In this context the term distributed actually refers to the distribution of control rather than to the distribution of data. 8 For details see the notion of partially ordered runs in [13]). <p> For a rigorous semantic definition of ASM rules we refer to <ref> [13] </ref> or [8]. 7 In this context the term distributed actually refers to the distribution of control rather than to the distribution of data. 8 For details see the notion of partially ordered runs in [13]). Module 1 ASM Agents Mod (a) Mod (c) a c Module 2 ASM Program Global State S View (b,S) View (c,S) View (a,S) Fig. 1. <p> choose-construct can informally be stated as follows: all free occurrences of x in R (x) are instantiated with some non-deterministically chosen element a 2 D such that a satisfies the specified condition Cond 9 . 9 If no such element exists, the behaviour of the choose-construct is not defined in <ref> [13] </ref>; however, it is convenient to assume here that the whole choose-construct has The var-ranges-over-construct has the effect that for each possible binding of x with an element from D a resulting instance of R (x) is created and that all these instances are simultaneously evaluated in one single computation step.
Reference: 14. <author> Jim Huggins. </author> <title> Kermit: Specification and verification. </title> <editor> In E. Borger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: to functions which represent external interfaces and may therefore be altered by actions in the environment, as well (see [5] for details). 3.2 Distributed ASMs The concept of distributed ASMs 7 provides a flexible framework for analysis, modelling and validation of distributed architectures, concurrent languages, and (real-time) protocols (examples are <ref> [3, 4, 12, 14] </ref>). In a distributed ASM M several autonomous agents cooperatively model a concurrent computation a system in an asynchronous manner.
Reference: 15. <author> B. Kleinjohann, E. Kleinjohann, and J. Tacken. </author> <title> The SEA language for system engineering and animation. </title> <booktitle> In Applications and Theory of Petri Nets, volume 1091 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: ASMs and Pr/T-nets model the observable behaviour of discrete dynamic systems in a direct and intuitive way such that the resulting descriptions naturally enable operational interpretations <ref> [8, 15] </ref>|a fact which is often considered as an advantage when dealing with complex technical systems (see [2, 4, 3, 6]) 2 .
Reference: 16. <editor> F. Pichler, H. Schwartzel, and R. Moreno-Diaz. </editor> <title> System Science and Systems Technology: From conceptual frameworks to applicable solutions. </title> <booktitle> In Proceedings of the Fourth International Workshop on Computer Aided Systems Technology (Ottawa, </booktitle> <address> Ont., </address> <month> May 16-20), </month> <year> 1994. </year>
Reference-contexts: In this respect our work is closely related to fundamental goals of systems theory and systems technology as stated in <ref> [16, 17] </ref>. The paper is organized as follows. Section 2 identifies common modelling concepts of ASMs and Pr/T-nets based on the notion of dynamic structure. Section 3 and Sect. 4 briefly present the basic definitions of the ASM and the Pr/T-net models, as far as they are required here.
Reference: 17. <author> Franz Pichler. </author> <title> Systems theory and engineering. </title> <editor> In F. Pichler and R. Moreno-Diaz, editors, </editor> <booktitle> Computer Aided Systems Theory - EUROCAST'93, </booktitle> <volume> LNCS 763, </volume> <pages> pages 2-10. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In this respect our work is closely related to fundamental goals of systems theory and systems technology as stated in <ref> [16, 17] </ref>. The paper is organized as follows. Section 2 identifies common modelling concepts of ASMs and Pr/T-nets based on the notion of dynamic structure. Section 3 and Sect. 4 briefly present the basic definitions of the ASM and the Pr/T-net models, as far as they are required here.
Reference: 18. <author> Franz J. Rammig. </author> <title> Modelling aspects of system level design. </title> <booktitle> In Proc. </booktitle> <volume> EURO-DAC '93, </volume> <pages> pages 534-539. </pages> <publisher> IEEE, </publisher> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: the so-called class of strict Pr/T-nets 11 as defined by Genrich in [10] (resp., the class of concrete Pr/T-nets 12 The basic Pr/T-net model has been extended in various ways, e.g., by Genrich through the definition of abstract Pr/T-nets [11] or by Rammig through the introduction of hierarchy and recursions <ref> [18] </ref>.
References-found: 18

