URL: http://www.iro.umontreal.ca/labs/infographie/papers/Fournier-1993-RTA/Fournier-1993-RTA.ps.gz
Refering-URL: http://www.iro.umontreal.ca/labs/infographie/papers/Fournier-1993-RTA/
Root-URL: http://www.iro.umontreal.ca
Email: j pouling@cs.ubc.ca  
Title: A Ray Tracing Accelerator Based on a Hierarchy of 1D Sorted Lists  
Author: Alain Fournier Pierre Poulin 
Keyword: RESUME KEYWORDS: ray tracing, acceleration, culling, space subdivision, bounding volumes, collision detection.  
Address: ffournier  
Affiliation: Department of Computer Science University of British Columbia  
Abstract: Since the introduction of ray tracing as a rendering technique, several approaches have been proposed to reduce the number of ray/object intersection tests. This paper presents yet another such approach based on a hierarchy of 1D sorted lists. A bounding box aligned with the axes encloses an object. The coordinates of each bounding box are ordered in three sorted lists (one for each axis) and are treated as events. Traversing a scene with a ray consists of traversing each sorted list in order, intersecting an object only when for this object a first event has been encountered (entered) in every dimension before a second event has been encountered (exited) in any dimension. To reduce the number of events (entries and exits) traversed, a hierarchy of sorted lists is constructed from a hierarchy of bounding boxes. The results are favourable for scenes ranging from moderate to high complexity. Further applications of the technique to hardware assist for ray tracing and to collision detection are discussed. Depuis l'introduction du lancer de rayon comme technique de synthese d'image, plusieurs approches ont ete pro-posees pour reduire le nombre de tests d'intersection entre les rayons et les objets. Cet article presente une approche basee sur une hierarchie de listes ordonnees dans chaque dimension. Chaque object est entoure par une bo^ite alignee avec les axes. Les coordonnees de chaque bo^ite sont or-donnees dans trois listes (une pour chaque axe) et sont traversees comme des evenements. Traverser une scene avec un rayon consiste a traverser chaque liste en ordre, inter-sectant un object seulement s'il a ete rencontre par un premier evenement (d'entree) dans toutes les dimensions avant un deuxieme evenement (de sortie) dans n'importe quelle dimension. Pour reduire le nombre d'evenements (entrees et sorties) traverses, une hierarchie de listes est construite a partir d'une hierarchie de bo^ites. Les resultats sont fa-vorables pour des scenes de complexite moyenne a elevee. D'autres applications de la technique pour l'acceleration par materiel du lancer de rayon et pour la detection des collisions sont aussi presentees. 
Abstract-found: 1
Intro-found: 1
Reference: [aman87] <author> John Amanatides and Andrew Woo. </author> <title> "A fast voxel traversal algorithm for ray tracing". </title> <booktitle> Eu-rographics '87, </booktitle> <pages> pp. 3-10, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Our ray tracing acceleration belongs to this later classification (1.b). This category includes various space subdivision schemes, directional techniques and hierarchies of bounding volumes. We can divide 3D spatial subdivision algorithms into two classes: uniform and non-uniform. Uniform subdivision [fuji86] <ref> [aman87] </ref> has the advantage of being easy to implement and the cost of traversing each element of the regular grid is very small. Unfortunately, the performance degrades when there are too many voxels because many empty voxels might be traversed and because of the cost of storage of the voxels. <p> The final event to be treated will be 16, an OUT in Y. RESULTS AND COMPARISONS We compared our list traversal algorithm to the uniform grid traversal described in <ref> [aman87] </ref>. Uniform grid traversal is a fairly standard acceleration technique we believe is stable enough from implementation to implementation to be considered a good frame of reference. Some comparisons between uniform grid traversal and other acceleration techniques can be found in [jeva89] [sung91] [subr91].
Reference: [arvo87] <author> James Arvo and David Kirk. </author> <title> "Fast Ray Tracing by Ray Classification". </title> <booktitle> Computer Graphics (SIGGRAPH '87 Proceedings), </booktitle> <volume> Vol. 21, No. 4, </volume> <pages> pp. 55-64, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: These directions are classified by direction cubes subdivided regularly or adaptively. The cubes can be located at specific point locations as for the light buffer [hain86], onto surfaces as for ray coherence [ohta87] or in volumes as for ray classification <ref> [arvo87] </ref>. Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing. Weghorst et al. [wegh84] studied criteria for choosing efficient bounding volumes for ray tracing.
Reference: [arvo89] <author> James Arvo and David Kirk. </author> <title> "A survey of ray tracing acceleration techniques". An introduction to ray tracing. </title> <journal> pp. </journal> <pages> 201-262. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: In its naive implementation, each ray must be intersected with each primitive in a scene. This approach is feasible only for scenes of modest size, and much research has focused on ways to make this technique more efficient for complex scenes. Arvo and Kirk <ref> [arvo89] </ref> give a good survey of ray tracing acceleration techniques. They classify acceleration techniques in three categories: (1) faster intersections, (2) fewer rays and (3) generalised rays.
Reference: [char90] <author> Mark J. Charney and Isaac D. Scherson. </author> <title> "Efficient Traversal of Well-Behaved Hierarchicial Trees of Extents for Ray-Tracing Complex Scenes". </title> <journal> The Visual Computer, </journal> <volume> Vol. 6, No. 3, </volume> <pages> pp. 167-178, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing. Weghorst et al. [wegh84] studied criteria for choosing efficient bounding volumes for ray tracing. Kay and Kajiya [kay86] use slabs as tighter bounding volumes. Charney and Scherson <ref> [char90] </ref> use binary trees of bounding volumes to reduce the number of ray/bounding volume intersections. However each of these approaches (except [char90]) relies on sorting the intersections with sub-bounding volumes or primitives each time a bounding volume is entered. <p> Weghorst et al. [wegh84] studied criteria for choosing efficient bounding volumes for ray tracing. Kay and Kajiya [kay86] use slabs as tighter bounding volumes. Charney and Scherson <ref> [char90] </ref> use binary trees of bounding volumes to reduce the number of ray/bounding volume intersections. However each of these approaches (except [char90]) relies on sorting the intersections with sub-bounding volumes or primitives each time a bounding volume is entered. We propose to sort once as preprocessing the bounding volumes along three orthogonal axes.
Reference: [fuji86] <author> Akira Fujimoto, Takayuki Tanaka, and Kansei Iwata. </author> <title> "ARTS: Accelerated Ray Tracing System". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 6, No. 4, </volume> <pages> pp. 16-26, </pages> <year> 1986. </year>
Reference-contexts: Our ray tracing acceleration belongs to this later classification (1.b). This category includes various space subdivision schemes, directional techniques and hierarchies of bounding volumes. We can divide 3D spatial subdivision algorithms into two classes: uniform and non-uniform. Uniform subdivision <ref> [fuji86] </ref> [aman87] has the advantage of being easy to implement and the cost of traversing each element of the regular grid is very small.
Reference: [fuss88] <author> Donald Fussell and K.R. Subramanian. </author> <title> "Fast Ray Tracing Using K-D Trees". </title> <type> Technical Report TR-88-07, </type> <institution> U. of Texas, Austin, Dept. Of Computer Science, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: Unfortunately, traversing a non-uniform structure is more expensive than traversing a regular grid. Various non-uniform subdivisions have been used, including irregular grids [giga88], octrees [glas84], BSP trees [kapl85] and k-d trees <ref> [fuss88] </ref>. Snyder and Barr [snyd87] propose a technique that can be used along with most of these techniques. They surround each ray by a box to check against the bounding volumes of the objects to intersect.
Reference: [giga88] <author> Michael Gigante. </author> <title> "Accelerated Ray Tracing Using Non-Uniform Grids". </title> <booktitle> Proceedings of Aus-graph '90, </booktitle> <pages> pp. 157-163, </pages> <year> 1988. </year>
Reference-contexts: Non-uniform space subdivision can adapt its resolution to the complexity of a scene and therefore it is less sensitive to the problems of uniform space subdivision. Unfortunately, traversing a non-uniform structure is more expensive than traversing a regular grid. Various non-uniform subdivisions have been used, including irregular grids <ref> [giga88] </ref>, octrees [glas84], BSP trees [kapl85] and k-d trees [fuss88]. Snyder and Barr [snyd87] propose a technique that can be used along with most of these techniques. They surround each ray by a box to check against the bounding volumes of the objects to intersect.
Reference: [glas84] <author> Andrew S. Glassner. </author> <title> "Space Subdivision For Fast Ray Tracing". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 4, No. 10, </volume> <pages> pp. 15-22, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: Unfortunately, traversing a non-uniform structure is more expensive than traversing a regular grid. Various non-uniform subdivisions have been used, including irregular grids [giga88], octrees <ref> [glas84] </ref>, BSP trees [kapl85] and k-d trees [fuss88]. Snyder and Barr [snyd87] propose a technique that can be used along with most of these techniques. They surround each ray by a box to check against the bounding volumes of the objects to intersect.
Reference: [glas88] <author> Andrew S. Glassner. </author> <title> "Spacetime ray tracing for animation". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 8, No. 2, </volume> <pages> pp. 60-70, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: For instance, a single bounding volume containing an entire hierarchy can be added automatically while its content will remain in the same structure. Our automatic hierarchy of bounding volumes is built in a top-down fashion using proximity to current volumes. It is very similar to Glassner's <ref> [glas88] </ref> construction except for the fact that we permit overlapping between bounding volumes. This avoids splitting objects or duplicating them in two or more volumes. This also allows for easier merging of hierarchies. First the bounding volume enclosing the entire scene is computed. <p> Many papers proposing hierarchies of bounding volumes to speed up ray tracing give various criteria to consider, but none seem to be implementing any of these criteria other than the proximity of the objects. In this paper, we described a technique similar to Glassner's <ref> [glas88] </ref> to create better hierarchies. However our experience shows how sensitive the rendering time can be to small changes in hierarchies. Better results in this direction are expected. Finally, traversing a hierarchy of bounding volumes lends itself well to parallel processing.
Reference: [gold87] <author> Jeffrey Goldsmith and John Salmon. </author> <title> "Automatic Creation of Object Hierarchies for Ray Tracing". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 7, No. 5, </volume> <pages> pp. 14-20, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Various criteria have been proposed to evaluate hierarchies. Weghorst et al. [wegh84] included the cost of intersection and the tightness of fit of the bounding volumes. Kay and Kajiya [kay86] relied mostly on surface area and closeness between objects. Goldsmith and Salmon <ref> [gold87] </ref> used surface area and conditional probability to intersect the enclosed objects. Building a hierarchy of bounding volumes can be done manually, automatically or both. For instance, a single bounding volume containing an entire hierarchy can be added automatically while its content will remain in the same structure.
Reference: [hain86] <author> Eric A. Haines and Donald P. Greenberg. </author> <title> "The Light Buffer: A Ray Tracer Shadow Testing Accelerator". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 6, No. 9, </volume> <pages> pp. 6-16, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: Directional techniques rely, as the name indicates, on the direction a ray takes. These directions are classified by direction cubes subdivided regularly or adaptively. The cubes can be located at specific point locations as for the light buffer <ref> [hain86] </ref>, onto surfaces as for ray coherence [ohta87] or in volumes as for ray classification [arvo87]. Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing.
Reference: [hain87] <author> Eric Haines. </author> <title> "A Proposal for Standard Graphics Environments". </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 7, No. 11, </volume> <pages> pp. 3-5, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: 0.30 0.20 2.72 19.2 0.51 Tetra III 64 0.29 0.54 3.29 78.8 1.41 Tetra IV 256 0.29 1.90 3.61 322.3 4.92 Tetra V 1024 0.28 7.30 3.77 1315.8 18.98 Tetra VI 4096 0.27 28.80 3.84 5354.1 75.58 Teapot 29 1.00 1.67 2.70 119.9 2.63 Table 1: No Hierarchy test scenes <ref> [hain87] </ref> (top left and bottom right of figure 2) and Newell's teapot. We can observe that increasing the number of objects in these scenes leads to a fairly stable ratio of intersections for our ray traversal technique while the naive approach must test for intersection every primitive. <p> Some comparisons between uniform grid traversal and other acceleration techniques can be found in [jeva89] [sung91] [subr91]. Figures 3 through 10 give the timings and intersection computations for uniform grid traversal and list traversal for Haines' testbed scenes <ref> [hain87] </ref> illustrated in figure 2. Each scene is a sequence of increasing complexity.
Reference: [jeva89] <author> David Jevans and Brian Wyvill. </author> <title> "Adaptive voxel subdivision for ray tracing". </title> <booktitle> Proceedings of Graphics Interface '89, </booktitle> <pages> pp. 164-172, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Uniform grid traversal is a fairly standard acceleration technique we believe is stable enough from implementation to implementation to be considered a good frame of reference. Some comparisons between uniform grid traversal and other acceleration techniques can be found in <ref> [jeva89] </ref> [sung91] [subr91]. Figures 3 through 10 give the timings and intersection computations for uniform grid traversal and list traversal for Haines' testbed scenes [hain87] illustrated in figure 2. Each scene is a sequence of increasing complexity.
Reference: [kapl85] <author> M. Kaplan. "Space-Tracing: </author> <title> A Constant Time Ray-Tracer". </title> <booktitle> SIGGRAPH '85 State of the Art in Image Synthesis seminar notes. </booktitle> <pages> pp. 149-158. </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Unfortunately, traversing a non-uniform structure is more expensive than traversing a regular grid. Various non-uniform subdivisions have been used, including irregular grids [giga88], octrees [glas84], BSP trees <ref> [kapl85] </ref> and k-d trees [fuss88]. Snyder and Barr [snyd87] propose a technique that can be used along with most of these techniques. They surround each ray by a box to check against the bounding volumes of the objects to intersect.
Reference: [kay86] <author> Timothy L. Kay and James T. Kajiya. </author> <title> "Ray Tracing Complex Scenes". </title> <booktitle> Computer Graphics (SIGGRAPH '86 Proceedings), </booktitle> <volume> Vol. 20, No. 4, </volume> <pages> pp. 269-278, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing. Weghorst et al. [wegh84] studied criteria for choosing efficient bounding volumes for ray tracing. Kay and Kajiya <ref> [kay86] </ref> use slabs as tighter bounding volumes. Charney and Scherson [char90] use binary trees of bounding volumes to reduce the number of ray/bounding volume intersections. However each of these approaches (except [char90]) relies on sorting the intersections with sub-bounding volumes or primitives each time a bounding volume is entered. <p> Nevertheless, some simple criteria are useful to roughly estimate the relative cost of different hierarchies. Various criteria have been proposed to evaluate hierarchies. Weghorst et al. [wegh84] included the cost of intersection and the tightness of fit of the bounding volumes. Kay and Kajiya <ref> [kay86] </ref> relied mostly on surface area and closeness between objects. Goldsmith and Salmon [gold87] used surface area and conditional probability to intersect the enclosed objects. Building a hierarchy of bounding volumes can be done manually, automatically or both. <p> It is also possible to use multiple sorted lists to do the traversal. In that sense, we could use an arbitrary number of directions with their sorted lists and therefore build convex slabs as in Kay and Kajiya <ref> [kay86] </ref>. The added cost is from adding new sorted lists to traverse, new dimensions Again to keep in the ray lists and new entries for the lists of next events.
Reference: [ohta87] <author> Masataka Ohta and Mamoru Maekawa. </author> <title> "Ray Coherence Theorem and Constant Time Ray Tracing Algorithm". </title> <booktitle> Computer Graphics 1987 (Proceedings of CG International '87), </booktitle> <pages> pp. 303-314, </pages> <year> 1987. </year>
Reference-contexts: Directional techniques rely, as the name indicates, on the direction a ray takes. These directions are classified by direction cubes subdivided regularly or adaptively. The cubes can be located at specific point locations as for the light buffer [hain86], onto surfaces as for ray coherence <ref> [ohta87] </ref> or in volumes as for ray classification [arvo87]. Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing.
Reference: [rubi80] <author> Steven M. Rubin and Turner Whitted. </author> <title> "A 3-Dimensional Representation for Fast Rendering of Complex Scenes". </title> <booktitle> Computer Graphics (SIGGRAPH '80 Proceedings), </booktitle> <volume> Vol. 14, No. 3, </volume> <pages> pp. 110-116, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: The cubes can be located at specific point locations as for the light buffer [hain86], onto surfaces as for ray coherence [ohta87] or in volumes as for ray classification [arvo87]. Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted <ref> [rubi80] </ref> were the first to use hierarchies of bounding volumes in ray tracing. Weghorst et al. [wegh84] studied criteria for choosing efficient bounding volumes for ray tracing. Kay and Kajiya [kay86] use slabs as tighter bounding volumes.
Reference: [sale90] <author> David Salesin and Jorge Stolfi. </author> <title> "Rendering CSG Models with a ZZ-Buffer". </title> <booktitle> Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> Vol. 24, No. 4, </volume> <pages> pp. 67-76, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: After, the traversal is done only in Z. The whole process is easily done in firmware or hardware. Such an approach is compatible with the extensions included in the ZZ-buffer of Salesin and Stolfi <ref> [sale90] </ref>. It is also possible to transform the coordinates to speed up shadow determination for up to two directional light sources. To do so, two of the axes become the direction of each light source while the third is the direction away from the screen.
Reference: [snyd87] <author> John M. Snyder and Alan H. Barr. </author> <title> "Ray Tracing Complex Models Containing Surface Tessellations". </title> <booktitle> Computer Graphics (SIGGRAPH '87 Proceedings), </booktitle> <volume> Vol. 21, No. 4, </volume> <pages> pp. 119-128, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Unfortunately, traversing a non-uniform structure is more expensive than traversing a regular grid. Various non-uniform subdivisions have been used, including irregular grids [giga88], octrees [glas84], BSP trees [kapl85] and k-d trees [fuss88]. Snyder and Barr <ref> [snyd87] </ref> propose a technique that can be used along with most of these techniques. They surround each ray by a box to check against the bounding volumes of the objects to intersect.
Reference: [subr91] <author> K. R. Subramanian and Donald S. Fussell. </author> <title> "Automatic Termination Criteria for Ray Tracing Hierarchies". </title> <booktitle> Proceedings of Graphics Interface '91, </booktitle> <pages> pp. 93-100, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Uniform grid traversal is a fairly standard acceleration technique we believe is stable enough from implementation to implementation to be considered a good frame of reference. Some comparisons between uniform grid traversal and other acceleration techniques can be found in [jeva89] [sung91] <ref> [subr91] </ref>. Figures 3 through 10 give the timings and intersection computations for uniform grid traversal and list traversal for Haines' testbed scenes [hain87] illustrated in figure 2. Each scene is a sequence of increasing complexity.
Reference: [sung91] <author> K. Sung. </author> <title> "A DDA Octree Traversal Algorithm for Ray Tracing". </title> <booktitle> Eurographics '91, </booktitle> <pages> pp. 73-85, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Uniform grid traversal is a fairly standard acceleration technique we believe is stable enough from implementation to implementation to be considered a good frame of reference. Some comparisons between uniform grid traversal and other acceleration techniques can be found in [jeva89] <ref> [sung91] </ref> [subr91]. Figures 3 through 10 give the timings and intersection computations for uniform grid traversal and list traversal for Haines' testbed scenes [hain87] illustrated in figure 2. Each scene is a sequence of increasing complexity.
Reference: [tess92] <author> Markus Tessmann. </author> <title> "Around again". </title> <booktitle> SIG-GRAPH '92 Electronic Theater, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: While the proposed testbed from Haines measures some important aspects of ray tracing, it is not typical of scenes used in computer animations. We compared list traversal to grid traversal with a scene taken out of the computer animation: Around Again <ref> [tess92] </ref>. This scene is made of 25426 triangles, 4610 quadrilaterals and 636 polygons with more than four vertices. Figure 11 shows the rendered scene. This scene is representative of a more typical scene with large meshes of small polygons (cans) positioned next to long polygons (walls and ground).
Reference: [wegh84] <author> Hank Weghorst, Gary Hooper, and Donald P. Greenberg. </author> <title> "Improved Computational Methods for Ray Tracing". </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol. 3, No. 1, </volume> <pages> pp. 52-69, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: Other algorithms have been using hierarchical bounding volumes to reduce the number of ray/object intersection tests. Rubin and Whitted [rubi80] were the first to use hierarchies of bounding volumes in ray tracing. Weghorst et al. <ref> [wegh84] </ref> studied criteria for choosing efficient bounding volumes for ray tracing. Kay and Kajiya [kay86] use slabs as tighter bounding volumes. Charney and Scherson [char90] use binary trees of bounding volumes to reduce the number of ray/bounding volume intersections. <p> Nevertheless, some simple criteria are useful to roughly estimate the relative cost of different hierarchies. Various criteria have been proposed to evaluate hierarchies. Weghorst et al. <ref> [wegh84] </ref> included the cost of intersection and the tightness of fit of the bounding volumes. Kay and Kajiya [kay86] relied mostly on surface area and closeness between objects. Goldsmith and Salmon [gold87] used surface area and conditional probability to intersect the enclosed objects.
Reference: [whit80] <author> Turner Whitted. </author> <title> "An Improved Illumination Model for Shaded Display". </title> <journal> Communications of the ACM, </journal> <volume> Vol. 23, No. 6, </volume> <pages> pp. 343-349, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: INTRODUCTION Whitted <ref> [whit80] </ref> introduced ray tracing as a rendering technique. In its naive implementation, each ray must be intersected with each primitive in a scene. This approach is feasible only for scenes of modest size, and much research has focused on ways to make this technique more efficient for complex scenes.
References-found: 24

