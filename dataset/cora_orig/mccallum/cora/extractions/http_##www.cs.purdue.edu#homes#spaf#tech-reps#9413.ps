URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9413.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Email: fkumar,spafg@cs.purdue.edu  
Title: An Application of Pattern Matching in Intrusion Detection  
Author: Sandeep Kumar Eugene H. Spafford 
Date: June 17, 1994  
Address: West Lafayette, IN 47907-1398  
Affiliation: The COAST Project Department of Computer Sciences Purdue University  
Pubnum: Technical Report CSD-TR-94-013  
Abstract: This report examines and classifies the characteristics of signatures used in misuse intrusion detection. Efficient algorithms to match patterns in some of these classes are described. A generalized model for matching intrusion signatures based on Colored Petri Nets is presented, and some of its properties are derived. 
Abstract-found: 1
Intro-found: 1
Reference: [AA93] <author> Mikhail J. Atallah and Alberto Apostolico. </author> <type> (personal communication), </type> <year> 1993. </year>
Reference-contexts: 3 pg. 36 Partial Order NL N [0; 1] Y/N N O (nm i ) O (m) one pg. 39 B Duration L N [0; 1] N Y c n O (m) one C Interval L N [x; x] Y/N N O (r log n) O (n + m) one <ref> [AA93] </ref> D Table 2: A summary of matching algorithms for different attack classes. Legend: DR is the duration characteristic associated with the events comprising the pattern. Match refers to all or one match. Ref lists the reference explaining the result in more detail. Comment: A. <p> one obs. 3 Partial Order NL N [0; 1] Y/N N O (knmi n ) O (M ) one Duration L N [0; 1] N Y exp O (M ) all Interval L N [x; x] Y/N N O (kr log n) O (n + M ) one obs. 6, <ref> [AA93] </ref> Table 3: Summary of matching multiple patterns in the same attack category. In most classes above, the approach to matching several patterns is to match each independent of the other. The following observation for matching general patterns reduces the complexity of matching. <p> Note: If, in addition to the maximum time between events, a maximum overall time is also specified, that can also be handled in a straightforward manner. This construction requires that the event sequence be prespecified. More recently <ref> [AA93] </ref> have shown much better bounds for the generalized version of this problem.
Reference: [AC75] <author> A. V. Aho and M. J. Corasick. </author> <title> Efficient String Matching: An Aid to Bibliographic Search. </title> <journal> Communications of the ACM, </journal> <volume> 18 </volume> <pages> 333-340, </pages> <month> June </month> <year> 1975. </year> <note> REFERENCES 52 </note>
Reference-contexts: This follows from [obs. 1, pg. 35] by running the matching procedure for each pattern simultaneously. Compare it with <ref> [AC75] </ref> in which multiple fixed linear patterns can be matched with the immediately follows semantics in linear time. The primary reason for the difference is that in [AC75], the set of states maintained by the algorithm matches the set of states reachable on the input in the NFA; while matching with <p> This follows from [obs. 1, pg. 35] by running the matching procedure for each pattern simultaneously. Compare it with <ref> [AC75] </ref> in which multiple fixed linear patterns can be matched with the immediately follows semantics in linear time. The primary reason for the difference is that in [AC75], the set of states maintained by the algorithm matches the set of states reachable on the input in the NFA; while matching with the follows semantics requires the maintenance of the set of states reachable on any prefix of the input with any characters deleted.
Reference: [ASU86] <author> Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: If the pattern is fixed but has regular or partial order features, preprocessing it to yield an equivalent deterministic automaton is very expensive. It takes exponential time in the worst case to convert an NFA to a DFA <ref> [ASU86, pp. 117-121] </ref>. Converting a nondeterministic partial order pattern to an equivalent deterministic automaton is even more expensive [Appendix A]. This forbids preprocessing of any realistic set of partial order patterns before matching. <p> The case of several regular expressions is subsumed under matching a single regular expression. Matching several partial orders is discussed under matching several general patterns. If a virtual machine and its instruction set is defined to represent and evaluate guards, common subexpression elimination techniques from compiler design <ref> [ASU86] </ref> can be used to improve their evaluation. For an example of this see Appendix C which shows a 25% asymptotic runtime reduction in multiple guard evaluation. Scalability results derived in our model are summarized below. <p> The time required is O (mn). It permits arbitrary values to be specified for insertion, deletion and substitution costs for each pair of symbols. When only a single match with the follows semantics is desired, the simulation procedure of <ref> [ASU86, fig. 3.31, page 126] </ref> can be adapted as follows: S := *-closure (fs 0 g); a := nextchar; while a 6= eof do begin S := S [ *-closure (move (S, a)) ; a := nextchar; if S " F 6= then return yes; endif end The key difference between <p> Using the uniformity assumption, the next input event can match at most m= elements of S. Thus, exercising n input events takes time at most mn=. This gives all positions in the input that end a match with the pattern. Matching Partial Orders The following adaptation of <ref> [ASU86, fig. 3.31, page 126] </ref> can be used to match fixed partial orders. I 0 ; : : : ; I i are i initial states of the partial order. For simplicity, all transitions are assumed enabled. Otherwise, the enabling can be incorporated in the function move. <p> The pattern is matched if all threads reach the final state F . If S is a cross product, S [k] is used to denote its kth element. The function "move" is as described in <ref> [ASU86] </ref>. 9 APPENDIX A 39 S := f (*-closure (fI 0 g) fi : : : fi *-closure (fI i g)); a := nextchar; while a 6= eof do begin 8e 2 S, add Move (e; a) to S a := nextchar; if 9e 2 S j 8k; 1 k i; <p> This implies that the structure of a guard expression is a DAG with only forward edges. As a consequence, dead variables can be detected by simply examining the rest of the code. For a good treatment of these and other compiler optimization issues, see <ref> [ASU86, FL88] </ref>.
Reference: [Bib77] <author> K. J. Biba. </author> <title> Integrity Constraints for Secure Computer Systems. </title> <type> Technical Report ESD-TR-76-372, </type> <institution> USAF Electronic Systems Division, Bedford, Massachussetts, </institution> <month> April </month> <year> 1977. </year>
Reference-contexts: Information flow can be controlled to provide more security; for example, the Bell LaPadula model [BL73], to provide secrecy, or the Biba model <ref> [Bib77] </ref>, to provide integrity. However, there is a tradeoff between security and convenience of use. Both models are conservative and restrict read and write operations to ensure that the secrecy or the integrity of the system can never be compromised.
Reference: [BK88] <author> David S. Bauer and Michael E. Koblentz. </author> <title> NIDX An Expert System for Real-Time Network Intrusion Detection. </title> <booktitle> In Proceedings Computer Networking Symposium, </booktitle> <pages> pages 98-106. </pages> <publisher> IEEE, </publisher> <address> New York, NY, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see [LV89, LV92]. Most intrusion detection systems built to date <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> use the audit trail generated by a C2 or higher rated computer, for input. Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [BL73] <author> D. E. Bell and L. J. LaPadula. </author> <title> Secure Computer Systems: Mathematical Foundations and Model. </title> <type> Technical Report M74-244, </type> <institution> The MITRE Corporation, Bedford, Massachussetts, </institution> <month> May </month> <year> 1973. </year>
Reference-contexts: Access control does not model and thus cannot prevent illegal information flow through the system, because such flow can take place with legal accesses to the objects. Information flow can be controlled to provide more security; for example, the Bell LaPadula model <ref> [BL73] </ref>, to provide secrecy, or the Biba model [Bib77], to provide integrity. However, there is a tradeoff between security and convenience of use. Both models are conservative and restrict read and write operations to ensure that the secrecy or the integrity of the system can never be compromised.
Reference: [BM77] <author> R. S. Boyer and J. S. Moore. </author> <title> A Fast String Searching Algorithm. </title> <journal> Communications of the ACM, </journal> 20(10) 262-272, 1977. 
Reference-contexts: An abstract audit record definition and a standard definition of a virtual machine to represent guards, ensures that patterns precompiled to an intermediate representation can be moved across systems with minimal overhead 5.1 Theoretical Results Definitions Fixed Linear Pattern Matching: This denotes matching in the KMP [KMP77] or Boyer Moore <ref> [BM77] </ref> sense, i.e. the pattern consists of a sequence of known events (symbols in KMP & BM) forming a chain of one event following another, with no conjunction, disjunction or other "regular" features. Examples: abc, abracadabra, foo.
Reference: [Bos88] <institution> Computer whiz puts virus in computers. Boston Herald, page 1, </institution> <month> Nov 5 </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system.
Reference: [BYG89] <author> R. A. Baeza-Yates and G. H. Gonnet. </author> <title> A New Approach to Text Searching. </title> <booktitle> In Proceedings of the 12th Annual ACM-SIGIR Conference on Information Retrieval, </booktitle> <pages> pages 168-175, </pages> <address> Cambridge, MA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Pattern Time Space Preproc Match Reference Comment Sequence O (mn) O (m) O (1) all endpts [WF74] Using dynamic programming. Sequence O (mn) O (mn) O (1) all [WF74] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts <ref> [BYG89, WM91] </ref> Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts [MM89] Using dynamic programming. <p> The complexity of matching in this model increases rapidly with increasing complexity of the patterns. At the simplest end are linear patterns without guards, for which well known algorithms from discrete approximate matching <ref> [MM89, WF74, BYG89, WM91] </ref> are applicable. Such matching can be done deterministically and efficiently, without requiring much preprocessing of the patterns. If the pattern is fixed but has regular or partial order features, preprocessing it to yield an equivalent deterministic automaton is very expensive. <p> If the pattern size is small enough to fit the word length of the computer on which matching is done, all matches can be determined in linear time using the algorithm of Baeza-Yates and Gonnet <ref> [BYG89] </ref> augmented for the wildcard case by Manber and Wu [WM91]. Both algorithms determine whether any character position in the input ends a match with the pattern by conceptually sliding the pattern across the input.
Reference: [Cha91] <author> Eugene Charniak. </author> <title> Bayesian Networks Without Tears. </title> <journal> AI Magazine, </journal> <pages> pages 50 - 63, </pages> <month> Winter </month> <year> 1991. </year>
Reference-contexts: However, in general it is not trivial to determine the a priori probability values of the root nodes and the link matrices for each directed arc. For a good introduction to Bayesian Networks see <ref> [Cha91] </ref>. 3.5 The Conditional Probability Scheme of Predicting Misuse Intrusions This method of predicting intrusions is the same as the one outlined in the preceding section, with the minor difference of the evidence now being a sequence of external events rather than anomaly measures.
Reference: [Che88] <author> K. Chen. </author> <title> An Inductive Engine for the Acquisition of Temporal Knowledge. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1988. </year>
Reference-contexts: The approach of time based inductive generalization <ref> [Che88, TCL90] </ref> uses inductive generated time-based rules that characterize the normal behavior patterns of users. The rules are modified dynamically during the learning phase and only "good" rules, i.e. rules with low entropy remain in the system.
Reference: [CHS91] <author> Peter Cheeseman, Robin Hanson, and John Stutz. </author> <title> Bayesian Classification with Correlation and Inheritance. </title> <booktitle> In 12th International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: The limitations of expert systems in doing uncertainty reasoning are well known [Lun93, Pea88]. See also sec. 3.10, page 12 for a list of these limitations. 3.7 Bayesian Classification in Intrusion Detection This technique of unsupervised classification of data, and its implementation, Autoclass <ref> [CKS + 88, CHS91] </ref> searches for classes in the given data using Bayesian statistical techniques. This technique attempts to determine the most likely process (es) that generated the data. <p> A promising approach for future intrusion detection systems might involve Bayesian classification <ref> [CKS + 88, CHS91] </ref>. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection [Wet93, Moi], non-parametric pattern recognition techniques [Lan92] etc.
Reference: [CKS + 88] <author> Peter Cheeseman, James Kelly, Matthew Self, John Stutz, Will Taylor, and Don Freeman. Au-toclass: </author> <title> A Bayesian Classification System. </title> <booktitle> In Proceedings of the Fifth International Conference on Machine Learning, </booktitle> <pages> pages 54-64. </pages> <publisher> Morgan Kaufmann, </publisher> <month> June </month> <year> 1988. </year>
Reference-contexts: The limitations of expert systems in doing uncertainty reasoning are well known [Lun93, Pea88]. See also sec. 3.10, page 12 for a list of these limitations. 3.7 Bayesian Classification in Intrusion Detection This technique of unsupervised classification of data, and its implementation, Autoclass <ref> [CKS + 88, CHS91] </ref> searches for classes in the given data using Bayesian statistical techniques. This technique attempts to determine the most likely process (es) that generated the data. <p> A promising approach for future intrusion detection systems might involve Bayesian classification <ref> [CKS + 88, CHS91] </ref>. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection [Wet93, Moi], non-parametric pattern recognition techniques [Lan92] etc.
Reference: [CS70] <author> J. Cocke and J. T. Schwartz. </author> <title> Programming Languages and Their Compilers: </title> <note> Preliminary Notes, Second Revised Version. </note> <institution> Courant Institute of Mathematical Sciences, </institution> <address> New York, </address> <year> 1970. </year>
Reference-contexts: RES 1 40. RETURN 41. L3: 42. T15 15 AND T13 13 , XOTH 43. IFFALSE T15 15 , L4 44. RES 1 45. RETURN 46. EXIT: L4: 47. RES 0 48. RETURN The superscripted numbers in the instructions above correspond to their value numbers as outlined in <ref> [CS70] </ref>. The expression OBJ [SRC FILE] is given a single value number because indexing is a primitive operation in our virtual machine. <p> This prevents undesired side effects while ensuring that all subexpressions are evaluated and reside in their appropriate temporary variables. Following the procedure of common subexpression elimination outlined in <ref> [CS70] </ref>, the code for both the guard expressions looks as shown below. 1. OBJ LINK 2. TRANSITION 4 2 0 . if (!ENABLED TRANSITIONS [TRANSITION])f set processor state disabled JUMP 28 ;has no effect since processor state is disabled g 3. T1 1 OBJ [SRC FILE] 1 4.
Reference: [Den82] <author> Dorothy E. Denning. </author> <title> Cryptography and Data Security. </title> <publisher> Springer-Verlag, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: However, this only defines whether access to an object in the system is permitted but does not model or restrict what a subject may do with the object itself if it has the access to manipulate it <ref> [Den82, chapter 5] </ref>. Access control does not model and thus cannot prevent illegal information flow through the system, because such flow can take place with legal accesses to the objects.
Reference: [Den87] <author> Dorothy E. Denning. </author> <title> An Intrusion-Detection Model. </title> <journal> In IEEE Trans. on Software Engg., </journal> <volume> number 2, </volume> <pages> page 222, </pages> <month> Feb </month> <year> 1987. </year>
Reference-contexts: It must be mentioned that model based intrusion detection does not replace the statistical anomaly portion of intrusion detection systems, but rather complements it. For a thorough treatment of reasoning in the presence of uncertainty see [Pea88]. 3.11 Dorothy Denning's Generic Intrusion Detection Model <ref> [Den87] </ref> established a model of intrusion detection independent of the system, type of input and the specific intrusions to be monitored. <p> Most of them derive from the statistical Intrusion Detection model of <ref> [Den87] </ref>. Some of them, for example [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] use the audit trail generated by a C2 or higher rated computer, for input.
Reference: [Doa92] <author> Justin Doak. </author> <title> Intrusion Detection: The Application of Feature Selection, A Comparison of Algorithms, and the Application of a Wide Area Network Analyzer. </title> <type> Master's thesis, </type> <institution> University of California, Davis, Dept. of Computer Science, </institution> <year> 1992. </year> <note> REFERENCES 53 </note>
Reference-contexts: The method assumes that combining higher predictability measure subsets allows searching the metric space more efficiently than other heuristic techniques. For a survey of other feature selection techniques see <ref> [Doa92] </ref>. 3.4 Combining Individual Anomaly Measures to Get a Composite Picture of the Intrusion? Let A 1 ; A 2 ; : : : ; A n be n measures used to determine if an intrusion is occurring on a system at any given moment.
Reference: [FHRS90] <author> Kevin L. Fox, Ronda R. Henning, Jonathan H. Reed, and Richard Simonian. </author> <title> A Neural Network Approach Towards Intrusion Detection. </title> <booktitle> In Proceedings of the 13th National Computer Security Conference, </booktitle> <pages> pages 125-134, </pages> <address> Washington, DC, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Cheaters who attempt to train the system during its learning phase can be discerned more easily because of the meaning associated with rules. 3.9 Neural Networks in Intrusion Detection The basic approach here is to train the neural net on a sequence of information units <ref> [FHRS90] </ref> (from here on referred to as commands), each of which may be at a more abstract level than an audit record. <p> Among non statistical approaches to ID is the work by Teng [TCL90] which analyzes individual user audit trails and attempts to infer the sequential relationships between the various events in the trail and the neural net modeling of behavior by Simonian et. al <ref> [FHRS90] </ref>. A promising approach for future intrusion detection systems might involve Bayesian classification [CKS + 88, CHS91]. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection [Wet93, Moi], non-parametric pattern recognition techniques [Lan92] etc.
Reference: [FL88] <author> Charles N. Fischer and Richard J. LeBlanc. </author> <title> Crafting a Compiler. </title> <address> Benjamin/Cummings, Menlo Park, California, </address> <year> 1988. </year>
Reference-contexts: This implies that the structure of a guard expression is a DAG with only forward edges. As a consequence, dead variables can be detected by simply examining the rest of the code. For a good treatment of these and other compiler optimization issues, see <ref> [ASU86, FL88] </ref>.
Reference: [For82] <author> Charles L. Forgy. </author> <title> RETE: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem. </title> <journal> In Artificial Intelligence, </journal> <volume> volume 19. </volume> <year> 1982. </year>
Reference-contexts: the matching problem, it is easier to first classify patterns in an increasing order of matching complexity (for example in [sec 4.3]) and ensure 3 Even though facts are numbered consecutively in current expert system shells, introducing fact numbering constraints within rules to enforce an order makes the Rete match <ref> [For82] </ref> procedure very inefficient. 3 APPROACHES TO DETECTING INTRUSIONS 7 that most of them fall in a set of classes for which efficient algorithms are known or can be devised. As the Rete match procedure [For82] used in expert system shells can be incorporated in the solution, it can be no <p> shells, introducing fact numbering constraints within rules to enforce an order makes the Rete match <ref> [For82] </ref> procedure very inefficient. 3 APPROACHES TO DETECTING INTRUSIONS 7 that most of them fall in a set of classes for which efficient algorithms are known or can be devised. As the Rete match procedure [For82] used in expert system shells can be incorporated in the solution, it can be no worse than using expert systems to detect misuse intrusions. <p> Common subexpression elimination techniques from compiler theory can be applied to avoid their re-evaluation across guards. This idea can also be combined with that of representing match patterns as a network <ref> [For82] </ref>. The amount of common subexpression elimination realized depends on the number and nature of the guards. More expression elimination can be achieved if the guards can be broken into simpler, more primitive expressions, similar to the case of compiling code. <p> Guards can be combined in a chain with common subexpression elimination performed on the composite sequence, or organized as a network (similar to Rete networks <ref> [For82] </ref>) to improve the running time of evaluation by taking into account its dynamic evaluation. When organizing a network, a good configuration needs to be determined as does the duplication and rearrangement of guards (perhaps based on historical statistics of their truthful evaluation).
Reference: [FS91] <author> Daniel Farmer and Eugene Spafford. </author> <title> The COPS Security Checker System. </title> <type> Technical Report CSD-TR-993, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: The classification, meant to be illustrative, is outlined below and summarized in the following table. 1. Existence. The fact that something (s) ever existed is sufficient to detect the intrusion attempt. Simple existence can often be found by static scanning of the file system, ala the COPS <ref> [FS91] </ref> and Tiger [SSH93] systems. This means looking for changed permissions or certain special files. 2. Sequence. The fact that several things happened in strict sequence (with the "immediately follows" or "follows" semantics) is sufficient to specify the intrusion.
Reference: [Gia92] <author> Joseph C. Giarratano. </author> <note> Clips Version 5.1 User's Guide. </note> <institution> NASA, Lyndon B. Johnson Space Center, Information Systems Directorate, Software Technology Branch, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: The primary technique of misuse intrusion detection uses an expert system. This paper proposes another technique, that of using pattern matching as a viable option for misuse intrusion detection [sec 4]. An example of the former is [SS92] which encodes knowledge about attacks as if-then implication rules in CLIPS <ref> [Gia92] </ref> and asserts facts corresponding to audit trail events. Rules are encoded to specify the conditions requisite for an attack in their if part. When all the conditions on the left side of a rule are satisfied, the actions on the right side are performed.
Reference: [GL91] <author> T. D. Garvey and T. F. Lunt. </author> <title> Model based Intrusion Detection. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 372-385, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Neural nets cope well with noisy or fuzzy data. 3. It can automatically account for correlations between the various measures that affect the output. 3.10 Model Based Intrusion detection This approach was proposed in <ref> [GL91] </ref> and is a variation on misuse intrusion detection that combines models of misuse with evidential reasoning to support conclusions about the occurrence of a misuse. There is a database of attack scenarios, each of which comprises a sequence of behaviors making up the attack.
Reference: [HCMM92] <author> Naji Habra, B. Le Charlier, A. Mounji, and I. Mathieu. ASAX: </author> <title> Software Architecture and Rule-based Language for Universal Audit Trail Analysis. </title> <booktitle> In Proceedings of ESORICS 92, </booktitle> <address> Toulouse, France, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: For related work which uses a language front-end for an underlying matching model in intrusion detection see <ref> [HCMM92, WB90] </ref>. Each token maintains its own local copy of these globally visible variables (depending on the pattern the token is associated with), the reason being that each token can make its own variable "bindings" as it flows towards the final state.
Reference: [HLM91] <author> L. T. Heberlein, K. N. Levitt, and B. Mukherjee. </author> <title> A Method To Detect Intrusive Activity in a Networked Environment. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 362-371, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Most intrusion detection systems built to date [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. Others, for example <ref> [HLMS90, HLM91] </ref> analyze intrusions by the network connections and the flow of information in a network. Input information appropriate to the domain of intrusive activity is needed to detect intrusions. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] use the audit trail generated by a C2 or higher rated computer, for input. Others, for example <ref> [HLMS90, HLM91] </ref> try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [HLMS90] <author> R. Heady, G. Luger, A. Maccabe, and M. Servilla. </author> <title> The Architecture of a Network Level Intrusion Detection System. </title> <type> Technical report, </type> <institution> University of New Mexico, Department of Computer Science, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: A method of achieving portability of intrusion signatures across different audit trails is outlined in sec 5.3. The realization of other characteristics can be better determined experimentally and is not discussed in this report. 2 Intrusion Detection An intrusion is defined <ref> [HLMS90] </ref> as any set of actions that attempt to compromise the integrity, confidentiality, or availability of a resource. It is a violation of the security policy of the system. <p> Most intrusion detection systems built to date [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. Others, for example <ref> [HLMS90, HLM91] </ref> analyze intrusions by the network connections and the flow of information in a network. Input information appropriate to the domain of intrusive activity is needed to detect intrusions. <p> This results in 2 100 possible subsets of measures, of which there are presumably only a few subsets that result in a high predictability of intrusions. It is clearly untractable to search through this large space exhaustively. <ref> [HLMS90] </ref> present a genetic approach to searching through this space for the right subset of metrics. Using a learning classifier scheme they generate an initial set of measures which is refined in the rule evaluation mode using genetic operators of crossover and mutation. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] use the audit trail generated by a C2 or higher rated computer, for input. Others, for example <ref> [HLMS90, HLM91] </ref> try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [Ilg92] <author> Koral Ilgun. USTAT: </author> <title> A Real-Time Intrusion Detection System for UNIX. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of California, Santa Barbara, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: By non linearity, on the other hand, we mean that patterns can specify partial orders. One can thus say that b follows a and d follows c, but there is no connection between ab and cd. For example, the attack scenario <ref> [Ilg92] </ref> 1. cp /bin/sh /usr/spool/mail/root 2. chmod 4755 /usr/spool/mail/root 3. touch x 4. mail root &lt; x 5. /usr/spool/mail/root can be specified by the partial order as the only dependency of touch is that it occur before mail. <p> We refer to this style of intrusion signature specification and matching, pattern matching with unification. For example attacks of the type 1. ln setuid_shell_script -x 2. -x 4 INTRUSION DETECTION USING PATTERN MATCHING 20 can be generalized into the pattern <ref> [Ilg92] </ref> All the capitalized identifiers, like FILE1, FILE2 etc. are variables, and take on values corresponding to every audit record against which the pattern is matched. Bound identifiers can be referenced later to retrieve the values bound to them. Once instantiated, identifier values do not change. Occurrence. <p> These expressions permit assignment to the global variables of the pattern, for example the values of matched event fields; variable testing for equality, &lt;, &gt; etc.; calling built in functions on the variables etc. Guards are boolean expressions which evaluate to true or false. Compare this with <ref> [Ilg92, PK92] </ref> in which guards are placed on states rather than transitions. Guards are evaluated in the context of the event which matches the transition label and the set of consistent tokens which enable the transition.
Reference: [Jac86] <author> Peter Jackson. </author> <title> Introduction to Expert Systems. </title> <booktitle> International Computer Science Series. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: LHS, from simple Bayesian arithmetic, for the prior probability of an event sequence is P (Event Sequence) = (P (ESjI) P (ESj:I)) P (I) + P (ESj:I) where ES stands for event sequence and I stands for intrusion. 3.6 Expert Systems in Intrusion Detection An expert system is defined in <ref> [Jac86] </ref> as a computing system capable of representing and reasoning about some knowledge-rich domain with a view to solving problems and giving advice. The main advantage here is the separation of control reasoning from the formulation of the problem solution.
Reference: [Jen92] <author> Kurt Jensen. </author> <title> Coloured Petri Nets Basic Concepts I. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Colored Petri Nets. The main advantage here is that the model itself is conceptually so general that extensions to it do not change it substantially. They are also naturally represented as graphs and have well defined semantics. We have adapted the CP net model <ref> [Jen92] </ref> for pattern matching because of its generality, conceptual simplicity and graphical representability. This model represents the form in which patterns are internally stored and matched.
Reference: [JLA + 93] <author> R. Jagannathan, Teresa Lunt, Debra Anderson, Chris Dodd, Fred Gilham, Caveh Jalali, Hal Javitz, Peter Neumann, Ann Tamaru, and Alfonso Valdes. </author> <title> System Design Document: Next-Generation Intrusion Detection Expert System (NIDES). </title> <type> Technical Report A007/A008/A009/A011/A012/A014, </type> <institution> SRI International, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: Some approaches, for example the statistical approach, have resulted in systems that have been used and tested extensively, while others are still in the research stage. Proposed methods for future intrusion detection systems include the model based approach [sec. 3.10], to be included in NIDES <ref> [JLA + 93] </ref>. Promising areas of application for future systems are discussed, which include Bayesian clustering [sec. 3.7]. No intrusion detection system using this approach has been designed to date.
Reference: [KMP77] <author> D. E. Knuth, J. H. Morris, and V. R. Pratt. </author> <title> Fast Pattern Matching in Strings. </title> <journal> SIAM J. Computing, </journal> <volume> 6(2) </volume> <pages> 323-350, </pages> <year> 1977. </year>
Reference-contexts: An abstract audit record definition and a standard definition of a virtual machine to represent guards, ensures that patterns precompiled to an intermediate representation can be moved across systems with minimal overhead 5.1 Theoretical Results Definitions Fixed Linear Pattern Matching: This denotes matching in the KMP <ref> [KMP77] </ref> or Boyer Moore [BM77] sense, i.e. the pattern consists of a sequence of known events (symbols in KMP & BM) forming a chain of one event following another, with no conjunction, disjunction or other "regular" features. Examples: abc, abracadabra, foo.
Reference: [Lan92] <author> Linda Lankewicz. </author> <title> A Non-Parametric Pattern recognition to Anomaly Detection. </title> <type> PhD thesis, </type> <institution> Tulane University, Dept. of Computer Science, </institution> <year> 1992. </year> <note> REFERENCES 54 </note>
Reference-contexts: A promising approach for future intrusion detection systems might involve Bayesian classification [CKS + 88, CHS91]. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection [Wet93, Moi], non-parametric pattern recognition techniques <ref> [Lan92] </ref> etc. Audit trail reduction techniques permit the compression of audit data into coarser, higher abstraction events, which may be queried later by the security officer to retrieve information rapidly and efficiently.
Reference: [LJL + 89] <author> Teresa F. Lunt, R. Jagannathan, Rosanna Lee, Alan Whitehurst, and Sherry Listgarten. </author> <title> Knowledge based Intrusion Detection. </title> <booktitle> In Proceedings of the Annual AI Systems in Government Conference, </booktitle> <address> Washington, DC, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see [LV89, LV92]. Most intrusion detection systems built to date <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> use the audit trail generated by a C2 or higher rated computer, for input. Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [LTG + 92] <author> T. F. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. G. Neumann, H. S. Javitz, A. Valdes, and T. D. Garvey. </author> <title> A Real-Time Intrusion Detection Expert System (IDES) Final Technical Report. </title> <type> Technical report, </type> <institution> SRI Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: The merits, as well as shortcomings, of current intrusion detection systems are also discussed. 1 A DoD security classification requiring auditing and unavailability of encrypted passwords. 3 APPROACHES TO DETECTING INTRUSIONS 5 3.1 Statistical Approaches to Intrusion Detection (Anomaly Intrusion Detection) The following, based on <ref> [LTG + 92] </ref>, serves to illustrate the generic process of anomaly detection, which is by and large, statistical in nature. The anomaly detector observes the activity of subjects and generates profiles for them that captures their behavior. <p> Statistical intrusion detection systems also have several disadvantages. Even if statistical measures could be defined to capture the computer usage patterns unique to every user, by their very nature, these measures 2 This is true of <ref> [LTG + 92] </ref>, in some systems the profiles are static and do not change once determined. 3 APPROACHES TO DETECTING INTRUSIONS 6 are insensitive to the order of the occurrence of events. That is, they miss the sequential interrelationships between events. <p> In order, however, to have a more realistic estimate of P (IjA 1 ; A 2 ; : : : ; A n ) we have to take the interdependence of the various measures A i into account. <ref> [LTG + 92] </ref> use covariance matrices to account for the interrelationships between measures.
Reference: [Lun93] <author> Teresa F Lunt. </author> <title> A Survey of Intrusion Detection Techniques. </title> <journal> Computers & Security, </journal> <volume> 12(4) </volume> <pages> 405-418, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: The chief problems in this use of expert systems are 1) No inbuilt or natural handling of sequential order of data 2) The expertise incorporated in the expert system is only as good as that of the security officer whose expertise is modeled, which may not be comprehensive <ref> [Lun93] </ref> 3) This technique can only detect known vulnerabilities and 4) there are software engineering concerns in the maintenance of the knowledge base [Lun93]. 3 APPROACHES TO DETECTING INTRUSIONS 10 2. <p> 2) The expertise incorporated in the expert system is only as good as that of the security officer whose expertise is modeled, which may not be comprehensive <ref> [Lun93] </ref> 3) This technique can only detect known vulnerabilities and 4) there are software engineering concerns in the maintenance of the knowledge base [Lun93]. 3 APPROACHES TO DETECTING INTRUSIONS 10 2. To combine various intrusion measures and put together a cohesive picture of the intrusion, in short, to do uncertainty reasoning. The limitations of expert systems in doing uncertainty reasoning are well known [Lun93, Pea88]. <p> To combine various intrusion measures and put together a cohesive picture of the intrusion, in short, to do uncertainty reasoning. The limitations of expert systems in doing uncertainty reasoning are well known <ref> [Lun93, Pea88] </ref>. See also sec. 3.10, page 12 for a list of these limitations. 3.7 Bayesian Classification in Intrusion Detection This technique of unsupervised classification of data, and its implementation, Autoclass [CKS + 88, CHS91] searches for classes in the given data using Bayesian statistical techniques.
Reference: [LV89] <author> G. E. Liepins and H. S. Vaccaro. </author> <title> Anomaly Detection: Purpose and Framework. </title> <booktitle> In Proceedings of the 12th National Computer Security Conference, </booktitle> <pages> pages 495-504, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: However, intrusive behavior does not always coincide with anomalous behavior. There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see <ref> [LV89, LV92] </ref>. Most intrusion detection systems built to date [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see [LV89, LV92]. Most intrusion detection systems built to date <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> use the audit trail generated by a C2 or higher rated computer, for input. Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [LV92] <author> G. E. Liepins and H. S. Vaccaro. </author> <title> Intrusion Detection: Its Role and Validation. </title> <booktitle> Computers & Security, </booktitle> <pages> pages 345-355, </pages> <year> 1992. </year>
Reference-contexts: However, intrusive behavior does not always coincide with anomalous behavior. There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see <ref> [LV89, LV92] </ref>. Most intrusion detection systems built to date [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input.
Reference: [Man89] <author> Udi Manber. </author> <title> Introduction to Algorithms : A Creative Approach. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: The results are presented as claims and observations. Claims are more significant and weighty while observations should be regarded as corollaries. Matching Fixed Linear Patterns Observation 1: Online fixed linear pattern matching with the follows semantics can be done in linear time <ref> [Man89, ex. 6.48, pg. 181] </ref>. For example, to determine that the pattern ba occurs in the input abcaa (in the follows sense) requires only a single scan of the input.
Reference: [Mar88] <author> J. </author> <title> Markoff. Author of computer `virus' is son of U.S. electronic security expert. New York Times, page A1, </title> <month> Nov 5 </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system.
Reference: [Met87] <author> S. J. </author> <title> Metz. </title> <journal> Computer break-ins. Communications of the ACM, </journal> <volume> 30(7):584, </volume> <month> July </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system.
Reference: [MM89] <author> Eugene W. Myers and Webb Miller. </author> <title> Approximate Matching of Regular Expressions. </title> <journal> In Bull. Math. Biol., </journal> <volume> volume 51, </volume> <pages> pages 5-37, </pages> <year> 1989. </year>
Reference-contexts: Sequence O (mn) O (mn) O (1) all [WF74] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts [BYG89, WM91] Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts <ref> [MM89] </ref> Using dynamic programming. RE O (mn) O (mn) O (m) all [MM89] Using dynamic programming a . a Does not include the time for enumerating all matches which may be exponential While approximate pattern matching is useful in misuse intrusion detection, the general problem in misuse intrusion detection cannot be <p> Sequence O (n) O (m) O (1) all endpts [BYG89, WM91] Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts <ref> [MM89] </ref> Using dynamic programming. RE O (mn) O (mn) O (m) all [MM89] Using dynamic programming a . a Does not include the time for enumerating all matches which may be exponential While approximate pattern matching is useful in misuse intrusion detection, the general problem in misuse intrusion detection cannot be reasonably solved by current pattern matching techniques. <p> The complexity of matching in this model increases rapidly with increasing complexity of the patterns. At the simplest end are linear patterns without guards, for which well known algorithms from discrete approximate matching <ref> [MM89, WF74, BYG89, WM91] </ref> are applicable. Such matching can be done deterministically and efficiently, without requiring much preprocessing of the patterns. If the pattern is fixed but has regular or partial order features, preprocessing it to yield an equivalent deterministic automaton is very expensive. <p> Two cases are considered, regular expressions and partial orders. Observation 3: Regular expressions can be matched with the follows semantics in polynomial time. 9 APPENDIX A 37 Approximate matching with regular expressions has been solved by Wagner and Seiferas [WS78] and Myers and Miller <ref> [MM89] </ref>. The approach taken in [MM89] is followed here. The solution constructs a non deterministic finite automaton from the regular expression in a special way. States of this automaton label the input symbols and its graph is reducible with every state having a maximum in-degree and out-degree of 2. <p> Two cases are considered, regular expressions and partial orders. Observation 3: Regular expressions can be matched with the follows semantics in polynomial time. 9 APPENDIX A 37 Approximate matching with regular expressions has been solved by Wagner and Seiferas [WS78] and Myers and Miller <ref> [MM89] </ref>. The approach taken in [MM89] is followed here. The solution constructs a non deterministic finite automaton from the regular expression in a special way. States of this automaton label the input symbols and its graph is reducible with every state having a maximum in-degree and out-degree of 2. <p> Therefore states that can be reached on input ff must be a subset of the states reached from the input ffx because x can be ignored by the automaton. The simulation procedure of fig. 12, combined with the automaton construction procedure in <ref> [MM89] </ref> can be used to make the following optimizations for the single match case. 1. Back edges need not be taken. This optimization follows from the reducibility of the graph. Because any match, not necessarily the longest is desired, revisiting states is not advantageous. 2.
Reference: [Moi] <author> Abha Moitra. </author> <title> Real-Time Audit Log Viewer And Analyzer. </title>
Reference-contexts: A promising approach for future intrusion detection systems might involve Bayesian classification [CKS + 88, CHS91]. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection <ref> [Wet93, Moi] </ref>, non-parametric pattern recognition techniques [Lan92] etc. Audit trail reduction techniques permit the compression of audit data into coarser, higher abstraction events, which may be queried later by the security officer to retrieve information rapidly and efficiently.
Reference: [Pea88] <author> Judea Pearl. </author> <title> Probabilistic Reasoning in Expert Systems. </title> <publisher> Morgan Kaufman, </publisher> <year> 1988. </year>
Reference-contexts: Future systems might use Bayesian or other belief networks to combine anomaly measures. Bayesian Networks <ref> [Pea88] </ref> allow the representation of causal dependencies between random variables in graphical form and permit the calculation of the joint probability distribution of the random variables by specifying only a small set of probabilities, relating only to neighboring nodes. <p> To combine various intrusion measures and put together a cohesive picture of the intrusion, in short, to do uncertainty reasoning. The limitations of expert systems in doing uncertainty reasoning are well known <ref> [Lun93, Pea88] </ref>. See also sec. 3.10, page 12 for a list of these limitations. 3.7 Bayesian Classification in Intrusion Detection This technique of unsupervised classification of data, and its implementation, Autoclass [CKS + 88, CHS91] searches for classes in the given data using Bayesian statistical techniques. <p> This, however, is not a weakness of the model per se. It must be mentioned that model based intrusion detection does not replace the statistical anomaly portion of intrusion detection systems, but rather complements it. For a thorough treatment of reasoning in the presence of uncertainty see <ref> [Pea88] </ref>. 3.11 Dorothy Denning's Generic Intrusion Detection Model [Den87] established a model of intrusion detection independent of the system, type of input and the specific intrusions to be monitored.
Reference: [PK92] <author> Phillip A. Porras and Richard A. Kemmerer. </author> <title> Penetration State Transition Analysis A Rule-Based Intrusion Detection Approach. </title> <booktitle> In Eighth Annual Computer Security Applications Conference, </booktitle> <pages> pages 220-229. </pages> <publisher> IEEE Computer Society press, IEEE Computer Society press, </publisher> <month> November 30 - December 4 </month> <year> 1992. </year>
Reference-contexts: These expressions permit assignment to the global variables of the pattern, for example the values of matched event fields; variable testing for equality, &lt;, &gt; etc.; calling built in functions on the variables etc. Guards are boolean expressions which evaluate to true or false. Compare this with <ref> [Ilg92, PK92] </ref> in which guards are placed on states rather than transitions. Guards are evaluated in the context of the event which matches the transition label and the set of consistent tokens which enable the transition.
Reference: [Rei87] <author> Brian Reid. </author> <title> Reflections on Some Recent Widespread Computer Break-Ins. </title> <journal> Communications of the ACM, </journal> <volume> 30(2) </volume> <pages> 103-105, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system.
Reference: [SBD + 91] <author> S. R. Snapp, J. Brentano, G. V. Dias, T. L. Goan, L. T. Heberlein, C. Ho, K. N. Levitt, B. Mukherjee, S. E. Smaha, T. Grance, D. M. Teal, and D. Mansur. </author> <title> DIDS (Distributed Intrusion Detection System) Motivation, Architecture, and an early Prototype. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 167-176, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network. Others still <ref> [SBD + 91] </ref> (not elaborated in this report) have expanded the scope of detection by distributing anomaly detection across a heterogeneous network and centrally analyzing partial results of these distributed sources to piece together a picture of a potential intrusion which may be missed by the individual analysis of each source.
Reference: [SG91] <author> Shiuhpyng Winston Shieh and Virgil D. Gligor. </author> <title> A Pattern Oriented Intrusion Model and its Applications. </title> <booktitle> In Proceedings of the 1991 IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <pages> pages 327-342. </pages> <publisher> IEEE, IEEE Service Center, </publisher> <address> Piscataway, NJ, </address> <month> May </month> <year> 1991. </year> <note> REFERENCES 55 </note>
Reference-contexts: Therefore, simply specifying an intrusion signature without the beginning state specification is often insufficient to capture an intrusion scenario fully. For a security model definition of an intrusion and a pattern oriented approach to its detection, see also <ref> [SG91] </ref>.
Reference: [Sma88] <author> Stephen E. Smaha. Haystack: </author> <title> An Intrusion Detection System. </title> <booktitle> In Fourth Aerospace Computer Security Applications Conference, </booktitle> <pages> pages 37-44, </pages> <institution> Tracor Applied Science Inc., Austin, TX, </institution> <month> Dec </month> <year> 1988. </year>
Reference-contexts: The above mentioned schemes of classifying intrusions was based on its method of detection. Another classification scheme, based on the intrusion types, presented in <ref> [Sma88] </ref> breaks intrusions into the following six types: Attempted break-in: detected by atypical behavior profiles or violations of security constraints. Masquerade attack: detected by atypical behavior profiles or violations of security constraints. Penetration of the security control system. Leakage: detected by atypical usage of I/O resources. <p> There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see [LV89, LV92]. Most intrusion detection systems built to date <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> use the audit trail generated by a C2 or higher rated computer, for input. Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [Sma92] <author> Steve Smaha. </author> <title> Questions about CMAD. </title> <booktitle> Proceedings of the Workshop on Future Directions in Computer Misuse and Anomaly Detection, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: Such patterns can be precisely written in advance. For example, exploitation of the fingerd and sendmail bugs used in the Internet Worm attack [Spa88] would come under this category. This technique represents knowledge about the bad or unacceptable behavior <ref> [Sma92] </ref> and seeks to detect it directly, as opposed to anomaly intrusion detection, which seeks to detect the complement of normal behavior. The above mentioned schemes of classifying intrusions was based on its method of detection.
Reference: [Spa88] <author> Eugene Spafford. </author> <title> The Internet Worm Program: An Analysis. </title> <type> Technical Report CSD-TR-823, </type> <institution> Department of Computer Sciences, Purdue University, West Lafayette, IN, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: In contrast, the second, misuse intrusion detection, refers to intrusions that follow well defined patterns of attack that exploit weaknesses in system and application software. Such patterns can be precisely written in advance. For example, exploitation of the fingerd and sendmail bugs used in the Internet Worm attack <ref> [Spa88] </ref> would come under this category. This technique represents knowledge about the bad or unacceptable behavior [Sma92] and seeks to detect it directly, as opposed to anomaly intrusion detection, which seeks to detect the complement of normal behavior.
Reference: [Spa89] <author> Eugene Spafford. </author> <title> Crisis and Aftermath. </title> <journal> Communications of the ACM, </journal> <volume> 32(6) </volume> <pages> 678-687, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: They use several levels of indirection before breaking into target systems and rarely indulge in sudden bursts of suspicious or anomalous activity, for example in [Sto88]. If an account on a target system is compromised, intruders may carefully cover their tracks so as not to arouse suspicion, as in <ref> [Spa89] </ref>. Furthermore, threats like viruses and worms do not need human supervision and are capable of replicating and traveling to connected computer systems. Unleashed at one computer, by the time they are discovered, it is almost impossible to trace their origin or the extent of infection.
Reference: [SS92] <author> Steven R. Snapp and Stephen E. Smaha. </author> <title> Signature Analysis Model Definition and Formalism. </title> <booktitle> In Proc. Fourth Workshop on Computer Security Incident Handling, </booktitle> <address> Denver, CO, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The primary technique of misuse intrusion detection uses an expert system. This paper proposes another technique, that of using pattern matching as a viable option for misuse intrusion detection [sec 4]. An example of the former is <ref> [SS92] </ref> which encodes knowledge about attacks as if-then implication rules in CLIPS [Gia92] and asserts facts corresponding to audit trail events. Rules are encoded to specify the conditions requisite for an attack in their if part.
Reference: [SSH93] <author> David R. Safford, Douglas L. Schales, and David K. Hess. </author> <title> The TAMU Security Package: An Outgoing Response to Internet Intruders in an Academic Environment. </title> <booktitle> In Proceedings of the Fourth USENIX Security Symposium. USENIX Association, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system. <p> Existence. The fact that something (s) ever existed is sufficient to detect the intrusion attempt. Simple existence can often be found by static scanning of the file system, ala the COPS [FS91] and Tiger <ref> [SSH93] </ref> systems. This means looking for changed permissions or certain special files. 2. Sequence. The fact that several things happened in strict sequence (with the "immediately follows" or "follows" semantics) is sufficient to specify the intrusion. The vast majority of known intrusion patterns fall into categories 1 & 2. 3.
Reference: [SSHW88] <author> M. Sebring, E. Shellhouse, M. Hanna, and R. Whitehurst. </author> <title> Expert Systems in Intrusion Detection: A Case Study. </title> <booktitle> In Proceedings of the 11th National Computer Security Conference, </booktitle> <month> October </month> <year> 1988. </year>
Reference-contexts: There are four possibilities, each one with a non zero probability: 1: intrusive but not anomalous 2: not intrusive but anomalous 3: not intrusive and not anomalous 4: intrusive and anomalous For a probabilistic basis of intrusion detection see [LV89, LV92]. Most intrusion detection systems built to date <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> etc. use 3 APPROACHES TO DETECTING INTRUSIONS 4 the audit trail generated by a C2 1 or higher rated computer, for input. <p> Most of them derive from the statistical Intrusion Detection model of [Den87]. Some of them, for example <ref> [BK88, Sma88, LJL + 89, SSHW88, LV89, LJL + 89] </ref> use the audit trail generated by a C2 or higher rated computer, for input. Others, for example [HLMS90, HLM91] try to analyze intrusions by analyzing network connections and the flow of information in a network.
Reference: [Sto88] <author> Clifford Stoll. </author> <title> Stalking the Wily Hacker. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 484-497, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Computer break-ins and their misuse have become common features <ref> [Met87, Bos88, Sto88, Mar88, Rei87, SSH93] </ref>. The number, as well as sophistication, of attacks on computer systems is on the rise. Often, network intruders have easily overcome the password authentication mechanism designed to protect the system. <p> Intruders also use patterns of intrusion that are often difficult to trace and identify. They use several levels of indirection before breaking into target systems and rarely indulge in sudden bursts of suspicious or anomalous activity, for example in <ref> [Sto88] </ref>. If an account on a target system is compromised, intruders may carefully cover their tracks so as not to arouse suspicion, as in [Spa89]. Furthermore, threats like viruses and worms do not need human supervision and are capable of replicating and traveling to connected computer systems.
Reference: [TCL90] <author> Henry S. Teng, Kaihu Chen, and Stephen C Lu. </author> <title> Security Audit Trail Analysis Using Inductively Generated Predictive Rules. </title> <booktitle> In Proceedings of the 6th Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 24-29. </pages> <publisher> IEEE, IEEE Service Center, </publisher> <address> Piscataway, NJ, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: The approach of time based inductive generalization <ref> [Che88, TCL90] </ref> uses inductive generated time-based rules that characterize the normal behavior patterns of users. The rules are modified dynamically during the learning phase and only "good" rules, i.e. rules with low entropy remain in the system. <p> The rules are modified dynamically during the learning phase and only "good" rules, i.e. rules with low entropy remain in the system. An example of a rule generated by TIM <ref> [TCL90] </ref> may be E1!E2!E3 ) (E4 = 95%, E5 = 5%) where E1-E5 are security events. <p> For example, the neural net approach of anomaly detection does not easily fit the framework of smart variables and the calculation of a number for an anomaly value. It is also not clear which module TIM <ref> [TCL90] </ref> would be placed in. It detects behavioral anomalies and therefore might be a candidate for being placed in the Activity Profile, but it does so by generating rules and firing them when conditions in the if part of the rules is satisfied, much like expert systems. <p> Among non statistical approaches to ID is the work by Teng <ref> [TCL90] </ref> which analyzes individual user audit trails and attempts to infer the sequential relationships between the various events in the trail and the neural net modeling of behavior by Simonian et. al [FHRS90]. A promising approach for future intrusion detection systems might involve Bayesian classification [CKS + 88, CHS91].
Reference: [WB90] <author> Winfried R.E. Weiss and Adalbert Baur. </author> <title> Analysis of Audit and Protocol Data Using Methods from Artificial Intelligence. </title> <booktitle> In Proceedings of the 13th National Computer Security Conference, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: For related work which uses a language front-end for an underlying matching model in intrusion detection see <ref> [HCMM92, WB90] </ref>. Each token maintains its own local copy of these globally visible variables (depending on the pattern the token is associated with), the reason being that each token can make its own variable "bindings" as it flows towards the final state.
Reference: [Wet93] <author> Bradford R. Wetmore. </author> <title> Paradigms for the reduction of Audit Trails. </title> <type> Master's thesis, </type> <institution> University of California, Davis, </institution> <year> 1993. </year>
Reference-contexts: A promising approach for future intrusion detection systems might involve Bayesian classification [CKS + 88, CHS91]. There are several issues that we have omitted, including audit trail reduction and browsing for intrusion detection <ref> [Wet93, Moi] </ref>, non-parametric pattern recognition techniques [Lan92] etc. Audit trail reduction techniques permit the compression of audit data into coarser, higher abstraction events, which may be queried later by the security officer to retrieve information rapidly and efficiently.
Reference: [WF74] <author> Robert A. Wagner and Michael J. Fischer. </author> <title> The String-to-String Correction Problem. </title> <journal> In Journal of the ACM, </journal> <volume> volume 21, </volume> <pages> pages 168-178, </pages> <month> january </month> <year> 1974. </year>
Reference-contexts: However, discrete approximate matching is too broad in scope for detecting intrusions, and its specialization of interest is termed matching with the "follows" semantics in this report. The longest common subsequence problem (see <ref> [WF74] </ref> for a fuller treatment), referred to as LCS, is used to illustrate the applicability of approximate matching to misuse intrusion detection. <p> However, finding all matches of a pattern in the input is an all paths source to sink problem and is computationally hard. Pattern Time Space Preproc Match Reference Comment Sequence O (mn) O (m) O (1) all endpts <ref> [WF74] </ref> Using dynamic programming. Sequence O (mn) O (mn) O (1) all [WF74] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts [BYG89, WM91] Pattern fits within a word of the computer. Small integer values of costs. <p> Pattern Time Space Preproc Match Reference Comment Sequence O (mn) O (m) O (1) all endpts <ref> [WF74] </ref> Using dynamic programming. Sequence O (mn) O (mn) O (1) all [WF74] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts [BYG89, WM91] Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts [MM89] Using dynamic programming. <p> The complexity of matching in this model increases rapidly with increasing complexity of the patterns. At the simplest end are linear patterns without guards, for which well known algorithms from discrete approximate matching <ref> [MM89, WF74, BYG89, WM91] </ref> are applicable. Such matching can be done deterministically and efficiently, without requiring much preprocessing of the patterns. If the pattern is fixed but has regular or partial order features, preprocessing it to yield an equivalent deterministic automaton is very expensive.
Reference: [Win92] <author> Patrick Henry Winston. </author> <booktitle> Artificial Intelligence. </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <note> 3rd edition, </note> <year> 1992. </year>
Reference-contexts: The use of the neural net conceptually looks like: For a good introduction to neural networks and learning in neural nets by back propagation see <ref> [Win92] </ref>. Some of the drawbacks of this approach are: 1. The right topology of the net and the weights assigned to each element of the net are determined only after considerable trial and error. 3 APPROACHES TO DETECTING INTRUSIONS 12 2.
Reference: [WM91] <author> Sun Wu and Udi Manber. </author> <title> Fast Text Searching With Errors. </title> <type> Technical Report TR 91-11, </type> <institution> University of Arizona, Department of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: Pattern Time Space Preproc Match Reference Comment Sequence O (mn) O (m) O (1) all endpts [WF74] Using dynamic programming. Sequence O (mn) O (mn) O (1) all [WF74] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts <ref> [BYG89, WM91] </ref> Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts [MM89] Using dynamic programming. <p> The complexity of matching in this model increases rapidly with increasing complexity of the patterns. At the simplest end are linear patterns without guards, for which well known algorithms from discrete approximate matching <ref> [MM89, WF74, BYG89, WM91] </ref> are applicable. Such matching can be done deterministically and efficiently, without requiring much preprocessing of the patterns. If the pattern is fixed but has regular or partial order features, preprocessing it to yield an equivalent deterministic automaton is very expensive. <p> If the pattern size is small enough to fit the word length of the computer on which matching is done, all matches can be determined in linear time using the algorithm of Baeza-Yates and Gonnet [BYG89] augmented for the wildcard case by Manber and Wu <ref> [WM91] </ref>. Both algorithms determine whether any character position in the input ends a match with the pattern by conceptually sliding the pattern across the input. <p> The amount of savings resulting from these observations can only be determined through simulation. 9 APPENDIX A 38 If the regular expression fits the word length of the machine on which matching is done, matching may be done in linear time <ref> [WM91] </ref>. When several regular expressions are to be matched simultaneously, they can be combined to yield a single regular expression. Matching partial orders, which is more complex than matching regular expressions, is considered next.
Reference: [WS78] <author> Robert A. Wagner and Joel L. Seiferas. </author> <title> Correcting Counter-Automaton Recognizable Languages. </title> <journal> In SIAM J. Computing, </journal> <volume> volume 7, </volume> <pages> pages 357-375, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: Two cases are considered, regular expressions and partial orders. Observation 3: Regular expressions can be matched with the follows semantics in polynomial time. 9 APPENDIX A 37 Approximate matching with regular expressions has been solved by Wagner and Seiferas <ref> [WS78] </ref> and Myers and Miller [MM89]. The approach taken in [MM89] is followed here. The solution constructs a non deterministic finite automaton from the regular expression in a special way.
References-found: 62

