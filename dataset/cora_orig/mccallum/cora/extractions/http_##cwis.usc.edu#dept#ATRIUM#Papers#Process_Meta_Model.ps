URL: http://cwis.usc.edu/dept/ATRIUM/Papers/Process_Meta_Model.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fpmi,scacchig@gilligan.usc.edu  
Phone: Voice: 213-740-4782, Fax: 213-740-8494  
Title: A Meta-Model for Formulating Knowledge-Based Models of Software Development  
Author: Peiwei Mi and Walt Scacchi 
Address: Los Angeles, CA 90089-1421  
Affiliation: Information and Operations Management Department University of Southern California  
Abstract: In this paper, we introduce a knowledge-based meta-model which serves as a unified resource model for integrating characteristics of major types of objects appearing in software development models (SDMs). The URM consists of resource classes and a web of relations that link different types of resources found in different kinds of models of software development. The URM includes specialized models for software systems, documents, agents, tools, and development processes. The URM has served as the basis for integrating and interoperating a number of process-centered CASE environments. The major benefit of the URM is twofold: First, it forms a higher level of abstraction supporting SDM formulation that subsumes many typical models of software development objects. Hence, it enables a higher level of reusability for existing support mechanisms of these models. Second, it provides a basis to support complex reasoning mechanisms that address issues across different types of software objects. To explore these features, we describe the URM both formally and with a detailed example, followed by a characterization of the process of SDM composition, and then by a characterization of the life cycle of activities involved in an overall model formulation process. 
Abstract-found: 1
Intro-found: 1
Reference: [BK93] <author> H. Bhargava and R. Krishnan. </author> <title> Computer Aided Model Construction. Decision Support Systems, </title> <address> 9(3-4):91-112, </address> <year> 1993. </year>
Reference-contexts: Our approach described in this paper employs a knowledge-based meta-modeling scheme. Given that these modeling approaches are moving toward ever more powerful model representations, we next consider recent advances in model construction. Significant efforts in model construction, such as <ref> [BK93, SVFL92, DK93] </ref>, emphasize construction of mathematical optimization models. In these efforts, attention is focused at providing supports systems that facilitate the composition of models, parameters, and algebraic formulas.
Reference: [Blu94] <author> B. Blum. </author> <title> Characterizing the Software Process. </title> <booktitle> Information and Decision Technologies, </booktitle> <volume> 19(4) </volume> <pages> 215-232, </pages> <year> 1994. </year>
Reference-contexts: Other work in the area of process modeling in support of the domain of software development has brought attention to the need and utility of process meta-models and meta-modeling <ref> [MS90, LA94, FL94, Blu94, GMP + 94] </ref>. The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus [Geo89]) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme.
Reference: [BN93] <author> R. Balzer and K. Narayanaswamy. </author> <title> Mechanisms for Generic Process Support. </title> <booktitle> In Proc. First ACM SIGSOFT Symp. Foundations Software Engineering, </booktitle> <pages> pages 9-20. </pages> <booktitle> ACM, Software Engineering Notes, </booktitle> <volume> Vol. 18(5), </volume> <month> December </month> <year> 1993. </year> <month> 25 </month>
Reference-contexts: The Articulator meta-model has also served as the basis for integrating 2 the Articulator environment [MS90] with (i) the generic process engine in the AP5 environment at the Information Sciences Institute by Balzer and Narayanaswamy <ref> [BN93] </ref>, (ii) the Matisse team programming environment from HP Laboratories [GP + 92], (iii) the 2 The primary technical effort encountered during integration is the construction of a translator that maps a given process notation into or out of the Articulator's meta-model notation.
Reference: [Boo91] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference-contexts: In our view, there are three central problems in composing models of software development processes within SDMs. The first is that of finding or matching a candidate software process model for composition (e.g., a model for an object-oriented design (OOD) technique <ref> [Boo91] </ref>) with its target software development infrastructure. The second is planning for how to construct a match, when the matching activity fails to produce an acceptably compatible match [MS91, MS93]. The third entails inserting or integrating the candidate SDM into a compatible process model representation. <p> Figure 11 displays a model of the OOD process derived from Booch <ref> [Boo91] </ref>. In order to integrate this process model into the DOD-STD-Process, the matching problem boils down to determining if and where to incorporate the OOD process with the current design task hierarchy.
Reference: [CFFS92] <author> R. Conradi, C. Ferstrom, A. Fuggetta, and B. Snowden. </author> <title> Towards a Reference Framework for Process Concepts. </title> <booktitle> In Software Process Technology, </booktitle> <pages> pages 3-17. </pages> <booktitle> Second European Workshop on Software Process Technology (EWSPT '92), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 635, </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: In this section, we first discuss the generic resource model and then five specialized object models. 3.1 The Generic Resource Model The generic resource model describes a basic set of characteristics and uses for major kinds of software development resources typically manipulated in PSDSEs <ref> [CFFS92] </ref>, which can be identified as follows: 3 In earlier work, aggregated webs of related resources were called computing packages [KS82, Sca84]. 4 In this regard, we allow for relations to be defined as object classes whose attributes can be single values or a set of values.
Reference: [CS89] <author> S.C. Choi and W. Scacchi. </author> <title> Assuring the Correctness of Configured Software Descriptions. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 17(7) </volume> <pages> 67-76, </pages> <year> 1989. </year>
Reference-contexts: or conditional choices utilize atomic actions to denote the begin and end decision points. 15 ffFormulate-Design is-a: task component-of: Preliminary-Design has-predecessors: none has-successors: Allocate-Components Identify-System-Test 16 4.2 The DOD-STD-SDF Model The DOD-STD-SDF specifies the set of software documents and software system executables required by MIL-STD-2167A, as well as their relationships <ref> [CS89, GS90] </ref>. SDF represents the Software Development Files that are the products of software development. Figure 7 shows the system product decomposition of DOD-STD-SDF. Figure 8 provides a compositional view of some of the DOD-STD-SDF documents.
Reference: [CS91] <author> S.C. Choi and W. Scacchi. SOFTMAN: </author> <title> An Environment for Forward and Reverse CASE. </title> <journal> Information and Software Technology, </journal> <volume> 33(9), </volume> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The has-components / component-of relation pair forms the decomposition hierarchy for a software resource. Has-neighbors / neighbor-of form a processing link among a set of objects of a non-decomposible resource. Neighbor relations can be used to denote a transformational sequence of intermediate documents or persistent artifacts <ref> [CS91] </ref>. All resource subclasses can have 9 LEGEND: Object Classes: Relation Classes: O1 -- Resource R0 -- is-a-subclass O2 -- Simple-Resource R1 -- has-member-resources O3 -- Aggregate-Resource R2 -- has-neighbors neighbors as long as they are the objects of the same subclass.
Reference: [CT92] <author> B. Czejdo and M. Taylor. </author> <title> Integration of Information Systems using an Object-Oriented Approach. </title> <journal> Computer J., </journal> <volume> 35(5) </volume> <pages> 501-513, </pages> <year> 1992. </year>
Reference-contexts: His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems. However, it should be noted that ERA models and support systems can lack the representational flexibility and economy offered by object-oriented models and support systems <ref> [MS90, CT92, Len93] </ref>, such as found in the use of inheritance mechanisms and object-oriented data management systems.
Reference: [DBe90] <author> P. Devanbu, R.J. Brachman, </author> <title> and etc. LaSSIE: A Knowledge-based Software Information System. </title> <booktitle> In Proc. of the 12th International Conference on Software Engineering, </booktitle> <pages> pages 249-261, </pages> <address> Nice, France, </address> <month> March </month> <year> 1990. </year>
Reference: [DJ93] <author> V. Dhar and M. Jarke. </author> <booktitle> On Modeling Processes. Decision Support Systems, </booktitle> <volume> 9(1) </volume> <pages> 39-49, </pages> <year> 1993. </year>
Reference-contexts: In the area of process modeling Jarke [JJR90], Dhar <ref> [DJ93] </ref> and their colleagues are among those that advocate the need to model the processes associated with decision making and with 2 the development of software-based information systems.
Reference: [DK93] <author> D. Dolk and J. Kottemann. </author> <title> Model Integration and a Theory of Models. Decision Support Systems, </title> <address> 9(3-4):51-66, </address> <year> 1993. </year>
Reference-contexts: Our approach described in this paper employs a knowledge-based meta-modeling scheme. Given that these modeling approaches are moving toward ever more powerful model representations, we next consider recent advances in model construction. Significant efforts in model construction, such as <ref> [BK93, SVFL92, DK93] </ref>, emphasize construction of mathematical optimization models. In these efforts, attention is focused at providing supports systems that facilitate the composition of models, parameters, and algebraic formulas. <p> Significant efforts in model construction, such as [BK93, SVFL92, DK93], emphasize construction of mathematical optimization models. In these efforts, attention is focused at providing supports systems that facilitate the composition of models, parameters, and algebraic formulas. Dolk and Kottemann <ref> [DK93] </ref> then advocate that model construction support systems must also address the need to execute, interpret, or enact the model, and how this may influence model formulation.
Reference: [DoD88] <institution> U.S. Department of Defense. Defense System Software Development, Document DOD-STD-2167A. </institution> <type> Technical report, </type> <institution> Department of Defense, </institution> <year> 1988. </year>
Reference-contexts: This model describes the develop ment approach and products directed by MIL-STD-2167A <ref> [DoD88] </ref>, which is a public stan dard that guides the development of large software systems embedded in military applications purchased by the U.S. government. 6 DOD-STD-Model includes (i) a software product model, 6 The use of other public standards, such as those grouped under the ISO 9000 banner, serve similar purposes
Reference: [EJe91] <author> W. Emmerich, G. Junkerman, and etc. Merlin: </author> <title> Knowledge-based Process Modeling. </title> <booktitle> In Proc. of 1st European Workshop on Software Process Modeling, </booktitle> <pages> pages 181-186, </pages> <year> 1991. </year>
Reference: [FL94] <author> M. Freeman and P. Layzell. </author> <title> A Meta-Model of Information Systems to Support Reverse Engineering. </title> <journal> Information and Software Technology, </journal> <volume> 36(5) </volume> <pages> 283-294, </pages> <year> 1994. </year>
Reference-contexts: Other work in the area of process modeling in support of the domain of software development has brought attention to the need and utility of process meta-models and meta-modeling <ref> [MS90, LA94, FL94, Blu94, GMP + 94] </ref>. The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus [Geo89]) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme.
Reference: [Geo87] <author> A.M. Geoffrion. </author> <title> An Introduction to Structured Modeling. </title> <journal> Management Science, </journal> <volume> 33(5) </volume> <pages> 547-589, </pages> <year> 1987. </year>
Reference-contexts: In order to better understand these issues, let us review some comparable research efforts, particularly as related to structural modeling, process modeling, meta-modeling, model construction and integration, and model management systems. Geoffrion <ref> [Geo87, Geo89, Geo92] </ref> is among those who can be noted for their pioneering of the computational rendering and use of structural modeling. His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems.
Reference: [Geo89] <author> A. Geoffrion. </author> <title> The formal aspects of structured modeling. </title> <journal> Operations Manage--ment, </journal> <volume> 37(1) </volume> <pages> 30-52, </pages> <year> 1989. </year>
Reference-contexts: In order to better understand these issues, let us review some comparable research efforts, particularly as related to structural modeling, process modeling, meta-modeling, model construction and integration, and model management systems. Geoffrion <ref> [Geo87, Geo89, Geo92] </ref> is among those who can be noted for their pioneering of the computational rendering and use of structural modeling. His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems. <p> The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus <ref> [Geo89] </ref>) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme. Given that these modeling approaches are moving toward ever more powerful model representations, we next consider recent advances in model construction.
Reference: [Geo92] <author> A. Geoffrion. </author> <title> The SML language for structured modeling: levels 1 and 2, and 3 and 4. </title> <journal> Operations Research, </journal> <volume> 40(1) </volume> <pages> 38-76, </pages> <year> 1992. </year>
Reference-contexts: In order to better understand these issues, let us review some comparable research efforts, particularly as related to structural modeling, process modeling, meta-modeling, model construction and integration, and model management systems. Geoffrion <ref> [Geo87, Geo89, Geo92] </ref> is among those who can be noted for their pioneering of the computational rendering and use of structural modeling. His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems.
Reference: [GMP + 94] <author> P.K. Garg, P. Mi, T. Pham, W. Scacchi, and G. Thunquest. </author> <title> The SMART Approach to Software Process Engineering. </title> <booktitle> In Proc. 16th. Intern. Conf. Soft. Engr., </booktitle> <pages> pages 341-350. </pages> <publisher> IEEE Computer Society, IEEE, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: In particular, they advocate the use of knowledge-based process representation formalisms which enable process support systems to support complex reasoning, inheritance, and query-based computations. We concur with this direction for process modeling as a necessity, and we follow it in this paper and in related work elsewhere <ref> [MS90, GMP + 94] </ref>. These knowledge-based formalisms provide for the representation and use of interrelated classes of attributed objects that are manipulated by rule-based inference systems. <p> Other work in the area of process modeling in support of the domain of software development has brought attention to the need and utility of process meta-models and meta-modeling <ref> [MS90, LA94, FL94, Blu94, GMP + 94] </ref>. The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus [Geo89]) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme. <p> We believe these concepts should therefore be applicable to other model formalizations, integration and formulation support, particularly those for software development models <ref> [MS92, MLS92, GMP + 94] </ref>. In our view, we find that the concepts that we have emphasized above can best be tied together through an understanding of the overall set of mechanisms and activities that must be addressed to formulate complex models of software development projects. <p> The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>. <p> Our experience has been that building a new translator takes a few person weeks of effort. More complex translators for producing natural language paraphrases of SDMs or enactment histories are also being developed elsewhere [KMR93]. 5 commercially available SynerVision process enactment engine from HP <ref> [GMP + 94] </ref>, and (iv) other in-house environments being researched by some of our other corporate sponsors. Of these (i) and (ii) employ automation rules for process support, while (iii) utilizes a procedural process programming language, a broadcast message server, and encapsulated off-the-shelf CASE tools.
Reference: [GP + 92] <author> P.K. Garg, T. Pham, et al. Matisse: </author> <title> A Knowledge-Based Team Programming Environment. </title> <type> Technical Report HPL-92-104, </type> <institution> Hewlett-Packard Laboratories, </institution> <year> 1992. </year> <note> To appear in Intern. J. Soft. Engr. and Know. Engr. </note>
Reference-contexts: The Articulator meta-model has also served as the basis for integrating 2 the Articulator environment [MS90] with (i) the generic process engine in the AP5 environment at the Information Sciences Institute by Balzer and Narayanaswamy [BN93], (ii) the Matisse team programming environment from HP Laboratories <ref> [GP + 92] </ref>, (iii) the 2 The primary technical effort encountered during integration is the construction of a translator that maps a given process notation into or out of the Articulator's meta-model notation. Our experience has been that building a new translator takes a few person weeks of effort.
Reference: [GS90] <author> P.K. Garg and W. Scacchi. </author> <title> A Hypertext System to Manage Software Life Cycle Documents. </title> <journal> IEEE Software, </journal> <volume> 7(3) </volume> <pages> 90-99, </pages> <year> 1990. </year>
Reference-contexts: or conditional choices utilize atomic actions to denote the begin and end decision points. 15 ffFormulate-Design is-a: task component-of: Preliminary-Design has-predecessors: none has-successors: Allocate-Components Identify-System-Test 16 4.2 The DOD-STD-SDF Model The DOD-STD-SDF specifies the set of software documents and software system executables required by MIL-STD-2167A, as well as their relationships <ref> [CS89, GS90] </ref>. SDF represents the Software Development Files that are the products of software development. Figure 7 shows the system product decomposition of DOD-STD-SDF. Figure 8 provides a compositional view of some of the DOD-STD-SDF documents.
Reference: [HL88] <author> K.E. Huff and V.R. Lesser. </author> <title> A Plan-Based Intelligent Assistant That Supports the Process of Programming. </title> <booktitle> ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 13 </volume> <pages> 97-106, </pages> <month> Nov </month> <year> 1988. </year>
Reference-contexts: This is a generative process planning problem <ref> [HL88] </ref>. This means that the plan must be generated to incrementally transform the candidate SDM into the desired target resource configuration, given available resources. The transformations may include adding or removing resources, restructuring resource configuration (web) relations, revising resource attributes or attribute values.
Reference: [JJR90] <author> M. Jarke, M. Jeusfeld, and T. Rose. </author> <title> A Software Process Data Model for Knowledge Engineering in Information Systems. </title> <journal> Information Systems, </journal> <volume> 15(1) </volume> <pages> 86-115, </pages> <year> 1990. </year>
Reference-contexts: However, it should be noted that ERA models and support systems can lack the representational flexibility and economy offered by object-oriented models and support systems [MS90, CT92, Len93], such as found in the use of inheritance mechanisms and object-oriented data management systems. In the area of process modeling Jarke <ref> [JJR90] </ref>, Dhar [DJ93] and their colleagues are among those that advocate the need to model the processes associated with decision making and with 2 the development of software-based information systems.
Reference: [Kai88] <author> G.E. Kaiser. </author> <title> Rule-Based Modeling of the Software Development Process. </title> <booktitle> In The 4th International Software Process Workshop, </booktitle> <pages> pages 84-86, </pages> <address> New York, NY, </address> <year> 1988. </year>
Reference: [KMR93] <author> T. Korelsky, D. McCullough, and O. Rambow. </author> <title> Knowledge requirements for the automatic generation of project management reports. </title> <booktitle> In Proc. 8th. Knowledge-Based Software Engineering, </booktitle> <pages> pages 2-9. </pages> <publisher> IEEE Computer Society, IEEE, </publisher> <month> Septem-ber </month> <year> 1993. </year>
Reference-contexts: Our experience has been that building a new translator takes a few person weeks of effort. More complex translators for producing natural language paraphrases of SDMs or enactment histories are also being developed elsewhere <ref> [KMR93] </ref>. 5 commercially available SynerVision process enactment engine from HP [GMP + 94], and (iv) other in-house environments being researched by some of our other corporate sponsors.
Reference: [KS82] <author> R. Kling and W. Scacchi. </author> <title> The Web of Computing: Computer Technology as Social Organization. </title> <booktitle> In Advances in Computers, Vol.21, </booktitle> <pages> pages 1-90. </pages> <publisher> Academic Press, Inc., </publisher> <year> 1982. </year> <month> 27 </month>
Reference-contexts: object models. 3.1 The Generic Resource Model The generic resource model describes a basic set of characteristics and uses for major kinds of software development resources typically manipulated in PSDSEs [CFFS92], which can be identified as follows: 3 In earlier work, aggregated webs of related resources were called computing packages <ref> [KS82, Sca84] </ref>. 4 In this regard, we allow for relations to be defined as object classes whose attributes can be single values or a set of values.
Reference: [LA94] <author> F. Leymann and W. Altenhuber. </author> <title> Managing Buiness Processes as an Information Resource. </title> <journal> IBM Systems J., </journal> <volume> 33(2) </volume> <pages> 326-348, </pages> <year> 1994. </year>
Reference-contexts: Other work in the area of process modeling in support of the domain of software development has brought attention to the need and utility of process meta-models and meta-modeling <ref> [MS90, LA94, FL94, Blu94, GMP + 94] </ref>. The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus [Geo89]) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme.
Reference: [Len93] <author> M. Lenard. </author> <title> An Object-Oriented Approach to Model Management. Decision Support Systems, </title> <address> 9(3-4):67-74, </address> <year> 1993. </year>
Reference-contexts: His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems. However, it should be noted that ERA models and support systems can lack the representational flexibility and economy offered by object-oriented models and support systems <ref> [MS90, CT92, Len93] </ref>, such as found in the use of inheritance mechanisms and object-oriented data management systems.
Reference: [Mi92] <author> P. Mi. </author> <title> Modeling and Analyzing the Software Process and Process Breakdowns. </title> <type> PhD thesis, </type> <institution> Computer Science Dept. University of Southern California, </institution> <year> 1992. </year> <month> September. </month>
Reference-contexts: Similarly, we do not describe the rules and computational methods that manipulate these entities, as examples can be found in our related work <ref> [MS91, Mi92, MS93] </ref>. 11 Resource Simple-resource AggRS has-members has-neighbors Software-System Function Module has-functionalities Document Paragraph Section has-component-docs realized-by-docs Agent People Team has-Teammembers report-to-agents Tool Program Toolkit has-tool-calls has-next-calls Process Action Task has-subtasks has-successors represented by the symbols labeled with the circles. <p> tool-spec specifies resources that are used as tools in the process. required-resource-spec specifies resources that are input to the process. successful-provided-resource-spec specifies resources that are output from the process when the process is successful; failed-provided-resource-spec specifies resources that are output from the process if its enactment breaks down or fails <ref> [MS91, Mi92, MS93] </ref>. <p> At this point, we have developed a set of 35 hueristics for classifying the disparity between currently available resource webs and those needed to satisfy planned and scheduled software development processes <ref> [MS91, Mi92, MS93] </ref>.
Reference: [MLS92] <author> P. Mi, M. Lee, and W. Scacchi. </author> <title> A Knowledge-based Software Process Library for Process-driven Software Development. </title> <booktitle> In Proc. 7th Knowledge-Based Software Engineering Conference, </booktitle> <address> McLean, VA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: These models are used to facilitate different aspects of software development when employed within support systems we call "process-centered software development support environments" (PSDSEs). These models also facilitate the archiving and reuse of product, process, and decision-making artifacts <ref> [WS88, MLS92] </ref> through sharing the object classes among software developers, as well as query and reasoning about relations between modeled objects and their attributes [MS90, RD91]. <p> We believe these concepts should therefore be applicable to other model formalizations, integration and formulation support, particularly those for software development models <ref> [MS92, MLS92, GMP + 94] </ref>. In our view, we find that the concepts that we have emphasized above can best be tied together through an understanding of the overall set of mechanisms and activities that must be addressed to formulate complex models of software development projects. <p> attributes such as skill requirements and prior experiences can also be added. 4.5 Composition of Software Development Models In order to more rapidly build large and complex software development models (SDMs), we would like to draw upon SDMs that might exist elsewhere, or be stored within shared wide-area SDM repositories <ref> [MLS92, NS91] </ref>. Assuming that translators exist or can be built for mapping SDM notations into the meta-model notation described above, we must next face the problem of how to compose independently developed SDMs into larger models.
Reference: [MS90] <author> P. Mi and W. Scacchi. </author> <title> A Knowledge-based Environment for Modeling and Simulating Software Engineering Processes. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(3) </volume> <pages> 283-294, </pages> <month> Sept </month> <year> 1990. </year>
Reference-contexts: These models also facilitate the archiving and reuse of product, process, and decision-making artifacts [WS88, MLS92] through sharing the object classes among software developers, as well as query and reasoning about relations between modeled objects and their attributes <ref> [MS90, RD91] </ref>. For example, Ramesh and Dhar [RD91] advocate the need for a PSDSE that records and organizes for retrieval the kinds of decisions made and rationales employed when building large software systems. <p> His structures model targetted problem domains using attributed directed graphs, which in turn can be supported using entity-relation-attribute (ERA) based model management systems. However, it should be noted that ERA models and support systems can lack the representational flexibility and economy offered by object-oriented models and support systems <ref> [MS90, CT92, Len93] </ref>, such as found in the use of inheritance mechanisms and object-oriented data management systems. <p> In particular, they advocate the use of knowledge-based process representation formalisms which enable process support systems to support complex reasoning, inheritance, and query-based computations. We concur with this direction for process modeling as a necessity, and we follow it in this paper and in related work elsewhere <ref> [MS90, GMP + 94] </ref>. These knowledge-based formalisms provide for the representation and use of interrelated classes of attributed objects that are manipulated by rule-based inference systems. <p> Other work in the area of process modeling in support of the domain of software development has brought attention to the need and utility of process meta-models and meta-modeling <ref> [MS90, LA94, FL94, Blu94, GMP + 94] </ref>. The purpose of meta-models is to provide a formal language or representational system for specifying an interrelated family (or genus [Geo89]) of process models, or other models of software development objects. Our approach described in this paper employs a knowledge-based meta-modeling scheme. <p> Over the past eight years, we have been developing, using, and evolving a knowledge-based PSDSE called the Articulator <ref> [MS90] </ref>. The Articulator's knowledge representation is an implementation of the URM. In this way, the Articulator's meta-model serves as a formalism for the URM to represent a software development model and its supporting resource infrastructure [MS90, Sca91]. <p> The Articulator's knowledge representation is an implementation of the URM. In this way, the Articulator's meta-model serves as a formalism for the URM to represent a software development model and its supporting resource infrastructure <ref> [MS90, Sca91] </ref>. Based on our experience in using and refining the Articulator in the formulation of a few dozen SDMs for our research sponsors, we have developed a characterization of the set of 3 activities we perform in constructing and manipluating software development models. <p> The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>. <p> So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94]. The Articulator meta-model has also served as the basis for integrating 2 the Articulator environment <ref> [MS90] </ref> with (i) the generic process engine in the AP5 environment at the Information Sciences Institute by Balzer and Narayanaswamy [BN93], (ii) the Matisse team programming environment from HP Laboratories [GP + 92], (iii) the 2 The primary technical effort encountered during integration is the construction of a translator that maps <p> This URM consists of two subclasses of resource: the simple resource for individual resource types, the aggregate resource set (AggRS) for heterogeneous collections of resources of different types. It also consists of a web of relations that link different types of resources <ref> [MS90] </ref>. 3 Through the use of different software development object models, individual software applications can be built, and PSDSEs which support their construction can be realized in a more integrated manner.
Reference: [MS91] <author> P. Mi and W. Scacchi. </author> <title> Modeling Articulation Work in Software Engineering Processes. </title> <booktitle> Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 188-201, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>. <p> Similarly, we do not describe the rules and computational methods that manipulate these entities, as examples can be found in our related work <ref> [MS91, Mi92, MS93] </ref>. 11 Resource Simple-resource AggRS has-members has-neighbors Software-System Function Module has-functionalities Document Paragraph Section has-component-docs realized-by-docs Agent People Team has-Teammembers report-to-agents Tool Program Toolkit has-tool-calls has-next-calls Process Action Task has-subtasks has-successors represented by the symbols labeled with the circles. <p> tool-spec specifies resources that are used as tools in the process. required-resource-spec specifies resources that are input to the process. successful-provided-resource-spec specifies resources that are output from the process when the process is successful; failed-provided-resource-spec specifies resources that are output from the process if its enactment breaks down or fails <ref> [MS91, Mi92, MS93] </ref>. <p> The second is planning for how to construct a match, when the matching activity fails to produce an acceptably compatible match <ref> [MS91, MS93] </ref>. The third entails inserting or integrating the candidate SDM into a compatible process model representation. All three of these activities entail complex representations and reasoning processes. <p> At this point, we have developed a set of 35 hueristics for classifying the disparity between currently available resource webs and those needed to satisfy planned and scheduled software development processes <ref> [MS91, Mi92, MS93] </ref>.
Reference: [MS92] <author> P. Mi and W. Scacchi. </author> <title> Process Integration in CASE Environments. </title> <journal> IEEE Software, </journal> <volume> 9(2) </volume> <pages> 45-53, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: We believe these concepts should therefore be applicable to other model formalizations, integration and formulation support, particularly those for software development models <ref> [MS92, MLS92, GMP + 94] </ref>. In our view, we find that the concepts that we have emphasized above can best be tied together through an understanding of the overall set of mechanisms and activities that must be addressed to formulate complex models of software development projects. <p> The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>. <p> Software systems are produced by software developers through software development tasks that occur in different places at different times. Therefore, they have different development states indicating their status of development <ref> [MS92] </ref>. There also exists an invocation relation between soft ware modules (e.g., what module calls what other module). * Software documents (e.g., reports, deliverables, manuals, design descriptions, modification requests) which emerge as artifacts resulting from the execution of software development processes. <p> For example in Figure 6, Formulate-Design has two successors: Allocate-Components and Identify-System-Test. Thus, depending how we specify the successors of a task and other task constructors, we can achieve different task execution orders, including sequential, concurrent, iterative, or conditional <ref> [MS92] </ref>. remains the problem of identifying, formulating, and codifying a software development model which can demonstrate conformity to the standards, what ever they may be. 7 In this paper, we only identify a partial set of classes and instance values, as our model of software development for MIL-STD-2167A includes hundreds of
Reference: [MS93] <author> P. Mi and W. Scacchi. </author> <title> Articulation: An Integrated Approach to Diagnosis, Re-planning, and Re-scheduling. </title> <booktitle> In Proc. 8th. Knowledge-Based Software Engineering Conf., </booktitle> <pages> pages 77-85, </pages> <address> Chicago, IL, </address> <year> 1993. </year>
Reference-contexts: Similarly, we do not describe the rules and computational methods that manipulate these entities, as examples can be found in our related work <ref> [MS91, Mi92, MS93] </ref>. 11 Resource Simple-resource AggRS has-members has-neighbors Software-System Function Module has-functionalities Document Paragraph Section has-component-docs realized-by-docs Agent People Team has-Teammembers report-to-agents Tool Program Toolkit has-tool-calls has-next-calls Process Action Task has-subtasks has-successors represented by the symbols labeled with the circles. <p> tool-spec specifies resources that are used as tools in the process. required-resource-spec specifies resources that are input to the process. successful-provided-resource-spec specifies resources that are output from the process when the process is successful; failed-provided-resource-spec specifies resources that are output from the process if its enactment breaks down or fails <ref> [MS91, Mi92, MS93] </ref>. <p> The second is planning for how to construct a match, when the matching activity fails to produce an acceptably compatible match <ref> [MS91, MS93] </ref>. The third entails inserting or integrating the candidate SDM into a compatible process model representation. All three of these activities entail complex representations and reasoning processes. <p> At this point, we have developed a set of 35 hueristics for classifying the disparity between currently available resource webs and those needed to satisfy planned and scheduled software development processes <ref> [MS91, Mi92, MS93] </ref>.
Reference: [NS91] <author> J. Noll and W. Scacchi. </author> <title> Integrating Diverse Information Repositories: A Distributed Hypertext Approach. </title> <journal> Computer, </journal> <volume> 24(12) </volume> <pages> 38-45, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: attributes such as skill requirements and prior experiences can also be added. 4.5 Composition of Software Development Models In order to more rapidly build large and complex software development models (SDMs), we would like to draw upon SDMs that might exist elsewhere, or be stored within shared wide-area SDM repositories <ref> [MLS92, NS91] </ref>. Assuming that translators exist or can be built for mapping SDM notations into the meta-model notation described above, we must next face the problem of how to compose independently developed SDMs into larger models.
Reference: [OB92] <author> M. Oivo and V. Basili. </author> <title> Representing Software Engineering Models The TAME Goal Oriented Approach. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> 18(10) </volume> <pages> 886-898, </pages> <year> 1992. </year>
Reference: [RD91] <author> B. Ramesh and V. Dhar. </author> <title> Representation and Maintenance of Process Knowledge for Large Scale Systems Development. </title> <booktitle> In Proc. of 6th Knowledge-based Software Engineering Conference, </booktitle> <pages> pages 223-231, </pages> <month> Sept </month> <year> 1991. </year>
Reference-contexts: These models also facilitate the archiving and reuse of product, process, and decision-making artifacts [WS88, MLS92] through sharing the object classes among software developers, as well as query and reasoning about relations between modeled objects and their attributes <ref> [MS90, RD91] </ref>. For example, Ramesh and Dhar [RD91] advocate the need for a PSDSE that records and organizes for retrieval the kinds of decisions made and rationales employed when building large software systems. <p> These models also facilitate the archiving and reuse of product, process, and decision-making artifacts [WS88, MLS92] through sharing the object classes among software developers, as well as query and reasoning about relations between modeled objects and their attributes [MS90, RD91]. For example, Ramesh and Dhar <ref> [RD91] </ref> advocate the need for a PSDSE that records and organizes for retrieval the kinds of decisions made and rationales employed when building large software systems.
Reference: [Sca84] <author> W. Scacchi. </author> <title> Managing Software Engineering Projects: A Social Analysis. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 10(1) </volume> <pages> 49-59, </pages> <month> Jan </month> <year> 1984. </year>
Reference-contexts: object models. 3.1 The Generic Resource Model The generic resource model describes a basic set of characteristics and uses for major kinds of software development resources typically manipulated in PSDSEs [CFFS92], which can be identified as follows: 3 In earlier work, aggregated webs of related resources were called computing packages <ref> [KS82, Sca84] </ref>. 4 In this regard, we allow for relations to be defined as object classes whose attributes can be single values or a set of values.
Reference: [Sca91] <author> W. Scacchi. </author> <title> The Software Infrastructure for A Distributed System Factory. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 355-369, </pages> <month> Sept </month> <year> 1991. </year>
Reference-contexts: The Articulator's knowledge representation is an implementation of the URM. In this way, the Articulator's meta-model serves as a formalism for the URM to represent a software development model and its supporting resource infrastructure <ref> [MS90, Sca91] </ref>. Based on our experience in using and refining the Articulator in the formulation of a few dozen SDMs for our research sponsors, we have developed a characterization of the set of 3 activities we perform in constructing and manipluating software development models.
Reference: [SM93a] <author> W. Scacchi and P. Mi. </author> <title> Experiences with Process Modeling, Analysis, and Simulation of Formalized Process Models. In position paper circulated at the 8th. Intern. Soft. Process Work. </title> <publisher> Dagstuhl, Germany, IEEE Computer Society, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>.
Reference: [SM93b] <author> W. Scacchi and P. Mi. </author> <title> Modeling, Integrating, and Enacting Complex Organizational Processes. </title> <journal> Intern. J. Intelligent Systems for Finance, Accounting, and Management, </journal> <note> (final version to appear), 1993. Previous version presented at the 5th. Intern. Conf. </note> <institution> Intelligent Systems for Finance, Accounting, and Management, Stanford University (December 1993). </institution>
Reference-contexts: We have also found that with little effort, our approach can be adapted and applied to other decision-making and business process domains <ref> [SM93b] </ref>. In the remainder of this paper, we describe our approach to the model formulation life cycle, meta-modeling, model composition. In the next section, we provide the background for our approach. This includes a short characterization of our focal problem domain, as well as related approaches and studies. <p> In this regard, our research is now extending into other areas, such as modeling of other aspects of development organizations as well as other organizational processes (e.g., workflow automation, order fulfillment, new product development, financial book closings) and their resource infrastructures <ref> [SM93b] </ref> Subsequently, our goal is to demonstrate the definition, integration, enactment, and composition of process-directed environments and applications for these process models.
Reference: [SM93c] <author> W. Scacchi and P. Mi. </author> <title> Modeling, Integrating, </title> <booktitle> and Enacting Software Engineering Processes. In Proc. 3rd. Irvine Software Symposium. </booktitle> <institution> Irvine Research Unit in Software, University of California at Irvine, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>.
Reference: [SPW92] <author> W. Schafer, B. Pueschel, and S. Wolf. </author> <title> A Knowledge-based Software Development Environment Supporting Cooperative Work. </title> <journal> Intern. J. Soft. Engr. and Know. Engr., </journal> <volume> 2(1) </volume> <pages> 79-106, </pages> <year> 1992. </year>
Reference: [SVFL92] <author> A. Sen, A. Vinze, and T. Feng-Liou. </author> <title> Construction of a Model Formulation Consultant: </title> <journal> The AEROBA Experience. IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> 22(5) </volume> <pages> 1220-1232, </pages> <year> 1992. </year>
Reference-contexts: Our approach described in this paper employs a knowledge-based meta-modeling scheme. Given that these modeling approaches are moving toward ever more powerful model representations, we next consider recent advances in model construction. Significant efforts in model construction, such as <ref> [BK93, SVFL92, DK93] </ref>, emphasize construction of mathematical optimization models. In these efforts, attention is focused at providing supports systems that facilitate the composition of models, parameters, and algebraic formulas.
Reference: [Vot93] <author> L. Votta. </author> <title> Comparing One Formal to One Informal Process Description. In position paper circulated at the 8th. Intern. Soft. Process Work. </title> <publisher> Dagstuhl, Germany, IEEE Computer Society, </publisher> <month> February </month> <year> 1993. </year> <month> 29 </month>
Reference-contexts: The Articulator meta-model serves as a representation language that is capable of specifying a large family of software engineering processes. So far, we have specified more than twenty process models for different kinds of applications ranging from small-scale research-oriented models to large-scale commercial development models <ref> [MS90, MS91, MS92, SM93a, Vot93, SM93c, GMP + 94] </ref>.
Reference: [WS88] <author> M. Wood and I. Sommerville. </author> <title> A Knowledge-based Software Components Cata--logue. </title> <editor> In P. Brereton, editor, </editor> <booktitle> Software Engineering Environments, </booktitle> <pages> pages 116-133. </pages> <publisher> Ellis Horwood Limited, </publisher> <year> 1988. </year>
Reference-contexts: These models are used to facilitate different aspects of software development when employed within support systems we call "process-centered software development support environments" (PSDSEs). These models also facilitate the archiving and reuse of product, process, and decision-making artifacts <ref> [WS88, MLS92] </ref> through sharing the object classes among software developers, as well as query and reasoning about relations between modeled objects and their attributes [MS90, RD91].
Reference: [ZW93] <author> A.M. Zaremski and J.M. Wing. </author> <title> Signature Matching: A Key to Reuse. </title> <booktitle> In Proc. First ACM SIGSOFT Symp. Foundations Software Engineering, </booktitle> <pages> pages 182-190. </pages> <booktitle> ACM, Software Engineering Notes, </booktitle> <volume> Vol. 18(5), </volume> <month> December </month> <year> 1993. </year> <month> 30 </month>
Reference-contexts: In our view, new software development processes and the software engineering tools that support them, require that a web of compatible resources be in-place or available to facilitate successful process model composition. This resource web can be thought of as a signature <ref> [ZW93] </ref> or configuration of technological and organizational resources-e.g., OOD support tools, staff trained in OOD, and OOD artifacts or documents. Thus, the matching problem requires that the resource web for each process model composition candidate must be explicitly represented. <p> If a match cannot be found, it is very unlikely that the candidate process model can be easily adopted and integrated. Clearly, it is likely that an exact match will not always be found (cf. <ref> [ZW93] </ref>). Therefore, it is necessary to establish some criteria or measure of acceptable distance from an exact match-i.e., acceptable partial match metrics.
References-found: 46

