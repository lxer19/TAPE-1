URL: http://www.cs.utexas.edu/users/lavender/papers/behset.ps
Refering-URL: http://www.cs.utexas.edu/users/lavender/papers/index.html
Root-URL: 
Email: lavender@mcc.com  kafura@cs.vt.edu  
Phone: +1.512.338.3252  +1.703.231.5568  
Title: Characterizing and Inheriting Synchronization Constraints using Behavior Sets  
Author: DENNIS G. KAFURA 
Address: 3500 W. Balcones Center Dr. Austin, Texas 78759-6509  562 McBryde Hall, Virginia Tech Blacksburg, Virginia 24061-0106  
Affiliation: MCC  Department of Computer Science  
Abstract: Using CCS behavior equations to specify and reason about the observable behavior of concurrent objects, the nature of the conict in inheriting synchronization constraints is explicated. Using behavior equations as a formal representation of concurrent object behavior results in the definition of behavior sets and a behavior function. A behavior set represents a subset of the methods defined as part of an objects interface. The behavior function is a mapping from the domain of object states to the domain of behavior sets. A behavior set is used to represent the synchronization constraints of actor-like concurrent objects and may be extended via inheritance. By expressing relevant object states, behavior sets, and the behavior function as first-class, inheritable, and mutable entities in a concurrent object-oriented language, the conditions are defined that must be met in order to inherit synchronization constraints free of known anomalies. R. GREG LAVENDER 
Abstract-found: 1
Intro-found: 1
Reference: [Agha 86] <author> Gul Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems, </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: From this perspective, the behavior equations define the operations offered by an agent as well as a replacement behavior. The notion of replacement behavior is a fundamental aspect of the Actor model <ref> [Agha 86] </ref>. Hence, it seems appropriate to use behavior equations as a formal means for specifying and reasoning about the behavior of individual objects with actor semantics.
Reference: [America 87] <author> Pierre America. </author> <title> Inheritance and subtyping in a parallel object-oriented language, </title> <booktitle> ECOOP87 Conference Proceedings, </booktitle> <pages> pp. 234-242, </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Recent work on the problem has demonstrated that the anomaly occurs across a spectrum of concurrent object-oriented languages, regardless of the type of mechanism employed for specifying synchronization constraints <ref> [America 87, Briot 90, Kafura 89, Nierstrasz 87] </ref>. A deeper issue is that the concurrent object-oriented research community does not yet have a good semantic model that relates the type features and the concurrency features of concurrent object-oriented languages.
Reference: [Briot 90] <author> Jean-Pierre Briot and Akinori Yonezawa. </author> <title> Inheritance and synchronization in object-oriented concurrent programming, in ABCL: An Object-Oriented Concurrent System, </title> <editor> (ed. A. Yon-ezawa), </editor> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Recent work on the problem has demonstrated that the anomaly occurs across a spectrum of concurrent object-oriented languages, regardless of the type of mechanism employed for specifying synchronization constraints <ref> [America 87, Briot 90, Kafura 89, Nierstrasz 87] </ref>. A deeper issue is that the concurrent object-oriented research community does not yet have a good semantic model that relates the type features and the concurrency features of concurrent object-oriented languages.
Reference: [Ellis 90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Fine-grained intra-object concurrency is not a feature of objects in the systems under consideration here. We are specifically interested in expressing and inheriting concurrent object behavior in ACT++ [Kafura 90, Lee 90], a prototype object-oriented language based on the Actor model and C++ <ref> [Ellis 90] </ref>. ACT++ is a collection of classes that implement the abstractions of the Actor model and integrates these abstractions with the encapsulation, inheritance, and strong-typing features of C++. The language falls in the non-uniform category of concurrent object-oriented languages [Papatho-mas 89] since there are both active and passive objects.
Reference: [Kafura 89] <author> Dennis G. Kafura and Keung Hae Lee. </author> <title> Inheritance in actor based concurrent object-oriented languages, </title> <booktitle> ECOOP89 Conference Proceedings, </booktitle> <pages> pp. 131-145, </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: Recent work on the problem has demonstrated that the anomaly occurs across a spectrum of concurrent object-oriented languages, regardless of the type of mechanism employed for specifying synchronization constraints <ref> [America 87, Briot 90, Kafura 89, Nierstrasz 87] </ref>. A deeper issue is that the concurrent object-oriented research community does not yet have a good semantic model that relates the type features and the concurrency features of concurrent object-oriented languages. <p> Any instance of a class not derived from the Actor class is a passive object. Concurrency is achieved using the become operation that is implemented in the Actor class. The notion of behavior abstraction was originially proposed in ACT++ as a mechanism for capturing the behavior of an object <ref> [Kafura 89] </ref>. Upon initial examination, behavior abstraction seems powerful since synchronization can be achieved naturally by dynamically modifying the visibility of the object interface using the become operation.
Reference: [Kafura 90] <author> Dennis Kafura and Keung Hae Lee. </author> <title> ACT++: building a concurrent C++ with actors, </title> <journal> Journal of Object-Oriented Programing, </journal> <volume> Vol. 3, No. 1, </volume> <pages> pp. 25-37, </pages> <month> May/June </month> <year> 1990. </year>
Reference-contexts: The become operation results in a replacement behavior with its own thread of control. Fine-grained intra-object concurrency is not a feature of objects in the systems under consideration here. We are specifically interested in expressing and inheriting concurrent object behavior in ACT++ <ref> [Kafura 90, Lee 90] </ref>, a prototype object-oriented language based on the Actor model and C++ [Ellis 90]. ACT++ is a collection of classes that implement the abstractions of the Actor model and integrates these abstractions with the encapsulation, inheritance, and strong-typing features of C++.
Reference: [Kafura 93] <author> Dennis Kafura and Manibrata Mukherji and Greg Lavender. </author> <title> ACT++ 2.0: A Class Library for Concurrent Programming in C++ using Actors, </title> <journal> Journal of Object-Oriented Programing, </journal> <note> to appear 1993. 13 </note>
Reference: [Lee 90] <author> Keung Hae Lee. </author> <title> Designing a Statically Typed Actor-Based Concurrent Object-Oriented Programming Language, </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, Virginia Tech, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: The become operation results in a replacement behavior with its own thread of control. Fine-grained intra-object concurrency is not a feature of objects in the systems under consideration here. We are specifically interested in expressing and inheriting concurrent object behavior in ACT++ <ref> [Kafura 90, Lee 90] </ref>, a prototype object-oriented language based on the Actor model and C++ [Ellis 90]. ACT++ is a collection of classes that implement the abstractions of the Actor model and integrates these abstractions with the encapsulation, inheritance, and strong-typing features of C++.
Reference: [Matsuoka 90] <author> Satoshi Matsuoka, Ken Wakita, and Akinori Yonezawa. </author> <title> Analysis of inheritance anomaly in concurrent object-oriented languages, </title> <booktitle> extended abstract presented at the ECOOP/ OOPSLA90 Workshop on Object-based Concurrency, </booktitle> <month> October </month> <year> 1990. </year>
Reference-contexts: The efficacy of this mechanism and its degree of interaction with the C++ inheritance mechanism has been examined by others and has been found to have serious limitations <ref> [Papathomas 89, Matsuoka 90] </ref>. The most serious limitation occurs because a behavior abstraction is not a first-class entity in the language and is thus subject to the effects of the inheritance anomaly.
Reference: [Milner 89] <author> Robin Milner. </author> <title> Communication and Concurrency, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: In this paper, the notion of concurrent object behavior is formalized using the equational notation of the Calculus of Communicating Systems (CCS) <ref> [Milner 89] </ref>. <p> From this perspective, the behavior of an object is its observable behavior since all that is relevant is how the object appears to those clients that communicate with the object. This notion of observable behavior is motivated by a similar notion described in <ref> [Milner 89] </ref>; however, in this paper the machinery of CCS is used in characterizing and reasoning about the observable behavior of individual objects, not systems of objects. <p> The observable behavior of an object representing a bounded linear order is completely described by the following equations:: This set of behavior equations is similar to an example in <ref> [Milner 89] </ref>. The equations capture precisely the states that an object representing a bounded linear order may occupy during its lifetime. In the equations, only the prefix (.) and summation (+) combinators of CCS are required.
Reference: [Nierstrasz 87] <author> Oscar Nierstrasz. </author> <title> Active objects in hybrid, </title> <booktitle> OOPSLA87 Proceedings, </booktitle> <pages> pp. 243-253, </pages> <year> 1987. </year>
Reference-contexts: Recent work on the problem has demonstrated that the anomaly occurs across a spectrum of concurrent object-oriented languages, regardless of the type of mechanism employed for specifying synchronization constraints <ref> [America 87, Briot 90, Kafura 89, Nierstrasz 87] </ref>. A deeper issue is that the concurrent object-oriented research community does not yet have a good semantic model that relates the type features and the concurrency features of concurrent object-oriented languages.
Reference: [Nierstrasz 90] <author> Oscar Nierstrasz and Michael Papathomas. </author> <title> Towards a type theory for active objects, </title> <booktitle> in Object Management, </booktitle> <pages> pp. 295-304, </pages> <editor> (ed. D. Tsichritzis), </editor> <publisher> Centre Universitaire DInforma-tique, </publisher> <address> Universite De Geneva, </address> <year> 1990. </year>
Reference-contexts: Hybrid Linear Order Class Definition. 12 tured by the behavior function. Interesting work in this area is <ref> [Nierstrasz 90] </ref>, which also uses CCS as a starting point. We have not discussed the details of the run-time enforcement of behavior sets. ACT++ and behavior sets have been implemented on the Sequent Symmetry, a shared memory multiprocessor Kafura 93].
Reference: [Papathomas 89] <author> M. Papathomas. </author> <booktitle> Concurrency issues in object-oriented languages, in Object Oriented Development, </booktitle> <pages> pp. 207-245, </pages> <editor> (ed. D. Tsichritzis), </editor> <publisher> Centre Universitaire DInformatique, </publisher> <address> Uni-versite De Geneva, </address> <year> 1989. </year>
Reference-contexts: The efficacy of this mechanism and its degree of interaction with the C++ inheritance mechanism has been examined by others and has been found to have serious limitations <ref> [Papathomas 89, Matsuoka 90] </ref>. The most serious limitation occurs because a behavior abstraction is not a first-class entity in the language and is thus subject to the effects of the inheritance anomaly.
Reference: [Tomlinson 89] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with enabled-sets, </title> <booktitle> OOPSLA89 Conference Proceedings, </booktitle> <pages> pp. 103-112, </pages> <year> 1989. </year>
Reference-contexts: A construct called an enabled set improves on the notion of behavior abstraction by promoting the control of the visibility of an objects interface to a dynamic mechanism that can be manipulated within the language. Enabled sets were implemented in Rosette, an interpreted actor language with dynamic typing <ref> [Tomlinson 89] </ref>. The exibility offered by enabled sets is difficult to achieve in a statically typed language like ACT++. Behavior sets represent a compromise between the enabled sets and behavior abstraction.
References-found: 14

