URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/sensitivity-planar.ps.Z
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/westbrook/
Root-URL: http://www.cs.yale.edu
Title: A Linear Algorithm for Analysis of Minimum Spanning and Shortest Path Trees of Planar Graphs
Author: Heather Booth Jeffery Westbrook 
Address: Princeton, NJ 08544.  New Haven, CT  Stan-ford, CA 94305.  
Affiliation: Department of Computer Science, University of Tennessee, Knoxville, TN  Department of Computer Science, Princeton University,  Department of Computer Science, Yale University,  Department of Computer Science, Stanford University,  
Note: Finding the  Research partially supported by Office of Naval Research Grant N00014-87-K-0467 and National Science Foundation Grant CCR-8610181.  37996. This research was done while the author was at the  06520-2158. This research was done while the author was at the  
Date: January 13, 1992  
Abstract: We give a linear time and space algorithm for analyzing trees in planar graphs. The algorithm can be used to analyze the sensitivity of a minimum spanning tree to changes in edge costs, to find its replacement edges, and to verify its minimality. It can also be used to analyze the sensitivity of a single-source shortest path tree to changes in edge costs, and to analyze the sensitivity of a minimum cost network flow. The algorithm is simple and practical. It uses the properties of a planar embedding, combined with a heap-ordered queue data structure. Let G = (V; E) be a planar graph, either directed or undirected, with n vertices and m = O(n) edges. Each edge e 2 E has a real-valued cost cost(e). A minimum spanning tree of a connected, undirected planar graph G is a spanning tree of minimum total edge cost. If G is directed and r is a vertex from which all other vertices are reachable, then a shortest path tree from r is a spanning tree that contains a minimum-cost path from r to every other vertex. We consider the following problems: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Booth and G. Lueker. </author> <title> Testing for the consecutive ones property, interval graphs, and graph planarity using PQ-tree algorithms. </title> <journal> J. Comput. System Sci., </journal> <volume> 13 </volume> <pages> 335-379, </pages> <year> 1976. </year>
Reference-contexts: Such an embedding always exists (see [12], p. 105) and can be generated in O (n) time using the algorithms of Hopcroft and Tarjan [13] or Booth and Leuker <ref> [1] </ref> (see Chiba et al. [3]). The embedding of G specifies the order in which edges incident to v 2 V are encountered as we walk around v in the counterclockwise direction (this ordering defines the embedding).
Reference: [2] <author> D. Cheriton and R. E. Tarjan. </author> <title> Finding minimum spanning trees. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 724-742, </pages> <year> 1976. </year>
Reference-contexts: This gives an algorithm for verification of a minimum spanning tree in a planar graph. An alternative method is to run the O (n)-time algorithm for computing minimum spanning trees of Cheriton and Tarjan <ref> [2] </ref>. To analyze the sensitivity of a minimum spanning tree T we determine for each edge e how much its cost can be perturbed before T is no longer minimal. We compute lower and upper bounds [a; b] such that T remains minimal as long as a cost (e) b.
Reference: [3] <author> N. Chiba, T. Nishizeki, S. Abe, and T. Ozawa. </author> <title> A linear algorithm for embedding planar graphs using PQ-trees. </title> <journal> J. Comput. System Sci., </journal> <volume> 30 </volume> <pages> 54-76, </pages> <year> 1985. </year>
Reference-contexts: Such an embedding always exists (see [12], p. 105) and can be generated in O (n) time using the algorithms of Hopcroft and Tarjan [13] or Booth and Leuker [1] (see Chiba et al. <ref> [3] </ref>). The embedding of G specifies the order in which edges incident to v 2 V are encountered as we walk around v in the counterclockwise direction (this ordering defines the embedding).
Reference: [4] <author> B. Dixon, M. Rauch, and R. E. Tarjan. </author> <title> Verification and sensitivity analysis of minimum spanning trees in linear time. </title> <type> Technical Report TR-289-90, </type> <institution> Department of Computer Science, Princeton University, </institution> <year> 1990. </year>
Reference-contexts: It is natural to ask whether linear time algorithms exist for general graphs. Dixon, Rauch, and Tarjan <ref> [4] </ref> have recently addressed this problem. They have found a linear-time algorithm for verification of a minimum spanning tree in a general graph and a randomized linear-time algorithm for finding its replacement edges.
Reference: [5] <author> D. Eppstein. </author> <title> Finding the k smallest spanning trees. </title> <type> Manuscript, </type> <year> 1989. </year> <month> 13 </month>
Reference: [6] <author> D. Eppstein, G. F. Italiano, R. Tamassia, R. E. Tarjan, J. Westbrook, and M. Yung. </author> <title> Maintenance of a minimum spanning forest in a dynamic planar graph. </title> <booktitle> In Proceedings of the 1st ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 1-11, </pages> <year> 1990. </year>
Reference-contexts: The set T fl is a spanning tree for G fl . Corollary 1 <ref> [6, 9] </ref> T is a minimum spanning tree for G if and only if T fl is a maximum spanning tree for G fl .
Reference: [7] <author> G. N. Frederickson. </author> <title> Data structures for on-line updating of minimum spanning trees, with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 14 </volume> <pages> 781-798, </pages> <year> 1985. </year>
Reference-contexts: The following lemma will be useful. Lemma 3 <ref> [7, 18] </ref> Tree T is a minimum spanning tree if and only if for each non-tree edge f = fu; vg, the cost of f is greater than or equal to the cost of each edge on the path from u to v.
Reference: [8] <author> H. N. Gabow. </author> <title> Data structures for weighted matching and nearest common ancestors with linking. </title> <booktitle> In Proc. 1st ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 434-443, </pages> <year> 1990. </year>
Reference: [9] <author> H. N. Gabow and M. Stallmann. </author> <title> Efficient algorithms for graphic matroid intersection and parity (extended abstract). </title> <booktitle> In Automata, Languages, and Programming, 12 th Colloquium, Lecture Notes in Computer Science, </booktitle> <volume> vol. 194, </volume> <pages> pages 210-220. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: The set T fl is a spanning tree for G fl . Corollary 1 <ref> [6, 9] </ref> T is a minimum spanning tree for G if and only if T fl is a maximum spanning tree for G fl .
Reference: [10] <author> H. Gajewska and R. E. Tarjan. </author> <title> Deques with heap order. </title> <journal> Inf. Process. Lett., </journal> <volume> 22 </volume> <pages> 197-200, </pages> <year> 1986. </year>
Reference-contexts: If each queue operation takes O (1) amortized time, then the total running time of the algorithm is O (n). We now describe the heap-ordered concatenable queue data structure. The data structure we present is a simple extension of ideas presented by Gajewska and Tar-jan <ref> [10] </ref>. Instead of concatenation, Gajewska and Tarjan considered the operation inject in which one element is added to the back of the queue. Both operations can be implemented in the same way.
Reference: [11] <author> D. Gusfield. </author> <title> A note on arc tolerances in sparse shortest path and network flow problems. </title> <journal> Networks, </journal> <volume> 13 </volume> <pages> 191-196, </pages> <year> 1983. </year>
Reference-contexts: does not particularly depend upon the planarity of G; this algorithm solves the critical edge problem in any general graph, and can be implemented in O (m log m) time, where m is the number of edges, using a mergeable heap data structure to store the edges at each vertex <ref> [11] </ref>. To improve the running time of the algorithm to O (n) in the planar case, we take advantage of the properties discussed in Section 1.
Reference: [12] <author> F. Harary. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA., </address> <year> 1972. </year>
Reference-contexts: 1 Preliminaries We assume we are given an embedding of G = (V; E) in the plane in which r, the root of T , is on the outer face. Such an embedding always exists (see <ref> [12] </ref>, p. 105) and can be generated in O (n) time using the algorithms of Hopcroft and Tarjan [13] or Booth and Leuker [1] (see Chiba et al. [3]). <p> We set cost (e fl ) = cost (e). Some representations of planar graphs simultaneously maintain both primal and dual graphs; in any case, given the embedding of G the dual can easily be computed in O (n) time. Further discussion of dual graphs can be found in Harary <ref> [12] </ref>. An example is given in Figure 2. 9 mal and dual spanning trees for the graph of (a). 10 Lemma 4 [20, pp. 289] Given a spanning tree T in G, let T fl be the set of dual edges fe fl je is not in T g.
Reference: [13] <author> J. Hopcroft and R. E. Tarjan. </author> <title> Efficient planarity testing. </title> <journal> J. ACM, </journal> <volume> 21 </volume> <pages> 549-568, </pages> <year> 1974. </year>
Reference-contexts: Such an embedding always exists (see [12], p. 105) and can be generated in O (n) time using the algorithms of Hopcroft and Tarjan <ref> [13] </ref> or Booth and Leuker [1] (see Chiba et al. [3]). The embedding of G specifies the order in which edges incident to v 2 V are encountered as we walk around v in the counterclockwise direction (this ordering defines the embedding).
Reference: [14] <author> R. J. Lipton and R. E. Tarjan. </author> <title> A separator theorem for planar graphs. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 36 </volume> <pages> 177-189, </pages> <year> 1979. </year>
Reference-contexts: The new edge list of v is constructed by removing e from the lists of u and v and inserting the edge list of u into the edge list of v at the position formerly occupied by e. Edge contraction preserves planarity <ref> [14, Lemma 1] </ref> and the edge list produced by the contraction specifies a valid embedding. Contraction may, however, produce new loop and multiple edges. 2 The Critical Edge Algorithm The algorithm is based on the approach of Shier and Witzgall [15].
Reference: [15] <author> D. R. Shier and G. Witzall. </author> <title> Arc tolerances in shortest path and network flow problems. </title> <journal> Networks, </journal> <volume> 10 </volume> <pages> 277-291, </pages> <year> 1980. </year>
Reference-contexts: Edge contraction preserves planarity [14, Lemma 1] and the edge list produced by the contraction specifies a valid embedding. Contraction may, however, produce new loop and multiple edges. 2 The Critical Edge Algorithm The algorithm is based on the approach of Shier and Witzgall <ref> [15] </ref>. If v 2 T is a leaf, its critical edge is simply the minimum-cost edge in its edge list, excluding the tree edge from v to its parent, which we will ignore from now on. <p> This produces graph G i and tree T i in which v is a leaf. 3. Set critical (v) to be the minimum weight non-tree edge incident to v in G i . The correctness of the algorithm is proved in <ref> [15] </ref> and is easily seen. For a vertex v 2 G, let the relevant edges, denoted rel (v), be the set of non-tree edges with exactly one endpoint in the subtree of T rooted at v. By definition, critical (v) is the minimum weight edge in rel (v). <p> The flow is optimal if and only if for all non-tree edges f , cost 0 (f ) 0 if x (e) = l (e) and cost 0 (f ) 0 if x (e) = u (e) <ref> [15] </ref>. If we root T at some vertex r, we can regard T as a shortest path tree from r, with (v) the distance from r in the tree, by replacing any edge e pointing up the 12 tree by a reversed edge e 0 with cost cost (e). <p> Then the sensitivity of the flow can be found by computing the sensitivity of the shortest path tree, reversing upper and lower bounds for reversed edges. Further details can be found in <ref> [15] </ref>. Theorem 3 Sensitivity analysis of a basic minimum-cost network flow in a planar network can be performed in O (n) time and space. 6 Conclusion We have shown linear time and space algorithms for planar graphs. It is natural to ask whether linear time algorithms exist for general graphs.
Reference: [16] <author> R. E. Tarjan. </author> <title> Depth first search and linear graph algorithms. </title> <journal> SIAM J. Comput., </journal> <volume> 1 </volume> <pages> 146-160, </pages> <year> 1972. </year>
Reference-contexts: The children of a vertex are ordered according to their order of appearance in its edge list. Preorder and postorder numbers are assigned to the vertices based on this ordering. One may think of performing this numbering by a depth-first search <ref> [16] </ref> of T in which the children of a vertex are visited in counter-clockwise order around the vertex, i.e., in the order of appearance in the edge list. We call this embedding-dependent depth-first search topological.
Reference: [17] <author> R. E. Tarjan. </author> <title> Finding dominators in directed graphs. </title> <journal> SIAM J. Comput., </journal> <volume> 3, </volume> <year> 1974. </year>
Reference-contexts: We call this embedding-dependent depth-first search topological. Figure 1 gives an example of an embedded planar graph and spanning tree with preorder and postorder numbering. We denote the preorder and postorder numbers of v by pre (v) and post (v), respectively. It is well-known (see e.g. <ref> [17] </ref>) that for any pair u and v of vertices, v is an ancestor of u if and only if pre (v) pre (u) and post (u) post (v). Let f be a non-tree edge fu; vg.
Reference: [18] <author> R. E. Tarjan. </author> <title> Applications of path compression on balanced trees. </title> <journal> J. ACM, </journal> <volume> 26 </volume> <pages> 690-715, </pages> <year> 1979. </year>
Reference-contexts: The following lemma will be useful. Lemma 3 <ref> [7, 18] </ref> Tree T is a minimum spanning tree if and only if for each non-tree edge f = fu; vg, the cost of f is greater than or equal to the cost of each edge on the path from u to v.
Reference: [19] <author> R. E. Tarjan. </author> <title> Sensitivity analysis of minimum spanning trees and shortest path trees. </title> <journal> Inf. Process. Lett., </journal> <volume> 14 </volume> <pages> 30-33, </pages> <year> 1982. </year>
Reference-contexts: Let d (v) denote the distance from s to v, which is the sum of the costs of the edges on the path from s to v in T . Lemma 6 <ref> [19] </ref> A spanning tree T in G is a shortest path tree if and only if for all non-tree edges e = (u; v), d (u) + cost (e) d (v). 11 Let e = (u; v) be a non-tree edge.
Reference: [20] <author> W. T. Tutte. </author> <title> Graph Theory. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, CA., </address> <year> 1984. </year> <month> 14 </month>
Reference-contexts: Further discussion of dual graphs can be found in Harary [12]. An example is given in Figure 2. 9 mal and dual spanning trees for the graph of (a). 10 Lemma 4 <ref> [20, pp. 289] </ref> Given a spanning tree T in G, let T fl be the set of dual edges fe fl je is not in T g. The set T fl is a spanning tree for G fl .
References-found: 20

