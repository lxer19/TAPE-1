URL: http://www-graphics.stanford.edu/papers/splat/splat.ps.Z
Refering-URL: http://www-graphics.stanford.edu/papers/splat/
Root-URL: http://www.cs.stanford.edu
Author: David Laur and Pat Hanrahan 
Keyword: CR Categories and Subject Descriptors: I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism. Key Words: volume rendering, coherence, progressive refinement, interactive techniques.  
Address: Princeton, NJ 08544, USA  
Affiliation: Princeton University  
Abstract: This paper presents a progressive refinement algorithm for volume rendering which uses a pyramidal volume representation. Besides storing average values, the pyramid stores estimated error, so an oct-tree can be fit to the pyramid given a user-supplied precision. This oct-tree is then drawn using a set of splats, or footprints, each scaled to match the size of the projection of a cell. The splats themselves are approximated with RGBA Gouraud-shaded polygons, so that they can be drawn efficiently on modern graphics workstations. The result is a real-time rendering algorithm suitable for interactive applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Larry Bergman, Henry Fuchs, Eric Grant, and Su-san Spach. </author> <title> Image rendering by adaptive refinement. </title> <booktitle> Computer Graphics (SIGGRAPH '86 Proceedings), </booktitle> <volume> 20(4) </volume> <pages> 29-38, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Progressive refinement involves simplifying either the model or the rendering algorithm, or both, until pictures can be produced at interactive rates, and then computing successively better images when free time is available, for example, when the user pauses to examine an interesting image <ref> [1] </ref>. This paper proposes a splatting algorithm [3; 10] that works on a pyramidal representation of the volume. Splat-ting works by first sorting cells from back to front and then compositing the projection of each cell, called its footprint, into an accumulating projection image.
Reference: [2] <author> Jules Bloomenthal. </author> <title> Polygonization of implicit surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5(4) </volume> <pages> 341-355, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Levoy [4] used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy [5] also used a pyramid of averaged values, commonly called a mip-map [13]. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction <ref> [14; 2; 12] </ref>. The regular structure of pyramids and oct-trees allows them to be traversed in front-to-back or back-to-front order just as easily as uniformly sampled voxel arrays.
Reference: [3] <author> Harvey E. Cline, William E. Lorensen, Sigwalt Ludke, Carl R. Crawford, and Bruce C. Teeter. </author> <title> Two algorithms for the reconstruction of surfaces from tomo-grams. </title> <journal> Medical Physics, </journal> <volume> 15(3) </volume> <pages> 320-327, </pages> <month> June, </month> <year> 1988. </year>
Reference-contexts: This paper proposes a splatting algorithm <ref> [3; 10] </ref> that works on a pyramidal representation of the volume. Splat-ting works by first sorting cells from back to front and then compositing the projection of each cell, called its footprint, into an accumulating projection image.
Reference: [4] <author> Marc Levoy. </author> <title> Efficient ray tracing of volume data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Pyramids and oct-trees have been used more transparent. The lower row shows the corrected opacity projection. previously for volume rendering. Levoy <ref> [4] </ref> used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy [5] also used a pyramid of averaged values, commonly called a mip-map [13]. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction [14; 2; 12].
Reference: [5] <author> Marc Levoy and Ross Whitaker. </author> <booktitle> Gaze-directed volume rendering. Computer Graphics (Symposium on Interactive 3D Graphics), </booktitle> <volume> 24(2) </volume> <pages> 217-223, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Pyramids and oct-trees have been used more transparent. The lower row shows the corrected opacity projection. previously for volume rendering. Levoy [4] used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy <ref> [5] </ref> also used a pyramid of averaged values, commonly called a mip-map [13]. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction [14; 2; 12].
Reference: [6] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualizaton), </booktitle> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Our algorithm is based on two key ideas: coherence and progressive refinement. Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material <ref> [9; 8; 6; 11] </ref>. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons [8; 11].
Reference: [7] <author> Thomas Porter and Tom Duff. </author> <title> Compositing digital images. </title> <booktitle> Computer Graphics (SIGGRAPH '84 Proceedings), </booktitle> <volume> 18(3) </volume> <pages> 253-260, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Some typical splats are shown in Figure 1. The advantage of outputting Gouraud-shaded polygons is that workstations have been optimized to draw them for surface rendering applications. Recent workstations have added the ability to interpolate opacity along with color, and to provide hardware assist for compositing <ref> [7] </ref>. Also, since the graphics hardware is handling the transformation and scan conversion, both orthographic and perspective projections are possible. Furthermore, if the polygon is point sampled correctly and if the vertices have subpixel position, then the center of the splat can also be positioned accurately.
Reference: [8] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualiza-ton), </booktitle> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Our algorithm is based on two key ideas: coherence and progressive refinement. Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material <ref> [9; 8; 6; 11] </ref>. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons [8; 11]. <p> Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material [9; 8; 6; 11]. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons <ref> [8; 11] </ref>. Progressive refinement involves simplifying either the model or the rendering algorithm, or both, until pictures can be produced at interactive rates, and then computing successively better images when free time is available, for example, when the user pauses to examine an interesting image [1]. <p> Wilhelms breaks the projection of a cubical cell into topologically uniform regions, and then computes the opacity at the vertices according to various projection formula [11]. A similar approach can be applied to tetrahedra, which have the advantage that there are only two topologically distinct cases to consider <ref> [8] </ref>. We have built a flexible system based on approximating footprints with a collection of Gouraud-shaded polygons. These polygons can be used to build a piecewise linear approximation to any footprint function.
Reference: [9] <author> Craig Upson and Michael Keeler. V-buffer: </author> <title> Visible volume rendering. </title> <booktitle> Computer Graphics (Proceedings of SIGGRAPH '88), </booktitle> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Our algorithm is based on two key ideas: coherence and progressive refinement. Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material <ref> [9; 8; 6; 11] </ref>. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons [8; 11].
Reference: [10] <author> Lee Westover. </author> <title> Footprint evaluation for volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This paper proposes a splatting algorithm <ref> [3; 10] </ref> that works on a pyramidal representation of the volume. Splat-ting works by first sorting cells from back to front and then compositing the projection of each cell, called its footprint, into an accumulating projection image. <p> Current splatting algorithms simplify this procedure even further. Westover approximates the footprint with a 2D elliptical Gaussian <ref> [10] </ref>. This is an approximation because the reconstruction function and scattering model are never specified. More recently, methods have been developed for rendering the opacity projections of polyhedral cells using RGBA polygons.
Reference: [11] <author> Jane Wilhelms. </author> <title> A coherent projection approach to direct volume rendering. </title> <booktitle> Computer Graphics (SIG-GRAPH '91 Proceedings), </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Our algorithm is based on two key ideas: coherence and progressive refinement. Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material <ref> [9; 8; 6; 11] </ref>. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons [8; 11]. <p> Recent research has shown how to take advantage of coherence when performing opacity projections of large cells filled with cloudy material [9; 8; 6; 11]. The most relevant to the work reported here are those methods that approximate the projection with a collection of Gouraud-shaded RGBA polygons <ref> [8; 11] </ref>. Progressive refinement involves simplifying either the model or the rendering algorithm, or both, until pictures can be produced at interactive rates, and then computing successively better images when free time is available, for example, when the user pauses to examine an interesting image [1]. <p> More recently, methods have been developed for rendering the opacity projections of polyhedral cells using RGBA polygons. Wilhelms breaks the projection of a cubical cell into topologically uniform regions, and then computes the opacity at the vertices according to various projection formula <ref> [11] </ref>. A similar approach can be applied to tetrahedra, which have the advantage that there are only two topologically distinct cases to consider [8]. We have built a flexible system based on approximating footprints with a collection of Gouraud-shaded polygons.
Reference: [12] <author> Jane Wilhelms and Allan Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <booktitle> Computer Graphics (San Diego Workshop on Volume Visualizaton), </booktitle> <volume> 24(5) </volume> <pages> 57-62, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Levoy [4] used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy [5] also used a pyramid of averaged values, commonly called a mip-map [13]. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction <ref> [14; 2; 12] </ref>. The regular structure of pyramids and oct-trees allows them to be traversed in front-to-back or back-to-front order just as easily as uniformly sampled voxel arrays.
Reference: [13] <author> Lance Williams. Pyramidal parametrics. </author> <booktitle> Computer Graphics (SIGGRAPH '83 Proceedings), </booktitle> <volume> 17(3) </volume> <pages> 1-11, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: The lower row shows the corrected opacity projection. previously for volume rendering. Levoy [4] used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy [5] also used a pyramid of averaged values, commonly called a mip-map <ref> [13] </ref>. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction [14; 2; 12]. The regular structure of pyramids and oct-trees allows them to be traversed in front-to-back or back-to-front order just as easily as uniformly sampled voxel arrays.
Reference: [14] <author> Brian Wyvill, Craig McPheeters, and Geoff Wyvill. </author> <title> Data structure for soft objects. </title> <journal> The Visual Computer, </journal> <volume> 2(4) </volume> <pages> 227-234, </pages> <year> 1986. </year>
Reference-contexts: Levoy [4] used a binary pyramid to indicate the presence of non-transparent material to accelerate ray tracing. Levoy [5] also used a pyramid of averaged values, commonly called a mip-map [13]. for gaze-directed rendering. Others have used min-max or range pyramids to allow efficient iso-surface extraction <ref> [14; 2; 12] </ref>. The regular structure of pyramids and oct-trees allows them to be traversed in front-to-back or back-to-front order just as easily as uniformly sampled voxel arrays.
References-found: 14

