URL: ftp://ftp.dcs.ex.ac.uk/pub/connect/nonprog.ps.gz
Refering-URL: http://www.dcs.ex.ac.uk/reports/reports.html
Root-URL: http://www.dcs.ex.ac.uk
Email: derek@dcs.exeter.ac.uk  
Title: Non-Programmed Computation ROUGH DRAFT TWO comments and scribbles still welcome  
Author: Derek Partridge 
Date: October 19, 1995  
Abstract: A modern computer can calculate many orders of magnitude faster and more accurately than humans. Not only do they reproduce with advantage human computational ability, they compute in the same way as we do | i.e. a computation is typically viewed as an automatic manipulation of symbol structures, the same symbol structures that we would use, and manipulated in the same ways at the conceptual level. Non-programmed computation (NPC), or non-algorithmic computation, represents a radical departure from this otherwise universal of automatic computation. This paper introduces this computational alternative, gives examples of its use, and outlines an area of significant practical applicability | the domain of `data-defined' problems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Russell, </author> <year> 1961, </year> <title> History of Western Philosophy, </title> <publisher> Allen & Unwin: </publisher> <address> London, p. </address> <month> 572. </month>
Reference: 2. <author> S. Korner, </author> <year> 1960, </year> <title> The Philosophy of Mathematics, </title> <publisher> Hutchinson: London. </publisher>
Reference: 3. <author> D. Partridge, </author> <title> in press, `On the difficulty of really considering a radical novelty', Minds and Machines </title>
Reference: 4. <author> A. Newell and H. A. Simon, </author> <year> 1975, </year> <title> `Computer science as empirical enquiry: symbols and search', </title> <booktitle> ACM Turing Award Lecture 1975, in [5] pp. </booktitle> <pages> 287-317 </pages>
Reference: 5. <author> R. L. Ashenhurst (Ed.), </author> <year> 1987, </year> <title> ACM Turing Award Lectures: the first twenty years, </title> <address> Addison-Wesley:Reading MA </address>
Reference: 6. <author> J. R. Quinlan, </author> <year> 1991, </year> <title> `Induction, Knowledge, </title> <booktitle> and Expert Systems,' in Artificial Intelligence and Software Engineering, </booktitle> <editor> D. Partridge (Ed.), </editor> <publisher> Ablex: </publisher> <address> NJ, </address> <pages> pp, 473-489. </pages>
Reference: 7. <author> D. Michie, </author> <year> 1991, </year> <title> `Methodologies from machine learning in data analysis and software', </title> <journal> The Computing Journal, </journal> <volume> vol. 34, no. 6, </volume> <pages> pp. 559-565. </pages>
Reference: 8. <author> D. A. Turner, </author> <year> 1982, </year> <title> `Recursion equations as a programming language', in Functional Programming and its Applications, </title> <editor> J. Darlington, P. Henderson and D. A. Turner (Eds.), </editor> <publisher> Cambridge University Press, </publisher> <pages> pp. 1-28. </pages>
Reference-contexts: In the early '60s the nature of programming was fixed, and, importantly, fixed with crucial differences from mathematical notation | e.g. assignment statements and consequent referential opacity <ref> (Turner, 1982) </ref>. The crisis of program correctness gave impetus to the idea that the undoubted complexity of the programming task could be reduced by instituting an important separation of concerns, and by more systematic (if not wholly formal) approaches to program development. <p> Hence the wealth of research on ways to make the computer exploit the parallel promise automatically. It's almost the only sensible way forward given the conventional approach to computation. Turner <ref> (1982) </ref> has argued cogently for the fundamental errors in the conventional serial approach to programming | primarily, the architectural constraint known as the "von Neuman bottleneck" (coined by Backus, 1977, when first advancing this line of argument) and the consequent pressure to design programming languages as state transformation processes which results
Reference: 9. <author> J. Backus, </author> <year> 1977, </year> <title> `Can programming be liberated from the von Neumann style?', </title> <booktitle> ACM Turing Award Lecture 1977, in [5] pp. </booktitle> <pages> 63-130. </pages>
Reference-contexts: It's almost the only sensible way forward given the conventional approach to computation. Turner (1982) has argued cogently for the fundamental errors in the conventional serial approach to programming | primarily, the architectural constraint known as the "von Neuman bottleneck" <ref> (coined by Backus, 1977, when first advancing this line of argument) </ref> and the consequent pressure to design programming languages as state transformation processes which results in "referentially opaque" notations.
Reference: 10. <author> D. Partridge and W. B. Yates, </author> <year> 1995a, </year> <institution> `Engineering multiversion neural-net systems', Res. </institution> <type> Rep. 320, </type> <institution> Dept. Computer Science, University of Exeter. </institution>
Reference: 11. <author> D. Partridge and W. B. Yates, </author> <year> 1995b, </year> <title> `Letter recognition using neural networks: a comparative study', Res. </title> <type> Rep. 334, </type> <institution> Dept. Computer Science, University of Exeter. </institution>
Reference: 12. <author> P. W. Frey and D. J. Slate, </author> <year> 1991, </year> <title> `Letter recognition using Holland-style adaptive classifiers', </title> <journal> Machine Learning, </journal> <volume> 6, </volume> <pages> pp. 161-182 </pages>
Reference: 13. <author> E. W. Dijkstra, </author> <year> 1989, </year> <title> `On the cruelty of really teaching computing science,' </title> <journal> Comm. ACM 32(12) pp. </journal> <pages> 1398-1414 </pages>
Reference: 14. <author> D. Partridge and A. Galton, </author> <year> 1995, </year> <booktitle> `The specification of `specification' ,' Minds and Machines 5, </booktitle> <pages> pp. 243-255 15 </pages>
Reference: 15. <author> D. A. Nelson, </author> <year> 1992, </year> <title> `Deductive program verification (a practitioner's commentary)', </title> <booktitle> Minds and Machines 2, </booktitle> <pages> pp. 283-307 </pages>
Reference: 16. <author> J. C. Knight and N. G. Leveson, </author> <year> 1986, </year> <title> `An experimental evaluation of independence in multiversion programming', </title> <journal> IEEE Trans. on Software Engineering SE-12, </journal> <volume> 1, </volume> <pages> pp. 96-109 </pages>
Reference: 17. <author> G. Dahll, M. Barnes and P. Bishop, </author> <year> 1990, </year> <title> `Software diversity: way to enhance safety?', </title> <journal> Information and Software Technology 32, </journal> <volume> 10, </volume> <pages> pp. 677-685 16 </pages>
References-found: 17

