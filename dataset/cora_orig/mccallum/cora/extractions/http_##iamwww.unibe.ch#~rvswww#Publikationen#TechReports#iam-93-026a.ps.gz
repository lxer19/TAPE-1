URL: http://iamwww.unibe.ch/~rvswww/Publikationen/TechReports/iam-93-026a.ps.gz
Refering-URL: http://iamwww.unibe.ch/~rvswww/Publikationen/index.html
Root-URL: 
Email: toggweil@iam.unibe.ch nahm@iam.unibe.ch  
Title: Automatic Test Case Generation with SaMsTaG A Test Suite for the Initiator Process of the
Author: Daniel Toggweiler Robert Nahm 
Date: December 1993  
Address: Langgassstr. 51 CH-3012 Bern  
Affiliation: Institut fur Informatik Universitat Bern  
Pubnum: IAM-93-026  
Abstract-found: 0
Intro-found: 1
Reference: [CCI92a] <author> CCITT SG X. </author> <title> Message Sequence Chart (MSC). Recommendation Z.120, CCITT, </title> <booktitle> 1992. </booktitle> <address> Geneva. </address>
Reference-contexts: 1 Introduction SaMsTaG generates a single test case for a system specification and a test purpose. The system specification is given by an SDL description [CCI92b]. The test purpose is given by an MSC <ref> [CCI92a] </ref>. The test case is printed in TTCN/MP [ISO91b]. A test case contains the observable behaviors of traces. We call them observables. There are three different kind of observables. According to the assigned test verdict we call them pass, fail and inconclusive observables. SaMsTaG calculates these observables.
Reference: [CCI92b] <author> CCITT SG X. </author> <title> Specification and description language (SDL). Recommendation Z.100, CCITT, </title> <booktitle> 1992. </booktitle> <address> Geneva. </address>
Reference-contexts: 1 Introduction SaMsTaG generates a single test case for a system specification and a test purpose. The system specification is given by an SDL description <ref> [CCI92b] </ref>. The test purpose is given by an MSC [CCI92a]. The test case is printed in TTCN/MP [ISO91b]. A test case contains the observable behaviors of traces. We call them observables. There are three different kind of observables. <p> It is in the subdirectory bin. * dat.sct is the name of the MSC/PR file. * SaMsTaG supports the two formats Z.120 (cf. <ref> [CCI92b] </ref>) and the MSC/PR format of the MSC editor SCETG [Tog92]. -SCETG denotes that the MSC is in the PR form of the SCETG. * -test- turns the SDL simulator test off. * During the calculation of the pass observable, several possible pass observables (cf. section 4.2) are found.
Reference: [GGG + 93] <author> Grabowski, Gunter, Gurtner, Hogrefe, Nahm, Neuenschwander, Spichiger, and Toggweiler. </author> <title> Conformance Testing - Ein Werkzeug zur Generierung von Testfallen. </title> <institution> Schlussbericht des F & E Projektes Vetragsnummer 233, finanziert durch die Schweizer PTT, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The program simgen.exe generates the SDL system specific C++ code files (cf. <ref> [GGG + 93] </ref>). 3. A Sparc C++ Compiler (at least version 3.0) compiles SaMsTaG and creates the executable code. 4. The performance of the SDL simulator is tested under several heuristics (cf. [GGG + 93]). <p> The program simgen.exe generates the SDL system specific C++ code files (cf. <ref> [GGG + 93] </ref>). 3. A Sparc C++ Compiler (at least version 3.0) compiles SaMsTaG and creates the executable code. 4. The performance of the SDL simulator is tested under several heuristics (cf. [GGG + 93]). During the test a L a T E X table and several data series are created. 5. The program gnuplot creates a postscript figure from the data series. 6.
Reference: [GHN93a] <author> Jens Grabowski, Dieter Hogrefe, and Robert Nahm. </author> <title> A method for the generation of test cases based on SDL and MSCs. </title> <type> Technical Report IAM 93-010, </type> <institution> University of Berne, Switzerland, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: For that purpose SaMsTaG simulates an SDL specification and an MSC in parallel. During the simulation the pass and inconclusive observables are calculated. The fail observable is added by TTCNs default construct. After the calculation the test case is printed. The underlying method is described in <ref> [GHN93a] </ref>. 2 SaMsTaG SaMsTaG consists of four components (cf Figure 1): 1 The SDL simulation tool consists of 1.1 an SDL transformator that reads in the SDL specifications and generates the C++ files of the SDL simulator, and of an 1.2 SDL simulator which simulates the SDL specification. 2 The MSC
Reference: [GHN93b] <author> Jens Grabowski, Dieter Hogrefe, and Robert Nahm. </author> <title> Test case generation with test purpose specification by MSCs. </title> <editor> In Ove Faergemand and Sarma Ar-madeo, editors, </editor> <booktitle> 6th SDL Forum, SDL '93 : Using Objects, </booktitle> <pages> pages 253-266. </pages> <publisher> North-Holland, </publisher> <month> October </month> <year> 1993. </year>
Reference: [Hog89] <author> Dieter Hogrefe. Estelle, </author> <title> LOTOS und SDL Standard Specifikationssprachen fur verteilte Systeme. </title> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: As an example the Inres protocol is used. We want to test an implementation of the Initiator process. We choose the distributed test method. There are several changes necessary to adapt the protocol specification <ref> [Hog89] </ref> to the specification of the test architecture. Only the system under test and the underlying medium appear in the test architecture. The block Res Station is deleted. Additionally, tester processes have to be introduced.
Reference: [Hog91] <author> Dieter Hogrefe. </author> <title> OSI formal specification case study: The INRES protocol and service. </title> <type> Technical Report IAM-91-012, </type> <institution> University of Berne, </institution> <year> 1991. </year>
Reference-contexts: Fig. 6). Tester processes are processes which can send or receive every signal at every time (cf. Fig. 7 - 10). We assume the medium to be reliable (cf. Fig. 16 - 18). The blocks and processes shown in Fig. 11 - 15 are taken from Inres protocol <ref> [Hog91] </ref>. 3.2 Adapting SaMsTaG to the SDL specification The SaMsTaG tool has to be created specifically for the SDL specification. The batch file createSamstag adapts SaMsTaG to the SDL specification. Before it is started, we create a subdirectory that contains the SDL/PR file.
Reference: [ISO91a] <author> ISO/IEC JTC 1/SC 21 N. </author> <title> Information technology Open System Interconnection conformance testing methodology and framework - Part1-5. International Standard 9646, </title> <address> ISO/IEC, </address> <year> 1991. </year>
Reference-contexts: Section 3.2). 3. The test purposes must be prepared (cf. Section 3.3). 3.1 Preparing the SDL specification The SDL simulation tool requires an SDL specification. The SDL specification describes the test architecture. Thus, it is possible to generate test cases for different test architectures. <ref> [ISO91a] </ref> provides an overview over different test architectures. As an example the Inres protocol is used. We want to test an implementation of the Initiator process. We choose the distributed test method. There are several changes necessary to adapt the protocol specification [Hog89] to the specification of the test architecture.
Reference: [ISO91b] <author> ISO/IEC JTC 1/SC21. </author> <title> Information technology Open Systems Interconnection conformance testing methodology and framework Part 3: The Tree and Tabular Combined Notation. International Standard 9646-3, ISO, </title> <year> 1991. </year>
Reference-contexts: 1 Introduction SaMsTaG generates a single test case for a system specification and a test purpose. The system specification is given by an SDL description [CCI92b]. The test purpose is given by an MSC [CCI92a]. The test case is printed in TTCN/MP <ref> [ISO91b] </ref>. A test case contains the observable behaviors of traces. We call them observables. There are three different kind of observables. According to the assigned test verdict we call them pass, fail and inconclusive observables. SaMsTaG calculates these observables.
Reference: [Swe92] <institution> Swedish Telecom, </institution> <note> S-123 86 Farsta. ITEX-DE version 2.0, </note> <year> 1992. </year>
Reference-contexts: But any other SDL editor could be used too. As frontend for the MSC simulation tool an MSC editor of the University of Berne [Tog92] is used and ITEX serves as TTCN backend <ref> [Swe92] </ref>. 2 3 PREPARING THE INPUT 3 Preparing the input Several steps of work must be done before SaMsTaG is ready to use: 1. The SDL specification must be prepared (cf. Section 3.1). 2. SaMsTaG has to be adapted to the SDL specification (cf. Section 3.2). 3.
Reference: [Tel93a] <institution> Telelogic Malmo AB, </institution> <note> S-203 12 Malmo. SDT 2.3, Reference Manual, </note> <year> 1993. </year>
Reference-contexts: It is sepa rated into three parts: 3.1 Calculation of possible pass observables (cf. section 4.2) 3.2 Calculation of unique pass observables (cf. section 4.2) 3.3 Calculation of inconclusive observables 4 The TTCN handler 4.1 defines the FAIL observables and 4.2 creates the TTCN/MP test case. The commercial SDT <ref> [Tel93a] </ref> [Tel93b] serves as an SDL frontend and is taken to create the SDL specification in this paper. But any other SDL editor could be used too.
Reference: [Tel93b] <author> Telelogic Malmo AB. SDT, </author> <title> the SDL design tool. </title> <editor> In Ove Faergemand and Amardeo Sarma, editors, </editor> <booktitle> 6th SDL Forum, SDL '93: Using Objects, </booktitle> <pages> pages 513-514. </pages> <publisher> North-Holland, </publisher> <month> October </month> <year> 1993. </year>
Reference-contexts: The commercial SDT [Tel93a] <ref> [Tel93b] </ref> serves as an SDL frontend and is taken to create the SDL specification in this paper. But any other SDL editor could be used too.
Reference: [Tog92] <author> Daniel Toggweiler. </author> <title> TTCN-Testfallgenerierung fur mit Sequence Charts spezifi-zierte verteilte Systeme. </title> <type> Diploma thesis, </type> <institution> University of Berne, </institution> <month> March </month> <year> 1992. </year> <note> 12 REFERENCES 13 </note>
Reference-contexts: The commercial SDT [Tel93a] [Tel93b] serves as an SDL frontend and is taken to create the SDL specification in this paper. But any other SDL editor could be used too. As frontend for the MSC simulation tool an MSC editor of the University of Berne <ref> [Tog92] </ref> is used and ITEX serves as TTCN backend [Swe92]. 2 3 PREPARING THE INPUT 3 Preparing the input Several steps of work must be done before SaMsTaG is ready to use: 1. The SDL specification must be prepared (cf. Section 3.1). 2. <p> It is in the subdirectory bin. * dat.sct is the name of the MSC/PR file. * SaMsTaG supports the two formats Z.120 (cf. [CCI92b]) and the MSC/PR format of the MSC editor SCETG <ref> [Tog92] </ref>. -SCETG denotes that the MSC is in the PR form of the SCETG. * -test- turns the SDL simulator test off. * During the calculation of the pass observable, several possible pass observables (cf. section 4.2) are found.
References-found: 13

