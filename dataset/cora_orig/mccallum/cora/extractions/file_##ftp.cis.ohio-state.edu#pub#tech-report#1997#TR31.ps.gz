URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1997/TR31.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fyangy,singhalg@cis.ohio-state.edu  
Title: A Multiple Layered Signature Database Architecture for Mobile and Internet Environments  
Author: Yuping Yang, Mukesh Singhal 
Keyword: key words: Relational database, very large database, multi-layer, join, query processing, signature, grouping, performance, mobile, Internet.  
Date: May 27, 1997  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science, The Ohio State University  
Abstract: The performance of very large relational databases is one of the major stumble blocks of their deployment in the mobile and Internet environments. Indexing, hashing, and sorting are still main query execution speed up techniques in actual database implementations. Join index and materialized view have been proposed but not widely accepted due to their large storage requirements. Recently, general multilayer database concept based on concept-hierarchy has been proposed to improve the performance of query execution. However, there are still much to be done to expand this idea into an implementable database architecture. Implementable new query execution speed up techniques that can significantly speed up query execution, especially when there are a large number of users, yet do not demand excessive amount of extra storage space other than database itself, are in demand. This paper proposes a multiple layer database architecture based on signature method in implementable detail, compares this new architecture with existing query execution speed up techniques, and gives a performance analysis of this new architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Raghu Ramakrishnan. </author> <title> Database Management Systems. Beta Edition, </title> <booktitle> 1996, </booktitle> <address> ISBN 0 07-052522-6. </address> <publisher> McGraw-Hill Companies, Inc. </publisher>
Reference-contexts: Join operation is the single most expensive operation in query processing. So far the implementable techniques for speed up join operation in relational databases that have actually been used in the commercial databases are still various versions of hash join, sort merge join, and index assisted join <ref> [1] </ref>. Materialized view and join index [12], which are essentially pre-computed joins and can save processing time when used to answer queries, are not widely adopted in commercial databases because of their large extra storage requirements. Recently, multiple layer database has been proposed by Han et al. [18].
Reference: [2] <author> P. Bosc and O. Pivert. </author> <title> Some approaches for relational databases flexible querying. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 1 </volume> <pages> 323-354, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [3] <author> Joseph M. Hellerstein. </author> <title> Predicate Migration: Optimizing Queries With Expensive Predicates. </title> <booktitle> Proc. of the 1993 ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <address> pp.267-276, </address> <month> 26-28 May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [4] <author> E. Shekita and H. Young and K-L. Tan. </author> <title> Multi-Join Query Optimization for Symmetric Multi-Processors. </title> <booktitle> Proc. of the 19th Conf. on Very Large Databases, </booktitle> <publisher> Morgan Kaufman pubs. </publisher> <address> (Los Altos CA), Dublin, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [5] <author> J-J. Yang and R. R. Korfhage. </author> <title> Query Optimization in Information Retrieval Using Genetic Algorithms. </title> <booktitle> Proc. of the 5th Int'l Conf. on Genetic Algorithms, </booktitle> <address> pp.603-613, </address> <publisher> Morgan Kaufman, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [6] <author> W. P. Yan and P-A. Larson. </author> <title> Performing group-by before join. </title> <booktitle> Proc. of the 10th IEEE Int'l Conf. on Data Engineering, </booktitle> <pages> pp. 89-100, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [7] <author> D. Kossmann, M. Franklin. </author> <title> A Study of Query Execution Strategies for Client-Server Database Systems. </title> <type> Technical Report, </type> <institution> CS-TR-3512 and UMIACS-TR-95-85, University of Maryland, College Park, </institution> <month> August, </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [8] <author> Ming-Ling Lo and Chinya V. Ravishankar. </author> <title> Towards Eliminating Random I/O in Hash Joins. </title> <booktitle> Proc. of IEEE 12th Int'l Conf. on Data Engineering. </booktitle> <address> Feb. 26-March 1, 1996, New Orleans, Louisiana. </address>
Reference-contexts: 1 Introduction The overwhelming majority of databases today are still relational databases, and despite of over 20 years of research the interests in enhancing the performance of the relational databases are still high <ref> [2, 3, 5, 4, 6, 7, 8] </ref> and the performances of query executions are still far from satisfactory.
Reference: [9] <author> D. Duchamp. </author> <title> Issues in Wireless Computing. </title> <booktitle> Proc. of the Third Workshop on Workstation Operating Systems, IEEE, </booktitle> <address> Key Biscayne FL., </address> <month> April </month> <year> 1992, </year> <pages> pp. 1-7. </pages>
Reference-contexts: Databases used in mobile computing and the Internet environments such as the World Wide Web are likely be used as direct marketing tools to support consumer queries for information about products and services <ref> [9] </ref>. These databases are likely to be large and demand very high performance to support interactive accesses while a large number of users querying the database simultaneously.
Reference: [10] <author> Dik Lun Lee, Chun-wu Leng. </author> <title> Partitioned Signature File: Design Issues and Performance Evaluation. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> Vol. 7, </volume> <pages> No.2, </pages> <month> April </month> <year> 1989, </year> <pages> pp. 158 - 180. </pages>
Reference-contexts: group is 100, and a lot of group signatures are not matched, then a significant amount of search can be reduced. secretary 100011 query signature sig1 110110 not match sig2 100011 f alse match sig3 101011 true match The purpose of using signature is mainly to reduce the search space <ref> [10] </ref>. Signatures are only used for attributes with text data domain, such as names, descriptions, etc.
Reference: [11] <author> P. ValDuriez. </author> <title> Join Indices. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol 12, </volume> <pages> No.2, pp. 218-246,, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Bonding tables could have more but smaller entries compared to the signature relations. However, the signature relations are much smaller than main database relations, so the size of the bonding table will not become a problem if grouping grouping is done properly. Optionally, join index <ref> [11] </ref> can be used between two signature relations that stem from different main database relations. Since the signature relations are much smaller than the main database relations, the join indices in MSDB are much smaller than those generated directly from the main database [11]. <p> Optionally, join index <ref> [11] </ref> can be used between two signature relations that stem from different main database relations. Since the signature relations are much smaller than the main database relations, the join indices in MSDB are much smaller than those generated directly from the main database [11]. Like addressing tables, bonding tables usually don't need to be duplicated since they are likely to be much less loaded than the signature relations. 9 4 Implementation Considerations Grouping of values: Tuples in a main database relation are grouped by values of one of its joinable attributes. <p> Joins cannot be performed in higher layers of MLDB while in MSDB, joins are performed first in higher layers. Finally, signatures are used in MSDB to construct higher layer relations. Join indices: A join index <ref> [11] </ref> is a pre-joined relation of arity two. Each tuple in a relation is uniquely identified by a surrogate [19]. Each tuple in a join index contains two surrogates, each points to a tuple in a different relation and these two tuples satisfy the join predicate.
Reference: [12] <author> J. A. Blakeley, and N. L. Martin. </author> <title> Join Index, Materialized View, and Hybrid-Hash Join: A Performance Analysis. </title> <booktitle> Proc of 6th Int'l Conf. on Data Engineering, IEEE, </booktitle> <pages> pp. 256-263, </pages> <address> Feb 5-9, 1990, Los Angeles, CA. </address>
Reference-contexts: So far the implementable techniques for speed up join operation in relational databases that have actually been used in the commercial databases are still various versions of hash join, sort merge join, and index assisted join [1]. Materialized view and join index <ref> [12] </ref>, which are essentially pre-computed joins and can save processing time when used to answer queries, are not widely adopted in commercial databases because of their large extra storage requirements. Recently, multiple layer database has been proposed by Han et al. [18]. <p> Each copy is clustered along one of the columns of the join index. This makes the join index even larger. A comparison among join index, materialized view and hybrid-hash join by Blakeley et al. <ref> [12] </ref> found that when the data size is huge and the selectivity is low, the performance of the hybrid-hash join is the worst, the materialized view is better, and the join index is the best. A recent work by Z. Li and K. A. <p> Here we assume that v ms is 1/10 of v. Each main database relation has a attributes, t tuples, and each tuple has a bytes, so each main database relation has t fl a fl e=p pages. Formula We adopt the formula in <ref> [12] </ref> for computing IO ii , the number of pages accessed when accessing k f tuples in a relation having m f pages and n f tuples via an inverted B+ index of two or three levels [12]: IO ii (k f ; m f ; n f ) = [Y <p> Formula We adopt the formula in <ref> [12] </ref> for computing IO ii , the number of pages accessed when accessing k f tuples in a relation having m f pages and n f tuples via an inverted B+ index of two or three levels [12]: IO ii (k f ; m f ; n f ) = [Y ao (k f ; m f ; n f ) + Y ao (k f ; n f =F O; n f ) + T 3 (k f ; n f ); (2) where T 3 (k <p> After the selection operation, a hybrid-hash join operation needs to be performed on joinable attribute "product". Let B h = max ( 0; M=2 where F h is the space overhead factor for hashing <ref> [12] </ref> in database relations.
Reference: [13] <author> T. Zhang, R. Ramakrishnan, and M. Livny. </author> <title> BIRCH: An Efficient Data Clustering Method for Very Large Databases. </title> <booktitle> Proc. of the ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: Instead of group signatures, statistics like average, minimum, and maximum values are used to represent a group of numerical values in a compact way. Partitioning by range or clustering, such as BIRCH <ref> [13] </ref>, can be used to group numerical values. For rational numbers, the groups should be such that between any pairs of values within the same group lies no values belonging to other groups.
Reference: [14] <author> J. Han, Y. Cai and N. Cercone. </author> <title> Concept-Based Data Classification in Relational Databases. </title> <booktitle> Workshop Notes of 1991 AAAI Workshop on Knowledge Discovery in Databases (KDD'91), </booktitle> <address> Anaheim, CA, </address> <month> July </month> <year> 1991, </year> <month> pp.77-94. </month>
Reference-contexts: Do the same for each joinable attribute. All group signatures that come from the same set in S D bear the same surrogate. Groupings can be done with the help of concept hierarchies. Concept hierarchy <ref> [14, 16, 17, 18] </ref> is a tree like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts.
Reference: [15] <author> Y. Cai, N. Cercone and J. Han. </author> <title> Attribute-Oriented Induction in Relational Databases, </title> <editor> in G. Piatersky-Shapiro and W. J. </editor> <booktitle> Frawley, </booktitle> <pages> pp. 213-228. </pages> <publisher> AAAI/MIT Press. </publisher>
Reference-contexts: technician =) groups in groups in profession job sets driver driver out worker salesman engineer technician tech worker drafter drafter manager manager office worker secretary lawyer lawyer legal worker legal aid The MSDB architecture can benefit from research in data classification, especially the study of concept hierarchies in data mining <ref> [15, 16, 17] </ref>.
Reference: [16] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Knowledge Discovery in Databases: An Attribute-Oriented Approach. </title> <booktitle> Proc. of 1992 Int'l Conf. on Very Large Databases (VLDB'92), </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992, </year> <pages> pp. 547-559. </pages>
Reference-contexts: Do the same for each joinable attribute. All group signatures that come from the same set in S D bear the same surrogate. Groupings can be done with the help of concept hierarchies. Concept hierarchy <ref> [14, 16, 17, 18] </ref> is a tree like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts. <p> technician =) groups in groups in profession job sets driver driver out worker salesman engineer technician tech worker drafter drafter manager manager office worker secretary lawyer lawyer legal worker legal aid The MSDB architecture can benefit from research in data classification, especially the study of concept hierarchies in data mining <ref> [15, 16, 17] </ref>.
Reference: [17] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Data-driven discovery of quantitative rules in relational databases. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 5 </volume> <pages> 29-40. </pages> <year> 1993. </year>
Reference-contexts: Do the same for each joinable attribute. All group signatures that come from the same set in S D bear the same surrogate. Groupings can be done with the help of concept hierarchies. Concept hierarchy <ref> [14, 16, 17, 18] </ref> is a tree like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts. <p> technician =) groups in groups in profession job sets driver driver out worker salesman engineer technician tech worker drafter drafter manager manager office worker secretary lawyer lawyer legal worker legal aid The MSDB architecture can benefit from research in data classification, especially the study of concept hierarchies in data mining <ref> [15, 16, 17] </ref>.
Reference: [18] <author> J. Han, Y. Fu and R.T. Ng. </author> <title> Cooperative Query Answering Using Multiple Layered Databases. </title> <booktitle> Proc. of the 2nd Int'l Conf. on Cooperative Information Systems, </booktitle> <address> Toronto, Canada, </address> <month> May </month> <year> 1994. </year> <pages> pp. 47-58. </pages>
Reference-contexts: Materialized view and join index [12], which are essentially pre-computed joins and can save processing time when used to answer queries, are not widely adopted in commercial databases because of their large extra storage requirements. Recently, multiple layer database has been proposed by Han et al. <ref> [18] </ref>. This idea uses concept hierarchy as a guideline to extract summary information from a group of data values to form higher layer relations. During a query execution, the summary information in higher layer relations is searched first. <p> However, in previously proposed multi-layer database model as in <ref> [18] </ref>, joins are avoided in 2 higher layer relations due to the intrigue difficulties in carrying them out in higher layer relations. * It is desirable to have an efficient mapping mechanism to map addresses of tuples of the higher layer relations to addresses of tuples of the original database relations. <p> Do the same for each joinable attribute. All group signatures that come from the same set in S D bear the same surrogate. Groupings can be done with the help of concept hierarchies. Concept hierarchy <ref> [14, 16, 17, 18] </ref> is a tree like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship. Concept hierarchies are application specific and can be provided by domain experts. <p> Layered database: Multiple layer database models have been proposed earlier [21, 22, 23]. However, the focus of these models has been database security rather than in query processing. Han et al. <ref> [18] </ref> proposed a multiple layer database, MLDB. MSDB differs from MLDB in several important ways. In MSDB, there is a clear separation between layers and complete database reside in each layer. Joins cannot be performed in higher layers of MLDB while in MSDB, joins are performed first in higher layers.
Reference: [19] <author> Blasgen, M. W., and Eswaran, K. P. </author> <title> Storage and access in relational databases. </title> <journal> IBM Systems Journal. </journal> <volume> Vol 16, No. 4, </volume> <year> 1977. </year>
Reference-contexts: All entries in a tuple are stored consecutively and a tuple address is the address of the first entry of the tuple. However, all discussions are true when the address means logical address, such as the surrogate <ref> [19] </ref>. A signature is a 0/1 bit pattern obtained by hashing data values. Several signatures can be superimposed to form a group signature. Figure 1 shows a relation with an attribute "profession". Each value in "profession" is hashed into a signature, called an individual signature. <p> The values in S D are partitioned into sets. We will give an example to briefly explain this process. Each set will then be given an unique identification number such as a surrogate <ref> [19] </ref>. Then, from each set in S D , values that belong to A in R are selected into a group and group signature is constructed. Do the same for each joinable attribute. All group signatures that come from the same set in S D bear the same surrogate. <p> Finally, signatures are used in MSDB to construct higher layer relations. Join indices: A join index [11] is a pre-joined relation of arity two. Each tuple in a relation is uniquely identified by a surrogate <ref> [19] </ref>. Each tuple in a join index contains two surrogates, each points to a tuple in a different relation and these two tuples satisfy the join predicate. A join index could be quite large compared to the two operand relations.
Reference: [20] <author> H. F. Korth, A. Silberschatz. </author> <title> Database System Concepts. 1986, </title> <publisher> McGraw-Hill Computer Science Series. McGraw-Hill, Inc. </publisher>
Reference-contexts: The important point is that the signature database method is orthogonal to other techniques like inverted indices and hash join <ref> [20] </ref>, and can be used in conjunction with all these techniques to enhance the performance of database. Addressing tables: After searching the signature database, a set of signature tuples are found. These tuples represent the approximate and possible locations of the interesting data in the main database.
Reference: [21] <author> K. Smith, M. Winslett. </author> <title> Entity Modeling in the MLS Relational Model. </title> <booktitle> Proc. of the 18th VLDB Conf., </booktitle> <pages> pp. 199-210, </pages> <address> Vancouver, British Columbia, </address> <year> 1992. </year>
Reference-contexts: Next we compare MSDB with the join indices and multi-layer databases since these two techniques bear some similarities in concept to MSDB. Layered database: Multiple layer database models have been proposed earlier <ref> [21, 22, 23] </ref>. However, the focus of these models has been database security rather than in query processing. Han et al. [18] proposed a multiple layer database, MLDB. MSDB differs from MLDB in several important ways.
Reference: [22] <author> X. Qian. </author> <title> A model-theoretic semantics of the multilevel relational model. </title> <booktitle> Advances in Database Technology - EDBT'94, Lecture Notes in Computer Science 779, </booktitle> <pages> pp. 201-214, </pages> <editor> Jarke, M., Bubenko, J. and Jeffery, K. (editors), </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 22 </month>
Reference-contexts: Next we compare MSDB with the join indices and multi-layer databases since these two techniques bear some similarities in concept to MSDB. Layered database: Multiple layer database models have been proposed earlier <ref> [21, 22, 23] </ref>. However, the focus of these models has been database security rather than in query processing. Han et al. [18] proposed a multiple layer database, MLDB. MSDB differs from MLDB in several important ways.
Reference: [23] <author> F. Chen, R. S. Sandhu. </author> <title> The Multilevel Relational (MLR) Data Model. </title> <type> Technical Report, </type> <institution> ISSE-TR-95-101, 1995, George Mason University. </institution>
Reference-contexts: Next we compare MSDB with the join indices and multi-layer databases since these two techniques bear some similarities in concept to MSDB. Layered database: Multiple layer database models have been proposed earlier <ref> [21, 22, 23] </ref>. However, the focus of these models has been database security rather than in query processing. Han et al. [18] proposed a multiple layer database, MLDB. MSDB differs from MLDB in several important ways.
Reference: [24] <author> S. B. Yao. </author> <title> Approximating block accesses in database organizations. </title> <journal> Commun. ACM 20, </journal> <volume> 4(Apr. </volume> <year> 1977), </year> <pages> 260-261. </pages>
Reference-contexts: B. <ref> [24] </ref>: k Y n f (n f =m f ) i + 1 : (4) t average number of tuples in each relation g group sizes for generating group signatures a 50 average number of attributes in a relation, assumed e 4 average number of bytes of a data entry, assumed
Reference: [25] <author> Z. Li, K. A. Ross. </author> <title> Fast Joins Using Join Indices. </title> <type> Technical Report, </type> <institution> CUCS-032-96, 1996, Columbia University. </institution> <month> 23 </month>
Reference-contexts: A recent work by Z. Li and K. A. Ross <ref> [25] </ref> has improved the join index method in that a join operation requires only the following: one sequential pass through each participating relation, one sequential pass through the join index, and two passes through some temporary files whose total size is half that of the join index.
References-found: 25

