URL: http://www.cs.ucsd.edu/users/rich/papers/nws-tr.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/rich/publications.html
Root-URL: http://www.cs.ucsd.edu
Title: Dynamically Forecasting Network Performance Using the Network Weather Service  Cluster Computing: Networks, Software Tools, and Applications  
Author: Rich Wolski 
Keyword: scheduling, metacomputing, quality-of-service, statistical forecasting, network performance monitoring  
Address: La Jolla, CA 92093-0114  
Affiliation: Computer Science and Engineering Department University of California, San Diego  
Note: to appear in  
Pubnum: UCSD Technical Report TR-CS96-494  
Date: January 7, 1998  
Abstract: The Network Weather Service is a generalizable and extensible facility designed to provide dynamic resource performance forecasts in metacomputing environments. In this paper, we outline its design and detail the predictive performance of the forecasts it generates. While the forecasting methods are general, we focus on their ability to predict the TCP/IP end-to-end throughput and latency that is attainable by an application using systems located at different sites. Such network forecasts are needed both to support scheduling [5], and by the metacomputing software infrastructure to develop quality-of-service guarantees [10, 17]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Distributed object computation testbed. </institution> <note> http://www.sdsc.edu/DOCT/QuadPage.html. </note>
Reference-contexts: For small collections of machines it is adequate, but for larger-scale systems such as the Distributed Object Computational Testbed (DOCT) <ref> [1] </ref> or the I-way [11, 24] we will need another mechanism. 3.2 Storage Requirements Storage intrusiveness is also an issue. Some of the forecasting methods discussed in Section 4 require a history of measurements. <p> As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10, 15] and Legion [17, 25] metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) <ref> [1] </ref> metacomputing testbeds. We plan to use these implementations both to investigate metacomputing scheduling via AppLeS [4, 2] and the development of general quality-of-service mechanisms.
Reference: [2] <author> AppLeS. </author> <note> http://www-cse.ucsd.edu/groups/hpcl/apples/apples.html. </note>
Reference-contexts: We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology <ref> [4, 2] </ref> makes extensive use of its facilities and we are currently implementing versions for Legion [17, 25] and Globus/Nexus [10, 15]. Initial scheduling results using the NWS are promising [5]. <p> These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomputing scheduling via AppLeS <ref> [4, 2] </ref> and the development of general quality-of-service mechanisms. Acknowledgements The NWS is part of the AppLeS project, and as such, owes much of its existence to Francine Berman and the members of the AppLeS Corps at UCSD whom we thank for pearls of wisdom too plentiful to enumerate.
Reference: [3] <author> Basu, S., Mukherjee, A., and Kilvansky, S. </author> <title> Time series models for internet traffic. </title> <type> Tech. Rep. </type> <institution> GIT-CC-95-27, Georgia Institure of Technology, </institution> <year> 1996. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [28, 21, 9] and load forecasting <ref> [26, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general 3 facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> K 2 fl T Sort K (j): (13) It is possible to consider gradient adaptation of ff in the same manner that we adapt K for ADAP T AV G and ADAP T M ED but the relationship between ff and K is not obvious. 4.3 Autoregressive Models Recent work <ref> [3, 18] </ref> has shown that aggregate internet packet traffic can be effectively modeled by autoregressive, integrated, moving average (ARIMA) models. Fitting these models to a specific time series requires the solution to a system of potentially non-linear simultaneous equations, making them difficult to use in a dynamic setting. <p> Notice also that LAST is not a good predictor of network performance (particularly of latency) except for the cross-country internet throughput measurements. In that experiment, however, it performs best. We believe that this result supports those reported in <ref> [3] </ref> which demonstrate the ability of autoregressive models to correctly reflect aggregate traffic patterns in certain wide-area network environments. In particular, the authors analyze packet data taken from the gateway between SDSC and the NSFNET backbone. The PCL-to-NCSA TCP connection we monitored traverses this gateway. <p> Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive "fitting" phase. The ARIMA models described in <ref> [3] </ref>, the self-similarity analysis outlined in [26], and the semi-nonparametric techniques discussed in [13, 14], all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [4] <author> Berman, F., and Wolski, R. </author> <title> Scheduling from the perspective of the application. </title> <booktitle> In Proceedings of High-Performance Distributed Computing Conference (1996). </booktitle>
Reference-contexts: We think of this functionality as being analogous to weather forecasting, and as such, term the service the Network Weather Service (NWS). We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology <ref> [4, 2] </ref> makes extensive use of its facilities and we are currently implementing versions for Legion [17, 25] and Globus/Nexus [10, 15]. Initial scheduling results using the NWS are promising [5]. <p> These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomputing scheduling via AppLeS <ref> [4, 2] </ref> and the development of general quality-of-service mechanisms. Acknowledgements The NWS is part of the AppLeS project, and as such, owes much of its existence to Francine Berman and the members of the AppLeS Corps at UCSD whom we thank for pearls of wisdom too plentiful to enumerate.
Reference: [5] <author> Berman, F., Wolski, R., Figueira, S., Schopf, J., and Shao, G. </author> <title> Application level scheduling on distributed heterogeneous networks. </title> <booktitle> In Proceedings of Supercomputing 1996 (1996). </booktitle>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology [4, 2] makes extensive use of its facilities and we are currently implementing versions for Legion [17, 25] and Globus/Nexus [10, 15]. Initial scheduling results using the NWS are promising <ref> [5] </ref>. In this paper, we focus on the problem of network performance forecasting within the context of scheduling, and the predictive methodologies that we have chosen to explore initially.
Reference: [6] <author> Burg, J. </author> <title> Maximum Entropy Spectral Analysis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1975. </year>
Reference-contexts: The Levinson Recursion requires a set of partial correlation (PARCOR) coefficients which can also be derived recursively. Burg <ref> [6] </ref> and more recently Haddad and Parsons [19] describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely.
Reference: [7] <author> Carter, R., and Crovella, M. </author> <title> Dynamic server selection using bandwidth probing in wide-area networks. </title> <type> Tech. Rep. </type> <institution> TR-96-007, Boston University, </institution> <year> 1996. </year> <month> 31 </month>
Reference-contexts: We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy. We also plan to integrate other sensory mechanisms such as those described in <ref> [7] </ref>, and to investigate how groups of forecasts may be composed to yield higher-level performance characteristics. As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10, 15] and Legion [17, 25] metacomputing systems.
Reference: [8] <author> Crovella, M., and Bestavros, A. </author> <title> Self-similarity in world wide web traffic: Evidence and possible causes. </title> <booktitle> In Proceedings of the 1996 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems (1996). </booktitle>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [28, 21, 9] and load forecasting <ref> [26, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general 3 facility in which a variety of different monitoring and forecasting techniques can be employed easily.
Reference: [9] <author> Crovella, M., and LeBlanc, T. </author> <title> Parallel performance prediction using lost-cycles analysis. </title> <booktitle> In Proceedings of Supercomputing 1994 (1994). </booktitle>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [28, 21, 9] </ref> and load forecasting [26, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [10] <author> DeFanti, T., Foster, I., Papka, M., Stevens, R., and Kuhfuss, T. </author> <title> Overview of the i-way: Wide area visual supercomputing. </title> <note> International Journal of Supercomputer Applications (To Appear). </note>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology [4, 2] makes extensive use of its facilities and we are currently implementing versions for Legion [17, 25] and Globus/Nexus <ref> [10, 15] </ref>. Initial scheduling results using the NWS are promising [5]. In this paper, we focus on the problem of network performance forecasting within the context of scheduling, and the predictive methodologies that we have chosen to explore initially. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level performance characteristics. As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus <ref> [10, 15] </ref> and Legion [17, 25] metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. <p> As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10, 15] and Legion [17, 25] metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) <ref> [10] </ref> and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds. We plan to use these implementations both to investigate metacomputing scheduling via AppLeS [4, 2] and the development of general quality-of-service mechanisms.
Reference: [11] <author> DeFanti, T., Foster, I., Papka, M., Stevens, R., and Kuhfuss, T. </author> <title> Overview of the i-way: Wide area visual supercomputing. </title> <note> International Journal of SUpercomputer Applications (To Appear). </note>
Reference-contexts: For small collections of machines it is adequate, but for larger-scale systems such as the Distributed Object Computational Testbed (DOCT) [1] or the I-way <ref> [11, 24] </ref> we will need another mechanism. 3.2 Storage Requirements Storage intrusiveness is also an issue. Some of the forecasting methods discussed in Section 4 require a history of measurements.
Reference: [12] <author> Gallagher, N., and Wise, G. </author> <title> A theoretical analysis of the properties of median filters. </title> <journal> IEEE Transactions ASSP (December 1981). </journal>
Reference-contexts: Our presentation of these techniques follows the exposition in [19] and <ref> [12] </ref>. The median over a sliding window of fixed length whose leading edge is the most recent measurement is used as the forecast for the next measurement.
Reference: [13] <author> Gallant, R., and Tauchen, G. Snp: </author> <title> A program for nonparametric time series analysis. </title> <note> In http://www.econ.duke.edu/Papers/Abstracts/abstract.95.26.html. </note>
Reference-contexts: Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive "fitting" phase. The ARIMA models described in [3], the self-similarity analysis outlined in [26], and the semi-nonparametric techniques discussed in <ref> [13, 14] </ref>, all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [14] <author> Gallant, R., and Tauchen, G. </author> <title> Seminonparametric estimation of conditionally constrained heterogeneous processes: Asset pricing applications. </title> <booktitle> Econometrica 57 (1989), </booktitle> <pages> 1091-1120. </pages>
Reference-contexts: Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive "fitting" phase. The ARIMA models described in [3], the self-similarity analysis outlined in [26], and the semi-nonparametric techniques discussed in <ref> [13, 14] </ref>, all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [15] <author> Globus. </author> <note> http://www.mcs.anl.gov/globus. </note>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology [4, 2] makes extensive use of its facilities and we are currently implementing versions for Legion [17, 25] and Globus/Nexus <ref> [10, 15] </ref>. Initial scheduling results using the NWS are promising [5]. In this paper, we focus on the problem of network performance forecasting within the context of scheduling, and the predictive methodologies that we have chosen to explore initially. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level performance characteristics. As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus <ref> [10, 15] </ref> and Legion [17, 25] metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds.
Reference: [16] <author> Granger, C., and Newbold, P. </author> <title> Forecasting Economic Time Series. </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: to derive p algorithmically based on estimates of the autocorrelation values, and K based on p and a maximum computational complexity threshold. 2 The autoregressive model is applicable if the decay in the autocorrelation function is exponential and the value of p is set to the duration of the decay <ref> [16] </ref>. Our current implementation of the NWS does not attempt to determine the suitability of AR for a particular resource.
Reference: [17] <author> Grimshaw, A. S., Wulf, W. A., French, J. C., Weaver, A. C., and Reynolds, P. F. Legion: </author> <title> The next logical step towrd a nationwide virtual computer. </title> <type> Tech. Rep. </type> <institution> CS-94-21, University of Virginia, </institution> <year> 1994. </year>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology [4, 2] makes extensive use of its facilities and we are currently implementing versions for Legion <ref> [17, 25] </ref> and Globus/Nexus [10, 15]. Initial scheduling results using the NWS are promising [5]. In this paper, we focus on the problem of network performance forecasting within the context of scheduling, and the predictive methodologies that we have chosen to explore initially. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level performance characteristics. As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10, 15] and Legion <ref> [17, 25] </ref> metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds.
Reference: [18] <author> Groschwitz, N., and Polyzos, G. </author> <title> A time series model of long-term traffic on the nsfnet backbone. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications (ICC'94) (May 1994). </booktitle>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [28, 21, 9] and load forecasting <ref> [26, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general 3 facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> K 2 fl T Sort K (j): (13) It is possible to consider gradient adaptation of ff in the same manner that we adapt K for ADAP T AV G and ADAP T M ED but the relationship between ff and K is not obvious. 4.3 Autoregressive Models Recent work <ref> [3, 18] </ref> has shown that aggregate internet packet traffic can be effectively modeled by autoregressive, integrated, moving average (ARIMA) models. Fitting these models to a specific time series requires the solution to a system of potentially non-linear simultaneous equations, making them difficult to use in a dynamic setting.
Reference: [19] <author> Haddad, R., and Parsons, T. </author> <title> Digital Signal Processing: Theory, Applications, and Hardware. </title> <publisher> Computer Science Press, </publisher> <year> 1991. </year>
Reference-contexts: Our presentation of these techniques follows the exposition in <ref> [19] </ref> and [12]. The median over a sliding window of fixed length whose leading edge is the most recent measurement is used as the forecast for the next measurement. <p> Median filters are attractive because they will reject the effects of sharply outlying data points or "impulses" from the forecasts they produce. They lack some of the smoothing power of the 12 averaging based methods, however, resulting in forecasts with a considerable amount of jitter <ref> [19] </ref>. It is possible to combine the positive advantages of both classes of methods in the form of an ff-trimmed mean filter that averages the central K 2 fl ff fl K values within a sliding window of size K for (0 &lt; ff &lt; 0:5). <p> However, fitting a purely autoregressive (AR) model requires only the solution to a strictly linear system of equations that can be solved recursively via the Levinson Recursion <ref> [19] </ref>. <p> The Levinson Recursion requires a set of partial correlation (PARCOR) coefficients which can also be derived recursively. Burg [6] and more recently Haddad and Parsons <ref> [19] </ref> describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely. <p> Burg [6] and more recently Haddad and Parsons <ref> [19] </ref> describe a recursive algorithm for calculating both the PARCOR and autoregression coefficients from which we derive our current implementation. We omit the details of the algorithm here due to space constraints, but our implementation follows [19] closely. The algorithm takes time O (p N ) for N measurements, which becomes prohibitive when N is the length of the entire time series.
Reference: [20] <author> Harchol-Balter, M., and Downey, A. </author> <title> Exploiting process lifetime distributions for dynamic load balancing. </title> <booktitle> In Proceedings of the 1996 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems (1996). </booktitle>
Reference-contexts: Note that for K = 0, SW AV G uses the last measurement only as a predictor. That is, LAST (t) = SW AV G (t; 0) (7) Recent work by Harchol-Balter and Downey <ref> [20] </ref> indicates that this is a useful predictor for CPU resources, hence we include it as a separate method. The choice of K for SW AV G may be difficult to determine a priori for each resource, and in fact, may vary over time.
Reference: [21] <author> Hollingsworth, J., Miller, B., and Cargille, J. </author> <title> Dynamic program instrumentation for scalable performance tools. </title> <booktitle> In Proceedings of SHPCC 1994 (1994). </booktitle>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [28, 21, 9] </ref> and load forecasting [26, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [22] <author> Jacobson, V. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of SIGCOMM '88 (August 1988), </booktitle> <volume> vol. 18. </volume> <pages> 32 </pages>
Reference-contexts: Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations [27]. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to-end round-trip time based on stochastic gradient filter [30]. We follow the exposition of the technique provided in <ref> [22] </ref> which includes a description of a very efficient implementation for the Unix kernel. We define GRAD (t; g) = (1 g) fl GRAD (t 1; g) + g fl value (t) (10) for a gain (0 &lt; g &lt; 1).
Reference: [23] <author> Keshav, S. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of SIGCOMM '91 (August 1991), </booktitle> <volume> vol. </volume> <pages> 24. </pages>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [28, 21, 9] and load forecasting <ref> [26, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general 3 facility in which a variety of different monitoring and forecasting techniques can be employed easily.
Reference: [24] <author> Korab, H., and Brown, M. </author> <title> Virtual environments and distributed computing at sc'95: Gii testbed and hpc challenge applications on the i-way. </title> <booktitle> In Proceedings of Supercomputing '95. </booktitle>
Reference-contexts: For small collections of machines it is adequate, but for larger-scale systems such as the Distributed Object Computational Testbed (DOCT) [1] or the I-way <ref> [11, 24] </ref> we will need another mechanism. 3.2 Storage Requirements Storage intrusiveness is also an issue. Some of the forecasting methods discussed in Section 4 require a history of measurements.
Reference: [25] <author> Legion. </author> <note> http://www.cs.virginia.edu/~mentat/legion/legion.html. </note>
Reference-contexts: We have developed the NWS for use by schedulers in a networked computational environment. The AppLeS scheduling methodology [4, 2] makes extensive use of its facilities and we are currently implementing versions for Legion <ref> [17, 25] </ref> and Globus/Nexus [10, 15]. Initial scheduling results using the NWS are promising [5]. In this paper, we focus on the problem of network performance forecasting within the context of scheduling, and the predictive methodologies that we have chosen to explore initially. <p> We also plan to integrate other sensory mechanisms such as those described in [7], and to investigate how groups of forecasts may be composed to yield higher-level performance characteristics. As of this writing, second generation implementations of the NWS are underway for the Globus/Nexus [10, 15] and Legion <ref> [17, 25] </ref> metacomputing systems. These versions will be initially 30 deployed as part of the GUSTO (Globus UbiquitouS Testbed) [10] and DOCT (Distributed Object Computational Testbed) [1] metacomputing testbeds.
Reference: [26] <author> Leland, W. e. a. </author> <title> On the self-similar nature of ethernet traffic. </title> <journal> IEEE/ACM Transactions on Networking (February 1994). </journal>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring [28, 21, 9] and load forecasting <ref> [26, 3, 18, 23, 8] </ref> both pose open research questions, we have separated the sensory and forecasting functions of the NWS. The resulting modular design is intended to provide a general 3 facility in which a variety of different monitoring and forecasting techniques can be employed easily. <p> Our work with the NWS is very much in its formative stages. We plan to investigate how the system can incorporate modeling techniques which require a computationally-intensive "fitting" phase. The ARIMA models described in [3], the self-similarity analysis outlined in <ref> [26] </ref>, and the semi-nonparametric techniques discussed in [13, 14], all provide immediately promising avenues of investigation. We would like to discern the relationship between the computational complexity devoted to making a forecast its accuracy.
Reference: [27] <author> Ljung, L., and Soderstrom, T. </author> <title> Theory and Practice of Recursive Identification. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: In the experiments presented in the next section, we set 5 &lt;= K &lt;= 50. Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations <ref> [27] </ref>. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to-end round-trip time based on stochastic gradient filter [30]. We follow the exposition of the technique provided in [22] which includes a description of a very efficient implementation for the Unix kernel.
Reference: [28] <author> Malony, A., Reed, D., and Wijshoff, H. </author> <title> Performance Measurement Intrusion and Perturbation Analysis. </title> <address> IEEE-TPDS 3, </address> <month> 4 (July </month> <year> 1992), </year> <pages> 433-450. </pages> <note> Available as Tech. Report CSRD-923, </note> <institution> University of Illinois, Center for Supercomputing Research and Development. </institution> <note> Reprinted in IEEE CS Press Tutorial, Monitoring and Debugging Distributed and/or Real-Time Systems, </note> <author> Jeffrey Tsai and S. </author> <booktitle> Yang (Eds.), </booktitle> <pages> pp. 77-94, </pages> <year> 1995. </year>
Reference-contexts: The need to limit the intrusiveness of the NWS influences both the implementation of the overall system and the forecasting techniques we have chosen. Since the problems of non-intrusive resource monitoring <ref> [28, 21, 9] </ref> and load forecasting [26, 3, 18, 23, 8] both pose open research questions, we have separated the sensory and forecasting functions of the NWS.
Reference: [29] <author> Netperf. </author> <note> http://www.cup.hp.com/netperf/netperfpage.html. </note>
Reference-contexts: Netperf proved to be a robust and powerful substrate for our purposes, and we encourage those interested to visit the netperf World Wide Web site at <ref> [29] </ref> for further information. 5 the latency or start-up overhead associated with a communication. Immediately after the latency has been estimated, the initiating server sends a predetermined (and parameterizable) quantity of data and times the transfer.
Reference: [30] <author> Postel, P. e. a. </author> <title> Transmission control protocol specification, 1981. ARPA Working Group Requests for Comment DDN Network Information Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, CA, RFC-793. [31] vBNS. http://www.vbns.net. </address>
Reference-contexts: Stochastic gradient or recursive prediction error estimators are powerful predictive techniques with recursive formulations [27]. For example, modern implementations of the TCP/IP protocol include a dynamic predictor of end-to-end round-trip time based on stochastic gradient filter <ref> [30] </ref>. We follow the exposition of the technique provided in [22] which includes a description of a very efficient implementation for the Unix kernel.
References-found: 30

