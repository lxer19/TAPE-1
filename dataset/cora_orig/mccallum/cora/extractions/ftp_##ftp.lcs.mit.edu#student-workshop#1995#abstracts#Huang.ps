URL: ftp://ftp.lcs.mit.edu/student-workshop/1995/abstracts/Huang.ps
Refering-URL: http://www.cag.lcs.mit.edu/student95/proceedings.html
Root-URL: 
Title: Selecting better-performing alternative code using run-time profiling feedback code Program executable Profile data Program executable
Author: Ping-Shun Huang Thomas Knight Jr. Ping-Shun Huang 
Note: Ideally, a compiler supporting quasistatic computing would take unannotated source code and auto This work is conducted under the direction of  and research in the Reinventing Computing group are supported in part by the Advanced Research Projects Agency of the Department of Defense under Rome Labs contract number F30602-94-C-0252. Source  
Address: 545 Technology Square, Cambridge, MA 02139  
Affiliation: MIT Artificial Intelligence Laboratory  
Pubnum: 6  
Email: &lt;pshuang@ai.mit.edu&gt;  
Date: May 1, 1995  6  
Abstract: The underlying theme for work in the Reinventing Computing group is exploring software and hardware technologies engineered to adapt to the underlying changes in base technologies that will radically change the computing landscape of the 21 ST century. Quasistatic computing is a term we have coined to describe the effects of incorporating technologies into fielded computing systems which will allow them to evolve while they are in actual use, rather than remain rigid over their lifetimes unless manually upgraded. These technologies would track shifts in patterns of usage and optimize accordingly, and adapt software to the performance characteristics of computing platforms, which change both over time and between contemporary individual machines. One way of obtaining the benefits of quasistatic computing is to modify how compilers work. Today's optimizing compilers have come an astoundingly long way in the past decades, by increasing the scope and sophistication of analysis and program transformations, but they rely almost entirely on static analysis. Static analysis can only give incomplete and inaccurate estimates of program performance at best. Run-time profiling feedback can provide a much more complete and accurate picture. With additional information, the compiler can then try more radical, speculative transformations, and ascertain which proved to be beneficial in a particular instance. In other words, incorporating feedback allows the compiler to run experiments. matically analyze it for potential loci for this kind of experimentation. A stepping stone to such a smart compiler would be a clever compiler | one which relies on programmer annotations to help it decide what profiling feedback to gather and how to organize its analysis. Although this requires additional manual effort, note that using a clever compiler should still be much easier than traditional manual performance optimization, since the programmer does not need to examine profiler output by hand, and retains the qua-sistatic computing advantage that the program will dynamically evolve itself for different usage patterns and different computing platforms. My M. Eng. thesis deals with implementing several such annotations for C source code: quasistatic if-then-else and quasistatic parameters. The qua-sistatic if-then-else annotation (qif) looks like a normal C if or if-else-if chain, listing alternative pieces of code to be run when that part of the 
Abstract-found: 1
Intro-found: 0
Reference: [BDE94] <author> Jeremy Brown, Andre DeHon, Ian Eslick, et al.: </author> <title> "The Clever Compiler: Proposal for a First-Cut Smart Compiler." </title> <type> Transit Note 101, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> January </month> <year> 1994. </year>
Reference: [D94] <author> Andre DeHon: </author> <title> "A Proposal for Alternative Code: a quasistatic-if-then-else and quasistatic variables." </title> <note> Transit Note 110 (working draft), </note> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> July </month> <year> 1994. </year>
Reference: [K71] <author> Donald E. Knuth, </author> <title> "Empirical Study of FORTRAN Programs." </title> <journal> Practice and Experience, </journal> <volume> vol. 1, pg. </volume> <pages> 105-133. </pages>
Reference: [S91] <author> Alan Dain Samples, </author> <title> Profile-driven Compilation. </title> <institution> U.C. Berkeley CSD-91-627, </institution> <month> April </month> <year> 1991. </year>
References-found: 4

