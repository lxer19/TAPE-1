URL: ftp://ftp.cs.colorado.edu/users/alw/papers/esec97a.ps.Z
Refering-URL: http://www.cs.colorado.edu/users/alw/RecentPubs.html
Root-URL: http://www.cs.colorado.edu
Email: fandre,rickhall,dennis,alwg@cs.colorado.edu  
Title: Software Release Management  
Author: Andre van der Hoek, Richard S. Hall, Dennis Heimbigner, and Alexander L. Wolf 
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Date: 1997  
Note: From the Proceedings of the 6th European Software Engineering Conference, LNCS 1301, Springer, Berlin,  
Abstract: A poorly understood and underdeveloped part of the software process is software release management, which is the process through which software is made available to and obtained by its users. Complicating software release management is the increasing tendency for software to be constructed as a "system of systems", assembled from preexisting, independently produced, and independently released systems. Both developers and users of such software are affected by these complications. Developers need to accurately document complex and changing dependencies among the systems constituting the software. Users will be heavily involved in the location, retrieval, and assembly process of the systems in order to appropriately configure the software to their particular environment. In this paper we identify the issues encountered in software release management, and present an initial set of requirements for a software release management tool. We then describe a prototype of such a tool that supports both developers and users in the software release management process.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. Allen, G. Fernandez, K. Kane, D. Leblang, D. Minard, and J. Posner. ClearCase MultiSite: </author> <title> Supporting Geographically-Distributed Software Development. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, </booktitle> <year> 1995. </year>
Reference-contexts: process that documents the released components, records and exploits the dependencies among the components, and supports the location and retrieval of groups of compatible components. 163 3 Software Release Management In the past, when a single organization developed a software system, configuration management systems (e.g., Aide de Camp [16], ClearCase <ref> [1] </ref>, and Con-tinuus [3]) were used to support software release management. Once a software system needed to be released, all components of the release were frozen, labeled, and archived in the configuration management system.
Reference: 2. <institution> Open Software Associates. OpenWEB netDeploy. </institution> <note> Available on the world wide web at http://www.osa.com/products/openweb/oweb000.htm. </note>
Reference-contexts: In addition, NetInstall does not support publication of the release (i.e., developers have to create Web pages containing installation agents for their systems themselves). 6.2 Marimba's Castanet and Open Software Associates' netDeploy Marimba's Castanet [11], as well as Open Software Associates' netDeploy <ref> [2] </ref>, provides for automatic software updates once a system has been installed on a site. In essence, these systems mirror software from a single distribution site onto a set of mirror sites, keeping the mirror sites up to date with the distribution site.
Reference: 3. <institution> Continuus Software Corporation, Irvine, California. Continuus Task Reference, </institution> <year> 1994. </year>
Reference-contexts: the released components, records and exploits the dependencies among the components, and supports the location and retrieval of groups of compatible components. 163 3 Software Release Management In the past, when a single organization developed a software system, configuration management systems (e.g., Aide de Camp [16], ClearCase [1], and Con-tinuus <ref> [3] </ref>) were used to support software release management. Once a software system needed to be released, all components of the release were frozen, labeled, and archived in the configuration management system.
Reference: 4. <institution> W.H. Davidow and M.S. Malone. The Virtual Corporation. Harper Business, </institution> <year> 1992. </year>
Reference-contexts: But, it is their combined use that has led to a radically new software development process: increasingly, software is being developed as a "system of systems" by a federated group of organizations. Sometimes such a process is initiated formally, as when organizations create a virtual enterprise <ref> [4] </ref> to develop software. The virtual enterprise establishes the rules by which dependencies among the components are to be maintained by the members of the enterprise.
Reference: 5. <institution> Digital Equipment Corporation, Hewlett-Packard Company, HyperDesk Corporation, NCR Corporation, </institution> <note> Object Design, </note> <author> Inc., and SunSoft, Inc. </author> <title> The Common Object Request Broker: Architecture and Specification, Version 1.2. Object Management Group, </title> <type> Framingham, </type> <institution> Massachusetts, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Component-based technology has facilitated the construction of software through assembly of relatively large-grained components by defining standards for component interaction such as CORBA <ref> [5] </ref>. But, it is their combined use that has led to a radically new software development process: increasingly, software is being developed as a "system of systems" by a federated group of organizations.
Reference: 6. <author> S.I. Feldman. </author> <title> Evolution of Make. </title> <booktitle> In Proceedings of the International Workshop on Software Versioning and Configuration Control, </booktitle> <pages> pages 413-416, </pages> <year> 1988. </year>
Reference-contexts: The system uses specialized make <ref> [6] </ref> macros and variables to enable the building of systems in the hierarchy as well as to manage their associated dependencies. It uses various forms of heuristics to determine a site's state and employs the results in building and installing a software package.
Reference: 7. <author> G. Fowler, D. Korn, H. Rao, J. Snyder, and K.-P. Vo. </author> <title> Configuration Management. </title> <editor> In B. Krishnamurthy, editor, </editor> <title> Practical Reusable UNIX Software, chapter 3. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: SRM will prevent this from happening by placing the user in control of when a new release is retrieved and thus allowing a user to judge, based on the information presented, whether to update the software or not. 6.3 AT&T's ship and Tivoli's TME AT&T's ship <ref> [7] </ref> (and similarly Tivoli's TME [17]) is an extensive software deployment system that provides for automatic software installation and update. Unlike SRM, which provides control to both developers and users, ship places all control in the hands of the developer.
Reference: 8. <editor> R.S. Hall, D.M. Heimbigner, A. van der Hoek, and A.L. Wolf. </editor> <title> An Architecture for Post-Development Configuration Management in a Wide-Area Network. </title> <booktitle> In Proceedings of the 1997 International Conference on Distributed Computing Systems, </booktitle> <pages> pages 269-278. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1997. </year>
Reference-contexts: Software release management fits within the larger context of software configuration and deployment, which involves additional tasks such as installation, update, and removal. This larger context is being investigated in our Software Dock project <ref> [8] </ref>. SRM serves as the release manager in the Software Dock prototype, but is designed to be used independently. <p> This architecture is depicted in Figure 2. Below, we discuss the first three parts of the architecture in detail. The fourth part, the retrieve database, has been superseded by the Software Dock <ref> [8] </ref> and is not discussed further here. 4.1 The Release Database The release database is a repository that SRM uses to store the structured information pertaining the releases, as well as the releases themselves. The database 165 Fig. 2. <p> Avoiding unnecessary retrievals is the one requirement that SRM does not address on its own. Instead, it satisfies this requirement through an integration with the Software Dock, which we describe elsewhere <ref> [8] </ref>. Despite its current shortcomings, SRM clearly has advantages over the "label and archive" paradigm traditionally used for software release management. We have discussed how SRM improves both the process by which developers make 171 components available to users and the process by which users obtain the components.
Reference: 9. <author> D.M. Heimbigner. Arpc: </author> <title> An augmented remote procedure call system. </title> <type> Technical Report CU-ARCADIA-100-96, </type> <institution> University of Colorado Arcadia Project, Boulder, </institution> <address> CO 80309-0430, </address> <note> Revised 19 June 1996. Version 403.4. 175 </note>
Reference-contexts: SRM allows a developer to modify the information describing a release. One simple reason is that metadata, such as a contact person, may change. A more important reason is to allow underlying dependencies to change. For example, Q 3.3 [12], as mentioned above, depends on Arpc 403.4 <ref> [9] </ref>. It happened that a new version of Arpc was created to fix a bug. This fix did not, however, affect the Arpc interface, so no changes to Q 3.3 were required.
Reference: 10. <author> R. Kadia. </author> <title> Issues Encountered in Building a Flexible Software Development Environment. </title> <booktitle> In SIGSOFT '92: Proceedings of the Fifth Symposium on Software Development Environments, </booktitle> <pages> pages 169-180. </pages> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: We conclude with a look at related work and some directions for the future. 161 2 A Motivating Example During the past decade, the Arcadia consortium has developed approximately 50 tools to support various aspects of the software development process <ref> [10] </ref>. Arcadia's research staff is located at four universities across the US. Typically, each tool is developed, maintained, and released by a single university. Many of the tools, however, are dependent on tools developed at other sites.
Reference: 11. <author> Marimba. </author> <note> Castanet White Paper. Available on the world wide web at http://- www.marimba.com/developer/castanet-whitepaper.html. </note>
Reference-contexts: In addition, NetInstall does not support publication of the release (i.e., developers have to create Web pages containing installation agents for their systems themselves). 6.2 Marimba's Castanet and Open Software Associates' netDeploy Marimba's Castanet <ref> [11] </ref>, as well as Open Software Associates' netDeploy [2], provides for automatic software updates once a system has been installed on a site.
Reference: 12. <author> M.J. Maybee, D.M. Heimbigner, and L.J. Osterweil. </author> <title> Multilanguage Interoperability in Distributed Systems. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 451-463. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: SRM allows a developer to modify the information describing a release. One simple reason is that metadata, such as a contact person, may change. A more important reason is to allow underlying dependencies to change. For example, Q 3.3 <ref> [12] </ref>, as mentioned above, depends on Arpc 403.4 [9]. It happened that a new version of Arpc was created to fix a bug. This fix did not, however, affect the Arpc interface, so no changes to Q 3.3 were required.
Reference: 13. <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Other times it is the connectivity of the Internet that provides the opportunity to create incidental systems of systems. 160 For example, applications are typically built using public-domain software as major components, such as Tcl/Tk <ref> [13] </ref> for the graphical user interface. The use of public-domain software creates a dependency that, while less formal than in a virtual enterprise, is no less serious a concern. <p> For such cases, SRM provides the concept of foreign dependencies. A developer who wants to explicitly state that a component is dependent on a foreign dependency (which is the case for SRM itself, since it is built using Tcl/Tk <ref> [13] </ref>) simply releases two components. First the developer releases Tcl/Tk to SRM, then the developer releases the component that needed to be released in the first place.
Reference: 14. <author> D.J. Richardson, </author> <title> T.O. O'Malley, C.T. Moore, and S.L. Aha. Developing and Integrating ProDAG in the Arcadia Environment. </title> <booktitle> In SIGSOFT '92: Proceedings of the Fifth Symposium on Software Development Environments, </booktitle> <pages> pages 109-119. </pages> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1992. </year> <note> 15. 20/20 Software. 20/20 NetInstall. Available on the world wide web at http://- www.twenty.com/Pages/NI/NI.shtm. </note>
Reference-contexts: Fig. 1. Dependence Graph of the Arcadia Tools. Two recent experiences at the University of Colorado clearly show the need for a process and tool to support the management of Arcadia software releases. In the first case, one of the Arcadia tools from a remote site, ProDAG <ref> [14] </ref>, was needed for a project. ProDAG depends on a number of other tools that were also not present at the University of Colorado. Thus, besides ProDAG, each of these other tools and, in turn, the tools upon which they transitively depended, needed to be retrieved and installed.
Reference: 16. <institution> Software Maintenance & Development Systems, Inc, Concord, Massachusetts. Aide de Camp Configuration Management System, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: release management process that documents the released components, records and exploits the dependencies among the components, and supports the location and retrieval of groups of compatible components. 163 3 Software Release Management In the past, when a single organization developed a software system, configuration management systems (e.g., Aide de Camp <ref> [16] </ref>, ClearCase [1], and Con-tinuus [3]) were used to support software release management. Once a software system needed to be released, all components of the release were frozen, labeled, and archived in the configuration management system.
Reference: 17. <author> Tivoli. </author> <note> Tivoli TME 10 Software Distribution. Available on the world wide web at http://www.tivoli.com/products/Courier/. </note>
Reference-contexts: will prevent this from happening by placing the user in control of when a new release is retrieved and thus allowing a user to judge, based on the information presented, whether to update the software or not. 6.3 AT&T's ship and Tivoli's TME AT&T's ship [7] (and similarly Tivoli's TME <ref> [17] </ref>) is an extensive software deployment system that provides for automatic software installation and update. Unlike SRM, which provides control to both developers and users, ship places all control in the hands of the developer.
Reference: 18. <editor> A. van der Hoek, D.M. Heimbigner, and A.L. Wolf. </editor> <title> A Generic, Peer-to-Peer Repository for Distributed Configuration Management. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 308-317. </pages> <institution> Association for Computer Machinery, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: The database 165 Fig. 2. SRM Architecture. has been implemented using NUCM, a distributed repository for versioned artifacts <ref> [18] </ref>. SRM manipulates NUCM in such a way that the release database is logically centralized, but physically distributed. It is logically centralized in that it appears to users of SRM as if they are manipulating a single database; all artifacts from all distributed sites are visible at the same time.
References-found: 17

