URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-06.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ang-@deakin.edu.au  
Title: The Logical Design of the RHODOS Multi-threaded Microkernel  
Author: G. Wickham, M. Hobbs, A. Goscinski -gjw, mick, 
Note: *This work was partly supported by Australian Research Council under Grants A48831034, A49232429 and the Deakin University Research Grant 0504010151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: September 8, 1994  
Pubnum: RHODOS  
Abstract: As the RHODOS system has come under increasing use, the need to utilise multiple threads of control within the microkernel has become apparent. In this report we present the logical design of a multi-threaded microkernel for the RHODOS distributed operating system. The important components of the RHODOS microkernel (both hardware dependent and independent) that require design and development to allow multi-threading include areas such as: system stack management during interrupt and exception handling; allocation and control of microkernel resources; and context switching. To increase the performance and exibilty of a microkernel based operating system, it is a vital fact that multi-threading and preemptability of process execution be available. This report also highlights the reasons behind this claim and proposes a method for the smooth transition from the current single-threaded RHODOS microkernel to the new improved multi-threaded microkernel. 
Abstract-found: 1
Intro-found: 1
Reference: [De Paoli, et al. 94] <author> D. De Paoli, M. Hobbs, G. Wickham, A. Goscinski. </author> <title> RHODOS A Microkernel based Distributed Operating System: An Overview of the 1993 Version. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference: [Goscinski, et al. 94] <author> A. Goscinski, M. Hobbs, G. Wickham. </author> <title> Interprocess Communication in RHODOS. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: During this period a working operating system based on a single-threaded microkernel (called the Nucleus) has been developed [Motorola 85] and allowed further investigation into areas such as performance measurement fundamentals [Wickham 94], distributed communication facilities <ref> [Goscinski, et al. 94] </ref>, and also research into the design and development of microkernel architectures [Wickham, et al. 94b]. <p> Further services must be requested from the kernel and system servers (also shown in Figure 1) via message passing or remote procedure calls (RPCs) <ref> [Goscinski, et al. 94] </ref>. 2.2 Why a Multi-threaded Nucleus RHODOS has matured to a stage where the current implementation of the Nucleus is not exible enough to enable an uncomplicated development of the remainder of the system.
Reference: [Hobbs, et al. 92] <author> M. Hobbs, W. Toomey, G. Wickham. </author> <title> Booting of the RHODOS Distributed Operating System. </title> <type> Technical Report TR C92/3, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong, </institution> <month> August </month> <year> 1992. </year>
Reference: [Motorola 85] <author> Motorola, Inc. </author> <title> MC68020 32-bit Microprocessor Users Manual. </title> <booktitle> Prentice-Hall, 2nd Ed. </booktitle> <year> 1985. </year>
Reference-contexts: 1 Introduction The development of the RHODOS distributed operating system has been underway for the past two years in the School of Computing Mathematics at Deakin University. During this period a working operating system based on a single-threaded microkernel (called the Nucleus) has been developed <ref> [Motorola 85] </ref> and allowed further investigation into areas such as performance measurement fundamentals [Wickham 94], distributed communication facilities [Goscinski, et al. 94], and also research into the design and development of microkernel architectures [Wickham, et al. 94b]. <p> The benefits of such an architecture include improved modularity, scalability, port RHODOS September 8, 1994 Basic Features of RHODOS and its Microkernel Page 4 ability and improved performance by simplified hand tuning of modules <ref> [Motorola 85] </ref>. The RHODOS microkernel, known as the Nucleus, has taken a great deal of time and effort to be developed, even though it has a relatively small amount of code. <p> Interface hardware errors User Processes RHODOS September 8, 1994 Basic Features of RHODOS and its Microkernel Page 5 Initial stages of the RHODOS project focussed around the design and implementation of a microkernel for the Sun 3/50 workstation, including the details of how the system would be booted and initialised <ref> [Motorola 85] </ref>. The simplest implementation of a microkernel was to ensure that system calls were atomic and a context switch could only occur whilst a process was running in user mode. <p> The Master/Interrupt mode indicator (Bit 12) has no effect if the processor is in user mode (indicated by bit 13 being 0) 1 1. For a more detailed explanation see M68020 Users Manual Chapter 6 <ref> [Motorola 85] </ref>.
Reference: [Toomey 90] <author> W. Toomey. </author> <title> Memory Management in Rhodos. </title> <type> Technical Report CS90/19, </type> <institution> Department of Computer Science, University College, University of New South Wales. </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: To overcome this drawback we propose to introduce and use a master stack per process. Since within RHODOS a process address space is formed from a collection of objects known as spaces <ref> [Toomey 90] </ref>, the allocation of an extra supervisor stack is the simple task of creating and allocating an extra memory space to each process.
Reference: [Toomey, et al. 91] <author> W. Toomey, J. Indulska, G. Gerrity, A. Goscinski. </author> <title> The Design of the RHODOS Nucleus. </title> <type> Technical Report CS91/29, </type> <institution> Department of Computer Science, University College, University of New South Wales. </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: The primary interface between processes and the Nucleus is via the library/system call boundary. Since the Nucleus doesnt provide a great deal of services itself, there is only a limited number of system calls provided (introduced in <ref> [Toomey, et al. 91] </ref>).
Reference: [Wickham 94] <author> G. Wickham. </author> <title> Performance Analysis Techniques for a Microkernel based Distributed Operating Systems. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: During this period a working operating system based on a single-threaded microkernel (called the Nucleus) has been developed [Motorola 85] and allowed further investigation into areas such as performance measurement fundamentals <ref> [Wickham 94] </ref>, distributed communication facilities [Goscinski, et al. 94], and also research into the design and development of microkernel architectures [Wickham, et al. 94b].
Reference: [Wickham, et al. 94a] <author> G. Wickham, D. De Paoli, M. Hobbs. </author> <title> Implementation of the RHODOS Space Manager. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference: [Wickham, et al. 94b] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> Research into the Development of the RHODOS Multi-threaded Microkernel. </title> <type> Technical Report TR C94/, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong, (in preparation). </note>
Reference-contexts: this period a working operating system based on a single-threaded microkernel (called the Nucleus) has been developed [Motorola 85] and allowed further investigation into areas such as performance measurement fundamentals [Wickham 94], distributed communication facilities [Goscinski, et al. 94], and also research into the design and development of microkernel architectures <ref> [Wickham, et al. 94b] </ref>. An important finding from this initial research has been the support to the arguments that multi-threaded microkernels are required for increased performance as well as providing a exi-ble foundation for the simpler development of higher level components (such as kernel and system servers). <p> Spaces include such areas as the Text, Data, Stack regions of a process; or special objects such as devices or memory mapped files [Wick ham, et al. 94a]. 3 Hardware Independent Implementation Aspects As shown in <ref> [Wickham, et al. 94b] </ref> and described earlier, when a single-threaded microkernel is being used it is impossible to suspend a system call (trap) mid way through execution and RHODOS September 8, 1994 Hardware Independent Implementation Aspects Page 7 switch to another process, as there is only one supervisor mode stack which <p> The techniques of creating dummy frames allow the interrupt handlers to operate in a non interfering manner with executing processes, as interrupt handlers will always be restricted to using the interrupt stack <ref> [Wickham, et al. 94b] </ref>. More importantly it provides a fast and efficient mechanism for a context switch as it isnt necessary to save large exception frames.
References-found: 9

