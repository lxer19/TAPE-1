URL: http://www.ai.mit.edu/people/mhcoen/aaai.ps
Refering-URL: http://www.ai.mit.edu/people/mhcoen/
Root-URL: 
Email: fkautz, selmang@research.att.com mhcoen@ai.mit.edu ketchpel@cs.stanford.edu  
Title: An Experiment in the Design of Software Agents  
Author: Henry A. Kautz, Bart Selman, Michael Coen, and Stephen Ketchpel 
Address: Murray Hill, NJ 07974  
Affiliation: AI Principles Research Department AT&T Bell Laboratories  
Abstract: We describe a bottom-up approach to the design of software agents. We built and tested an agent system that addresses the real-world problem of handling the activities involved in scheduling a visitor to our laboratory. The system employs both task-specific and user-centered agents, and communicates with users using both email and a graphical interface. This experiment has helped us to identify crucial requirements in the successful deployment of software agents, including issues of reliability, security, and ease of use. The architecture we developed to meet these requirements is flexible and extensible, and is guiding our current research on principles of agent design.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Dent, J. Boticario, J. McDermott, and D. Zabowski. </author> <title> A personal learning apprentice. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <pages> pages 96-103. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction There is much recent interest in the creation of software agents (e.g., Etzioni et al [2], Maes [4], Dent et al <ref> [1] </ref>, Shoham [7]). A range of different approach and projects use the term agents, ranging from simple shell programming program systems to agents incorporating sophisticated real-time planning and plan execution capabilities. <p> Although our platform has improved over the initial prototype, there is still much room for improvement. The agents must react more or less predictably to both foreseen errors (e.g., mangled email), and unforeseen errors (e.g., 1 See also Dent et al <ref> [1] </ref> and Maes and Kozierok [5], that describe the design of software agents that learn how to assist users in scheduling meetings and managing their personal calendars. 2 We considered various forms of natural language input instead of forms. <p> Over the next few weeks we intend to establish communication with Oren Etzioni's finger agent (used to obtain information about 4 people on the internet) [3], and Tom Mitchell's calendar agent (used to schedule meetings among groups of people) <ref> [1] </ref>. The fingerbot and calendarbot will not themselves be ported to our laboratory's computers; instead, those programs will run at their respective homes (University of Washing-ton and CMU), and communication with userbots at various sites will take place using ordinary internet email.
Reference: [2] <author> Oren Etzioni, Steve Hanks, Daniel Weld, Denise Draper, Neal Lesh, and Mike Williamson. </author> <title> An approach to planning with incomplete information. </title> <booktitle> In Proceedings of KR-92, </booktitle> <pages> pages 115-125. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction There is much recent interest in the creation of software agents (e.g., Etzioni et al <ref> [2] </ref>, Maes [4], Dent et al [1], Shoham [7]). A range of different approach and projects use the term agents, ranging from simple shell programming program systems to agents incorporating sophisticated real-time planning and plan execution capabilities.
Reference: [3] <author> Oren Etzioni, Neal Lesh, and Richard Segal. </author> <title> Building softbots for UNIX. </title> <type> Technical Report, </type> <year> 1992. </year>
Reference-contexts: We are now in our third round of implementation and testing, in which we are further refining and generalizing our userbots so that they can communicate with software agents developed by other research groups, such as Oren Etzioni's softbots <ref> [3] </ref>. In this paper we describe the design of our software agents, and the lessons we have learned during the construction and testing of the system. Our agents currently run at and communicate between Bell Laboratories and MIT, and, soon, the University of Washington and CMU. <p> We decided to implement a specialized software agent called the visitorbot to handle these tasks. After examining various proposed agent architectures (e.g., Etzioni et al <ref> [3] </ref> and Shoham [7]), we decided that it was necessary to first obtain practical experience in building and a using a concrete basic agent, before committing to any particular theoretical framework. Our initial implementation was a monolithic agent, that communicated directly with users via email. <p> At the time that this paper is being written, only the vis-itorbot button in the taskbots menu is active. Over the next few weeks we intend to establish communication with Oren Etzioni's finger agent (used to obtain information about 4 people on the internet) <ref> [3] </ref>, and Tom Mitchell's calendar agent (used to schedule meetings among groups of people) [1].
Reference: [4] <editor> Pattie Maes, editor. </editor> <booktitle> Designing Automomous Agents. </booktitle> <address> MIT/Elsevier, </address> <year> 1993. </year>
Reference-contexts: 1 Introduction There is much recent interest in the creation of software agents (e.g., Etzioni et al [2], Maes <ref> [4] </ref>, Dent et al [1], Shoham [7]). A range of different approach and projects use the term agents, ranging from simple shell programming program systems to agents incorporating sophisticated real-time planning and plan execution capabilities.
Reference: [5] <editor> Pattie Maes and Robyn Kozierok. </editor> <booktitle> Learning interface agents. In Proceedings of AAAI-93, </booktitle> <pages> pages 459-464. </pages> <publisher> AAAI Press/The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Although our platform has improved over the initial prototype, there is still much room for improvement. The agents must react more or less predictably to both foreseen errors (e.g., mangled email), and unforeseen errors (e.g., 1 See also Dent et al [1] and Maes and Kozierok <ref> [5] </ref>, that describe the design of software agents that learn how to assist users in scheduling meetings and managing their personal calendars. 2 We considered various forms of natural language input instead of forms.
Reference: [6] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <year> 1978. </year>
Reference-contexts: Extensions and updates to userbots to handle new message types would have to be distributed through secure channels, perhaps by using cryptographic techniques <ref> [6] </ref>. 5 Bots vs. Programs An issue that is often raised is what exactly distinguishes software agents from ordinary programs. In our view, software agents are simply a special class of programs.
Reference: [7] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60 </volume> <pages> 51-92, </pages> <year> 1993. </year> <month> 6 </month>
Reference-contexts: 1 Introduction There is much recent interest in the creation of software agents (e.g., Etzioni et al [2], Maes [4], Dent et al [1], Shoham <ref> [7] </ref>). A range of different approach and projects use the term agents, ranging from simple shell programming program systems to agents incorporating sophisticated real-time planning and plan execution capabilities. <p> We decided to implement a specialized software agent called the visitorbot to handle these tasks. After examining various proposed agent architectures (e.g., Etzioni et al [3] and Shoham <ref> [7] </ref>), we decided that it was necessary to first obtain practical experience in building and a using a concrete basic agent, before committing to any particular theoretical framework. Our initial implementation was a monolithic agent, that communicated directly with users via email.
References-found: 7

