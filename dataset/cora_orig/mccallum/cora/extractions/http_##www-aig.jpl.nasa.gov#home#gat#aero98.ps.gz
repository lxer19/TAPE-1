URL: http://www-aig.jpl.nasa.gov/home/gat/aero98.ps.gz
Refering-URL: http://www-aig.jpl.nasa.gov/home/gat/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: gat@jpl.nasa.gov  pell@ptolemy.arc.nasa.gov  
Phone: (818) 354-4674  (650) 604-3361  
Title: Abstract Resource Management in an Unconstrained Plan Execution System  
Author: Erann Gat Barney Pell 
Note: TABLE OF CONTENTS  
Address: MS 525-3660 4800 Oak Grove Drive Pasadena, CA 91109  MS 269-2  Moffett Field, CA 94035  
Affiliation: JPL  RIACS  NASA Ames Research Center  
Abstract: We describe the abstract resource management mechanism in ESL (Execution Support Language [4]). ESL is the implementation substrate for the New Millennium Remote Agent Smart Executive [10], part of a NASA program to demonstrate autonomous control of an unmanned spacecraft scheduled to launch in 1998 [1]. The executive is responsible for robust plan execution in the face of unexpected runtime contingencies. Part of this task requires runtime management of the spacecraft's configuration, whose component states are modeled as abstract resources. In this paper we describe the ESL constructs for managing these abstract resources. The resource management facilities in ESL are similar to the constraint management constructs in RAPs [3]. The major contribution in this paper is the implementation of these facilities in an unconstrained execution substrate implemented as an extension to a standard programming language (in this case, Common Lisp) rather than within a constrained self-contained plan execution language. This turns out to significantly simplify complex programming tasks. The main technical problem in a resource management system is designing a representation that allows automatic determination of when conflicts exist. In its full generality this becomes a full-blown planning problem, and therefore an impractical strategy for a reactive executive. Instead, we model abstract resources as properties, logical assertions whose final values are guaranteed unique. When two properties are identical but for their final value then they are in conflict. This paper describes the ESL constructs and mechanisms for scheduling tasks so that they do not attempt to achieve conflicting properties simultaneously, and for invoking external recovery mechanisms for restoring properties to their desired states when forced away from those states by unexpected contingencies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Douglas Bernard, et al. </author> <title> "Design of the Remote Agent Experiment for Spacecraft Autonomy," </title> <note> in Proceedings of the 1998 IEEE Aeropspace Conference, to appear. </note>
Reference: [2] <author> R. Peter Bonasso, et al. </author> <title> "Experiences with an Architecture for Intelligent Reactive Agents," </title> <journal> Journal of Experimental and Theoretical AI, </journal> <note> to appear. </note>
Reference-contexts: We begin with a brief review of ESL's basic structure and features. 2. ESL REVIEW ESL (Execution Support Language) is a language for encoding execution knowledge in embedded autonomous agents. It is designed to be the implementation substrate for the sequencing component of a three-layer architecture such as 3T <ref> [2] </ref> or ATLANTIS [5]. The sequencer in such an architecture coordinates the actions of a reactive controller, which controls the agent's actions, and a deliberative component, which generates plans and performs other high-level computations.
Reference: [3] <author> R. James Firby. </author> <title> Adaptive Execution in Dynamic Domains, </title> <type> Ph.D. thesis, </type> <institution> Yale University Department of Computer Science, </institution> <year> 1989. </year>
Reference-contexts: We approach the problem here not as a theoretical problem but as a software engineering problem: what sorts of language constructs are required to enable human programmers to effectively encode runtime knowledge about resource management? Our approach is based on the idea of memory properties <ref> [3] </ref>, logical assertions whose last element is guaranteed to be unique. Memory properties provide a useful structure both for determining when resource conflicts exist, and for recovering from conflicts. We begin with a brief review of ESL's basic structure and features. 2. <p> An implementation substrate for such a system should also be able to deal with a variety of different strategies for assigning responsibilities to the various layers, from mostly reactive strategies, to ones where the planner is the prime mover. ESL is similar in spirit to RAPs <ref> [3] </ref>, RPL [9], and RS [8], and its design owes much to these systems. Unlike its predecessors, ESL aims for a more utilitarian point in the design space.
Reference: [4] <author> Erann Gat. "ESL: </author> <title> A Language for Supporting Robust Plan Execution in Embedded Autonomous Agents" Proceedings of the 1997 IEEE Aeropspace Conference. </title>
Reference: [5] <author> Erann Gat. </author> <title> "Integrating Reaction and Planning in a Heterogeneous Asynchronous Architecture for Controlling Real World Mobile Robots," </title> <booktitle> Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1992. </year>
Reference-contexts: ESL REVIEW ESL (Execution Support Language) is a language for encoding execution knowledge in embedded autonomous agents. It is designed to be the implementation substrate for the sequencing component of a three-layer architecture such as 3T [2] or ATLANTIS <ref> [5] </ref>. The sequencer in such an architecture coordinates the actions of a reactive controller, which controls the agent's actions, and a deliberative component, which generates plans and performs other high-level computations.
Reference: [6] <author> Erann Gat. </author> <title> "News From the Trenches: An Overview of Unmanned Spacecraft for AI Researchers, </title> " <note> Presented at the 1996 AAAI Spring Symposium on Planning with Incomplete Information. </note>
Reference: [7] <author> Erann Gat. </author> <note> "The ESL User's Guide", unpublished. http://www-aig.jpl.nasa.gov/home/gat/esl.html </note>
Reference-contexts: The following sections provide a brief overview of some of the major feature sets in ESL. Most of these are used by the resource management mechanism described in section 4. For a complete description of the language see the ESL User's Guide <ref> [7] </ref>. Contingency Handling The contingency-handling constructs of ESL are based on the concept of cognizant failure , which is a design philosophy that states that systems should be designed to detect failures when they occur so that the system can respond appropriately.
Reference: [8] <author> Damian Lyons. </author> <title> "Representing and Analyzing action plans as networks of concurrent processes, </title> " <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 9(3), </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: ESL is similar in spirit to RAPs [3], RPL [9], and RS <ref> [8] </ref>, and its design owes much to these systems. Unlike its predecessors, ESL aims for a more utilitarian point in the design space.
Reference: [9] <author> Drew McDermott. </author> <title> "A Reactive Plan Language," </title> <type> Technical Report 864, </type> <institution> Yale University Department of Computer Science. </institution>
Reference-contexts: An implementation substrate for such a system should also be able to deal with a variety of different strategies for assigning responsibilities to the various layers, from mostly reactive strategies, to ones where the planner is the prime mover. ESL is similar in spirit to RAPs [3], RPL <ref> [9] </ref>, and RS [8], and its design owes much to these systems. Unlike its predecessors, ESL aims for a more utilitarian point in the design space.
Reference: [10] <author> Barney Pell, et al. </author> <title> "An Autonomous Spacecraft Agent Prototype." </title> <booktitle> Autonomous Robots, </booktitle> <volume> 5(1), </volume> <month> March </month> <year> 1998.. </year>
Reference: [11] <author> Barney Pell, et al. </author> <title> "A Hybrid Procedural/Deductive Executive for Autonomous Spacecraft," </title> <booktitle> in Proceedings of the AAAI Fall Symposium on Model-Directed Autonomous Systems, Technical Report, </booktitle> <publisher> AAAI Press, </publisher> <year> 1997. </year> <note> [12] M. </note> <author> J. Schoppers. </author> <title> "Universal Plans for Reactive Robots in Unpredictable Domains," </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1987. </year>
Reference-contexts: Moreover, the property locks list can provide requirements which, when enforced by an external planner, ensure that generated recoveries are consistent with the current execution context <ref> [11] </ref>. Camera power On ACS Mode A Comm mode HGA Camera health OK Property Locks Maintain-Properties Daemon Spacecraft Database Tasks Task Interrupts Subscribe Control Commands Lock Events State Updates Monitors mechanism. 5.

References-found: 11

