URL: http://www.cs.toronto.edu/~chechik/pubs/ICSEA.ps
Refering-URL: http://www.cs.toronto.edu/~chechik/publications.html
Root-URL: http://www.cs.toronto.edu
Title: Applying Formal Methods to a Telecommunications System in a Commercial Setting  
Author: Andre Wong Marsha Chechik 
Date: October 19, 1998  
Abstract: Formal methods have been used mostly in safety-critical projects although some have industrial-strength implementations that can be used effectively in commercial settings. This paper describes a case study conducted in collaboration with Nortel to demonstrate the feasibility of applying formal methods to telecommunications systems. A lightweight formal method, SDL, was chosen by our qualitative evaluation to model a multimedia-messaging system. The model allowed us to locate errors in the software requirements document and to derive test suites, shadowing the existing development process and keeping track of a variety of productivity data. The success of our case study was in finding a suitable project where we were able to integrate a well-chosen formal method into the existing development process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Aonix. "Aonix Home Page". </institution> <note> http://www.aonix.com, September 1998. </note>
Reference-contexts: After we narrowed down our search to three tools (Telelogic SDT [11], Aonix <ref> [1] </ref> Validator/Req, and Teradyne TestMaster [12]), we structured our evaluation more formally as a qualitative case study [8] and refined our focus to assessing the remaining choices using additional evaluation criteria gathered from the Nortel engineers.
Reference: [2] <author> E.M. Clarke and J. Wing. </author> <title> "Formal Methods: State of the Art and Future Directions". </title> <journal> ACM Computing Surveys, </journal> <volume> 28(4) </volume> <pages> 626-643, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: 1 Introduction For a long time, researchers and practitioners have been seeking different ways to improve productivity in the software development process. Within the software engineering research community, formal methods (mathematically-based languages, techniques or tools for specifying and verifying software systems <ref> [2] </ref>) have been advocated as one of the viable approaches. If high quality specifications are crucial to the success of system developments, it seems logical to apply formal specification techniques to the requirements for ensuring their completeness and consistency.
Reference: [3] <author> J. Crow and B.L. Di Vito. </author> <title> "Formalizing Space Shuttle Software Requirements". </title> <booktitle> In Workshop Formal Methods in Software Practice, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: If high quality specifications are crucial to the success of system developments, it seems logical to apply formal specification techniques to the requirements for ensuring their completeness and consistency. However, most successful applications of formal methods have been confined to safety-critical projects <ref> [3, 4, 7] </ref> where software correctness is the pivotal goal.
Reference: [4] <author> Mats P.E. Heimdahl. </author> <title> "Lessons from the Analysis of TCAS II". </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA'96), </booktitle> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: If high quality specifications are crucial to the success of system developments, it seems logical to apply formal specification techniques to the requirements for ensuring their completeness and consistency. However, most successful applications of formal methods have been confined to safety-critical projects <ref> [3, 4, 7] </ref> where software correctness is the pivotal goal.
Reference: [5] <author> ITU-T. </author> <title> "ITU-T Recommendation Z.100: Specification and Description Language (SDL)". </title> <type> ITU-T, </type> <year> 1993. </year>
Reference-contexts: Results from the assessment indicated that SDT met the criteria closer than the other tools. 3 3 Modeling the System SDT is an integrated software modeling and testing tool suite that utilizes Specification and Description Language (SDL) <ref> [5] </ref>, which is based on extended finite state machines (EF-SMs), for behavioral modeling and Message Sequence Charts (MSCs) [6] for component-interaction specification. We modeled a Service Creator application as a 70-page SDL system, in parallel with the existing development process, and the voice-service components were formalized as separate SDL processes.
Reference: [6] <author> ITU-T. </author> <title> "ITU-T Recommendation Z.120: Message Sequence Chart (MSC)". </title> <type> ITU-T, </type> <year> 1993. </year>
Reference-contexts: that SDT met the criteria closer than the other tools. 3 3 Modeling the System SDT is an integrated software modeling and testing tool suite that utilizes Specification and Description Language (SDL) [5], which is based on extended finite state machines (EF-SMs), for behavioral modeling and Message Sequence Charts (MSCs) <ref> [6] </ref> for component-interaction specification. We modeled a Service Creator application as a 70-page SDL system, in parallel with the existing development process, and the voice-service components were formalized as separate SDL processes.
Reference: [7] <author> Paul K. Joannou. </author> <title> "Experiences from Application of Digital Systems in Nuclear Power Plants". </title> <booktitle> In Proceedings of the Digital Systems Reliability and Nuclear Safety Workshop, </booktitle> <address> Rockville, Maryland, </address> <year> 1993. </year>
Reference-contexts: If high quality specifications are crucial to the success of system developments, it seems logical to apply formal specification techniques to the requirements for ensuring their completeness and consistency. However, most successful applications of formal methods have been confined to safety-critical projects <ref> [3, 4, 7] </ref> where software correctness is the pivotal goal.
Reference: [8] <author> Barbara Ann Kitchenham. </author> <title> "Evaluating Software Engineering Methods and Tools. </title> <booktitle> Part 1". ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 21(1) </volume> <pages> 11-15, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Specifically, the emphasis is placed on deriving test cases from the formal model as the Nortel engineers have expressed concerns about the feasibility of code generation for their proprietary platform. The project was organized as a hybrid quantitative and qualitative case study <ref> [8] </ref>. We began the study by proposing criteria for the system-selection process and conducting a qualitative formal method evaluation. Our model, which was constructed in parallel with the existing development process, was used to locate errors in the software requirements document and to derive test suites for identifying implementation errors. <p> After we narrowed down our search to three tools (Telelogic SDT [11], Aonix [1] Validator/Req, and Teradyne TestMaster [12]), we structured our evaluation more formally as a qualitative case study <ref> [8] </ref> and refined our focus to assessing the remaining choices using additional evaluation criteria gathered from the Nortel engineers. The criteria comprised of factors, such as usability and smooth integrations, that were crucial to the use of formal methods in their environment.
Reference: [9] <author> Roger S. Pressman. </author> <title> "Can Internet-Based Applications be Engineered?". </title> <journal> IEEE Software, </journal> <volume> 15(5), </volume> <month> September </month> <year> 1998. </year> <month> 7 </month>
Reference-contexts: In Section 3, we discuss the formalization process. Section 4 presents a summary of findings from the study, and Section 5 draws conclusions based on the experience gained during this project. 2 The Selection Process As not all systems are worth engineering <ref> [9] </ref>, only some systems are worth formalizing. Therefore, it was crucial to select a system that had the best potential to benefit from the formalization process.
Reference: [10] <author> Tony Savor and Rudolph E. Seviora. </author> <title> "Toward Automatic Detection of Software Fail--ures". </title> <journal> IEEE Computer, </journal> <volume> 31(8) </volume> <pages> 68-74, </pages> <month> August </month> <year> 1998. </year>
Reference-contexts: Readers are advised to consult [14] for more details. 2 * was relatively self-contained and had loose coupling with the underlying system; * was reactive|almost all inputs resulted in outputs that accurately indicated the state of the system <ref> [10] </ref>. We worked with a group of Nortel engineers, consisting of developers from the design team and testers from the verification team, to choose a system that satisfied the criteria above.
Reference: [11] <institution> Telelogic. "Telelogic SDT Home Page". </institution> <address> http://www.telelogic.com/solution/ tools/sdt.asp, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: After we narrowed down our search to three tools (Telelogic SDT <ref> [11] </ref>, Aonix [1] Validator/Req, and Teradyne TestMaster [12]), we structured our evaluation more formally as a qualitative case study [8] and refined our focus to assessing the remaining choices using additional evaluation criteria gathered from the Nortel engineers.
Reference: [12] <institution> Teradyne. "TestMaster Home Page". </institution> <address> http://www.teradyne.com/prods/sst/ ssthome.html, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: After we narrowed down our search to three tools (Telelogic SDT [11], Aonix [1] Validator/Req, and Teradyne TestMaster <ref> [12] </ref>), we structured our evaluation more formally as a qualitative case study [8] and refined our focus to assessing the remaining choices using additional evaluation criteria gathered from the Nortel engineers.
Reference: [13] <author> Andre Wong. </author> <title> "The Diary of the Formal-Method Survey". </title> <address> http://www.cs.toronto. edu/~andre/progress.html, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: Moreover, since one of the overall objectives was to amortize the cost of creating a formal specification, we began the evaluation by conducting a broad survey <ref> [13] </ref> of usable formal methods that provided support both for modeling and for testing.
Reference: [14] <author> Andre Wong and Marsha Chechik. </author> <title> "Applying Formal Methods to a Telecommunications System in a Commercial Setting'. </title> <type> CSRG Technical Report 377, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1998. </year>
Reference-contexts: Readers are advised to consult <ref> [14] </ref> for more details. 2 * was relatively self-contained and had loose coupling with the underlying system; * was reactive|almost all inputs resulted in outputs that accurately indicated the state of the system [10].
Reference: [15] <author> Marvin V. Zelkowitz and Dolores R. Wallace. </author> <title> "Experimental Models for Validating Technology". </title> <journal> IEEE Computer, </journal> <volume> 31(5), </volume> <month> May </month> <year> 1998. </year> <month> 8 </month>
Reference-contexts: justify the extra effort. 4.3 Limitations Although we believe that our findings, as a whole, demonstrated the usefulness of SDL in formalizing the Service Creator, we cannot infer that all of our results will apply directly to the actual development process as results from case studies are usually not generalizable <ref> [15] </ref>. In our study, both the formal method and the system to be modeled were carefully chosen to maximize the impact of the formalization process. We might not obtain the same results if a different formal method was applied to some other type of systems.
References-found: 15

