URL: ftp://ftp.research.microsoft.com/users/lomet/pub/presumedcom.ps
Refering-URL: http://www.research.microsoft.com/users/lomet/pub/default.htm
Root-URL: http://www.research.microsoft.com
Title: A New Presumed Commit Optimization for Two Phase Commit  
Author: Butler Lampson and David Lomet 
Address: One Kendall Square, Bldg 700 Cambridge, MA 02139  
Affiliation: DEC Cambridge Research Lab  
Abstract: Two phase commit (2PC) is used to coordinate the commitment of transactions in distributed systems. The standard 2PC optimization is the presumed abort variant, which uses fewer messages when transactions are aborted and allows the coordinator to forget about aborted transactions. The presumed commit variant of 2PC uses even fewer messages, but its coordinator must do additional logging. We describe a new form of presumed commit that reduces the number of log writes while preserving the reduction in messages, bringing both these costs below those of presumed abort. The penalty for this is the need to retain a small amount of crash related information forever. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gray, J. </author> <title> Notes on Database Systems. </title> <institution> IBM Research Report RJ2188 (Feb.1978) San Jose, </institution> <address> CA </address>
Reference-contexts: 1 Introduction 1.1 Coordinating Distributed Commit Distributed systems rely on the two phase commit (2PC) protocol to coordinate the commitment of transactions <ref> [1, 4] </ref>. 2PC guarantees the atomicity of distributed transactions, that is, that all cohorts of a transaction either commit or abort the transaction. The cost of 2PC is an important factor in the performance of distributed transactions. * It requires multiple messages in multiple phases.
Reference: [2] <author> Gray, J. </author> <title> Minimizing the Number of Messages in Commit Protocols. </title> <booktitle> Workshop on Fundamental Issues in Distributed Computing, </booktitle> <address> Pala Mesa, CA (Feb. </address> <year> 1981), </year> <pages> 90-92. </pages>
Reference-contexts: It can thus be very difficult to garbage collect the information concerning transactions in IN . One way to deal with this is to permanently retain IN . Permanently retaining transaction outcome was originally proposed in <ref> [2] </ref>. There all transaction outcomes were retained permanently in one of the commit protocols described. Our technique immediately dispenses with the greater part of this information by the presumed commit strategy. For aborted transactions, we normally garbage collect transaction outcomes by requiring explicit ACK messages.
Reference: [3] <author> Gray, J. and Reuter, A. </author> <title> Transaction Processing: Concepts and Techniques, </title> <address> Morgan-Kaufman, Redwood, CA, </address> <year> 1992 </year>
Reference-contexts: The protocol that results from exploiting this new approach to recovery of the protocol database is described in section 5. Finally, we discuss the virtues and limitations of this approach to 2PC optimization in section 6. 2 Two Phase Commit Commit coordination and its optimizations are discussed thoroughly in <ref> [3, 8, 9] </ref>. We recap this discussion here, beginning with a description of the basic version of two phase commit. In this version the coordinator requires very explicit information, which is why it is often called the "presumed nothing" proto-col or PrN. <p> NPrC differs from PrC in what its coordinator writes to the log, and hence in the information that the coordinator recovers after a crash. We assume that a transaction manager coordinates commit and has its own log <ref> [3] </ref>. We write the description for a flat transaction cohort structure; an extension to the tree model is discussed in section 6. During normal operation, NPrC's extra complexity is minimal. It needs only to delimit persistently the set of potentially initiated transactions.
Reference: [4] <author> Lampson, B. and Sturgis, H. </author> <title> Crash Recovery in a Distributed System. </title> <note> Xerox PARC Research Report, </note> <year> 1976. </year>
Reference-contexts: 1 Introduction 1.1 Coordinating Distributed Commit Distributed systems rely on the two phase commit (2PC) protocol to coordinate the commitment of transactions <ref> [1, 4] </ref>. 2PC guarantees the atomicity of distributed transactions, that is, that all cohorts of a transaction either commit or abort the transaction. The cost of 2PC is an important factor in the performance of distributed transactions. * It requires multiple messages in multiple phases.
Reference: [5] <author> Lomet, D. </author> <title> Using Timestamps to Optimize Two Phase Commit. </title> <booktitle> Proceedings of the PDIS Conference, </booktitle> <address> San Diego, CA (Jan 1993), </address> <pages> 48-55. </pages>
Reference-contexts: All our optimizations occur within the coordinator. Externally, the message and cohort protocols are those usually associated with PrC in any event. Hence one cannot externally distinguish the coordinator behavior used for logging any given transaction. 6.2 Transaction Timestamping In <ref> [5] </ref>, timestamped voting was used both to optimize 2PC and to provide each committed transaction with a timestamp that agrees with transaction serialization. This guarantees serializability even when transaction termination is not guaranteed, while permitting the read-only and other optimizations. <p> No form of presumed commit can be used. 6.2.2 Timestamps Only for Commit Protocol So long as databases are using transaction times-tamps not to timestamp data but solely as part of the commit protocol <ref> [5] </ref>, it is not necessary to remember the timestamp of a committed transaction. The coordinator will have sent its COMMIT message with a timestamp that is within the bounds set by the timestamp ranges of all cohorts.
Reference: [6] <author> Lomet, D. and Salzberg, B. </author> <title> Access Methods for Multiversion Data. </title> <booktitle> Proc. ACM SIGMOD Conference, </booktitle> <address> Portland, OR (June 1989), </address> <pages> 315-324. </pages>
Reference-contexts: There are two cases that we need to consider. 6.2.1 Timestamps for Versioned Data To support transaction-time databases in which versions of data are timestamped with the commit time of the transaction <ref> [6, 7] </ref>, it is no longer sufficient to know only that a transaction has committed. We must know its commit timestamp as well. This means that we cannot presume commit since we cannot presume the timestamps.
Reference: [7] <author> Lomet, D. and Salzberg, B. </author> <title> Transaction-time Databases. In Temporal Databases: Theory, Design, </title> <editor> and Implementation (A. Tansel et al., editors), A. </editor> <publisher> Benjamin Cummings, </publisher> <address> Redwood City, CA (Jan 1993). </address>
Reference-contexts: There are two cases that we need to consider. 6.2.1 Timestamps for Versioned Data To support transaction-time databases in which versions of data are timestamped with the commit time of the transaction <ref> [6, 7] </ref>, it is no longer sufficient to know only that a transaction has committed. We must know its commit timestamp as well. This means that we cannot presume commit since we cannot presume the timestamps.
Reference: [8] <author> Mohan, C. and Lindsay, B. </author> <title> Efficient Commit Protocols for the Tree of Processes Model of Distributed Transactions. </title> <booktitle> Proc. 2nd Symposium on Principles of Distributed Computing, </booktitle> <address> Montreal, CA (Aug. </address> <year> 1983). </year>
Reference-contexts: The protocol that results from exploiting this new approach to recovery of the protocol database is described in section 5. Finally, we discuss the virtues and limitations of this approach to 2PC optimization in section 6. 2 Two Phase Commit Commit coordination and its optimizations are discussed thoroughly in <ref> [3, 8, 9] </ref>. We recap this discussion here, beginning with a description of the basic version of two phase commit. In this version the coordinator requires very explicit information, which is why it is often called the "presumed nothing" proto-col or PrN. <p> So long as the log record advancing tid l is written after the transaction initiation record, there are no additional log forces. When a coordinator in the tree of processes transaction model receives a tid that is below its tid l it acts like a PrC coordinator (see <ref> [8] </ref>). That is, it forces an initiation record to its log before continuing with this transaction, and in particular before forwarding this tid to other cohorts. The important point is that the vast majority of transactions will not need initiation records and hence will save the log writes.
Reference: [9] <author> Mohan, C., Lindsay, B. and Obermark, R. </author> <title> Transaction Management in the R* Distributed Database Management System. </title> <journal> ACM Trans. Database Systems 11, </journal> <volume> 4 (Dec. 86), </volume> <pages> 378-396. </pages>
Reference-contexts: The protocol that results from exploiting this new approach to recovery of the protocol database is described in section 5. Finally, we discuss the virtues and limitations of this approach to 2PC optimization in section 6. 2 Two Phase Commit Commit coordination and its optimizations are discussed thoroughly in <ref> [3, 8, 9] </ref>. We recap this discussion here, beginning with a description of the basic version of two phase commit. In this version the coordinator requires very explicit information, which is why it is often called the "presumed nothing" proto-col or PrN. <p> In response, each cohort does two log writes, a prepare record and a commit record (both forced), and sends two messages, a COMMIT-VOTE and a final ACK. These are tabulated in Table 1, which is similar to the table in <ref> [9] </ref>. 2PC Coordinator Cohort Variant Updt Trans RO Trans Updt RO m; n; p m; n m; n; q m; n; q PrA 2, 1, 2 0, 0 2, 2, 2 0, 0, 1 NPrC 1, 1, 2 0, 0 2, 1, 1 0, 0, 1 Table 1: The message and <p> Given our prior approach, tid l cannot be advanced past this trans action's tid. * A transaction is very long-lived. While it is active, it prevents tid l from being advanced past its tid. * In the tree of processes model of transactions <ref> [9] </ref>, a coordinator at one level of the transaction tree can be a cohort at the next higher level. Such a coordinator as cohort does not control the issuing of tids. Hence, this coordinator may receive a tid that is earlier than its current tid l .
Reference: [10] <author> Samaras, G., Britton, K., Citron, A., and Mo-han, C. </author> <title> Two-Phase Commit Optimizations and Tradeoffs in the Commercial Environment. </title> <booktitle> Proc. Data Engineering Conference, </booktitle> <address> Vienna, Austria (Feb. </address> <year> 1993). </year>
Reference-contexts: In this version the coordinator requires very explicit information, which is why it is often called the "presumed nothing" proto-col or PrN. This is in contrast to optimized versions that do make presumptions about missing information. (Note, however, that in fact, PrN makes presumptions in some cases <ref> [10] </ref>.) 2.1 The Protocol Messages To commit a distributed transaction, PrN requires two messages from coordinator to cohort and two messages from cohort to coordinator, or four messages in all. The protocol has the following steps: 1.
References-found: 10

