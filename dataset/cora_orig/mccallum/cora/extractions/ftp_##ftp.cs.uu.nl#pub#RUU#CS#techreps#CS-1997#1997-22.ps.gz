URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-22.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Visualization of TINs  
Author: Mark de Berg 
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands.  
Affiliation: Department of Computer Science, Utrecht University,  
Abstract: Geographic information systems often represent terrains, or other height fields, by triangulated irregular networks (TINs). The visualization of TINs is therefore a task any GIS has to be able to perform. This survey paper discusses two aspects of this task: the hidden-surface removal problem, which is to determine which parts of the TIN are visible from a given view point, and the computation of data structures that allow the extraction of representations of the TIN at different levels of detail.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal and M. Sharir. </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK, </address> <year> 1995. </year> <month> 15 </month>
Reference-contexts: To be precise, it is at most O (n -ff (n - )), where n is the number of triangles in T (-) and where ff () denotes the extremely slowly growing functional inverse of Ackermann's function <ref> [1] </ref>.
Reference: [2] <author> M. de Berg. </author> <title> Ray Shooting, Depth Orders and Hidden Surface Removal. </title> <booktitle> Lecture Notes in Computer Science 703, </booktitle> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: We now describe how to compute a depth order for the triangles in a TIN <ref> [2] </ref>. Let's first define more precisely what a depth order is. Assume that we want to compute a parallel view of the TIN, and let ~ d denote the viewing direction. <p> Such algorithms will be faster when k is small. Dorward [13] gives an extensive overview of output-sensitive hidden-surface-removal algorithms, and de Berg's book <ref> [2] </ref> also contains an ample discussion of object-space hidden-surface removal. In the following, we shall concentrate on algorithms that are especially efficient for TINs. To simplify the description of the algorithms we assume that we want to compute a parallel view of the TIN.
Reference: [3] <author> M. de Berg and K.T. Dobrindt. </author> <title> On levels of detail in terrains. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages C26-C27, </pages> <year> 1995. </year>
Reference-contexts: Then we have a problem, because the children of the light grey triangle overlap with the dark grey triangle. De Berg and Dobrindt <ref> [3] </ref> have shown that if the hierarchy is constructed in a slightly different manner, then it is still possible to extract a variable-resolution representation. Their idea is to construct the hierarchy as follows. They start with the most detailed level, remove a subset of the vertices and retriangulate.
Reference: [4] <author> M. de Berg, M. van Kreveld, M. Overmars, and O. Schwarzkopf. </author> <title> Computational Geometry: Algorithms and Applications. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1997. </year>
Reference-contexts: Let G T denote the dual graph of the TIN. This graph has a node for every triangle, and there is an arc between two nodes if the corresponding triangles are adjacent. Assuming the TIN is stored in a suitable topological structure|a doubly-connected edge list <ref> [4, 26] </ref> for 5 instance|this graph is readily available. <p> An elegant way to implement the painter's algorithm for arbitrary scenes is to use BSP trees. A depth order for the scene can now be obtained by a traversal of the BSP tree <ref> [4, 17] </ref>. 3.2 Object-space methods Image-space methods compute the view of a scene pixel by pixel. This means that the `structure' of the view is lost. Object-space algorithms compute a combinatorial representation of the view. Let's be more precise about this. <p> Skinny triangles can cause robustness and aliasing problems. The second category uses the Delaunay triangulation [26] of the set of data points at every level. This triangulation has the nice property that it maximizes the minimum angle of the triangles <ref> [4] </ref>. Thus robustness and aliasing problems are reduced.
Reference: [5] <author> Z. Chen and J. A. Guevara. </author> <title> System selection of very important points (VIP) from digital terrain model for constructing triangular irregular networks. </title> <booktitle> In Proc. 8th Internat. Sympos. Comput.-Assist. Cartog. (Auto-Carto), </booktitle> <pages> pages 50-56, </pages> <year> 1988. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains <ref> [16, 5, 21, 24] </ref>. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [6] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: Computing a topological order on a directed acyclic graph can be done in O (V + E) time, where V and E are the number of nodes and arcs of the graph, respectively <ref> [6] </ref>. In our case the number of nodes equals the number of triangles, and the number of arcs is at most three times this number, because a triangle is adjacent to at most three other triangles.
Reference: [7] <author> L. De Floriani. </author> <title> A pyramidal data structure for triangle-based surface representation. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 9 </volume> <pages> 67-78, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: An example of such a hierarchy is the Delaunay pyramid <ref> [7] </ref>, which is obtained by always adding the data point with the maximal error and retriangulating using the Delaunay criterion. Fig. 18 shows a two-level hierarchy of this type.
Reference: [8] <author> L. De Floriani, B. Falcidieno, G. Nagy, and C. Pienovi. </author> <title> On sorting triangles in a Delaunay tessellation. </title> <journal> Algorithmica, </journal> <volume> 6 </volume> <pages> 522-532, </pages> <year> 1991. </year>
Reference-contexts: If the triangles in the TIN form a Delaunay triangulation, then one 6 p view can prove that there are no cycles <ref> [8] </ref>. The approach we sketched above does not work for arbitrary 3-dimensional scenes. The problem is that the projections of the objects in an arbitrary scene are not necessarily disjoint, unlike for TINs. An elegant way to implement the painter's algorithm for arbitrary scenes is to use BSP trees.
Reference: [9] <author> L. De Floriani, B. Falcidieno, G. Nagy, and C. Pienovi. </author> <title> Hierarchical structure for surface approximation. Comput. Graph. </title> <journal> (UK), </journal> <volume> 8(2) </volume> <pages> 183-193, </pages> <year> 1984. </year>
Reference-contexts: We now turn our attention to multiresolution models for TINs. These models can be subdivided into two categories. In the first category one starts with a triangulation of a small subset of the data points <ref> [9, 25] </ref>. This is the coarsest representation. To obtain the next level, the triangles are refined by adding new data points inside them and retriangulating each triangle with its new interior points. Thus each triangle is replaced by a number of smaller triangles.
Reference: [10] <author> L. De Floriani, P. Marzano, and E. Puppo. </author> <title> Hierarchical terrain models: Survey and formalization. </title> <booktitle> In Proc. ACM Sympos. </booktitle> <institution> Applied Comput., </institution> <year> 1994. </year>
Reference-contexts: The idea of multiresolution models is quite old, and work on it is scattered over literature in graphics, GIS, and other areas. Heckbert and Garland [18] and De Floriani et al. <ref> [10] </ref> give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree [29, 28]. <p> The examples we gave above should give a fairly good idea of the issues involved. Readers who want to know more should consult the survey papers by Heckbert and Garland [18] and by De Floriani et al. <ref> [10] </ref>.
Reference: [11] <author> L. De Floriani and E. Puppo. </author> <title> A hierarchical triangle-based model for terrain description. </title> <booktitle> In Proc. Internat. Conf. GIS: Theory and Methods of Spatio-temporal Reasoning in Geographic Space, Lecture Notes in Computer Science, </booktitle> <pages> pages 236-251. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Unfortunately, tree-like hierarchies have a serious drawback: the triangles at higher detail levels are very skinny, because the edges of the initial triangulation remain present at more detailed levels. (There are methods that try to avoid this by adding extra points on the edges of the triangles <ref> [30, 11] </ref>. The problem with this approach is that the introduction of extra vertices on the edges may cause slivers.) This effect is already apparent in the two-level hierarchy of Fig. 17. Skinny triangles can cause robustness and aliasing problems.
Reference: [12] <author> F. Devai. </author> <title> Quadratic bounds for hidden line elimination. </title> <booktitle> In Proc. 2nd Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 269-275, </pages> <year> 1986. </year>
Reference-contexts: This implies that any object-space hidden-surface-removal algorithm must take (n 2 ) time in the worst case. There are algorithms with an O (n 2 ) running time <ref> [12, 22] </ref>, which are thus optimal in the worst case. But obviously the worst case (a quadratic-size visibility map) usually does not occur in practice.
Reference: [13] <author> S. E. Dorward. </author> <title> A survey of object-space hidden surface removal. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4 </volume> <pages> 325-362, </pages> <year> 1994. </year>
Reference-contexts: Hence, it is useful to try and find output-sensitive algorithms: algorithms whose running time not only depends on n, the number of input triangles, but also on k, the complexity of the output (the visibility map in our case). Such algorithms will be faster when k is small. Dorward <ref> [13] </ref> gives an extensive overview of output-sensitive hidden-surface-removal algorithms, and de Berg's book [2] also contains an ample discussion of object-space hidden-surface removal. In the following, we shall concentrate on algorithms that are especially efficient for TINs.
Reference: [14] <author> Nira Dyn, David Levin, and Samuel Rippa. </author> <title> Data dependent triangulations for piecewise linear interpolation. </title> <journal> IMA Journal of Numerical Analysis, </journal> <volume> 10 </volume> <pages> 137-154, </pages> <year> 1990. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces <ref> [19, 14] </ref> or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model.
Reference: [15] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: A more extensive treatment of these and many more topics in computer graphics can be found in the book by Foley et al. <ref> [15] </ref>, or any other good graphics textbook. A computer screen is composed of a large number of small dots, called pixels, which are arranged in a regular grid. The grid-size, or resolution, is typically about 1000 fi 1000, resulting in a total of about 1; 000; 000 pixels. <p> Readers interested in these more advanced topics should consult the general graphics literature dealing with realistic rendering|Chapters 14-16 of Computer Graphics: Principles and Practice <ref> [15] </ref> are a good starting point.
Reference: [16] <author> R. J. Fowler and J. J. Little. </author> <title> Automatic extraction of irregular network digital terrain models. </title> <journal> Comput. Graph., </journal> <volume> 13(2) </volume> <pages> 199-207, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains <ref> [16, 5, 21, 24] </ref>. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [17] <author> H. Fuchs, Z. M. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Comput. Graph., </journal> <volume> 14(3) </volume> <pages> 124-133, </pages> <year> 1980. </year> <note> Proc. SIGGRAPH '80. </note>
Reference-contexts: An elegant way to implement the painter's algorithm for arbitrary scenes is to use BSP trees. A depth order for the scene can now be obtained by a traversal of the BSP tree <ref> [4, 17] </ref>. 3.2 Object-space methods Image-space methods compute the view of a scene pixel by pixel. This means that the `structure' of the view is lost. Object-space algorithms compute a combinatorial representation of the view. Let's be more precise about this.
Reference: [18] <author> P. S. Heckbert and M. </author> <title> Garland. Multiresolution modeling for fast rendering. </title> <booktitle> In Proc. Graphics Interface '94, </booktitle> <pages> pages 43-50. </pages> <institution> Canadian Inf. Proc. Soc., </institution> <year> 1994. </year> <month> 16 </month>
Reference-contexts: This means that the levels cannot be completely independent, as it should be possible to glue them together smoothly. The idea of multiresolution models is quite old, and work on it is scattered over literature in graphics, GIS, and other areas. Heckbert and Garland <ref> [18] </ref> and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree [29, 28]. <p> The examples we gave above should give a fairly good idea of the issues involved. Readers who want to know more should consult the survey papers by Heckbert and Garland <ref> [18] </ref> and by De Floriani et al. [10].
Reference: [19] <author> H. Hoppe, T. DeRose, T. Duchamp, J. McDonald, and W. Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> In Proc. SIGGRAPH '93, </booktitle> <pages> pages 19-26, </pages> <year> 1993. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces <ref> [19, 14] </ref> or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model.
Reference: [20] <author> M. J. Katz, M. H. Overmars, and M. Sharir. </author> <title> Efficient hidden surface removal for objects with small union size. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2 </volume> <pages> 223-234, </pages> <year> 1992. </year>
Reference-contexts: This leads to an algorithm with a running time of O ((n + k) log n log log n), where k is the complexity of the visibility map. Another approach is described by Katz et al. <ref> [20] </ref>. We now describe their method in more detail. Let T be a collection of triangles in 3-space. In our case the triangles form a TIN, but the method of Katz et al. works for any set of triangles (or other objects) provided that a depth order exists.
Reference: [21] <author> J. Lee. </author> <title> A drop heuristic conversion method for extracting irregular networks for digital elevation models. </title> <booktitle> In Proc. of GIS/LIS '89, </booktitle> <pages> pages 30-39, </pages> <year> 1989. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains <ref> [16, 5, 21, 24] </ref>. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [22] <author> M. McKenna. </author> <title> Worst-case optimal hidden-surface removal. </title> <journal> ACM Trans. Graph., </journal> <volume> 6 </volume> <pages> 19-28, </pages> <year> 1987. </year>
Reference-contexts: This implies that any object-space hidden-surface-removal algorithm must take (n 2 ) time in the worst case. There are algorithms with an O (n 2 ) running time <ref> [12, 22] </ref>, which are thus optimal in the worst case. But obviously the worst case (a quadratic-size visibility map) usually does not occur in practice.
Reference: [23] <author> M.E. Newell, R.G. Newell, and T.L. Sancha. </author> <title> A solution to the hidden surface problem. </title> <booktitle> In Proc. ACM Natl. Conf., </booktitle> <pages> pages 443-450, </pages> <year> 1972. </year>
Reference-contexts: The Z-buffer algorithm is easy to implement, and any graphics workstation provides it, often in hardware. Nevertheless, there are situations where other approaches can be superior. In the next two subsections we describe two such approaches. 3.1 Depth-sorting methods Depth-sorting methods <ref> [23] </ref> for hidden-surface removal scan-convert the objects in a back-to-front order, instead of in arbitrary order as the z-buffer algorithm does. This means that whenever an object is scan-converted, we know it is in front of all objects scan-converted thusfar.
Reference: [24] <author> Michael F. Polis and David M. McKeown, Jr. </author> <title> Issues in iterative TIN generation to support large scale simulations. </title> <booktitle> Proc. of 11th Intl. Symp. on Computer Assisted Cartography, </booktitle> <year> 1993. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains <ref> [16, 5, 21, 24] </ref>. The best known hierarchical data structure is probably the quadtree [29, 28]. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [25] <author> J. Ponce and O. Faugeras. </author> <title> An object centered hierarchical representation for 3d objects: the prism tree. </title> <journal> Comput. Graphics and Image Proc., </journal> <volume> 38(1) </volume> <pages> 1-28, </pages> <year> 1987. </year>
Reference-contexts: We now turn our attention to multiresolution models for TINs. These models can be subdivided into two categories. In the first category one starts with a triangulation of a small subset of the data points <ref> [9, 25] </ref>. This is the coarsest representation. To obtain the next level, the triangles are refined by adding new data points inside them and retriangulating each triangle with its new interior points. Thus each triangle is replaced by a number of smaller triangles.
Reference: [26] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Let G T denote the dual graph of the TIN. This graph has a node for every triangle, and there is an arc between two nodes if the corresponding triangles are adjacent. Assuming the TIN is stored in a suitable topological structure|a doubly-connected edge list <ref> [4, 26] </ref> for 5 instance|this graph is readily available. <p> The problem with this approach is that the introduction of extra vertices on the edges may cause slivers.) This effect is already apparent in the two-level hierarchy of Fig. 17. Skinny triangles can cause robustness and aliasing problems. The second category uses the Delaunay triangulation <ref> [26] </ref> of the set of data points at every level. This triangulation has the nice property that it maximizes the minimum angle of the triangles [4]. Thus robustness and aliasing problems are reduced.
Reference: [27] <author> J. H. Reif and S. Sen. </author> <title> An efficient output-sensitive hidden-surface removal algorithms and its parallelization. </title> <booktitle> In Proc. 4th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 193-200, </pages> <year> 1988. </year>
Reference-contexts: A triangle t is now handled as follows. First, the visible portion of t is determined by computing which part of its projection lies outside the current contour. Next, the contour is updated by computing the union of the current contour and t|see Fig. 10. Reif and Sen <ref> [27] </ref> have shown that the contour can be stored in such a way that both tasks|computing the visible portion of the triangle t and computing the new contour|can be performed in O ((k t + 1) log n log log n) 8 visible part of t = old contour = new
Reference: [28] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree <ref> [29, 28] </ref>. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [29] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Heckbert and Garland [18] and De Floriani et al. [10] give nice surveys of many of the existing multiresolution techniques. A related problem is the problem of simplifying general surfaces [19, 14] or terrains [16, 5, 21, 24]. The best known hierarchical data structure is probably the quadtree <ref> [29, 28] </ref>. Although quadtrees are based on regular grids, not on TINs, we discuss them briefly because they are so widely used as multiresolution model. Fig. 15 shows a three-level hierarchy based on a quadtree.
Reference: [30] <author> L. Scarlatos and T. Pavlidis. </author> <title> Adaptive hierarchical triangulation. </title> <booktitle> In Proc. 10th Internat. Sympos. Comput.-Assist. Cartog. (Auto-Carto), </booktitle> <pages> pages 234-246, </pages> <year> 1990. </year>
Reference-contexts: Unfortunately, tree-like hierarchies have a serious drawback: the triangles at higher detail levels are very skinny, because the edges of the initial triangulation remain present at more detailed levels. (There are methods that try to avoid this by adding extra points on the edges of the triangles <ref> [30, 11] </ref>. The problem with this approach is that the introduction of extra vertices on the edges may cause slivers.) This effect is already apparent in the two-level hierarchy of Fig. 17. Skinny triangles can cause robustness and aliasing problems.
Reference: [31] <author> I. E. Sutherland, R. F. Sproull, and R. A. Schumacker. </author> <title> A characterization of ten hidden-surface algorithms. </title> <journal> ACM Comput. Surv., </journal> <volume> 6(1) </volume> <pages> 1-55, </pages> <month> March </month> <year> 1974. </year> <month> 17 </month>
Reference-contexts: This is illustrated in Fig. 3, where the light grey triangle hides part of the dark grey triangle. Computing what is visible of a given scene and what is hidden is called hidden-surface removal. 3 Hidden-surface removal There are two major approaches to perform hidden-surface removal <ref> [31] </ref>. One is to first determine which part of each object is visible, and then project and scan-convert only the visible parts. Algorithms using this approach are called object-space algorithms. We shall discuss some of these algorithms in Section 3.2.
References-found: 31

