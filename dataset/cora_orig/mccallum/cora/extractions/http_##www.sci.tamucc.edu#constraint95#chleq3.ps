URL: http://www.sci.tamucc.edu/constraint95/chleq3.ps
Refering-URL: http://www.sci.tamucc.edu/constraint95/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Ecient Algorithms for Networks of Quantitative Temporal Constraints  
Author: Nicolas Chleq 
Address: BP 93 06902 Sophia Antipolis Cedex France  
Affiliation: INRIA Sophia Antipolis CERMICS  
Abstract: This paper describes two algorithms for networks of quantitative temporal constraints. The trst one is an incremental algorithm for checking the consistency of a set of constraints: it is based on the directional path consistency property, and it is a complete algorithm. The second algorithm relies on a property of shortest paths in a directional path consistent network. We prove this property and present an ecient linear-time algorithm that has a lower cost than usual shortest-path algorithm such as Bellman-Ford algorithm. These two algorithms form a complete system for managing quantita tive temporal relationships.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Nicolas Chleq. </author> <title> Using constrained resolution for abductive temporal reasoning. </title> <booktitle> In Proc. of TIME'94, </booktitle> <pages> pages 5459, </pages> <address> Pensacola, Florida, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Such temporal constraints are interesting because consistency can be decided in polynomial time [7]. An important requirement for the practical use of a consistecy checking algorithm is its incrementality, for example, when using a CLP-like resolution principle <ref> [1] </ref>. <p> These two algorithms form a complete system for dealing with quantitative temporal relationships. They are actually used inside a temporal reasoning system which implements an abductive proof procedure based on constrained resolution <ref> [1] </ref> and suitable for use with point based temporal formalisms, such as the Event Calculus [5] or some reited temporal logics [6].
Reference: [2] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: When examining node 3, the inconsistency is discovered by updating the edge (1; 2). Due to the principles of the algorithm, there exists some dependency relationships between constraints: constraint [5; 0] on the edge (3; 4) depends on edges (4; 5) and (3; 5); constraint <ref> [0; 2] </ref> on (2; 3) depends on (3; 4) and (2; 4), and so on. <p> If the original graph was consistent, e.g. the constraint T 1;2 is <ref> [2; 2] </ref>, and if a new edge is added to the graph, for example between 1 and 4, this new edge can only change constraints on edges (1; 2) and (1; 3), and on other constraints depending on these. <p> The queue Q can be implemented as a binary heap <ref> [2] </ref>, which allows a O (log n) time complexity both to add a node in the queue, and to extract the maximal node with respect to , where n is the current size of the binary heap.
Reference: [3] <author> Rina Dechter, Itay Meiri, and Judea Pearl. </author> <title> Temporal constraints networks. </title> <journal> Artitcial Intelligence, </journal> <volume> 49:6195, </volume> <year> 1991. </year>
Reference-contexts: In section 3 we propose an incremental algorithm to check the consistency of a set of quantitative temporal constraints between points. This algorithm extends some work done in <ref> [3] </ref>. Contrary to usual algorithms for temporal constraints, our algorithm does not compute the minimal relation between any two points in the network. <p> Thus, these two algorithms form a complete system for managing quantitative temporal relationships. 2 Quantitative temporal constraints The formalism of quantitative temporal constraints has been studied in <ref> [3] </ref>. Constraints are binary relations relating two points and labelled with an interval. Such a constraint, written x : [a; b] : y, where x and y are time points and a and b are numbers, is equivalent to the relationship a y x b. <p> A conjonction of these constraints form a network of binary constraints where nodes are time points and edges are labelled with the interval of the constraint. Such a network, where each edge has a unique interval, is called a Simple Temporal Problem (STP) in <ref> [3] </ref>. The consistency of such a network can be decided in polynomial time using constraint propagation algorithms such as PC-2. The complexity of this particular algorithm is O (n 3 ) where n is the number of nodes in the network. <p> composition (ffi) and intersection (^) operators between two constraints: (x : [a; b] : y) ffi (y : [c; d] : z) (x : [a; b] : y) ^ (x : [c; d] : y) There exists a more ecient way to check the consistency of an STP network, and <ref> [3] </ref> gives a complete algorithm which runs in O (nW 2 ) where W is the average number of edges connected to a node in the network. This algorithm enforces a restricted form of path consistency, known as directional path consistency (dPC). <p> The algorithm in Figure 1 is given by <ref> [3] </ref> and can be used to enforce the -dPC property on a network (V; E). It is shown in [3] that this algorithm is complete for checking the consistency of an STP network, and that the ordering can be any total ordering of Number of nodes Running time (sec.) 10 0.01 <p> The algorithm in Figure 1 is given by <ref> [3] </ref> and can be used to enforce the -dPC property on a network (V; E). It is shown in [3] that this algorithm is complete for checking the consistency of an STP network, and that the ordering can be any total ordering of Number of nodes Running time (sec.) 10 0.01 30 0.098 50 0.37 Table 1: Average running time of the algorithm DPC (Algorithm 1) vs the number of <p> These shortest paths are computed in the distance graph associated to the set of constraints <ref> [3] </ref>. This distance graph has the same node set as the network of constraints, and each edge (x; y) is labelled by a number a, which represents the constraint y x a. <p> The minimal relation can be computed from the set of initial constraints by applying an algorithm such as Floyd-Warshall all-pairs-shortest-paths [4] to the distance graph. Applying this algorithm to the distance graph is equivalent to apply the constraint propagation algorithm PC-1 on the network of constraints <ref> [3] </ref>, and in turn is equivalent to use the algorithm PC-2 on the same network. It is also possible to use a single-source-shortest-path algorithm, such as the Bellman-Ford algorithm, on the distance graph.
Reference: [4] <author> Robert W. Floyd. </author> <title> Algorithm 97 (shortest path). </title> <journal> Communications of the ACM, </journal> <volume> 5(6):345, </volume> <year> 1962. </year>
Reference-contexts: The minimal relation can be computed from the set of initial constraints by applying an algorithm such as Floyd-Warshall all-pairs-shortest-paths <ref> [4] </ref> to the distance graph. Applying this algorithm to the distance graph is equivalent to apply the constraint propagation algorithm PC-1 on the network of constraints [3], and in turn is equivalent to use the algorithm PC-2 on the same network.
Reference: [5] <author> R. Kowalski and M. Sergot. </author> <title> A logic-based calculus of events. New Generation Computing, </title> <address> 4:6795, </address> <year> 1986. </year>
Reference-contexts: DPC algorithm. The initial graph is inconsistent, because the cycle f1; 3; 5; 4; 2g has a negative length 1. When examining node 3, the inconsistency is discovered by updating the edge (1; 2). Due to the principles of the algorithm, there exists some dependency relationships between constraints: constraint <ref> [5; 0] </ref> on the edge (3; 4) depends on edges (4; 5) and (3; 5); constraint [0; 2] on (2; 3) depends on (3; 4) and (2; 4), and so on. <p> These two algorithms form a complete system for dealing with quantitative temporal relationships. They are actually used inside a temporal reasoning system which implements an abductive proof procedure based on constrained resolution [1] and suitable for use with point based temporal formalisms, such as the Event Calculus <ref> [5] </ref> or some reited temporal logics [6].
Reference: [6] <author> Yoav Shoham. </author> <title> Temporal logics in AI: Semantical and ontological considerations. </title> <journal> Artitcial Intelligence, </journal> <volume> 33:89104, </volume> <year> 1987. </year>
Reference-contexts: They are actually used inside a temporal reasoning system which implements an abductive proof procedure based on constrained resolution [1] and suitable for use with point based temporal formalisms, such as the Event Calculus [5] or some reited temporal logics <ref> [6] </ref>.
Reference: [7] <author> Marc Vilain and Henry Kautz. </author> <title> Constraint propagation algorithms for temporal reasoning. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pages 377382, </pages> <address> Philadelphia, PA, </address> <year> 1986. </year>
Reference-contexts: In this article we shall restrain to point based temporal relations, i.e. relations describing the order between any two instants. Such temporal constraints are interesting because consistency can be decided in polynomial time <ref> [7] </ref>. An important requirement for the practical use of a consistecy checking algorithm is its incrementality, for example, when using a CLP-like resolution principle [1].
References-found: 7

