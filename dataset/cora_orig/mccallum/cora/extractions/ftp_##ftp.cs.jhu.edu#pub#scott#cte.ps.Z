URL: ftp://ftp.cs.jhu.edu/pub/scott/cte.ps.Z
Refering-URL: http://www.cs.jhu.edu/labs/pll/home.html
Root-URL: http://www.cs.jhu.edu
Title: Constrained Types and their Expressiveness  
Author: Jens Palsberg Scott Smith 
Date: October 4, 1995  
Abstract: In this paper we prove that for a language without polymorphism, constrained types accept the same programs as the type system of Amadio and Cardelli with subtyping and recursive types. This result gives a precise connection between constrained types and the standard notion of type. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexander Aiken and Edward Wimmers. </author> <title> Type inclusion constraints and type inference. </title> <booktitle> In Proc. Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 31-41, </pages> <year> 1993. </year>
Reference-contexts: Other forms of constrained type are presented in <ref> [1, 3] </ref>. 4 Equivalence We now establish that the Amadio/Cardelli type system and the constrained type system are equivalent in power. To prove the result independently would be a significant effort, but using facts already proven in [7] and [5], it is not difficult.
Reference: [2] <author> Roberto M. Amadio and Luca Cardelli. </author> <title> Subtyping recursive types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 575-631, </pages> <year> 1993. </year> <note> Also in Proc. POPL'91. 11 </note>
Reference-contexts: Our example language is a -calculus generated by the grammar: E :: = x j x:E j E 1 E 2 j 0 j succ E : We prove that constrained types accept the same programs as the type system of Amadio and Cardelli with subtyping and recursive types <ref> [2] </ref>. <p> Instead of writing types in the syntax suggested above, we represent them as regular trees <ref> [2, 6] </ref>. Such trees are in turn represented by terms. Definition 2.1 Let = f!; Int; ?; &gt;g be the ranked alphabet where ! is binary and Int; ?; &gt; are nullary. A type is a regular tree over . <p> 1 ! and ! 1 ? and For s; t 2 T , define s t if s (ff) ff t (ff) for all ff 2 D (s) " D (t). 2 Kozen et al. [6] showed that the relation is equivalent to the order defined by Amadio and Cardelli <ref> [2] </ref>. The relation is a partial order, and if s ! t s 0 ! t 0 , then s 0 s and t t 0 [2, 6]. Next, we present the type rules. <p> The relation is a partial order, and if s ! t s 0 ! t 0 , then s 0 s and t t 0 <ref> [2, 6] </ref>. Next, we present the type rules. If E is a -term, t is a type, and A is a type environment, i.e., a partial function assigning types to variables, then the judgment A ` E : t means that E has the type t in the environment A. <p> In summary, we have proved our result. Corollary 4.6 A -term E is typable in the Amadio/Cardelli type system if and only if it is typable in the constrained type system. 5 Conclusion The Amadio/Cardelli type system <ref> [2] </ref>, a certain kind of flow analysis [7], and a simple constrained type system [5] accept the same programs, unifying three different views of typing. Acknowledgments We thank Trevor Jim for helpful comments on a draft of the paper.
Reference: [3] <author> Pavel Curtis. </author> <title> Constrained quantification in polymorphic type analysis. </title> <type> Technical Report CSL-90-1, </type> <institution> XEROX Palo Alto Research Center, </institution> <year> 1990. </year>
Reference-contexts: Other forms of constrained type are presented in <ref> [1, 3] </ref>. 4 Equivalence We now establish that the Amadio/Cardelli type system and the constrained type system are equivalent in power. To prove the result independently would be a significant effort, but using facts already proven in [7] and [5], it is not difficult.
Reference: [4] <author> J. Eifrig, S. Smith, and V. Trifonov. </author> <title> Sound polymorphic type inference for objects. </title> <booktitle> In Proc. OOPSLA'95, ACM SIGPLAN Tenth Annual Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <year> 1995. </year>
Reference-contexts: Technology Square, Cambridge, MA 02139; email: palsberg@theory.lcs.mit.edu. y Scott Smith, Department of Computer Science, The Johns Hopkins University, Balti more, Maryland 21218; email: scott@cs.jhu.edu. 1 When combined with universal quantification, such types enable efficient type inference for object-oriented languages with polymorphism and subtyp-ing, as demonstrated by Eifrig, Smith, and Trifonov <ref> [5, 4] </ref>. Until now, it has been unclear how expressive constrained types are. In this paper we characterize constrained types without universal quantification, that is, types of the form t n C where t is a simple type and C is a constraint system.
Reference: [5] <author> J. Eifrig, S. Smith, and V. Trifonov. </author> <title> Type inference for recursively constrained types and it application to OOP. </title> <booktitle> In Proc. Mathematical Foundations of Programming Semantics, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Technology Square, Cambridge, MA 02139; email: palsberg@theory.lcs.mit.edu. y Scott Smith, Department of Computer Science, The Johns Hopkins University, Balti more, Maryland 21218; email: scott@cs.jhu.edu. 1 When combined with universal quantification, such types enable efficient type inference for object-oriented languages with polymorphism and subtyp-ing, as demonstrated by Eifrig, Smith, and Trifonov <ref> [5, 4] </ref>. Until now, it has been unclear how expressive constrained types are. In this paper we characterize constrained types without universal quantification, that is, types of the form t n C where t is a simple type and C is a constraint system. <p> Type inference for the Amadio/Cardelli type system is computable in O (n 3 ) time, where n is the size of the -term [7]. Similarly, type inference for the constrained type system is computable in O (n 3 ) time <ref> [5] </ref>. The two systems accept the same programs as a certain flow analysis [7]. <p> In the proof of Lemma 4.2 below we will prove that certain derivations exist without considering the issue of consistency. Soundness of a more general set of rules than (7)-(12) is established in <ref> [5] </ref> by subject reduction, which establishes that if A ` c E : t n C and C is consistent, execution of E will not result in type errors. <p> Other forms of constrained type are presented in [1, 3]. 4 Equivalence We now establish that the Amadio/Cardelli type system and the constrained type system are equivalent in power. To prove the result independently would be a significant effort, but using facts already proven in [7] and <ref> [5] </ref>, it is not difficult. Given a -term E, we now describe how to generate a certain constraint system, found in [7]. Assume that E has been ff-converted so that all bound variables are distinct. <p> If C is a constraint system, then the restricted closure of C is the smallest restricted-closed constraint system which contains C. The restriction is to close only under transitivity through variables. The different definitions of closure are solely an artifact of slight differences of approach in the two papers <ref> [5, 7] </ref>. We will prove that the following five properties are equivalent: 1. E is typable in the Amadio/Cardelli type system. 2. The restricted closure of T (E) is solvable. 3. The restricted closure of T (E) is consistent. 4. T (E) is solvable. 5. T (E) is consistent. <p> Proof. Immediate from Lemma 4.2. 2 Together, Theorem 4.1 and 4.3 show that if E is typable in the Ama-dio/Cardelli type system, then it is also typable in the constrained type system. To prove the converse, we first present a new set of type rules, taken from <ref> [5] </ref>. <p> Theorem 4.4 If A ` c E : t n C is derivable and C is consistent, then there exists a constrained type t 0 n C 0 where C 0 is consistent, such that A ` i E : t 0 n C 0 is derivable. Proof. See <ref> [5] </ref>. 2 Theorem 4.5 If A ` i E : t n C is derivable and C is consistent, then T (E) is consistent. Proof. Consider a derivation of A ` i E : t n C, where C is consistent. <p> Corollary 4.6 A -term E is typable in the Amadio/Cardelli type system if and only if it is typable in the constrained type system. 5 Conclusion The Amadio/Cardelli type system [2], a certain kind of flow analysis [7], and a simple constrained type system <ref> [5] </ref> accept the same programs, unifying three different views of typing. Acknowledgments We thank Trevor Jim for helpful comments on a draft of the paper. The first author was supported by BRICS (Basic Research in Computer Science, Centre of the Danish National Research Foundation).
Reference: [6] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient recursive subtyping. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 5(1) </volume> <pages> 113-125, </pages> <year> 1995. </year> <note> Also in Proc. </note> <editor> POPL'93, </editor> <booktitle> Twentieth Annual SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 419-428, </pages> <address> Charleston, South Carolina, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: Instead of writing types in the syntax suggested above, we represent them as regular trees <ref> [2, 6] </ref>. Such trees are in turn represented by terms. Definition 2.1 Let = f!; Int; ?; &gt;g be the ranked alphabet where ! is binary and Int; ?; &gt; are nullary. A type is a regular tree over . <p> ? 0 ! and ! 0 &gt; and 3 Let 1 be its reverse &gt; 1 ! and ! 1 ? and For s; t 2 T , define s t if s (ff) ff t (ff) for all ff 2 D (s) " D (t). 2 Kozen et al. <ref> [6] </ref> showed that the relation is equivalent to the order defined by Amadio and Cardelli [2]. The relation is a partial order, and if s ! t s 0 ! t 0 , then s 0 s and t t 0 [2, 6]. Next, we present the type rules. <p> The relation is a partial order, and if s ! t s 0 ! t 0 , then s 0 s and t t 0 <ref> [2, 6] </ref>. Next, we present the type rules. If E is a -term, t is a type, and A is a type environment, i.e., a partial function assigning types to variables, then the judgment A ` E : t means that E has the type t in the environment A.
Reference: [7] <author> Jens Palsberg and Patrick M. O'Keefe. </author> <title> A type system equivalent to flow analysis. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(4) </volume> <pages> 576-599, </pages> <month> July </month> <year> 1995. </year> <note> Also in Proc. </note> <editor> POPL'95, </editor> <booktitle> 22nd Annual SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 367-378, </pages> <address> San Francisco, California, </address> <month> January </month> <year> 1995. </year> <month> 12 </month>
Reference-contexts: For instance, in this example no constraints are imposed on w in the constrained type derivation, so it may be any type and not just &gt;. Type inference for the Amadio/Cardelli type system is computable in O (n 3 ) time, where n is the size of the -term <ref> [7] </ref>. Similarly, type inference for the constrained type system is computable in O (n 3 ) time [5]. The two systems accept the same programs as a certain flow analysis [7]. <p> the Amadio/Cardelli type system is computable in O (n 3 ) time, where n is the size of the -term <ref> [7] </ref>. Similarly, type inference for the constrained type system is computable in O (n 3 ) time [5]. The two systems accept the same programs as a certain flow analysis [7]. In the following two sections we recall the definitions of the Amadio/Cardelli type system and the constrained type system, and in Section 4 we prove our result. 2 The Amadio/Cardelli type system We first define the notions of type and term. <p> Other forms of constrained type are presented in [1, 3]. 4 Equivalence We now establish that the Amadio/Cardelli type system and the constrained type system are equivalent in power. To prove the result independently would be a significant effort, but using facts already proven in <ref> [7] </ref> and [5], it is not difficult. Given a -term E, we now describe how to generate a certain constraint system, found in [7]. Assume that E has been ff-converted so that all bound variables are distinct. <p> To prove the result independently would be a significant effort, but using facts already proven in <ref> [7] </ref> and [5], it is not difficult. Given a -term E, we now describe how to generate a certain constraint system, found in [7]. Assume that E has been ff-converted so that all bound variables are distinct. <p> We say that C is solvable if it has a solution. Theorem 4.1 For a -term E, the following two conditions are equivalent: 1. E is typable in the Amadio/Cardelli type system. 2. T (E) is consistent. Proof. In <ref> [7] </ref> there is a notion of closure which we here will call restricted closure. It is defined as follows. <p> If C is a constraint system, then the restricted closure of C is the smallest restricted-closed constraint system which contains C. The restriction is to close only under transitivity through variables. The different definitions of closure are solely an artifact of slight differences of approach in the two papers <ref> [5, 7] </ref>. We will prove that the following five properties are equivalent: 1. E is typable in the Amadio/Cardelli type system. 2. The restricted closure of T (E) is solvable. 3. The restricted closure of T (E) is consistent. 4. T (E) is solvable. 5. T (E) is consistent. <p> We will prove that the following five properties are equivalent: 1. E is typable in the Amadio/Cardelli type system. 2. The restricted closure of T (E) is solvable. 3. The restricted closure of T (E) is consistent. 4. T (E) is solvable. 5. T (E) is consistent. In <ref> [7] </ref> it is proved that (1), (2), and (3) are equivalent. To prove (2) ) (4), suppose the restricted closure of T (E) has solution '. <p> In summary, we have proved our result. Corollary 4.6 A -term E is typable in the Amadio/Cardelli type system if and only if it is typable in the constrained type system. 5 Conclusion The Amadio/Cardelli type system [2], a certain kind of flow analysis <ref> [7] </ref>, and a simple constrained type system [5] accept the same programs, unifying three different views of typing. Acknowledgments We thank Trevor Jim for helpful comments on a draft of the paper.
References-found: 7

