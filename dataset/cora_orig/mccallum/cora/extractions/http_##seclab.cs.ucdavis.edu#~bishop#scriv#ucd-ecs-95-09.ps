URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/ucd-ecs-95-09.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~bishop/scriv/index.html
Root-URL: http://www.cs.ucdavis.edu
Title: Checking for Race Conditions in File Accesses  
Author: Matt Bishop and Michael Dilger 
Note: This document was created with FrameMaker 4.0.4  
Date: September 1995  
Pubnum: CSE-95-10  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Abbott, R. P., Chin, J. S., Donnelley, J. E., Konigsford, W. L., Tokubo, S., and Webb, D. A., </author> <title> Security Analysis and Enhancements of Computer Operating Systems, </title> <type> NBSIR 761041, </type> <institution> Institute for Computer Sciences and Technology, National Bureau of Standards (Apr. </institution> <year> 1976). </year>
Reference-contexts: Codification of techniques to examine systems began with the Flaw Hypothesis Methodology [12], and were extended by the Program Analysis (PA) project [3] and the Research Into Secure Operating Systems (RISOS) project <ref> [1] </ref>, which provided taxonomies for classifying vulnerabilities. Both these projects focussed on operating sys tems, and argued that the taxonomies were generic rather than specific to individual machines.
Reference: [2] <author> Bach, M. J., </author> <booktitle> The Design of the UNIX Operating System , Prentice-Hall, </booktitle> <address> Englewood Cliffs, NJ (1987). </address>
Reference: [3] <author> Bisbey, R. II and Hollingsworth, D., </author> <title> Protection Analysis Project Final Report, </title> <institution> ISI/RR-78-13, DTIC AD A056816, USC/Information Sciences Institute (May, </institution> <year> 1978). </year>
Reference-contexts: Codification of techniques to examine systems began with the Flaw Hypothesis Methodology [12], and were extended by the Program Analysis (PA) project <ref> [3] </ref> and the Research Into Secure Operating Systems (RISOS) project [1], which provided taxonomies for classifying vulnerabilities. Both these projects focussed on operating sys tems, and argued that the taxonomies were generic rather than specific to individual machines.
Reference: [4] <author> Denning, D., </author> <title> An Intrusion Detection Model, </title> <journal> IEEE Transactions on Software Engineering (2) pp. </journal> <month> 222232 (Feb. </month> <year> 1987). </year>
Reference-contexts: They backed this argument up by analyzing aws in several operating systems, and suggesting common underlying features of members of each class of aws. In some cases, they developed tools to aid in the analysis of operating systems. Dennings seminal intrusion detection paper <ref> [4] </ref> suggested automating detection of attacks, and her anomaly detection model was quickly joined by a misuse model of intrusion detection. This model, predicated on the fact that each attack can be described as a sequence of actions, examines system logs looking for those sequences of actions.
Reference: [5] <author> Fink, G. and Levitt, K., </author> <title> Property-Based Testing of Privileged Programs, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference , pp. </booktitle> <month> 154163 (Dec. </month> <year> 1994). </year>
Reference-contexts: This is closely related to the development of a testers toolkit <ref> [5] </ref>, which will provide tools and a library for assurance and testing in a more general realm. A Theory For Characterizing Vulnerabilities Characterization of vulnerabilities encompasses many levels of abstraction; for example, vulnerabilities may be introduced at the design level, the specification level, the implementation level, or the operational level. <p> However, the analysis tool is not the main contribution of this work; the main contribution is that such a tool can be derived from an appropriate characterization of the vulnerability. This augments the argument that <ref> [5] </ref>, [8], and others have made: that a realistic approach for locating security holes is to work from specifications and characterizations of potential errors or aws.
Reference: [6] <author> Garvey, T. D. and Lunt, T. F., </author> <title> Model-Based Intrusion Detection, </title> <booktitle> Proceedings of the Fourteenth National Computer Security Conference , pp. </booktitle> <address> 372385 (Oct. </address> <year> 1991). </year>
Reference: [7] <author> Kernighan, B. W. and Ritchie, D. M., </author> <title> The C Programming Language , Prentice Hall, </title> <address> Engle-wood Cliffs, NJ (1978). </address>
Reference: [8] <author> Ko, C., Fink, G., and Levitt, K., </author> <title> Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference , pp. </booktitle> <month> 134144 (Dec. </month> <year> 1994). </year>
Reference-contexts: However, the analysis tool is not the main contribution of this work; the main contribution is that such a tool can be derived from an appropriate characterization of the vulnerability. This augments the argument that [5], <ref> [8] </ref>, and others have made: that a realistic approach for locating security holes is to work from specifications and characterizations of potential errors or aws.
Reference: [9] <author> Kumar, S. and Spafford, E., </author> <title> A Pattern Matching Model for Misuse Intrusion Detection, </title> <booktitle> Proceedings of the Seventeenth National Computer Security Conference , pp. </booktitle> <address> 1121 (Oct. </address> <year> 1994). </year>
Reference-contexts: As an example, consider the attack described in <ref> [9] </ref> which allows a user to gain superuser (operator) privileges on some UNIX systems [13]. The steps are: 1. Copy a command interpreter to the superusers mailbox, which is implemented as an ordinary file; this works when the mail spool directory, which contains the mailboxes, is world writ able.
Reference: [10] <author> Landwehr, C. E., Bull, A. R., McDermott, J. P., and Choi, W. S., </author> <title> A Taxonomy of Computer Program Security Flaws, </title> <journal> Computing Surveys (3) pp. </journal> <month> 211255 (Sep. </month> <year> 1994). </year>
Reference-contexts: If found, a system security officer is notified that an attack may be (or may have been) occurring. This led to research into characterizing attacks on specific operating systems and environments, and into classifying attacks in general <ref> [10] </ref> Our work is related to earlier work in vulnerability analysis, and is similar to (but distinct from) attack analysis.
Reference: [11] <author> Lefer, S. J., McKusick, M. K., Karels, M. J., and Quarterman, J. S., </author> <title> The Design and Imple mentation of the 4.3 BSD UNIX Operating System , Addison-Wesley, </title> <address> Reading, MA (1989). </address>
Reference: [12] <author> Linde, R. R., </author> <title> Operating System Penetration, </title> <booktitle> 1975 National Computer Conference Proceedings AFIPS Conference Proceedings ), pp. </booktitle> <month> 361368 (May </month> <year> 1975). </year>
Reference-contexts: Background The analysis of systems for vulnerabilities has been a constant, ongoing effort since multiprocessing began; indeed, one motivation behind the use of memory protection was to prevent processes from writing to one anothers memory. Codification of techniques to examine systems began with the Flaw Hypothesis Methodology <ref> [12] </ref>, and were extended by the Program Analysis (PA) project [3] and the Research Into Secure Operating Systems (RISOS) project [1], which provided taxonomies for classifying vulnerabilities. Both these projects focussed on operating sys tems, and argued that the taxonomies were generic rather than specific to individual machines.
Reference: [13] <author> Ritchie, D. M. and Thompson, K., </author> <title> The UNIX Time-Sharing System, </title> <journal> Communications of the ACM (7) pp. </journal> <month> 365375 (July </month> <year> 1974). </year>
Reference-contexts: As an example, consider the attack described in [9] which allows a user to gain superuser (operator) privileges on some UNIX systems <ref> [13] </ref>. The steps are: 1. Copy a command interpreter to the superusers mailbox, which is implemented as an ordinary file; this works when the mail spool directory, which contains the mailboxes, is world writ able. Note this deletes any of the superusers mail by overwriting the mailbox. 2.
Reference: [14] <author> Scheier, R. W. and Gettys, J., </author> <title> The X Window System, </title> <journal> ACM Transactions on Graphics (2) pp. </journal> <month> 79109 (Apr. </month> <year> 1987). </year>
Reference-contexts: The characteriza tion of the vulnerability is: ( ( n , createdirfile ( allowed removedirfile ( not_owner direct_alias ( n , ch_owner root ( is_owner A second race condition aw occurs in the program xterm , a terminal emulator for the X Win dow System <ref> [14] </ref>. The attack is: ( ( allowed not_exist (/tmp/logfile) , createfile (/tmp/logfile, root ( n , removefile (/tmp/logfile, A ) ), ( n , direct_alias password_file , /tmp/logfile) ), ( n , ch_owner (A, /tmp/logfile, root The program xterm runs as the omnipotent user on many systems.
Reference: [15] <author> Tanenbaum, A. S., </author> <booktitle> Operating Systems Design and Implementation , Prentice-Hall, </booktitle> <publisher> Inc. </publisher> <year> (1987). </year> <title> SunOS 5.4 UNIX Users Manual , Sun Microsystems Inc. </title> <address> (Feb. 1993). [17] Sun Sendmail Vulnerability , CERT Advisory CA-90:01 (Jan. </address> <year> 1990), </year> <note> available from cert.org via anonymous ftp. Sendmail Vulnerability , CERT Advisory CA-93:16 (Nov. 1993), available from cert.org via anonymous ftp. Sendmail Vulnerability (Supplement) , CERT Advisory CA-93:16a (Jan. 1994), available from cert.org via anonymous ftp. Sendmail Vulnerabilities , CERT Advisory CA-94:12 (July 1994), available from cert.org via anonymous ftp. Sendmail Vulnerabilities , CERT Advisory CA-95:05 (Feb. 1995), available from cert.org via anonymous ftp. </note>
Reference-contexts: Derivation of the General Vulnerability Signature for Race Conditions Involv 1. Most systems, in fact, simply turn this bit off. ing Files under UNIX Consider now a slightly different attack, the mkdir attack from UNIX version 7 <ref> [15] </ref>. The attack is characterized with the following signature ( ( n , createdirfile (./temp, root ( allowed removedirfile (./temp, ( n , direct_alias password_file , ./temp) ), ( n , ch_owner (A, ./temp, root The command mkdir creates a directory.
References-found: 15

