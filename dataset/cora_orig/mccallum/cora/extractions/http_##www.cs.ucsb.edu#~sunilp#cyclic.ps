URL: http://www.cs.ucsb.edu/~sunilp/cyclic.ps
Refering-URL: http://www.cs.ucsb.edu/~sunilp/results.html
Root-URL: http://www.cs.ucsb.edu
Title: Cyclic Declustering of Two-Dimensional Data  
Author: Sunil Prabhakar Khaled Abdel-Ghaffar Divyakant Agrawal Amr El Abbadi 
Address: Santa Barbara Davis CA 93106, U.S.A. CA 95616, U.S.A.  
Affiliation: Department of Computer Science Department of Electrical Computer Engineering University of California University of California  
Abstract: Various proposals have been made for declustering two-dimensionally tiled data on multiple I/O devices. Recently in [AE97], it was shown that strictly optimal solutions only exist under very restrictive conditions on the tiling of the two-dimensional space or for very few I/O devices. In this paper we explore allocation methods where no strictly optimal solution exists. We propose a general class of allocation methods, referred to as cyclic declustering methods, and show that many existing methods are instances of this class. As a result, various seemingly ad hoc and unrelated methods are presented in a single framework. Furthermore, the framework is used to develop new allocation methods that give better performance than any previous method and that approach the best feasible performance.
Abstract-found: 1
Intro-found: 1
Reference: [AE97] <author> K. A. S. Abdel-Ghaffar and A. El Abbadi. </author> <title> Optimal allocation of two-dimensional data. </title> <booktitle> In International Conference on Database Theory, </booktitle> <pages> pages 409-418, </pages> <address> Delphi, Greece, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Many of these were made in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data). Recently in <ref> [AE97] </ref>, it was shown that strictly optimal solutions (defined shortly) for rectangular queries exist only under very restrictive conditions on the tiling or for very few I/O devices (namely 1,2,3 and 5). In this paper we explore allocation methods where no strictly optimal solution exists. <p> The minimum possible cost when retrieving A tiles distributed over M devices is d A M e. An allocation policy is said to be strictly optimal if no rectangular area A has more than d A M e tiles allocated to the same device. In <ref> [AE97] </ref>, the necessary and sufficient conditions for the existence of strictly optimal allocation schemes are derived. <p> M N 1 N 2 2, or M=8, and N 1 =N 2 =4, or M=N 1 N 2 4 and minfN 1 ; N 2 g = 3). Strictly optimal allocations for each of these cases are also defined in <ref> [AE97] </ref>. Of these cases, only the second case is of general interest. To demonstrate sufficiency of these conditions, a 2 strictly optimal allocation method is given, which allocates tile (i; j) to device (b M 2 c)i + j) mod M . <p> Overall, we observe that there is no single existing approach that gives the best performance for all or even most values of M . It should be noted that as expected from the results obtained in <ref> [AE97] </ref>, none of the policies produces strictly optimal results, except for the special cases M= 2; 3 and 5. DM is strictly optimal for M= 2 and 3, FX is strictly optimal for M= 2 and HalfM is strictly optimal for M= 2; 3 and 5. <p> We did not consider HCAM in this comparison due to its 16 17 performance sensitivity to different query types. 5 Discussion It has been shown that strictly optimal allocations for two-dimensional data on different I/O devices exist only in very limited cases <ref> [AE97] </ref>. We proposed a general class of cyclic declustering methods applicable in these cases. We have shown that the Disk Modulo [DS82] and the Fibonacci [CLRS86] allocation methods are special cases of this class.
Reference: [BBB + 97] <author> S. Berchtold, C. Bohm, B. Braunmuller, D. A. Keim, and H-P. Kriegel. </author> <title> Fast parallel similarity search in multimedia databases. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 1-12, </pages> <address> Arizona, U.S.A., </address> <year> 1997. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the information associated with the different tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93, BBB + 97, PAE + 97] </ref>. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation [GD90, GDQ92]. Many of these were made in the context of relational databases, where data is defined over several attributes.
Reference: [CLRS86] <author> B. Chor, C. E. Leiserson, R. L. Rivest, and J. B. Shearer. </author> <title> An application of number theory to the organization of raster-graphics memory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 33(1) </volume> <pages> 86-104, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: In this subsection we consider another method for identifying a good cyclic method that uses a hop value that is relatively prime with respect to M . The method is motivated by a declustering method based upon certain properties of Fibonacci numbers proposed by Chor, Leiserson, Rivest and Shearer <ref> [CLRS86] </ref>, for the allocation of two-dimensional screen pixels to memory chips. We will call this method FIB. The FIB method is applicable only to very few values of M , in particular, only for values of M that are odd order Fibonacci numbers, i.e. <p> We proposed a general class of cyclic declustering methods applicable in these cases. We have shown that the Disk Modulo [DS82] and the Fibonacci <ref> [CLRS86] </ref> allocation methods are special cases of this class. <p> The refresh or update operation for a rectangular region of the display requires accessing the pixels contained in the region. It is therefore desirable to achieve as much parallel I/O as possible when accessing these pixels <ref> [CLRS86] </ref>. Another application is for the distribution of a relational database table over multiple disks when queries are usually confined to one or two attributes.
Reference: [DS82] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple-disk systems. </title> <journal> ACM Transactions of Database Systems, </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the information associated with the different tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93, BBB + 97, PAE + 97] </ref>. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation [GD90, GDQ92]. Many of these were made in the context of relational databases, where data is defined over several attributes. <p> Several allocation methods have been proposed in the literature. We begin by discussing these existing methods and evaluating their performance. These methods are: * The Disk Modulo method (DM) <ref> [DS82] </ref> * The FX method [KP88] * The HCAM method [FB93] The Disk Modulo approach proposed by Du and Sobolewski was designed to allocate Cartesian product files to multiple disks to improve the performance of partial match queries. <p> An example of the allocation generated by DM is shown in Figure 1 (b) for the case N 1 =N 2 =8, M=5. A generalization of the DM method, the Generalized Disk Modulo or GMD, was also developed in <ref> [DS82] </ref>, which allocates tile (i; j) to device (ai + bj) mod M , where a and b are integers. 3 The FX method proposed by Kim and Pramanik [KP88], requires that N 1 ; N 2 and M are all powers of 2. <p> We call this a class of cyclic declustering methods. This class is a subset of the class of allocations defined by the GDM method introduced in <ref> [DS82] </ref>. As in the cyclic methods, the GDM approach, also requires the two hop values, a and b, to be relatively prime with respect to M . However, it does not require that a and b be relatively prime with respect to each other. <p> We proposed a general class of cyclic declustering methods applicable in these cases. We have shown that the Disk Modulo <ref> [DS82] </ref> and the Fibonacci [CLRS86] allocation methods are special cases of this class.
Reference: [FB93] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In Proceedings of the 2nd International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 18 - 25, </pages> <address> San Diego, CA, Jan 1993. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the information associated with the different tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93, BBB + 97, PAE + 97] </ref>. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation [GD90, GDQ92]. Many of these were made in the context of relational databases, where data is defined over several attributes. <p> Several allocation methods have been proposed in the literature. We begin by discussing these existing methods and evaluating their performance. These methods are: * The Disk Modulo method (DM) [DS82] * The FX method [KP88] * The HCAM method <ref> [FB93] </ref> The Disk Modulo approach proposed by Du and Sobolewski was designed to allocate Cartesian product files to multiple disks to improve the performance of partial match queries. The approach was later extended by Li, Srivastava and Rotem for range queries and dynamic files using the same allocation strategy [LSR92]. <p> RPHM, GFIB and EXH are still the best allocation strategies. We now consider the special case of queries which have the same number of rows and columns, called square queries. This is an interesting case because the HCAM approach <ref> [FB93] </ref> has been shown to have very good performance for square queries. Figure 12 gives the performance of the various approaches for square queries. We observe that the HCAM approach performs better than DM and FX for almost all values of M .
Reference: [GD90] <author> S. Ghandeharizadeh and D. J. DeWitt. </author> <title> Hybrid-range partitioning strategy: A new declustering strategy for multiprocessor database machines. </title> <booktitle> In Proceedings of 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 481-492, </pages> <month> August </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: Various proposals have been made for the allocation of data on multiple I/O devices [DS82, KP88, FB93, BBB + 97, PAE + 97]. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation <ref> [GD90, GDQ92] </ref>. Many of these were made in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data).
Reference: [GDQ92] <author> S. Ghandeharizadeh, D. J. DeWitt, and W. Qureshi. </author> <title> A performance analysis of alternative multi--attribute declustering strategies. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 29-38, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Various proposals have been made for the allocation of data on multiple I/O devices [DS82, KP88, FB93, BBB + 97, PAE + 97]. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation <ref> [GD90, GDQ92] </ref>. Many of these were made in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data).
Reference: [KP88] <author> M. H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 173-182, </pages> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the information associated with the different tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93, BBB + 97, PAE + 97] </ref>. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation [GD90, GDQ92]. Many of these were made in the context of relational databases, where data is defined over several attributes. <p> Several allocation methods have been proposed in the literature. We begin by discussing these existing methods and evaluating their performance. These methods are: * The Disk Modulo method (DM) [DS82] * The FX method <ref> [KP88] </ref> * The HCAM method [FB93] The Disk Modulo approach proposed by Du and Sobolewski was designed to allocate Cartesian product files to multiple disks to improve the performance of partial match queries. <p> A generalization of the DM method, the Generalized Disk Modulo or GMD, was also developed in [DS82], which allocates tile (i; j) to device (ai + bj) mod M , where a and b are integers. 3 The FX method proposed by Kim and Pramanik <ref> [KP88] </ref>, requires that N 1 ; N 2 and M are all powers of 2. The tile (i; j) is then allocated to the device given by the lowest log 2 M bits of the bit-wise exclusive-OR of the binary representations of i and j.
Reference: [LSR92] <author> J. Li, J. Srivastava, and D. Rotem. CMD: </author> <title> a multidimensional declustering method for parallel database systems. </title> <booktitle> In Proceedings of the Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 3-14, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The approach was later extended by Li, Srivastava and Rotem for range queries and dynamic files using the same allocation strategy <ref> [LSR92] </ref>. The DM scheme allocates tile (i; j) to device (i + j) mod M . An example of the allocation generated by DM is shown in Figure 1 (b) for the case N 1 =N 2 =8, M=5.
Reference: [PAE + 97] <author> S. Prabhakar, D. Agrawal, A. El Abbadi, A. Singh, and T. Smith. </author> <title> Browsing and placement of multiresolution images on parallel disks. </title> <booktitle> In 5th Annual Workshop on I/O in Parallel and Distributed Systems, </booktitle> <address> (IOPADS'97)(to appear), San Jose, U.S.A., </address> <year> 1997. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the information associated with the different tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93, BBB + 97, PAE + 97] </ref>. The effectiveness of disk allocation in reducing the response time for range queries has also been demonstrated based upon simulation [GD90, GDQ92]. Many of these were made in the context of relational databases, where data is defined over several attributes.
Reference: [SF95] <author> T. R. Smith and J. Frew. </author> <title> Alexandria digital library. </title> <journal> Communications of the ACM, </journal> <volume> 38(4) </volume> <pages> 61-62, </pages> <month> April </month> <year> 1995. </year> <month> 20 </month>
Reference-contexts: An increasingly popular and user-friendly approach for retrieving geographically referenced information is to request the user to define a rectangular bounding box on a map indicating the area of interest. In the Alexandria Digital Library project <ref> [SF95] </ref>, we are exploring various methods for supporting such geographically referenced data. For example, if a user is interested in more information about the Sierra Nevada mountains, the user can draw a rectangle around the area on a map of the United States.
References-found: 11

