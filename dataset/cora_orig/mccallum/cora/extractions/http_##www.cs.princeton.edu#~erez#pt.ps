URL: http://www.cs.princeton.edu/~erez/pt.ps
Refering-URL: http://www.cs.princeton.edu/~erez/publications.html
Root-URL: http://www.cs.princeton.edu
Email: E-mail: tardos@cs.elte.hu  
Title: On the Knowledge Complexity of N P  
Author: Erez Petrank Gabor Tardos 
Date: 3  
Note: then PSPACE-complete languages do not have sub-quadratic knowledge complexity, unless PSPACE= P  Institute of the Hungarian Academy of Sciences, Pf. 127, Budapest, H-1364 Hungary. Partially supported by NSF grant CCR-95-03254 and OTKA-F014919.  
Abstract: We show that if a language has an interactive proof of logarithmic statistical knowledge-complexity, then it belongs to the class AM " coAM. Thus, if the polynomial time hierarchy does not collapse, then N P-complete languages do not have logarithmic knowledge complexity. Prior to this work, there was no indication that would contradict N P languages being proven with even one bit of knowledge. Our result is a common generalization of two previous results: The first asserts that statistical zero knowledge is contained in AM"coAM [AH-87], while the second asserts that the languages recognizable in logarithmic statistical knowledge complexity are in BPP N P [GOP-94]. Next, we consider the relation between the error probability and the knowledge complexity of an interactive proof. Note that reducing the error probability via repetition is not free: it may increase the knowledge complexity. We show that if the error probability *(n) is less than 2 3k(n) (where k(n) is the knowledge complexity) then the language proven has to be in the third level of the polynomial time hierarchy. In the standard setting of negligible error probability, there exist PSPACE-complete languages which have linear knowledge complexity. However, if we insist, for example, that the error probability is less than 2 n 2 In order to prove our main result, we develop an AM protocol for checking that a samplable distribution D has a given entropy h. For any fractions *; ffi, the verifier runs in time polynomial in 1=ffi and log(1=*) and fails with probability at most * to detect an additive error ffi in the entropy. We believe that this protocol is of independent interest. fl Department of Computer Science, University of Toronto, Toronto, Ontario, Canada M5S 3G4. E-mail: erez@cs.toronto.edu y Department of Computer Science, University of Toronto, Toronto, Ontario, Canada M5S 3G4 and Mathematical 
Abstract-found: 1
Intro-found: 1
Reference: [ABV-95] <author> W. Aiello, M. Bellare and R. Venkatesan. </author> <title> Knowledge on the Average Perfect, Statistical and Logarithmic. </title> <booktitle> Proceedings of the 27th Annual ACM Symposium on the Theory of Computing, ACM (1995). </booktitle>
Reference-contexts: They showed how to transform interactive proofs of statistical knowledge-complexity k (n) into interactive proofs of perfect knowledge-complexity k (n) + O (log n). This transformation refers only to knowledge-complexity with respect to the honest verifier. Aiello, Bellare, and Venkatesan <ref> [ABV-95] </ref> studied the class of languages which have k (n) knowledge complexity on the average (see [GP-91, ABV-95] for a definition of knowledge complexity on the average). They showed that languages with logarithmic average knowledge complexity are in BP P N P . <p> This transformation refers only to knowledge-complexity with respect to the honest verifier. Aiello, Bellare, and Venkatesan [ABV-95] studied the class of languages which have k (n) knowledge complexity on the average (see <ref> [GP-91, ABV-95] </ref> for a definition of knowledge complexity on the average). They showed that languages with logarithmic average knowledge complexity are in BP P N P . They also showed a closer relation between the perfect and the statistical hierarchies of languages (for the case of average knowledge complexity).
Reference: [AH-87] <author> W. Aiello and J. H -astad. </author> <title> Perfect Zero-Knowledge can be Recognized in Two Rounds. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference-contexts: Building on his work, Aiello and Hastad <ref> [AH-87] </ref> showed that zero knowledge languages are in AM " coAM. Bellare and Petrank [BP-92] bounded the computational complexity of languages which have short interactive-proofs with low knowledge-complexity. <p> This property is a modification of the separation property used in <ref> [AH-87] </ref>. Next, 3 we have to show that this separation can be detected by an AM protocol. <p> We then discuss the relation of this work to <ref> [AH-87] </ref> in Section Section 4. In Section 6 we use the above tools to present our main result: a constant round interactive proof for recognizing languages in KC (O (log n)). <p> It is important to note however that the behavior of P M is not necessarily close to the behavior of P if the knowledge-complexity is greater than 0. This is the main reason why the AM protocol presented by <ref> [AH-87] </ref> for the case of zero knowledge is inappropriate for the case of higher (even 1) knowledge complexity. 2.4 Three distributions used throughout the paper Let us define three distributions which are going to be used in all that follows. <p> This simple rewriting of Prob (P M ;V) [c] was first noted in <ref> [AH-87] </ref>. 3 Approximating the entropy in a constant number of rounds Our first tool is an AM protocol for verifying the entropy of a polynomial samplable distribution to within an accuracy of 1 + 1 poly . We consider this protocol to be of independent interest. <p> Before proving the theorem, let us recall the protocols for lower and upper bounds on set sizes. 3.1 Protocols for set sizes For the sake of self containment, we include the set-size approximation protocols with their proof. For a more detailed description the reader may refer to <ref> [F-89, AH-87] </ref>. The main tool in these protocols is universal family of hash functions (sometimes denoted by universal 2 family of hash functions). <p> A remark about perfect completeness: Finally, one can reduce the rejection probability when the bound is correct to zero by standard techniques [GMS-87] making a one-sided error Arthur-Merlin game. 4 An overview on the techniques in <ref> [AH-87] </ref> The main result of this paper is that SKC (O (log n)) AM " co AM. This generalizes the result of Aiello and Hastad [AH-87] stating SZK AM " co AM. <p> probability when the bound is correct to zero by standard techniques [GMS-87] making a one-sided error Arthur-Merlin game. 4 An overview on the techniques in <ref> [AH-87] </ref> The main result of this paper is that SKC (O (log n)) AM " co AM. This generalizes the result of Aiello and Hastad [AH-87] stating SZK AM " co AM. Let us start by recalling the underlying techniques of this latter paper both because we are going to use some of the same techniques and to see why they don't suffice for our purposes. 4.1 The ideas in [AH-87] The proof in [AH-87] is <p> result of Aiello and Hastad <ref> [AH-87] </ref> stating SZK AM " co AM. Let us start by recalling the underlying techniques of this latter paper both because we are going to use some of the same techniques and to see why they don't suffice for our purposes. 4.1 The ideas in [AH-87] The proof in [AH-87] is as follows. First, they present a property of the simulation that holds if and only if x 2 L. <p> Hastad <ref> [AH-87] </ref> stating SZK AM " co AM. Let us start by recalling the underlying techniques of this latter paper both because we are going to use some of the same techniques and to see why they don't suffice for our purposes. 4.1 The ideas in [AH-87] The proof in [AH-87] is as follows. First, they present a property of the simulation that holds if and only if x 2 L. <p> Recall that by the definition of relative entropy: H (M jj (P M ; V )) = c Prob M [c] log Prob M [c] Prob (P M ;V) [c] : (We use the notations of Subsection 2.4.) It is shown in <ref> [AH-87] </ref> how to prove that this related entropy is big or small in AM. Using approximation of the entropy described in Section 3, we can offer a more compact presentation of that protocol. Recall Equation 1 from Subsection 2.4. <p> We remark that the entropy approximations we presented are most accurate and therefore, we do not need to reduce the error probability of the original protocol in order to apply this technique. The error probability had to be reduced in <ref> [AH-87] </ref> since they used approximations on set sizes which were much less accurate. 4.2 Generalizing these techniques Let us consider what happens with the relative entropy H (M jj (P M ; V )) if the knowledge complexity is not zero but logarithmic.
Reference: [B-85] <author> L. Babai. </author> <title> Trading Group Theory for Randomness. </title> <booktitle> Proceedings of the 17th Annual ACM Symposium on the Theory of Computing, ACM (1985). </booktitle>
Reference-contexts: say that an ensemble of distributions D 1 x is statistically close to another ensemble D 2 x over a language L, if the function f (n) = max fd (D 1 x )g is negligible. 2.1 Interactive proofs We begin by recalling the definitions of interactive proofs presented by <ref> [GMR-89, B-85] </ref>. For formal definitions and motivating discussions the reader is referred to [GMR-89]. An interactive proof is a protocol in which a (computationally unbounded, probabilistic) prover P is interacting with a (probabilistic polynomial-time) verifier V . <p> Using standard 20 techniques, it can be shown that AM N P P 3 , and therefore all languages having this type of interactive proof must be in the third level of the polynomial time hierarchy. (The AM P 2 result is stated in <ref> [B-85] </ref> and the proof generalizes to any oracle.) Note also that k (n) has to be computable in polynomial time in n and not in the length of the string k (n), which is usually much smaller. So the restriction is quite liberal.
Reference: [BM-88] <author> L. Babai and S. Moran. </author> <title> Arthur-Merlin Games: A Randomized Proof System and a Hierarchy of Complexity Classes. </title> <journal> JCSS, </journal> <volume> Vol. 36, </volume> <pages> pages 254-276, </pages> <year> 1988. </year>
Reference-contexts: The class AM is the class of languages that have two round Arthur Merlin proofs, or equivalently, have a constant round interactive proof. (There is no restriction on the knowledge complexity of this constant round interactive proof.) See <ref> [BM-88, GS-89] </ref> for definitions of Arthur Merlin proofs, for some basic properties, and for the equivalence of the definitions. It was shown in [BHZ-87] that if N P coAM then the polynomial time hierarchy collapses. <p> Using <ref> [GS-89, BM-88] </ref>, we get that L is in AM " coAM. Formally, we prove the following theorem.
Reference: [BCK] <author> Bar-Yehuda, R., B. Chor, and E. Kushilevitz, </author> <title> "Privacy, Additional Information, and Communication", </title> <booktitle> 5th IEEE Structure in Complexity Theory, </booktitle> <month> July </month> <year> 1990, </year> <pages> pp. 55-65. </pages>
Reference-contexts: This definition was presented in [GP-91] and was adequate in different scenarios (see <ref> [BCK] </ref>).
Reference: [BMO-90] <author> M. Bellare, S. Micali and R. Ostrovsky. </author> <title> The (True) Complexity of Statistical Zero-Knowledge. </title> <booktitle> Proceedings of the 22nd Annual ACM Symposium on the Theory of Computing, ACM (1990). </booktitle>
Reference: [BP-92] <author> M. Bellare and E. Petrank. </author> <title> Making Zero-Knowledge Provers Efficient. </title> <booktitle> Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, ACM (1992) </booktitle>
Reference-contexts: Building on his work, Aiello and Hastad [AH-87] showed that zero knowledge languages are in AM " coAM. Bellare and Petrank <ref> [BP-92] </ref> bounded the computational complexity of languages which have short interactive-proofs with low knowledge-complexity. Goldreich, Ostrovsky, and Petrank [GOP-94] have extended this result showing that any language of logarithmic knowledge-complexity can be recognized in BP P N P . <p> In our second result which relate the knowledge complexity and the error probability we also employ techniques for deterministic bounds on set sizes developed in <ref> [Si-83, St-83, JVV-86, BP-92] </ref>. 1.6 Organization In Section 2 we give the definitions and notations we use in the paper. <p> Although the set-size approximation protocols just described are sufficient for the approximation of the entropy we are going to need an improved lower bound protocol later for our protocol. Therefore let us state this simple extension here. The amplification we use is similar to the one used by <ref> [JVV-86, BP-92] </ref>. <p> By Equation 10 in Section 6, this approximation comes down to approximating set-sizes. Note that all these sets which need to be approximated are recognizable in polynomial time. It is shown in <ref> [Si-83, St-83, BP-92] </ref> how to approximate the cardinality of a set S, which is recognizable in polynomial time, using efficient computation with access to an N P oracle. The approximation there fails with negligible probability to give an approximation which is within 1 + 1 poly from the exact cardinality.
Reference: [B+ 88] <author> M. Ben-Or, S. Goldwasser, O. Goldreich, J. H -astad, J. Kilian, S. Micali and P. Rogaway. </author> <title> Everything Provable is Provable in Zero-Knowledge. </title> <booktitle> Advances in Cryptology | Proceedings of CRYPTO 88, Lecture Notes in Computer Science 403, </booktitle> <publisher> Springer-Verlag (1989). </publisher> <editor> S. Goldwasser, </editor> <publisher> ed. </publisher>
Reference-contexts: Note that, if a one-way function exists, then this differs significantly from the computational knowledge complexity hierarchy for which NP-complete languages have zero knowledge interactive proofs (and so do PSPACE-complete languages) <ref> [GMW-86, IY-87, B+ 88] </ref>. 1.1 Background on knowledge-complexity Loosely speaking, an interactive-proof system for a language L is a two-party protocol, by which a powerful prover can "convince" a probabilistic polynomial-time verifier of membership in L, but will fail (with high probability) when trying to fool the verifier into "accepting" non-members
Reference: [BHZ-87] <author> R. Boppana, J. H -astad and S. Zachos. </author> <title> Does coN P Have Short Interactive Proofs". </title> <journal> Information Processing Letters, </journal> <volume> Vol 25 (1987), No. 2, </volume> <pages> pp 127-132. </pages>
Reference-contexts: We show that languages with logarithmic knowledge complexity are in AM " coAM. This result has a very interesting implications on languages in N P. Recall that if N P coAM then the polynomial time hierarchy collapses <ref> [BHZ-87] </ref>. Assuming that the polynomial time hierarchy does not collapse, we get that N P -complete languages do not have logarithmic knowledge complexity. Prior to our result, there was no indication that would contradict all N P languages having knowledge complexity 1. <p> It was shown in <ref> [BHZ-87] </ref> that if N P coAM then the polynomial time hierarchy collapses. It is believed that the polynomial time hierarchy does not collapse, and under this assumption, our result implies that N P -complete languages do not have logarithmic knowledge complexity.
Reference: [CW-79] <author> L. Carter and M. Wegman. </author> <title> Universal Classes of Hash Functions. </title> <journal> J. Computer and System Sciences 18, </journal> <month> 143-154 </month> <year> (1979). </year> <month> 22 </month>
Reference-contexts: The concept of universal families of hash functions was first defined by <ref> [CW-79] </ref> and has been used extensively in complexity theory in recent years. In this work, we shall use the fact that for any n and m there is a polynomial time (in n and m) universal family of hash functions from f0; 1g n to f0; 1g m .
Reference: [F-89] <author> L. Fortnow. </author> <title> The Complexity of Perfect Zero-Knowledge. Advances in Computing Research (ed. </title> <editor> S. </editor> <volume> Micali) Vol. </volume> <month> 18 </month> <year> (1989). </year>
Reference-contexts: We consider the knowledge-complexity of a language to be a very natural parameter, and we consider the question of how this parameter relates to the complexity 1 of deciding the language to be fundamental. 1.2 Previous work The complexity of recognizing zero-knowledge languages was first considered by Fortnow <ref> [F-89] </ref>. Building on his work, Aiello and Hastad [AH-87] showed that zero knowledge languages are in AM " coAM. Bellare and Petrank [BP-92] bounded the computational complexity of languages which have short interactive-proofs with low knowledge-complexity. <p> This property is a modification of the separation property used in [AH-87]. Next, 3 we have to show that this separation can be detected by an AM protocol. For this, we employ the lower and upper bounds on set sizes as presented by <ref> [GS-89, F-89] </ref>, and build on them an AM approximation for the entropy of the output distribution of the simulator. We believe that the protocol for approximating the entropy of a probabilistic machine is of independent interest. <p> verifier simulation SKC (k (n)) PKC (k (n) + log n) The case of honest verifier simulation suffices for the use we make of it in this paper. 2.3 The simulation based prover An important ingredient in our proof is the notion of a simulation based prover, introduced by Fortnow <ref> [F-89] </ref>. Consider a simulator M that outputs conversations of an interaction between a prover P and a verifier V . We define a new prover P M , called the simulation based prover, which selects its messages according to the conditional probabilities induced by the simulation. <p> We use the set-size lower and upper bound protocols of <ref> [GS-89, F-89] </ref> for this. The simplest approximation protocols (i.e., the ones that only guarantee a constant factor approximations) are enough for our purposes because we approximate the product Q m i=1 jf 1 (f (z i ))j as a whole rather then each of the sets separately. <p> Before proving the theorem, let us recall the protocols for lower and upper bounds on set sizes. 3.1 Protocols for set sizes For the sake of self containment, we include the set-size approximation protocols with their proof. For a more detailed description the reader may refer to <ref> [F-89, AH-87] </ref>. The main tool in these protocols is universal family of hash functions (sometimes denoted by universal 2 family of hash functions).
Reference: [GMS-87] <author> O. Goldreich, Y. Mansour and M. Sipser. </author> <title> Interactive Proof Systems: Provers that never Fail and Random Selection. </title> <booktitle> Proceedings of the 28th Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1987). </booktitle>
Reference-contexts: To this end, we only have to modify the protocol so that Merlin helps Arthur evaluate the function. A remark about perfect completeness: Finally, one can reduce the rejection probability when the bound is correct to zero by standard techniques <ref> [GMS-87] </ref> making a one-sided error Arthur-Merlin game. 4 An overview on the techniques in [AH-87] The main result of this paper is that SKC (O (log n)) AM " co AM. This generalizes the result of Aiello and Hastad [AH-87] stating SZK AM " co AM.
Reference: [GMW-86] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> "Proofs that Yield Nothing But their Validity and a Methodology of Cryptographic Protocol Design", </title> <booktitle> Proc. 27th FOCS 86, See also Jour. of ACM. </booktitle> <volume> Vol 38, No 1, </volume> <month> July </month> <year> 1991, </year> <pages> pp. 691-729. </pages>
Reference-contexts: Note that, if a one-way function exists, then this differs significantly from the computational knowledge complexity hierarchy for which NP-complete languages have zero knowledge interactive proofs (and so do PSPACE-complete languages) <ref> [GMW-86, IY-87, B+ 88] </ref>. 1.1 Background on knowledge-complexity Loosely speaking, an interactive-proof system for a language L is a two-party protocol, by which a powerful prover can "convince" a probabilistic polynomial-time verifier of membership in L, but will fail (with high probability) when trying to fool the verifier into "accepting" non-members
Reference: [GMW-87] <author> O. Goldreich, S. Micali, and A. Wigderson, </author> <title> "How to Play any Mental Game or a Completeness Theorems for Protocols of Honest Majority", </title> <type> STOC87. </type>
Reference: [GP-91] <author> O. Goldreich and E. Petrank. </author> <title> Quantifying Knowledge Complexity. </title> <booktitle> Proceedings of the 32nd Annual IEEE Symposium on the Foundations of Computer Science, </booktitle> <address> IEEE (1991). </address> <note> Submitted for publication, </note> <year> 1995. </year>
Reference-contexts: 1 Introduction The notion of knowledge-complexity was introduced in the seminal paper of Goldwasser Micali and Rackoff [GMR-85, GMR-89]. Knowledge-complexity is intended to measure the computational advantage gained by interaction. A formulation of knowledge-complexity, for the case that it is not zero, has appeared in <ref> [GP-91] </ref>. A very appealing suggestion, actually made by Goldwasser Micali and Rackoff, is to characterize languages according to the knowledge-complexity of their interactive proof systems [GMR-89]. <p> This transformation refers only to knowledge-complexity with respect to the honest verifier. Aiello, Bellare, and Venkatesan [ABV-95] studied the class of languages which have k (n) knowledge complexity on the average (see <ref> [GP-91, ABV-95] </ref> for a definition of knowledge complexity on the average). They showed that languages with logarithmic average knowledge complexity are in BP P N P . They also showed a closer relation between the perfect and the statistical hierarchies of languages (for the case of average knowledge complexity). <p> Namely, the logarithm of 1=* cannot increase substantially more rapidly than the knowledge complexity. 1.4 Implications on the hint knowledge complexity: Another implication of our second result concerns a rather esoteric definition of knowledge complexity called the Hint version of knowledge complexity. This definition was presented in <ref> [GP-91] </ref> and was adequate in different scenarios (see [BCK]). <p> For an exact definition and detailed explanations see <ref> [GP-91] </ref>.) It was shown in [GP-91] that this definition does not seem to be adequate, especially, because some protocols in which only a polynomial number of bits are transferred, have exponential knowledge complexity. Here, we claim that we can make a similar assertion for languages. <p> For an exact definition and detailed explanations see <ref> [GP-91] </ref>.) It was shown in [GP-91] that this definition does not seem to be adequate, especially, because some protocols in which only a polynomial number of bits are transferred, have exponential knowledge complexity. Here, we claim that we can make a similar assertion for languages. <p> We use the fraction definition of knowledge complexity as presented by <ref> [GP-91] </ref>. For further intuition and motivation see [GP-91]. <p> We use the fraction definition of knowledge complexity as presented by <ref> [GP-91] </ref>. For further intuition and motivation see [GP-91].
Reference: [GMR-85] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <booktitle> Proceedings of the 17th Annual ACM Symposium on the Theory of Computing, ACM (1985). </booktitle>
Reference-contexts: 1 Introduction The notion of knowledge-complexity was introduced in the seminal paper of Goldwasser Micali and Rackoff <ref> [GMR-85, GMR-89] </ref>. Knowledge-complexity is intended to measure the computational advantage gained by interaction. A formulation of knowledge-complexity, for the case that it is not zero, has appeared in [GP-91].
Reference: [GMR-89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The Knowledge Complexity of Interactive Proofs. </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1), </volume> <month> 186-208 (February </month> <year> 1989). </year>
Reference-contexts: 1 Introduction The notion of knowledge-complexity was introduced in the seminal paper of Goldwasser Micali and Rackoff <ref> [GMR-85, GMR-89] </ref>. Knowledge-complexity is intended to measure the computational advantage gained by interaction. A formulation of knowledge-complexity, for the case that it is not zero, has appeared in [GP-91]. <p> A formulation of knowledge-complexity, for the case that it is not zero, has appeared in [GP-91]. A very appealing suggestion, actually made by Goldwasser Micali and Rackoff, is to characterize languages according to the knowledge-complexity of their interactive proof systems <ref> [GMR-89] </ref>. The class of knowledge complexity 0 (better known as zero knowledge) stands at the lowest level of the knowledge complexity hierarchy, and at the top we have the class of languages with polynomial knowledge complexity which includes all IP=PSPACE. <p> IY-87, B+ 88]. 1.1 Background on knowledge-complexity Loosely speaking, an interactive-proof system for a language L is a two-party protocol, by which a powerful prover can "convince" a probabilistic polynomial-time verifier of membership in L, but will fail (with high probability) when trying to fool the verifier into "accepting" non-members <ref> [GMR-89] </ref>. An interactive-proof is called zero-knowledge if the interaction of any probabilistic polynomial-time machine with the predetermined prover, on common input x 2 L, can be "simulated" by a probabilistic polynomial-time machine (called the simulator), given only x [GMR-89]. <p> (with high probability) when trying to fool the verifier into "accepting" non-members <ref> [GMR-89] </ref>. An interactive-proof is called zero-knowledge if the interaction of any probabilistic polynomial-time machine with the predetermined prover, on common input x 2 L, can be "simulated" by a probabilistic polynomial-time machine (called the simulator), given only x [GMR-89]. We say that a probabilistic machine M simulates an interactive proof if the output distribution of M is statistically close to the distribution of the real interaction between the prover and the verifier. The formulation of zero-knowledge presented above is known as statistical (almost-perfect) zero-knowledge. <p> say that an ensemble of distributions D 1 x is statistically close to another ensemble D 2 x over a language L, if the function f (n) = max fd (D 1 x )g is negligible. 2.1 Interactive proofs We begin by recalling the definitions of interactive proofs presented by <ref> [GMR-89, B-85] </ref>. For formal definitions and motivating discussions the reader is referred to [GMR-89]. An interactive proof is a protocol in which a (computationally unbounded, probabilistic) prover P is interacting with a (probabilistic polynomial-time) verifier V . <p> For formal definitions and motivating discussions the reader is referred to <ref> [GMR-89] </ref>. An interactive proof is a protocol in which a (computationally unbounded, probabilistic) prover P is interacting with a (probabilistic polynomial-time) verifier V . Intuitively, the goal of the prover is to prove to the verifier V that a given input is in a predetermined language. <p> Note that the definition of statistical knowledge complexity zero (i.e., when k = 0) exactly matches the definition of statistical zero knowledge as given in <ref> [GMR-89] </ref>. For further motivation and discussion of zero knowledge, the reader is referred to [GMR-89]. <p> Note that the definition of statistical knowledge complexity zero (i.e., when k = 0) exactly matches the definition of statistical zero knowledge as given in <ref> [GMR-89] </ref>. For further motivation and discussion of zero knowledge, the reader is referred to [GMR-89].
Reference: [GOP-94] <author> O. Goldreich,, R. Ostrovsky, and E. Petrank. </author> <title> Computational Complexity and Knowl edge Complexity. </title> <booktitle> 26th ACM Symp. on Theory of Computation, </booktitle> <month> May </month> <year> 1994. </year> <pages> pp. 534-543. </pages>
Reference-contexts: Building on his work, Aiello and Hastad [AH-87] showed that zero knowledge languages are in AM " coAM. Bellare and Petrank [BP-92] bounded the computational complexity of languages which have short interactive-proofs with low knowledge-complexity. Goldreich, Ostrovsky, and Petrank <ref> [GOP-94] </ref> have extended this result showing that any language of logarithmic knowledge-complexity can be recognized in BP P N P . This was the first relation found between a knowledge complexity of a language (above zero) and its computational complexity. <p> We believe that the protocol for approximating the entropy of a probabilistic machine is of independent interest. In order to prove the validity of the separation property, we use techniques developed in <ref> [GOP-94] </ref> which relate the distribution of conversations in the original interactive proof with a hypothetical distribution of conversations that occur when we let the original verifier interact with a simulation based prover, i.e., a prover that acts like the prover in the simulation. (see Subsection 2.3 for a formal definition of <p> Our main result is proven for perfect knowledge complexity and we employ a result from <ref> [GOP-94] </ref> asserting that the distance between perfect and statistical knowledge complexity is close enough for our result to hold for statistical knowledge complexity as well. <p> A connection between the perfect and the statistical hierarchies was given in <ref> [GOP-94] </ref>: Theorem 1 [GOP-94]: For the case of the honest verifier simulation SKC (k (n)) PKC (k (n) + log n) The case of honest verifier simulation suffices for the use we make of it in this paper. 2.3 The simulation based prover An important ingredient in our proof is the <p> A connection between the perfect and the statistical hierarchies was given in <ref> [GOP-94] </ref>: Theorem 1 [GOP-94]: For the case of the honest verifier simulation SKC (k (n)) PKC (k (n) + log n) The case of honest verifier simulation suffices for the use we make of it in this paper. 2.3 The simulation based prover An important ingredient in our proof is the notion of a <p> For Part 2 of the lemma we need a general tool connecting the distribution generated by the original prover P and the verifier V to the distribution generated by P M and V . Lemma 5.2 establishes this connection. This lemma is implicit in <ref> [GOP-94] </ref>. Lemma 5.2 [GOP-94]: Let L, P , V , and M be as above, and fix any x 2 L. <p> For Part 2 of the lemma we need a general tool connecting the distribution generated by the original prover P and the verifier V to the distribution generated by P M and V . Lemma 5.2 establishes this connection. This lemma is implicit in <ref> [GOP-94] </ref>. Lemma 5.2 [GOP-94]: Let L, P , V , and M be as above, and fix any x 2 L. <p> Using [GS-89, BM-88], we get that L is in AM " coAM. Formally, we prove the following theorem. Theorem 3 SKC (O (log n)) AM " coAM We will only show that PKC (O (log n)) AM " coAM since it was shown in <ref> [GOP-94] </ref> (see Theorem 1) that SKC (O (log n)) = PKC (O (log n)): We remark that the theorem in [GOP-94] only applies for the honest verifier simulation, but it suffices for us since we are only using the simulation of the honest verifier. <p> Theorem 3 SKC (O (log n)) AM " coAM We will only show that PKC (O (log n)) AM " coAM since it was shown in <ref> [GOP-94] </ref> (see Theorem 1) that SKC (O (log n)) = PKC (O (log n)): We remark that the theorem in [GOP-94] only applies for the honest verifier simulation, but it suffices for us since we are only using the simulation of the honest verifier. So let us begin by recalling the setting. <p> So the restriction is quite liberal. Proof: We use a result of <ref> [GOP-94] </ref> (see Theorem 1) again to shift attention from statistical to perfect knowledge complexity. We prove that if a language L has an interactive proof with perfect knowledge complexity k (n) and error below 2 2k (n)6 then L 2 AM N P .
Reference: [GS-89] <author> S. Goldwasser, and M. Sipser, </author> <title> Private Coins vs. Public Coins in Interactive Proof Systems, Advances in Computing Research (ed. </title> <editor> S. Micali), </editor> <booktitle> 1989, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 73-90. </pages>
Reference-contexts: The class AM is the class of languages that have two round Arthur Merlin proofs, or equivalently, have a constant round interactive proof. (There is no restriction on the knowledge complexity of this constant round interactive proof.) See <ref> [BM-88, GS-89] </ref> for definitions of Arthur Merlin proofs, for some basic properties, and for the equivalence of the definitions. It was shown in [BHZ-87] that if N P coAM then the polynomial time hierarchy collapses. <p> This property is a modification of the separation property used in [AH-87]. Next, 3 we have to show that this separation can be detected by an AM protocol. For this, we employ the lower and upper bounds on set sizes as presented by <ref> [GS-89, F-89] </ref>, and build on them an AM approximation for the entropy of the output distribution of the simulator. We believe that the protocol for approximating the entropy of a probabilistic machine is of independent interest. <p> We use the set-size lower and upper bound protocols of <ref> [GS-89, F-89] </ref> for this. The simplest approximation protocols (i.e., the ones that only guarantee a constant factor approximations) are enough for our purposes because we approximate the product Q m i=1 jf 1 (f (z i ))j as a whole rather then each of the sets separately. <p> A remark on public coins: The statement of this theorem can be strengthened into an approximation procedure in AM (i.e., the verifier only having public coin tosses) by applying the standard techniques of transforming an interactive proof to an Arthur-Merlin game <ref> [GS-89] </ref> The lower bound protocol is already an Arthur-Merlin game as it does not hurt if the prover learns X. Obviously, this can not be said about the upper bound protocol. <p> Using <ref> [GS-89, BM-88] </ref>, we get that L is in AM " coAM. Formally, we prove the following theorem.
Reference: [H-94] <author> J. H -astad. </author> <title> Perfect Zero-Knowledge in AM" co-AM. Unpublished 2-page manuscript explaining the underlying ideas behind [AH-87]. </title> <year> 1994. </year>
Reference: [Hof-63] <author> W. Hoeffding. </author> <title> Probability Inequalities for Sums of Bounded Random Variables, </title> <journal> Amer. Stat. Assoc. </journal> <volume> Jour., </volume> <month> March </month> <year> 1963, </year> <pages> pp 13-30. </pages>
Reference-contexts: As the value of this logarithm is between n and 0, the Hoefding bound (a variation of the Chernoff bound, see <ref> [Hof-63] </ref>) states that this average will be close to the actual value H (f ) except for an exponentially small error probability. However, we cannot calculate the probability inside the summation, i.e., given z i it is hard to calculate Prob x (f (z i ) = f (x)). <p> Call such a choice of X bad, and let us bound the probability of choosing a bad X using the Hoefding Inequality <ref> [Hof-63] </ref>. This inequality asserts that the probability of the average of m identically distributed independent variables deviating from the expected value by at least is at most 2e 2 2 m=r 2 where r is the size of the range of the random variables.
Reference: [ILu-90] <author> R. Impagliazzo and M. Luby, </author> <title> One-Way Functions are Essential for Complexity Based Cryptography, </title> <booktitle> 30th FOCS, </booktitle> <pages> pp. 230-235, </pages> <year> 1990. </year>
Reference: [ILe-90] <author> R. Impagliazzo and L.A. Levin, </author> <title> No Better Ways to Generate Hard NP Instances than Picking Uniformly at Random, </title> <booktitle> 31st FOCS, </booktitle> <pages> pp. 812-821, </pages> <year> 1990. </year>
Reference: [IY-87] <author> R. Impagliazzo and M. Yung. </author> <title> Direct Minimum-Knowledge computations. </title> <booktitle> Advances in Cryptology | Proceedings of CRYPTO 87, Lecture Notes in Computer Science 293, </booktitle> <publisher> Springer-Verlag (1987). </publisher>
Reference-contexts: Note that, if a one-way function exists, then this differs significantly from the computational knowledge complexity hierarchy for which NP-complete languages have zero knowledge interactive proofs (and so do PSPACE-complete languages) <ref> [GMW-86, IY-87, B+ 88] </ref>. 1.1 Background on knowledge-complexity Loosely speaking, an interactive-proof system for a language L is a two-party protocol, by which a powerful prover can "convince" a probabilistic polynomial-time verifier of membership in L, but will fail (with high probability) when trying to fool the verifier into "accepting" non-members
Reference: [JVV-86] <author> M. Jerrum, L. Valiant and V. Vazirani. </author> <title> Random Generation of Combinatorial Structures from a Uniform Distribution. </title> <booktitle> Theoretical Computer Science 43, </booktitle> <month> 169-188 </month> <year> (1986). </year>
Reference-contexts: In our second result which relate the knowledge complexity and the error probability we also employ techniques for deterministic bounds on set sizes developed in <ref> [Si-83, St-83, JVV-86, BP-92] </ref>. 1.6 Organization In Section 2 we give the definitions and notations we use in the paper. <p> Although the set-size approximation protocols just described are sufficient for the approximation of the entropy we are going to need an improved lower bound protocol later for our protocol. Therefore let us state this simple extension here. The amplification we use is similar to the one used by <ref> [JVV-86, BP-92] </ref>.
Reference: [LFKN-90] <author> C. Lund, L. Fortnow, H. Karloff and N. Nisan. </author> <title> Algebraic Methods for Inter--active Proof Systems. </title> <booktitle> Proceedings of the 31st Annual IEEE Symposium on the Foundations of Computer Science, IEEE (1990). </booktitle>
Reference: [Ost-91] <author> R. Ostrovsky. </author> <title> One-Way Functions, Hard on Average Problems, and Statistical Zero-Knowledge Proofs. </title> <booktitle> Proceedings of Structures In Complexity Theory 6th Annual Conference IEEE (1991). </booktitle>
Reference: [OW-93] <author> R. Ostrovsky and A. Wigderson. </author> <title> One-Way Functions are Essential For NonTrivial Zero-Knowledge, </title> <booktitle> Proc. 2nd Israeli Symp. on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference: [OVY-91] <author> R. Ostrovsky, R. Venkatesan and M. Yung. </author> <title> Fair Games Against an All-Powerful Adversary. </title> <booktitle> AMS DIMACS Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <volume> Vol 13. </volume> <publisher> (Jin-Yi Cai ed.) </publisher> <pages> pp. 155-169. </pages>
Reference: [Sh-90] <author> A. Shamir. IP=PSPACE. </author> <booktitle> Proc. 22nd ACM Symp. on Theory of Computing, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference: [Si-83] <author> M. Sipser. </author> <title> A Complexity Theoretic Approach to Randomness. </title> <booktitle> Proceedings of the 15th Annual ACM Symposium on the Theory of Computing, ACM (1983). </booktitle>
Reference-contexts: In our second result which relate the knowledge complexity and the error probability we also employ techniques for deterministic bounds on set sizes developed in <ref> [Si-83, St-83, JVV-86, BP-92] </ref>. 1.6 Organization In Section 2 we give the definitions and notations we use in the paper. <p> By Equation 10 in Section 6, this approximation comes down to approximating set-sizes. Note that all these sets which need to be approximated are recognizable in polynomial time. It is shown in <ref> [Si-83, St-83, BP-92] </ref> how to approximate the cardinality of a set S, which is recognizable in polynomial time, using efficient computation with access to an N P oracle. The approximation there fails with negligible probability to give an approximation which is within 1 + 1 poly from the exact cardinality.
Reference: [St-83] <author> L. Stockmeyer. </author> <title> The Complexity of Approximate Counting. </title> <booktitle> Proceedings of the 15th Annual ACM Symposium on the Theory of Computing, ACM (1983). </booktitle>
Reference-contexts: In our second result which relate the knowledge complexity and the error probability we also employ techniques for deterministic bounds on set sizes developed in <ref> [Si-83, St-83, JVV-86, BP-92] </ref>. 1.6 Organization In Section 2 we give the definitions and notations we use in the paper. <p> By Equation 10 in Section 6, this approximation comes down to approximating set-sizes. Note that all these sets which need to be approximated are recognizable in polynomial time. It is shown in <ref> [Si-83, St-83, BP-92] </ref> how to approximate the cardinality of a set S, which is recognizable in polynomial time, using efficient computation with access to an N P oracle. The approximation there fails with negligible probability to give an approximation which is within 1 + 1 poly from the exact cardinality.
References-found: 32

