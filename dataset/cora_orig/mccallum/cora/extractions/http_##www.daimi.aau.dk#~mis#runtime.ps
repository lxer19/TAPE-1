URL: http://www.daimi.aau.dk/~mis/runtime.ps
Refering-URL: http://www.daimi.aau.dk/~mis/papers.html
Root-URL: http://www.daimi.aau.dk
Email: -brabrand,amoeller,sandholm,mis-@brics.dk  
Title: A Runtime System for Interactive Web Services  
Author: Claus Brabrand Anders Mller Anders Sandholm Michael I. Schwartzbach 
Keyword: CGI, Interactive Web Service, Web Document Management, Runtime System, Session Model.  
Date: March 4, 1999  
Address: Aarhus, Denmark  
Affiliation: BRICS Department of Computer Science University of  
Abstract: Interactive web services are increasingly replacing traditional static web pages. Producing web services seems to require a tremendous amount of laborious low-level coding due to the primitive nature of CGI programming. We present ideas for an improved runtime system for interactive web services built on top of CGI running on virtually every combination of browser and HTTP/CGI server. The runtime system has been implemented and used extensively in &lt;bigwig&gt;, a tool for producing interactive web services. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Atkins, Thomas Ball, Michael Benedikt, Glenn Bruns, Kenneth Cox, Peter Mataga, and Kenneth Rehor. </author> <title> Experience with a domain specific language for form-based services. </title> <booktitle> In Usenix Conference on Domain Specific Languages, </booktitle> <address> Santa Barbara, CA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: A recent paper [10] generalizes these ideas resulting in a standard scheme for generating controllers for discrete event systems with both controllable and uncontrollable events. The Mawl language <ref> [1, 3, 7] </ref> has been suggested as a domain-specific language for describing sequential transaction-oriented web applications. Its high-level notation is also compiled into low-level CGI scripts. Mawl directly provides programming constructs corresponding to global state, dynamic document, sessions, local state, imperative actions, and client interactions.
Reference: [2] <author> Claus Brabrand. </author> <title> Synthesizing safety controllers for interactive web services. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> December </month> <year> 1998. </year> <note> Available from http://www.brics.dk/brabrand/thesis/. </note>
Reference-contexts: Also, our runtime system is tailored to support more specific needs. A more detailed and formal description of how one can make use of safety requirements written separately in a suitable logic can be found in <ref> [11, 2] </ref>. A language for writing safety requirements is presented, the compilation process into a safety controller is described, and optimizations for memory usage and flow capacity of the controller are developed.
Reference: [3] <author> K. Cox, T. Ball, and J. C. Ramming. Lunchbot: </author> <title> A tale of two ways to program web services. </title> <type> Technical Report BL0112650-960216-06TM, </type> <institution> AT&T Bell Laboratories, </institution> <year> 1996. </year>
Reference-contexts: A recent paper [10] generalizes these ideas resulting in a standard scheme for generating controllers for discrete event systems with both controllable and uncontrollable events. The Mawl language <ref> [1, 3, 7] </ref> has been suggested as a domain-specific language for describing sequential transaction-oriented web applications. Its high-level notation is also compiled into low-level CGI scripts. Mawl directly provides programming constructs corresponding to global state, dynamic document, sessions, local state, imperative actions, and client interactions.
Reference: [4] <author> Michael I. Schwartzbach et al. </author> <title> &lt;bigwig&gt; project homepage. </title> <address> http://www.brics.dk/bigwig/. </address>
Reference-contexts: We round off with a discussion of related work, a conclusion, and directions for future work. In the appendices, we briefly describe an implementation of the suggested runtime system. Also, we give a short presentation of &lt;bigwig&gt; <ref> [4] </ref>, which is a tool for producing interactive web services that makes extensive use of the self-contained runtime system package. 2 Motivation The technology of plain CGI scripts lacks several of the properties one would expect from a modern programming environment. <p> By basing the design of the runtime system on very widely used protocols, the system is easy to incorporate. The further development of the runtime system can be followed on the &lt;bigwig&gt; homepage <ref> [4] </ref>. A Implementation A UNIX version of the runtime system has been implemented (in C) as a package runwig containing the following components (corresponding to Figure 2): * The connector.
Reference: [5] <author> Shishir Gundavaram. </author> <title> CGI Programming on the World Wide Web. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1996. </year>
Reference-contexts: The execution of this thread may interact with the client and inspect or modify the global state. One way of providing a runtime system for interactive web services would be to simply use plain CGI scripts <ref> [5] </ref>. However, being designed for much simpler tasks, the CGI protocol by itself is inadequate for implementing the session concept. It neither supports long sessions involving many user interactions nor any kind of concurrency control.
Reference: [6] <author> N. Klarlund and A. Mller. </author> <title> MONA Version 1.3 User Manual. </title> <booktitle> BRICS Notes Series NS-98-3 (2.revision), </booktitle> <institution> Department of Computer Science, University of Aarhus, </institution> <month> October </month> <year> 1998. </year>
Reference-contexts: That is, the 'control logic' in &lt;bigwig&gt; consists of finite-state automata. The controlling automaton is not given directly, but is computed (by the MONA <ref> [6, 9] </ref> system) from a collection of individual concurrency constraints phrased in first-order logic. Extensions with counters and negated alphabet symbols add expressiveness beyond regular languages. HTML documents are first-class values that may be computed and stored in variables.
Reference: [7] <author> D. A. Ladd and J. C. Ramming. </author> <title> Programming the web: An application-oriented language for hypermedia services. </title> <booktitle> In 4th Intl. World Wide Web Conference, </booktitle> <year> 1995. </year>
Reference-contexts: A recent paper [10] generalizes these ideas resulting in a standard scheme for generating controllers for discrete event systems with both controllable and uncontrollable events. The Mawl language <ref> [1, 3, 7] </ref> has been suggested as a domain-specific language for describing sequential transaction-oriented web applications. Its high-level notation is also compiled into low-level CGI scripts. Mawl directly provides programming constructs corresponding to global state, dynamic document, sessions, local state, imperative actions, and client interactions.
Reference: [8] <author> Open Market, Inc. FastCGI: </author> <title> A high-performance web server interface. </title> <type> Technical White Paper, </type> <note> http://www.fastengines.com/whitepapers/, April 1996. </note>
Reference-contexts: The resulting system becomes something very close to being a dedicated web server. The important difference being that it still builds upon the CGI protocol. 6 Related Work The idea of having persistent processes running residently on the server is central in the FastCGI <ref> [8] </ref> system. One difference is that FastCGI requires platform- and server-dependent support, while our approach works for all servers that support CGI. Also, our runtime system is tailored to support more specific needs.
Reference: [9] <author> Anders Mller. </author> <title> MONA project homepage. </title> <address> http://www.brics.dk/mona/. </address>
Reference-contexts: That is, the 'control logic' in &lt;bigwig&gt; consists of finite-state automata. The controlling automaton is not given directly, but is computed (by the MONA <ref> [6, 9] </ref> system) from a collection of individual concurrency constraints phrased in first-order logic. Extensions with counters and negated alphabet symbols add expressiveness beyond regular languages. HTML documents are first-class values that may be computed and stored in variables.
Reference: [10] <author> Anders Sandholm. </author> <note> Mona-based control synthesis. Submitted, </note> <month> January </month> <year> 1999. </year>
Reference-contexts: In most cases it is possible to divide the control logic into independent parts controlling disjoint sets of checkpoint events. The controller can then be divided into a number of distributed control processes <ref> [10, 11] </ref>. This way the problem of the controller being a bottleneck in the system is successfully avoided. <p> A language for writing safety requirements is presented, the compilation process into a safety controller is described, and optimizations for memory usage and flow capacity of the controller are developed. A recent paper <ref> [10] </ref> generalizes these ideas resulting in a standard scheme for generating controllers for discrete event systems with both controllable and uncontrollable events. The Mawl language [1, 3, 7] has been suggested as a domain-specific language for describing sequential transaction-oriented web applications.

References-found: 10

