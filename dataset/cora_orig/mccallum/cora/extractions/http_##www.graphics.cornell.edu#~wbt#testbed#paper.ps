URL: http://www.graphics.cornell.edu/~wbt/testbed/paper.ps
Refering-URL: http://www.graphics.cornell.edu/~wbt/testbed/
Root-URL: http://www.cs.brown.edu/
Title: A Testbed for Image Synthesis  
Author: Ben Trumbore, Wayne Lytley, Donald P. Greenberg 
Address: Ithaca, NY 14853  
Affiliation: Program of Computer Graphics, Cornell University,  ycurrently at Cornell National Supercomputer Facility  
Abstract: Image Synthesis research combines new ideas with existing techniques. A collection of software modules that provide such techniques is extremely useful for simplifying the development process. We describe the design and implementation of a new Testbed for Image Synthesis that provides such support. This Testbed differs from previous Testbeds in both its goals and its design decisions. The Testbed design addresses the problems of high model complexity, complicated global illumination algorithms and coarse grain parallel processing environments. The implementation is modular, portable and extensible. It allows for statistical comparison of algorithms and measurement of incremental image improvements, as well as quantitative comparison of Testbed images and light reflectance measured from physical models. The Testbed is designed to interface with any available modeling system. This compatibility was achieved through careful design of the data format that represents environments. The software modules of the Testbed are organized in a hierarchical fashion, simplifying application programming. 
Abstract-found: 1
Intro-found: 1
Reference: [AMAN84] <author> Amantides, J. </author> <title> "Ray Tracing with Cones," </title> <booktitle> Proceedings of SIGGRAPH'84, in Computer Graphics, </booktitle> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pages 129-135. </pages>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing <ref> [AMAN84] </ref>, and environment subdivision methods [GLAS84, KAPL85, HAIN86, GOLD87] have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position.
Reference: [COHE85] <author> Cohen, Michael F. and Donald P. Greenberg. </author> <title> "The Hemi-Cube: A Radiosity Solution for Complex Environments," </title> <booktitle> Proceedings of SIGGRAPH'85, in Computer Graphics, </booktitle> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pages 31-40. </pages>
Reference-contexts: The final radiosities, representing the complete interreflections between these surfaces, can be found by solving a set of simultaneous equations. Although the approach was originally restricted to simple diffuse environments, it has subsequently been extended to complex environments <ref> [COHE85] </ref>, specular surfaces [IMME86, WALL87], and to scenes with participating media [RUSH87]. Furthermore, computational times have recently been vastly reduced using progressive refinement methods [COHE88]. <p> Form Factor Calculation: At the heart of the radiosity technique is the ability to calculate how much energy passes from one patch in an environment to another. Calculation of these form factors is performed in these modules. Some algorithms use the hemicube and scan conversion algorithms <ref> [COHE85] </ref>, while others perform the calculation using ray casts [WALL89]. Radiosity Display: Often it is desirable to display a completed radiosity solution on some common graphics hardware. This module performs this task on several different brands of graphics dis plays.
Reference: [COHE86] <author> Cohen, Michael F., Donald P. Greenberg, and David S. Immel. </author> <title> "An Efficient Radiosity Approach for Realistic Image Synthesis," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 6(2), </volume> <month> March </month> <year> 1986, </year> <pages> pages 26-35. </pages>
Reference-contexts: This module was needed to allow implementation of a parallel version of the radiosity procedure. Adaptive Subdivision: As radiosity solutions progress, some portions of an environment will require finer meshing so the eventual solution will be more accurate <ref> [COHE86] </ref>. This software identifies those areas and instructs meshing libraries to perform the needed subdivision. Radiosity Attributes: During the radiosity solution, each object must store temporary information at points on its surface. This module organizes such information in data structures that are used by all the radiosity modules.
Reference: [COHE88] <author> Cohen, Michael F., Shenchang Eric Chen, John R. Wallace, and Donald P. Greenberg. </author> <title> "A Progressive Refinement Approach to Fast Radiosity Image Generation," </title> <booktitle> Proceedings of SIGGRAPH'88, in Computer Graphics, </booktitle> <volume> 22(4), </volume> <month> August </month> <year> 1988, </year> <pages> pages 75-84. </pages>
Reference-contexts: Although the approach was originally restricted to simple diffuse environments, it has subsequently been extended to complex environments [COHE85], specular surfaces [IMME86, WALL87], and to scenes with participating media [RUSH87]. Furthermore, computational times have recently been vastly reduced using progressive refinement methods <ref> [COHE88] </ref>. Testbed implementations of ray tracing and radiosity renderers, as well as a hybrid algorithm that combines both approaches, are illustrated in Section 6. 2 Other Testbeds Several testbed systems, mostly facilitating rendering research, have been developed in the past. <p> Radiosity: The highest level radiosity algorithm is implemented in this module. It iteratively determines which patch should distribute its energy throughout the environment <ref> [COHE88] </ref>. Instruc tions to other modules cause the environment to be meshed, textured, and eventually displayed. Parallel Radiosity: Some rendering algorithms take on a completely different form when they are run in parallel on several computers. <p> Intersection Bounding Volumes Parametric Coordinates Rendering Attributes MID FED Lighting Ray and View RLE Ray Trace Efficiency Antialiasing Shading Texture Mapping Texture Sampling Rendering Modules Utility Modules Applications Object Modules Ray Tracing Renderer 6.2 Radiosity 6.2.1 Radiosity Description The radiosity program presented in this example uses the progressive refinement method <ref> [COHE88] </ref>. In this algorithm, energy is shot from patches and dispersed throughout the environment. When a con verged solution is achieved, polygons are displayed with their resultant radiosities. As with the ray tracing example, this program begins by having the MID module read the environment, attributes, and geometry.
Reference: [COOK84a] <author> Cook, Robert L. </author> <title> "Shade Trees," </title> <booktitle> Proceedings of SIGGRAPH'84, in Computer Graphics, </booktitle> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pages 223-231. </pages>
Reference: [COOK84b] <author> Cook, Robert L., Tom Porter, and Loren Carpenter. </author> <title> "Distributed Ray Tracing," </title> <booktitle> Proceedings of SIGGRAPH'84, in Computer Graphics, </booktitle> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pages 137-145. </pages>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing <ref> [COOK84b] </ref>, cone tracing [AMAN84], and environment subdivision methods [GLAS84, KAPL85, HAIN86, GOLD87] have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position.
Reference: [COOK87] <author> Cook, Robert L., Loren Carpenter, and Edwin Catmull. </author> <title> "The Reyes Image Rendering Architecture," </title> <booktitle> Proceedings of SIGGRAPH'87, in Computer Graphics, </booktitle> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pages 95-102. </pages>
Reference-contexts: However, since node assemblies may not contain cycles, this system is still not flexible enought to facilitate global lighting affects. The REYES image rendering system was developed at Lucasfilm and is currently in use at PIXAR <ref> [COOK87] </ref>. Designed more as a production system than a testbed, this system efficiently renders environments of very high model and shading complexity. REYES is an example of a "monolithic" system, which is geared toward one specific rendering technique.
Reference: [FUJI86] <author> Fujimoto, Akira, Tanaka Takayuki, and Iwata Kansei. </author> <title> "ARTS: Accelerated Ray-Tracing System," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 6(4), </volume> <month> April </month> <year> 1986, </year> <pages> pages 16-26. </pages>
Reference-contexts: Uniform Space Subdivision: In the same vein, this module subdivides the environment space into a regular grid. Intersection checks are performed only for objects that are in grid cells through which the ray passes <ref> [FUJI86] </ref>. Both of these efficiency schemes have identical interface specifications, allowing one to easily be substituted for another. Antialiasing: In order to avoid image space aliasing, Ray Tracing renderers distribute view-level rays throughout each pixel that is rendered.
Reference: [GLAS84] <author> Glassner, Andrew S. </author> <title> "Space Subdivision for Fast Ray Tracing," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 4(10), </volume> <month> October </month> <year> 1984, </year> <pages> pages 15-22. </pages>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods <ref> [GLAS84, KAPL85, HAIN86, GOLD87] </ref> have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light.
Reference: [GLAS89] <author> Glassner, Andrew S., </author> <title> editor. An Introduction to Ray Tracing, </title> <publisher> Academic Press, Inc., </publisher> <address> San Diego, California, </address> <year> 1989. </year>
Reference-contexts: This short paper does not allow a comprehensive review of the various rendering approaches that simulate global illumination effects. The reader is referred to several summaries of such algorithms <ref> [GLAS89, GREE86] </ref>. Today's common rendering algorithms can be classified as belonging to one of two broad families: Ray Tracing and Radiosity. In Ray Tracing the image plane is discretized and sample points are taken at each pixel, yielding a view-dependent solution.
Reference: [GOLD87] <author> Goldsmith, Jeffrey and John Salmon. </author> <title> "Automatic Creation of Object Hierarchies for Ray Tracing," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 7(5), </volume> <month> May </month> <year> 1987, </year> <pages> pages 14-20. </pages>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods <ref> [GLAS84, KAPL85, HAIN86, GOLD87] </ref> have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light. <p> This one uses a hierarchical tree of bounding volumes <ref> [GOLD87] </ref> to more selectively intersect only those objects near the ray. Uniform Space Subdivision: In the same vein, this module subdivides the environment space into a regular grid. Intersection checks are performed only for objects that are in grid cells through which the ray passes [FUJI86].
Reference: [GORA84] <author> Goral, Cindy M., Kenneth E. Torrence, and Donald P. Greeberg. </author> <title> "Modeling the Interaction of Light Between Diffuse Surfaces," </title> <booktitle> Proceedings of SIGGRAPH'84, in Computer Graphics, </booktitle> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pages 213-222. </pages>
Reference-contexts: Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods [GLAS84, KAPL85, HAIN86, GOLD87] have subsequently reduced computation times and improved image quality. The radiosity approach <ref> [GORA84] </ref>, based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light.
Reference: [GREE86] <author> Greenberg, Donald P., Michael F. Cohen, and Kenneth E. Torrance. </author> <title> "Radiosity: A Method for Computing Global Illumination," </title> <journal> The Visual Computer, </journal> <volume> 2(5), </volume> <month> September </month> <year> 1986, </year> <pages> pages 291-297. </pages>
Reference-contexts: This short paper does not allow a comprehensive review of the various rendering approaches that simulate global illumination effects. The reader is referred to several summaries of such algorithms <ref> [GLAS89, GREE86] </ref>. Today's common rendering algorithms can be classified as belonging to one of two broad families: Ray Tracing and Radiosity. In Ray Tracing the image plane is discretized and sample points are taken at each pixel, yielding a view-dependent solution.
Reference: [HAIN86] <author> Haines, Eric A. and Donald P. Greenberg. </author> <title> "The Light buffer: a Shadow Testing Accelerator," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 6(9), </volume> <month> September </month> <year> 1986, </year> <pages> pages 6-16. </pages>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods <ref> [GLAS84, KAPL85, HAIN86, GOLD87] </ref> have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light.
Reference: [HALL83] <author> Hall, Roy A. and Donald P. Greenberg. </author> <title> "A Testbed for Realistic Image Synthesis," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 3(8), </volume> <month> November </month> <year> 1983, </year> <pages> pages 10-20. </pages>
Reference-contexts: The branches represent the propagation of the ray through the environment, and the nodes represent the surface intersections. The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing <ref> [HALL83] </ref>, distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods [GLAS84, KAPL85, HAIN86, GOLD87] have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. <p> One of the first testbeds appearing in the literature was developed at Bell Laboratories in 1982 and was used for scanline rendering [WHIT82]. This testbed facilitated the construction of renderers that allowed the simultaneous processing of several object types in a single pass. Cornell's original Testbed for Image Synthesis <ref> [HALL83] </ref> was designed to aid research pertaining to the Ray Tracing rendering process, including lighting models, rendering parametric surfaces, reflections, light propagation and texture mapping. This object-oriented system was modular and allowed easy addition and testing of experimental object types.
Reference: [HALL91] <author> Hall, Roy A., Mimi Bussan, Priamos Georgiades, and Donald P. Greenberg. </author> <title> "A Testbed for Architectural Modeling," </title> <booktitle> in Eurographics Proceedings '91, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: As many of these projects are completed they will be incorporated into the Testbed, contributing to its continued growth. Images, animations, and simulations have been generated using models from two sophisticated modeling programs. One of these modelers is designed to provide complex interior and exterior architectural models <ref> [HALL91] </ref>. Testbed software is being used for parallel computations on powerful workstations. Clusters of Hewlett Packard 835 workstations and Digital Equipment 5000 and 3100 workstations have been used to develop new parallel rendering algorithms.
Reference: [IMME86] <author> Immel, David S., Michael F. Cohen, and Donald P. Greenberg. </author> <title> "A Radiosity Method for Non-Diffuse Environments," </title> <booktitle> Proceedings of SIGGRAPH'86, in Computer Graphics, </booktitle> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pages 133-142. </pages>
Reference-contexts: The final radiosities, representing the complete interreflections between these surfaces, can be found by solving a set of simultaneous equations. Although the approach was originally restricted to simple diffuse environments, it has subsequently been extended to complex environments [COHE85], specular surfaces <ref> [IMME86, WALL87] </ref>, and to scenes with participating media [RUSH87]. Furthermore, computational times have recently been vastly reduced using progressive refinement methods [COHE88].
Reference: [KAJI86] <author> Kajiya, James T. </author> <title> "The Rendering Equation," </title> <booktitle> Proceedings of SIGGRAPH'86, in Computer Graphics, </booktitle> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pages 143-150. </pages>
Reference-contexts: In the Radiosity Method the environment is discretized and a view independent solution is obtained. Both methods use simplifying assumptions in an attempt to simulate the propagation of light and solve the general Rendering Equation <ref> [KAJI86] </ref>. In ray tracing, a ray is traced from the eye through each pixel into the environment [WHIT80]. At each surface struck by the ray, reflected and/or refracted rays can be spawned. Each of these must be recursively traced to establish which surfaces they intersect.
Reference: [KAPL85] <author> Kaplan, Michael R. "Space-Tracing, </author> <title> A Constant Time Ray-Tracer," </title> <booktitle> SIGGRAPH'85 State of the Art in Image Synthesis seminar notes, </booktitle> <month> July </month> <year> 1985. </year>
Reference-contexts: The final pixel intensity is determined by traversing the tree and computing the intensity contribution of each node according to the assumed surface reflection model. Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods <ref> [GLAS84, KAPL85, HAIN86, GOLD87] </ref> have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering [SPAR78], determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light.
Reference: [KIRK88] <author> Kirk, David and James Arvo. </author> <title> "The Ray Tracing Kernel," </title> <booktitle> in Proceedings of Ausgraph '88, </booktitle> <address> Melbourne, Australia, </address> <month> July </month> <year> 1988, </year> <pages> pages 75-82. </pages>
Reference-contexts: Ray/Object Intersection: There are many algorithms that require the intersection of a ray with a primitive object. These routines find such intersection points, the distance along the ray to the point, and the object's surface normal vector at the point <ref> [KIRK88] </ref>. Polygonal Approximation: many rendering algorithms operate only on polygonal data. This module generates polygonal approximations of varying resolutions for each primitive primitive type. This software is particularly useful for radiosity algorithms, which begin by approximating an environment with a collection of polygonal patches.
Reference: [LYTL89] <author> Lytle, Wayne T. </author> <title> A Modular Testbed for Realistic Image Synthesis, </title> <type> Master's thesis, </type> <institution> Program of Computer Graphics, Cornell University, </institution> <address> Ithaca, New York, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: For these reasons it was important to devise a Testbed to facilitate research in future image synthesis techniques. The Testbed which has been developed at Cornell University's Program of Computer Graphics <ref> [LYTL89] </ref> has been structured to perform the following: 1. Test new light reflection models and new global illumination algorithms so that experimental approaches can be combined in a modular fashion. 2. Render scenes and simulations of far greater complexity than what is currently being rendered. 3.
Reference: [NADA87] <author> Nadas, Tom and Alain Fournier. </author> <title> "GRAPE: An Environment to Build Display Processes," </title> <booktitle> Proceedings of SIGGRAPH'87, in Computer Graphics, </booktitle> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pages 75-84. </pages>
Reference-contexts: This system used UNIX filters to construct image rendering pipelines. New techniques could easily be added, and the system lent itself to experimentation with distributed rendering. In the same year Nadas and Fournier presented the GRAPE testbed system <ref> [NADA87] </ref>, also based on a similar notion of "loosely coupled" nodes. GRAPE used data-flow methods to provide a more flexible architecture that was not limited to a linear flow. However, since node assemblies may not contain cycles, this system is still not flexible enought to facilitate global lighting affects.
Reference: [PETE86] <author> Peterson, J. W., R. G. Bogart, and S. W. Thomas. </author> <title> The Utah Raster Toolkit, </title> <institution> Technical Report , Department of Computer Science, University of Utah, </institution> <address> Salt Lake City, Utah, </address> <year> 1986. </year>
Reference-contexts: This information can range from simple Red-Green-Blue color specifications to spectral database references that contain a material's reflectance at dozens of wavelengths. Image Format: This module handles input/output of raster images. The Testbed uses the Utah Raster Toolkit's Run Length Encoded (RLE) image format for this purpose <ref> [PETE86] </ref>. These image files are used as texturing data and as the output of some high level rendering programs. Ray and View Data Structures: Data structures supported by this module represent Ray Tracing rays and viewing specifications.
Reference: [POTM87] <author> Potmesil, Michael and Eric M. Hoffert. </author> <title> "FRAMES: Software Tools for Modeling, Rendering and Animation of 3D Scenes," </title> <booktitle> Proceedings of SIGGRAPH'87, in Computer Graphics, </booktitle> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pages 85-94. </pages>
Reference-contexts: This object-oriented system was modular and allowed easy addition and testing of experimental object types. Potmesil and Hoffert of Bell Laboratories developed the testbed system FRAMES <ref> [POTM87] </ref>. This system used UNIX filters to construct image rendering pipelines. New techniques could easily be added, and the system lent itself to experimentation with distributed rendering. In the same year Nadas and Fournier presented the GRAPE testbed system [NADA87], also based on a similar notion of "loosely coupled" nodes.
Reference: [RUSH87] <author> Rushmeier, Holly E. and Kenneth E. Torrance. </author> <title> "The Zonal Method for Calculating Light Intensities in the Presence of a Participating Medium," </title> <booktitle> Proceedings of SIGGRAPH'87, in Computer Graphics, </booktitle> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pages 293-302. </pages>
Reference-contexts: The final radiosities, representing the complete interreflections between these surfaces, can be found by solving a set of simultaneous equations. Although the approach was originally restricted to simple diffuse environments, it has subsequently been extended to complex environments [COHE85], specular surfaces [IMME86, WALL87], and to scenes with participating media <ref> [RUSH87] </ref>. Furthermore, computational times have recently been vastly reduced using progressive refinement methods [COHE88].
Reference: [SPAR78] <author> Sparrow, E. M. and R. D. Cess. </author> <title> Radiation Heat Transfer, </title> <publisher> Hemisphere Publishing Corp., </publisher> <address> Washington D.C., </address> <year> 1978. </year>
Reference-contexts: Numerous methods including adaptive ray tracing [HALL83], distributed ray tracing [COOK84b], cone tracing [AMAN84], and environment subdivision methods [GLAS84, KAPL85, HAIN86, GOLD87] have subsequently reduced computation times and improved image quality. The radiosity approach [GORA84], based on methods from thermal engineering <ref> [SPAR78] </ref>, determines surface intensities independent of the observer position. The radiosity of the light energy leaving a surface consists of both self-emitted and reflected incident light.
Reference: [STRA88] <author> Strauss, Paul S. </author> <title> BAGS: The Brown Animation Generation System, </title> <type> Technical Report CS-88-27, </type> <institution> Department of Computer Science, Brown University, </institution> <address> Providence, Rhode Island, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Designed more as a production system than a testbed, this system efficiently renders environments of very high model and shading complexity. REYES is an example of a "monolithic" system, which is geared toward one specific rendering technique. Brown University's BAGS system <ref> [STRA88, ZELE91] </ref> provides several rendering techniques, including scanline and ray tracing renderers. Because it consists of many software modules, BAGS appears to be a flexible system for developing new renderers. However, its modules are tightly coupled and interdependent.
Reference: [WALL87] <author> Wallace, John R., Michael F. Cohen, and Donald P. Greenberg. </author> <title> "A Two-Pass Solution to the Rendering Equation: A Synthesis of Ray Tracing and Radiosity Methods," </title> <booktitle> Proceedings of SIGGRAPH'87, in Computer Graphics, </booktitle> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pages 311-320. </pages>
Reference-contexts: The final radiosities, representing the complete interreflections between these surfaces, can be found by solving a set of simultaneous equations. Although the approach was originally restricted to simple diffuse environments, it has subsequently been extended to complex environments [COHE85], specular surfaces <ref> [IMME86, WALL87] </ref>, and to scenes with participating media [RUSH87]. Furthermore, computational times have recently been vastly reduced using progressive refinement methods [COHE88].
Reference: [WALL89] <author> Wallace, John R., Kells A. Elmquist, and Eric A. Haines. </author> <title> "A Ray Tracing Algorithm for Progressive Radiosity," </title> <booktitle> Proceedings of SIGGRAPH'89, in Computer Graphics, </booktitle> <volume> 23(3), </volume> <month> July </month> <year> 1989, </year> <pages> pages 315-324. </pages>
Reference-contexts: Calculation of these form factors is performed in these modules. Some algorithms use the hemicube and scan conversion algorithms [COHE85], while others perform the calculation using ray casts <ref> [WALL89] </ref>. Radiosity Display: Often it is desirable to display a completed radiosity solution on some common graphics hardware. This module performs this task on several different brands of graphics dis plays. Light Emission Distributions: This module allows specification of non-uniform light emission distributions.
Reference: [WEIL88] <author> Weiler, Kevin J. </author> <title> Topological Structures for Geometric Modeling, </title> <type> PhD dissertation, </type> <institution> Rens-selaer Polytechnic Institute, </institution> <address> Troy, New York, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: It also reads geometric data and rendering attributes for those objects that specify them. Polygonal Data Structures: The Testbed uses several geometric data formats, relying mainly on the Face-Edge Data structure (FED) <ref> [WEIL88] </ref>. Several libraries implement this data format, reading and writing between data structures and files. FED stores considerable information about an object's topology. This information is useful for implementing meshing and radiosity algorithms. Rendering Attributes: Each object requires material and surface properties to be rendered properly.
Reference: [WHIT80] <author> Whitted, Turner. </author> <title> "An Improved Illumination Model for Shaded Display," </title> <journal> Communications of the ACM, </journal> <volume> 23(6), </volume> <month> June </month> <year> 1980, </year> <pages> pages 343-349. </pages>
Reference-contexts: Both methods use simplifying assumptions in an attempt to simulate the propagation of light and solve the general Rendering Equation [KAJI86]. In ray tracing, a ray is traced from the eye through each pixel into the environment <ref> [WHIT80] </ref>. At each surface struck by the ray, reflected and/or refracted rays can be spawned. Each of these must be recursively traced to establish which surfaces they intersect. As the ray is traced through the environment, an intersection tree is constructed for each pixel.
Reference: [WHIT82] <author> Whitted, T. and S. Weimer. </author> <title> "A Software Testbed for the Development of 3D Raster Graphics Systems," </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(1), </volume> <month> January </month> <year> 1982, </year> <pages> pages 43-58. </pages>
Reference-contexts: The new Testbed for Image Synthesis, described in this paper, fits the latter classification. One of the first testbeds appearing in the literature was developed at Bell Laboratories in 1982 and was used for scanline rendering <ref> [WHIT82] </ref>. This testbed facilitated the construction of renderers that allowed the simultaneous processing of several object types in a single pass.
Reference: [ZELE91] <author> Zeleznik, Robert C. et. al. </author> <title> "An Object-Oriented Framework for the Integration of Interactive Animation Techniques," </title> <booktitle> Proceedings of SIGGRAPH'91, in Computer Graphics, </booktitle> <volume> 25, </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: Designed more as a production system than a testbed, this system efficiently renders environments of very high model and shading complexity. REYES is an example of a "monolithic" system, which is geared toward one specific rendering technique. Brown University's BAGS system <ref> [STRA88, ZELE91] </ref> provides several rendering techniques, including scanline and ray tracing renderers. Because it consists of many software modules, BAGS appears to be a flexible system for developing new renderers. However, its modules are tightly coupled and interdependent.
References-found: 33

