URL: http://www.cs.brown.edu/people/pvh/transistor.ps
Refering-URL: http://www.cs.brown.edu/people/pvh/
Root-URL: http://www.cs.brown.edu
Email: puget@ilog.fr  pvh@cs.brown.edu  
Title: A Constraint Satisfaction Approach to a Circuit Design Problem  
Author: Jean-Fran~cois Puget Ilog SA, Pascal Van Hentenryck 
Keyword: Global zero search, electrical circuit, transistor modeling, interval methods, branch and prune, constraint satisfaction.  
Address: F-94253 Gentilly (France)  Box 1910 Providence, RI 02912  
Affiliation: 9, rue de Verdun  Brown University  
Abstract: A classical circuit-design problem from Ebers and Moll [6] features a system of nine nonlinear equations in nine variables that is very challenging both for local and global methods. This system was solved globally using an interval method by Ratschek and Rokne [23] in the box [0; 10] 9 . Their algorithm had enormous costs (i.e., over 14 months using a network of 30 Sun Sparc-1 workstations) but they state that "at this time, we know no other method which has been applied to this circuit design problem and which has led to the same guaranteed result of locating exactly one solution in this huge domain, completed with a reliable error estimate." The present paper gives a novel branch-and-prune algorithm that obtains a unique safe box for the above system within reasonable computation times. The algorithm combines traditional interval techniques with an adaptation of discrete constraint-satisfaction techniques to continuous problems. Of particular interest is the simplicity of the approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alefeld and J. Herzberger. </author> <title> Introduction to Interval Computations. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1983. </year> <month> 16 </month>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set. <p> For instance, the interval function is the most precise interval extension of addition (i.e., it returns the smallest possible interval containing all real results), while a function always returning <ref> [1; 1] </ref> would be the least accurate. In the following, we assume fixed monotonic interval extensions for the primitive operators (for instance, the interval extension of + is defined by ). <p> The Transistor Modeling Problem The box (2)-consistency algorithm was applied to find all solutions of the transistor modeling problem. Branching was applied until a safe box or a box of width smaller than 10 8 was obtained. The algorithm returned a unique box x <ref> [1] </ref> = 0.8999999 + [0.485178e-7 , 0.566954e-7] x [3] = 1.00000648 + [0.60195e-9 , 0.43303e-8] x [5] = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x [7] = 5.00003127 + [0.338646e-8 , 0.848255e-8] x [9] = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range [0; 10] 9 , together with a proof
Reference: [2] <author> F. Benhamou, D. McAllester, and P. Van Hentenryck. </author> <title> CLP(Intervals) Revisited. </title> <booktitle> In Proceedings of the International Symposium on Logic Programming (ILPS-94), </booktitle> <pages> pages 124-138, </pages> <address> Ithaca, NY, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: There are many ways to implement the concepts described in this section, and our goal here is to focus on the concepts, not on the technical details (which can be found elsewhere [24]). 6 5.2.1 Informal Presentation The first fundamental idea underlying box (1)-consistency <ref> [2] </ref> is to project all variables but one or, more precisely, to replace all variables but one by their intervals. This produces a stronger pruning than box (0)-consistency but, of course, at a higher cost. <p> The techniques used in systems like BNR-Prolog and CLP (BNR) are weaker than box (1)-consistency, since they decompose all constraints into ternary constraints on distinct variables before applying a form of box (1)-consistency. They do not scale well on difficult problems. Box (1)-consistency was introduced in <ref> [2] </ref>. It is related to the techniques presented in [10], which uses a similar idea for the splitting process.
Reference: [3] <author> F. Benhamou and W. </author> <title> Older. Applying Interval Arithmetic to Real, Integer and Boolean Constraints. </title> <journal> Journal of Logic Programming, </journal> <volume> 32(1) </volume> <pages> 1-24, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., [16, 15]). They have been adapted to continuous problems (e.g., [5, 14]) and used inside systems such as BNR-Prolog and CLP (BNR) <ref> [21, 3] </ref> and many systems since then. The techniques used in systems like BNR-Prolog and CLP (BNR) are weaker than box (1)-consistency, since they decompose all constraints into ternary constraints on distinct variables before applying a form of box (1)-consistency. They do not scale well on difficult problems. <p> Branching was applied until a safe box or a box of width smaller than 10 8 was obtained. The algorithm returned a unique box x [1] = 0.8999999 + [0.485178e-7 , 0.566954e-7] x <ref> [3] </ref> = 1.00000648 + [0.60195e-9 , 0.43303e-8] x [5] = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x [7] = 5.00003127 + [0.338646e-8 , 0.848255e-8] x [9] = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range [0; 10] 9 , together with a proof that the box contains a solution.
Reference: [4] <author> O. Caprani and K. Madsen. </author> <title> Mean Value Forms in Interval Analysis. </title> <journal> Computing, </journal> <volume> 25 </volume> <pages> 147-154, </pages> <year> 1980. </year>
Reference-contexts: The proof of the following proposition can be found in <ref> [4] </ref>. Proposition 3 The mean value interval extension of a function is a monotonic interval extension.
Reference: [5] <author> J.G Cleary. </author> <title> Logical Arithmetic. </title> <journal> Future Generation Computing Systems, </journal> <volume> 2(2) </volume> <pages> 125-149, </pages> <year> 1987. </year>
Reference-contexts: Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., [16, 15]). They have been adapted to continuous problems (e.g., <ref> [5, 14] </ref>) and used inside systems such as BNR-Prolog and CLP (BNR) [21, 3] and many systems since then. <p> Branching was applied until a safe box or a box of width smaller than 10 8 was obtained. The algorithm returned a unique box x [1] = 0.8999999 + [0.485178e-7 , 0.566954e-7] x [3] = 1.00000648 + [0.60195e-9 , 0.43303e-8] x <ref> [5] </ref> = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x [7] = 5.00003127 + [0.338646e-8 , 0.848255e-8] x [9] = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range [0; 10] 9 , together with a proof that the box contains a solution.
Reference: [6] <author> J.J. Ebers and J.L. Moll. </author> <title> Large-Scale Behaviour of Junction Transistors. </title> <booktitle> IEE Proc., </booktitle> <volume> 42 </volume> <pages> 1761-1772, </pages> <year> 1954. </year>
Reference-contexts: 1 Introduction The transistor modeling problem of Ebers and Moll <ref> [6] </ref> is the system of nonlinear equations 8 &gt; : (1 x 1 x 2 )x 3 [ exp (x 6 (g 1k g 2k g 3k x 7 10 3 + g 4k x 9 10 3 )) 1 ] g 5k x 1 + g 4k = 0 (1 <p> A fundamental topic for future research is thus to determine when box (2)- consistency is more effective than box (1)-consistency and, more generally, to characterize the class of nonlinear problems for which these techniques are effective. 8 Conclusion This paper reconsidered the transistor modeling problem from Ebers and Moll <ref> [6] </ref>, which consists of nine nonlinear equations and is challenging both for local and global methods. The problem was tackled by a novel branch-and-prune algorithm combining techniques from interval methods and constraint satisfaction.
Reference: [7] <author> E.R. Hansen and R.I. Greenberg. </author> <title> An Interval Newton Method. </title> <journal> Appl. Math. Comput., </journal> <volume> 12 </volume> <pages> 89-98, </pages> <year> 1983. </year>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set. <p> Branching was applied until a safe box or a box of width smaller than 10 8 was obtained. The algorithm returned a unique box x [1] = 0.8999999 + [0.485178e-7 , 0.566954e-7] x [3] = 1.00000648 + [0.60195e-9 , 0.43303e-8] x [5] = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x <ref> [7] </ref> = 5.00003127 + [0.338646e-8 , 0.848255e-8] x [9] = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range [0; 10] 9 , together with a proof that the box contains a solution.
Reference: [8] <author> E.R. Hansen and S. Sengupta. </author> <title> Bounding Solutions of Systems of Equations Using Interval Analysis. </title> <journal> BIT, </journal> <volume> 21 </volume> <pages> 203-211, </pages> <year> 1981. </year>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set. <p> Proposition 3 The mean value interval extension of a function is a monotonic interval extension. It is interesting to note that box consistency on the mean value interval extension of a system of constraints is closely related to the Hansen-Sengupta operator <ref> [8] </ref>, which is an improvement over Krawczyk's operator [13]. Hansen and Smith also argue that these operators are more effective when the interval Jacobian of the system is diagonally dominant [9] and they suggest conditioning the system S.
Reference: [9] <author> E.R. Hansen and R.R. Smith. </author> <title> Interval Arithmetic in Matrix Computation: Part II. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 4 </volume> <pages> 1-9, </pages> <year> 1967. </year>
Reference-contexts: Hansen and Smith also argue that these operators are more effective when the interval Jacobian of the system is diagonally dominant <ref> [9] </ref> and they suggest conditioning the system S. For the purpose of this paper, we simply assume that we have a conditioning operator cond (S; ~ I) and use the notation t c (S; ~ I) to denote t (cond (S; ~ I); ~ I). <p> The algorithm returned a unique box x [1] = 0.8999999 + [0.485178e-7 , 0.566954e-7] x [3] = 1.00000648 + [0.60195e-9 , 0.43303e-8] x [5] = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x [7] = 5.00003127 + [0.338646e-8 , 0.848255e-8] x <ref> [9] </ref> = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range [0; 10] 9 , together with a proof that the box contains a solution. The algorithm performs only 118 branchings and takes 2359.80 seconds (roughly 40 minutes) on a Sun Ultra-2 running Solaris.
Reference: [10] <author> H. Hong and V. Stahl. </author> <title> Safe Starting Regions by Fixed Points and Tightening. </title> <booktitle> Computing, </booktitle> <address> 53(3-4):323-335, </address> <year> 1994. </year>
Reference-contexts: It suffices to say that successful attempts require very elaborate procedures, sometimes combining several globally convergent algorithms. In the same paper [23], Ratschek and Rokne propose an interval method which solves the problem globally in the box <ref> [0; 10] </ref> 9 . In particular, they show that there exists a unique solution in this box and they provide a guaranteed error estimate by enclosing the solution in a box whose intervals are of width smaller than 3:2 fi 10 4 . <p> They do not scale well on difficult problems. Box (1)-consistency was introduced in [2]. It is related to the techniques presented in <ref> [10] </ref>, which uses a similar idea for the splitting process. <p> The algorithm returned a unique box x [1] = 0.8999999 + [0.485178e-7 , 0.566954e-7] x [3] = 1.00000648 + [0.60195e-9 , 0.43303e-8] x [5] = 7.9999714 + [0.3767867e-7 , 0.4259589e-7] x [7] = 5.00003127 + [0.338646e-8 , 0.848255e-8] x [9] = 2.00005248 + [0.47411e-9 , 0.649037e-8] in the original range <ref> [0; 10] </ref> 9 , together with a proof that the box contains a solution. The algorithm performs only 118 branchings and takes 2359.80 seconds (roughly 40 minutes) on a Sun Ultra-2 running Solaris. This is of course a considerable improvement over the results of Ratschek and Rokne [23]. <p> In particular, the algorithm enforces a local consistency condition called box (2)-consistency that strengthens the notion of box (1)-consistency introduced in [24]. The algorithm was applied to find all solutions to the transistor modeling problem and returned a unique safe box in the range <ref> [0; 10] </ref> 9 in about 40 minutes, performing only 118 branchings. The paper also indicated that box (2)-consistency may be too strong a local condition for many problems, since it is slower than box (1)-consistency on benchmarks from continuation methods [25].
Reference: [11] <author> R.B. Kearfott. </author> <title> Preconditioners for the Interval Gauss-Seidel Method. </title> <journal> SIAM Journal of Numerical Analysis, </journal> <volume> 27 </volume> <pages> 804-822, </pages> <year> 1990. </year>
Reference-contexts: For the purpose of this paper, we simply assume that we have a conditioning operator cond (S; ~ I) and use the notation t c (S; ~ I) to denote t (cond (S; ~ I); ~ I). See <ref> [11, 12] </ref> for extensive coverage of conditioners. 6.3 The Branch-and-Prune Algorithm We are now in position to reconsider our branch-and-prune algorithm. The new version, given in algorithm receives as input a system of constraints (instead of a system of interval constraints).
Reference: [12] <author> R.B. Kearfott. </author> <title> A Review of Preconditioners for the Interval Gauss-Seidel Method. Interval Computations 1, </title> <booktitle> 1 </booktitle> <pages> 59-85, </pages> <year> 1991. </year>
Reference-contexts: For the purpose of this paper, we simply assume that we have a conditioning operator cond (S; ~ I) and use the notation t c (S; ~ I) to denote t (cond (S; ~ I); ~ I). See <ref> [11, 12] </ref> for extensive coverage of conditioners. 6.3 The Branch-and-Prune Algorithm We are now in position to reconsider our branch-and-prune algorithm. The new version, given in algorithm receives as input a system of constraints (instead of a system of interval constraints).
Reference: [13] <author> R. Krawczyk. </author> <title> Newton-Algorithmen zur Bestimmung von Nullstellen mit Fehlerschranken. </title> <journal> Computing, </journal> <volume> 4 </volume> <pages> 187-201, </pages> <year> 1969. </year>
Reference-contexts: Proposition 3 The mean value interval extension of a function is a monotonic interval extension. It is interesting to note that box consistency on the mean value interval extension of a system of constraints is closely related to the Hansen-Sengupta operator [8], which is an improvement over Krawczyk's operator <ref> [13] </ref>. Hansen and Smith also argue that these operators are more effective when the interval Jacobian of the system is diagonally dominant [9] and they suggest conditioning the system S.
Reference: [14] <author> O. Lhomme. </author> <title> Consistency Techniques for Numerical Constraint Satisfaction Problems. </title> <booktitle> In Proceedings of the 1993 International Joint Conference on Artificial Intelligence, </booktitle> <address> Chamberry, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Box (2)-consistency is in fact an approximation of path consistency [16] and is related to some consistency notions presented in <ref> [14] </ref>. 8 function Prune 1 (S, ~ I) begin repeat ~ I p := ~ I ; ~ I = " f Narrow 1 (S, ~ I,i) j 1 i n g; until ~ I = ~ I p ; return ~ I; end function Narrow 1 (S,hI 1 ; : <p> Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., [16, 15]). They have been adapted to continuous problems (e.g., <ref> [5, 14] </ref>) and used inside systems such as BNR-Prolog and CLP (BNR) [21, 3] and many systems since then. <p> They do not scale well on difficult problems. Box (1)-consistency was introduced in [2]. It is related to the techniques presented in [10], which uses a similar idea for the splitting process. The consistency notions of <ref> [14] </ref> are a weaker, and less effective, form of box (k)-consistency: it is obtained by decomposing all constraints into ternary constraints over distinct variables and by applying a form of box (k)-consistency on the resulting constraints. 11 function Prune 2 (S, ~ I) begin repeat ~ I p := ~ I
Reference: [15] <author> A.K. Mackworth. </author> <title> Consistency in Networks of Relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., <ref> [16, 15] </ref>). They have been adapted to continuous problems (e.g., [5, 14]) and used inside systems such as BNR-Prolog and CLP (BNR) [21, 3] and many systems since then.
Reference: [16] <author> U. Montanari. </author> <title> Networks of Constraints : Fundamental Properties and Applications to Picture Processing. </title> <journal> Information Science, </journal> <volume> 7(2) </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: For some applications, however, and for the transistor modeling problem in particular, better performance can be obtained by using a stronger local consistency condition that we call box (2)- consistency. Box (2)-consistency is in fact an approximation of path consistency <ref> [16] </ref> and is related to some consistency notions presented in [14]. 8 function Prune 1 (S, ~ I) begin repeat ~ I p := ~ I ; ~ I = " f Narrow 1 (S, ~ I,i) j 1 i n g; until ~ I = ~ I p ; return <p> Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., <ref> [16, 15] </ref>). They have been adapted to continuous problems (e.g., [5, 14]) and used inside systems such as BNR-Prolog and CLP (BNR) [21, 3] and many systems since then.
Reference: [17] <author> R.E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1966. </year> <month> 17 </month>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set. <p> This extension is an example of centered forms that are interval extensions introduced by Moore <ref> [17] </ref> and have been studied by many authors, since they have important properties. The mean value interval extension of a function is parametrized by the intervals for the variables in the function. It also assumes that the function has continuous partial derivatives.
Reference: [18] <author> R.E. Moore. </author> <title> Methods and Applications of Interval Analysis. </title> <publisher> SIAM Publ., </publisher> <year> 1979. </year>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set.
Reference: [19] <author> R.E. Moore and S.T. Jones. </author> <title> Safe Starting Regions for Iterative Methods. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 14 </volume> <pages> 1051-1065, </pages> <year> 1977. </year>
Reference-contexts: If I 0 then there exists a zero in hI 0 1 ; : : : ; I 0 n i. A proof of this result can be found in <ref> [19] </ref>. 7 Experimental Results This section reports experimental results of the branch-and-prune algorithms. We compare the branch-and-prune algorithm with two instantiations of the pruning operator: Prune 1 to obtain the algorithm presented in [24] and Prune 2 to obtain a novel algorithm more effective for the transistor modeling problem.
Reference: [20] <author> A. Neumaier. </author> <title> Interval Methods for Systems of Equations. </title> <booktitle> PHI Series in Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1990. </year>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set.
Reference: [21] <author> W. Older and A. Vellino. </author> <title> Constraint Arithmetic on Real Intervals. In Constraint Logic Programming: Selected Research. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachussetts, </address> <year> 1993. </year>
Reference-contexts: Projections, and approximations of projections, have been used extensively in the artificial intelligence community (under the name consistency techniques) to solve discrete combinatorial problems (e.g., [16, 15]). They have been adapted to continuous problems (e.g., [5, 14]) and used inside systems such as BNR-Prolog and CLP (BNR) <ref> [21, 3] </ref> and many systems since then. The techniques used in systems like BNR-Prolog and CLP (BNR) are weaker than box (1)-consistency, since they decompose all constraints into ternary constraints on distinct variables before applying a form of box (1)-consistency. They do not scale well on difficult problems.
Reference: [22] <author> H. Ratschek and J. Rokne. </author> <title> New Computer Methods for Global Optimization. </title> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, </address> <year> 1988. </year>
Reference-contexts: Section 7 reports the experimental results and Section 8 concludes the paper. 2 Preliminaries Here we review some basic concepts of interval analysis to needed for this paper. More information on interval arithmetic can be found in many places (e.g., <ref> [1, 8, 7, 17, 18, 20, 22] </ref>). Our definitions are slightly non-standard. 2.1 Interval Arithmetic We consider &lt; 1 = &lt; [ f1; 1g, the set of real numbers extended with the two infinity symbols, and the extension of the relation &lt; to this set.
Reference: [23] <author> H. Ratschek and J. Rokne. </author> <title> Experiments Using Interval Analysis for Solving a Circuit Design Problem. </title> <journal> Journal of Global Optimization, </journal> <volume> 3 </volume> <pages> 501-518, </pages> <year> 1993. </year>
Reference-contexts: Ratschek and Rokne <ref> [23] </ref> summarize various attempts to find a solution to this problem using local methods; these descriptions are not repeated 1 here. It suffices to say that successful attempts require very elaborate procedures, sometimes combining several globally convergent algorithms. In the same paper [23], Ratschek and Rokne propose an interval method which <p> Ratschek and Rokne <ref> [23] </ref> summarize various attempts to find a solution to this problem using local methods; these descriptions are not repeated 1 here. It suffices to say that successful attempts require very elaborate procedures, sometimes combining several globally convergent algorithms. In the same paper [23], Ratschek and Rokne propose an interval method which solves the problem globally in the box [0; 10] 9 . <p> The computation times to obtain this result are, however, extremely large. No computation times were given in <ref> [23] </ref>, since this was not the primary aim of the paper. However, a preliminary draft of the paper indicated that the total process took over 14 months using a network of 30 Sun Sparc-1 workstations. <p> Definition 1 [Interval] An interval [l; u] with l; u 2 F is the set of real numbers fr 2 &lt; j l r ug: 1 Proving that the safe box contains a unique solution requires some experimental trial-and-error work; see Section 6 of <ref> [23] </ref> for a discussion of this issue. 2 The set of intervals is denoted by I and is ordered by set inclusion. 2 Definition 2 [Enclosure] Let S be a subset of &lt;. <p> The algorithm performs only 118 branchings and takes 2359.80 seconds (roughly 40 minutes) on a Sun Ultra-2 running Solaris. This is of course a considerable improvement over the results of Ratschek and Rokne <ref> [23] </ref>. Interestingly, the box (1)-consistency algorithm performs 135099 branchings and takes 11841 seconds (roughly 3 hours and 20 minutes) on the same machine, still a considerable improvement over [23]. <p> This is of course a considerable improvement over the results of Ratschek and Rokne <ref> [23] </ref>. Interestingly, the box (1)-consistency algorithm performs 135099 branchings and takes 11841 seconds (roughly 3 hours and 20 minutes) on the same machine, still a considerable improvement over [23]. Benchmarks from Continuation Methods It is worth comparing the box (1)- and box (2)- consistency algorithms on some standard benchmarks from continuation methods [25]. The box (1)- consistency algorithm compares well with continuation methods on these benchmarks [24].
Reference: [24] <author> P. Van Hentenryck, D. McAllister, and D. Kapur. </author> <title> Solving Polynomial Systems Using a Branch and Prune Approach. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 34(2) </volume> <pages> 797-827, </pages> <year> 1997. </year>
Reference-contexts: The pruning techniques, some of which were presented in <ref> [24] </ref> and some of which are novel, are based on constraint-satisfaction techniques from artificial intelligence and are particularly effective when far from a solution. These techniques are thus orthogonal to traditional interval techniques, which are most effective close to a solution (when the boxes are small). <p> There are many ways to implement the concepts described in this section, and our goal here is to focus on the concepts, not on the technical details (which can be found elsewhere <ref> [24] </ref>). 6 5.2.1 Informal Presentation The first fundamental idea underlying box (1)-consistency [2] is to project all variables but one or, more precisely, to replace all variables but one by their intervals. This produces a stronger pruning than box (0)-consistency but, of course, at a higher cost. <p> Figure 2 presents a simple iterative algorithm for this purpose; see <ref> [24] </ref> for a more efficient implementation. The algorithm is a simple fixpoint algorithm that terminates when no further pruning can be obtained (i.e., ~ I = ~ I p ). <p> The narrowing function Narrow 1 (S, ~ I,i) returns the largest box ~ I 0 in ~ I such that S is box (1)-consistent in ~ I 0 wrt i. 5.3 Box (2)-Consistency Box consistency has been shown to be effective for solving a variety of nonlinear applications <ref> [24] </ref>. For some applications, however, and for the transistor modeling problem in particular, better performance can be obtained by using a stronger local consistency condition that we call box (2)- consistency. <p> A proof of this result can be found in [19]. 7 Experimental Results This section reports experimental results of the branch-and-prune algorithms. We compare the branch-and-prune algorithm with two instantiations of the pruning operator: Prune 1 to obtain the algorithm presented in <ref> [24] </ref> and Prune 2 to obtain a novel algorithm more effective for the transistor modeling problem. The Transistor Modeling Problem The box (2)-consistency algorithm was applied to find all solutions of the transistor modeling problem. <p> Benchmarks from Continuation Methods It is worth comparing the box (1)- and box (2)- consistency algorithms on some standard benchmarks from continuation methods [25]. The box (1)- consistency algorithm compares well with continuation methods on these benchmarks <ref> [24] </ref>. <p> See <ref> [25, 24] </ref> for a description of the benchmarks. The intention is not to compare the two algorithms systematically but rather to make readers aware that neither of two algorithms is really superior. <p> The problem was tackled by a novel branch-and-prune algorithm combining techniques from interval methods and constraint satisfaction. In particular, the algorithm enforces a local consistency condition called box (2)-consistency that strengthens the notion of box (1)-consistency introduced in <ref> [24] </ref>. The algorithm was applied to find all solutions to the transistor modeling problem and returned a unique safe box in the range [0; 10] 9 in about 40 minutes, performing only 118 branchings.
Reference: [25] <author> J Verschelde, P. Verlinden, and R. Cools. </author> <title> Homotopies Exploiting Newton Polytopes For Solving Sparse Polynomial Systems. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 31(3) </volume> <pages> 915-930, </pages> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Benchmarks from Continuation Methods It is worth comparing the box (1)- and box (2)- consistency algorithms on some standard benchmarks from continuation methods <ref> [25] </ref>. The box (1)- consistency algorithm compares well with continuation methods on these benchmarks [24]. <p> See <ref> [25, 24] </ref> for a description of the benchmarks. The intention is not to compare the two algorithms systematically but rather to make readers aware that neither of two algorithms is really superior. <p> The paper also indicated that box (2)-consistency may be too strong a local condition for many problems, since it is slower than box (1)-consistency on benchmarks from continuation methods <ref> [25] </ref>. An interesting avenue of research is to characterize more formally the class of applications for which box (1)- and box (2)-consistency are effective pruning techniques. Acknowledgments Special thanks to Christian Bliek for bringing the transistor modeling problem to our attention and to Yves Deville for many interesting discussions.
References-found: 25

