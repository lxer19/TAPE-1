URL: http://www.cs.ucsd.edu/users/goguen/ps/hherb.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/new.html
Root-URL: http://www.cs.ucsd.edu
Email: goguen@cs.ucsd.edu  grant@csc.liv.ac.uk  
Phone: 2  3  
Title: A Hidden Herbrand Theorem  
Author: Joseph Goguen Grant Malcolm and Tom Kemp 
Address: San Diego  
Affiliation: 1 Dept. of Computer Science Engineering University of California at  Connect Centre Dept. of Computer Science University of Liverpool  Oxford  
Abstract: The benefits of the object, logic (or relational), functional, and constraint paradigms can be combined, by providing existential queries over objects and their attributes, subject to constraints. This paper provides a precise mathematical foundation for this novel programming paradigm, and shows that it is computationally feasible by reducing it to familiar problems over term algebras (i.e., Herbrand universes). We use the formalism of hidden logic, and our main result is a version of Herbrand's Theorem for that setting. By extending a result of Diaconescu, we lift our results from equational logic to Horn clause logic with equality. ? The research reported in this paper has been supported in part by the Science and Engineering Research Council, the EC under ESPRIT-2 BRA Working Groups 6071, IS-CORE and 6112, COMPASS, Fujitsu Laboratories Limited, and a contract under the management of the Information Technology Promotion Agency (IPA), Japan, as part of the Industrial Science and Technology Frontier Program `New Models for Software Architectures,' sponsored by NEDO (New Energy and Industrial Technology Development Organization). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Rod Burstall and Razvan Diaconescu. </author> <title> Hiding and behaviour: an institutional approach. </title> <editor> In A. W. Roscoe, editor, </editor> <title> A Classical Mind: essays dedicated to C.A.R. Hoare. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1994. </year>
Reference-contexts: A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu <ref> [1] </ref> have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 2. <author> Corina C^rstea. </author> <title> Coalgebra semantics for hidden algebra: parameterized objects and inheritance. </title> <booktitle> In Proc. 12th Workshop on Algebraic Development Techniques. Springer-Verlag Lecture Notes in Computer Science, to appear, </booktitle> <year> 1998. </year>
Reference-contexts: Some of these techniques have already been incorporated into the algebraic specification language CafeOBJ [8], and are also used in related coalgebraic approaches to the object paradigm <ref> [33, 26, 27, 2] </ref>. A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 3. <author> Corina C^rstea, Grant Malcolm, and James Worrell. </author> <title> Hidden order sorted algebra: subtypes for objects. </title> <type> Draft, </type> <institution> Oxford University Computing Laboratory, </institution> <year> 1998. </year>
Reference-contexts: Malcolm and Goguen [28] show that hidden order sorted logic forms an institution, using a construction that differs from Burstall and Diaconescu's in its treatment of error-handling; yet another treatment of ordered sorts in hidden algebra preserves the relationship between hidden algebra and coalgebra <ref> [3] </ref>.
Reference: 4. <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewriting systems. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Volume B: Formal Methods and Semantics, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: This means that the technique of narrowing, as described for example in <ref> [4] </ref>, in conjunction with proof techniques such as coinduction [17], can be used to solve queries. 6 Hidden Horn Clause Logic The queries considered so far have used equations.
Reference: 5. <author> Razvan Diaconescu. </author> <title> The logic of Horn clauses is equational. </title> <type> Technical Report PRG-TR-3-93, </type> <institution> Programming Research Group, University of Oxford, </institution> <year> 1993. </year> <note> Written in 1990. </note>
Reference-contexts: A hidden Herbrand Theorem is given in Section 5, stating that if a query is behaviourally satisfied by a certain term algebra, then it is behaviourally satisfied by all algebras. Section 6 generalises a result of Diaconescu <ref> [5] </ref>, allowing us to lift results in hidden algebra to hidden Horn clause logic with equality. 2 Prerequisites, Notation and Preliminaries Our presentation of hidden algebra is based on the notion of algebras as collections of structured sets. We assume familiarity with the `overloaded' approach to many sorted algebra. <p> In languages such as Prolog and Eqlog [19], sentences are Horn clauses with predicate symbols, which are interpreted as relations in models. This section generalises a theorem of Diaconescu <ref> [5] </ref> to lift our preceding results to hidden Horn clause logic with equality. <p> Diaconescu <ref> [5] </ref> gives a way of translating a first order signature into an algebraic signature by treating the predicate symbols as function symbols with result sort Bool , where Bool is a new sort with a single new constant true. Here we extend his definition to a translation between hidden signatures. <p> Again generalising Diaconescu <ref> [5] </ref>, the corresponding translation from alge bras to models uses an adjunction: Definition 18. <p> We shall often write this as HMod ;;C and call its objects (; ; ; ; C)-models or just (; ; C)-models if context permits. Diaconescu <ref> [5] </ref> defines a translation from Horn clauses to conditional equa tions; we extend this to include queries: Definition 20. Given a (; )-Horn clause e and a (; )-query q, define ff (e), a conditional [ b -equation, and ff (q), a [ b -query, as follows: 1.
Reference: 6. <author> Razvan Diaconescu. </author> <title> Category-based Semantics for Equational and Constraint Logic Programming. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <year> 1994. </year>
Reference-contexts: One solution (among many) is S = empty ; S 0 = push (0; push (3; empty)) : The solution in this example can be found in the standard term algebra using narrowing, as in the language Eqlog <ref> [19, 6] </ref>. Then the unique homomorphism from it to any other algebra which satisfies STACK gives corresponding values in each of these algebras. However, it is not obvious that this technique can guarantee the behavioural satisfaction of the query in all algebras which behaviourally satisfy STACK. <p> Our hidden algebraic approach differs from classical algebraic approaches in using a notion of behavioural satisfaction and a fixed interpretation for data sorts. In this it is quite similar to Diaconescu's categorical approach to the constraint paradigm <ref> [6, 7] </ref>, which uses a notion of built in data types. However, in hidden algebra these built-ins are protected, and hidden specifications have loose semantics with protected data. It is this loose semantics that allows hidden algebra to capture non-determinism by underspecification [17].
Reference: 7. <author> Razvan Diaconescu. </author> <title> A category-based equational logic semantics to constraint programming. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 1130 </volume> <pages> 200-222, </pages> <year> 1996. </year>
Reference-contexts: Our hidden algebraic approach differs from classical algebraic approaches in using a notion of behavioural satisfaction and a fixed interpretation for data sorts. In this it is quite similar to Diaconescu's categorical approach to the constraint paradigm <ref> [6, 7] </ref>, which uses a notion of built in data types. However, in hidden algebra these built-ins are protected, and hidden specifications have loose semantics with protected data. It is this loose semantics that allows hidden algebra to capture non-determinism by underspecification [17].
Reference: 8. <author> Razvan Diaconescu and Kokichi Futatsugi. </author> <title> Logical semantics for Cafeobj. </title> <type> Technical Report IS-RR-96-0024S, </type> <institution> Japan Advanced Institute of Science and Technology, </institution> <year> 1996. </year>
Reference-contexts: Some of these techniques have already been incorporated into the algebraic specification language CafeOBJ <ref> [8] </ref>, and are also used in related coalgebraic approaches to the object paradigm [33, 26, 27, 2]. A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12].
Reference: 9. <author> Hartmut Ehrig and Bernd Mahr. </author> <title> Fundamentals of Algebraic Specification 1: Equations and Initial Semantics. </title> <publisher> Springer, </publisher> <year> 1985. </year>
Reference-contexts: The hidden algebra approach to the object paradigm [17] is a natural extension of the initial algebra approach to abstract data types <ref> [23, 9] </ref>, and allows reasoning about systems with state. The hidden algebraic approach differs from classical algebraic approaches in that some sorts are declared to be hidden, and are used to model the states of objects; intuitively, states cannot be observed directly, but only indirectly through the attributes of objects.
Reference: 10. <author> Joseph A. Goguen. </author> <title> Types as theories. </title> <editor> In George Michael Reed, Andrew William Roscoe, and Ralph F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Science, </booktitle> <pages> pages 357-390. </pages> <publisher> Oxford University Press, </publisher> <year> 1991. </year>
Reference-contexts: is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality [19, 20] to hidden Horn clause logic with equality, building on prior work on hidden algebra as a foundation for the object paradigm <ref> [10, 13, 17] </ref>. We first study existential queries in a hidden equational setting, and obtain a Herbrand theorem that allows solutions to be constructed in a term algebra. We then extend this theorem to hidden Horn clause logic.
Reference: 11. <author> Joseph A. Goguen and Rod Burstall. Institutions: </author> <title> Abstract model theory for specification and programming. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(1) </volume> <pages> 95-146, </pages> <year> 1992. </year>
Reference-contexts: In languages such as Prolog and Eqlog [19], sentences are Horn clauses with predicate symbols, which are interpreted as relations in models. This section generalises a theorem of Diaconescu [5] to lift our preceding results to hidden Horn clause logic with equality. Recall (e.g., from <ref> [11] </ref>) that a first order signature (with equality) is a triple (S; ; ) such that (S; ) is a many sorted signature and is an S + - sorted family of sets of predicate or relation symbols.
Reference: 12. <author> Joseph A. Goguen and Razvan Diaconescu. </author> <title> An Oxford survey of order sorted algebra. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 4 </volume> <pages> 363-392, </pages> <year> 1994. </year>
Reference-contexts: A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra <ref> [22, 12] </ref>. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 13. <author> Joseph A. Goguen and Razvan Diaconescu. </author> <title> Towards an algebraic semantics for the object paradigm. </title> <editor> In Hartmut Ehrig and Fernando Orejas, editors, </editor> <title> Recent Trends in Data Type Specification. </title> <booktitle> Springer-Verlag Lecture Notes in Computer Science 785, </booktitle> <year> 1994. </year>
Reference-contexts: is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality [19, 20] to hidden Horn clause logic with equality, building on prior work on hidden algebra as a foundation for the object paradigm <ref> [10, 13, 17] </ref>. We first study existential queries in a hidden equational setting, and obtain a Herbrand theorem that allows solutions to be constructed in a term algebra. We then extend this theorem to hidden Horn clause logic.
Reference: 14. <author> Joseph A. Goguen and Grant Malcolm. </author> <title> Proof of correctness of object representations. </title> <editor> In A. W. Roscoe, editor, </editor> <title> A Classical Mind: essays dedicated to C.A.R. Hoare, </title> <booktitle> chapter 8, </booktitle> <pages> pages 119-142. </pages> <publisher> Prentice-Hall International, </publisher> <year> 1994. </year>
Reference-contexts: A key property of behavioural equivalence, which justifies a number of techniques for proving behavioural satisfaction <ref> [14, 28, 17] </ref>, becomes clear if we make the following definition: Definition 9.
Reference: 15. <author> Joseph A. Goguen and Grant Malcolm. </author> <title> Situated adaptive software: beyond the object paradigm. </title> <booktitle> In Proc. New Models for Software Architecture (Tokyo). </booktitle> <institution> Information-technology Promotion Agency, </institution> <year> 1995. </year>
Reference-contexts: We then extend this theorem to hidden Horn clause logic. All this provides a semantic foundation for a novel programming style, in which framing a query can activate methods that change the world so that a solution actually comes to exist <ref> [21, 15] </ref>. For example, consider a query about a holiday package, with constraints on cost, flight times, etc.; a solution to this query would be an actual package, with tickets, etc., satisfying the constraints.
Reference: 16. <author> Joseph A. Goguen and Grant Malcolm. </author> <title> Algebraic Semantics of Imperative Programs. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: We assume familiarity with the `overloaded' approach to many sorted algebra. To establish notation, we briefly review the main concepts and results; for compatible expositions with more detail, see <ref> [16, 29] </ref>. An S-sorted set A is a family of sets A s indexed by elements s 2 S.
Reference: 17. <author> Joseph A. Goguen and Grant Malcolm. </author> <title> A hidden agenda. </title> <type> Technical Report CS97-538, </type> <institution> Department of Computer Science and Engineering, University of California at San Diego, </institution> <year> 1997. </year> <note> An extended abstract appears in Proc. Intelligent Systems: a Semiotic Perspective, </note> <year> 1996. </year>
Reference-contexts: is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality [19, 20] to hidden Horn clause logic with equality, building on prior work on hidden algebra as a foundation for the object paradigm <ref> [10, 13, 17] </ref>. We first study existential queries in a hidden equational setting, and obtain a Herbrand theorem that allows solutions to be constructed in a term algebra. We then extend this theorem to hidden Horn clause logic. <p> For example, consider a query about a holiday package, with constraints on cost, flight times, etc.; a solution to this query would be an actual package, with tickets, etc., satisfying the constraints. The hidden algebra approach to the object paradigm <ref> [17] </ref> is a natural extension of the initial algebra approach to abstract data types [23, 9], and allows reasoning about systems with state. <p> -algebra structure by defining (A= ) ([a 1 ]; : : : ; [a n ]) = [A (a 1 ; : : : ; a n )], where [a] denotes the -equivalence class of a. 3 Hidden Algebra This section summarises the comprehensive introduction to hidden algebra given in <ref> [17] </ref>. Hidden algebra captures the fundamental distinction between data values and internal states by modeling the former with `visible' sorts and the latter with `hidden' sorts. <p> In <ref> [17] </ref> it is shown that hidden satisfaction can be defined using a smaller class of contexts; that is, we can restrict the number of `experiments' that are used to distinguish states to what we call local contexts: Definition 7. <p> A key property of behavioural equivalence, which justifies a number of techniques for proving behavioural satisfaction <ref> [14, 28, 17] </ref>, becomes clear if we make the following definition: Definition 9. <p> Proposition 2. is the greatest behavioural -congruence. 2 This result is proved in <ref> [17] </ref> and means that two states can be shown to be -equivalent by finding any -congruence that relates them: we call this proof technique hidden coinduction. <p> P is lexic iff all ground terms are defined. The following basic result is proved in <ref> [17] </ref>: Theorem 1. A hidden theory has an initial model iff it is consistent and lexic. An important result for initial models is given in Theorem 2, whose proof uses the following corollary to Lemmas 2 and 1: Lemma 4. <p> This means that the technique of narrowing, as described for example in [4], in conjunction with proof techniques such as coinduction <ref> [17] </ref>, can be used to solve queries. 6 Hidden Horn Clause Logic The queries considered so far have used equations. In languages such as Prolog and Eqlog [19], sentences are Horn clauses with predicate symbols, which are interpreted as relations in models. <p> However, in hidden algebra these built-ins are protected, and hidden specifications have loose semantics with protected data. It is this loose semantics that allows hidden algebra to capture non-determinism by underspecification <ref> [17] </ref>. When a hidden theory is deterministic, an initial, term-based model exists, which behaviourally satisfies an existential query iff all models behaviourally satisfy it.
Reference: 18. <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Universal realization, persistent interconnec-tion and implementation of abstract modules. </title> <editor> In M. Nielsen and E.M. Schmidt, editors, </editor> <booktitle> Proceedings, 9th International Conference on Automata, Languages and Programming, </booktitle> <pages> pages 265-281. </pages> <note> Springer-Verlag Lecture Notes in Mathematics 140, </note> <year> 1982. </year>
Reference-contexts: The hidden paradigm builds on work of Goguen and Meseguer on abstract machines <ref> [18, 29] </ref>; hidden algebra differs from this mainly in its use of behavioural satisfaction for equations, an idea first introduced by Reichel [31]. Later, Reichel [32] introduced the related idea of behavioural equivalence for states, which is also used here.
Reference: 19. <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Eqlog: Equality, types, and generic modules for logic programming. </title> <editor> In Douglas DeGroot and Gary Lindstrom, editors, </editor> <booktitle> Logic Programming: Functions, Relations and Equations, </booktitle> <pages> pages 295-363. </pages> <publisher> Prentice-Hall, </publisher> <year> 1986. </year> <title> An earlier version appears in Journal of Logic Programming, </title> <journal> Volume 1, </journal> <volume> Number 2, </volume> <pages> pages 179-210, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: However, it has not been integrated with the complementary advantages of the logic (or perhaps more accurately, relational) and functional paradigms. The advantages of these paradigms include clean declarative semantics, and (for the relational case) natural integration with database query languages and constraint formalisms. Following <ref> [19] </ref>, we believe that the best way to combine paradigms is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality [19, 20] to hidden Horn clause logic with equality, building on prior work on <p> Following [19], we believe that the best way to combine paradigms is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality <ref> [19, 20] </ref> to hidden Horn clause logic with equality, building on prior work on hidden algebra as a foundation for the object paradigm [10, 13, 17]. <p> This result has been generalised to Horn clause logic with equality by Goguen and Meseguer, who showed that in this case also it suffices to examine a term model <ref> [19, 20] </ref>. A hidden Herbrand Theorem is given in Section 5, stating that if a query is behaviourally satisfied by a certain term algebra, then it is behaviourally satisfied by all algebras. <p> One solution (among many) is S = empty ; S 0 = push (0; push (3; empty)) : The solution in this example can be found in the standard term algebra using narrowing, as in the language Eqlog <ref> [19, 6] </ref>. Then the unique homomorphism from it to any other algebra which satisfies STACK gives corresponding values in each of these algebras. However, it is not obvious that this technique can guarantee the behavioural satisfaction of the query in all algebras which behaviourally satisfy STACK. <p> Theorem 3. Given a hidden theory P , we have: (1) an initial P -algebra behaviourally satisfies a query iff all P -algebras be haviourally satisfy it; (2) a final P -algebra behaviourally satisfies a query iff some P -algebra behaviour ally satisfies it. Goguen and Meseguer <ref> [20, 19] </ref> give a version of Herbrand's theorem for Horn clause logic with equality. It proves that an existential query is satisfied by the initial model of a specification iff it is satisfied by all models of the specification. <p> This means that the technique of narrowing, as described for example in [4], in conjunction with proof techniques such as coinduction [17], can be used to solve queries. 6 Hidden Horn Clause Logic The queries considered so far have used equations. In languages such as Prolog and Eqlog <ref> [19] </ref>, sentences are Horn clauses with predicate symbols, which are interpreted as relations in models. This section generalises a theorem of Diaconescu [5] to lift our preceding results to hidden Horn clause logic with equality.
Reference: 20. <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Models and equality for logical programming. </title> <editor> In Hartmut Ehrig, Giorgio Levi, Robert Kowalski, and Ugo Montanari, editors, </editor> <booktitle> Proceedings, 1987 TAPSOFT, </booktitle> <pages> pages 1-22. </pages> <note> Springer-Verlag Lecture Notes in Mathematics 250, </note> <year> 1987. </year>
Reference-contexts: Following [19], we believe that the best way to combine paradigms is to combine their underlying logics; in this paper we extend the relational and functional paradigms to the object paradigm by extending Horn clause logic with equality <ref> [19, 20] </ref> to hidden Horn clause logic with equality, building on prior work on hidden algebra as a foundation for the object paradigm [10, 13, 17]. <p> This result has been generalised to Horn clause logic with equality by Goguen and Meseguer, who showed that in this case also it suffices to examine a term model <ref> [19, 20] </ref>. A hidden Herbrand Theorem is given in Section 5, stating that if a query is behaviourally satisfied by a certain term algebra, then it is behaviourally satisfied by all algebras. <p> Theorem 3. Given a hidden theory P , we have: (1) an initial P -algebra behaviourally satisfies a query iff all P -algebras be haviourally satisfy it; (2) a final P -algebra behaviourally satisfies a query iff some P -algebra behaviour ally satisfies it. Goguen and Meseguer <ref> [20, 19] </ref> give a version of Herbrand's theorem for Horn clause logic with equality. It proves that an existential query is satisfied by the initial model of a specification iff it is satisfied by all models of the specification.
Reference: 21. <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Weg-ner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year>
Reference-contexts: We then extend this theorem to hidden Horn clause logic. All this provides a semantic foundation for a novel programming style, in which framing a query can activate methods that change the world so that a solution actually comes to exist <ref> [21, 15] </ref>. For example, consider a query about a holiday package, with constraints on cost, flight times, etc.; a solution to this query would be an actual package, with tickets, etc., satisfying the constraints.
Reference: 22. <author> Joseph A. Goguen and Jose Meseguer. </author> <title> Order-sorted algebra I: Equational deduction for multiple inheritance, overloading, exceptions and partial operations. </title> <journal> Theoretical Computer Science, </journal> <volume> 105(2) </volume> <pages> 217-273, </pages> <year> 1992. </year>
Reference-contexts: A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra <ref> [22, 12] </ref>. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 23. <author> Joseph A. Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, correctness and implementation of abstract data types. </title> <type> Technical Report RC 6487, </type> <institution> IBM T.J. Watson Research Center, </institution> <month> October </month> <year> 1976. </year> <title> In Current Trends in Programming Methodology, IV, </title> <editor> Raymond Yeh, editor, </editor> <publisher> Prentice-Hall, </publisher> <year> 1978, </year> <pages> pages 80-149. </pages>
Reference-contexts: The hidden algebra approach to the object paradigm [17] is a natural extension of the initial algebra approach to abstract data types <ref> [23, 9] </ref>, and allows reasoning about systems with state. The hidden algebraic approach differs from classical algebraic approaches in that some sorts are declared to be hidden, and are used to model the states of objects; intuitively, states cannot be observed directly, but only indirectly through the attributes of objects.
Reference: 24. <author> Joseph A. Goguen, Timothy Winkler, Jose Meseguer, Kokichi Futatsugi, and Jean-Pierre Jouannaud. Introducing obj. In Joseph A. Goguen and Grant Malcolm, </author> <title> editors, Software Engineering with OBJ: Algebraic Specification in Practice. </title> <note> to appear. Also available as a technical report from SRI International. </note>
Reference-contexts: A standard example is that of stack objects; this is an ubiquitous example, but provides a good benchmark for specification formalisms: Example 1. Here we assume that the data universe specified in DATA contains at least the natural numbers of sort Nat. We use the notation of OBJ <ref> [24] </ref>, but intend hidden semantics for sorts declared outside DATA. th STACK is pr DATA . sort Stack . op push : Nat Stack -&gt; Stack . op top_ : Stack -&gt; Nat . op pop_ : Stack -&gt; Stack . op empty : -&gt; Stack . var S : Stack
Reference: 25. <author> Jacques Herbrand. </author> <title> Recherches sur la theorie de la demonstration. </title> <institution> Travaux de la Societe des Sciences et des Lettres de Varsovie, Classe III, </institution> <month> 33(128), </month> <year> 1930. </year>
Reference-contexts: An important result in this section states that for certain classes of reachable models, behavioural satisfaction of an equation reduces to satisfaction by an initial algebra; moreover, for ground equations the restriction to reachable models is not required. The classical Herbrand Theorem <ref> [25] </ref> says that for the models of a set of Horn clauses, existential queries can be answered by examining a term model, called the Herbrand universe.
Reference: 26. <author> B. Jacobs. </author> <title> Inheritance and cofree constructions. </title> <editor> In P. Cointe, editor, </editor> <booktitle> European Conference on Object-Oriented Programming, number 1098 in LNCS, </booktitle> <pages> pages 210-231. </pages> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: Some of these techniques have already been incorporated into the algebraic specification language CafeOBJ [8], and are also used in related coalgebraic approaches to the object paradigm <ref> [33, 26, 27, 2] </ref>. A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 27. <author> Grant Malcolm. </author> <title> Behavioural equivalence, bisimilarity, and minimal realisation. </title> <editor> In Magne Haveraaen, Olaf Owe, and Ole-Johan Dahl, editors, </editor> <title> Recent Trends in Data Type Specifications. </title> <booktitle> 11th Workshop on Specification of Abstract Data Types, </booktitle> <address> WADT11. Oslo Norway, </address> <month> September </month> <year> 1995, </year> <pages> pages 359-378. </pages> <note> Springer-Verlag Lecture Notes in Computer Science 1130, </note> <year> 1996. </year>
Reference-contexts: Some of these techniques have already been incorporated into the algebraic specification language CafeOBJ [8], and are also used in related coalgebraic approaches to the object paradigm <ref> [33, 26, 27, 2] </ref>. A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
Reference: 28. <author> Grant Malcolm and Joseph A. Goguen. </author> <title> Proving correctness of refinement and implementation. </title> <type> Technical Monograph PRG-114, </type> <institution> Programming Research Group, Oxford University, </institution> <year> 1994. </year>
Reference-contexts: A key property of behavioural equivalence, which justifies a number of techniques for proving behavioural satisfaction <ref> [14, 28, 17] </ref>, becomes clear if we make the following definition: Definition 9. <p> A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra. Malcolm and Goguen <ref> [28] </ref> show that hidden order sorted logic forms an institution, using a construction that differs from Burstall and Diaconescu's in its treatment of error-handling; yet another treatment of ordered sorts in hidden algebra preserves the relationship between hidden algebra and coalgebra [3].
Reference: 29. <author> Jose Meseguer and Joseph A. Goguen. Initiality, </author> <title> induction and computability. </title> <editor> In Maurice Nivat and John Reynolds, editors, </editor> <booktitle> Algebraic Methods in Semantics, </booktitle> <pages> pages 459-541. </pages> <address> Cambridge, </address> <year> 1985. </year>
Reference-contexts: The hidden paradigm builds on work of Goguen and Meseguer on abstract machines <ref> [18, 29] </ref>; hidden algebra differs from this mainly in its use of behavioural satisfaction for equations, an idea first introduced by Reichel [31]. Later, Reichel [32] introduced the related idea of behavioural equivalence for states, which is also used here. <p> We assume familiarity with the `overloaded' approach to many sorted algebra. To establish notation, we briefly review the main concepts and results; for compatible expositions with more detail, see <ref> [16, 29] </ref>. An S-sorted set A is a family of sets A s indexed by elements s 2 S.
Reference: 30. <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction The object paradigm has many practical advantages, including its support for reuse through inheritance, its intuitive appeal, and its affinity for data abstraction <ref> [30] </ref>. However, it has not been integrated with the complementary advantages of the logic (or perhaps more accurately, relational) and functional paradigms. The advantages of these paradigms include clean declarative semantics, and (for the relational case) natural integration with database query languages and constraint formalisms.
Reference: 31. <author> Horst Reichel. </author> <title> Behavioural equivalence a unifying concept for initial and final specifications. </title> <booktitle> In Proceedings, Third Hungarian Computer Science Conference. Akademiai Kiado, 1981. </booktitle> <address> Budapest. </address>
Reference-contexts: The hidden paradigm builds on work of Goguen and Meseguer on abstract machines [18, 29]; hidden algebra differs from this mainly in its use of behavioural satisfaction for equations, an idea first introduced by Reichel <ref> [31] </ref>. Later, Reichel [32] introduced the related idea of behavioural equivalence for states, which is also used here. Section 2 gives a condensed review of overloaded many sorted algebra, and Sections 3 and 4 introduce hidden algebra and present basic results that support reasoning about specifications.
Reference: 32. <author> Horst Reichel. </author> <title> Behavioural validity of conditional equations in abstract data types. In Contributions to General Algebra 3. </title> <booktitle> Teubner, 1985. Proceedings of the Vienna Conference, </booktitle> <month> June 21-24, </month> <year> 1984. </year>
Reference-contexts: The hidden paradigm builds on work of Goguen and Meseguer on abstract machines [18, 29]; hidden algebra differs from this mainly in its use of behavioural satisfaction for equations, an idea first introduced by Reichel [31]. Later, Reichel <ref> [32] </ref> introduced the related idea of behavioural equivalence for states, which is also used here. Section 2 gives a condensed review of overloaded many sorted algebra, and Sections 3 and 4 introduce hidden algebra and present basic results that support reasoning about specifications.
Reference: 33. <author> Horst Reichel. </author> <title> An approach to object semantics based on terminal co-algebras. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 5 </volume> <pages> 129-152, </pages> <year> 1995. </year>
Reference-contexts: Some of these techniques have already been incorporated into the algebraic specification language CafeOBJ [8], and are also used in related coalgebraic approaches to the object paradigm <ref> [33, 26, 27, 2] </ref>. A useful direction for future research is to extend our results to include the kind of subtyping given by order sorted algebra [22, 12]. Burstall and Diaconescu [1] have extended the hiding process to many other institutions, and in particular, to order sorted algebra.
References-found: 33

