URL: http://www.cs.cmu.edu/~softagents/papers/behaviors.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: 
Email: decker@cs.cmu.edu  
Title: Designing Reusable Behaviors for Information Agents  
Author: Keith Decker and Katia Sycara 
Keyword: Content Areas: Distributed AI, Multiagent Systems, Software Agents Word Count: 6840 Tracking Number: A601  
Date: January 8, 1996  
Address: 5000 Forbes Ave., Pittsburgh, PA 15213  
Affiliation: The Robotics Institute, Carnegie-Mellon University  
Abstract: An important issue in multi-agent systems is the specification and effective implementation of various classes of computational agent behaviors. One such class of behaviors involves collecting and supplying information to other computational agents or humans. We call an agent that exhibits such behaviors an information agent. Information agents can play an important role in many larger mixed human- and computational- agent organizations. Much previous work has focussed on the language one might use to communicate with such an agent (e.g., KQML), but not on the set of behaviors the agent needs in order to constructively respond to such communicationsreusable behaviors that are independent of the particular problem-solving domain. This paper discusses a set of architectural building blocks that support the specification of reusable behaviors for information agents. We present an initial set of information agent behaviors, including responding to one-shot or repetitive queries, proactive monitoring of changing information sources for new occurrences of given patterns, notification of relevant agents, and automatic self cloning of an agent to achieve increased levels of service and efficient use of system resources. We have implemented these reusable information agent behaviors and tested them experimentally on the World Wide Web in several domains: tracking stock prices, extracting news stories, and monitoring airfares. This paper has not been submitted for review elsewhere. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: To instantiate a new information agent, one needs only to define its database schema and develop a small piece of site specific code to handle a portion of the external data access. The architecture presented here is consistent with formal BDI agent theory <ref> [1, 15] </ref>. The agents in our system communicate using KQML [8]. Our focus on long-term behaviors, such as periodic queries and database monitoring, has required us to extend the language with performa-tive parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints. <p> Although we have not added commisives (promises and commitments) [2] to KQML, we (and many others) believe that commitments are the key to coordinated activity in a multi-agent system <ref> [1, 12, 5] </ref>. Coordination of information agents is accomplished by placing them in an organizational context that provides implicit commitments: each agent takes on an organizational role that specifies certain long-term commitments to certain classes of actions. <p> The most important constraint that the planning/plan retrieval algorithm needs to meet (as part of the agent's overall properties) is to guarantee at least one task for every goal until the goal is accomplished, removed, or believed to be unachievable <ref> [1] </ref>. For information agents, a common reason that a goal in unachievable is that its specification is malformed, in which case a task to respond with the appropriate KQML error message is instantiated. An information agent receives in messages from other agents three important types of goals: 1. <p> How can we guarantee that information agents act in ways that are predictable and useful enough for them to take part in larger multi-agent systems and organizations? We, along with others believe that commitments of various types are the key to coordinated multi-agent behavior <ref> [12, 1, 5, 15] </ref>. KQML, however, has no commisive performatives, and we have not added any. In the case of information agents, we resolve this clash by designing information agents to abide by a set of implicit commitments.
Reference: [2] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Communicative actions for artificial agents. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 65-72, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Our focus on long-term behaviors, such as periodic queries and database monitoring, has required us to extend the language with performa-tive parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints. Although we have not added commisives (promises and commitments) <ref> [2] </ref> to KQML, we (and many others) believe that commitments are the key to coordinated activity in a multi-agent system [1, 12, 5]. <p> Both goal creation and cessation may be assertive (telling another agent a belief ) or directive (requesting another agent to do something: achieve a goal, answer a query in a certain way etc) speech acts <ref> [2] </ref>. Here is a list of these basic communicative classes and their meaning: Assertion of goal creation: An information agent may assert to another agent that it has a goal (i.e., to answer any queries on its database). This is the implicit commisive communication.
Reference: [3] <author> Keith S. Decker and Victor R. Lesser. </author> <title> An approach to analyzing the need for meta-level communication. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 360-366, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: It compares this model to a hypothetical situation that describes the effect of adding a new agent. In this way, the information agent can make a rational meta-control decision about whether or not it should undertake a cloning behavior. This modeling and decision process uses the methodology developed in <ref> [3] </ref>. The key to modeling the agent's load behavior is its current task structures. Since one-shot queries are transient, and simple repeated queries are just a subcase of database monitoring queries, we focus on database monitoring queries only.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: These tradeoffs seem to be reasonable for an information agent (where they would not be for a higher-level task agent). Our information agent architecture also extends the TMS task structure representation <ref> [4] </ref> to allow periodic, repeating actions. 3.1 Control: Planning, Scheduling, and Action Execution The simplified control process for information agents includes steps for planning to achieve local or non-local goals, scheduling the actions within these plans, and actually carrying out these actions. <p> It produces a new set of current task structures. Information agents use simple task structures (compare to <ref> [4] </ref>): * Each individual task T represents an instantiated approach to achieving one or more of the agent's goals Git is a unit of goal-directed behavior. Every task has an (optional) deadline. * Each task consists of a partially ordered set of basic actions A.
Reference: [5] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Although we have not added commisives (promises and commitments) [2] to KQML, we (and many others) believe that commitments are the key to coordinated activity in a multi-agent system <ref> [1, 12, 5] </ref>. Coordination of information agents is accomplished by placing them in an organizational context that provides implicit commitments: each agent takes on an organizational role that specifies certain long-term commitments to certain classes of actions. <p> Thus, these simpler agents can work effectively with one another as well as with more complex agents, such as task agents, that reason about commitments explicitly to produce coordinated behavior <ref> [5] </ref>. 2 A Functional Overview of Information Agents The main function of an information agent is to process intelligently and efficiently one-shot, periodic, and information monitoring requests. These requests come externally from other agents; the information used to fulfill these requests comes from arbitrary external information sources. <p> How can we guarantee that information agents act in ways that are predictable and useful enough for them to take part in larger multi-agent systems and organizations? We, along with others believe that commitments of various types are the key to coordinated multi-agent behavior <ref> [12, 1, 5, 15] </ref>. KQML, however, has no commisive performatives, and we have not added any. In the case of information agents, we resolve this clash by designing information agents to abide by a set of implicit commitments.
Reference: [6] <author> K.S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proccedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: The information agent architecture is a simplification of the DECAF (Distributed, Environment-Centered Agent Framework) architecture <ref> [6] </ref>. The task structure 1 The reader may have already guessed that such a communication facilitation agent, which provides yellow pages information, i.e. a database associating information agents and the information that they provide, is itself an information agent that we have implemented.
Reference: [7] <author> Oren Etzioni and Daniel Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Most current agent-oriented approaches to this problem have focussed on interface agentsa single agent with general knowledge and capabilities to perform a wide range of user-delegated information-finding tasks (e.g., <ref> [7] </ref>).
Reference: [8] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The architecture presented here is consistent with formal BDI agent theory [1, 15]. The agents in our system communicate using KQML <ref> [8] </ref>. Our focus on long-term behaviors, such as periodic queries and database monitoring, has required us to extend the language with performa-tive parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints. <p> In Figure 1 Task Agents 1 and 2 have come to know about Information Agent 1 via a facilitator or some other means (see <ref> [10, 8, 13] </ref>). The task agents interact with the information agent by sending one-shot queries or registering to receive the results of periodic queries and change monitoring queries. An information agent may at any time be responsible for several active queries from each of several agents.
Reference: [9] <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 580-585, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Sophisticated schedulers will report such failures (or probable failures) before they occur by reasoning about action durations (and possibly commitments from other agents) <ref> [9] </ref>. * The scheduler attempts to maximize some predefined utility function defined on the set of task structures. For the information agents, we use a very simple notion of utilityevery action needs to be executed in order to achieve a task, and every task has an equal utility value.
Reference: [10] <author> M.R. Genesereth and S.P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year>
Reference-contexts: The problem-solving knowledge and the processes that support and reason about the other types of information are reusable in different domains, except for the external access interface. When an agent is created, it registers itself with some entity such as a communication facilitator <ref> [10] </ref>. This registration is really an advertisement specifying the information services that the agent is making available, the associated ontology (ies) and any associated query limitations. 1 This advertise-ment acts as a commitment by the agent to respond to appropriate requests in the future (see Section 3.3). <p> In Figure 1 Task Agents 1 and 2 have come to know about Information Agent 1 via a facilitator or some other means (see <ref> [10, 8, 13] </ref>). The task agents interact with the information agent by sending one-shot queries or registering to receive the results of periodic queries and change monitoring queries. An information agent may at any time be responsible for several active queries from each of several agents.
Reference: [11] <author> Tom R. Gruber. </author> <title> Toward principles for the design of ontologies used for knowledge sharing. </title> <type> Technical Report KSL-93-4, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: A concept-name plus the ontology implies a data-type (string, integer, float, data/time, 2 This paper will not discuss ontological representation, see for example <ref> [11] </ref>. 3 This restriction can be removed either by adding another reusable behavior to an information agent that creates in effect a new value-history attribute, or by simply adding value-histories to the local database definition itself.
Reference: [12] <author> N. R. Jennings. </author> <title> Commitments and conventions: The foundation of coordination in multi-agent systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(3) </volume> <pages> 223-250, </pages> <year> 1993. </year>
Reference-contexts: Although we have not added commisives (promises and commitments) [2] to KQML, we (and many others) believe that commitments are the key to coordinated activity in a multi-agent system <ref> [1, 12, 5] </ref>. Coordination of information agents is accomplished by placing them in an organizational context that provides implicit commitments: each agent takes on an organizational role that specifies certain long-term commitments to certain classes of actions. <p> How can we guarantee that information agents act in ways that are predictable and useful enough for them to take part in larger multi-agent systems and organizations? We, along with others believe that commitments of various types are the key to coordinated multi-agent behavior <ref> [12, 1, 5, 15] </ref>. KQML, however, has no commisive performatives, and we have not added any. In the case of information agents, we resolve this clash by designing information agents to abide by a set of implicit commitments.
Reference: [13] <author> D. Kuokka and L. Harada. </author> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 239-245, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: In Figure 1 Task Agents 1 and 2 have come to know about Information Agent 1 via a facilitator or some other means (see <ref> [10, 8, 13] </ref>). The task agents interact with the information agent by sending one-shot queries or registering to receive the results of periodic queries and change monitoring queries. An information agent may at any time be responsible for several active queries from each of several agents. <p> One of the reusable behaviors inherited by this matchmaker is the ability to process persistent queries as described in <ref> [13] </ref>. representation is simplified to use only one level of abstraction and only one coordination relationship between tasks (enables). This allows us to use much simpler plan retrieval and scheduling algorithms, at the cost of disallowing complex, multi-level, abstract plans and sophisticated coordination across plans.
Reference: [14] <author> Tim Oates, M. V. Nagendra Prasad, Victor R. Lesser, and Keith S. Decker. </author> <title> A distributed problem solving approach to cooperative information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments, </booktitle> <institution> Stanford University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Another proposed solution is to use multi-agent computer systems to access, filter, evaluate, and integrate this information <ref> [16, 14] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape.
Reference: [15] <author> A.S. Rao and M.P. Georgeff. </author> <title> BDI agents: From theory to practice. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 312-319, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: To instantiate a new information agent, one needs only to define its database schema and develop a small piece of site specific code to handle a portion of the external data access. The architecture presented here is consistent with formal BDI agent theory <ref> [1, 15] </ref>. The agents in our system communicate using KQML [8]. Our focus on long-term behaviors, such as periodic queries and database monitoring, has required us to extend the language with performa-tive parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints. <p> How can we guarantee that information agents act in ways that are predictable and useful enough for them to take part in larger multi-agent systems and organizations? We, along with others believe that commitments of various types are the key to coordinated multi-agent behavior <ref> [12, 1, 5, 15] </ref>. KQML, however, has no commisive performatives, and we have not added any. In the case of information agents, we resolve this clash by designing information agents to abide by a set of implicit commitments.
Reference: [16] <author> Katia Sycara and Dajun Zeng. </author> <title> Task-based multi-agent coordination for information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments, </booktitle> <institution> Stanford University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Another proposed solution is to use multi-agent computer systems to access, filter, evaluate, and integrate this information <ref> [16, 14] </ref>. Such multi-agent systems can compartmentalize specialized task knowledge, organize themselves to avoid processing bottlenecks, and can be built expressly to deal with dynamic changes in the agent and information-source landscape.
References-found: 16

