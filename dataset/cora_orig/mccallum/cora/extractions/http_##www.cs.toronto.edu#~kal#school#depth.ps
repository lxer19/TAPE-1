URL: http://www.cs.toronto.edu/~kal/school/depth.ps
Refering-URL: http://www.cs.toronto.edu/~kal/
Root-URL: http://www.cs.toronto.edu
Title: Failure Detection in Message Passing Systems  
Author: Kal Lin 
Date: June 20, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [ACBMT95] <author> Emmanuelle Anceaume, Bernadette Charron-Bost, Pascale Minet, and Sam Toueg. </author> <title> On the formal specification of group membership services. </title> <type> Technical Report 95-1534, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Cristian [Cri91] defined group membership services for synchronous distributed systems. Cristian and Schmuck continued the work into the "timed asynchronous" model [CS95]. The problem is still not well understood in asynchronous systems and there does not seem to be a good formal specification of the problem <ref> [ACBMT95] </ref>. Before proceeding into detail, this section begins with a brief subsection on terminology specific to the group membership problem. 3.2.1 Terminology group An identifier for a set of processors. At anytime, several identifiers may exist. <p> Along with the formal specifications, the authors of these two papers give algorithms which are claimed to meet the specifications. These two papers are widely referenced and have been updated as [RB94] and [DMS95] respectively. However, it was shown recently in <ref> [ACBMT95] </ref> that these formal specifications are unsatisfactory. The primary-partition specification has flaws in the formalism and allows undesirable executions. The partitionable specification can be satisfied by useless protocols. In the case of the primary-partition service, the algorithm given is not correct with respect to the flawed specification.
Reference: [ADKM92] <author> Yair Amir, Danny Dolev, Shlomo Kramer, and Dalia Malki. Transis: </author> <title> a communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Group Membership is particularly important in large distributed systems. Researchers have designed experimental distributed systems which provide insight into existing problems and raise new issues for study. Examples of such systems include Isis [Bir93], Horus [vRBC + 93], Amoeba [KT91], and Transis <ref> [ADKM92] </ref>. These experimental systems provide important data points, but it is difficult to generalize their results. They lack formal specifications and proofs of correctness (or impossibility) which would provide a more thorough understanding of the problems and allow results to be applied to a wide range of distributed systems.
Reference: [BDM95] <author> Ozalp Babaoglu, Renzo Davoli, and Alberto Montresor. </author> <title> Failure detectors, group membership and view-synchronous communication in partitionable asynchronous systems. </title> <type> Technical Report UBLCS-95-18, </type> <institution> Department of Computer Science, University of Bologna, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Specifically, the specification allows executions in which a membership change occurs but no processor ever learns what the new membership is. This specification describes a small subset of a desirable membership service and demonstrates something that is possible to achieve in asynchronous systems. The authors of <ref> [BDM95] </ref> claim to give a formal specification for partitionable group membership in asynchronous systems. They show that their specification is solvable in partitionable asynchronous systems when augmented with an unreliable failure detector.
Reference: [Bir93] <author> Kenneth P. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Group Membership is particularly important in large distributed systems. Researchers have designed experimental distributed systems which provide insight into existing problems and raise new issues for study. Examples of such systems include Isis <ref> [Bir93] </ref>, Horus [vRBC + 93], Amoeba [KT91], and Transis [ADKM92]. These experimental systems provide important data points, but it is difficult to generalize their results.
Reference: [BO83] <author> Michael Ben-Or. </author> <title> Another advantage of free choice: Completely asynchronous agreement protocol. </title> <booktitle> In Proceedings of the 2nd ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 27-30, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: A randomized algorithm may make one of several possible state transitions when given an input and a current state. Certain problems like 7 Consensus which cannot be solved deterministically in an asynchronous system can be solved easily when randomized algorithms are used <ref> [BO83] </ref>. One disadvantage of randomization is that the correctness of algorithms cannot be guaranteed in every case. The purpose of randomized methods is to satisfy the requirements of a problem with probability approaching one. This probability cannot reach one and thus a small chance of incorrect behavior always exists.
Reference: [CD89] <author> Benny Chor and Cynthia Dwork. </author> <title> Randomization in byzantine agreement. </title> <booktitle> In Advances in Computing Research, </booktitle> <volume> volume 5, </volume> <pages> pages 443-497. </pages> <publisher> JAI Press Inc., </publisher> <year> 1989. </year>
Reference-contexts: This impossibility result also applies to Atomic Broadcast. 1 This reduction uses messages with an unbounded size. This may not be reasonable in some systems. 11 In asynchronous systems with randomization, Consensus is solvable and thus so is Atomic Broadcast. A survey of randomized Consensus algorithms appears in <ref> [CD89] </ref>. In asynchronous systems augmented with appropriate failure detection, Consensus is solvable [CT91]. Again Atomic Broadcast is also solvable in such systems. 3.2 Group Membership A large number of fault-tolerant distributed applications require coordination between a subset of the processors in the system.
Reference: [CHT92] <author> Tushar Deepak Chandra, Vassos Hadzilacos, and Sam Toueg. </author> <title> The weakest failure detector for solving consensus. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1992. </year> <note> Also technical report, </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: Other classes of failure detectors with different characterizations exist. In <ref> [CHT92] </ref>, the authors define the weakest failure detector for solving consensus. This work is an example of using failure detectors to establish a widely applicable theoretical results. The work of Chandra and Toueg focused on asynchronous systems with reliable links. <p> Once the problem is clearly defined, I propose to investigate how to solve it under asynchronous systems augmented with failure detection. The proof for the weakest failure detector to solve Leader Election is lacking. Another open area is to apply the techniques used by <ref> [CHT92] </ref> to explore the weakest failure detector to solve Leader Election and Group Membership. 16
Reference: [CHT95] <author> Tushar Deepak Chandra, Vassos Hadzilacos, and Sam Toueg. </author> <title> Impossibility of group membership in asynchronous systems. </title> <type> Technical Report 95-1533, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The primary-partition specification has flaws in the formalism and allows undesirable executions. The partitionable specification can be satisfied by useless protocols. In the case of the primary-partition service, the algorithm given is not correct with respect to the flawed specification. In <ref> [CHT95] </ref>, the authors specify the Weak Group Membership (WGM) problem. The WGM problem is a small but essential component of a realistic primary-partition group membership service. Consider a system with n 4 processors p 1 ; p 2 ; : : : ; p n .
Reference: [Cri89] <author> Flaviu Cristian. </author> <title> Probabilistic clock synchronization. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 46-158, </pages> <year> 1989. </year>
Reference-contexts: Cristian noted that a large proportion of messages in a typical message passing systems require a small amount of time to be transported while a small proportion of messages require a large amount of time to be transported <ref> [Cri89] </ref>. The distribution of the time required for each message to be transported can be exploited to produce algorithms that solve a problem with high probability. This method has the disadvantages associated with randomized methods and requires a known distribution of message delays.
Reference: [Cri91] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Secondly, Consensus requires progress in all runs while Group Membership does not require any changes in the groups if no processors fail, request to join or request to leave. There is an abundance of research activity in this area. Cristian <ref> [Cri91] </ref> defined group membership services for synchronous distributed systems. Cristian and Schmuck continued the work into the "timed asynchronous" model [CS95]. The problem is still not well understood in asynchronous systems and there does not seem to be a good formal specification of the problem [ACBMT95]. <p> Each group must be directly related to it's predecessor. The 12 specification of a group membership service describes the exact requirements of the relationship. partitionable A type of group membership service that allows for unrelated groups to exist. 3.2.2 Synchronous Group Membership Services Cristian in <ref> [Cri91] </ref> studies group membership services for synchronous distributed systems. Aside from the timing requirements of a synchronous system, Cristian also requires that the network possess enough redundancy such that a partition of the network cannot be created.
Reference: [CS95] <author> Flaviu Cristian and Frank Schmuck. </author> <title> Agreeing on processor group membership in asynchronous distributed systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, </address> <year> 1995. </year> <note> Available by anonymous ftp at cs.ucsd.edu as /pub/team/asyncmembership.ps.Z. 17 </note>
Reference-contexts: This method has the disadvantages associated with randomized methods and requires a known distribution of message delays. A more recent model used by Cristian called the "timed asynchronous" model <ref> [CS95] </ref>, recognizes probabilistic behavior in message delays but doesn't assume anything about the distribution of message delays. Messages can be lost or experience unbounded communication delay but most arrive at their destination within a known constant. Processors may experience unbounded delays but most steps are executed within a known constant. <p> There is an abundance of research activity in this area. Cristian [Cri91] defined group membership services for synchronous distributed systems. Cristian and Schmuck continued the work into the "timed asynchronous" model <ref> [CS95] </ref>. The problem is still not well understood in asynchronous systems and there does not seem to be a good formal specification of the problem [ACBMT95].
Reference: [CT91] <author> Tushar Deepak Chandra and Sam Toueg. </author> <title> Unreliable failure detectors for asyn-chronous systems. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: This is a partially synchronous model that tolerates processor crash faults, link omission faults, and all timing faults. Although timing assumptions are only needed to ensure progress, the algorithms and even the specification of some problems in this model rely heavily on timing assumptions. 2.6 Failure Detectors In <ref> [CT91] </ref>, Chandra and Toueg augment the asynchronous model with unreliable failure detection. Their proposal broadens the applicability of the asynchronous model of computation while maintaining the advantages that result from making no timing assumptions. <p> In the Consensus problem, initially all correct processors propose a value. All correct processors must reach agreement on some value that is related to the proposed values. The Consensus problem is specified as follows <ref> [CT91] </ref>: Termination: Every correct processor eventually decides some value. Uniform integrity: Every processor decides at most once. Agreement: No two correct processors decide differently. Uniform validity: If a processor decides v, then v was proposed by some processor. Another fundamental task in fault-tolerant distributed systems is Atomic Broadcast. <p> In [DDS87], the authors give a simple algorithm to reduce the Consensus problem to Atomic Broadcast. In <ref> [CT91] </ref>, the authors show that Consensus and Atomic Broadcast are equivalent in asynchronous systems by giving a reduction for the Atomic Broadcast problem to Consensus 1 . Both reductions apply to any asynchronous system. <p> This may not be reasonable in some systems. 11 In asynchronous systems with randomization, Consensus is solvable and thus so is Atomic Broadcast. A survey of randomized Consensus algorithms appears in [CD89]. In asynchronous systems augmented with appropriate failure detection, Consensus is solvable <ref> [CT91] </ref>. Again Atomic Broadcast is also solvable in such systems. 3.2 Group Membership A large number of fault-tolerant distributed applications require coordination between a subset of the processors in the system. Examples of such subsets include the servers of a replicated database and the set of processors sharing a resource.
Reference: [DDS87] <author> Danny Dolev, Cynthia Dwork, and Larry Stockmeyer. </author> <title> On the minimal synchronism needed for distributed consensus. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Dolev, Dwork and Stockmeyer consider the minimal synchronism needed to solve fault-tolerant distributed Consensus <ref> [DDS87] </ref>. The authors define five key parameters of partial synchrony. <p> Total order: If two correct processors p and q deliver two messages m and m 0 , then p delivers m before m 0 if and only if q delivers m before m 0 . In <ref> [DDS87] </ref>, the authors give a simple algorithm to reduce the Consensus problem to Atomic Broadcast. In [CT91], the authors show that Consensus and Atomic Broadcast are equivalent in asynchronous systems by giving a reduction for the Atomic Broadcast problem to Consensus 1 . Both reductions apply to any asynchronous system.
Reference: [DLS88] <author> Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. </author> <title> Consensus in the presence of partial synchrony. </title> <journal> Journal of the ACM, </journal> <volume> 35(2) </volume> <pages> 288-323, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: In particular, processor and communication synchrony parameters are salient features of a real distributed system such as a network of workstations. The authors of <ref> [DLS88] </ref> describe four natural models of partial synchrony. The first model consists of processors that execute instructions at exactly the same rate (commonly referred to as lock step) and communication delays are bounded by a constant that is unknown.
Reference: [DMS94] <author> Danny Dolev, Dalia Malki, and Ray Strong. </author> <title> An asynchronous membership protocol that tolerates partitions. </title> <type> Technical Report CS94-6, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: The authors of <ref> [DMS94] </ref> claim to give a formal specification for a partitionable group membership service in asynchronous systems. Along with the formal specifications, the authors of these two papers give algorithms which are claimed to meet the specifications.
Reference: [DMS95] <author> Danny Dolev, Dalia Malki, and Ray Strong. </author> <title> A framework for partitionable membership service. </title> <type> Technical Report CS95-4, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1995. </year>
Reference-contexts: Along with the formal specifications, the authors of these two papers give algorithms which are claimed to meet the specifications. These two papers are widely referenced and have been updated as [RB94] and <ref> [DMS95] </ref> respectively. However, it was shown recently in [ACBMT95] that these formal specifications are unsatisfactory. The primary-partition specification has flaws in the formalism and allows undesirable executions. The partitionable specification can be satisfied by useless protocols.
Reference: [Fis83] <author> Michael Fischer. </author> <title> The consensus problem in unreliable distributed systems (a brief survey). </title> <type> Technical Report 273, </type> <institution> Department of Computer Science, Yale University, </institution> <month> June </month> <year> 1983. </year>
Reference-contexts: &gt; n=2 and there is a time after which some correct processor (not necessarily in ) is never suspected by any correct processor in . 10 3 Current Research 3.1 Consensus and Atomic Broadcast Fundamental to fault-tolerant distributed systems is the task of reaching agreement among a set of processors <ref> [Fis83] </ref>. In the Consensus problem, initially all correct processors propose a value. All correct processors must reach agreement on some value that is related to the proposed values. The Consensus problem is specified as follows [CT91]: Termination: Every correct processor eventually decides some value.
Reference: [FLP85] <author> Michael Fischer, Nancy Lynch, and Michael Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: This poses as a major disadvantage of the asynchronous model. It is well known a very fundamental task, Consensus, cannot be solved deterministically in an asynchronous system that is subject to a single crash failure <ref> [FLP85] </ref>. This important result is commonly referred to as the "FLP result". <p> The equivalence of these two problems in asynchronous systems imply that solvability results which apply to one apply to both. The Consensus problem is easily solved in synchronous systems (by using timeouts to detect faults), and in asynchronous systems if there are no failures. In a landmark paper <ref> [FLP85] </ref>, the authors proved that Consensus cannot be solved deterministically in asynchronous systems even if the only fault tolerated is a single processor crash. This impossibility result also applies to Atomic Broadcast. 1 This reduction uses messages with an unbounded size.
Reference: [HT] <author> Vassos Hadzilacos and Sam Toueg. </author> <booktitle> Workshop on theory and practice in distributed systems. </booktitle> <address> Dagstuhl, Germany. </address>
Reference-contexts: In [CHT92], the authors define the weakest failure detector for solving consensus. This work is an example of using failure detectors to establish a widely applicable theoretical results. The work of Chandra and Toueg focused on asynchronous systems with reliable links. In a workshop <ref> [HT] </ref>, Hadzilacos and Toueg describe a failure detector that would be useful in systems that allows link failures.
Reference: [HT93] <author> Vassos Hadzilacos and Sam Toueg. </author> <title> Distributed Systems, chapter 5. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This is a powerful communication primitive for distributed systems and simplifies the design of many large distributed applications. For example, availability of Atomic Broadcast greatly simplifies the task of keeping consistent copies of a distributed replicated database. The Atomic Broadcast problem is specified as follows <ref> [HT93] </ref>: Validity: If a correct processor broadcasts a message m, then all correct processors even tually deliver m. Agreement: If a correct processor delivers a message m, then all correct processors even tually delivers m.
Reference: [KT91] <author> M. Frans Kaashoek and Andrew S. Tanenbaum. </author> <title> Group communication in the amoeba distributed operating system. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computer Systems, </booktitle> <pages> pages 222-230, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Group Membership is particularly important in large distributed systems. Researchers have designed experimental distributed systems which provide insight into existing problems and raise new issues for study. Examples of such systems include Isis [Bir93], Horus [vRBC + 93], Amoeba <ref> [KT91] </ref>, and Transis [ADKM92]. These experimental systems provide important data points, but it is difficult to generalize their results.
Reference: [Nei96] <author> Gil Neiger. </author> <title> A new look at membership services. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Principles of Distributed Computing, </booktitle> <month> pages ???-???, </month> <year> 1996. </year>
Reference-contexts: Chandra, Hadzilacos, and Toueg showed that in an asynchronous system in which only one processor may fail and it may fail only by crashing, the WGM problem cannot be solved. This result is analogous to the FLP result for the Consensus problem in asynchronous systems. 14 In <ref> [Nei96] </ref>, Neiger presents a specification of a primary-partition membership service with a weak termination requirement in asynchronous systems. Specifically, the specification allows executions in which a membership change occurs but no processor ever learns what the new membership is.
Reference: [RB91] <author> Aleta Ricciardi and Kenneth Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In Proceedings of the 10th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-352, </pages> <year> 1991. </year>
Reference-contexts: Group Stability: If no processor failures or join requests occur in [t; t 0 ] then no processor leaves its group in [t + max (D; J ); t 0 ]. 3.2.3 Asynchronous Group Membership Services The authors of <ref> [RB91] </ref> claim to give a formal specification for a primary-partition group membership service in asynchronous systems. The authors of [DMS94] claim to give a formal specification for a partitionable group membership service in asynchronous systems.
Reference: [RB94] <author> Aleta Ricciardi and Kenneth Birman. </author> <title> Process membership in asynchronous environments. </title> <type> Technical report, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> April </month> <year> 1994. </year> <note> available by anonymous ftp from ftp.cs.cornell.edu in pub/aleta/AsyncMembService.ps. 18 </note>
Reference-contexts: Along with the formal specifications, the authors of these two papers give algorithms which are claimed to meet the specifications. These two papers are widely referenced and have been updated as <ref> [RB94] </ref> and [DMS95] respectively. However, it was shown recently in [ACBMT95] that these formal specifications are unsatisfactory. The primary-partition specification has flaws in the formalism and allows undesirable executions. The partitionable specification can be satisfied by useless protocols.
Reference: [SM95] <author> Laura Sabel and Keith Marzullo. </author> <title> Election vs. consensus in asynchronous sys-tems. </title> <type> Technical Report CS95-411, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, </address> <month> February </month> <year> 1995. </year>
Reference-contexts: It is unclear whether this specification will withstand the scrutiny of serious examination. 3.3 Leader Election Leader Election in fault-tolerant distributed computing is an important problem for applications that provide replicated services. The Leader Election problem studied in <ref> [SM95] </ref> is specified as follows: Safety: At any time, at most one processor is the leader. Liveness: If there is no leader, a new leader will eventually be elected. Implicitly, the authors assume that if the leader crashes it is no longer the leader.
Reference: [vRBC + 93] <author> Robert van Renesse, Kenneth P. Birman, Robert Cooper, Bradford Glade, and Patrick Stephenson. </author> <title> The horus system. </title> <booktitle> In Reliable Distributed Computing with the Isis Toolkit, </booktitle> <pages> pages 133-147, </pages> <year> 1993. </year> <month> 19 </month>
Reference-contexts: Group Membership is particularly important in large distributed systems. Researchers have designed experimental distributed systems which provide insight into existing problems and raise new issues for study. Examples of such systems include Isis [Bir93], Horus <ref> [vRBC + 93] </ref>, Amoeba [KT91], and Transis [ADKM92]. These experimental systems provide important data points, but it is difficult to generalize their results.
References-found: 26

