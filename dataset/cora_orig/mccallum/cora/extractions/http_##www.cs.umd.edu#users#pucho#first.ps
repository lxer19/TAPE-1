URL: http://www.cs.umd.edu/users/pucho/first.ps
Refering-URL: http://www.cs.umd.edu/users/pucho/
Root-URL: 
Email: choi@cs.umd.edu pucho@cs.umd.edu  
Title: Integration of HTTP into DBMS based on PREDATOR  
Author: Seungryul Choi Pyounguk Cho 
Address: College Park, MD 20742 College Park, MD 20742  
Affiliation: Computer Science Department Computer Science Department University of Maryland University of Maryland  
Abstract: DBMS is one of the most typical examples of client- server models. Simple text clients are enough in the traditional DBMS's because most of the data to be dealt with is in text. However, as the computation environment changes, we need more powerful clients and new models. WWW is originated from the requirement of processing multimedia data in an efficient manner and can go well with object-relational databases supporting multimedia data types. There can be various ways to implement the web/database access. One of the most popular architectures is the 3-tier client-server architecture which consists of the client browser, web server and database server. Another approach is using Java. Java has a lot of good features and is also nice to manipulate multimedia data. The last approach is to build a HTTP server on top of DBMS server so that it can process the requests via HTTP. In this research, we integrated HTTP into PREDATOR 1 . This system understands HTTP so that it can communicate with the web browser directly. When it receives a query from the browser, it processes the query, and sends the result to the browser in HTML format. We expect this system would outperform the system with other architectures by eliminating unnecessary overheads caused by CGI program execution. After the implementation, we evaluated its performance using several sample queries over various system configurations in comparison with other architectures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Seshadri, M. Livy, R. Ramakrishnan, </author> <title> "The Case for Enhanced Abstract Data Types", </title> <booktitle> VLDB 97, </booktitle> <year> 1997 </year>
Reference: [2] <author> P. </author> <title> Seshadri, </title> <journal> "E-ADTs - Turbo-Charging Complex Data", Data Engineering Bulletin, </journal> <month> December, </month> <year> 1996 </year>
Reference-contexts: Several other kinds of complex and semi-structured data are also important, including geographical objects, chemical and biological structures, mathematical entities like matrices and equations, and financial data like time-series. Database systems must efficiently support queries over such richly structured data <ref> [2] </ref>. 2.2 Text-driven client-server model This model is based on the traditional connection- oriented client-server architecture. Most of the DB servers in the real world are supporting some text- driven client programs with which users connect the database server and do their jobs. It has some nice features.
Reference: [3] <author> P. Seshadri, M. Paskin, </author> <title> "PREDATOR An ORDBMS with Enhanced Data Types", </title> <booktitle> SIGMOD 97, </booktitle> <year> 1997 </year>
Reference: [4] <author> P. Seshadri, </author> <title> "Object-Relational Databases on the WWW:Design and Implementation Issues", </title> <address> COMAD 97, </address> <year> 1997 </year>
Reference-contexts: Object- relational databases can support complex data types including multimedia data. But, the majority of ideas on OR-DBMS came out without considering WWW environment and the combination of OR-DBMS and WWW has some room for improvement <ref> [4] </ref>. 2 Introduction 2.1 Why OR-DBMS? We are facing an explosion in the volume and complexity of digital information that people want to access and analyze. Much of this data is "multi-media" like images, video, audio, and documents. <p> This architecture is inefficient because user's query is delivered to DB server through the corresponding CGI script, which is forked by the Web server. And the search results should be copied twice, once from DB server to CGI and once from CGI to the original client <ref> [4] </ref>. 2.3.2 Using Java applet In order to access the database server, the user's browser runs a Java applet which is downloaded from a traditional Web server. The applet acts as the database client, and can provide a rich graphical user interface if appropriate. <p> About the data delivery from the server to client, this architecture allows the flexibility to move away from the query shipping approach to a more hybrid approach that can utilize some of the client-side resources, too <ref> [4] </ref>. Java has a lot of good features and is also nice to manipulate multimedia data. The problem on this Java approach lies in the performance of Java itself.
Reference: [5] <editor> R. Jain, </editor> <booktitle> "The art of computer systems perfor-mance analysis" </booktitle>
Reference: [6] <institution> Network Working Group, </institution> <note> Hypertext Transfer Protocol - HTTP/1.1., RFC2068 </note>
Reference: [7] <institution> Internet Engineering Task Force, </institution> <note> WWW Common Gateway Interface- CGI/1.1. </note>
Reference-contexts: A plain HTML document that the Web daemon retrieves is static, which means it exists in a constant state: a text file that doesn't change. A CGI program, on the other hand, is executed in real-time, so that it can output dynamic information <ref> [7] </ref>. The first architecture for Web/database access is the 3-tier client-server architecture which consists of client browser, Web server and database server. The end- user accesses a client browser, which sends queries to an intermediary-this is usually a CGI script spawned by a Web server.
Reference: [8] <institution> Network Working Group, Uniform Resource Locators(URL), RFC1738 </institution>
Reference-contexts: In fact, the browser has nothing to do with how Web servers deliver the query results to it. In our model, the browser is the Web client and the database client at the same time. For sending URL with some arguments and receiving the corresponding page <ref> [8] </ref>, we utilize HTTP for its network communication and the browser is just the Web client. For querying some SQL statements and getting the search results, we connect database server and the browser acts as the database client.
References-found: 8

