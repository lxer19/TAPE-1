URL: http://www.llnl.gov/CASC/people/musick/papers/md96.ps
Refering-URL: http://www.llnl.gov/CASC/people/musick/papers/md96.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fpbrown, rtroyg@postgres.berkeley.edu  rmusickg@llnl.gov  
Title: Metadata for Balanced Performance  
Author: Paul Brown, Richard Troy Dave Fisher, Steve Louis, James R. McGraw, Ron Musick 
Address: Berkeley, CA 94720  P.O. Box 808, Livermore, CA 94551 fdsf, stlouis, jmcgraw,  
Affiliation: University of California at Berkeley Computer Science Division,  Lawrence Livermore National Laboratory  
Abstract: Data and information intensive industries require advanced data management capabilities incorporated with large capacity storage. Performance in this environment is, in part, a function of individual storage and data management system performance, but most importantly a function of the level of their integration. This paper focuses on integration, in particular on the issue of how to use shared metadata to facilitate high performance interfaces between Mass Storage Systems (MSS) and advanced data management clients. Current MSS interfaces are based on traditional file system interaction. Increasing functionality at the interface can enhance performance by permitting clients to influence data placement, generate accurate cost estimates of I/O, and describe impending I/O activity. Flexible mechanisms are needed for providing this functionality without compromising the generality of the interface; we are proposing active metadata sharing. We present an architecture that details how the shared metadata fits into the overall system architecture and control structure, along with a first cut at what the metadata model should look like. fl This work was funded in part by the National Aeronautics and Space Administration (NASA) EOSDIS grant with University of California at Berkeley, reference number 3579-IST94-0086 and under contract number L-4947 at Lawrence Livermore National Laboratory. Portions of this work were performed under the auspices of the U.S. Department of Energy's Mathematical, Information and Computational Sciences Program (grant KC 07-01-03)and by the Lawrence Livermore National Laboratory under contract number W-7405-ENG-48. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ISO/IEC 9075. </author> <title> Information Technology Database Languages - SQL 1992. </title> <institution> American National Standards Institute, </institution> <address> NY, NY, </address> <year> 1992. </year>
Reference-contexts: Typically, an RDBMS includes functionality such as a query language, active database features (e.g., rules and triggers), ACID transaction semantics, and security. For the IDR design, we assume that the query language used to access and modify the content of the IDR is SQL92 <ref> [1] </ref>. The MSS manages its stores, implements site policy, and honors requests as best it can given what it knows about its entire work load.
Reference: [2] <author> T. Chen, R. Drach, M. Keating, S. Louis, D. Rotem, and A. Shoshani. </author> <title> Efficient organization and access of multi-dimensional datasets on tertiary storage systems. </title> <note> In Special Issue on Scientific Databases, Information Systems Journal. Pergammon Press, </note> <year> 1995. </year>
Reference-contexts: Intelligent data layout is based on the principle that data should be stored on these devices in the order that it is most likely to be retrieved, which is not necessarily the order in which it was stored. Optimass <ref> [2] </ref> implemented this concept in global climate data modeling and has shown performance improvements of 2 to 15 times faster I/O speeds over a set of 70 queries against the data.
Reference: [3] <author> IEEE Storage System Standards Working Group. </author> <title> Reference Model for Open Storage Systems Interconnections: Mass Storage Reference Model, </title> <type> Version 5. </type> <institution> IEEE, </institution> <year> 1994. </year>
Reference-contexts: We are taking this approach for a prototype implementation, which is depicted in HPSS is a collaborative development effort between IBM and four national laboratories, 9 including LLNL. HPSS build on standards where they exist; it is consistent with the IEEE Mass Storage Reference Model <ref> [3] </ref>. The initial implementation of the IDR will be accomplished using DB2 to extend the HPSS interface. We believe that DB2 provides the necessary performance levels required for the IDR implementation and it does so through a standard interface to the SQL92 standard query language.
Reference: [4] <author> T. Harder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computer Surveys, </journal> <volume> 15(4), </volume> <year> 1983. </year>
Reference-contexts: With no mechanism to influence this situation, the robustness of certain MSS clients is significantly degraded. Transaction Semantics Finally, the interface must provide good transaction semantics. There are four important properties of all transactions: Atomicity, Consistency, Isolation, and Durability (ACID) <ref> [4] </ref>. Atomicity requires that each transaction (e.g., I/O operation) be "all-or-nothing." Consistency requires that the information about the state of the system always remain in a consistent state.
Reference: [5] <author> J. Hellerstein and M. Stonebraker. </author> <title> Predicate migration: Optimizing queries with expensive predicates. </title> <type> Technical Report Sequoia 2000 report 92/13, </type> <institution> University of California, Berkeley, </institution> <year> 1992. </year> <month> 11 </month>
Reference-contexts: An MSS interface that provides good information on the time cost of data access throughout its storage hierarchy is necessary to enable effective query optimization. This kind of interface meshs well with current query optimization research <ref> [5, 7] </ref> that is adapting the algorithms to deal with tertiary device characteristics. Data Placement The case for being able to influence data placement in the MSS is best made from the viewpoint of an intelligent data layout client. Briefly, tape-based mediums in tertiary storage are linear access devices.
Reference: [6] <author> A. Rueter and J. Gray. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Traditionally, DBMSs that need high performance put all data on fast random access disks. DBMS query optimizers plan out how to most efficiently retrieve information to minimize the resource cost of a query (space, cpu, I/O, time) <ref> [6] </ref>, based on the easily computed performance characteristics of the disks. A DBMS that can produce the same quality of time 1 There are other potential metrics that an MSS might optimize for instead, e.g. minimum response times.
Reference: [7] <author> S. Sarawagi. </author> <title> Database systems for efficient access to tertiary memory. </title> <booktitle> In Proceedings Fourteenth IEEE Symposium on Mass Storage Systems, </booktitle> <address> Monterey, CA, </address> <year> 1995. </year>
Reference-contexts: An MSS interface that provides good information on the time cost of data access throughout its storage hierarchy is necessary to enable effective query optimization. This kind of interface meshs well with current query optimization research <ref> [5, 7] </ref> that is adapting the algorithms to deal with tertiary device characteristics. Data Placement The case for being able to influence data placement in the MSS is best made from the viewpoint of an intelligent data layout client. Briefly, tape-based mediums in tertiary storage are linear access devices.
References-found: 7

