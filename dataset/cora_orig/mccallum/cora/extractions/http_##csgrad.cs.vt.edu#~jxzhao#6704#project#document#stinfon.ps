URL: http://csgrad.cs.vt.edu/~jxzhao/6704/project/document/stinfon.ps
Refering-URL: http://csgrad.cs.vt.edu/~jxzhao/6704/project/document/index.html
Root-URL: http://www.cs.vt.edu
Title: Porter's stemming algorithm for Dutch  
Author: Wessel Kraaij and Ren 
Affiliation: ee Pohlmann  
Abstract: A stemming algorithm provides a simple means to enhance Recall in Text Retrieval systems. The paper describes the development of a Dutch version of the Porter stemming algorithm. The stemmer was evaluated using a method inspired by Paice (Paice, 1994). The evaluation method is based on a list of groups of morphologically related words. Ideally, each group must be stemmed to the same root. The result of applying the stemmer to these groups of words is used to calculate the Understemming and Overstemming Index. These parameters and the diversity of stem group categories that could be generated from the CELEX database enabled a careful analysis of the effects of each stemming rule. The testsuite is extremely fit for a qualitative comparison of different (versions of) stemmers.
Abstract-found: 1
Intro-found: 1
Reference: <editor> Baayen, R. H., Piepenbrock, R., and van Rijn, H., editors (1993). </editor> <title> The CELEX Lexical Database (CD-ROM). Linguistic Data Consortium, </title> <institution> University of Pennsylvania, </institution> <address> Philadelphia (PA). </address> <publisher> de Haas, </publisher> <editor> W. and Trommelen, M. (1993). Morfologisch Handboek van het Nederlands, </editor> <booktitle> volume 7 of Aan het Woord. </booktitle> <address> SDU Uitgeverij, 's-Gravenhage. </address>
Reference-contexts: We have taken a different approach to produce a group file for Dutch. The group file has been produced by a suite of small computer programs which exploit the morphological information of the CELEX database <ref> (Baayen et al., 1993) </ref>. For our purpose we used the wordforms database covering Dutch inflection and a database of lemmas which gives all possible segmentations of derivational forms and compounds. The wordform database lists a lemma for each wordform.
Reference: <author> Frakes, W. B. and Baeza-Yates, R., </author> <title> editors (1992). Information Retrieval: Data strutures & Algorithms. </title> <publisher> Prentice Hall. </publisher>
Reference: <editor> Geerts, G., Haeseryn, W., de Rooij, J., and van der Toorn, M., editors (1984). Algemene Nederlandse Spraakkunst. Wolters Noordhoff, </editor> <address> Groningen. </address>
Reference-contexts: the affix rules which will be described in the next paragraph e.g cre eren - cre eer but vari eren - varieer. 169 3.3 Affix-rules for Dutch The affix-rules for Dutch were written based on information in Morfologisch Handboek van het Nederlands (de Haas and Trommelen, 1993), Algemene Nederlandse Spraakkunst <ref> (Geerts et al., 1984) </ref> and Woordfrequenties in Geschreven en Gesproken Nederlands (Uit den Boogaart, 1975).
Reference: <author> Harman, D. </author> <year> (1991). </year> <title> How effective is suffixing. </title> <journal> Journal of the American Society for Information Science, </journal> <volume> 42(1) </volume> <pages> 7-15. </pages>
Reference-contexts: The underlying assumption for a fruitful usage of such a stemmer, is that morphological variants of words are semantically related. This is obviously not always true. In information retrieval, the use of stemming is controversial <ref> (Harman, 1991) </ref>. However several authors (Frakes and Baeza-Yates, 1992; Krovetz, 1993; Popovi c and Willett, 1992) report favourable results 1 . The UPLIFT project 2 investigates whether linguistic tools can improve the performance of an Information Retrieval system for Dutch Texts. <p> However some strippers are are a bit more sophisticated. Instead of deleting a suffix, they can also replace it by another (shorter) suffix or modify the stem itself. Harman <ref> (Harman, 1991) </ref> compared three well-known stemming algorithms for English: * S-stemmer: a simple stemmer removing the plural s * Lovins (Lovins, 1968): a longest match stemmer consisting of 260 suffixes with a list of exceptions * Porter (Porter, 1980): a multi-step stemmer without exception list In Harman's experiments, stemming (i.e. suffix
Reference: <author> Krovetz, R. </author> <year> (1993). </year> <title> Viewing morphology as an inference process. </title> <booktitle> In Proceedings of ACM-SIGIR93, </booktitle> <pages> pages 191-203. </pages>
Reference-contexts: Recall did improve but precision was degraded by stemming. Harman suggested that the latter effect could possibly be prevented by a more elaborate, dictionary based, stemming algorithm which checks whether the resulting stem is semantically related to the original term. The latter approach has been investigated by Krovetz <ref> (Krovetz, 1993) </ref>. Maybe the negative results from Harman can be attributed to the rather simple English morphology.
Reference: <author> Lovins, J. B. </author> <year> (1968). </year> <title> Development of a stemming algoritm. </title> <journal> Mechanical Translation and Computational Linquistics, </journal> <volume> 11 </volume> <pages> 22-31. </pages>
Reference-contexts: However some strippers are are a bit more sophisticated. Instead of deleting a suffix, they can also replace it by another (shorter) suffix or modify the stem itself. Harman (Harman, 1991) compared three well-known stemming algorithms for English: * S-stemmer: a simple stemmer removing the plural s * Lovins <ref> (Lovins, 1968) </ref>: a longest match stemmer consisting of 260 suffixes with a list of exceptions * Porter (Porter, 1980): a multi-step stemmer without exception list In Harman's experiments, stemming (i.e. suffix stripping) did not yield any significant improvement. Recall did improve but precision was degraded by stemming.
Reference: <author> Paice, C. D. </author> <year> (1994). </year> <title> An evaluation method for stemming algoritms. </title> <booktitle> In Proceedings of ACM-SIGIR94, </booktitle> <pages> pages 42-50. </pages>
Reference-contexts: to calculate an over-stemming and under-stemming index for stemming algorithms and the results we obtained by applying his method to our Dutch version of the Porter algorithm. 172 4 Performance evaluation 4.1 Paice's stemmer evaluation method In this paper we will present an evaluation method which is proposed by Paice <ref> (Paice, 1994) </ref>. Paice has compared different English stemming algorithms isolated from the context of an IR system. He did not use the traditional precision/recall parameters.
Reference: <author> Popovi c, M. and Willett, P. </author> <year> (1992). </year> <title> The effectiveness of stemming for natural-language access to slovene textual data. </title> <journal> Journal of the American Society for Information Science, </journal> <volume> 43(5) </volume> <pages> 384-390. </pages>
Reference-contexts: The latter approach has been investigated by Krovetz (Krovetz, 1993). Maybe the negative results from Harman can be attributed to the rather simple English morphology. Experiments with a Porter-like stemmer for the Slovene Language by Popovi c and Willett <ref> (Popovi c and Willett, 1992) </ref>, containing 5276 suffixes, show a significant improvement in precision (at fixed retrieval of the 10 most highly ranked documents). Popovi c did an interesting control experiment. The Slovene test corpus was translated to English and the same experiment was repeated.
Reference: <author> Porter, M. F. </author> <year> (1980). </year> <title> An algorithm for suffix stripping. </title> <booktitle> Program, </booktitle> <volume> 14(3) </volume> <pages> 130-137. </pages> <editor> Uit den Boogaart, P. C., editor (1975). Woordfrequenties in Geschreven en Gesproken Nederlands. Oosthoek, Scheltema en Holkema, </editor> <address> Utrecht. </address> <month> 180 </month>
Reference-contexts: This paper describes the development and evaluation of a suffix stripper for Dutch. We have chosen to modify the stemming algorithm developed by Porter <ref> (Porter, 1980) </ref> because it is well known and is frequently used in experimental IR systems. 2 Suffix stripping The core of every suffix stripper is a set of rules which test whether a word ends with a certain character sequence and subsequently delete this sequence. <p> Harman (Harman, 1991) compared three well-known stemming algorithms for English: * S-stemmer: a simple stemmer removing the plural s * Lovins (Lovins, 1968): a longest match stemmer consisting of 260 suffixes with a list of exceptions * Porter <ref> (Porter, 1980) </ref>: a multi-step stemmer without exception list In Harman's experiments, stemming (i.e. suffix stripping) did not yield any significant improvement. Recall did improve but precision was degraded by stemming.
References-found: 9

