URL: ftp://ftp.eecs.umich.edu/groups/gasm/arm.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: Specification and Verification of Pipelining in the ARM2 RISC Microprocessor RISC microprocessors. Key features of
Author: James K. Huggins and David Van Campenhout 
Note: The ARM2 [1, 4] is one of the early commercial  Acknowledgements. Trevor Mudge originally suggested this project to us.  
Date: December 19, 1996  
Address: Ann Arbor, MI, 48109-2122, USA  
Affiliation: EECS Department, University of Michigan,  
Abstract: We specify the ARM2 RISC microprocessor using the Gurevich Abstract State Machine methodology, and prove the correctness of its pipelining techniques. The Gurevich Abstract State Machine (ASM) methodology, formerly known as the evolving algebra or ealgebra methodology, first proposed by Yuri Gurevich in [5], is a simple yet powerful methodology for specifying and verifying software and hardware systems. ASMs have been applied to a wide variety of software and hardware systems: programming languages, distributed protocols, architectures, and so on. See [2, 8] for numerous examples. In this paper, we specify the ARM2 microprocessor and prove the correctness of its pipelining techniques. We begin with a self-contained introduction to sequential ASMs in section 1; the definitions given there are sufficient for understanding of this paper. Section 2 introduces the ARM2 (hereafter ARM) microprocessor in greater detail. We then present a non-pipelined version of the ARM processor in section 3; this version establishes the standard to which we will compare the pipelined versions. Following [3], we alter the ASM presented in section 3 to operate with a simple, three-stage pipeline, ignoring the possible problems with branch and data dependency which may arise; this simple pipelined processor is presented in section 4 and proved to be equivalent to the non-pipelined version in an appropriate sense. In section 5, we alter the ASM to reflect the hardware limitations of the external memory system of the ARM2. In section 6, we alter the ASM to correctly handle branch-conflicts. In section 7, we alter the ASM to correctly handle data-dependencies. In section 8, we alter the ASM to reflect the hardware restrictions of the register file. For each of these revised machines, we prove that the revised machine is equivalent to the original ASM described in section 3. The final pipelined version of the ARM2 processor is given in Appendix A. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Acorn RISC machine (ARM) family data manual, </institution> <address> Englewood Clifs, N.J. </address> : <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference: [2] <author> E. Borger, </author> <title> "Annotated Bibliography on Evolving Algebras", in Specification and Validation Methods, </title> <editor> ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1995, </year> <pages> 37-51. </pages>
Reference-contexts: Partially supported by ONR grant N00014-94-1-1182 and NSF grant CCR-95-04375. z davidvc@eecs.umich.edu. Partially supported by SRC contract 95-DJ-338 and NSF grant MIP-9404632. 1 develop a methodology based upon mathematics which would allow such systems to be modeled naturally; that is, described at their natural abstraction levels. See <ref> [2, 8] </ref> for a number of examples of ASMs applied to various real-world systems. Sequential ASMs (under their former name, evolving algebras) are described in [6]; a more detailed description of ASMs (including distributed characteristics) is given in [7].
Reference: [3] <author> E. Borger and S. Mazzanti, </author> <title> "A correctness proof for pipelining in RISC architectures." </title> <type> DIMACS Technical Report 96-22, </type> <month> July </month> <year> 1996. </year>
Reference: [4] <author> Stephen B. Furber, </author> <title> VLSI RISC architecture and organization, </title> <address> New York, </address> <publisher> M. Dekker, </publisher> <year> 1989. </year>
Reference: [5] <author> Y. Gurevich, </author> <title> "Logic and the challenge of computer science." </title> <editor> In E. Borger, editor, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pp. 1-57, </pages> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference: [6] <author> Y. Gurevich, </author> <title> "Evolving Algebras: An Attempt to Discover Semantics", </title> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <editor> eds. G. Rozenberg and A. Salomaa, </editor> <publisher> World Scientific, </publisher> <year> 1993, </year> <pages> 266-292. </pages> <note> (First published in Bull. EATCS 57 (1991), 264-284; an updated version appears in [8].) </note>
Reference-contexts: See [2, 8] for a number of examples of ASMs applied to various real-world systems. Sequential ASMs (under their former name, evolving algebras) are described in <ref> [6] </ref>; a more detailed description of ASMs (including distributed characteristics) is given in [7]. We present here only those features of sequential ASMs necessary to understand this paper.
Reference: [7] <author> Y. Gurevich, </author> <title> "Evolving Algebras 1993: Lipari Guide", in Specification and Validation Methods, </title> <editor> ed. E. Borger, </editor> <publisher> Oxford University Press, </publisher> <year> 1995, </year> <pages> 9-36. </pages> <note> 28 if ExecuteMode = first-step and AluRegShift(ExecuteInstr) then if Satisfies(Status,CondCode(ExecuteInstr)) then Aop := Contents'(AopReg(ExecuteInstr)) ExecuteMode := alu-shift endif endif if ExecuteMode = alu-shift then if WriteResult(ExecuteInstr) then </note>
Reference-contexts: See [2, 8] for a number of examples of ASMs applied to various real-world systems. Sequential ASMs (under their former name, evolving algebras) are described in [6]; a more detailed description of ASMs (including distributed characteristics) is given in <ref> [7] </ref>. We present here only those features of sequential ASMs necessary to understand this paper.
References-found: 7

