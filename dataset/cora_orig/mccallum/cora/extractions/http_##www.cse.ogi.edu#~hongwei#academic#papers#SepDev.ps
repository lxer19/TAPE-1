URL: http://www.cse.ogi.edu/~hongwei/academic/papers/SepDev.ps
Refering-URL: http://www.cse.ogi.edu/~hongwei/academic/manuscripts.html
Root-URL: http://www.cse.ogi.edu
Email: Email: hwxi@cs.cmu.edu  
Title: Separating Developments in -Calculus  
Author: Hongwei Xi U. S. A. 
Address: 5000 Forbes Avenue Pittsburgh, PA 15213  
Affiliation: Department of Mathematical Sciences Carnegie Mellon University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <editor> H.P. Barendregt et al. </editor> <year> (1976), </year> <title> Some notes on lambda reduction, </title> <type> Preprint No. 22, </type> <institution> University of Utrecht, Department of Mathematics, </institution> <note> pp. 13-53. </note>
Reference: [2] <author> H.P. </author> <title> Barendregt (1984), The Lambda Calculus: Its Syntax And Semantics, </title> <publisher> North-Holland publishing company, Amsterdam. </publisher>
Reference-contexts: This is partially caused by the involvement of the strong fi-normalisation theorem for labelled -calculus. The notion of parallel fi-reduction is introduced through a proof of the Church-Rosser theorem due to Tait/Martin-Lof (Section 3.2 <ref> [2] </ref>). Parallel fi-reductions are complete developments, in which only the existing fi-redexes and their residuals are reduced. Since parallel fi-reduction can be defined through a structural induction on -terms, this makes it suitable for inductive proofs [20]. <p> Lastly, we compare our technique with some related work and draw some conclusions. 2. Preliminaries We give a brief description on the notations and terminologies used in this paper. Most details not included here appear in <ref> [2] </ref>. <p> M fx := N g stands for substituting N for all free occurrences of x in M ; ff-conversion may have to be performed in order to avoid name collisions; we also assume some basic substitution properties such as the substitution lemma (Lemma 2.1.16 <ref> [2] </ref>). <p> Now for every development we can permute cad () into a standard development std (). Given a development of R; if R= = ; then is a complete development of R. One step of parallel fi-reduction (Section 3.2 <ref> [2] </ref>) can be regarded as a complete development of some R. 4. The Church-Rosser Theorem The Church-Rosser theorem (CR) was first proven in [4]. Many other proofs have come out since then. <p> To contrast with our proof of CR, we first mention a quick proof of the CR using FD, which is essentially the same as the proof of CR in Section 11.2 <ref> [2] </ref>. <p> Proof This follows from Lemma 14 since ! fl fi is a transitive closure of developments. This proof is closely related to a short proof of CR in <ref> [2] </ref> due to Tait and Martin-Lof, where the notion of parallel reduction is introduced. In both cases, the application of the finiteness of developments theorem is spared, and some structural induction on -terms is used. <p> This makes the strip lemma little more than a technicality issue. Therefore, we feel that our proof of CR carries some extra information which is not contained in the proof of CR in Section 11.1 <ref> [2] </ref>. The proof given by Tait and Martin-Lof is often chosen as a candidate for mechanical verification of CR. This merit is also inherited in our proof. We can first give a mechanical verification of the development separation lemma as done in [9], and then carry out the whole verification. <p> For those who know the strong equivalence relation ~ = on fi-reductions in <ref> [2] </ref>, originally due to Berry and Levy, it can be verified that ~ = std 1 () for all fi-reduction sequences . Now let us see some other applications of the above proof technique, which separates developments from other fi-reductions. 10 6. <p> Proof See the proof of Lemma 13.2.5 (i) in <ref> [2] </ref>. Lemma 21 If M fi M 0 is a standard development of R which consists of only fi I -redexes and (M 0 ) &lt; 1, then (M ) &lt; 1. Proof Let us proceed by induction on h (M 0 ); jji, lexicographically ordered. <p> We also gave a proof of the finiteness of developments theorem in Hindley's style [8], showing some relation between development separation lemma and his work. Three different proofs of CR are given in <ref> [2] </ref>. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]). Several proofs 12 of the standardisation theorem can be found in [2, 20]. <p> We also gave a proof of the finiteness of developments theorem in Hindley's style [8], showing some relation between development separation lemma and his work. Three different proofs of CR are given in <ref> [2] </ref>. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]). Several proofs 12 of the standardisation theorem can be found in [2, 20]. Our proof of the standardisation bears some resemblance to the ones due to Klop, shifting the leftmost contracted fi-redex to the front of fi-reduction sequence. <p> Three different proofs of CR are given in <ref> [2] </ref>. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]). Several proofs 12 of the standardisation theorem can be found in [2, 20]. Our proof of the standardisation bears some resemblance to the ones due to Klop, shifting the leftmost contracted fi-redex to the front of fi-reduction sequence. <p> Three different proofs of CR are given in [2]. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]). Several proofs 12 of the standardisation theorem can be found in <ref> [2, 20] </ref>. Our proof of the standardisation bears some resemblance to the ones due to Klop, shifting the leftmost contracted fi-redex to the front of fi-reduction sequence. We adopted a different strategy to prove the termination of the process.
Reference: [3] <author> G. Berry (1978), Sequentialite de l'evaluation formelle des -expressions, </author> <booktitle> Proc. 3-e Col-loque International sur la Programmation, </booktitle> <address> Paris. </address>
Reference: [4] <author> A. Church and J.B. </author> <title> Rosser (1936), Some properties of conversions, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 39, </volume> <pages> pp. 472-482. </pages>
Reference-contexts: Given a development of R; if R= = ; then is a complete development of R. One step of parallel fi-reduction (Section 3.2 [2]) can be regarded as a complete development of some R. 4. The Church-Rosser Theorem The Church-Rosser theorem (CR) was first proven in <ref> [4] </ref>. Many other proofs have come out since then. One way to do this is first prove a strip lemma and then carry out an induction on the lengths of fi-reduction sequences. A theorem called finiteness of developments (FD) is often used in the proofs of strip lemma.
Reference: [5] <author> H.B. Curry and R. </author> <title> Feys (1958), Combinatory Logic, </title> <publisher> North-Holland Publishing Company, Amsterdam. </publisher>
Reference-contexts: This merit is also inherited in our proof. We can first give a mechanical verification of the development separation lemma as done in [9], and then carry out the whole verification. This should yield a more perspicuous verification. 5. Standardisation Theorem Standardisation theorem was first proven in <ref> [5] </ref>, stating that every fi-reduction sequence can be standardised in the following sense. Some other proofs of standardisation theorem can be found in [15], [12] and [20], and our proof bears some resemblance to the one in [12].
Reference: [6] <author> R. </author> <title> de Vrijer (1985), A direct proof of the finite developments theorem, </title> <journal> Journal of Symbolic Logic, </journal> <volume> 50 </volume> <pages> 339-343. </pages>
Reference-contexts: Also a proof due to de Vrijer <ref> [6] </ref> gives an exact bound for the lengths of developments from given -terms.
Reference: [7] <author> R.O. </author> <title> Gandy (1980), An early proof of normalisation by A.M. Turing, To: </title> <booktitle> H.B. Curry: Essays on combinatory logic, lambda calculus and formalism, </booktitle> <publisher> Academic press, </publisher> <pages> pp. 453-456. </pages>
Reference-contexts: Given a term M in the simply typed -calculus, it can be easily shown that there exists some fi-reduction sequence from M such that (M ) is in a fi-normal form <ref> [7] </ref>; hence std 1 () is a longest fi-reduction sequence from M if M is a I-term; this yields an approach to computing a bound for (M ), the length of a longest fi-reduction sequence from M , if M is a I-term; with the help of some translation, we can
Reference: [8] <author> J.R. </author> <title> Hindley (1978), Reductions of residuals are finite, </title> <journal> Trans. Amer. Math. Soc. </journal> <volume> 240, </volume> <pages> pp. 345-361. </pages>
Reference-contexts: The idea of separating developments can also be found in <ref> [8] </ref>. In order to illustrate the point, we present a sketchy proof of the finiteness of developments (FD) in Hindley's style though some minor difference is made here. <p> The Church-Rosser theorem in -calculus follows immediately. Separating developments from other fi-reductions, we then presented proofs for the standardisation theorem, the conservation theorem and the normalisa-tion theorem in -calculus. We also gave a proof of the finiteness of developments theorem in Hindley's style <ref> [8] </ref>, showing some relation between development separation lemma and his work. Three different proofs of CR are given in [2]. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]).
Reference: [9] <author> Gerard Huet (1994), </author> <title> Residual Theory in -Calculus: A Formal Development, </title> <journal> Journal of Functional Programming vol. </journal> <volume> 4, </volume> <pages> pp. 371-394. </pages>
Reference-contexts: W now introduce the concept of residuals of fi-redexes. The rigorous definition of this notion can be found in <ref> [9] </ref>. Let R be a set of fi-redexes in a term M 1 and M 1 R ! fi M 2 , where R = (x:M )(N ). This reduction step affects fi-redexes R 0 in R in the following ways. <p> The proof given by Tait and Martin-Lof is often chosen as a candidate for mechanical verification of CR. This merit is also inherited in our proof. We can first give a mechanical verification of the development separation lemma as done in <ref> [9] </ref>, and then carry out the whole verification. This should yield a more perspicuous verification. 5. Standardisation Theorem Standardisation theorem was first proven in [5], stating that every fi-reduction sequence can be standardised in the following sense.
Reference: [10] <author> J.M.E. </author> <title> Hyland (1973), A simple proof of the Church-Rosser theorem, </title> <publisher> Typescript, Oxford University, </publisher> <pages> 7 pp. </pages>
Reference-contexts: M 1 , jj j 1 j + 2 jM 1 j (2 jM 2 j 1) &lt; 2 jM 1 j + 2 jM 1 j (2 jM 2 j 1) = 2 jM 1 j+jM 2 j = 2 jMj : A proof of FD due to Hyland <ref> [10] </ref> can yield the same bound. Also a proof due to de Vrijer [6] gives an exact bound for the lengths of developments from given -terms.
Reference: [11] <author> J.M.E. </author> <title> Hyland (1976), A syntactic characterisation of the equality in some models of the -calculus, </title> <journal> J. London Math. Soc. </journal> <volume> (2) 12, </volume> <pages> pp. 361-370. </pages>
Reference-contexts: Labelling fi-redexes is one approach to handling such an issue. Explicit labelling is done through some labelled -calculi and implicit labelling is through the notion of residuals of fi-redexes. A labelled -calculus is introduced in <ref> [11] </ref> and [21] as a tool for examining the -models D 1 and P !. Also a more general labelled -calculus is considered in [13], where the notion of strongly equivalent fi-reductions is presented.
Reference: [12] <author> J.W. </author> <title> Klop (1980), Combinatory Reduction Systems, </title> <type> Ph.D. thesis, </type> <institution> CWI, Amsterdam, Mathematical center tracts, </institution> <note> No. 127. </note>
Reference-contexts: This should yield a more perspicuous verification. 5. Standardisation Theorem Standardisation theorem was first proven in [5], stating that every fi-reduction sequence can be standardised in the following sense. Some other proofs of standardisation theorem can be found in [15], <ref> [12] </ref> and [20], and our proof bears some resemblance to the one in [12]. <p> Standardisation Theorem Standardisation theorem was first proven in [5], stating that every fi-reduction sequence can be standardised in the following sense. Some other proofs of standardisation theorem can be found in [15], <ref> [12] </ref> and [20], and our proof bears some resemblance to the one in [12]. Definition 16 (Standard fi-Reduction Sequence) Given a fi-reduction sequence t of form: t : M 1 R 2 ! fi t is standard if for all 1 i &lt; j n, R j is not a residual of some fi-redex to the left of R i . <p> The main idea of the proof is to shift the leftmost contracted fi-redex in a fi-reduction sequence to the front and do this recursively. Though this is also the idea of the proof in <ref> [12] </ref>, we apply a different strategy to prove the termination of the process. With the help of Lemma 12, our proof not only obviates the use of FD but also presents a sharp inductive argument on why the shifting process terminates, and this makes it suitable for mechanisation.
Reference: [13] <author> J.-J. Levy, </author> <title> An algebraic interpretation of -fi-K-calculus and a labelled -calculus, </title> <booktitle> Proceedings of the Symposium held in Rome, Lecture Notes in Computer Science 37, edited by C. Bohm, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. 147-165. </pages>
Reference-contexts: Explicit labelling is done through some labelled -calculi and implicit labelling is through the notion of residuals of fi-redexes. A labelled -calculus is introduced in [11] and [21] as a tool for examining the -models D 1 and P !. Also a more general labelled -calculus is considered in <ref> [13] </ref>, where the notion of strongly equivalent fi-reductions is presented. Many fundamental theorems in -calculus, such as Church-Rosser theorem and standardisation theorem, can be proven with the help of labelled fi-reductions. This is largely due to the fact that the labelled -calculus enjoys strong fi-normalisation.
Reference: [14] <author> Per Martin-Lof (1980), </author> <title> Constructive mathematics and computer programming, </title> <booktitle> Logic, Methodology and Philosophy of Science VI, </booktitle> <publisher> North-Holland, </publisher> <pages> pp. 153-175. </pages>
Reference: [15] <author> G. </author> <month> Mitschke </month> <year> (1979), </year> <title> The standardization theorem for the -calculus, </title> <journal> Z. Math. Logik Grundlag. Math. </journal> <volume> 25, </volume> <pages> pp. 29-31. </pages>
Reference-contexts: This should yield a more perspicuous verification. 5. Standardisation Theorem Standardisation theorem was first proven in [5], stating that every fi-reduction sequence can be standardised in the following sense. Some other proofs of standardisation theorem can be found in <ref> [15] </ref>, [12] and [20], and our proof bears some resemblance to the one in [12].
Reference: [16] <author> F. </author> <title> Pfenning (1992), A proof of the Church-Rosser theorem and its representation in a logical framework, </title> <type> Technical Report CMU-CS-92-186. </type>
Reference: [17] <author> G.D. </author> <title> Plotkin (1975), Call-by-name, call-by-value and the lambda-calculus, </title> <booktitle> Theoretical Computer Science 1, </booktitle> <pages> pp. 125-159. </pages>
Reference-contexts: Clearly, the normalisation theorem follows from the standardisation theorem immediately in the -calculus. In some other settings such as the call-by-value -calculus v <ref> [17] </ref>, it seems quite involved to prove a version of standardisation theorem. This makes it desirable to prove the normalisation theorem in the following style. Let fl (M ) stands for the longest leftmost fi-reduction sequence from M , which can be of infinite length. <p> This can be described as: separating parallel fi-reductions from fi-reductions. Our technique can be applied to the call-by-value -calculus v , simplifying many proofs in <ref> [17] </ref>. A -calculus v hd is proposed in [25], aiming at providing theoretical background for doing evaluations under -abstraction in functional programming languages. The notion of separating developments plays a key role in proving several fundamental theorems for v hd . 8.
Reference: [18] <author> D.E. </author> <month> Schroer </month> <year> (1965), </year> <title> The Church-Rosser Theorem, </title> <type> Dissertation, </type> <institution> Cornell university, </institution> <address> Ithaca, New York, USA. </address>
Reference: [19] <author> N. </author> <title> Shankar (1988), A mechanical proof of the Church-Rosser theorem, </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 35(3) </volume> <pages> 475-522. </pages>
Reference: [20] <author> M. </author> <title> Takahashi (1995) Parallel reduction, </title> <journal> the Journal of Information and Computation 118, </journal> <pages> pp. 120-127. </pages>
Reference-contexts: Parallel fi-reductions are complete developments, in which only the existing fi-redexes and their residuals are reduced. Since parallel fi-reduction can be defined through a structural induction on -terms, this makes it suitable for inductive proofs <ref> [20] </ref>. Sometimes, tracking residuals can help understand proven theorems, but parallel fi-reduction makes this difficult to do. Also parallel fi-reduction has problem reasoning on the lengths of fi-reduction sequences. For instance, the finiteness of development theorem is not easy to be formulated in terms of parallel fi-reduction. <p> This should yield a more perspicuous verification. 5. Standardisation Theorem Standardisation theorem was first proven in [5], stating that every fi-reduction sequence can be standardised in the following sense. Some other proofs of standardisation theorem can be found in [15], [12] and <ref> [20] </ref>, and our proof bears some resemblance to the one in [12]. <p> Three different proofs of CR are given in [2]. Our proof of CR combines the brevity of the first proof (Section 3.2 [2]) and the perspicuity of the second proof (Section 11.1 [2]). Several proofs 12 of the standardisation theorem can be found in <ref> [2, 20] </ref>. Our proof of the standardisation bears some resemblance to the ones due to Klop, shifting the leftmost contracted fi-redex to the front of fi-reduction sequence. We adopted a different strategy to prove the termination of the process. <p> This leads to a proof technique which separates developments from other fi-reductions. This technique also works smoothly with the conservation theorem and the normalisation theorem. Parallel fi-reductions are complete developments. Therefore, it is not surprising that the work in <ref> [20] </ref> can also be done accordingly in our setting. On the other hand, Lemma 12, Lemma 21 and Lemma 23 can clearly be proven using Takahashi's method if we replace standard developments with parallel fi-reductions in their formulations. This can be described as: separating parallel fi-reductions from fi-reductions.
Reference: [21] <author> C.P. </author> <title> Wadsworth (1976), The relation between computational and denotational properties for Scott's D 1 -models of -calculus, </title> <journal> SIAM Journal of Computing, </journal> <volume> 5(3) </volume> <pages> 488-521. </pages>
Reference-contexts: Labelling fi-redexes is one approach to handling such an issue. Explicit labelling is done through some labelled -calculi and implicit labelling is through the notion of residuals of fi-redexes. A labelled -calculus is introduced in [11] and <ref> [21] </ref> as a tool for examining the -models D 1 and P !. Also a more general labelled -calculus is considered in [13], where the notion of strongly equivalent fi-reductions is presented.
Reference: [22] <author> P.H. </author> <title> Welch (1975), Continuous semantics and inside out reductions, </title> <booktitle> Proceedings of the Symposium held in Rome, Lecture Notes in Computer Science 37, edited by C. Bohm, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. 122-146. </pages>
Reference: [23] <author> H. </author> <title> Xi (1996), Upper bounds for standardisations and an application, </title> <type> Technical Report 96-189, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA. </institution>
Reference-contexts: length of a longest fi-reduction sequence from M , if M is a I-term; with the help of some translation, we can thus give a bound for (M ) based on jM j for all simply typed -terms M ; a detailed realisation of this idea can be found in <ref> [23] </ref>. For those who know the strong equivalence relation ~ = on fi-reductions in [2], originally due to Berry and Levy, it can be verified that ~ = std 1 () for all fi-reduction sequences .
Reference: [24] <author> H. </author> <title> Xi (1996), An induction measure for -terms and its applications, </title> <type> Technical Report 96-192, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA. </institution>
Reference: [25] <author> H. </author> <title> Xi (1996), Evaluation under -abstraction, </title> <type> Technical Report, </type> <institution> Department of Mathematical Sciences, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA. </institution> <month> 14 </month>
Reference-contexts: This can be described as: separating parallel fi-reductions from fi-reductions. Our technique can be applied to the call-by-value -calculus v , simplifying many proofs in [17]. A -calculus v hd is proposed in <ref> [25] </ref>, aiming at providing theoretical background for doing evaluations under -abstraction in functional programming languages. The notion of separating developments plays a key role in proving several fundamental theorems for v hd . 8.
References-found: 25

