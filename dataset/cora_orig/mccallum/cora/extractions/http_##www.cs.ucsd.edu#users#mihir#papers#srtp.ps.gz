URL: http://www.cs.ucsd.edu/users/mihir/papers/srtp.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/srtp.html
Root-URL: http://www.cs.ucsd.edu
Email: e-mail: basturk@watson.ibm.com.  e-mail: mihir@cs.ucsd.edu.  email: cschow@watson.ibm.com.  email: guerin@watson.ibm.com.  
Title: Secure Transport Protocols for High-Speed Networks  
Author: Erol Basturk Mihir Bellare Chee-Seng Chow Roch Gu erin 
Address: P.O. Box 704, Yorktown Heights, NY 10598, USA.  San Diego, 9500 Gilman Drive, La Jolla, CA 92093.  P.O. Box 704, Yorktown Heights, NY 10598, USA.  P.O. Box 704, Yorktown Heights, NY 10598, USA.  
Affiliation: IBM T.J. Watson Research Center,  Department of Computer Science Engineering, Mail Code 0114, University of California at  IBM T.J. Watson Research Center,  IBM T.J. Watson Research Center,  
Date: March 1994  
Abstract: Appears as IBM Research Report RC 19981, March 1994. Abstract We argue that the increasingly widespread use of networks is leading to new security concerns such as secure delivery which are most naturally associated with the transport level and best addressed by the design of secure transport protocols. We present general methods for such a design which are directed at optimizing performance on a high speed network. Our work reflects the experience gained in designing and implementing a particular secure transport protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare and P. Rogaway. </author> <title> Entity authentication and key distribution. </title> <booktitle> Advances in Cryptology - Crypto'93 Proceedings. </booktitle>
Reference-contexts: Potentially we thus have six options: three kinds of authentication, and either timestamps or nonces in each case. When one examines the basic flow structure in each case, however (cf. <ref> [1] </ref>) it is easy to eliminate two of them. 4 This leaves the following options. (1) Initiator authentication with time stamp, one pass. Initiator authenticates himself to respon der in a single flow. Useful for secure datagrams. (2) Responder authentication with nonces, two pass. Responder authenticates himself to initiator. <p> The above protocols are combined. The initiator authenticates himself with a timestamped flow while simultaneously issuing a challenge, and the responder answers. (4) Mutual authentication with nonces, three passes. Each party authenticates the other with nonces. Three flows. Our protocols are inspired by the AKE protocols of <ref> [1] </ref> but have been modified to increase efficiency. We briefly review the performance considerations which motivated these modifications, and identify the resulting design guidelines. A first step towards minimizing the overhead imposed by security on connection setup is to embed session key distribution in the first authentication flow.
Reference: [2] <author> O. Goldreich, S. Goldwasser and S. Micali. </author> <title> How To Construct Random Functions. </title> <journal> Journal of the Association for Computing Machinery 33(4), </journal> <month> 792-807 (October </month> <year> 1986). </year>
Reference: [3] <author> R. Molva, G. Tsudik, E. Van Herreweghen and S. Zatti. </author> <title> Kryptoknight authentication and key distribution system. </title> <address> ESORICS 92, Toulouse, France, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Application level security. Application level security features are easily (and usually) provided by application level security. Here the sender applies appropriate cryptographic functions to his data before passing it to the transport for conveyance. This is the approach of Kerberos [5] and KryptoKnight <ref> [3] </ref>. Integrity is usually guaranteed by signing the data before passing it to the 1 How they come into possession of such a key is not our concern here. Rather, the problem is how to use the key to communicate securely. 2 For simplicity we stick to this symmetric case.
Reference: [4] <author> R. M. Sanders, A.C. Weaver. </author> <title> The Xpress Transfer Protocol (XTP): A Tutorial. </title> <journal> Computer Communication Review (USA) Vol. </journal> <volume> 20, No. 5, </volume> <month> Oct. </month> <year> 1990, </year> <pages> pp 67-80. </pages>
Reference-contexts: It even has security properties lacking in CBC-DES. 3 Implementation Overview In this last section we briefly outline the structure of our implementation of a secure transport protocol based on a version of an existing, high-speed optimistic transport protocol similar to XTP <ref> [6, 4] </ref>. The implementation is in C and has been developed on an RS6000 workstation. All the features introduced in the previous sections (authentication, confidentiality, integrity, choice of the level of security) have been incorporated and tested.
Reference: [5] <author> J. Steiner, C. Neuman, J. Schiller. </author> <title> Kerberos: An Authentication Service for Open Network Systems. </title> <booktitle> USENIX Winter Conference, </booktitle> <address> Dallas, Texas, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Application level security. Application level security features are easily (and usually) provided by application level security. Here the sender applies appropriate cryptographic functions to his data before passing it to the transport for conveyance. This is the approach of Kerberos <ref> [5] </ref> and KryptoKnight [3]. Integrity is usually guaranteed by signing the data before passing it to the 1 How they come into possession of such a key is not our concern here.
Reference: [6] <author> A.C. Weaver. </author> <title> The Xpress Transfer Protocol. </title> <booktitle> Proceedings International Workshop on Advanced Communications and Applications for High Speed Networks , Munich, </booktitle> <address> Germany 16-19 March 1992. </address>
Reference-contexts: It even has security properties lacking in CBC-DES. 3 Implementation Overview In this last section we briefly outline the structure of our implementation of a secure transport protocol based on a version of an existing, high-speed optimistic transport protocol similar to XTP <ref> [6, 4] </ref>. The implementation is in C and has been developed on an RS6000 workstation. All the features introduced in the previous sections (authentication, confidentiality, integrity, choice of the level of security) have been incorporated and tested.
References-found: 6

