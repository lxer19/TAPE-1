URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/chouiery-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/
Root-URL: http://www.cs.rutgers.edu
Email: Email: [choueiryjsamjiwasakijloeserjnellerjrsejfikes]@ksl.stanford.edu  
Title: Thoughts on a Practical Theory of Reformulation for Reasoning about Physical Systems  
Author: Berthe Y. Choueiry, Sheila McIlraith Yumi Iwasaki Tony Loeser, Todd Neller, Robert S. Engelmore, and Richard Fikes 
Address: Stanford, CA 94305-9020  
Affiliation: Knowledge Systems Laboratory Stanford University  
Abstract: In this paper, we propose a practical framework for characterizing, evaluating and selecting reformulation techniques for reasoning about physical systems, with the long-term goal of automating the selection and application of these techniques. We view reformulation as a mapping from one encoding of a problem to another. A problem-solving task is in turn accomplished by the application of a sequence of reformulations to an initial problem encoding to produce a final encoding that addresses the task. Our framework provides the terminology to specify the conditions under which a particular reformulation technique is applicable, the cost associated with performing the reformulation, and the effects of the reformulation with respect to the problem encoding. As such it provides the vocabulary to characterize the selection of a sequence of reformulation techniques as a planning problem. Our framework is sufficiently flexible to accommodate previously proposed properties and metrics for reformulation. We have used the framework to characterize a variety of reformulation techniques, three of which are presented in this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> Daniel J. Clancy and Benjamin Kuipers. </author> <title> Static and Dynamic Abstraction Solves the Problem of Chatter in Qualitative Simulation. </title> <booktitle> In Proc. of AAAI-97, </booktitle> <pages> pages 118-125, </pages> <address> Providence, Rhode Island, </address> <year> 1997. </year>
Reference-contexts: A solution reformulation process may subsequently be performed to enhance cognitive insight. Examples of such reformulations are summarization [ 14 ] and explanation by generation of active documentation [ 9 ] . Solution reformulation may also be applied for engine-driven problem re-encoding. For example, Clancy and Kuipers <ref> [ 1 ] </ref> interleave a QSIM simulation with the aggregation of partial solutions corresponding to chatter in a qualitative simulation. In so doing, they significantly improve the overall performance of QSIM on their problem. <p> Moreover, a problem-solving task may loop any number of times through one or more of the individual processes. In the example of solution reformulation reported above, Clancy and Kuipers <ref> [ 1 ] </ref> loop over the solution building and solution reformulation processes. During the simulation of the behavior of a dynamical system, the operating conditions may change as a result of system dynamics. The model used for simulation must then be updated to comply with the new assumptions.
Reference: [ 2 ] <author> Roberto Cremonini, Kim Marriott, and Harald Stndergaard. </author> <title> A General Theory of Abstraction. </title> <booktitle> In Proceedings of the 4th Australian Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 121-134, </pages> <address> Australia, </address> <year> 1990. </year>
Reference-contexts: Other examples of effects on the formulation are the following properties theorem increasing/decreasing/constant, upward/downward solution [ 21 ] , upward/downward-failure [ 24 ] , ordered monotonicity [ 10 ] , and safety <ref> [ 2 ] </ref> . Similarly to the case of Evals prob (P i ), some elements of Diffs prob (P i ; P j ) are dedicated to assessing the change of some features of the result. <p> Giunchiglia and Walsh [ 8 ] introduce a general theory of abstraction. They introduce a general characterization of reformulation and its properties. Both Cremonini et al. <ref> [ 2 ] </ref> and Nayak and Levy [ 17 ] explore abstraction theories that are restricted to logical systems and to abstraction techniques that preserve consistency and correctness of proofs.
Reference: [ 3 ] <author> Ernest Davis. </author> <title> Approximation and Abstraction in Solid Object Kinematics. </title> <type> Technical Report TR706, </type> <address> New York University, New York, NY, </address> <year> 1995. </year>
Reference-contexts: Finally, an important feature of our framework is that it allows one to explicitly state the goal of problem solving as well as preferences among alternative strategies, which enables the selection and evaluation of reformulation techniques with respect to this goal. This aspect, although it was previously acknowledged ( <ref> [ 24; 3 ] </ref> , see also Section 5), has not to date been resolved. 5 Related work Various theories of reformulation including abstraction and approximation have been proposed in the literature. Some of these theories provide an encompassing high-level characterization. <p> In [ 24 ] , Weld and Addanki take a task-driven approach to reformulation and adopt Tenenberg's vocabulary [ 21 ] for describing the effects of the reformulation on the formulation, only. In <ref> [ 3 ] </ref> , Davis studies approximation and abstraction and focuses on the practical application of reformulation techniques applied to reasoning about solid object kinematics. Davis too stresses that the selection of the reformulation technique must be task-driven and in order to satisfy some well-defined criteria.
Reference: [ 4 ] <author> Brian Falkenhainer and Kenneth D. Forbus. </author> <title> Compositional Modeling: Finding the Right Model for the Job. </title> <journal> Artificial Intelligence, </journal> <volume> 51 </volume> <pages> 95-143, </pages> <year> 1991. </year>
Reference-contexts: A typical example of a model building process is compositional modeling as in <ref> [ 4; 15; 12 ] </ref> and in the modeling algorithm of TRIPEL [ 19 ] . This process can be followed by a model reformulation process.
Reference: [ 5 ] <author> Adam Farquhar. </author> <title> A Qualitative Physics Compiler. </title> <booktitle> In Proc. of AAAI-94, </booktitle> <pages> pages 1168-1174, </pages> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: Equation processing. Equation building produces an equation model 1 either directly from a task description or through reformulation of a model into a set of mathematical equations describing the behavior of the system. For example, the Qualitative Physics Compiler <ref> [ 5 ] </ref> converts a model expressed in QP Theory [ 6 ] into a set of qualitative differential 1 We distinguish between non-equational models and equational ones in order to capture the various possibilities for manipulating models reported to date in the literature for reasoning about physical systems. equations.
Reference: [ 6 ] <author> Kenneth D. Forbus. </author> <title> Qualitatite Process Theory. </title> <journal> Artificial Intelligence, </journal> <volume> 24 </volume> <pages> 85-168, </pages> <year> 1984. </year>
Reference-contexts: Equation processing. Equation building produces an equation model 1 either directly from a task description or through reformulation of a model into a set of mathematical equations describing the behavior of the system. For example, the Qualitative Physics Compiler [ 5 ] converts a model expressed in QP Theory <ref> [ 6 ] </ref> into a set of qualitative differential 1 We distinguish between non-equational models and equational ones in order to capture the various possibilities for manipulating models reported to date in the literature for reasoning about physical systems. equations. An equation reformulation process may then be carried out.
Reference: [ 7 ] <author> Kenneth D. Forbus. </author> <title> The Qualitative Process Engine. </title> <editor> In Daniel S. Weld and Johan de Kleer, editors, </editor> <booktitle> Readings in Qualitative Reasoning about Physical Systems, </booktitle> <pages> pages 220-235. </pages> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Solution processing. The solution building process is often a problem-solving engine acting on either the model (e.g., QPE <ref> [ 7 ] </ref> ) or the equations (e.g., QSIM [ 11 ] and Mathlab r ) to produce one or more solutions to the query. A solution reformulation process may subsequently be performed to enhance cognitive insight.
Reference: [ 8 ] <author> Fausto Giunchiglia and Toby Walsh. </author> <title> A Theory of Abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 323-389, </pages> <year> 1992. </year>
Reference-contexts: According to this figure, the content of the initial input, 2 In this paper, we do not address reformulations that apply to the engine itself, as proposed in <ref> [ 8 ] </ref> , because such reformulations do not seem to arise in the class of problems we address. i.e. the task description, is gradually modified by a combination of any number of processes culminating in an answer to the query. <p> For instance, Struss [ 20 ] considers reformulations procedures, called representational transformations, that are surjective, and not injective; Giunchiglia and Walsh <ref> [ 8 ] </ref> study procedures that are computable surjective total functions between two formal systems. <p> Others restrict their scope to some specific aspect (e.g., cost or faithfulness of results). These theories proved to be essential to our understanding of reformulation, but we found them to be of limited practical use in automating the selection and application of reformulation techniques. Giunchiglia and Walsh <ref> [ 8 ] </ref> introduce a general theory of abstraction. They introduce a general characterization of reformulation and its properties.
Reference: [ 9 ] <author> Tom R. Gruber and Pierre O. Gautier. </author> <title> Machine-generated Explanations of Engineering Models: a Compositional Modeling Approach. </title> <booktitle> In Proc. of the 13 th IJCAI, </booktitle> <pages> pages 1502-1508, </pages> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: A solution reformulation process may subsequently be performed to enhance cognitive insight. Examples of such reformulations are summarization [ 14 ] and explanation by generation of active documentation <ref> [ 9 ] </ref> . Solution reformulation may also be applied for engine-driven problem re-encoding. For example, Clancy and Kuipers [ 1 ] interleave a QSIM simulation with the aggregation of partial solutions corresponding to chatter in a qualitative simulation.
Reference: [ 10 ] <author> Craig A. Knoblock, Josh D. Tenenberg, and Qiang Yang. </author> <title> Characterizing Abstraction Hierarchies for Planning. </title> <booktitle> In Proc. of AAAI-91, </booktitle> <pages> pages 692-697, </pages> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: Other examples of effects on the formulation are the following properties theorem increasing/decreasing/constant, upward/downward solution [ 21 ] , upward/downward-failure [ 24 ] , ordered monotonicity <ref> [ 10 ] </ref> , and safety [ 2 ] . Similarly to the case of Evals prob (P i ), some elements of Diffs prob (P i ; P j ) are dedicated to assessing the change of some features of the result.
Reference: [ 11 ] <author> Benjamin Kuipers. </author> <title> Qualitative Simulation. </title> <journal> Artificial Intelligence, </journal> <volume> 29 </volume> <pages> 289-338, </pages> <year> 1986. </year>
Reference-contexts: Solution processing. The solution building process is often a problem-solving engine acting on either the model (e.g., QPE [ 7 ] ) or the equations (e.g., QSIM <ref> [ 11 ] </ref> and Mathlab r ) to produce one or more solutions to the query. A solution reformulation process may subsequently be performed to enhance cognitive insight. Examples of such reformulations are summarization [ 14 ] and explanation by generation of active documentation [ 9 ] . <p> This reformulation is a typical instance of solution reformulation. Given the user's query and the complete behavior tree of a simulation, generated by QSIM <ref> [ 11 ] </ref> , the reformulation procedure summarizes the behavior of the system by generating a behavior graph that retains only those aspects of the behavior tree relevant to the query.
Reference: [ 12 ] <author> Alon Y. Levy, Yumi Iwasaki, and Richard Fikes. </author> <title> Automated Model Selection for Simulation Based on Relevance Reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 96 </volume> <pages> 351-394, </pages> <year> 1997. </year>
Reference-contexts: A typical example of a model building process is compositional modeling as in <ref> [ 4; 15; 12 ] </ref> and in the modeling algorithm of TRIPEL [ 19 ] . This process can be followed by a model reformulation process.
Reference: [ 13 ] <author> David G. Luenberger. </author> <title> Introduction to Dynamic Systems : theory, models, and applications, chapter Analysis of Nonlinear Systems. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The main rationale for exploiting this strategy is that "for small deviations from the equilibrium point, the performance of the system is approximately governed by the linear terms. These terms dominate and thus determine stability-provided that the linear terms do not vanish" <ref> [ 13 ] </ref> . If this is not the case, a separate analysis is required. In general, no problem-solver reformulation is available to directly determine the stability of nonlinear systems 4 . Hence, the motivation for performing this sequence of reformulations is engine-driven problem re-encoding.
Reference: [ 14 ] <author> Richard S. Mallory, Bruce W. Porter, and Ben-jamin J. Kuipers. </author> <title> Comprehending Complex Behavior Graphs through Abstractions. </title> <booktitle> In Tenth International Workshop on Qualitative Physics. AAAI Technical Report WS-96-01, </booktitle> <pages> pages 137-146, </pages> <address> Fallen Leaf Lake, CA, </address> <year> 1996. </year>
Reference-contexts: A solution reformulation process may subsequently be performed to enhance cognitive insight. Examples of such reformulations are summarization <ref> [ 14 ] </ref> and explanation by generation of active documentation [ 9 ] . Solution reformulation may also be applied for engine-driven problem re-encoding. For example, Clancy and Kuipers [ 1 ] interleave a QSIM simulation with the aggregation of partial solutions corresponding to chatter in a qualitative simulation. <p> Evals reform (R b ): The solution building procedure computes the eigenvalues of a system matrix and it is evaluated with respect to complexity, Complexity (Proc b ; P 2 ), which is O (n 3 ). 4.3 Solution reformulation: Behavior abstraction for explanation In <ref> [ 14 ] </ref> , Mallory et al. propose to summarize the results of the qualitative simulation of a physical system in order to help users recognize "basic patterns of behavior." Their goal is to support human understanding of the solution space. This reformulation is a typical instance of solution reformulation.
Reference: [ 15 ] <author> P. Pandurang Nayak. </author> <title> Causal approximations. </title> <journal> Artificial Intelligence, </journal> <volume> 70 </volume> <pages> 277-334, </pages> <year> 1994. </year>
Reference-contexts: A typical example of a model building process is compositional modeling as in <ref> [ 4; 15; 12 ] </ref> and in the modeling algorithm of TRIPEL [ 19 ] . This process can be followed by a model reformulation process.
Reference: [ 16 ] <author> P. Pandurang Nayak and Leo Joskowicz. </author> <title> Efficient Compositional Modeling for Generating Causal Explanations. </title> <journal> Artificial Intelligence, </journal> <volume> 83 </volume> <pages> 193-227, </pages> <year> 1996. </year>
Reference-contexts: This process can be followed by a model reformulation process. Model reformulation may involve structural consolidation [ 24 ] , time scale selection [ 19 ] , or simplification <ref> [ 16 ] </ref> or expansion of a model through addition, deletion, or replacement of a de scription of components or phenomena. Equation processing. <p> Moreover, the authors do not provide a comparison of their techniques with other procedures, possibly because none exists. Thus, we will not discuss comparators of problems and strategies in the context of these examples. 4.1 Model reformulation: Simplification Nayak and Joskowicz <ref> [ 16 ] </ref> propose a model reformulation technique that simplifies a compositional model of a device, while maintaining its ability to provide a causal explanation of the expected behavior of the device.
Reference: [ 17 ] <author> P. Pandurang Nayak and Alon Y. Levy. </author> <title> A Semantic Theory of Abstractions. </title> <booktitle> In Proc. of the 14 th IJCAI, </booktitle> <pages> pages 196-203, </pages> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: Giunchiglia and Walsh [ 8 ] introduce a general theory of abstraction. They introduce a general characterization of reformulation and its properties. Both Cremonini et al. [ 2 ] and Nayak and Levy <ref> [ 17 ] </ref> explore abstraction theories that are restricted to logical systems and to abstraction techniques that preserve consistency and correctness of proofs. None of these theories make extensive analysis of complexity issues, nor do they provide the terminology for quantitatively evaluating the effects of reformulation.
Reference: [ 18 ] <author> Christos H. Papadimitriou. </author> <title> Computational Complexity, </title> <booktitle> chapter Approximation and Complexity, </booktitle> <pages> pages 299-328. </pages> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: None of these theories make extensive analysis of complexity issues, nor do they provide the terminology for quantitatively evaluating the effects of reformulation. In contrast, the body of research on approximations in the computational complexity community <ref> [ 18 ] </ref> , provides rigorous evaluation criteria with respect to cost while neglecting to address issues of expressiveness of representations, which are fundamental in artificial intelligence.
Reference: [ 19 ] <author> Jeff Rickel and Bruce Porter. </author> <title> Automated Modeling for Answering Prediction Questions: Selecting the Time Scale and System Boundary. </title> <booktitle> In Proc. of AAAI-94, </booktitle> <pages> pages 1191-1198, </pages> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: A typical example of a model building process is compositional modeling as in [ 4; 15; 12 ] and in the modeling algorithm of TRIPEL <ref> [ 19 ] </ref> . This process can be followed by a model reformulation process. Model reformulation may involve structural consolidation [ 24 ] , time scale selection [ 19 ] , or simplification [ 16 ] or expansion of a model through addition, deletion, or replacement of a de scription of <p> example of a model building process is compositional modeling as in [ 4; 15; 12 ] and in the modeling algorithm of TRIPEL <ref> [ 19 ] </ref> . This process can be followed by a model reformulation process. Model reformulation may involve structural consolidation [ 24 ] , time scale selection [ 19 ] , or simplification [ 16 ] or expansion of a model through addition, deletion, or replacement of a de scription of components or phenomena. Equation processing.
Reference: [ 20 ] <author> Peter Struss. </author> <title> On Temporal Abstraction in Qualitative Reasoning (A Preliminary report). </title> <booktitle> In Proceedings of the Seventh International Workshop on Qualitative Reasoning about Physical Systems, </booktitle> <pages> pages 219-227, </pages> <address> Orcas Island, Wa, </address> <year> 1993. </year>
Reference-contexts: There are, thus, two redundant ways of expressing this change, either as Diffs prob (P i ; P j ) or as Effects prob (R k ; P i ), which simply captures the effects of applying the reformulation R k to P i . For instance, Struss <ref> [ 20 ] </ref> considers reformulations procedures, called representational transformations, that are surjective, and not injective; Giunchiglia and Walsh [ 8 ] study procedures that are computable surjective total functions between two formal systems.
Reference: [ 21 ] <author> Josh D. Tenenberg. </author> <title> Inheritance in Automated Planning. </title> <booktitle> In First International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pages 475-485, </pages> <address> Toronto, Canada, </address> <year> 1989. </year>
Reference-contexts: For example, if the original formulation is too complex for a user to understand, reformulation may produce a description better suited to human understanding. Other examples of effects on the formulation are the following properties theorem increasing/decreasing/constant, upward/downward solution <ref> [ 21 ] </ref> , upward/downward-failure [ 24 ] , ordered monotonicity [ 10 ] , and safety [ 2 ] . <p> In [ 24 ] , Weld and Addanki take a task-driven approach to reformulation and adopt Tenenberg's vocabulary <ref> [ 21 ] </ref> for describing the effects of the reformulation on the formulation, only. In [ 3 ] , Davis studies approximation and abstraction and focuses on the practical application of reformulation techniques applied to reasoning about solid object kinematics.
Reference: [ 22 ] <author> Daniel S. Weld. </author> <title> Exaggeration. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 311-368, </pages> <year> 1990. </year>
Reference-contexts: Other evaluators of the formulation that appear in the literature include scope [ 23 ] (which is the range of phenomena that it can describe), expressiveness, syntactic form, simplicity, generality, relevance, absence of irrelevant information, and language restriction to familiar terms <ref> [ 22 ] </ref> . It is important to define an evaluator in sufficient detail. In the case of simplicity, for example, we must define the specifics of how it is measured (e.g., the number of variables/equations in a equation set, or the number of components in a model).
Reference: [ 23 ] <author> Daniel S. Weld. </author> <title> Reasoning about Model Accuracy. </title> <journal> Artificial Intelligence, </journal> <volume> 56 </volume> <pages> 255-300, </pages> <year> 1992. </year>
Reference-contexts: Other evaluators of the formulation that appear in the literature include scope <ref> [ 23 ] </ref> (which is the range of phenomena that it can describe), expressiveness, syntactic form, simplicity, generality, relevance, absence of irrelevant information, and language restriction to familiar terms [ 22 ] . It is important to define an evaluator in sufficient detail.
Reference: [ 24 ] <author> Daniel S. Weld and Sanjaya Addanki. </author> <title> Task-Driven Model Abstraction. </title> <booktitle> In 4th International Workshop on Qualitative Physics, </booktitle> <pages> pages 16-30, </pages> <address> Lugano, Switzerland, </address> <year> 1990. </year>
Reference-contexts: A typical example of a model building process is compositional modeling as in [ 4; 15; 12 ] and in the modeling algorithm of TRIPEL [ 19 ] . This process can be followed by a model reformulation process. Model reformulation may involve structural consolidation <ref> [ 24 ] </ref> , time scale selection [ 19 ] , or simplification [ 16 ] or expansion of a model through addition, deletion, or replacement of a de scription of components or phenomena. Equation processing. <p> For example, if the original formulation is too complex for a user to understand, reformulation may produce a description better suited to human understanding. Other examples of effects on the formulation are the following properties theorem increasing/decreasing/constant, upward/downward solution [ 21 ] , upward/downward-failure <ref> [ 24 ] </ref> , ordered monotonicity [ 10 ] , and safety [ 2 ] . Similarly to the case of Evals prob (P i ), some elements of Diffs prob (P i ; P j ) are dedicated to assessing the change of some features of the result. <p> Finally, an important feature of our framework is that it allows one to explicitly state the goal of problem solving as well as preferences among alternative strategies, which enables the selection and evaluation of reformulation techniques with respect to this goal. This aspect, although it was previously acknowledged ( <ref> [ 24; 3 ] </ref> , see also Section 5), has not to date been resolved. 5 Related work Various theories of reformulation including abstraction and approximation have been proposed in the literature. Some of these theories provide an encompassing high-level characterization. <p> In contrast, the body of research on approximations in the computational complexity community [ 18 ] , provides rigorous evaluation criteria with respect to cost while neglecting to address issues of expressiveness of representations, which are fundamental in artificial intelligence. In <ref> [ 24 ] </ref> , Weld and Addanki take a task-driven approach to reformulation and adopt Tenenberg's vocabulary [ 21 ] for describing the effects of the reformulation on the formulation, only.
References-found: 24

