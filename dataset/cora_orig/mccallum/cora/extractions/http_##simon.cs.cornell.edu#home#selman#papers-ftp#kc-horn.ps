URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/kc-horn.ps
Refering-URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/index.html
Root-URL: 
Email: fselman, kautzg@research.att.com  
Title: Knowledge Compilation Using Horn Approximations  
Author: Bart Selman and Henry Kautz 
Address: Murray Hill, NJ 07974  
Affiliation: AI Principles Research Department AT&T Bell Laboratories  
Abstract: We present a new approach to developing fast and efficient knowledge representation systems. Previous approaches to the problem of tractable inference have used restricted languages or incomplete inference mechanisms | problems include lack of expressive power, lack of inferential power, and/or lack of a formal characterization of what can and cannot be inferred. To overcome these disadvantages, we introduce a knowledge compilation method. We allow the user to enter statements in a general, unrestricted representation language, which the system compiles into a restricted language that allows for efficient inference. Since an exact translation into a tractable form is often impossible, the system searches for the best approximation of the original information. We will describe how the approximation can be used to speed up inference without giving up correctness or completeness. We illustrate our method by studying the approximation of logical theories by Horn theories. Following the formal definition of Horn approximation, we present "anytime" algorithms for generating such approximations. We subsequently discuss extensions to other useful classes of approximations. This paper appears in the Proceedings of the Ninth National Conference on Artificial Intelligence (AAAI-91), Anaheim, CA, July 1991. 
Abstract-found: 1
Intro-found: 1
Reference: [ Amarel, 1968 ] <author> Saul Amarel. </author> <title> On representations of problems of reasoning about actions. </title> <editor> In Michie, editor, </editor> <booktitle> Machine Intelligence 3, </booktitle> <pages> pages 131-171. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1968. </year>
Reference-contexts: In particular, one may avoid some of the "accidental truths" that often hold in a single model or diagram. The work in AI on problem solving with abstraction <ref> [ Amarel, 1968; Sacer-doti, 1974; Plaisted, 1981 ] </ref> is less directly related to the knowledge-compilation approach. In the work on abstraction one maps a theory to a smaller theory, generates proofs in the smaller theory, and then uses the proofs to guide generation of proofs in the original theory.
Reference: [ Boddy and Dean, 1988 ] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time dependent planning problems. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1988. </year>
Reference-contexts: So, instead of waiting for the best Horn bounds, it would be desirable to employ procedures that could output lower- and upper-bounds as intermediate results, generating better and better bounds over time. That is, the approximation algorithms should be "anytime" procedures <ref> [ Boddy and Dean, 1988 ] </ref> . The algorithms presented in this paper have this property. We discuss a method for generating the GLB first.
Reference: [ Borgida and Etherington, 1989 ] <author> Alex Borgida and David W. Etherington. </author> <title> Hierarchical knowledge bases and efficient disjunctive reasoning. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 33-43, </pages> <address> Toronto, Ontario, 1989. </address> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: [ Cook, 1971 ] <author> S. A. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference-contexts: CNF notation and clausal notation are used interchangeably. For example, we may write (p ^ :q) ^ r instead of ffp; :qg; frgg, and vice versa. In general, determining whether a given CNF formula (the query) follows from a set of formulas in a knowledge base is intractable <ref> [ Cook, 1971 ] </ref> . However, when the knowledge base contains only Horn clauses the problem can be solved in time linear in the length of the knowledge base combined with the query [ Dowling and Gallier, 1984 ] .
Reference: [ Dowling and Gallier, 1984 ] <author> William F. Dowling and Jean H. Gallier. </author> <title> Linear time algorithms for testing the satisfiability of propositional horn formula. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 267-284, </pages> <year> 1984. </year> <month> 13 </month>
Reference-contexts: However, when the knowledge base contains only Horn clauses the problem can be solved in time linear in the length of the knowledge base combined with the query <ref> [ Dowling and Gallier, 1984 ] </ref> . So, a useful kind of knowledge compilation would be the following: Given a set of arbitrary clauses, compute a logically equivalent set of Horn clauses, and base subsequent inference on that set.
Reference: [ Doyle and Patil, 1991 ] <author> J. Doyle and R. Patil. </author> <title> Two theses of knowledge rep-resentation: Language restrictions, taxonomic classification, and the utility of representation services. </title> <journal> Artificial Intelligence, </journal> <volume> 48(3) </volume> <pages> 261-298, </pages> <year> 1991. </year>
Reference-contexts: In general, in order to obtain a compu-tationally efficient representation system one either restricts the expressive power of the knowledge representation language or one uses an incomplete inference mechanism. In the first approach, the representation language is often too limited for practical applications <ref> [ Doyle and Patil, 1991 ] </ref> . The second approach involves either resource-bounded reasoning or the introduction of a non-traditional semantics. In resource-bounded reasoning, inference is limited by bounding the number of inference steps performed by the inference procedure.
Reference: [ Frisch, 1985 ] <author> Alan M. Frisch. </author> <title> Using model theory to specify AI programs. </title> <booktitle> In Proceedings of IJCAI-85, </booktitle> <pages> pages 148-154, </pages> <year> 1985. </year>
Reference-contexts: Moreover, no information is provided if a proof cannot be found in the time bound. (But see [ Horvitz et al., 1989 ] for an example of probabilistic inference, where confidence in the results increases with the amount of computation.) Accounts of limited inference based on non-traditional semantics <ref> [ Frisch, 1985; Patel-Schneider, 1986 ] </ref> often provide only a very weak kind of inference. For example, in the four-valued semantics approach of Patel-Schneider, given the statements p and p q, one cannot infer q.
Reference: [ Gelernter, 1959 ] <author> H. Gelernter. </author> <title> Realization of a geometry theorem-proving machine. </title> <booktitle> In Proceedings of the International Conference on Information Processing, </booktitle> <pages> pages 273-282, </pages> <address> Paris, </address> <year> 1959. </year> <note> UNESCO House. (Reprinted in Computers and Thought, </note> <editor> E. Feigenbaum and J. Feldman (Eds.), </editor> <publisher> McGraw-Hill, NY, </publisher> <pages> pages 134-152, </pages> <year> 1963.). </year>
Reference: [ Horvitz et al., 1989 ] <author> Eric J. Horvitz, Gregory F. Cooper, and David E. Heck-erman. </author> <title> Reflection and action under scarce resources: Theoretical principles and empirical study. </title> <booktitle> In Proceedings of IJCAI-89, </booktitle> <pages> page 1121, </pages> <address> Detroit, MI, May 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: It therefore becomes difficult to characterize exactly what can and cannot be inferred, that is, the approach lacks a "real" semantics (one that does not simply mimic the proof theory). Moreover, no information is provided if a proof cannot be found in the time bound. (But see <ref> [ Horvitz et al., 1989 ] </ref> for an example of probabilistic inference, where confidence in the results increases with the amount of computation.) Accounts of limited inference based on non-traditional semantics [ Frisch, 1985; Patel-Schneider, 1986 ] often provide only a very weak kind of inference.
Reference: [ Kautz and Selman, 1991 ] <author> Henry Kautz and Bart Selman. </author> <title> A general framework for knowledge compilation, </title> <note> 1991. Submitted for publication. </note>
Reference-contexts: One open technical question is whether first-order clausal theories always have a greatest Horn lower-bound. (Note: they do; see [ Selman and Kautz, 1991 ] .) We are also investigating the general classes of approximations that can be generated using techniques based on those described in this paper <ref> [ Kautz and Selman, 1991 ] </ref> .
Reference: [ Lee, 1967 ] <author> R. C. T. Lee. </author> <title> A Completeness Theorem and a Computer Program for Finding Theorems Derivable From Given Axioms. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1967. </year>
Reference-contexts: Lemma 1 Let H be a Horn theory and C a clause that is not a tautology. If H j= C then there is a clause C H that is a Horn-strengthening of C such that H j= C H . Proof: By the subsumption theorem <ref> [ Lee, 1967 ] </ref> , there is a clause C 0 that follows from H by resolution such that C 0 subsumes C. Because the resolvent of Horn clauses is Horn, C 0 is Horn, and thus is a Horn-strengthening of C.
Reference: [ Levesque and Brachman, 1985 ] <author> H.J. Levesque and R.J. Brachman. </author> <title> A fundamental tradeoff in knowledge representation and reasoning (revised version). </title> <editor> In R.J. Brachman and H.J. Levesque, editors, </editor> <booktitle> Readings in Knowledge Representation, </booktitle> <pages> pages 41-70. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction The study of the computational properties of knowledge representation systems has revealed a direct trade-off between tractability and expressiveness <ref> [ Levesque and Brachman, 1985 ] </ref> . In general, in order to obtain a compu-tationally efficient representation system one either restricts the expressive power of the knowledge representation language or one uses an incomplete inference mechanism.
Reference: [ Patel-Schneider, 1986 ] <author> Peter F. Patel-Schneider. </author> <title> A four-valued semantics for frame-based description languages. </title> <booktitle> In Proceedings of AAAI-86, </booktitle> <pages> pages 344-348, </pages> <address> Philadelphia, PA, </address> <year> 1986. </year>
Reference-contexts: Moreover, no information is provided if a proof cannot be found in the time bound. (But see [ Horvitz et al., 1989 ] for an example of probabilistic inference, where confidence in the results increases with the amount of computation.) Accounts of limited inference based on non-traditional semantics <ref> [ Frisch, 1985; Patel-Schneider, 1986 ] </ref> often provide only a very weak kind of inference. For example, in the four-valued semantics approach of Patel-Schneider, given the statements p and p q, one cannot infer q.
Reference: [ Plaisted, 1981 ] <author> D. Plaisted. </author> <title> Theorem proving with abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 16:47, </volume> <year> 1981. </year>
Reference-contexts: In particular, one may avoid some of the "accidental truths" that often hold in a single model or diagram. The work in AI on problem solving with abstraction <ref> [ Amarel, 1968; Sacer-doti, 1974; Plaisted, 1981 ] </ref> is less directly related to the knowledge-compilation approach. In the work on abstraction one maps a theory to a smaller theory, generates proofs in the smaller theory, and then uses the proofs to guide generation of proofs in the original theory.
Reference: [ Sacerdoti, 1974 ] <author> Earl D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference: [ Selman and Kautz, 1991 ] <author> Bart Selman and Henry Kautz. </author> <title> Methods of knowledge compilation. </title> <note> In Preparation, 1991. 14 </note>
Reference-contexts: The LUB algorithm resolves the first and the third clause, obtaining the clause b. H becomes (:b _ c) ^ b, upon which the loop is exited and H is returned. The correctness proof of the LUB algorithm <ref> [ Selman and Kautz, 1991 ] </ref> is quite involved and we therefore do not include it here. As with the GLB, the algorithm is anytime: H improves over time. Finally, we briefly consider the size of the generated Horn approximations. <p> One open technical question is whether first-order clausal theories always have a greatest Horn lower-bound. (Note: they do; see <ref> [ Selman and Kautz, 1991 ] </ref> .) We are also investigating the general classes of approximations that can be generated using techniques based on those described in this paper [ Kautz and Selman, 1991 ] .
Reference: [ Selman, 1990 ] <author> Bart Selman. </author> <title> Tractable default reasoning. </title> <type> Ph.D. Thesis, </type> <institution> De--partment of Computer Science, University of Toronto, Toronto, </institution> <address> Ontario, </address> <year> 1990. </year>
Reference: [ Subramanian and Genesereth, 1987 ] <author> Devika Subramanian and Michael R. Genesereth. </author> <title> The relevance of irrelevance. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <volume> volume 1, </volume> <pages> page 416, </pages> <year> 1987. </year>
Reference-contexts: A simple but useful example of such a class is all clauses not containing a given set of predicates; the techniques can thus be used to "compile away" a set of "irrelevant" predicates <ref> [ Subramanian and Genesereth, 1987 ] </ref> . Another useful case is the class of binary clauses, since satisfiability can be determined in polynomial time. 6 Conclusions We introduced the notion of knowledge compilation. The basic idea is to compile knowledge from an intractable into a tractable form.
Reference: [ Tenenberg, 1988 ] <author> Josh D. Tenenberg. </author> <title> Abstraction in planning. </title> <type> Technical Report 250, </type> <institution> Computer Science Department, University of Rochester, Rochester, </institution> <address> NY, </address> <month> May </month> <year> 1988. </year> <month> 15 </month>
References-found: 19

