URL: http://www.cs.unc.edu/~molnar/Papers/Shadow.ps
Refering-URL: http://www.cs.unc.edu/~molnar/
Root-URL: http://www.cs.unc.edu
Title: Second-Depth Shadow Mapping  
Author: Yulan Wang and Steven Molnar 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Department of Computer Science University of North Carolina  
Abstract: Depth-map algorithms for rendering antialiased shadows are computationally efficient and accommodate a wide variety of primitives. They have two drawbacks, however, that make them impractical for everyday use: They require the user to specify a bias that must be optimized for each particular scene and view; and they generally require the use of large shadow maps frequently much larger than the final image that is to be rendered. This paper presents an improved depth-map shadow algorithm that does not require a bias for scenes composed of solids and produces accurate shadows with smaller depth maps. It consists of two novel changes to the basic depth-map algorithm. First, the depth map samples the depth values of surfaces that are second nearest the light source. Second, virtual samples are created on local tangent planes of surfaces that are visible from the camera's point of view to match real samples of the depth map. These two changes allow depth comparisons to be done accurately and without the need for a compensating bias value. They also allow the algorithm to produce superior results when using small depth maps. The new algorithm incorporates percentage-closer filtering to antialias shadow boundaries and can be accelerated using z - buffer hardware in the same manner as previous algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [Arvo89] <author> J. Arvo and D. Kirk, </author> <title> A Survey of Ray Tracing Acceleration Techniques, in An Introduction to Ray Tracing, ed. A.S. </title> <publisher> Glassner, Academic Press, </publisher> <address> San Diego, </address> <year> (1989), </year> <pages> 201-262. </pages>
Reference-contexts: Ray tracing algorithms [Whitted80] compute shadows naturally, but are computationally expensive. In order to produce anti - aliased shadows, multiple secondary rays must be traced. Although many ray tracing acceleration techniques have been published <ref> [Arvo89] </ref>, none of them yet offers interactive performance on substantial scenes, even running on large multiprocessors. Shadow volumes [Crow77, Bergeron86] and area subdivision algorithms [Atherton78] are restricted to polygonal data.
Reference: [Atherton78] <author> P. R. Atherton, K. Weiler and D. P. Greenberg, </author> <title> Polygon Shadow Generation, </title> <booktitle> Computer Graphics (SIGGRAPH '78 Proceedings) 12, 3 (1978), </booktitle> <pages> 275-281. </pages>
Reference-contexts: In order to produce anti - aliased shadows, multiple secondary rays must be traced. Although many ray tracing acceleration techniques have been published [Arvo89], none of them yet offers interactive performance on substantial scenes, even running on large multiprocessors. Shadow volumes [Crow77, Bergeron86] and area subdivision algorithms <ref> [Atherton78] </ref> are restricted to polygonal data. They also are inefficient for complex environments because the number of polygons to be rendered increases rapidly with the size of the scene.
Reference: [Bergeron86] <author> P. Bergeron, </author> <title> A General Version of Crow's Shadow Volumes, </title> <journal> IEEE CG&A, </journal> <volume> 6, </volume> <month> 9 (Sept. </month> <year> 1986), </year> <pages> 17-28. </pages>
Reference-contexts: In order to produce anti - aliased shadows, multiple secondary rays must be traced. Although many ray tracing acceleration techniques have been published [Arvo89], none of them yet offers interactive performance on substantial scenes, even running on large multiprocessors. Shadow volumes <ref> [Crow77, Bergeron86] </ref> and area subdivision algorithms [Atherton78] are restricted to polygonal data. They also are inefficient for complex environments because the number of polygons to be rendered increases rapidly with the size of the scene.
Reference: [Crow77] <author> F. C. Crow, </author> <title> Shadow Algorithms for Computer Graphics, </title> <booktitle> Computer Graphics (SIGGRAPH '77 Proceedings) 11, 2 (1977), </booktitle> <pages> 442-448. </pages>
Reference-contexts: Unfortunately, computing shadows is a global illumination problem; shadows cast by any object can affect any other object in the scene. Although many algorithms for rendering shadows have been published <ref> [Crow77, Max86] </ref>, most either are restricted to a limited class of modeling primitive or else are computationally too expensive to use in interactive systems. Ray tracing algorithms [Whitted80] compute shadows naturally, but are computationally expensive. In order to produce anti - aliased shadows, multiple secondary rays must be traced. <p> In order to produce anti - aliased shadows, multiple secondary rays must be traced. Although many ray tracing acceleration techniques have been published [Arvo89], none of them yet offers interactive performance on substantial scenes, even running on large multiprocessors. Shadow volumes <ref> [Crow77, Bergeron86] </ref> and area subdivision algorithms [Atherton78] are restricted to polygonal data. They also are inefficient for complex environments because the number of polygons to be rendered increases rapidly with the size of the scene.
Reference: [Hourcade85] <author> J.C. Hourcade and A.Nicolas, </author> <title> Algorithms for Antialiased Cast Shadows, </title> <journal> Computer & Graphics, </journal> <volume> 9, 3 (1985), </volume> <pages> 259-265. </pages>
Reference-contexts: Because of the drawbacks of using a bias, researchers have sought other solutions to the self-shadowing problem. Hourcade <ref> [Hourcade85] </ref> described a variation of the depth-map algorithm called the P-buffer, in which the shadow depth map contains surface tags rather than depth values.
Reference: [Max86] <editor> N.L. Max, </editor> <title> Atmospheric Illumination and Shadows, </title> <booktitle> Computer Graphics (SIGGRAPH '86 Proceedings) 20, 4 (1986), </booktitle> <pages> 269-278. </pages>
Reference-contexts: Unfortunately, computing shadows is a global illumination problem; shadows cast by any object can affect any other object in the scene. Although many algorithms for rendering shadows have been published <ref> [Crow77, Max86] </ref>, most either are restricted to a limited class of modeling primitive or else are computationally too expensive to use in interactive systems. Ray tracing algorithms [Whitted80] compute shadows naturally, but are computationally expensive. In order to produce anti - aliased shadows, multiple secondary rays must be traced.
Reference: [Reeves87] <author> William T. Reeves, David H. Salesin, Robert L. Cook, </author> <title> Rendering Antialiased Shadows with Depth Maps, </title> <booktitle> Computer Graphics, SIGGRAPH '87 Proceedings), </booktitle> <volume> 21, 4 (1987), </volume> <pages> 283-291. </pages>
Reference-contexts: Subsequent depth-map algorithms have attacked the aliasing problem by testing for shadow at multiple points in each pixel and filtering the results, socalled percentage-closer filtering <ref> [Reeves87] </ref>. These algorithms, however, still require large depth maps to avoid aliasing and require a scene-dependent bias. This paper attacks the remaining problems. It introduces second-depth shadow rendering, a novel twist to Williams original algorithm that eliminates the need for a bias when rendering scenes composed of solids.
Reference: [Whitted80] <author> T. Whitted, </author> <title> An Improved Illumination Model for Shaded Display, </title> <journal> CACM, </journal> <volume> 23, </volume> <month> 6 (June </month> <year> 1980), </year> <pages> 343-349. </pages>
Reference-contexts: Although many algorithms for rendering shadows have been published [Crow77, Max86], most either are restricted to a limited class of modeling primitive or else are computationally too expensive to use in interactive systems. Ray tracing algorithms <ref> [Whitted80] </ref> compute shadows naturally, but are computationally expensive. In order to produce anti - aliased shadows, multiple secondary rays must be traced. Although many ray tracing acceleration techniques have been published [Arvo89], none of them yet offers interactive performance on substantial scenes, even running on large multiprocessors.
Reference: [Williams78] <author> L. Williams, </author> <title> Casting Curved Shadows on Curved Surfaces, </title> <booktitle> Computer Graphics (SIGGRAPH '78 Proceedings), </booktitle> <volume> 12, 3 (1978), </volume> <pages> 270-274. </pages>
Reference-contexts: Shadow volumes [Crow77, Bergeron86] and area subdivision algorithms [Atherton78] are restricted to polygonal data. They also are inefficient for complex environments because the number of polygons to be rendered increases rapidly with the size of the scene. Depth-map shadow algorithms, introduced by Williams <ref> [Williams78] </ref>, have many advantages: they support all types of primitives; they are relatively efficient; and they can be accelerated using standard z-buffer hardware. Williams' original algorithm has limitations, however: it is prone to aliasing and requires the careful selection of a bias when doing z comparisons to avoid incorrect self-shadowing.
References-found: 9

