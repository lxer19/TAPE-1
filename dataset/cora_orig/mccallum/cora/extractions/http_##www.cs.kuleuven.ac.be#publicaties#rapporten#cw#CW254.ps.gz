URL: http://www.cs.kuleuven.ac.be/publicaties/rapporten/cw/CW254.ps.gz
Refering-URL: http://www.cs.kuleuven.ac.be/publicaties/rapporten/CW1997.html
Root-URL: 
Title: Compositionality of normal open logic programs  
Author: Sofie Verbaeten, Marc Denecker, Danny De Schreye 
Keyword: Logic Programming, Knowledge representation.  
Note: CR Subject Classification I.2.3  
Affiliation: Department of Computing Science, K.U.Leuven  
Date: 254, July 1997  
Pubnum: Report CW  
Abstract: Compositionality of programs is an important concern in knowledge representation and software development. In the context of Logic Programming, up till now, the issue has mostly been studied for definite programs only. Here, we study compositionality in the context of normal open logic programming. This is a very expressive logic for knowledge representation of uncertainty and incomplete knowledge on concepts and on problem domain, in which the compositionality issue turns up very naturally. The semantics of the logic is a generalisation (allowing non-Herbrand interpretations) of the well-founded semantics. We provide a number of results which offer different sufficient conditions under which the models of the composition of two theories can be related to the intersection of the models of the composing theories. In particular, under these conditions, logical consequence will be preserved under composition. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.R. Apt and M. Bezem. </author> <title> Acyclic programs. </title> <booktitle> In Proc. of the International Conference on Logic Programming, </booktitle> <pages> pages 579-597. </pages> <publisher> MIT press, </publisher> <year> 1990. </year>
Reference-contexts: For more details about this kind of programs, see [17] and <ref> [1] </ref> . We just give their definitions.
Reference: [2] <author> A. Bossi, M. Gabbrielli, G. Levi, and M.C. Meo. </author> <title> Contributions to the Semantics of Open Logic Programs. </title> <editor> In ICOT, editor, </editor> <booktitle> Proc. of the International Conference on Fifth Generating Computer Systems, </booktitle> <year> 1992. </year>
Reference-contexts: In comparison, we investigate only one operator, namely the operator which joins the knowledge of the modules. Recently, the algebraic approach of [3] was extended for normal logic programs [4] using Fittings 3-valued completion operator. In <ref> [2] </ref> the problem of modelling the composition by union of definite programs is studied, by considering computed answer substitution as observable behaviour of programs (instead of the more standard notion of success set).
Reference: [3] <author> A. Brogi. </author> <title> Program Construction in Computational Logic. </title> <type> PhD thesis, </type> <institution> Dipartimento di Informatica Universita di Pisa, </institution> <year> 1993. </year>
Reference-contexts: An exception is [16], which studies the compositionality problem in the context of Disjunctive Logic Programming. In some studies in modular logic programming e.g. [7], <ref> [3] </ref>, compositionality of the logic is seen as a first rank requirement; the semantics of the (syntactical) composition of modules is required to be the result of a semantical composition operator on the semantics of the modules. The semantic composition operator under study here is the logical conjunction operator. <p> Though in this semantics the compositionality problem can be handled elegantly, the semantics is much weaker than ours and seems not suited for knowledge representation and nonmonotonic reasoning. A special place in the compositionality research is taken by <ref> [3] </ref>, where each definite program is denoted by its immediate consequence operator T P and not by its set of models. The union of two definite programs can be proven to correspond to a certain operation on the corresponding T P operators. <p> The union of two definite programs can be proven to correspond to a certain operation on the corresponding T P operators. The result is a highly abstract sort of semantics of a program, which is not really suitable for studying knowledge representation problems, but which allows <ref> [3] </ref> to define many different composition operators, all in terms of different ways of composing the T P operators of the distinct modules. In comparison, we investigate only one operator, namely the operator which joins the knowledge of the modules. Recently, the algebraic approach of [3] was extended for normal logic <p> representation problems, but which allows <ref> [3] </ref> to define many different composition operators, all in terms of different ways of composing the T P operators of the distinct modules. In comparison, we investigate only one operator, namely the operator which joins the knowledge of the modules. Recently, the algebraic approach of [3] was extended for normal logic programs [4] using Fittings 3-valued completion operator. In [2] the problem of modelling the composition by union of definite programs is studied, by considering computed answer substitution as observable behaviour of programs (instead of the more standard notion of success set).
Reference: [4] <author> A. Brogi, S. Contiero, and F. Turini. </author> <title> Composing General Logic Programs. </title> <note> to appear in Proc. of LPNMR, </note> <year> 1997. </year>
Reference-contexts: In comparison, we investigate only one operator, namely the operator which joins the knowledge of the modules. Recently, the algebraic approach of [3] was extended for normal logic programs <ref> [4] </ref> using Fittings 3-valued completion operator. In [2] the problem of modelling the composition by union of definite programs is studied, by considering computed answer substitution as observable behaviour of programs (instead of the more standard notion of success set).
Reference: [5] <author> A. Brogi, E. Lamma, P. Mancarella, and P. Mello. </author> <title> Normal Logic Programs as Open Positive Programs. </title> <editor> In K. Apt, editor, </editor> <booktitle> Proc. of JICSLP, </booktitle> <pages> pages 783-797, </pages> <year> 1992. </year>
Reference-contexts: In [7], [6] they work with a different notion of open predicates to capture the possible composition with other programs. Their semantics of admissable Herbrand models for definite programs is suited for compositionality problems, but seems less suitable for knowledge representation. In <ref> [5] </ref> this semantics is extended to normal logic programs by transforming them to open positive programs. Though in this semantics the compositionality problem can be handled elegantly, the semantics is much weaker than ours and seems not suited for knowledge representation and nonmonotonic reasoning.
Reference: [6] <author> A. Brogi, E. Lamma, and P. Mello. </author> <title> Open Logic Theories. </title> <editor> In L.-H. Eriksson, L. Hallnas, and P. Schroeder-Heister, editors, </editor> <booktitle> Proc. of the Second International Workshop on Extensions of Logic Programming, </booktitle> <pages> pages 73-88. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: By allowing predicates to be open in a logic program, we deal with incomplete knowledge on predicates. In [12] import predicates are introduced to represent this kind of incomplete knowledge. In [7], <ref> [6] </ref> they work with a different notion of open predicates to capture the possible composition with other programs. Their semantics of admissable Herbrand models for definite programs is suited for compositionality problems, but seems less suitable for knowledge representation.
Reference: [7] <author> A. Brogi, E. Lamma, and P. Mello. </author> <title> Compositional Model-Theoretic Semantics for Logic Programs. </title> <journal> New Generation Computing, </journal> <volume> 11(1) </volume> <pages> 1-21, </pages> <year> 1992. </year>
Reference-contexts: An exception is [16], which studies the compositionality problem in the context of Disjunctive Logic Programming. In some studies in modular logic programming e.g. <ref> [7] </ref>, [3], compositionality of the logic is seen as a first rank requirement; the semantics of the (syntactical) composition of modules is required to be the result of a semantical composition operator on the semantics of the modules. The semantic composition operator under study here is the logical conjunction operator. <p> By allowing predicates to be open in a logic program, we deal with incomplete knowledge on predicates. In [12] import predicates are introduced to represent this kind of incomplete knowledge. In <ref> [7] </ref>, [6] they work with a different notion of open predicates to capture the possible composition with other programs. Their semantics of admissable Herbrand models for definite programs is suited for compositionality problems, but seems less suitable for knowledge representation.
Reference: [8] <author> F. Bry. </author> <title> A Compositional Semantics for Logic Programs and Deductive Databases. </title> <editor> In M. Maher, editor, </editor> <booktitle> Proc. of JICSLP, </booktitle> <pages> pages 453-467, </pages> <year> 1996. </year>
Reference-contexts: As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works [16], [13] and [14] which also allow negation. Other exceptions which also consider negation are [12], [20], <ref> [8] </ref>. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. <p> exceptions which also consider negation are [12], [20], <ref> [8] </ref>. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. We discuss these three works in more detail. In [12], they consider programs with import predicates (called units); import predicates correspond to open predicates in our approach. An abstract semantics for units is a function taking in input a set of imported literals and producing another set of literals. <p> Their semantics is compositional while remaining nonmonotonic to a certain extent. In essence, the semantics is compositional and monotonic on the level of composition of modules, while addition of clauses to modules remains a nonmonotonic operation. In <ref> [8] </ref> a compositional semantics for logic programs is defined which handles inconsistencies locally instead of globally.
Reference: [9] <author> M. Bugliesi, E. Lamma, and P. Mello. </author> <title> Modularity in logic programming. </title> <journal> Journal of Logic Programming, </journal> <volume> 20 </volume> <pages> 443-502, </pages> <year> 1994. </year>
Reference-contexts: All this offers lots of possibilities, which are worth investigating further. For a survey of different kinds of approaches to modularity, we refer to <ref> [9] </ref>. 20 Note that we did not consider problems such as: parametrised modules, several experts design-ing definitions for the same concepts, several experts overloading the same predicate symbol to represent different concepts, . . . . These are topics for future work.
Reference: [10] <author> M. Denecker. </author> <title> A Terminological Interpretation of (Abductive) Logic Programming. </title> <editor> In V.W. Marek, A. Nerode, and M. Truszczynski, editors, </editor> <booktitle> International Conference on Logic Programming and Nonmonotonic Reasoning, </booktitle> <pages> pages 15-29. </pages> <booktitle> Springer, Lecture notes in Artificial Intelligence 928, </booktitle> <year> 1995. </year>
Reference-contexts: A suitable logic to represent knowledge modules should allow to represent these forms of uncertainty. Here, we investigate the compositionality issue in the logic of normal Open Logic Programs (OLP) and First Order Logic (FOL) <ref> [10] </ref>. [10] presents this logic from a Knowledge Representation perspective and illustrates its suitability for representing uncertainty of similar nature as cooperating experts have to face: incomplete knowledge on the definitions of certain concepts and on the problem domain. <p> A suitable logic to represent knowledge modules should allow to represent these forms of uncertainty. Here, we investigate the compositionality issue in the logic of normal Open Logic Programs (OLP) and First Order Logic (FOL) <ref> [10] </ref>. [10] presents this logic from a Knowledge Representation perspective and illustrates its suitability for representing uncertainty of similar nature as cooperating experts have to face: incomplete knowledge on the definitions of certain concepts and on the problem domain. <p> One point on which this study differs from most others is that it investigates the compositionality problem in the context of a knowledge representation logic, OLP-FOL, designed as an extension of logic programming for nonmonotonic knowledge representation in the context of uncertainty <ref> [10] </ref>. Most related studies modify the logic programming semantics to make it suitable for modular programming but do not investigate the knowledge representation qualities of the resulting logic. An exception is [16], which studies the compositionality problem in the context of Disjunctive Logic Programming.
Reference: [11] <author> M. Denecker and D. De Schreye. </author> <title> Justification semantics: a unifying framework for the semantics of logic programs. </title> <booktitle> In Proc. of the Logic Programming and Nonmonotonic Reasoning Workshop, </booktitle> <pages> pages 365-379, </pages> <year> 1993. </year>
Reference-contexts: Partial knowledge about these predicates can be expressed in the set of FOL axioms T c . The model semantics of OLP-FOL is an extension of the well-founded semantics [21] and of the extended well-founded semantics [19] and was defined in <ref> [11] </ref>. This logic has a possible state semantics, that is, a model correspond to a state in which the problem domain might occur according to the (incomplete) expert knowledge (and not a belief set, a set of believed atoms, as in answer set semantics of Extended Logic Programming). <p> After section 2, which recalls the semantics of OLP-FOL from <ref> [11] </ref>, section 3 gives us a first result, stating that for correct theories, the class of models of the composition is contained in the intersection of the classes of models of the two separate theories. <p> The basic theorem of this paper, which gives weakest conditions under which two OLP-FOL theories can be composed, uses the concept of justification. For a detailed discussion we refer to <ref> [11] </ref>. The rest of this section is structured as follows. We define the concepts of justification and justification semantics. We show how the justification semantics is an extension of the well-founded semantics [21] based on general interpretations. <p> Well-founded semantics can be easily lifted to general interpretations by using the notion of grounding w.r.t. a given 3-valued interpretation. We will now give an alternative characterisation of a model of a theory. Theorem 2.3 is a trivial extension of results proven in <ref> [11] </ref>. 4 Definition 2.6 An interpretation M is a model of T d iff M is a well-founded model of the grounding of T d w.r.t. M .
Reference: [12] <author> A. Lallouet G. Ferrand. </author> <title> A Compositional Proof Method of Partial Correctness for Normal Logic Programs. </title> <editor> In J. Lloyd, editor, </editor> <booktitle> Proc. of ISLP, </booktitle> <pages> pages 210-223, </pages> <year> 1995. </year>
Reference-contexts: As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works [16], [13] and [14] which also allow negation. Other exceptions which also consider negation are <ref> [12] </ref>, [20], [8]. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. <p> Other exceptions which also consider negation are <ref> [12] </ref>, [20], [8]. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. We discuss these three works in more detail. In [12], they consider programs with import predicates (called units); import predicates correspond to open predicates in our approach. <p> either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in <ref> [12] </ref>, or to the case of one module representing a conservative extension of another module [8]. We discuss these three works in more detail. In [12], they consider programs with import predicates (called units); import predicates correspond to open predicates in our approach. An abstract semantics for units is a function taking in input a set of imported literals and producing another set of literals. They present conservative extensions of the well-founded and Fitting's semantics. <p> By allowing predicates to be open in a logic program, we deal with incomplete knowledge on predicates. In <ref> [12] </ref> import predicates are introduced to represent this kind of incomplete knowledge. In [7], [6] they work with a different notion of open predicates to capture the possible composition with other programs.
Reference: [13] <author> M. Gelfond and H. Przymusinska. </author> <title> Towards a Theory of Elaboration Tolerance: Logic Programming Approach. </title> <note> to appear in Journal on Software and Knowledge Engineering. </note>
Reference-contexts: This can be proven by induction on the length of the formula ', using theorem 6.3. Conservative extensions were studied by Lifschitz and Turner in the context of disjunctive logic programming with classical negation [16], by Gelfond and Przymusinska in the context of extended logic programming <ref> [13] </ref> and in the context of epistemic specifications [14] . 6.3 Hierarchical and acyclic programs The last results concern hierarchical and acyclic programs. For more details about this kind of programs, see [17] and [1] . We just give their definitions. <p> The syntactic composition operator in OLP-FOL is not always compositional and it should not be. As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works [16], <ref> [13] </ref> and [14] which also allow negation. Other exceptions which also consider negation are [12], [20], [8].
Reference: [14] <author> M. Gelfond and H. Przymusinska. </author> <title> Definitions in Epistemic Specifications. </title> <editor> In A. Nerode, W. Marek, and V. S. Subrahmanian, editors, </editor> <booktitle> Proc. of the First International Workshop on Logic Programming and Non-monotonic Reasoning, </booktitle> <pages> pages 245-259, </pages> <year> 1991. </year> <month> 21 </month>
Reference-contexts: Conservative extensions were studied by Lifschitz and Turner in the context of disjunctive logic programming with classical negation [16], by Gelfond and Przymusinska in the context of extended logic programming [13] and in the context of epistemic specifications <ref> [14] </ref> . 6.3 Hierarchical and acyclic programs The last results concern hierarchical and acyclic programs. For more details about this kind of programs, see [17] and [1] . We just give their definitions. <p> The syntactic composition operator in OLP-FOL is not always compositional and it should not be. As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works [16], [13] and <ref> [14] </ref> which also allow negation. Other exceptions which also consider negation are [12], [20], [8].
Reference: [15] <author> L. Giordano and A. Martelli. </author> <title> A modal reconstruction of blocks and modules in logic programming. </title> <booktitle> In Proc. of the International Logic Programming Symposium, </booktitle> <pages> pages 239-253. </pages> <publisher> The MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: In the previous discussed approaches and also in our approach, module composition is seen as a metalinguistic mechanism. Another main direction in the research of compositionality of logic programming formalisms is of a linguistic nature and is seen for instance in [18], <ref> [15] </ref>. They extend the formalism of Horn clause logic with modal operators in order to provide a richer support for modular programming. In [15], they show that (multi)modal logics are well-suited for supporting the notion of module. <p> Another main direction in the research of compositionality of logic programming formalisms is of a linguistic nature and is seen for instance in [18], <ref> [15] </ref>. They extend the formalism of Horn clause logic with modal operators in order to provide a richer support for modular programming. In [15], they show that (multi)modal logics are well-suited for supporting the notion of module. Each module is given a name and for each module a modal operator is introduced.
Reference: [16] <author> V. Lifschitz and H. Turner. </author> <title> Splitting a Logic Program. </title> <editor> In P. Van Hentenrijck, editor, </editor> <booktitle> Proc. of the Eleventh International Conference on Logic Programming, </booktitle> <pages> pages 23-38, </pages> <year> 1994. </year>
Reference-contexts: This is because of the monotonicity of FOL; not satisfying T 1c or T 2c is equivalent with not satisfying T 1c [ T 2c . In a way, the logic program T d = T 1d [ T 2d is split into two parts. In <ref> [16] </ref> Lifschitz and Turner discuss this idea of splitting a logic program in the context of answer set semantics for disjunctive logic programs with classical negation. They call T 1d the bottom of T d and T 2d the top of T d . <p> This can be proven by induction on the length of the formula ', using theorem 6.3. Conservative extensions were studied by Lifschitz and Turner in the context of disjunctive logic programming with classical negation <ref> [16] </ref>, by Gelfond and Przymusinska in the context of extended logic programming [13] and in the context of epistemic specifications [14] . 6.3 Hierarchical and acyclic programs The last results concern hierarchical and acyclic programs. For more details about this kind of programs, see [17] and [1] . <p> Most related studies modify the logic programming semantics to make it suitable for modular programming but do not investigate the knowledge representation qualities of the resulting logic. An exception is <ref> [16] </ref>, which studies the compositionality problem in the context of Disjunctive Logic Programming. <p> The syntactic composition operator in OLP-FOL is not always compositional and it should not be. As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works <ref> [16] </ref>, [13] and [14] which also allow negation. Other exceptions which also consider negation are [12], [20], [8].
Reference: [17] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: We refer to <ref> [17] </ref>. We assume some familiarity with the well-founded semantics [21] as well. We introduce some auxiliary concepts. Each language L is assumed to contain propositional predicates &gt; and ?; in each interpretation I of L, &gt; is true and ? is false. <p> For more details about this kind of programs, see <ref> [17] </ref> and [1] . We just give their definitions.
Reference: [18] <author> L. Monteiro and A. Porto. </author> <title> Contextual Logic Programming. </title> <editor> In G. Levi and M. Martelli, editors, </editor> <booktitle> Proc. of the Sixth International Conference on Logic Programming, </booktitle> <year> 1989. </year>
Reference-contexts: In the previous discussed approaches and also in our approach, module composition is seen as a metalinguistic mechanism. Another main direction in the research of compositionality of logic programming formalisms is of a linguistic nature and is seen for instance in <ref> [18] </ref>, [15]. They extend the formalism of Horn clause logic with modal operators in order to provide a richer support for modular programming. In [15], they show that (multi)modal logics are well-suited for supporting the notion of module.
Reference: [19] <author> L. M. Pereira, J.N. Aparicio, and J.J. Alferes. </author> <title> Hypothetical reasoning with well founded semantics. </title> <type> Technical report, </type> <institution> AI Centre, Uninova, Portugal, </institution> <year> 1990. </year>
Reference-contexts: Intuitively, they represent concepts for which no definitions are given. Partial knowledge about these predicates can be expressed in the set of FOL axioms T c . The model semantics of OLP-FOL is an extension of the well-founded semantics [21] and of the extended well-founded semantics <ref> [19] </ref> and was defined in [11]. <p> It trivially follows that the Herbrand model of a complete logic program is the well-founded model. Also, a Herbrand model of an incomplete logic program is an extended well-founded model <ref> [19] </ref>. An open logic program T d is interpreted as a definition of the defined predicates in terms of open predicates. The occurrence of an undefined fact in a model of T d reveals an ambiguity or a local inconsistency in the definition. This motivates the following definition.
Reference: [20] <author> F. Teusink S. Etalle. </author> <title> A Compositional Semantics for Normal Open Programs. </title> <editor> In M. Maher, editor, </editor> <booktitle> Proc. of JICSLP, </booktitle> <pages> pages 468-482, </pages> <year> 1996. </year>
Reference-contexts: The semantic composition operator under study here is the logical conjunction operator. In a logic with a possible state semantics (as for OLP-FOL), this composition operator can be naturally defined by the intersection on the classes of models. As was observed first in <ref> [20] </ref>, compositionality (w.r.t. logical conjunction) and nonmonotonicity are contradictory requirements. More precisely, when a syntactic composition operator is compositional w.r.t. the logical conjunction operator, this syntactic composition operator is monotonic. However, a monotonic logic is not very suitable for knowledge representation. <p> As opposed to most of the works about compositionality, this paper considers logic programs which may contain negation in the body of their clauses. In section 6.2 we mentioned three works [16], [13] and [14] which also allow negation. Other exceptions which also consider negation are [12], <ref> [20] </ref>, [8]. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. <p> In section 6.2 we mentioned three works [16], [13] and [14] which also allow negation. Other exceptions which also consider negation are [12], <ref> [20] </ref>, [8]. However, either they consider a weaker compositional semantics based on completion semantics [20], or the results are restricted either to hierarchical dependencies between modules, as in [12], or to the case of one module representing a conservative extension of another module [8]. We discuss these three works in more detail. <p> Although they use a very different terminology and their set-up is different, their approach leans closest to ours. In <ref> [20] </ref> a compositional semantics (which can be seen as a compositional counterpart of Kunen's semantics) for normal programs based on a first order completion of the program is defined. <p> Besides uncertainty on predicates, one can also have incomplete knowledge on the domain of discourse. By considering general interpretations, like in <ref> [20] </ref>, we take into account this kind of incomplete knowledge. Other approaches either do not allow to model this kind of incomplete knowledge or model it by allowing Herbrand interpretations of arbitrary extensions of the module language.
Reference: [21] <author> A. Van Gelder, K.A. Ross, and J.S. Schlipf. </author> <title> The Well-Founded Semantics for General Logic Programs. </title> <journal> Journal of the ACM, </journal> <volume> 38(3) </volume> <pages> 620-650, </pages> <year> 1991. </year> <month> 22 </month>
Reference-contexts: Intuitively, they represent concepts for which no definitions are given. Partial knowledge about these predicates can be expressed in the set of FOL axioms T c . The model semantics of OLP-FOL is an extension of the well-founded semantics <ref> [21] </ref> and of the extended well-founded semantics [19] and was defined in [11]. <p> We refer to [17]. We assume some familiarity with the well-founded semantics <ref> [21] </ref> as well. We introduce some auxiliary concepts. Each language L is assumed to contain propositional predicates &gt; and ?; in each interpretation I of L, &gt; is true and ? is false. <p> For a detailed discussion we refer to [11]. The rest of this section is structured as follows. We define the concepts of justification and justification semantics. We show how the justification semantics is an extension of the well-founded semantics <ref> [21] </ref> based on general interpretations. Below, we denote the complement of a fact F by sF ; i.e. if F is a positive fact, then sF denotes :F ; vice versa s:F denotes F . We define s&gt; = ? and vice versa. <p> Theorem 2.2 Given is a logic program T d and an incomplete 2-valued interpretation I for the open predicates of L only. There exists a unique justified model of T d extending I. The semantics of the OLP-FOL logic is an extension of well-founded semantics <ref> [21] </ref> based on general interpretations. Well-founded semantics can be easily lifted to general interpretations by using the notion of grounding w.r.t. a given 3-valued interpretation. We will now give an alternative characterisation of a model of a theory.
References-found: 21

