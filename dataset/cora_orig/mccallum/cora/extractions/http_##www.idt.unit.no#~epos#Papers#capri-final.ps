URL: http://www.idt.unit.no/~epos/Papers/capri-final.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Title: Software Process Modeling and Evolution in EPOS models Software Processes in an object-oriented data model.
Author: Letizia Jaccheri Jens-Otto Larsen, Reidar Conradi. 
Note: EPOS  
Address: N-7034 Trondheim, Norway  
Affiliation: Div. of Computer Systems and Telematics (DCST) Norwegian Institute of Technology (NTH),  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [ACM90] <author> V. Ambriola, P. Ciancarini, and C. Mon-tangero. </author> <title> Software Process Enactment in Oikos. </title> <booktitle> In Proceedings of the 4th ACM SIG-SOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California, </address> <pages> pages 183-192, </pages> <year> 1990. </year>
Reference-contexts: The emerging paradigms in the PM community are essentially three: Rule based, Graph/net based [DG90], and Process programming [TBC + 88]. AI techniques found in rule-based systems have been applied to software process modeling, e.g. planning in [KFP88] or central blackboard structure in <ref> [ACM90] </ref>. The Graph/net approach adapts and extends techniques for real time systems specification, such as Petri Nets, to model software process, particularly w.r.t. dynamic triggering and concurrency. Process programming means to define the process by an executable specification in an process programming language.
Reference: [Che76] <author> P. P.-S. Chen. </author> <title> The Entity-Relationship Model | Towards a Unified View of Data. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: The versioning model is the base of EPOS CM and provides uniform versioning of both software systems, software processes and models of these. 3.1 EPOS data model The data model of the EPOS database, EPOS-OOER is a variant of the Entity-Relationship model <ref> [Che76] </ref>, extended with object-oriented concepts: a strong notion of object identity, subtyping and complex objects. Entities are objects with a unique identity.
Reference: [COWL91] <author> Reidar Conradi, Espen Osjord, Per H. Westby, and Chunnian Liu. </author> <title> Initial Software Process Management in EPOS. </title> <journal> Software Engineering Journal (Special Issue on Software process and its support), </journal> <volume> 6(5) </volume> <pages> 275-284, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The Graph/net approach adapts and extends techniques for real time systems specification, such as Petri Nets, to model software process, particularly w.r.t. dynamic triggering and concurrency. Process programming means to define the process by an executable specification in an process programming language. EPOS <ref> [COWL91] </ref> is a multi-user software engineering environment kernel covering both CM and PM. EPOS uses rule-based techniques in the process models, Graph/net for enactment, and process programming to express the basic activity steps. The core of EPOS is the client-server based database system, EPOSDB.
Reference: [DG90] <author> Wolfgang Deiters and Volker Gruhn. </author> <title> Managing Software Processes in the Environment MELMAC. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <address> Irvine, California. </address> <booktitle> In ACM SIG-PLAN Notices, </booktitle> <month> Dec. </month> <year> 1990, </year> <pages> pages 193-205, </pages> <month> De-cember </month> <year> 1990. </year>
Reference-contexts: The PM information itself consists of fl Current Address: Politecnico di Torino, Corso Duca degli Abruzzi n.24, 10129 Torino, Italy. structured and evolving objects, i.e. belonging to the CM domain. The emerging paradigms in the PM community are essentially three: Rule based, Graph/net based <ref> [DG90] </ref>, and Process programming [TBC + 88]. AI techniques found in rule-based systems have been applied to software process modeling, e.g. planning in [KFP88] or central blackboard structure in [ACM90].
Reference: [DMN70] <author> Ole-Johan Dahl, Bjtrn Myhrhaug, and Kris-ten Nygaard. </author> <title> SIMULA Information | Common Base Language. </title> <type> Technical Report 145 p., </type> <institution> S-22, Norwegian Computing Center, Oslo, </institution> <year> 1970. </year>
Reference-contexts: Pre- and postcondition for the topmost TaskEntity type all have the value true. The code part have execution semantics as defined for Simula <ref> [DMN70] </ref>. An inherited procedure body may be redefined, but the interface has to be kept stable.
Reference: [DNR91] <author> Mark Dowson, Brian Nejmeh, and William Riddle. </author> <title> Fundamental Software Process Concepts. </title> <booktitle> In [FCA91], </booktitle> <pages> pages 15-37, </pages> <year> 1991. </year>
Reference-contexts: A software process is the total set of software engineering activities needed to produce and evolve software systems. Software Process Modeling (PM) consists of defining models that specify how some classes of software processes should, could, or have been performed <ref> [DNR91] </ref>. PM and CM are strongly related: PM depends on and is driven by CM, e.g. work breakdown and activity chains are deducible from the product structure. On the other hand, products are evolved as a result of PM activities.
Reference: [FCA91] <editor> Alfonso Fuggetta, Reidar Conradi, and Vin-cenzo Ambriola, editors. </editor> <booktitle> Proceedings of the First European Workshop on Process Modeling (EWPM'91), </booktitle> <address> CEFRIEL, Milano, Italy, </address> <month> 30-31 May </month> <year> 1991, 1991. </year> <institution> Italian Society of Computer Science (AICA) Press. </institution>
Reference: [FH91] <author> Peter H. Feiler and Watts Humphrey. </author> <title> Software process definitions, </title> <month> May </month> <year> 1991. </year> <note> (Draft document). </note>
Reference-contexts: This section will give an overview of the EPOS software process life-cycle following the terminology suggested in <ref> [FH91] </ref> and emphasizing the connections to the EPOSDB. Figure 1 illustrates the software process life-cycle for EPOS. The EPOS Process Architecture, or framework, consists of the object-oriented data model, EPOS-OOER, the EPOS database with its versioning mechanism, and a set of PM tools.
Reference: [Hen88] <editor> Peter B. Henderson, editor. </editor> <booktitle> Proc. of the 3rd ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments (Boston), </booktitle> <address> 257 p., </address> <month> November </month> <year> 1988. </year> <journal> In ACM SIGPLAN Notices 24(2), </journal> <month> Feb. </month> <year> 1989. </year>
Reference: [Kee89] <author> Sonya E. Keene. </author> <title> Object-Oriented Programming in Common Lisp. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year> <note> 266 p. </note>
Reference-contexts: Changing the static type properties means changing the constraints that regulated the shape of an existing network. The rule i-convert attempts to convert an active task to a modified type definition, see CLOS' update instance for redefined class <ref> [Kee89] </ref>. A task must be treated with regard to its state. The core of rule i-convert does not depend on whether the type change has been done by subtyping or by version-ing. In fact we believe that the most frequent changes involve redefinition of the predefined type level properties.
Reference: [KFP88] <author> Gail E. Kaiser, Peter H. Feiler, and Steven S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <pages> pages 40-49, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: The emerging paradigms in the PM community are essentially three: Rule based, Graph/net based [DG90], and Process programming [TBC + 88]. AI techniques found in rule-based systems have been applied to software process modeling, e.g. planning in <ref> [KFP88] </ref> or central blackboard structure in [ACM90]. The Graph/net approach adapts and extends techniques for real time systems specification, such as Petri Nets, to model software process, particularly w.r.t. dynamic triggering and concurrency. Process programming means to define the process by an executable specification in an process programming language.
Reference: [LCD + 89] <author> Anund Lie, Reidar Conradi, Tor M. Didriksen, Even-Andre Karlsson, Svein O. Hallsteinsen, and Per Holager. </author> <title> Change Oriented Versioning in a Software Engineering Database. </title> <editor> In Walter F. Tichy (Ed.): </editor> <booktitle> Proc. of the 2nd International Workshop on Software Configuration Management, </booktitle> <address> Princeton, USA, 25-27 Oct. </address> <year> 1989, </year> <title> 178 p. </title> <booktitle> In ACM SIGSOFT Software Engineering Notes, </booktitle> <volume> 14 (7), </volume> <pages> pages 56-65, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Type-level attributes may be ver-sioned just as ordinary objects. The EPOSDB allows dynamic extensions of the type system, i.e. new subtypes of the existing type hierarchy can be added to the database at any time. 3.2 Versioning The EPOSDB implements the Change-Oriented Versioning model (COV) <ref> [LCD + 89] </ref>COV is independent of the data model and enables uniform versioning of entities and relationships. In the following, a logical change is a named set of physical changes that result in a product with distinct properties. A physical change is a sequence of database updates.
Reference: [TBC + 88] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon Osterweil, Richard W. Selby, Jack C. Wileden, Alexander L. Wolf, and Michael Young. </author> <title> Foundations for the Arcadia Environment Architecture. </title> <booktitle> In [Hen88], </booktitle> <pages> pages 1-13, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The PM information itself consists of fl Current Address: Politecnico di Torino, Corso Duca degli Abruzzi n.24, 10129 Torino, Italy. structured and evolving objects, i.e. belonging to the CM domain. The emerging paradigms in the PM community are essentially three: Rule based, Graph/net based [DG90], and Process programming <ref> [TBC + 88] </ref>. AI techniques found in rule-based systems have been applied to software process modeling, e.g. planning in [KFP88] or central blackboard structure in [ACM90].
References-found: 13

