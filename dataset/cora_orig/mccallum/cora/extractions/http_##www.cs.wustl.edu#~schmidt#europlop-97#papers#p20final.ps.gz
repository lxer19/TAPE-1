URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p20final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: ffjar,arsg@albertina.inesc.pt  
Phone: Tel: +351-1-3100287, Fax: +351-1-3145843  
Title: Component Configurer: A Design Pattern for Component-Based Configuration  
Author: Francisco Assis Rosa and Antonio Rito Silva R. Alves Redol n o 
Address: Lisbon  9, 1000 Lisboa, PORTUGAL  
Affiliation: INESC/IST Technical University of  
Abstract: This paper presents a design pattern for component-based configuration. The pattern focuses on allowing the configuration of components along with its inter-component connections. It allows component creation, destruction and migration without affecting other components. The pattern promotes a decoupling between components and components connection, aiming at supporting ad-hoc dynamic reconfiguration and the migration of components with state transferring. 
Abstract-found: 1
Intro-found: 1
Reference: [Belissard 96] <author> Luc Belissard and Michel Riveill. </author> <title> From Distributed Objects to Distributed Components: the Olan Approach. Workshop Putting Distributed Objects to Work, </title> <type> ECOOP'96, </type> <month> July </month> <year> 1996. </year>
Reference-contexts: The concept of ReconfComponent as primitive component and CompositeComponent as composite component is used in the configuration language Darwin [Magee 94]. The concept of configurator cooperation for the application configuration is used in the Olan system <ref> [Belissard 96] </ref>. 10 Related Patterns The presented pattern is related to the following patterns: * Composite [Gamma 95] the CompositeComponent represents a use of the Composite pattern. * Template Method [Gamma 95] the use of methods such as concreteStateTransfer in the ReconfComponent class, represents a use of the Template Method pattern.
Reference: [Berczuk 95] <author> S. Berczuk. </author> <title> A Pattern for Separating Assembly and Processing. </title> <booktitle> In Pattern Languages of Program Design, </booktitle> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: It enables configuration and reconfiguration of services without affecting other services. The Pipes and Filters pattern [Buschmann 96] deals with the configuration of pipeline based applications. It allows the change of a pipeline application by introducing, removing or changing pipeline elements. The Callback pattern <ref> [Berczuk 95] </ref> addresses the issue of assembly and processing decoupling, providing some dynamic configuration at the component connection establishment. The Broker pattern [Buschmann 96] presents a pattern for the establishment of cooperation between elements in a distributed application. All these patterns present solutions to configuration issues. <p> It aims at internal server component configuration, addition, change and deletion of component services, as opposed to inter-component configuration with addition, change and deletion of server components. * Pipes and Filters [Buschmann 96] this pattern again deals with the internal configuration of pipeline based components. * Callback <ref> [Berczuk 95] </ref> the pattern for the separation of assembly and processing can provide a way for component interaction.
Reference: [Booch 94] <author> Grady Booch. </author> <title> Object-Oriented Analyis and Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: A meeting requires its creator and several participants. * A user consults its agenda to see his appointments and the meetings he should participate using one Agenda Session. A possible class diagram for this problem is presented in figure 1 using the Booch class diagram notation <ref> [Booch 94] </ref>. This class diagram presents the necessary classes for the basic Agenda functionality. An Agenda Manager will always be in charge of the manipulation of its list of users. Agenda Sessions will consult the agenda data by using this Agenda Manager. <p> A reconfigurable component will be a component capable of altering its interaction structure with other components and capable of transferring state to other components of the same class. Figure 5 presents a Booch class diagram <ref> [Booch 94] </ref> for the configurable component hierarchy. The main elements in this hierarchy are: * ReconfComponent defines the necessary interface for a reconfigurable component. It defines the reconfigurable component interface manipulation methods and the state transfer method for a basic reconfigurable component.
Reference: [Buschmann 96] <author> F. Buschmann, R. Meunier, H. Rohnert, P. Sommerlad, and M. Stal. </author> <title> Pattern-Oriented Software Architecture: A System of Patterns. </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference-contexts: The Service Configurator pattern [Jain 96] deals with service configuration into applications. It enables configuration and reconfiguration of services without affecting other services. The Pipes and Filters pattern <ref> [Buschmann 96] </ref> deals with the configuration of pipeline based applications. It allows the change of a pipeline application by introducing, removing or changing pipeline elements. The Callback pattern [Berczuk 95] addresses the issue of assembly and processing decoupling, providing some dynamic configuration at the component connection establishment. <p> <ref> [Buschmann 96] </ref> deals with the configuration of pipeline based applications. It allows the change of a pipeline application by introducing, removing or changing pipeline elements. The Callback pattern [Berczuk 95] addresses the issue of assembly and processing decoupling, providing some dynamic configuration at the component connection establishment. The Broker pattern [Buschmann 96] presents a pattern for the establishment of cooperation between elements in a distributed application. All these patterns present solutions to configuration issues. <p> It aims at internal server component configuration, addition, change and deletion of component services, as opposed to inter-component configuration with addition, change and deletion of server components. * Pipes and Filters <ref> [Buschmann 96] </ref> this pattern again deals with the internal configuration of pipeline based components. * Callback [Berczuk 95] the pattern for the separation of assembly and processing can provide a way for component interaction. <p> The structure of the pattern foresees the existence of some dynamic configuration allowing the connection establishment between components. * Broker <ref> [Buschmann 96] </ref> the existence of a NameManager class in the proposed pattern can be related in some way to the broker pattern. The NameManager is used as a repository of available Names and locations used to establish communication between components.
Reference: [Gamma 95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The concept of configurator cooperation for the application configuration is used in the Olan system [Belissard 96]. 10 Related Patterns The presented pattern is related to the following patterns: * Composite <ref> [Gamma 95] </ref> the CompositeComponent represents a use of the Composite pattern. * Template Method [Gamma 95] the use of methods such as concreteStateTransfer in the ReconfComponent class, represents a use of the Template Method pattern. * Proxy [Gamma 95]- the use of classes such as RPlug and LPlug can be seen <p> The concept of configurator cooperation for the application configuration is used in the Olan system [Belissard 96]. 10 Related Patterns The presented pattern is related to the following patterns: * Composite <ref> [Gamma 95] </ref> the CompositeComponent represents a use of the Composite pattern. * Template Method [Gamma 95] the use of methods such as concreteStateTransfer in the ReconfComponent class, represents a use of the Template Method pattern. * Proxy [Gamma 95]- the use of classes such as RPlug and LPlug can be seen as a particular use of the Proxy pattern. * Abstract Factory [Gamma 95]- class <p> Related Patterns The presented pattern is related to the following patterns: * Composite <ref> [Gamma 95] </ref> the CompositeComponent represents a use of the Composite pattern. * Template Method [Gamma 95] the use of methods such as concreteStateTransfer in the ReconfComponent class, represents a use of the Template Method pattern. * Proxy [Gamma 95]- the use of classes such as RPlug and LPlug can be seen as a particular use of the Proxy pattern. * Abstract Factory [Gamma 95]- class ComponentGenerator represents a use of the Abstract Factory pattern. <p> Template Method <ref> [Gamma 95] </ref> the use of methods such as concreteStateTransfer in the ReconfComponent class, represents a use of the Template Method pattern. * Proxy [Gamma 95]- the use of classes such as RPlug and LPlug can be seen as a particular use of the Proxy pattern. * Abstract Factory [Gamma 95]- class ComponentGenerator represents a use of the Abstract Factory pattern. Classes derived from ComponentGenerator will encapsulate the generation of concrete ReconfComponent, LPlug and RPlug objects, * Factory Method [Gamma 95]- method newCompGen in class ReconfComponent represent a use of the Factory Method pattern. * Distributed Proxy [Silva 97] - <p> classes such as RPlug and LPlug can be seen as a particular use of the Proxy pattern. * Abstract Factory <ref> [Gamma 95] </ref>- class ComponentGenerator represents a use of the Abstract Factory pattern. Classes derived from ComponentGenerator will encapsulate the generation of concrete ReconfComponent, LPlug and RPlug objects, * Factory Method [Gamma 95]- method newCompGen in class ReconfComponent represent a use of the Factory Method pattern. * Distributed Proxy [Silva 97] - RPlug and LPlug classes can make use of the Distributed Proxy pattern as a mean of supporting application partitioning. * Service Configurator [Jain 96] this pattern deals with service configuration
Reference: [Hofmeister 91] <author> C. Hofmeister and J. Purtilo. </author> <title> A Framework for Dynamic Reconfiguration of Distributed Systems. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 560-571, </pages> <year> 1991. </year>
Reference-contexts: Dynamic configuration is presented as the process of modifying or extending an application without suspending its execution. This process is driven by change specifications such as, introduction of new components, modification of existing ones and modification of existing communication patterns. In <ref> [Hofmeister 91] </ref>, configuration is classified into module implementation configuration, structure configuration and geometry configuration. Module implementation configuration deals with the capability of specifying and changing a component's implementation.
Reference: [Jain 96] <author> Prashant Jain and Douglas Schmidt. </author> <title> Service Configurator: A Pattern for Dynamic Configuration and Reconfiguration of Communication Services. </title> <booktitle> In 3rd Annual Pattern Languages of Programming Conference, </booktitle> <address> Allerton Park, Illinois, </address> <year> 1996. </year>
Reference-contexts: Design patterns for configuration issues include design patterns such as the Service Configurator pattern, the Pipes and Filter pattern, the Callback pattern and the Broker pattern. The Service Configurator pattern <ref> [Jain 96] </ref> deals with service configuration into applications. It enables configuration and reconfiguration of services without affecting other services. The Pipes and Filters pattern [Buschmann 96] deals with the configuration of pipeline based applications. It allows the change of a pipeline application by introducing, removing or changing pipeline elements. <p> LPlug and RPlug objects, * Factory Method [Gamma 95]- method newCompGen in class ReconfComponent represent a use of the Factory Method pattern. * Distributed Proxy [Silva 97] - RPlug and LPlug classes can make use of the Distributed Proxy pattern as a mean of supporting application partitioning. * Service Configurator <ref> [Jain 96] </ref> this pattern deals with service configuration into components.
Reference: [Kramer 85] <author> J. Kramer and J. Magee. </author> <title> Dynamic Configuration for Distributed Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(4):424-436, </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: These systems typically need to evolve as human needs, technology or even application environment changes <ref> [Kramer 85] </ref>. These changes can range from changing existing functionalities to adding new ones. Application configuration allows the specification and change at run-time of an application's building blocks and their collaboration structure. <p> Components should cooperate using these elements. * Application structure description of components and its cooperation structure using connections. This description can include information such as component mapping to the existing system nodes. In <ref> [Kramer 85] </ref>, configuration is classified into static and dynamic configuration and some required properties for dynamic configuration are presented. Static configuration is presented as the process of producing a load image of groups of components for each of the computer stations in the distributed system.
Reference: [Magee 89] <author> Jeff Magee, Jeff Kramer, and Morris Sloman. </author> <title> Constructing Distributed Systems in Conic. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6) </volume> <pages> 663-675, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Geometry configuration deals with the capability of specifying and changing the mapping of the application's components onto the distributed architecture. This work addresses a reconfiguration framework applied to the Polylith software bus [Purtilo 90], presenting the idea of component migration with state transference. The work of Conic <ref> [Magee 89] </ref> presents a configuration language structuring components hierarchical using the concept of composite component. Conic presents, at the language specification level, dynamic configuration although its main contribution is in the scope of static configuration.
Reference: [Magee 94] <author> J. Magee, N. Dula, and J. Kramer. </author> <title> A Constructive Development Environment for Parallel and Distributed Programs. </title> <type> Technical report, </type> <institution> Department of Computing, Imperial College, </institution> <address> London SW7 2BZ, UK, </address> <year> 1994. </year>
Reference-contexts: According to the DASCo development process, the pattern may be combined with other concerns, namely Naming and Replication [Silva 96]. The concept of ReconfComponent as primitive component and CompositeComponent as composite component is used in the configuration language Darwin <ref> [Magee 94] </ref>.
Reference: [Purtilo 90] <author> J. Purtilo. </author> <title> The Polylith Software Toolbus. </title> <type> Technical Report CSD 2469, </type> <institution> University of Maryland, </institution> <year> 1990. </year>
Reference-contexts: Geometry configuration deals with the capability of specifying and changing the mapping of the application's components onto the distributed architecture. This work addresses a reconfiguration framework applied to the Polylith software bus <ref> [Purtilo 90] </ref>, presenting the idea of component migration with state transference. The work of Conic [Magee 89] presents a configuration language structuring components hierarchical using the concept of composite component. Conic presents, at the language specification level, dynamic configuration although its main contribution is in the scope of static configuration.
Reference: [Schmidt 94] <author> Douglas C. Schmidt. </author> <title> The ADAPTIVE Communication Environment: An Object Oriented Network Programming Toolkit for Developing Communication Software. </title> <booktitle> In 11th and 12th Sun User Group Conferences, </booktitle> <address> San Jose, California and San Francisco, California, </address> <month> December and June </month> <year> 1994. </year>
Reference-contexts: The same process can be done on the LPlug class. Distributed proxies will also provide a way to encapsulate specific communication mechanisms. These proxies can be socket-based, pipe-based, can use framework mechanisms such as Reactor and Acceptor [Schmidt 96] from theACE framework <ref> [Schmidt 94] </ref> or even systems such as Orbix [Technologies 96] for component communication purposes. A possible variation using the ACE framework can be shown. The Component Configurer pattern is combinable with the Service Configuration pattern allowing the jump from the higher level components to the low-level socket-based connection.
Reference: [Schmidt 96] <author> Douglas Schmidt. </author> <title> A Family of Design Patterns for Flexibly Configuring Network Services in Distributed Systems. </title> <booktitle> In International Conference on Configurable Distributed Systems, Annapolis, </booktitle> <address> Maryland, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Distributed communication can thus be achieved by using this class. The same process can be done on the LPlug class. Distributed proxies will also provide a way to encapsulate specific communication mechanisms. These proxies can be socket-based, pipe-based, can use framework mechanisms such as Reactor and Acceptor <ref> [Schmidt 96] </ref> from theACE framework [Schmidt 94] or even systems such as Orbix [Technologies 96] for component communication purposes. A possible variation using the ACE framework can be shown.
Reference: [Silva 95] <author> Antonio Rito Silva, Pedro Sousa, and Jose Alves Marques. </author> <title> Development of Distributed Applications with Separation of Concerns. </title> <booktitle> In Proceedings of the 1995 Asia-Pacific Software Engineering Conference APSEC'95, </booktitle> <address> Brisbane, Australia, December 1995. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: AgendaManager objects will migrate between ManagerSession objects taking along all its agenda specific objects. 9 Known Uses The presented pattern was developed in the scope of the DASCo framework <ref> [Silva 95] </ref>. Within DASCo this pattern represents a solution to the configuration concern. According to the DASCo development process, the pattern may be combined with other concerns, namely Naming and Replication [Silva 96].
Reference: [Silva 96] <author> Antonio Rito Silva, Fiona Hayes, Francisco Mota, Nino Torres, </author> <title> and Pedro Santos. </title>
Reference-contexts: Within DASCo this pattern represents a solution to the configuration concern. According to the DASCo development process, the pattern may be combined with other concerns, namely Naming and Replication <ref> [Silva 96] </ref>. The concept of ReconfComponent as primitive component and CompositeComponent as composite component is used in the configuration language Darwin [Magee 94].
References-found: 15

