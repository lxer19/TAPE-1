URL: http://www.win.tue.nl/cs/tt/jaco/papers/mfcs.ps.Z
Refering-URL: http://www.win.tue.nl/cs/tt/jaco/papers/
Root-URL: http://www.win.tue.nl
Email: e-mail: w.j.fokkink@swan.ac.uk  e-mail: jaco@win.tue.nl  
Title: Simulation as a Correct Transformation of Rewrite Systems  
Author: Wan Fokkink Jaco van de Pol 
Address: Singleton Park, Swansea SA2 8PP, Wales  PO Box 513, 5600 MB Eindhoven, The Netherlands  
Affiliation: University of Wales Swansea Department of Computer Science  Eindhoven University of Technology Department of Computer Science  
Abstract: Kamperman and Walters proposed the notion of a simulation of one rewrite system by another one, whereby each term of the simulating rewrite system is related to a term in the original rewrite system. In this paper it is shown that if such a simulation is sound and complete and preserves termination, then the transformation of the original into the simulating rewrite system constitutes a correct step in the compilation of the original rewrite system. That is, the normal forms of a term in the original rewrite system can then be obtained by computing the normal forms of a related term in the simulating rewrite system. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J.A. Bergstra, J. Heering, and P. Klint, eds. </author> <title> Algebraic Specification. </title> <publisher> ACM Press in cooperation with Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Justifications of this claim abound in the literature: equational theorem proving is mostly concerned with terminating rewrite systems which yield unique normal forms [15]; if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms <ref> [1] </ref>; in [3] it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs".
Reference: 2. <author> R.M. Burstall and P.J. Landin. </author> <title> Programs and their proofs: an algebraic approach. </title> <booktitle> In Machine Intelligence, </booktitle> <volume> Volume 4, </volume> <pages> pp. 17-43. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year> <month> 9 </month>
Reference-contexts: So if a rewrite system is transformed as part of a compilation project, then the main interest is that the transformation preserves normal forms. We propose the notion of a correct transformation of rewrite systems, based on ideas on compiler correctness by Burstall and Landin <ref> [2] </ref> and Morris [13]. We say that the transformation of one rewrite system into another is correct if no information on normal forms in the original rewrite system is lost.
Reference: 3. <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> Volume B, </volume> <pages> pp. 243-320. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: A considerable part of this research was carried out when both authors worked at the Philosophy Department of Utrecht University. 2 Abstract Reduction Systems This section introduces some preliminaries from rewriting <ref> [3, 9] </ref>. 3 Definition 1. An abstract reduction system (ARS) consists of a collection A of elements, together with a binary reduction relation R between elements in A. R + denotes the transitive closure of a reduction relation R, and R fl the reflexive transitive closure of R. <p> Justifications of this claim abound in the literature: equational theorem proving is mostly concerned with terminating rewrite systems which yield unique normal forms [15]; if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms [1]; in <ref> [3] </ref> it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs". <p> If the restriction of OE to a collection B 0 B, closed under S-reductions, is still surjective, then this restricted simulation is still sound or complete or termination preserving, respectively. 5 An Example We present a toy example of a transformation of a term rewriting system (TRS) <ref> [3, 9] </ref>, which will be shown to be a sound, complete and termination preserving simulation, if a reachability restriction is imposed on the ARS induced by the transformed TRS.
Reference: 4. <author> H. Ehrig, H.-J. Kreowski, and P. Padawitz. </author> <title> Stepwise specification and implementation of abstract data types. </title> <booktitle> In Proceedings ICALP'78, </booktitle> <volume> LNCS 62, </volume> <pages> pp. 205-226. </pages> <publisher> Springer, </publisher> <year> 1978. </year>
Reference-contexts: In such cases, a reachability restriction on the elements in the simulating rewrite system can help to make the simulation sound, complete and termination preserving. We will formalize this reachability notion. Related Work. In <ref> [4, 14] </ref>, a transformation of an equational specification of abstract data types is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation.
Reference: 5. <author> W.J. Fokkink and J.C. van de Pol. </author> <title> Correct transformation of rewrite systems for implementation purposes. </title> <booktitle> Logic Group Preprint Series 164, </booktitle> <address> Utrecht University, </address> <year> 1996. </year> <note> Available at http://www.phil.ruu.nl. </note>
Reference-contexts: This weaker completeness notion (which was also used by Sekar et al. [16]) does not imply that a transformation is correct. Luttik [11] proposed a series of stronger simulation notions, and shows that they preserve termination and confluence. In the technical report version of this paper <ref> [5] </ref>, more information is provided on so-called `weak correctness' of transformations, which basically means that at least one normal form of each term in the original rewrite system is conserved by the transformation. Acknowledgements.
Reference: 6. <author> J.F.Th. Kamperman. </author> <title> Compilation of Term Rewriting Systems. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1996. </year>
Reference-contexts: Recently, Kamperman and Walters <ref> [7, 8, 6] </ref> proposed a notion of simulation of one rewrite system by another rewrite system. A simulation basically consists of a surjective mapping OE which relates each term in the simulating rewrite system to a term in the original rewrite system. <p> In order to make sure that the simulating rewrite system returns an answer whenever the original rewrite system does, it is required that a correct transformation also preserves termination properties. We show that the notion of a simulation as proposed in <ref> [7, 8, 6] </ref> constitutes a correct transformation, under the conditions that it is sound and complete and preserves termination. Hence, the notion of simulation constitutes a useful tool for proving correctness of compilation of rewrite systems. Namely, such a compilation may involve a chain of transformations of rewrite systems. <p> mutes: 4 P (A) P (B) ? ? parse nf S print For this notion of a correct transformation, the definition of the print function outside of nf S (parse (A)), and the S-relation outside the range of parse, are irrelevant. 4 Correctness of Simulation 4.1 Simulation Kamperman and Walters <ref> [7, 8, 6] </ref> propose a notion of simulation for rewrite systems. We present simplified and more general versions of their definitions in the next sections. A simulation of an ARS (A; R) by an ARS (B; S) is characterized by a surjective mapping OE : B ! A. <p> That is, a relation aRa 0 holds if a 0 can be obtained from a by replacing a subterm f (g (c)) of a by c 0 . In order to compile (A; R), the TRS R can be transformed into a so-called `minimal' TRS, using a strategy from <ref> [7, 8, 6] </ref>. In minimal TRSs, rewrite rules are not allowed to contain more than three function symbols, and no more than two function symbols at each side of the rewrite rule.
Reference: 7. <author> J.F.Th. Kamperman and H.R. Walters. </author> <title> Minimal term rewriting systems. </title> <booktitle> In Proceedings WADT'95, </booktitle> <volume> LNCS 1130, </volume> <pages> pp. 274-290. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Recently, Kamperman and Walters <ref> [7, 8, 6] </ref> proposed a notion of simulation of one rewrite system by another rewrite system. A simulation basically consists of a surjective mapping OE which relates each term in the simulating rewrite system to a term in the original rewrite system. <p> In order to make sure that the simulating rewrite system returns an answer whenever the original rewrite system does, it is required that a correct transformation also preserves termination properties. We show that the notion of a simulation as proposed in <ref> [7, 8, 6] </ref> constitutes a correct transformation, under the conditions that it is sound and complete and preserves termination. Hence, the notion of simulation constitutes a useful tool for proving correctness of compilation of rewrite systems. Namely, such a compilation may involve a chain of transformations of rewrite systems. <p> mutes: 4 P (A) P (B) ? ? parse nf S print For this notion of a correct transformation, the definition of the print function outside of nf S (parse (A)), and the S-relation outside the range of parse, are irrelevant. 4 Correctness of Simulation 4.1 Simulation Kamperman and Walters <ref> [7, 8, 6] </ref> propose a notion of simulation for rewrite systems. We present simplified and more general versions of their definitions in the next sections. A simulation of an ARS (A; R) by an ARS (B; S) is characterized by a surjective mapping OE : B ! A. <p> That is, a relation aRa 0 holds if a 0 can be obtained from a by replacing a subterm f (g (c)) of a by c 0 . In order to compile (A; R), the TRS R can be transformed into a so-called `minimal' TRS, using a strategy from <ref> [7, 8, 6] </ref>. In minimal TRSs, rewrite rules are not allowed to contain more than three function symbols, and no more than two function symbols at each side of the rewrite rule.
Reference: 8. <author> J.F.Th. Kamperman and H.R. Walters. </author> <title> Simulating TRSs by minimal TRSs: a simple, efficient, and correct compilation technique. </title> <type> Report CS-R9605, </type> <institution> CWI, </institution> <year> 1996. </year> <note> Available at http://www.cwi.nl/epic. </note>
Reference-contexts: Recently, Kamperman and Walters <ref> [7, 8, 6] </ref> proposed a notion of simulation of one rewrite system by another rewrite system. A simulation basically consists of a surjective mapping OE which relates each term in the simulating rewrite system to a term in the original rewrite system. <p> Kamperman and Walters state, for example in the title of <ref> [8] </ref>, that if a simulation is sound and complete and preserves termination, then it constitutes a correct transformation of rewrite systems. However, they do not yet provide a foundation for this claim. At first sight, the link between the original and the simulating rewrite system is unclear. <p> In order to make sure that the simulating rewrite system returns an answer whenever the original rewrite system does, it is required that a correct transformation also preserves termination properties. We show that the notion of a simulation as proposed in <ref> [7, 8, 6] </ref> constitutes a correct transformation, under the conditions that it is sound and complete and preserves termination. Hence, the notion of simulation constitutes a useful tool for proving correctness of compilation of rewrite systems. Namely, such a compilation may involve a chain of transformations of rewrite systems. <p> mutes: 4 P (A) P (B) ? ? parse nf S print For this notion of a correct transformation, the definition of the print function outside of nf S (parse (A)), and the S-relation outside the range of parse, are irrelevant. 4 Correctness of Simulation 4.1 Simulation Kamperman and Walters <ref> [7, 8, 6] </ref> propose a notion of simulation for rewrite systems. We present simplified and more general versions of their definitions in the next sections. A simulation of an ARS (A; R) by an ARS (B; S) is characterized by a surjective mapping OE : B ! A. <p> That is, a relation aRa 0 holds if a 0 can be obtained from a by replacing a subterm f (g (c)) of a by c 0 . In order to compile (A; R), the TRS R can be transformed into a so-called `minimal' TRS, using a strategy from <ref> [7, 8, 6] </ref>. In minimal TRSs, rewrite rules are not allowed to contain more than three function symbols, and no more than two function symbols at each side of the rewrite rule.
Reference: 9. <author> J.W. Klop. </author> <title> Term rewriting systems. </title> <booktitle> In Handbook of Logic in Computer Science, </booktitle> <volume> Volume I, </volume> <pages> pp. 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: A considerable part of this research was carried out when both authors worked at the Philosophy Department of Utrecht University. 2 Abstract Reduction Systems This section introduces some preliminaries from rewriting <ref> [3, 9] </ref>. 3 Definition 1. An abstract reduction system (ARS) consists of a collection A of elements, together with a binary reduction relation R between elements in A. R + denotes the transitive closure of a reduction relation R, and R fl the reflexive transitive closure of R. <p> If the restriction of OE to a collection B 0 B, closed under S-reductions, is still surjective, then this restricted simulation is still sound or complete or termination preserving, respectively. 5 An Example We present a toy example of a transformation of a term rewriting system (TRS) <ref> [3, 9] </ref>, which will be shown to be a sound, complete and termination preserving simulation, if a reachability restriction is imposed on the ARS induced by the transformed TRS.
Reference: 10. <author> A. Laville. </author> <title> Lazy pattern matching in the ML language. </title> <booktitle> In Proceedings FSTTCS'87, </booktitle> <volume> LNCS 287, </volume> <pages> pp. 400-419. </pages> <publisher> Springer, </publisher> <year> 1987. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'.
Reference: 11. <author> B. Luttik. </author> <title> Transformation of reduction systems: a view on proving correctness. </title> <type> Master's Thesis, </type> <institution> University of Amsterdam, </institution> <year> 1996. </year>
Reference-contexts: This weaker completeness notion (which was also used by Sekar et al. [16]) does not imply that a transformation is correct. Luttik <ref> [11] </ref> proposed a series of stronger simulation notions, and shows that they preserve termination and confluence.
Reference: 12. <author> J. McCarthy. </author> <title> Towards a mathematical science of computation. </title> <booktitle> In Proceedings Information Processing '62, </booktitle> <pages> pp. 21-28. </pages> <publisher> North-Holland, </publisher> <year> 1963. </year>
Reference-contexts: 1 Introduction Questions on the correctness of compilation of programming languages date back to McCarthy <ref> [12] </ref>. In this paper we present a technique to deduce the correctness of compilation steps for functional programming languages which stay inside the domain of rewrite systems.
Reference: 13. <author> F.L. Morris. </author> <title> Advice on structuring compilers and proving them correct. </title> <booktitle> In Proceedings POPL'73, </booktitle> <pages> pp. 144-152. </pages> <publisher> ACM Press, </publisher> <year> 1973. </year>
Reference-contexts: So if a rewrite system is transformed as part of a compilation project, then the main interest is that the transformation preserves normal forms. We propose the notion of a correct transformation of rewrite systems, based on ideas on compiler correctness by Burstall and Landin [2] and Morris <ref> [13] </ref>. We say that the transformation of one rewrite system into another is correct if no information on normal forms in the original rewrite system is lost.
Reference: 14. <author> C.F. Nourani. </author> <title> Abstract implementations and their correctness proofs. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 343-359, </pages> <year> 1983. </year>
Reference-contexts: In such cases, a reachability restriction on the elements in the simulating rewrite system can help to make the simulation sound, complete and termination preserving. We will formalize this reachability notion. Related Work. In <ref> [4, 14] </ref>, a transformation of an equational specification of abstract data types is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation.
Reference: 15. <author> M.J. O'Donnell. </author> <title> Equational Logic as a Programming Language. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Justifications of this claim abound in the literature: equational theorem proving is mostly concerned with terminating rewrite systems which yield unique normal forms <ref> [15] </ref>; if rewriting is applied to implement abstract data types, then the meaning of a term is fixed by its normal forms [1]; in [3] it is remarked that "rewrite systems defining at most one normal form for any input term can serve as functional programs".
Reference: 16. <author> R.C. Sekar, S. Pawagi, and I.V. Ramakrishnan. </author> <title> Transforming strongly sequential rewrite systems with constructors for efficient parallel execution. </title> <booktitle> In Proceedings RTA'89, </booktitle> <volume> LNCS 355, </volume> <pages> pp. 404-418. </pages> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> This weaker completeness notion (which was also used by Sekar et al. <ref> [16] </ref>) does not imply that a transformation is correct. Luttik [11] proposed a series of stronger simulation notions, and shows that they preserve termination and confluence.
Reference: 17. <author> S.R. Thatte. </author> <title> On the correspondence between two classes of reduction systems. </title> <journal> Information Processing Letters, </journal> <volume> 20(2) </volume> <pages> 83-85, </pages> <year> 1985. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Related Work. In [4, 14], a transformation of an equational specification of abstract data types is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation. Thatte <ref> [17, 18] </ref> defined a transformation of certain types of rewrite systems, over a signature , into rewrite systems that are constructor based, over an extended signature fl .
Reference: 18. <author> S.R. Thatte. </author> <title> Implementing first-order rewriting with constructor systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 61(1) </volume> <pages> 83-92, </pages> <year> 1988. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Related Work. In [4, 14], a transformation of an equational specification of abstract data types is called a `correct implementation' if the initial algebras of the original and the transformed specification are isomorphic. This notion is considerably stronger than our notion of a correct transformation. Thatte <ref> [17, 18] </ref> defined a transformation of certain types of rewrite systems, over a signature , into rewrite systems that are constructor based, over an extended signature fl . <p> Let (B; S) be an ARS, and B 0 B. An element b 2 B is S-reachable from B 0 if b 0 S fl b for some b 0 2 B 0 . This reachability notion also occurs in <ref> [18, 19] </ref>. In practical cases, a simulation OE : B ! A of an ARS (A; R) by an ARS (B; S) is not always immediately sound, complete and termination preserving, due to the fact that B contains `junk'.
Reference: 19. <author> R.M. Verma. </author> <title> Transformations and confluence for rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 152(2) </volume> <pages> 269-283, </pages> <year> 1995. </year>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'. <p> Let (B; S) be an ARS, and B 0 B. An element b 2 B is S-reachable from B 0 if b 0 S fl b for some b 0 2 B 0 . This reachability notion also occurs in <ref> [18, 19] </ref>. In practical cases, a simulation OE : B ! A of an ARS (A; R) by an ARS (B; S) is not always immediately sound, complete and termination preserving, due to the fact that B contains `junk'.
Reference: 20. <author> H.R. Walters and J.F.Th. Kamperman. </author> <title> EPIC: an equational language abstract machine and supporting tools. </title> <booktitle> In Proceedings RTA'96, </booktitle> <volume> LNCS 1103, </volume> <pages> pp. 424-427. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: the simulating rewrite system should be terminating for t. (The other way around is guaranteed by completeness.) Kamperman and Walters apply simulation to transform a left-linear rewrite system into a form which is more suitable for compilation, as a first step in the implementation of their equational programming language EPIC <ref> [20, 21] </ref>. Kamperman and Walters state, for example in the title of [8], that if a simulation is sound and complete and preserves termination, then it constitutes a correct transformation of rewrite systems. However, they do not yet provide a foundation for this claim.
Reference: 21. <author> H.R. Walters and J.F.Th. Kamperman. </author> <title> EPIC 1.0 (unconditional), an equational programming language. </title> <type> Report CS-R9604, </type> <institution> CWI, </institution> <year> 1996. </year> <note> Available at http://www.cwi.nl/epic. </note>
Reference-contexts: the simulating rewrite system should be terminating for t. (The other way around is guaranteed by completeness.) Kamperman and Walters apply simulation to transform a left-linear rewrite system into a form which is more suitable for compilation, as a first step in the implementation of their equational programming language EPIC <ref> [20, 21] </ref>. Kamperman and Walters state, for example in the title of [8], that if a simulation is sound and complete and preserves termination, then it constitutes a correct transformation of rewrite systems. However, they do not yet provide a foundation for this claim.
Reference: 22. <author> H. Zantema. </author> <title> Termination of term rewriting by semantic labelling. </title> <note> Fundamenta Informaticae, 24(1,2):89-105, </note> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style 10 </title>
Reference-contexts: Quite a number of papers deal with particular examples of transformations of rewrite systems, usually with the aim to obtain a rewrite system which satisfies some desirable property, e.g. <ref> [17, 10, 18, 16, 19, 22, 7] </ref>. In most of these papers, correctness of the transformation is stated, meaning that the original and the transformed rewrite system are in some sense `equivalent'.
References-found: 22

