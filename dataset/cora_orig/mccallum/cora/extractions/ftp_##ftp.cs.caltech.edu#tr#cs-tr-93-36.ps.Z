URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-93-36.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Email: email: ainswrth@csvax.caltech.edu kryukova@cco.caltech.edu  
Title: A Multimedia Interactive Environment Using Program Archetypes: Divide-and-Conquer  
Author: Paul Ainsworth Svetlana Kryukova 
Address: Pasadena, CA 91125  
Affiliation: Department of Computer Science California Institute of Technology  
Pubnum: Mail Stop 256-80  
Abstract: As networks and distributed systems that can exploit parallel computing become more widespread, the need for ways to teach parallel programming effectively grows as well. Even though many colleges and universities provide courses on parallel programming [1], most of those courses are reserved for graduate students and advanced undergraduates. There is a demand for ways to teach fundamental parallel programming concepts to people with just a working knowledge of programming. By using the idea of a software archetype, and providing a learning environment that teaches both concept and coding, we hope to satisfy this need. This paper presents an overview of the multimedia approach we took in teaching parallel programming and offers Divide-and-Conquer as an example of its use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Miller. </author> <booktitle> The Status of Parallel Processing Education: </booktitle> <year> 1993. </year> <institution> State University of New York, Buffalo, </institution> <year> 1993. </year>
Reference: [2] <author> K. M. Chandy and A. Rifkin. </author> <title> An Archetype-Based Approach to Parallel Program Libraries. </title> <type> Technical Report forthcoming, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: The way we present methods of solving problems in computer science using efficient algorithms is by teaching the student about the various software archetypes using interactive multimedia. What are archetypes? An archetype <ref> [2] </ref> is a general framework for solving a problem in computer science. There are many different archetypes, each one representing a unique strategy for developing an algorithm when faced with a problem.
Reference: [3] <author> B.M.E. Moret and H.D. Shapiro. </author> <title> Algorithms from P to NP - Volume I: Design and Efficiency, </title> <publisher> Benjamin/Cummings Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: We then take the answers to all of the small subproblems, and merge their answers until we have the answer to the large problem that we originally wanted to solve. Examples of the Divide-and-Conquer Archetype can be found in such algorithms as Mergesort, Quicksort, and the Skyline problem <ref> [3] </ref>. Why are archetypes useful? Archetypes provide a good way to teach programming because they naturally emphasize software engineering principles in a format that is language-independent and problem-independent. The archetypes not only discuss questions of algorithm development; they also address efficiency, proof methods, and test suite design. <p> The archetypes not only discuss questions of algorithm development; they also address efficiency, proof methods, and test suite design. Even though the Divide-and-Conquer strategy is not new <ref> [3] </ref>, the archetype format presents it in a way that has more learning utility than other approaches. Archetypes are also useful because they present a systematic approach to solving a problem in computer science. <p> We present the details of this module to illustrate the electronic textbook. Case Study: the Divide-and-Conquer Archetype The Divide-and-Conquer chapter includes modules containing applications for Mergesort and Skyline <ref> [3] </ref>. For each module the text of both the brief and introductory reading modes consist of the same collection of 8 sections that cover similar aspects of the Divide-and-Conquer Archetype and its applications. <p> This section lists the problems for which the Divide-and-Conquer Archetype can be used. There are such applications as Mergesort, Fast Fourier Transform, Nearest Neighbor and Skyline <ref> [3] </ref>. Chapters about Mergesort and Skyline are already developed. Skyline problem. The purpose of this figure is to explain the concept of the Skyline problem. This figure is part of the "Basic Idea" section of the chapter about the Skyline application of the Divide-and-Conquer Archetype.
Reference: [4] <author> A. Rifkin. </author> <title> An Interactive Environment for Teaching Parallel Programming. </title> <type> Technical Report TR-CS-93-13, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <month> 14 </month> <year> 1993. </year>
Reference-contexts: Instead of presenting the student with just a problem and its solution, archetypes allow us to present the student with the entire method that leads from problem to solution. Using a library of archetypes we can reduce the development of parallel and sequential algorithms to two steps <ref> [4] </ref>. The first step is choosing an archetype that manifests traits similar to the problem we want to solve. The second is to instantiate the chosen archetype to get a specific algorithm.
Reference: [5] <author> R. L. Bagrodia. </author> <title> Designing Efficient Simulations Using Maisie. </title> <booktitle> Proceedings of 1991 Winter Simulation Conference, </booktitle> <month> December 8-11, </month> <year> 1991, </year> <title> Phoenix, Arizona, </title> <booktitle> p. </booktitle> <pages> 243-247. </pages>
Reference-contexts: The final level is the actual source code. A code library is being built that contains code for various problems in a number of programming languages (such as C, Pascal, Fortran, Maisie <ref> [5] </ref> and - Fortran M [6]). A code viewer allows the user to select the problem, the language, and the archetype, and then see the code that solves the selected problem using the selected archetype, written in the selected language.
Reference: [6] <author> I. T. Foster, K. M. Chandy. </author> <title> Fortran M: A Language for Modular Parallel. </title> <type> Technical Report MCS-P327-0992, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: The final level is the actual source code. A code library is being built that contains code for various problems in a number of programming languages (such as C, Pascal, Fortran, Maisie [5] and - Fortran M <ref> [6] </ref>). A code viewer allows the user to select the problem, the language, and the archetype, and then see the code that solves the selected problem using the selected archetype, written in the selected language.
Reference: [7] <author> B. Cotton, R. Oliver. </author> <title> Understanding Hypermedia. </title> <publisher> Phaidon Press Ltd, </publisher> <year> 1993. </year> <month> 15 </month>
Reference-contexts: The contents of the main window are: 1) The main text window that contains the written presentation of the module. In addition to the two reading modes, the user is given further control of the depth of the material through the use of hyperlink <ref> [7] </ref> buttons that are placed throughout the text of the Introductory track, controlling the secondary windows that contain supplementary diagrams and interactive figures (examples of secondary windows opened by hyperlink buttons are shown in Figures 3, 4, and 5). 5 The supplementary figures are a useful learning tool, but could be
References-found: 7

