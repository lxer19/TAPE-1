URL: ftp://coast.cs.purdue.edu/pub/doc/network/passive-network-monitoring.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ30.html
Root-URL: http://www.cs.purdue.edu
Email: mab@cs.princeton.edu  
Title: NFS Tracing By Passive Network Monitoring  
Author: Matt Blaze 
Address: Princeton University  
Affiliation: Department of Computer Science  
Abstract: Traces of filesystem activity have proven to be useful for a wide variety of purposes, ranging from quantitative analysis of system behavior to trace-driven simulation of filesystem algorithms. Such traces can be difficult to obtain, however, usually entailing modification of the filesystems to be monitored and runtime overhead for the period of the trace. Largely because of these difficulties, a surprisingly small number of filesystem traces have been conducted, and few sample workloads are available to filesystem researchers. This paper describes a portable toolkit for deriving approximate traces of NFS [1] activity by non-intrusively monitoring the Ethernet traffic to and from the file server. The toolkit uses a promiscuous Ethernet listener interface (such as the Packetfilter[2]) to read and reconstruct NFS-related RPC packets intended for the server. It produces traces of the NFS activity as well as a plausible set of corresponding client system calls. The tool is currently in use at Princeton and other sites, and is available via anonymous ftp. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sandberg, R., Goldberg, D., Kleiman, S., Walsh, D., & Lyon, B. </author> <title> "Design and Implementation of the Sun Network File System." </title> <booktitle> Proc. USENIX, Summer, </booktitle> <year> 1985. </year>
Reference: [2] <author> Mogul, J., Rashid, R., & Accetta, M. </author> <title> "The Packet Filter: An Efficient Mechanism for User-Level Network Code." </title> <booktitle> Proc. 11th ACM Symp. on Operating Systems Principles, </booktitle> <year> 1987. </year>
Reference-contexts: Hence, the toolkit consists of two basic parts, an "RPC decoder" (rpcspy) and the "NFS analyzer" (nfstrace). rpcspy communicates with a low-level network monitoring facility (such as Sun's NIT [9] or the Packetfilter <ref> [2] </ref>) to read and reconstruct the RPC transactions (call and reply) that make up each NFS command. nfstrace takes the output of rpcspy and reconstructs the system calls that occurred as well as other interesting data it can derive about the structure of the filesystem, such as the mappings between NFS <p> The rpcspy Program rpcspy is the interface to the system-dependent Ethernet monitoring facility; it produces a trace of the RPC calls issued between a given set of clients and servers. At present, there are versions of rpcspy for a number of BSD-derived systems, including ULTRIX (with the Packetfilter <ref> [2] </ref>), SunOS (with NIT [9]), and the IBM RT running AOS (with the Stanford enet filter).
Reference: [3] <author> Ousterhout J., et al. </author> <title> "A TraceDriven Analysis of the Unix 4.2 BSD File System." </title> <booktitle> Proc. 10th ACM Symp. on Operating Systems Principles, </booktitle> <year> 1985. </year>
Reference-contexts: Distributed filesystems exacerbate these difficulties, especially when the network is composed of a large number of heterogeneous machines. As a result of these difficulties, only a relatively small number of traces of Unix filesystem workloads have been conducted, primarily in computing research environments. <ref> [3] </ref>, [4] and [5] are examples of such traces. Since distributed filesystems work by transmitting their activity over a network, it would seem reasonable to obtain traces of such systems by placing a "tap" on the network and collecting trace data based on the network traffic.
Reference: [4] <author> Floyd, R. </author> <title> "Short-Term File Reference Patterns in a UNIX Environment," </title> <institution> TR-177 Dept. Comp. Sci, U. of Rochester, </institution> <year> 1986. </year>
Reference-contexts: Distributed filesystems exacerbate these difficulties, especially when the network is composed of a large number of heterogeneous machines. As a result of these difficulties, only a relatively small number of traces of Unix filesystem workloads have been conducted, primarily in computing research environments. [3], <ref> [4] </ref> and [5] are examples of such traces. Since distributed filesystems work by transmitting their activity over a network, it would seem reasonable to obtain traces of such systems by placing a "tap" on the network and collecting trace data based on the network traffic.
Reference: [5] <author> Baker, M. et al. </author> <title> "Measurements of a Distributed File System," </title> <booktitle> Proc. 13th ACM Symp. on Operating Systems Principles, </booktitle> <year> 1991. </year>
Reference-contexts: Distributed filesystems exacerbate these difficulties, especially when the network is composed of a large number of heterogeneous machines. As a result of these difficulties, only a relatively small number of traces of Unix filesystem workloads have been conducted, primarily in computing research environments. [3], [4] and <ref> [5] </ref> are examples of such traces. Since distributed filesystems work by transmitting their activity over a network, it would seem reasonable to obtain traces of such systems by placing a "tap" on the network and collecting trace data based on the network traffic. <p> When such a highly accurate trace is required, other approaches, such as modification of the client and server kernels, must be employed. The main virtue of the passive-monitoring approach lies in its simplicity. In <ref> [5] </ref>, Baker, et al, describe a trace of a distributed filesystem which involved low-level modification of several different operating system kernels.
Reference: [6] <author> Metcalfe, R. & Boggs, D. </author> <title> "Ethernet: Distributed Packet Switching for Local Computer Networks," </title> <journal> CACM July, </journal> <note> 1976. [7] "Etherfind(8) Manual Page," SunOS Reference Manual, </note> <institution> Sun Microsystems, </institution> <year> 1988. </year>
Reference-contexts: Since distributed filesystems work by transmitting their activity over a network, it would seem reasonable to obtain traces of such systems by placing a "tap" on the network and collecting trace data based on the network traffic. Ethernet <ref> [6] </ref> based networks lend themselves to this approach particularly well, since traffic is broadcast to all machines connected to a given subnetwork.
Reference: [8] <author> Gusella, R. </author> <title> "Analysis of Diskless Workstation Traffic on an Ethernet," </title> <institution> TR-UCB/CSD-87/379, University Of California, Berkeley, </institution> <year> 1987. </year> <title> [9] "NIT(4) Manual Page," SunOS Reference Manual, Sun Microsystems, 1988. [10] "XDR Protocol Specification," Networking on the Sun Workstation, Sun Microsystems, 1986. [11] "RPC Protocol Specification," Networking on the Sun Workstation, Sun Microsystems, 1986. [12] "NFS Protocol Specification," Networking on the Sun Workstation, Sun Microsystems, </title> <year> 1986. </year>
Reference-contexts: Filesystem operations may span several packets, and may be meaningful only in the context of other, previous operations. Some work has been done on characterizing the impact of NFS traffic on network load. In <ref> [8] </ref>, for example, the results of a study are reported in which Ethernet traffic was monitored and statistics gathered on NFS activity.
Reference: [13] <author> Postel, J. </author> <title> "User Datagram Protocol," </title> <type> RFC 768, </type> <institution> Network Information Center, </institution> <year> 1980. </year>
Reference-contexts: An RPC transaction consists of a call message (with arguments) from the client to the server and a reply message (with return data) from the server to the client. NFS RPC calls are transmitted using the UDP/IP connection-less unreliable datagram protocol <ref> [13] </ref>. The call message contains a unique transaction identifier which is included in the reply message to enable the client to match the reply with its call. The data in both messages is encoded in an "external data representation" (XDR), which provides a machine-independent standard for byte order, etc.

References-found: 8

