URL: http://www.cs.ucla.edu/~hari/software/ecn/ecn_rpt.ps.gz
Refering-URL: http://www.cs.ucla.edu/~hari/software/ecn/ecn.html
Root-URL: http://www.cs.ucla.edu
Email: tang@cs.ucla.edu  
Title: Implementing Explicit Congestion Notification (ECN) in TCP for IPv6  
Author: Chris Chen, Hariharan Krishnan, Steven Leung, Nelson Tang -chenc, hari, stevenl, Prof. Lixia Zhang 
Date: December 4, 1997  
Address: 219  
Affiliation: Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [C97] <author> Cho, K. </author> <title> Alternate Queueing for BSD Unix, </title> <institution> Sony Computer Science Laboratory, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: Design Framework We had several choices of design for implementing the ECN router. While ECN support could be written from scratch and added to the existing routing code, we chose instead to take advantage of the ALTQ (Alternate Queueing) framework <ref> [C97] </ref> designed and implemented by Sony Computer Labs, Japan for FreeBSD.
Reference: [DH95] <author> Deering, S., and Hinden, R. </author> <title> Internet Protocol, Version 6 (IPv6) Specification , RFC 1883, </title> <month> December </month> <year> 1995. </year>
Reference-contexts: In our implementation, we have chosen a bit in the Flow Label field of the IPv6 header <ref> [DH95] </ref> to indicate congestion. This bit is called the ECN-Notify bit . We also need a way for routers to know if a packets sender and receiver are both using the ECN algorithm. This requires a second bit, also in the Flow Label field, called the ECN-Capable bit .
Reference: [F94] <author> Floyd, S. </author> <title> TCP and Explicit Congestion Notification , ACM Computer Communic a-tion Review, </title> <publisher> V. </publisher> <address> 24 N, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: These test results thus demonstrate the fairness of ECN. 5.5. All end-to-end tests: Throughput improvement In all end-to-end tests but test 2, the throughput using ECN was larger than the throughput without ECN. This improvement was not as dramatic as one might expect; however, simulations of ECN by Floyd <ref> [F94] </ref> also showed that throughput improvement is generally small. 6. Conclusion ECN seems to help in cases of severe congestion, but its improvement in throughput is marginal. This can be explained by comparing the effect of a single marked packet versus a single dropped packet. <p> This may explain the low i n-crease in throughput. A more dramatic measure of ECNs improvement is the packet delay <ref> [F94] </ref>. We unfortunately did not explicitly test for this result due to time constraints. The results of our router testing, however, do tend to imply lower packet delays using ECN due to the excellent maintenance of its queue length. 7. Project surprises Life is like a box of chocolates.
Reference: [FJ93] <author> Floyd, S., and Jacobson, V. </author> <title> Random Early Detection Gateways for Congestion Avoidance, </title> <journal> IEEE/ACM Transactions On Networking, </journal> <month> August </month> <year> 1993. </year>
Reference-contexts: Dropping packets can be very undesirable for a number of reasons. For exa m-ple, dropping all incoming packets at one router can result in the global synchronization [FJ94] of neighboring routers and hosts, which further degrade the efficiency of the network. What the Explicit Congestion Notification (ECN) algorithm <ref> [FJ93] </ref> attempts to do is eliminate the time wasted waiting for a timeout by explicitly signaling when congestion is occurring. ECN does this by using a bit in the IP header which notifies the packets recipient that the packet encou n-tered congestion somewhere along the path from the sender. <p> It is then up to the receiver to inform the sender that congestion is occurring and that the sender should slow down. Ramakrishnan and Floyd have proposed to add ECN to TCP for IPv6 [RF97]. In conjunction with Random Early Detection (RED) <ref> [FJ93] </ref>, a router queue-management scheme, ECN provides all the benefits of congestion detection and avoidance with less of the costly overhead of packet drops. We have implemented ECN for TCP and IPv6 on FreeBSD 2.2.2 systems. <p> average queue length, etc., for packets sent to this particular interface ECN_CONFIG configures an ECN device, such as setting the queue length limit ECN_ACC_ENABLE enables accounting for an interface ECN_ACC_DISABLE disables accounting for an interface Our ECN implementation for IPv6 is largely based on the RED implementation for IPv4 from <ref> [FJ93] </ref>. Currently the same parameters for queue management from this RED implementation were used in our ECN implementation.
Reference: [FJ94] <author> Floyd, S., and Jacobson, V. </author> <title> The Synchronization of Periodic Routing Messages , IEEE/ACM Transactions on Networking, </title> <month> April </month> <year> 1994. </year>
Reference-contexts: However, most of these algorithms probe for congestion by sending more and more packets until one of them is dropped. Dropping packets can be very undesirable for a number of reasons. For exa m-ple, dropping all incoming packets at one router can result in the global synchronization <ref> [FJ94] </ref> of neighboring routers and hosts, which further degrade the efficiency of the network. What the Explicit Congestion Notification (ECN) algorithm [FJ93] attempts to do is eliminate the time wasted waiting for a timeout by explicitly signaling when congestion is occurring.
Reference: [FBD97] <institution> FreeBSD Board of Directors, </institution> <note> FreeBSD Handbook , URL &lt;http://www.freebsd.org&gt;, </note> <year> 1997. </year>
Reference-contexts: When it is set, congestion control due to the retransmit timer, duplicate ACKs which lead to a fast retransmit, or another ENA will not occur. 3. Testing and Verification We used three Intel-based computers installed with FreeBSD 2.2.2 <ref> [FBD97] </ref> : gridlock , bottleneck , and sigalert . The machines were arranged so that bottleneck acted as a router to the other two machines (see Figure 5). Point-to-point 10BaseT links connected both gridlock and sigalert to one of two identical Ethernet cards in bottleneck.
Reference: [J88] <author> Jacobson, V. </author> <title> Congestion Avoidance and Control , Proceedings of SIGCOMM 1998 , August 1988. </title>
Reference-contexts: 1. Introduction Over its twenty-year history, researchers have extensively developed TCP [P81] to provide the best service as a reliable transport protocol. Part of the protocols development focused on its ability to dynamically adapt to network congestion. Algorithms such as slowstart <ref> [J88] </ref> adjust TCPs transmission rate to achieve effective throughput even in adverse conditions. However, most of these algorithms probe for congestion by sending more and more packets until one of them is dropped. Dropping packets can be very undesirable for a number of reasons.
Reference: [P81] <author> Postel, J. </author> <title> (editor). Transmission Control Protocol DARPA Internet Program Prot o-col Specification, </title> <type> RFC 793, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: 1. Introduction Over its twenty-year history, researchers have extensively developed TCP <ref> [P81] </ref> to provide the best service as a reliable transport protocol. Part of the protocols development focused on its ability to dynamically adapt to network congestion. Algorithms such as slowstart [J88] adjust TCPs transmission rate to achieve effective throughput even in adverse conditions.
Reference: [RF97] <author> Ramakrishnan, K. K., and Floyd, S. </author> <title> A Proposal to add Explicit Congestion Notif i-cation (ECN) to IPv6 and to TCP , IETF Draft draft-kksjf-ECN-00.txt, </title> <month> November </month> <year> 1997. </year>
Reference-contexts: It is then up to the receiver to inform the sender that congestion is occurring and that the sender should slow down. Ramakrishnan and Floyd have proposed to add ECN to TCP for IPv6 <ref> [RF97] </ref>. In conjunction with Random Early Detection (RED) [FJ93], a router queue-management scheme, ECN provides all the benefits of congestion detection and avoidance with less of the costly overhead of packet drops. We have implemented ECN for TCP and IPv6 on FreeBSD 2.2.2 systems.
References-found: 9

