URL: ftp://ftp.cs.washington.edu/tr/1994/10/UW-CSE-94-10-04.PS.Z
Refering-URL: http://www.cs.washington.edu/research/arch/sim-cons-opt.html
Root-URL: 
Email: e-mail: fbaer,xqing@cs.washington.edu  
Phone: phone: (206)-685-1376(baer), (206)-685-4087(xqin)  
Title: A Comparative Study of Conservative and Optimistic Trace-driven Simulations  
Author: Xiaohan Qin and Jean-Loup Baer 
Address: Seattle, Wa, 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Abstract: In this paper, we consider the evaluation of the memory hierarchy of multiprocessor systems via parallel trace-driven simulation. We study two parallel simulation schemes: a conservative one using an algorithm proposed by Lin et al. [10], whose main char acteristic is to insert the shared references from every trace in all other traces, and an optimistic one using a Time Warp-like [9] algorithm. We compare, qualitatively and quantitatively, the major causes of overhead and the overall performance of the two methods. In addition, we discuss the trade-offs in terms of implementation and debugging effort and of application to more general architectural simulation. The optimistic scheme is more complex but, in general, has slightly better performance, is more general, and does not require preprocessing. fl This work was supported in part by NSF Grants CCR-91-01541, CCR-91-23308 and CCR-94-01689
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James Archibald and Jean-Loup Baer. </author> <title> "Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model". </title> <journal> ACM Transactions on Computer Systems, Vol.4, </journal> <volume> No.4, </volume> <month> November </month> <year> 1986, </year> <pages> 273-298. </pages>
Reference-contexts: Each processor of the target system has a private cache memory. Processors are connected to each other and to global memory via an interconnection network. We simulate three different protocols - Berkeley, Illinois, and Firefly <ref> [1] </ref> that vary in the type and amount of com munication involved in the target system and henceforth will impact the performance of the parallel simulations.
Reference: [2] <author> Eric A. Brewer, Chrysanthos N.Dellarocas, Adrian Colbrook and William E.Weihl. "PROTEUS: </author> <title> A High-Performance Parallel-Architecture Simulator". </title> <type> Technical Report MIT/LCS/TR-516, </type> <institution> Laboratory for Computer Science, MIT. </institution>
Reference-contexts: Moreover, an additional motivation is that the functioning of the target system exhibits natural parallelism: instructions from distinct simulated processors may be issued and carried out independently and concurrently. State of the art simulators of parallel architectures such as Proteus <ref> [2] </ref> and Tango [8] run on single processor workstations. Recently execution-driven parallel simulators for parallel architectures [13, 3] have been implemented on specific parallel architectures (the TMI CM-5 and BBN Butterfly respectively). The challenge in these parallel simulators is to provide effective means to simulate the communication among processors.
Reference: [3] <author> Eugene D. Brooks III, Timothy S. Axelrod, Gregory A. Darmohray. </author> " <title> The Cerberus Multiprocessor Simulator". </title> <booktitle> Parallel Processing for Scientific Computing, </booktitle> <pages> 384-390, </pages> <publisher> SIAM, </publisher> <year> 1989. </year>
Reference-contexts: State of the art simulators of parallel architectures such as Proteus [2] and Tango [8] run on single processor workstations. Recently execution-driven parallel simulators for parallel architectures <ref> [13, 3] </ref> have been implemented on specific parallel architectures (the TMI CM-5 and BBN Butterfly respectively). The challenge in these parallel simulators is to provide effective means to simulate the communication among processors.
Reference: [4] <author> R.E. Bryant. </author> <title> "Simulation of Packet Communications Architecture Computer Systems". </title> <publisher> MIT-LCS-TR-188, MIT, </publisher> <year> 1977. </year>
Reference-contexts: A fundamental difference between the two approaches is that in a conservative scheme, correct computation is guaranteed at an arbitrary point of the simulation, while in an optimistic scheme speculative errors may occur, but they will be corrected before the simulation completes. Chandy-Misra-Bryant methods <ref> [5, 4] </ref> are the best-known conservative simulation methods. In this mode, a process needs to frequently synchronize and exchange "time" information with other processes in order to decide whether it is safe to execute the next event in its input queue.
Reference: [5] <author> K.M. Chandy and J. Misra. </author> <title> "A Case Study in Design and Verification of Distributed Programs". </title> <journal> IEEE Trans. on Software and Engineering, </journal> <month> Sept </month> <year> 1979, </year> <pages> 440-452. </pages>
Reference-contexts: A fundamental difference between the two approaches is that in a conservative scheme, correct computation is guaranteed at an arbitrary point of the simulation, while in an optimistic scheme speculative errors may occur, but they will be corrected before the simulation completes. Chandy-Misra-Bryant methods <ref> [5, 4] </ref> are the best-known conservative simulation methods. In this mode, a process needs to frequently synchronize and exchange "time" information with other processes in order to decide whether it is safe to execute the next event in its input queue.
Reference: [6] <author> S.J. Eggers, D.R. Keppel, E.J. Koldinger and H.M. Levy. </author> <title> "Techniques for Efficient Inline Tracing on a Shared-Memory Multiprocessor". </title> <booktitle> 1990 ACM Sigmetrics conference on Measurement and Modeling of Computer Systems, </booktitle> <address> pp37-47, </address> <year> 1990. </year>
Reference-contexts: were selected because they are "real applications", the proportion of shared references misses varies from application to application so that we can examine the performance of trace-driven simulation as a function of the overhead of communication and synchronization, and the traces were already collected on the Sequent system using MPTrace <ref> [6] </ref>. Table 3 shows the memory access characteristics of the four applications. All of the above applications have 12 input trace files. The data given in Table 3 are average numbers for the multiple trace streams of one application.
Reference: [7] <author> R. Fujimoto. </author> <title> "Parallel Discrete Event Simulation". </title> <journal> Communication of the ACM, </journal> <volume> Vol. 33, No. 10, </volume> <month> Oct. </month> <year> 1990, </year> <pages> 30-53. </pages>
Reference-contexts: It is therefore critical to keep the amount and cost of communication as low as possible if we want to achieve good performance. Parallel simulation methods can be broadly classified into two categories <ref> [7] </ref>: conservative methods and optimistic methods. A fundamental difference between the two approaches is that in a conservative scheme, correct computation is guaranteed at an arbitrary point of the simulation, while in an optimistic scheme speculative errors may occur, but they will be corrected before the simulation completes. <p> These optimizations are not possible in the straightforward conservative simulation. The benefit obtained by paying the price of the overhead of state saving and rollback processing is that the logical processes can exploit speculation and lookahead <ref> [7] </ref>. This is particularly applicable to cache simulations where most events are only partially ordered (cache line states are independent of each other).
Reference: [8] <author> H.Davis, S. Goldschmidt and J.L. Hennessy. </author> <title> "Multiprocessor simulation and tracing using Tango". </title> <booktitle> Proceedings of the 1991 International Conference on Parallel Processing, </booktitle> <volume> Vol. I, pp.99-107, </volume> <year> 1991 </year>
Reference-contexts: Moreover, an additional motivation is that the functioning of the target system exhibits natural parallelism: instructions from distinct simulated processors may be issued and carried out independently and concurrently. State of the art simulators of parallel architectures such as Proteus [2] and Tango <ref> [8] </ref> run on single processor workstations. Recently execution-driven parallel simulators for parallel architectures [13, 3] have been implemented on specific parallel architectures (the TMI CM-5 and BBN Butterfly respectively). The challenge in these parallel simulators is to provide effective means to simulate the communication among processors.
Reference: [9] <author> D. Jefferson. </author> <title> "Virtual Time". </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 7, No. 3, </volume> <month> July </month> <year> 1985, </year> <pages> 404-425. </pages>
Reference-contexts: Deadlock happens when all the processes are blocked. In an implementation with deadlock avoidance this will occur only at the end of the simulation. Other implementations favor a detection and recovery scheme. The best-known optimistic method is Time Warp <ref> [9] </ref>. Processes in the optimistic simulation maintain and advance independently their own simulated (virtual) time. Processes communicate through timestamped messages.
Reference: [10] <author> Y-B Lin, E. D. Lazowska and Jean-Loup Baer. </author> <title> "Parallel Trace-Driven Simulation of Multiprocessor Cache Performance: Algorithms and Analysis". Progress in Simulation, Vol.1 No.1, </title> <publisher> Ablex Publishing, </publisher> <year> 1992, </year> <pages> 44-80. </pages>
Reference-contexts: In this paper, we consider the evaluation of the memory hierarchy of multiprocessor systems via parallel trace-driven simulation. We have designed and implemented a conservative simulator based on a method proposed by Lin et al. <ref> [10, 11] </ref>, and an optimistic simulator based on the Time Warp algorithm [12]. In Section 2, we describe the ideas, algorithms and important data structures for the conservative and the optimistic simulations respectively. A qualitative comparison between the two schemes is then presented in Section 3.
Reference: [11] <author> X. Qin and J.-L. Baer. </author> <title> "A Parallel Trace-driven Simulator: Implementation and Performance". </title> <booktitle> Proceedings of International Conference on Parallel Processing, </booktitle> <month> August, </month> <year> 1994 </year> <month> II314-II318. </month>
Reference-contexts: In this paper, we consider the evaluation of the memory hierarchy of multiprocessor systems via parallel trace-driven simulation. We have designed and implemented a conservative simulator based on a method proposed by Lin et al. <ref> [10, 11] </ref>, and an optimistic simulator based on the Time Warp algorithm [12]. In Section 2, we describe the ideas, algorithms and important data structures for the conservative and the optimistic simulations respectively. A qualitative comparison between the two schemes is then presented in Section 3. <p> Further communication optimization can be found in <ref> [11] </ref>. Table 1 displays where communication might be necessary in simulating various cache coherence protocols. <p> There is also a space issue since it appears that all traces are becoming longer but in fact this can be mitigated to a great extent by sharing the shared reference file (implementation details can be found in <ref> [11] </ref>). Preprocessing adds a significant advantage to the conservative method and makes it unique in a number of ways. In typical Chandy-Misra-Bryant conservative methods, frequent synchronizations are required to decide when it is safe for a process to proceed. <p> The more shared references there are, the more extra references to be simulated, and the more message passing there will be. As shown in <ref> [11] </ref>, with careful design in data placement and communication optimization, message passing can be conducted efficiently. As for the synchronization overhead, we measured the time that each process waited in execution. It turns out that the synchronization overhead is a small fraction of total execution time (at most 7%). <p> Second, most of the messages sent in the conservative simulation are not needed. The recipients can quickly skip over such messages by using an efficient search scheme such as binary search 14 <ref> [11] </ref>. In fact the amount of messages that are actually processed after the communication optimization in the conservative simulation is nearly the same as the amount of messages in the optimistic simulation.
Reference: [12] <author> X. Qin and J.-L. Baer. </author> <title> "Optimistic Trace-driven Simulation". </title> <note> Submitted for publication. 16 </note>
Reference-contexts: In this paper, we consider the evaluation of the memory hierarchy of multiprocessor systems via parallel trace-driven simulation. We have designed and implemented a conservative simulator based on a method proposed by Lin et al. [10, 11], and an optimistic simulator based on the Time Warp algorithm <ref> [12] </ref>. In Section 2, we describe the ideas, algorithms and important data structures for the conservative and the optimistic simulations respectively. A qualitative comparison between the two schemes is then presented in Section 3. <p> On the contrary, the dynamic data structures for the optimistic approach are not as simple, their management is quite elaborate (specific messages in the simulation are devoted to the reclaiming of memory and synchronization of logical processes that might be running "too fast" <ref> [12] </ref>) and, for example, procedures to restore state, test for rollback and cancel messages only when necessary require care. Furthermore, as in any speculative paradigm, the optimistic simulation is hard to debug. <p> In general, the Illinois simulation generates more messages and bears a higher synchronization overhead; its speedup will therefore tend to be lower than Berkeley's. (For detailed analysis on the amount and the types of the messages generated by a particular cache coherence protocol and their impact on the performance, see <ref> [12] </ref>). The speedup when simulating the Firefly protocol will be even lower in cases where the communication and synchronization overhead outweighs the rollback overhead. The simulations of the Locus and Maxflow traces basically match this 13 pattern.
Reference: [13] <author> Steven Reinhardt, Mark Hill and James Larus. </author> " <title> The Wisconsin Wind Tunnel: Virtual Prototyping of Parallel Computers". </title> <booktitle> 1993 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> pp48-60, </address> <year> 1993. </year>
Reference-contexts: State of the art simulators of parallel architectures such as Proteus [2] and Tango [8] run on single processor workstations. Recently execution-driven parallel simulators for parallel architectures <ref> [13, 3] </ref> have been implemented on specific parallel architectures (the TMI CM-5 and BBN Butterfly respectively). The challenge in these parallel simulators is to provide effective means to simulate the communication among processors.
Reference: [14] <author> Jaswinder Pal Singh, Wolf Dietrich Weber and Anoop Gupta. </author> <title> "SPLASH: Stanford Parallel Applications for Shared-Memory". Computer Architecture News, </title> <address> Vol.20, No.1, pp5-44, </address> <month> March </month> <year> 1992. </year> <month> 17 </month>
Reference-contexts: Cache miss numbers are based on the optimistic simulation 1 . 4 Performance Results 4.1 Applications and Traces Four applications were chosen to measure the performance of the parallel simulators. They are Water, Locus, Mp3D and Maxflow. The first three are in the Splash benchmark suite <ref> [14] </ref>. Water is a scientific application which simulates the evolution of a system of water molecules in the liquid state. Locus is a commercial quality VLSI standard cell router. Mp3d solves problem in rarefied fluid flow simulation.
References-found: 14

