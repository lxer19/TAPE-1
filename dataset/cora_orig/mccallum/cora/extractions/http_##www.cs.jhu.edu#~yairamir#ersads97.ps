URL: http://www.cs.jhu.edu/~yairamir/ersads97.ps
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: Efficient State Transfer in Partitionable Environments  
Author: Yair Amir Gregory V. Chockler Danny Dolev Roman Vitenberg 
Keyword: group membership of Transis communication system.  
Address: Baltimore MD 21218,  Jerusalem, Jerusalem 91904, Israel.  Jerusalem, Jerusalem 91904, Israel.  Jerusalem, Jerusalem 91904, Israel.  
Affiliation: Department of Computer Science, The Johns Hopkins University,  Information Sciences.  of Computer Science, The Hebrew University of  of Computer Science, The Hebrew University of  of Computer Science, The Hebrew University of  
Note: Currently, the protocol is implemented as part of the This work was partially supported by ARPA grant No. OSP#28899-5530 and by the Ministry of Science of Israel, grant number 834-6195 E-mail: yairamir@cs.jhu.edu,  and the NASA Center of Excellence in Space Data and  Institute  Institute  Institute  
Email: E-mail: grishac@cs.huji.ac.il,  E-mail: dolev@cs.huji.ac.il,  -E-mail: romanv@cs.huji.ac.il,  
Date: February 1, 1997  
Abstract: Object replication is one of the most useful techniques in distributed computing because it facilitates fault-tolerance and increases the availability of distributed services. Consistent replication is the focus of traditional distributed database applications as well as of Computer Supported Cooperative Work applications. Other applications that can take advantage of consistent object replication are those operating in a mobile environment. However, in asynchronous environments prone to machines and communication link failures, disconnected replicas may find themselves with different states. The State Transfer problem is to bring such replicas to a consistent state when they re-connect again. Our work presents an efficient State Transfer layer that may serve as a building block in consistent object replication protocols. The traditional Virtual Synchrony model does not provide sufficient services and guarantees in order to implement the State Transfer layer efficiently. Our solution is based on utilizing the notions of hidden membership and transitional set, which were proposed as basic concepts of the Extended Virtual Synchrony model. In this paper we further elaborate the definitions of hidden membership and transitional set in order to shed light on the subtle aspects of membership service in partitionable environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A Highly Available Application in the Transis Environment. In Proceedings of the Hardware and Software Architectures for Fault Tolerance Workshop, </title> <institution> at Le Mont Saint-Michel, France (LNCS 774), </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis [4] and Totem [6] environments. Replication is the focus of traditional distributed database applications <ref> [19, 5, 1, 2] </ref> as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. Other applications that employ object replication are those operating in a mobile environment. <p> In contrast, the main objective of our paper is the subtleties of the underlying communication model that render the efficient identification of the set of processes with the same state feasible. We show that the extended virtual synchrony model, used by numerous distributed applications <ref> [19, 5, 1, 2] </ref>, allows tackling the State Transfer problem elegantly and efficiently. 2 System Model 2.1 Environment and Failure Model The system consists of a group of processes, communicating via asynchronous multicast messages. A process may incur a crash failure and restart.
Reference: [2] <author> Y. Amir, D. Breitgand, G. Chockler, and D. Dolev. </author> <title> Group Communication as an Infrastructure for Distributed System Management. </title> <booktitle> In International Workshop on Services in Distributed and Networked Environment, number 3rd, </booktitle> <month> June </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis [4] and Totem [6] environments. Replication is the focus of traditional distributed database applications <ref> [19, 5, 1, 2] </ref> as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. Other applications that employ object replication are those operating in a mobile environment. <p> In contrast, the main objective of our paper is the subtleties of the underlying communication model that render the efficient identification of the set of processes with the same state feasible. We show that the extended virtual synchrony model, used by numerous distributed applications <ref> [19, 5, 1, 2] </ref>, allows tackling the State Transfer problem elegantly and efficiently. 2 System Model 2.1 Environment and Failure Model The system consists of a group of processes, communicating via asynchronous multicast messages. A process may incur a crash failure and restart.
Reference: [3] <author> Y. Amir, G. Chockler, D. Dolev, and R. Viten-berg. </author> <title> Efficient State Transfer in Partitionable Environment. </title> <type> TR 97-1, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: It is further assumed that a failure cannot alter the content of a message. We assume the system model appearing in Figure 1. The State Transfer module is assumed to be part of the application. In the full version of this paper <ref> [3] </ref> we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service [21, 14, 25, 17, 9] and a totally ordered multicast service, and that guarantees certain properties, <p> In the following discussion, installation of a regular view refers to an installation of an extended view EV such that EV:reg = . In order to provide a strict definition, we make use of the notion of hidden installation, introduced in [22] and further developed in <ref> [14, 3] </ref>. Intuitively, to achieve the agreement, the membership protocol running on some process has to give its consent to the next regular view . Upon giving the consent, the membership protocol signals this action by an internal event, called hidden installation of .
Reference: [4] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <booktitle> In 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The State Transfer problem is to bring such replicas to a consistent state when they re-connect. This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis <ref> [4] </ref> and Totem [6] environments. Replication is the focus of traditional distributed database applications [19, 5, 1, 2] as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. <p> Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification. <p> Our proposed State Transfer module may be implemented on top of any group communication layer that preserves extended virtual synchrony. Transis <ref> [4] </ref> and Totem [6] present examples of such systems, where the transitional set is implemented at no additional cost, compared with virtually synchronous group communication. The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. <p> All these services and properties are a strict subset of the Extended Virtual Synchrony [21] model, supported by the Transis <ref> [4] </ref> and Totem [6] systems. 2 2.2.1 Membership Service Membership is a fundamental paradigm of fault-tolerant distributed computing. Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes.
Reference: [5] <author> Y. Amir, D. Dolev, P. M. Melliar-Smith, and L. E. Moser. </author> <title> Robust and Efficient Replication Using Group Communication. </title> <type> TR CS94-20, </type> <institution> Institute of computer science, The Hebrew University of Jerusalem, </institution> <year> 1994. </year>
Reference-contexts: This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis [4] and Totem [6] environments. Replication is the focus of traditional distributed database applications <ref> [19, 5, 1, 2] </ref> as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. Other applications that employ object replication are those operating in a mobile environment. <p> In contrast, the main objective of our paper is the subtleties of the underlying communication model that render the efficient identification of the set of processes with the same state feasible. We show that the extended virtual synchrony model, used by numerous distributed applications <ref> [19, 5, 1, 2] </ref>, allows tackling the State Transfer problem elegantly and efficiently. 2 System Model 2.1 Environment and Failure Model The system consists of a group of processes, communicating via asynchronous multicast messages. A process may incur a crash failure and restart.
Reference: [6] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella. </author> <title> The totem single-ring ordering and membership protocol. </title> <journal> ACM Trans. on Comp. Syst., </journal> <volume> 13(4), </volume> <month> November </month> <year> 1995. </year>
Reference-contexts: This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis [4] and Totem <ref> [6] </ref> environments. Replication is the focus of traditional distributed database applications [19, 5, 1, 2] as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. <p> Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification. <p> Our proposed State Transfer module may be implemented on top of any group communication layer that preserves extended virtual synchrony. Transis [4] and Totem <ref> [6] </ref> present examples of such systems, where the transitional set is implemented at no additional cost, compared with virtually synchronous group communication. The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. <p> All these services and properties are a strict subset of the Extended Virtual Synchrony [21] model, supported by the Transis [4] and Totem <ref> [6] </ref> systems. 2 2.2.1 Membership Service Membership is a fundamental paradigm of fault-tolerant distributed computing. Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes. <p> The Extended Virtual Synchrony model [21], exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem <ref> [6] </ref> and Transis [26]. At the same time the EVS model is strong enough to solve the shared state problem efficiently.
Reference: [7] <author> O. Babaoglu, A. Bartoli, and G. Dini. </author> <title> On Programming with View Synchrony. </title> <booktitle> In Intl. Conference on Distributed Computing Systems, number 16th, </booktitle> <pages> pages 3-10, </pages> <month> May </month> <year> 1996. </year> <note> Also available as technical report UBLCS95-15, </note> <institution> Department of Computer Science, University of Bologna, </institution> <year> 1995. </year>
Reference-contexts: The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. Other work tackling the state transfer problem can be found in <ref> [13, 7, 18] </ref>. The approach presented in [7] is the closest to ours. This work defines the shared state problem in a parti-tionable environment and contains a detailed survey of its different aspects. <p> The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. Other work tackling the state transfer problem can be found in [13, 7, 18]. The approach presented in <ref> [7] </ref> is the closest to ours. This work defines the shared state problem in a parti-tionable environment and contains a detailed survey of its different aspects. <p> It demonstrates that traditional view synchrony cannot provide accurate information regarding which members of the newly installed view have the same state of the shared object. The work introduces an extension of the view synchrony model, called enriched view synchrony. However, the main contribution of <ref> [7] </ref> is a new high level paradigm for building distributed applications, operating in group communication framework. In contrast, the main objective of our paper is the subtleties of the underlying communication model that render the efficient identification of the set of processes with the same state feasible. <p> As was observed by Cristian [13] and subsequently elaborated by Babaoglu et al. <ref> [7] </ref>, the traditional Virtual Synchrony model is not sufficient to derive information regarding which processes proceed together through the same consecutive regular views. <p> Furthermore, the authors do not discuss the issue 3 Recall that the installation of a regular view means an installation of an extended view with a reg field equal to this regular view. 4 Actually, <ref> [7] </ref> relies on the model, defined in [9], in which several properties are unnecessary. 4 of the efficient implementation of the concept. The Extended Virtual Synchrony model [21], exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem [6] and Transis [26]. <p> a reg field equal to this regular view. 4 Actually, <ref> [7] </ref> relies on the model, defined in [9], in which several properties are unnecessary. 4 of the efficient implementation of the concept. The Extended Virtual Synchrony model [21], exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem [6] and Transis [26]. At the same time the EVS model is strong enough to solve the shared state problem efficiently. <p> It should be emphasized, that the concept of enriched view is easily implementable on the top of our model. 3 The State Transfer Problem In this section we present the definition of the State Transfer problem. The definition is similar to the one given in <ref> [7] </ref>. 3.1 Object's State Each instance of the application maintains a replica of the distributed object. Although the definition of an actual object is application dependent, the following structure is generic: An object consists of a state (a set of variables) and a collection of methods to manipulate these variables.
Reference: [8] <author> O. Babaoglu, R. Davoli, L. Giachini, and M. Baker. RELACS: </author> <title> A Communication Infrastructure for Constructing Reliable Applications in Large-Scale Distributed Systems. </title> <type> TR UBLCS94-15, </type> <institution> Laboratory of Computer Science, University of Bologna, </institution> <year> 1994. </year>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification.
Reference: [9] <author> O. Babaoglu, R. Davoli, and A. Montre-sor. </author> <title> Failure detectors, group membership and view-synchronous communication in partition-able asynchronous systems. </title> <type> TR UBLCS95-18, </type> <institution> Department of Conmputer Science, University of Bologna, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: In the full version of this paper [3] we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service <ref> [21, 14, 25, 17, 9] </ref> and a totally ordered multicast service, and that guarantees certain properties, described in the following sections. <p> Furthermore, the authors do not discuss the issue 3 Recall that the installation of a regular view means an installation of an extended view with a reg field equal to this regular view. 4 Actually, [7] relies on the model, defined in <ref> [9] </ref>, in which several properties are unnecessary. 4 of the efficient implementation of the concept. The Extended Virtual Synchrony model [21], exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem [6] and Transis [26].
Reference: [10] <author> K. P. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. 8 </month>
Reference-contexts: Transis [4] and Totem [6] present examples of such systems, where the transitional set is implemented at no additional cost, compared with virtually synchronous group communication. The state transfer tool of Isis <ref> [10] </ref> was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. Other work tackling the state transfer problem can be found in [13, 7, 18]. The approach presented in [7] is the closest to ours.
Reference: [11] <author> K. P. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In 11th Ann. Symp. Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> Nov 87. </month>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification. <p> Virtual synchrony <ref> [24, 11] </ref> implies that if two processes install the same two consecutive views V 1 and V 2 , then the same set of messages is delivered at the processes between these views. This property is called Failure Atomicity in the extended virtual synchrony model [21].
Reference: [12] <author> T. D. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost. </author> <title> On the Impossibility of Group Membership. </title> <booktitle> In Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 322-330, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes. Membership belongs to the same class of problems as distributed Consensus and Atomic Broadcast and, like them, does not have a solution that always terminates <ref> [16, 12, 26] </ref>. Yet, a membership service is vital for the development of fault tolerant applications and distributed systems that are exposed to the kinds of failures sketched in Section 2.1. The membership service described below is parti-tionable. This means that several disjoint components of processes may co-exist. <p> was the last regular view delivered at q before 0 was installed at q as a hidden view 2 . 2.3 Discussion Both absolute agreement and accuracy requirements from a partitionable membership service are satisfiable only with a very strong failure detector, which is not realistic in an asynchronous environe-ment <ref> [16, 12, 26] </ref>. In practice, every virtual synchrony model weakens the agreement requirement. Consequently, a process that decides on a regular view, cannot know whether the decision values of other members of the view are different from this regular view. <p> In particular, if there was only one class, no messages need be sent. Unfortunately, an accurate membership service in an asynchronous environment is impossible <ref> [16, 12] </ref>. Therefore, there is no way for a process to know the precise membership of its class.
Reference: [13] <author> Flaviu Cristian. </author> <title> Group, majority, and strict agreement in timed asynchronous distributed systems. </title> <booktitle> In International Symposium on Fault-Tolerant Computing, number 26th, </booktitle> <year> 1996. </year>
Reference-contexts: The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. Other work tackling the state transfer problem can be found in <ref> [13, 7, 18] </ref>. The approach presented in [7] is the closest to ours. This work defines the shared state problem in a parti-tionable environment and contains a detailed survey of its different aspects. <p> As was observed by Cristian <ref> [13] </ref> and subsequently elaborated by Babaoglu et al. [7], the traditional Virtual Synchrony model is not sufficient to derive information regarding which processes proceed together through the same consecutive regular views.
Reference: [14] <author> D. Dolev, D. Malki, and H. R. </author> <title> Strong. A Framework for Partitionable Membership Service. </title> <booktitle> In Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <month> May </month> <year> 1996. </year> <note> Full version vailable as TR94-6, </note> <institution> Inst. of Comp. Sci., the Hebrew University of Jerusalem. </institution>
Reference-contexts: Our solution overcomes this difficulty by utilizing the notions of hidden membership and transitional set, which were proposed as basic concepts of the Extended Virtual Synchrony model (EVS) <ref> [21, 14] </ref>. The transitional membership notification, complementing the regular membership notification, enables each replica to locally determine the set of other members that have the same state. <p> In the full version of this paper [3] we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service <ref> [21, 14, 25, 17, 9] </ref> and a totally ordered multicast service, and that guarantees certain properties, described in the following sections. <p> In the following discussion, installation of a regular view refers to an installation of an extended view EV such that EV:reg = . In order to provide a strict definition, we make use of the notion of hidden installation, introduced in [22] and further developed in <ref> [14, 3] </ref>. Intuitively, to achieve the agreement, the membership protocol running on some process has to give its consent to the next regular view . Upon giving the consent, the membership protocol signals this action by an internal event, called hidden installation of .
Reference: [15] <author> P. D. Ezhilchelvan, A. Macedo, and S. K. Shri-vastava. Newtop: </author> <title> a fault tolerant group communication protocol. </title> <booktitle> In International Conference on Distributed Computing Systems, number 15th, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification.
Reference: [16] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes. Membership belongs to the same class of problems as distributed Consensus and Atomic Broadcast and, like them, does not have a solution that always terminates <ref> [16, 12, 26] </ref>. Yet, a membership service is vital for the development of fault tolerant applications and distributed systems that are exposed to the kinds of failures sketched in Section 2.1. The membership service described below is parti-tionable. This means that several disjoint components of processes may co-exist. <p> was the last regular view delivered at q before 0 was installed at q as a hidden view 2 . 2.3 Discussion Both absolute agreement and accuracy requirements from a partitionable membership service are satisfiable only with a very strong failure detector, which is not realistic in an asynchronous environe-ment <ref> [16, 12, 26] </ref>. In practice, every virtual synchrony model weakens the agreement requirement. Consequently, a process that decides on a regular view, cannot know whether the decision values of other members of the view are different from this regular view. <p> In particular, if there was only one class, no messages need be sent. Unfortunately, an accurate membership service in an asynchronous environment is impossible <ref> [16, 12] </ref>. Therefore, there is no way for a process to know the precise membership of its class.
Reference: [17] <author> Roy Friedman and Robbert Van Renesse. </author> <title> Strong and Weak Virtual Synchrony in Horus. </title> <type> TR 95-1537, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: In the full version of this paper [3] we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service <ref> [21, 14, 25, 17, 9] </ref> and a totally ordered multicast service, and that guarantees certain properties, described in the following sections.
Reference: [18] <author> J. H. Howard and S. Katz. Reconciliations. </author> <booktitle> In Annual ACM Symp. on Principles of Distributed Computing, number 13th, </booktitle> <pages> pages 14-21. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1994. </year>
Reference-contexts: The state transfer tool of Isis [10] was, perhaps, the first to provide a generic solution to this problem, although in a primary partition model. Other work tackling the state transfer problem can be found in <ref> [13, 7, 18] </ref>. The approach presented in [7] is the closest to ours. This work defines the shared state problem in a parti-tionable environment and contains a detailed survey of its different aspects.
Reference: [19] <author> I. Keidar and D. Dolev. </author> <title> Efficient Message Ordering in Dynamic Networks. </title> <booktitle> In Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 68-76, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: This paper presents an efficient implementation of the State Transfer module that may serve as a building block in object replication protocols. This module was implemented and exploited by applications in the Transis [4] and Totem [6] environments. Replication is the focus of traditional distributed database applications <ref> [19, 5, 1, 2] </ref> as well as of Computer Supported Cooperative Work [23] applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. Other applications that employ object replication are those operating in a mobile environment. <p> In contrast, the main objective of our paper is the subtleties of the underlying communication model that render the efficient identification of the set of processes with the same state feasible. We show that the extended virtual synchrony model, used by numerous distributed applications <ref> [19, 5, 1, 2] </ref>, allows tackling the State Transfer problem elegantly and efficiently. 2 System Model 2.1 Environment and Failure Model The system consists of a group of processes, communicating via asynchronous multicast messages. A process may incur a crash failure and restart.
Reference: [20] <author> C. P. Malloth, P. Felber, A. Schiper, and U. Wilhelm. </author> <title> Phoenix: A Toolkit for Building Fault-Tolerant, Distributed Applications in Large Scale. </title> <booktitle> In Workshop on Parallel and Distributed Platforms in Industrial Products, </booktitle> <month> October </month> <year> 1995. </year>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification.
Reference: [21] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended Virtual Synchrony. </title> <booktitle> In Intl. Conference on Distributed Computing Systems, </booktitle> <volume> number 14, </volume> <pages> pages 56-65, </pages> <month> June </month> <year> 1994. </year> <note> Also available as technical report ECE93-22, </note> <institution> Department of Electrical and Computer Engineering, University of California, Santa Barbara, </institution> <address> CA. </address>
Reference-contexts: Our solution overcomes this difficulty by utilizing the notions of hidden membership and transitional set, which were proposed as basic concepts of the Extended Virtual Synchrony model (EVS) <ref> [21, 14] </ref>. The transitional membership notification, complementing the regular membership notification, enables each replica to locally determine the set of other members that have the same state. <p> In the full version of this paper [3] we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service <ref> [21, 14, 25, 17, 9] </ref> and a totally ordered multicast service, and that guarantees certain properties, described in the following sections. <p> All these services and properties are a strict subset of the Extended Virtual Synchrony <ref> [21] </ref> model, supported by the Transis [4] and Totem [6] systems. 2 2.2.1 Membership Service Membership is a fundamental paradigm of fault-tolerant distributed computing. Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes. <p> Virtual synchrony [24, 11] implies that if two processes install the same two consecutive views V 1 and V 2 , then the same set of messages is delivered at the processes between these views. This property is called Failure Atomicity in the extended virtual synchrony model <ref> [21] </ref>. <p> Essentially, the transitional set is contained in the transitional view, which is an innovative paradigm of Extended Virtual Synchrony <ref> [21] </ref>. In the following discussion, installation of a regular view refers to an installation of an extended view EV such that EV:reg = . In order to provide a strict definition, we make use of the notion of hidden installation, introduced in [22] and further developed in [14, 3]. <p> The Extended Virtual Synchrony model <ref> [21] </ref>, exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem [6] and Transis [26]. At the same time the EVS model is strong enough to solve the shared state problem efficiently.
Reference: [22] <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using Process Groups to Implement Failure Detection in Asynchronous Environments. </title> <booktitle> In proc. annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-352, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: In the following discussion, installation of a regular view refers to an installation of an extended view EV such that EV:reg = . In order to provide a strict definition, we make use of the notion of hidden installation, introduced in <ref> [22] </ref> and further developed in [14, 3]. Intuitively, to achieve the agreement, the membership protocol running on some process has to give its consent to the next regular view . Upon giving the consent, the membership protocol signals this action by an internal event, called hidden installation of .
Reference: [23] <author> Tom Rodden. </author> <title> A survey of CSCW systems. </title> <journal> Interacting with Computers, </journal> <volume> 3(3) </volume> <pages> 319-353, </pages> <year> 1991. </year>
Reference-contexts: This module was implemented and exploited by applications in the Transis [4] and Totem [6] environments. Replication is the focus of traditional distributed database applications [19, 5, 1, 2] as well as of Computer Supported Cooperative Work <ref> [23] </ref> applications. The latter includes multimedia and desktop conferencing systems, interactive distributed games and simulations, distributed applications with shared workspace, etc. Other applications that employ object replication are those operating in a mobile environment. In such an environment, changes in network connectivity are particularly frequent.
Reference: [24] <author> A. Schiper and A. Sandoz. </author> <title> Uniform Reliable Mul-ticast in a Virtually Synchronous Environment. </title> <booktitle> In IEEE Proc. of the 13th Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 561-568, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Virtual synchrony <ref> [24, 11] </ref> implies that if two processes install the same two consecutive views V 1 and V 2 , then the same set of messages is delivered at the processes between these views. This property is called Failure Atomicity in the extended virtual synchrony model [21].
Reference: [25] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and Performance of Horus: A Lightweight Group Communications System. </title> <type> TR 94-1442, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification. <p> In the full version of this paper [3] we elaborate on the implementation and on the interface between the application and the module. 2.2 Communication Subsystem Our model assumes the existence of an underlying communication subsystem that provides a parti-tionable membership service <ref> [21, 14, 25, 17, 9] </ref> and a totally ordered multicast service, and that guarantees certain properties, described in the following sections.
Reference: [26] <author> R. Vitenberg, G. Chockler, D. Dolev, and I. Kei-dar. </author> <title> Partitionable Membership: Bridging the Gap Between the Theory and Practice. </title> <type> Tr, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <month> February </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Its objective is to maintain the list of currently connected and operational processes and to notify the application each time the list changes. Membership belongs to the same class of problems as distributed Consensus and Atomic Broadcast and, like them, does not have a solution that always terminates <ref> [16, 12, 26] </ref>. Yet, a membership service is vital for the development of fault tolerant applications and distributed systems that are exposed to the kinds of failures sketched in Section 2.1. The membership service described below is parti-tionable. This means that several disjoint components of processes may co-exist. <p> was the last regular view delivered at q before 0 was installed at q as a hidden view 2 . 2.3 Discussion Both absolute agreement and accuracy requirements from a partitionable membership service are satisfiable only with a very strong failure detector, which is not realistic in an asynchronous environe-ment <ref> [16, 12, 26] </ref>. In practice, every virtual synchrony model weakens the agreement requirement. Consequently, a process that decides on a regular view, cannot know whether the decision values of other members of the view are different from this regular view. <p> The Extended Virtual Synchrony model [21], exploited in our paper, is essentially weaker than the model used in [7] and was efficiently implemented in Totem [6] and Transis <ref> [26] </ref>. At the same time the EVS model is strong enough to solve the shared state problem efficiently.
Reference: [27] <author> B. Whetten, T. Montgomery, and S. Kaplan. </author> <title> A high perfomance totally ordered multicast protocol. </title> <editor> In K. P. Birman, F. Mattern, and A. Schip-per, editors, </editor> <booktitle> Theory and Practice in Distributed Systems: International Workshop, </booktitle> <pages> pages 33-57. </pages> <publisher> Springer, </publisher> <year> 1995. </year> <note> Lecture Notes in Computer Science 938. 9 </note>
Reference-contexts: Basic services that help solving the State Transfer problem are reliable, totally ordered multicast and membership services, typically provided by group communication systems <ref> [20, 4, 6, 25, 11, 8, 15, 27] </ref>. A straight-forward and widely used protocol that accomplishes state transfer is the one in which every replica 1 multicasts its state upon receiving a membership no-tification.
References-found: 27

