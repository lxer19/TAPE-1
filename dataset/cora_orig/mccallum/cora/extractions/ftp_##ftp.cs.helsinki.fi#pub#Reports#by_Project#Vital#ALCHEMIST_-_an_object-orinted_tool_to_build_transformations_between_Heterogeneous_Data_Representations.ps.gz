URL: ftp://ftp.cs.helsinki.fi/pub/Reports/by_Project/Vital/ALCHEMIST_-_an_object-orinted_tool_to_build_transformations_between_Heterogeneous_Data_Representations.ps.gz
Refering-URL: http://www.cs.Helsinki.FI:80/research/rati/publications.html
Root-URL: 
Title: ALCHEMIST an object-oriented tool to build transformations between Heterogeneous Data Representations  
Author: Henry Tirri Greger Linden 
Address: Helsinki, Finland Helsinki, Finland  
Affiliation: Department of Computer Science Department of Computer Science University of Helsinki University of Helsinki  
Abstract: between any well-defined representations. It allows users to define the syntactic structure of the data representations and the related structure associations with a grammar notation. These grammars can then be augmented with semantic operations. From this description a persistent object-oriented representation is formed and a transformation module is generated automatically. This transformation module relies on an object representation of the parse tree. In this paper the principles underlying ALCHEMIST are discussed and its object-oriented design decisions are described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> ACM. </editor> <title> Report of the CODASYL Data Base Task Group, </title> <month> April </month> <year> 1971. </year>
Reference-contexts: Even the most optimistic predictions acknowledge that several different representation standards will coexist in the future, regardless of the various standardization efforts. Examples of such coexistence can be found everywhere: object structure representations (CORBA, PCTE [5] ), data representations (CODASYL <ref> [1] </ref>, relational representations [4]), knowledge representations (INTERLINGUA [11], KL-ONE [3]), etc. It should be observed that transforming fl This research was supported by the Technology Development Center (TEKES) and in part by the Commission of the European Communities under ESPRIT-II project 5365 VITAL.
Reference: [2] <author> R. Agrawal and N. H. Gehani. </author> <title> ODE (object database and environment): The language and the data model. </title> <editor> In J. Clifford, B. Lindsay, and D. Maier, editors, </editor> <booktitle> Proceedings of the 1989 ACM SIGMOD International Conference on the Management of Data, Portland, Oregon, </booktitle> <pages> pages 36 - 45, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Thus the approach adopted relies heavily on persistent object repositories, as in a "real world" translation the intermediate object representations are too large to fit in the main memory. Currently the system is being built on top of ODE object-oriented database system from AT&T <ref> [2] </ref>. The transformations are off-line, i.e., from file to file, but eventually the toolkit will be extended to handle also online transformations.
Reference: [3] <author> R.J. Brachman and J.G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 2(9) </volume> <pages> 171-216, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Even the most optimistic predictions acknowledge that several different representation standards will coexist in the future, regardless of the various standardization efforts. Examples of such coexistence can be found everywhere: object structure representations (CORBA, PCTE [5] ), data representations (CODASYL [1], relational representations [4]), knowledge representations (INTERLINGUA [11], KL-ONE <ref> [3] </ref>), etc. It should be observed that transforming fl This research was supported by the Technology Development Center (TEKES) and in part by the Commission of the European Communities under ESPRIT-II project 5365 VITAL. This paper reflects the opinions of the authors and not necessarily those of the consortium.
Reference: [4] <author> E. Codd. </author> <title> A relational mode for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6):377 - 387, </volume> <month> June </month> <year> 1970. </year>
Reference-contexts: Even the most optimistic predictions acknowledge that several different representation standards will coexist in the future, regardless of the various standardization efforts. Examples of such coexistence can be found everywhere: object structure representations (CORBA, PCTE [5] ), data representations (CODASYL [1], relational representations <ref> [4] </ref>), knowledge representations (INTERLINGUA [11], KL-ONE [3]), etc. It should be observed that transforming fl This research was supported by the Technology Development Center (TEKES) and in part by the Commission of the European Communities under ESPRIT-II project 5365 VITAL.
Reference: [5] <author> ECMA (European Computer Manufacturers Association). </author> <title> Standard ECMA-149. Portable Common Tool Environment (PCTE). Abstract Specification, </title> <booktitle> 2nd edition, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: Even the most optimistic predictions acknowledge that several different representation standards will coexist in the future, regardless of the various standardization efforts. Examples of such coexistence can be found everywhere: object structure representations (CORBA, PCTE <ref> [5] </ref> ), data representations (CODASYL [1], relational representations [4]), knowledge representations (INTERLINGUA [11], KL-ONE [3]), etc. It should be observed that transforming fl This research was supported by the Technology Development Center (TEKES) and in part by the Commission of the European Communities under ESPRIT-II project 5365 VITAL.
Reference: [6] <author> S. C. Johnson. </author> <title> Yacc | yet another compiler compiler. </title> <type> Technical Report 32, </type> <institution> AT & T Bell Laboratories, Mur-ray Hill, N. J., </institution> <year> 1975. </year>
Reference-contexts: Correspondingly it includes objects representing individual productions, symbols, production groups, production group mappings, etc. 2.1 Specifying grammars A source or target representation is specified by giving its context-free grammar. This grammar can be defined either interactively using the SPELLBOUND interface, or by giving a yacc-description <ref> [6] </ref> of the grammar in a file. <p> The object structure represents the parse tree of the text file to be transformed. To generate parsers ALCHEMIST uses the facilities provided by yacc and lex <ref> [6, 8] </ref>. To implement a File-to-Object Parser the following parts are needed: * a lexical specification | specifies which lexemes the file representations contains. For the yacc-parser, this specification consists of a default lex specification (possibly edited). * a parsing specification | specifies the syntax of the file representation.
Reference: [7] <author> S. E. Keller, J. A Perkins, T. F. Payton, and S. P. Mardinly. </author> <title> Tree transformation techniques and experiences. </title> <booktitle> In Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, </booktitle> <pages> pages 190 - 201, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Following this idea, the transformation mappings are defined between sets of grammar productions. 2.3 TT-grammars The SPELLBOUND specification of mappings is based on the notion of TT-grammars developed at SDC <ref> [7] </ref>. TT-grammars are a formal description technique for describing transformations from one language to another. A TT-grammar contains context-free grammars for both languages. As discussed above the transformation between the representation languages is described by associating productions in both grammars.
Reference: [8] <author> M. E. Lesk. </author> <title> Lex | a lexical analyzer generator. </title> <type> Technical Report 39, </type> <institution> AT & T Bell Laboratories, Murray Hill, N. J., </institution> <year> 1975. </year>
Reference-contexts: The object structure represents the parse tree of the text file to be transformed. To generate parsers ALCHEMIST uses the facilities provided by yacc and lex <ref> [6, 8] </ref>. To implement a File-to-Object Parser the following parts are needed: * a lexical specification | specifies which lexemes the file representations contains. For the yacc-parser, this specification consists of a default lex specification (possibly edited). * a parsing specification | specifies the syntax of the file representation.
Reference: [9] <author> S. A. Mamrak, J. Barnes, and C. S. O'Connell. </author> <title> Benefits of automating data translation. </title> <journal> IEEE Software, </journal> <volume> 10(4):82 - 88, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: Similarly the semantic actions involved are more complex than in the regular translation process. The most closely related work to ours is the Intergrated Chameleon Architecture data translator <ref> [9] </ref> ALCHEMIST is an object-oriented transformation tool under development in the VITAL project [10]. The VITAL project aims at developing an open industrial-strength software engineering workbench for building heterogeneous knowledge based (KBS) applications.
Reference: [10] <author> E. Motta, N. Shadbolt, and A. </author> <title> Rouge. VITAL software technology for embedded knowledge based systems technology. </title> <note> To appear in IEEE Software, </note> <month> November </month> <year> 1993. </year>
Reference-contexts: Similarly the semantic actions involved are more complex than in the regular translation process. The most closely related work to ours is the Intergrated Chameleon Architecture data translator [9] ALCHEMIST is an object-oriented transformation tool under development in the VITAL project <ref> [10] </ref>. The VITAL project aims at developing an open industrial-strength software engineering workbench for building heterogeneous knowledge based (KBS) applications. However, ALCHEMIST is a gen eral purpose transformation generator and its use is not limited to its development context of KBS applications.
Reference: [11] <author> R. Neches, R. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. R. Swartout. </author> <title> Enabling technology for knowledge sharing. </title> <journal> AI Magazine, </journal> <volume> 12(3):36 - 56, </volume> <month> Fall </month> <year> 1991. </year>
Reference-contexts: Even the most optimistic predictions acknowledge that several different representation standards will coexist in the future, regardless of the various standardization efforts. Examples of such coexistence can be found everywhere: object structure representations (CORBA, PCTE [5] ), data representations (CODASYL [1], relational representations [4]), knowledge representations (INTERLINGUA <ref> [11] </ref>, KL-ONE [3]), etc. It should be observed that transforming fl This research was supported by the Technology Development Center (TEKES) and in part by the Commission of the European Communities under ESPRIT-II project 5365 VITAL.
Reference: [12] <author> T. Payton, S. Keller, J. Perkins, S. Rowan, and S. Mardinly. SSAGS: </author> <title> A syntax and semantics analysis and generation system. </title> <booktitle> In Proceedings of the IEEE Computer Society's Sixth International Computer Software and Applications Conference, </booktitle> <publisher> Chicago, </publisher> <pages> pages 424 - 432, </pages> <month> November </month> <year> 1982. </year>
Reference-contexts: TT-grammars are a formal description technique for describing transformations from one language to another. A TT-grammar contains context-free grammars for both languages. As discussed above the transformation between the representation languages is described by associating productions in both grammars. SSAGS | a syntax and semantics analysis and generation system <ref> [12] </ref> was extended to support certain TT-grammars. A TT-grammar describes a relationship between a syntax tree over a grammar G 1 and a syntax tree over a grammar G 2 . A TT-grammar may be interpreted as a description of a tree transformation technique.
Reference: [13] <author> T. Reps and T. Teitelbaum. </author> <title> The Synthesizer Generator. A System for Constructing Language-Based Editors. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: Consequently the process of developing transformation software would benefit from a toolkit supporting the design of the various components involved. Such a transformation toolkit is akin to compiler-compilers [15], editor generators and report generators <ref> [13] </ref>, however with many interesting special features and capabilities of its own. It differs considerably from compiler-compilers by assuming that in the general transformation case, the target code also has a complex structure that requires a grammar description.
Reference: [14] <author> SunSoft. </author> <title> OpenWindows Developer's guide 3.0. User's Manual, revision A, </title> <month> November </month> <year> 1991. </year>
Reference-contexts: The specification consists of three parts. * Question specification. The question can be pa rameterized, depending on input tokens. * How the input is entered by the user. * Which actions should be taken due to the input. The GLASS windowing interface is specified through using DevGuide <ref> [14] </ref>. Mapping library (BOOK): The BOOK library is based on existing (or predefined) spell specifications. The user can reuse any part of a specification. In addition, also partial spell specifications can be provided, showing how a particular concept is usually mapped for a particular representation.
Reference: [15] <author> M. Tofte. </author> <title> Compiler generators: what they can do, what they might do and what they will probably never do. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Consequently the process of developing transformation software would benefit from a toolkit supporting the design of the various components involved. Such a transformation toolkit is akin to compiler-compilers <ref> [15] </ref>, editor generators and report generators [13], however with many interesting special features and capabilities of its own. It differs considerably from compiler-compilers by assuming that in the general transformation case, the target code also has a complex structure that requires a grammar description.
References-found: 15

