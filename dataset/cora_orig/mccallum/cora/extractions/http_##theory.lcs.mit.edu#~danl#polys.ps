URL: http://theory.lcs.mit.edu/~danl/polys.ps
Refering-URL: http://theory.lcs.mit.edu/~danl/
Root-URL: 
Email: danl@theory.lcs.mit.edu.  salil@math.mit.edu.  
Title: Checking Polynomial Identities over any Field: Towards a Derandomization?  
Author: Daniel Lewin Salil Vadhan 
Note: Supported by the love of his wife and kids. Supported by an NDSEG/DOD Graduate Fellowship.  
Date: November 13, 1997  
Address: Cambridge, MA02139.  Cambridge, MA02139.  
Affiliation: Laboratory for Computer Science, Massachusetts Institute of Technology,  Department of Mathematics, Massachusetts Institute of Technology,  
Abstract: We present a Monte Carlo algorithm for testing multivariate polynomial identities over any field using less random bits than other methods. To test if a polynomial P (x 1 ; : : : ; x n ) is zero, our method uses P n i=1 dlog(d i + 1)e random bits , where d i is the degree of x i in P , to obtain any inverse polynomial error in polynomial time. The algorithm applies to polynomials given as a black box or in some implicit representation such as a straight line program. Our method works by evaluating P at truncated formal power series representing square roots of irreducible polynomials over the field. This approach is similar to [CK97], but with the advantage that the techniques are purely algebraic and apply to any field. We view uncovering this algebraic structure as a step towards the derandomization of polynomial identity testing, a long standing open question. 
Abstract-found: 1
Intro-found: 1
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and hardness of approximation problems. </title> <booktitle> In Proceedings of the Thirty Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1423, </pages> <year> 1992. </year>
Reference-contexts: Results in complexity theory such as IP = PSPACE [LFKN90, Sha90], MIP = NEXPTIME [BFL90], and NP = PCP (log n; 1) <ref> [AS92, ALM + 92] </ref> all fundamentally rely on viewing a boolean assignment not as a group of bits, but as the values of a multivariate polynomial. Testing if such a polynomial is identically zero is a procedure used frequently in this context.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs. </title> <booktitle> In Proceedings of the Thirty Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 213, </pages> <year> 1992. </year>
Reference-contexts: Results in complexity theory such as IP = PSPACE [LFKN90, Sha90], MIP = NEXPTIME [BFL90], and NP = PCP (log n; 1) <ref> [AS92, ALM + 92] </ref> all fundamentally rely on viewing a boolean assignment not as a group of bits, but as the values of a multivariate polynomial. Testing if such a polynomial is identically zero is a procedure used frequently in this context.
Reference: [BCW80] <author> M. Blum, A.K. Chandra, </author> <title> and M.N. Wegman. Equivalence of free Boolean graphs can be tested in polynomial time. </title> <journal> Information Processing Letters, </journal> <volume> 10:8082, </volume> <year> 1980. </year>
Reference-contexts: Algorithms such as the RNC algorithm for perfect matching [Lov79, MVV87, CRS95], the BPP algorithm for testing equivalence of read-once branching programs <ref> [BCW80] </ref>, and one of the randomized algorithms for testing multiset equality [BK95] rely on efficiently checking if a multivariate polynomial is identically zero.
Reference: [BFL90] <author> Laszlo Babai, Lance Fortnow, and Carsten Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <volume> volume I, </volume> <pages> pages 1625, </pages> <address> St. Louis, Missouri, </address> <month> 2224 October </month> <year> 1990. </year> <journal> IEEE. </journal> <volume> 11 </volume>
Reference-contexts: Results in complexity theory such as IP = PSPACE [LFKN90, Sha90], MIP = NEXPTIME <ref> [BFL90] </ref>, and NP = PCP (log n; 1) [AS92, ALM + 92] all fundamentally rely on viewing a boolean assignment not as a group of bits, but as the values of a multivariate polynomial. Testing if such a polynomial is identically zero is a procedure used frequently in this context.
Reference: [BK95] <author> M. Blum and S. Khanna. </author> <title> Designing programs that check their work. </title> <journal> Journal of the Association for Com--puting Machinery, </journal> <volume> 42:269291, </volume> <year> 1995. </year>
Reference-contexts: Algorithms such as the RNC algorithm for perfect matching [Lov79, MVV87, CRS95], the BPP algorithm for testing equivalence of read-once branching programs [BCW80], and one of the randomized algorithms for testing multiset equality <ref> [BK95] </ref> rely on efficiently checking if a multivariate polynomial is identically zero.
Reference: [CDGK91] <author> Michael Clausen, Andreas Dress, Johannes Grabmeier, and Marek Karpinski. </author> <title> On zero-testing and interpolation of k-sparse multivariate polynomials over finite fields. </title> <journal> Theoretical Computer Science, </journal> <volume> 84(2):151 164, </volume> <month> 29 July </month> <year> 1991. </year>
Reference-contexts: Testing if such a polynomial is identically zero is a procedure used frequently in this context. In addition, many results in learning theory, and sparse multivariate polynomial interpolation also rely on checking polynomial identities <ref> [Zip79, GKS90, CDGK91, RB91] </ref>. Clearly, the problem is easy if the input polynomials are given as lists of coefficients (known as standard reduced form). However, in many cases the polynomials are given in some implicit representation such as a symbolic determinant or as a product of multiple polynomials.
Reference: [CK97] <author> Zhi-Zhong Chen and Ming-Yang Kao. </author> <title> Reducing randomness via irrational numbers. </title> <booktitle> In Proceedings of the Twenty-Ninth Annual ACM Symposium on Theory of Computing, pages 200209, </booktitle> <address> El Paso, Texas, </address> <month> 46 May </month> <year> 1997. </year>
Reference-contexts: Schwartz and Zippel discovered in [Sch80] and [Zip79] that the probability that a non-zero multivariate polynomial evaluates to zero is small as long as the point is selected at random from a large enough domain. In a recent development, Chen and Kao <ref> [CK97] </ref> showed how to check if a polynomial with integer coefficients is zero using fewer random bits than the Schwartz-Zippel method. Their method is to evaluate the polynomial at approximations of easily computable irrational points. <p> Even for the case in which P is restricted to symbolic determinants with entries that are linear forms in the input variables, it is not known how to construct such a set explicitly. We view our work (as well as that of <ref> [CK97] </ref>) as restricting the domain in which one has to search for a set of good points. Our purely algebraic approach, in contrast to that of [CK97], results in a highly structured domain, whose algebraic properties might give insight into the search for good evaluation points. 1 1.1 Previous Algorithms Let <p> We view our work (as well as that of <ref> [CK97] </ref>) as restricting the domain in which one has to search for a set of good points. Our purely algebraic approach, in contrast to that of [CK97], results in a highly structured domain, whose algebraic properties might give insight into the search for good evaluation points. 1 1.1 Previous Algorithms Let F be a field. <p> On the other hand, Lemma 1.1 implies that if P 6= 0, then the test is wrong with probability no more than 1 2 . That is, the error probability is at most 1 2 . The algorithm clearly uses ndlog 2de random bits. As discussed in <ref> [CK97] </ref>, there are three basic methods to reduce the error probability of the Schwartz-Zippel algorithm to 1=t for an arbitrary t. The first is to perform dlog te independent repetitions of the above test, using dlog tendlog 2de random bits. <p> The third, which works for t 2 ndlog 2de is to perform t pairwise independent repetitions of the algorithm, thus using 2ndlog 2de random bits. 1.1.2 Chen-Kao Recently, Chen and Kao <ref> [CK97] </ref> discovered a new algorithm for testing if a multivariate polynomial is identically zero. Their algorithm uses fewer random bits than the algorithm of Schwartz-Zippel in order to obtain a given error probability. Chen and Kao's algorithm only works for polynomials with integer coefficients.
Reference: [CRS95] <author> Suresh Chari, Pankaj Rohatgi, and Aravind Srinivasan. </author> <title> Randomness-optimal unique element isolation with applications to perfect matching and related problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24(5):1036 1050, </volume> <month> October </month> <year> 1995. </year>
Reference-contexts: Algorithms such as the RNC algorithm for perfect matching <ref> [Lov79, MVV87, CRS95] </ref>, the BPP algorithm for testing equivalence of read-once branching programs [BCW80], and one of the randomized algorithms for testing multiset equality [BK95] rely on efficiently checking if a multivariate polynomial is identically zero.
Reference: [Eis95] <author> David Eisenbud. </author> <title> Commutative Algebra with a View Toward Algebraic Geometry. Graduate Texts in Mathematics 150. </title> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: In Appendix D, we describe a standard technique for finding approximations to these roots, given that they exist. Lemma 2.1 (Hensel's Lemma <ref> [Eis95, Cor. 7.4] </ref>) Let S (Z) be a polynomial with coefficients in F [x]. S can be viewed as a bivariate polynomial S (Z; x) over F . If there is a g 2 F such that: 1. S (g; 0) = 0. 2. <p> A proof of an even more general Hensel's lemma, which implies Lemma 2.1, can be found in <ref> [Eis95, Ch. 7] </ref>. 2.2.1 Finding Irreducible Polynomials With Square Roots Lemma 2.1 tells us that any irreducible polynomial with a constant term that is a quadratic residue in F , has a square root in F [[x]] (assuming that F is not of characteristic 2).
Reference: [GKS90] <author> Dima Yu. Grigoriev, Marek Karpinski, and Michael F. Singer. </author> <title> Fast parallel algorithms for sparse multivari-ate polynomial interpolation over finite fields. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19(6):10591063, </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Testing if such a polynomial is identically zero is a procedure used frequently in this context. In addition, many results in learning theory, and sparse multivariate polynomial interpolation also rely on checking polynomial identities <ref> [Zip79, GKS90, CDGK91, RB91] </ref>. Clearly, the problem is easy if the input polynomials are given as lists of coefficients (known as standard reduced form). However, in many cases the polynomials are given in some implicit representation such as a symbolic determinant or as a product of multiple polynomials.
Reference: [Kal82] <author> Erich Kaltofen. </author> <title> A polynomial reduction from multivariate to bivariate integral polynomial factorization. </title> <booktitle> In Proceedings of the Fourteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 261266, </pages> <address> San Francisco, California, </address> <month> 57 May </month> <year> 1982. </year>
Reference-contexts: This is described in Appendix D. Hensel lifting has been used for other algorithmic purposes, such as factoring sparse multivariate polynomials <ref> [Zip79, Zip81, Kal82, vzGK85] </ref>. 3 The Algorithm In this section we give a formal description of our algorithm for testing if a multivariate polynomial is zero. The algorithm is described and then a simple example of how the algorithm runs is presented.
Reference: [Kal88] <author> Erich Kaltofen. </author> <title> Greatest common divisors of polynomials given by straight-line programs. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 35(1):231264, </volume> <month> January </month> <year> 1988. </year>
Reference: [Lan93] <author> Serge Lang. </author> <title> Algebra. </title> <publisher> Addison-Wesley, </publisher> <address> 3 edition, </address> <year> 1993. </year>
Reference: [LFKN90] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proofs. </title> <booktitle> In Proceedings of the Thirty First Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 110, </pages> <year> 1990. </year>
Reference-contexts: Results in complexity theory such as IP = PSPACE <ref> [LFKN90, Sha90] </ref>, MIP = NEXPTIME [BFL90], and NP = PCP (log n; 1) [AS92, ALM + 92] all fundamentally rely on viewing a boolean assignment not as a group of bits, but as the values of a multivariate polynomial.
Reference: [Lov79] <author> L. Lovasz. </author> <title> On determinants, matchings, and random algorithms. </title> <editor> In L. Budach, editor, </editor> <booktitle> Fundamentals of Computing Theory. </booktitle> <address> Akademia-Verlag, </address> <year> 1979. </year>
Reference-contexts: Algorithms such as the RNC algorithm for perfect matching <ref> [Lov79, MVV87, CRS95] </ref>, the BPP algorithm for testing equivalence of read-once branching programs [BCW80], and one of the randomized algorithms for testing multiset equality [BK95] rely on efficiently checking if a multivariate polynomial is identically zero.
Reference: [MVV87] <author> K. Mulmuley, U. Vazirani, and V. Vazirani. </author> <title> Matching is as easy as matrix inversion. </title> <journal> Combinatorica, </journal> <volume> 7(1):105113, </volume> <year> 1987. </year>
Reference-contexts: Algorithms such as the RNC algorithm for perfect matching <ref> [Lov79, MVV87, CRS95] </ref>, the BPP algorithm for testing equivalence of read-once branching programs [BCW80], and one of the randomized algorithms for testing multiset equality [BK95] rely on efficiently checking if a multivariate polynomial is identically zero.
Reference: [RB91] <author> Ron M. Roth and Gyora M. Benedek. </author> <title> Interpolation and approximation of sparse multivariate polynomials over GF (2). </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(2):291314, </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: Testing if such a polynomial is identically zero is a procedure used frequently in this context. In addition, many results in learning theory, and sparse multivariate polynomial interpolation also rely on checking polynomial identities <ref> [Zip79, GKS90, CDGK91, RB91] </ref>. Clearly, the problem is easy if the input polynomials are given as lists of coefficients (known as standard reduced form). However, in many cases the polynomials are given in some implicit representation such as a symbolic determinant or as a product of multiple polynomials.
Reference: [Sch80] <author> J. T. Schwartz. </author> <title> Fast probabilistic algorithms for verification of polynomial identities. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(4):701717, </volume> <month> October </month> <year> 1980. </year>
Reference-contexts: The basic scheme is to use randomization to select a number of sample points on which the identity is checked by evaluation. The test accepts if the identity is found to hold at all the sample points and rejects otherwise. Schwartz and Zippel discovered in <ref> [Sch80] </ref> and [Zip79] that the probability that a non-zero multivariate polynomial evaluates to zero is small as long as the point is selected at random from a large enough domain.
Reference: [Sha90] <author> Adi Shamir. IP=PSPACE. </author> <booktitle> In Proceedings of the Thirty First Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1115, </pages> <year> 1990. </year>
Reference-contexts: Results in complexity theory such as IP = PSPACE <ref> [LFKN90, Sha90] </ref>, MIP = NEXPTIME [BFL90], and NP = PCP (log n; 1) [AS92, ALM + 92] all fundamentally rely on viewing a boolean assignment not as a group of bits, but as the values of a multivariate polynomial.
Reference: [Str72] <author> V. Strassen. </author> <title> Berechnung und programm I. </title> <journal> Acta Informatica, </journal> <note> 1:320335, 1972. In German. </note>
Reference: [vzGK85] <author> Joachim von zur Gathen and Erich Kaltofen. </author> <title> Factoring sparse multivariate polynomials. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 31(2):265287, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: This is described in Appendix D. Hensel lifting has been used for other algorithmic purposes, such as factoring sparse multivariate polynomials <ref> [Zip79, Zip81, Kal82, vzGK85] </ref>. 3 The Algorithm In this section we give a formal description of our algorithm for testing if a multivariate polynomial is zero. The algorithm is described and then a simple example of how the algorithm runs is presented.
Reference: [Zip79] <author> R. E. Zippel. </author> <title> Probabilistic algorithms for sparse polynomials. </title> <booktitle> In Proceedings of EUROSAM `79, </booktitle> <pages> pages 216226. </pages> <publisher> Springer-Verlag, </publisher> <year> 1979. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 72. </pages>
Reference-contexts: Testing if such a polynomial is identically zero is a procedure used frequently in this context. In addition, many results in learning theory, and sparse multivariate polynomial interpolation also rely on checking polynomial identities <ref> [Zip79, GKS90, CDGK91, RB91] </ref>. Clearly, the problem is easy if the input polynomials are given as lists of coefficients (known as standard reduced form). However, in many cases the polynomials are given in some implicit representation such as a symbolic determinant or as a product of multiple polynomials. <p> The basic scheme is to use randomization to select a number of sample points on which the identity is checked by evaluation. The test accepts if the identity is found to hold at all the sample points and rejects otherwise. Schwartz and Zippel discovered in [Sch80] and <ref> [Zip79] </ref> that the probability that a non-zero multivariate polynomial evaluates to zero is small as long as the point is selected at random from a large enough domain. <p> This is described in Appendix D. Hensel lifting has been used for other algorithmic purposes, such as factoring sparse multivariate polynomials <ref> [Zip79, Zip81, Kal82, vzGK85] </ref>. 3 The Algorithm In this section we give a formal description of our algorithm for testing if a multivariate polynomial is zero. The algorithm is described and then a simple example of how the algorithm runs is presented.
Reference: [Zip81] <author> R. Zippel. </author> <title> Newton's iteration and the sparse Hensel algorithm. </title> <booktitle> In Proceedings of the 1981 ACM Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 6872, </pages> <address> Utah, </address> <year> 1981. </year> <month> 12 </month>
Reference-contexts: This is described in Appendix D. Hensel lifting has been used for other algorithmic purposes, such as factoring sparse multivariate polynomials <ref> [Zip79, Zip81, Kal82, vzGK85] </ref>. 3 The Algorithm In this section we give a formal description of our algorithm for testing if a multivariate polynomial is zero. The algorithm is described and then a simple example of how the algorithm runs is presented.
References-found: 23

