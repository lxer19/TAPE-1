URL: http://www.cs.arizona.edu/people/toni/papers/bceip-stoc95.ps
Refering-URL: http://www.cs.arizona.edu/people/toni/
Root-URL: http://www.cs.arizona.edu
Email: beame@cs.washington.edu  sacook@cs.toronto.edu  edmonds@icsi.berkeley.edu  russell@cs.ucsd.edu  toni@cs.pitt.edu  
Title: The Relative Complexity of NP Search Problems  
Author: Paul Beame Stephen Cook Jeff Edmonds Russell Impagliazzo Toniann Pitassi 
Address: Washington  Toronto  Berkeley, CA 94704-1198  Pittsburgh  
Affiliation: Computer Science and Engineering University of  Computer Science Dept. University of  I.C.S.I.  Computer Science Dept. UCSD  Mathematics and Computer Science University of  
Abstract: Papadimitriou introduced several classes of NP search problems based on combinatorial principles which guarantee the existence of solutions to the problems. Many interesting search problems not known to be solvable in polynomial time are contained in these classes, and a number of them are complete problems. We consider the question of the relative complexity of these search problem classes. We prove several separations which show that in a generic relativized world, the search classes are distinct and there is a standard search problem in each of them that is not computation-ally equivalent to any decision problem. (Naturally, absolute separations would imply that P 6= NP.) Our separation proofs have interesting combinatorial content and go to the heart of the combinatorial principles on which the classes are based. We derive one result via new lower bounds on the degrees of polynomials asserted to exist by Hilbert's Null-stellensatz over finite fields. 
Abstract-found: 1
Intro-found: 1
Reference: [BI87] <author> M. Blum and R. Impagliazzo. </author> <title> Generic oracles and oracle classes. </title> <booktitle> In 28th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 118-126, </pages> <address> Los Angeles, </address> <month> October </month> <year> 1987. </year>
Reference: [BIK+94] <author> P. Beame, R. Impagliazzo, J. Krajicek, T. Pitassi, and P. Pudlak. </author> <booktitle> Lower bounds on Hilbert's Nullstel-lensatz and propositional proofs In 35th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-806, </pages> <address> Santa Fe, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The proofs of our separations have quite interesting combinatorial content. In one example, via a series of reductions using methods similar to those in <ref> [BIK+94] </ref>, we derive our result via new lower bounds on the degrees of polynomials asserted to exist by Hilbert's Nullstellensatz over finite fields. <p> The lower bound we obtain for the degree of these polynomials is (n 1=4 ) where n is the number of variables and this is substantially stronger than the (log fl n) bound that was shown (for a somewhat different system) in <ref> [BIK+94] </ref>. 2 The Search Classes 2.1 Preliminary definitions A decision problem in NP can be given by a polynomial time relation R and a polynomial p such that R (x; c) implies jcj p (jxj). <p> In this section we again reduce our problem to a similar combinatorial question with a somewhat different kind of decision tree. This question is more difficult than our previous one and we need to apply a new method of attack, introduced in <ref> [BIK+94] </ref>, that is based on lower bounds on the degrees of polynomials given by Hilbert's Nullstellensatz. More precisely, we show how we can naturally associate an unsatisfiable system of polynomial equations fQ i (x) = 0g over GF [2] with each family of decision trees with the specified properties. <p> This is an interesting result in its own right since the bound for the coefficients of the system in <ref> [BIK+94] </ref> was only (log fl n). We give the proof of this result in the next section. Theorem 6: SINK is not reducible to LONELY. Proof: Suppose to the contrary that SINK LONELY . <p> Note that all the trees in T fl now have height at most ` = 2` 0 and that M = jT fl j is odd. Such a collection T fl is very similar to the generic systems considered in <ref> [BIK+94] </ref>.
Reference: [BP93] <author> P. Beame and T. Pitassi. </author> <title> An exponential separation between the matching principle and the pigeonhole principle. </title> <booktitle> In 8th Annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Montreal, Quebec, </address> <month> June </month> <year> 1993. </year>
Reference: [CY95] <author> S. Cook and T. Yamakami. </author> <title> A tight relationship between 1-generic oracles and type-2 complexity theory. </title> <note> In preparation. </note>
Reference-contexts: All separations we exhibit hold even against Tur-ing reductions so they show oracle separations between the Turing closures of the related type 1 search classes and these separations apply to all generic oracles ([BI87], <ref> [CY95] </ref>.) 2.3 Some simple reductions It is easy to see that SOURCE:OR:SINK m LEAF , by ignoring the direction information on the input graph. Also it is immediate that SOURCE:OR:SINK m SINK .
Reference: [IN88] <author> R. Impagliazzo and M. Naor. </author> <title> Decision trees and downward closures. </title> <booktitle> In Third Annual Conference on Structure in Complexity Theory, </booktitle> <pages> pages 29-38, </pages> <year> 1988. </year>
Reference-contexts: The construction is very similar to an argument due to Riis [Rii93] which is a natural analogue of the `Blum trick' (see <ref> [IN88] </ref>) showing that if a Boolean function and its negation both have terms of length d in disjunctive normal form then the function has a Boolean decision tree of height d 2 . Fix j N 1. <p> Then there is a new decision tree of height at most 2d 2 which alone answers the question `is (fi; z) 2 D?' Proof: We use a somewhat simpler version of the argument from Lemma 4 in this case we are very close to the argument in <ref> [IN88] </ref> adapted to matching decision trees. <p> Thus we set i+1 = i [ . The rest of the proof is the same as for Theorem 3. 2 A related result in <ref> [IN88] </ref> (Proposition 4.2) states that for some oracle A, P A = NP A " coNP A , but TFNP A is not contained in FP A .
Reference: [JPY88] <author> D. S. Johnson, C. H. Papadimitriou, and M. Yan-nakakis. </author> <title> How easy is local search? Journal of Computer and System Sciences, </title> <address> pages 79-100, </address> <year> 1988. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap90] <author> C. H. Papadimitriou. </author> <title> On graph-theoretic lemmata and complexity classes. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 794-801, </pages> <address> St. Louis, MO, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The problem Pigeonhole Circuit is a natural complete problem for PPP. The class PPADS is called PSK in <ref> [Pap90] </ref>, where it is incorrectly said to be equivalent to PPAD. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [Pap91] <author> C. H. Papadimitriou. </author> <title> On inefficient proofs of existence and complexity classes. </title> <booktitle> In Proceedings of the 4th Czechoslovakian Symposium on Combinatorics, </booktitle> <year> 1991. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Pap94] <author> C. H. Papadimitriou. </author> <title> On the complexity of the parity argument and other inefficient proofs of existence. </title> <journal> Journal of Computer and System Sciences, </journal> <pages> pages 498-532, </pages> <year> 1994. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution. <p> The class PPAD is a directed version of PPA; the combinatorial lemma here is this: "Every directed graph with an imbalanced node (indegree different from outdegree) must have another imbalanced node." It is shown in <ref> [Pap94] </ref> that all these classes can be defined in a syntactic way. As demonstrated in the papers listed above, these classes satisfy the key litmus test for an interesting complexity class: they contain many natural problems, some of which are complete. <p> Hence LEAF is not in FP 2 . The classes defined from these problems are interesting for more than just the lemmas on which they are based. There are many natural problems in them. Here are some examples in the first order classes PPAD, PPA, and PPP from <ref> [Pap94] </ref>. <p> A similar statement holds for the case of our Turing re ductions with the many-one closures replaced by Turing closures for the type 1 classes. All reductions we exhibit are many-one reductions so with this theorem they give inclusions or alternative characterizations of the classes defined in <ref> [Pap94] </ref>. <p> This will make 0...0 into the standard leaf, and make all even-degree nodes into odd-degree nodes and vice versa. Finally, ODD LEAF follows from the "chessplayer algorithm" of <ref> [Pap90, Pap94] </ref> which makes explicit the local edge-pairing argument that is involved in the standard construction of Euler tours. For completeness we give this construction: Given an input graph G to ODD we transform it to an input graph GL to LEAF.
Reference: [PSY90] <author> C. H. Papadimitriou, A. S. Schaffer, and M. Yan-nakis. </author> <title> On the complexity of local search. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 438-445, </pages> <address> Baltimore, MD, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: A solution is guaranteed to exist by an interesting combinatorial result called Smith's Lemma. The proof constructs an exponential size graph whose odd degree nodes correspond to circuits of G, and uses the fact that every graph has an even number of odd degree nodes. In <ref> [JPY88, Pap90, Pap91, Pap94, PSY90] </ref>, an approach is outlined to classify the exact complexity of problems such as these, where every instance has a solution.
Reference: [Rii93] <author> Riis, S. </author> <title> Independence in bounded arithmetic. </title> <type> PhD. Thesis, </type> <institution> Oxford University, </institution> <year> 1993. </year>
Reference-contexts: We will show how to construct a new collection of consistent "hole" matching decision trees H 1 ; :::; H N1 with possible leaf labels 1,...,N and "unmapped". The construction is very similar to an argument due to Riis <ref> [Rii93] </ref> which is a natural analogue of the `Blum trick' (see [IN88]) showing that if a Boolean function and its negation both have terms of length d in disjunctive normal form then the function has a Boolean decision tree of height d 2 . Fix j N 1.
References-found: 11

