URL: ftp://ftp.cs.washington.edu/tr/1996/05/UW-CSE-96-05-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: fborning, andersong@cs.washington.edu Bjorn Freeman-Benson@oti.com  
Title: The Indigo Algorithm  
Author: Alan Borning, Richard Anderson, and Bjorn Freeman-Benson Alan Borning and Richard Anderson Bjorn Freeman-Benson 
Address: PO Box 352350 201 506 Fort St. Seattle, Washington 98195 USA Victoria, B.C. CANADA V8W 1E6  
Affiliation: Dept. of Computer Science Engineering Object Technology International Inc. University of Washington R. Buckminster Fuller Laboratory  
Note: July 1996 Authors' addresses:  
Abstract: Technical Report 96-05-01 Department of Computer Science and Engineering University of Washington Abstract Inequality constraints are useful for specifying various aspects of user interfaces, such as constraints that one window is to the left of another, or that an object is contained within a rectangle. However, current local propagation constraint solvers can't handle inequality constraints. We present Indigo, an efficient local propagation algorithm for satisfying acyclic constraint hierarchies, including inequality constraints. A shorter version of this technical report will appear in the Proceedings of the 1996 ACM Symposium on User Interface Software Technology. 
Abstract-found: 1
Intro-found: 1
Reference: [Alefeld & Herzberger 83] <author> Gotz Alefeld and Jurgen Herzberger. </author> <title> Introduction to Interval Computations. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1983. </year> <note> Translation of: Einfuhrung in die Intervall-rechnung (translated by Jon Rockne). </note>
Reference-contexts: Definitions of all the interval operations, including the case of infinite bounds, are given in Appendix A; see also reference <ref> [Alefeld & Herzberger 83] </ref>. This use of intervals, and in particular overloading the arithmetic operators for interval arithmetic and allowing infinite bounds, substantially simplifies both the presentation and implementation of the algorithm.
Reference: [Benhamou & Older 96] <author> Frederic Benhamou and William Older. </author> <title> Applying interval arithmetic to real, integer and boolean constraints. </title> <journal> Journal of Logic Programming, </journal> <year> 1996. </year> <month> Forthcoming. </month>
Reference-contexts: Examples of such systems include CLP (BNR) <ref> [Older & Benhamou 93, Benhamou & Older 96] </ref> and Newton [Benhamou et al. 94]; see [Benhamou 95] for a recent survey.
Reference: [Benhamou 95] <author> Frederic Benhamou. </author> <title> Interval constraint logic programming. </title> <editor> In Andreas Podelski, editor, </editor> <booktitle> Constraint Programming: Basics and Trends, volume 910 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-21. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Examples of such systems include CLP (BNR) [Older & Benhamou 93, Benhamou & Older 96] and Newton [Benhamou et al. 94]; see <ref> [Benhamou 95] </ref> for a recent survey. Most of these systems use local propagation to narrow the intervals that describe the permitted values for a variable (see for example the local tolerance propagation procedure in [Hyvonen 92]).
Reference: [Benhamou et al. 94] <author> Frederic Benhamou, David McAllister, and Pascal Van Hentenryck. </author> <title> CLP(Intervals) revisited. </title> <booktitle> In International Symposium on Logic Programming, </booktitle> <pages> pages 124-138, </pages> <address> Ithaca, NY, USA, 1994. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Examples of such systems include CLP (BNR) [Older & Benhamou 93, Benhamou & Older 96] and Newton <ref> [Benhamou et al. 94] </ref>; see [Benhamou 95] for a recent survey. Most of these systems use local propagation to narrow the intervals that describe the permitted values for a variable (see for example the local tolerance propagation procedure in [Hyvonen 92]).
Reference: [Borning & Freeman-Benson 95] <author> Alan Borning and Bjorn Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 624-628, </pages> <address> Cassis, France, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The subsolvers communicate via shared variables. An earlier version of Ultraviolet | which doesn't include Indigo | is described in <ref> [Borning & Freeman-Benson 95] </ref>. Ultraviolet has been implemented and tested, and Indigo has been tested separately as well as a standalone solver. The current version of Ultraviolet has also been used as the constraint solver in the Constraint Drawing Framework, a commercial graphics library written in Smalltalk.
Reference: [Borning et al. 92] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A constraint hierarchy is a set of constraints labelled by strengths. The constraints labelled as "required" must be satisfied, while those labelled with weaker strengths are merely preferences <ref> [Borning et al. 92] </ref>. One important application of constraint hierarchies is in representing our desire that parts of a graphical object don't move unnecessarily, by placing weak stay constraints on them. <p> This comparator has proven quite satisfactory for functional constraints. However, for inequality constraints, an alternative comparator, locally-error-better, is superior. We give a brief, informal description of this comparator here; for a formal definition see reference <ref> [Borning et al. 92] </ref>. We will need to consider the error in satisfying a constraint. This error is 0 if and only if the constraint is satisfied, and becomes larger the further away the solution is from a satisfying one. <p> Consider the following constraints: required a &gt; 0 medium a = 0 Even though clearly the required constraint can be satisfied, there are no locally-error-better solutions, since for any potential solution x that satisfies a &gt; 0, x=2 has a smaller error for the a = 0 constraint. (See <ref> [Borning et al. 92] </ref> for further details.) This problem doesn't arise in our current implementation, since we don't support strict inequalities. However, there would be no particular problem in handling this situation. <p> We have thus found the solution a = 50, b = 20, c = 70, d = 95, which is a locally-error-better solution to the hierarchy. 4.9 Read-Only Variables One or more variables in a constraint cn may be annotated as read-only, so that cn won't affect their values <ref> [Borning et al. 92] </ref>. (We can thus simulate a one-way constraint system by annotating all but one of the variables as read-only in every constraint.) Read-only variables add no particular extra complexity to the algorithm.
Reference: [Davis 87] <author> Ernest Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 281-331, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The most recent version of DETAIL [Hosobe et al. 96] supports inequality constraints as well as functional constraints, although the current prototype has exponential time complexity. There has been considerable work on interval constraints in other areas of computer science, particularly artificial intelligence and constraint logic programming. Davis <ref> [Davis 87] </ref> discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels.
Reference: [Freeman-Benson 93] <author> Bjorn Freeman-Benson. </author> <title> Converting an existing user interface to use constraints. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <pages> pages 207-215, </pages> <address> Atlanta, Georgia, </address> <month> November </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: The current version of Ultraviolet has also been used as the constraint solver in the Constraint Drawing Framework, a commercial graphics library written in Smalltalk. The Constraint Drawing Framework is an updated version of CoolDraw <ref> [Freeman-Benson 93] </ref>; the techniques for integrating the constraint mechanism with the other parts of the package are the same as descried in the earlier paper. 2 Related Work Two systems designed for user interface applications that support inequality constraints are QOCA and DETAIL.
Reference: [Gangnet & Rosenberg 92] <author> Michel Gangnet and Burton Rosenberg. </author> <title> Constraint programming and graph algorithms. </title> <booktitle> In Second International Symposium on Artificial Intelligence and Mathematics, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: collection of variables and constraints forms a constraint graph, which is assumed to be acyclic. (We can construct a bipartite graph by having a vertex for each variable and each constraint, and an edge from a constraint vertex to a variable vertex if the variable is constrained by the constraint <ref> [Gangnet & Rosenberg 92] </ref>. The constraint graph is said to be acyclic if the corresponding bipartite graph is acyclic.) Each variable has a lower and an upper bound, which are initially 1 and +1 respectively.
Reference: [Helm et al. 92a] <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year>
Reference-contexts: QOCA <ref> [Helm et al. 92a] </ref> is a constraint solving toolkit that supports the incremental solution of simultaneous linear equality and inequality constraints while optimizing convex quadratic objective functions.
Reference: [Helm et al. 92b] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Proceedings of the Third Eu-rographics Workshop on Object-oriented Graphics, </booktitle> <address> Champery, Switzerland, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: However, QOCA doesn't support constraint hierarchies. QOCA has also been integrated with Unidraw to provide an architecture for constraint-based graphical editing <ref> [Helm et al. 92b] </ref>. DETAIL [Hosobe et al. 94] is an incremental solver for multi-way constraints and constraint hierarchies. It is more general than traditional local propagation, since it allows constraint cycles to be grouped into cells, which are then solved by an appropriate subsolver.
Reference: [Hosobe et al. 94] <author> Hiroshi Hosobe, Ken Miyashita, Shin Takahashi, Satoshi Matsuoka, and Aki-nori Yonezawa. </author> <title> Locally simultaneous constraint satisfaction. </title> <booktitle> In Proceedings of the 1994 Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 51-62. </pages> <publisher> Springer-Verlag LLNCS 874, </publisher> <year> 1994. </year>
Reference-contexts: However, QOCA doesn't support constraint hierarchies. QOCA has also been integrated with Unidraw to provide an architecture for constraint-based graphical editing [Helm et al. 92b]. DETAIL <ref> [Hosobe et al. 94] </ref> is an incremental solver for multi-way constraints and constraint hierarchies. It is more general than traditional local propagation, since it allows constraint cycles to be grouped into cells, which are then solved by an appropriate subsolver.
Reference: [Hosobe et al. 96] <author> Hiroshi Hosobe, Satoshi Matsuoka, and Akinori Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Proceedings of the Second International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Boston, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: DETAIL [Hosobe et al. 94] is an incremental solver for multi-way constraints and constraint hierarchies. It is more general than traditional local propagation, since it allows constraint cycles to be grouped into cells, which are then solved by an appropriate subsolver. The most recent version of DETAIL <ref> [Hosobe et al. 96] </ref> supports inequality constraints as well as functional constraints, although the current prototype has exponential time complexity. There has been considerable work on interval constraints in other areas of computer science, particularly artificial intelligence and constraint logic programming.
Reference: [Hyvonen 92] <author> Eero Hyvonen. </author> <title> Constraint reasoning based on interval arithmetic: The tolerance propagation approach. </title> <journal> Artificial Intelligence, </journal> <volume> 58(1-3):71-112, </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: There has been considerable work on interval constraints in other areas of computer science, particularly artificial intelligence and constraint logic programming. Davis [Davis 87] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [Hyvonen 92, Hyvonen et al. 94, Hyvonen 95] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Another active area of research is the incorporation of interval constraints into constraint logic programming. <p> Most of these systems use local propagation to narrow the intervals that describe the permitted values for a variable (see for example the local tolerance propagation procedure in <ref> [Hyvonen 92] </ref>). <p> This global optimality property is a generalization of the global consistency property used in the constraint satisfaction and interval labelling literature <ref> [Hyvonen 92] </ref>. The proof demonstrates that the global optimality property is maintained as an invariant of the algorithm. <p> At this point we detect that both a and b have unique values but the active constraint a fl b = 2 can't be satisfied, so we raise a constraints too difficult exception. Following Hyvonen <ref> [Hyvonen 92] </ref>, we could avoid this problem by allowing the possible values for variables to be described by divisions (unions of ordered, non-overlapping intervals), rather than by single intervals.
Reference: [Hyvonen 95] <author> Eero Hyvonen. </author> <title> Evaluation of cascaded interval function constraints. </title> <booktitle> In Proceedings of the International Workshop on Constraint-Based Reasoning (CONSTRAINT-95), </booktitle> <address> Melbourne Beach, Florida, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: There has been considerable work on interval constraints in other areas of computer science, particularly artificial intelligence and constraint logic programming. Davis [Davis 87] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [Hyvonen 92, Hyvonen et al. 94, Hyvonen 95] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Another active area of research is the incorporation of interval constraints into constraint logic programming.
Reference: [Hyvonen et al. 94] <author> Eero Hyvonen, Stefano De Pascale, and Aarno Lehtola. </author> <title> Interval constraint programming in C++. </title> <editor> In Brian Mayoh, Enn Tyugu, and Jaan Penjam, editors, </editor> <booktitle> Constraint Programming, </booktitle> <pages> pages 350-366. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <booktitle> NATO Advanced Science Institute Series, Series F: Computer and System Sciences, </booktitle> <volume> Vol. </volume> <pages> 131. </pages>
Reference-contexts: There has been considerable work on interval constraints in other areas of computer science, particularly artificial intelligence and constraint logic programming. Davis [Davis 87] discusses the completeness and running time for interval propagation algorithms, as well as for other kinds of labels. Hyvonen <ref> [Hyvonen 92, Hyvonen et al. 94, Hyvonen 95] </ref> presents a number of interval constraint satisfaction algorithms, and also describes the generalization of interval propagation to division propagation. (A division is a union of ordered, non-overlapping intervals.) Another active area of research is the incorporation of interval constraints into constraint logic programming.
Reference: [Older & Benhamou 93] <editor> William Older and Frederic Benhamou. </editor> <booktitle> Programming in CLP(BNR). In Position Papers for the First Workshop on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 239-249, </pages> <address> Newport, RI, USA, </address> <year> 1993. </year>
Reference-contexts: Examples of such systems include CLP (BNR) <ref> [Older & Benhamou 93, Benhamou & Older 96] </ref> and Newton [Benhamou et al. 94]; see [Benhamou 95] for a recent survey.
Reference: [Sannella 94] <author> Michael Sannella. SkyBlue: </author> <title> A multi-way local propagation constraint solver for user interface construction. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 137-146, </pages> <year> 1994. </year>
Reference-contexts: These algorithms provide a good balance between expressiveness and efficiency; recent examples include DeltaBlue [Sannella et al. 93], SkyBlue <ref> [Sannella 94] </ref>, and QuickPlan [Vander Zanden 96]. In local propagation algorithms, each constraint has a set of methods that can be used to satisfy the constraint. When a method is executed, it sets one of the constrained variables to a value such that the constraint is satisfied.
Reference: [Sannella et al. 93] <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Born-ing. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> Software|Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: These algorithms provide a good balance between expressiveness and efficiency; recent examples include DeltaBlue <ref> [Sannella et al. 93] </ref>, SkyBlue [Sannella 94], and QuickPlan [Vander Zanden 96]. In local propagation algorithms, each constraint has a set of methods that can be used to satisfy the constraint.
Reference: [Vander Zanden 96] <author> Brad Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <month> January </month> <year> 1996. </year> <month> 16 </month>
Reference-contexts: These algorithms provide a good balance between expressiveness and efficiency; recent examples include DeltaBlue [Sannella et al. 93], SkyBlue [Sannella 94], and QuickPlan <ref> [Vander Zanden 96] </ref>. In local propagation algorithms, each constraint has a set of methods that can be used to satisfy the constraint. When a method is executed, it sets one of the constrained variables to a value such that the constraint is satisfied.
References-found: 20

