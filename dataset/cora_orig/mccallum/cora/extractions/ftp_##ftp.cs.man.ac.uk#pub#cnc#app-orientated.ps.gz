URL: ftp://ftp.cs.man.ac.uk/pub/cnc/app-orientated.ps.gz
Refering-URL: http://www.cs.man.ac.uk/cnc/arena/publication.html
Root-URL: http://www.cs.man.ac.uk
Email: Contact email: ken@cs.man.ac.uk;  
Phone: tel: +44 061 275 6135; fax: +44 061 275 6204  
Title: Language- and application-oriented resource management for parallel architectures  
Author: Ken Mayes, Stuart Quick, James Bridgland and Andy Nisbet 
Address: Manchester, Oxford Road, Manchester, UK.  
Affiliation: Centre for Novel Computing, Department of Computer Science, University of  
Abstract-found: 0
Intro-found: 1
Reference: <author> Anderson, T.E., B.N. Bershad, E.D. La-zowska and H.M. </author> <title> Levy (1992) Scheduler activations: Effective kernel support for the user-level management of parallelism. </title> <journal> ACM Transactions on Computer Systems 10(1), </journal> <pages> 53-79. </pages>
Reference-contexts: LeBlanc and Markatos, 1991; Ritchie and Neufeld, 1993). Systems allow application-oriented customisation both at kernel level (e.g. Mukher-jee and Schwan, 1993) and at user-level (e.g. Ber-shad et al., 1988). Placing customisation at user-level allows the possibility of benefiting from the improved performance described <ref> (e.g. in Anderson et al., 1992, and Lazowska, 1992) </ref> as being associated with user-level mechanisms. A system which supports such customisation should be flexible and extensible. Policy may be provided at user-level on top of a small, largely supervisor-level, executive.
Reference: <author> Bershad, B., E. Lazowska and H. </author> <title> Levy (1988) Presto: A system for object-oriented parallel programming. </title> <booktitle> Software Practice and Experience 18 (8), </booktitle> <pages> 713-732. </pages>
Reference: <author> Black, D., </author> <title> D.B. Golub, D.P. </title> <publisher> Julin, R.F. </publisher>
Reference: <author> Rashid, R.P. Draves, R.W. Dean , A. Forin, J. Barrera, H. Tokuda, G. Malan and D. </author> <title> Bohman (1992) Microkernel operating system architecture and Mach. </title> <booktitle> Proc. Usenix Workshop on Microkernels and Other Kernel Architectures (April), </booktitle> <pages> 11-30. </pages>
Reference: <author> Bodin, F. and T. </author> <title> Priol (1992) Overview of the KOAN Programming Environment for the iPSC/2 and performance evaluation of the BECAUSE test program 2.5.1. </title> <note> IRISIA Publication Interne 689 and Proc of BECAUSE European Workshop (October 1992). </note>
Reference: <author> Bryant, R., H. Chang and B. </author> <title> Rosenburg (1991) Experience developing the RP3 operating system. </title> <booktitle> Usenix Association Proc. Symp. on Experiences with Distributed and Multiprocessor Systems (Summer), </booktitle> <pages> 1-18. </pages>
Reference-contexts: Rothnie, 1992; Holman, 1992). However, it is not clear that all users of parallel architectures require the virtual machine presented by a general-purpose operating system <ref> (e.g. Bryant et al., 1991) </ref>. It is unfortunate if such users are given the alternatives of either compromising with whatever operating system interface is available, or writing all the low-level routines for themselves.
Reference: <author> Bull, M. and G. </author> <title> Riley (1994) A method for developing efficient parallel code on virtual shared memory architectures. </title> <booktitle> In Prep. </booktitle>
Reference-contexts: Furthermore, the two approaches can be complementary: for example, with appropriate low-level monitoring facilities (and both understanding of, and control over, machine behaviour) virtual shared memory was found to provide a good route to efficient parallel numeric implementations <ref> (Bull and Riley, 1994) </ref>. This latter approach is perhaps analogous to compilation of high-level language code which is tunable at assembler-level. The customisable resource management paradigm can also be contrasted with the more monolithic general-purpose operating systems in that the latter, to varying extents, bundle mechanism with policy.
Reference: <author> Campbell, R.H. and N. </author> <title> Islam (1993) CHOICES: A parallel object-oriented operating system. Research Directions in Concurrent Object-Oriented Programming, </title> <editor> ed. G. Agha, P. Wegner and A. Yonezawa. </editor> <publisher> MIT Press, </publisher> <pages> 393-451. </pages>
Reference: <author> Gien, M. </author> <booktitle> (1991) Next generation operating systems architecture. </booktitle> <volume> LNCS 563, </volume> <pages> 227-232. </pages>
Reference-contexts: The facility to vary policy level will be a useful investigative tool. On dedicated systems, managers could run as `trusted'. An analogous mechanism is available in Chorus, where a user-level server can run as a supervisor-level server to improve performance <ref> (Gien, 1991) </ref>. 3.3 Flexibility of use General purpose operating systems, by emphasis-ing optimal multi-user system resource usage, seek to provide reasonable individual application performance. In contrast, the system being developed emphasises the performance of individual applications, but will also provide support for secure multiuser and general-purpose environments.
Reference: <author> Herrmann, B., M.I. Ortega, L. </author> <title> Philippe (1991) UNIX on a multicomputer: The benefits of the CHORUS architecture. </title> <note> Chorus Systems Technical Report CS/TR-91-46. </note>
Reference: <author> Holman, A. </author> <title> (1992) The Meiko Computing Surface: A parallel and scalable open systems platform for Oracle. </title> <publisher> LNCS 618, </publisher> <pages> 96-113. </pages>
Reference: <author> Keane, J.A. and M.Q. </author> <title> Xu (1992) Porting a parallel language onto a virtual shared memory parallel machine. </title> <booktitle> Proc. 1992 DAGS/PC Symp. </booktitle> <month> (June), </month> <pages> 234-245. </pages>
Reference-contexts: This abstraction, like others such as virtual shared memory (or indeed language-based parallel virtual machines) will suit many users. Such virtual machines will enable them, for example, to port existing applications quickly <ref> (e.g. Keane and Xu, 1992) </ref>. On the other hand, the customisation approach seeks to allow an application to determine precisely its resource management policies. This approach can be implemented by providing resource management which is customisable at some level in the system (e.g.
Reference: <author> Lazowska, E.D. </author> <title> (1992) System Support for high performance multiprocessing. </title> <booktitle> Usenix Association Proc. Symp. on Experiences with Distributed and Multiprocessor Systems (March), </booktitle> <pages> 1-11. </pages>
Reference-contexts: LeBlanc and Markatos, 1991; Ritchie and Neufeld, 1993). Systems allow application-oriented customisation both at kernel level (e.g. Mukher-jee and Schwan, 1993) and at user-level (e.g. Ber-shad et al., 1988). Placing customisation at user-level allows the possibility of benefiting from the improved performance described <ref> (e.g. in Anderson et al., 1992, and Lazowska, 1992) </ref> as being associated with user-level mechanisms. A system which supports such customisation should be flexible and extensible. Policy may be provided at user-level on top of a small, largely supervisor-level, executive.
Reference: <author> LeBlanc, T.J. and E. P. </author> <title> Markatos (1991) Operating system support for adaptable real-time systems. </title> <institution> University of Rochester Computer Science and Engineering 1990-1991Research Review, </institution> <month> 14-20. </month>
Reference: <author> Leunig, </author> <title> S.R. (1987) Abstract Data Types in the Flagship System Software. Flagship Document FLAG/DD/303, ICL. </title>
Reference: <author> Marsh, </author> <title> B.D., M.L. Scott, T.J. LeBlanc and E.P. Markatos (1991) First-class user-level threads. </title> <booktitle> ACM operating system Review 25(5) (Proc 13th ACM Symp on operating system Principles (Oct, </booktitle> <year> 1991)), </year> <pages> 110-121. </pages>
Reference-contexts: This state is used to facilitate user-level event handling, and consists mainly of event thread context blocks, counters and flags. The design decision to access event handling state directly rather than via interface routines was made on the grounds of efficiency <ref> (as in e.g. Marsh et al., 1991) </ref>. The trade-off is that this state must be encapsulated in a data type included by all Process Manager instances. Event handling at user-level is to be performed by threads, flagged as runnable by the hardware object, but scheduled by the user-level Process Manager.
Reference: <author> Mayes, K.R. </author> <title> (1993) Trends in operating systems towards dynamic user-level policy provision. </title> <institution> University of Manchester Computer Science Technical Report UMCS-93-9-1. </institution>
Reference-contexts: The application run-time system is effectively extended to incorporate operating system resource management library routines. Such an application-oriented system is being designed and developed at the Centre for Novel Computing at the University of Manchester 1 <ref> (Mayes, 1993) </ref>. 3 An application-oriented sys tem The design of the run-time executive and resource management components of the system being developed is based on the general approach taken by the Flagship project system software (Leunig, 1987; Mayes and Keane, 1993).
Reference: <author> Mayes, K.R. and J.A. </author> <title> Keane (1993) Levels of atomic action in the Flagship parallel system. </title> <journal> Con-currency: Practice and Experience 5(3), </journal> <pages> 193-212. </pages>
Reference-contexts: The application run-time system is effectively extended to incorporate operating system resource management library routines. Such an application-oriented system is being designed and developed at the Centre for Novel Computing at the University of Manchester 1 <ref> (Mayes, 1993) </ref>. 3 An application-oriented sys tem The design of the run-time executive and resource management components of the system being developed is based on the general approach taken by the Flagship project system software (Leunig, 1987; Mayes and Keane, 1993).
Reference: <author> Mukherjee, B. and K. </author> <title> Schwan (1993) Experimentation with a reconfigurable microkernel. </title> <booktitle> Usenix Association Proc. Symp. on Microkernels and other Kernel Architectures (Sept), </booktitle> <pages> 45-60. </pages>
Reference-contexts: One solution to this problem is to provide customisable systems, so that for high performance, parallel applications acquire a tailored resource management environment <ref> (e.g. Mukherjee and Schwan, 1993) </ref>. <p> This converges with the other approach to the reuse of operating system code; that is, linking to specific routines which include code necessary only for the application. This direct linking approach is seen in language systems which provide run-time libraries, and with real-time `operating software' <ref> (Mukherjee et al., 1993) </ref> where the application and resource management routines are intimately combined. Recent systems seek to maximise the user-level provision of policy in libraries for language and real-time support (e.g. LeBlanc and Markatos, 1991; Ritchie and Neufeld, 1993). Systems allow application-oriented customisation both at kernel level (e.g.
Reference: <author> Mukherjee, B., K. Schwan and P. </author> <title> Gopinath (1993) A survey of multiprocessor operating system kernels (draft). </title> <institution> Georgia Institute of Technology, College of Computing Technical Report GIT-CC-92/05. </institution>
Reference-contexts: One solution to this problem is to provide customisable systems, so that for high performance, parallel applications acquire a tailored resource management environment <ref> (e.g. Mukherjee and Schwan, 1993) </ref>. <p> This converges with the other approach to the reuse of operating system code; that is, linking to specific routines which include code necessary only for the application. This direct linking approach is seen in language systems which provide run-time libraries, and with real-time `operating software' <ref> (Mukherjee et al., 1993) </ref> where the application and resource management routines are intimately combined. Recent systems seek to maximise the user-level provision of policy in libraries for language and real-time support (e.g. LeBlanc and Markatos, 1991; Ritchie and Neufeld, 1993). Systems allow application-oriented customisation both at kernel level (e.g.
Reference: <author> Philbin, J. </author> <title> (1992) Customizable policy manage ment in the Sting operating system. </title> <publisher> LNCS 748, </publisher> <pages> 380-401. </pages>
Reference: <author> Ritchie, </author> <title> D.S. and G.W. Neufeld (1993) User level IPC and device management in the Raven kernel. </title> <booktitle> Usenix Association Proc. Symp. on Micro-kernels and other Kernel Architectures (Sept), </booktitle> <pages> 111-125. </pages>
Reference: <author> Rothnie, J. </author> <title> (1992) Kendall Square Research introduction to the KSR1. </title> <booktitle> Proc. 1992 DAGS/PC Symp. </booktitle> <month> (June), </month> <pages> 200-210. </pages>
Reference: <author> Schlichtiger, P. </author> <title> (1991) Closely coupled systems. </title> <publisher> LNCS 563, </publisher> <pages> 44-47. </pages>
Reference-contexts: In the first approach, it has been argued <ref> (e.g. Schlichtiger, 1991) </ref> that operating systems for distributed machines should present an abstraction, a `single system image', to hide the physical ma chine architecture from users. This abstraction, like others such as virtual shared memory (or indeed language-based parallel virtual machines) will suit many users.
Reference: <author> Tanenbaum, A.S., R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, J. Jan-son and G. </author> <title> van Rossum (1990) Experiences with the AMOEBA distributed operating system. </title> <booktitle> Comms ACM 33(12), </booktitle> <pages> 46-63. </pages>
Reference: <author> Ward, M. and P. </author> <title> Townsend (1990) EDS hardware architecture. </title> <publisher> LNCS 457, </publisher> <pages> 816-827. </pages>
Reference-contexts: The hardware object is implemented in assembler and C. 3.5 Current status of the project The system is in the early stages of implementation. The initial target hardware is the EDS machine <ref> (Ward and Townsend, 1990) </ref>. This is a tightly-coupled thirteen-node distributed store multicom-puter, where each node has two Sparc (MMU-cache-coherent) processors sharing nodal store (64 Mb per node). This machine thus presents a model for scalable hybrid multicomputer/multiprocessor architectures.
Reference: <author> Watson, P. and P. </author> <title> Townsend (1990) The EDS parallel relational database system. </title> <publisher> LNCS 503, </publisher> <pages> 149-166. </pages>
Reference: <author> Weiser, M., A. Demers, and C. </author> <title> Hauser (1989) The Portable Common Runtime approach to interoperability. </title> <booktitle> Proc. 12th ACM Symp. on Operating System Principles, </booktitle> <pages> 114-122. </pages>
Reference-contexts: The customisable resource management paradigm can also be contrasted with the more monolithic general-purpose operating systems in that the latter, to varying extents, bundle mechanism with policy. The requirements on the operating system abstractions vary with the richness of languages <ref> (Weiser et al., 1989) </ref>, so that it is difficult for a single set of abstractions to support all languages. General-purpose operating system interface primitives may therefore not support efficient implementations for all language run-time systems and their applications.
References-found: 28

