URL: http://www.cs.ucsd.edu/~bsy/pub/fi.ps
Refering-URL: http://www.cs.ucsd.edu/~bsy/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Forward Integrity For Secure Audit Logs  
Author: Mihir Bellare Bennet S. Yee 
Keyword: Audit logs, MACs, forward integrity.  
Date: November 23, 1997  
Abstract: In this paper, we define the forward integrity security property, motivate its appropriateness as a systems security requirement, and demonstrate designs that achieve this property. Applications include secure audit logs (e.g., syslogd data) for intrusion detection or accountability, communications security, and authenticating partial results of computation for mobile agents. We prove security theorems on our forward integrity message authentication scheme, and discuss the secure audit log application in detail. fl Dept. of Computer Science & Engineering, Mail Code 0114, University of California at San Diego, 9500 Gilman Drive, La Jolla, CA 92093, USA. E-mail: mihir@cs.ucsd.edu. Web page: http://www-cse.ucsd.edu/users/mihir. Supported in part by NSF CAREER Award CCR-9624439 and a 1996 Packard Foundation Fellowship in Science and Engineering. y Dept. of Computer Science & Engineering, Mail Code 0114, University of California at San Diego, 9500 Gilman Drive, La Jolla, CA 92093, USA. E-mail: bsy@cs.ucsd.edu. Web page: http://www-cse.ucsd.edu/users/bsy. Supported in part by a 1996 National Semiconductor Faculty Development Award and the U. S. Postal Service. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Anderson, B. Crispo, J.-H. Lee, C. Manifavas, and R. Needham. </author> <title> The Guy Fawkes protocol, 1997. </title> <type> Preprint. </type>
Reference-contexts: Ross Anderson has suggested the idea of forward integrity for signature schemes <ref> [1] </ref>. 2.6 Non-requirements Log entries, whether still in memory buffers or sent over the network, may have associated privacy requirements. <p> In addition to encrypting these secrets, the logger must authenticate their use at the start of the log: this may be done using a timestamping protocol [9], which would require some network communications, or a public key based signature scheme which has the forward non-repudiability property <ref> [1] </ref>. Rather than generating the secrets in the logger, the key material could be generated by an external agency, e.g., the log verifier, and securely delivered to the logger using a cryptographic protocol with forward privacy.
Reference: [2] <author> W. A. Arbaugh, D. J. Farber, and J. M. Smith. </author> <title> A secure and reliable bootstrap architecture. </title> <booktitle> In Proceedings 1997 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 65-71, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1997. </year> <title> IEEE, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Using removable media, such as WORM drives, for logging is not a viable alternative, since the MLOCR operators can easily swap the logging media. In this work, we do not address the problem of secure boot <ref> [2] </ref>. This is an orthogonal problem. We merely assume that the MLOCR controlling software is initially installed properly, and until the attackers succeed in penetrating the system, the audit log software (and the relevant parts of the underlying operating system) runs correctly.
Reference: [3] <author> M. Bellare, R. Canetti, and H. Krawczyk. </author> <title> Keying hash functions for message authentication. </title> <editor> In N. Koblitz, editor, </editor> <booktitle> Advances in Cryptology: Crypto '96 Proceedings, volume 1109 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The technical challenge will be to design MAC schemes with the FI property. We propose the prf-chain FI MAC. It uses block ciphers (modeled as pseudorandom function families) and standard MACs (e.g. HMAC <ref> [3] </ref>) to achieve FI via a chaining process. The cryptographic security of this scheme is modeled and analyzed in the style of works like [4], meaning a concrete security analysis in the "provable security" paradigm reduces the security of our FI scheme to that of the underlying primitives. <p> The actual MAC under some key k is computed via a fixed MAC scheme whose tagging algorithm is denoted Tag k (). (For example, one could use HMAC <ref> [3] </ref> or the CBC MAC.) This MAC function is assumed secure against chosen message attack in the sense of [4], meaning it is computationally infeasible for an adversary to forge a correct tag for a new message even after a chosen-message attack. 9 3.2.2 Security Analysis of prf-chain FI-MAC First, some
Reference: [4] <author> M. Bellare, J. Kilian, and P. Rogaway. </author> <title> The security of cipher block chaining. </title> <editor> In Y. Desmedt, editor, </editor> <booktitle> Advances in Cryptology: Crypto '94 Proceedings, volume 839 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: We propose the prf-chain FI MAC. It uses block ciphers (modeled as pseudorandom function families) and standard MACs (e.g. HMAC [3]) to achieve FI via a chaining process. The cryptographic security of this scheme is modeled and analyzed in the style of works like <ref> [4] </ref>, meaning a concrete security analysis in the "provable security" paradigm reduces the security of our FI scheme to that of the underlying primitives. Now, let us look at all this more closely. We discuss secure audit logs and the notion of FI in this context, in Section 2 below. <p> In our context, a block cipher can be used in this role, as per <ref> [4] </ref>.) Within any epoch E j , the logger LOG 1 possesses a secret values s j . <p> The actual MAC under some key k is computed via a fixed MAC scheme whose tagging algorithm is denoted Tag k (). (For example, one could use HMAC [3] or the CBC MAC.) This MAC function is assumed secure against chosen message attack in the sense of <ref> [4] </ref>, meaning it is computationally infeasible for an adversary to forge a correct tag for a new message even after a chosen-message attack. 9 3.2.2 Security Analysis of prf-chain FI-MAC First, some notation specific to this scheme.
Reference: [5] <author> M. Bellare and S. Miner. </author> <title> Digital signatures wth forward security. </title> <year> 1997. </year>
Reference-contexts: A technically more challenging problem is to design digital signature schemes with the forward security property. This has been done by Bellare and Miner in <ref> [5] </ref>. Such schemes provide an attractive alternative to the secret-key forward integrity system described here.
Reference: [6] <author> O. Goldreich, S. Goldwasser, and S. Micali. </author> <title> How to construct random functions. </title> <journal> Journal of the ACM, </journal> <volume> 33(4) </volume> <pages> 210-217, </pages> <year> 1986. </year>
Reference-contexts: with time in pre-determined way. 3.2 prf-chain FI-MAC Instead of a statically determined number of epochs where preselected keys occupy storage, the following scheme is cheaper and less awkward to use. 3.2.1 Description of prf-chain FI-MAC Let prf denote a family of pseudo-random functions. (The general notion is due to <ref> [6] </ref>. In our context, a block cipher can be used in this role, as per [4].) Within any epoch E j , the logger LOG 1 possesses a secret values s j .
Reference: [7] <author> R. Gomez, A. Adly, I. Mayergoyz, and E. Burke. </author> <title> Magnetic force scanning tunnelling microscope imaging of overwritten data. </title> <journal> IEEE Transactions on Magenetics, </journal> <volume> 29(6):2380, </volume> <month> November </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: secure audit log scheme to work even if extremely well funded, motivated attacker has complete physical access to the machine, we must be very careful to prevent private data from being written to magnetic media: even overwritten magnetic media can usually be read using magnetic force scanning tunneling microscopy techniques. <ref> [7, 8, 15] </ref> Even if our paging partition (or paging file) is overwritten by new data, there's little guarantee that the old data would then be unreadable by a sophisticated attacker.
Reference: [8] <author> P. Gutmann. </author> <title> Secure deletion of data from magnetic and solid-state memory. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <address> San Jose, CA, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: secure audit log scheme to work even if extremely well funded, motivated attacker has complete physical access to the machine, we must be very careful to prevent private data from being written to magnetic media: even overwritten magnetic media can usually be read using magnetic force scanning tunneling microscopy techniques. <ref> [7, 8, 15] </ref> Even if our paging partition (or paging file) is overwritten by new data, there's little guarantee that the old data would then be unreadable by a sophisticated attacker.
Reference: [9] <author> S. Haber and W. S. Stornetta. </author> <title> How to time-stamp a digital document. </title> <journal> Journal of Cryptology, </journal> <volume> 3(2), </volume> <year> 1991. </year>
Reference-contexts: In addition to encrypting these secrets, the logger must authenticate their use at the start of the log: this may be done using a timestamping protocol <ref> [9] </ref>, which would require some network communications, or a public key based signature scheme which has the forward non-repudiability property [1].
Reference: [10] <author> M. P. Herlihy and J. D. Tygar. </author> <title> How to make replicated data secure. </title> <booktitle> In Advances in Cryptology, CRYPTO-87, </booktitle> <pages> pages 379-391. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1987. </year>
Reference-contexts: The additional security hinges upon the hopes that an attacker will not know to, or be able to, compromise the remote host as well. Additionally, log replication may be used <ref> [10] </ref>, where the audit data is copied to multiple remote logging hosts in order to to force the attacker to break into all or most of the remote logging hosts in order to erase evidence of the original intrusion.
Reference: [11] <author> M. K. McKusick, K. Bostic, and M. J. Karels. </author> <title> The Design and Implementation of the 4.4 BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Similarly, for efficiency audit log entries are often buffered and only periodically flushed to disk (perhaps an append-only file, e.g., 4.4 BSD's chflags (2) <ref> [11, 12] </ref>) or to a remote logging host, perhaps on a daily or even weekly basis: a DD-FI log system can prevent an attacker from undetectably modifying these in-memory or in-transit copies of the log.
Reference: [12] <author> M. K. McKusick, M. J. Karels, S. J. Le*er, W. Joy, and R. Fabry. </author> <title> Berkeley Software Architecture Manual, </title> <address> 4.4BSD Edition. </address> <institution> Computer Systems Research Group, Computer Science Division, Department of Electrical Engineering and Computer Science, University of Califor-nia, Berkeley, Berkeley, California. </institution>
Reference-contexts: Similarly, for efficiency audit log entries are often buffered and only periodically flushed to disk (perhaps an append-only file, e.g., 4.4 BSD's chflags (2) <ref> [11, 12] </ref>) or to a remote logging host, perhaps on a daily or even weekly basis: a DD-FI log system can prevent an attacker from undetectably modifying these in-memory or in-transit copies of the log.
Reference: [13] <editor> A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone. </editor> <booktitle> Handbook of Applied Cryptography. </booktitle> <publisher> CRC Press, </publisher> <year> 1997. </year> <note> ISBN 0-8493-8523-7. </note>
Reference-contexts: 1 Introduction and Motivation We introduce a novel security property that we call forward integrity (FI). What is it? View it as an integrity analog of "forward privacy" (FP, also known in the literature as "perfect forward secrecy" or PFS 1 ) <ref> [13, Chapter 12] </ref>.
Reference: [14] <author> U. S. </author> <title> Department of Defense, Computer Security Center. Trusted computer system evaluation criteria, </title> <month> December </month> <year> 1985. </year>
Reference-contexts: Next, we define the notation that we will use in the rest of this paper to talk about audit log security. We also discuss some requirements and non-requirements for secure audit logs. 2.1 Existing Audit Log Techniques In the Orange book <ref> [14] </ref>, audit log security is defined informally in Requirement 4: Audit data must be protected from modification and unauthorized destruction to permit detection and after-the-fact investigations of security violations.
Reference: [15] <author> V. Veeravalli. </author> <title> Detection of digital information from erased magnetic disks. </title> <type> Technical report, </type> <institution> Carnegie-Mellon University, </institution> <year> 1987. </year> <type> MS Thesis. </type>
Reference-contexts: secure audit log scheme to work even if extremely well funded, motivated attacker has complete physical access to the machine, we must be very careful to prevent private data from being written to magnetic media: even overwritten magnetic media can usually be read using magnetic force scanning tunneling microscopy techniques. <ref> [7, 8, 15] </ref> Even if our paging partition (or paging file) is overwritten by new data, there's little guarantee that the old data would then be unreadable by a sophisticated attacker.
Reference: [16] <author> B. S. Yee. </author> <title> Using Secure Coprocessors. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1994. </year>
Reference-contexts: Note that FI alone cannot | theoretically | prevent fraud: a well funded adversary can completely replicate the state to another machine (e.g., temporarily remove and copy the hard disks) and search for any stored keys at leisure. Using some physically protection component <ref> [16] </ref> would be required to protect against that sort of attack.
Reference: [17] <author> B. S. Yee. </author> <title> A sanctuary for mobile agents. </title> <type> Technical Report CS97-537, </type> <institution> University of California at San Diego, La Jolla, </institution> <address> CA, </address> <month> April </month> <year> 1997. </year> <note> An earlier version of this paper appeared at the DARPA Workshop on Foundations for Secure Mobile Code. 16 </note>
Reference-contexts: We would like to prevent a potentially malicious agent server, which has complete access to a mobile agent's state, from corrupting any partial results computed while the agent was at a previous host <ref> [17] </ref>. If, for example, the agent is performing price comparisons on the behalf of the user, a malicious server would wish to alter the agent's memory of the best price seen so far, so that the malicious server would get the user's business instead of some previously visited server.
References-found: 17

