URL: ftp://n1.sp.cs.cmu.edu/pub/hzhang/SIGCOM98.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/hzhang/WWW/publications.html
Root-URL: 
Email: istoica@cs.cmu.edu  shenker@parc.xerox.com  hzhang@cs.cmu.edu  
Title: Core-Stateless Fair Queueing: Achieving Approximately Fair Bandwidth Allocations in High Speed Networks  
Author: Ion Stoica Scott Shenker Hui Zhang 
Affiliation: CMU  Xerox PARC  CMU  
Abstract: Router mechanisms designed to achieve fair bandwidth allocations, like Fair Queueing, have many desirable properties for congestion control in the Internet. However, such mechanisms usually need to maintain state, manage buffers, and/or perform packet scheduling on a per flow basis, and this complexity may prevent them from being cost-effectively implemented and widely deployed. In this paper, we propose an architecture that significantly reduces this implementation complexity yet still achieves approximately fair bandwidth allocations. We apply this approach to an island of routers that is, a contiguous region of the network and we distinguish between edge routers and core routers. Edge routers maintain per flow state; they estimate the incoming rate of each flow and insert a label into each packet header based on this estimate. Core routers maintain no per flow state; they use FIFO packet scheduling augmented by a probabilistic dropping algorithm that uses the packet labels and an estimate of the aggregate traffic at the router. We call the scheme Core-Stateless Fair Queueing. We present simulations and analysis on the performance of this approach, and discuss an alternate approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.C.R. Bennett, D.C. Stephens, and H. Zhang. </author> <title> High speed, scalable, and accurate implementation of packet fair queueing algorithms in ATM networks. </title> <booktitle> In Proceedings of IEEE ICNP '97, </booktitle> <pages> pages 7-14, </pages> <address> Atlanta, GA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: The operations can be as simple as deciding whether to drop or queue the packet (e.g., FRED), or as complex as manipulation of priority queues (e.g., Fair Queueing). While a number of techniques have been proposed to reduce the complexity of the per packet operations <ref> [1, 20, 21] </ref>, and commercial implementations are available in some intermediate class routers, it is still unclear whether these algorithms can be cost-effectively implemented in high-speed backbone routers because all these algorithms still require packet classification and per flow state management.
Reference: [2] <author> J.C.R. Bennett and H. Zhang. </author> <title> WF 2 Q: Worst-case fair weighted fair queueing. </title> <booktitle> In Proceedings of IEEE INFO-COM'96, </booktitle> <pages> pages 120-128, </pages> <address> San Francisco, CA, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants <ref> [2, 10, 20] </ref> or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today.
Reference: [3] <author> B. Braden, D. Clark, J. Crowcroft, B. Davie, S. Deering, D. Estrin, S. Floyd, V. Jacobson, G. Minshall, C. Partridge, L. Peterson, K. K. Ramakrishnan, S. Shenker, and J. Wro-clawski. </author> <title> Recommendations on queue management and congestion avoidance in the internet, </title> <month> January </month> <year> 1998. </year> <title> Internet Draft. </title>
Reference-contexts: In this section we motivate the role of fair allocations in congestion control by discussing the problem of unfriendly flows, and then presenting two approaches to this problem; we end this section with a discussion of the role of punishment. In what follows we borrow heavily from [7], <ref> [3] </ref>, and [8], and have benefited greatly from conversations with Steve Deering and Sally Floyd. We should note that the matters addressed in this section are rather controversial and this overview unavoidably reflects our prejudices.
Reference: [4] <author> R. Callon, P. Doolan, N. Feldman, A. Fredette, G. Swallow, and A. Viswanathan. </author> <title> A Framework for Multiprotocol Label Switching, </title> <month> November </month> <year> 1997. </year> <title> Internet Draft. </title>
Reference-contexts: Efficient and general-purpose packet classification algorithms are still under active research. We expect to leverage these results. We also note that packet classification at ingress nodes is needed for a number of other purposes, such as in the context of Multiprotocol Label Switching (MPLS) <ref> [4] </ref> or for accounting purposes; therefore, the classification required for CSFQ may not be an extra cost.
Reference: [5] <author> M. E. Crovella and A. Bestavros. </author> <title> Self-similarity in world wide web traffic evidence and possible causes. </title> <booktitle> In Proceedings of the ACM SIGMETRICS 96, </booktitle> <pages> pages 160-169, </pages> <address> Philadelphia, PA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: These values are consistent with those presented in the <ref> [5] </ref>. In addition, there is a single 10 Mbps UDP flow. Table 2 presents the mean transfer time and the corresponding standard deviations.
Reference: [6] <author> R. L. Cruz. </author> <title> SCED+: Efficient Management of Quality of Service Guarantees. </title> <booktitle> In Proceedings of INFOCOM'98, </booktitle> <pages> pages 625-642, </pages> <address> San Francisco, CA, </address> <year> 1998. </year>
Reference-contexts: In addition, we should note that it is possible to use a CSFQ-like architecture to provide service guarantees. A possible approach would be to use the route pinning mechanisms described in [23], and to shape the aggregate guaranteed traffic at each output link of core routers <ref> [6] </ref>. One of the initial assumptions of this paper was that the more traditional mechanisms used to achieve fair allocations, such as Fair Queueing or FRED, were too complex to implement cost-effectively at sufficiently high speeds.
Reference: [7] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <journal> In Journal of Inter-networking Research and Experience, </journal> <pages> pages 3-26, </pages> <month> October </month> <year> 1990. </year> <booktitle> Also in Proceedings of ACM SIGCOMM'89, </booktitle> <pages> pp 3-12. </pages>
Reference-contexts: Fair bandwidth allocation protects well-behaved flows from ill-behaved ones, and allows a diverse set of end-to-end congestion control policies to co-exist in the network <ref> [7] </ref>. As we discuss in Section 4, fl This research was sponsored by DARPA under contract numbers N66001-96-C-8528, E30602-97-2-0287, and DABT63-94-C-0073, and by a NSF Career Award under grant number NCR-9624979. Additional support was provided by Intel Corp., MCI, and Sun Microsys-tems. <p> contained in this document are those of the authors and should no be interpreted as representing the official policies, either expressed or implied, of DARPA, NSF, Intel, MCI, Sun, or the U.S. government. some maintain that fair bandwidth allocation 1 plays a necessary, not just beneficial, role in congestion control <ref> [7, 19] </ref>. Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants [2, 10, 20] or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. <p> Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing <ref> [7, 18] </ref> and its many variants [2, 10, 20] or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today. <p> Thus, if this approach were adopted within the high speed interiors of ISP's, and fair allocation mechanisms were adopted for the slower links outside of these high-speed interiors, then approximately fair allocations could be achieved everywhere. However, this approach, like Fair Queueing <ref> [7] </ref> or RED [9], still provides benefit if adopted in an incremental fashion, although the incremental adoption must be done on an island-by-island basis, not on a router-by-router basis. <p> In this section we motivate the role of fair allocations in congestion control by discussing the problem of unfriendly flows, and then presenting two approaches to this problem; we end this section with a discussion of the role of punishment. In what follows we borrow heavily from <ref> [7] </ref>, [3], and [8], and have benefited greatly from conversations with Steve Deering and Sally Floyd. We should note that the matters addressed in this section are rather controversial and this overview unavoidably reflects our prejudices.
Reference: [8] <author> S. Floyd and K. </author> <month> Fall. </month> <title> Router mechanisms to support end-to-end congestion control, </title> <month> February </month> <year> 1997. </year> <note> LBL Technical Report. </note>
Reference-contexts: In Section 4 we return to the basic question of why fair allocations are relevant to congestion control. Allocating bandwidth fairly is one way to address what we call the unfriendly flow problem; we also discuss an alternate approach to addressing this problem, the identification approach as described in <ref> [8] </ref>. We conclude with a summary in Section 5. <p> In what follows we borrow heavily from [7], [3], and <ref> [8] </ref>, and have benefited greatly from conversations with Steve Deering and Sally Floyd. We should note that the matters addressed in this section are rather controversial and this overview unavoidably reflects our prejudices. <p> In particular, assumption (2) requires, in the language of <ref> [8] </ref>, that all flows are TCP-friendly. 8 The assumption of universal cooperation can be violated in three general ways. First, some applications are unresponsive in that they don't implement any congestion control algorithms at all. <p> We therefore started this paper with the fundamental assumption that one needs to deal with the problem of unfriendly flows. 8 Actually, the term TCP-friendly in <ref> [8] </ref> means that "their arrival rate does not exceed that of any TCP connection in the same circumstances." Here we use it to mean that the arrival rates are roughly comparable, a property that should be more precisely called TCP-equivalent. <p> Our goal in this paper was to present a more scalable realization of the allocation approach. The problem of unfriendly flows can be addressed in another manner. In the identification approach, as best exemplified by <ref> [8] </ref>, routers use a lightweight detection algorithm to identify unfriendly flows, and then explicitly manage the bandwidth of these unfriendly flows. <p> This approach relies on the ability to accurately identify unfriendly flows with relatively lightweight router mechanisms. This is a daunting task. Below we discuss the process of identifying unfriendly flows, and then present simulation results of the identification algorithm in <ref> [8] </ref>; we are not aware of other realizations of the identification approach. One can think of the process of identifying unfriendly flows as occurring in two logically distinct stages. The first, and relatively easy, step is to estimate the arrival rate of a flow. <p> The second, and harder, step is to use this arrival rate information (along with the dropping rate and other aggregate measurements) to decide if the flow is unfriendly. Assuming that friendly flows use a TCP-like adjustment method of increase-by-one and decrease-by-half, one can derive an expression (see <ref> [8] </ref> for details) for the bandwidth share S as a function of the dropping rate p, round-trip time R, and packet size B: S flB R p p for some constant fl. <p> However, we are not aware of any algorithm that can achieve this management goal. 12 We are not delving into some of the details of the approach layed out in <ref> [8] </ref> where flows can also be classified as very-high-bandwidth but not necessarily unfriendly, and as unresponsive (and therefore unfriendly). <p> Simulation 1 Simulation 2 Algorithm UDP TCP-1 TCP-2 TCP-1 TCP-2 REDI 0.906 0.280 0.278 0.565 0.891 CSFQ 0.554 0.468 0.478 0.729 0.747 Table 5: (Simulation 1) The throughputs in Mbps of one UDP and two TCP flows along a 1.5 Mbps link under REDI <ref> [8] </ref>, and CSFQ, respectively. (Simulation 2) The throughputs of two TCPs (where TCP-2 opens its congestion window three times faster than TCP-1), under REDI, and CSFQ, respectively. To see how this occurs in practice, consider the following two experiments using the identification algorithm described in [8], which we call RED with <p> 1.5 Mbps link under REDI <ref> [8] </ref>, and CSFQ, respectively. (Simulation 2) The throughputs of two TCPs (where TCP-2 opens its congestion window three times faster than TCP-1), under REDI, and CSFQ, respectively. To see how this occurs in practice, consider the following two experiments using the identification algorithm described in [8], which we call RED with Identification (REDI). 13 In each case there are multiple flows traversing a 1.5 Mbps link with a latency of 3 ms; the output buffer size is 32 KB and all constants K, K ff , and K c , respectively, are set to 400 ms. <p> Nonetheless, the fire-hose problem should not be ignored; flows should be given an incentive to adopt responsive end-to-end congestion. One possible method is to explicitly punish unresponsive flows by denying them their fair share. 16 Punishment is discussed as one possible bandwidth management approach in <ref> [8] </ref> (the approach described there is informally referred to as RED-with-a-penalty-box). Accurately identifying flows as unresponsive may be far easier than identifying them as unfriendly. <p> However, as we saw in our simulations, doing so in the context of the identification approach is far from a solved problem; the challenge is to determine if a flow has decreased usage in response to increases in overall packet drop rates <ref> [8] </ref>. Identifying unresponsive flows is more straightforward in the allocation approach, since here one need only determine if a flow has had significantly high drop rates over a long period of time. As a proof of concept we have implemented a simple identification and punishment mechanism. <p> We assume this is a too heavyweight a mechanism for the Internet. CSFQ with this punishment extension may be seen as a marriage of the allocation and identification approaches; the difference between <ref> [8] </ref> and our approach is largely one of the relative importance of identification and allocation. We start with allocation as fundamental, and then do identification only when necessary; [8] starts with identification, and then considers allocation only in the context of managing the bandwidth of identified flows. 5 Summary This paper <p> CSFQ with this punishment extension may be seen as a marriage of the allocation and identification approaches; the difference between <ref> [8] </ref> and our approach is largely one of the relative importance of identification and allocation. We start with allocation as fundamental, and then do identification only when necessary; [8] starts with identification, and then considers allocation only in the context of managing the bandwidth of identified flows. 5 Summary This paper presents an architecture for achieving reasonably fair bandwidth allocations while not requiring per-flow state in core routers.
Reference: [9] <author> S. Floyd and V. Jacobson. </author> <title> Random early detection for congestion avoidance. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(4) </volume> <pages> 397-413, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Thus, if this approach were adopted within the high speed interiors of ISP's, and fair allocation mechanisms were adopted for the slower links outside of these high-speed interiors, then approximately fair allocations could be achieved everywhere. However, this approach, like Fair Queueing [7] or RED <ref> [9] </ref>, still provides benefit if adopted in an incremental fashion, although the incremental adoption must be done on an island-by-island basis, not on a router-by-router basis. <p> Since drop-tail behavior will defeat the purpose of our algorithm, and may exhibit undesirable properties in the case of adaptive flows such as TCP <ref> [9] </ref>, it is important to limit its effect. <p> RED <ref> [9] </ref> starts to probabilistically drop packets long (a) (b) and all flows are UDPs. The arrival rate for flow i is (i + 1) times larger than its fair share.
Reference: [10] <author> S. Golestani. </author> <title> A self-clocked fair queueing scheme for broadband applications. </title> <booktitle> In Proceedings of IEEE INFOCOM'94, </booktitle> <pages> pages 636-646, </pages> <address> Toronto, CA, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants <ref> [2, 10, 20] </ref> or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today.
Reference: [11] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proceedings of ACM SIGCOMM'88, </booktitle> <pages> pages 314-329, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: The current Internet, which has mostly FIFO queueing and drop-tail mechanisms in its routers, relies on end-to-end congestion control in which hosts curtail their transmission rates when they detect that the network is congested. The most widely utilized form of end-to-end congestion control is that embodied in TCP <ref> [11] </ref>, which has been tremendously successful in preventing congestion collapse.
Reference: [12] <author> J. Jaffe. </author> <title> Bottleneck flow control. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 7(29) </volume> <pages> 954-962, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: To this end, we propose and examine an architecture and a set of algorithms that allocate bandwidth in an approximately fair manner while allowing the routers on high-speed links to use FIFO queueing and maintain no per-flow state. 1 We use the max-min definition of fairness <ref> [12] </ref> which, while not the only possible candidate for fairness, is certainly a reasonable one and, moreover, can be implemented with only local information. In this approach, we identify an island of routers 2 and dis-tinguish between the edge and the core of the island.
Reference: [13] <author> S. Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In Proceedings of ACM SIGCOMM'91, </booktitle> <pages> pages 3-15, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Note that the allocation approach does not provide an incentive for flows to be TCP-friendly (an example of an alternative end-to-end congestion control algorithm is described in <ref> [13] </ref>), but does provide strong incentives for drop-intolerant applications to use some form of end-to-end congestion control. 10 Of course, the canonical implementations of the allocation approach, such as Fair Queueing, all require significant complexity in routers.
Reference: [14] <author> D. Lin and R. Morris. </author> <title> Dynamics of random early detection. </title> <booktitle> In Proceedings of ACM SIGCOMM '97, </booktitle> <pages> pages 127-137, </pages> <address> Cannes, France, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants [2, 10, 20] or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) <ref> [14] </ref>. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today. In particular, fair allocation mechanisms inherently require the routers to maintain state and perform operations on a per flow basis. <p> When the exponentially averaged buffer occupancy is between the two thresholds, the packet dropping probability increases linearly with buffer occupancy. * FRED (Flow Random Early Drop) This algorithm extends RED to provide some degree of fair bandwidth allocation <ref> [14] </ref>. To achieve fairness, FRED maintains state for all flows that have at least one packet in the buffer. Unlike RED where the dropping decision is based only on the buffer state, in FRED dropping decisions are based on this flow state.
Reference: [15] <author> S. McCanne. </author> <title> Scalable Compression and Transmission of Internet Multicast Video. </title> <type> PhD dissertation, </type> <institution> University of California Berkeley, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Due to space limitations, we only report on a small sampling of the simulations we have run. 5 All simulations were performed in ns-2 [17], which provide accurate packet-level implementation for various network protocols, such as TCP and RLM <ref> [15] </ref> (Receiver-driven Layered Multicast), and various buffer management and scheduling algorithms, such as RED and DRR. All algorithms used in the simulation, except CSFQ and FRED, were part of the standard ns-2 distribution. Unless otherwise specified, we use the following parameters for the simulations in this section. <p> Receiver-driven Layered Multicast (RLM) <ref> [15] </ref> is an adaptive scheme in which the source sends the information encoded into a number of layers (each to its own multicast group) and the receiver joins or leaves the groups associated with the layers based on how many packet drops it is experiencing. <p> This hysteresis in the RLM versus TCP behavior was first pointed out to us by Steve McCanne <ref> [15] </ref>. 4.2 Two Approaches There are, in the literature, two general approaches to addressing the problem of unfriendly flows. The first is the allocation approach.
Reference: [16] <author> J Nagle. </author> <title> On packet switches with infinite storage. </title> <journal> IEEE Trans. On Communications, </journal> <volume> 35(4) </volume> <pages> 435-438, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction A central tenet of the Internet architecture is that congestion control is achieved mainly through end-host algorithms. However, starting with Nagle <ref> [16] </ref>, many researchers observed that such end-to-end congestion control solutions are greatly improved when routers have mechanisms that allocate bandwidth in a fair manner. Fair bandwidth allocation protects well-behaved flows from ill-behaved ones, and allows a diverse set of end-to-end congestion control policies to co-exist in the network [7].
Reference: [17] <institution> Ucb/lbnl/vint network simulator - ns (version 2). </institution>
Reference-contexts: We use an assortment of traffic sources (mainly TCP sources and constant bit rate UDP sources, 4 but also some on-off sources) and topologies. Due to space limitations, we only report on a small sampling of the simulations we have run. 5 All simulations were performed in ns-2 <ref> [17] </ref>, which provide accurate packet-level implementation for various network protocols, such as TCP and RLM [15] (Receiver-driven Layered Multicast), and various buffer management and scheduling algorithms, such as RED and DRR. All algorithms used in the simulation, except CSFQ and FRED, were part of the standard ns-2 distribution.
Reference: [18] <author> A. Parekh and R. Gallager. </author> <title> A generalized processor sharing approach to flow control the single node case. </title> <booktitle> In Proceedings of the INFOCOM'92, </booktitle> <year> 1992. </year>
Reference-contexts: Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing <ref> [7, 18] </ref> and its many variants [2, 10, 20] or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today.
Reference: [19] <author> S. Shenker. </author> <title> Making greed work in networks: A game theoretical analysis of switch service disciplines. </title> <booktitle> In Proceedings of ACM SIGCOMM'94, </booktitle> <pages> pages 47-57, </pages> <address> London, UK, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: contained in this document are those of the authors and should no be interpreted as representing the official policies, either expressed or implied, of DARPA, NSF, Intel, MCI, Sun, or the U.S. government. some maintain that fair bandwidth allocation 1 plays a necessary, not just beneficial, role in congestion control <ref> [7, 19] </ref>. Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants [2, 10, 20] or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14].
Reference: [20] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient fair queueing using deficit round robin. </title> <booktitle> In Proceedings of SIGCOMM'95, </booktitle> <pages> pages 231-243, </pages> <address> Boston, MA, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Until now, fair allocations were typically achieved by using per-flow queueing mechanisms such as Fair Queueing [7, 18] and its many variants <ref> [2, 10, 20] </ref> or per-flow dropping mechanisms such as Flow Random Early Drop (FRED) [14]. These mechanisms are more complex to implement than traditional FIFO queueing with drop-tail, which is the most widely implemented and deployed mechanism in routers today. <p> The operations can be as simple as deciding whether to drop or queue the packet (e.g., FRED), or as complex as manipulation of priority queues (e.g., Fair Queueing). While a number of techniques have been proposed to reduce the complexity of the per packet operations <ref> [1, 20, 21] </ref>, and commercial implementations are available in some intermediate class routers, it is still unclear whether these algorithms can be cost-effectively implemented in high-speed backbone routers because all these algorithms still require packet classification and per flow state management. <p> As a general rule, FRED-2 performs better than FRED-1 only when the number of flows is large. In the following data, when we do not distinguish between the two, we are quoting the results from the version of FRED which performed better. * DRR (Deficit Round Robin) This algorithm <ref> [20] </ref> represents an efficient implementation of the well-known weighted fair queueing (WFQ) discipline. The buffer management scheme assumes that when the buffer is full the packet from the longest queue is dropped.
Reference: [21] <author> D. Stilliadis and A. Varma. </author> <title> Efficient fair queueing algorithms for packet-switched networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 6(2) </volume> <pages> 175-185, </pages> <month> April </month> <year> 1998. </year>
Reference-contexts: The operations can be as simple as deciding whether to drop or queue the packet (e.g., FRED), or as complex as manipulation of priority queues (e.g., Fair Queueing). While a number of techniques have been proposed to reduce the complexity of the per packet operations <ref> [1, 20, 21] </ref>, and commercial implementations are available in some intermediate class routers, it is still unclear whether these algorithms can be cost-effectively implemented in high-speed backbone routers because all these algorithms still require packet classification and per flow state management.
Reference: [22] <author> I. Stoica, S. Shenker, and H. Zhang. </author> <title> Core-stateless fair queueing: Achieving approximately fair banwidth allocations in high speed nteworks, </title> <month> June </month> <year> 1998. </year> <type> Technical Report CMU-CS-98-136, </type> <institution> Carnegie Mellon University. </institution>
Reference-contexts: We discuss the rationale for using the form e T k i =K for the exponential weight in Section 2.7. In the longer version of this paper <ref> [22] </ref> we show that, under a wide range of conditions, this estimation algorithm converges. 2.2.2 Link Fair Rate Estimation In this section, we present an estimation algorithm for ff (t). <p> For generality, this result is given for weighted CSFQ. The proof is given in <ref> [22] </ref>. Our algorithm is built around several estimation procedures, and thus is inherently inexact. One natural concern is whether a flow can purposely "exploit" these inaccuracies to get more than its fair share of bandwidth. <p> It can be shown that by using this rule an idle link that becomes suddenly congested by a set of identical UDP sources will not experience buffer overflow before the algorithm detects the congestion, as long as the aggregate arrival rate is less than 10 times the link capacity (see <ref> [22] </ref>). competes with N 1 UDP flows sending at twice their allocated rates, as a function of N . RED, as representing the (unfair) status quo. The goal of these experiments is to determine where CSFQ sits between these two extremes.
Reference: [23] <author> I. Stoica and H. Zhang. LIRA: </author> <title> A model for service differentiation in the internet. </title> <booktitle> In Proceedings of NOSSDAV'98, </booktitle> <address> London, UK, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: In addition, we should note that it is possible to use a CSFQ-like architecture to provide service guarantees. A possible approach would be to use the route pinning mechanisms described in <ref> [23] </ref>, and to shape the aggregate guaranteed traffic at each output link of core routers [6].
Reference: [24] <author> Z. Wang. </author> <title> User-share differentiation (USD) scalable bandwidth allocation for differentiated services, </title> <month> May </month> <year> 1998. </year> <title> Internet Draft. </title>
Reference-contexts: That is, our algorithm cannot accommodate situations where the relative weights of flows differ from router to router within an island. However, even with this limitation, weighted CSFQ may prove a valuable mechanism in implementing differential services, such as the one proposed in <ref> [24] </ref>. 2.4 Performance Bounds We now present the main theoretical result of the paper. For generality, this result is given for weighted CSFQ. The proof is given in [22]. Our algorithm is built around several estimation procedures, and thus is inherently inexact.
References-found: 24

