URL: http://robotics.eecs.berkeley.edu/~emiris/papers/ijcga95.ps.gz
Refering-URL: http://robotics.eecs.berkeley.edu/~emiris/
Root-URL: 
Email: emiris@sophia.inria.fr  
Title: A Complete Implementation for Computing General Dimensional Convex Hulls  
Author: Ioannis Z. Emiris 
Address: B.P. 93, 06902 Sophia-Antipolis, France.  
Affiliation: Projet SAFIR, I.N.R.I.A.,  
Abstract: We study two important, and often complementary, issues in the implementation of geometric algorithms, namely exact arithmetic and degeneracy. We focus on integer arithmetic and propose a general and ecient method for its implementation based on modular arithmetic. We suggest that probabilistic modular arithmetic may be of wide interest, as it combines the advantages of modular arithmetic with randomization in order to speed up the lifting of residues to an integer. We derive general error bounds and discuss the implementation of this approach in our general-dimension convex hull program. The use of perturbations as a method to cope with input degeneracy is also illustrated. We present the implementation of a computationally ecient scheme that, moreover, greatly simplites the task of programming. We concentrate on postprocessing, often perceived as the Achilles' heel of perturbations. Starting in the context of a specitc application in robotics, we examine the complexity of postprocessing and attempt to delimit the cases where perturbations become a hindrance rather than an enhancement. Lastly, we discuss the visualization capabilities of our software and illustrate them for problems in computational algebraic geometry.
Abstract-found: 1
Intro-found: 1
Reference: [AHU74] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1974. </year>
Reference-contexts: prime, it can be shown that a (k) = a (k1) + (a k a (k1) )s k mod p k i=1 Let M (b) = O (b log b log log b) denote the bit complexity to execute any one of the four basic arithmetic operations between b-bit integers <ref> [AHU74] </ref>. Let k denote the number of tnite telds Z p i , for distinct primes p 1 ; : : : ; p k , necessary to carry out a particular computation. The trst and third stage have each bit complexity O (M (k) log k) [AHU74]. <p> between b-bit integers <ref> [AHU74] </ref>. Let k denote the number of tnite telds Z p i , for distinct primes p 1 ; : : : ; p k , necessary to carry out a particular computation. The trst and third stage have each bit complexity O (M (k) log k) [AHU74]. The middle stage is the actual computation within each Z p i . Since all primes p i have constant bit size independent of the size of the answer, the bit complexity of this phase is k times the algebraic complexity of the desired computation.
Reference: [BDH93] <author> C.B. Barber, D.P. Dobkin, and H. Huhdanpaa. </author> <title> The Quickhull algorithm for convex hull. </title> <type> Tech. Report GCG53, </type> <institution> Geometry Center, Univ. of Minnesota, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: There is a variety of convex hull algorithms and programs. In the past few years, there have been some implementations of general dimension convex hull algorithms, e.g. K. Clarkson's and <ref> [BDH93, BMS94] </ref>. As far as algorithms are concerned, we restrict attention to Beneath-Beyond. This is an incremental method that repeats the following step: given the convex hull of a subset of the points, it adds one point and updates the convex hull. <p> This approach requires that the input points have distinct coordinates along the chosen axis, a condition which is simulated by our perturbation. More ecient approaches exist for enumerating the visible facets, e.g. <ref> [CS89, Sei91, BDS + 92, BDH93] </ref>. The visibility test consists of deciding whether a facet detned by d + 1 points is visible by another point.
Reference: [BDS + 92] <author> J.D. Boissonnat, O. Devillers, R. Schott, M. Teillaud, and M. Yvinec. </author> <title> Appliactions of random sampling to on-line algorithms in computational geometry. </title> <journal> Discr. and Comput. Geometry, </journal> <volume> 8:5171, </volume> <year> 1992. </year>
Reference-contexts: If the point lies outside the given polytope, the set of visible facets must be identited. The algorithm's eciency depends heavily on how this process is carried out; there are several dierent approaches, see e.g. <ref> [CS89, Sei91, BDS + 92] </ref>. Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner [Ede86, EW86, EG86]. <p> This approach requires that the input points have distinct coordinates along the chosen axis, a condition which is simulated by our perturbation. More ecient approaches exist for enumerating the visible facets, e.g. <ref> [CS89, Sei91, BDS + 92, BDH93] </ref>. The visibility test consists of deciding whether a facet detned by d + 1 points is visible by another point.
Reference: [BKST78] <author> J.L. Bentley, H.T. Kung, M. Schkolnick, and C.D. Thompson. </author> <title> On the average number of maxima in a set of vectors. </title> <journal> J. ACM, </journal> <volume> 25:536543, </volume> <year> 1978. </year>
Reference-contexts: In the worst case, the hull of n points in d dimensions has O (n bd=2c ) facets. However, the expected number of facets for points selected randomly as above is proportional to log d1 n <ref> [BKST78] </ref>; this is verited by our experimental results. 5 Postprocessing This section starts by describing the output of the implementation discussed above and then focuses on the postprocessing required for recovering a dierent description of the convex hull. We report on our experience with implementing this postprocessing in three dimensions.
Reference: [BMS94] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> On degeneracy in geometric computations. </title> <booktitle> In Proc. 5th ACMSIAM Symp. on Discr. Algorithms, </booktitle> <pages> pages 1623, </pages> <year> 1994. </year>
Reference-contexts: There is a variety of convex hull algorithms and programs. In the past few years, there have been some implementations of general dimension convex hull algorithms, e.g. K. Clarkson's and <ref> [BDH93, BMS94] </ref>. As far as algorithms are concerned, we restrict attention to Beneath-Beyond. This is an incremental method that repeats the following step: given the convex hull of a subset of the points, it adds one point and updates the convex hull. <p> This leads to authors to conclude against suggesting the use of perturbations in this case. We must mention that the basic existential question on the perturbation method is still open. After a variety of perturbation schemes have been proposed, recent work argues against the general applicability of this method <ref> [BMS94, Sch94] </ref> motivated by the observation that the diculty and complexity of postprocessing may dominate that of the entire program. Dierent approaches as well as implementations for exact arithmetic already exist, e.g. [DS88, FvW93, Yap93], though none considers the approach adopted in this paper.
Reference: [CE93] <author> J. Canny and I. Emiris. </author> <title> An ecient algorithm for the sparse mixed resultant. </title> <editor> In G. Cohen, T. Mora, and O. Moreno, editors, </editor> <booktitle> Proc. Intern. Symp. Applied Algebra, Algebraic Algor. and Error-Corr. Codes, Lect. Notes in Comp. Science 263, </booktitle> <pages> pages 89104, </pages> <address> Puerto Rico, 1993. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: An important object in the study of systems of n + 1 polynomials is the sparse, or Newton, resultant. Two of the algorithms that construct this resultant <ref> [CE93, CP93] </ref> rely on a mixed subdivision of the Minkowski sum of the n + 1 corresponding Newton polytopes. Recall that the Minkowski sum of two convex polytopes A and B is convex polytope A + B = fa + bja 2 A; b 2 Bg.
Reference: [CP93] <author> J. Canny and P. Pedersen. </author> <title> An algorithm for the Newton resultant. </title> <type> Technical Report 1394, </type> <institution> Computer Science Dept., Cornell University, </institution> <year> 1993. </year>
Reference-contexts: An important object in the study of systems of n + 1 polynomials is the sparse, or Newton, resultant. Two of the algorithms that construct this resultant <ref> [CE93, CP93] </ref> rely on a mixed subdivision of the Minkowski sum of the n + 1 corresponding Newton polytopes. Recall that the Minkowski sum of two convex polytopes A and B is convex polytope A + B = fa + bja 2 A; b 2 Bg.
Reference: [CS89] <author> K.L. Clarkson and P.W. Shor. </author> <title> Appliactions of random sampling in computational geometry, II. </title> <journal> Discr. and Comput. Geometry, </journal> <volume> 4:387422, </volume> <year> 1989. </year>
Reference-contexts: If the point lies outside the given polytope, the set of visible facets must be identited. The algorithm's eciency depends heavily on how this process is carried out; there are several dierent approaches, see e.g. <ref> [CS89, Sei91, BDS + 92] </ref>. Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner [Ede86, EW86, EG86]. <p> This approach requires that the input points have distinct coordinates along the chosen axis, a condition which is simulated by our perturbation. More ecient approaches exist for enumerating the visible facets, e.g. <ref> [CS89, Sei91, BDS + 92, BDH93] </ref>. The visibility test consists of deciding whether a facet detned by d + 1 points is visible by another point.
Reference: [CW90] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via arithmetic progressions. </title> <journal> J. Symbolic Computation, </journal> <volume> 9:251280, </volume> <year> 1990. </year>
Reference-contexts: It has been introduced in [EC92] and later developed in [ECS95]. We mention below the asymptotic bounds on the complexity overhead incurred by this scheme. Proofs of all claims made below can be found in both publications. MM (t) = O (t 2:376 ) <ref> [CW90] </ref> is the matrix multiply complexity, which is asymptotically equal to the complexity of inverting a matrix [vzG88].
Reference: [DMY93] <author> K. Dobrindt, K. Mehlhorn, and M. Yvinec. </author> <title> A complete framework for the intersection of a general polyhedron with a convex one. </title> <booktitle> In Proc. 3rd Workshop Algorithms Data Struct., Lect. Notes Comp. Science 709, </booktitle> <pages> pages 314324. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: Since we can select q to be very close to n, the perturbation quantities have size dlog ne. A very relevant piece of work in the context of implemented perturbations and postprocessing is by Dobrindt, Mehlhorn and Yvinec <ref> [DMY93] </ref>. They proposed an ecient scheme specitcally for coping with degenerate intersections between a convex and a general polyhedron in three dimensions.
Reference: [DS88] <author> D. Dobkin and D. Silver. </author> <title> Recipes for geometric and numerical analysis part i: An empirical study. </title> <booktitle> In Proc. ACM Symp. on Computational Geometry, </booktitle> <pages> pages 93105, </pages> <year> 1988. </year>
Reference-contexts: Dierent approaches as well as implementations for exact arithmetic already exist, e.g. <ref> [DS88, FvW93, Yap93] </ref>, though none considers the approach adopted in this paper.
Reference: [DST88] <author> J.H. Davenport, Y. Siret, and E. Tournier. </author> <title> Computer Algebra. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1988. </year> <month> 16 </month>
Reference-contexts: We wish to suggest that this is an interesting approach for geometric implementations in general and it should be preferable in a variety of situations. Moreover, it can be used with rational data with the same asymptotic complexity <ref> [DST88] </ref>. 3 Modular arithmetic. First we present the general context for modular arithmetic and how it allows for exact integer arithmetic. The simplest case is when a set of values is given detning a single integer a.
Reference: [EC92] <author> I. Emiris and J. Canny. </author> <title> An ecient approach to removing geometric degeneracies. </title> <booktitle> In Proc. ACM Symp. on Computational Geometry, </booktitle> <pages> pages 7482, </pages> <year> 1992. </year>
Reference-contexts: The worst-case complexity overhead is O (log d) under the algebraic computational model. This scheme was subsequently optimized with respect to the bit size of the perturbation quantities in <ref> [EC92] </ref>: x i;j (*) = x i;j + * (i j mod q); where prime integer q &gt; n: (1) This is the scheme implemented; section 4 examines its application to the Ordering and Sidedness primitives. <p> Then the total number of Orientation tests per facet is just one more than the total number of visibility tests involving this facet. Perturbation. The computationally ecient perturbation scheme (1), mentioned in section 2, is used in order to simulate genericity of the input. It has been introduced in <ref> [EC92] </ref> and later developed in [ECS95]. We mention below the asymptotic bounds on the complexity overhead incurred by this scheme. Proofs of all claims made below can be found in both publications.
Reference: [EC94] <author> I.Z. Emiris and J.F. Canny. </author> <title> Ecient incremental algorithms for the sparse resultant and the mixed volume. </title> <type> Technical Report 839, </type> <institution> Computer Science Division, U.C. Berkeley, </institution> <year> 1994. </year> <note> Submitted for publication. </note>
Reference-contexts: Moreover, it has been conjectured [Emi94] that from this subdivision an exact matrix formula for the sparse resultant can be obtained. Mixed subdivisions are also instrumental in detning sparse homotopies [HS, VVC94] and computing mixed volumes <ref> [EC94] </ref>. 13 14 Our publicly available implementation in ftp://robotics.eecs.Berkeley.edu/pub/MixedVolume/subdiv computes a mixed subdivision of n+1 Newton polytopes in n dimensions by using the convex hull program as a callable library.
Reference: [EC95] <author> I.Z. Emiris and J.F. Canny. </author> <title> A general approach to removing degeneracies. </title> <journal> SIAM J. Computing, </journal> <volume> 24(3), </volume> <year> 1995. </year> <note> To appear. A preliminary version in Proc. IEEE Symp. Foundations of Comp. Sci., </note> <year> 1991, </year> <pages> pp. 405 413. </pages>
Reference-contexts: When the input is organized as n points in R d , the worst-case complexity of determinant evaluation is exponential in d. To reduce the complexity overhead, the following scheme was presented in <ref> [EC95] </ref>: x i;j (*) = x i;j + * i j ; where 1 * &gt; 0: The perturbation applies to the Ordering (or Sorting), Sidedness (or Orientation), Transversality and InSphere primitives. The worst-case complexity overhead is O (log d) under the algebraic computational model.
Reference: [ECS95] <author> I.Z. Emiris, J.F. Canny, and R. Seidel. </author> <title> Ecient perturbations for handling geometric degeneracies. </title> <journal> Algorithmica, </journal> <note> Spec. issue on comp. geometry in manufacturing, 1995. To appear. </note>
Reference-contexts: If the point lies outside the given polytope, the set of visible facets must be identited. The algorithm's eciency depends heavily on how this process is carried out; there are several dierent approaches, see e.g. [CS89, Sei91, BDS + 92]. Perturbation schemes are extensively compared in <ref> [ECS95] </ref>; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner [Ede86, EW86, EG86]. It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in [EM90]. <p> Perturbation. The computationally ecient perturbation scheme (1), mentioned in section 2, is used in order to simulate genericity of the input. It has been introduced in [EC92] and later developed in <ref> [ECS95] </ref>. We mention below the asymptotic bounds on the complexity overhead incurred by this scheme. Proofs of all claims made below can be found in both publications. <p> q . . . 1 i d+1 mod q : : : i d 3 7 7 ) det V k&gt;l1 The merit of the specitc perturbation scheme is that it reduces sign determination for the perturbed determinant to a characteristic polynomial computation, as shown in a general context by <ref> [ECS95, Th. 13] </ref>. Here we obtain det fl d+1 (*) = 1 The sign of the lowest-power nonzero term in the *-polynomial is the sign of the perturbed determinant. <p> This leads to expression 4, which demonstrates that there is no explicit symbolic computation, and to an ecient computation of det fl d+1 (*). Theorem 4.1 <ref> [ECS95, Th. 15, 17] </ref> Perturbation (1) is valid with respect to Ordering and Sidedness. Suppose that there exist n distinct input parameters and that determinant sign determination is implemented by determinant evaluation. <p> Complexity. The current version is in Ansi-C and includes about 1000 lines of code for the main combinatorial part, 600 lines for implementing the primitives over tnite telds and 1400 lines for the modular and exact integer arithmetic package. Table 4 is copied from <ref> [ECS95] </ref> to show the performance of the program on a SparcStation 10/41 with one 40 MHz processor, 32 MBytes of memory and a rating of 50 SpecInt92. d and n stand for the dimension and the number of input points respectively and all coordinates are integers in (100; 100). <p> We report on our experience with implementing this postprocessing in three dimensions. The exact volume of the convex hull is obtained without postprocessing because the problem mapping Z dn ! Q is continuous everywhere <ref> [ECS95, Prop. 4] </ref>. At any stage of the incremental construction, the perturbation causes every region between the point being added and the existing hull to be partitioned into d-dimensional simplices. Each, possibly empty, simplex is detned by the new point and one of the visible facets. <p> Postprocessing in general dimension can be based on the computation of each facet's normal. Code for computing these normals and a specitc application where the lower hull was needed are discussed in the section 6. Theoretical issues, including a complexity analysis, can be found in <ref> [ECS95] </ref>. We turn, now, to three-dimensional convex hulls used in computing the pose of an industrial part that falls on a conveyor belt. The algorithm of [WRG92] reads a set of points detning the part and computes its convex hull facets.
Reference: [Ede86] <author> H. Edelsbrunner. </author> <title> Edge-skeletons in arrangements with applications. </title> <journal> Algorithmica, </journal> <volume> 1:93109, </volume> <year> 1986. </year>
Reference-contexts: Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner <ref> [Ede86, EW86, EG86] </ref>. It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in [EM90]. Their implementation of a three and four dimensional convex hull algorithm was the basis for our own program. More recently, SoS was implemented in conjunction with three-dimensional Delaunay triangulations [Mc95].
Reference: [Ede87] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1987. </year>
Reference-contexts: Furthermore, calculations over the doubles are of comparative speed, if not faster, than integer calculations. 4 Implementation This section briey describes our implementation of the Beneath-Beyond algorithm <ref> [Ede87] </ref> for constructing the convex hull of a tnite point set in arbitrary dimension. More precisely, given n points in Z d , the program returns the exact volume and a triangulation of the facets of the convex hull of these points. Floating-point input is not excluded. <p> Hence we can mark the appropriate new facets as being on the same plane as the old facet. Visibility is implemented as suggested in the description of the Beneath-Beyond algorithm in <ref> [Ede87] </ref>: All facets of the partial hull are colored white at the beginning of each update. Then, those that are examined with respect to the point being added are colored either red or blue, according to whether they are visible or not.
Reference: [EG86] <author> H. Edelsbrunner and L.J. Guibas. </author> <title> Topologically sweeping an arrangement. </title> <booktitle> In Proc. ACM Symp. Theory of Comp., </booktitle> <pages> pages 389403, </pages> <year> 1986. </year>
Reference-contexts: Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner <ref> [Ede86, EW86, EG86] </ref>. It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in [EM90]. Their implementation of a three and four dimensional convex hull algorithm was the basis for our own program. More recently, SoS was implemented in conjunction with three-dimensional Delaunay triangulations [Mc95].
Reference: [EM90] <author> H. Edelsbrunner and E.P. Mcke. </author> <title> Simulation of simplicity: A technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graphics, </journal> <volume> 9(1):67104, </volume> <year> 1990. </year>
Reference-contexts: Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner [Ede86, EW86, EG86]. It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in <ref> [EM90] </ref>. Their implementation of a three and four dimensional convex hull algorithm was the basis for our own program. More recently, SoS was implemented in conjunction with three-dimensional Delaunay triangulations [Mc95].
Reference: [Emi94] <author> I.Z. Emiris. </author> <title> Sparse Elimination and Applications in Kinematics. </title> <type> PhD thesis, </type> <institution> Computer Science Division, Dept. of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Recall that the Minkowski sum of two convex polytopes A and B is convex polytope A + B = fa + bja 2 A; b 2 Bg. Moreover, it has been conjectured <ref> [Emi94] </ref> that from this subdivision an exact matrix formula for the sparse resultant can be obtained.
Reference: [EW86] <author> H. Edelsbrunner and R. Waupotitsch. </author> <title> Computing a ham-sandwich cut in two dimensions. </title> <journal> J. Symbolic Comput., </journal> <volume> 2:171178, </volume> <year> 1986. </year>
Reference-contexts: Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner <ref> [Ede86, EW86, EG86] </ref>. It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in [EM90]. Their implementation of a three and four dimensional convex hull algorithm was the basis for our own program. More recently, SoS was implemented in conjunction with three-dimensional Delaunay triangulations [Mc95].
Reference: [FvW93] <author> S. Fortune and C. van Wyk. </author> <title> Ecient exact arithmetic for computational geometry. </title> <booktitle> In Proc. ACM Symp. on Computational Geometry, </booktitle> <pages> pages 163172, </pages> <year> 1993. </year>
Reference-contexts: Dierent approaches as well as implementations for exact arithmetic already exist, e.g. <ref> [DS88, FvW93, Yap93] </ref>, though none considers the approach adopted in this paper.
Reference: [GKZ94] <editor> I.M. Gelfand, M.M. Kapranov, and A.V. Zelevinsky. Discriminants and Resultants. Birkhuser, </editor> <address> Boston, </address> <year> 1994. </year>
Reference-contexts: The problem we consider here comes from sparse elimination theory, a relatively new area of computational algebraic geometry which exploits the monomial structure of polynomial systems in order to obtain tighter bounds and faster algorithms for their manipulation <ref> [GKZ94] </ref>. The algebraic questions are formulated in geometric terms by means of the Newton polytope of a polynomial, which is a convex polytope in R n , where n denotes the number of variables.
Reference: [HS] <author> B. Huber and B. Sturmfels. </author> <title> A polyhedral method for solving sparse polynomial systems. </title> <journal> Math. Comp. </journal> <note> To appear. A preliminary version presented at the Workshop on Real Algebraic Geometry, </note> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: Moreover, it has been conjectured [Emi94] that from this subdivision an exact matrix formula for the sparse resultant can be obtained. Mixed subdivisions are also instrumental in detning sparse homotopies <ref> [HS, VVC94] </ref> and computing mixed volumes [EC94]. 13 14 Our publicly available implementation in ftp://robotics.eecs.Berkeley.edu/pub/MixedVolume/subdiv computes a mixed subdivision of n+1 Newton polytopes in n dimensions by using the convex hull program as a callable library.
Reference: [KG85] <author> W. Keller-Gehrig. </author> <title> Fast algorithms for the characteristic polynomial. </title> <institution> Theor. Comp. Sci., 36:309317, </institution> <year> 1985. </year>
Reference-contexts: The O (log d) factor follows from a bound of MM (d) O (log d) on the complexity of computing all coecients of the characteristic polynomial of an arbitrary square matrix <ref> [KG85] </ref>. However, this algorithm is nontrivial and we have, instead, implemented a simpler O (d 3 ) method. In fact, each Sidedness test starts with computing det fl d+1 . If this is nonzero then there is no need for the perturbed primitive, which is more expensive.
Reference: [Lau82] <author> M. Lauer. </author> <title> Computing by homomorphic images. </title> <editor> In B. Buchberger, G.E. Collins, and R. Loos, editors, </editor> <booktitle> Computer Algebra: Symbolic and Algebraic Computation, </booktitle> <pages> pages 139168. </pages> <publisher> Springer-Verlag, Wien, </publisher> <address> 2nd edition, </address> <year> 1982. </year>
Reference-contexts: The last step relies on the Chinese remainder theorem. An alternative technique, based on Hensel's lifting, is discussed in <ref> [Lau82] </ref>. In order for the entire process to be deterministic, a bound on the magnitude of the tnal answer must be known. This is used to calculate the cardinality of tnite telds. There are two ways to transform a set of residues to the unique integer that corresponds to them. <p> We have implemented the second method, due to Newton, because it is incremental in the sense that every time a new residue is known a new answer is computed to correspond to the previous residues as well as the new one. Both techniques are described in <ref> [Lau82] </ref>. Without loss of generality, we consider the case where the answer consists of a single integer a 2 Z.
Reference: [LMC94] <author> M.C. Lin, D. Manocha, and J. Canny. </author> <title> Ecient contact determination for dynamic environments. </title> <booktitle> In Proc. IEEE Intern. Conf. Robotics and Automation, </booktitle> <pages> pages 602608, </pages> <year> 1994. </year>
Reference-contexts: Our implementation has or is being used in a variety of applications: * Collision detection in dynamic simulation and animation <ref> [LMC94] </ref>. Objects are wrapped up in their convex hull. If, for any two objects their convex hulls do not intersect, then we have decided quite eciently that these objects do not collide. This will be the case most of the time, yielding signitcant time savings.
Reference: [MC93] <author> D. Manocha and J. Canny. </author> <title> Multipolynomial resultant algorithms. </title> <journal> J. Symbolic Computation, </journal> <volume> 15(2):99 122, </volume> <year> 1993. </year>
Reference-contexts: Dierent approaches as well as implementations for exact arithmetic already exist, e.g. [DS88, FvW93, Yap93], though none considers the approach adopted in this paper. Probabilistic Chinese remaindering, which is our approach, was originally proposed in the context of multivariate interpolation by Manocha and Canny <ref> [MC93] </ref>. 3 Probabilistic Modular Arithmetic This section discusses a modular method for carrying out exact arithmetic over the integers, thus minimizing the need for arbitrary-precision integers.
Reference: [Mig82] <author> M. Mignotte. </author> <title> Some useful bounds. </title> <editor> In B. Buchberger, G.E. Collins, and R. Loos, editors, </editor> <booktitle> Computer Algebra: Symbolic and Algebraic Computation, </booktitle> <pages> pages 259263. </pages> <publisher> Springer-Verlag, Wien, </publisher> <address> 2nd edition, </address> <year> 1982. </year>
Reference-contexts: Theorem 4.2 In computing det fl d+1 by modular arithmetic, the maximum number K of 31-bit primes needed is 30K s (d + 1) + 1 + 2 9 Proof The magnitude of det fl d+1 is, by Hadamard's inequality (see e.g. <ref> [Mig82] </ref>), j det fl d+1 j k=1 u u d+1 X x 2 d+1 d+1 Y x i k ;max ; where x i k ;max = maxf1; x i k ;1 ; : : : ; x i k ;d g: (5) This bound is indeed computed by the program.
Reference: [Mc95] <editor> E.P. Mcke. Detri 2.2: </editor> <title> A robust implementation for 3D Delaunay triangulations. </title> <booktitle> Presented at the Geometric Software Workshop, The Geometry Center, </booktitle> <address> Minneapolis. </address> <note> Sources available from ftp://cs.uiuc.edu/pub/edels/geometry, </note> <month> January </month> <year> 1995. </year>
Reference-contexts: It is called Simulation of Simplicity (SoS) and was generalized by Edelsbrunner and Mcke in [EM90]. Their implementation of a three and four dimensional convex hull algorithm was the basis for our own program. More recently, SoS was implemented in conjunction with three-dimensional Delaunay triangulations <ref> [Mc95] </ref>. Every input coordinate x i;j is perturbed into x i;j (*) = x i;j + * 2 iffij ; where ffi &gt; d and 1 * &gt; 0: d is the dimension and * is a symbolic intnitesimal.
Reference: [Sch94] <author> P. Schorn. </author> <title> Degeneracy in geometric computation and the perturbation approach. </title> <journal> The Computer Journal, </journal> <volume> 37(1):3542, </volume> <year> 1994. </year>
Reference-contexts: This leads to authors to conclude against suggesting the use of perturbations in this case. We must mention that the basic existential question on the perturbation method is still open. After a variety of perturbation schemes have been proposed, recent work argues against the general applicability of this method <ref> [BMS94, Sch94] </ref> motivated by the observation that the diculty and complexity of postprocessing may dominate that of the entire program. Dierent approaches as well as implementations for exact arithmetic already exist, e.g. [DS88, FvW93, Yap93], though none considers the approach adopted in this paper.
Reference: [Sei91] <author> R. Seidel. </author> <title> Small-dimensional linear programming and convex hulls made easy. </title> <journal> Discr. and Comput. Geometry, </journal> <volume> 6:423434, </volume> <year> 1991. </year>
Reference-contexts: If the point lies outside the given polytope, the set of visible facets must be identited. The algorithm's eciency depends heavily on how this process is carried out; there are several dierent approaches, see e.g. <ref> [CS89, Sei91, BDS + 92] </ref>. Perturbation schemes are extensively compared in [ECS95]; here we discuss only the most relevant approaches to our own. The trst systematic approach in computational geometry is due to Edelsbrun-ner [Ede86, EW86, EG86]. <p> This approach requires that the input points have distinct coordinates along the chosen axis, a condition which is simulated by our perturbation. More ecient approaches exist for enumerating the visible facets, e.g. <ref> [CS89, Sei91, BDS + 92, BDH93] </ref>. The visibility test consists of deciding whether a facet detned by d + 1 points is visible by another point.
Reference: [Sei94] <author> R. Seidel. </author> <title> The nature and meaning of perturbations in geometric computing. </title> <booktitle> In Proc. 11th Symp. Theoret. Aspects Computer Science, Lect. Notes Computer Science 775, </booktitle> <pages> pages 317. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: For instance, deciding the sign of a d fi d perturbed determinant requires the calculation of (2 d ) minors in the worst case, though fewer on average. Yap [Yap90b, Yap90a] deals with the more general setting in which branching occurs at rational expressions and, even, arbitrary analytic functions <ref> [Sei94] </ref>. For input variables x = (x 1 ; : : : ; x N ), the scheme considers all power products w = Q N e i i , e i 0.
Reference: [VVC94] <author> J. Verschelde, P. Verlinden, and R. Cools. </author> <title> Homotopies exploiting Newton polytopes for solving sparse polynomial systems. </title> <journal> SIAM J. Numerical Analysis, </journal> <volume> 31(3):915930, </volume> <year> 1994. </year>
Reference-contexts: Moreover, it has been conjectured [Emi94] that from this subdivision an exact matrix formula for the sparse resultant can be obtained. Mixed subdivisions are also instrumental in detning sparse homotopies <ref> [HS, VVC94] </ref> and computing mixed volumes [EC94]. 13 14 Our publicly available implementation in ftp://robotics.eecs.Berkeley.edu/pub/MixedVolume/subdiv computes a mixed subdivision of n+1 Newton polytopes in n dimensions by using the convex hull program as a callable library.
Reference: [vzG88] <author> J. von zur Gathen. </author> <title> Algebraic complexity theory. </title> <editor> In J. Traub, editor, </editor> <booktitle> Annual Review of Computer Science, </booktitle> <pages> pages 317347. </pages> <publisher> Annual Reviews, </publisher> <address> Palo Alto, </address> <institution> Cal., </institution> <year> 1988. </year>
Reference-contexts: Proofs of all claims made below can be found in both publications. MM (t) = O (t 2:376 ) [CW90] is the matrix multiply complexity, which is asymptotically equal to the complexity of inverting a matrix <ref> [vzG88] </ref>.
Reference: [Wil65] <author> J. Wilkinson. </author> <title> The Algebraic Eigenvalue Problem. </title> <publisher> Oxford Univ. Press, </publisher> <address> London, </address> <year> 1965. </year>
Reference-contexts: Otherwise, the perturbed predicate is computed. The O (d 3 ) steps for computing det fl d+1 (*) and their complexities are listed below. The algorithms can be found in <ref> [Wil65] </ref>. * Compute the determinant of V and its inverse by LU decomposition and back-substitution, with total complexity 5 (d + 1) 3 =6 + O (d 2 ). * Multiply V and L to obtain M in time (d + 1) 3 . * Compute the upper Hessenberg form of
Reference: [WRG92] <author> J. Wiegley, A. Rao, and K. Goldberg. </author> <title> Computing a statistical distribution of stable poses for a polyhedron. </title> <booktitle> In Proc. 30th Annual Allerton Conf. on Comm. Control and Computing, </booktitle> <address> U.Ill. Urbana-Champaign, </address> <year> 1992. </year>
Reference-contexts: Theoretical issues, including a complexity analysis, can be found in [ECS95]. We turn, now, to three-dimensional convex hulls used in computing the pose of an industrial part that falls on a conveyor belt. The algorithm of <ref> [WRG92] </ref> reads a set of points detning the part and computes its convex hull facets. Then it projects these facets on a sphere in order to compute the probability of the object landing on this facet.
Reference: [Yap90a] <author> C.-K. Yap. </author> <title> A geometric consistency theorem for a symbolic perturbation scheme. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 40:218, </volume> <year> 1990. </year>
Reference-contexts: The main drawback is that SoS incurs a very 2 high complexity overhead. For instance, deciding the sign of a d fi d perturbed determinant requires the calculation of (2 d ) minors in the worst case, though fewer on average. Yap <ref> [Yap90b, Yap90a] </ref> deals with the more general setting in which branching occurs at rational expressions and, even, arbitrary analytic functions [Sei94].
Reference: [Yap90b] <author> C.-K. Yap. </author> <title> Symbolic treatment of geometric degeneracies. </title> <journal> J. Symbolic Comput., </journal> <volume> 10:349370, </volume> <year> 1990. </year>
Reference-contexts: The main drawback is that SoS incurs a very 2 high complexity overhead. For instance, deciding the sign of a d fi d perturbed determinant requires the calculation of (2 d ) minors in the worst case, though fewer on average. Yap <ref> [Yap90b, Yap90a] </ref> deals with the more general setting in which branching occurs at rational expressions and, even, arbitrary analytic functions [Sei94].
Reference: [Yap93] <author> C.-K. Yap. </author> <title> Towards exact geometric computation. </title> <booktitle> In Proc. Canadian Conf. on Computational Geometry, </booktitle> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Dierent approaches as well as implementations for exact arithmetic already exist, e.g. <ref> [DS88, FvW93, Yap93] </ref>, though none considers the approach adopted in this paper.
References-found: 41

