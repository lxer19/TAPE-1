URL: ftp://ftp.eecs.umich.edu/groups/gasm/cooperate.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: schrefl@vexpert.dbai.tuwien.ac.at  kappel@vexpert.dbai.tuwien.ac.at  
Title: Cooperation Contracts  
Author: Michael Schrefl Gerti Kappel 
Keyword: multiple polymorphism, behavior modeling, object-oriented database design  
Address: Paniglg. 16, A-1040 Vienna, Austria  Liebigg. 4, A-1010 Vienna, Austria  
Affiliation: Department of Information Systems Vienna University of Technology  Institute of Statistics and Computer Science University of Vienna  
Abstract: In this paper we introduce the concept of cooperative message handling, in which several objects act together in answering a message they have received jointly. Cooperative message handling extends the traditional message passing paradigm which requires the receiver of a message to be a single object only. Cooperative messages are defined with cooperation contracts which are established between several object types. A cooperative message is sent to a tuple of instances, one for each object type in the cooperation contract. We show that cooperation contracts offer new benefits for behavior modeling in object-oriented database design. Behavior which is provided by several object types in concert needs not be dispersed and can be defined in a single place. Furthermore, behavior designs become symmetric, better maintainable and better extensible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Almarode and T.L. Anderson, </author> <title> "EasyObjects Designer: A Tool for Object-Oriented Database Design," </title> <booktitle> in Proceedings of the IFIP TC2 Working Conference on Object-Oriented Databases (DS-4), </booktitle> <editor> ed. R. Meersman and W. Kent, </editor> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Object-oriented database design <ref> [1, 6, 19, 22, 30] </ref> brings together data modeling and behavior modeling. An object has a set of properties representing its structure and a set of methods representing its behavior.
Reference: [2] <author> T. Andrews and C. Harris, </author> <title> "Combining language and database advances in an object-oriented development environment," in Object-Oriented Programming Systems Languages and Applications (OOPSLA), </title> <journal> Special Issue of SIGPLAN Notices, ed. N. </journal> <volume> Meyrowitz , vol. 22, no. 12, </volume> <pages> pp. 430-440, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Classification supports concentrating related behavior. Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. It has been recognized [11] that pure object-oriented database models (e.g., <ref> [2, 7, 23] </ref>) lack a symmetric relationship construct as it is provided by the Entity-Relationship model [9]. <p> The problem statement will be our running example throughout the paper. We omit any details which do not contribute to the essential points of this paper. We could use any of several object-oriented data models <ref> [2, 7, 23, 24] </ref> for our discussions. As no standard or commonly agreed to object-oriented data model exists [26] and as we do not expect all readers to be familiar with a particular model, we introduce a simple object-oriented data model. <p> Symmetric, undirected relationships are used in data modeling to express relations between several objects. They make an abstract interaction between several objects explicit in a natural way and avoid to bury such interactions in binary directed relationships (as many object-oriented data models require <ref> [2, 7, 23] </ref>). Similarly, cooperation contracts make a behavioral interaction between instances of several object types explicit. They avoid that one of several objects has to be singled out arbitrarily as target of a message whose answer depends on an interaction of several objects.
Reference: [3] <author> M.B. Atkinson, F. Bancilhon, D. DeWitt, K. Dittrich, D. Maier and S. Zdonik, </author> <title> "The Object-Oriented Database System Manifesto," </title> <booktitle> in Proceedings First Int. Conf. on Deductive and Object-Oriented Databases, </booktitle> <pages> pp. 40-57, </pages> <address> Kyoto, Japan, </address> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: The only way to communicate with an object and manipulate its properties is to invoke a method on the object, which is called message passing. The message passing paradigm is only one of several characteristic features of object-oriented databases <ref> [3] </ref>.
Reference: [4] <editor> D.G. Bobrow, et al., "CommonLoops: </editor> <booktitle> Merging Lisp and Object-Oriented Programming," in Object-Oriented Programming Systems Languages and Applications (OOPSLA), Special Issue of SIGPLAN Notices, </booktitle> <editor> ed. N. Meyrowitz, </editor> <volume> vol. 21, no. 11, </volume> <pages> pp. 17-29, </pages> <month> Nov. </month> <year> 1986. </year>
Reference-contexts: In our example, one can ask the price of shipping any product p to any customer c. Of course, one will not store all possible pairs of products and customers (i.e., all possible orders). Multi-methods of CommonLoops <ref> [4] </ref> support multi-polymorphic behavior in a similar way. Multi-methods overload a method selector with several methods which are distinguished by the types of their parameters. Cooperative methods differ from multi-methods as follows: Multi-methods are defined freely (i.e., independent of object types), and, hence, violate the object-oriented concept of classification.
Reference: [5] <author> E. </author> <title> Borger , "A Logical Operational Semantics of Full Prolog, Part I: Selection Core and Control," </title> <booktitle> in CSL'89, 3rd Workshop on Computer Science Logic, </booktitle> <editor> ed. E. Borger, H. Kleine Buning, and M. Richter, </editor> <publisher> Springer, LNCS, </publisher> <year> 1990. </year>
Reference-contexts: An evolving algebra consists of a pair (A; T ), where A is a many-sorted, partial algebra and T a set of transition rules. Evolving algebras have been successfully employed to define the operational semantics of several conventional programming languages <ref> [5, 16, 17] </ref> and of object-oriented systems [14]. The operational semantics of a program is specified by an abstract machine which simulates the execution of the program.
Reference: [6] <author> M. Bouzeghoub and E. Metais, </author> <title> "A Design Tool For Object Oriented Databases," </title> <booktitle> in CAiSE, Proceedings of the 2nd Nordic Conf. on Advanced Information Systems Engineering, </booktitle> <pages> pp. 365-392, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Object-oriented database design <ref> [1, 6, 19, 22, 30] </ref> brings together data modeling and behavior modeling. An object has a set of properties representing its structure and a set of methods representing its behavior.
Reference: [7] <author> R. Bretl et al, </author> <title> "The GemStone Data Management System," in Object-Oriented Concepts, Databases, and Applications, </title> <editor> ed. W. Kim and F.H. </editor> <booktitle> Lochovsky, </booktitle> <pages> pp. 283-308, </pages> <publisher> ACM Press & Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Classification supports concentrating related behavior. Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. It has been recognized [11] that pure object-oriented database models (e.g., <ref> [2, 7, 23] </ref>) lack a symmetric relationship construct as it is provided by the Entity-Relationship model [9]. <p> The problem statement will be our running example throughout the paper. We omit any details which do not contribute to the essential points of this paper. We could use any of several object-oriented data models <ref> [2, 7, 23, 24] </ref> for our discussions. As no standard or commonly agreed to object-oriented data model exists [26] and as we do not expect all readers to be familiar with a particular model, we introduce a simple object-oriented data model. <p> Symmetric, undirected relationships are used in data modeling to express relations between several objects. They make an abstract interaction between several objects explicit in a natural way and avoid to bury such interactions in binary directed relationships (as many object-oriented data models require <ref> [2, 7, 23] </ref>). Similarly, cooperation contracts make a behavioral interaction between instances of several object types explicit. They avoid that one of several objects has to be singled out arbitrarily as target of a message whose answer depends on an interaction of several objects.
Reference: [8] <author> P. Butterworth, A. Otis and J. Stein, </author> <title> "The GemStone Object Datebase Management System," </title> <journal> in Communications of the ACM, </journal> <volume> vol. 34, no. 10, </volume> <pages> pp 64-77, </pages> <month> October </month> <year> 1991 </year>
Reference: [9] <author> P.P. Chen, </author> <title> "The Entity-Relationship Model Toward a unified view of data," </title> <booktitle> in ACM Tran-scations on Database Systems, </booktitle> <volume> vol. 1, no. 1, </volume> <pages> pp. 9-36, </pages> <year> 1976. </year>
Reference-contexts: Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. It has been recognized [11] that pure object-oriented database models (e.g., [2, 7, 23]) lack a symmetric relationship construct as it is provided by the Entity-Relationship model <ref> [9] </ref>.
Reference: [10] <author> O. Diaz and P. </author> <title> Gray , "Semantic-rich User-defined Relationships as a Main Constructor in Object-Oriented Databases," </title> <booktitle> in Proceedings of the IFIP TC2 Working Conference on Object-Oriented Databases (DS-4), </booktitle> <editor> ed. R. Meersman and W. Kent, </editor> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: In the second case, the instances of COURSE related to a particular instance of STUDENT can not be determined without writing some intrinsic code, which is inherently the same for every object type representing a relationship. For these and other reasons, <ref> [10, 25, 29] </ref> have suggested to include the relationship construct as a modeling primitive into object-oriented (database) models. Their discussions, however, focus mainly on data modeling and not on behavior modeling. As behavior modeling is concerned, similar problems exist [33].
Reference: [11] <author> K. Dittrich, </author> <title> "Object-Oriented Database Systems: The Next Miles of the Marathon," </title> <booktitle> in Information Systems, </booktitle> <volume> vol. 15, no. 1, </volume> <pages> pp. 161-167, </pages> <year> 1990. </year>
Reference-contexts: It is claimed that object-oriented designs concentrate related behavior around objects, are easy to maintain and easy to extend [27]. Classification supports concentrating related behavior. Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. It has been recognized <ref> [11] </ref> that pure object-oriented database models (e.g., [2, 7, 23]) lack a symmetric relationship construct as it is provided by the Entity-Relationship model [9].
Reference: [12] <author> M.A. Ellis and B. Stroustrup, </author> <title> in The Annotated C++ Reference Manual, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: But it is more difficult to take a new default shipping charge for foreign customers into account. Several methods of FOREIGN-CUSTOMER (the methods "SW-shippingCharge", "HW-shippingCharge", and "TM-shippingCharge") need to be reimplemented. Some object-oriented languages, e.g., C++ <ref> [12] </ref>, allow to overload method selectors of one object type. Several methods having the same selector are distinguished by the types of their input parameters. This gives rise to another approach to handle multi-polymorphic behavior.
Reference: [13] <author> A. Goldberg and D. Robson, </author> <title> "Smalltalk-80: The Language And Its Implementation," </title> <publisher> Addison-Wesley, </publisher> <month> May </month> <year> 1983 </year>
Reference: [14] <author> G. Gottlob, G. Kappel and M. Schrefl, </author> <title> "Semantics of Object-Oriented Data Models The Evolving Algebra Approach," in Next Generation Information System Technology, </title> <booktitle> Proceedings of the First International East/West Database Workshop, </booktitle> <editor> ed. J.W. Schmidt and A.A. </editor> <booktitle> Stogny, </booktitle> <pages> pp. 144-160, </pages> <publisher> Springer LNCS 504, </publisher> <year> 1991. </year>
Reference-contexts: An evolving algebra consists of a pair (A; T ), where A is a many-sorted, partial algebra and T a set of transition rules. Evolving algebras have been successfully employed to define the operational semantics of several conventional programming languages [5, 16, 17] and of object-oriented systems <ref> [14] </ref>. The operational semantics of a program is specified by an abstract machine which simulates the execution of the program. <p> The algebra (A c ; T c ) does not represent the executions of methods. It may be extended in that direction following the approach outlined in <ref> [14] </ref>. Definition: The algebra A c consists of the universes O, I, M and F representing object types, instances of object types (objects), message selectors, and method implementations, respectively.
Reference: [15] <author> Y. Gurevich, </author> <booktitle> "Logic and the Challenge of Computer Science," in Trends in Theoretical Computer Science, </booktitle> <editor> ed. E. </editor> <booktitle> Borger, </booktitle> <pages> pp. 1-57, </pages> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: Nevertheless, we believe that ambiguities should be avoided in general. Then the conflict resolution scheme is not needed. 4.2 The formal semantics of cooperative message handling We use the evolving algebra approach <ref> [15] </ref> to define the semantics of cooperative message handling formally. An evolving algebra consists of a pair (A; T ), where A is a many-sorted, partial algebra and T a set of transition rules. <p> The algebra A is said to evolve, as every application of a transition rule results in a new algebra A 0 . In the following, we give a (simplified) definition of an evolving algebra <ref> [15] </ref>. 8 The problem is related to resolving ambiguities due to multiple inheritance [32]. Definition: An evolving algebra is a pair (A; T ), where A is a many-sorted, partial algebra and T is a set of transition rules.
Reference: [16] <author> Y. Gurevich and J.M. Morris, </author> <title> "Algebraic Operational Semantics and Modula-2," </title> <booktitle> in CSL'87, 1st Workshop on Computer Science Logic, </booktitle> <editor> ed. E. Borger, H. Kleine Buning, and M. Richter, </editor> <publisher> Springer, LNCS 329, </publisher> <year> 1988. </year>
Reference-contexts: An evolving algebra consists of a pair (A; T ), where A is a many-sorted, partial algebra and T a set of transition rules. Evolving algebras have been successfully employed to define the operational semantics of several conventional programming languages <ref> [5, 16, 17] </ref> and of object-oriented systems [14]. The operational semantics of a program is specified by an abstract machine which simulates the execution of the program.
Reference: [17] <author> Y. Gurevich and L.S. Moss, </author> <title> "Algebraic Operational Semantics and Occam," </title> <type> Tech. Rep. RC 15352, </type> <institution> IBM Research Division, 1/9/90, T.J. Watson Research Center, Yorktown Heights, </institution> <year> 1990. </year>
Reference-contexts: An evolving algebra consists of a pair (A; T ), where A is a many-sorted, partial algebra and T a set of transition rules. Evolving algebras have been successfully employed to define the operational semantics of several conventional programming languages <ref> [5, 16, 17] </ref> and of object-oriented systems [14]. The operational semantics of a program is specified by an abstract machine which simulates the execution of the program.
Reference: [18] <author> D. Ingalls, </author> <title> "A simple technique for handling multiple polymorphism," </title> <booktitle> in Object-Oriented Programming Systems Languages and Applications (OOPSLA), Special Issue of SIGPLAN Notices, </booktitle> <editor> ed. N. Meyrowitz, </editor> <volume> vol. 21, no. 11, </volume> <pages> pp. 347-349, </pages> <month> Nov. </month> <year> 1986. </year>
Reference-contexts: The trick is to add a second level of messages and to encode in the method selector (message name) the type of the sender <ref> [18] </ref>. Using this trick, for every leave node X in the type hierarchy of products a method "X-shippingCharge" is defined at object type CUSTOMER. The method is reimplemented at direct and indirect subtypes of CUSTOMER if needed. Example: Figure 5 demonstrates the approach.
Reference: [19] <author> G. Kappel and M. Schrefl, </author> <title> "A Behaviour Integrated Entity Relationship Approach for the Design of Object-Oriented Databases," in A Bridge to the User, </title> <booktitle> Proceedings of the 7th Int. Conf. on ER Approach, </booktitle> <editor> ed. C. </editor> <booktitle> Batini, </booktitle> <pages> pp. 311-328, </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Object-oriented database design <ref> [1, 6, 19, 22, 30] </ref> brings together data modeling and behavior modeling. An object has a set of properties representing its structure and a set of methods representing its behavior.
Reference: [20] <author> G. Kappel and M. Schrefl, </author> <title> "Using an Object-Oriented Diagram Technique for the Design of Information Systems," </title> <booktitle> in Proceedings of the International Working Conference on Dynamic Modelling of Information Systems , ed. H.G. Sol, </booktitle> <publisher> North-Holland, </publisher> <year> 1991. </year>
Reference-contexts: For example, we considered only binary cooperation contracts. We believe that an extension to n-ary cooperation contracts is rather straightforward. Cooperation contracts can be included as a primary concept for behavior modeling in any object-oriented design technique. We currently extend our graphical design environment of object-oriented databases, Object/Behavior Diagrams <ref> [20, 21] </ref>, in that direction. Acknowledgement Thanks are due to J. Eder, M. Stumptner, and the anonymous referees for valuable comments.
Reference: [21] <author> G. Kappel and M. Schrefl, </author> <title> "Object/Behavior Diagrams," </title> <booktitle> in Proceedings of the 7th International Conference on Data Engineering, </booktitle> <pages> pp. 530-539, </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Kobe, Japan, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: For example, we considered only binary cooperation contracts. We believe that an extension to n-ary cooperation contracts is rather straightforward. Cooperation contracts can be included as a primary concept for behavior modeling in any object-oriented design technique. We currently extend our graphical design environment of object-oriented databases, Object/Behavior Diagrams <ref> [20, 21] </ref>, in that direction. Acknowledgement Thanks are due to J. Eder, M. Stumptner, and the anonymous referees for valuable comments.
Reference: [22] <author> G. Kappel, </author> <title> "Reorganizing Object Behavior by Behavior Composition Coping with Evolving Requirements in Office Systems," in Proceedings BTW'91 (Datenbanken f"ur B"uro, Technik und Wissenschaft), </title> <editor> ed. H.-J. Appelrath, </editor> <publisher> Springer IFB 270, </publisher> <address> Kaiserslautern, Germany, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Object-oriented database design <ref> [1, 6, 19, 22, 30] </ref> brings together data modeling and behavior modeling. An object has a set of properties representing its structure and a set of methods representing its behavior.
Reference: [23] <author> W. Kim, J.F. Garza, N. Ballou and D. Woelk, </author> <title> "Architecture of the ORION Next-Generation Database System," </title> <journal> in IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 2, no. 1, </volume> <pages> pp. 109-124, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Classification supports concentrating related behavior. Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. It has been recognized [11] that pure object-oriented database models (e.g., <ref> [2, 7, 23] </ref>) lack a symmetric relationship construct as it is provided by the Entity-Relationship model [9]. <p> The problem statement will be our running example throughout the paper. We omit any details which do not contribute to the essential points of this paper. We could use any of several object-oriented data models <ref> [2, 7, 23, 24] </ref> for our discussions. As no standard or commonly agreed to object-oriented data model exists [26] and as we do not expect all readers to be familiar with a particular model, we introduce a simple object-oriented data model. <p> Symmetric, undirected relationships are used in data modeling to express relations between several objects. They make an abstract interaction between several objects explicit in a natural way and avoid to bury such interactions in binary directed relationships (as many object-oriented data models require <ref> [2, 7, 23] </ref>). Similarly, cooperation contracts make a behavioral interaction between instances of several object types explicit. They avoid that one of several objects has to be singled out arbitrarily as target of a message whose answer depends on an interaction of several objects.
Reference: [24] <author> C. Lecluse, P. Richard and F. Velez, </author> <title> "O2, an object-oriented data model," </title> <booktitle> in Proceedings of the ACM-SIGMOD Int.Conference on Management of Data, SIGMOD Record, </booktitle> <volume> vol. 17, no. 3, </volume> <pages> pp. 424-433, </pages> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: The problem statement will be our running example throughout the paper. We omit any details which do not contribute to the essential points of this paper. We could use any of several object-oriented data models <ref> [2, 7, 23, 24] </ref> for our discussions. As no standard or commonly agreed to object-oriented data model exists [26] and as we do not expect all readers to be familiar with a particular model, we introduce a simple object-oriented data model.
Reference: [25] <author> M. Loomis, A. Shah and J. Rumbaugh, </author> <title> "An Object Modelling Technique for Conceptual Design," </title> <booktitle> in Proc. of the European Conference on Object-Oriented Programming, </booktitle> <pages> pp. 325-335, </pages> <year> 1987. </year>
Reference-contexts: In the second case, the instances of COURSE related to a particular instance of STUDENT can not be determined without writing some intrinsic code, which is inherently the same for every object type representing a relationship. For these and other reasons, <ref> [10, 25, 29] </ref> have suggested to include the relationship construct as a modeling primitive into object-oriented (database) models. Their discussions, however, focus mainly on data modeling and not on behavior modeling. As behavior modeling is concerned, similar problems exist [33].
Reference: [26] <author> D. Maier, </author> <title> "Why isn't there an object-oriented data model?," </title> <booktitle> in Information Processing 89 - IFIP World Computer Congress, </booktitle> <editor> ed. G.X. </editor> <booktitle> Ritter, </booktitle> <pages> pp. 793-798, </pages> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: We omit any details which do not contribute to the essential points of this paper. We could use any of several object-oriented data models [2, 7, 23, 24] for our discussions. As no standard or commonly agreed to object-oriented data model exists <ref> [26] </ref> and as we do not expect all readers to be familiar with a particular model, we introduce a simple object-oriented data model. It contains the essential features of object-oriented systems, but leaves out concepts and details not needed in this paper.
Reference: [27] <author> B. Meyer, </author> <title> Object-Oriented Software Construction, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: The search starts at the object's type and continues up the type hierarchy until an appropriate method is found. Object-oriented designs offer several benefits. It is claimed that object-oriented designs concentrate related behavior around objects, are easy to maintain and easy to extend <ref> [27] </ref>. Classification supports concentrating related behavior. Encapsulation, specialization, overriding and dynamic binding assist in maintaining and extending designs. There are, however, also some weak points. <p> All solutions have in common that they employ the traditional message passing paradigm, which require the receiver of a message to be a single object only. It is claimed that object-oriented designs concentrate related behavior around object types, are easy to extend and easy to maintain <ref> [27] </ref>. This is true, if the behavior to be modeled depends on only one type of object.
Reference: [28] <author> J. Micallef, </author> <title> "Encapsulation, </title> <booktitle> Reusability and Extensibility in Object-Oriented Programming Languages," in Journal of Object-Oriented Programming (JOOP), </booktitle> <pages> pp. 12-36, </pages> <month> April/May </month> <year> 1988. </year>
Reference-contexts: Therefore, calculating shipping charges is polymorphic on the type of product (HARDWARE, SOFT WARE, TRAINING-MATERIAL) and on the type of customer (DOMESTIC-CUSTOMER, EUROPEAN-CUSTOMER, US-CUSTOMER). Several solutions to handle such a multi-polymorphic behavior have been proposed in literature for analogous problems <ref> [28] </ref>. We demonstrate each solution by our example and analyze it according to the following criteria: symmetricity, locality of related behavior, extensibility, and ease of maintenance.
Reference: [29] <author> J. Rumbaugh, </author> <title> "Relations as Semantic Constructs in an Object-Oriented Language," in Object-Oriented Programming Systems Languages and Applications (OOPSLA), </title> <journal> Special Issue of SIG-PLAN Notices, ed. N. </journal> <volume> Meyrowitz , vol. 22, no. 12, </volume> <pages> pp. 466-481, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: In the second case, the instances of COURSE related to a particular instance of STUDENT can not be determined without writing some intrinsic code, which is inherently the same for every object type representing a relationship. For these and other reasons, <ref> [10, 25, 29] </ref> have suggested to include the relationship construct as a modeling primitive into object-oriented (database) models. Their discussions, however, focus mainly on data modeling and not on behavior modeling. As behavior modeling is concerned, similar problems exist [33].
Reference: [30] <author> M. Schrefl, </author> <title> "Behavior Modeling by Stepwise Refining Behavior Diagrams," </title> <booktitle> in Proceedings of the 9th Int. Conf. on Entity Relationship Approach, </booktitle> <address> Lausanne, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Object-oriented database design <ref> [1, 6, 19, 22, 30] </ref> brings together data modeling and behavior modeling. An object has a set of properties representing its structure and a set of methods representing its behavior.
Reference: [31] <author> M. Schrefl and G. Kappel, </author> <booktitle> "Cooperation Contracts" in Proceedings of the 10th International Conference on Entity Relationship Approach, </booktitle> <address> San Mateo (CA), </address> <month> October </month> <year> 1991. </year>
Reference: [32] <author> A. Snyder, </author> <title> "Inheritance and the Development of Encapsulated Software Components," in Research Directions in Object-Oriented Programming, </title> <editor> ed. P. </editor> <booktitle> Wegner, </booktitle> <pages> pp. 165-188, </pages> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: The algebra A is said to evolve, as every application of a transition rule results in a new algebra A 0 . In the following, we give a (simplified) definition of an evolving algebra [15]. 8 The problem is related to resolving ambiguities due to multiple inheritance <ref> [32] </ref>. Definition: An evolving algebra is a pair (A; T ), where A is a many-sorted, partial algebra and T is a set of transition rules.
Reference: [33] <author> S.B. Zdonik and D. Maier, </author> <title> "Fundamentals of Object-Oriented Databases," in Readings in Object-Oriented Database Systems, </title> <editor> ed. S.B. Zdonik and D. </editor> <booktitle> Maier, </booktitle> <pages> pp. 1-36, </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: For these and other reasons, [10, 25, 29] have suggested to include the relationship construct as a modeling primitive into object-oriented (database) models. Their discussions, however, focus mainly on data modeling and not on behavior modeling. As behavior modeling is concerned, similar problems exist <ref> [33] </ref>. The traditional object-oriented approach, which requires the receiver of a message to be a single object only, has serious difficulties in modeling multi-polymorphic behavior. Behavior which depends on the object types of several objects is called multi-polymorphic.
References-found: 33

