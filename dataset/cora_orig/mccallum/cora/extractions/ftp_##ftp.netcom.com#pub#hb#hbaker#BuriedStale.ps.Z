URL: ftp://ftp.netcom.com/pub/hb/hbaker/BuriedStale.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Buried Binding and Dead 1 Binding Problems of Lisp1.5: Sources of Incomparability in Garbage
Author: Henry G. Baker 
Address: 545 Technology Square Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science 3 Massachusetts Institute of Technology  
Date: 1992), 11-19.  June, 1976 2  
Note: ACM Lisp Pointers V,2 (April-June  This research was supported by the Advanced Research Projects Agency of the Department of Defense, and was monitored by the Office of Naval Research under contract number N00014-75-C-0661.  
Abstract: Lisp has become the language of choice for many applications such as artificial intelligence programs or symbol manipulation. The original implementation of Lisp1.5 was a concise, elegant statement of the semantics of the language. Although production Lisp systems have undergone significant development and evolution since Lisp1.5, including the development of sophisticated compilers, there have been few significant theoretical improvements in the implementations of these systems. Most improvements, such as arrays or shallow-binding, have been made more for the sake of speed than for the sake of storage. A notable exception to this is the technique of tail recursion, which can save more than just stack space. We believe that more can be done to reduce the storage requirements of Lisp programs. Although in many instances, the Lisp programmer can reduce the storage requirements of his program by deleting unneeded pointers as soon as possible, there is nothing he can do about systematic inefficiencies of the Lisp interpreter. This paper addresses itself to two sources of inefficiency in Lisp's variable binding mechanismone of which is easy to detectwhich prevent storage from being garbage collected long after its last reference. Implementations of Lisp which eliminate these situations should result in more economical execution for almost all Lisp programs which use a lot of storage, due to a lighter marking load on the garbage collector.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A.V., Sethi, R., and Ullman, J.D. </author> <booktitle> Compilers: Principles, Techniques and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference: <author> Baker, H.G. </author> <title> "Shallow Binding in Lisp 1.5". </title> <type> Manuscript, </type> <month> April, </month> <year> 1976. </year> <note> Subsequently published in Comm. ACM 21,7 (July1978),565-569. </note>
Reference: <author> Fischer, M.J. </author> <title> "Lambda Calculus Schemata". </title> <booktitle> Proc. ACM Conf. on Proving Asserts. about Programs, Sigplan Not. </booktitle> <address> (Jan.1972). </address>
Reference: <author> Hewitt, C., and Baker, H.G. </author> <title> "Actors and continuous functionals". </title> <editor> In Neuhold, E.J., ed. </editor> <booktitle> Proc. IFIP Working Conf. on Formal Desc. of Progr. Concepts, IFIP, </booktitle> <month> Aug. </month> <year> 1977, </year> <pages> 367-387. </pages>
Reference: <editor> McCarthy, John, et al. </editor> <title> LISP 1.5 Programmer's Manual. </title> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1965. </year>
Reference: <author> Reynolds, John C. </author> <title> "Definitional Interpreters for Higher Order Programming Languages". </title> <booktitle> ACM Conference Proceedings, </booktitle> <year> 1972. </year>
Reference: <author> Steele, </author> <title> G.L. </title> <type> Personal communication, </type> <month> June, </month> <year> 1976. </year>
Reference: <author> Steele, G.L. RABBIT: </author> <title> A Compiler for SCHEME. AI-TR-474, AI Lab., </title> <publisher> MIT, </publisher> <month> May </month> <year> 1978. </year>
Reference: <author> Sussman, G.J., and Steele, G.L. </author> <title> "SCHEMEAn Interpreter for Extended Lambda Calculus". </title> <type> AI Memo 349, </type> <institution> MIT AI Lab., </institution> <month> Dec. </month> <year> 1975. </year> <title> 10 But without reified continuations. 11 Steele was aware of this paper when he wrote his Master's Thesis [Steele78]; indeed, he made valuable suggestions for its improvement [Steele76]. Nevertheless, Steele's closuresharing analysis [Steele78,p.60-63] often creates buried bindings where none existed before; if the goal of minimum "maximal net space" is desired, closuresharing can be a "pessimization" rather than an optimization. </title>
References-found: 9

