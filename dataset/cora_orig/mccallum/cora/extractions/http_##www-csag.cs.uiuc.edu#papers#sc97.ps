URL: http://www-csag.cs.uiuc.edu/papers/sc97.ps
Refering-URL: http://www-csag.cs.uiuc.edu/papers/index.html
Root-URL: http://www.cs.uiuc.edu
Email: hane, achien-@cs.uiuc.edu  
Title: FM-QoS: Real-time Communication using Self synchronizing Schedules  
Author: Kay Connelly and Andrew A. Chien 
Keyword: Concurrent Systems Architecture Group  
Web: http://www-csag.cs.uiuc.edu  
Address: 1304 W. Springfield Ave. Urbana, IL 61801  
Affiliation: Department of Computer Science, University of Illinois  
Abstract: FM-QoS employs a novel communication architecture based on network feedback to provide predictable communication performance (e.g. deterministic latencies and guaranteed bandwidths) for high speed cluster interconnects. Network feedback is combined with self-synchronizing communication schedules to achieve synchrony in the network interfaces (NIs). Based on this synchrony, the network can be scheduled to provide predictable performance without special network QoS hardware. We describe the key element of the FM-QoS approach, feedback-based synchronization (FBS), which exploits network feedback to synchronize senders. We use Petri nets to characterize the set of self-synchronizing communication schedules for which FBS is effective and to describe the resulting synchronization overhead as a function of the clock drift across the network nodes. Analytic modeling suggests that for clocks of quality 300 ppm (such as found in the Myrinet NI), a synchronization overhead less than 1% of the total communication traffic is achievable - significantly better than previous software-based schemes and comparable to hardware-intensive approaches such as virtual circuits (e.g. ATM). We have built a prototype of FBS for Myricoms Myrinet network (a 1.28 Gbps cluster network) which demonstrates the viability of the approach by sharing network resources with predictable performance. The prototype, which implements the local node schedule in software, achieves predictable latencies of 23 ms for a singleswitch, 8-node network and 2 KB packets. In comparison, the best-effort scheme achieves 104 ms for the same network without FBS. While this ratio of over four to one already demonstrates the viability of the approach, it includes nearly 10 ms of overhead due to the software implementation. For hardware implementations of local node scheduling, and for networks with cascaded switches, these ratios should be much larger factors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Basu, V. Buch, W. Vogels and T. von Eicken. U-Net: </author> <title> A user-level network interface for parallel and distributed computing. </title> <booktitle> In Proceedings of the 15 th ACM Symposium on Operating Systems Principles, </booktitle> <month> December, </month> <year> 1995. </year>
Reference-contexts: These systems consist of a number of desktop or 2 or 4-way symmetric multiprocessors connected by a high speed cluster interconnect. There has been a great deal of research in high performance communication layers for these platforms <ref> [1, 5, 25] </ref>, resulting in communication layers such as Illinois Fast Messages (FM) which delivers minimum latencies of 8 ms, and peak bandwidths of ~76 Megabytes/second [4]. This performance is high enough to support many supercomputing, multimedia, and embedded applications.
Reference: [2] <author> N. Boden, D. Cohen, R. E. Felderman, A. E. Kulawik, C. L. Seitz, J. N. Seizovic and W. K. Su. Myrinet: </author> <title> A gigabit-per-second local-area network. </title> <booktitle> In IEEE Micro, </booktitle> <volume> Vol. 15, No. 1, </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: Of course, network communication is just one of the many system resources which an EPIQ system must manage. 2.1. Myricoms Myrinet Myrinet is a high speed local area network with full duplex, 1.28 Gbps links. Derived from multicomputer routers, current Myrinet offerings employ wormhole routing and 8x8 crossbar switches <ref> [2] </ref>. Arbitration in the crossbars is fair and done by a round robin algorithm. The network interface has a programmable CPU (the LANai) with 256KB of SRAM that attaches to the input/output bus of the host processor.
Reference: [3] <author> J. Boudec. </author> <title> The asynchronous transfer mode: a tutorial. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 24 </volume> <pages> 279-309, </pages> <year> 1992. </year>
Reference-contexts: ATM To date, many approaches to quality of service have focused on adding hardware to the routing switches in the network. For example, ATM uses link multiplexing and buffering to implement virtual circuits <ref> [3, 24] </ref> which are then the basis of quality of service. A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go [11], Hierarchical Round Robin [15], Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date [27], and Virtual Clock [28].
Reference: [4] <institution> Concurrent Systems Architecture Group, High Performance Virtual Machines (HPVM), Department of Computer Science, University of Illinois, </institution> <note> http://www-csag.cs.uiuc.edu/projects/hpvm.html </note>
Reference-contexts: There has been a great deal of research in high performance communication layers for these platforms [1, 5, 25], resulting in communication layers such as Illinois Fast Messages (FM) which delivers minimum latencies of 8 ms, and peak bandwidths of ~76 Megabytes/second <ref> [4] </ref>. This performance is high enough to support many supercomputing, multimedia, and embedded applications. However to date, these communication layers do not provide guaranteed predictable performance, as network contention and scheduling effects can cause delivered 2 performance to vary by several orders of magnitude. <p> Background The FM-QoS effort is part of both the Illinois High Performance Virtual Machines (HPVM) and End to end Performance vIa Quality of service (EPIQ) projects at the Department of Computer Science at the University of Illinois <ref> [4, 8] </ref>. The goal of the HPVM project is to support high performance distributed computing by building low-overhead, high performance communication software (e.g. FM [25] and MPI-FM [21]) and other middleware (coscheduling, resource management). The target deployment environments include high-performance embedded systems and scalable clusters. <p> FMs primary goal is to provide high-performance not just to applications written directly to the FM API, but also to applications written to a wide range of higher-level communication APIs such as MPI, SHMEM Put/Get and Global Arrays <ref> [21, 4] </ref>. To implement these higher level API's efficiently, FM must provide the 6 right set of delivery guarantees. Too weak or too strong will reduce performance. See [17, 25] for more detailed discussion of these issues. <p> Other research in the HPVM project is addressing the issue of the host scheduling applications to respond to network events <ref> [4] </ref>. 3.2 Global Resource Schedule Our approach to quality of service depends on a global resource schedule which enforces predictable timedivision multiplexing of network links and outputs. Because the schedule is enforced externally at the NIs, it achieves quality of service end-to-end without increasing switch complexity.
Reference: [5] <author> D. E. Culler, et. al. </author> <title> The generic Active Messages interface specification. </title> <address> http://now.cs.berkeley.edu/Papers/Papers/gam_spec.ps </address>
Reference-contexts: These systems consist of a number of desktop or 2 or 4-way symmetric multiprocessors connected by a high speed cluster interconnect. There has been a great deal of research in high performance communication layers for these platforms <ref> [1, 5, 25] </ref>, resulting in communication layers such as Illinois Fast Messages (FM) which delivers minimum latencies of 8 ms, and peak bandwidths of ~76 Megabytes/second [4]. This performance is high enough to support many supercomputing, multimedia, and embedded applications.
Reference: [6] <author> W. J. Dally and C. L. Seitz. </author> <title> Deadlock Free Message Routing in Multiprocessor Interconnection Networks. </title> <journal> In IEEE Transactions on Computing, </journal> <volume> Vol. C-36, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: While we are prototyping FM-QoS in the context of wormhole-routed switches from Myrinet, we believe our techniques are applicable to any network that provides link-level flow control feedback to the network interface (NI) in hardware or software. Wormhole routers <ref> [6] </ref> are popular because of their low cost and high performance which derive from their simplicity. However, wormhole routing makes predictable performance difficult because the stop in place flow control protocol induces network blocking. The transitive effects of such blockage can be catastrophic for quality of service.
Reference: [7] <author> A. Demers, S. Keshav and S. Shenker. </author> <title> Analysis and simulations of a fair queueing algorithm. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 1-12, </pages> <year> 1989. </year>
Reference-contexts: For example, ATM uses link multiplexing and buffering to implement virtual circuits [3, 24] which are then the basis of quality of service. A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing <ref> [7] </ref>, Stop-and-Go [11], Hierarchical Round Robin [15], Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date [27], and Virtual Clock [28]. The algorithms differ in their complexity, efficiency and fairness.
Reference: [8] <institution> End to end Performance vIa Quality of Service, </institution> <note> http://pertsserver.cs.uiuc.edu/epiq/ </note>
Reference-contexts: Background The FM-QoS effort is part of both the Illinois High Performance Virtual Machines (HPVM) and End to end Performance vIa Quality of service (EPIQ) projects at the Department of Computer Science at the University of Illinois <ref> [4, 8] </ref>. The goal of the HPVM project is to support high performance distributed computing by building low-overhead, high performance communication software (e.g. FM [25] and MPI-FM [21]) and other middleware (coscheduling, resource management). The target deployment environments include high-performance embedded systems and scalable clusters.
Reference: [9] <author> D. Gall. </author> <title> MPEG: A video compression standard for multimedia applications. </title> <journal> In Communications of the ACM, </journal> <volume> Vol. 34, No. 4, </volume> <pages> pages 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: However to date, these communication layers do not provide guaranteed predictable performance, as network contention and scheduling effects can cause delivered 2 performance to vary by several orders of magnitude. Embedded and multimedia applications typically require predictable performance <ref> [20, 9, 14] </ref>, and recent studies have demonstrated that predictable performance can benefit supercomputing applications designed for best-effort networks [18]. Thus, our goal is to develop a network architecture which delivers both predictable, high performance for cluster interconnects, thereby supporting all three application classes in a single network environment.
Reference: [10] <author> M. Gerla, B. Kannan, B. Kwan, P. Palnati, S. Walton, E. Leonardi and F. Neri. </author> <title> Quality of service support in highspeed, wormhole routing networks. </title> <booktitle> In International Conference on Network Protocols, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: of ServerNet networks indicate that achieving tight bounds for latency is difficult with only this mechanism, and tight QoS bounds may require external network support, such as the smart network interfaces proposed as part of FBS. 17 Gerla, et. al. describe three techniques for implementing QoS on a Myrinet network <ref> [10] </ref>. However to our knowledge, none of these approaches have been implemented. While the hardware context is similar, their approach differs significantly, focusing on much larger timescales (milliseconds) or requiring hardware enhancements to the Myrinet. The first approach involves separate subnets for QoS traffic.
Reference: [11] <author> S. J. Golestani. </author> <title> Congestion-free communication in highspeed packet networks. </title> <journal> In IEEE Transactions on Communications, </journal> <volume> Vol. 39, No. 12, </volume> <pages> pages 1802-1812, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: For example, ATM uses link multiplexing and buffering to implement virtual circuits [3, 24] which are then the basis of quality of service. A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go <ref> [11] </ref>, Hierarchical Round Robin [15], Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date [27], and Virtual Clock [28]. The algorithms differ in their complexity, efficiency and fairness.
Reference: [12] <author> S. Hauck. </author> <title> Asynchronous design methodologies: An overview. </title> <booktitle> In Proceedings of the IEEE, Vol.83, </booktitle> <volume> No. 1, </volume> <pages> pages 69-93, </pages> <month> January </month> <year> 1995. </year> <month> 20 </month>
Reference-contexts: Conversely, given a particular clock drift rate for network nodes, we can place a bound on the path lengths in the Petri net that will ensure a correct execution of the communication schedule. 4.1 Schedule Graphs Schedule graphs are Signal Transition Graphs (STG, Petri nets with labeled transitions) <ref> [12] </ref>. A Petri net is a 4-tuple PN = (P, T, E, m o ). P is a finite set of places (graphically represented as circles). T is a finite set of transitions, representing events in the system (drawn as horizontal bars).
Reference: [13] <author> R. Horst. Tnet: </author> <title> A reliable system are network. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 37-45, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: We believe that this approach allows simpler high-speed switches, and avoids the ATM controversies surrounding hardware flow control and reliable transfer. FM-QoS presumes link-level flow control and, based on that presumption, delivers reliable transfers to applications. Tandem's ServerNet includes a scheduling algorithm called ALU Biasing <ref> [19, 13] </ref> to provide proportional bandwidth allocation for wormhole-routed networks at a modest increase in hardware complexity.
Reference: [14] <author> D. Jadav and A. Choudhary. </author> <title> Designing and implementing high-performance media-on-demand servers. </title> <booktitle> In IEEE Parallel and Distributed Technology, </booktitle> <pages> pages 29-39, </pages> <month> Summer </month> <year> 1995. </year>
Reference-contexts: However to date, these communication layers do not provide guaranteed predictable performance, as network contention and scheduling effects can cause delivered 2 performance to vary by several orders of magnitude. Embedded and multimedia applications typically require predictable performance <ref> [20, 9, 14] </ref>, and recent studies have demonstrated that predictable performance can benefit supercomputing applications designed for best-effort networks [18]. Thus, our goal is to develop a network architecture which delivers both predictable, high performance for cluster interconnects, thereby supporting all three application classes in a single network environment.
Reference: [15] <author> C. Kalmanek, H. Kanakia and S. Keshav. </author> <title> Rate controlled servers for very highspeed networks. </title> <booktitle> In Proceedings of IEEE Global Telecommunications Conference, </booktitle> <year> 1990. </year>
Reference-contexts: For example, ATM uses link multiplexing and buffering to implement virtual circuits [3, 24] which are then the basis of quality of service. A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go [11], Hierarchical Round Robin <ref> [15] </ref>, Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date [27], and Virtual Clock [28]. The algorithms differ in their complexity, efficiency and fairness. The FBS approach does not require increased switch hardware capability to deliver quality of service; but instead, implements the complexity for coordination and scheduling at the endpoints.
Reference: [16] <author> D. Kandlur, K. Shin and D. Ferrari. </author> <title> Real-time communication in multihop networks. </title> <journal> In IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 5, No 10, </volume> <pages> pages 1044-1056, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go [11], Hierarchical Round Robin [15], Delay Earliest-Due-Date <ref> [16] </ref>, Jitter Earliest-Due-Date [27], and Virtual Clock [28]. The algorithms differ in their complexity, efficiency and fairness. The FBS approach does not require increased switch hardware capability to deliver quality of service; but instead, implements the complexity for coordination and scheduling at the endpoints.
Reference: [17] <author> V. Karamcheti and A. A. Chien. </author> <title> A comparison of architectural support for messaging on the TMC CM-5 and the Cray T3D. </title> <booktitle> In International Symposium on Computer Architecture, </booktitle> <year> 1995. </year>
Reference-contexts: To implement these higher level API's efficiently, FM must provide the 6 right set of delivery guarantees. Too weak or too strong will reduce performance. See <ref> [17, 25] </ref> for more detailed discussion of these issues. FM provides the following guarantees to enable simple, high performance implementation of a wide range of user-level APIs: in-order delivery, reliable delivery, and decoupling of the host processor and the network.
Reference: [18] <author> J. H. Kim. </author> <title> Bandwidth and latency guarantees in low-cost, high-performance networks. </title> <type> Ph.D. thesis, </type> <year> 1997. </year>
Reference-contexts: Embedded and multimedia applications typically require predictable performance [20, 9, 14], and recent studies have demonstrated that predictable performance can benefit supercomputing applications designed for best-effort networks <ref> [18] </ref>. Thus, our goal is to develop a network architecture which delivers both predictable, high performance for cluster interconnects, thereby supporting all three application classes in a single network environment.
Reference: [19] <author> J. H. Kim and A. A. Chien. </author> <title> Rotating Combined Queueing (RCQ): Bandwidth and latency guarantees in low-cost, high-performance networks. </title> <booktitle> In International Symposium on Computer Architecture, </booktitle> <year> 1996. </year>
Reference-contexts: We believe that this approach allows simpler high-speed switches, and avoids the ATM controversies surrounding hardware flow control and reliable transfer. FM-QoS presumes link-level flow control and, based on that presumption, delivers reliable transfers to applications. Tandem's ServerNet includes a scheduling algorithm called ALU Biasing <ref> [19, 13] </ref> to provide proportional bandwidth allocation for wormhole-routed networks at a modest increase in hardware complexity.
Reference: [20] <author> E. W. Knightly, D. E. Wrege, J. Liebeherr and H. Zhang. </author> <title> Fundamental limits and tradeoffs of providing deterministic guarantees to VBR video traffic. </title> <booktitle> In Proceedings of ACM SIGMETRICS, </booktitle> <year> 1995. </year>
Reference-contexts: However to date, these communication layers do not provide guaranteed predictable performance, as network contention and scheduling effects can cause delivered 2 performance to vary by several orders of magnitude. Embedded and multimedia applications typically require predictable performance <ref> [20, 9, 14] </ref>, and recent studies have demonstrated that predictable performance can benefit supercomputing applications designed for best-effort networks [18]. Thus, our goal is to develop a network architecture which delivers both predictable, high performance for cluster interconnects, thereby supporting all three application classes in a single network environment.
Reference: [21] <author> M. Lauria and A. A. Chien. </author> <title> MPI-FM: High performance MPI on workstation clusters. </title> <journal> In Journal of Parallel and Distributed Computing, </journal> <month> February </month> <year> 1997. </year>
Reference-contexts: The goal of the HPVM project is to support high performance distributed computing by building low-overhead, high performance communication software (e.g. FM [25] and MPI-FM <ref> [21] </ref>) and other middleware (coscheduling, resource management). The target deployment environments include high-performance embedded systems and scalable clusters. EPIQs goal is to develop a framework for scalable, responsive and reconfigurable end-to-end resource management. FM-QoS provides a high performance, controllable communication substrate for experimentation. <p> FMs primary goal is to provide high-performance not just to applications written directly to the FM API, but also to applications written to a wide range of higher-level communication APIs such as MPI, SHMEM Put/Get and Global Arrays <ref> [21, 4] </ref>. To implement these higher level API's efficiently, FM must provide the 6 right set of delivery guarantees. Too weak or too strong will reduce performance. See [17, 25] for more detailed discussion of these issues.
Reference: [22] <author> J-P. Li and M. </author> <title> Mutka. Priority based real-time communication for large scale wormhole networks. </title> <booktitle> In Proceedings of International Parallel Processing Symposium, </booktitle> <pages> pages 433-438, </pages> <month> May </month> <year> 1994. </year>
Reference: [23] <author> J-P. Li and M. </author> <title> Mutka. Real-time virtual channel flow control. </title> <booktitle> In Proceedings of IEEE 13 Annual International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 97-103, </pages> <month> April </month> <year> 1994. </year> <title> [24]P. Newman. ATM local area networks. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 86-98, </pages> <month> March </month> <year> 1994. </year>
Reference: [25] <author> S. Pakin, V. Karamcheti and A. A. Chien. </author> <title> Fast Messages (FM): Efficient, portable communication for workstation clusters and massively-parallel processors. </title> <journal> IEEE Concurrency, </journal> <year> 1997. </year>
Reference-contexts: These systems consist of a number of desktop or 2 or 4-way symmetric multiprocessors connected by a high speed cluster interconnect. There has been a great deal of research in high performance communication layers for these platforms <ref> [1, 5, 25] </ref>, resulting in communication layers such as Illinois Fast Messages (FM) which delivers minimum latencies of 8 ms, and peak bandwidths of ~76 Megabytes/second [4]. This performance is high enough to support many supercomputing, multimedia, and embedded applications. <p> The goal of the HPVM project is to support high performance distributed computing by building low-overhead, high performance communication software (e.g. FM <ref> [25] </ref> and MPI-FM [21]) and other middleware (coscheduling, resource management). The target deployment environments include high-performance embedded systems and scalable clusters. EPIQs goal is to develop a framework for scalable, responsive and reconfigurable end-to-end resource management. FM-QoS provides a high performance, controllable communication substrate for experimentation. <p> In our software prototype of FBS, the LANai is programmed to implement the NI local scheduling. 2.2 Illinois Fast Messages Illinois Fast Messages (FM) is a low-overhead, high-performance software messaging layer with an implementation for the Myrinet network <ref> [25] </ref>. FMs primary goal is to provide high-performance not just to applications written directly to the FM API, but also to applications written to a wide range of higher-level communication APIs such as MPI, SHMEM Put/Get and Global Arrays [21, 4]. <p> To implement these higher level API's efficiently, FM must provide the 6 right set of delivery guarantees. Too weak or too strong will reduce performance. See <ref> [17, 25] </ref> for more detailed discussion of these issues. FM provides the following guarantees to enable simple, high performance implementation of a wide range of user-level APIs: in-order delivery, reliable delivery, and decoupling of the host processor and the network.
Reference: [26] <author> P. Ramanathan, D. D. Kandlur and K. G. Shin. </author> <title> Hardware assisted software clock synchronization for homogeneous distributed systems. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> Vol. 39, </volume> <pages> pages 514-524, </pages> <month> April </month> <year> 1990. </year> <month> 21 </month>
Reference-contexts: Enforcing a resource schedule is challenging because most LANs are asynchronous, i.e. there is no global clock. For example, to enforce the slotschedule shown in Figure 5, the nodes must be synchronized in time at slot boundaries. Hardware approaches (e.g. <ref> [26] </ref>) are usually considered 8 impractical, particularly for high speed, large scale networks. User level software schemes for clock synchronization or even software clocks are generally unable to provide the microsecond scale synchronization required for our slots (a few microseconds each).
Reference: [27] <author> D. Verma, H. Zhang and D. Ferrari. </author> <title> Delay jitter control for real-time communication in packet switching networks. </title> <booktitle> In Proceedings of TriComm91, </booktitle> <pages> pages 47-55, </pages> <year> 1991. </year>
Reference-contexts: A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go [11], Hierarchical Round Robin [15], Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date <ref> [27] </ref>, and Virtual Clock [28]. The algorithms differ in their complexity, efficiency and fairness. The FBS approach does not require increased switch hardware capability to deliver quality of service; but instead, implements the complexity for coordination and scheduling at the endpoints.
Reference: [28] <author> L. Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switching networks. </title> <booktitle> In Proceedings of ACM SIGCOMM, </booktitle> <pages> pages 19-29, </pages> <year> 1990. </year>
Reference-contexts: A wide range of scheduling algorithms have been proposed for implementation on ATM switches to provide QoS guarantees: Fair Queueing [7], Stop-and-Go [11], Hierarchical Round Robin [15], Delay Earliest-Due-Date [16], Jitter Earliest-Due-Date [27], and Virtual Clock <ref> [28] </ref>. The algorithms differ in their complexity, efficiency and fairness. The FBS approach does not require increased switch hardware capability to deliver quality of service; but instead, implements the complexity for coordination and scheduling at the endpoints.

References-found: 27

