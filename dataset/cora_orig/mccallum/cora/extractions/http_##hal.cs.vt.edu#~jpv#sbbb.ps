URL: http://hal.cs.vt.edu/~jpv/sbbb.ps
Refering-URL: http://hal.cs.vt.edu/~jpv/papers.html
Root-URL: http://www.cs.vt.edu
Title: SORTING BY BOUNDED BLOCK-MOVES  
Author: Lenwood S. Heath and John Paul C. Vergara 
Date: September 14, 1996  
Address: 24061-0106  
Affiliation: Department of Computer Science Virginia Polytechnic Institute and State University Blacksburg, Virginia  
Abstract: Submitted to Discrete Applied Mathematics. September 14, 1996 Given a permutation , a block-move is an operation that switches two adjacent blocks of elements in . The problem of finding the minimum number of block-moves required to sort has applications in computational biology, particularly in the study of genome rearrangements. This paper investigates variants of the problem where bounds are imposed on the lengths of the blocks moved. Algorithms and reduction results are presented for these variants. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Aigner and D. B. West, </author> <title> Sorting by insertion of leading element, </title> <journal> Journal of Combinatorial Theory A, </journal> <volume> 45 (1987), </volume> <pages> pp. 306-309. </pages>
Reference-contexts: They observe experimentally that selecting block-moves that maximally lengthen the longest increasing subsequence in the permutation often produces near-optimal results. It is not known whether this problem is NP-complete or solvable in polynomial time. Aigner and West <ref> [1] </ref> provide a polynomial-time algorithm for a variant of this problem where the block-moves are restricted to those that re-insert the first element in a permutation.
Reference: [2] <author> V. Bafna and P. A. Pevzner, </author> <title> Sorting permutations by transpositions, </title> <booktitle> in Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995, </year> <pages> pp. </pages> <month> 614-623. </month> <title> [3] , Genome rearrangements and sorting by reversals, </title> <journal> SIAM Journal on Computing, </journal> <volume> 25 (1996), </volume> <pages> pp. 272-289. </pages>
Reference-contexts: Applying fi (3; 5; 8) to transforms to fi = 1 2 5 6 7 3 4 8 9. Minimum sorting by block-moves is the problem of determining the block-move distance of a permutation , i.e., the minimum number of block-moves required to sort . Bafna and Pevzner <ref> [2] </ref> study this problem (they call block-moves transpositions since block-moves transpose two adjacent blocks) and provide a metric on a permutation that counts cycles in a graph representation of the permutation.
Reference: [4] <author> A. Caprara, </author> <title> Sorting by reversals is difficult. </title> <note> Submitted to the SIAM Journal on Computing, </note> <year> 1996. </year>
Reference-contexts: Most algorithmic results on this problem involve restricting the operations on a genome to a subset of the operations we have identified. For instance, there has been significant work on sorting by reversals <ref> [3, 4, 7, 10, 11] </ref>. In this paper, we focus on block-moves.
Reference: [5] <author> S. Even and O. Goldreich, </author> <title> The minimum-length generator sequence is NP-hard, </title> <journal> Journal of Algorithms, </journal> <volume> 2 (1981), </volume> <pages> pp. 311-313. </pages>
Reference-contexts: The above formulation uses the predicate P to restrict the rearrangements to a particular set. Let P [n] denote the set of rearrangements ff on a permutation of length n where P (ff) holds. We say P describes the set P [n]. Even and Goldreich <ref> [5] </ref> show that M inSort P , when P is considered part of the instance, is NP-hard. Jerrum [8] strengthens this result by showing that the problem is PSPACE-complete. This paper investigates M inSort P for fixed predicates P , in particular, those that describe block-moves.
Reference: [6] <author> S. Guyer, L. S. Heath, and J. P. C. Vergara, </author> <title> Subsequence and run heuristics for the sorting by transpositions problem. Accepted to the Fourth DIMACS International Algorithm Implementation Challenge, </title> <year> 1995. </year>
Reference-contexts: They derive upper and lower bounds on the block-move distance and present an approximation algorithm with a 1.5 performance guarantee. Guyer, Heath, and Vergara <ref> [6] </ref> employ some heuristics based on subsequences and devise corresponding algorithms for the problem. They observe experimentally that selecting block-moves that maximally lengthen the longest increasing subsequence in the permutation often produces near-optimal results. It is not known whether this problem is NP-complete or solvable in polynomial time. <p> If all that is required is the length of the sorting sequence, then obtaining this result is dependent only on the computation of the LIS, which takes O (n log log n) time [9]. The results of Guyer, Heath, and Vergara <ref> [6] </ref> involve longest increasing subsequences. They experimentally determine that an algorithm for M inSort Bk based on LIS produces better results compared to those based on runs (merging consecutive and contiguous subsequences).
Reference: [7] <author> L. S. Heath and J. P. C. Vergara, </author> <title> Some experiments on the sorting by reversals problem, </title> <type> Tech. Rep. TR 95-16, </type> <institution> Department of Computer Science, Virginia Polytechnic Institute and State University, </institution> <year> 1995. </year> <month> 34 </month>
Reference-contexts: Most algorithmic results on this problem involve restricting the operations on a genome to a subset of the operations we have identified. For instance, there has been significant work on sorting by reversals <ref> [3, 4, 7, 10, 11] </ref>. In this paper, we focus on block-moves.
Reference: [8] <author> M. R. Jerrum, </author> <title> The complexity of finding minimum-length generator sequences, </title> <institution> The--oretical Computer Science, </institution> <month> 36 </month> <year> (1985), </year> <pages> pp. 265-289. </pages>
Reference-contexts: Let P [n] denote the set of rearrangements ff on a permutation of length n where P (ff) holds. We say P describes the set P [n]. Even and Goldreich [5] show that M inSort P , when P is considered part of the instance, is NP-hard. Jerrum <ref> [8] </ref> strengthens this result by showing that the problem is PSPACE-complete. This paper investigates M inSort P for fixed predicates P , in particular, those that describe block-moves. Let Bk be the predicate that describes all block-moves, so MinSort Bk denotes minimum sorting by block-moves.
Reference: [9] <author> D. B. Johnson, </author> <title> A priority queue in which initialization and queue operations take O(log log D) time, </title> <journal> Mathematical Systems Theory, </journal> <volume> 15 (1982), </volume> <pages> pp. 295-309. </pages>
Reference-contexts: If all that is required is the length of the sorting sequence, then obtaining this result is dependent only on the computation of the LIS, which takes O (n log log n) time <ref> [9] </ref>. The results of Guyer, Heath, and Vergara [6] involve longest increasing subsequences. They experimentally determine that an algorithm for M inSort Bk based on LIS produces better results compared to those based on runs (merging consecutive and contiguous subsequences).
Reference: [10] <author> J. Kececioglu and D. Sankoff, </author> <title> Exact and approximation algorithms for the inversion distance between two chromosomes, </title> <booktitle> in Fourth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <volume> vol. 684, </volume> <year> 1993, </year> <pages> pp. </pages> <month> 87-105. </month> <title> [11] , Efficient bounds for oriented chromosome inversion distance, </title> <booktitle> in Fifth Annual Symposium on Combinatorial Pattern Matching, Lecture Notes in Computer Science, </booktitle> <year> 1994, </year> <pages> pp. 307-325. </pages>
Reference-contexts: Most algorithmic results on this problem involve restricting the operations on a genome to a subset of the operations we have identified. For instance, there has been significant work on sorting by reversals <ref> [3, 4, 7, 10, 11] </ref>. In this paper, we focus on block-moves.
Reference: [12] <author> A. Pneuli, A. Lempel, and S. </author> <title> Even, Transitive orientation of graphs and identification of permutation graphs, </title> <journal> Canadian Journal of Math, </journal> <volume> 23 (1971), </volume> <pages> pp. 160-175. </pages>
Reference-contexts: Intuitively, the arcs of a permutation graph indicate those pairs of elements that are not in their correct relative order. Figure 2 illustrates the permutation graph for = 4 2 1 3 6 5. Permutation graphs have been studied extensively studied (e.g., <ref> [12, 13] </ref>) and are examples of transitive graphs. It can be verified that a correcting short block-move corresponds to the removal of one or two arcs from the corresponding permutation graph.
Reference: [13] <author> D. Rotem and J. Urrutia, </author> <title> Permutation graphs, Networks, </title> <booktitle> 12 (1982), </booktitle> <pages> pp. 429-437. 35 </pages>
Reference-contexts: Intuitively, the arcs of a permutation graph indicate those pairs of elements that are not in their correct relative order. Figure 2 illustrates the permutation graph for = 4 2 1 3 6 5. Permutation graphs have been studied extensively studied (e.g., <ref> [12, 13] </ref>) and are examples of transitive graphs. It can be verified that a correcting short block-move corresponds to the removal of one or two arcs from the corresponding permutation graph.
References-found: 11

