URL: ftp://ftp.eecs.umich.edu/people/kieras/TR-EPIC-4.ps
Refering-URL: http://ai.eecs.umich.edu/people/kieras/nynex.html
Root-URL: http://www.cs.umich.edu
Title: Predictive Engineering Models Based on the EPIC Architecture for a Multimodal High-Performance Human-Computer Interaction Task  
Author: David E. Kieras Scott D. Wood, David E. Meyer 
Affiliation: Artificial Intelligence Laboratory Electrical Engineering Computer Science Department and  Department of Psychology University of Michigan  
Abstract: Engineering models of human performance permit some aspects of usability of interface designs to be predicted from an analysis of the task, and thus can replace to some extent expensive user testing data. We successfully predicted human performance in telephone operator tasks with engineering models constructed in the EPIC (Executive Process-Interactive Control) architecture for human information-processing, which is especially suited for modeling multimodal, complex tasks, and has demonstrated success in other task domains. Several models were constructed on an a priori basis to represent different hypotheses about how operators coordinate their activities to produce rapid task performance. The models predicted the total task time with useful accuracy, and clarified some important properties of the task. The best model was based directly on the GOMS analysis of the task and made simple assumptions about the operators task strategy, suggesting that EPIC models are a feasible approach to predicting performance in multimodal high-performance tasks. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Anderson, J. R. </author> <year> (1976). </year> <title> Language, memory, </title> <booktitle> and thought. </booktitle> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: There are feedback pathways from the motor processors, as well as tactile feedback from the effectors, which are important in coordinating multiple tasks. The declarative/procedural knowledge distinction of the "ACT-class" cognitive architectures <ref> (e.g., Anderson, 1976) </ref> is represented in the form of separate permanent memories for production rules and declarative information. <p> Flattened Method Models The original Hierarchical Motor-Parallel model was then modified in a different direction, flattening the methods, along the lines suggested by widely-accepted principles of learning of cognitive skill, such as those proposed in learning theories such as ACT <ref> (Anderson, 1976, 1987) </ref> and SOAR (Laird, Rosenbloom, & Newell, 1986). Extreme practice of a skill should cause the method housekeeping and other such rules to be replaced by a more efficient set of rules that effectively turn "subroutine" methods into "in-line" methods.
Reference: <author> Anderson, J. R. </author> <year> (1993). </year> <title> Rules of the mind. </title> <address> Hillsdale, N.J.: </address> <publisher> Erlbaum. </publisher>
Reference-contexts: EPIC was designed to explicitly couple basic information processing and perceptual-motor mechanisms like those in the MHP with a cognitive analysis of procedural skill, namely that represented by production-system models such as CCT (Bovair, Kieras, & Polson, 1990), ACT-R <ref> (Anderson, 1993) </ref>, and SOAR (Laird, Rosenbloom, & Newell, 1986). Thus, EPIC has a production-rule cognitive processor surrounded by perceptual-motor peripherals; applying EPIC to a task situation requires specifying both the production-rule programming for the cognitive processor, and also the relevant perceptual and motor processing parameters.
Reference: <author> Anderson, J. R. </author> <year> (1987). </year> <title> Skill acquisition: Compilation of weak-method problem solutions. </title> <journal> Psychological Review, </journal> <volume> 94, </volume> <pages> 192-210. </pages>
Reference: <author> Bovair, S., Kieras, D. E., & Polson, P. G. </author> <year> (1990). </year> <title> The acquisition and performance of text editing skill: A cognitive complexity analysis. </title> <journal> Human-Computer Interaction, </journal> <volume> 5, </volume> <pages> 1-48. </pages> <note> 30 Card, </note> <author> S. K., Moran, T. P., & Newell, A. </author> <year> (1983). </year> <title> The psychology of human-computer interaction. </title> <address> Hillsdale, NJ: </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: EPIC was designed to explicitly couple basic information processing and perceptual-motor mechanisms like those in the MHP with a cognitive analysis of procedural skill, namely that represented by production-system models such as CCT <ref> (Bovair, Kieras, & Polson, 1990) </ref>, ACT-R (Anderson, 1993), and SOAR (Laird, Rosenbloom, & Newell, 1986). <p> Example production rules for the models described in this paper will be presented below. EPIC uses the Parsimonious Production System (PPS) interpreter, which is especially suited to task modeling work, as in the CCT models <ref> (Bovair, Kieras, & Polson, 1990) </ref>. PPS rules have the format (&lt;rule-name&gt; IF <condition> 5 THEN &lt;actions&gt;); the rule condition can test only the contents of the production system working memory. The rule actions can add or remove items from the working memory, or send a command to a motor processor.
Reference: <author> Gray, W. D., John, B. E., & Atwood, M. E. </author> <title> (1993) Project Ernestine: A validation of GOMS for prediction and explanation of real-world task performance. </title> <journal> Human-Computer Interaction, </journal> <volume> 8, 3, </volume> <pages> pp. 237-209. </pages>
Reference-contexts: However, as in the Hierarchical Motor-Parallel models, the perceptual-motor activities can overlap substantially. The Flattened Method models are perhaps closest to the CPM-GOMS models for the telephone operator tasks <ref> (Gray, John, & Atwood, 1993) </ref>, in that the methods consist simply of sequences of operators, with no hierarchical submethod structure and consequently no cognitive execution overhead (see John & Kieras, 1994, for more discussion of this distinction). As mentioned above, only two models of this type were developed here. <p> However, according to the workstation training materials, a certain screen event indicating a successful billing verification is the proper signal for hitting POS-RLS, and this was assumed in the GOMS analysis underlying the models <ref> (cf. Gray, John, and Atwood, 1993) </ref>. Given that the system verification process is relatively long, the operator should be idle at the time of the relevant screen event, and so the latency of the POS-RLS keystroke should depend only a simple reaction to the screen event.
Reference: <author> Hallett, P. E. </author> <year> (1986). </year> <title> Eye movements. </title> <editor> In K.R. Boff, L. Kaufman, & J. P. Thomas (Eds), </editor> <booktitle> Handbook of perception and human performance. </booktitle> <volume> Volume 1, </volume> <pages> 10-1 - 10-112. </pages> <address> New York: </address> <publisher> Wiley. </publisher>
Reference-contexts: Visual changes that can trigger involuntary eye movements are a sudden onset (appearance) of an object, or the slow movement of a fixated object <ref> (cf. Hallett, 1986) </ref>. In the tasks reported in Kieras and Meyer (1995), EPIC can follow moving objects with a mixture of voluntary and involuntary eye movements. 8 Modeling Issues Fixed and free parameters.
Reference: <author> John, B. E. </author> <year> (1988). </year> <title> Contributions to engineering models of human-computer interaction. </title> <type> Doctoral dissertation, </type> <institution> Carnegie Mellon University. </institution>
Reference: <author> John, B. E. & Kieras, D. E. </author> <year> (1994). </year> <title> The GOMS family of analysis techniques: Tools for design and evaluation. </title> <institution> Carnegie Mellon University School of Computer Science Technical Report No. CMU-CS-94-181. </institution> <note> Also appears as the Human-Computer Interaction Institute Technical Report No. CMU-HCII-94-106. </note>
Reference-contexts: By "multimodal" we mean that the task engages multiple perceptual-motor modalities: both visual and auditory perception, and both vocal and manual motor systems. Such tasks are scientifically interesting because the multiple modalities involve the overall human cognitive and performance system, and also because they are active system tasks <ref> (John & Kieras, 1994) </ref> in that the user must respond to events produced by the external environment, unlike passive system text editing, which is basically paced by the user. As pointed out by John and Kieras (1994), engineering models for active system tasks are currently under-developed. <p> But due to the work involved, the CPM-GOMS method is recommended for predicting execution time only when there is a small number of benchmark tasks to be analyzed <ref> (see John & Kieras, 1994) </ref>. Generative Models of Interface Procedures This paper presents a new family of engineering models that are more powerful and easier to apply than CPM-GOMS analysis. <p> Such a model is also typically reactive <ref> (see John & Kieras, 1994) </ref>, in that the procedural knowledge in an EPIC model not only generates actions depending on the specific task situation, but also reacts in simulated real time to events initiated by the task environment. <p> Figure 3 shows the hierarchy of Goals and Methods for the GOMS model for the task, and Figure 4 contains an excerpt of the NGOMSL methods. Constructing this GOMS model was a routine activity needing no special explanation here <ref> (see John & Kieras, 1994) </ref>, and was performed as part of the preliminary modeling work described by Wood, Kieras, & Meyer (1994). <p> Thus, each production rule is constrained to act as a single step in the NGOMSL analysis; each step in each method is fully executed before the next step is executed; and the execution of a submethod suspends execution of the calling method <ref> (see John & Kieras, 1994, for related discussion) </ref>. This model had a total of 50 production rules; one rule for each step in each method plus the additional "housekeeping" rules for each method. <p> The Flattened Method models are perhaps closest to the CPM-GOMS models for the telephone operator tasks (Gray, John, & Atwood, 1993), in that the methods consist simply of sequences of operators, with no hierarchical submethod structure and consequently no cognitive execution overhead <ref> (see John & Kieras, 1994, for more discussion of this distinction) </ref>. As mentioned above, only two models of this type were developed here. The Flattened Motor-Parallel model. <p> However, in some situations, such as the Gray et al. Project Ernestine, the economics of the interface evaluation problem can make even a novel and demanding analysis approach a practical and useful solution. Following the precedent of the CCT and NGOMSL models <ref> (see John & Kieras, 1994) </ref>, as the EPIC architecture stabilizes and experience is gained in applying it to interface analysis problems, it should be possible to develop a simplified method of analysis that will enable designers to conveniently apply engineering models based on EPIC.
Reference: <author> Kieras, D. E. </author> <year> (1988). </year> <title> Towards a practical GOMS model methodology for user interface design. </title> <editor> In M. Helander (Ed.), </editor> <booktitle> Handbook of HumanComputer Interaction (pp. 135158). </booktitle> <address> Amsterdam: </address> <publisher> NorthHolland Elsevier. </publisher>
Reference-contexts: This represents a simple "baseline" model that takes advantage only of the ability of the perceptual processors to operate in parallel with the rest of the system. The Hierarchical Fully-Sequential model was based on a straightforward GOMS model for the task using the NGOMSL approach <ref> (Kieras, 1988, 1994) </ref>. This model describes task procedures as a hierarchical set of methods consisting of sequential executed actions, and which operate the motor processors strictly sequentially.
Reference: <author> Kieras, D. E. </author> <year> (1994a). </year> <title> A guide to GOMS task analysis (Spring, 1994). </title> <type> Unpublished manuscript, </type> <institution> University of Michigan. </institution>
Reference: <author> Kieras, D. </author> <year> (1994b). </year> <title> GOMS Modeling of User Interfaces using NGOMSL. </title> <booktitle> Tutorial Notes, CHI'94 Conference on Human Factors in Computer Systems, </booktitle> <address> Boston, MA, </address> <month> April 24-28, </month> <year> 1994. </year>
Reference: <author> Kieras, D.E., & Meyer, D.E. </author> <year> (1994). </year> <title> The EPIC architecture for modeling human information-processing: A brief introduction. </title> <type> (EPIC Tech. Rep. No. 1, </type> <institution> TR-94/ONR-EPIC-1). Ann Arbor, University of Michigan, Department of Electrical Engineering and Computer Science. </institution>
Reference-contexts: By "multimodal" we mean that the task engages multiple perceptual-motor modalities: both visual and auditory perception, and both vocal and manual motor systems. Such tasks are scientifically interesting because the multiple modalities involve the overall human cognitive and performance system, and also because they are active system tasks <ref> (John & Kieras, 1994) </ref> in that the user must respond to events produced by the external environment, unlike passive system text editing, which is basically paced by the user. As pointed out by John and Kieras (1994), engineering models for active system tasks are currently under-developed. <p> But due to the work involved, the CPM-GOMS method is recommended for predicting execution time only when there is a small number of benchmark tasks to be analyzed <ref> (see John & Kieras, 1994) </ref>. Generative Models of Interface Procedures This paper presents a new family of engineering models that are more powerful and easier to apply than CPM-GOMS analysis. <p> Such a model is also typically reactive <ref> (see John & Kieras, 1994) </ref>, in that the procedural knowledge in an EPIC model not only generates actions depending on the specific task situation, but also reacts in simulated real time to events initiated by the task environment. <p> If a generative model based on EPIC can be applied to predicting execution time in a high-performance task, it should be considerably more efficient than the CPM-GOMS approach. Preliminary work with an EPIC model of the telephone operator tasks <ref> (Wood, Kieras, & Meyer, 1994) </ref> was encouraging, showing fairly good accuracy in predicting task and event times for a very small set of task instances. <p> Figure 3 shows the hierarchy of Goals and Methods for the GOMS model for the task, and Figure 4 contains an excerpt of the NGOMSL methods. Constructing this GOMS model was a routine activity needing no special explanation here <ref> (see John & Kieras, 1994) </ref>, and was performed as part of the preliminary modeling work described by Wood, Kieras, & Meyer (1994). <p> Thus, each production rule is constrained to act as a single step in the NGOMSL analysis; each step in each method is fully executed before the next step is executed; and the execution of a submethod suspends execution of the calling method <ref> (see John & Kieras, 1994, for related discussion) </ref>. This model had a total of 50 production rules; one rule for each step in each method plus the additional "housekeeping" rules for each method. <p> The Flattened Method models are perhaps closest to the CPM-GOMS models for the telephone operator tasks (Gray, John, & Atwood, 1993), in that the methods consist simply of sequences of operators, with no hierarchical submethod structure and consequently no cognitive execution overhead <ref> (see John & Kieras, 1994, for more discussion of this distinction) </ref>. As mentioned above, only two models of this type were developed here. The Flattened Motor-Parallel model. <p> These values were the fixed architectural parameter values set during the development of EPIC (described above as standard values), and a single task-specific value determined during the preliminary model-fitting work in this task domain <ref> (Wood, Kieras, & Meyer, 1994) </ref>, namely the time to recode a spoken digit to the name of a key (given above as a typical value). <p> However, in some situations, such as the Gray et al. Project Ernestine, the economics of the interface evaluation problem can make even a novel and demanding analysis approach a practical and useful solution. Following the precedent of the CCT and NGOMSL models <ref> (see John & Kieras, 1994) </ref>, as the EPIC architecture stabilizes and experience is gained in applying it to interface analysis problems, it should be possible to develop a simplified method of analysis that will enable designers to conveniently apply engineering models based on EPIC.
Reference: <author> Kieras, D. & Meyer, D. </author> <year> (1995). </year> <title> Predicting human performance in dual-task tracking and decision making with computational models using the EPIC architecture. </title> <booktitle> Proceedings of the First International Symposium on Command and Control Research and Technology, </booktitle> <institution> National Defense University, </institution> <address> June. Washington, D.C.: </address> <institution> National Defense University. </institution>
Reference: <author> Kieras, D. E., & Polson, P. G. </author> <year> (1985). </year> <title> An approach to the formal analysis of user complexity. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 22, </volume> <pages> 365-394. </pages>
Reference: <author> Kieras, D. E., Wood, S. D., & Meyer, D. E. </author> <year> (1995). </year> <title> Predictive engineering models using the EPIC architecture for a high-performance task. </title> <booktitle> In Proceedings of CHI, 1995, </booktitle> <address> Denver, Co, USA, May 7-11, 1995. New York: </address> <publisher> ACM. </publisher>
Reference: <author> Laird, J., Rosenbloom, P, & Newell, A. </author> <title> (1986) Universal subgoaling and chunking. </title> <publisher> Kluwer Academic Publishers: </publisher> <address> Boston. </address>
Reference-contexts: EPIC was designed to explicitly couple basic information processing and perceptual-motor mechanisms like those in the MHP with a cognitive analysis of procedural skill, namely that represented by production-system models such as CCT (Bovair, Kieras, & Polson, 1990), ACT-R (Anderson, 1993), and SOAR <ref> (Laird, Rosenbloom, & Newell, 1986) </ref>. Thus, EPIC has a production-rule cognitive processor surrounded by perceptual-motor peripherals; applying EPIC to a task situation requires specifying both the production-rule programming for the cognitive processor, and also the relevant perceptual and motor processing parameters. <p> Flattened Method Models The original Hierarchical Motor-Parallel model was then modified in a different direction, flattening the methods, along the lines suggested by widely-accepted principles of learning of cognitive skill, such as those proposed in learning theories such as ACT (Anderson, 1976, 1987) and SOAR <ref> (Laird, Rosenbloom, & Newell, 1986) </ref>. Extreme practice of a skill should cause the method housekeeping and other such rules to be replaced by a more efficient set of rules that effectively turn "subroutine" methods into "in-line" methods.
Reference: <author> Meyer, D.E., & Kieras, D.E. </author> <year> (1994). </year> <title> EPIC computational models of psychological refractory-period effects in human multiple-task performance. </title> <type> (EPIC Tech. Rep. No. 2, </type> <institution> TR-94/ONR-EPIC-2). Ann Arbor, University of Michigan, Department of Psychology. </institution>
Reference-contexts: If a generative model based on EPIC can be applied to predicting execution time in a high-performance task, it should be considerably more efficient than the CPM-GOMS approach. Preliminary work with an EPIC model of the telephone operator tasks <ref> (Wood, Kieras, & Meyer, 1994) </ref> was encouraging, showing fairly good accuracy in predicting task and event times for a very small set of task instances. <p> These values were the fixed architectural parameter values set during the development of EPIC (described above as standard values), and a single task-specific value determined during the preliminary model-fitting work in this task domain <ref> (Wood, Kieras, & Meyer, 1994) </ref>, namely the time to recode a spoken digit to the name of a key (given above as a typical value).
Reference: <author> Meyer, D. E., & Kieras, D. E. </author> <note> (in press, </note> <year> 1996). </year> <title> Computational modeling of human multiple-task performance: I. The EPIC architecture and strategic response-deferment model. Psychological Review. </title> <publisher> (a). </publisher>
Reference: <author> Meyer, D. E., & Kieras, D. E. </author> <note> (in press, </note> <year> 1996). </year> <title> Computational modeling of human multiple-task performance: II. Executive scheduling strategies and psychological refractory period phenomena. Psychological Review. </title> <publisher> (b). </publisher>
Reference: <author> McMillan, G. R., Beevis, D., Salas, E., Strub, M. H., Sutton, R., & Van Breda, L. </author> <year> (1989). </year> <title> Applications of human performance models to system design. </title> <publisher> New York:Plenum Press. </publisher>
Reference-contexts: THE EPIC ARCHITECTURE EPIC bears a superficial resemblance to earlier frameworks for human information-processing, EPIC incorporates a new synthesis of theoretical concepts and empirical results, and so is more comprehensive, more formalized, and more detailed than proposals such as MHP, HOS, SAINT, and so forth <ref> (see McMillan, Beevis, Salas, Strub, Sutton, & Van Breda, 1989) </ref>. It is important to note that EPIC was used "as is" for the modeling work reported here; the details and parameters of the architecture had been developed in other task domains and modeling projects.
Reference: <author> Rosenbaum, D. A. </author> <year> (1991). </year> <title> Human motor control. </title> <address> New York, </address> <publisher> Academic Press. </publisher>
Reference-contexts: The different processors have similar structures, but different timing properties and capabilities, based on the current human performance literature in motor control <ref> (see Rosenbaum, 1991) </ref>. The manual motor processor has many movement forms, or styles, and the two hands are bottlenecked through a single manual processor, and so normally can be operated either one at a time, or synchronized with each other. <p> The vocal motor processor produces a sequence of simulated speech sounds given a symbol for the desired utterance. Movement preparation and execution. The different motor processors represent movements and movement generation in the same basic way. Current research on movement control <ref> (Rosenbaum, 1991) </ref> suggests that movements are specified in terms of movement features, and the time to produce a movement depends on its feature structure as well as its mechanical properties. The overall time to complete a movement can be divided into a preparation phase and an execution phase.
Reference: <author> Wood, S., Kieras, D., & Meyer, D. </author> <year> (1994). </year> <title> An EPIC model for a high-performance task. </title> <booktitle> Poster presented at CHI'94 ACM Conference on Human Factors in Computing, </booktitle> <address> Boston, </address> <month> April 25-28. 31 </month>
Reference-contexts: If a generative model based on EPIC can be applied to predicting execution time in a high-performance task, it should be considerably more efficient than the CPM-GOMS approach. Preliminary work with an EPIC model of the telephone operator tasks <ref> (Wood, Kieras, & Meyer, 1994) </ref> was encouraging, showing fairly good accuracy in predicting task and event times for a very small set of task instances. <p> These values were the fixed architectural parameter values set during the development of EPIC (described above as standard values), and a single task-specific value determined during the preliminary model-fitting work in this task domain <ref> (Wood, Kieras, & Meyer, 1994) </ref>, namely the time to recode a spoken digit to the name of a key (given above as a typical value).
References-found: 22

