URL: ftp://ftp.cs.unh.edu/pub/csp/Papers/ijcai95-anytm-rjw-ecf.ps.gz
Refering-URL: http://www.cs.unh.edu/Personal/ecf.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Anytime Algorithms for Constraint Satisfaction and SAT problems  
Author: Richard J. Wallace and Eugene C. Freuder 
Address: Kingsbury Hall Rm208, College Road Durham, NH 03824 USA  
Affiliation: Department of Computer Science University of New Hampshire  
Abstract: The constraint satisfaction problem (CSP) is a potential area of application for anytime methods. In this work we derive anytime curves using a partial constraint satisfaction framework that encompasses problems with complete solutions and those that allow only partial solutions of varying quality. In either case, the curves should converge on optimal solutions with respect to some measure of cost (here, the number of violated constraints). Binary CSPs and k-satisfiability problems were tested, using heuristic repair and branch and bound methods. Curves for heuristic methods either start at a lower level than curves for branch and bound (min-conflicts with binary CSPs) or have a steeper initial descent (GSAT with k-SAT problems). Techniques for randomization such as random walks or restarting with a new random solution appear to be necessary with heuristic procedures for complete convergence to an optimal solution. Branch and bound algorithms are usefully employed in tandem with heuristic methods, especially to verify optimality and, therefore, the quality of solution re turned by the latter.
Abstract-found: 1
Intro-found: 1
Reference: [ Freuder and Wallace, 1992 ] <author> E. C. Freuder and R. J. Wallace. </author> <title> Partial constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 21-70, </pages> <year> 1992. </year>
Reference-contexts: For MAX-SAT problems we used a branch and bound version of the Davis-Putnam algorithm that includes the in-most-shortest clause heuristic for choosing the next variable to assign. (These algorithms are described in detail in <ref> [ Freuder and Wallace, 1992 ] </ref> , [ Shapiro and Haralick, 1981 ] , [ Wallace, 1995 ][ Wal-lace and Freuder, 1995 ] .) Heuristic repair procedures for CSPs begin with a complete assignment and try to improve it by choosing alternative assignments that reduce the number of constraint violations. <p> These values are based on values used in published reports. 3 Experimental Methods Random constraint satisfaction problems were generated using the "probability of inclusion" model of generation (cf. <ref> [ Freuder and Wallace, 1992 ] </ref> ). The number of variables was fixed, as well as the maximum domain size. Each possible domain element, constraint and constraint value pair was then chosen with a specified probability. The initial sets of problems had 30 variables and a domain maximum of 10.
Reference: [ Minton et al., 1992 ] <author> S. Minton, M. D. Johnston, A. B. Philips, and P. Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 161-205, </pages> <year> 1992. </year>
Reference-contexts: In the minconflicts procedure, the first assignment is made by choosing values that minimize the number of constraint violations with values already chosen ( <ref> [ Minton et al., 1992 ] </ref> ). Then random methods are used to choose a variable whose assignment conflicts with another assignement and, from the domain of that variable, a value that has the minimal number of conflicts.
Reference: [ Selman and Kautz, 1993 ] <author> B. Selman and H. A. Kautz. </author> <title> An empirical study of greedy local search for satisfia-bility testing. </title> <booktitle> In Proceedings AAAI-93, </booktitle> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: a simple negative exponential model, the averaged curves are best fitted with two equations, one with a time constant 1 and one with a time constant t 1.) Heuristic procedures differ from branch and bound in having a lower initial value (min-conflicts) and/or a steeper initial decline (e.g., GSAT, cf. <ref> [ Selman and Kautz, 1993 ] </ref> ). These differences are greatly amplified as problem size increases. In fact, at 100 variables the decelerating character of the curve for branch and bound is no longer obvious over short intervals (Figure 3). (branch and bound) and GSAT procedures. 50-variable, 225-clause problems.
Reference: [ Selman et al., 1992 ] <author> B. Selman, H. Levesque, and D. Mitchell. </author> <title> A new method for solving hard satisfiabil ity problems. </title> <booktitle> In Proceedings AAAI-92, </booktitle> <pages> pages 440-446, </pages> <year> 1992. </year>
Reference-contexts: GSAT, a repair procedure for SAT problems, begins with a random truth assignment and then alters ("flips") the assignment of a variable that leads to the greatest net increase in satisfiable clauses. After a certain number of flips, a new random assignment is chosen (called a new "try") ( <ref> [ Selman et al., 1992 ] </ref> ). A variation of GSAT, here called walk-SAT, flips the value of some variable chosen at random with a certain probability. Two features of this procedure were also tested with min-conflicts: retries after a certain number of new assignments and the random walk strategy.
Reference: [ Shapiro and Haralick, 1981 ] <author> L. Shapiro and R. Haral-ick. </author> <title> Structural descriptions and inexact matching. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 3 </volume> <pages> 504-519, </pages> <year> 1981. </year>
Reference-contexts: For MAX-SAT problems we used a branch and bound version of the Davis-Putnam algorithm that includes the in-most-shortest clause heuristic for choosing the next variable to assign. (These algorithms are described in detail in [ Freuder and Wallace, 1992 ] , <ref> [ Shapiro and Haralick, 1981 ] </ref> , [ Wallace, 1995 ][ Wal-lace and Freuder, 1995 ] .) Heuristic repair procedures for CSPs begin with a complete assignment and try to improve it by choosing alternative assignments that reduce the number of constraint violations.
Reference: [ Wallace and Freuder, 1995 ] <author> R. J. Wallace and E. C. Freuder. </author> <title> Comparing constraint satisfaction and Davis-Putnam algorithms for the maximal satisfiability problem. </title> <editor> In D. S. Johnson and M. A. Trick, editors, </editor> <title> Cliques, Coloring and Satisfiability: Second DI-MACS Implementation Challenge, (to appear). </title> <publisher> American Mathematical Society, </publisher> <year> 1995. </year>
Reference: [ Wallace, 1995 ] <author> R. J. Wallace. </author> <title> Directed arc consistency preprocessing as a strategy for maximal constraint satisfaction. </title> <editor> In M. Meyer, editor, </editor> <booktitle> Constraint Processing, volume 923 of Lecture Notes in Computer Science, </booktitle> <pages> pages 121-138. </pages> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, </address> <year> 1995. </year>
Reference-contexts: For MAX-SAT problems we used a branch and bound version of the Davis-Putnam algorithm that includes the in-most-shortest clause heuristic for choosing the next variable to assign. (These algorithms are described in detail in [ Freuder and Wallace, 1992 ] , [ Shapiro and Haralick, 1981 ] , <ref> [ Wallace, 1995 ] </ref>[ Wal-lace and Freuder, 1995 ] .) Heuristic repair procedures for CSPs begin with a complete assignment and try to improve it by choosing alternative assignments that reduce the number of constraint violations.
References-found: 7

