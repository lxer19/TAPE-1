URL: ftp://ftp.ifi.unizh.ch/pub/techreports/other_docs/lopstr95.ps.gz
Refering-URL: http://www.ifi.unizh.ch/staff/fuchs.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: wamb@ifi.unizh.ch, fuchs@ifi.unizh.ch  
Title: An Opportunistic Approach for Logic Program Analysis and Optimisation using Enhanced Schema-Based Transformations  
Author: Wamberto W. Vasconcelos Norbert E. Fuchs 
Address: Switzerland  
Affiliation: Institut fur Informatik Universitat Zurich  
Abstract: We propose an opportunistic approach for performing program analysis and optimisation: opportunities for improving a logic program are systematically attempted, either by examining its procedures in an isolated fashion, or by checking for conjunctions within clauses that can be used as joint specifications. Opportunities are represented as enhanced schema-based transformations, generic descriptions of inefficient programming constructs and of how these should be altered in order to confer a better computational behaviour on the program. The programming constructs are described in an abstract manner using an enhanced schema language which allows important features to be highlighted and irrelevant details to be disregarded.
Abstract-found: 1
Intro-found: 1
Reference: [Bowles et al, 94] <author> A. Bowles, D. Robertson, W. Vasconcelos, M. Vargas-Vera, D. Bental. </author> <title> Applying Prolog Programming Techniques. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 41(3) </volume> <pages> 329-350, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: These efficiency issues can be dealt with at an early stage, during the preparation of the program: standard logic programming constructs, also named programming techniques, which guarantee a good computational behaviour to those logic programs incorporating them, can be used. Prolog programming techniques have been extensively studied <ref> [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94] </ref>; it has been advocated [Kirschenbaum et al, 94] that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented [Bowles et al, 94; Robertson, 91] incorporating them. <p> Prolog programming techniques have been extensively studied [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94]; it has been advocated [Kirschenbaum et al, 94] that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented <ref> [Bowles et al, 94; Robertson, 91] </ref> incorporating them. A second approach addresses efficiency issues after the program has been devised, trying to optimise the existing code. This involves the analysis and subsequent transformation of a given, possibly inefficient, logic program into an equivalent version with better computational behaviour.
Reference: [Flener, 95] <author> P. Flener. </author> <title> Logic Program Schemata: Synthesis and Analysis. </title> <type> Technical Report BU-CEIS-9502, </type> <institution> Bilkent University, Ankara, Turkey, </institution> <year> 1995. </year>
Reference-contexts: Additional information concerning the intended use of each predicate can be collected via the program development tools and methods employed, thus making the transformation process easier and more sophisticated. This idea is pursued in <ref> [Flener, 95; Flener & Deville, 95] </ref>, in which each procedure is devised by means of program templates employing divide-and-conquer algorithms. In [Vargas-Vera, 95; Vargas-Vera et al., 93] a similar idea is proposed, procedures being developed using Prolog programming techniques.
Reference: [Flener & Deville, 95] <author> P. Flener, Y. Deville. </author> <title> Logic Program Transformation through Generalization Schemata. Extended abstract accepted for LoPSTr'95 (Utrecht, </title> <address> the Netherlands, </address> <month> 20-22 September, </month> <year> 1995) </year>
Reference-contexts: Additional information concerning the intended use of each predicate can be collected via the program development tools and methods employed, thus making the transformation process easier and more sophisticated. This idea is pursued in <ref> [Flener, 95; Flener & Deville, 95] </ref>, in which each procedure is devised by means of program templates employing divide-and-conquer algorithms. In [Vargas-Vera, 95; Vargas-Vera et al., 93] a similar idea is proposed, procedures being developed using Prolog programming techniques.
Reference: [Fuchs & Fromherz, 91] <author> N. E. Fuchs and M. P. J. Fromherz. </author> <title> Schema-Based Transformations of Logic Programs. </title> <booktitle> In: Proceedings of the Workshop in Logic Program Synthesis and Transformation (LoPSTr'91), </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Each transformation is formulated so as to describe the programming constructs in an economic yet general fashion. We propose an enhanced version of Gegg-Harrison's schema language [Gegg-Harrison, 91] for this purpose, following the proposal in <ref> [Fuchs & Fromherz, 91] </ref>. In the next section we explain our enhanced schema language. In Section 3 we describe how enhanced program schemata are used to guide program transformations. <p> A formal description of the enhanced schema language is presented in [Vasconcelos & Fuchs, 95]. We use frames around schemata to improve their visualisation. 3 Enhanced Schema-Based Transformations of Logic Programs <ref> [Fuchs & Fromherz, 91] </ref> have proposed the notion of schema-based program transformations, in which Gegg-Harrison's schema language is used to characterise an actual context whereby efficiency-improving alterations can be performed in a given program. These transformations can give logic programs a more procedural reading. <p> In order to solve this problem, <ref> [Fuchs & Fromherz, 91] </ref> adopt the intervention of a human user who chooses one of the prospective transformations and has it applied to the program. <p> This constraint is, of course, added to the essential restriction that program transformations should preserve the meaning (i.e. set of logical consequences) and the termination status of the original program. Our work extends previous research <ref> [Fuchs & Fromherz, 91] </ref> on using program schemata to guide program transformation. In order to address a larger class of constructs we have proposed some enhancements to the schema language used.
Reference: [Gegg-Harrison, 91] <author> T. S. Gegg-Harrison. </author> <title> Learning Prolog in a Schema-Based Environment. </title> <journal> Instructional Science, </journal> <volume> 20 </volume> <pages> 173-192, </pages> <year> 1991. </year>
Reference-contexts: Each transformation is formulated so as to describe the programming constructs in an economic yet general fashion. We propose an enhanced version of Gegg-Harrison's schema language <ref> [Gegg-Harrison, 91] </ref> for this purpose, following the proposal in [Fuchs & Fromherz, 91]. In the next section we explain our enhanced schema language. In Section 3 we describe how enhanced program schemata are used to guide program transformations. <p> The programming constructs are represented by means of program schemata, generic descriptions of a program in a suitable Horn-clause notation. A special schema language, an enhanced version of Gegg-Harrison's <ref> [Gegg-Harrison, 91] </ref> proposal, is used which enables the economic description of programs in an abstract fashion. We provide a notational device which allows reference to arbitrary argument positions. It consists of adding the construct "#n", where n is the argument position, to the term being referred to.
Reference: [Kirschenbaum et al, 94] <author> M. Kirschenbaum, S. Michaylov, and L. Sterling. </author> <title> Skeletons and Techniques as a Normative Approach to Program Development in Logic-Based Languages. </title> <institution> OSU-CISRC-5/94-TR25, Dept. of Computer and Information Science, Ohio State University, Ohio, U.S.A., </institution> <year> 1994. </year>
Reference-contexts: Prolog programming techniques have been extensively studied [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94]; it has been advocated <ref> [Kirschenbaum et al, 94] </ref> that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented [Bowles et al, 94; Robertson, 91] incorporating them.
Reference: [Lakhotia & Sterling, 90] <author> A. Lakhotia and L. Sterling. </author> <title> How to Control Unfolding when Specialising Interpreters. In The Practice of Prolog, </title> <editor> L. Sterling (Ed.), </editor> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [Nielson & Nielson, 90] <author> H. R. Nielson and F. Nielson. </author> <title> Eureka Definitions for Free Disagreement Points for Fold/Unfold Transformations. </title> <booktitle> In Proceedings of ESOP'90, Lecture Notes in Computer Science 432, </booktitle> <pages> pp. 291-305, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [O'Keefe, 90] <author> R. A. O'Keefe. </author> <title> The Craft of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: These efficiency issues can be dealt with at an early stage, during the preparation of the program: standard logic programming constructs, also named programming techniques, which guarantee a good computational behaviour to those logic programs incorporating them, can be used. Prolog programming techniques have been extensively studied <ref> [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94] </ref>; it has been advocated [Kirschenbaum et al, 94] that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented [Bowles et al, 94; Robertson, 91] incorporating them. <p> The final transformed program 0 is the result of the operation 0 = ( P) [ P 0 [ C [P;P 0 ] . Conversion clauses can be seen as initialisation calls <ref> [Sterling & Shapiro, 94; O'Keefe, 90] </ref> in which values are initially assigned to argument positions of a predicate being invoked.
Reference: [Proietti & Pettorossi, 90] <author> M. Proietti and A. Pettorossi. </author> <title> Synthesis of Eureka Predicates for Developing Logic Programs. </title> <booktitle> In Proceedings of ESOP'90, Lecture Notes in Computer Science 432, </booktitle> <pages> pp. 306-325, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [Robertson, 91] <author> D. Robertson. </author> <title> A Simple Prolog Techniques Editor for Novice Users. </title> <booktitle> In Proceedings of 3rd Annual Conference on Logic Programming, </booktitle> <address> Edinburgh, Scotland, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Prolog programming techniques have been extensively studied [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94]; it has been advocated [Kirschenbaum et al, 94] that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented <ref> [Bowles et al, 94; Robertson, 91] </ref> incorporating them. A second approach addresses efficiency issues after the program has been devised, trying to optimise the existing code. This involves the analysis and subsequent transformation of a given, possibly inefficient, logic program into an equivalent version with better computational behaviour.
Reference: [Sterling & Shapiro, 94] <author> L. Sterling and E. Y. Shapiro. </author> <title> The Art of Prolog: Advanced Programming Techniques. Second Edition. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: These efficiency issues can be dealt with at an early stage, during the preparation of the program: standard logic programming constructs, also named programming techniques, which guarantee a good computational behaviour to those logic programs incorporating them, can be used. Prolog programming techniques have been extensively studied <ref> [Bowles et al, 94; O'Keefe, 90; Sterling & Shapiro, 94] </ref>; it has been advocated [Kirschenbaum et al, 94] that these standard practices should be explicitly taught as part of a discipline of methodical logic programming development; and logic programming environments have been implemented [Bowles et al, 94; Robertson, 91] incorporating them. <p> The final transformed program 0 is the result of the operation 0 = ( P) [ P 0 [ C [P;P 0 ] . Conversion clauses can be seen as initialisation calls <ref> [Sterling & Shapiro, 94; O'Keefe, 90] </ref> in which values are initially assigned to argument positions of a predicate being invoked.
Reference: [Vargas-Vera, 95] <author> M. Vargas-Vera. </author> <title> Using Prolog Techniques to Guide Program Composition. </title> <type> PhD Thesis. </type> <institution> University of Edinburgh. Edinburgh, </institution> <address> Scotland, </address> <year> 1995. </year>
Reference-contexts: This idea is pursued in [Flener, 95; Flener & Deville, 95], in which each procedure is devised by means of program templates employing divide-and-conquer algorithms. In <ref> [Vargas-Vera, 95; Vargas-Vera et al., 93] </ref> a similar idea is proposed, procedures being developed using Prolog programming techniques. In both approaches more sophisticated forms fl Presented at the Fifth Workshop on Logic Program Synthesis and Transformation (LoPSTr'95), Utrecht, The Netherlands, September 20-22, 1995.
Reference: [Vargas-Vera et al, 93] <author> M. Vargas-Vera, D. Robertson, W. W. Vasconcelos. </author> <title> Building Large-Scale Prolog Programs using a Techniques Editing System. </title> <type> Technical Report 635. </type> <institution> Department of Artificial Intelligence, University of Edinburgh. Edinburgh, </institution> <address> Scotland, </address> <year> 1993. </year>
Reference: [Vasconcelos & Fuchs, 95] <author> W. W. Vasconcelos and N. E. Fuchs. </author> <title> Opportunistic Logic Program Analysis and Optimisation: Enhanced Schema-Based Transformations for Logic Programs and their Usage in an Opportunistic Framework for Program Analysis and Optimisation. </title> <type> Technical Report 95-24. </type> <institution> Institut fur Informatik, Universitat Zurich, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Ordinary Prolog constructs can be used within program schemata, in which case they are considered as constraints, since they are specific syntactic patterns. A formal description of the enhanced schema language is presented in <ref> [Vasconcelos & Fuchs, 95] </ref>. <p> I 1 and ~ I 2 are (possibly empty) finite conjunctions of subgoals not relevant to the analysis, and there is a schema substitution fi associating components of the program with the schema constructs such that G i fi = G i and S i fi = P i . <ref> [Vasconcelos & Fuchs, 95] </ref> describe a means to obtain schema substitutions for enhanced schemata.
References-found: 15

