URL: http://www.cs.gatech.edu/computing/pads/gtw++.ps
Refering-URL: http://www.cs.gatech.edu/computing/pads/ted.html
Root-URL: 
Title: GTW An Object-oriented Interface in C to the Georgia Tech Time Warp System  
Author: Kalyan S. Perumalla and Richard M. Fujimoto 
Date: September 17, 1996  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Pubnum: GIT-CC-96-09  
Abstract: This document describes GTW ++ , an efficient object-oriented interface to the Geor-gia Tech Time Warp (GTW) parallel simulation system for shared memory multiprocessors. The interface, which is in C ++ , provides a clean and extensible set of abstractions for model developers wishing to use Time Warp as the parallel simulation paradigm. This interface delivers virtually the same performance as that of the C language interface to GTW. The object-oriented approach facilitates easily building higher-level interfaces, such as process-oriented views, over the basic GTW ++ interface. GTW ++ has been carefully designed so that almost identical interfaces can be supported for different parallel computing platforms, such as shared-memory machines and network of workstations, with appropriate underlying implementations for each platform. Furthermore, the GTW ++ interface can be directly provided by the GTW kernel if and when the kernel itself is redesigned using an object-oriented approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. M. Fujimoto, et al, </author> <title> "Georgia Tech Time Warp Programmer's Manual," </title> <institution> College of Computing, Georgia Institute of Technology, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: However, it is structured so that OO techniques can be appropriately applied to easily develop extensions and enhancements over the basic LP-level interface. This document assumes that the reader is not necessarily conversant with the C language interface to GTW. However, the interested reader is referred to <ref> [1] </ref> for a description of the same. The exposition of simulation application structure presented here is not dependent on that of [1]. Also, some material from [1] may be found repeated in this document. The rest of the document is organized as follows. <p> This document assumes that the reader is not necessarily conversant with the C language interface to GTW. However, the interested reader is referred to <ref> [1] </ref> for a description of the same. The exposition of simulation application structure presented here is not dependent on that of [1]. Also, some material from [1] may be found repeated in this document. The rest of the document is organized as follows. Section 1.1 provides a brief overview of the basic Time Warp simulation technique. <p> However, the interested reader is referred to <ref> [1] </ref> for a description of the same. The exposition of simulation application structure presented here is not dependent on that of [1]. Also, some material from [1] may be found repeated in this document. The rest of the document is organized as follows. Section 1.1 provides a brief overview of the basic Time Warp simulation technique. Section 1.2 provides a brief overview of the functionality provided by the Georgia Tech Time Warp simulator.
Reference: [2] <author> S. Das, et al, "GTW: </author> <title> A Time Warp System for Shared Memory Multiprocessors," </title> <institution> College of Computing, Georgia Institute of Technology. </institution>
Reference: [3] <author> D. R. Jefferson, </author> <title> "Virtual Time," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3), </volume> <pages> pages 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Appendix A is a complete programmer's reference manual for GTW ++ . 1.1 Overview of Time Warp Simulations "Time Warp" is a mechanism for performing discrete event simulations in parallel using an optimistic-computation approach. Originally proposed by D. R. Jefferson in <ref> [3] </ref>, this mechanism is based on the concept of logical processes (LP's). The simulation is assumed to be modeled as a set of LPs, which interact with each other by exchanging events (see figure 1). The LPs are, in effect, units of computation, that can be executed 2 in parallel.
Reference: [4] <author> M. A. Ellis, B. Stroustrup, </author> <title> "The Annotated C ++ Reference Manual," </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1992. </year> <month> 22 </month>
Reference-contexts: This application class is responsible for the creation of the LPs. Each of the LPs must be defined as a derived 1 The terms derived class and base class are used instead of subclass and superclass respectively, in line with the terminology of <ref> [4] </ref>. 4 class of class CLP. These LPs exchange events, each of the events being a derived class of class CEvent.
References-found: 4

