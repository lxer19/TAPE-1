URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1995/95-07.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1995/
Root-URL: 
Keyword: synthesized interaction, interaction tech niques, animated help, event generation, X window sys tem, X event, user-interface toolkits.  
Abstract: We have come to regard the human user, manipulating physical input devices as the sole driver of interaction in the graphical workspace. It is conceivable that for a variety of applications, such as help and tutorial systems, macro-by-example systems, session-playback systems and in collaborative work, we may require an alternative agent to perform tasks on the workspace, alongside the user. In this paper we describe a relatively non-intrusive and portable scheme for supporting such synthesized interaction on the X window system, and illustrate how toolkits may be instrumented to cooperate with such an agent at runt-ime, by providing information about the location of objects in their interfaces. In particular we describe the integration of synthesized interaction in the Artkit toolkit, which is structurally similar to most modern toolkits and should serve as relevant example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abdel-Wahab, H.M. and Feit, M.A. XTV: </author> <title> A framework for sharing X Window clients in remote synchronous collaboration, </title> <booktitle> in Proc. IEEE Conf. on Communications Software: Communications for Dis tributed Applications & Systems, </booktitle> <year> 1991, </year> <pages> pp. 159-167. </pages>
Reference-contexts: Interposing with a pseudo-server between the client and server offers what, at first, looks like a cleaner solution, requiring no modification to existing components. Client programs simply connect to the pseudo-server (e.g. by changing their DISPLAY environment variable) rather than the normal server. Systems like XTV <ref> [1] </ref> use the pseudo-server technique to implement shared windows. The main problem with this approach is performance. Since all communication is being intercepted, output requests which are critical to performance get needlessly delayed.
Reference: [2] <author> Bharat, K. and Sukaviriya, P. </author> <title> Animating User Inter faces Using Animation Servers, </title> <booktitle> in Proc. UIST 93, </booktitle> <pages> pp. 69-79. </pages>
Reference-contexts: In this paper we describe how these may be implemented. 1.2 Prior Work In an earlier paper <ref> [2] </ref>, we motivated the need for such a facility and described the application programmers interface to an agent called the animation server. The animation server was an independent process that would accept animation scripts from client applications and translate them into actions to be performed asynchronously. <p> We have subsequently dropped the heavily overloaded term animation in favor of synthesized interaction, in appreciation of its non-demonstrative uses. The focus on this paper is on event synthesis, security and interface related knowledge representation - issues which are orthogonal to and complement those addressed in <ref> [2] </ref>, which dealt with the API to such a facility and its potential applications. In our earlier work we assumed the existence of an event generation mechanism, and did not explain how it would be implemented. The organization of this paper is as follows. <p> Scripts are communicated using a general purpose RPC facility called Intercom, also implemented using the SendEvent protocol. 4.1 The Scripting Language The scripting language resembles the one described in <ref> [2] </ref>. An interaction technique that operates on a scroller would look as follows: Goto CENTER @scrolr1.thumb in 800 msecs Press Left Goto NORTH @scrolr1 + 0,50 in 2 secs Release Left The notion of time has been incorporated. Movement can be expressed in terms of a duration. <p> The questions - Will it jeopardize the robustness/security of existing systems? Is it a portable solution? Does it have scope for future enhancements? - need to be answered. In <ref> [2] </ref> (and to a smaller extent here) we have motivated the need for a synthesized interaction facility with a set of potential applications. We still needed to address the issues of portability, security, robustness and extensibility, which we have done in this paper.
Reference: [3] <author> Chang, B. and Ungar, D. </author> <title> Animation: From Cartoons to the User Interface, </title> <booktitle> in Proc. UIST 93, </booktitle> <pages> pp. 45-55. </pages>
Reference: [4] <institution> Command Corp. Inc., </institution> <type> Private Communication. </type>
Reference-contexts: This could also be supported by an extension to the server. The IN 3 speech recognition software (Release 2) <ref> [4] </ref> does event synthesis at the device driver level. Our first implementation relied on the fact that the OpenWindows X server, xnews could accept program generated device events using the NeWS protocol.
Reference: [5] <author> Diffie, W. </author> <title> The First Ten Years of Public-Key Cryp tography, </title> <booktitle> in Proc. of IEEE v76, </booktitle> <year> 1988, </year> <pages> pp. 560-577. </pages>
Reference-contexts: A secure key exchange between parties not sharing a prearranged key or other secret can be performed by well known public-key cryptography methods <ref> [13, 5] </ref>. In the case of button and key events there is a 32 bit sub-window field which is always set to zero in synthetic events. Consequently, this field can be made to hold the signature in transit.
Reference: [6] <author> Henry, T.R. and Hudson, S.H. </author> <title> Integrating Gesturing and Snapping into a User Interface Toolkit, </title> <booktitle> in Proc. UIST 90, </booktitle> <pages> pp. 112-121. </pages>
Reference-contexts: In general they could represent a subdo-main (we assume rectangular) within a window. In Motif [12] and other Xt based toolkits there is a close correspondence between X windows and widgets. For retargettabilty and control over event delivery toolkits like InterViews [9], Artkit <ref> [6] </ref> and Trestle [10] implement their own nesting scheme, and all widgets reside within a single top-level X window. Consequently locations are expressible as subdomains of the same window. <p> This is a fascinating prospect. 5. Toolkit Support We describe how to extend a toolkit to support posting and querying, using the specific example of the Artkit toolkit <ref> [6] </ref>. Artkit is an object oriented UI toolkit on the lines of InterViews [9] and other modern toolkits. Each window in the application is implemented by a tree of interactive objects, called interactors. Every interactor draws itself relative to its parent in the tree.
Reference: [7] <author> Hudson, S.E. and Stasko, J.T. </author> <title> Animation Support in a User Interface Toolkit: Flexible, Robust, and Reus able Abstractions, </title> <booktitle> in Proc. UIST 93, </booktitle> <pages> pp. 57-67. </pages>
Reference-contexts: Movement can be expressed in terms of a duration. The synthesizer uses an adaptive technique to compute the intermediate steps along the path. It computes the time elapsed at intermediate points and dynamically adjusts its velocity to ensure that the deadline is met <ref> [7] </ref>. The motion is smooth on a fast machine and gracefully degrades on slower machines. This makes it easy to synchronize the interaction with audio playback. Actions are expressed using destination names.
Reference: [8] <author> Hutchins, E.L., Hollan, J.D. and Norman, D.A. </author> <title> Direct Manipulation Interfaces, in User Centered System Design, </title> <editor> Ed. Norman, D.A. and Draper S.W. </editor> <publisher> Lawrence Erlbaum Associates, Ch. </publisher> <pages> 5, pp. 87-124. </pages>
Reference-contexts: 1. Introduction Although we have come to regard the simulated world metaphor rather than the conversational metaphor as the dominant paradigm in user-interfaces <ref> [8] </ref>, we continue to view the human user as the sole initiator of actions in the workspace.
Reference: [9] <author> Linton, M., Vlissades, J.M. and Calder, P.R. </author> <title> Composing User Interfaces with InterViews, </title> <note> in IEEE Com puter, Feb 1990 22(2) pp. 57-67. </note>
Reference-contexts: In general they could represent a subdo-main (we assume rectangular) within a window. In Motif [12] and other Xt based toolkits there is a close correspondence between X windows and widgets. For retargettabilty and control over event delivery toolkits like InterViews <ref> [9] </ref>, Artkit [6] and Trestle [10] implement their own nesting scheme, and all widgets reside within a single top-level X window. Consequently locations are expressible as subdomains of the same window. <p> This is a fascinating prospect. 5. Toolkit Support We describe how to extend a toolkit to support posting and querying, using the specific example of the Artkit toolkit [6]. Artkit is an object oriented UI toolkit on the lines of InterViews <ref> [9] </ref> and other modern toolkits. Each window in the application is implemented by a tree of interactive objects, called interactors. Every interactor draws itself relative to its parent in the tree. A single top-level X window contains all the interactors in a given tree.
Reference: [10] <author> Manasse, M.S. and Nelson, G. </author> <title> Trestle Window System Tutorial, </title> <editor> in Nelson, G. (Ed.) </editor> <title> Systems Program ming with Modula-3, </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: In general they could represent a subdo-main (we assume rectangular) within a window. In Motif [12] and other Xt based toolkits there is a close correspondence between X windows and widgets. For retargettabilty and control over event delivery toolkits like InterViews [9], Artkit [6] and Trestle <ref> [10] </ref> implement their own nesting scheme, and all widgets reside within a single top-level X window. Consequently locations are expressible as subdomains of the same window.
Reference: [11] <author> Nye, A. (Ed.). </author> <title> Xlib Programming Manual, </title> <publisher> OReilly & Associates Inc., </publisher> <year> 1992, </year> <note> Vol. 1, 3rd Edition. </note>
Reference-contexts: A single input event can result in multiple X events, possibly to different windows - e.g. a single mouse move could cause an exit X event to be delivered to one window and an enter X event to be delivered to another. The Xlib <ref> [11] </ref> library, which is an essential part of all win-dowing applications in the X environment, is responsible for all communication with the server. It queues the X events from the server as they come in, until they are ready to be processed by the client.
Reference: [12] <author> Open Software Foundation, </author> <title> OSF/Motif Program mers Reference, Release 1.2, </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Note that these objects may or may not correspond to an entire X window. In general they could represent a subdo-main (we assume rectangular) within a window. In Motif <ref> [12] </ref> and other Xt based toolkits there is a close correspondence between X windows and widgets. For retargettabilty and control over event delivery toolkits like InterViews [9], Artkit [6] and Trestle [10] implement their own nesting scheme, and all widgets reside within a single top-level X window.
Reference: [13] <author> Rivest, R.L., Shamir A., and Adleman, L. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems, </title> <journal> CACM, </journal> <month> Feb </month> <year> 1978 </year> <month> 21(2), </month> <pages> pp. 120-126. </pages>
Reference-contexts: A secure key exchange between parties not sharing a prearranged key or other secret can be performed by well known public-key cryptography methods <ref> [13, 5] </ref>. In the case of button and key events there is a 32 bit sub-window field which is always set to zero in synthetic events. Consequently, this field can be made to hold the signature in transit.
Reference: [14] <author> Rivest, </author> <title> R.L. The MD4 Message-Digest Algorithm, </title> <booktitle> in Crypto 90, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991, </year> <pages> pp. 303-311. </pages>
Reference-contexts: Similarly, the hash function used must be relatively well distributed and, in the second scheme, have the property that all bits of its input affect its output (for a discussion of more sophisticated hash functions for digital signatures see for example <ref> [14, 15] </ref>). On the other hand, most synthetic interaction sequences would be relatively short with respect to the length of the key that could be exchanged, and would be expected to last only a few minutes.
Reference: [15] <author> Rivest, </author> <title> R.L. RFC 1321: The MD5 Message-Digest Algorithm, </title> <institution> Internet Activities Board, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Similarly, the hash function used must be relatively well distributed and, in the second scheme, have the property that all bits of its input affect its output (for a discussion of more sophisticated hash functions for digital signatures see for example <ref> [14, 15] </ref>). On the other hand, most synthetic interaction sequences would be relatively short with respect to the length of the key that could be exchanged, and would be expected to last only a few minutes.
Reference: [16] <author> Scheier, R. and Gettys, J. </author> <title> The X Window System, </title> <journal> in ACM Trans. on Graphics, </journal> <month> April </month> <year> 1986, </year> <pages> 5(2) pp. 79 109. </pages>
Reference-contexts: We address issues such as event dispatch, consistency between event streams, security and interface layout information which are relevant on any event driven window system. 2.1 The X Environment In the X window system <ref> [16] </ref>, the X server provides a virtual display abstraction and regulates access to a set of screens and input devices. Client applications communicate with the server using an asynchronous, networked protocol called the X Protocol, which is a standard for all releases of the X11 software.
References-found: 16

