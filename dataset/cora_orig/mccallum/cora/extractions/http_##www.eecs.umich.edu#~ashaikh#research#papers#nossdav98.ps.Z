URL: http://www.eecs.umich.edu/~ashaikh/research/papers/nossdav98.ps.Z
Refering-URL: http://www.eecs.umich.edu/~ashaikh/research/
Root-URL: http://www.cs.umich.edu
Email: fashaikh,kgshing@eecs.umich.edu jrex@research.att.com  
Title: Efficient Precomputation of Quality-of-Service Routes  
Author: Anees Shaikh Jennifer Rexford and Kang G. Shin 
Address: Ann Arbor, MI 48109-2122 Florham Park, NJ 07932-0971  
Affiliation: Department of Electrical Engineering Network Mathematics Research and Computer Science Networking and Distributed Systems University of Michigan AT&T Labs Research  
Abstract: Quality-of-service (QoS) routing satisfies application performance requirements and improves network resource usage by selecting paths based on connection traffic parameters and available link capacity. However, QoS-routing protocols can introduce significant network overhead for computing routes and distributing information about link load. Route precomputation is an effective way to amortize the cost of the path-selection algorithm over multiple connection requests. This paper introduces efficient mechanisms for precom-puting one or more routes to each destination, and on-demand checking of the suitability of the routes at connection arrival, based on the most recent link-state information. Simulation experiments show that the route precomputation and route extraction techniques are effective at lowering the computational overheads for QoS routing, while achieving performance similar to the more expensive on-demand path-selection schemes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Ahmadi, J. S. Chen, and R. Guerin. </author> <title> Dynamic routing and call control in high-speed integrated networks. In Teletraffic and Datatraffic in a Period of Change: </title> <booktitle> Proceedings of the International Teletraffic Congress, volume 14 of Studies in Telecommunication, </booktitle> <pages> pages 397-403. </pages> <publisher> North-Holland, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: The source selects a minimum-hop route with the least cost 1 ; previous studies show that algorithms with a strong bias toward minimum-hop routes almost always outperform algorithms that do not consider the hop-count <ref> [1, 7, 18, 15] </ref>. To distinguish among paths of the same length, each link has a cost in the set f1=C; 2=C; : : :; C=Cg.
Reference: [2] <author> G. Apostolopoulos, R. Guerin, S. Kamat, and S. Tri-pathi. </author> <title> Quality of service based routing: A performance perspective. </title> <note> To appear in Proc. ACM SIGCOMM, </note> <month> September </month> <year> 1998. </year>
Reference-contexts: However, distributing link load information and computing routes for new connections can consume considerable bandwidth, memory, and processing resources <ref> [19, 2] </ref>. Controlling these overheads in large backbone networks introduces a trade-off between performance and complexity. In this paper, we present an efficient path-selection scheme that precom-putes routes, while still capitalizing on the most recent network load information available at connection arrival.
Reference: [3] <author> G. Apostolopoulos and S. K. Tripathi. </author> <title> On the effectiveness of path pre-computation in reducing the processing cost of on-demand QoS path computation. </title> <booktitle> In Proceedings of IEEE Symposium on Computers and Communication, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: Other research has focused on detailed performance evaluation to compare precomputed and on-demand routing under different network, traffic, and staleness configurations. The work in <ref> [3] </ref> evaluates the performance and processing overhead of a specific path pre-computation algorithm. The study adopts a Bellman-Ford-based algorithm from [9] and evaluates a purely periodic precomputation scheme under a variety of traffic and network configurations.
Reference: [4] <author> B. V. Cherkassky, A. V. Goldberg, and T. Radzik. </author> <title> Shortest-path algorithms: Theory and experimental evaluation. </title> <journal> Mathematical Programming, </journal> <volume> 73(2) </volume> <pages> 129-174, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: The Dijkstra shortest-path algorithm computes a route to a destination node in O (L log N ) time, when implemented with a binary heap [5]. Although advanced data structures can reduce the average and worst-case complexity <ref> [4] </ref>, the shortest-path computation still incurs significant overhead in large networks. In computing a route to each destination, the Dijk-stra algorithm generates a shortest-path graph, where each node has a parent pointer to the upstream node in its route from the source, as shown in Figure 1 (a). <p> The complexity of Dijkstra's algorithm, and the variation in Figure 2, decreases from O (L log N ) to O (L + CN ) [5], while more advanced data structures offer even further reduction <ref> [4] </ref>.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press (McGraw-Hill), </publisher> <address> Cambridge, MA (New York), </address> <year> 1990. </year>
Reference-contexts: The source switch selects a route for an arriving connection, based on the link state and the connection's bandwidth requirement. Route computation is based on the Dijkstra shortest-path algorithm <ref> [5] </ref>, where link cost (or "distance") is a function of the link load. To minimize resource requirements and end-to-end delay, we focus on link-cost functions that favor routes with a small number of links. <p> To minimize resource requirements and end-to-end delay, we focus on link-cost functions that favor routes with a small number of links. The Dijkstra shortest-path algorithm computes a route to a destination node in O (L log N ) time, when implemented with a binary heap <ref> [5] </ref>. Although advanced data structures can reduce the average and worst-case complexity [4], the shortest-path computation still incurs significant overhead in large networks. <p> The complexity of Dijkstra's algorithm, and the variation in Figure 2, decreases from O (L log N ) to O (L + CN ) <ref> [5] </ref>, while more advanced data structures offer even further reduction [4].
Reference: [6] <author> E. Crawley, R. Nair, B. Rajagopalan, and H. Sandick. </author> <title> A framework for QoS-based routing in the Internet. Internet Draft (draft-ietf-qosr-framework-04.txt), </title> <booktitle> work in progress, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: Quality-of-service routing has the potential to optimize the usage of net work resources, and increase the likelihood of accepting new connections, by selecting paths based on existing network load and connection traffic parameters <ref> [13, 20, 6] </ref>. However, distributing link load information and computing routes for new connections can consume considerable bandwidth, memory, and processing resources [19, 2]. Controlling these overheads in large backbone networks introduces a trade-off between performance and complexity.
Reference: [7] <author> R. Gawlick, C. Kalmanek, and K. Ramakrishnan. </author> <title> Online routing for virtual private networks. </title> <journal> Computer Communications, </journal> <volume> 19(3) </volume> <pages> 235-244, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The source selects a minimum-hop route with the least cost 1 ; previous studies show that algorithms with a strong bias toward minimum-hop routes almost always outperform algorithms that do not consider the hop-count <ref> [1, 7, 18, 15] </ref>. To distinguish among paths of the same length, each link has a cost in the set f1=C; 2=C; : : :; C=Cg.
Reference: [8] <author> A. G. Greenberg and R. Srikant. </author> <title> Computational tec-niques for accurate performance evaluation of multi-rate, multihop communication networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 5(2) </volume> <pages> 266-277, </pages> <month> April </month> <year> 1997. </year>
Reference-contexts: In this context, we focus on topologies with relatively high connectivity, an increasingly common feature of emerging core backbone networks <ref> [22, 8] </ref>, and on multimedia traffic that requires throughput guarantees. Each switch knows the underlying topology and has (possibly out-of-date) information about the unreserved bandwidth on each link.
Reference: [9] <author> R. Guerin, A. Orda, and D. Williams. </author> <title> QoS routing mechanisms and OSPF extensions. </title> <booktitle> In Proceedings of IEEE GLOBECOM, </booktitle> <address> Phoenix, AZ, </address> <month> November </month> <year> 1997. </year> <note> Extended version appears as Internet Draft (draft-guerin-qos-routing-ospf-03.txt), </note> <month> March </month> <year> 1998. </year>
Reference-contexts: Similarly, proposed QoS extensions to the OSPF protocol include an "explicit routing" mechanism for source-directed IP routing <ref> [23, 9] </ref>. Each switch maintains its own view of the available link resources, distributes link-state information to other switches, and selects routes for new connections. <p> Most previous research on QoS routing has investigated on-demand policies that compute a path at connection arrival. Recent work considers precomputation or path caching schemes that attempt to amortize the overheads of route computation by reusing the paths for multiple connection requests <ref> [14, 16, 12, 10, 9] </ref>. Path precomputation introduces a trade-off between processing overheads and the quality of the routing decisions. Previous work on precomputed routes has focused on quantifying this trade-off and developing guidelines for when to recompute routes. <p> When connections have more diverse quality-of-service parameters, the source can support a small number of different bandwidth classes (e.g., audio and video), with separate precomputed routes that are tailored to the performance requirements <ref> [14, 9] </ref>. Employing a different link-cost function and path computation policy for each class enhances the network's ability to route high-bandwidth traffic. 3 Performance Evaluation In this section, we evaluate the proposed routing algorithm under a range of recomputation periods and link-state update policies. <p> Other research has focused on detailed performance evaluation to compare precomputed and on-demand routing under different network, traffic, and staleness configurations. The work in [3] evaluates the performance and processing overhead of a specific path pre-computation algorithm. The study adopts a Bellman-Ford-based algorithm from <ref> [9] </ref> and evaluates a purely periodic precomputation scheme under a variety of traffic and network configurations. The study presents a detailed cost model of route computation to compare the overhead of on-demand and precomputed strategies. <p> These two studies do not propose any particular strategy for path storage or extraction but instead focus on performance trends. The remaining studies consider different ways to pre-compute paths for multiple destination nodes and con nection QoS requirements. The work in <ref> [9] </ref> proposes a Dijkstra-based algorithm that computes minimum-hop paths for different bandwidth classes. Another algorithm, introduced in [12], precomputes a set of extremal routes to all destinations such that no other route has both higher bottleneck bandwidth and smaller hop-count. The Bellman-Ford-based algorithm in [9] uses a similar optimization criterion to <p> The work in <ref> [9] </ref> proposes a Dijkstra-based algorithm that computes minimum-hop paths for different bandwidth classes. Another algorithm, introduced in [12], precomputes a set of extremal routes to all destinations such that no other route has both higher bottleneck bandwidth and smaller hop-count. The Bellman-Ford-based algorithm in [9] uses a similar optimization criterion to construct a next-hop routing table with multiple routing entries for each destination. The emphasis of these last three proposals is on algorithmic issues, such as reducing complexity.
Reference: [10] <author> A. Iwata, R. Izmailov, H. Suzuki, and B. Sengupta. </author> <title> PNNI routing algorithms for multimedia ATM internet. </title> <journal> NEC Reserach & Development, </journal> <volume> 38(1), </volume> <month> January </month> <year> 1997. </year>
Reference-contexts: Most previous research on QoS routing has investigated on-demand policies that compute a path at connection arrival. Recent work considers precomputation or path caching schemes that attempt to amortize the overheads of route computation by reusing the paths for multiple connection requests <ref> [14, 16, 12, 10, 9] </ref>. Path precomputation introduces a trade-off between processing overheads and the quality of the routing decisions. Previous work on precomputed routes has focused on quantifying this trade-off and developing guidelines for when to recompute routes. <p> This earlier work does not, however, address route computation or path extraction mechanisms. Another study proposes a set of route precomputation policies that optimize various criteria, such as connection blocking and set-up latency <ref> [10] </ref>. The algorithms try to locate routes that satisfy several QoS requirements through an iterative search of precomputed paths (optimized for hop-count) followed, if necessary, by several on-demand calculations that optimize different additive QoS parameters, one at a time.
Reference: [11] <author> E. L. Lawler. </author> <title> A procedure for computing the k best solutions to discrete optimization problems and its application to the shortest path problem. </title> <journal> Management Science, </journal> <volume> 18(7) </volume> <pages> 401-405, </pages> <month> March </month> <year> 1972. </year>
Reference-contexts: However, these approaches introduce considerable computational complexity. For example, computing the k shortest paths for a single destination in a directed graph has complexity as high as O (kN 3 ) <ref> [21, 11] </ref>. In addition, the k shortest paths (or paths within * of optimal) to one node may not be part of the best routes to other destinations; hence, it is usually not possible to store these multiple routes in a compact, shortest-path graph representation.
Reference: [12] <author> J.-Y. Le Boudec and T. Przygienda. </author> <title> A route pre-computation algorithm for integrated services networks. </title> <journal> Journal of Network and Systems Management, </journal> <volume> 3(4) </volume> <pages> 427-449, </pages> <year> 1995. </year>
Reference-contexts: Most previous research on QoS routing has investigated on-demand policies that compute a path at connection arrival. Recent work considers precomputation or path caching schemes that attempt to amortize the overheads of route computation by reusing the paths for multiple connection requests <ref> [14, 16, 12, 10, 9] </ref>. Path precomputation introduces a trade-off between processing overheads and the quality of the routing decisions. Previous work on precomputed routes has focused on quantifying this trade-off and developing guidelines for when to recompute routes. <p> The remaining studies consider different ways to pre-compute paths for multiple destination nodes and con nection QoS requirements. The work in [9] proposes a Dijkstra-based algorithm that computes minimum-hop paths for different bandwidth classes. Another algorithm, introduced in <ref> [12] </ref>, precomputes a set of extremal routes to all destinations such that no other route has both higher bottleneck bandwidth and smaller hop-count. The Bellman-Ford-based algorithm in [9] uses a similar optimization criterion to construct a next-hop routing table with multiple routing entries for each destination.
Reference: [13] <author> W. C. Lee, M. G. Hluchyj, and P. A. Humblet. </author> <title> Routing subject to quality of service constraints in integrated communication networks. </title> <journal> IEEE Network Magazine, </journal> <pages> pages 46-55, </pages> <month> July/August </month> <year> 1995. </year>
Reference-contexts: Quality-of-service routing has the potential to optimize the usage of net work resources, and increase the likelihood of accepting new connections, by selecting paths based on existing network load and connection traffic parameters <ref> [13, 20, 6] </ref>. However, distributing link load information and computing routes for new connections can consume considerable bandwidth, memory, and processing resources [19, 2]. Controlling these overheads in large backbone networks introduces a trade-off between performance and complexity.
Reference: [14] <author> Q. Ma and P. Steenkiste. </author> <title> On path selection for traffic with bandwidth guarantees. </title> <booktitle> In Proceedings of IEEE International Conference on Network Protocols, </booktitle> <address> At-lanta, GA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Most previous research on QoS routing has investigated on-demand policies that compute a path at connection arrival. Recent work considers precomputation or path caching schemes that attempt to amortize the overheads of route computation by reusing the paths for multiple connection requests <ref> [14, 16, 12, 10, 9] </ref>. Path precomputation introduces a trade-off between processing overheads and the quality of the routing decisions. Previous work on precomputed routes has focused on quantifying this trade-off and developing guidelines for when to recompute routes. <p> When connections have more diverse quality-of-service parameters, the source can support a small number of different bandwidth classes (e.g., audio and video), with separate precomputed routes that are tailored to the performance requirements <ref> [14, 9] </ref>. Employing a different link-cost function and path computation policy for each class enhances the network's ability to route high-bandwidth traffic. 3 Performance Evaluation In this section, we evaluate the proposed routing algorithm under a range of recomputation periods and link-state update policies. <p> For simplicity we assume that links are bidirectional, with unit capacity in each direction. We evaluate the routing algorithms on a "well-known" core topology (an early version of the MCI Internet backbone <ref> [15, 14] </ref>) and a uniformly connected 125-node 5-ary 3-cube topology (with 5 nodes along each of 3 dimensions). <p> The study presents a detailed cost model of route computation to compare the overhead of on-demand and precomputed strategies. As part of a broader study of QoS routing, the work in <ref> [14] </ref> evaluates a class-based scheme that pre-computes a set of routes for different bandwidth classes. The evaluation compares the performance of several algorithms for class-based path computation to on-demand computation. These two studies do not propose any particular strategy for path storage or extraction but instead focus on performance trends.
Reference: [15] <author> Q. Ma and P. Steenkiste. </author> <title> Quality-of-service routing for traffic with performance guarantees. </title> <booktitle> In Proc. IFIP International Workshop on Quality of Service, </booktitle> <pages> pages 115-126, </pages> <address> Columbia University, New York, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: The source selects a minimum-hop route with the least cost 1 ; previous studies show that algorithms with a strong bias toward minimum-hop routes almost always outperform algorithms that do not consider the hop-count <ref> [1, 7, 18, 15] </ref>. To distinguish among paths of the same length, each link has a cost in the set f1=C; 2=C; : : :; C=Cg. <p> For simplicity we assume that links are bidirectional, with unit capacity in each direction. We evaluate the routing algorithms on a "well-known" core topology (an early version of the MCI Internet backbone <ref> [15, 14] </ref>) and a uniformly connected 125-node 5-ary 3-cube topology (with 5 nodes along each of 3 dimensions).
Reference: [16] <author> M. Peyravian and A. D. Kshemkalyani. </author> <title> Network path caching: Issues, algorithms and a simulation study. </title> <journal> Computer Communications, </journal> <volume> 20 </volume> <pages> 605-614, </pages> <year> 1997. </year>
Reference-contexts: Most previous research on QoS routing has investigated on-demand policies that compute a path at connection arrival. Recent work considers precomputation or path caching schemes that attempt to amortize the overheads of route computation by reusing the paths for multiple connection requests <ref> [14, 16, 12, 10, 9] </ref>. Path precomputation introduces a trade-off between processing overheads and the quality of the routing decisions. Previous work on precomputed routes has focused on quantifying this trade-off and developing guidelines for when to recompute routes. <p> Research on path caching has focused on storing routes in a separate data structure and considering different policies for updating and replacing precomputed routes. The work in <ref> [16] </ref> introduces a policy that invalidates cache entries based on the number of link-state updates that have arrived for links in the precomputed paths.
Reference: [17] <author> PNNI Specification Working Group. </author> <title> Private Network-Network Interface Specification Version 1.0. ATM Forum, </title> <month> March </month> <year> 1996. </year> <note> Document available at ftp://ftp.atmforum.com/pub/approved-specs/af-pnni-0055.000. </note>
Reference-contexts: Our study focuses on link-state routing algorithms where the source router or switch selects a path based on connection throughput requirements and the available resources in the network. For example, the ATM Forum's PNNI standard <ref> [17] </ref> defines a routing protocol for distributing topology and load information throughout the network, and a signalling protocol for processing and forwarding connection-establishment requests from the source. Similarly, proposed QoS extensions to the OSPF protocol include an "explicit routing" mechanism for source-directed IP routing [23, 9].
Reference: [18] <author> C. Pornavalai, G. Chakraborty, and N. Shiratori. </author> <title> QoS based routing in integrated services packet networks. </title> <booktitle> In Proceedings of IEEE International Conference on Network Protocols, </booktitle> <address> Atlanta, GA, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: The source selects a minimum-hop route with the least cost 1 ; previous studies show that algorithms with a strong bias toward minimum-hop routes almost always outperform algorithms that do not consider the hop-count <ref> [1, 7, 18, 15] </ref>. To distinguish among paths of the same length, each link has a cost in the set f1=C; 2=C; : : :; C=Cg.
Reference: [19] <author> A. Shaikh, J. Rexford, and K. Shin. </author> <title> Dynamics of quality-of-service routing with inaccurate link-state information. </title> <type> Technical Report CSE-TR-350-97, </type> <institution> Computer Science and Engineering Division, University of Michigan, </institution> <address> Ann Arbor, MI, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: However, distributing link load information and computing routes for new connections can consume considerable bandwidth, memory, and processing resources <ref> [19, 2] </ref>. Controlling these overheads in large backbone networks introduces a trade-off between performance and complexity. In this paper, we present an efficient path-selection scheme that precom-putes routes, while still capitalizing on the most recent network load information available at connection arrival. <p> This approach offers a much cheaper way to compute near equal-cost paths without resorting to a k-shortest computation. Although fine-grain link costs (larger values of C) usually result in lower blocking probabilities, a moderately coarse link-cost function does not significantly degrade performance, particularly if link-state information is stale <ref> [19] </ref>. When link-state information is somewhat out-of-date, the benefit of a fine-grain link cost function is greatly diminished. <p> For the experiments in this paper, a link with reserved capacity u has cost c = (du 2 (C 1)e + 1)=C; our experiments with link-cost functions show that an exponent of 2 biases away from routes with heavily-loaded links, without being too sensitive to small changes in link-state information <ref> [19] </ref>. For simplicity we assume that links are bidirectional, with unit capacity in each direction. <p> Also, smaller bandwidths result in very low blocking probabilities, making it very difficult to gain sufficient confidence on the simulation results in a reasonable time. Our earlier work in <ref> [19] </ref> considers a wider range of bandwidth requests in the context of QoS routing with inaccurate information.
Reference: [20] <author> Z. Whang and J. Crowcroft. </author> <title> Quality-of-service routing for supporting multimedia applications. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 14(7) </volume> <pages> 1228-1234, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Quality-of-service routing has the potential to optimize the usage of net work resources, and increase the likelihood of accepting new connections, by selecting paths based on existing network load and connection traffic parameters <ref> [13, 20, 6] </ref>. However, distributing link load information and computing routes for new connections can consume considerable bandwidth, memory, and processing resources [19, 2]. Controlling these overheads in large backbone networks introduces a trade-off between performance and complexity.
Reference: [21] <author> J. Y. Yen. </author> <title> Finding the k shortest loopless paths in a network. </title> <journal> Management Science, </journal> <volume> 17(11) </volume> <pages> 712-716, </pages> <month> July </month> <year> 1971. </year>
Reference-contexts: However, these approaches introduce considerable computational complexity. For example, computing the k shortest paths for a single destination in a directed graph has complexity as high as O (kN 3 ) <ref> [21, 11] </ref>. In addition, the k shortest paths (or paths within * of optimal) to one node may not be part of the best routes to other destinations; hence, it is usually not possible to store these multiple routes in a compact, shortest-path graph representation.
Reference: [22] <author> E. W. Zegura, K. L. Calvert, and S. Bhattacharjee. </author> <title> How to model an internetwork. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 594-602, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: In this context, we focus on topologies with relatively high connectivity, an increasingly common feature of emerging core backbone networks <ref> [22, 8] </ref>, and on multimedia traffic that requires throughput guarantees. Each switch knows the underlying topology and has (possibly out-of-date) information about the unreserved bandwidth on each link.
Reference: [23] <author> Z. Zhang, C. Sanchez, B. Salkewicz, and E. S. Craw-ley. </author> <title> Quality of service extensions to OSPF or quality of service path first routing (QOSPF). Internet Draft (draft-zhang-qos-ospf-01.txt), </title> <booktitle> work in progress, </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: Similarly, proposed QoS extensions to the OSPF protocol include an "explicit routing" mechanism for source-directed IP routing <ref> [23, 9] </ref>. Each switch maintains its own view of the available link resources, distributes link-state information to other switches, and selects routes for new connections.
References-found: 23

