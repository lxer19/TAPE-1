URL: http://www2.cs.cornell.edu/zeno/projects/vmorph/mm97/VMorph-MM97.ps.gz
Refering-URL: http://www2.cs.cornell.edu/zeno/Papers/
Root-URL: http://www.cs.brown.edu/
Title: Motion and Feature-Based Video Metamorphosis  
Author: Robert Szewczyk, Andras Ferencz, Henry Andrews, Brian C. Smith* 
Keyword: Image metamorphosis, video morphing, dense motion analysis  
Affiliation: Department of Computer Science Cornell University  
Abstract: We present a new technique for morphing two video sequences. Our approach extends still image metamorphosis techniques to video by performing motion tracking on the objects. Besides reducing the amount of user input required to morph two sequences by an order of magnitude, the additional motion information helps us to segment the image into foreground and background parts. By morphing these parts independently and overlaying the results, output quality is improved. We compare our approach to conventional motion image morphing techniques in terms of the quality of the output image and the human input required. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Beier, S. Neely. </author> <title> Feature-Based Image Metamorphosis. </title> <booktitle> In SIGGRAPH 92 Conference Proceedings (1992), </booktitle> <publisher> ACM Press, </publisher> <pages> pp. 35-42. </pages>
Reference-contexts: Even with such careful camera work and editing, significant human effort was necessary to achieve smooth transitions. In this paper, we show how to use techniques from computer vision to reduce this effort. 1.1. Conventional techniques Beier and Neely <ref> [1] </ref> developed the algorithm used in Black or White. We review their algorithm in section 2. Their approach is primarily designed for still image morphing and requires the user to input a number of feature lines that define the correspondence between source and destination images. <p> That is, the foreground image is separated from the background image in each video frame. The parts are morphed independently, and the results combined using matting techniques [7] to produce the output image. Beier and Neely used a painting program and segmented the video by hand <ref> [1] </ref>. All together, the current process of creating high quality morphed video is labor intensive. Beier and Neely reported that a typical morphed sequence at Pacific Data Images requires about 3 weeks of animator design time, 75% of which is spent creating and tweaking the feature-line set [1]. 1.2. <p> video by hand <ref> [1] </ref>. All together, the current process of creating high quality morphed video is labor intensive. Beier and Neely reported that a typical morphed sequence at Pacific Data Images requires about 3 weeks of animator design time, 75% of which is spent creating and tweaking the feature-line set [1]. 1.2. Our approach Our goal is to reduce the amount of user input required for video morphing, while improving the quality of the output. In this paper, we show how to use computer vision techniques to accomplish both objectives. <p> We then composite the results to produce the output image. We sketch the major features of our segmentation algorithm in section 3. A full description of the segmentation algorithm is available elsewhere [2]. 2. The Beier and Neely algorithm The Beier and Neely morphing algorithm <ref> [1] </ref> is primarily concerned with morphing still images. Still image morphing requires user input to position line segments over corresponding features in the source and destination images. It outputs a sequence of frames depicting a smooth transition from the source into the destination image.
Reference: 2. <author> A. Ferencz, T. Janosi. RubberSheets: </author> <title> Energy Minimizing Patches, </title> <type> unpublished manuscript 3 </type>
Reference-contexts: We then composite the results to produce the output image. We sketch the major features of our segmentation algorithm in section 3. A full description of the segmentation algorithm is available elsewhere <ref> [2] </ref>. 2. The Beier and Neely algorithm The Beier and Neely morphing algorithm [1] is primarily concerned with morphing still images. Still image morphing requires user input to position line segments over corresponding features in the source and destination images. <p> Second, we assume that the user has identified the initial foreground-background segmentation on a key-frame of the sequence. This is necessary, as some parts of the foreground may be stationary throughout the sequence. We use a segmentation algorithm based on RubberSheets <ref> [2] </ref>. While this method is not robust for complex scenes, it works well given the assumptions above, and has the advantage of often tracking the boundaries of the foreground object exactly. A RubberSheet is a two-dimensional patch that represents the region of the image occupied by the foreground.
Reference: 3. <author> D. P. Huttenlocher, J. J. Noh, and W. J. Rucklidge. </author> <title> Tracking non-rigid objects in complex scenes. </title> <booktitle> In Proceedings of 3 rd International Conference on Computer Vision (1993), </booktitle> <pages> pp. 93-101. </pages>
Reference: 4. <author> K. Jack. Video Demystified. Hightext Pubs, </author> <year> 1996. </year>
Reference-contexts: Morphing adjacent frames of that sequence together can produce these missing frames. This observation also suggests that this technique could be used for video frame rate conversion, similar to 3:2 pull-down <ref> [4] </ref> but without interlacing artifacts. It should be noted that both the morphing and the segmentation algorithm could be replaced with other variants. Since our algorithm depends on the underlying image morpher, almost any improvements to still morphing techniques will benefit the quality of the images.
Reference: 5. <author> S. Lee, K. Chwa, S. Shin, G. Wolberg. </author> <title> Image Metamorphosis Using Snakes and FreeForm Deformations. </title> <booktitle> In SIGGRAPH 95 Conference Proceeding (1995), </booktitle> <publisher> ACM Press, </publisher> <pages> pp. 439-448. </pages>
Reference-contexts: Using our system we were able to produce 1- to 2-second-long sequences of video morphing using feature lines from a single key frame. Since the original feature-based morphing algorithm, some research has addressed the problem of reducing amount of user input in morphing. Lee et al. <ref> [5] </ref> describe a technique for automating precise feature line placement by using energy minimizing contours (snakes). They assume that the feature lines are placed near image features (intensity edges). The animator is required to place only approximate feature lines.
Reference: 6. <institution> Pacific Data Images. Pacific Data Images - Black or White, </institution> <month> May 22, </month> <year> 1997 </year> . 
Reference-contexts: 1. Introduction Video morphing, the process of creating a smooth, fluid transition between two objects in an image sequence, is a useful technique in cinematography. This technique was used extensively in the creation of the Michael Jackson video Black or White <ref> [6] </ref>, where video clips of the faces of 13 people singing were morphed from one person to the next. While the transitions looked realistic, several factors made them reasonably easy to create. Animators at Pacific Data Images used a plain, featureless background that was consistent among the sequences.
Reference: 7. <author> T. Porter, T. Duff. </author> <title> Compositing Digital Images. </title> <booktitle> Computer Graphics 18, 3 (1984), </booktitle> <pages> pp. </pages> <address> 253- 258 </address>
Reference-contexts: In addition to specifying the feature set, image segmentation is often used to create visually pleasing morphs. That is, the foreground image is separated from the background image in each video frame. The parts are morphed independently, and the results combined using matting techniques <ref> [7] </ref> to produce the output image. Beier and Neely used a painting program and segmented the video by hand [1]. All together, the current process of creating high quality morphed video is labor intensive.
Reference: 8. <author> S.M. Smith. </author> <title> Feature Based Image Sequence Understanding. </title> <type> Ph.D. thesis, </type> <institution> Robotics Research Group, Department of Engineering Science, Oxford University, </institution> <year> 1992. </year>
Reference-contexts: While image segmentation is difficult (if not impossible) to perform on static images, segmenting an image sequence is possible <ref> [8, 9] </ref>. Our motion segmentation algorithm, given an image segmentation for frame I t , automatically segments the next frame (I t+1 ) by tracking the motion of the segments in I t . The segmentation for one of the frames has to be provided by the user. <p> In this section, we describe our approach to automatic image segmentation. 4.1. Segmentation algorithm Although segmenting a static image is difficult, if not impossible, segmenting an image sequence is tractable because sequences provide motion information. Previous work has addressed foreground-background segmentation of image sequences. Smith <ref> [8, 9] </ref> provides an overview of current techniques. Available algorithms have proven effective for relatively simple scenes, such as those typically used in video morphing. We make two assumptions about the sequences. First, we assume that the background is static throughout the sequence.
Reference: 9. <author> S.M. Smith. ASSET-2: </author> <title> Real-time motion segmentation and shape tracking. </title> <booktitle> In Proceedings of 5 th International Conference on Computer Vision (1995), </booktitle> <pages> pp. 237244. </pages>
Reference-contexts: While image segmentation is difficult (if not impossible) to perform on static images, segmenting an image sequence is possible <ref> [8, 9] </ref>. Our motion segmentation algorithm, given an image segmentation for frame I t , automatically segments the next frame (I t+1 ) by tracking the motion of the segments in I t . The segmentation for one of the frames has to be provided by the user. <p> In this section, we describe our approach to automatic image segmentation. 4.1. Segmentation algorithm Although segmenting a static image is difficult, if not impossible, segmenting an image sequence is tractable because sequences provide motion information. Previous work has addressed foreground-background segmentation of image sequences. Smith <ref> [8, 9] </ref> provides an overview of current techniques. Available algorithms have proven effective for relatively simple scenes, such as those typically used in video morphing. We make two assumptions about the sequences. First, we assume that the background is static throughout the sequence. <p> This restriction can be relaxed by finding the mode of all motion vectors from one frame to the next, and translating the images to align them. For more complicated scenes, one could attempt to fit an affine transformation to the frames in order to align them <ref> [9] </ref>. Second, we assume that the user has identified the initial foreground-background segmentation on a key-frame of the sequence. This is necessary, as some parts of the foreground may be stationary throughout the sequence. We use a segmentation algorithm based on RubberSheets [2].
Reference: 10. <author> L. Theodosio, W. Bender. </author> <title> Salient Video Stills: Content and Context Preserved. </title> <booktitle> In Proceedings of ACM Multimedia Conference (1993). </booktitle> <publisher> ACM Press. </publisher>
Reference: 11. <author> J. Y. A. Wang, E. Adelson. </author> <title> Representing Moving Images with Layers. </title> <journal> IEEE Transactions on Image Processing Special Issue: Image Sequence Compression, </journal> <volume> 3, 5 (1994), </volume> <pages> pp. 625-638. </pages>
Reference-contexts: A better approach is to segment the image into foreground and background objects, morph the foreground objects, combine the backgrounds, and overlay the results. This idea is somewhat similar to the representing a video sequence with layers presented in <ref> [11] </ref>. Segmenting the image can be accomplished manually (using a painting program) or automatically, using techniques from computer vision. In this section, we describe our approach to automatic image segmentation. 4.1.
Reference: 12. <author> J. Woodfill, R. Zabih. </author> <title> Non-parametric local transforms for computing visual correspondence. </title> <note> In Proceedings of 3 rd European Conference on Computer Vision (1994). http://www.cs.cornell.edu/Info/People/aferencz/RubberSheets/index.html 4 http://www.pdi.com/PDIPage/screening/special/blackorwhite.html 8 9 automatically by our algorithm manually by Beier/Neely still morphing </note>
Reference-contexts: By computing a dense motion field, morphing the sequence with a different group of feature lines will not require us to repeat the expensive motion computation, making experimentation with different placement of features relatively cheap. To compute the motion vector for each pixel, we use a census transform <ref> [12] </ref>. The n-bit census transform C (P) maps the pixel P into a set of n bits based on the intensity of nearby pixels. If the intensity of a nearby pixel is less than P, the bit is set to 1; otherwise it is set to 0.
References-found: 12

