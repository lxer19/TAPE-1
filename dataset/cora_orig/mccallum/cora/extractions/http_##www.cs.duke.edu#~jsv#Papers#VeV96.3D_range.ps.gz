URL: http://www.cs.duke.edu/~jsv/Papers/VeV96.3D_range.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node15.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: dev@cs.duke.edu  jsv@cs.duke.edu  
Title: Efficient 3-D Range Searching in External Memory overall I/O complexity extremely close to the well-known
Author: Darren Erik Vengroff Jeffrey Scott Vitter 
Note: Supported in part by the U.S. Army Research Office under grant DAAH04-93-G-0076 and by the National Science Foundation under grant DMR-9217290. Portions of this work were conducted while visiting the University of Michigan. Supported in part by the National Science Foundation under grant CCR-9522047, and by the U.S. Army Research Office under grant DAAH04-93-G-0076.  
Affiliation: fBrown, Dukeg University  Duke University  
Abstract: We present a new approach to designing data structures for the important problem of external-memory range searching in two and three dimensions. We construct data structures for answering range queries in O((log log log B N ) log B N + K=B) I/O operations, where N is the number of points in the data structure, B is the I/O block size, and K is the number of points in the answer to the query. We base our data structures on the novel concept of B-approximate boundaries, which are manifolds that partition space into regions based on the output size of queries at points within the space. Our data structures answer a longstanding open problem by providing three dimensional results comparable to those provided by [8, 10] for the two dimensional case, though completely new techniques are used. Ours is the first 3-D range search data structure that simultaneously achieves both a base-B logarithmic search overhead (namely, (log log log B N ) log B N ) and a fully blocked output component (namely, K=B). This gives us an 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. F. Cromp. </author> <title> An intellegent information fusion system for handling the archiving and querying of terabyte-sized spatial databases. </title> <type> Technical Report TR-93-99, </type> <institution> CESDIS, </institution> <year> 1993. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [1, 4, 6, 9, 11] </ref>, graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck. <p> For example, the range query [3; 5] fi <ref> [4; 1] </ref> is a (2; 1)-sided range query, since there are two sides in the x 1 dimension (namely, 3 x 1 and x 1 5) but only one side in the x 2 dimension (namely, x 2 4).
Reference: [2] <author> J. R. Driscoll, N. Sarnak, D. D. Sleator, and R. E. Tarjan. </author> <title> Making data structures persistent. </title> <journal> J. Com-put. Sys. Sci., </journal> <volume> 38 </volume> <pages> 86-124, </pages> <year> 1989. </year>
Reference-contexts: The point location problem can be thus solved in O (log B N ) I/Os with a persistent B-tree <ref> [2] </ref> occupying O (N=B) blocks. Using techniques analogous to those of Section 2.2, we can build a set of layered approximate boundaries in three dimensions and to answer (1; 1; 1)-sided queries.
Reference: [3] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> second edition, </address> <year> 1990. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) [1, 4, 6, 9, 11], graphics <ref> [3] </ref>, indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck. <p> In d-dimensional space, we define a (s 1 ; s 2 ; : : : ; s d )- sided range query, where each s i 2 f1; 2g, to be an orthogonal range query with s i sides in the x i dimension. For example, the range query <ref> [3; 5] </ref> fi [4; 1] is a (2; 1)-sided range query, since there are two sides in the x 1 dimension (namely, 3 x 1 and x 1 5) but only one side in the x 2 dimension (namely, x 2 4).
Reference: [4] <author> L. M. Haas and W. F. Cody. </author> <title> Exploiting extensible DBMS in integrated geographic information systems. </title> <editor> In O. Gunther and H.-J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases, Lecture Notes in Computer Science 525, </booktitle> <pages> pages 423-450. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [1, 4, 6, 9, 11] </ref>, graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck. <p> For example, the range query [3; 5] fi <ref> [4; 1] </ref> is a (2; 1)-sided range query, since there are two sides in the x 1 dimension (namely, 3 x 1 and x 1 5) but only one side in the x 2 dimension (namely, x 2 4).
Reference: [5] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <booktitle> In Proc. 12th ACM Symp. on Principles of Database Systems, </booktitle> <pages> pages 233-243, </pages> <year> 1993. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) [1, 4, 6, 9, 11], graphics [3], indexing in object-oriented databases <ref> [5, 7] </ref>, and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck. <p> In d-dimensional space, we define a (s 1 ; s 2 ; : : : ; s d )- sided range query, where each s i 2 f1; 2g, to be an orthogonal range query with s i sides in the x i dimension. For example, the range query <ref> [3; 5] </ref> fi [4; 1] is a (2; 1)-sided range query, since there are two sides in the x 1 dimension (namely, 3 x 1 and x 1 5) but only one side in the x 2 dimension (namely, x 2 4). <p> In the two-dimensional cases studied in <ref> [5, 8, 10] </ref>, the authors use the terms "two-sided," "three-sided," and "four-sided" range query to mean what we call (1; 1)-sided, (2; 1)- sided, and (2; 2)-sided queries, respectively.
Reference: [6] <author> R. Laurini and A. D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. A.P.I.C. Series, </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [1, 4, 6, 9, 11] </ref>, graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck.
Reference: [7] <author> S. Ramaswamy and P. C. Kanellakis. </author> <title> OODB indexing by class division. </title> <booktitle> In Proc. 1995 ACM International Conference on Management of Data, </booktitle> <year> 1995. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) [1, 4, 6, 9, 11], graphics [3], indexing in object-oriented databases <ref> [5, 7] </ref>, and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck. <p> Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) [1, 4, 6, 9, 11], graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming <ref> [7] </ref>. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck.
Reference: [8] <author> S. Ramaswamy and S. Subramanian. </author> <title> Path caching: a technique for optimal external searching. </title> <booktitle> Proc. 13th ACM Symposium on Principles of Database Systems, </booktitle> <year> 1994. </year>
Reference-contexts: In the two-dimensional cases studied in <ref> [5, 8, 10] </ref>, the authors use the terms "two-sided," "three-sided," and "four-sided" range query to mean what we call (1; 1)-sided, (2; 1)- sided, and (2; 2)-sided queries, respectively. <p> Results of this form have been achieved for two dimensions <ref> [8, 10] </ref>, but the techniques used are inherently grounded in the two dimensionality of the problem and do not generalize to three dimensions. It has thus remained an open problem whether I/O-optimal data structures for range searching in higher dimensions exist.
Reference: [9] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [1, 4, 6, 9, 11] </ref>, graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck.
Reference: [10] <author> S. Subramanian and S. Ramaswamy. </author> <title> The p-range tree: A new data structure for range searching in secondary memory. </title> <booktitle> In Proc. Sixth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA '95), </booktitle> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: In the two-dimensional cases studied in <ref> [5, 8, 10] </ref>, the authors use the terms "two-sided," "three-sided," and "four-sided" range query to mean what we call (1; 1)-sided, (2; 1)- sided, and (2; 2)-sided queries, respectively. <p> Results of this form have been achieved for two dimensions <ref> [8, 10] </ref>, but the techniques used are inherently grounded in the two dimensionality of the problem and do not generalize to three dimensions. It has thus remained an open problem whether I/O-optimal data structures for range searching in higher dimensions exist. <p> The space used is O ( N B log N B ) blocks. 3 Closed Queries Up to this point, we have only considered queries that are bounded on one side in each dimension. We now show that with additional space, using techniques of <ref> [10] </ref>, we can handle queries that bounded on both sides in one or more dimensions without additional asymptotic complexity. The data structure we use for closed queries is called a segmented layer tree because it resembles a segment tree.
Reference: [11] <author> M. J. van Kreveld. </author> <title> Geographic information systems. </title> <type> Technical Report INF/DOC-95-01, </type> <institution> Utrecht University, </institution> <year> 1995. </year>
Reference-contexts: The output of the query is the set of points in the data structure that are contained in . Range searching is a fundamental primitive in several large-scale applications, including spatial databases and geographic information systems (GIS) <ref> [1, 4, 6, 9, 11] </ref>, graphics [3], indexing in object-oriented databases [5, 7], and constraint logic programming [7]. When the data are too large to fit in main memory and must reside on disk, the Input/Output (I/O) communication can become a very severe bottleneck.
References-found: 11

