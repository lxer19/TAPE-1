URL: ftp://ftp.isi.edu/pub/cengiz/publications/MaRS:man:Users.ps.gz
Refering-URL: http://www.isi.edu/~cengiz/publications/
Root-URL: http://www.isi.edu
Title: MaRS (Maryland Routing Simulator) Version 1.0 User's Manual  
Author: Cengiz Alaettinoglu, Klaudia Dussa-Zieger, Ibrahim Matta A. Udaya Shankar 
Keyword: Categories and Subject Descriptors: C.4 [Performance of Systems]: measurement techniques; modeling techniques; performance attributes; C.2.2 [Computer-Communication Networks]: Network Protocols|protocol architecture; I.6.3 [Simulation and Modeling]: Applications.  
Note: 1991  
Address: College Park, MD 20742  
Affiliation: Systems Design and Analysis Group Department of Computer Science and Institute for Advanced Computer Studies University of Maryland  
Pubnum: UMIACS-TR-91-80 CS-TR-2687  
Date: June 1,  
Abstract: fl This work is supported in part by RADC and DARPA under contract F30602-90-C-0010 to UMIACS at the University of Maryland. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency, RADC, or the U.S. Government. Computer facilities were provided in part by NSF grant CCR-8811954. 
Abstract-found: 1
Intro-found: 1
Reference: [Alaettinoglu et al., 1990] <author> C. Alaettinoglu, K. Dussa, A. U. Shankar, and J. Bolot. </author> <title> Routing testbed: initial design. </title> <type> Technical Report UMIACS-TR-90-71, </type> <institution> CS-TR-2475, Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> May </month> <year> 1990. </year>
Reference: [Alaettinoglu et al., 1991] <author> C. Alaettinoglu, K. Dussa-Zieger, and I. Matta. </author> <title> Mars programmer's manual. </title> <institution> Department of Computer Science, University of Maryland, College Park, MD 20742. </institution> <note> In preparation, expected June 1991. </note>
Reference-contexts: All the components mentioned above are implemented in MaRS Version 1.0. If these components are inadequate for some purpose, the user can define new components, e.g. a new workload component or a new routing component. Detailed information about how to program new components can be found in <ref> [Alaettinoglu et al., 1991] </ref>. Normally, the scheduling of events involves a random number generator. However, a special class of events, referred to as record type events, can be scheduled using either a random number generator or a trace file. <p> It contains two queues of packets, one for each direction. A packet in a queue can be viewed as 2 In the current version, the record type events consist of failure and repair events for nodes and links, and connection on events. See the MaRS programmer's manual for details <ref> [Alaettinoglu et al., 1991] </ref>. 6 being in transit in the link. A link can fail and be repaired according to specified parameters. <p> The user can specify an unbounded buffer space by entering -1 as the parameter's value. * Distribution of interfailure times 3 This predetermined number is currently set to 10 and can be changed. See the MaRS programmer's manual for details <ref> [Alaettinoglu et al., 1991] </ref>. 8 The interfailure time represents the time difference between starting the simulation and the occurrence of the first failure, as well as the time difference between the end of any repair time and the next failure occurrence.
Reference: [Bordier, 1990] <author> J. Bordier. </author> <note> Cabri version 3.0. </note> <institution> IMAG Laboratoire de Structures Discretes et de Didactique, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: When MaRS is called without the X Window System, the user has to specify a networkfile containing the network configuration and the parameter values for all components. Currently, there is no software support for automatically converting a graph, generated by a network generator such as Cabri <ref> [Bordier, 1990] </ref>, to a network format understood by MaRS. Section 3 explains how to install MaRS. Section 4 explains the command line options of MaRS. Section 5 describes the different types of components.
Reference: [Cheng et al., 1989] <author> C. Cheng, R. Riley, S. P. R. Kumar, and J. J. Garcia-Luna-Aceves. </author> <title> A loop-free Bellman-Ford routing protocol without bouncing effect. </title> <booktitle> In ACM SIGCOMM '89, </booktitle> <pages> pages 224-237, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In the current version, three types of routing algorithms are implemented: SPF (Shortest Path First) [McQuillan et al., 1980], SEGALL [Merlin and Segall, 1979] and ExBF <ref> [Cheng et al., 1989] </ref>. SPF is a link state routing algorithm, while SEGALL and ExBF are distance vector routing algorithms. Each algorithm uses next-hop routing. <p> Currently, only next hop routing is used. 9 In the current version, we have implemented three types of routing components, cor-responding to three routing algorithms: SPF, which is very much like the Arpanet routing algorithm [McQuillan et al., 1980]; SEGALL [Merlin and Segall, 1979, Segal, 1981]; and ExBF <ref> [Cheng et al., 1989] </ref>. SPF (Shortest Path First) is a link-state routing algorithm. In link-state algorithms, each node attempts to maintain a database describing the network topology and the link costs.
Reference: [Heybey, 1989] <author> A. Heybey. </author> <title> The network simulator. </title> <institution> Laboratory of Computer Science, Massachusetts Institute of Technology, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: This manual assumes background information about computer networks [Tanenbaum, 1988], X Window System [Jones, 1989], and UNIX [Ritchie, 1984]. Acknowledgment We gratefully acknowledge the use of some of the event handling and graphic interface routines of the MIT Network Simulator <ref> [Heybey, 1989] </ref>. Also, the user and programmer manuals of the MIT Network Simulator helped us in writing manuals for MaRS. 2 Overview MaRS considers the target system as consisting of a physical network, a routing algorithm, and a workload, as illustrated in Figure 1.
Reference: [Jain and Routhier, 1986] <author> R. Jain and S.A. Routhier. </author> <title> Packet trains measurements and a new model for computer network traffic. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> SAC-4(6):986-995, </volume> <month> September </month> <year> 1986. </year>
Reference-contexts: In the current version, the user can choose between three different types of source-sink pairs: file transfer (FTP), remote login (TELNET), and a simple workload (Simple Traffic). In FTP and TELNET, the source produces data packets according to a packet 2 train model <ref> [Jain and Routhier, 1986] </ref>. Intuitively, each train corresponds to a connection. These workload models incorporate a flow control mechanism, and an acknowledgment with retransmission mechanism using roundtrip time estimates (see section 5.5 for details). The simple workload does not use the packet-train model and has no acknowledgment or retransmission mechanism. <p> In the current version, the user can choose between three different types of source-sink pairs: file transfer (FTP), remote login (TELNET), and a simple workload (Simple Traffic). In FTP and TELNET, the source produces data packets according to a packet-train model <ref> [Jain and Routhier, 1986] </ref>. Intuitively, each train corresponds to a connection. These workload models incorporate a flow control mechanism, and an acknowledgment with retransmission mechanism using roundtrip time estimates. The simple workload does not use the packet-train model and has no acknowledgment or retransmission mechanism.
Reference: [Jones, 1989] <author> O. Jones. </author> <title> Introduction to the X Window System. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: We use the term simulated time to refer to the time up to which the target system has been simulated. This manual assumes background information about computer networks [Tanenbaum, 1988], X Window System <ref> [Jones, 1989] </ref>, and UNIX [Ritchie, 1984]. Acknowledgment We gratefully acknowledge the use of some of the event handling and graphic interface routines of the MIT Network Simulator [Heybey, 1989].
Reference: [Khanna and Zinky, 1989] <author> A. Khanna and J. Zinky. </author> <title> A revised ARPANET routing metric. </title> <booktitle> In ACM SIGCOMM '89, </booktitle> <pages> pages 45-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: the last link-cost update period. * Delay Represents the average delay suffered by a packet on the outgoing link queueing and in transmission (including the processing time at the node and the propagation delay of the link), over all packets transmitted in the last link-cost update period. * Hop-normalized delay <ref> [Khanna and Zinky, 1989] </ref> A utilization calculated as follows. The average queueing delay per packet and the average transmission delay per packet are measured over the last link-cost update period. The utilization is calculated from these delays, assuming an M=M=1 queueing model. <p> The utilization is calculated from these delays, assuming an M=M=1 queueing model. The following transformation is applied to the raw cost (except in the case of hop-count), in order to reduce the degree of oscillations <ref> [Khanna and Zinky, 1989] </ref>: &lt; calculate and exponentially average raw cost (i.e. utilization, delay, or hop-normalized delay) &gt;; N ormalizedRawCost := max (min (AverageRawCost fi Slope + Of f set; M axCost); M inCost); if jN ormalizedRawCost Costj &lt; M ovementLimit then Cost := N ormalizedRawCost; else Cost := Cost +
Reference: [McQuillan et al., 1980] <author> J. M. McQuillan, I. Richer, and E. C. Rosen. </author> <title> The new routing algorithm for the ARPANET. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-28(5):711-719, </volume> <month> May </month> <year> 1980. </year>
Reference-contexts: The routing component contains the data structure representing the routing information (e.g. routing table) and the functions to update these data structures and propagate their information. In the current version, three types of routing algorithms are implemented: SPF (Shortest Path First) <ref> [McQuillan et al., 1980] </ref>, SEGALL [Merlin and Segall, 1979] and ExBF [Cheng et al., 1989]. SPF is a link state routing algorithm, while SEGALL and ExBF are distance vector routing algorithms. Each algorithm uses next-hop routing. <p> Currently, only next hop routing is used. 9 In the current version, we have implemented three types of routing components, cor-responding to three routing algorithms: SPF, which is very much like the Arpanet routing algorithm <ref> [McQuillan et al., 1980] </ref>; SEGALL [Merlin and Segall, 1979, Segal, 1981]; and ExBF [Cheng et al., 1989]. SPF (Shortest Path First) is a link-state routing algorithm. In link-state algorithms, each node attempts to maintain a database describing the network topology and the link costs.
Reference: [Merlin and Segall, 1979] <author> P. M. Merlin and A. Segall. </author> <title> A failsafe distributed routing protocol. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-27(9):1280-1287, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: The routing component contains the data structure representing the routing information (e.g. routing table) and the functions to update these data structures and propagate their information. In the current version, three types of routing algorithms are implemented: SPF (Shortest Path First) [McQuillan et al., 1980], SEGALL <ref> [Merlin and Segall, 1979] </ref> and ExBF [Cheng et al., 1989]. SPF is a link state routing algorithm, while SEGALL and ExBF are distance vector routing algorithms. Each algorithm uses next-hop routing. <p> Currently, only next hop routing is used. 9 In the current version, we have implemented three types of routing components, cor-responding to three routing algorithms: SPF, which is very much like the Arpanet routing algorithm [McQuillan et al., 1980]; SEGALL <ref> [Merlin and Segall, 1979, Segal, 1981] </ref>; and ExBF [Cheng et al., 1989]. SPF (Shortest Path First) is a link-state routing algorithm. In link-state algorithms, each node attempts to maintain a database describing the network topology and the link costs.
Reference: [Ritchie, 1984] <author> D.M. Ritchie. </author> <title> The evolution of the unix time-sharing system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 1595-1605, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: We use the term simulated time to refer to the time up to which the target system has been simulated. This manual assumes background information about computer networks [Tanenbaum, 1988], X Window System [Jones, 1989], and UNIX <ref> [Ritchie, 1984] </ref>. Acknowledgment We gratefully acknowledge the use of some of the event handling and graphic interface routines of the MIT Network Simulator [Heybey, 1989].
Reference: [Segal, 1981] <author> A. Segal. </author> <title> Advances in verifiable fail-safe routing procedures. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-29(4):491-497, </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: Currently, only next hop routing is used. 9 In the current version, we have implemented three types of routing components, cor-responding to three routing algorithms: SPF, which is very much like the Arpanet routing algorithm [McQuillan et al., 1980]; SEGALL <ref> [Merlin and Segall, 1979, Segal, 1981] </ref>; and ExBF [Cheng et al., 1989]. SPF (Shortest Path First) is a link-state routing algorithm. In link-state algorithms, each node attempts to maintain a database describing the network topology and the link costs.
Reference: [Tanenbaum, 1988] <author> A. S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year> <month> 34 </month>
Reference-contexts: Associated with each event is a routine that specifies how the state variables are updated when the event occurs. We use the term simulated time to refer to the time up to which the target system has been simulated. This manual assumes background information about computer networks <ref> [Tanenbaum, 1988] </ref>, X Window System [Jones, 1989], and UNIX [Ritchie, 1984]. Acknowledgment We gratefully acknowledge the use of some of the event handling and graphic interface routines of the MIT Network Simulator [Heybey, 1989].
References-found: 13

