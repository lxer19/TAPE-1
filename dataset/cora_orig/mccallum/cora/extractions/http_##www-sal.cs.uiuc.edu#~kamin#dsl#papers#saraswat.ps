URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/papers/saraswat.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/index.html
Root-URL: http://www.cs.uiuc.edu
Title: cc A Generic Framework for Domain Specific Languages (Extended Abstract)  
Author: Markus P J Fromherz Vineet Gupta Vijay Saraswat 
Abstract: cc programming is a general framework for constructing a wide variety of domain-specific languages. In this paper we show how such languages can be easily constructed using cc, and why cc is particularly suitable for the construction of such languages.
Abstract-found: 1
Intro-found: 1
Reference: [Ber93] <author> G. Berry. </author> <booktitle> Preemption in concurrent systems. In Proc. of FSTTCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> LNCS 781. </note>
Reference-contexts: Second we discuss how cc ideas have been extended into the specific domain of timed and hybrid systems via the introduction of new semantic structure (and combinators exploiting this structure). In addition we show how an expressive (and independently developed) language Esterel <ref> [Ber93] </ref> developed specifically for this domain can in fact be directly translated into timed cc. <p> The combination of non-monotonicity and real-time allows us to define all the combinators defined in Esterel, along with several others. The kernel syntax of the pure Esterel language <ref> [Ber93] </ref> is given in Table 2. 5 The translation to Timed Default cc is as follows (Table 3). We first define a Timed Default cc termination process T (P; d) | this takes an Esterel process P as argument, and produces a signal d when the processes is completed.
Reference: [ESYAE94] <author> C. Elliott, G. Schechter, R. Young, and S. Abi-Ezzi. Tbag: </author> <title> A high level framework for interactive, animated 3d graphics application. </title> <booktitle> In Proceedings of the ACM SIGGRAPH conference, </booktitle> <year> 1994. </year>
Reference-contexts: We have used this language to model several physical systems, including parts of the paper-path of a photocopier [GJSB95, GSS95]. We further plan to explore the use of Hybrid cc in graphics animation, to get a language similar in functionality to TBag <ref> [ESYAE94] </ref>.
Reference: [FS95] <author> M. P.J. Fromherz and V. `Saraswat. </author> <title> Model-based computing: Using concurrent constraint programming for modeling and model compilation. </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Principles and Practice of Constraint Programming - CP'95, </booktitle> <pages> pages 629-635. </pages> <publisher> Springer-Verlag, LNCS 97, </publisher> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: This can lead to systems of considerable flexibility and richness for simulation, control, diagnosis and testing <ref> [FS95] </ref>. Must computational frameworks for the representation of such domain-specific knowledge be developed from scratch for each domain? With its analysis of models, formal languages, representation and denotation it seems natural to look towards logic (specifically, first-order logic) as providing a generic conceptual framework for developing such domain-specific theories. <p> In particular, CDL has been applied for the configuration of scheduling software in reprographic machines (printers, copiers, etc.), where it allows engineers to describe a machine's capabilities, together with the constraints that have to be satisfied when executing them <ref> [FS95] </ref>. A sheet inverter, for example, has two capabilities: to invert a sheet of paper, or to pass it through unchanged. Typical constraints are input/output constraints and timing constraints. An inverter may impose input/output constraints on, say, the size of a sheet, and change the sheet orientation on inversion.

Reference: [GJSB95] <author> V. Gupta, R. Jagadeesan, V. Saraswat, and D. Bobrow. </author> <title> Programming in hybrid con-straint languages. </title> <editor> In Antsaklis, Kohn, Nerode, and Sastry, editors, </editor> <booktitle> Hybrid Systems II, volume 999 of Lecture notes in computer science. </booktitle> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: At the end of the interval we again execute a cc program, and then one in the following open interval and so on. We have used this language to model several physical systems, including parts of the paper-path of a photocopier <ref> [GJSB95, GSS95] </ref>. We further plan to explore the use of Hybrid cc in graphics animation, to get a language similar in functionality to TBag [ESYAE94].
Reference: [GSS95] <author> V. Gupta, V. Saraswat, and P. Struss. </author> <title> A model of a photocopier paper path. </title> <booktitle> In Proceedings of the 2nd IJCAI Workshop on Engineering Problems for Qualitative Reasoning, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: At the end of the interval we again execute a cc program, and then one in the following open interval and so on. We have used this language to model several physical systems, including parts of the paper-path of a photocopier <ref> [GJSB95, GSS95] </ref>. We further plan to explore the use of Hybrid cc in graphics animation, to get a language similar in functionality to TBag [ESYAE94].
Reference: [HSD92] <author> P. Van Hentenryck, V. Saraswat, and Y. Deville. </author> <title> Constraint processing in cc(fd). </title> <type> Technical report, </type> <institution> Computer Science Department, Brown University, </institution> <year> 1992. </year>
Reference: [JL87] <author> J. Jaffar and J.-L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the Symposium on Principles of Programming Languages, </booktitle> <pages> pages 629-635. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference-contexts: Operating above this level is the modeling language which allows the user to specify more information about which constraints should be generated, how they should be combined and processed etc. while exploiting logic based control constructs. The two primary frameworks exploiting these ideas are constraint logic programming <ref> [JL87] </ref> and concurrent constraint programming (CCP), as operationalized in the cc family of languages [Sar93, SR90, SRP91]. (The latter extends the former by also exploiting the operational interpretation of intuitionistic implication as synchronization, as discussed in the next section.) These languages interact with the first level purely via the basic constraint
Reference: [KF97] <author> R. Kapadia and M. P.J. Fromherz. </author> <title> Design optimization with uncertain application knowledge. </title> <note> Submitted to IEA-AIE'97. Also published in the Proc. of the AID'96 Workshop on Logic-based Approaches to AI in Design. </note> <year> 1997. </year>
Reference-contexts: The timing constraints are then solved in the context of constraints for other outputs produced concurrently in order to generate a correct schedule. Models for scheduling can be extended easily to models for design optimization by adding design constraints and a cost model (cf. <ref> [KF97] </ref>), which requires only minor changes to the CDL compiler and none in the generic tools.
Reference: [Sar92] <author> V. Saraswat. </author> <title> The Category of Constraint Systems is Cartesian-closed. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <address> Santa Cruz, </address> <year> 1992. </year>
Reference-contexts: Thus tokens can combine additively, without any prejudice about their source, to produce other tokens. A set of tokens, together with an entailment relation is called a constraint system <ref> [Sar92] </ref>. Examples of such systems are the system Herbrand (underlying logic programming), FD [HSD92](finite domains), and Gentzen [SJG94]. Example 2.1 The Herbrand constraint system. Let L be a first-order language L with equality. The tokens of the constraint system are the atomic propositions.
Reference: [Sar93] <author> V. Saraswat. </author> <title> Concurrent constraint programming. Doctoral Dissertation Award and Logic Programming Series. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The two primary frameworks exploiting these ideas are constraint logic programming [JL87] and concurrent constraint programming (CCP), as operationalized in the cc family of languages <ref> [Sar93, SR90, SRP91] </ref>. (The latter extends the former by also exploiting the operational interpretation of intuitionistic implication as synchronization, as discussed in the next section.) These languages interact with the first level purely via the basic constraint operations.
Reference: [SJG] <author> V. Saraswat, R. Jagadeesan, and V. Gupta. </author> <title> Timed Default Concurrent Constraint Programming. Journal of Symbolic Computation. To appear. </title> <booktitle> Extended abstract appeared in the Proceedings of the 22nd ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Francisco, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: In the past three years, we have extended it to the real-time and hybrid computing domain <ref> [SJG, GJS] </ref> as Timed Default cc and Hybrid cc. Extending cc gives these languages the same advantages that cc enjoys | parametricity over constraint systems, declarative behavior, compositionality, reasoning tools etc. Our first extension of cc was to the real-time domain.
Reference: [SJG94] <author> V. Saraswat, R. Jagadeesan, and V. Gupta. </author> <title> Programming in timed concurrent constraint languages. </title> <editor> In B.Mayoh, E.Tougu, and J.Penjam, editors, </editor> <booktitle> Constraint Programming, volume 131 of NATO Advanced Science Institute Series F: Computer and System Sciences, </booktitle> <pages> pages 367-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Thus tokens can combine additively, without any prejudice about their source, to produce other tokens. A set of tokens, together with an entailment relation is called a constraint system [Sar92]. Examples of such systems are the system Herbrand (underlying logic programming), FD [HSD92](finite domains), and Gentzen <ref> [SJG94] </ref>. Example 2.1 The Herbrand constraint system. Let L be a first-order language L with equality. The tokens of the constraint system are the atomic propositions. Entailment is specified by Clark's Equality Theory, which include the usual entailment relations that one expects from equality.
Reference: [SR90] <author> V. Saraswat and M. Rinard. </author> <title> Concurrent constraint programming. </title> <booktitle> In Proceedings of Seventeenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> San Fran-sisco, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: The two primary frameworks exploiting these ideas are constraint logic programming [JL87] and concurrent constraint programming (CCP), as operationalized in the cc family of languages <ref> [Sar93, SR90, SRP91] </ref>. (The latter extends the former by also exploiting the operational interpretation of intuitionistic implication as synchronization, as discussed in the next section.) These languages interact with the first level purely via the basic constraint operations.
Reference: [SRP91] <author> V. Saraswat, M. Rinard, and P. Panangaden. </author> <title> Semantic foundations of concurrent constraint programming. </title> <booktitle> In Proceedings of Eighteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> Orlando, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The two primary frameworks exploiting these ideas are constraint logic programming [JL87] and concurrent constraint programming (CCP), as operationalized in the cc family of languages <ref> [Sar93, SR90, SRP91] </ref>. (The latter extends the former by also exploiting the operational interpretation of intuitionistic implication as synchronization, as discussed in the next section.) These languages interact with the first level purely via the basic constraint operations.
Reference: [vHS97] <author> P. van Hentenryck and V. Saraswat. </author> <title> Constraint programming. </title> <journal> Computing Surveys, 1997. </journal> <volume> forthcoming. </volume> <pages> 8 </pages>
Reference-contexts: In this paper we argue that the recently emerging framework of constraint programming <ref> [vHS97] </ref> is an appropriate generic framework for domain-specific languages. A constraint is essentially just a precisely specifiable relation among several unknowns or variables that represents some partial information about the values the variables can take.
References-found: 15

