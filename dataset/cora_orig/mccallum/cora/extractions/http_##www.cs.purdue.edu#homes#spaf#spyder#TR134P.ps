URL: http://www.cs.purdue.edu/homes/spaf/spyder/TR134P.ps
Refering-URL: http://www.cs.purdue.edu/homes/spaf/spyder.html
Root-URL: http://www.cs.purdue.edu
Title: Pilot Studies on Debugging Oracle Assistants  
Author: Eugene H. Spafford Chonchanok Viravan 
Date: April 27, 1993  
Address: West Lafayette, IN 47907-1398  
Affiliation: Software Engineering Research Center Department of Computer Sciences Purdue University  
Abstract: A debugging oracle is a decision maker during a debugging process. Three major decisions during typical debugging sessions are on the identities, the locations, and the repairs of faults. A programmer usually acts as a debugging oracle. Our research objective is to help him in his decision-making process with a debugging oracle assistant. To enhance our understanding of both the debugging oracle and the debugging oracle assistant, we studied how 14 expert programmers debug a C program with over 4300 executable lines of code including real faults of omission. Four different forms of debugging oracle assistance were tested. The outcome of the studies provides insight to programmers' needs and the forms of assistants which fulfill them. We find that information alone does not improve debugging performance. The two assistants that helped programmers make more accurate decisions on faults observed when programmers needed help and provided unsolicited and customized assistance for each programmer. This customized assistance came in the form of hints, questions, confirmation, and/or explanation. Our preliminary results are supported by research on Decision Support System (DSS) and Critic systems. The problems with debugging assistants we identified match the problems identified for DSS. The desirable features to improve DSSs match the desirable features of debugging oracle assistants. Because these features are also the characteristics of Critic systems, we have reason to believe that a desirable debugging oracle assistant is a debugging critic. 
Abstract-found: 1
Intro-found: 1
Reference: [Agr91] <author> Hiralal Agrawal. </author> <title> Towards Automatic Debugging of Computer Programs. </title> <type> PhD thesis, </type> <institution> Purdue University, West Lafayette, IN, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction Debugging, a process of locating and fixing program faults, is one of the most serious bottlenecks in software development today <ref> [Agr91] </ref>. Program faults are physical evidence of errors; errors are inappropriate actions made during software development that may ultimately cause software to fail [IEE83]. Program testing is a conventional means of recognizing the presence of faults. <p> A program slice is either static or dynamic. A static slice includes all statements that can affect the variable [Wei84]. A dynamic slice includes all statements that actually affect the variable with respect to the test case under investigation <ref> [Agr91] </ref>. If programmers look for program slices when they try to locate the faults, they would not waste time investigating irrelevant locations. Not all programmers started off identifying erroneous variables and identifying their program slices, however. Some asked questions irrelevant to the code that the erroneous variable depended on. <p> Other forms of failure may need other hints to serve the same purpose. * The dynamic slice This hint should help explain dependency between the code and the failure. It lists statements that affect the specified output variable in the given test case <ref> [Agr91] </ref>. We tag line numbers, routine names, and the file names to the slice for reference purposes. A programmer can extract from this hint: data dependency, control dependency, and statement dependency information. * The calling path This hint should help explain the functionality on the dynamic slice. <p> It contains 1,500 rules, 2,000 note cards and 300 analogs to influence, debias, and direct the Army personnel to better balanced decision papers. 25 * The role of questions as a form of debugging assistance deserves further in- vestigation. Our future work is to enhance our prototype debugger, Spyder <ref> [Agr91] </ref>, with a debugging oracle assistant to help programmers decide on fault locations based on our findings. To evaluate the quality of this assistant, we plan to conduct experiments on Spyder with more programs, more programmers, and more faults.
Reference: [BFN86] <author> H.-D. Boecker, G. Fischer, and H. Nieper. </author> <title> The Enhancement of Understanding Through Visual Representations. </title> <booktitle> In Human Factors in Computing Systems, CHI'86 Conference Proceedings, </booktitle> <pages> pages 44 - 50, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: Empirical studies in the problems users encounter in dealing with high functionality computer systems indicate that the users do not know: * what tools can help [FLS85], * when to use the tools to help [FKF + 89], * how to apply the results that the tools produce <ref> [BFN86] </ref>, * how to adapt the tools to their specific needs [Fis87], and 23 * how to improve their situation with assistance from knowledgeable agents [Ree90]. As a result, passive DSSs were underused [FM91].
Reference: [Fis87] <author> Gerhard Fischer. </author> <title> Cognitive View of Reuse and Redesign. </title> <journal> IEEE Software, </journal> <volume> 4(4):60 - 72, </volume> <month> July </month> <year> 1987. </year>
Reference-contexts: with high functionality computer systems indicate that the users do not know: * what tools can help [FLS85], * when to use the tools to help [FKF + 89], * how to apply the results that the tools produce [BFN86], * how to adapt the tools to their specific needs <ref> [Fis87] </ref>, and 23 * how to improve their situation with assistance from knowledgeable agents [Ree90]. As a result, passive DSSs were underused [FM91]. At the opposite end, the expert systems, which aim to derive the decisions autonomously, often underuse the knowledge of their users [FM91].
Reference: [FKF + 89] <author> G. Fischer, W. Kintsch, P. W. Foltz, S. M. Mannes, H. Nieper-Lemke, and C. Steven. </author> <title> Theories, Methods, and Tools for the Design of User-Centered Systems. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Colorado, Boulder, CO, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: Empirical studies in the problems users encounter in dealing with high functionality computer systems indicate that the users do not know: * what tools can help [FLS85], * when to use the tools to help <ref> [FKF + 89] </ref>, * how to apply the results that the tools produce [BFN86], * how to adapt the tools to their specific needs [Fis87], and 23 * how to improve their situation with assistance from knowledgeable agents [Ree90]. As a result, passive DSSs were underused [FM91].
Reference: [FLS85] <author> G. Fischer, A. C. Lemke, and T. Schwab. </author> <title> Knowledge-Based Help Systems. </title> <booktitle> In Human Factors in Computing Systems, CHI'85 Conference Proceedings, </booktitle> <pages> pages 161 - 167, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1985. </year> <note> ACM. </note>
Reference-contexts: Passive assistants provide a weak form of support that does not exploit the full power and potential of computer-based support. Empirical studies in the problems users encounter in dealing with high functionality computer systems indicate that the users do not know: * what tools can help <ref> [FLS85] </ref>, * when to use the tools to help [FKF + 89], * how to apply the results that the tools produce [BFN86], * how to adapt the tools to their specific needs [Fis87], and 23 * how to improve their situation with assistance from knowledgeable agents [Ree90].
Reference: [FM88] <author> Gerhard Fischer and Thomas Mastaglio. </author> <title> Computer-Based Critics. </title> <booktitle> In Proceedings of the 21th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 427 - 436, </pages> <year> 1988. </year>
Reference-contexts: Silverman characterizes such a traditional critic as passive and after-task [Sil92]. According to Fischer and Mastaglio <ref> [FM88, FM91] </ref>, a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. <p> Such critic monitors a decision making process and provides unsolicited help or criticism when appropriate. A critic's advice is easier to understand if a system treats a user with respect to his knowledge and conceptual view <ref> [FM88] </ref>. Silverman's Principle 1 states that a critic should have a library of functions that serves as error-identification triggers, and influencer, debiaser, and director strategies. The influencer strategies help prevent biases before they occur. The debiaser strategies help correct the biases or errors after they occur.
Reference: [FM91] <author> Gerhard Fischer and Thomas Mastaglio. </author> <title> A conceptual framework for knowledge-based critic systems. Decision Support Systems, </title> <address> 7:355 - 378, </address> <year> 1991. </year> <title> 4 The names are in alphabetical order, not the order of the subject numbers. </title> <type> 26 </type>
Reference-contexts: As a result, passive DSSs were underused <ref> [FM91] </ref>. At the opposite end, the expert systems, which aim to derive the decisions autonomously, often underuse the knowledge of their users [FM91]. Because they often lack the knowledge required to cover the complete problem domain, interaction with the human is inevitable. <p> As a result, passive DSSs were underused <ref> [FM91] </ref>. At the opposite end, the expert systems, which aim to derive the decisions autonomously, often underuse the knowledge of their users [FM91]. Because they often lack the knowledge required to cover the complete problem domain, interaction with the human is inevitable. Yet, the systems de-skill the human by treating him as a mere supplier of data. <p> Because they often lack the knowledge required to cover the complete problem domain, interaction with the human is inevitable. Yet, the systems de-skill the human by treating him as a mere supplier of data. Researchers in DSSs <ref> [FM91, Rag91] </ref> and our findings agree that merely providing more information would not solve these underuse problems. <p> Silverman characterizes such a traditional critic as passive and after-task [Sil92]. According to Fischer and Mastaglio <ref> [FM88, FM91] </ref>, a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. <p> According to Fischer and Mastaglio [FM88, FM91], a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. A better ADSS or a critic system, according to several researchers <ref> [Sil92, FM91, Mil88, Rag91] </ref>, should offer assistance like that of our observation-and-action feature. Such critic monitors a decision making process and provides unsolicited help or criticism when appropriate. A critic's advice is easier to understand if a system treats a user with respect to his knowledge and conceptual view [FM88].
Reference: [IEE83] <institution> IEEE Standard Glossary of Software Engineering Terminology, </institution> <year> 1983. </year> <journal> IEEE Std. </journal> <pages> 729-1983. </pages>
Reference-contexts: 1 Introduction Debugging, a process of locating and fixing program faults, is one of the most serious bottlenecks in software development today [Agr91]. Program faults are physical evidence of errors; errors are inappropriate actions made during software development that may ultimately cause software to fail <ref> [IEE83] </ref>. Program testing is a conventional means of recognizing the presence of faults. Our goal is to improve the decision-making process during debugging to reduce programmer debugging time and improve accuracy. We refer to the decision maker in a debugging process as a debugging oracle.
Reference: [JWF87] <author> M. Tawfik Jelassi, Karen Williams, and Christine S. Fidler. </author> <title> The Emerging Role of DSS: From Passive to Active. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 3 </volume> <pages> 299-307, </pages> <year> 1987. </year>
Reference-contexts: Research findings in critic systems indicated the need for similar types of assistance we found helpful. A decision support system (DSS) is a computer-based system which has the objective of enhancing the overall effectiveness (e.g., by increasing reliability, accuracy and efficiency of obtaining relevant information) of decision makers <ref> [JWF87] </ref>. Conventional DSSs act as passive partners in decision-making. They are passive because they merely place a set of useful facilities at the disposal of a decision maker and expect that the decision maker will somehow exploit these facilities effectively for decision-making. <p> To use both the human and the machine knowledge to its full potential, recent research in DSS moved toward combining the conventional DSS with components of expert systems making the assistant active <ref> [Rag91, JWF87] </ref>. Active decision support systems (ADSS) which emerged from this combination provide a cooperative problem solving environment. ADSSs provide tools to actively participate in the decision-making process, and decisions are made by fruitful collaboration between the human and the machine [Rag91].
Reference: [LH85] <author> Rense Lange and Mehdi T. Harandi. </author> <title> Human Engineering Aspects of a Program Debugging Expert System. </title> <booktitle> In The IEEE Computer Society's Ninth International Computer Software and Applications Conference, </booktitle> <address> Chicago, IL, </address> <month> October </month> <year> 1985. </year>
Reference-contexts: Critics work under the assumptions that a user is competent enough to generate a product, determine a course of action, or make a decision by himself. A traditional critic offers assistance similar to our confirmation feature. The psychological research by Lange and Harandi <ref> [LH85] </ref> suggests that expert users like to solve the problem on their own first before they consult an expert system. In response to such habit, a critic acts as a complement of an expert system.
Reference: [Mil83] <author> P. Miller. ATTENDING: </author> <title> Critiquing a Physician's Managment Plan. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 5(5):449 - 461, </volume> <year> 1983. </year>
Reference-contexts: In response to such habit, a critic acts as a complement of an expert system. Instead of trying to solve the the problem autonomously, a traditional critic, like Miller's ATTENDING <ref> [Mil83] </ref>, becomes operative only after the user has a tentative decision.
Reference: [Mil88] <author> Fatma Mili. </author> <title> Framework for a decision critic and advisor. </title> <booktitle> In Proceedings of the 21th Hawaii International Conference on System Sciences, </booktitle> <pages> pages 381 - 386, </pages> <year> 1988. </year>
Reference-contexts: According to Fischer and Mastaglio [FM88, FM91], a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. A better ADSS or a critic system, according to several researchers <ref> [Sil92, FM91, Mil88, Rag91] </ref>, should offer assistance like that of our observation-and-action feature. Such critic monitors a decision making process and provides unsolicited help or criticism when appropriate. A critic's advice is easier to understand if a system treats a user with respect to his knowledge and conceptual view [FM88].
Reference: [PS93] <author> Hsin Pan and E. H. Spafford. </author> <title> Fault Localization Methods for Software Debugging. </title> <journal> Journal of Computer and Software Engineering, </journal> <note> 1993. (to appear). </note>
Reference-contexts: In [SV92], we originally decided that a debugging oracle assistant should support two intermediate decisions within fault localization strategies (e.g., as in <ref> [Sha83, PS93] </ref>). They are the decisions on correctness of program parts or program states (e.g., data values). We proposed to find the information that helps programmers decide on correctness in the absence of a formal program specification.
Reference: [Rag91] <author> Sridhar A. Raghavan. </author> <title> JANUS A paradigm for active decision support. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 7 </volume> <pages> 379-395, </pages> <year> 1991. </year>
Reference-contexts: They are passive because they merely place a set of useful facilities at the disposal of a decision maker and expect that the decision maker will somehow exploit these facilities effectively for decision-making. They cannot take initiative they can only respond to user requests <ref> [Rag91] </ref>. Passive assistants provide a weak form of support that does not exploit the full power and potential of computer-based support. <p> Because they often lack the knowledge required to cover the complete problem domain, interaction with the human is inevitable. Yet, the systems de-skill the human by treating him as a mere supplier of data. Researchers in DSSs <ref> [FM91, Rag91] </ref> and our findings agree that merely providing more information would not solve these underuse problems. <p> To use both the human and the machine knowledge to its full potential, recent research in DSS moved toward combining the conventional DSS with components of expert systems making the assistant active <ref> [Rag91, JWF87] </ref>. Active decision support systems (ADSS) which emerged from this combination provide a cooperative problem solving environment. ADSSs provide tools to actively participate in the decision-making process, and decisions are made by fruitful collaboration between the human and the machine [Rag91]. <p> Active decision support systems (ADSS) which emerged from this combination provide a cooperative problem solving environment. ADSSs provide tools to actively participate in the decision-making process, and decisions are made by fruitful collaboration between the human and the machine <ref> [Rag91] </ref>. Like our active oracle assistant for Nu, both the user and the system can take the initiative. An ADSS can be considered a decision-making critic, as it shares the same characteristics and the same goals as the critic systems. <p> According to Fischer and Mastaglio [FM88, FM91], a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. A better ADSS or a critic system, according to several researchers <ref> [Sil92, FM91, Mil88, Rag91] </ref>, should offer assistance like that of our observation-and-action feature. Such critic monitors a decision making process and provides unsolicited help or criticism when appropriate. A critic's advice is easier to understand if a system treats a user with respect to his knowledge and conceptual view [FM88].
Reference: [Ree90] <author> B. Reeves. </author> <title> Finding and Choosing the Right Object in a Large Hardware Store An Empirical Study of Cooperative Problem Solving among Humans. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Colorado, Boulder, CO, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: tools can help [FLS85], * when to use the tools to help [FKF + 89], * how to apply the results that the tools produce [BFN86], * how to adapt the tools to their specific needs [Fis87], and 23 * how to improve their situation with assistance from knowledgeable agents <ref> [Ree90] </ref>. As a result, passive DSSs were underused [FM91]. At the opposite end, the expert systems, which aim to derive the decisions autonomously, often underuse the knowledge of their users [FM91]. Because they often lack the knowledge required to cover the complete problem domain, interaction with the human is inevitable.
Reference: [Ris92] <author> Robert S. Rist. </author> <title> Plans in program design and understanding. </title> <booktitle> In AAAI-92 Workshop Program - AI and Automated Program Understanding, </booktitle> <pages> pages 98 - 102, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Figure 3 displays this hint. The study by Soloway and Ehrlich [SE84] indicates that programmers understand the program functionality by recognizing program plans. A program plan relates the code pattern with its concept. Because a program slice is one possible form of a program plan <ref> [Ris92] </ref>, it could help programmers understand the functionality. However, it should be easier to recognize a plan from a one-page routine-view of a slice than a multiple page statement-view of a slice. * The routine-level trace This hint helps explain the execution behavior and data on a dynamic slice.
Reference: [SE84] <author> Elliot Soloway and Kate Ehrlich. </author> <title> Empirical Studies of Programming Knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(5) </volume> <pages> 595-609, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: It lists all routines in a dynamic slice (indented according to the execution sequence) with two tags: the corresponding input command and the file name for each routine. Figure 3 displays this hint. The study by Soloway and Ehrlich <ref> [SE84] </ref> indicates that programmers understand the program functionality by recognizing program plans. A program plan relates the code pattern with its concept. Because a program slice is one possible form of a program plan [Ris92], it could help programmers understand the functionality.
Reference: [Sha83] <author> E. Y. Shapiro. </author> <title> Algorithmic Program Debugging. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1983. </year>
Reference-contexts: In [SV92], we originally decided that a debugging oracle assistant should support two intermediate decisions within fault localization strategies (e.g., as in <ref> [Sha83, PS93] </ref>). They are the decisions on correctness of program parts or program states (e.g., data values). We proposed to find the information that helps programmers decide on correctness in the absence of a formal program specification.
Reference: [Sil91] <author> Barry G. Silverman. </author> <title> Criticism-Based Knowledge Acquisition for Document Generation. </title> <booktitle> In Proceeding of Conference on Innovative Applications of Artificial Intelligence, </booktitle> <address> Cambridge, MA, 1991. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: All strategies could be activated before, during, and after tasks. This is an improvement over the traditional feature that offers an after-task debiaser alone. Principle 1 is supported by the results from Silverman's experiments with over 24 one hundred participants on the largest real-world critic system, TIME 3 <ref> [Sil91] </ref>, and his recent empirical studies with over fifty participants on sample critics for statistical problems [Sil92]. In the latter one, his results are strikingly similar to ours. 1. The users can be subjected to bias without a critic.
Reference: [Sil92] <author> Barry G. Silverman. </author> <title> Building a Better Critic Recent Empirical Results. </title> <journal> IEEE Expert, </journal> <volume> 7(2):18 - 25, </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: Silverman characterizes such a traditional critic as passive and after-task <ref> [Sil92] </ref>. According to Fischer and Mastaglio [FM88, FM91], a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. <p> According to Fischer and Mastaglio [FM88, FM91], a critic should also offer a user-directed explanation feature. Because the users may not fully understand the system's comments, the users must be able to question the system for further explanation. A better ADSS or a critic system, according to several researchers <ref> [Sil92, FM91, Mil88, Rag91] </ref>, should offer assistance like that of our observation-and-action feature. Such critic monitors a decision making process and provides unsolicited help or criticism when appropriate. A critic's advice is easier to understand if a system treats a user with respect to his knowledge and conceptual view [FM88]. <p> Principle 1 is supported by the results from Silverman's experiments with over 24 one hundred participants on the largest real-world critic system, TIME 3 [Sil91], and his recent empirical studies with over fifty participants on sample critics for statistical problems <ref> [Sil92] </ref>. In the latter one, his results are strikingly similar to ours. 1. The users can be subjected to bias without a critic. Without a critic, 82% of the users (including statisticians and graduate students in statistics) failed to solve bias-prone statistical problems.
Reference: [SV92] <author> Eugene H. Spafford and Chonchanok Viravan. </author> <title> Experimental Designs: Testing a Debugging Oracle Assistant. </title> <type> Technical Report SERC-TR-120-P, </type> <institution> Software Engineering Research Center, Purdue University, West Lafayette, IN, </institution> <year> 1992. </year>
Reference-contexts: We refer to the decision maker in a debugging process as a debugging oracle. Though three major decisions in debugging are on the identity, the location, and the repair of faults, we previously placed emphasis on supporting decisions on fault locations only <ref> [SV92] </ref>. In [SV92], we originally decided that a debugging oracle assistant should support two intermediate decisions within fault localization strategies (e.g., as in [Sha83, PS93]). They are the decisions on correctness of program parts or program states (e.g., data values). <p> We refer to the decision maker in a debugging process as a debugging oracle. Though three major decisions in debugging are on the identity, the location, and the repair of faults, we previously placed emphasis on supporting decisions on fault locations only <ref> [SV92] </ref>. In [SV92], we originally decided that a debugging oracle assistant should support two intermediate decisions within fault localization strategies (e.g., as in [Sha83, PS93]). They are the decisions on correctness of program parts or program states (e.g., data values).
Reference: [Wei84] <author> Mark Weiser. </author> <title> Program Slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <month> July </month> <year> 1984. </year> <month> 27 </month>
Reference-contexts: A program slice was a good example. Had it been given at the beginning of the fault-finding phase, programmers could save debugging time. A program slice is either static or dynamic. A static slice includes all statements that can affect the variable <ref> [Wei84] </ref>. A dynamic slice includes all statements that actually affect the variable with respect to the test case under investigation [Agr91]. If programmers look for program slices when they try to locate the faults, they would not waste time investigating irrelevant locations.
References-found: 22

