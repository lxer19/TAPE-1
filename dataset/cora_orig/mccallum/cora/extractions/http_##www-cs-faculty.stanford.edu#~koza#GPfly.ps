URL: http://www-cs-faculty.stanford.edu/~koza/GPfly.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: 
Email: koza@cs.stanford.edu  forrest@evolute.com  makeane@ix.netcom.com  dandre@cs.berkeley.edu  
Phone: 9020  
Title: Evolution of a Time-Optimal Fly-To Controller Circuit using Genetic Programming  
Author: John R. Koza Forrest H Bennett III Martin A. Keane David Andre 
Web: http://www-cs faculty.stanford.edu/~koza/  
Address: 258 Gates Building  Stanford, California 94305  Stanford, California 94305  5733 West Grover Chicago, Illinois 60630  Berkeley, California  
Affiliation: Computer Science Dept.  Stanford University  Visiting Scholar Computer Science Dept. Stanford University  Martin Keane Inc.  Computer Science Division University of California  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: <author> Aaserud, O. and Nielsen, I. Ring. </author> <year> 1995. </year> <title> Trends in current analog design: A panel debate. Analog Integrated Circuits and Signal Processing. </title> <type> 7(1) 5-9. </type>
Reference: <author> Andre, David and Koza, John R. </author> <year> 1996. </year> <title> Parallel genetic programming: A scalable implementation using the transputer architecture. </title> <editor> In Angeline, P. J. and Kinnear, K. E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge: </address> <publisher> MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent processing nodes <ref> (Andre and Koza 1996) </ref>. 4 . Results The best circuit from generation 0 scores 61 hits (out of 72) and achieves a fitness of 3.005 hours and has seven transistors, one diode, and one resistor (not counting the three resistors of the embryo and those embedded in the power supplies).
Reference: <editor> Angeline, Peter J. and Kinnear, Kenneth E. Jr. (editors). </editor> <booktitle> 1996. Advances in Genetic Programming 2. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Clements, John C. </author> <year> 1990. </year> <title> Minimum-time turn trajectories to fly-to points. Optimal Control Applications and Methods. </title> <booktitle> 11. </booktitle> <pages> Pages 39-50. </pages>
Reference-contexts: Section 2 presents the fly-to problem and its mathematical solution. Section 3 presents the preparatory steps for the solution to the fly-to problem using genetic programming. Section 4 presents the results. 2 . The Fly-To Problem In the fly-to problem <ref> (Clements 1990) </ref>, the goal is to find a program for controlling the flight of an aircraft (flying at constant speed and altitude) such that the aircraft flies to an arbitrary destination point in minimal time. <p> This circuit has 10 transistors and four resistors. Its circuit-constructing program tree has 24, 11, and 54 points, respectively, in its three result-producing branches. Its ADF0 has 12 points and is called twice. In comparison, the optimal value of fitness for this problem is known <ref> (from Clements 1990) </ref> to be 1.518 hours (which is an average of about 21 time steps of about 0.001 hour each for each of the 72 fitness cases). This genetically evolved result is an electronic circuit that was created without resort to analytical or mathematical methods.
Reference: <author> Gruau, Frederic. </author> <year> 1996. </year> <title> Artificial cellular development in optimization and compilation. </title> <editor> In Sanchez, Eduardo and Tomassini, Marco (editors). </editor> <year> 1996. </year> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 1062. </volume> <publisher> Berlin: Springer-Verlag. </publisher> <pages> Pages 48 75. </pages>
Reference: <author> Holland, John H. </author> <year> 1975. </year> <booktitle> Adaptation in Natural and Artificial Systems. </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press. </publisher>
Reference-contexts: The total simulation time of 0.080 hours generously permits a trajectory equivalent to the aircraft flying twice across its world of 64 square nautical miles. 3 . Preparatory Steps We used genetic programming <ref> (an extension of the genetic algorithm described in Holland 1975) </ref> in which the population consists of computer programs of varying sizes and shapes as described in Koza 1992, 1994a, 1994b; Koza and Rice 1992; Kinnear 1994; Angeline and Kinnear 1996, and Koza, Goldberg, Fogel, and Riolo 1996).
Reference: <editor> Kinnear, Kenneth E. Jr. (editor). </editor> <booktitle> 1994. Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994a. </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994b. </year> <title> Genetic Programming II Videotape: The Next Generation. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R. </author> <year> 1994c. </year> <title> Architecture-altering operations for evolving the architecture of a multipart program in genetic programming. </title> <institution> Stanford University Computer Science Department technical report STAN-CS-TR-94-1528. </institution> <month> October 21, </month> <year> 1994. </year>
Reference-contexts: The output is interpreted by the wrapper (output interface) to be the aircraft's turn angle Q. Figure 3 shows an embryonic circuit for a two-input, one-output circuit. The number of automatically defined functions, if any, will emerge as a consequence of the evolutionary process using the architecture-altering operations <ref> (Koza 1994c) </ref>. Since the embryonic circuit has three modifiable wires, there are three writing heads and three result-producing branches (RPB0, RPB1, RPB2) in each circuit-constructing program tree. Each program in the initial population of programs has a uniform architecture with no automatically defined functions (i.e., three result-producing branches).
Reference: <author> Koza, John R., Andre, David, Bennett III, Forrest H, and Keane, Martin A. </author> <year> 1996. </year> <title> Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent processing nodes <ref> (Andre and Koza 1996) </ref>. 4 . Results The best circuit from generation 0 scores 61 hits (out of 72) and achieves a fitness of 3.005 hours and has seven transistors, one diode, and one resistor (not counting the three resistors of the embryo and those embedded in the power supplies).
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996a. </year> <title> Toward evolution of electronic animals using genetic programming. </title> <booktitle> Artificial Life V: Proceedings of the Fifth International Workshop on the Synthesis and Simulation of Living Systems. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996b. </year> <title> Four problems for which a computer program evolved by genetic programming is competitive with human performance. </title> <booktitle> Proceedings of the 1996 IEEE International Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. </publisher> <pages> Pages 110. </pages>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996c. </year> <title> Automated design of both the topology and sizing of analog electrical circuits using genetic programming. </title> <editor> In Gero, John S. and Sudweeks, Fay (editors). </editor> <booktitle> Artificial Intelligence in Design '96. </booktitle> <address> Dordrecht: </address> <publisher> Kluwer. </publisher> <pages> Pages 151-170. </pages>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1996d. </year> <title> Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming. </title> <editor> In Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, John R., Bennett III, Forrest H, Andre, David, and Keane, Martin A. </author> <year> 1997. </year> <title> Evolution using genetic programming of a low-distortion 96 Decibel operational amplifier. </title> <booktitle> Proceedings of the 1997 ACM Symposium on Applied Computing, </booktitle> <address> San Jose, California, February 28 March 2, 1997. New York: </address> <publisher> Association for Computing Machinery. </publisher> <pages> Pages 207 - 216. </pages>
Reference: <editor> Koza, John R., Goldberg, David E., Fogel, David B., and Riolo, Rick L. (editors). </editor> <booktitle> 1996. Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher>
Reference-contexts: On each generation, four boatloads of emigrants, each consisting of B = 2% (the migration rate) of the node's subpopulation (selected on the basis of fitness) were dispatched to each of the four toroidally adjacent processing nodes <ref> (Andre and Koza 1996) </ref>. 4 . Results The best circuit from generation 0 scores 61 hits (out of 72) and achieves a fitness of 3.005 hours and has seven transistors, one diode, and one resistor (not counting the three resistors of the embryo and those embedded in the power supplies).
Reference: <author> Koza, John R., and Rice, James P. </author> <year> 1992. </year> <title> G e n e t i c Programming: The Movie. </title> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Quarles, Thomas, Newton, A. R., Pederson, D. O., and Sangiovanni-Vincentelli, A. </author> <year> 1994. </year> <note> SPICE 3 Version 3F5 User's Manual. </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA. </address> <month> March </month> <year> 1994. </year> <note> Version 2 G-086 6 Pages CAMERA-READY - Submitted March 25, 1997 to GP-97 Conference </note>
Reference-contexts: For this problem, the voltage VOUT is probed at node 5. The SPICE simulator <ref> (Quarles et al. 1994) </ref> is requested to perform a nested DC sweep. The nested DC sweep provides a way to simulate the DC behavior of a circuit with two inputs.
References-found: 20

