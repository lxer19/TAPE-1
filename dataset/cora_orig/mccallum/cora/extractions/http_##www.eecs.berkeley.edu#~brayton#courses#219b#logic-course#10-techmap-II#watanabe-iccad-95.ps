URL: http://www.eecs.berkeley.edu/~brayton/courses/219b/logic-course/10-techmap-II/watanabe-iccad-95.ps
Refering-URL: http://www.eecs.berkeley.edu/~brayton/courses/219b/219b.html
Root-URL: 
Title: Logic Decomposition during Technology Mapping  
Author: Eric Lehman and Yosinori Watanabe 
Address: 77 Reed Road, Hudson, MA 01749, USA  
Affiliation: Digital Equipment Corporation  
Abstract: This paper presents a procedure which performs logic decomposition during technology mapping. A problem in technology mapping is that quality of the final implementation depends significantly on the initially provided circuit structure. This problem is critical especially for mapping with tight and complicated constraints. Conventional techniques iteratively apply technology independent transformations and technology mapping, so that the implementation obtained by technology mapping is restructured and remapped. Although some progress can be made, the effectiveness of these techniques is limited, since when a circuit is restructured, it is not clear how it is implemented eventually. The central problem is that technology independent transformations and technology mapping are applied separately. In this paper, we propose a procedure which simultaneously applies technology mapping and algebraic logic decomposition, a key technology independent operation for changing circuit structures. A set of circuit structures is compactly encoded in a single graph, and the procedure dynamically modifies the set during technology mapping by introducing new structures while deleting others based on the actual cost function used in the mapping. State-of-the-art technology mapping algorithms are naturally extended, so that the procedure finds an optimal tree implementation over all the circuit structures examined. We show that the procedure effectively explores the same solution space obtained by applying algebraic decomposition exhaustively. However, the run time is proportional to the size of the graph, which is typically logarithmic in the number of decompositions. The procedure has been implemented and used for commercial design projects. We present experimental results on benchmark examples to demonstrate its effectiveness. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Berman, J. Carter, and A. Day. </author> <title> The Fanout Problem: from theory to practice. </title> <booktitle> In Conference on Advanced Research in VLSI, </booktitle> <year> 1989. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [2] <author> R. Brayton, G. Hachtel, and A. Sangiovanni-Vincentelli. </author> <title> Multilevel Logic Synthesis. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 78(No. 2), </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: Therefore, quality of the final implementation could severely depend upon the structure initially provided to the technology mapper. The most common approach for generating the initial structure of logic expressions for technology mapping consists of two phases: technology independent transformations and subject-graph generation <ref> [2] </ref>. In the first phase, logic expressions are optimized in a technology independent manner. The result is represented by a graph, which is sometimes called a boolean network [2]. <p> approach for generating the initial structure of logic expressions for technology mapping consists of two phases: technology independent transformations and subject-graph generation <ref> [2] </ref>. In the first phase, logic expressions are optimized in a technology independent manner. The result is represented by a graph, which is sometimes called a boolean network [2]. Then in the second phase, the resulting expressions are converted into a special type of boolean network, where nodes represent particular functions such as AND or INVERTER. Such a graph is called a subject graph [11] and the functions used in a subject graph are called base functions. <p> This drawback is fatal when one needs to handle tight and complicated constraints with delay, area, and load. Conventionally, this problem has been addressed by the following two approaches <ref> [2] </ref>. One is rule-based techniques. A rule-based system, e.g. [4, 8], can combine technology independent transformations and technology mapping. However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques.
Reference: [3] <author> R. Brayton and C. McMullen. </author> <title> The Decomposition and Factorization of Boolean Expressions. </title> <booktitle> In ISCAS, </booktitle> <year> 1982. </year>
Reference-contexts: The central problem is that technology independent transformations and technology mapping do not cooperate. This is the problem addressed in this paper. Among technology independent transformations, our focus is on algebraic logic decomposition <ref> [3] </ref>, a key operation for changing circuit structures. We asked ourselves if it is possible to apply algebraic logic decomposition and technology mapping simultaneously. <p> D is the set of AND2/INV networks encoded in the resulting mapping graph. The objective in this section is to claim that D subsumes the set of AND2/INV networks obtained by an operation usually referred to as algebraic decomposition <ref> [3] </ref>. Algebraic decomposition is a process which is widely used for changing the structure of a boolean network. The result is another boolean network with the same functionality.
Reference: [4] <author> J. Darringer, W. Joyner, L. Berman, and L. Trevillyan. </author> <title> Logic Synthesis through Local Transformations. </title> <journal> IBM J. Res. Develop., </journal> <pages> pages 272-280, </pages> <month> July </month> <year> 1981. </year> <month> 19 </month>
Reference-contexts: This drawback is fatal when one needs to handle tight and complicated constraints with delay, area, and load. Conventionally, this problem has been addressed by the following two approaches [2]. One is rule-based techniques. A rule-based system, e.g. <ref> [4, 8] </ref>, can combine technology independent transformations and technology mapping. However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases.
Reference: [5] <author> E. Detjens, G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang. </author> <title> Technology Mapping in MIS. </title> <booktitle> In ICCAD, </booktitle> <year> 1987. </year>
Reference-contexts: Each such mapping has a cost. This cost may measure the total area of the tree of gates, the arrival time at the root of the tree, etc. Generally, any notion of cost used in tree-mapping <ref> [5, 20] </ref> is acceptable 2 . However, to guarantee that graph-mapping terminates, the library and cost notion must be designed so that an optimal implementation exists; more precisely, there can exist no infinite sequence of logically equivalent trees of gates with increasing size and non-increasing cost.
Reference: [6] <author> J. Fishburn. </author> <title> A Depth-Decreasing Heuristic for Combinational Logic; or how to convert a ripple-carry adder into a carry-lookahead adder or anything in-between. </title> <booktitle> In DAC, </booktitle> <year> 1990. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [7] <author> J. Fishburn. LATTIS: </author> <title> An Interative Speedup Heuristic for Mapped Logic. </title> <booktitle> In DAC, </booktitle> <year> 1992. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [8] <author> D. Gregory, K. Barlett, A. de Geus, and G. Hachtel. Socrates: </author> <title> A System for Automatically Synthesizing and Optimizing Combinational Logic. </title> <booktitle> In DAC, </booktitle> <year> 1986. </year>
Reference-contexts: This drawback is fatal when one needs to handle tight and complicated constraints with delay, area, and load. Conventionally, this problem has been addressed by the following two approaches [2]. One is rule-based techniques. A rule-based system, e.g. <ref> [4, 8] </ref>, can combine technology independent transformations and technology mapping. However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases.
Reference: [9] <author> A. Hoffman and M. O'Donnell. </author> <title> Pattern Matching in Trees. </title> <journal> Journal ACM, </journal> <volume> 29(1), </volume> <month> January </month> <year> 1982. </year>
Reference-contexts: For a given choice node and library gate, matching identifies all single-output subgraphs of rooted at the choice node which are logically equivalent to the library gate. Since numerous methods for matching are available <ref> [9] </ref>, we only formalize problem in this section. An AND2/INV decomposition of the boolean network for a library gate is called a pattern. <p> Suppose the procedure Update is applied for an AND ugate u in graph-mapping. It first computes the set of partial matches at each AND2 a using the partial matches associated with the fanin choice nodes of a. This is done by a technique similar to the one given in <ref> [9] </ref>. Once all the AND2s have been processed, Update processes the choice nodes and inverters of u. Partial matches for an inverter are generated in the same way as for AND2s.
Reference: [10] <author> R. Karp. </author> <title> Reducibility among Combinatorial Problems. </title> <editor> In R. Miller and J. Thatcher, editors, </editor> <title> Complexity of Computer Computations. </title> <publisher> Plenum Press, </publisher> <year> 1972. </year>
Reference-contexts: The AND2s that are not in A 0 are candidates for deletion. The problem of finding such an A 0 with the minimum cardinality is called minimum cover, whose decision version is known to be NP-complete <ref> [10] </ref>. Thus Update computes such an A 0 using a heuristic, once all the AND2s have been processed. In order to identify which AND2s that are not in A 0 can be actually deleted, another modification is necessary.
Reference: [11] <author> K. Keutzer. DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching. </title> <booktitle> In DAC, </booktitle> <year> 1987. </year>
Reference-contexts: Then in the second phase, the resulting expressions are converted into a special type of boolean network, where nodes represent particular functions such as AND or INVERTER. Such a graph is called a subject graph <ref> [11] </ref> and the functions used in a subject graph are called base functions. Technology mapping is the third and last phase of synthesis, where the subject graph is mapped onto a set of library gates to generate the final implementation. <p> Note that there are D (n)D (k) n such decompositions in general, where D (k) = 1 2k1 k!2 k . State-of-the-art technology mapping techniques, e.g. <ref> [11, 20] </ref>, can be naturally extended for mapping graphs, retaining linear run time and optimal results 1 . A set of AND2/INV decompositions are generated through iterative local transformations defined on a mapping graph. We define three such transformations: associative transformation, distributive transformation, and inverter transformation. <p> paper is combinational logic circuits, our results can be extended as discussed in Section 5. 3 Mapping on a Set of Decompositions In this section we introduce two basic tools: a mapping graph data structure which encodes a set of AND2/INV networks and a graph-mapping algorithm which effectively applies tree-mapping <ref> [11] </ref> to each encoded AND2/INV network. These tools are then combined to construct a technology mapping procedure called L-mapping which absorbs phase (2) of synthesis into technology mapping. <p> The set of all complete AND2/INV networks obtainable in this way is the set of AND2/INV networks encoded by a mapping graph. 3.2 Graph-Mapping This section describes the graph-mapping procedure, an extension of tree-mapping <ref> [11] </ref>. The algorithm transforms a mapping graph into a mapped network in which primary outputs are driven by disjoint trees of gates with primary inputs at the leaves. In Section 5 we describe a heuristic method for sharing logic between trees.
Reference: [12] <author> C. Leiserson, F. Rose, and J. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <editor> In R. Bryant, editor, </editor> <booktitle> 3rd Caltech Conference on VLSI, </booktitle> <year> 1983. </year>
Reference-contexts: The graph-mapping procedure is adapted to produce mapped networks with latches. Furthermore, the dynamic decomposition procedure is extended so that a distributed pattern can be found across latches. If AND2/INV networks which differ only in latch placement are encoded, the graph-mapping algorithm effectively retimes latches <ref> [12] </ref>. Given an acyclic AND2/INV network containing latches, an mapping graph can be constructed encoding all possible retimings. Relative to encoding a single latch placement, this increases the number of nodes at most in proportion to the maximum number of latches on any primary input to primary output path.
Reference: [13] <author> P. McGeer, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Performance Enhancement through the Generalized Bypass Transform. </title> <booktitle> In ICCAD, </booktitle> <year> 1991. </year> <title> [14] same authors. A Delay Model for Logic Synthesis of Continuously-Sized Networks. </title> <note> submitted to ICCAD, </note> <year> 1995. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [15] <author> E. Sentovich, K. Singh, C. Moon, H. Savoj, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Sequential Circuit Design Using Synthesis and Optimization. </title> <booktitle> In ICCD, </booktitle> <year> 1992. </year>
Reference-contexts: If a is deleted, the fanins of a might have no fanout. We delete the fanins as well if this is the case. 5 Experimental Results The proposed procedure has been implemented in a logic synthesis system called SynFul. SynFul is developed on top of SIS <ref> [15] </ref>, and inherits technology independent transformations from SIS. Operations related to technology mapping have been newly implemented. SynFul uses a minimum area under delay constraints cost notion where each library gate has a fixed delay.
Reference: [16] <author> K. Singh. </author> <title> Performance Optimization of Digital Circuits. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <year> 1992. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping. <p> The synthesis procedure used for each system is as follows. For SIS-1.2, we used a sequence of operations aimed for timing-oriented synthesis. This includes, in addition to ordinary technology independent operations, a procedure for reducing the depth of a circuit, restructuring timing-critical regions <ref> [16] </ref>, and a timing-driven technology mapping [20]. The restructuring procedure was applied on a mapped network as well. We consulted SIS developers for detailed usage of these procedures to derive the best performance of the system [17]. <p> The graph-mapping procedure was then applied on . Once a mapped network was obtained, we further applied the D-mapping procedure on a timing-critical region. Such a region was identified using a heuristic suggested in <ref> [16] </ref>. The results are shown in Table 1. For SIS-1.2 and L-mapping, Delay is the arrival time of the most critical primary output. The most critical output in the network generated by L-mapping was resynthesized by D-mapping, and the resulting arrival time is shown under Delay of D-mapping.
Reference: [17] <author> K. Singh. </author> <title> private communication, </title> <year> 1995. </year>
Reference-contexts: The restructuring procedure was applied on a mapped network as well. We consulted SIS developers for detailed usage of these procedures to derive the best performance of the system <ref> [17] </ref>. In SynFul, we first applied the L-mapping procedure, where for each example, four different sets of technology independent transformations were first applied on the initial boolean network. AND2/INV decompositions for each of the resulting boolean networks were encoded into a single mapping graph .
Reference: [18] <author> K. Singh and A. Sangiovanni-Vincentelli. </author> <title> A Heuristic Algorithm for the Fanout Problem . In DAC, </title> <year> 1990. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [19] <author> K. Singh, A. Wang, R. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Timing Optimization of Combinational Logic. </title> <booktitle> In ICCAD, </booktitle> <year> 1988. </year>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
Reference: [20] <author> H. Touati. </author> <title> Performance-Oriented Technology Mapping. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: Note that there are D (n)D (k) n such decompositions in general, where D (k) = 1 2k1 k!2 k . State-of-the-art technology mapping techniques, e.g. <ref> [11, 20] </ref>, can be naturally extended for mapping graphs, retaining linear run time and optimal results 1 . A set of AND2/INV decompositions are generated through iterative local transformations defined on a mapping graph. We define three such transformations: associative transformation, distributive transformation, and inverter transformation. <p> Each such mapping has a cost. This cost may measure the total area of the tree of gates, the arrival time at the root of the tree, etc. Generally, any notion of cost used in tree-mapping <ref> [5, 20] </ref> is acceptable 2 . However, to guarantee that graph-mapping terminates, the library and cost notion must be designed so that an optimal implementation exists; more precisely, there can exist no infinite sequence of logically equivalent trees of gates with increasing size and non-increasing cost. <p> The synthesis procedure used for each system is as follows. For SIS-1.2, we used a sequence of operations aimed for timing-oriented synthesis. This includes, in addition to ordinary technology independent operations, a procedure for reducing the depth of a circuit, restructuring timing-critical regions [16], and a timing-driven technology mapping <ref> [20] </ref>. The restructuring procedure was applied on a mapped network as well. We consulted SIS developers for detailed usage of these procedures to derive the best performance of the system [17].
Reference: [21] <author> K. Yoshikawa, H. Ichiryu, H. Tanishita, S. Suzuki, N. Nomizu, and A. Kondo. </author> <title> Timing Optimization on Mapped Circuits. </title> <booktitle> In DAC, </booktitle> <year> 1991. </year> <month> 20 </month>
Reference-contexts: However, by the nature of rule-based techniques, transformations are made only locally, and in general it is difficult to explore large solution space as is done by algorithmic techniques. The other approach repeats the three phases. A variety of techniques have been proposed in the literature <ref> [1, 7, 18, 6, 13, 19, 21, 16] </ref>. Some of them globally change structures, while using data on delay or area of the implementation generated by technology mapping.
References-found: 20

