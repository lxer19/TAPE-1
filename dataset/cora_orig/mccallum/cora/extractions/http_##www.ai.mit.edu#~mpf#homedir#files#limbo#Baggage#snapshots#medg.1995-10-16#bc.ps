URL: http://www.ai.mit.edu/~mpf/homedir/files/limbo/Baggage/snapshots/medg.1995-10-16/bc.ps
Refering-URL: 
Root-URL: 
Title: Computing With DNA  
Author: Donald Beaver 
Affiliation: Pennsylvania State University  
Abstract: We consider molecular models for computing and derive a DNA-based mechanism for solving intractable problems through massive parallelism. In principle, such methods might reduce the effort needed to solve otherwise difficult tasks, such as factoring large numbers, a computationally-intensive task whose intractability forms the basis for much of modern cryptography.
Abstract-found: 1
Intro-found: 1
Reference: [A94] <author> L. Adleman. </author> <title> "Molecular Computation of Solutions to Combinatorial Problems." </title> <booktitle> Science 266 (November 1994), </booktitle> <pages> 1021-1024. </pages>
Reference-contexts: The question arises whether other computational models might escape the "polynomial bonds" of Turing-like devices. Adleman suggested a positive answer <ref> [A94] </ref>, showing how a series of molecular reactions could solve a 7-node Hamiltonian Path problem. <p> If no such path exists, no such molecule will be found. We sketch a solution derived without reference to <ref> [A94] </ref>, converging on similar but distinct methods. 3.1 Generating Possible Paths Given graph G = (V; E) with V = fv 1 ; : : : ; v n g, source v 1 and destination v n , we will construct several short molecules representing the edges in E, each marked <p> Ultimately, a single Hamiltonian path v 1 ; v i 2 ; v i 3 ; : : : ; v i n1 ; v n is determined. 3.4 Adleman's Solution In Adleman's experiment <ref> [A94] </ref>, "step numbers" are not used. Instead, initial candidates of varying length are generated, and then separated by length to retain paths of length n 1. Our use of step numbers requires n-fold more building blocks to be constructed at the outset, a fairly prohibitive expense. <p> On the other hand, longer molecules tend to be harder to measure precisely with current technology, and step numbers mitigate the less easily measured inefficiency incurred by discarding material that happens to form paths of inappropriate length. Selection of Hamiltonian paths in <ref> [A94] </ref> uses a primitive not included here, in which molecules containing specific sequences encoding v i are "grabbed" and directly retained by strands with a complementary sequence attached to magnetic beads. <p> To determine whether a superstring of length k containing given strings s 1 ; : : : ; s n exists, merely synthesize all possible sequences of length k using recombinant methods similar to those outlined above and then use either the magnetic-bead method of <ref> [A94] </ref> or the text insertion/deletion methods described above to select those sequences containing all the strings s 1 ; : : : ; s n .
Reference: [CLR90] <author> T. Cormen, C. Leiserson, R. Rivest. </author> <title> Introduction to Algorithms. </title> <address> New York: McGraw Hill, </address> <year> 1990. </year>
Reference-contexts: Consider factoring a 1000-bit number, a task beyond the reach of current computers. Using any standard reduction to Hamiltonian Path, (cf. <ref> [CLR90] </ref>, pp. 954-959), we obtain a graph with at least 10 6 nodes. It is probably safe to underestimate the number of possible paths at 2 10 6 . Thus, on the order of 2 10 6 10 300;000 candidate molecules are needed.
Reference: [BJLTY94] <author> A. Blum, T. Jiang, M. Li, J. Tromp, M. Yannakakis. </author> <title> "Linear Approximation of Shortest Superstrings." </title> <journal> JACM 41:4 (1994), </journal> <pages> 634-647. </pages>
Reference-contexts: Complexity theorists would be happy to learn that the shortest-common su-perstring problem is "easily" solved by combinatorial molecular computers, since even approximating the length of a shortest common superstring is a computa--tionally difficult task (cf. <ref> [BJLTY94] </ref>).
Reference: [S94] <author> P. Shor. </author> <title> "Algorithms for Quantum Computation: Discrete Logarithms and Factoring." </title> <booktitle> Proceedings of the 35 th FOCS, IEEE, </booktitle> <year> 1994, </year> <pages> 124-134. </pages>
Reference-contexts: Building on the work of others, Shor recently gave algorithms for factoring and discrete logarithm using a quantum computer, a type of probabilistic Turing machine whose state transitions follow quantum-mechanical laws <ref> [S94] </ref>. These transitions are such that, roughly speaking, an exponential number of paths are followed, but paths not corresponding to a solution tend to cancel each other out, leaving only those paths corresponding to a solution as ultimately observable results.
Reference: [W77] <author> J. Watson. </author> <title> Molecular Biology of the Gene. </title> <address> Reading, Massachusetts: </address> <publisher> W. A. Benjamin, Inc., </publisher> <year> 1977. </year> <title> 7 Indeed, the classical interactions of DNA molecules can be simulated by a Turing machine in polynomial time, subjecting them to the Church-Turing thesis and to our antithesis: massive parallelism is not the same as exponential time. This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 5

