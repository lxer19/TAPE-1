URL: http://ptolemy.eecs.berkeley.edu/papers/IDF_Asilomar.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/annual95.html
Root-URL: 
Title: Abstract  
Abstract: This paper extends the token ow model of Buck and Lee ([1],[2]), an analytical model for the behavior of dataow graphs with data-dependent control ow, in two ways: dataow actor execution may depend on integer, rather than Boolean, control tokens, and multiphase implementations of actors are permitted. These extensions permit data-dependent iteration to be modelled more naturally, reduce the memory required for implementations, and result in bounded-memory solutions in more cases than before. A method for generating efficient single-processor programs from the graphs is also described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Buck, </author> <title> Scheduling Dynamic Dataow Graphs With Bounded Memory Using the Token Flow Model, Memorandum No. </title> <type> UCB/ERL M93/69 (Ph.D. Thesis), </type> <institution> EECS Dept., University of California, Berkeley, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Why extend the BDF model? It is shown in <ref> [1] </ref> that the set of dataow actors consisting of SWITCH, SELECT, and a small number of SDF actors that perform arithmetic on integers are Turing-equivalent, and therefore in a sense complete. Nevertheless, the Boolean-controlled dataow model does not directly express certain actors that have been found to be useful. <p> The techniques used to extend SDF graph theory to include some dynamic actors were first proposed in [2] and developed more fully in <ref> [1] </ref>. Of the methods presented in [1], we will principally be concerned with extending the following two: Solving the balance equations in symbolic form to determine whether bounded-length schedules exist, and Clustering the graph to find control structures. 4.1. <p> The techniques used to extend SDF graph theory to include some dynamic actors were first proposed in [2] and developed more fully in <ref> [1] </ref>. Of the methods presented in [1], we will principally be concerned with extending the following two: Solving the balance equations in symbolic form to determine whether bounded-length schedules exist, and Clustering the graph to find control structures. 4.1. <p> Graphs that have this property are called strongly consistent in [2]. Strong consistency implies a balance of long-term ow rates, but says nothing about bounded-length schedules or bounded-memory implementations: strongly consistent graphs can still require unbounded memory (see <ref> [1] </ref> for examples). Finding bounded complete cycles will assure bounded memory, so we shall now show how to find them. We are interested in determining the properties of minimal complete cyclic schedules of the graph. <p> Clustering to find control structure We will now present a algorithm for clustering a dynamic dataow graph that follows the rules we have described to find control structures such as iteration (over a fixed or variable range), if-then-else, and do-while. It is a generalization of the algorithm described in <ref> [1] </ref> (which, in turn, generalizes techniques in [11]). In that work, clustering is motivated as a way to produce bounded-memory implementations for graphs that contain data-dependent iteration, such as figure 2. Because of space limitations, the algorithm will only be described qualitatively here. <p> Each transformation results in clusters that obey the rules for IDF actors; furthermore, an valid sub-schedule for each cluster can be found by a topological sort of data dependencies, since all rates within clusters match. For BDF actors, the clustering algorithm is described in detail in <ref> [1] </ref>. There are two new features that must be supported: multiphase ports and repetition based on a run-time token. When a cluster containing a multiphase port is modified by the loop pass, the effect is to sum the phases together, producing a non-multiphase port.
Reference: [2] <author> E. A. Lee, </author> <title> Consistency in Dataow Graphs, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 2, No. 2, </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: The token ow model: Boolean-controlled dataow Actors with at least one conditional input or output port are called dynamic actors. The canonical dynamic actors, whose history goes back at least to [9], are SWITCH and SELECT, shown in figure 1. In previous work ([1], and originally in <ref> [2] </ref>), SDF was extended to permit the use of a restricted class of dynamic dataow actors, actors that fall into the category of Boolean-controlled dataow (BDF) actors. <p> For 1 2 3 2 Fig. 4. An inconsistent SDF graph. Numbers adjacent to arcs give the number of tokens produced or consumed per actor execution. graphs with dynamic actors, consistency may depend on the values of the control tokens produced <ref> [2] </ref>. Does the graph deadlock? A graph is deadlocked if it reaches a configuration in which no actor can be exe cuted, as in figure 5. <p> The techniques used to extend SDF graph theory to include some dynamic actors were first proposed in <ref> [2] </ref> and developed more fully in [1]. Of the methods presented in [1], we will principally be concerned with extending the following two: Solving the balance equations in symbolic form to determine whether bounded-length schedules exist, and Clustering the graph to find control structures. 4.1. <p> If the resulting system is solved, we can determine that the repetition vector for the graph is (5) Note that there are nonzero solutions for the repetition vector regardless of the value of . Graphs that have this property are called strongly consistent in <ref> [2] </ref>. Strong consistency implies a balance of long-term ow rates, but says nothing about bounded-length schedules or bounded-memory implementations: strongly consistent graphs can still require unbounded memory (see [1] for examples). Finding bounded complete cycles will assure bounded memory, so we shall now show how to find them.
Reference: [3] <author> E. A. Lee, D. G. Messerschmitt, </author> <title> Synchronous Dataow, </title> <booktitle> Proceedings of the IEEE, </booktitle> <month> September </month> <year> 1987. </year>
Reference-contexts: These techniques are explained in detail in <ref> [3] </ref>. Algorithms whose control ow is completely deterministic can be effectively represented using this synchronous dataow (SDF) paradigm. <p> Can the graph be scheduled to use bounded memory? In general, a bounded-length cyclic schedule implies bounded memory but not vice versa. 3. A brief review of SDF theory For SDF graphs, algorithms exist to answer all four questions for any graph <ref> [3] </ref>. Furthermore, questions 2 and 4 become trivial: whenever cyclic schedules and exist and deadlock does not occur, all graphs have bounded length schedules and therefore require bounded memory. <p> Printz calls (3) the balance equations [5]. If this procedure were carried out for the graph in figure 6, one solution would be . (4) This solution is the smallest one with integer entries. For a connected SDF graph, it is shown in <ref> [3] </ref> that a necessary condition to be able to construct an admissible periodic schedule is that null space of has dimension one. From (3) we see that must lie in the null space of .
Reference: [4] <author> P. N. Hilfinger, </author> <title> A High-Level Language and Silicon Compiler for Digital Signal Processing, </title> <booktitle> Proc. Custom Integrated Circuits Conf., </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 213-216, </pages> <year> 1985. </year>
Reference-contexts: Algorithms whose control ow is completely deterministic can be effectively represented using this synchronous dataow (SDF) paradigm. Since many digital signal processing algorithms have little to no data-dependent decision-making, SDF-based tools, and tools based on dataow languages with SDF-like characteristics such as Silage <ref> [4] </ref>, have proven effective in producing software implementations ([5],[6],[7]) as well as in the synthesis of custom hardware ([4],[8]).
Reference: [5] <author> H. Printz, </author> <title> Automatic Mapping of Large Signal Processing Systems to a Parallel Machine, </title> <institution> Memorandum CMU-CS-91-101, School of Computer Science, Carnegie-Mellon University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Then the system of equations to be solved is (3) where is a vector full of zeros, and is the repetition vector containing the for each actor. Printz calls (3) the balance equations <ref> [5] </ref>. If this procedure were carried out for the graph in figure 6, one solution would be . (4) This solution is the smallest one with integer entries.
Reference: [6] <author> S. Ritz, M. Pankert, H. Meyr, </author> <title> High Level Software Synthesis for Signal Processing Systems, </title> <booktitle> Proceedings of the International Conference on Application Specific Array Processors, </booktitle> <address> Berkeley, CA, </address> <month> August, </month> <year> 1992. </year>
Reference: [7] <author> P. D. Hoang and J. M. Rabaey, </author> <title> Scheduling of DSP Programs Onto Multiprocessors for Maximum Throughput, </title> <journal> IEEE Trans. on Signal Processing, </journal> <pages> pp. 2225-2235, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: In some actors, intermediate phases are independent, in others, sequential dependencies will occur. In still other cases, successive phases may be partially overlapped, as in the systolic actors of the Mac-DAS system of <ref> [7] </ref>. In that system, hierarchical actors are scheduled as units and are expanded only as needed to accomplish load balancing. It seems reasonable to expect that the clustered data structures described here could be used instead as the units of hierarchy.
Reference: [8] <author> H. De Man, J. Rabaey, P. Six, L. Claesen, CATHEDRAL-II: </author> <title> a silicon compiler for digital signal processing, </title> <journal> IEEE Design and Test Magazine, </journal> <pages> pp. 13-25, </pages> <month> Dec. </month> <year> 1986. </year>
Reference: [9] <author> J. B. Dennis, </author> <title> First Version of a Dataow Procedure Language, </title> <institution> MIT/LCS/TM-61, Laboratory for Computer Science, MIT, 545 Technology Square, </institution> <address> Cambridge MA 02139, </address> <year> 1975. </year>
Reference-contexts: It is therefore desirable to extend SDF while retaining these properties as much as possible. 1.1. The token ow model: Boolean-controlled dataow Actors with at least one conditional input or output port are called dynamic actors. The canonical dynamic actors, whose history goes back at least to <ref> [9] </ref>, are SWITCH and SELECT, shown in figure 1. In previous work ([1], and originally in [2]), SDF was extended to permit the use of a restricted class of dynamic dataow actors, actors that fall into the category of Boolean-controlled dataow (BDF) actors.
Reference: [10] <author> G. Bilsen, M. Engels, R. Lauwereins, J. A. Peperstraete, </author> <title> Static Scheduling of Multi-rate and Cyclo-static DSP-applications, </title> <booktitle> Proc. IEEE Workshop on VLSI Signal Processing, </booktitle> <year> 1994. </year>
Reference-contexts: If the SUM actor has a similar implementation, then the graph in figure 3 can be implemented with only one token per arc. This type of multiphase implementation is related to the cyclo-static synchronous dataow model of <ref> [10] </ref>, extended to permit the number of phases to be variable. <p> implementation possibilities for actors that compute an entire operation in one phase, and it is possible to conceive of an implementation environment that freely substitute single-phase and mul-tiphase implementations of the same actor as is convenient, especially for cyclostatic versions of SDF actors such as those in the Grape-II system <ref> [10] </ref>. <p> However, relations among Boolean streams may be more easily discovered and represented in some cases given CASE arcs. 1.3. Multiphase actors Multiphase actors are a generalization of the cyclostatic synchronous dataow actors that appear in Grape-II <ref> [10] </ref>. The multiphase actors we will consider implement the interface of an IDF actor by executing in more than one phase. Phases of the same actor need not be executed consecutively. The phases have the following structure: An optional starting phase.
Reference: [11] <author> S. Bhattacharyya, J. T. Buck, S. Ha, and E. A. Lee, </author> <title> A Scheduling Framework for Minimizing Memory Requirements of Multirate DSP Systems Represented as Dataow Graphs, in VLSI Signal Processing VI, </title> <publisher> IEEE Special Publications, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: It is a generalization of the algorithm described in [1] (which, in turn, generalizes techniques in <ref> [11] </ref>). In that work, clustering is motivated as a way to produce bounded-memory implementations for graphs that contain data-dependent iteration, such as figure 2. Because of space limitations, the algorithm will only be described qualitatively here.
Reference: [12] <author> S. Ha, </author> <title> Compile-Time Scheduling and Assignment of Dataow Program Graphs with Dynamic Constructs, Memo. No. </title> <type> UCB/ERL M92/43 (Ph.D. Thesis), </type> <institution> University of California, Berkeley, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Further work Parallel implementations from IDF graphs have not been addressed here. The hierarchical clustering produced by this model may be suitable for exploitation by frameworks such as those by Ha <ref> [12] </ref>. Has system, by incorporating probabilistic assumptions about the control constructs (if-then-else, do-while, repeat_x), generates parallel schedules for those constructs. The assumptions of IOTA SREAD WRITE Fig. 11. This graph uses the actors from figure 3.
References-found: 12

