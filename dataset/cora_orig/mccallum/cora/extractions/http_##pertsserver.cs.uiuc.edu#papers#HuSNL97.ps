URL: http://pertsserver.cs.uiuc.edu/papers/HuSNL97.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: An End-to-End QoS Model and Management Architecture  
Author: David Hull Arjun Shankar Klara Nahrstedt Jane W. S. Liu 
Keyword: QoS management, real-time, flexible computation, service establishment  
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois  
Abstract: A quality-of-service (QoS) management framework for a complex distributed real-time system must be able to accommodate different dimensions and measures of quality, affect QoS tradeoffs across applications, and monitor and maintain the overall quality of the service produced by them as a whole. This paper describes a QoS model and an end-to-end QoS management architecture designed to meet these objectives. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Horvitz and S. Zilberstein, eds., </author> <title> Flexible Computation in Intelligent Systems: Results, Issues, and Opportunities, November 1996, </title> <booktitle> Workshop of American Association for Artificial Intelligence, </booktitle> <address> Cambridge, Massachusetts. </address>
Reference-contexts: 1 Introduction Researchers in application domains as diverse as real-time computing and communication, query processing, and artificial intelligence have long advocated the use of flexible applications as a way to make time-critical systems adaptable to dynamic changes in user requirements and resource availability <ref> [1] </ref>. A flexible application can trade the amounts of time and resources it uses to produce its result for the quality of the result it produces. Systems employing the flexible computation approach gain in graceful degradation and availability.
Reference: [2] <author> A. Campbell, C. Aurrecoechea, and L. Hauw, </author> <title> "A Review of QoS Architectures," </title> <booktitle> Proceedings of 4th IFIP international Workshop on Quality of Service, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: The QoS model and management architecture described here intends to meet these objectives. This architecture is based on a new QoS model. Like many existing models (such as as those described in <ref> [2] </ref>, [3] and [4]), this model deals with multiple QoS dimensions. It differs from the existing models in that it makes the output quality of every task depend explicitly on the input quality of the task.
Reference: [3] <author> R. Rajkumar, C. Lee, J. Lehoczky, and D. Siewiorek, </author> <title> "A resource allocation model of QoS management," </title> <booktitle> to appear in Proceedings of IEEE Real-Time Systems Symposium, </booktitle> <month> De-cember </month> <year> 1997. </year>
Reference-contexts: The QoS model and management architecture described here intends to meet these objectives. This architecture is based on a new QoS model. Like many existing models (such as as those described in [2], <ref> [3] </ref> and [4]), this model deals with multiple QoS dimensions. It differs from the existing models in that it makes the output quality of every task depend explicitly on the input quality of the task.
Reference: [4] <author> T. F. Abdelzaher, E. M. Atkins, and K. G. Shin, </author> <title> "QoS negotiation in real-time systems and its application to automated flight control," </title> <booktitle> Proceedings of IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The QoS model and management architecture described here intends to meet these objectives. This architecture is based on a new QoS model. Like many existing models (such as as those described in [2], [3] and <ref> [4] </ref>), this model deals with multiple QoS dimensions. It differs from the existing models in that it makes the output quality of every task depend explicitly on the input quality of the task.
Reference: [5] <author> W. Feng and J. W. S. Liu, </author> <title> "Algorithms for Scheduling Real-Time Tasks with Input Error and End-to-End Deadlines," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 23, No. 2, </volume> <pages> pp. 93-106. </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: It differs from the existing models in that it makes the output quality of every task depend explicitly on the input quality of the task. In this respect, this model resembles the end-to-end imprecise computation model proposed in <ref> [5] </ref> and the workload model used in [6]. Following this introduction, Section 2 describes our QoS model. Section 3 gives an overview of the QoS management architecture based on this model. Service establishment is one of the new features. Due to space limitations, this section focuses on it. <p> As an example, Figure 2 gives a simple reward function; it has been used to characterize tasks according to the imprecise computation model <ref> [5] </ref>. 1 We ignore those resources that the task must have fixed amounts of and resources that are plentiful. <p> Thus far, we have focussed on distributed protocols that minimize the coordinations and interactions among resource managers and QoS brokers. On the extreme, the assignment of input qualities and resource reservations can be done centrally using an optimal or near-optimal algorithm such as the ones in <ref> [5] </ref> and [12]. These alternatives remain to be evaluated. Acknowledgment This work is partially supported by the ARPA contract: No. F30602-97-2-0121.
Reference: [6] <author> D. I. Kang, R. Gerber, and M. Saksena, </author> <booktitle> "Performance-based design of distributed real-time systems," Proceedings of IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: It differs from the existing models in that it makes the output quality of every task depend explicitly on the input quality of the task. In this respect, this model resembles the end-to-end imprecise computation model proposed in [5] and the workload model used in <ref> [6] </ref>. Following this introduction, Section 2 describes our QoS model. Section 3 gives an overview of the QoS management architecture based on this model. Service establishment is one of the new features. Due to space limitations, this section focuses on it.
Reference: [7] <author> D. Hull, W. Feng, and J. W. S. Liu, </author> <title> "Enhancing the Performance and Dependability of Real-Time Systems," </title> <booktitle> IEEE International Computer Performance and Dependability Symposium, </booktitle> <year> 1995, </year> <note> Erlangen, Germany. [8] "EPIQ QoS Characterization," Unpublished Report, 1997, Available at http://epiq.cs.uiuc.edu/. </note>
Reference-contexts: The rectangular boxes in the figure represent individual resources (computers and networks) that have their own resource managers. Tasks that execute on the same resource may share a supervisor or handler or both. This structure is essentially the same as that of the ICE (Imprecise Computation Environment <ref> [7] </ref>) except that in ICE the handler and supervisor are separate entities. A key assumption here is that every task has a known reward function.
Reference: [9] <author> H. Zhang and D. Ferrari, </author> <title> "Rate-controlled service disciplines," </title> <journal> Journal of High Speed Networks, </journal> <volume> Vol. 3, No. 4, </volume> <year> 1994. </year>
Reference-contexts: Each broker may also relax the offered load-dependent qualities, e.g., allowing the resource manager to guarantee a larger response time than the value it offered in the first pass. In this way, the second pass is similar to the relaxation pass during connection establishment according to the Delay-or-Jitter-EDD discipline <ref> [9] </ref>. If the broker of the first task T 1 finds the composite task infeasible, it sends a rejection message with the available input quality. As the rejection message is passed through the chain to the last task T n , no resources are allocated. <p> This analysis is more complex than a standard schedulability analysis that gives bounds on response time for a given resource allocation. An exact schedulability analysis method (e.g., [11]) is too costly for our purpose. Less accurate but fast schemes, such as the one proposed by Zhang and Ferrari <ref> [9] </ref> and the ones based on utilization bounds may be more suitable. These issues are subjects of ongoing study. The amount of resources requested by brokers and the amount reserved for tasks during service establishment are two protocol parameters that significantly affect the realizability of an operating configuration.
Reference: [10] <author> L. Zhang, S. Deering, D. Estrin, Scott Shenker, and Daniel Zappala, "RSVP: </author> <title> A New Resource ReSerVation Protocol", </title> <journal> IEEE Network, September 1993, </journal> <volume> Vol. 7, No. 5, </volume> <pages> pp. 8-18. </pages>
Reference-contexts: This QoS negotiation and establishment protocol requires two capabilities that are not provided by most existing real-time resource management schemes: (1) resource reservation/allocation and (2) parameterized schedulability analysis. A possible way to support resource reservation/allocation efficiently is to use the "soft state" approach proposed by Zhang et al. <ref> [10] </ref> in the RSVP resource reservation protocol. Rather than allocating resources to tasks and freeing the resources when tasks terminate, the operating system considers all resource reservation temporarily and automatically cancels a reservation if the reserved resource is not used, or the reservation is not renewed, within a timeout interval.
Reference: [11] <author> J. Lehoczky, L. Sha and Y. Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior," </title> <booktitle> Proceedings, Real-Time Systems Symposium, IEEE, </booktitle> <address> Santa Monica, California, </address> <month> De-cember </month> <year> 1989, </year> <pages> pp. 166-171 </pages>
Reference-contexts: This analysis is more complex than a standard schedulability analysis that gives bounds on response time for a given resource allocation. An exact schedulability analysis method (e.g., <ref> [11] </ref>) is too costly for our purpose. Less accurate but fast schemes, such as the one proposed by Zhang and Ferrari [9] and the ones based on utilization bounds may be more suitable. These issues are subjects of ongoing study.
Reference: [12] <author> D. Hull, </author> <type> PhD Thesis, </type> <institution> University of Illinois, </institution> <year> 1998. </year>
Reference-contexts: Thus far, we have focussed on distributed protocols that minimize the coordinations and interactions among resource managers and QoS brokers. On the extreme, the assignment of input qualities and resource reservations can be done centrally using an optimal or near-optimal algorithm such as the ones in [5] and <ref> [12] </ref>. These alternatives remain to be evaluated. Acknowledgment This work is partially supported by the ARPA contract: No. F30602-97-2-0121.
References-found: 11

