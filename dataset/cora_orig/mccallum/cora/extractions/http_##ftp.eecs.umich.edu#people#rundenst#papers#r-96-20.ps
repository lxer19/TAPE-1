URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-96-20.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Title: PROBABILISTIC REAL-TIME DATA ACCESS WITH DEADLINE AND INTERVAL CONSTRAINTS  
Author: Lei Zhou, Kang G. Shin, Elke A. Rundensteiner*, and Nandit Soparkar 
Address: Ann Arbor, Michigan 48109-2122  01609-2280 USA  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan,  *Department of Computer Science Worcester Polytechnic Institute, Worcester, Massachusetts  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R.A. Bowman and J.A. Muckstadt, </author> <title> "Stochastic analysis of cyclic schedules," </title> <journal> Operations Research, </journal> <volume> 41, </volume> <year> 1993, </year> <pages> pp. 947-958. </pages>
Reference-contexts: Scheduling with completion probability is similar to stochastic scheduling in operations research, e.g., <ref> [1, 15] </ref>. Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available.
Reference: [2] <author> J.-Y. Chung, J. W.S. Liu, and K.-J. Lin, </author> <title> "Scheduling periodic jobs that allow imprecise results," </title> <journal> IEEE Trans. on Computers, </journal> <year> 1990, </year> <pages> pp. 1156-1174. </pages>
Reference: [3] <author> V. Grassi, L. Donatiello, and S. Tucci, </author> <title> "On the optimal checkpointing of critical tasks and transaction-oriented systems," </title> <journal> IEEE Trans. on Software Eng., </journal> <year> 1992, </year> <pages> pp. 72-77. </pages>
Reference-contexts: Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available. Although there exists work on the probabilistic approach in database systems (e.g., <ref> [3, 19, 20] </ref>), StarBase [10, 11] is the only RTDB we are aware of that addresses the probabilistic deadline guarantee issue.
Reference: [4] <author> C. Han, and K. Lin, </author> <title> "Scheduling distance-constrained real-time tasks," </title> <booktitle> Proc. of Real-Time Systems Symposium (RTSS), </booktitle> <year> 1992, </year> <pages> pp. 300-308. </pages>
Reference-contexts: StarBase seeks to minimize the number of high-priority trans 20 Chapter 1 actions which miss their deadlines, and discards tardy transactions at their deadline points. Because it assumes no a priori knowledge about transaction load, StarBase does not provide deadline guarantees. Han and Lin <ref> [4, 5] </ref> studied scheduling with distance constraints where the distance between any two consecutive finish times of the task must be no greater than a given value [4], and separation constraints where the distance must be greater than a certain value [5]. <p> Because it assumes no a priori knowledge about transaction load, StarBase does not provide deadline guarantees. Han and Lin [4, 5] studied scheduling with distance constraints where the distance between any two consecutive finish times of the task must be no greater than a given value <ref> [4] </ref>, and separation constraints where the distance must be greater than a certain value [5]. However, the interval constraint requires both distance and separation constraints.
Reference: [5] <author> C. Han, and K. Lin, </author> <title> "Scheduling real-time computations with separation constraints," </title> <journal> Info. Processing Letters, </journal> <year> 1992, </year> <pages> pp. 61-66. </pages>
Reference-contexts: StarBase seeks to minimize the number of high-priority trans 20 Chapter 1 actions which miss their deadlines, and discards tardy transactions at their deadline points. Because it assumes no a priori knowledge about transaction load, StarBase does not provide deadline guarantees. Han and Lin <ref> [4, 5] </ref> studied scheduling with distance constraints where the distance between any two consecutive finish times of the task must be no greater than a given value [4], and separation constraints where the distance must be greater than a certain value [5]. <p> Han and Lin [4, 5] studied scheduling with distance constraints where the distance between any two consecutive finish times of the task must be no greater than a given value [4], and separation constraints where the distance must be greater than a certain value <ref> [5] </ref>. However, the interval constraint requires both distance and separation constraints. It can be shown that the problem of scheduling tasks with interval constraints in their most restrictive form (i.e., oe = 0 and " = 0) is NP-complete.
Reference: [6] <author> S. Han, K.G. Shin, and J. Park, </author> <title> "A Non-intrusive distributed monitoring support in fault injection experiments," </title> <booktitle> 4th IEEE Int'l Workshop on Evaluation Techniques for Dependable Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Given the UMOAC testbed hardware and Probabilistic Real-Time Data Access 5 IO-1 IO-2 PC-1 Workstation-1 Ethernet VME bus milling machine ... software configurations, we found that 50 s (49447 ns, to be exact) is the finest resolution with which QNX can function stably. The VME StopWatch <ref> [6] </ref> is used for timing measurement. It is a piece of VMEbus-based hardware that timestamps bus events. Its clock resolution is 25 ns. These events are reads or writes to specific VME extended addresses.
Reference: [7] <author> J.R. Haritsa, M. Livny, and M.J. Carey, </author> <title> "Earliest deadline scheduling for real-time database systems," </title> <booktitle> Proc. of RTSS, </booktitle> <year> 1991, </year> <pages> pp. 232-242. </pages>
Reference: [8] <author> J. Hong, X. Tan, and D. Towsley, </author> <title> "A performance analysis of minimum laxity and earliest deadline scheduling in a real-time system," </title> <journal> IEEE Trans. on Computers, </journal> <year> 1989, </year> <pages> pp. 1736-1744. </pages>
Reference: [9] <author> S. Kamat, N. Malcolm, and W. Zhao, </author> <title> "Performance evaluation of a bandwidth allocation scheme for guaranteeing synchronous messages with arbitrary deadlines in an FDDI network," </title> <booktitle> Proc. of RTSS, </booktitle> <year> 1993, </year> <pages> pp. 34-43. </pages>
Reference-contexts: The main difference between completion probability and guarantee probability <ref> [9] </ref> is that the former emphasizes requirements while the latter, as defined, emphasizes system capability.
Reference: [10] <author> Y.-K. Kim, and S.H. Son, </author> <title> "Predictability and consistency in real-time database systems," </title> <editor> in S. Son ed., </editor> <booktitle> Advances in Real-Time Systems, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995, </year> <pages> pp. 509-531. </pages>
Reference-contexts: As we introduced in Section 1, the completion probability associated with the deadline of a real-time task is the required probability with which the task must be completed by its deadline. This concept is very similar to the guarantee level in <ref> [10, 11] </ref>. <p> Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available. Although there exists work on the probabilistic approach in database systems (e.g., [3, 19, 20]), StarBase <ref> [10, 11] </ref> is the only RTDB we are aware of that addresses the probabilistic deadline guarantee issue.
Reference: [11] <author> Y.-K. Kim, </author> <title> "Predictability and consistency in real-time transaction processing," </title> <type> PhD Dissertation, </type> <institution> U. of Virginia, </institution> <year> 1995. </year>
Reference-contexts: As we introduced in Section 1, the completion probability associated with the deadline of a real-time task is the required probability with which the task must be completed by its deadline. This concept is very similar to the guarantee level in <ref> [10, 11] </ref>. <p> Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available. Although there exists work on the probabilistic approach in database systems (e.g., [3, 19, 20]), StarBase <ref> [10, 11] </ref> is the only RTDB we are aware of that addresses the probabilistic deadline guarantee issue.
Reference: [12] <author> C.L. Liu, and J.W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard-real-time environment," </title> <journal> J. of the ACM, </journal> <year> 1973, </year> <pages> pp. 46-61. </pages>
Reference-contexts: For example, for independent preemptive tasks, the RM (rate-monotonic) priority assignment and the EDF (earliest-deadline-first) have been shown to be optimal scheduling algorithms in the static and dynamic cases, respectively <ref> [12] </ref>. However, most real-time scheduling studies have been theoretical or based on simplifying assumptions. Therefore, two issues arise in developing real-time systems for real-world applications. First, theoretical scheduling results often do not work well in practice since their assumptions may not hold true. <p> These sim ulations exhibit the following phenomena in terms of deadline miss ratio. 1. Random start of the tasks helps reduce miss ratios. This is no surprise, since a critical instant for any task occurs whenever the task is requested simultaneously with requests for all higher priority tasks <ref> [12] </ref>; a critical instant for a task is defined to be an instant at which a request for that task will have the longest response time. Generally, random start reduces the number of critical instants. 2. The variation of task periods has a significant impact.
Reference: [13] <author> J.W.S. Liu, et al., </author> <title> "Algorithms for scheduling imprecise computations," </title> <booktitle> IEEE Computer, </booktitle> <year> 1991, </year> <pages> pp. 58-68. </pages> <note> 22 Chapter 1 </note>
Reference: [14] <author> Open-Architecture Controls Team, </author> <title> Developer's Guide for Open-Architecture Control of the Robotool, </title> <institution> Dept. of Electr. Eng. & Comp. Sci. and Dept. of Mech. Eng. & Applied Mechanics, U. of Michigan, </institution> <year> 1995. </year>
Reference-contexts: An open-architecture controller consists of a set of cooperative tasks, e.g., sensor-reading tasks and control-law tasks, and needs a database management system (DBMS) to support concurrent data access and to provide well-defined interfaces between different software modules <ref> [14, 23] </ref>. Typically these tasks are subject to a range of timing constraints, which require the DBMS to provide timing guarantees, sometimes under complex operating conditions. <p> Most tasks in the machine tool control applications are periodic and must be completed by their deadlines with certain completion probabilities within each period; hence, they are probabilistic (and periodic) real-time tasks. In real-time control applications, we found that some control laws, such as the fuzzy logic control algorithm <ref> [14] </ref>, are very sensitive to the uniformity of sensor readings. Therefore, it is highly desirable that some periodic tasks, such as sensor-reading tasks, be executed regularly in time. <p> Although the average of all intervals is very close to the nominal period, this "memory" behavior may have adverse effects on control algorithms that are sensitive to interval (non-)uniformity, e.g., the fuzzy logic control <ref> [14] </ref>. We explore whether this problem can be addressed by resetting the timer after each firing, thus eliminating interval interdependency. Randomness of the task start is another parameter we use.
Reference: [15] <author> M. Pinedo, </author> <title> "Stochastic scheduling with release dates and due dates," </title> <journal> Operations Research, </journal> <year> 1983, </year> <pages> pp. 559-572. </pages>
Reference-contexts: Scheduling with completion probability is similar to stochastic scheduling in operations research, e.g., <ref> [1, 15] </ref>. Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available.
Reference: [16] <author> G. Pospischil, et al., </author> <title> "Developing real-time tasks with predictable timing," </title> <journal> IEEE Software, </journal> <year> 1992, </year> <pages> pp. 35-44. </pages>
Reference: [17] <author> K. Ramamritham, J.A. Stankovic, and W. Zhao, </author> <title> "Distributed scheduling of tasks with deadlines and resource requirements," </title> <journal> IEEE Trans. on Computers, </journal> <year> 1989, </year> <pages> pp. 1110-1123. </pages>
Reference: [18] <author> K.G. Shin, and P. Ramanathan, </author> <title> "Real-time computing: A new discipline of computer science and engineering," </title> <booktitle> IEEE Proceedings, </booktitle> <year> 1994, </year> <pages> pp. 6-24. </pages>
Reference-contexts: Also, our study indicates that the probabilistic and interval constraints, as described below, are well-suited to the needs of manufacturing applications. A real-time task may be described by its arrival time, deadline, worst-case contention-free execution time, and criticality (i.e., hard, firm or soft) <ref> [18] </ref>. We introduce another property called completion probability. It is defined as the required probability with which the task must be completed by its deadline. In many applications, the deadlines of tasks must be guaranteed with at least a certain completion probability in order for the applications to function correctly.
Reference: [19] <author> F.S.-C. Tseng, A.L.P. Chen, and W.-P. Yang, </author> <title> "A probabilistic approach to query processing in heterogeneous database systems," </title> <booktitle> 2nd Int'l Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <year> 1992, </year> <pages> pp. 176-183. </pages>
Reference-contexts: Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available. Although there exists work on the probabilistic approach in database systems (e.g., <ref> [3, 19, 20] </ref>), StarBase [10, 11] is the only RTDB we are aware of that addresses the probabilistic deadline guarantee issue.
Reference: [20] <author> P.J. Weinberger, and D. Mitra, </author> <title> "Probabilistic models of database locking: solutions, computational algorithms, and asymptotics," </title> <journal> J. of the ACM, </journal> <year> 1984, </year> <pages> pp. 855-878. </pages>
Reference-contexts: Our work differs from stochastic scheduling in that we are concerned with the unpredictability of service performance and assume that the services are always available. Although there exists work on the probabilistic approach in database systems (e.g., <ref> [3, 19, 20] </ref>), StarBase [10, 11] is the only RTDB we are aware of that addresses the probabilistic deadline guarantee issue.
Reference: [21] <author> J. Xu, and D.L. Parnas, </author> <title> "Scheduling processes with release times, deadlines, precedence, and exclusion relations," </title> <journal> IEEE Trans. on Software Eng., </journal> <year> 1990, </year> <pages> pp. 360-369. </pages>
Reference: [22] <author> W. Zhao, K. Ramamritham, and J.A. Stankovic, </author> <title> "Preemptive scheduling under time and resource constraints," </title> <journal> IEEE Trans. on Computers, </journal> <year> 1987, </year> <pages> pp. 949-960. </pages>
Reference: [23] <author> L. Zhou, E.A. Rundensteiner, and K.G. Shin, </author> <title> "OODB support for real-time open-architecture controllers," </title> <booktitle> Proc. of the 4th Int'l Conf. on Database Systems for Advanced Applications, </booktitle> <year> 1995, </year> <pages> pp. 206-213. </pages>
Reference-contexts: An open-architecture controller consists of a set of cooperative tasks, e.g., sensor-reading tasks and control-law tasks, and needs a database management system (DBMS) to support concurrent data access and to provide well-defined interfaces between different software modules <ref> [14, 23] </ref>. Typically these tasks are subject to a range of timing constraints, which require the DBMS to provide timing guarantees, sometimes under complex operating conditions. <p> Our testbed architecture allows easy adoption of new hardware components as they become available, and therefore, provides good hardware open-ness. Well-defined interfaces and support for performance polymorphism (which is addressed in <ref> [23] </ref>) supply a foundation of software open-ness. Our experiments are conducted on CPU-1 depicted in Figure 2. It is a XYCOM XVME-674/16 VMEbus PC/AT processor module with a 66 MHz 80486DX2, 32 Mbytes dual-access DRAM, SVGA and IDE controllers. It runs under QNX (version 4.22), a commercial, micro-kernel, POSIX-compliant RTOS.
Reference: [24] <author> L. Zhou, M.J. Washburn, K.G. Shin, </author> <title> and E.A. Rundensteiner, "Performance Evaluation of Modular Real-Time Controllers," </title> <booktitle> Proc. of 1996 ASME Int'l Mechanical Eng. Congress and Exposition, </booktitle> <year> 1996. </year>
Reference-contexts: An interval of 367.53 s was preceded by an interval of 1626.08 s. This indicates that the timer has "memory" and tries to catch up when it is late. Similar phenomena have also been observed for two other commercial RTOSs|VxWorks and pSOSystem <ref> [24] </ref>. Probabilistic Real-Time Data Access 7 0 500 1000 1500 2000 Interval (us) 0 % 80 % 3 SIMULATIONS Having observed timer unpredictability in the UMOAC testbed, we now investigate whether a theoretically-proven algorithm works well in the presence of such unpredictability.
Reference: [25] <author> L. Zhou, K.G. Shin, </author> <title> and E.A. Rundensteiner, "Measurement-based probabilistic real-time deadline guarantees," </title> <note> in preparation. </note>
Reference-contexts: Therefore, it is highly desirable that some periodic tasks, such as sensor-reading tasks, be executed regularly in time. In other words, 1 A more detailed description of our probabilistic model can be found in <ref> [25] </ref> Probabilistic Real-Time Data Access 3 an invocation of the task (i.e., a job) must be completed within a certain time interval after it is released. Furthermore, the time interval between the ending (or starting) times of any two consecutive jobs must also be within a certain range.
References-found: 25

