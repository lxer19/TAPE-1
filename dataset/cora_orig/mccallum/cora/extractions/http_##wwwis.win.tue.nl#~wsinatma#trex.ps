URL: http://wwwis.win.tue.nl/~wsinatma/trex.ps
Refering-URL: http://wwwis.win.tue.nl/~wsinatma/
Root-URL: http://www.win.tue.nl
Email: Email: rvstiphout@baan.nl  
Title: TREX: Workflow TRansactions by Means of EXceptions.  
Author: Remco van Stiphout Theo Dirk Meijler Ad Aerts Dieter Hammer Rin le Comte 
Affiliation: 1 Baan Labs, 2 Eindhoven University of Technology  
Abstract: Workflow Management Systems are becoming more and more important to organizations for the execution of business processes. However, most current systems lack a consistent way of dealing with failures and exceptions. This paper proposes to use an exception-handling mechanism to provide transactional features for workflow management systems. The modeler specifies exception handlers for activities to deal with exceptions. These exception handlers change the workflow that is being executed to deal with exceptions as they arise. Based on this idea we discuss which exceptions and exception handlers should be supported and how they interact to provide transactional capabilities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Fischer, </author> <title> Excellence in Practice: Innovation and Excellence in Workflow and Imaging, Future Strategies, </title> <month> March </month> <year> 1997 </year>
Reference-contexts: 1. Introduction Workflow is a very powerful concept that provides configuration and control of business processes <ref> [1] </ref>. However, one of the problems with most current workflow products is that they do not provide transactional capabilities [2]. In contrast, database transactions are guaranteed to have the well-known ACID-properties. These specify how concurrency issues and failure issues should be managed.
Reference: [2] <editor> Ed. Sushil Jajodia and Larry Kerschberg, </editor> <title> Advanced Transaction Models and Architectures, </title> <publisher> Kluwer Academic, </publisher> <year> 1997 </year>
Reference-contexts: 1. Introduction Workflow is a very powerful concept that provides configuration and control of business processes [1]. However, one of the problems with most current workflow products is that they do not provide transactional capabilities <ref> [2] </ref>. In contrast, database transactions are guaranteed to have the well-known ACID-properties. These specify how concurrency issues and failure issues should be managed.
Reference: [3] <author> J. Gray and A. Reuter, </author> <title> Transaction Processing, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993 </year>
Reference-contexts: These specify how concurrency issues and failure issues should be managed. These issues are managed automatically by a database transaction manager, so the database transaction programmer can focus on what the transaction does, he or she does not need to describe reactions to failures <ref> [3] </ref>. For workflows there is no well-defined set of properties that specifies the reactions to failures. The desired reaction to a failure may vary from activity to activity, so the workflow programmer (modeler) should be able to specify the reaction to a failure for each activity.
Reference: [4] <author> K. M. van Hee, </author> <title> Information Systems Engineering, </title> <publisher> Cambridge University Press, </publisher> <year> 1994 </year>
Reference-contexts: Description of environment This section will describe the environment in which TREX will operate. The environment has three important characteristics: The structure of the workflows. The metalevel the workflow engine supports. The distributed execution of workflows. 2.1 Workflow structure Workflows can be described using high-level Petri-nets <ref> [4] </ref>. Workflows consist of activities, which are linked by places. Places are typed and can contain tokens of that type. These tokens represent information that is passed from one activity to the other. Activities have input places and output places.
Reference: [5] <editor> A. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications Morgan-Kaufmann, </title> <year> 1992. </year>
Reference: [6] <author> P. Chrysanthis and K. Ramamritham, </author> <note> ACTA: The Saga Continues, in [3] </note>
Reference-contexts: The Saga-model <ref> [6] </ref> uses compensating activities to abort workflows. This is a special case of backward exit. The DOM model [7] provides the modeler with compensating activities and contingency activities. However, it does not provide support for nesting or for exit activities.
Reference: [7] <author> A. Buchmann, </author> <title> A Transaction Model for Active Distributed Object Systems, </title> <booktitle> in [3] </booktitle>
Reference-contexts: The Saga-model [6] uses compensating activities to abort workflows. This is a special case of backward exit. The DOM model <ref> [7] </ref> provides the modeler with compensating activities and contingency activities. However, it does not provide support for nesting or for exit activities. The ConTract model [8] also allows the modeler to specify contingency and compensating activities, but also lacks support for nesting.
Reference: [8] <author> H Wchter and A Reuter, </author> <title> The ConTract Model, </title> <booktitle> in [3]. </booktitle>
Reference-contexts: The Saga-model [6] uses compensating activities to abort workflows. This is a special case of backward exit. The DOM model [7] provides the modeler with compensating activities and contingency activities. However, it does not provide support for nesting or for exit activities. The ConTract model <ref> [8] </ref> also allows the modeler to specify contingency and compensating activities, but also lacks support for nesting. It does however provide support for the monitoring of Boolean conditions. The model proposed by F.
Reference: [9] <author> F. Casati, S. Ceri, B. Pernici, G. Pozzi, </author> <title> Workflow Evolution, </title> <note> available at http://xerox.elet.polimi.it/pub/papers/WF/ </note>
Reference-contexts: The ConTract model [8] also allows the modeler to specify contingency and compensating activities, but also lacks support for nesting. It does however provide support for the monitoring of Boolean conditions. The model proposed by F. Casati et al. in <ref> [9] </ref> allows the modeler to choose from a number of handlers to handle an exception in an activity, however the exception handlers cannot change the workflow, which limits their power.
Reference: [10] <author> G. Alonso, D. Agrawal, A. El Abbadi, M Kamath, R. Gnthr, and C. Mohan, </author> <title> Advanced Transaction Models in Workflow Contexts, </title> <booktitle> In 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> Feb </month> <year> 1996. </year>
Reference-contexts: The model proposed by F. Casati et al. in [9] allows the modeler to choose from a number of handlers to handle an exception in an activity, however the exception handlers cannot change the workflow, which limits their power. The Flexible Transactions proposed in <ref> [10] </ref> are functionally equivalent to only using the contingency activity, backward exit and retry handlers in the TREX model. In the WAMO model [11], [12] a workflow activity description language is used (WADL) to describe workflow processes.
Reference: [11] <author> J. Eder, W. Liebhart, </author> <title> "The Workflow Activity Model WAMO", </title> <booktitle> Proc. of the 3rd Int. Conf. on Cooperative Information Systems (CoopIS95), </booktitle> <address> Vienna, Austria, </address> <year> 1995 </year>
Reference-contexts: The Flexible Transactions proposed in [10] are functionally equivalent to only using the contingency activity, backward exit and retry handlers in the TREX model. In the WAMO model <ref> [11] </ref>, [12] a workflow activity description language is used (WADL) to describe workflow processes. The model is based on the concept of transactional workflows and requires the support of an advanced transaction management facility, which TREX does not need. In TREX the underlying workflow specification paradigm is the Petri-net formalism.
Reference: [12] <author> J. Eder, W. Liebhart, </author> <title> "Workflow Recovery", </title> <booktitle> First IFCIS Int. Conf. on Cooperative Information Systems (CoopIS96), IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <address> Brussels, Belgium, </address> <year> 1996, </year> <pages> pp. 124 - 134. </pages>
Reference-contexts: The Flexible Transactions proposed in [10] are functionally equivalent to only using the contingency activity, backward exit and retry handlers in the TREX model. In the WAMO model [11], <ref> [12] </ref> a workflow activity description language is used (WADL) to describe workflow processes. The model is based on the concept of transactional workflows and requires the support of an advanced transaction management facility, which TREX does not need. In TREX the underlying workflow specification paradigm is the Petri-net formalism.
References-found: 12

