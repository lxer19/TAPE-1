URL: http://csgrad.cs.vt.edu/~wang/aor.ps
Refering-URL: http://csgrad.cs.vt.edu/~wang/
Root-URL: http://www.cs.vt.edu
Title: MASSIVELY TIME-PARALLEL, APPROXIMATE SIMULATION OF LOSS QUEUEING SYSTEMS 1  
Author: Jain J. WANG and Marc ABRAMS 
Address: 24061-0106  
Affiliation: Department of Computer Science, Virginia Polytechnic Institute and State University, Blacksburg, VA  
Abstract: A time-parallel simulation obtains parallelism by partitioning the time domain of the simulation. An approximate time-parallel simulation algorithm named GG1K is developed for acyclic networks of loss FCFS G/G/1/K queues. The GG1K algorithm requires two phases. In the first phase, a similar system (i.e., a G/G/1/1 queue) is simulated using the GLM algorithm. Then the resultant trajectory is transformed into an approximate G/G/1/K trajectory in the second phase. The closeness of the approximation is investigated theoretically and experimentally. Our results show that the approximation is highly accurate except when K is very small (e.g., 5) in certain models. The algorithm exploits unbounded parallelism and can achieve near-linear speedup when the number of arrivals simulated is sufficiently large. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S.G. Akl, </author> <title> The Design and Analysis of Parallel Algorithms (Prentice Hall, </title> <year> 1989). </year>
Reference-contexts: Computing hE 1 1 ; E 1 N i requires merging two N -element sorted lists (i.e., hA 1 ; A N i and hD 1 ; D N i). This can be done in time O (N=P + log N ) using a parallel merging algorithm described in <ref> [1] </ref>. While computing hE 1 1 ; E 1 N i, we associate each event time with its corresponding event type (i.e., arrival or departure).
Reference: [2] <author> S. Andradottir and T.J. Ott, </author> <title> Parallel Simulation of Communication Networks through Time Segmentation, </title> <note> working paper. </note>
Reference-contexts: Furthermore, time-parallel simulation is examined in preference to space-parallel simulation because the later exploits practically no parallelism in the models of interest (i.e., single server queues). A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., <ref> [2, 11, 15, 17, 20] </ref>). 3 3. <p> Related Work in Time-Parallel Simulation This section reviews some related time-parallel simulation algorithms: (1) Greenberg, Lubachevsky, and Mitrani's (GLM) prefix algorithm [8], (2) Lin's network multiplexer algorithm [15], (3) Nikolaidis and Fujimoto's bursty arrival algorithm [17], and (4) Andradottir and Ott's time segmentation algorithm <ref> [2] </ref>. The GLM algorithm is discussed with more detail because it forms the basis of our approximation algorithms. 3.1. THE GLM ALGORITHM The GLM algorithm [8] efficiently simulates queueing network models which can be expressed as recurrence relations and transformed into a parallel prefix problem. <p> However, the bursty arrival simulation assumes constant interarrival times and constant job service times within each traffic burst which, in turn, limits the applicability of this approach. 3.4. THE TIME SEGMENTATION ALGORITHM Recently, Andradottir and Ott <ref> [2] </ref> have proposed a time-parallel algorithm for systems that can be modeled by a positive recurrent Markov Chain.
Reference: [3] <author> V.C. Bhavsar and J.R. Isaac, </author> <title> Design and Analysis of Parallel Monte Carlo Algorithms, </title> <note> SIAM J. </note> <institution> Sci. Stat. Comput. 8(1987)s73-s95. </institution>
Reference-contexts: However, care must be taken in starting and terminating a simulation, collecting samples, and calculating estimates from the samples. Otherwise, serious statistical problems may result. Parallel replication simulation and their statistical issues have been studied extensively by Glynn and Heidelberger [7, 9, 10] and some other researchers (e.g., <ref> [3] </ref>) in recent years. Parallel replication is attractive because it is simple and has low overhead. Each processor simply performs a sequential simulation. However, the applicability of parallel replication simulation is limited by the following constraints: C1: The simulation model must fit into the memory of a single processor.
Reference: [4] <author> K.M. Chandy and R. Sherman, </author> <title> Space-Time and Simulation, </title> <booktitle> Proc. of the 1989 SCS Multiconference on Distributed Simulation (1989), </booktitle> <pages> pp. 53-57. </pages>
Reference-contexts: In this paper, the term simulation refers to discrete event simulation. The state space and time domain of a simulation model form a space-time region <ref> [4] </ref>. The state space is defined as the set of state variables representing the simulation model. Parallel simulation refers to the parallel execution of a simulation on multiple processors for the purpose of reducing the execution time. A number of parallel simulation algorithms have been proposed in the past. <p> The speedup of a space-parallel simulation is bounded by the number of logical processes. For models with few components, such as a single server queue, space-parallel simulation is not viable simply because the limited number of components limits parallelism. 2.3. TIME-PARALLEL SIMULATION Chandy and Sherman <ref> [4] </ref> propose a space-time conceptual framework, which views simulation as a process of filling in a space-time rectangle, and suggest that parallelism can be obtained through decomposing the space domain as well as the time domain of a simulation model.
Reference: [5] <author> C. Chang and P. Heidelberger, </author> <title> Fast Simulation of Packet Loss Rates in a Shared Buffer Communications Switch, </title> <type> ICASE Report 93-79, </type> <institution> ICASE, </institution> <address> Hampton, VA (1993). </address>
Reference-contexts: Simulating these models, however, can be a time consuming process. For example, in an ATM (asynchronous transfer mode) network [13], data loss rate can be on the order of 10 9 or lower [19]. Without an appropriate variance reduction technique (e.g., importance sampling <ref> [5] </ref>), simulating such an ATM switch on a single processor workstation may take days of CPU time to obtain a reliable loss rate estimate. Our goal is to devise algorithms that can dramatically reduce the long simulation execution time using the power of parallel processing.
Reference: [6] <author> R.M. Fujimoto, </author> <title> Parallel Discrete Event Simulation, </title> <journal> Commun. </journal> <note> ACM 33(1990)31-53. </note>
Reference-contexts: C3: For a simulation that uses data traces as input (i.e., trace-driven simulation), multiple independent traces that share the same set of statistical parameters are required. 2 2.2. SPACE-PARALLEL SIMULATION A number of space-parallel algorithms have been proposed in the literature (see <ref> [6] </ref> for a survey). Space-parallel algorithms decompose a simulation model into components based on the state space of the model. Each component is mapped into a logical process which is responsible for computing the values of the state variables of the corresponding component over a simulation time interval.
Reference: [7] <author> P. Glynn and P. Heidelberger, </author> <title> Analysis of Parallel Replicated Simulations Under a Completion Time Constraint, </title> <note> ACM TOMACS 1(1991)3-23. </note>
Reference-contexts: However, care must be taken in starting and terminating a simulation, collecting samples, and calculating estimates from the samples. Otherwise, serious statistical problems may result. Parallel replication simulation and their statistical issues have been studied extensively by Glynn and Heidelberger <ref> [7, 9, 10] </ref> and some other researchers (e.g., [3]) in recent years. Parallel replication is attractive because it is simple and has low overhead. Each processor simply performs a sequential simulation.
Reference: [8] <author> A.G. Greenberg, B.D. Lubachevsky and I. Mitrani, </author> <title> Unboundedly Parallel Simulations via Recurrence Relations, </title> <booktitle> Proc. of the Conf. on Measurement and Modeling of Computer Systems (1990), </booktitle> <pages> pp. 1-12. </pages>
Reference-contexts: A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., [2, 11, 15, 17, 20]). 3 3. Related Work in Time-Parallel Simulation This section reviews some related time-parallel simulation algorithms: (1) Greenberg, Lubachevsky, and Mitrani's (GLM) prefix algorithm <ref> [8] </ref>, (2) Lin's network multiplexer algorithm [15], (3) Nikolaidis and Fujimoto's bursty arrival algorithm [17], and (4) Andradottir and Ott's time segmentation algorithm [2]. The GLM algorithm is discussed with more detail because it forms the basis of our approximation algorithms. 3.1. THE GLM ALGORITHM The GLM algorithm [8] efficiently simulates <p> prefix algorithm <ref> [8] </ref>, (2) Lin's network multiplexer algorithm [15], (3) Nikolaidis and Fujimoto's bursty arrival algorithm [17], and (4) Andradottir and Ott's time segmentation algorithm [2]. The GLM algorithm is discussed with more detail because it forms the basis of our approximation algorithms. 3.1. THE GLM ALGORITHM The GLM algorithm [8] efficiently simulates queueing network models which can be expressed as recurrence relations and transformed into a parallel prefix problem. Let &lt; be a domain and ffi be any associative operator on &lt;. <p> Thus, solving A 1 ; : : : ; A N is a prefix problem. For the departure time sequence, equation (2) can be rewritten by a matrix recurrence relation <ref> [8] </ref> to which a prefix algorithm can be applied directly. In the rest of this paper, a sequence x a ; x a+1 ; : : : ; x b1 ; x b , where a &lt; b, will be denoted by hx a ; x b i. <p> In total, the GLM algorithm requires time fi (N=P + log P + log N ) to compute the job arrival time sequence, the job departure time sequence, the event time sequence, and the queue length sequence for a FCFS G/G/1/1 queue <ref> [8] </ref>. 3.2. THE NETWORK MULTIPLEXER ALGORITHM Lin [15] has developed an approximate trace-driven algorithm for simulating network multiplexers which are modeled by loss G/D/1/K queues. The algorithm first partitions the input trace consisting of N arrivals into P subtraces as evenly as possible. <p> Thus, near-linear speedup can be achieved when N P . In addition, because the GG1K algorithm allows arbitrary batch partitioning (section 4.1), "unbounded" parallelism (as defined in <ref> [8] </ref>) is achieved. 4.3. ANALYSIS OF THE APPROXIMATION TECHNIQUE This section analyzes the approximation technique of the GG1K algorithm.
Reference: [9] <author> P. Heidelberger, </author> <title> Statistical Analysis of Parallel Simulations, </title> <booktitle> Proc. of the 1986 Winter Simulation Conference (1986), </booktitle> <pages> pp. 290-295. </pages>
Reference-contexts: However, care must be taken in starting and terminating a simulation, collecting samples, and calculating estimates from the samples. Otherwise, serious statistical problems may result. Parallel replication simulation and their statistical issues have been studied extensively by Glynn and Heidelberger <ref> [7, 9, 10] </ref> and some other researchers (e.g., [3]) in recent years. Parallel replication is attractive because it is simple and has low overhead. Each processor simply performs a sequential simulation. <p> However, the applicability of parallel replication simulation is limited by the following constraints: C1: The simulation model must fit into the memory of a single processor. C2: Each processor must run the simulation for a sufficiently long time to dissipate the initial transient <ref> [9] </ref>. C3: For a simulation that uses data traces as input (i.e., trace-driven simulation), multiple independent traces that share the same set of statistical parameters are required. 2 2.2. SPACE-PARALLEL SIMULATION A number of space-parallel algorithms have been proposed in the literature (see [6] for a survey).
Reference: [10] <author> P. Heidelberger, </author> <title> Discrete Event Simulations and Parallel Processing: Statistical Properties, </title> <journal> SIAM J. Stat. Comput. </journal> <pages> 9(1988)1114-1132. </pages>
Reference-contexts: However, care must be taken in starting and terminating a simulation, collecting samples, and calculating estimates from the samples. Otherwise, serious statistical problems may result. Parallel replication simulation and their statistical issues have been studied extensively by Glynn and Heidelberger <ref> [7, 9, 10] </ref> and some other researchers (e.g., [3]) in recent years. Parallel replication is attractive because it is simple and has low overhead. Each processor simply performs a sequential simulation.
Reference: [11] <author> P. Heidelberger and H.S. Stone, </author> <title> Parallel Trace-Driven Cache Simulation by Time Partitioning, </title> <booktitle> Proc. of the 1990 Winter Simulation Conference (1990), </booktitle> <pages> pp. 734-737. </pages>
Reference-contexts: Furthermore, time-parallel simulation is examined in preference to space-parallel simulation because the later exploits practically no parallelism in the models of interest (i.e., single server queues). A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., <ref> [2, 11, 15, 17, 20] </ref>). 3 3.
Reference: [12] <author> R.E. Lander and M.J. Fischer, </author> <title> Parallel Prefix Computation, </title> <journal> J. of the ACM 27(1980)831-838. </journal>
Reference-contexts: Let &lt; be a domain and ffi be any associative operator on &lt;. Let N be any positive integer and let x 1 ; x 2 ; : : : ; x N be a sequence, where x j 2 &lt; for 1 j N . The prefix problem <ref> [12] </ref> is to compute s j = x 0 ffi x 1 ffi : : : ffi x j , for 1 j N . We first review how the GLM algorithm is applied to a FCFS G/G/1/1 queue.
Reference: [13] <author> J. Lane, </author> <title> ATM Knits Voice, Data on Any Net, </title> <journal> IEEE Spectrum 2(1994)42-45. </journal>
Reference-contexts: Simulating these models, however, can be a time consuming process. For example, in an ATM (asynchronous transfer mode) network <ref> [13] </ref>, data loss rate can be on the order of 10 9 or lower [19]. Without an appropriate variance reduction technique (e.g., importance sampling [5]), simulating such an ATM switch on a single processor workstation may take days of CPU time to obtain a reliable loss rate estimate.
Reference: [14] <author> Y.B. Lin and E.A. Lazowska, </author> <title> Time-Division Algorithm for Parallel Simulation, </title> <note> ACM TOMACS 1(1991)73-83. </note>
Reference: [15] <author> Y.B. Lin, </author> <title> Parallel Trace-Driven Simulation for Packet Loss in Finite-Buffered Voice Multiplexers, </title> <note> Parallel Computing 19(1993)219-228. </note>
Reference-contexts: Furthermore, time-parallel simulation is examined in preference to space-parallel simulation because the later exploits practically no parallelism in the models of interest (i.e., single server queues). A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., <ref> [2, 11, 15, 17, 20] </ref>). 3 3. <p> Solutions to this problem are usually model dependent (e.g., [2, 11, 15, 17, 20]). 3 3. Related Work in Time-Parallel Simulation This section reviews some related time-parallel simulation algorithms: (1) Greenberg, Lubachevsky, and Mitrani's (GLM) prefix algorithm [8], (2) Lin's network multiplexer algorithm <ref> [15] </ref>, (3) Nikolaidis and Fujimoto's bursty arrival algorithm [17], and (4) Andradottir and Ott's time segmentation algorithm [2]. The GLM algorithm is discussed with more detail because it forms the basis of our approximation algorithms. 3.1. <p> In total, the GLM algorithm requires time fi (N=P + log P + log N ) to compute the job arrival time sequence, the job departure time sequence, the event time sequence, and the queue length sequence for a FCFS G/G/1/1 queue [8]. 3.2. THE NETWORK MULTIPLEXER ALGORITHM Lin <ref> [15] </ref> has developed an approximate trace-driven algorithm for simulating network multiplexers which are modeled by loss G/D/1/K queues. The algorithm first partitions the input trace consisting of N arrivals into P subtraces as evenly as possible.
Reference: [16] <author> D. Mitra and I. Mitrani, </author> <title> Control and Coordination Policies for System with Buffers, </title> <booktitle> ACM SIGMETRICS Performance Evaluation Review 17(1989)156-164. </booktitle>
Reference-contexts: If A 1 (i.e., the arrival time of the first job) is given, the arrival and departure time sequences A 1 ; A 2 ; : : : ; A N and D 1 1 ; D 1 N are the solution of the following recurrence relations <ref> [16] </ref>: A j = A j1 + ff j1 1 &lt; j N; (1) j = A j + ffi j j = 1; j1 ; A j ) + ffi j 1 &lt; j N: From (1), A j = A 1 + ff 1 + : : : +
Reference: [17] <author> I. Nikolaidis and R. Fujimoto, </author> <title> Parallel Simulation of High-Speed Network Multiplexers, </title> <booktitle> IEEE Conference on Decision and Control 3(1993), </booktitle> <pages> pp. 2224-2229. </pages>
Reference-contexts: Furthermore, time-parallel simulation is examined in preference to space-parallel simulation because the later exploits practically no parallelism in the models of interest (i.e., single server queues). A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., <ref> [2, 11, 15, 17, 20] </ref>). 3 3. <p> Related Work in Time-Parallel Simulation This section reviews some related time-parallel simulation algorithms: (1) Greenberg, Lubachevsky, and Mitrani's (GLM) prefix algorithm [8], (2) Lin's network multiplexer algorithm [15], (3) Nikolaidis and Fujimoto's bursty arrival algorithm <ref> [17] </ref>, and (4) Andradottir and Ott's time segmentation algorithm [2]. The GLM algorithm is discussed with more detail because it forms the basis of our approximation algorithms. 3.1. <p> However, with a fixed trace length, the accuracy decreases as P increases because when fewer jobs are simulated by each processor, the initial state approximation will increasingly affect the accuracy of the simulation. 3.3. THE BURSTY ARRIVAL ALGORITHM Nikolaidis and Fujimoto <ref> [17] </ref> model a network multiplexer as a finite FCFS queue which receives packets from several sources. The packets generated by each source arrive at the queue in bursts.
Reference: [18] <author> H.S. Stone, </author> <title> High Performance Computer Architecture (Addison Wesley, </title> <year> 1987). </year>
Reference-contexts: That is, (11) can be expressed as: a k " K a k1 ;a k # a k1 Solving equation (12) is a parallel prefix problem. Using Stone's combining scheme <ref> [18, pp. 200-206] </ref> to compute P 1 values of L K a k for all k requires fi (log P ) of execution time. Note that we only compute P 1 initial queue lengths because the initial state of the first batch is the initial state of the system.
Reference: [19] <author> W. Verbiest, L. Pinnoo and B. Voeten, </author> <title> The Impact of the ATM concept on Video Coders, </title> <journal> IEEE Journal on Selected Areas in Communications 6(1988)1623-1631. </journal>
Reference-contexts: Simulating these models, however, can be a time consuming process. For example, in an ATM (asynchronous transfer mode) network [13], data loss rate can be on the order of 10 9 or lower <ref> [19] </ref>. Without an appropriate variance reduction technique (e.g., importance sampling [5]), simulating such an ATM switch on a single processor workstation may take days of CPU time to obtain a reliable loss rate estimate.
Reference: [20] <author> J.J. Wang and M. Abrams, </author> <title> Determining Initial States for Time-Parallel Simulations, </title> <booktitle> Proc. of the 1993 Workshop on Parallel and Distributed Simulation (1993), </booktitle> <pages> pp. 19-26. </pages>
Reference-contexts: Furthermore, time-parallel simulation is examined in preference to space-parallel simulation because the later exploits practically no parallelism in the models of interest (i.e., single server queues). A key problem in time-parallel simulation is determine the batch initial states. Solutions to this problem are usually model dependent (e.g., <ref> [2, 11, 15, 17, 20] </ref>). 3 3. <p> Based on this property, for a G/D/1/K queue simulation, we can thus use the GG1K algorithm to first estimate accurate batch initial states. With these initial states, each processor then performs a regular sequential simulation concurrently with others, so that case-3 approximation bias can be removed. In addition, in <ref> [20] </ref>, we have developed another massively parallel approach which can also be used to efficiently simulate G/D/1/K queues. Acknowledgment The comments of the anonymous reviewers greatly improved the paper. 18
Reference: [21] <author> J.J. Wang and M. Abrams, </author> <title> Massively Time-Parallel, Approximate Simulation of Loss Queueing Systems, </title> <type> Technical Report TR 94-09, </type> <institution> Computer Science Department, VA Tech, </institution> <address> VA (1994). </address> <month> 19 </month>
Reference-contexts: We show that the GG1K algorithm can achieve highly accurate results. When the service times are constant (i.e., G/D/1/K queues), however, the approximation is biased due to the case-3 condition. Nevertheless, the approximation error is negligible except when K is very small (e.g., 5). In <ref> [21] </ref> we have also shown that for a G/D/1/K model, an initial queue length computed by the GG1K algorithm can differ from the exact value by at most one.
References-found: 21

