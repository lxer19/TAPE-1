URL: http://www.cs.twsu.edu/~haynes/theorem.ps
Refering-URL: http://adept.cs.twsu.edu/~thomas/publications.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: [haynes,gamble,knight,rogerw]@euler.mcs.utulsa.edu  
Title: Entailment for Specification Refinement  
Author: Thomas Haynes, Rose Gamble, Leslie Knight and Roger Wainwright 
Address: 600 South College Avenue  Tulsa, OK 74104-3189  
Affiliation: Department of Mathematical Computer Sciences  The University of Tulsa  
Abstract: Specification refinement is part of formal program derivation, a method by which software is directly constructed from a provably correct specification. Because program derivation is an intensive manual exercise used for critical software systems, an automated approach would allow it to be viable for many other types of software systems. The goal of this research is to determine if genetic programming (GP) can be used to automate the specification refinement process. The initial steps toward this goal are to show that a well-known proof logic for program derivation can be encoded such that a GP-based system can infer sentences in the logic for proof of a particular sentence. The results are promising and indicate that GP can be useful in aiding pro gram derivation.
Abstract-found: 1
Intro-found: 1
Reference: [ Brave, 1996 ] <author> Scott Brave. </author> <title> Using genetic programming to evolve recursive programs for tree search. </title> <editor> In P. An-geline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Olsson also does not believe that GP is powerful enough to do program refinement. Since the appearance of his paper, many of the drawbacks he has highlighted have been or are being addressed and evaluated. Specifically GP systems can handle recursion <ref> [ Brave, 1996 ] </ref> , iteration [ Spector and Alpern, 1995 ] , and the automatic creation of functions not foreseen by the programmer [ Koza, 1995 ] . 7 Conclusion This paper demonstrates that genetic programming is a viable method for proving the entailment of a sentence from a knowledge
Reference: [ Chandy and Misra, 1988 ] <author> K. Mani Chandy and Jay--adev Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: We investigate the current technology of genetic programming (GP) [ Koza, 1992 ] to aid in the automated process of program derivation. We begin by using GP to search for the proof of entailment of a sentence in a knowledge base of theories from the UNITY <ref> [ Chandy and Misra, 1988 ] </ref> , which is a popular language for expressing the formal specification of concurrent programs and for using program derivation to develop concurrent implementations that are provably correct. <p> Section 4 presents experimental results. In Section 5 we discuss the system design with respect to the results. Section 6 provides a discussion relevant to our initial goal. Section 7 concludes the paper. 2 The UNITY Language The UNITY language <ref> [ Chandy and Misra, 1988, Kal-tenbach, 1994 ] </ref> includes specification constructs in which safety and progress assertions can be made about a program. The UNITY proof logic allows one to perform formal program derivation. A program developer specifies the problem with an abstract initial specification. <p> The terminal set shown in Table 1 is comprised of enough predicate variables to solve the problems. Both a subset of the theorems presented in Chandy and Misra <ref> [ Chandy and Misra, 1988 ] </ref> and some additional simple logic rules were chosen as the propositional inference rules used to prove entailment. The subset and the simple rules combine to form the function set as shown in Table 2. <p> A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule. <p> Unfortunately the type system does not allow for context sensitive typing. All of the supported functions use "single" levels of typing. The law-of-expansion, which was used in several problems from Chandy and Misra <ref> [ Chandy and Misra, 1988 ] </ref> , presents a problem in which the grandchildren of the LawOfEx-pansion1 node must honor a specific function, i.e. Or, when in the context of this node. This requires the GP to be context sensitive when applying crossover or mutation to a parse tree.
Reference: [ Gamble et al., 1994 ] <author> R. F. Gamble, G.-C. Roman, W. E. Ball, and H. C. Cunningham. </author> <title> Applying formal verification techniques to rule-based programs. </title> <journal> International Journal of Expert Systems, </journal> <volume> 7(3) </volume> <pages> 203-238, </pages> <year> 1994. </year>
Reference: [ Haynes et al., 1995 ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoenefeld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 271-278. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> . A corollary of this is that STGP chromosomes are more representational than vanilla GP chromosomes, and hence tend to be smaller. 3.1 Fitness Evaluation Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. <p> We expected that a larger population size would be needed. However, we are using an STGP system, not a vanilla GP system. The majority of the work is being done by the STGP algorithm, which generates more representational chromosomes, i.e. it reduces the search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> . If we add another level of transitivity, S 7! T , then even with a population size of 2000, the solution does not appear in the early generations.
Reference: [ Haynes et al., 1996 ] <author> Thomas Haynes, Dale Schoenefeld, and Roger Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr. and Peter J. Angeline, editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: This problem restricts the con-text in which functions of type And and Or can be used. The type hierarchy presented in Haynes et. al. <ref> [ Haynes et al., 1996 ] </ref> solves this problem. 5.1 An Alternative Approach The proof of entailment of a sentence in a knowledge base is achieved by the GP derived chromosomes beginning to sense patterns in the given sentences.
Reference: [ Haynes, 1996 ] <author> Thomas Haynes. </author> <title> Duplication of coding segments in genetic programming. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <address> Portland, OR, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Note that in typical GP research, this is seen as a benefit as it is the foundation of the schema theorem <ref> [ Haynes, 1996 ] </ref> . However, we want the inference engine to derive new valid sentences, not to re-derive the same sentence over and over again.
Reference: [ Kaltenbach, 1994 ] <author> Markus Kaltenbach. </author> <title> Model checking for UNITY. </title> <type> Technical Report TR94-31, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> May 9, </month> <year> 1994. </year>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Thus, there is need for a system that incorporates both theorem proving, expert knowledge, and inductive search to make program derivation a viable part of the software development process. We investigate the current technology of genetic programming (GP) <ref> [ Koza, 1992 ] </ref> to aid in the automated process of program derivation. <p> The initial portion of the research is to determine if step (3) above can be performed by the GP. Therefore, we prove that the entailment of a sentence ff from a knowledge base of theories can be inferred automatically by a GP-based system <ref> [ Koza, 1992 ] </ref> . In our example above, the sentence is (P1) and the knowledge base consists of (P2)-(P4). The inference rule representing the transitivity of leads-to shows that (P2)-(P4) entails (P1). <p> The results of our initial research suggests that the possibility exists, with extensions to the current GP technology, that step (2) can be automated as well. 2.1 Introduction to GP Genetic programming is an extension of genetic algorithms for generating computer programs <ref> [ Koza, 1992 ] </ref> . By applying the rules of natural selection, the GP will evolve a program to solve a problem. Given a set of functions and terminals, the GP will generate a random population of programs. <p> The key aspect of the family of genetic algorithms is that even though a particular structure is not effective, it may contain useful sub-parts which when combined with other useful sub-parts, will produce a highly effective structure <ref> [ Koza, 1992 ] </ref> . The fitness function should be designed such that useful substructures are assigned due credit.
Reference: [ Koza, 1995 ] <author> John R. Koza. </author> <title> Two ways of discovering the size and shape of a computer program to solve a problem. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 287-294. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: Specifically GP systems can handle recursion [ Brave, 1996 ] , iteration [ Spector and Alpern, 1995 ] , and the automatic creation of functions not foreseen by the programmer <ref> [ Koza, 1995 ] </ref> . 7 Conclusion This paper demonstrates that genetic programming is a viable method for proving the entailment of a sentence from a knowledge base of UNITY theorems.
Reference: [ Lowry, 1991 ] <author> Michael R. Lowry. </author> <title> Automating the design of local search algorithms. </title> <editor> In Michael R. Lowry and Robert D. McCartney, editors, </editor> <booktitle> Automating Software Design, </booktitle> <pages> pages 515-546. </pages> <publisher> AAAI Press, </publisher> <year> 1991. </year>
Reference-contexts: Such an inductive leap is also difficult to automate. Currently, there are few systems that perform program derivation using rules of thumb. Theorem provers are one way to transform one specification to another <ref> [ Lowry, 1991 ] </ref> , but they require full domain knowledge of the possible transformations. Because of this lack of automation in program derivation, it is rarely used in large software engineering projects. With increased use, program derivation would lead to higher quality software because functional reliability could be guaranteed.
Reference: [ McPhee and Miller, 1995 ] <author> Nicholas Freitag McPhee and Justin Darwin Miller. </author> <title> Accurate replication in genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <pages> pages 303-309. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: The average fitness is tracking the fitness of the best chromosome. This is a linear curve, which is not typical of the curves one gets from most GP problems. (This linearity is similar to that artificially induced in the research of McPhee and Miller <ref> [ McPhee and Miller, 1995 ] </ref> into introns.) The system is exhibiting symptoms caused by an ever growing maximum fitness. As new true sentences are derived, they are added to the KB d to be matched against later.
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year>
Reference-contexts: The second is sufficiency the designer must supply enough functions and terminals to solve the problem. In traditional GP, all of the terminal and function set members must be of the same type. Closure ensures that all inputs to functions can be handled. Montana <ref> [ Montana, 1995 ] </ref> introduced strongly typed genetic programming (STGP), in which the variables, constants, arguments, and returned values can be of any type. <p> We employ a GP package, which utilizes strong typing <ref> [ Montana, 1995 ] </ref> , to apply the inference rules. The main domain specific tasks that a GP researcher must tackle are the determination of what comprises both the terminal and function sets and what is the fitness criteria for a chromosome. <p> Strong typing enables the GP system to guide the pattern matching rule. The restriction of only considering valid child nodes has a side effect of reducing the size of the possible search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> . A corollary of this is that STGP chromosomes are more representational than vanilla GP chromosomes, and hence tend to be smaller. 3.1 Fitness Evaluation Each chromosome represents a propositional logical inference from the KB and is evaluated to determine its fitness. <p> We expected that a larger population size would be needed. However, we are using an STGP system, not a vanilla GP system. The majority of the work is being done by the STGP algorithm, which generates more representational chromosomes, i.e. it reduces the search space <ref> [ Haynes et al., 1995, Montana, 1995 ] </ref> . If we add another level of transitivity, S 7! T , then even with a population size of 2000, the solution does not appear in the early generations. <p> Our system handles this class of problems by enforcing strong typing <ref> [ Montana, 1995 ] </ref> for each function and its children. Tables 1 and 2 show the types used for the terminal and function sets. By strictly enforcing type in-stantiations across both the random generation of chromosomes and crossover, the whole issue of correct proof trees can be avoided.
Reference: [ Olsson, 1995 ] <author> Roland Olsson. </author> <title> Inductive functional programming using incremental program transformation. </title> <journal> Artificial Intelligence, </journal> <volume> 74(1), </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: We also know that heuristic strategies exist for refining the initial program that can be executed by a human in a short period of time. Olsson has conducted research into utilizing evolutionary techniques for synthesizing programs from specifications <ref> [ Olsson, 1995 ] </ref> . His work differs significantly from ours in that he uses input/output pairs to evaluate the fitness of programs and his programs are in Standard ML. The input/output pairs are sample input with desired output.
Reference: [ Roman et al., 1993 ] <author> G.-C. Roman, R. F. Gamble, and W. E. Ball. </author> <title> Formal derivation of rule-based programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(3) </volume> <pages> 277-296, </pages> <month> March </month> <year> 1993. </year>
Reference: [ Russell and Norvig, 1995 ] <author> Stuart Russell and Peter Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: A simple heuristic in the logical inference process is to only apply inferences when there is a match between the "arguments" of the hypothesis and sentences in the KB <ref> [ Chandy and Misra, 1988, Russell and Norvig, 1995 ] </ref> . Strong typing enables the GP system to guide the pattern matching rule.
Reference: [ Spector and Alpern, 1995 ] <author> Lee Spector and Adam Al-pern. </author> <title> Induction and recapitulation of deep musical structure. </title> <booktitle> In Proceedings of Internatinal Joint Conference on Artificial Intelligence, IJCAI'95 Workshop on Music and AI, </booktitle> <year> 1995. </year>
Reference-contexts: Olsson also does not believe that GP is powerful enough to do program refinement. Since the appearance of his paper, many of the drawbacks he has highlighted have been or are being addressed and evaluated. Specifically GP systems can handle recursion [ Brave, 1996 ] , iteration <ref> [ Spector and Alpern, 1995 ] </ref> , and the automatic creation of functions not foreseen by the programmer [ Koza, 1995 ] . 7 Conclusion This paper demonstrates that genetic programming is a viable method for proving the entailment of a sentence from a knowledge base of UNITY theorems.
References-found: 16

