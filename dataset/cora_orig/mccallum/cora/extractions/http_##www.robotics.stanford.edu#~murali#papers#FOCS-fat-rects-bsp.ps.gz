URL: http://www.robotics.stanford.edu/~murali/papers/FOCS-fat-rects-bsp.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~murali/papers/papers.html
Root-URL: http://www.robotics.stanford.edu
Title: Binary Space Partitions for Fat Rectangles rithm to build a binary space partition of size
Author: Pankaj K. Agarwal Edward F. Grove T. M. Murali Jeffrey Scott Vitter p 
Note: log n -time algo  
Abstract: We consider the practical problem of constructing binary space partitions (BSPs) for a set S of n orthogonal, nonintersecting, two-dimensional rectangles in IR 3 such that the aspect ratio of each rectangle in S is at most ff, for some constant ff 1. We present an n2 O( for S. We also show that if m of the n rectangles in S have aspect ratios greater than ff, we can construct a BSP of size n p p p p log n ) time. The constants of proportionality in the big-oh terms are linear in log ff. We extend these results to cases in which the input contains non-orthogonal or intersecting objects. p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vitter. </author> <title> Practical methods for constructing binary space partitions for orthogonal objects. </title> <note> In preparation. </note>
Reference-contexts: Experiments demonstrate that our algorithms work well in prac tice and construct BSPs of near-linear size when most of the rectangles are fat, and perform better than Paterson and Yao's algorithm for orthogonal rectangles <ref> [1] </ref>. <p> We have implemented these algorithms. The practical results are very encouraging and are presented in a companion paper <ref> [1] </ref>. It seems very probable that BSPs of size smaller than n2 O ( p log n ) can be built for n orthogonal rectangles of bounded aspect-ratio in IR 3 . The only lower bound we have is the trivial (n) bound.
Reference: [2] <author> P. K. Agarwal and S. Suri. </author> <title> Surface approximation and geometric partitions. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 2433, </pages> <year> 1994. </year>
Reference-contexts: BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification <ref> [2, 16] </ref>. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [3] <author> J. M. Airey. </author> <title> Increasing Update Rates in the Building Walk-through System with Automatic Model-space Subdivision and Potentially Visible Set Calculations. </title> <type> PhD thesis, </type> <institution> University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems <ref> [3, 23] </ref>, solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao. <p> Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [3, 13, 14, 23, 24] </ref>, provable bounds were first obtained by Paterson and Yao. They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case [20].
Reference: [4] <author> C. Ballieux. </author> <title> Motion planning using binary space partitions. </title> <type> Technical report, </type> <institution> Utrecht University, </institution> <year> 1993. </year>
Reference-contexts: The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics <ref> [4] </ref>, and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [5] <author> A. T. Campbell. </author> <title> Modeling Global Diffuse Illumination for Image Synthesis. </title> <type> Ph.D. thesis, </type> <institution> University of Texas, Austin, </institution> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: The efficiency of the traversal, and thus of the hidden-surface removal algorithm, depends upon the size of the BSP. The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination <ref> [5] </ref>, shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16].
Reference: [6] <author> E. Catmull. </author> <title> A Subdivision Algorithm for Computer Display of Curved Surfaces. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Utah, </institution> <address> Salt Lake City, UT, </address> <month> December </month> <year> 1974. </year>
Reference-contexts: Address: Box 90129, Department of Computer Science, Duke University, Durham, NC 277080129. Email: jsv@cs.duke.edu been studied extensively in both the computer graphics and the computational geometry communities [11, 12]. One of the conceptually simplest solutions to this problem is the z-buffer algorithm <ref> [6, 12] </ref>. This algorithm sequentially processes the objects; and for each object it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. A very fast hidden-surface removal algorithm can be obtained by implementing the z-buffer in hardware.
Reference: [7] <author> N. Chin. </author> <title> Near real-time object-precision shadow generation using BSP treesmaster thesis. </title> <type> Technical Report CUCS-068-90, </type> <institution> University of Columbia, </institution> <year> 1990. </year>
Reference-contexts: The efficiency of the traversal, and thus of the hidden-surface removal algorithm, depends upon the size of the BSP. The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation <ref> [7, 8, 9] </ref>, ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16].
Reference: [8] <author> N. Chin and S. Feiner. </author> <title> Near real-time shadow generation using bsp trees. </title> <journal> In Computer Graphics, </journal> <volume> volume 23, </volume> <pages> pages 99106, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The efficiency of the traversal, and thus of the hidden-surface removal algorithm, depends upon the size of the BSP. The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation <ref> [7, 8, 9] </ref>, ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16].
Reference: [9] <author> N. Chin and S. Feiner. </author> <title> Fast object-precision shadow generation for areal light sources using BSP trees. </title> <editor> In D. Zeltzer, editor, </editor> <booktitle> Computer Graphics (1992 Symposium on Interactive 3D Graphics), </booktitle> <volume> volume 25, </volume> <pages> pages 2130, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: The efficiency of the traversal, and thus of the hidden-surface removal algorithm, depends upon the size of the BSP. The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation <ref> [7, 8, 9] </ref>, ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16].
Reference: [10] <author> M. de Berg. </author> <title> Linear size binary space partitions for fat objects. </title> <booktitle> In Algorithms ESA'95, </booktitle> <year> 1995. </year>
Reference-contexts: IR 3 . de Berg considers a weaker model, the case of fat polyhedra in IR 3 (a poly hedron is said to be fat if its volume is at least a constant fraction of the volume of the smallest sphere enclosing it), although his results extend to higher dimensions <ref> [10] </ref>. One of the main ingredients of our algorithm is an O (n log n)-size BSP for a set of n fat rectangles that are long with respect to a box B, i.e., none of the vertices of the rectangles lie in the interior of B.
Reference: [11] <author> S. E. Dorward. </author> <title> A survey of object-space hidden surface removal. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 4:325362, </volume> <year> 1994. </year>
Reference-contexts: Address: Box 90129, Department of Computer Science, Duke University, Durham, NC 277080129. Email: jsv@cs.duke.edu been studied extensively in both the computer graphics and the computational geometry communities <ref> [11, 12] </ref>. One of the conceptually simplest solutions to this problem is the z-buffer algorithm [6, 12]. This algorithm sequentially processes the objects; and for each object it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer.
Reference: [12] <author> J. D. Foley, A. van Dam, S. K. Feiner, and J. F. Hughes. </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: 1. Introduction How to render a set of opaque or partially transparent objects in IR 3 in a visually realistic way is a fundamental problem in computer graphics <ref> [12, 22] </ref>. A central component of this problem is hidden-surface removal: given a set of objects, a viewpoint, and an image plane, compute the scene visible from the viewpoint on the image plane. <p> Address: Box 90129, Department of Computer Science, Duke University, Durham, NC 277080129. Email: jsv@cs.duke.edu been studied extensively in both the computer graphics and the computational geometry communities <ref> [11, 12] </ref>. One of the conceptually simplest solutions to this problem is the z-buffer algorithm [6, 12]. This algorithm sequentially processes the objects; and for each object it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. <p> Address: Box 90129, Department of Computer Science, Duke University, Durham, NC 277080129. Email: jsv@cs.duke.edu been studied extensively in both the computer graphics and the computational geometry communities [11, 12]. One of the conceptually simplest solutions to this problem is the z-buffer algorithm <ref> [6, 12] </ref>. This algorithm sequentially processes the objects; and for each object it updates the pixels of the image plane covered by the object, based on the distance information stored in the z-buffer. A very fast hidden-surface removal algorithm can be obtained by implementing the z-buffer in hardware. <p> But in graphics-related applications, many common environments like buildings are composed largely of orthogonal rectangles. Moreover, many graphics algorithms approximate non-orthogonal objects by their orthogonal bounding boxes and work with the bounding boxes <ref> [12] </ref>. In another paper, Paterson and Yao show that a BSP of size O (n p n) exists for n non-intersecting, orthogonal rect angles in IR 3 [21]. This bound is optimal in the worst case.
Reference: [13] <author> H. Fuchs, G. D. Abram, and E. D. Grant. </author> <title> Near-real-time shaded display of rigid objects. </title> <journal> Computer Graphics, </journal> <volume> 10(3):6572, </volume> <month> July </month> <year> 1983. </year>
Reference-contexts: Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [3, 13, 14, 23, 24] </ref>, provable bounds were first obtained by Paterson and Yao. They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case [20].
Reference: [14] <author> H. Fuchs, Z. M. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. Comput. Graph., </title> <booktitle> 14(3):124133, 1980. Proc. SIGGRAPH '80. </booktitle>
Reference-contexts: One technique to handle both of these problems is the binary space partition (BSP) introduced by Fuchs et al. <ref> [14] </ref>. They used the BSP to implement the so-called painter's algorithm for hidden-surface removal, which draws the objects to be displayed on the screen in a back-to-front order (in which no object is occluded by any object earlier in the order). <p> Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [3, 13, 14, 23, 24] </ref>, provable bounds were first obtained by Paterson and Yao. They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case [20].
Reference: [15] <author> E. F. Grove, T. M. Murali, and J. S. Vitter. </author> <title> The object complexity model for hidden-surface elimination. </title> <booktitle> In Proc. 7th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 273278, </pages> <year> 1995. </year>
Reference-contexts: A preliminary investigation into an improved model for graphics hardware has been made by Grove et al. <ref> [15] </ref>. Acknowledgments We would like to thank Seth Teller for providing us with the Soda Hall dataset created at the Department of Computer Science, University of Califor-nia at Berkeley.
Reference: [16] <author> J. S. B. Mitchell. </author> <title> On maximum flows in polyhedral domains. </title> <institution> J. Comput. Syst. Sci., 40:88123, </institution> <year> 1990. </year>
Reference-contexts: BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification <ref> [2, 16] </ref>. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [17] <author> B. Naylor. </author> <title> SCULPT an interactive solid modeling tool. </title> <booktitle> In Proceedings of Graphics Interface '90, </booktitle> <pages> pages 138148, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry <ref> [17, 18, 24] </ref>, robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [18] <author> B. Naylor, J. Amanatides, and W. Thibault. </author> <title> Merging BSP trees yields polyhedral set operations. </title> <editor> In F. Baskett, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '90 Proceedings), </booktitle> <volume> volume 24, </volume> <pages> pages 115124, </pages> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry <ref> [17, 18, 24] </ref>, robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [19] <author> B. Naylor and W. Thibault. </author> <title> Application of BSP trees to ray-tracing and CSG evaluation. </title> <type> Technical Report GIT-ICS 86/03, </type> <institution> Georgia Institute of Tech., School of Information and Computer Science, </institution> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: The efficiency of the traversal, and thus of the hidden-surface removal algorithm, depends upon the size of the BSP. The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing <ref> [19] </ref>, visibility problems [3, 23], solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao.
Reference: [20] <author> M. S. Paterson and F. F. Yao. </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling. </title> <journal> Discrete Comput. Geom., </journal> <volume> 5:485503, </volume> <year> 1990. </year>
Reference-contexts: They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case <ref> [20] </ref>. But in graphics-related applications, many common environments like buildings are composed largely of orthogonal rectangles. Moreover, many graphics algorithms approximate non-orthogonal objects by their orthogonal bounding boxes and work with the bounding boxes [12]. <p> At each leaf v of the tree T C , recursive invocations of Steps 1 and 3 build a BSP of size O (jS v j log jS v j) in O (jS v j log jS v j) time (see <ref> [20] </ref> for details). Since P v S v jS C j, where the sum is taken over all leaves v of T C , the total size of the BSP constructed inside C is O (jS C j log jS C j). <p> in S : Remark: In our algorithm for two classes of long rectangles, by using in Step 3 above the algorithm of Paterson and Yao for constructing linear-size BSPs for orthogonal segments in the plane [21], rather than their O (n log n) algorithm for arbitrarily-oriented segments in the plane <ref> [20] </ref>, we can improve the size of the BSP to linear. This improvement implies that we can construct linear-size BSPs for long rectangles. We will not need this improved result below, except in Section 4. 4. <p> In Step 3, if the number of non-orthogonal object at a node dominates the number of fat rectangles, we use Paterson and Yao's algorithm for triangles in IR 3 to construct a BSP of size quadratic in the number of objects in cubic time <ref> [20] </ref>. Theorem 5 A BSP of size np2 O ( p structed in np 2 2 O ( p log n ) time for n objects in IR 3 , of which p are non-orthogonal and the rest are fat rectangles.
Reference: [21] <author> M. S. Paterson and F. F. Yao. </author> <title> Optimal binary space partitions for orthogonal objects. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 13:99113, </address> <year> 1992. </year>
Reference-contexts: Moreover, many graphics algorithms approximate non-orthogonal objects by their orthogonal bounding boxes and work with the bounding boxes [12]. In another paper, Paterson and Yao show that a BSP of size O (n p n) exists for n non-intersecting, orthogonal rect angles in IR 3 <ref> [21] </ref>. This bound is optimal in the worst case. In all known lower bound examples of orthogonal rectan gles in IR 3 requiring BSPs of size (n p n), most of the rectangles are thin. <p> linear in ff 2 , where ff is the maximum aspect ratio of the rectangles in S : Remark: In our algorithm for two classes of long rectangles, by using in Step 3 above the algorithm of Paterson and Yao for constructing linear-size BSPs for orthogonal segments in the plane <ref> [21] </ref>, rather than their O (n log n) algorithm for arbitrarily-oriented segments in the plane [20], we can improve the size of the BSP to linear. This improvement implies that we can construct linear-size BSPs for long rectangles. <p> The crux of the analysis of the size of the BSP produced by this algorithm is counting how many pieces one rectangle can split into when subjected to a specified number of phases. To this effect, we use the following result due to Paterson and Yao <ref> [21] </ref>. Lemma 4 (Paterson-Yao) A rectangle that has been subjected to d phases of cuts (with free cuts used whenever possible) is divided into O (2 d ) rectangles. Theorem 2 A BSP in IR 3 of size O (n 4=3 ) can be constructed for n fat orthogonal rectangles. <p> If k = t = 0, we use the algorithm for long rectangles to construct a BSP for B. 3. If t (f + k), we use the algorithm by Paterson and Yao for orthogonal rectangles in IR 3 to construct a BSP for B <ref> [21] </ref>. 4. If (f + k) &gt; t, we perform one round of the algorithm described in Section 5. This algorithm is recursively invoked on all boxes that B is split into. <p> Analyzing the algorithm's behavior as in Section 5, we can show that S (k; f; t) = O (f log f ); when k = t = 0; S (k; f; t) = O (t p t); when t (f + k) (see <ref> [21] </ref> for details), and when (f + k) &gt; t; S (k; f; t) = D + O (f log a + a 3=2 k + a 3=2 t) The solution to this recurrence is S (k; f; t) = (f + k)2 O ( log (f+k) ) + O (t
Reference: [22] <author> I. E. Sutherland, R. F. Sproull, and R. A. Shumacker. </author> <title> A characterization of ten hidden surface algorithms. </title> <publisher> ACM Comput. </publisher> <address> Surv., 6:155, </address> <year> 1974. </year>
Reference-contexts: 1. Introduction How to render a set of opaque or partially transparent objects in IR 3 in a visually realistic way is a fundamental problem in computer graphics <ref> [12, 22] </ref>. A central component of this problem is hidden-surface removal: given a set of objects, a viewpoint, and an image plane, compute the scene visible from the viewpoint on the image plane.
Reference: [23] <author> S. Teller. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of California, Berkeley, </institution> <year> 1992. </year>
Reference-contexts: As a result, other methods have to be developed either to cull away a large subset of invisible polygons so as to decrease the rendering load on the z-buffer (when models are large; e.g., see <ref> [23] </ref>) or to completely solve the hidden-surface removal problem (when there are very slow or no z-buffers). One technique to handle both of these problems is the binary space partition (BSP) introduced by Fuchs et al. [14]. <p> The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems <ref> [3, 23] </ref>, solid geometry [17, 18, 24], robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao. <p> Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [3, 13, 14, 23, 24] </ref>, provable bounds were first obtained by Paterson and Yao. They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case [20].
Reference: [24] <author> W. C. Thibault and B. F. Naylor. </author> <title> Set operations on polyhedra using binary space partitioning trees. </title> <editor> In M. C. Stone, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '87 Proceedings), </booktitle> <volume> volume 21, </volume> <pages> pages 153162, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The BSP has subsequently proven to be a versatile data structure with applications in many other problems that arise in practiceglobal illumination [5], shadow generation [7, 8, 9], ray tracing [19], visibility problems [3, 23], solid geometry <ref> [17, 18, 24] </ref>, robotics [4], and approximation algorithms for network flows and surface simplification [2, 16]. Although several simple heuristics have been developed for constructing BSPs of reasonable sizes [3, 13, 14, 23, 24], provable bounds were first obtained by Paterson and Yao. <p> Although several simple heuristics have been developed for constructing BSPs of reasonable sizes <ref> [3, 13, 14, 23, 24] </ref>, provable bounds were first obtained by Paterson and Yao. They show that a BSP of size O (n 2 ) can be constructed for n disjoint triangles in IR 3 , which is optimal in the worst case [20].
References-found: 24

