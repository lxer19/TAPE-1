URL: http://www.cs.colorado.edu/~dennis/publications/experiences.ps
Refering-URL: http://www.cs.colorado.edu/~dennis/publications/
Root-URL: http://www.cs.colorado.edu
Title: Experiences With an Object Manager for a Process-Centered Environment  
Author: Dennis Heimbigner 
Date: 23-27 August 1992  
Note: Proceedings of the 18th VLDB Conference  
Address: Boulder, CO 80309-0430  Canada  
Affiliation: Computer Science Dept. University of Colorado  Vancouver, British Columbia,  
Abstract: Process-centered software engineering environments, such as Arcadia, impose a variety of requirements on database technology that to date have not been well supported by available object-oriented databases. Some of these requirements include multi-language access and sharing, support for independent relations, and support for triggers. Triton is an object-oriented database management system designed to support the Arcadia software engineering environment. It can be used as a general purpose DBMS, although it has specialized features to support the software process capabilities in Arcadia in the form of the APPL/A [Sut90] language. Triton was developed as prototype to explore the requirements for software environments and to provide prototypical solutions. By making these requirements known it is hoped that better solutions will eventually be provided by the database community. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the VLDB copyright notice and the title of the publication and its data appear, and notice is given that copying is by permission of the Very Large Data Base Endowment. To copy otherwise, or to republish, requires a fee and/or special permission from the Endowment. 
Abstract-found: 1
Intro-found: 1
Reference: [BOS91] <author> Paul Butterworth, Allen Otis, and Jacob Stein. </author> <title> The Gemstone Object Database Management System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: As a result, we settled on the client-server architecture of Figure 1 with a Triton server residing in one Unix process and each client residing in a separate Unix process. This architecture closely resembles the original Gemstone <ref> [BOS91] </ref> architecture and the proposed Thor [Lis92] architecture. This separation solves many of the multi-language problems by placing the Triton system in one address space and restricting other language programs to separate address spaces. <p> Finally, PCTE+ is very coarse grained; it supports objects of the size of files and very small objects could suffer large penalties in space and speed of access. GemStone <ref> [BOS91] </ref>, although commercial, seem much more promising as an alternative to Triton. GemStone is derived from Smalltalk [GR83] and its interpretive nature would seem to make it possible to augment the system with the exact event mechanisms required. Interpretation also allows for dynamic loading.
Reference: [CDF + 86] <author> Michael J. Carey, David J. DeWitt, Daniel Frank, Goetz Graefe, Joel E. Richardson, Eugene J. Shekita, and M. Muralikrishna. </author> <title> The Architecture of the EXODUS Extensible DBMS: a Preliminary Report. </title> <type> Technical Report Computer Sciences Technical Report #644, </type> <institution> University of Wisconsin, Madison, Computer Sciences Department, </institution> <month> May </month> <year> 1986. </year>
Reference-contexts: Triton uses an existing system, Exodus [CDG + 90], to provide much of its functionality (basic type model, buffering, persistence, etc.). Exodus was originally characterized as a database toolkit <ref> [CDF + 86] </ref> where a database implementor used the elements of Exodus to build a custom DBMS. In practice, Exodus is better 2 The issue of commercial systems is addressed in section 9. 3 Arcadia uses several object managers for a variety of purposes.
Reference: [CDG + 90] <author> Michael Carey, Dave Dewitt, Goetz Graefe, Doug Haight, Joel Richardson, David Schuh, E. Shekita, and S. Vanden-berg. </author> <title> The EXODUS Extensible DBMS Project: an Overview. </title> <editor> In Stan Zdonik and David Maier, editors, </editor> <booktitle> Readings in Object-Oriented Databases. </booktitle> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: The primary thrust of this report is to describe those requirements and the solutions embodied in Triton with the hope that the database community will incorporate better solutions in their next round of research prototypes. Triton uses an existing system, Exodus <ref> [CDG + 90] </ref>, to provide much of its functionality (basic type model, buffering, persistence, etc.). Exodus was originally characterized as a database toolkit [CDF + 86] where a database implementor used the elements of Exodus to build a custom DBMS. <p> In fact, the issue 592 was moot because Postgres did not become available until well after the Triton project was underway. This left the Exodus system <ref> [CDG + 90] </ref> from Wisconsin as our choice. In retrospect, this turned out to be a good choice because Exodus was quite robust and support was reasonable (given the inevitable limits associated with any research effort).
Reference: [Coh88] <author> Don Cohen. </author> <title> AP5 Manual. </title> <institution> Univ. of Southern California, Information Sciences Institute, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: This requirement stems from a variety of constraints. For example, many DOD programs mandate the use of Ada as the language for implementing systems. Many artificial intelligence systems, such as AP5 <ref> [Coh88] </ref>, already have a heavy investment in Lisp, but could benefit from access to a object base. Additionally, we have seen that a single persistent programming language interface makes too many assumptions that turn out to be invalid for one or another application. <p> But in defense of this activity, it is important to note that in recent years in the database community (and in the commercial word as well), 5 A state-based approach, as in AP5 <ref> [Coh88] </ref>, is also possible in which the trigger is invoked when some defined system state is reached. Triton does not support this style of trigger. 590 many new research efforts have assumed a persis-tent programming language as their basic architecture [RC87, TW91, D + 91, LLOW91].
Reference: [D + 91] <editor> O. Deux et al. </editor> <title> The O 2 System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 34-48, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: Triton does not support this style of trigger. 590 many new research efforts have assumed a persis-tent programming language as their basic architecture <ref> [RC87, TW91, D + 91, LLOW91] </ref>. The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen. <p> The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen. Even in the cases <ref> [D + 91, TW91] </ref> where multiple languages are, in theory, supported, there is no obvious provision for sharing data between those language. In any case, this language-specific approach turns out to be completely incorrect for an environment such as Arcadia. Multiple languages sharing data is the norm, not the exception. <p> At the current time, there are a number of systems that, with more or less work, could serve as replacements for Triton. O 2 <ref> [D + 91] </ref> and the Texas Instruments OODB [TW91] are similar to Exodus in that they support one or more persistent programming languages.
Reference: [GMT86] <author> Ferdinando Gallo, Regis Minot, and Ian Thomas. </author> <title> The Object Management System of PCTE as a Software Engineering Database Management System. </title> <booktitle> In Proc. Second ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 12 - 15, </pages> <year> 1986. </year>
Reference-contexts: We originally rejected commercial systems, and in revisiting the alternatives, the problems of license and source code still remain. But we can now see that most of the commercial object-oriented systems support the persistent programming language model, which makes them no better than Exodus for our purposes. PCTE+ <ref> [GMT86] </ref> is a often considered by the software community to be the first choice as object manager for an environment. Simplifying somewhat, PCTE+ can be viewed as an augmented file system in which files can have contents and attributes, as well as links to other files.
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Finally, PCTE+ is very coarse grained; it supports objects of the size of files and very small objects could suffer large penalties in space and speed of access. GemStone [BOS91], although commercial, seem much more promising as an alternative to Triton. GemStone is derived from Smalltalk <ref> [GR83] </ref> and its interpretive nature would seem to make it possible to augment the system with the exact event mechanisms required. Interpretation also allows for dynamic loading. It is not clear if GemStone has support for full heterogeneous access.
Reference: [Hei90] <author> Dennis Heimbigner. </author> <title> Triton Reference Manual. </title> <type> Technical Report CU-CS-483-90, </type> <institution> University of Colorado, Department of Computer Science, Boulder, Colorado 80309, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: For any given type in the client language there must be a mapping to some equivalent E type (s). In practice, we have had little difficulty finding a reasonably large subset of E types that can be mapped to and from the other language type systems (see <ref> [Hei90] </ref>). Multi-language access to Triton is provided by a standard remote procedure call protocol (Q) on top of TCP/IP. Q is designed to make access between Ada and C as simple as possible, and defines standard mappings between a subset of C types and a subset of Ada types. <p> This code is loaded into the server to define methods, functions, and triggers. For this to work, Triton requires the use of a dynamic loader. For the details behind dynamic loading, see <ref> [Hei90] </ref>. After the method has been loaded, subsequent invocations are direct. Additionally, it is possible (and common) to load multiple methods at one time, thus speeding up the process considerably. Unfortunately, in Triton there are two definitions of the structure of, for example, a class type. <p> The dotted arrow in Figure 1 from the APPL/A generic interface to the E-code represents this correspondence. The Triton reference manual <ref> [Hei90] </ref> may be consulted for the details. 7.2 APPL/A Trigger Support Triton has augmented the E capabilities with a simple form of trigger. As might be expected, a trigger is a piece of code that is invoked whenever some event occurs 5 .
Reference: [Hew89] <author> Hewlett-Packard. </author> <title> HP Encapsulator: Integrating Applications into the HP Soft-Bench Platform, 1989. HP Part No. </title> <publisher> B1626-90000. </publisher>
Reference-contexts: Most environments are moving to use a more general notion of "event" as a replacement for triggers. Control integration via events (as in Field [Rei90] and HP-SoftBench <ref> [Hew89] </ref>) is rapidly becoming the norm. It is important to note that event systems are distinct from the database notions of triggers and rules. 8 One could use other structures, such as functions, as long as independent definition was maintained. Functions, however, would not be as useful in bi-directional query.
Reference: [Kad92] <author> R. Kadia. </author> <title> Programming Heterogeneous Transactions for SDE's. </title> <booktitle> In Proceedings of the Darpa Software Software Technology Conference, </booktitle> <pages> pages 287-302, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: A sufficiently dynamic object manager is also important in providing extensibility in an environment by allowing incremental extensions to the schema and hence to the range of tools that can share information. The Arcadia project <ref> [Kad92, TBC + 88] </ref> is constructing an environment that is one of the first of a new class of so-called software-process centered (or software-process driven) engineering environments. A process centered environment is one in which the programmer is guided in the task of producing software according to some methodology.
Reference: [Lis92] <author> Barbara Liskov. </author> <title> Preliminary Design of the Thor Object-Oriented Database System. </title> <booktitle> In Proceedings of the Darpa Software Software Technology Conference, </booktitle> <pages> pages 50-62, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: As a result, we settled on the client-server architecture of Figure 1 with a Triton server residing in one Unix process and each client residing in a separate Unix process. This architecture closely resembles the original Gemstone [BOS91] architecture and the proposed Thor <ref> [Lis92] </ref> architecture. This separation solves many of the multi-language problems by placing the Triton system in one address space and restricting other language programs to separate address spaces.
Reference: [LLOW91] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The Ob-jectstore Database System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Triton does not support this style of trigger. 590 many new research efforts have assumed a persis-tent programming language as their basic architecture <ref> [RC87, TW91, D + 91, LLOW91] </ref>. The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen.
Reference: [Mai91] <author> David Maier. Re: </author> <title> Looking for definition of OODB (an OODB manifesto). Message to comp.object news group, </title> <month> 28 August </month> <year> 1991. </year>
Reference-contexts: This happened with Ada and caused serious problems. for run-time systems, but until then, code mixing is fraught with peril. This dictum also applies to loading behavioral methods into the client address space. It has been proposed <ref> [Mai91] </ref> that the server should keep either interpretive versions of method bodies, or per-language versions of compiled method bodies that can be loaded into the client as needed.
Reference: [MD89] <author> Dennis R. McCarthy and Umeshwar Dayal. </author> <title> The Architecture of An Active Data Base Management System. </title> <booktitle> In Proc. of the ACM SIGMOD International Conf. 594 on the Management of Data, </booktitle> <pages> pages 215 - 224, </pages> <year> 1989. </year>
Reference-contexts: More importantly, it is assumed that the action to be taken on event occurrence is known to the database system. With the possible exception of HIPAC <ref> [MD89] </ref>, database systems appear ill-prepared to export their events to an external event dispatcher or to receive externally generated events. 8.6 Performance The performance of Triton leaves much to be desired.
Reference: [MS89] <author> Mark Maybee and Stephen D. Sykes. </author> <title> Q: Towards a multi-lingual interprocess communications model. Arcadia Document UCI-89-06, </title> <institution> Department of Information and Computer Science, University of Cal-ifornia, </institution> <address> Irvine, Irvine, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: We decided that our only recourse was obtain a database manager offering a close match to our needs and to modify it. 3 Overview of the Triton Ar chitecture with the server using a Remote Procedure Call (RPC) protocol. In this case, we use Q <ref> [MS89] </ref>, which is a variant of the Sun RPC/XDR protocol that has some adaptations for multi-language interoperability. This is indicated in the figure by the arrow labeled "Q". It represents a "calls" relationship between client and server.
Reference: [Ost87] <author> Leon J. Osterweil. </author> <title> Software Processes are Software Too. </title> <booktitle> In Proc. Ninth International Conference on Software Engineering, 1987. </booktitle> <address> Monterey, CA, March 30 - April 2, </address> <year> 1987. </year>
Reference-contexts: It is assumed that a process-centered environment will be controlled by a model of the process written in some formalism. Osterweil <ref> [Ost87] </ref> has proposed the use of an executable programming language as that formalism. Such a language is called a process programming language (PPL). Arcadia uses a process programming language approach as the basis for its environment. Arcadia has been active in object management since its inception.
Reference: [RC87] <author> Joel E. Richardson and Michael J. Carey. </author> <title> Programming Constructs for Database System Implementation in EXODUS. </title> <booktitle> In Proc. ACM SIGMOD Conf., </booktitle> <pages> pages 208-219, </pages> <year> 1987. </year>
Reference-contexts: See [WWFT88] for information about another object management activity within the Arcadia project. characterized as a persistent programming language system. It consists of a storage manager and a persistent programming language named E <ref> [RC87] </ref>. E may be considered as a persistent version of C++, and like C++ it has the C type system augmented by classes with behaviorally defined methods. <p> Triton does not support this style of trigger. 590 many new research efforts have assumed a persis-tent programming language as their basic architecture <ref> [RC87, TW91, D + 91, LLOW91] </ref>. The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen.
Reference: [Rei90] <author> Steven P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Environment. </title> <journal> IEEE Software, </journal> <pages> pages 57-67, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: As the Arcadia environment has evolved, a more important problem has surfaced: it is not clear that triggers even represent the correct abstraction. Most environments are moving to use a more general notion of "event" as a replacement for triggers. Control integration via events (as in Field <ref> [Rei90] </ref> and HP-SoftBench [Hew89]) is rapidly becoming the norm. It is important to note that event systems are distinct from the database notions of triggers and rules. 8 One could use other structures, such as functions, as long as independent definition was maintained.
Reference: [RS87] <author> Lawrence A. Rowe and Michael R. Stone-braker. </author> <title> The POSTGRES Data Model. </title> <booktitle> In Proc. of the Thirteenth International Conf. on Very Large Data Bases, </booktitle> <pages> pages 83 - 96, </pages> <year> 1987. </year>
Reference-contexts: Presumably, with some work, these systems could be used in Triton in place of Exodus by using one of their languages as a common model and adapting the dynamic loader to work with that language. Postgres <ref> [RS87, SR86, SK91] </ref> is now available, and if we had the resources, it would be interesting to rehost Triton onto Postgres. It obviously supports relations well, it has a catalog, and it has a form of trigger. The simulation cost question is still open.
Reference: [Rum87] <author> James Rumbaugh. </author> <title> Relations as Semantic Constructs in an Object-Oriented language. </title> <booktitle> In OOPSLA'87, </booktitle> <pages> pages 466-481, </pages> <address> Orlando, Florida, </address> <month> December </month> <year> 1987. </year>
Reference-contexts: As new analysis techniques are defined, new annotations may be needed. Relations, defined over node-types, but independent of (i.e., not known to) the node type have proven to be extremely useful in representing such annotations, a fact that others have recognized <ref> [Rum87] </ref> 8 . Our concern for relations has often been dismissed out-of-hand by proponents of pure object-oriented languages. The claim is usually made that the user can just define relations using the object-oriented type system, and technically that view is correct. The issue is more one of notation than power.
Reference: [SHO90] <author> Stanley M. Sutton, Jr., Dennis Heim-bigner, and Leon J. Osterweil. </author> <title> Language Constructs for Managing Change in Process-Centered Environments. </title> <booktitle> In Proc. of the Fourth ACM SIGSOFT Symposium on Practical Software Development Environments, </booktitle> <pages> pages 206-217, </pages> <address> 1990. Irvine, California. </address>
Reference-contexts: It is assumed that multi-ple processes may be defined using a so-called "process programming" (or "process coding") language. APPL/A <ref> [Sut90, SHO90] </ref> is a prototype of one such process programming language. It is defined as an extension to Ada [Uni83].
Reference: [SK91] <author> Michael Stonebraker and Greg Kem-nitz. </author> <title> The POSTGRES Next Generation Database Management System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-92, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: Presumably, with some work, these systems could be used in Triton in place of Exodus by using one of their languages as a common model and adapting the dynamic loader to work with that language. Postgres <ref> [RS87, SR86, SK91] </ref> is now available, and if we had the resources, it would be interesting to rehost Triton onto Postgres. It obviously supports relations well, it has a catalog, and it has a form of trigger. The simulation cost question is still open.
Reference: [SR86] <author> Michael Stonebraker and Lawrence A. Rowe. </author> <title> The Design of POSTGRES. </title> <booktitle> In Proc. of the ACM SIGMOD International Conf. on the Management of Data, </booktitle> <pages> pages 340 - 355, </pages> <year> 1986. </year>
Reference-contexts: Presumably, with some work, these systems could be used in Triton in place of Exodus by using one of their languages as a common model and adapting the dynamic loader to work with that language. Postgres <ref> [RS87, SR86, SK91] </ref> is now available, and if we had the resources, it would be interesting to rehost Triton onto Postgres. It obviously supports relations well, it has a catalog, and it has a form of trigger. The simulation cost question is still open.
Reference: [Sut90] <author> Stanley M. Sutton, Jr. APPL/A: </author> <title> A Prototype Language for Software-Process Programming. </title> <type> PhD thesis, </type> <institution> University of Colorado, </institution> <month> August </month> <year> 1990. </year>
Reference-contexts: It is assumed that multi-ple processes may be defined using a so-called "process programming" (or "process coding") language. APPL/A <ref> [Sut90, SHO90] </ref> is a prototype of one such process programming language. It is defined as an extension to Ada [Uni83]. <p> This last operation (find) is used to provide a combination of tuple-at-at-time access and associative retrieval. As with Ada packages, a relation definitions has two pieces: a specification and a body. The body is expected to provide implementations for the interface operations defined in the specification. See <ref> [Sut90] </ref> for details. Referring back to Figure 1, we can now examine the client architecture. The client shown there reflects the various layers required by an APPL/A program to communicate with the server. The top level application is defined in terms of a collection of APPL/A relation specifications.
Reference: [SZH + 91] <author> S. M. Sutton Jr., H. Ziv, D. Heimbigner, M. Maybee, L. J. Osterweil, X. Song, and H. E. Yessayan. </author> <title> Programming a Software Requirements Specification Process. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <address> Re-dondo Beach, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: We are investigating the possibility of a Mach port. Triton is used within Arcadia to support our current process programs, such as REBUS <ref> [SZH + 91] </ref>. It has been exported to some external groups such as the STARS project.
Reference: [TBC + 88] <author> Richard N. Taylor, Frank C. Belz, Lori A. Clarke, Leon J. Osterweil, Richard W. Selby, Jack C. Wileden, Alexander Wolf, and Michael Young. </author> <title> Foundations for the Arcadia Environment Architecture. </title> <booktitle> In Proc. ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 1 - 13. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1988. </year>
Reference-contexts: A sufficiently dynamic object manager is also important in providing extensibility in an environment by allowing incremental extensions to the schema and hence to the range of tools that can share information. The Arcadia project <ref> [Kad92, TBC + 88] </ref> is constructing an environment that is one of the first of a new class of so-called software-process centered (or software-process driven) engineering environments. A process centered environment is one in which the programmer is guided in the task of producing software according to some methodology.
Reference: [TW91] <author> Craig Thompson and David Wells. </author> <title> Report on DARPA open OODB workshop I: Preliminary architecture workshop. </title> <type> Technical report, </type> <institution> Information Technologies Laboratory, Computer Science Center, Texas Instruments Incorporated, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Triton does not support this style of trigger. 590 many new research efforts have assumed a persis-tent programming language as their basic architecture <ref> [RC87, TW91, D + 91, LLOW91] </ref>. The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen. <p> The assumption implicit in this approach is that all the programs that access stored data will be written in whatever persistent programming language has been chosen. Even in the cases <ref> [D + 91, TW91] </ref> where multiple languages are, in theory, supported, there is no obvious provision for sharing data between those language. In any case, this language-specific approach turns out to be completely incorrect for an environment such as Arcadia. Multiple languages sharing data is the norm, not the exception. <p> At the current time, there are a number of systems that, with more or less work, could serve as replacements for Triton. O 2 [D + 91] and the Texas Instruments OODB <ref> [TW91] </ref> are similar to Exodus in that they support one or more persistent programming languages. Presumably, with some work, these systems could be used in Triton in place of Exodus by using one of their languages as a common model and adapting the dynamic loader to work with that language.
Reference: [Uni83] <institution> United States Department of Defense. </institution> <note> Reference Manual for the Ada Programming Language, 1983. ANSI/MIL-STD-1815A-1983. </note>
Reference-contexts: It is assumed that multi-ple processes may be defined using a so-called "process programming" (or "process coding") language. APPL/A [Sut90, SHO90] is a prototype of one such process programming language. It is defined as an extension to Ada <ref> [Uni83] </ref>. There is some consensus in the software engineering community that object management support for process (and the products produced by the process) entails at least the following features: relations, triggers, constraints, and non-standard transactions.
Reference: [WWFT88] <author> Jack C. Wileden, Alexander L. Wolf, Charles D. Fisher, and Peri L. Tarr. PGraphite: </author> <title> An Experiment in Persistent Typed Object Management. Arcadia Document UM-88-05, </title> <institution> Software Development Laboratory, Computer and Information Science Department, University of Massachusetts, Amherst, Massachusetts, </institution> <year> 1988. </year>
Reference-contexts: In practice, Exodus is better 2 The issue of commercial systems is addressed in section 9. 3 Arcadia uses several object managers for a variety of purposes. See <ref> [WWFT88] </ref> for information about another object management activity within the Arcadia project. characterized as a persistent programming language system. It consists of a storage manager and a persistent programming language named E [RC87]. <p> Additionally, we have seen that a single persistent programming language interface makes too many assumptions that turn out to be invalid for one or another application. For example, Arcadia uses two rather different models of persistence: persistence by type (as in E), and persistence by instance (as in PGraphite <ref> [WWFT88] </ref>. Both of these models have good justifications in terms of the applications that use them, but it is rare to find a database system that supports more than one model of persistence. Multi-language interoperability covers two capabilities.
References-found: 29

