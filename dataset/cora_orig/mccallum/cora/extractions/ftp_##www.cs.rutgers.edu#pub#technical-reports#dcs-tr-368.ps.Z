URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-368.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.cs.rutgers.edu
Title: On Algorithms for Simplicial Depth  
Author: Andrew Y. Cheng Ming Ouyang 
Address: New Brunswick, New Jersey 08903  
Affiliation: Department of Industrial Engineering  Department of Computer Science Rutgers University  
Abstract: Simplicial depth is a way to measure how deep a point is among a set of points. Efficient algorithms to compute it are important to the usefulness of its applications, such as in multivariate analysis in statistics. A straightforward method takes O(n d+1 ) time when the points are in d-dimensional space. We discuss an algorithm that takes O(n 2 ) time when the points are in three-dimensional space, and we generalize it to four-dimensional space with a time complexity of O(n 4 ). For spaces higher than four-dimensional, there are no known algorithms faster than the straightforward method. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Boros and Z. Furedi, </author> <title> "Triangles Covering the Centre of an n-set", </title> <booktitle> Geometriae Dedicata 17 (1984), </booktitle> <pages> 69-77. </pages>
Reference-contexts: When p is in P , the following identity holds: (p; P ) = (p; P fpg) + jP j 1 ! 1 Boros and Furedi <ref> [1] </ref> have shown that for any set P of n points in E 2 , there exists a point p such that (p; P ) = n 3 =27 + O (n 2 ); furthermore, there is a set Q of n points such that for all points p in the
Reference: [2] <author> A. Y. Cheng, </author> <title> "Control Chart Techniques for Complex Settings and Establishment of Threshold System", </title> <type> Ph.D. dissertation, </type> <institution> Rutgers University, </institution> <note> in preparation. </note>
Reference-contexts: Liu [5] observes that simplicial depth is invariant under nonsingular affine transformations; we will use this property in the development of algorithms. Simplicial depths have applications in statistics <ref> [2, 5, 6] </ref>; and efficient algorithms to compute them are of central concern.
Reference: [3] <author> J. Gil, W. Steiger, and A. Wigderson, </author> <title> "Geometric Medians", </title> <booktitle> Discrete Mathematics 108 (1992), </booktitle> <pages> 37-51. </pages>
Reference-contexts: However, in one-dimensional space, simplicial depth can be computed in O (n) time by a partition algorithm; in two-dimensional space, simplicial depth can be computed in O (n lg n) time <ref> [3, 4, 8] </ref>. 2 Computing simplicial depth in E 3 2.1 Counting tetrahedra not containing p Rousseeuw and Ruts have briefly described an algorithm that computes simplicial depth in spaces higher than two-dimensional (page 523, [8]). We find it difficult to understand their argument; let us elaborate. <p> We can not find a way to account for this discrepancy. 2.2 Counting tetrahedra containing p Gil, Steiger, and Wigderson <ref> [3] </ref> have described an algorithm that computes simplicial depth in three-dimensional space; however, there is a slight flaw. We describe a modification. Let P be a set of n points in general position in E 3 , and let p be a point in general position with P . <p> We describe a modification. Let P be a set of n points in general position in E 3 , and let p be a point in general position with P . Lemmas 1 and 2 are from <ref> [3] </ref>. Lemma 1. Let p 0 i be any point on the ray from p through p i ; the tetrahedron 4p i p j p k p l contains p if and only if the tetrahedron 4p 0 i p j p k p l contains p. <p> The flaw of the algorithm in <ref> [3] </ref> is in that it treats 0 differently: it counts all containments in 0 , not just the new ones as if rotating from n1 to 0 ; some of the containments in 0 will move out and reappear later, and then they are counted again; therefore, some tetrahedra are counted <p> Except for this difference, the two algorithms work in the same way, and they take O (n 2 ) time; see <ref> [3] </ref> for details. 4 3 Computing simplicial depth in E 4 We can easily adapt the algorithm in Section 2.2 to four-dimensional space. Lemmas 1, 2, and 3 can be generalized to E 4 .
Reference: [4] <author> S. Khuller and J. S. B. Mitchell, </author> <title> "On a Triangle Counting Problem", </title> <journal> Information Pro--cessing Letters 33 (1989), </journal> <pages> 319-321. </pages>
Reference-contexts: However, in one-dimensional space, simplicial depth can be computed in O (n) time by a partition algorithm; in two-dimensional space, simplicial depth can be computed in O (n lg n) time <ref> [3, 4, 8] </ref>. 2 Computing simplicial depth in E 3 2.1 Counting tetrahedra not containing p Rousseeuw and Ruts have briefly described an algorithm that computes simplicial depth in spaces higher than two-dimensional (page 523, [8]). We find it difficult to understand their argument; let us elaborate.
Reference: [5] <author> R. Y. Liu, </author> <title> "On a Notion of Data Depth Based on Random Simplicies", </title> <booktitle> The Annals of Statistics 18 (1990), </booktitle> <pages> 405-414. </pages>
Reference-contexts: Liu <ref> [5] </ref> observes that simplicial depth is invariant under nonsingular affine transformations; we will use this property in the development of algorithms. Simplicial depths have applications in statistics [2, 5, 6]; and efficient algorithms to compute them are of central concern. <p> Liu [5] observes that simplicial depth is invariant under nonsingular affine transformations; we will use this property in the development of algorithms. Simplicial depths have applications in statistics <ref> [2, 5, 6] </ref>; and efficient algorithms to compute them are of central concern.
Reference: [6] <author> R. Y. Liu and K. Singh, </author> <title> "A Quality Index Based on Data Depth and Multivariate Rank Tests", </title> <journal> Journal of American Statistical Association 88 (1993), </journal> <pages> 252-260. </pages>
Reference-contexts: Liu [5] observes that simplicial depth is invariant under nonsingular affine transformations; we will use this property in the development of algorithms. Simplicial depths have applications in statistics <ref> [2, 5, 6] </ref>; and efficient algorithms to compute them are of central concern.
Reference: [7] <author> F. P. Preparata and M. I. Shamos, </author> <title> "Computational Geometry", </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: A straightforward method for d-dimensional simplicial depth is to generate all the simplices and then to count the number of containments; since there are O (n d+1 ) simplices, it takes O (n d+1 ) time in the real RAM model of computation <ref> [7] </ref>.
Reference: [8] <author> P. J. Rousseeuw and I. Ruts, </author> <title> "Bivariate Location Depth", </title> <booktitle> Applied Statistics 45 (1996), </booktitle> <pages> 516-526. </pages>
Reference-contexts: However, in one-dimensional space, simplicial depth can be computed in O (n) time by a partition algorithm; in two-dimensional space, simplicial depth can be computed in O (n lg n) time <ref> [3, 4, 8] </ref>. 2 Computing simplicial depth in E 3 2.1 Counting tetrahedra not containing p Rousseeuw and Ruts have briefly described an algorithm that computes simplicial depth in spaces higher than two-dimensional (page 523, [8]). We find it difficult to understand their argument; let us elaborate. <p> algorithm; in two-dimensional space, simplicial depth can be computed in O (n lg n) time [3, 4, 8]. 2 Computing simplicial depth in E 3 2.1 Counting tetrahedra not containing p Rousseeuw and Ruts have briefly described an algorithm that computes simplicial depth in spaces higher than two-dimensional (page 523, <ref> [8] </ref>). We find it difficult to understand their argument; let us elaborate. Their idea is as follows. <p> The argument is that if a triangle 4 i (p j ) i (p k ) i (p l ) does not contain p, then the tetrahedron 4p i p j p k p l does not contain p. We can use the algorithm for two-dimensional simplicial depth in <ref> [8] </ref> to count the triangles in i , i = 1; 2; : : : ; n, that do not contain p, and the sum of these counts corresponds to the number of tetrahedra that do not contain p. We need some terminology to explain the difficulty we have encountered.
References-found: 8

