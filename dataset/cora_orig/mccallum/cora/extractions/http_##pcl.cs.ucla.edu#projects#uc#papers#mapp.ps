URL: http://pcl.cs.ucla.edu/projects/uc/papers/mapp.ps
Refering-URL: http://pcl.cs.ucla.edu/projects/uc/papers/
Root-URL: http://www.cs.ucla.edu
Title: Size:M*N Original Timing Mapped Timings Mapped Timings speedup original VP ratio reduced VP ratio Table
Author: tectures. [] J.R. Allen and K. Kennedy. R. Bagrodia, K.M. Chandy, and E. Kwan. [] K.M. Chandy and J. Misra. M. Chen, Young-Il Choo, and Jingke Li. [] S. Freudenberger, J. Schwartz, and M. Sharir. [] D.J. Kuck, R.H. Kuhn, D.A. Padua, B. Leasure, and M. Wolfe. [] G. Sabot. Press, . [] E. Schonberg, J. Schwartz, and M. Sharir. 
Address: New York, Novem-ber 1990.  9700 South Cass Avenue, Argonne, IL 60439,  
Note: This project was also influenced by the considerable  pages 186-205. IEEE Computer Society Press, 1985. [2]  A language for the Connection Machine. In Supercomputing '90, pages 525-534,  Parallel Program Design: A Foundation. Addison-Wesley Publishing Company, Inc., 1988. [4]  Experience with the SETL optimizer. ACM TOPLAS,  In Eigth ACM Symposium on Principles of Programming Languages, pages 207-218,  [9] Argonne National Laboratory.  ACM TOPLAS, 3(2), April 1981. [12] Thinking Machines Corporation. Connection Machine Model CM-2 Technical Summary, April 1987.  
Date: 1.87 1.69  5(1), January 1983.  1981.  June 1989.  
Affiliation: 60*125  UC:  anl/mcs-tm-118, Argonne National Laboratory,  
Pubnum: 125*250 64K,107.58 64K, 20.66 32K, 11.63 1.78  16K, 9.87 16K, 3.16 8K,  Technical report  
Abstract: SETL[6] seems to have been among the first languages to separate programming issues from performance concerns. SETL is a high-level language based on set theoretic concepts. A SETL program is developed almost entirely as a sequence of set operations. The program does not explicitly indicate how the sets are implemented (arrays, linked list, hash table, . . . ). This may either be specified separately by the programmer or be generated automatically by the compiler[11]. To the best of our knowledge, SETL has not been implemented on a parallel architecture. More recently, a functional notation called Crystal[4] has been designed to separate algorithmic issues from performance concerns. Crystal defines the notion of a data field as a data-set together with a description of its shape and topology. Code optimizations are specified as transformations (called morphisms) on the data fields and are used to generate efficient data implementations on a parallel architecture. Crystal has been implemented on multicomputers like the NCUBE and the Intel iPSC. The shape construct of Paralation Lisp[10] may also be used to describe data locality. This construct allows a user to organize data in various shapes (grid, ring . . . ). Subsequently, operations on the data can be implemented efficiently by exploiting those communication patterns that can be implemented inexpensively (eg., nearest neighbor communications for a grid) for the specific shape. CM Fortran[9] provides a restricted facility to declaratively change the mapping of an array on the CM memory. In particular, the layout directive may be used to force an array to be stored on the front-end or cause the array to be stored on the parallel memory such that certain axes lie along the NEWS grid. The align directive may be used to specify the layout of an array relative to another array declared in the program. Together these directives allow a programmer to change the mapping of an array in a manner similar to the permute mappings defined for UC. [8] Edmund Kwan. The UC implementation on the Connection Machine. Master's Report, Computer Science Department, UCLA, July 1990. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.R. Allen and K. Kennedy. </author> <title> PFC: A Program to Convert Fortran to Parallel Form, </title> <address> pages 186-205. </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1985. </year>
Reference: [2] <author> R. Bagrodia, K.M. Chandy, and E. Kwan. </author> <title> UC: A language for the Connection Machine. </title> <booktitle> In Supercomputing '90, </booktitle> <pages> pages 525-534, </pages> <address> New York, </address> <month> Novem-ber </month> <year> 1990. </year>
Reference: [3] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1988. </year>
Reference: [4] <author> M. Chen, Young-Il Choo, and Jingke Li. </author> <title> Compiling parallel programs by optimizing performance. </title> <journal> Journal of Supercomputing, </journal> (2):171-207, 1988. 
Reference: [5] <author> D.A.Padua, D.J.Kuch, and D.H.Lawrie. </author> <title> High Speed Multiprocessors and Compilation Techniques. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29:763-776, </volume> <month> September </month> <year> 1980. </year>
Reference: [6] <author> S. Freudenberger, J. Schwartz, and M. Sharir. </author> <title> Experience with the SETL optimizer. </title> <journal> ACM TOPLAS, </journal> <volume> 5(1), </volume> <month> January </month> <year> 1983. </year>
Reference: [7] <author> D.J. Kuck, R.H. Kuhn, D.A. Padua, B. Leasure, and M. Wolfe. </author> <title> Dependence graphs and compiler optimizations. </title> <booktitle> In Eigth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 207-218, </pages> <year> 1981. </year>
Reference: [8] <author> Edmund Kwan. </author> <title> The UC implementation on the Connection Machine. </title> <type> Master's Report, </type> <institution> Computer Science Department, UCLA, </institution> <month> July </month> <year> 1990. </year>
Reference: [9] <author> Argonne National Laboratory. </author> <title> Using the Connection Machine System (CM Fortran). </title> <type> Technical report anl/mcs-tm-118, </type> <institution> Argonne National Laboratory, </institution> <address> 9700 South Cass Avenue, Argonne, IL 60439, </address> <month> June </month> <year> 1989. </year>
Reference: [10] <author> G. Sabot. </author> <title> The Paralation Model: Architecture-Independent Parallel Programming. </title> <publisher> The MIT Press, </publisher> <year> 1988. </year>
Reference: [11] <author> E. Schonberg, J. Schwartz, and M. Sharir. </author> <title> An automatic technique for the selection of data representation in SETL. </title> <journal> ACM TOPLAS, </journal> <volume> 3(2), </volume> <month> April </month> <year> 1981. </year>

References-found: 11

