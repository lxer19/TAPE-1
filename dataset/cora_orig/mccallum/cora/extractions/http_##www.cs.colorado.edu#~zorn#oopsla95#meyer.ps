URL: http://www.cs.colorado.edu/~zorn/oopsla95/meyer.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/oopsla95/papers.html
Root-URL: http://www.cs.colorado.edu
Email: fferrandi,meyer,zicarig@dbis.informatik.uni-frankfurt.de  
Title: Schema Evolution in Object Databases: Measuring the Performance of Immediate and Deferred Updates  
Author: Fabrizio Ferrandina Thorsten Meyer Roberto Zicari Johann Wolfgang 
Web: http://www.dbis.informatik.uni-frankfurt.de  
Address: Robert-Mayer-Str. 11-15 D-60325 Frankfurt am Main, Germany  
Affiliation: Goethe-Universitat Frankfurt Fachbereich Informatik (20) Datenbanken und Informationssysteme (DBIS)  
Abstract: When the schema of an object database system is modified, the database needs to be changed in such a way that the schema and the database remain consistent with each other. This paper uses the OO1 benchmark [2], appropriately modified, to compare the two most used approaches for transforming the database, namely the immediate and the deferred database transformation [4].
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alexandros Biliris and Euthimios Panagos. </author> <note> EOS User's Guide, Release 2.1, </note> <year> 1994. </year>
Reference-contexts: After a schema modification, OSLOT updates the database using the algorithms defined in [4]. Section 2.1 describes the benchmark organization and Section 2.2 presents the benchmark results with respect to the immediate and the deferred database transformation. 2.1 The Benchmark Organization OSLOT is developed on top of EOS <ref> [1] </ref> using Tcl/Tk [11] and [incr Tcl] [8].
Reference: [2] <author> R. G. G. Cattell and J. Skeen. </author> <title> Object Operations Benchmark. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 1-31, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: OSLOT provides, among others, a schema manager with operations for schema manipulation and for the definition of user-defined conversion functions which override automatically generated default conversion functions. 1 To evaluate the performance of the two alternative database transformations, we opted for the OO1 benchmark <ref> [2] </ref> mainly because of its simplicity. We used the OO1 lookup query to randomly access objects in the database. In addition, we slightly modified the lookup query to make sure to access more than one object in a page (e.g. scanning a subset of a class extension). <p> In a forthcoming and more detailed paper we will present the results for update queries as well. We instantiated the OO1 benchmark for a small and a large database (definitions are given in <ref> [2] </ref>). The small and large databases holds respectively 20.000 and 200.000 objects of a class Part in approximately 4 MB and 40 MB. The lookup query presented below is exactly the one defined in [2]: Lookup: Read 1,000 randomly selected objects. * generate 1,000 random identifiers (ids) * for each of <p> We instantiated the OO1 benchmark for a small and a large database (definitions are given in <ref> [2] </ref>). The small and large databases holds respectively 20.000 and 200.000 objects of a class Part in approximately 4 MB and 40 MB. The lookup query presented below is exactly the one defined in [2]: Lookup: Read 1,000 randomly selected objects. * generate 1,000 random identifiers (ids) * for each of these ids: read the corresponding Part object from the database calla null procedure (x, y, type) The following cluster query implements a special lookup query where it is guaranteed to access at least half <p> For our benchmark, we used the following configuration: a Sun Sparc 10/40 (86 Mips) with 32 megabytes of main memory, a Seagate ST11200N disk, 1 GB, 10.5 ms avg. seek time, running SunOS 4.1.3. In contrast to what specified in <ref> [2] </ref>, the server and the client run on the same machine. During the tests the machine has been exclusively reserved for benchmarking. The caches of the server and the client have been set to 5 MB (1250 pages, 4 KB each).
Reference: [3] <author> Fabrizio Ferrandina, Guy Ferran, Joelle Madec, Thorsten Meyer, and Roberto Zicari. </author> <title> Schema and Database Evolution in the O 2 Object Database System. </title> <booktitle> In Proc. of the 21th Int'l Conf. on Very Large Databases, </booktitle> <pages> pages 170-181, </pages> <address> Zurich, Switzerland, </address> <month> September 11-15, </month> <year> 1995. </year>
Reference-contexts: Several object database systems offer mechanisms to update the database: in few systems like O 2 <ref> [3] </ref>, ObjectStore [10], and OTGen [7] the designer has the possibility to program so called user-defined conversion functions which are associated to modified classes in the schema and define how objects have to be restructured.
Reference: [4] <author> Fabrizio Ferrandina, Thorsten Meyer, and Roberto Zicari. </author> <title> Implementing Lazy Database Updates for an Object Database System. </title> <booktitle> In Proc. of the 20th Int'l Conf. on Very Large Databases, </booktitle> <pages> pages 261-272, </pages> <address> Santiago, Chile, </address> <month> September 12-15, </month> <year> 1994. </year>
Reference-contexts: There are mainly two approaches for implementing database conversion functions: immediate and deferred <ref> [4] </ref>. In the first case, all objects of the database are updated immediately as soon as the schema modification is performed, whereas with the deferred approach objects are updated only when they are actually used. <p> After a schema modification, OSLOT updates the database using the algorithms defined in <ref> [4] </ref>. Section 2.1 describes the benchmark organization and Section 2.2 presents the benchmark results with respect to the immediate and the deferred database transformation. 2.1 The Benchmark Organization OSLOT is developed on top of EOS [1] using Tcl/Tk [11] and [incr Tcl] [8]. <p> In the immediate database transformation, single objects have to be brought up to conform to the schema soon after the schema has been modified (the reader is referred to <ref> [4] </ref> for more details). Further, in the deferred database transformation, the operation to read an object from the local cache to main memory is considered not part of the database transformation itself but rather of the application that caused the object to be read.
Reference: [5] <author> G. Harrus, F. Velez, and R. Zicari. </author> <title> Implementing Schema Updates in an Object-Oriented Database System: a Cost Analysis. </title> <type> Technical report, </type> <institution> GIP Altair, </institution> <year> 1990. </year>
Reference-contexts: It is not worth to consider T fl here for small databases since its value does not considerably differ from the one of T . For large database T fl will be much more significant. As already discovered in <ref> [5] </ref>, for small databases the immediate database transformation is significantly slower than the deferred database transformation. This is mainly because the deferred database transformation in one step can restructure an object whose class might have undergone several modifications.
Reference: [6] <institution> Itasca Systems, Inc. </institution> <note> Itasca Systems Technical Report Number TM-92-001. OODBMS Feature Checklist. Rev 1.1, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: If no conversion functions are provided by the designer, the system provides default conversion functions where no programming is required. Instead, default transformation rules are applied to objects of modified classes. Systems like Itasca <ref> [6] </ref> and Versant [12] provide only default transformation rules for transforming the database.
Reference: [7] <author> Barbara Staudt Lerner and A. Nico Habermann. </author> <title> Beyond Schema Evolution to Database Reorganization. </title> <booktitle> In Proc. of the ACM Conf. on Object-Oriented Programming: Systems, Languages and Applications (OOPSLA) and Proc. of the European Conf. on Object-Oriented Programming (ECOOP), </booktitle> <pages> pages 67-76, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: Several object database systems offer mechanisms to update the database: in few systems like O 2 [3], ObjectStore [10], and OTGen <ref> [7] </ref> the designer has the possibility to program so called user-defined conversion functions which are associated to modified classes in the schema and define how objects have to be restructured. If no conversion functions are provided by the designer, the system provides default conversion functions where no programming is required.
Reference: [8] <author> Michael J. McLennan. </author> <title> [incr Tcl] - Object-Oriented Programming in Tcl. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1993. </year>
Reference-contexts: Section 2.1 describes the benchmark organization and Section 2.2 presents the benchmark results with respect to the immediate and the deferred database transformation. 2.1 The Benchmark Organization OSLOT is developed on top of EOS [1] using Tcl/Tk [11] and [incr Tcl] <ref> [8] </ref>.
Reference: [9] <author> Thorsten Meyer. </author> <title> Schema Updates in Object Database Systems A Comparision between Immediate and Deferred Object Transformation. </title> <type> Master's thesis, </type> <institution> J.W. Goethe-Universitat Frankfurt, Fachbereich Informatik, </institution> <month> June </month> <year> 1995. </year> <note> In german. </note>
Reference-contexts: identifies those parameters that influenced most the results. 2 Experimental Results In this section we present some experimental results obtained making use of OSLOT (Object Storage with Lazy Object Transformations), an object storage system developed at the University of Frankfurt particularly implemented for schema and database evolution testing and comparison <ref> [9] </ref>. After a schema modification, OSLOT updates the database using the algorithms defined in [4].
Reference: [10] <institution> Object Design Inc. </institution> <note> ObjectStore User Guide, Release 3.0, chapter 10, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: Several object database systems offer mechanisms to update the database: in few systems like O 2 [3], ObjectStore <ref> [10] </ref>, and OTGen [7] the designer has the possibility to program so called user-defined conversion functions which are associated to modified classes in the schema and define how objects have to be restructured.
Reference: [11] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Publihing, </publisher> <year> 1994. </year>
Reference-contexts: Section 2.1 describes the benchmark organization and Section 2.2 presents the benchmark results with respect to the immediate and the deferred database transformation. 2.1 The Benchmark Organization OSLOT is developed on top of EOS [1] using Tcl/Tk <ref> [11] </ref> and [incr Tcl] [8].
Reference: [12] <institution> Versant Object Technology, </institution> <address> 4500 Bohannon Drive Menlo Park, CA 94025. </address> <publisher> Versant User Manual, </publisher> <year> 1992. </year>
Reference-contexts: If no conversion functions are provided by the designer, the system provides default conversion functions where no programming is required. Instead, default transformation rules are applied to objects of modified classes. Systems like Itasca [6] and Versant <ref> [12] </ref> provide only default transformation rules for transforming the database.
References-found: 12

