URL: http://netlib.bell-labs.com/cm/ms/departments/sia/doc/96.7.ps
Refering-URL: http://netlib.bell-labs.com/cm/ms/departments/sia/doc/index.html
Root-URL: 
Email: jmc@bell-labs.com  
Title: Evolution of the S Language overall goal for S is: to turn ideas into software,
Author: John M. Chambers 
Note: The  should continue to work.  
Address: Murray Hill NJ 07974  
Affiliation: Bell Laboratories  
Abstract: A major revision of S, described as "Version 4", has been underway for several years, designed to improve the usefulness of the language, for a wide variety of applications and at every stage of the process of programming with data. This paper describes the design goals of the new version, reviews changes to date, and outlines some plans for future work. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John M. Chambers and Trevor Hastie (eds). </author> <title> Statistical Models in S. </title> <publisher> Chapman and Hall, </publisher> <year> 1993. </year>
Reference-contexts: All objects are dynamically generated and self-describing. The combination of these two styles leads to the ease of prototyping in S. A release of S in 1991, revised in 1992, added an informal approach to classes and methods <ref> [1, Appendix A] </ref>. Informality meant that users could create methods as ordinary S functions, using a naming convention to identify the generic function and the class of objects intended. Objects carried their own class and inheritance information. <p> We want to support new aspects of programming not explicitly part of the previous design, notably the construction of user interfaces. At the same time, the new version should be compatible with the current version (as defined by [3] and <ref> [1] </ref>). The following sections outline the concepts behind the new features, assuming the reader is at least slightly familiar with a current version of S or S-Plus. 2 Classes and Methods. <p> Also, it would inevitably leave users with substantial incompatibilities. The chosen alternative has been to build the Version 4 mechanism on top of existing facilities, including the informal class/method mechanism of <ref> [1] </ref>. The S evaluator takes considerable trouble to retain compatibility with earlier classes and methods. Old-style methods will be detected and called when an argument's class matches the method's name according to the rules in [1]. Old--style classes will be detected when objects are read from a database. <p> the Version 4 mechanism on top of existing facilities, including the informal class/method mechanism of <ref> [1] </ref>. The S evaluator takes considerable trouble to retain compatibility with earlier classes and methods. Old-style methods will be detected and called when an argument's class matches the method's name according to the rules in [1]. Old--style classes will be detected when objects are read from a database. The implicit hierarchy implied by multiple strings in the old-style class attribute will be recorded and applied in finding methods. The only constraint is that class hierarchies have to be consistent at any particular time.
Reference: [2] <author> J. M. Chambers. </author> <title> Classes and methods in S. I: Recent developments. </title> <journal> Computatonal Statistics, </journal> <volume> 8(3) </volume> <pages> 167-184, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Users perceive the main strengths of S for this activity as rapid interactive pro-totyping, graphics, and high-level objects. S has evolved continually over many years. The current release, called Version 3 here, <ref> [2] </ref>, reflects a major redesign carried out about ten years ago. It emphasizes a dual style of functional and object-based programming. That is, nearly everything in S can be viewed as the evaluation of a function call, analogous to more strictly functional languages such as ML.
Reference: [3] <author> R. A. Becker, J. M. Chambers, and A. R. Wilks. </author> <title> The New S Language. </title> <publisher> Chapman and Hall, </publisher> <year> 1988. </year>
Reference-contexts: We want to support new aspects of programming not explicitly part of the previous design, notably the construction of user interfaces. At the same time, the new version should be compatible with the current version (as defined by <ref> [3] </ref> and [1]). The following sections outline the concepts behind the new features, assuming the reader is at least slightly familiar with a current version of S or S-Plus. 2 Classes and Methods.
References-found: 3

