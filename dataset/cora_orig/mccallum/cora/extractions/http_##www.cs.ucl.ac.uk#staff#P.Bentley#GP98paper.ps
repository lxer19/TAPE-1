URL: http://www.cs.ucl.ac.uk/staff/P.Bentley/GP98paper.ps
Refering-URL: http://www.cs.ucl.ac.uk/research/nuclear/nuclearpapers.html
Root-URL: http://www.cs.ucl.ac.uk
Email: T.Yu@cs.ucl.ac.uk P.Bentley@cs.ucl.ac.uk  
Title: Methods to Evolve Legal Phenotypes  
Author: Tina Yu and Peter Bentley 
Address: Gower Street, London WC1E 6BT, UK.  
Affiliation: Department of Computer Science, University College London,  
Abstract: Many optimization problems require the satisfaction of constraints in addition to their objectives. When using an evolutionary algorithm to solve such problems, these constraints can be enforced in many different ways to ensure that legal solutions (phenotypes) are evolved. We have identified eleven ways to handle constraints within various stages of an evolutionary algorithm. Five of these methods are experimented on a run-time error constraint in a Genetic Programming system. The results are compared and analyzed. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bck, T., </author> <title> Evolutionary Algorithms in Theory and Practice. </title> <publisher> Oxford University Press, </publisher> <address> New York (1996). </address>
Reference-contexts: Evolution Strategies & Evolutionary Programming: As described by Bck (1996) and Michalewicz (1995b), constraint handling in ES and EP usually consists of simply repeating the creation of an individualas long as the individual violates one or more of the constraints <ref> (Bck, 1996) </ref>. Genetic Programming: The traditional GP paradigm (Koza, 1992) does not distinguish genotypes from phenotypes, i.e. the search space is regarded as being the same as the solution space. An individual is represented as a program parse tree.
Reference: <author> Banzhaf, W. </author> <title> Genotype-phenotype-mapping and neutral variation a case study in genetic programming. Parallel Problem Solving From Nature, 3. </title> <editor> Y. Davidor, H-P Schwefel, and R. Mnner (eds.), </editor> <publisher> Springer-Verlag, </publisher> <pages> (1994) pp. 322-332. </pages>
Reference-contexts: More recently mapping stages have become more intricate and deserving of the term 'artificial embryology'. Researchers in GP have also reported that the use of an explicit genotype and mapping stage for constraint handling can increase diversity in populations <ref> (Banzhaf, 1994) </ref>. C6: GENOTYPE PENALTY Penalize illegal genotypes. Identify alleles or gene fragments within genotypes that seem to increase the chances of a solution conflicting the constraints, and reduce the fitness of any individual containing these fragments of genetic code.
Reference: <author> Bentley, P. J. & Wakefield, J. P., </author> <title> Finding acceptable solutions in the pareto-optimal range using multiobjective genetic algorithms. </title> <editor> Chawdhry, P.K., Roy, R., & Pant, R.K. </editor> <booktitle> (eds) Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer Verlag London Limited, </publisher> <address> Part 5, </address> <year> (1997), </year> <pages> 231-240. </pages>
Reference-contexts: In effect, the use of a penalty value becomes an additional criteria to be considered by the evolutionary algorithm, and multiobjective techniques should be used to ensure that all criteria are considered separately (otherwise one or more criteria may dominate the others) <ref> (Bentley & Wakefield, 1997) </ref>. This is one of the most commonly used methods for constraint handling in evolutionary algorithms. (Indeed, it is the only one explicitly mentioned by Goldbergs (1989) book.) C8: LEGAL SELECTION Select only legal parents for reproduction. During reproduction, only select parent solutions which satisfy the constraints.
Reference: <author> Gero, J. S. and Kazakov, V. </author> <title> A, Evolving design genes in space layout planning problems, </title> <booktitle> Artificial Intelligence in Engineering (1997). </booktitle>
Reference-contexts: To ensure that the computer always evolves solutions that satisfy these constraints, designers of these systems use phenotype representations which define the location of rooms indirectly, by defining the location and number of dividing walls <ref> (Gero & Kazakov, 1997) </ref>. C3: LEGAL SEED Seed with nonconflicting solutions. The initial population is seeded with solutions that do not conflict with the constraints and the crossover and mutation operators are designed so that they cannot generate illegal solutions. <p> In addition, with epistatic genotypes, this approach may result in the discouragement of other, epistatically linked, useful features within solutions. To date, research has investigated the automatic identification of 'good genes' during evolution to encourage the evolution of solutions with higher fitnesses <ref> (Gero & Kazakov, 1997) </ref>. However, the authors of this paper are unaware of any work which identifies bad genes for constraint handling. C7: PHENOTYPE PENALTY Penalize illegal phenotypes.
Reference: <author> Goldberg, D. E., </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley (1989). </publisher>
Reference: <author> Gruau, F., </author> <title> On using syntactic constraints with genetic programming. </title> <booktitle> Advances in Genetic Programming II, </booktitle> <address> P.J. </address>
Reference: <editor> Angeline and K.E. Kinnear, Jr, (eds.), </editor> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA (1996) pp. </address> <note> 377-394 Janikow, </note> <author> C., </author> <title> A methodology for processing problem constraints in genetic programming. Computers and Mathematics with Application, </title> <journal> Vol. </journal> <volume> 32 No. 8, </volume> <pages> (1996) pp. 97-113. </pages>
Reference: <author> Keller, R. and Banzhaf, W. </author> <title> Genetic programming using genotype-phenotype mapping from linear genomes into linear phenotypes. </title> <booktitle> Genetic Programming 96: Proceedings of the First Annual Conference Genetic Programming. </booktitle> <editor> J.R. Koza, D.E. Goldberg, </editor> <title> D.B. Fogel and R.L. </title>
Reference: <editor> Riolo (eds.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address> <note> (1996) pp. 116-122. </note>
Reference: <author> Koza, J. R., </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1992). </address>
Reference-contexts: Evolution Strategies & Evolutionary Programming: As described by Bck (1996) and Michalewicz (1995b), constraint handling in ES and EP usually consists of simply repeating the creation of an individualas long as the individual violates one or more of the constraints (Bck, 1996). Genetic Programming: The traditional GP paradigm <ref> (Koza, 1992) </ref> does not distinguish genotypes from phenotypes, i.e. the search space is regarded as being the same as the solution space. An individual is represented as a program parse tree.
Reference: <author> Michalewicz, Z., </author> <title> Genetic algorithms, numerical optimization and constraints, </title> <booktitle> Proc. of the 6th Int. Conf. on Genetic Algorithms, </booktitle> <address> Pittsburgh, </address> <month> July 15-19, </month> <pages> (1995a) pp. 151-158. </pages>
Reference: <author> Michalewicz, Z., </author> <title> A survey of constraint handling techniques in evolutionary computation methods Proc. </title> <booktitle> of the 4th Annual Conf. on Evolutionary Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1995b) pp. </address> <pages> 135-155. </pages>
Reference-contexts: 1. Introduction Constraints form an integral part of every optimization problem, and yet they are often overlooked in evolutionary algorithms <ref> (Michalewicz, 1995b, 1996) </ref>. It is vital to perform constraint handling with care, for if evolutionary search is restricted inappropriately, the evolution of good solutions may be prevented. A problem with constraints has both an objective, and a set of restrictions. <p> Such constraints are often enforced by using penalty values to lower fitnesses. Illegal phenotypes (which conflict the constraints) are permitted to exist as second-class, in the hope that some portions of their genotypes will aid the search for fit phenotypes <ref> (Michalewicz, 1995b) </ref>. Hard constraints, on the other hand, must always be satisfied. Illegal phenotypes are not permitted to exist (although their corresponding genotypes may be, as will be shown). This paper identifies eleven methods to enforce constraints on phenotypes during various stages of evolutionary algorithms. <p> To the authors' knowledge, this idea has not been previously used for constraint handling. C10: INFANTICIDE Stop illegal offspring from being born. If a new solution conflicts a constraint, discard it, and try generating another solution using the same parents. This brute-force method, which is sometimes used in GAs <ref> (Michalewicz, 1995b) </ref>, forces all solutions to satisfy the constraints, but may discard useful genetic material. C11: ILLEGAL REPLACEMENT Replace illegal solutions with legal offspring.
Reference: <author> Michalewicz, Z., Dasgupta, D., Le Riche, R.G., and Scho-enauer, M., </author> <title> Evolutionary algorithms for constrained engineering problems, </title> <journal> Computers & Industrial Engineering Journal, Vol.30, No.2, </journal> <month> September </month> <year> (1996) </year> <month> pp.851-870. </month>
Reference: <author> Hinterding, R. and Michalewicz, Z., </author> <title> Your brains and my beauty: parent matching for constrained optimisation, </title> <booktitle> Proc. of the 5th Int. Conf. on Evolutionary Computation, </booktitle> <address> Anchorage, Alaska, </address> <year> (1998) </year> <month> May 4-9. </month>
Reference: <author> Schoenauer, M. and Michalewicz, Z., </author> <title> Boundary operators for constrained parameter optimization problems, </title> <booktitle> Proc. of the 7th Int. Conf. on Genetic Algorithms, </booktitle> <address> East Lansing, Michigan, </address> <month> July 19-23 </month> <year> (1997) </year> <month> pp.320-329. </month>
Reference: <author> Syswerda, G., </author> <title> Uniform crossover in genetic algorithms. </title> <editor> In Schaffer, D. (ed.), </editor> <booktitle> Proc. of the Third Int. Conf. on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Pub., </publisher> <year> (1989). </year>
Reference-contexts: Table 2 summarizes the features of this problem. 4.1 Implementation of Constraints To allow the use of the Illegal Replacement method, the GP system uses a steady-state replacement scheme <ref> (Syswerda, 1989) </ref> where a population with a constant number of individuals is maintained. Unless otherwise stated, parents are selected using fitness proportionate selection, and offspring replace individuals with the worst fitness in the population. The five constraint handling methods were implemented as follows: C5: Legal Map.
Reference: <author> Yu, T. and Clack, C., PolyGP: </author> <title> A polymorphic genetic programming system in Haskell. </title> <booktitle> Genetic Programming 98: Proceedings of the Third Annual Conference Genetic Programming. (1998) (to appear). </booktitle>
Reference-contexts: The initial population is seeded with solutions that do not conflict with the constraints and the crossover and mutation operators are designed so that they cannot generate illegal solutions. This method has been used in GP to ensure that only type-correct programs are considered during evolution <ref> (Yu and Clack, 1998) </ref>. C4: GENETIC REPAIR Correct illegal genotypes. If a new individual conflicts with a constraint, correct the genes that are responsible for the conflict to make it satisfy that constraint.
References-found: 17

