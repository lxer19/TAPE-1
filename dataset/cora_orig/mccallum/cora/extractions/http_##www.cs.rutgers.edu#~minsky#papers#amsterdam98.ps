URL: http://www.cs.rutgers.edu/~minsky/papers/amsterdam98.ps
Refering-URL: http://www.cs.rutgers.edu/~minsky/pubs.html
Root-URL: http://www.cs.rutgers.edu
Email: Email: fminsky,ungureang@cs.rutgers.edu  
Phone: Phone: (908) 445-2085 Fax: (908) 445-0537  
Title: A Mechanism for Establishing Policies for Electronic Commerce  
Author: Naftaly H. Minsky Victoria Ungureanu 
Note: Two examples policies are discussed here in detail: one ensures refundability of payment, under certain circumstances; the other provides for payment by means of non-copyable tickets.  
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: This paper introduces a mechanism for establishing policies for electronic commerce in a unified and secure manner. A commercial policy can be viewed as the embodiment of a contract between the principals involved in a certain type of commercial activity, and it may be concerned with such issues as: ensuring that a payment for services is refunded under specified circumstances; preventing certificates representing e-cash from being duplicated; ensuring that credit card numbers are used only for the transaction they are intended for; and, for certain socially sensitive transactions like the purchase of drugs, ensuring auditability by proper authorities. Our mechanism is based on a previously published concept of law-governed interaction. It makes a strict separation between the formal statement of a policy, which we call a "law," and the enforcement of this law, which is carried our by a set of policy-independent trusted controllers. A new policy under this scheme is created basically by formulating its law, and can be easily deployed throughout a distributed system. This mechanism enables a single agent to engage in several different activities, subject to disparate policies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Andreoli, F. Pacull, and R. Pareschi. XPECT: </author> <title> A framework for electronic commerce. </title> <booktitle> IEEE Internet Computing, </booktitle> <pages> pages 40-48, </pages> <month> July-August </month> <year> 1997. </year>
Reference-contexts: A manually implemented policy is unsafe because it can be circumvented by any participant in a given commercial transaction, by modifying his interface for the policy. The first difficulty has been addressed recently in <ref> [6, 1] </ref>, and the second has been addressed in [5], but we are not aware of any attempt to alleviate both of these difficulties together. <p> The second benefit to be considered is a simple solution for the following well known problem of coordination in e-commerce (this problem has been discussed, in particular, in <ref> [1, 5] </ref>). Suppose that c wants to purchase a set of items from different vendors, but he wants these items only if he can get them all. (These items might be tickets for a series of flights, planned for a single trip, or a set of related documents).
Reference: [2] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust managemnt. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: The brokers are entities trusted to perform all exchanges correctly. In the latter work, Sirbu and Tygar propose a business model where merchants and clients open accounts with a NetBill server, which is the entity trusted to commit financial transactions. Finally, Blaze, Feigenbaum and Lacy <ref> [2] </ref> built a toolkit called PolicyMaker which can interpret security policies. An agent (usually a vendor) receiving a request gives it for evaluation to PolicyMaker together with its specific policy, and the requester's credentials.
Reference: [3] <author> D. Chaum. </author> <title> Transaction systems to make big brother obsolete. </title> <booktitle> In Communication of the ACM, </booktitle> <month> October </month> <year> 1985. </year>
Reference-contexts: It should be enough to mention here the following three payment methods: electronic currency <ref> [3, 8, 14] </ref>, debit/credit instruments [13, 15], and secure credit card. Although our examples used electronic cash, any other payment methods could have been used.
Reference: [4] <author> S. Glassman, M. Manasse, M. Abadi, P. Gau-thier, and P. Sobalvarro. </author> <title> The Millicent protocol for inexpensive electronic commerce. </title> <booktitle> In Fourth International World Wide Web Conference Proceedings, </booktitle> <pages> pages 603-618, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Research on electronic-commerce focused mainly on means for secure and efficient transfer of funds <ref> [15, 4, 14] </ref>. Such means are indeed necessary for e-commerce, but they are not sufficient. Commercial activities are fl Work supported in part by NSF grants No. <p> Ticket Based Payment Policy|an Example Consider a distributed database that charges a fixed, and small, fee per query. It is well known that e-cash certificates are not suitable for small payments <ref> [4] </ref>, because each such certificate needs to be created by a bank, and each needs to be validated by the issuer, for fear of duplication. <p> The deployment and management of such heterogeneous agents, and the maintenance of their trustworthiness, may be difficult. Also, Su and Tygar [17] used trusted agents to guarantee the atomicity of electronic commerce transactions. Examples of other electronic commerce applications that use non-generic trusted agents are Millicent <ref> [4] </ref> and NetBill [15]. In Millicent, clients pay vendors with vendor's scrip obtained from a broker. The brokers are entities trusted to perform all exchanges correctly.
Reference: [5] <author> S. Ketchpel and H. Garcia-Molina. </author> <title> Making trust explicit in distributed commerce transactions. </title> <booktitle> In Proceedings of the International Conference on Distributed Computing Systems, </booktitle> <pages> pages 270-281, </pages> <year> 1996. </year>
Reference-contexts: A manually implemented policy is unsafe because it can be circumvented by any participant in a given commercial transaction, by modifying his interface for the policy. The first difficulty has been addressed recently in [6, 1], and the second has been addressed in <ref> [5] </ref>, but we are not aware of any attempt to alleviate both of these difficulties together. In this paper we introduce a mechanism, based on what we call "law-governed interaction" (LGI) [9], that can support a wide range of commercial policies in a unified and secure manner. <p> A large collection of policies falls into this category, including the policies presented by Ketch-pel and Garcia-Molina <ref> [5] </ref>, and our money-back policy presented in 4. There are cases, however, where some members have special rights under a policy because of their control state. If this is the case, the secretary has to be trusted, at least by agents that might be affected by such special rights. <p> These proposals differ from each other, and from Moses, in the manner they use these proxies, and in the nature and generality of their concept of a policy. Ketchpel and Garcia-Molina <ref> [5] </ref> studied the transactions that occur between a customer who buys items from different vendors through brokers. The integrity of such transactions is ensured by trusted agents placed between every two principals, which operate according to rules generating by a technique called graph sequencing. <p> In particular, after asking PolicyMaker for its ruling one can proceed by ignoring it. 6 Conclusion What makes e-commerce riskier, and thus more difficult, than conventional commerce is that its participants have little reason to trust each other <ref> [5] </ref>. What we have proposed here is to engender trust between the participants in a given e-commerce activity by imposing a suitable law over the interaction between them. <p> The second benefit to be considered is a simple solution for the following well known problem of coordination in e-commerce (this problem has been discussed, in particular, in <ref> [1, 5] </ref>). Suppose that c wants to purchase a set of items from different vendors, but he wants these items only if he can get them all. (These items might be tickets for a series of flights, planned for a single trip, or a set of related documents).
Reference: [6] <author> S. Ketchpel, H. Garcia-Molina, and A. Paepcke. </author> <title> Shopping models: A flexible architecture for information commerce. </title> <booktitle> In Digital Libraries, </booktitle> <year> 1997. </year>
Reference-contexts: There is, of course, no universal policy. Many different policies are being employed in traditional commerce, and many will have to be employed in electronic commerce as well. For instance, a recent paper <ref> [6] </ref> identified several examples of policies for purchasing of information, using such things as subscription, pay-per-view and pre-paid voucher, which use different form of payment, employ different interaction protocols, and are suitable for different circumstances. <p> A manually implemented policy is unsafe because it can be circumvented by any participant in a given commercial transaction, by modifying his interface for the policy. The first difficulty has been addressed recently in <ref> [6, 1] </ref>, and the second has been addressed in [5], but we are not aware of any attempt to alleviate both of these difficulties together.
Reference: [7] <author> C. Lai, G. Medvinsky, and C. Neuman B. En-doresements, </author> <title> licensing, and insurance for distributed system services. </title> <booktitle> In Proceedings of the Second ACM Conference on Computer and Communication Security, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: If this is the case, the secretary has to be trusted, at least by agents that might be affected by such special rights. One way to deal with this issue is to offer liability insurance to agents operating under the policy in question, in a manner described in <ref> [7] </ref>. 4 Establishing the Money Back Policy We introduce here law L MB , displayed in Figure 4, which implements the money back policy MB described in Section 2. We describe this law by explaining how various purchase-related operations are regulated by it.
Reference: [8] <author> G. Medvinsky and C. Neuman. Netcash: </author> <title> A design for practical electronic currency on the internet. </title> <booktitle> In Proceedings of the 1st ACM Conference on Computer and Communication Security, </booktitle> <year> 1993. </year>
Reference-contexts: It should be enough to mention here the following three payment methods: electronic currency <ref> [3, 8, 14] </ref>, debit/credit instruments [13, 15], and secure credit card. Although our examples used electronic cash, any other payment methods could have been used.
Reference: [9] <author> N.H. Minsky. </author> <title> The imposition of protocols over open distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1991. </year>
Reference-contexts: The first difficulty has been addressed recently in [6, 1], and the second has been addressed in [5], but we are not aware of any attempt to alleviate both of these difficulties together. In this paper we introduce a mechanism, based on what we call "law-governed interaction" (LGI) <ref> [9] </ref>, that can support a wide range of commercial policies in a unified and secure manner. <p> For the details of this formulation the reader is referred to <ref> [9] </ref>, here we will only illustrate it with the following example. Ticket Based Payment Policy|an Example Consider a distributed database that charges a fixed, and small, fee per query.
Reference: [10] <author> N.H. Minsky and V. Ungureanu. </author> <title> Regulated coordination in open distributed systems. </title> <editor> In David Garlan and Daniel Le Metayer, editors, </editor> <booktitle> Proc. of Coordination'97: Second International Conference on Coordination Models and Languages; LNCS 1282, </booktitle> <pages> pages 81-98, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: We provide means for an agent to join a given policy P| subject to the law of this policy|which will enable 2 Note that Moses regulates some additional types of events described in <ref> [10, 11] </ref>. this agent to send and receive P-messages. A given agent may thus join several policies, and be active under them concurrently.
Reference: [11] <author> N.H. Minsky and V. Ungureanu. </author> <title> Unified support for heterogeneous security policies in distributed systems. </title> <booktitle> In 7th USENIX Security Symposium, </booktitle> <month> January </month> <year> 1998. </year>
Reference-contexts: We provide means for an agent to join a given policy P| subject to the law of this policy|which will enable 2 Note that Moses regulates some additional types of events described in <ref> [10, 11] </ref>. this agent to send and receive P-messages. A given agent may thus join several policies, and be active under them concurrently.
Reference: [12] <author> R. Needham and M. Schroeder. </author> <title> Authentication revisited. </title> <booktitle> Operating Systems Review, </booktitle> <pages> page 7, </pages> <month> Jan-uary </month> <year> 1987. </year>
Reference-contexts: After this step is performed, C B is convinced that it is communicating with a genuine 4 We borrowed the use of index number as proof of freshness from the Needham & Schroder protocol <ref> [12] </ref>. We note, that their protocol used symmetric cryptography. controller, because C A proved it knows K 1 C A which is authenticated by certifying authority T.
Reference: [13] <author> C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <year> 1993. </year>
Reference-contexts: It should be enough to mention here the following three payment methods: electronic currency [3, 8, 14], debit/credit instruments <ref> [13, 15] </ref>, and secure credit card. Although our examples used electronic cash, any other payment methods could have been used.
Reference: [14] <author> P. Panurach. </author> <title> Money in electronic commerce: Digital cash, </title> <journal> electronic fund transfer and ecash. Communications of the ACM, </journal> <volume> 39(6), </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Research on electronic-commerce focused mainly on means for secure and efficient transfer of funds <ref> [15, 4, 14] </ref>. Such means are indeed necessary for e-commerce, but they are not sufficient. Commercial activities are fl Work supported in part by NSF grants No. <p> First, by Rule R1, a client c, wishing to buy a ticket with value n sends to the ticket seller v, the message buyTicket (n,ec), where ec is a certificate for a sum of dollars in some form of electronic cash, like Ecash <ref> [14] </ref>. By Rule R6, when such a message arrives at its destination it is delivered, only if the destination is an authorized ticket seller. <p> It should be enough to mention here the following three payment methods: electronic currency <ref> [3, 8, 14] </ref>, debit/credit instruments [13, 15], and secure credit card. Although our examples used electronic cash, any other payment methods could have been used.
Reference: [15] <author> M. Sirbu and J.D. Tygar. Netbill: </author> <title> An Internet commerce system. </title> <booktitle> In IEEE COMPCON, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Research on electronic-commerce focused mainly on means for secure and efficient transfer of funds <ref> [15, 4, 14] </ref>. Such means are indeed necessary for e-commerce, but they are not sufficient. Commercial activities are fl Work supported in part by NSF grants No. <p> If servers are distributed, like in our case, the only solution we are aware of for preventing double spending is to have a centralized ticket checker, which tends to become a bottleneck <ref> [15] </ref>. Note that under this policy, the clients are at the mercy of both the ticket sellers and database servers. They send their payment with their order with no guarantee for either timely service or for the correct response. <p> It should be enough to mention here the following three payment methods: electronic currency [3, 8, 14], debit/credit instruments <ref> [13, 15] </ref>, and secure credit card. Although our examples used electronic cash, any other payment methods could have been used. <p> The deployment and management of such heterogeneous agents, and the maintenance of their trustworthiness, may be difficult. Also, Su and Tygar [17] used trusted agents to guarantee the atomicity of electronic commerce transactions. Examples of other electronic commerce applications that use non-generic trusted agents are Millicent [4] and NetBill <ref> [15] </ref>. In Millicent, clients pay vendors with vendor's scrip obtained from a broker. The brokers are entities trusted to perform all exchanges correctly.
Reference: [16] <author> J. Su and D. Manchala. </author> <title> Building trust for distributed commerce transactions. </title> <booktitle> In 17th IEEE International Conference on Distributed Computing Systems(ICDCS), </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: This is an effective technique, but it is limited to a certain class of activities, and is concerned with a certain kind of issues. For example, their technique cannot prevent duplication of certificates, nor can they provide for auditing. Su and Manchala <ref> [16] </ref> also deal with a specific class of transactions, using trusted agents to mediate between a client and a vendor. An important difference between this work and ours is that their trusted agents are not generic.
Reference: [17] <author> J. Su and J.D. Tygar. </author> <title> Building blocks for atom-icity in electronic commerce. </title> <booktitle> In Proceedings of USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Each controller must be programmed to carry out a specific protocol, which may be different from agent to agent. The deployment and management of such heterogeneous agents, and the maintenance of their trustworthiness, may be difficult. Also, Su and Tygar <ref> [17] </ref> used trusted agents to guarantee the atomicity of electronic commerce transactions. Examples of other electronic commerce applications that use non-generic trusted agents are Millicent [4] and NetBill [15]. In Millicent, clients pay vendors with vendor's scrip obtained from a broker.
Reference: [18] <author> M. Waidner. </author> <title> Development of a secure electronic marketplace for Europe. </title> <booktitle> In Proceedings of Es-orics, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Although our examples used electronic cash, any other payment methods could have been used. What is directly relevant to this paper is that several researchers recently addressed the need to implement higher level e-commerce policies; a careful analysis of this need has been given by Waidner <ref> [18] </ref>. All the proposed implementations we are aware of employ trusted proxies|like our controllers|to mediate between the principals involved in a given commercial activity, and to make sure that the intended policy is not violated.
References-found: 18

