URL: http://www.cs.mu.oz.au/tr_db/mu_96_22.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Inheritance by Extensions and Restrictions in Agent Systems May 14, 1996 Key Centre for Knowledge
Author: Lobel Crnogorac Dr. Anand S. Rao Prof. Kotagiri Ramamohanarao 
Keyword: Key Words: agent-systems, object-orientation, re-usability, inheritance  
Note: Supported by an APA scholarship, the  Supported by an Australian Research Council grant, the Key Centre for Knowledge Based Systems, and the Cooperative Research Centre for Intelligent Decision Systems.  
Address: Parkville 3052 Australia  Level 6, 171 La Trobe Street, Melbourne Victoria 3000, Australia  Parkville 3052 Australia  
Affiliation: Department of Computer Science The University of Melbourne  Australian Artificial Intelligence Institute  Department of Computer Science The University of Melbourne  
Email: Email: lobel@cs.mu.oz.au  Email: anand@aaii.oz.au  Email: rao@cs.mu.oz.au  
Phone: Phone: +61 3 9287 9179 Fax: +61 3 9348 1184  Phone: +61 3 9663 7922 Fax: +61 3 9663 7937  Phone: +61 3 9287 9101 Fax: +61 3 9348 1184  
Abstract: Agent-oriented programming is a new area which extends the object-oriented concepts of encapsulated objects with the notions of beliefs, desires, intentions, teams, conversations etc. Defining an inheritance mechanism which will combine all these different aspects of agent languages into a uniform methodology for code re-use is a challenge. In this paper we give two different methodologies for re-use of plan libraries in agent languages. The two approaches are compared with respect to their expressive power and their uniformity. It was found that the compositional approach presents a uniform view of inheritance and maximises code re-use. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mehmet Aksit, Jan Bosch, William van der Sterren, and Lodewijk Bergmans. </author> <title> Real-time specification inheritance anomalies and real-time filters. </title> <editor> In Mario Tokoro and Remo Pareschi, editors, ECOOP'94, </editor> <booktitle> Lecture Notes in Computer Science 821, </booktitle> <pages> pages 386-407, </pages> <address> Bologna, Italy, July 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Inheritance anomaly is the conflict between concurrency and inheritance where extensive re-definitions of inherited methods are necessary in order to maintain the synchronization constraints of concurrent objects. Similar anomaly occurs when OOP is extended with real-time specifications <ref> [1] </ref>. Matsuoka and Yonezawa [9] have distinguished three kinds of inheritance anomalies in OBCP languages: state-partitioning, state-modification and history-only-sensitiveness. * state-partitioning: Execution of a concurrent program can be thought of as a sequence of transitions between states.
Reference: [2] <author> C. Baquero, R. Oliveira, and F. Moura. </author> <title> Integration of concurrency control in a language with subtyping and subclassing. </title> <booktitle> In USENIX Conference on Object-Oriented Technologies (COOTS 95), </booktitle> <address> Monterey, CA, USA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment. This led to the emergence of object-based concurrent programming (OBCP) <ref> [2, 9, 11] </ref>. It was found that most OO concepts (e.g., encapsulation) could be naturally applied in OBCP paradigm. However, inheritance has not been successfully integrated into OBCP languages. One of the main problems with inheritance in OBCP languages is the so-called inheritance anomaly. <p> Researchers in OOP have looked at inheritance in state machines (which are similar to plan graphs) [13] and inheritance with method guards (which are similar to plan conditions) <ref> [2, 9] </ref>. The additional complexity in AOP is that both types of inheritance must be present at the same time. The aim of this paper is to find an inheritance mechanism which uniformly combines inheritance of plan conditions with the inheritance of plan graphs. <p> In section 7 we compare these mechanisms with respect to their expressive power and the uniformity of their definition. We conclude the paper with a brief overview of related work and a summary. 1 2 Inheritance in OBCP Inheritance anomaly has been extensively studied in OBCP <ref> [2, 8, 9, 10, 16] </ref>. The anomaly results in the inability of OBCP languages to inherit synchronisation code without re-definitions. Concurrent object-oriented programming languages have to provide facilities for expressing synchronization constraints of objects. <p> In the rest of this paper we show that similar problems arise when we try to introduce inheritance to AOP. Some proposals for minimisation of inheritance anomalies in OBCP can be adapted to AOP <ref> [2, 13] </ref>. 2 3 Distributed Multi-Agent Reasoning System (dMARS) The Distributed Multi-Agent Reasoning System (dMARS) is an agent-oriented distributed real-time system [4]. It provides a representational framework and reasoning mechanisms for implementing agents. Each agent is composed of a set of beliefs, goals, plans, and intentions. <p> Multiple inheritance defines an algorithm for resolving such name clashes. However, the composition operation defines an algorithm to merge the two methods with the same name. 11 8 Related Work and Conclusion The concept of Wrappers has been used in the context of concurrent object-oriented programming <ref> [2] </ref>. Baquero et. al. use Wrappers to incrementally modify synchronization constraints of concurrent objects. However, they have no concept of relaxational wrappers. All their wrappers are actually compositional. Recently, Sane and Campbell [13] looked at the problem of defining inheritance in object-oriented state machines.
Reference: [3] <author> Frances Brazier, Barbara Dunin Keplicz, Nick R. Jennings, and Jan Treur. </author> <title> Formal specification of multi-agent systems: a real-world case. </title> <booktitle> In First International Conference on Multi-Agent Systems, ICMAS-95, </booktitle> <pages> pages 25-32, </pages> <address> San Francisco, California, June 1995. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference-contexts: Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17]. Research into design methodologies and modelling techniques in AOP is still in the initial stages with most research directed towards the application of object-oriented concepts to AOP <ref> [3, 6] </ref>. Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment. This led to the emergence of object-based concurrent programming (OBCP) [2, 9, 11]. It was found that most OO concepts (e.g., encapsulation) could be naturally applied in OBCP paradigm.
Reference: [4] <author> Andrew Brenton. </author> <title> The dMARS Version 1.6.x Plan Language Reference Manual. </title> <booktitle> The Aus-tralian Artificial Intelligence Institute, </booktitle> <address> 6/171 LaTrobe St. Melbourne, Australia, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Some proposals for minimisation of inheritance anomalies in OBCP can be adapted to AOP [2, 13]. 2 3 Distributed Multi-Agent Reasoning System (dMARS) The Distributed Multi-Agent Reasoning System (dMARS) is an agent-oriented distributed real-time system <ref> [4] </ref>. It provides a representational framework and reasoning mechanisms for implementing agents. Each agent is composed of a set of beliefs, goals, plans, and intentions. The beliefs of dMARS agents provide information on the state of the environment as perceived by the agent and are represented in a first-order logic. <p> The existing systems like dMARS <ref> [4] </ref>, PLACA [15] and AGENT0 [14] do not address inheritance at all. In this section we explore inheritance with respect to agent systems by following the concepts from OOP.
Reference: [5] <author> Hans-Dieter Burkhard. </author> <title> Agent-oriented programming for open systems. </title> <editor> In Michael J. Wooldridge and Nicholas R. Jennings, editors, </editor> <booktitle> ECAI-94 Workshop on Agent Theories, Architectures, and Languages, </booktitle> <pages> pages 291-306, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17].
Reference: [6] <author> D.Kinny, M.Georgeff, and A. Rao. </author> <title> A methodology and modelling technique for systems of BDI agents. </title> <booktitle> In Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, </booktitle> <address> MAAMAW'96, Eindhoven, The Netherlands, </address> <year> 1996. </year> <month> 12 </month>
Reference-contexts: Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17]. Research into design methodologies and modelling techniques in AOP is still in the initial stages with most research directed towards the application of object-oriented concepts to AOP <ref> [3, 6] </ref>. Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment. This led to the emergence of object-based concurrent programming (OBCP) [2, 9, 11]. It was found that most OO concepts (e.g., encapsulation) could be naturally applied in OBCP paradigm.
Reference: [7] <author> F.G.M c Cabe and K.L.Clark. </author> <title> April agent process interaction language. </title> <editor> In Michael J. Wooldridge and Nicholas R. Jennings, editors, </editor> <booktitle> ECAI-94 Workshop on Agent Theories, Architectures, and Languages, </booktitle> <pages> pages 324-340, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17].
Reference: [8] <author> Dennis G. Kafura and Keung Hae Lee. </author> <title> Inheritance in Actor based concurrent object-oriented languages. </title> <booktitle> In ECOOP'89, </booktitle> <pages> pages 131-145. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: In section 7 we compare these mechanisms with respect to their expressive power and the uniformity of their definition. We conclude the paper with a brief overview of related work and a summary. 1 2 Inheritance in OBCP Inheritance anomaly has been extensively studied in OBCP <ref> [2, 8, 9, 10, 16] </ref>. The anomaly results in the inability of OBCP languages to inherit synchronisation code without re-definitions. Concurrent object-oriented programming languages have to provide facilities for expressing synchronization constraints of objects.
Reference: [9] <author> S. Matsuoka and A. Yonezawa. </author> <title> Analysis of inheritance anomaly in object-oriented concurrent programming languages. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, chapter 1, </booktitle> <pages> pages 107-150. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment. This led to the emergence of object-based concurrent programming (OBCP) <ref> [2, 9, 11] </ref>. It was found that most OO concepts (e.g., encapsulation) could be naturally applied in OBCP paradigm. However, inheritance has not been successfully integrated into OBCP languages. One of the main problems with inheritance in OBCP languages is the so-called inheritance anomaly. <p> Researchers in OOP have looked at inheritance in state machines (which are similar to plan graphs) [13] and inheritance with method guards (which are similar to plan conditions) <ref> [2, 9] </ref>. The additional complexity in AOP is that both types of inheritance must be present at the same time. The aim of this paper is to find an inheritance mechanism which uniformly combines inheritance of plan conditions with the inheritance of plan graphs. <p> In section 7 we compare these mechanisms with respect to their expressive power and the uniformity of their definition. We conclude the paper with a brief overview of related work and a summary. 1 2 Inheritance in OBCP Inheritance anomaly has been extensively studied in OBCP <ref> [2, 8, 9, 10, 16] </ref>. The anomaly results in the inability of OBCP languages to inherit synchronisation code without re-definitions. Concurrent object-oriented programming languages have to provide facilities for expressing synchronization constraints of objects. <p> Inheritance anomaly is the conflict between concurrency and inheritance where extensive re-definitions of inherited methods are necessary in order to maintain the synchronization constraints of concurrent objects. Similar anomaly occurs when OOP is extended with real-time specifications [1]. Matsuoka and Yonezawa <ref> [9] </ref> have distinguished three kinds of inheritance anomalies in OBCP languages: state-partitioning, state-modification and history-only-sensitiveness. * state-partitioning: Execution of a concurrent program can be thought of as a sequence of transitions between states. <p> Mixing-in of one class can introduce a finer-grained distinction for the set of states under which the methods from the other class can be invoked <ref> [9] </ref>. The code re-definitions are caused by the need to account for this finer-grained distinction of states. The standard example involves adding a locking capability to the Buffer object.
Reference: [10] <author> Jose Meseguer. </author> <title> Solving the inheritance anomaly in concurrent object-oriented programming. </title> <editor> In Oscar Nierstrasz, editor, ECOOP'93, </editor> <booktitle> Lecture Notes in Computer Science 707, </booktitle> <pages> pages 220-246, </pages> <address> Kaiserlautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In section 7 we compare these mechanisms with respect to their expressive power and the uniformity of their definition. We conclude the paper with a brief overview of related work and a summary. 1 2 Inheritance in OBCP Inheritance anomaly has been extensively studied in OBCP <ref> [2, 8, 9, 10, 16] </ref>. The anomaly results in the inability of OBCP languages to inherit synchronisation code without re-definitions. Concurrent object-oriented programming languages have to provide facilities for expressing synchronization constraints of objects. <p> S-extensions and p-extensions are equivalent to the OOP concept of class inheritance (subtyping) in which the behaviour of the super-class is extended in the subclass without redefinitions of methods. P-restrictions are equivalent to module inheritance <ref> [10] </ref> which actually modifies the behaviour of the super-class. 5 The Explicit Operator Approach One approach towards defining an inheritance mechanism would be to define operators which allow incremental modification of plan conditions and plan graphs in an agent sub-family. Definition 5 We define three operators: &,| and .
Reference: [11] <author> O. Nierstrasz. </author> <title> Research topics in software composition. </title> <editor> In A. Napoli, editor, </editor> <booktitle> Proceedings, Langages et Modeles a Objets, </booktitle> <pages> pages 193-204, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment. This led to the emergence of object-based concurrent programming (OBCP) <ref> [2, 9, 11] </ref>. It was found that most OO concepts (e.g., encapsulation) could be naturally applied in OBCP paradigm. However, inheritance has not been successfully integrated into OBCP languages. One of the main problems with inheritance in OBCP languages is the so-called inheritance anomaly.
Reference: [12] <author> Agostino Poggi. </author> <title> DAISY: an object-oriented system for distributed artificial intelligence. </title> <editor> In Michael J. Wooldridge and Nicholas R. Jennings, editors, </editor> <booktitle> ECAI-94 Workshop on Agent Theories, Architectures, and Languages, </booktitle> <pages> pages 341-354, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17].
Reference: [13] <author> Aamod Sane and Roy Campbell. </author> <title> Object-oriented state machines: Subclassing, composition, delegation and genericity. </title> <booktitle> In OOPSLA 95, </booktitle> <pages> pages 17-32, </pages> <address> Austin, TX, USA, </address> <year> 1995. </year>
Reference-contexts: The definition of an inheritance mechanism which presents a uniform view of inheritance at all the different levels, and which avoids unnecessary code re-definitions is a challenge. Researchers in OOP have looked at inheritance in state machines (which are similar to plan graphs) <ref> [13] </ref> and inheritance with method guards (which are similar to plan conditions) [2, 9]. The additional complexity in AOP is that both types of inheritance must be present at the same time. <p> In the rest of this paper we show that similar problems arise when we try to introduce inheritance to AOP. Some proposals for minimisation of inheritance anomalies in OBCP can be adapted to AOP <ref> [2, 13] </ref>. 2 3 Distributed Multi-Agent Reasoning System (dMARS) The Distributed Multi-Agent Reasoning System (dMARS) is an agent-oriented distributed real-time system [4]. It provides a representational framework and reasoning mechanisms for implementing agents. Each agent is composed of a set of beliefs, goals, plans, and intentions. <p> In order to define a compositional view of inheritance for plan graphs we need to introduce the concept of mappings. A transition of a state machine, or an arc in the plan graph returns a mapping to a new state, rather than the actual new state <ref> [13] </ref>. This mapping can be modified in the sub-family by composing it with another mapping. In practice, we can compose the mapping, which is originally just an identity, with another plan graph to obtain a new plan graph. <p> Baquero et. al. use Wrappers to incrementally modify synchronization constraints of concurrent objects. However, they have no concept of relaxational wrappers. All their wrappers are actually compositional. Recently, Sane and Campbell <ref> [13] </ref> looked at the problem of defining inheritance in object-oriented state machines. We have applied a modified version of their definition (using Wrappers) of inheritance to plan graphs. This paper is a preliminary investigation of the use of inheritance in AOP.
Reference: [14] <author> Yoav Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17]. <p> Instead of being able to incrementally add code in a subclass the programmer may be required to re-define code in the superclass. Since agent-oriented programming can be viewed as a specialisation of object-oriented programming <ref> [14] </ref> it is natural to ask oneself about the role that inheritance should play in AOP. This paper proposes two different inheritance mechanisms for plan re-use in agent-oriented languages. <p> The existing systems like dMARS [4], PLACA [15] and AGENT0 <ref> [14] </ref> do not address inheritance at all. In this section we explore inheritance with respect to agent systems by following the concepts from OOP.
Reference: [15] <author> S. Rebecca Thomas. </author> <title> The PLACA agent programming language. </title> <editor> In Michael J. Wooldridge and Nicholas R. Jennings, editors, </editor> <booktitle> ECAI-94 Workshop on Agent Theories, Architectures, and Languages, </booktitle> <pages> pages 355-370, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17]. <p> The existing systems like dMARS [4], PLACA <ref> [15] </ref> and AGENT0 [14] do not address inheritance at all. In this section we explore inheritance with respect to agent systems by following the concepts from OOP.
Reference: [16] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with enabled-sets. </title> <booktitle> In OOPSLA '89, volume 24 of SIGPLAN Notices, </booktitle> <pages> pages 103-112. </pages> <publisher> ACM Press, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: In section 7 we compare these mechanisms with respect to their expressive power and the uniformity of their definition. We conclude the paper with a brief overview of related work and a summary. 1 2 Inheritance in OBCP Inheritance anomaly has been extensively studied in OBCP <ref> [2, 8, 9, 10, 16] </ref>. The anomaly results in the inability of OBCP languages to inherit synchronisation code without re-definitions. Concurrent object-oriented programming languages have to provide facilities for expressing synchronization constraints of objects.
Reference: [17] <author> Michael J. Wooldridge and Nicholas R. Jennings. </author> <title> Agent theories, architectures, and languages: A survey. </title> <editor> In Michael J. Wooldridge and Nicholas R. Jennings, editors, </editor> <booktitle> ECAI-94 Workshop on Agent Theories, Architectures, and Languages, </booktitle> <pages> pages 2-39, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1994. </year> <note> Springer-Verlag. 13 </note>
Reference-contexts: 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) <ref> [5, 7, 12, 14, 15, 17] </ref>. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment [17]. <p> 1 Introduction Recent years have seen the emergence of the area of agent-oriented programming (AOP) [5, 7, 12, 14, 15, 17]. Multi-agent systems are concurrent systems based on the notion of autonomous, reactive, internally-motivated agents existing in a constantly changing environment <ref> [17] </ref>. Research into design methodologies and modelling techniques in AOP is still in the initial stages with most research directed towards the application of object-oriented concepts to AOP [3, 6]. Object-oriented programming (OOP) concepts have previously been applied in a concurrent environment.
References-found: 17

