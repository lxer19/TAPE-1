URL: http://pertsserver.cs.uiuc.edu/papers/ShDeLi98a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Email: farjun,demiguel,janeliug@cs.uiuc.edu  (arjun@cs.uiuc.edu)  
Phone: Phone: (USA), 217-244-0432 Fax:  
Title: A Domain-Independent QoS Management Architecture  
Author: Mallikarjun Shankar, Miguel DeMiguel, Jane W.S. Liu Mallikarjun Shankar 
Note: Contact:  FULL PAPER  
Address: IL 61801, U.S.A.  (USA), 217-333-3501  
Affiliation: Department of Computer Science University of Illinois, Urbana-Champaign  Dept. of Computer Science,  
Abstract: This paper describes an application domain independent quality of service (QoS) management architecture and middleware that accommodates and manages different dimensions and measures of QoS. The middleware supports the specification, maintenance and adaptation of end-to-end QoS provided by the individual components in complex application systems. The middleware provides support to model and represent different application components. Using QoS negotiation, the middleware determines the quality levels and resource allocations of the application components. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cristina Aurrecoechea, Andrew Campbell, and Linda Hauw. </author> <title> A Survey of QoS Architectures. </title> <journal> Multimedia Systems Journal, Special Issue on QoS Architecture, </journal> <month> May </month> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Section 6 concludes the paper. An example application is introduced in Section 3 and is used through the rest of the paper to illustrate the main concepts. 2 Related Work In recent years, a variety of QoS architectures and tools have been developed <ref> [1] </ref>. Most of them are specifically for multimedia and telecommunications applications [8, 9,11] where the quality tradeoffs are prominently observable and often localized. They typically allow the specification and control of application-specific quality parameters (e.g. rate, latency and jitter).
Reference: [2] <author> Paramvir Bahl, Paul Gauthier, Robert Ulichney, et al. </author> <title> Software-only Compression, Rendering, and Playback of Digital Video. </title> <journal> Digital Technical Journal, </journal> <pages> 7(52-73), </pages> <year> 1995. </year>
Reference-contexts: Examples of performance measurement can be found in <ref> [2] </ref> and [12]. Our purpose here is to illustrate the quality tradeoffs in the transmission of large data files; the inaccuracy in the data is not serious factor.
Reference: [3] <author> Anindo Banerjea, Domenico Ferrari, Bruce A. Mah, Mark Moran, Dinesh C. Verma, and Hui Zhang. </author> <title> The Tenet Real-Time Protocol Suite: Design, Implementation, </title> <journal> and Experience. IEEE/ACM Transactions on Networking, </journal> <volume> 4(1) </volume> <pages> 1-10, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Some works (e.g., [10, 15]) focus on QoS management essentially at the end-points of an application. In contrast, the networking community has been concerned primarily with providing qualities such as bandwidth, fairness, latency, etc. to flows on networks <ref> [3, 4, 16] </ref> but seldom considers the end-to-end tradeoffs at the application level. 3 The architecture described here is designed to facilitate the specification of quality parameters of diverse application components and the specification and management of quality levels of individual components within a complex application.
Reference: [4] <author> R. Bettati, D. Ferrari, A. Gupta, W. Heffner, W. Howe, M. Moran, Q. Nguyen, and R. Yavatkar. </author> <title> Connection Establishment for Multi-Party Real-Time Communication. In Network and Operating Systems Support for Digital Audio and Video, </title> <booktitle> number 1018 in Lecture Notes in Computer Science, </booktitle> <pages> pages 240-250. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Some works (e.g., [10, 15]) focus on QoS management essentially at the end-points of an application. In contrast, the networking community has been concerned primarily with providing qualities such as bandwidth, fairness, latency, etc. to flows on networks <ref> [3, 4, 16] </ref> but seldom considers the end-to-end tradeoffs at the application level. 3 The architecture described here is designed to facilitate the specification of quality parameters of diverse application components and the specification and management of quality levels of individual components within a complex application.
Reference: [5] <author> W. Feng and Jane Liu. </author> <title> Algorithms for Scheduling Real-Time Tasks with Input Error and End-to-End Deadlines. </title> <journal> IEEE Transactions on Software Enineering, </journal> <volume> 23(2) </volume> <pages> 93-106, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: As an example, Figure 3 gives a simple reward function; it has been used to characterize tasks according to the imprecise computation model <ref> [5] </ref>. The task has only one load-independent output QoS parameter. The value q (o) of this output QoS parameter depends on the input quality q (i) and the amount t of processor time allocated to the task. <p> The specification of a dependency can be done by reusing a template or by implementing a new dependence function. A template is the simple polynomial dependency family. The template uses a polynomial function to describe interdependencies of qualities and resources. Reward functions such as those of imprecise tasks <ref> [5] </ref> can be described using this template.
Reference: [6] <author> Eric Horvitz and Shlomo Zilberstein, </author> <title> editors. Flexible Computation in Intelligent Systems: Results, Issues, and Opportunities, </title> <address> Cambridge, Massachusetts, </address> <month> November </month> <year> 1996. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference-contexts: quality of its result. (For example, by carrying out a preprocessing step to enhance the received video, a visual tracking task can compensate for a lower quality video it receives as input at the expense of the processor time spent on enhancement.) Flexible components are feasible in many application domains <ref> [6] </ref>. The fact that flexible systems gain in availability and graceful degradation has been documented by researchers in applications as diverse as real-time computing, multimedia and intelligent systems. A complex system typically contains components that implement diverse applications.
Reference: [7] <author> David Hull, Arjun Shankar, Klara Nahrstedt, and Jane W. S. Liu. </author> <title> End-to-End QoS Model and Management Architecture. </title> <booktitle> In In Proceedings of IEEE Workshop on Middleware for Distributed Real-Time Systems Services. IEEE Computer Society, </booktitle> <address> San Francisco, </address> <month> December </month> <year> 1997. </year>
Reference-contexts: The negotiation algorithms provided in this architecture not only determine amounts of resource allocation but also the levels of quality of service for individual components within an end-to-end application. 3 System Model The QoS management architecture and middleware is based on a new QoS model <ref> [7] </ref>. It differs from existing models in that it makes the output quality of every task depend explicitly on the input quality of the task. Here the term task refers to a component (a procedure, thread, process, server, etc.) with one or more inputs and outputs. <p> A key aspect of the characterization of a task is the description of how its output qualities depend on the input qualities and amounts of resources it uses to produce the output. This dependency is described in part by the reward function RF <ref> [7] </ref> of the task. Specifically, the reward function provides information about how load-independent quality parameters and resource parameters are related. A constraint on one quality or resource parameter can constrain other parameters because the different dimensions of quality are interdependent. <p> As an example, Figure 9 shows a two-pass service establishment protocol for a composite task containing a linear chain of tasks T 1 to T n in a distributed system. (The details of this protocol are described in <ref> [7] </ref>. For completeness we include a brief overview.) During the exploration pass, the user's request for service 15 (RFS) is forwarded from the last task T n to the first task T 1 .
Reference: [8] <author> K. Jeffay, D. L. Stone, T. Talley, and F. D. Smith. </author> <title> Adaptive, Best-Effort Delivery of Digital Audio and Video Across Packet-Switched Networks. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <address> 712:3-, </address> <year> 1993. </year>
Reference-contexts: An example application is introduced in Section 3 and is used through the rest of the paper to illustrate the main concepts. 2 Related Work In recent years, a variety of QoS architectures and tools have been developed [1]. Most of them are specifically for multimedia and telecommunications applications <ref> [8, 9,11] </ref> where the quality tradeoffs are prominently observable and often localized. They typically allow the specification and control of application-specific quality parameters (e.g. rate, latency and jitter).
Reference: [9] <author> Aurel A. Lazar, Shailendra K. Bhonsle, and Koon Seng Lim. </author> <title> A Binding Architecture for Multimedia Networks. </title> <editor> In D. Hutchison, A. Danthine, H. Leopold, and G. Coulson, editors, </editor> <booktitle> Multimedia Transport 26 and Teleservices, number 882 in Lecture Notes in Computer Science, </booktitle> <pages> pages 103-123. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <booktitle> Proceedings of International COST 237 Workshop, </booktitle> <address> Vienna, Austria, </address> <month> November </month> <year> 1994. </year>
Reference: [10] <author> Klara Nahrstedt and Jonathan M. Smith. </author> <title> The QOS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: In some environments (e.g. CORBA), the same task can have multiple implementations specified in the task description [13]; these implementations may limit the available QoS options. Some works (e.g., <ref> [10, 15] </ref>) focus on QoS management essentially at the end-points of an application.
Reference: [11] <author> Klara Nahrstedt and Ralf Steinmetz. </author> <title> Resource Management in Networked Multimedia Systems. </title> <journal> Computer, </journal> <volume> 28(5) </volume> <pages> 52-63, </pages> <month> May </month> <year> 1995. </year>
Reference: [12] <institution> Proceedings of the IEEE. </institution> <note> Special Issue on Advances in Image and Video Compression. IEEE, </note> <year> 1995. </year>
Reference-contexts: Examples of performance measurement can be found in [2] and <ref> [12] </ref>. Our purpose here is to illustrate the quality tradeoffs in the transmission of large data files; the inaccuracy in the data is not serious factor.
Reference: [13] <editor> Object Management Group (OMG). </editor> <title> Object Services: Common Object Services Specification. </title> <type> Technical report, OMG, </type> <year> 1997. </year>
Reference-contexts: Some QoS management frameworks support the characterization of fixed end-to-end quality levels and provide services to request fixed quality levels or resource allocation from the environment [11,14]. In some environments (e.g. CORBA), the same task can have multiple implementations specified in the task description <ref> [13] </ref>; these implementations may limit the available QoS options. Some works (e.g., [10, 15]) focus on QoS management essentially at the end-points of an application.
Reference: [14] <author> Ragunathan Rajkumar, Chen Lee, John Lechoczky, Dan Siewiorek, et al. </author> <title> A Resource Allocation Model for QoS Management. </title> <booktitle> In In Proceedings IEEE Real-Time Systems Symposium. IEEE Computer Society, </booktitle> <address> San Francisco, </address> <month> December </month> <year> 1997. </year>
Reference: [15] <author> D. Schmidt, A. Gokhale, T. Harrison, and G. Parukar. </author> <title> A High Performance End System Architecture for Real-Time CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(2) </volume> <pages> 72-78, </pages> <year> 1997. </year>
Reference-contexts: In some environments (e.g. CORBA), the same task can have multiple implementations specified in the task description [13]; these implementations may limit the available QoS options. Some works (e.g., <ref> [10, 15] </ref>) focus on QoS management essentially at the end-points of an application.
Reference: [16] <author> Lixia Zhang, Stephen Deering, Deborah Estrin, Scott Shenker, and Daniel Zappala. RSVP: </author> <title> A New Resource ReSerVation Protocol. </title> <journal> IEEE Network, </journal> <volume> 7(5) </volume> <pages> 8-18, </pages> <month> September </month> <year> 1993. </year> <month> 27 </month>
Reference-contexts: Some works (e.g., [10, 15]) focus on QoS management essentially at the end-points of an application. In contrast, the networking community has been concerned primarily with providing qualities such as bandwidth, fairness, latency, etc. to flows on networks <ref> [3, 4, 16] </ref> but seldom considers the end-to-end tradeoffs at the application level. 3 The architecture described here is designed to facilitate the specification of quality parameters of diverse application components and the specification and management of quality levels of individual components within a complex application.
References-found: 16

