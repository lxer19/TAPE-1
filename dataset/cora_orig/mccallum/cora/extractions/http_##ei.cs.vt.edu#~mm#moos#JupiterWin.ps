URL: http://ei.cs.vt.edu/~mm/moos/JupiterWin.ps
Refering-URL: http://ei.cs.vt.edu/~mm/s96/moos.html
Root-URL: http://www.cs.vt.edu
Title: High-Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System a text editor, a graphical drawing widget,
Author: David A. Nichols, Pavel Curtis, Michael Dixon, and John Lamping 
Keyword: UIMS, window toolkits, CSCW, groupware toolkits, optimistic concurrency control.  
Address: 3333 Coyote Hill Rd. Palo Alto, CA 94304  
Affiliation: Xerox PARC  
Note: Proceedings of UIST 95 1/10  includes  number of simpler widgets such as buttons and sliders.  
Email: -nichols,pavel,mdixon,lamping-@parc.xerox.com  
Phone: +1 415 812 4452  
Abstract: Jupiter is a multi-user, multimedia virtual world intended to support long-term remote collaboration. In particular, it supports shared documents, shared tools, and, optionally, live audio/video communication. Users who program can, with only moderate effort, create new kinds of shared tools using a high-level windowing toolkit; the toolkit provides transparent support for fully-shared widgets by default. This paper describes the low-level communications facilities used by the implementation of the toolkit to enable that support. The state of the Jupiter virtual world, including application code written by users, is stored and (for code) executed in a central server shared by all of the users. This architecture, along with our desire to support multiple client platforms and high-latency networks, led us to a design in which the server and clients communicate in terms of high-level widgets and user events. As in other groupware toolkits, we need a concurrency-control algorithm to maintain common values for all instances of the shared widgets. Our algorithm is derived from a fully distributed, optimistic algorithm developed by Ellis and Gibbs [12]. Jupiters centralized architecture allows us to substantially simplify their algorithm. This combination of a centralized architecture and optimistic concurrency control gives us both easy serializability of concurrent update streams and fast response to user actions. The algorithm relies on operation transformations to fix up conicting messages. The best transformations are not always obvious, though, and several conicting concerns are involved in choosing them. We present our experience with choosing transformations for our widget set, which 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gideon Avrahami, Kenneth P. Brooks, Marc H. Brown, </author> <title> A two-view approach to constructing user interfaces, </title> <journal> Computer Graphics, </journal> <volume> 23(3), </volume> <month> (July </month> <year> 1989), </year> <pages> pp. 137-146 </pages>
Reference-contexts: The server contains a database of all the information in the Jupiter environment, as well as a MOO interpreter. Windowing applications are written by Jupiters users and run in this server. The programming interface presented to an application writer is very similar to that of the FormsVBT system <ref> [1, 4] </ref>. A window is described with an S-expression that specifies the types of widgets present and a containment hierarchy for laying them out.
Reference: [2] <author> Joel Bartlett, </author> <title> Dont fidget with widgets, </title> <booktitle> draw! Proc. 6th Annual X Technical Conference, </booktitle> <month> Jan </month> <year> 1992, </year> <pages> pp 117-131 </pages>
Reference-contexts: These are mostly the conventional set from other window-ing toolkits. The TypeIn widget is for single line text entry. The TextEdit widget is for editing larger (plain text) documents. The StrokeEdit widget is a graphical display and interaction widget, similar to EZD <ref> [2] </ref> or Tks canvas widget [18]. The VideoPane and AudioHighlight widgets provide support for audio/video communications. Each widget type exports a set of operations to the application.
Reference: [3] <author> Krishna Bharat and Marc H. Brown, </author> <title> Building Distributed, </title> <booktitle> Multi-User Applications by Direct Manipulation Proceedings of the ACM Symposium on User Interface and Software Technology (UIST 94), </booktitle> <year> 1994, </year> <pages> pp 71-81 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq <ref> [3] </ref>. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed. Of these, GroupDesign and Grove are the only systems to use optimistic concurrency control, and they have decentralized architectures.
Reference: [4] <author> Marc H. Brown and James R. Meehan, </author> <note> FormsVBT Reference manual, available as part of ftp:// gatekeeper.dec.com/pub/DEC/Modula-3/contrib/ formsvbt.25Mar93.ps.Z </note>
Reference-contexts: Jupiter is similar to Visual Obliq in a different way. Both systems use techniques from the FormsVBT system for Modula-3 <ref> [4] </ref> and provide tools for rapid prototyping of shared applications. Visual Obliq requires that the application explicitly manage sharing, while Jupiter provides shared widgets. Also, Visual Obliq is not optimized for low-bandwidth or high-latency communications. Another group of systems deal with low-bandwidth communications channels in single-user window systems. <p> The server contains a database of all the information in the Jupiter environment, as well as a MOO interpreter. Windowing applications are written by Jupiters users and run in this server. The programming interface presented to an application writer is very similar to that of the FormsVBT system <ref> [1, 4] </ref>. A window is described with an S-expression that specifies the types of widgets present and a containment hierarchy for laying them out.
Reference: [5] <author> Terrence Crowley, Paul Milazzo, Ellie Baker, Harry Forsdick, and Raymond Tomlinson, MMConf: </author> <title> an infrastructure for building shared multimedia applications Proc. </title> <booktitle> of the Conference on Computer-Supported Cooperative Work (CSCW 90), </booktitle> <month> Oct. </month> <year> 1990, </year> <pages> pp 329-342 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf <ref> [5] </ref>, Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [6] <author> Pavel Curtis, </author> <note> LambdaMOO Programmers Manual, available as ftp://ftp.parc.xerox.com/pub/MOO/ ProgrammersManual.ps </note>
Reference-contexts: The application programmer sees a conventional toolkit interface, and the protocols and remote code are handled by the system. 3 THE APPLICATION INTERFACE Jupiter is built on top of an unmodified instance of the LambdaMOO server; all of the server-side facilities described here are written in the MOO programming language <ref> [6] </ref>. The server contains a database of all the information in the Jupiter environment, as well as a MOO interpreter. Windowing applications are written by Jupiters users and run in this server.
Reference: [7] <author> Pavel Curtis and David A. Nichols, </author> <title> MUDs Grow Up: Social Virtual Reality in the Real World, </title> <booktitle> Proceedings of the 1994 IEEE Computer Conference, </booktitle> <pages> pp. </pages> <address> 193--200, </address> <month> January </month> <year> 1994. </year> <note> Also available as ftp:// </note> <editor> ftp.parc.xerox.com/pub/MOO/papers/ MUDsGrowUp.ps. </editor> <booktitle> Proceedings of UIST 95 10/10 </booktitle>
Reference-contexts: 1 INTRODUCTION Jupiter supports long-term collaboration by providing a shared, persistent virtual world composed of network places <ref> [7] </ref>.
Reference: [8] <author> Pavel Curtis, Michael Dixon, Ron Frederick, and David A. Nichols, </author> <title> The Jupiter Audio/Video Architecture: Secure Multimedia in Network Places, </title> <note> to appear in ACM Multimedia 95. </note>
Reference-contexts: In particular, clients create and modify windows according to specifications received from the server, report user input events to the server, and (when available) capture, transmit, receive, and display audio and video data under user and server control <ref> [8] </ref>. This paper describes the low-level, client/server communications facilities used by the implementation of the window-ing toolkit to support Jupiters pervasive sharing between users. The Jupiter programmers view of the toolkit will be described in a separate, forthcoming paper.
Reference: [9] <author> John Danskin, </author> <title> Previewing PostScript over a telephone in 3 seconds per page, </title> <booktitle> Proc. 9th Annual X Technical Conference, </booktitle> <month> Jan </month> <year> 1995, </year> <pages> pp 23-40 </pages>
Reference-contexts: Also, Visual Obliq is not optimized for low-bandwidth or high-latency communications. Another group of systems deal with low-bandwidth communications channels in single-user window systems. These systems use two basic approaches to dealing with low-bandwidth: compression and code-shipping. Compression systems include Xremote, Low-bandwidth X (LBX) [13], Higher bandwidth X (HBX) <ref> [9, 10] </ref>, and various commercial programs for providing remote access to Microsoft Windows connections, such as CarbonCopy. They try to reduce the bandwidth used while keeping the same semantics for the network protocol.
Reference: [10] <author> John Danskin, </author> <title> Higher bandwidth X, </title> <booktitle> Proceedings ACM Multimedia 94, </booktitle> <month> Oct. </month> <year> 1994, </year> <pages> pp 89-96 </pages>
Reference-contexts: Also, Visual Obliq is not optimized for low-bandwidth or high-latency communications. Another group of systems deal with low-bandwidth communications channels in single-user window systems. These systems use two basic approaches to dealing with low-bandwidth: compression and code-shipping. Compression systems include Xremote, Low-bandwidth X (LBX) [13], Higher bandwidth X (HBX) <ref> [9, 10] </ref>, and various commercial programs for providing remote access to Microsoft Windows connections, such as CarbonCopy. They try to reduce the bandwidth used while keeping the same semantics for the network protocol.
Reference: [11] <author> Prasun Dewan and Rajiv Choudhary, </author> <title> Primitives for programming multi-user interfaces, </title> <booktitle> Proceedings of the ACM Symposium on User Interface and Software Technology (UIST 91), </booktitle> <year> 1991, </year> <pages> pp 69-78 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite <ref> [11] </ref>, and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [12] <author> C. A. Ellis and S. J. Gibbs, </author> <title> Concurrency control in groupware systems, </title> <booktitle> Proc. 1989 ACM SIGMOD International Conference on the Management of Data, </booktitle> <month> June </month> <year> 1989, </year> <pages> pp 399-407 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor <ref> [12] </ref>, LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [13] <author> Jim Fulton and Chris Kent Kantarjiev, </author> <title> A report on Low Bandwidth X (LBX), </title> <booktitle> Proc. 7th Annual X Technical Conference, </booktitle> <month> Jan. </month> <year> 1993, </year> <title> p 251 </title>
Reference-contexts: Also, Visual Obliq is not optimized for low-bandwidth or high-latency communications. Another group of systems deal with low-bandwidth communications channels in single-user window systems. These systems use two basic approaches to dealing with low-bandwidth: compression and code-shipping. Compression systems include Xremote, Low-bandwidth X (LBX) <ref> [13] </ref>, Higher bandwidth X (HBX) [9, 10], and various commercial programs for providing remote access to Microsoft Windows connections, such as CarbonCopy. They try to reduce the bandwidth used while keeping the same semantics for the network protocol.
Reference: [14] <author> S. J. Gibbs, LIZA: </author> <title> An extensible groupware toolkit, </title> <booktitle> CHI 89 Conference Proceedings, </booktitle> <month> April </month> <year> 1989, </year> <pages> pp 29-35 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA <ref> [14] </ref>, MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [15] <author> James Gosling, David S. H. Rosenthal, and Michelle J. Arden, </author> <title> The NeWS Book, </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The other approach to coping with slow networks is to split the application into two parts, and send the code for one part to the users machine where it can have fast access to the display and input devices. This is done by Sun Microsys-tems NeWS <ref> [15] </ref> and HotJava [26] systems, and by Bell Labs Blit terminals [22]. We call this code-shipping. The code-shipping approach is in principle very powerful, since it allows the application to customize the communications protocol to its particular needs.
Reference: [16] <author> Alain Karsenty and Michel Beaudouin-Lafon, </author> <title> An algorithm for distributed groupware applications, </title> <booktitle> Proc. of the 13th International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 195-202 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign <ref> [16] </ref>, GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [17] <author> Michael Knister and Atul Prakash, </author> <title> Issues in the design of a toolkit for supporting multiple group editors, </title> <booktitle> Computing Systems 6(2), (Spring 1993), </booktitle> <pages> pp. 135-166 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit <ref> [17] </ref>, GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [18] <author> John K. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: These are mostly the conventional set from other window-ing toolkits. The TypeIn widget is for single line text entry. The TextEdit widget is for editing larger (plain text) documents. The StrokeEdit widget is a graphical display and interaction widget, similar to EZD [2] or Tks canvas widget <ref> [18] </ref>. The VideoPane and AudioHighlight widgets provide support for audio/video communications. Each widget type exports a set of operations to the application. <p> It makes a TCP connection to the server, running on a central machine. The client program is assumed to evolve slowly, with users obtaining a new one primarily when major protocol changes occur. Currently, implementations for the client exist for several Unix platforms, using the Tcl/Tk toolkit <ref> [18] </ref>, and for Microsoft Windows, using the native Windows programming environment. The client-server protocol for Jupiter largely parallels the programmers interface; most calls by applications result in messages to the client, and most client messages generate event notifications to the application.
Reference: [19] <author> Keith Packard, </author> <title> Designing LBX, </title> <booktitle> Proc. of the 8th Annual X Technical Conference, </booktitle> <month> Jan. </month> <year> 1994, </year> <pages> pp 121-133 </pages>
Reference: [20] <author> Dorab Patel and Scott D. Kalter, </author> <title> A UNIX toolkit for distributed synchronous collaborative applications, </title> <booktitle> Computing Systems 6(2), (Spring 1993), </booktitle> <pages> pp 105-133 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx <ref> [20] </ref>, DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3].
Reference: [21] <author> John F. Patterson, Ralph D. Hill, and Steven L. Rohall, </author> <title> Rendezvous: an architecture for synchronous multiuser applications, </title> <booktitle> Proc. of the Conference on Computer-Supported Cooperative Work (CSCW 90), </booktitle> <month> Oct. </month> <year> 1990, </year> <pages> pp 317-328 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit [24], the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous <ref> [21] </ref>, Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [22] <author> Rob Pike, </author> <title> The Blit: a multiplexed graphics terminal, </title> <institution> AT&T Bell Labs Tech. </institution> <note> Journal, </note> <month> 63(8) (Oct </month> <year> 1984), </year> <pages> pp 1607-1631 </pages>
Reference-contexts: This is done by Sun Microsys-tems NeWS [15] and HotJava [26] systems, and by Bell Labs Blit terminals <ref> [22] </ref>. We call this code-shipping. The code-shipping approach is in principle very powerful, since it allows the application to customize the communications protocol to its particular needs.
Reference: [23] <author> Rob Pike, </author> <title> The text editor Sam, </title> <journal> Software Practice and Experience 17(11) (Nov 1987), </journal> <pages> pp 813-45. </pages>
Reference-contexts: An application can send most of its user interface to the other side, and only communicate high-level events, such as please run this database transaction with these inputs. The Sam text editor <ref> [23] </ref> for the Blit is an example of such an application. However, code-shipping forces the application designer to write a distributed application. The program must be split and a network protocol invented for it.
Reference: [24] <author> Mark Roseman and Saul Greenberg, GroupKit: </author> <title> A groupware toolkit for building real-time conferencing applications, </title> <booktitle> Proc. of the Conference on Computer-Supported Cooperative Work (CSCW 92), </booktitle> <month> Nov. </month> <year> 1992, </year> <pages> pp 43-50 </pages>
Reference-contexts: A number of groupware systems provide either toolkits for building shared applications, or specific shared applications such as text or drawing editors. These include CoEx [20], DistEdit [17], GroupDesign [16], GroupKit <ref> [24] </ref>, the Grove text editor [12], LIZA [14], MMConf [5], Rendezvous [21], Suite [11], and Visual Obliq [3]. LIZA, Rendezvous, Suite Proceedings of UIST 95 3/10 and Visual Obliq use a centralized coordinator, while CoEx, DistEdit, GroupDesign, GroupKit, the Grove text editor, and MMConf are distributed.
Reference: [25] <author> Robert. W. Scheier and James Gettys; with Jim Flowers and David Rosenthal, </author> <title> X Window system: the complete reference to Xlib, X protocol, ICCCM, XLFD, </title> <publisher> Digital Press, </publisher> <year> 1992 </year>
Reference-contexts: Both client and server keep track of widget state, and communicate high-level state changes, instead of low-level user events and graphics primitives. This high-level protocol means they transmit less information, and less frequently, than if a more traditional networked window system (such as the X window system <ref> [25] </ref>) were used. Because windows can be shared between several users, we need a concurrency control algorithm to maintain consistency. The concurrency control algorithms use by groupware systems for sharing can be classified as being pessimistic or optimistic. <p> We use client to refer to the Jupiter client, which is the program that runs on the users machine and displays windows on that machines display. Our server runs application programs, which make requests of the client and respond to user events reported by it. The X window system <ref> [25] </ref> uses these words in the opposite sense; clients are applications, and the server is the program that displays the windows. Optimistic concurrency control, on the other hand, requires no communication before applying changes locally.
Reference: [26] <author> Sun Microsystems, </author> <title> Hot Java Home Page, </title> <note> available as http://java.sun.com. </note>
Reference-contexts: The other approach to coping with slow networks is to split the application into two parts, and send the code for one part to the users machine where it can have fast access to the display and input devices. This is done by Sun Microsys-tems NeWS [15] and HotJava <ref> [26] </ref> systems, and by Bell Labs Blit terminals [22]. We call this code-shipping. The code-shipping approach is in principle very powerful, since it allows the application to customize the communications protocol to its particular needs.
References-found: 26

