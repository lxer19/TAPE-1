URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-94-14.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Beyond P NP NEXP  Classification: Computational Complexity  
Author: Stephen Fenner Lance Fortnow 
Keyword: LOW(P NP NEXP.  
Date: August 9, 1994  
Address: 96 Falmouth St., Portland, ME 04103  1100 E. 58th St., Chicago, IL 60637  
Affiliation: University of Southern Maine Computer Science Department  University of Chicago Department of Computer Science  
Abstract: Buhrman and Torenvliet created an oracle relative to which P NP = NEXP and thus P NP = P NEXP . Their proof uses a delicate finite injury argument that leads to a nonrecursive oracle. We simplify their proof removing the injury to create a recursive oracle making P NP = NEXP. In addition, in our construction we can make P = UP = NP " coNP. This leads to the curious situation where LOW(NP) = P but 
Abstract-found: 1
Intro-found: 1
Reference: [BI87] <author> M. Blum and R. Impagliazzo. </author> <title> Generic oracles and oracle classes. </title> <booktitle> In Proceedings of the 28th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 118-126. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: We arrange our tree so that we have more leaves than injuries. Also, we can combine our construction with techniques devloped by Rackoff [Rac82], Hartmanis and Hemachandra [HH91] and Blum and Impagliazzo <ref> [BI87] </ref> to also get P = UP = NP " coNP while also having P NP = NEXP relative to a recursive oracle. <p> We can now adapt a standard technique developed and used by Rackoff [Rac82], Hartmanis & Hemachandra [HH91], and Blum & Impagliazzo <ref> [BI87] </ref> to compute N A i (x). ALGORITHM FOR N A i (x). Compute ff and w as above.
Reference: [BT94] <author> H. Buhrman and L. Torenvliet. </author> <title> On the cutting edge of relativization: The resource bounded injury method. </title> <booktitle> In Proceedings of the 21st International Colloquium On Automata, Languages and Programming, Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Recently, Buhrman and Torenvliet <ref> [BT94] </ref> showed the existence of an oralce relative to which P NP = NEXP and thus P NP = P NEXP . This says that we can not prove a fl Partially Supported by NSF Grant CCR-9209833. E-mail: fenner@usm.maine.edu. Fax: (207) 780-4933. y Partially Supported by NSF Grant CCR-9253582.
Reference: [FLZ94] <author> B. Fu, H. Li, and Y. Zhong. </author> <title> An application of the translational method. </title> <journal> Mathematical Systems Theory, </journal> <volume> 27 </volume> <pages> 183-186, </pages> <year> 1994. </year>
Reference-contexts: Thus we have a huge gap between nondeterministic polynomial time (NP) and nondeterministic exponential time (NEXP). We would also expect then a separation between P NP and P NEXP . Indeed, we have some evidence for that direction: Mocas [Moc94] (improving upon work of Fu, Li an Zhong <ref> [FLZ94] </ref>) showed that for any fixed c, NEXP is not contained in P NP if the polynomial-time machine can only ask n c queries to the NP oracle.
Reference: [HH91] <author> J. Hartmanis and L. Hemachandra. </author> <title> One-way functions and the nonisomorphism of NP-complete sets. </title> <journal> Theoretical Computer Science, </journal> <volume> 81(1) </volume> <pages> 155-163, </pages> <year> 1991. </year>
Reference-contexts: We arrange our tree so that we have more leaves than injuries. Also, we can combine our construction with techniques devloped by Rackoff [Rac82], Hartmanis and Hemachandra <ref> [HH91] </ref> and Blum and Impagliazzo [BI87] to also get P = UP = NP " coNP while also having P NP = NEXP relative to a recursive oracle. <p> We can now adapt a standard technique developed and used by Rackoff [Rac82], Hartmanis & Hemachandra <ref> [HH91] </ref>, and Blum & Impagliazzo [BI87] to compute N A i (x). ALGORITHM FOR N A i (x). Compute ff and w as above.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1979. </year>
Reference-contexts: We identify a language A over f0; 1; #g with its (total) charateristic function f0; 1; #g fl ! f0; 1g. When dealing with partial functions, we use the relation "extends" in the usual functional sense. Our notation for machines is standard. See, for example, <ref> [HU79] </ref>. The only peculiarity in the paper is when a nondeterministic oracle Turing machine M accesses a partial characteristic function as its oracle.
Reference: [Moc94] <author> S. Mocas. </author> <title> Using bounded query classes to separate classes in the exponential time hierarchy from classes in PH. </title> <booktitle> In Proceedings of the 9th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 53-58. </pages> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Thus we have a huge gap between nondeterministic polynomial time (NP) and nondeterministic exponential time (NEXP). We would also expect then a separation between P NP and P NEXP . Indeed, we have some evidence for that direction: Mocas <ref> [Moc94] </ref> (improving upon work of Fu, Li an Zhong [FLZ94]) showed that for any fixed c, NEXP is not contained in P NP if the polynomial-time machine can only ask n c queries to the NP oracle.
Reference: [Rac82] <author> C. Rackoff. </author> <title> Relativized questions involving probablistic algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 29(1) </volume> <pages> 261-268, </pages> <year> 1982. </year>
Reference-contexts: We arrange our tree so that we have more leaves than injuries. Also, we can combine our construction with techniques devloped by Rackoff <ref> [Rac82] </ref>, Hartmanis and Hemachandra [HH91] and Blum and Impagliazzo [BI87] to also get P = UP = NP " coNP while also having P NP = NEXP relative to a recursive oracle. <p> Moreover, by the construction and the fact that N A i is a UP A machine, N fi i (x) has at most one accepting path for every fi which is a w-extension of ff. We can now adapt a standard technique developed and used by Rackoff <ref> [Rac82] </ref>, Hartmanis & Hemachandra [HH91], and Blum & Impagliazzo [BI87] to compute N A i (x). ALGORITHM FOR N A i (x). Compute ff and w as above.
Reference: [Sel82] <author> A. Selman. </author> <title> P-selective set, tally languages and the behavior of polynomial-time reducibilities on NP. </title> <journal> Theoretical Computer Science, </journal> <volume> 19 </volume> <pages> 287-304, </pages> <year> 1982. </year>
Reference-contexts: Proof: It is well-known (see <ref> [Sel82] </ref>) that LOW (NP) = NP " coNP, and the proof relativizes; thus, LOW (NP) = P relative to A.
Reference: [SFM78] <author> J. Seiferas, M. Fischer, and A. Meyer. </author> <title> Separating nondeterministic time complexity classes. </title> <journal> Journal of the ACM, </journal> <volume> 25(1) </volume> <pages> 146-167, </pages> <year> 1978. </year>
Reference-contexts: 1. Introduction In 1978, Seiferas, Fischer and Meyer <ref> [SFM78] </ref> showed a very strong separation theorem for nondetermisitic time: For time constructible t 1 (n) and t 2 (n), if t 1 (n + 1) = o (t 2 (n)) then NTIME (t 1 (n)) does not contain NTIME (t 2 (n)).
Reference: [Soa87] <author> R. Soare. </author> <title> Recursively Enumerable Sets and Degrees. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1987. </year> <month> 8 </month>
Reference-contexts: We use their proof as a starting block but remove the finite injury and replace it with an exponential (and thus recursive) search. Thus we end up with a recursive oracle relative to which P NP = NEXP. We use a tree based contruction (see <ref> [Soa87, Chapter XIV] </ref>) where if we can get an injury from one leaf in a tree we can then throw away that leaf and start using the next one. We arrange our tree so that we have more leaves than injuries.
References-found: 10

