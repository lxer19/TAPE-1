URL: http://rakaposhi.eas.asu.edu/tradeoffs-aips94.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: rao@asuvax.asu.edu  
Title: Design Tradeoffs in Partial Order (Plan Space) Planning  
Author: Subbarao Kambhampati 
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Date: May, 1994  
Note: To appear in Proc. 2nd Intl. Conf. on AI Planning Systems (AIPS-94)  
Abstract: Despite the long history of classical planning, there has been very little comparative analysis of the performance tradeoffs offered by the multitude of existing planning algorithms. This is partly due to the many different vocabularies within which planning algorithms are usually expressed. In this paper I provide a generalized algorithm for refinement planning, and show that planners that search in the space of (partial) plans are specific instantiations of this algorithm. The different design choices in partial order planning correspond to the different ways of instantiating the generalized algorithm. I will analyze how these choices affect the search-space size and refinement cost of the resultant planner. Finally, I will concentrate on two specific design choices, viz., protection strategies and tractability refinements, and develop some hypotheses regarding the effect of these choices on the performance on practical problems. I will support these hypotheses with a focussed empirical study. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial Order Planning: Evaluating Possible Efficiency Gains Artificial Intelligence, </title> <journal> Vol. </journal> <volume> 67, No. 1, </volume> <year> 1994. </year>
Reference-contexts: Special thanks to David McAllester and Bulusu Gopi Kumar for constructive suggestions in the initial stages of this work, and Dan Weld, Craig Knoblock, Qiang Yang and Eric Jacopin for helpful discussions. 1 The work of Barrett and Weld <ref> [1] </ref> as well as Minton et. al. [15] are certainly steps in the right direction. However, they do not tell the full story since the comparison there was between a specific partial order and total order planner. <p> Selection Book-keeping Tractability Refinements Tweak [2] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [15] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [21] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL <ref> [1] </ref> Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [18] O (1) O (1) MP, MP-I [9] Protection based Arbitrary (Multi) contributor protection Conflict resolution <p> To evaluate this hypothesis further, I compared TWEAK and SNLP-MTC in a variant of ART-MD-RD domain without the hf =he conditions (similar to D m S 1 domain described in <ref> [1] </ref>), where their average performances are similar. Both planners were started off with a mingoals heuristic, which ranks a partial plan by the number of outstanding open-conditions (i.e., preconditions that are not necessarily true according to MTC).
Reference: [2] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: The precondition and effect formulas are function-free first order predicate logic sentences involving conjunction, negation and quantification. The subset of this representation where both formulas can be represented as conjunctions of function-free first order literals, and all the variables have infinite domains, is called the TWEAK representation (c.f. <ref> [2, 11] </ref>). We shall restrict our discussion to TWEAK representation wherever possible to keep the exposition simple. Plan space planners search in the space of partial plans. <p> The cost of using each type of goal selection strategy depends on the type of partial plans maintained by the planner (see Table 1). Protecting establishments through book keeping: It is possible to limit Refine-Plan to establishment refinements alone and still get a sound and complete planner. Chapman's Tweak <ref> [2] </ref> is such a planner. However, such a planner is not guaranteed to respect its previous establishment decisions while making new ones, and thus may do a lot of redundant work in the worst case. <p> The bookkeeping step attempts to reduce this redundancy by posting auxiliary constraints on the partial plan to protect the establishments. The protection strategies used by classical partial order planners Planner Soln. Constructor Goal Selection Book-keeping Tractability Refinements Tweak <ref> [2] </ref> MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [15] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [21] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary
Reference: [3] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference-contexts: To keep things simple, I am assuming that all the auxiliary constraints are auxiliary candidate constraints. 3 An important exception is the hierarchical task reduction planners, such as SIPE [22], O-Plan <ref> [3] </ref>. However, see [7] for a discussion of how Refine-Plan can be extended to cover these planners.
Reference: [4] <author> M.G. Georgeff. </author> <title> Planning. In Readings in Planning. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [5] <author> J. Jaffar and J. L. Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of POPL-87, </booktitle> <pages> pages 111--119, </pages> <year> 1987. </year>
Reference: [6] <author> S. Kambhampati. </author> <title> Planning as Refinement Search: A unified framework for comparative analysis of Search Space Size and Performance. </title> <type> ASU CSE TR 93-004, </type> <month> June, </month> <year> 1993. </year> <note> Available via anonymous ftp from enws318.eas.asu.edu:pub/rao </note>
Reference-contexts: We shall restrict our discussion to TWEAK representation wherever possible to keep the exposition simple. Plan space planners search in the space of partial plans. In <ref> [8, 6] </ref>, I argue that in refinement planning, partial plans are best seen as constraint sets that implicitly represent all the ground operator sequences (called candidates) that are consistent with those constraints. <p> This ensures that all remaining ground linearizations are safe. Thus, checking the partial plan consistency will amount to checking for the existence of ground linearizations (which can be done by checking ordering and 4 See <ref> [6] </ref> for a coherent reconstruction of the ideas underlying goal protection strategies. 5 Multi-contributor protections, such as those described in [9] can be represented as a disjunction of IPCs. 6 Thus, from completeness point of view, consistency check is really an optional step. binding consistency). <p> Book Keeping: Addition of book-keeping techniques tend to reduce the redundancy factor d . In particular, use of contributor protection makes the search systematic, eliminating all the redundancy in the search space and making d equal to 1 <ref> [14, 6] </ref>. This tends to reduce the fringe size, jF d j. Book keeping constraints do however tend to increase the cost of consistency check. In particular, checking the consistency of a partial plan containing interval preservation constraints is NP-hard even for ground plans in TWEAK representation (c.f. [20]). <p> They thus primarily reduce the C c component of refinement cost. In the case of pre-ordering refinements, they also tend to reduce the cost of goal selection and solution-construction, especially when the latter are based on MTC (thereby reducing the C s and C e components) <ref> [6] </ref>. In terms of search space size, tractability refinements further refine the plans coming out of the establishment stage, increasing the b t component of the branching factor. <p> All these planners use the same MTC-based goal selection strategy, and MTC-based solution constructor function (see Section 3). SNLP-MTC and SNLP-UA use contributor protection, while McNonlin-MTC uses interval protection <ref> [6, 9] </ref>. UA and SNLP-UA use unambiguous preordering strategies (SNLP-UA uses a stronger notion of interaction which makes two steps interact even if they share add list literals [6]). <p> SNLP-MTC and SNLP-UA use contributor protection, while McNonlin-MTC uses interval protection [6, 9]. UA and SNLP-UA use unambiguous preordering strategies (SNLP-UA uses a stronger notion of interaction which makes two steps interact even if they share add list literals <ref> [6] </ref>). SNLP-MTC and McNONLIN-MTC use conflict resolution strate gies as their tractability refinements. 5.1 Tractability Refinements From the discussion in Section 4, we note that presence of tractability refinements increases b t .
Reference: [7] <author> S. Kambhampati. </author> <title> Comparing partial order planning and task reduction planning: </title> <note> A preliminary report. ASU CSE TR-94-001. </note>
Reference-contexts: To keep things simple, I am assuming that all the auxiliary constraints are auxiliary candidate constraints. 3 An important exception is the hierarchical task reduction planners, such as SIPE [22], O-Plan [3]. However, see <ref> [7] </ref> for a discussion of how Refine-Plan can be extended to cover these planners. <p> While this paper makes an important start towards understanding of the comparative performance of partial-order planners, further work is still needed to develop a predictive understanding of which instantiations of Refine-Plan will perform best in which types of domains. Finally, although I concentrated on partial order planners, in <ref> [7] </ref> I show that Refine-Plan can also be extended to cover task reduction planners.
Reference: [8] <author> S. Kambhampati. </author> <title> Refinement search as a unifying framework for analyzing planning algorithms. </title> <booktitle> In Proc. 4th Intl. Conf. on Ppls. of KR & R (KR-94), </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: We shall restrict our discussion to TWEAK representation wherever possible to keep the exposition simple. Plan space planners search in the space of partial plans. In <ref> [8, 6] </ref>, I argue that in refinement planning, partial plans are best seen as constraint sets that implicitly represent all the ground operator sequences (called candidates) that are consistent with those constraints. <p> For S to be a candidate of P, it should also satisfy the set of auxiliary constraints specified by L. 2 An important type of auxiliary 2 For a more formal treatment of the semantics of candidate sets and the auxiliary constraints, see <ref> [8] </ref>. There, I differentiate between two types of auxiliary constraints-- auxiliary candidate constraints, which need to be constraint is an interval preservation constraint (IPC), which is specified as a 3-tuple: hs; p; s 0 i. <p> A partial plan is said to be inconsistent if its candidate set is empty (i.e., there exists no ground operator sequence that is consistent with the constraints of the plan). It can be shown <ref> [8] </ref> that a partial plan is consistent if it has at least one safe ground linearization, and inconsistent otherwise. 3 A generalized algorithm for Partial-order Plan ning The procedure Refine-Plan in Figure 1 describes a generalized refinement-planning algorithm, the specific instantiations of which cover most of the existing partial-order (plan-space) planners. <p> In <ref> [8] </ref>, we show that it is possible to provide polynomial k-eager solution constructors, which randomly check k safe ground linearizations of the plan to see if any of them are solutions.
Reference: [9] <author> S. Kambhampati. </author> <title> Multi-Contributor Causal Structures for Planning: A Formalization and Evaluation. </title> <journal> Artificial Intelligence. </journal> <note> 1994 (To appear) </note>
Reference-contexts: & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [18] O (1) O (1) MP, MP-I <ref> [9] </ref> Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA (Sec. 5) MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection conflict resolution McNONLIN-MTC MTC based O (n 4 <p> The last three planners have not been described in the literature previously. They are used in Section 5 to facilitate normalized comparisons. come in two main varieties: interval protection (aka causal link protection, or protection intervals), and contributor protection (aka exhaustive causal link protection <ref> [9] </ref>). They can both be represented in terms of the interval preservation constraints. Suppose the planner just established a condition c at step s with the help of the effects of the step s 0 . <p> Thus, checking the partial plan consistency will amount to checking for the existence of ground linearizations (which can be done by checking ordering and 4 See [6] for a coherent reconstruction of the ideas underlying goal protection strategies. 5 Multi-contributor protections, such as those described in <ref> [9] </ref> can be represented as a disjunction of IPCs. 6 Thus, from completeness point of view, consistency check is really an optional step. binding consistency). <p> All these planners use the same MTC-based goal selection strategy, and MTC-based solution constructor function (see Section 3). SNLP-MTC and SNLP-UA use contributor protection, while McNonlin-MTC uses interval protection <ref> [6, 9] </ref>. UA and SNLP-UA use unambiguous preordering strategies (SNLP-UA uses a stronger notion of interaction which makes two steps interact even if they share add list literals [6]).
Reference: [10] <author> S. Kambhampati. </author> <title> On the Utility of Systematicity: Understanding tradeoffs between redundancy and commitment in partial order planning In Proceedings of IJCAI-93, </title> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: To evaluate this hypothesis, I compared the performance of the five planners on problems from an artificial domain called ART-MD-RD <ref> [10] </ref>, which is specified as: A i prec : I i ; he add : G i ; hf del : fI j jj &lt; ig [ fheg for even i A i prec : I i ; hf add : G i ; he del : fI j jj &lt; <p> In the case of LIFO ordering, each planner is forced to work on he and hf conditions explicitly. These are high-frequency conditions (c.f. <ref> [10] </ref>) in the sense that there are many actions that can add or delete them. Because of this, the branching factor at the establishment refinement is very high for these conditions, and becomes the dominating factor affecting the performance. <p> From the same plots, we also note that SNLP-UA, which uses the contributor protection, is closer to UA than SNLP-MTC in performance. The lack of direct correlation between protection strategies and performance should not be surprising. As shown in <ref> [10] </ref>, the redundancy in the search space is expected to affect performance only when the planner is forced to examine a significant part of its search space before finding the solution.
Reference: [11] <author> S. Kambhampati and D.S. Nau. </author> <title> On the Nature and Role of Modal Truth Criteria in Planning Artificial Intelligence, </title> <note> 1994 (To appear). </note>
Reference-contexts: The precondition and effect formulas are function-free first order predicate logic sentences involving conjunction, negation and quantification. The subset of this representation where both formulas can be represented as conjunctions of function-free first order literals, and all the variables have infinite domains, is called the TWEAK representation (c.f. <ref> [2, 11] </ref>). We shall restrict our discussion to TWEAK representation wherever possible to keep the exposition simple. Plan space planners search in the space of partial plans.
Reference: [12] <author> C. Knoblock and Q. Yang. </author> <title> A Comparison of the SNLP and TWEAK planning algorithms. </title> <booktitle> In Proc. of AAAI Spring Symp. on Foundations of Automatic Planning. </booktitle> <month> March, </month> <year> 1993. </year>
Reference-contexts: of average redundancy factor and average candidate set size at the termination fringe for 30 random 6-goal problems in ART-MD-RD domain b t is accompanied by any fortuitous decrease in b e . (A variant of this type of interaction was first observed by Knoblock and Yang in their experiments <ref> [12] </ref>.) The behavior of the five planners in LIFO ordering can be explained in terms of the interaction between b t and b e . In the case of LIFO ordering, each planner is forced to work on he and hf conditions explicitly.
Reference: [13] <author> D. McDermott. </author> <title> Regression Planning. </title> <journal> Intl. Jour. Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: (n 4 ) None None UA [15] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [21] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal <ref> [13] </ref> Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution UCPOP [18] O (1) O (1) MP, MP-I [9] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA (Sec. 5) MTC based O (n 4 ) MTC based O (n <p> They can both be represented in terms of the interval preservation constraints. Suppose the planner just established a condition c at step s with the help of the effects of the step s 0 . For planners using interval protection (e.g., PEDESTAL <ref> [13] </ref>), the book-keeping constraint requires that no candidate of the partial plan can have p deleted between operators corresponding to s 0 and s. It can thus be modeled in terms of interval preservation constraint hs 0 ; p; si.
Reference: [14] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: O (n 4 ) None Unambiguous ordering Nonlin [21] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP <ref> [14] </ref> Protection based Arbitrary Contributor protection Conflict resolution UCPOP [18] O (1) O (1) MP, MP-I [9] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA (Sec. 5) MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) <p> Book Keeping: Addition of book-keeping techniques tend to reduce the redundancy factor d . In particular, use of contributor protection makes the search systematic, eliminating all the redundancy in the search space and making d equal to 1 <ref> [14, 6] </ref>. This tends to reduce the fringe size, jF d j. Book keeping constraints do however tend to increase the cost of consistency check. In particular, checking the consistency of a partial plan containing interval preservation constraints is NP-hard even for ground plans in TWEAK representation (c.f. [20]).
Reference: [15] <author> S. Minton, M. Drummond, J. Bresina and A. Philips. </author> <title> Total Order vs. Partial Order Planning: </title> <booktitle> Factors Influencing Performance In Proc. </booktitle> <address> KR-92, </address> <year> 1992. </year>
Reference-contexts: Special thanks to David McAllester and Bulusu Gopi Kumar for constructive suggestions in the initial stages of this work, and Dan Weld, Craig Knoblock, Qiang Yang and Eric Jacopin for helpful discussions. 1 The work of Barrett and Weld [1] as well as Minton et. al. <ref> [15] </ref> are certainly steps in the right direction. However, they do not tell the full story since the comparison there was between a specific partial order and total order planner. <p> The protection strategies used by classical partial order planners Planner Soln. Constructor Goal Selection Book-keeping Tractability Refinements Tweak [2] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA <ref> [15] </ref> MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin [21] MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O <p> In the case of pre-ordering, this aim is achieved by restricting the type of partial orderings in the plan such that consistency with respect to auxiliary constraints can be checked without explicitly enumerating all the ground linearizations. Two possible pre-ordering techniques are total ordering and unambiguous ordering <ref> [15] </ref>. Total ordering orders every pair of steps in the plan, while unambiguous ordering orders a pair of steps only when their preconditions and effects have an overlap (thereby making it possible that the two steps will interact).
Reference: [16] <author> J. Pearl. </author> <title> Heuristics: Intelligent Search Strategies for Computer Problem Solving. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <month> Massachusettes </month> <year> (1984). </year>
Reference: [17] <author> E.P.D. Pednault. </author> <title> Synthesizing Plans that contain actions with Context-Dependent Effects Computational Intelligence, </title> <journal> Vol. </journal> <volume> 4, </volume> <month> 356-372 </month> <year> (1988). </year>
Reference-contexts: A planning strategy is said to be complete if it can find all the minimal solutions for any given problem. We will be assuming that the domain operators are described in the ADL <ref> [17] </ref> representation with Precondition and Effect formulas. The precondition and effect formulas are function-free first order predicate logic sentences involving conjunction, negation and quantification. <p> It selects a precondition hC; si of the plan (where C is a precondition of a step s), and refines (i.e., adds constraints to) the partial plan such that different steps act as contributors of C to s in different refinements. Pednault <ref> [17] </ref> provides a general theory of establishment refinement for plans containing actions with conditional and quantified effects. Syntactically, each refinement corresponds to adding different sets of new step, ordering and binding constraints (as well as additional secondary preconditions, in the case of ADL actions [17]) to the parent plan. satisfied by <p> Pednault <ref> [17] </ref> provides a general theory of establishment refinement for plans containing actions with conditional and quantified effects. Syntactically, each refinement corresponds to adding different sets of new step, ordering and binding constraints (as well as additional secondary preconditions, in the case of ADL actions [17]) to the parent plan. satisfied by every candidate of the plan, and auxiliary solution constraints which need to be satisfied only by those candidates of the plan that are solutions to the planning problem.
Reference: [18] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proc. </booktitle> <address> KR-92, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution UCPOP <ref> [18] </ref> O (1) O (1) MP, MP-I [9] Protection based Arbitrary (Multi) contributor protection Conflict resolution SNLP-UA (Sec. 5) MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection Unambiguous Ordering SNLP-MTC MTC based O (n 4 ) MTC based O (n 4 ) Contributor protection conflict
Reference: [19] <author> E. Sacerdoti. </author> <title> Planning in a Hierarchy of Abstraction Spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2), </volume> <year> 1975. </year>
Reference-contexts: used to select the particular precondition hC; si to be established, (called goal selection strategy) can be arbitrary, demand driven (e.g. select a goal only when it is not necessarily true in all ground linearizations of the current partial plan), or can depend on some ranking based on precondition abstraction <ref> [19] </ref>. The cost of using each type of goal selection strategy depends on the type of partial plans maintained by the planner (see Table 1). Protecting establishments through book keeping: It is possible to limit Refine-Plan to establishment refinements alone and still get a sound and complete planner.
Reference: [20] <author> D.E. Smith and M.A. Peot. </author> <title> Postponing Simple Conflicts in Nonlinear Planning. </title> <booktitle> In Proc. Eleventh AAAI, </booktitle> <year> 1993. </year>
Reference-contexts: This requires checking each ground linearization against all the auxiliary constraints. For general partial orderings with causal-link based auxiliary constraints, the consistency check is NP-hard <ref> [20] </ref> even for TWEAK action representation. Pre-ordering and Conflict Resolution to aid tractable refinement: Both preordering and conflict resolution steps aim to make Refine-Plan tractable by making the consistency check polynomial. <p> This tends to reduce the fringe size, jF d j. Book keeping constraints do however tend to increase the cost of consistency check. In particular, checking the consistency of a partial plan containing interval preservation constraints is NP-hard even for ground plans in TWEAK representation (c.f. <ref> [20] </ref>). Consistency Check: As mentioned earlier, the motivation behind consistency check is to avoid refining inconsistent plans (or the plans with empty candidate sets). Refining inconsistent plans is a useless activity and populates the search fringe with plans with empty candidate sets, driving down d .
Reference: [21] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: The protection strategies used by classical partial order planners Planner Soln. Constructor Goal Selection Book-keeping Tractability Refinements Tweak [2] MTC-based O (n 4 ) MTC-based O (n 4 ) None None UA [15] MTC-based O (n 4 ) MTC-based O (n 4 ) None Unambiguous ordering Nonlin <ref> [21] </ref> MTC (Q&A) based Arbitrary O (1) Interval & Goal Protection via Q&A Conflict Resolution TOCL [1] Protection based O (1) Arbitrary O (1) Contributor protection Total ordering Pedestal [13] Protection based O (1) Arbitrary O (1) Interval Protection Total ordering SNLP [14] Protection based Arbitrary Contributor protection Conflict resolution UCPOP
Reference: [22] <author> D. Wilkins. </author> <title> Practical Planning. </title> <publisher> Morgan Kaufmann (1988). </publisher>
Reference-contexts: To keep things simple, I am assuming that all the auxiliary constraints are auxiliary candidate constraints. 3 An important exception is the hierarchical task reduction planners, such as SIPE <ref> [22] </ref>, O-Plan [3]. However, see [7] for a discussion of how Refine-Plan can be extended to cover these planners.
References-found: 22

