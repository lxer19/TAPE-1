URL: http://www.cs.berkeley.edu/~suchi/classes/algorithms/project/steiner.ps
Refering-URL: http://www.cs.berkeley.edu/~suchi/classes/algorithms/project/
Root-URL: 
Email: ftecklee,suchig@cs.berkeley.edu  
Title: Approximate Steiner Tree for Multicast Routing an efficient mechanism for multi-point communication. The multicast machinery
Author: Teck-Lee Tung and Suchitra Raman 
Note: Multicast has emerged as  
Abstract: CS270 Combinatorial Algorithms & Data Structures Term Project Report Abstract The Steiner tree of the destination set of a multicast group is the ideal distribution tree for multiple source multicast groups. However, the Steiner problem in known to be NP-complete for general graphs. In this paper, we develop and study some polynomial-time heuristics for approximate Steiner trees. We analyze their outputs in the context of multicast routing for large Internet-like randomly generated networks and compare them to other previously proposed heuristics.
Abstract-found: 1
Intro-found: 1
Reference: [AHU74] <author> A. V. AHO, J. E. .HOPCROFT, and J. D. ULLMAN, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> McGraw Hill 1974, </publisher> <pages> pp. 130-150. </pages>
Reference-contexts: The union-find data structure, this O (mff fl (n)) operations, where ff fl (n) is the inverse of the Ackermann function and grows very slowly <ref> [AHU74] </ref>. If the set of input sizes we are interested in permits it, we can approximate this to a constant, say c. The priority queue operations take O (lg n) time per operation, and contribute O (m lg n) operations.
Reference: [SLS95] <author> A. SHAIKH, S. LU, and K. SHIN, </author> <title> Localized Multicast Routing, </title> <booktitle> 1995, Proceedings of IEEE GLOBECOMM'95. </booktitle>
Reference-contexts: One of the heuristics is to run a minimum spanning tree (MST) algorithm and trim the non-destination leaf nodes. This algorithm has low complexity, and we used the results of this algorithm on our test inputs for comparison. Shaikh et al. <ref> [SLS95] </ref> propose a variant of Dijkstra's algorithm called destination-driven multicast (referred to as DDMC hereafter). The key idea in this algorithm to start at a randomly chosen destination node and incrementally add new nodes to the tree. <p> We excluded this optimization to maintain simplicity. 4 We can end up in a cycle is we add an edge that connects two elements in the same block in P . 5 This important interpretation of the distance estimate is also used in <ref> [SLS95] </ref>. 4 Also note that in step 7 we add the node u back into the priority queue only if the node still has an edge that connects it to another block. <p> Most networks in the internet are not densely connected at present, so we expect ffi m ax to be small. The performance of the algorithm is therefore reasonable. 3.4 Simple Test cases edges in the multicast tree. We first look at test cases used in <ref> [SLS95] </ref>, the results are shown in Figure 3.4 and Figure 4. In Figure 3.4, we have a case where DDMC performs well for all choices of the source (i.e. starting) nodes, except when the source node is B, when the total cost increases by 3 over the other trees. <p> We compare the performance of these two algorithms with two previously known heuristics for the Steiner tree problem - MST + Trim and destination-driven multicast <ref> [SLS95] </ref>. For the spanning tree weight metric, all the heuristics have similar behavior for large input graphs. However, we observe that DDMC is highly sensitive to the choice of initial source.
Reference: [SS96] <author> A. SHAIKH and K. SHIN, </author> <title> Destination-Driven Routing for Low-Cost Multicast, </title> <journal> IEEE Journal on Selected Areas in Communications, special issue on Network Support for Multipoint Communication, </journal> <month> Jan-uary </month> <year> 1996. </year>
Reference-contexts: Unlike Dijkstra's algorithm where the new node added has the shortest distance to the source, in DDMC the new node chosen is the one that has the shortest distance to a destination that is already in the current distribution tree. In a subsequent paper <ref> [SS96] </ref>, the authors peformed extensive simulations to show that DDMC performs well compared to other well-known Steiner heuristics. One nice property of this algorithm is that at each stage only the cost of incidental links needs to be taken into account.
Reference: [CLR93] <author> T. H. CORMEN, C. E. LEISERSON, and R. RIVEST, </author> <title> Introduction to Algorithms, </title> <publisher> McGraw Hill, </publisher> <year> 1993, </year> <pages> pp. 345-350. </pages>
Reference: [CZ97] <author> E. COHEN and Y. ZHUANG, </author> <booktitle> Lecture 3, CS 270 Notes, Spring 1997 Combinatorial Algorithms and Data Structures, </booktitle> <institution> University of California, Berkeley </institution>
Reference: [GJ79] <author> M. R. GAREY, D. S. JOHNSON, </author> <title> Computers and intractability: A guide to the theory of NP-completenesss, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The steiner tree problem is known to be NP-complete <ref> [GJ79] </ref>. A number of approximation alogorithms have been proposed in the literature. (e.g. [KMB81], [RC86]). One of the heuristics is to run a minimum spanning tree (MST) algorithm and trim the non-destination leaf nodes.
Reference: [HRW92] <author> F. HWANG, D. RICHARDS and P. WINTER, </author> <title> The Steiner Tree Problem, number 53 in Annals of Discrete Mathematics, </title> <publisher> North-Holland, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The precise formulation is presented below <ref> [HRW92] </ref>. Given an undirected graph G = (V; E), and a cost function w : E ! R + and a non-empty set of destinations D V .
Reference: [KMB81] <author> K. KOU, G. MARKOWSKY, L. BERMAN, </author> <title> A fast algorithm for Steiner trees in graphs, </title> <journal> Acta Informat-ica, </journal> <volume> vol 14, pp141-145, </volume> <year> 1981. </year>
Reference-contexts: The steiner tree problem is known to be NP-complete [GJ79]. A number of approximation alogorithms have been proposed in the literature. (e.g. <ref> [KMB81] </ref>, [RC86]). One of the heuristics is to run a minimum spanning tree (MST) algorithm and trim the non-destination leaf nodes. This algorithm has low complexity, and we used the results of this algorithm on our test inputs for comparison.
Reference: [Koz90] <author> D. C. KOZEN, </author> <title> The Design and Analysis of Algorithms, </title> <publisher> Springer-Verlag Inc., </publisher> <year> 1990. </year>
Reference: [LEDA] <institution> Library of Efficient Datatypes and Algorithms Home Page, Max Planck Institute for Computer Science http://www.mpi-sb.mpg.de/LEDA/leda.html </institution>
Reference-contexts: Figure 8 shows this for one family of graphs. Here, the pre-processing step is futile and does not alter the complexity of the problem. 7 5 Implementation We implemented both DDMC and Multi-DDMC using the Library of Efficient Data Structures and Algorithms (LEDA) <ref> [LEDA] </ref>, a C++ class library that contains classes for graphs, priority queues, arrays, linked lists etc. that the algorithms requires.
Reference: [TIERS] <author> M. B. </author> <title> DOAR A Better Model for Generating Test Networks, </title> <address> ftp://ftp.nexen.com/pub/papers 11 </address>
Reference-contexts: Most of the implementation are reasonably efficient, for example graphs are implemented in doubly linked adjacency lists, priority queues using fibonacci heaps, etc. 6 Quantitative Performance Evaluation To compare the performance of these algorithms, 6 we used the TIERS package written by M. Doar <ref> [TIERS] </ref>. TIERS generates networks that resemble real data communication networks more closely than random graphs. The parameters controllable by the user are the number of Wide Area Networks (WANs), Metorpolitian Area Networks (MANs), Local Area Networks, as well as the amount of redundancy between nodes in each class of networks.
Reference: [PaSt82] <author> C.H. PAPADIMITRIOU and K. STEIGLITZ, </author> <title> Combinatorial Optimization: Algorithms and Complexity, </title> <publisher> Prentice Hall , 1982, </publisher> <address> Chapter 12.4. </address>
Reference: [RC86] <author> V. RAYWARD-SMITH and A. CLARE, </author> <title> On finding Steiner vertices, </title> <journal> Networks, </journal> <volume> vol. 16, </volume> <pages> pp 573-577, </pages> <year> 1980. </year> <month> 13 </month>
Reference-contexts: The steiner tree problem is known to be NP-complete [GJ79]. A number of approximation alogorithms have been proposed in the literature. (e.g. [KMB81], <ref> [RC86] </ref>). One of the heuristics is to run a minimum spanning tree (MST) algorithm and trim the non-destination leaf nodes. This algorithm has low complexity, and we used the results of this algorithm on our test inputs for comparison.
References-found: 13

