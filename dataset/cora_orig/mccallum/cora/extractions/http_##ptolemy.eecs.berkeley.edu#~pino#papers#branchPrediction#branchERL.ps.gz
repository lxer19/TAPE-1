URL: http://ptolemy.eecs.berkeley.edu/~pino/papers/branchPrediction/branchERL.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/~pino/papers/branchPrediction/index.html
Root-URL: http://www.cs.berkeley.edu
Title: chip designers to consider before using any of the branch prediction schemes. Given enough hardware,
Author: D.R. Kaeli, P.G. Emma, J.W. Knight, and T.R. Puzak, p. -. [] T.-Y. Yeh and Y.N. Patt, p. -. [] S.-T. Pan, K. So, and J.T. Rahmeh, p. - [] T.-Y. Yeh and Y.N. Patt, [] D.A. Patterson, and J.L. Hennessy, [] J. Lee, and A. J. Smith, [] J. E. Smith, 
Date: (January 1984), pp. 6-22.  
Address: CA, USA, 1993, p. 257-66.  San Mateo, CA., 1990.  
Affiliation: San Diego,  
Note: 6.0 CONCLUSIONS  REFERENCES [1]  Eighteenth EUROMICRO Symposium on Micropro-cessing and Microprogramming (EUROMICRO 92), vol. 35, Paris, France, 1992,  Proceedings of the 24th International Symposium on Microarchitecture. MICRO 24, Albuquerque, NM, USA, ACM, 1991,  and Operating Systems (ASPLOS-V), vol. 27, Bos-ton, MA, USA, 1992,  20th Annual International Symposium on Computer Architecture ISCA 20, vol. 21,  Morgan Kaufmann,  Proceedings of the 8th International Symposium on Computer Architecture, (May. 1981), pp. 443-58.  
Pubnum: Computer,  
Abstract: After we reviewed our simulation results, we realize that the way we set the combined DHT/BHT table size may not have been the optimal. For simplicity, we assumed that the DHT and BHT components had the same number of table entries. We now feel that a the DHT should have more table entries than the BHT. We believe that the prediction rates will remain lower than the DHT -2 alone. The main advantage of the combined DHT-BHT is that in the BHT we can store the tar get address and thereby reduce the number of wasted cycles on calculating the target address each time. Our most surprising result is that DHT-2 has roughly 90% prediction accuracies for buffer sizes in the 32 - 64 byte regions. Due to the high accuracy of the small DHT -2, we believe researchers should focus on small and simple branch prediction schemes. However , as is evident in the literature, researchers have been recently looking at increasingly complex branch prediction techniques. Our results demonstrate that these schemes do not improve prediction significantly and perform much worse for low hardware-cost implementations. Correlation based schemes overcome one level techniques only after they reach their saturation point. Because of the low hardware-cost implementations possible with DHT, processor designers should investigate into designing prediction units per process rather than per processor. We have not studied the ef fect of interleaving instruction streams through a branch prediction simulation and further study in this area is warranted. If target addresses are needed to reduce branch cycle penalties, we recommend combining a DHT-2 with a cache. The cache would store only taken branches using the branch instruction address as a tag and storing the associated target address. This is similar to the combined DHT/BHT proposed in [1] except that it is less complex. Again, in this case, multiple small DHT tables could be introduced to allow for multiple processes.
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> D.R. Kaeli, P.G. Emma, J.W. Knight, and T.R. Puzak, </author> <title> Contrasting instruction-fetch time and instruction-decode time branch prediction mechanisms: achieving synergy through their cooperative operation, </title> <booktitle> Eighteenth EUROMICRO Symposium on Micropro-cessing and Microprogramming (EUROMICRO 92), </booktitle> <volume> vol. </volume> <pages> 35, </pages> <address> Paris, France, 1992, p. </address> <pages> 401-8. </pages>
Reference: [2] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> Two-level adaptive training branch prediction, </title> <booktitle> Proceedings of the 24th International Symposium on Microarchitecture. MICRO 24, </booktitle> <address> Albuquerque, NM, USA, </address> <publisher> ACM, </publisher> <year> 1991, </year> <pages> p. 51-61. </pages>
Reference: [3] <author> S.-T. Pan, K. So, and J.T. Rahmeh, </author> <title> Improving the accuracy of dynamic branch prediction using branch correlation, </title> <booktitle> Fifth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-V), </booktitle> <volume> vol. </volume> <pages> 27, </pages> <address> Bos-ton, MA, USA, 1992, p. </address> <pages> 76-84 </pages>
Reference: [4] <author> T.-Y. Yeh and Y.N. Patt, </author> <title> A comparison of dynamic branch predictors that use two levels of branch history, </title> <booktitle> 20th Annual International Symposium on Computer Architecture ISCA 20, </booktitle> <volume> vol. </volume> <pages> 21, </pages> <address> San Diego, CA, USA, 1993, p. </address> <pages> 257-66. </pages>
Reference: [5] <author> D.A. Patterson, and J.L. Hennessy, </author> <title> Computer Architecture a Quantitative Approach, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA., </address> <year> 1990. </year>
Reference: [6] <author> J. Lee, and A. J. Smith, </author> <title> Branch Prediction Strategies and Branch Target Buffer Design, </title> <booktitle> IEEE Computer, </booktitle> <month> (January </month> <year> 1984), </year> <pages> pp. 6-22. </pages>

References-found: 6

