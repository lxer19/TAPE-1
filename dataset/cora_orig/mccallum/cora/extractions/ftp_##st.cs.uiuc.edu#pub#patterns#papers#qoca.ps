URL: ftp://st.cs.uiuc.edu/pub/patterns/papers/qoca.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/patterns/New.html
Root-URL: http://www.cs.uiuc.edu
Title: An Object-Oriented Architecture for Constraint-Based Graphical Editing  
Author: Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides 
Keyword: graphical editing, simultaneous linear constraints, quadratic optimization, object-oriented frameworks  
Address: Yorktown Heights, NY 10598  
Affiliation: IBM T.J. Watson Research Center  
Abstract: Direct-manipulation graphics editors are useful tools for a wide variety of domains such as technical drawing, computer-aided design, application building, and music composition. Constraints can be a powerful mechanism for specifying complex semantics declaratively in these domains. To date, few domain-specific graphics editors have provided constraint-based specification and manipulation facilities. Part of the reason is that graphical editors are hard enough to develop without implementing a constraint system as well. Even though graphical editing frameworks can reduce the difficulty of constructing domain specific graphical editors, a fundamental problem remains: there do not exist general constraint solving architectures that are efficient enough to support highly interactive editing, yet suitably flexible and extensible to adapt to different editing domains. Addressing this problem, we present an object-oriented architecture that integrates the graphical editing framework Unidraw with QOCA, a powerful new constraint solving toolkit. QOCA leverages recent advances in symbolic computation and geometry to support efficient incremental solving of simultaneous equations and inequations, while optimizing convex quadratic objective functions. QOCA also supports new kinds of constraint manipulation that have novel applications to graphical editing. QOCA exploits the implementation language to provide a convenient, object-oriented syntax for expressing constraints in the framework. The result is a generic and easily extended architecture for constraint-based, direct-manipulation graphical editing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Bier and M. Stone. Snap-dragging. </author> <booktitle> In ACM SIGGRAPH '86 Conference Proceedings, </booktitle> <pages> pages 233-240, </pages> <address> Dallas, TX, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: Responsibility can thus be transferred from the user to the constraint system, freeing the user to focus on more creative aspects of his task. Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes <ref> [1, 20, 2, 21] </ref>. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently [23, 24, 27] that address this problem.
Reference: [2] <author> A. Borning. </author> <title> The programming language aspects of ThingLab a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 343-387, </pages> <month> October </month> <year> 1981. </year> <month> - 21 </month> - 
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992. <p> Responsibility can thus be transferred from the user to the constraint system, freeing the user to focus on more creative aspects of his task. Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes <ref> [1, 20, 2, 21] </ref>. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently [23, 24, 27] that address this problem.
Reference: [3] <author> A. Borning and R.A. Duisberg. </author> <title> Constraint based tools for building user interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 4(4), </volume> <year> 1986. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992.
Reference: [4] <author> A. Borning, M. Maher, A. Martindale, and M. Wilson. </author> <title> Constraint hierarchies and logic programming. </title> <booktitle> In International Conference on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Requiring precisely constrained systems| that is, neither over- nor underconstrained|places too much responsibility on the user to create potentially complex yet error-free constraint specifications. - 5 - One way to deal with this problem is with constraint hierarchies <ref> [4] </ref>, in which lower priority constraints express default behavior. The constraint solver selects (either arbitrarily or via comparators) non-required constraints to include in the solution.
Reference: [5] <author> D. Epstein and W.R. Lalonde. </author> <title> A smalltalk window system based on constraints,. </title> <booktitle> In Object-Oriented Programming Systems, Languages and Applications Conference, </booktitle> <pages> pages 83-94. </pages> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992.
Reference: [6] <author> B. N. Freeman-Benson. </author> <title> Kaleidoscope: Mixing objects, constraints, and imperative programming. </title> <booktitle> In Object-Oriented Programming Systems, Languages and Applications Conference, </booktitle> <pages> pages 77-88, </pages> <year> 1990. </year>
Reference-contexts: direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems <ref> [16, 6] </ref> Drawing packages, CAD systems, application builders, and diagrammatic editors are representative of a class of applications that could benefit particularly from constraints.
Reference: [7] <author> B. N. Freeman-Benson and Alan Borning. </author> <title> Integrating constraints with an object-oriented language. </title> <booktitle> In European Conference on Object-Oriented Programming, </booktitle> <pages> pages 268-286, </pages> <year> 1992. </year>
Reference-contexts: To appear in Advances in Object-Oriented Graphics II, Springer Verlag, 1993. - 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations <ref> [7, 10] </ref> * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of
Reference: [8] <author> J. Gleeson and J. Ryan. </author> <title> Identifying minimally infeasible subsystems of inequalities. </title> <journal> ORSA Journal on Computing, </journal> <volume> 2(1) </volume> <pages> 61-63, </pages> <month> Winter </month> <year> 1990. </year>
Reference-contexts: When the simplified constraint contains only slack variables, it is added into the slack equations; then the Simplex is activated to solve the system. If this system is infeasible, one can apply the technique proposed by Gleeson and Ryan <ref> [8] </ref> to identify the minimally infeasible subsystems and hence decide which constraints should be removed to obtain feasibility. It follows from the construction of the normal form that the number of slack equations is less than or equal to the number of inequalities in the original system.
Reference: [9] <author> R. Helm, K. Marriott, and M. Odersky. </author> <title> Building visual language parsers. </title> <booktitle> In Computer Human Interaction (CHI), </booktitle> <pages> pages 105-112. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: We plan to use QOCA extensively in the future. One project will extend key glyphs in InterViews, such as trays and glue, to be implemented in terms of QOCA constraints. QOCA will also serve as a basic element in our pen-based visual language parsing system <ref> [9] </ref>. We will continue research into new algorithms for manipulating constraints, QOCA being a good vehicle for exploring new algorithms. We also hope to make QOCA freely available, thereby promoting more widespread applications for constraints.
Reference: [10] <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for user interfaces. </title> <booktitle> In Graphics Interface, </booktitle> <pages> pages 301-309, </pages> <address> Vancouver, Canada, </address> <year> 1992. </year>
Reference-contexts: To appear in Advances in Object-Oriented Graphics II, Springer Verlag, 1993. - 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations <ref> [7, 10] </ref> * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of <p> To appear in Advances in Object-Oriented Graphics II, Springer Verlag, 1993. - 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations [7, 10] * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints <ref> [10, 17] </ref> * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems [16, 6] Drawing packages, CAD systems, application builders, and diagrammatic editors <p> 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations [7, 10] * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints <ref> [10] </ref>. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems [16, 6] Drawing packages, CAD systems, application builders, and diagrammatic editors are representative of a class of applications that could benefit particularly from constraints. <p> This makes it difficult to exploit efficient representations and constraint solving algorithms in these systems. - 18 - 4.2 Implementation Here we describe briefly the algorithms and techniques used in the constraint system. A complete description of QOCA is forthcoming [11], and preliminary performance measurements have already been reported <ref> [10] </ref>. QOCA leverages the well-developed theory and efficient algorithms that have been investigated extensively in operations research for handling linear constraints. The Simplex algorithm is the key technique used in the system. The Simplex is an efficient symbolic manipulation technique for testing satisfiability and for optimizing linear constraints. <p> The normal form is essentially a compiled non-redundant representation of the constraints in which as many variables as possible are eliminated. Elsewhere <ref> [10] </ref> we discuss in detail some of the ramifications of normal forms for constraint solving. Briefly, the normal form is constructed as follows. Assume that we have a set of linear equalities and inequalities over the variables x 1 ; :::; x n .
Reference: [11] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. QOCA: </author> <title> An extensible object-oriented constraint solving toolkit. </title> <note> Technical Report In Preparation, </note> <institution> IBM T.J. Watson Research Center, </institution> <year> 1992. </year>
Reference-contexts: This makes it difficult to exploit efficient representations and constraint solving algorithms in these systems. - 18 - 4.2 Implementation Here we describe briefly the algorithms and techniques used in the constraint system. A complete description of QOCA is forthcoming <ref> [11] </ref>, and preliminary performance measurements have already been reported [10]. QOCA leverages the well-developed theory and efficient algorithms that have been investigated extensively in operations research for handling linear constraints. The Simplex algorithm is the key technique used in the system.
Reference: [12] <author> Scott E. Hudson. </author> <title> Adaptive semantic snapping|a technique for semantic feedback at the lexical level. </title> <booktitle> In ACM CHI '90 Conference Proceedings, </booktitle> <pages> pages 65-70, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects <ref> [12] </ref> * graceful handling of underconstrained systems [16, 6] Drawing packages, CAD systems, application builders, and diagrammatic editors are representative of a class of applications that could benefit particularly from constraints.
Reference: [13] <author> D.R. Olson Jr. and K. Allan. </author> <title> Creating interactive techniques by symbolically solving geometric constraints. </title> <booktitle> In ACM/SIGGRAPH/SIGCHI User Interface Software Technologies Conference, </booktitle> <pages> pages 102-107, </pages> <address> Snowbird, Utah, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992.
Reference: [14] <author> C. Lassez and J.-L. Lassez. </author> <title> Quantifier elimination for conjunctions of linear constraints via a convex hull algorithm. </title> <type> Research Report RC 16779, </type> <institution> IBM T.J. Watson Research Center, </institution> <year> 1991. </year> <note> To appear, Symbolic and Numerical Computation|Towards Integration, </note> <editor> Kapur and Mundy editors, </editor> <publisher> Academic Press. </publisher>
Reference-contexts: Then a projection algorithm computes the actual projection. Since the projection space is assumed to be small, we use a projection algorithm called the Convex Hull Method <ref> [14] </ref>, which is based on a geometric approach. For small projection spaces, it is much faster than other projection algorithms based on algebraic manipulation.
Reference: [15] <author> Mark A. Linton, John M. Vlissides, and Paul R. Calder. </author> <title> Composing user interfaces with InterViews. </title> <journal> Computer, </journal> <volume> 22(2) </volume> <pages> 8-22, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: The user can then modify this constant in the builder, and the resulting interface exhibits the proper resize semantics (Figure 6). 3 Unidraw Framework Integration Unidraw is an object-oriented framework for building direct-manipulation graphical editors. It is a part of InterViews <ref> [15] </ref>, a comprehensive set of programming abstractions and tools for the design and implementation of workstation applications. Unidraw partitions the common functionality of graphical editors into four major class hierarchies: 1.
Reference: [16] <author> John H. Maloney, Alan H. Borning, and Bjorn N. Freeman-Benson. </author> <title> Constraint technology for user interface construction in ThingLab II. </title> <booktitle> In ACM OOPSLA '89 Conference Proceedings, </booktitle> <pages> pages 381-388, </pages> <address> New Orleans, LA, </address> <month> October </month> <year> 1989. </year> <month> - 22 </month> - 
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992. <p> To appear in Advances in Object-Oriented Graphics II, Springer Verlag, 1993. - 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations [7, 10] * low latency and high-bandwidth feedback during direct manipulation <ref> [16] </ref> * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems [16, 6] Drawing <p> direct manipulation [16] * incremental addition and deletion of constraints [10, 17] * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems <ref> [16, 6] </ref> Drawing packages, CAD systems, application builders, and diagrammatic editors are representative of a class of applications that could benefit particularly from constraints. <p> Moreover, as improved algorithms and solvers are developed, existing algorithms can be replaced with minimal disturbance. This modularity highlights an advantage of using global constraint solvers such as QOCA. Systems that employ local propagation <ref> [16, 19] </ref> often distribute constraint solving methods throughout the system, relegating to each object the responsibility to solve its own constraints.
Reference: [17] <author> John H. Maloney, Alan H. Borning, and Bjorn N. Freeman-Benson. </author> <title> An incremental constraint solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 55-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: To appear in Advances in Object-Oriented Graphics II, Springer Verlag, 1993. - 2 - * multi-way constraints that can express at least simultaneous linear equations and inequations [7, 10] * low latency and high-bandwidth feedback during direct manipulation [16] * incremental addition and deletion of constraints <ref> [10, 17] </ref> * the ability to detect causes of unsatisfiability for debugging inconsistent systems of constraints [10]. * semantic feedback during direct manipulation to indicate valid ranges for variables and movements of objects [12] * graceful handling of underconstrained systems [16, 6] Drawing packages, CAD systems, application builders, and diagrammatic editors
Reference: [18] <author> K. G. Murty. </author> <title> Linear Complementarity, Linear and Nonlinear Programming. </title> <publisher> Helder-mann Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: This lets the solver (re)compute a normal form efficiently when a constraint is deleted. We handle the addition of constraints - 19 - and incremental computation of a new normal form with standard techniques in sensitivity analysis <ref> [18] </ref>. The expected cost 3 is proportional to the cost of one pivot in M . The actual cost of this pivot depends on the representation of M . With a non-sparse representation, the actual cost is O (n 2 ), where n is the number of original constraints. <p> It uses the Simplex algorithm repeatedly to compute the convex hull of the projected constraints. 4.2.5 Quadratic Optimization The algorithm used for optimizing convex quadratic functions is a variant of the Simplex algorithm; see Murty <ref> [18] </ref> for details. When a new constraint is added, the optimization problem is (re)solved to find the new solution. During direct manipulation, however, a sequence of very similar optimization problems are solved in which the values of parameters change only slightly.
Reference: [19] <author> Brad A. Myers, Dario A. Guise, Roger B. Dannenberg, Brad Vander Zanden, David S. Kosbie, Ed Pervin, Andrew Mickish, and Philippe Marchel. </author> <title> Comprehensive support for graphical, highly interactive user interfaces: The Garnet system. </title> <journal> Computer, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Moreover, as improved algorithms and solvers are developed, existing algorithms can be replaced with minimal disturbance. This modularity highlights an advantage of using global constraint solvers such as QOCA. Systems that employ local propagation <ref> [16, 19] </ref> often distribute constraint solving methods throughout the system, relegating to each object the responsibility to solve its own constraints.
Reference: [20] <author> G. Nelson. Juno, </author> <title> a constraint-based graphics system. </title> <booktitle> In ACM SIGGRAPH '85 Conference Proceedings, </booktitle> <pages> pages 235-243, </pages> <address> San Fransisco, CA, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992. <p> Responsibility can thus be transferred from the user to the constraint system, freeing the user to focus on more creative aspects of his task. Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes <ref> [1, 20, 2, 21] </ref>. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently [23, 24, 27] that address this problem.
Reference: [21] <author> I.E. Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Spring Joint Computer Conference, </booktitle> <pages> pages 329-345, </pages> <year> 1963. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992. <p> Responsibility can thus be transferred from the user to the constraint system, freeing the user to focus on more creative aspects of his task. Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes <ref> [1, 20, 2, 21] </ref>. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently [23, 24, 27] that address this problem.
Reference: [22] <author> P.A. Szekely and B.A. Myers. </author> <title> A user interface toolkit based on graphical objects and constraints. </title> <booktitle> In Object-Oriented Programming Systems, Languages and Applications Conference, </booktitle> <pages> pages 36-45, </pages> <year> 1988. </year>
Reference-contexts: Constraints can specify spatial and semantic relationships declaratively between objects in a user interface, while an underlying constraint solver will ensure that interface meets the specification. Previous work <ref> [2, 3, 5, 16, 20, 13, 21, 22] </ref> has established that constraint systems need at least the following capabilities to be effective in graphical user interfaces: An earlier version of this paper appears in Proceedings of the Third Eurographics Workshop on Object-Oriented Graphics, Champery, Switzerland, October 1992.
Reference: [23] <author> Hiroyuki Tarumi, Jun Rekimoto, Masaru Sugai, Go Yamazake, Takahiro Sugiyama, and Chuzo Akiguchi. </author> <title> Canae|a user interface construction environment with editors as software parts. </title> <journal> NEC Research and Development, </journal> (98):89-98, July 1990. 
Reference-contexts: Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes [1, 20, 2, 21]. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently <ref> [23, 24, 27] </ref> that address this problem.
Reference: [24] <institution> V.I. Corporation. </institution> <note> GECK User's Guide, </note> <year> 1990. </year>
Reference-contexts: Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes [1, 20, 2, 21]. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently <ref> [23, 24, 27] </ref> that address this problem.
Reference: [25] <author> John M. Vlissides. </author> <title> Generalized Graphical Object Editing. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1990. </year>
Reference-contexts: frameworks provide a generic software architecture that typically supports the following: * the definition of domain-specific graphical components and their semantics * mechanisms for composing and structuring components * (reversible) operations on components * specialized direct manipulation techniques * persistence and externalization of application data Experience with graphical editing frameworks <ref> [25] </ref> has shown that they simplify editor development for different domains compared with traditional user interface toolkits, which support only the controlling elements of an application (e.g., buttons, scroll bars, and menus). Unfortunately, current frameworks take little or no advantage of the power of constraints.
Reference: [26] <author> John M. Vlissides and Mark A. Linton. </author> <title> Applying object-oriented design to structured graphics. </title> <booktitle> In Proceedings of the 1988 USENIX C++ Conference, </booktitle> <pages> pages 81-94, </pages> <address> Denver, CO, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: In general, graphical components in Unidraw use structured graphics objects <ref> [26] </ref> to depict themselves graphically. PointEqualityComp maintains a structured graphic object to present its constraint to the user in an intuitive manner. ConstraintComp objects are often constructed by tools that query components for their CSVars using Unidraw's interpreted command mechanism.
Reference: [27] <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> A framework for building domain-specific graphical editors. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 237-268, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Yet few graphical editing systems employ constraints to any degree; those that do are research prototypes [1, 20, 2, 21]. Perhaps one reason is that graphical editors are notoriously difficult to implement, even with conventional user interface toolkits. Several frameworks for building graphical editors have been reported recently <ref> [23, 24, 27] </ref> that address this problem. <p> Consequently, the integration strategy requires a careful design and implementation effort to minimize modifications to the existing systems. This paper presents an architecture for constraint-based, direct-manipulation graphical editing that addresses these issues. The architecture integrates Unidraw <ref> [27] </ref>, a graphical editing framework developed at Stanford University, and QOCA 1 , a new object-oriented constraint-solving toolkit developed at IBM Research. Unidraw is an established graphical editing framework that already has limited constraint-solving capabilities. <p> A detailed description of the model appears elsewhere <ref> [27] </ref>. - 16 - Consider the boxes-and-arrows connectivity example from Section 2.1. Figure 10 depicts three frames of animation produced when the user moves the right-hand rectangle with a MoveTool.
Reference: [28] <author> A. Witkin, M. Gleicher, and W. Welch. </author> <title> Interactive dynamics. </title> <booktitle> In ACM SIGGRAPH '90 Conference Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: This means that the initial basis can be constructed efficiently, since we know which variables are basic. To our knowledge, optimization functions are a new technique for handling undercon-strained systems in user interface applications. This approach is related to Witkin's system for graphical animation <ref> [28] </ref>, which uses functions to define the total energy of a system. In this system a global solver tries to minimize the total energy during manipulation to control the movement of graphical objects.
References-found: 28

