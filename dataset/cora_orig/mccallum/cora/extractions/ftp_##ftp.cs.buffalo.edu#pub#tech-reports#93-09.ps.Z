URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/93-09.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Title: A Diagnostic Simulation Algorithm for Stuck-at Faults in Combinational Circuits  
Author: Sreejit Chakravarty Yiming Gong 
Date: March 29, 1993  
Address: Buffalo, N.Y. 14260  
Affiliation: Department of Computer Science the State University of New York at Buffalo  
Abstract: Two faults are said to be equivalent, w.r.t a test set T, iff they cannot be distinguished by any test in T . The sizes of the equivalence classes are used as a basis for comparing the diagnostic capability of two given test sets. A novel algorithm for computing the Equivalence Classes of stuck-at faults, in combinational(full scan) circuits, w.r.t a given test set is presented. Experimental results presented show the algorithm to be more time and space efficient than a previously known algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Camurati, D. Medine, P. Prinetto, and M. S. Reorda, </author> <title> "A diagnostic test pattern generation algorithm," </title> <booktitle> Proceedings of the International Test Conference, </booktitle> <pages> pp. </pages> <year> 52-58,1990. </year>
Reference-contexts: Evaluation of diagnostic test resolution is the process of computing the value of these parameters. Three diagnostic resolution measures, Diagnostic Resolution (DR), Diagnostic Power (DP), and Equivalence Class (EC) have been proposed in <ref> [1, 2, 3] </ref>. DR is the fraction of fault pairs distinguished by a test set. <p> Then, DR and DP can be computed as following: DR = i6=j jF i j fi jF j j total number of f ault pairs DP = jF i j=1 jF i j total number of f aults 2 Initially, only DR and DP were proposed as diagnostic measures <ref> [1] </ref>. How--ever, it was argued in [3] that these two measures are not a very good set of measures. A third measure, EC was then proposed. This measure contains more diagnostic information and both DP and DP can be computed from EC as stated above. <p> In all work on evaluation of diagnostic test resolution the set of targeted faults is the set of all single stuck-at faults. In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context <ref> [1, 2, 3, 4] </ref>. In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. <p> In all work on evaluation of diagnostic test resolution the set of targeted faults is the set of all single stuck-at faults. In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context [1, 2, 3, 4]. In <ref> [1] </ref>, DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. In [3], EC as a measure of diagnostic test resolution is introduced, and an algorithm for computing the equivalence classes for both combinational and sequential circuits are presented.
Reference: [2] <author> T. Gruning, H. Koopmeiners, and U. Mahlstedt, "DIAGTEST: </author> <title> A fast diagnostic test pattern generator for combinational circuits", </title> <booktitle> Digest of 13 Papers, International Conference on Computer-Aided Design, </booktitle> <pages> pp. </pages> <address> 194--197, </address> <year> 1991. </year>
Reference-contexts: Evaluation of diagnostic test resolution is the process of computing the value of these parameters. Three diagnostic resolution measures, Diagnostic Resolution (DR), Diagnostic Power (DP), and Equivalence Class (EC) have been proposed in <ref> [1, 2, 3] </ref>. DR is the fraction of fault pairs distinguished by a test set. <p> In all work on evaluation of diagnostic test resolution the set of targeted faults is the set of all single stuck-at faults. In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context <ref> [1, 2, 3, 4] </ref>. In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper.
Reference: [3] <author> K. Kubiak, S. Parkes, W. K. Fuchs, and R. Saleh, </author> <title> "Exact Evaluation of Diagnostic Test Resolution," </title> <booktitle> Proc. 29th Design Automation Conf., </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 347-352. </pages>
Reference-contexts: Evaluation of diagnostic test resolution is the process of computing the value of these parameters. Three diagnostic resolution measures, Diagnostic Resolution (DR), Diagnostic Power (DP), and Equivalence Class (EC) have been proposed in <ref> [1, 2, 3] </ref>. DR is the fraction of fault pairs distinguished by a test set. <p> How--ever, it was argued in <ref> [3] </ref> that these two measures are not a very good set of measures. A third measure, EC was then proposed. This measure contains more diagnostic information and both DP and DP can be computed from EC as stated above. <p> In all work on evaluation of diagnostic test resolution the set of targeted faults is the set of all single stuck-at faults. In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context <ref> [1, 2, 3, 4] </ref>. In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. <p> In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context [1, 2, 3, 4]. In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. In <ref> [3] </ref>, EC as a measure of diagnostic test resolution is introduced, and an algorithm for computing the equivalence classes for both combinational and sequential circuits are presented. In [4], an algorithm, which is a modification of PROOFS [9, 10], for computing DR and DP of sequential circuits is presented. <p> We assume C to be combinational. This algorithm starts by assuming that there is only one equivalence class consisting of all the single stuck-at faults. It then computes the equivalence classes by processing one input vector at a time. This is a very different approach than the algorithm in <ref> [3] </ref> that uses N-ary Decision Diagram. As a result the algorithm in [3] potentially needs both exponential space and time. In contrast, our algorithm requires time no more than O (n 2 i ) to process each input vector where n i is the size of the circuit. <p> It then computes the equivalence classes by processing one input vector at a time. This is a very different approach than the algorithm in <ref> [3] </ref> that uses N-ary Decision Diagram. As a result the algorithm in [3] potentially needs both exponential space and time. In contrast, our algorithm requires time no more than O (n 2 i ) to process each input vector where n i is the size of the circuit. <p> We present experimental results on the ISCAS85 [11] as well as the ISCAS89 1 benchmarks and show that our algorithm is both faster and more space efficient than the algorithm in <ref> [3] </ref>. The rest of the paper is organized as follows. In section 2, we briefly introduce and explain concepts and definitions used in this paper. In section 3, we, through an example, give the overall structure of the algorithm, and then explain it in detail. <p> The diagnostic resolution provided by the test set are shown in Table 4. Equivalence classes are reported in order of its size. For example, the number of equivalence classes of size 1 of circuit C432 is 260. We compare these results with results from <ref> [3] </ref>. Note that the same number of tests were used in both cases. They are shown in Table 5. Note that the times are CPU times in a sun 4/70 with 64MB of memory. <p> Note that the times are CPU times in a sun 4/70 with 64MB of memory. Times for larger circuits like C5315, C6288, C7552 as well as some circuits in ISCAS89 were not reported. The ratio gives the speed of our algorithm compared to the one in <ref> [3] </ref>. This large speedup cannot be accounted for by the faster CPU speed of SPARC station 2. 5 Conclusion We showed that by modifying stuck-at fault simulation algorithms for single stuck-at faults we can derive a time and space efficient algorithm for diagnostic.
Reference: [4] <author> Elizabeth M. Rudnick, W. Kent Fuchs, and Janak H. Patel, </author> <title> "Diagnostic Fault Simulation of Sequential Circuits", </title> <booktitle> Proc. Intn'l Test Conf., </booktitle> <year> 1992, </year> <pages> pp. 178-186. </pages>
Reference-contexts: In all work on evaluation of diagnostic test resolution the set of targeted faults is the set of all single stuck-at faults. In this paper we will continue to make this assumption. Evaluation of diagnostic test set have been discussed in several context <ref> [1, 2, 3, 4] </ref>. In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. <p> In [1], DR and DP are defined and used to evaluate the diagnostic test pattern generator presented in that paper. In [3], EC as a measure of diagnostic test resolution is introduced, and an algorithm for computing the equivalence classes for both combinational and sequential circuits are presented. In <ref> [4] </ref>, an algorithm, which is a modification of PROOFS [9, 10], for computing DR and DP of sequential circuits is presented. In this paper we present an algorithm for computing the Equivalence Classes of single stuck-at faults in a given circuit C w.r.t the given test set T.
Reference: [5] <author> Sreejit Chakravarty and Yiming Gong, </author> <title> "An Algorithm for Diagnosing Two-Line Bridging Faults in Combinational Circuits", </title> <type> Tech. Report 92-26, </type> <institution> Dept. of Computer Science, the State University of New York, Buffalo,N.Y. </institution> <month> 14260. </month>
Reference-contexts: Then, we say that there exists a sensitizing path of even ( odd ) parity, on application of t, from x to y iff t propagates a D (D) to line y, when t (x) = D <ref> [5] </ref>. For example, in Figure 1, the input vector shown sensitizes a path of even parity from 28 to 30 and a path of odd parity from 28 to 38. <p> t i ) to be an m-Tuple &lt; a 1 ; : : : ; a m &gt; where a j equal E (O), 8j j m, iff t i sensitized an even ( odd ) path from x to the jth primary output y j , or N otherwise <ref> [5] </ref>. In Figure 1 assume that y 1 = 25; y 2 = 26; y 3 = 34; y 4 = 38. Let t 1 be the input vector defined in Figure 1. <p> Since both inputs of gate 3 are labeled E and it is a NAND gate, its output is labeled E. A formal description of the procedures for forward labeling and backward labeling are given in <ref> [5] </ref> (PathParity and MarkLines respectively). A procedure for region extraction has been discussed in [6, 7]. Procedure Parity labeling uses these procedures to label all lines in C. 11 Procedure Parity Labeling /* Given t; C it computes Parity (x; t) for all x 2 C.*/ Step 1.
Reference: [6] <author> F. Maamari and J. Rajski, </author> " <title> A Method of Fault Simulation Based on Stem Regions", </title> <journal> IEEE Trans. on Comput.-Aided Design, </journal> <volume> Vol. CAD-9, No. 2, </volume> <pages> pp. 212-220, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Later on, we will describe Parity Labeling that computes the parity of each line very efficiently and show how it can be used to compute the equivalence classes. 2.3 Stem Region, Exit lines Our algorithm for computing equivalence classes uses the notation of a Stem Region <ref> [6] </ref>. In general, there is only one path between two nodes in a circuit unless the path passes through fanout point (s). Computing path parities is much easier if at most one path exists between any two lines in a circuit. <p> Computing path parities is much easier if at most one path exists between any two lines in a circuit. To compute path parities in the presence of fanout, we use the concepts of Stem Region and Exit Lines <ref> [6] </ref>. Let and be two paths between lines x and y. We say they are disjoint paths iff 8i; j; 1 &lt; i &lt; t; 1 &lt; j &lt; q; g i 6= h j ; We say they are distinct paths iff 9j, g j 6= h j . <p> x 6= y, are exit lines of a reconvergent fanout point A, C x , the circuit subnetwork driven by x, and C y , the circuit subnetwork driven by y, are disjoint.<ref> [6] </ref> Corollary 2.4 is important for computing parities of each line. We will use the algorithms discussed in [6], along with the modifications suggested in [7], to compute stem regions and exit lines. 7 3 Computing Equivalence Classes In this section, we discuss how to compute the equivalence classes of stuck at faults in a given circuit w.r.t a given test set T . <p> Since both inputs of gate 3 are labeled E and it is a NAND gate, its output is labeled E. A formal description of the procedures for forward labeling and backward labeling are given in [5] (PathParity and MarkLines respectively). A procedure for region extraction has been discussed in <ref> [6, 7] </ref>. Procedure Parity labeling uses these procedures to label all lines in C. 11 Procedure Parity Labeling /* Given t; C it computes Parity (x; t) for all x 2 C.*/ Step 1.
Reference: [7] <author> Hyung K.Lee and Dong S.Ha, </author> <title> "Comments on "A Method of Fault Simulation Based on Stem Regions"", </title> <journal> IEEE Trans. on Comput-Aided Design, </journal> <volume> Vol. 11, No. 3, </volume> <pages> pp. 407-408. </pages>
Reference-contexts: We will use the algorithms discussed in [6], along with the modifications suggested in <ref> [7] </ref>, to compute stem regions and exit lines. 7 3 Computing Equivalence Classes In this section, we discuss how to compute the equivalence classes of stuck at faults in a given circuit w.r.t a given test set T . <p> Since both inputs of gate 3 are labeled E and it is a NAND gate, its output is labeled E. A formal description of the procedures for forward labeling and backward labeling are given in [5] (PathParity and MarkLines respectively). A procedure for region extraction has been discussed in <ref> [6, 7] </ref>. Procedure Parity labeling uses these procedures to label all lines in C. 11 Procedure Parity Labeling /* Given t; C it computes Parity (x; t) for all x 2 C.*/ Step 1.
Reference: [8] <author> D. Harel and B. Krishnamurthy, </author> <title> "Is there hope for linear time fault simulation?." </title> <booktitle> in Proc. 17th Fault Tolerant Computing Symp., </booktitle> <pages> pp. </pages> <year> 28-33,1987. </year>
Reference: [9] <author> T. M. Niermann, W. -T. Cheng, and J. H. Patel, </author> <title> "PROOFS: A Fast, Memory-Efficient Sequential Circuit Fault Simulator," </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> pp. 198-207, </pages> <month> Feb </month> <year> 1992. </year>
Reference-contexts: In [3], EC as a measure of diagnostic test resolution is introduced, and an algorithm for computing the equivalence classes for both combinational and sequential circuits are presented. In [4], an algorithm, which is a modification of PROOFS <ref> [9, 10] </ref>, for computing DR and DP of sequential circuits is presented. In this paper we present an algorithm for computing the Equivalence Classes of single stuck-at faults in a given circuit C w.r.t the given test set T. We assume C to be combinational.
Reference: [10] <author> E. M. Rudnick, T. M. Niermann, and J. H. Patel, </author> <title> "Methods for Reducing Events in Sequential Circuit Fault Simulation," </title> <booktitle> Proc. Intn'l Conf. Computer-Aided Design, </booktitle> <year> 1991, </year> <pages> pp. 546-549. </pages>
Reference-contexts: In [3], EC as a measure of diagnostic test resolution is introduced, and an algorithm for computing the equivalence classes for both combinational and sequential circuits are presented. In [4], an algorithm, which is a modification of PROOFS <ref> [9, 10] </ref>, for computing DR and DP of sequential circuits is presented. In this paper we present an algorithm for computing the Equivalence Classes of single stuck-at faults in a given circuit C w.r.t the given test set T. We assume C to be combinational.
Reference: [11] <author> F. Brglez and H. Fujiwara, </author> <title> "A neutral netlist of 10 combinational benchmark circuits and a target translator in FORTRAN," Special Session on ATPG and Fault Simulation, </title> <booktitle> International Symposium on Circuits and Systems, </booktitle> <year> 1985. </year> <month> 14 </month>
Reference-contexts: It also requires O (n i + n f q) space where: q is the number of primary outputs, and n f is the number of fanout points. We present experimental results on the ISCAS85 <ref> [11] </ref> as well as the ISCAS89 1 benchmarks and show that our algorithm is both faster and more space efficient than the algorithm in [3]. The rest of the paper is organized as follows. In section 2, we briefly introduce and explain concepts and definitions used in this paper.

References-found: 11

