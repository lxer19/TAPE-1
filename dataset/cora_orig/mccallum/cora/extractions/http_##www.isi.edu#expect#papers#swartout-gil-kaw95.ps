URL: http://www.isi.edu/expect/papers/swartout-gil-kaw95.ps
Refering-URL: http://www.isi.edu/expect/papers/papers-ka.html
Root-URL: 
Email: email: swartout@isi.edu, gil@isi.edu  
Phone: tel: (310) 822-1511  
Title: EXPECT: Explicit Representations for Flexible Acquisition  
Author: Bill Swartout Yolanda Gil 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: USC/Information Sciences Institute  
Abstract: To create more powerful knowledge acquisition systems, we not only need better acquisition tools, but we need to change the architecture of the knowledge based systems we create so that their structure will provide better support for acquisition. Current acquisition tools permit users to modify factual knowledge but they provide limited support for modifying problem solving knowledge. In this paper, we argue that this limitation (and others) stem from the use of incomplete models of problem solving knowledge and inflexible specification of the interdependencies between problem solving and factual knowledge. We describe the EXPECT architecture which addresses these problems by providing an explicit representation for problem solving knowledge and intent. Using this more explicit representation, EXPECT can automatically derive the interdependencies between problem solving and factual knowledge. By deriving these interdependencies from the structure of the knowledge-based system itself EXPECT supports more flexible and powerful knowledge acquisition.
Abstract-found: 1
Intro-found: 1
Reference: [Abbrett and Burstein, 1987] <author> G. Abbrett and Mark Burstein. </author> <title> The KREME knowledge editing environment. </title> <booktitle> In International Journal of Man-Machine Studies (1987) 27, </booktitle> <pages> pp. 103-126. </pages>
Reference: [Anzai and Simon 1979] <author> Y. Anzai and H. A. Simon. </author> <title> The Theory of Learning by Doing. </title> <journal> In Psychological Review, </journal> <volume> 86(2) 124-140, </volume> <year> 1979. </year>
Reference-contexts: both acquisition and explanation is that it seems to be a bit removed from the way people think and talk about what they are doing, since protocols of people solving problems show that they use verb clauses to describe what they are doing rather than state descriptions (see for example, <ref> [Anzai and Simon 1979] </ref>). Thus, to address these difficulties and decrease the distance between EXPECTS internal representation and how people talk about what they do, EXPECTs representation is based on a vocabulary of verbs.
Reference: [Bachant and Soloway, 1989] <author> J. Bachant and E. Soloway. </author> <booktitle> The Engineering of XCON in Communications of the ACM, </booktitle> <pages> 32(3) 311-317, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: It has been shown that the use of these higher-level representations helps make second generation systems easier to understand. These frameworks can also make it easier to extend and maintain an expert system, and enhance the possibilities for knowledge re-use across systems <ref> [Bachant and Soloway, 1989] </ref>. The XPLAIN [Swartout, 1983] and EES [Neches et al, 1985; Swartout et al., 1991] frameworks, which were precursors to EXPECT , were among the first to explicitly distinguish the different kinds of knowledge in a knowledge based system.
Reference: [Chandrasekaran and Mittal, 1982] <author> B. Chandrasekaran and S. Mittal. </author> <title> Deep versus compiled knowledge approaches to diagnostic problem solving. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1981; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving knowledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving strategy and internal record-keeping.
Reference: [Chandrasekaran, 1986] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning. </title> <booktitle> IEEE Expert , 1(3) </booktitle> <pages> 23-30, </pages> <year> 1986. </year>
Reference: [Clancey, 1983a] <author> W.J. Clancey. </author> <title> The advantages of abstract control knowledge in expert system design. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 74-78, </pages> <address> Washington, DC, 1983. </address> <publisher> AAAI. </publisher>
Reference: [Doyle and Patil, 1991] <author> J. Doyle and R.S. Patil. </author> <title> Two theses of knowledge representation: language restrictions, taxonomic classification, and the utility of representation services. </title> <booktitle> Artificial Intelligence 48(3) 261-297. </booktitle>
Reference-contexts: Concepts from the domain terminology are used as the building blocks for EXPECTs two other kinds of knowledge: domain facts and problem solving knowledge. As Doyle and Patil <ref> [Doyle and Patil, 1991] </ref> have pointed out, the advantages of automatic classification are vitiated somewhat if primitive concepts are used.
Reference: [Clancey, 1983b] <author> W.J. Clancey. </author> <title> The epistemology of a rule-based expert system: A framework for explanation. </title> <journal> Artificial Intelligence, </journal> <volume> 20(3) </volume> <pages> 215-251, </pages> <year> 1983. </year>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1981; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving knowledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving strategy and internal record-keeping.
Reference: [Gaines 1994] <author> Gaines, B.R. </author> <title> A situated classification solution of a resource allocation task represented in a visual language. </title> <booktitle> International Journal of Human-Computer Studies 40(2) 243 271. </booktitle>
Reference: [Gil 1994] <author> Gil, Y. </author> <title> Knowledge Refinement in a Reflective Architecture. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-94), </booktitle> <year> 1994. </year>
Reference: [Gil and Paris 1994] <author> Gil, Y., and Paris, C.L. </author> <title> Towards Method-Independent Knowledge Acquisition. </title> <journal> In Knowledge Acquisition, </journal> <volume> 6 (2), </volume> <pages> pp. 163-178, </pages> <year> 1994. </year>
Reference: [Hasling et al., 1984] <author> D.W. Hasling, W.J. Clancey, and G. Rennels. </author> <title> Strategic explanations for a diagnostic consultation system. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 20(1), </volume> <year> 1984. </year>
Reference: [Neches et al., 1985] <author> Robert Neches, William Swartout, and Johanna D. Moore. </author> <title> Enhanced Maintenance and Explanation of Expert Systems Through Explicit Models of Their Development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> SE-11(11):1337-1351 November </month> <year> 1985. </year>
Reference: [MacGregor 1988] <author> MacGregor, R. </author> <title> A Deductive Pattern Matcher. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle> <address> St. Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Domain facts, on the other hand, use domain terminology to describe the state of the world at some point in time. To represent both domain facts and terminology, EXPECT uses Loom <ref> [MacGregor 1988, 1990] </ref>, a knowledge representation system in the KL-ONE family. Loom provides a descriptive logic representation language, and provides a classifier for inference. Facts are represented as Loom instances, while terminology is represented using Loom concepts.
Reference: [MacGregor 1990] <author> MacGregor, R. </author> <title> The Evolving Technology of Classification-Based Knowledge Representation Systems. </title> <editor> In John Sowa (ed.), </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference: [Morik, 1989] <author> K. Morik. </author> <title> Sloppy Modeling. In Knowledge Representation and Organization in Machine Learning. </title> <editor> Morik, K. (ed), </editor> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <month> 19 </month>
Reference-contexts: Other knowledge acquisition systems, such as BLIP <ref> [Morik, 1989] </ref> and KREME [Abrett and Burstein, 1987] have used description logics. However, their goals have been complementary to ours.
Reference: [Musen and Tu 1993] <author> Musen, M. A., and Tu, S. W. </author> <title> Problemsolving models for generation of task-specific knowledge acquisition tools. </title> <editor> In J. Cuena (Ed.), </editor> <booktitle> Knowledge-Oriented Software Design, </booktitle> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: Additionally, if the user changes his mind about which problemsolving strategy is appropriate, he may also have to change tools, potentially losing a lot of work in re-configuring the domain knowledge. Recent knowledge acquisition work <ref> [Klinker et al. 1991; Musen and Tu 1993] </ref> has partially addressed these problems by creating tools that can use multiple problemsolving methods. In PROTG II [Musen and Tu, 1993], problem solving methods are composed of preencoded building blocks.
Reference: [Swartout et al., 1991] <author> William R. Swartout, Cecile L. Paris, and Johanna D. Moore. </author> <title> Design for explainable expert systems. </title> <journal> IEEE Expert, </journal> <volume> 6(3) </volume> <pages> 58-64, </pages> <month> June </month> <year> 1991 </year>
Reference-contexts: It is then possible to build tools that exploit this additional information to provide enhanced capabilities. In prior work on the EES framework <ref> [Neches et al, 1985; Swartout et al., 1991] </ref> we explored the architectural modifications that are needed to support explanation. EXPECT extends the EES framework to support knowledge acquisition. In this paper, we discuss the architectural features that support knowledge acquisition. <p> These frameworks can also make it easier to extend and maintain an expert system, and enhance the possibilities for knowledge re-use across systems [Bachant and Soloway, 1989]. The XPLAIN [Swartout, 1983] and EES <ref> [Neches et al, 1985; Swartout et al., 1991] </ref> frameworks, which were precursors to EXPECT , were among the first to explicitly distinguish the different kinds of knowledge in a knowledge based system. In EXPECT, we distinguish three different kinds of knowledge: domain facts, domain terminology, and problem solving knowledge.
Reference: [Swartout, 1981] <author> W. Swartout. </author> <title> Explaining and justifying expert consulting programs. </title> <booktitle> I n Proceedings of the Seventh International Joint Conference on Artificial Intelligence. </booktitle> <year> 1981. </year>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1981; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving knowledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving strategy and internal record-keeping.
Reference: [Swartout, 1983] <author> W.R. Swartout, </author> <title> Xplain : A system for creating and explaining expert consulting systems. </title> <journal> Artificial Intelligence, </journal> <volume> 21(3) </volume> <pages> 285-325, </pages> <month> September </month> <year> 1983. </year> <note> Also available as ISI/RS-83-4. </note>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1981; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving knowledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving strategy and internal record-keeping. <p> It has been shown that the use of these higher-level representations helps make second generation systems easier to understand. These frameworks can also make it easier to extend and maintain an expert system, and enhance the possibilities for knowledge re-use across systems [Bachant and Soloway, 1989]. The XPLAIN <ref> [Swartout, 1983] </ref> and EES [Neches et al, 1985; Swartout et al., 1991] frameworks, which were precursors to EXPECT , were among the first to explicitly distinguish the different kinds of knowledge in a knowledge based system.
Reference: [Swartout and Moore 1993] <author> Swartout, W. R., and Moore, J. D. </author> <title> Explanation in second-generation expert systems. </title> <editor> In J.-M. David, J.-P. Krivine, and R. Simmons (Eds.), </editor> <booktitle> Second Generation Expert Systems, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [Wielinga and Breuker, 1986] <author> B.J.Wielinga and J.A. Breuker, </author> <title> Models of Expertise, </title> <booktitle> ECAI 1986, </booktitle> <pages> 497-509. </pages>
References-found: 22

