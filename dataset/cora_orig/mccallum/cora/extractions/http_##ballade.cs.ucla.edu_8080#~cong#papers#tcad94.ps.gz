URL: http://ballade.cs.ucla.edu:8080/~cong/papers/tcad94.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: FlowMap: An Optimal Technology Mapping Algorithm for Delay Optimization in Lookup-Table Based FPGA Designs  
Author: Jason Cong and Yuzheng Ding 
Note: Manuscript received This research is partially supported by a grant from NSF under MIP-9110511, and a grant from Xilinx Inc. under the State of California MICRO program No.92-030. The authors are with the  
Address: Los Angeles, CA 90024  Los Angeles, CA 90024.  
Affiliation: Department of Computer Science University of California,  Department of Computer Science, University of California,  
Abstract: The field programmable gate-array (FPGA) has become an important technology in VLSI ASIC designs. In the past a few years, a number of heuristic algorithms have been proposed for technology mapping in lookup-table (LUT) based FPGA designs, but none of them guarantees optimal solutions for general Boolean networks and little is known about how far their solutions are away from the optimal ones. This paper presents a theoretical breakthrough which shows that the LUT-based FPGA technology mapping problem for depth minimization can be solved optimally in polynomial time. A key step in our algorithm is to compute a minimum height K-feasible cut in a network, which is solved optimally in polynomial time based on network flow computation. Our algorithm also effectively minimizes the number of LUTs by maximizing the volume of each cut and by several post-processing operations. Based on these results, we have implemented an LUT-based FPGA mapping package called FlowMap. We have tested FlowMap on a large set of benchmark examples and compared it with other LUT-based FPGA mapping algorithms for delay optimization, including Chortle-d, MIS-pga-delay, and DAG-Map. FlowMap reduces the LUT network depth by up to 7% and reduces the number of LUTs by up to 50% compared to the three previous methods. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bhat, N. and D. Hill, </author> <title> ``Routable Technology Mapping for FPGAs,'' </title> <booktitle> First Int'l ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 143-148, </pages> <month> Feb. </month> <year> 1992. </year>
Reference: [2] <author> Brayton, R. K., R. Rudell, and A. L. Sangiovanni-Vincentelli, </author> <title> ``MIS: A Multiple-Level Logic Optimization,'' </title> <journal> IEEE Transactions on CAD, </journal> <pages> pp. 1062-1081, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Experimental Results We have implemented the FlowMap algorithm and its preprocessing and post-processing steps using the C language on Sun SPARC workstations. We used input/output routines and general utility functions provided by MIS <ref> [2] </ref> in our implementation. Given a general Boolean network as input, we first decompose it into a 2-input network of simple gates as described in Section 3. We then apply the FlowMap algorithm to obtain a minimum depth K-LUT mapping solution.
Reference: [3] <author> Chen, K. C., J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, ``DAG-Map: </author> <title> Graph-based FPGA Technology Mapping for Delay Optimization,'' </title> <booktitle> IEEE Design and Test of -23- Computers, </booktitle> <pages> pp. 7-20, </pages> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: Given a general Boolean network as input, if it is not K-bounded, there are a number of ways to transform it into a K bounded network. For example, the Roth-Karp decomposition [23] was used in [20] to obtain a K-bounded network. We use the algorithm DMIG presented in <ref> [3] </ref>, which is based on the Huffman coding tree construction [16], to decompose each multiple input simple gate 5 into a tree of two-input simple gates. According to the result in [3], such a decomposition procedure s 0 0 0 3 2 3 3 4 4 X Fig. 2 A 3-feasible <p> We use the algorithm DMIG presented in <ref> [3] </ref>, which is based on the Huffman coding tree construction [16], to decompose each multiple input simple gate 5 into a tree of two-input simple gates. According to the result in [3], such a decomposition procedure s 0 0 0 3 2 3 3 4 4 X Fig. 2 A 3-feasible cut of edge cut-size 10, volume 9, and height 2. -6--increases the network depth by at most a small constant factor. <p> It was shown that Lawler's labeling algorithm [19] can produce a minimum depth clustering solution in polynomial time whenever the clustering constraint is monotone. The DAG-Map algorithm developed by Cong et al. <ref> [7, 3] </ref> modified Lawler's algorithm and applied it to the LUT-based FPGA mapping problem. <p> t Fig. 3 Constraint on the number of inputs to LUT is not monotone (K=3). hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 5 We can always obtain a simple gate network by representing each complex gate in the sum-of-products form and then replac ing it with two levels of simple gates. -7--Map algorithm is not optimal <ref> [3] </ref>. The mapping algorithm presented in this paper successfully overcomes the difficulty due to the non-monotone clustering constraint in LUT-based FPGA technology mapping. The algorithm runs in two phases. <p> After obtaining a K-LUT mapping solution using the FlowMap algorithm, we want to further reduce the number of K-LUTs used in the mapping solution without increasing the depth. In <ref> [3] </ref>, two depth-preserving operations were developed to minimize the number of K-LUTs in the mapping solutions of DAG-Map. One is called the predecessor packing. <p> Details of the matching based gate-decomposition algorithm can be found in <ref> [3] </ref>.) Then, we apply the flow-pack operation to each K-LUT u in the mapping solution so that u is collapsed with a maximal subset of its predecessors into a single K-LUT. <p> We chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [28]. We tested FlowMap on a number of MCNC benchmark examples and the results were compared with those produced by Chortle-d [13], MIS-pga-delay [21], and DAG-Map <ref> [3] </ref>. <p> In Table 2, we cited the results of MIS-pga-delay from [21] since we were unable to run the program directly. The FlowMap results were obtained by first synthesizing the original benchmarks using the MIS optimization script used by Chortle-crf [14] and DAG-Map <ref> [3] </ref> for technology-independent optimization, then applying the FlowMap algorithm for technology iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii MIS-pga-delay c c FlowMap Circuit iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii #LUTs depth #LUTs depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 21 2 22 3 9symml 7 3 55 5 C499 199 8 68 4 alu2 122 6 155 9 apex6 274 5 238 5 apex7 95 <p> c c c c c c c c c c c c c c c c c c c c c c c c c c c Table 2 Comparison with MIS-pga-delay algorithm. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 11 We also tested the above three algorithms on the input networks used by DAG-Map in <ref> [3] </ref>. The results showed that compared to FlowMap, DAG-Map used 5.6% more 5-LUTs and had 1.2% larger network depth, while Chortle-d used 52.2% more 5-LUTs and had 10.7% larger network depth. FlowMap produced consistent better results than the other two algorithms. -20--mapping. <p> However, overall MIS-pga-delay still used 9.8% more 5-LUTs and had 7.1% larger depth. We have also evaluated the impact of the choices of multi-input gate decomposition methods on the mapping results. We used the DMIG algorithm <ref> [3] </ref> to decompose the initial networks into two-, three-, four-, or five-input networks and applied FlowMap on the resulting networks. The initial networks for these decomposition algorithms are the same as those used to produce the FlowMap results in Table 2. We summarize the results in Table 3.
Reference: [4] <author> Cong, J. and Y. Ding, </author> <title> ``An Optimal Technology Mapping Algorithm fo Delay Optimization in Lookup-Table Based FPGA Designs,'' </title> <institution> in UCLA Computer Science Department Technical Report CSD-920022, </institution> <month> (May </month> <year> 1992). </year>
Reference-contexts: (X, X hh ) K can be found in O (mnlog (n 2 /m)logL) time, where n and m are the number of the nodes and edges in N, respectively, and L is the number of different node labels. ` The proof and the detailed algorithm can be found in <ref> [4] </ref>. This result has been used for delay-optimal K-LUT technology mapping under arbitrary net-delay models [6]. 3.2. The Mapping Phase The second phase of our algorithm is to generate the K-LUTs in the optimal mapping solution. Let L be the set of outputs which are to be implemented using K-LUTs. <p> Let X i = Y, and X i = V (M u ) Xi, we accept (X i , X hh i ) as the resulting cut of the ith iteration. It can be shown <ref> [4] </ref> that the cut (X i , X hh i ) has the following properties: (1) vol (X i , X i ) &gt; vol (X i -1 , X i -1 ); hh hh (3) r (X i , X i ) r (X, X ) for any cut (X,
Reference: [5] <author> Cong, J. and Y. Ding, </author> <title> ``On Area/Depth Trade-off in LUT-Based FPGA Technology Mapping,'' </title> <booktitle> Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 213-218, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Based on a set of depth relaxation operations defined for non-critical nodes, We have developed an algorithm that can produce a spectrum of area-optimized mapping solutions for different depth constraints, yielding smooth area and depth trade-off in LUT-based FPGA designs <ref> [5] </ref>. -22- iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii Number of 5-LUTs Circuit Depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii No Post- Gate-Decomp. <p> The area-optimal mapping problem for LUT-based FPGA designs is still open. Based on the concept of the maximum fanout-free cones, in <ref> [5] </ref> we have developed a polynomial time algorithm for area-optimal K-LUT mapping without node duplication for any fixed K. 7. Acknowledgments We thank Professor Jonathan Rose, Robert Francis, and Rajeev Murgai for their assistance in our comparative study.
Reference: [6] <author> Cong, J., Y. Ding, T. Gao, and K. Chen, </author> <title> ``An Optimal Performance-Driven Technology Mapping Algorithm for LUT based FPGAs under Arbitrary Net-Delay Models,'' </title> <booktitle> Proc. 1993 Int'l Conf. on CAD and Computer Graphics, </booktitle> <pages> pp. 599-603, </pages> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: This result has been used for delay-optimal K-LUT technology mapping under arbitrary net-delay models <ref> [6] </ref>. 3.2. The Mapping Phase The second phase of our algorithm is to generate the K-LUTs in the optimal mapping solution. Let L be the set of outputs which are to be implemented using K-LUTs. Initially, L contains all the PO nodes. <p> Their results showed that the nominal delay model estimates the interconnection delay quite well. Based on Theorem 2, we have generalized the FlowMap algorithm to perform delay-optimal mapping under arbitrary net-delay models, including the nominal delay model <ref> [6] </ref>. Another extension is to combine area and depth optimization in the mapping procedure. Note that the depth of every node is minimum in a FlowMap mapping solution, while in fact only the depths of the nodes on the critical paths need to be minimized to guarantee depth-optimal mapping.
Reference: [7] <author> Cong, J., A. Kahng, P. Trajmar, and K. C. Chen, </author> <title> ``Graph Based FPGA Technology Mapping For Delay Optimization,'' </title> <booktitle> ACM Int'l Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 77-82, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: It was shown that Lawler's labeling algorithm [19] can produce a minimum depth clustering solution in polynomial time whenever the clustering constraint is monotone. The DAG-Map algorithm developed by Cong et al. <ref> [7, 3] </ref> modified Lawler's algorithm and applied it to the LUT-based FPGA mapping problem.
Reference: [8] <author> Cormen, T., C. Leiserson, and R. Rivest, </author> <title> Algorithms, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1990). </address>
Reference-contexts: In order to determine if N t has a K-feasible cut, we apply another standard network transformation, called the node-splitting transformation, which reduces the node cut-size constraint to an edge cut-size constraint by splitting nodes into edges, so that we can use existing edge cut computation algorithms <ref> [10, 8] </ref>. Specifically, we construct a network N t from N t as follows. <p> Lemma 4 N t has a K-feasible cut if and only if N t has a cut whose edge cut-size is no more than K. Based on the Max-flow Min-cut Theorem <ref> [10, 8] </ref>, N t has a cut whose edge cut-size is no more than K if and only if the maximum flow 7 between s and t in N t has value no more than K. <p> Since we are only interested in testing if the maximum flow is of value K or smaller, we apply the augmenting path algorithm in N t to compute a maximum flow. (For the basic concepts of network flow and the details of the augmenting path algorithm, see <ref> [10, 8] </ref>.) Since each bridging edge in N t has unit capacity, each augmenting path in the flow residual graph of N t from s to t increases the flow by one unit. <p> Let X be the set of nodes in R f reachable from the source s, and X hh be the set of the remaining nodes. Then, ( X, X hh maximum volume min-cut. Proof According to the Max-flow Min-cut Theorem <ref> [10, 8] </ref>, ( X, X hh ( Y, Y ) be the maximum volume min-cut. According to Lemma 5, If Y X, then Y X, and there is a node v X -Y.
Reference: [9] <author> Detjens, E., G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang, </author> <title> ``Technology Mapping in MIS,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 116-119, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [18, 9] </ref>. Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms [11, 14, 12]. <p> result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [18, 9] </ref>. Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms [11, 14, 12]. However, the result in this paper shows that K-LUT mapping can be carried out directly on general K-bounded Boolean networks to achieve depth-optimal solutions. The remainder of this paper is organized as follows.
Reference: [10] <author> Ford, L. R. and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, N.J. </address> <year> (1962). </year>
Reference-contexts: In order to determine if N t has a K-feasible cut, we apply another standard network transformation, called the node-splitting transformation, which reduces the node cut-size constraint to an edge cut-size constraint by splitting nodes into edges, so that we can use existing edge cut computation algorithms <ref> [10, 8] </ref>. Specifically, we construct a network N t from N t as follows. <p> We assign the capacity of each bridging edge to be one, and the capacity of each non-bridging edge to be infinity. Fig. 5 (c) shows the resulting N t obtained from N t in Fig. 5 (b). According to the result in <ref> [10] </ref> (pp.23-26), we have -10- t 0 0 0 0 0 2 (a) (b) (c) s 0 0 0 0 0 0 0 s N" t 1 8 8 8 8 8 8 8 8 8 1 1 Fig. 5 Network transformations in computing a minimum height K-feasible cut in N <p> Lemma 4 N t has a K-feasible cut if and only if N t has a cut whose edge cut-size is no more than K. Based on the Max-flow Min-cut Theorem <ref> [10, 8] </ref>, N t has a cut whose edge cut-size is no more than K if and only if the maximum flow 7 between s and t in N t has value no more than K. <p> Since we are only interested in testing if the maximum flow is of value K or smaller, we apply the augmenting path algorithm in N t to compute a maximum flow. (For the basic concepts of network flow and the details of the augmenting path algorithm, see <ref> [10, 8] </ref>.) Since each bridging edge in N t has unit capacity, each augmenting path in the flow residual graph of N t from s to t increases the flow by one unit. <p> Let X be the set of nodes in R f reachable from the source s, and X hh be the set of the remaining nodes. Then, ( X, X hh maximum volume min-cut. Proof According to the Max-flow Min-cut Theorem <ref> [10, 8] </ref>, ( X, X hh ( Y, Y ) be the maximum volume min-cut. According to Lemma 5, If Y X, then Y X, and there is a node v X -Y.
Reference: [11] <author> Francis, R. J., J. Rose, and K. Chung, ``Chortle: </author> <title> A Technology Mapping Program for Lookup Table-Based Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms <ref> [11, 14, 12] </ref>. However, the result in this paper shows that K-LUT mapping can be carried out directly on general K-bounded Boolean networks to achieve depth-optimal solutions. The remainder of this paper is organized as follows. Section 2 gives a precise problem formulation and some preliminaries.
Reference: [12] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping for Delay Optimization of Lookup Table-Based FPGAs,'' </title> <booktitle> MCNC Logic Synthesis Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms <ref> [11, 14, 12] </ref>. However, the result in this paper shows that K-LUT mapping can be carried out directly on general K-bounded Boolean networks to achieve depth-optimal solutions. The remainder of this paper is organized as follows. Section 2 gives a precise problem formulation and some preliminaries.
Reference: [13] <author> Francis, R. J., J. Rose, and Z. Vranesic, </author> <title> ``Technology Mapping of Lookup Table-Based FPGAs for Performance,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 568-571, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: We chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [28]. We tested FlowMap on a number of MCNC benchmark examples and the results were compared with those produced by Chortle-d <ref> [13] </ref>, MIS-pga-delay [21], and DAG-Map [3]. <p> Comparison with Chortle-d and DAG-Map. 11 -19- In Table 1, we used the initial networks provided by Robert Francis which were used by Chortle-d to obtain the results reported in <ref> [13] </ref> for all the three algorithms.
Reference: [14] <author> Francis, R. J., J. Rose, and Z. Vranesic, ``Chortle-crf: </author> <title> Fast Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 613-619, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms <ref> [11, 14, 12] </ref>. However, the result in this paper shows that K-LUT mapping can be carried out directly on general K-bounded Boolean networks to achieve depth-optimal solutions. The remainder of this paper is organized as follows. Section 2 gives a precise problem formulation and some preliminaries. <p> In Table 2, we cited the results of MIS-pga-delay from [21] since we were unable to run the program directly. The FlowMap results were obtained by first synthesizing the original benchmarks using the MIS optimization script used by Chortle-crf <ref> [14] </ref> and DAG-Map [3] for technology-independent optimization, then applying the FlowMap algorithm for technology iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii MIS-pga-delay c c FlowMap Circuit iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii #LUTs depth #LUTs depth iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 5xp1 21 2 22 3 9symml 7 3 55 5 C499 199 8 68 4 alu2 122 6 155 9 apex6 274 5 238
Reference: [15] <author> Hill, D., </author> <title> ``A CAD System for the Design of Field Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 187-192, </pages> <month> June </month> <year> 1991. </year> <month> -24- </month>
Reference: [16] <author> Huffman, D. A., </author> <title> ``A method for the construction of minimum redundancy codes,'' </title> <booktitle> Proc. IRE 40, </booktitle> <pages> pp. 1098-1101, </pages> <year> 1952. </year>
Reference-contexts: For example, the Roth-Karp decomposition [23] was used in [20] to obtain a K-bounded network. We use the algorithm DMIG presented in [3], which is based on the Huffman coding tree construction <ref> [16] </ref>, to decompose each multiple input simple gate 5 into a tree of two-input simple gates.
Reference: [17] <author> Karplus, K., ``Xmap: </author> <title> A Technology Mapper for Table-lookup Field-Programmable Gate Arrays,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 240-243, </pages> <month> June </month> <year> 1991. </year>
Reference: [18] <author> Keutzer, K., ``DAGON: </author> <title> Technology Binding and Local Optimization by DAG Matching,'' </title> <booktitle> Proc. 24th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 341-347, </pages> <year> 1987. </year>
Reference-contexts: Our result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [18, 9] </ref>. Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms [11, 14, 12]. <p> result makes a sharp contrast with the fact that the conventional technology mapping problem in library-based designs is NP-hard for general Boolean networks <ref> [18, 9] </ref>. Due to the inherent difficulty, most conventional technology mapping algorithms decompose the input network into a forest of trees and then map each tree optimally [18, 9]. Such a methodology was also used in some existing FPGA mapping algorithms [11, 14, 12]. However, the result in this paper shows that K-LUT mapping can be carried out directly on general K-bounded Boolean networks to achieve depth-optimal solutions. The remainder of this paper is organized as follows.
Reference: [19] <author> Lawler, E. L., K. N. Levitt, and J. Turner, </author> <title> ``Module Clustering to Minimize Delay in Digital Networks,'' </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. </volume> <pages> C-18(1) pp. 47-57, </pages> <month> January </month> <year> 1969. </year>
Reference-contexts: A clustering constraint G is monotone, if knowing that a network H satisfies G implies that any subnetwork of H also satisfies G <ref> [19] </ref>. For example, if we assume that the constraint for each programmable logic block is the number of gates it may cover in the original network, it is a monotone clustering constraint. Unfortunately, limiting the number of distinct inputs of each programmable logic block is not a monotone clustering constraint. <p> Clustering (or, similarly, mapping) for a monotone clustering constraint G is much easier because if a subnetwork H does not satisfy the constraint G, we can conclude that H is not a part of any cluster. It was shown that Lawler's labeling algorithm <ref> [19] </ref> can produce a minimum depth clustering solution in polynomial time whenever the clustering constraint is monotone. The DAG-Map algorithm developed by Cong et al. [7, 3] modified Lawler's algorithm and applied it to the LUT-based FPGA mapping problem.
Reference: [20] <author> Murgai, R., Y. Nishizaki, N. Shenay, R. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Logic Synthesis Algorithms for Programmable Gate Arrays,'' </title> <booktitle> Proc. 27th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 620-625, </pages> <year> 1990. </year>
Reference-contexts: Given a general Boolean network as input, if it is not K-bounded, there are a number of ways to transform it into a K bounded network. For example, the Roth-Karp decomposition [23] was used in <ref> [20] </ref> to obtain a K-bounded network. We use the algorithm DMIG presented in [3], which is based on the Huffman coding tree construction [16], to decompose each multiple input simple gate 5 into a tree of two-input simple gates.
Reference: [21] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Performance Directed Synthesis for Table Look Up Programmable Gate Arrays,'' </title> <booktitle> Proc. IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 572-575, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: We chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx [28]. We tested FlowMap on a number of MCNC benchmark examples and the results were compared with those produced by Chortle-d [13], MIS-pga-delay <ref> [21] </ref>, and DAG-Map [3]. <p> Moreover, in terms of the number of 5-LUTs used in the mapping solutions, FlowMap is consistently better than Chortle-d for all examples, and is better than or as good as DAG-Map in most cases. In Table 2, we cited the results of MIS-pga-delay from <ref> [21] </ref> since we were unable to run the program directly.
Reference: [22] <author> Murgai, R., N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> ``Improved Logic Synthesis Algorithms for Table Look Up Architectures ,'' Proc. </title> <booktitle> IEEE Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pp. 564-567, </pages> <month> Nov. </month> <year> 1991. </year>
Reference: [23] <author> Roth, J. P. and R. M. Karp, </author> <title> ``Minimization Over Boolean Graphs,'' </title> <journal> IBM Journal of Research and Development, </journal> <pages> pp. 227-238, </pages> <month> April </month> <year> 1962. </year>
Reference-contexts: An Optimal LUT-Based FPGA Mapping Algorithm for Depth Minimization Our algorithm is applicable to any K-bounded Boolean network. Given a general Boolean network as input, if it is not K-bounded, there are a number of ways to transform it into a K bounded network. For example, the Roth-Karp decomposition <ref> [23] </ref> was used in [20] to obtain a K-bounded network. We use the algorithm DMIG presented in [3], which is based on the Huffman coding tree construction [16], to decompose each multiple input simple gate 5 into a tree of two-input simple gates. <p> If a K-LUT u has two fanin K-LUTs v and w, both are fanout-free, and c input (v) input (w ) c K, then v and w can be merged into one K-LUT that has a single fanout to u, providing that we can carry out the Roth-Karp decomposition <ref> [23] </ref> on u with respect to its input v and w. The gate decomposition operation is shown in Fig. 8. Clearly, these two operations only take local information into consideration when reducing the K-LUTs.
Reference: [24] <author> Sawkar, P. and D. Thomas, </author> <title> ``Technology Mapping for Table-Look-Up Based Field Programmable Gate Arrays,'' </title> <booktitle> ACM/SIGDA Workshop on Field Programmable Gate Arrays, </booktitle> <pages> pp. 83-88, </pages> <month> Feb. </month> <year> 1992. </year>
Reference: [25] <author> Schlag, M., P. Chan, and J. Kong, </author> <title> ``Empirical Evaluation of Multilevel Logic Minimization Tools for a Field Programmable Gate Array Technology,'' </title> <booktitle> Proc. 1st Int'l Workshop on Field Programmable Logic and Applications, </booktitle> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: FlowMap takes less than one minute of CPU time for each of the benchmarks in our test suite. One extension is to use a more general delay model other than the unit delay model. For example, Chan, Schlag, and Kong <ref> [25] </ref> used the nominal delay model in FPGA designs where the interconnection delay of a signal net is estimated by the number of fanouts of the net. Their results showed that the nominal delay model estimates the interconnection delay quite well.
Reference: [26] <author> Schlag, M., J. Kong, and P. K. Chan, </author> <title> ``Routability-Driven Technology Mapping for Lookup Table-Based FPGAs,'' </title> <booktitle> Proc. 1992 IEEE International Conference on Computer Design, </booktitle> <pages> pp. 86-90, </pages> <month> Oct. </month> <year> 1992. </year>
Reference: [27] <author> Woo, N.-S., </author> <title> ``A Heuristic Method for FPGA Technology Mapping Based on the Edge Visibility,'' </title> <booktitle> Proc. 28th ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 248-251, </pages> <month> June </month> <year> 1991. </year> <month> -25- </month>
Reference: [28] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <address> Xilinx, San Jose (1992). </address>
Reference-contexts: Next, we perform a matching-based gate-decomposition procedure on the K-LUT network, followed by the flow-pack operation to reduce the number of K-LUTs in the mapping solution. We chose the size of the K-LUT to be K = 5, reflecting, e.g. the XC 3000 FPGA family produced by Xilinx <ref> [28] </ref>. We tested FlowMap on a number of MCNC benchmark examples and the results were compared with those produced by Chortle-d [13], MIS-pga-delay [21], and DAG-Map [3].
References-found: 28

