URL: http://www.cs.columbia.edu/~german/papers/goldszmidt.ps.Z
Refering-URL: http://www.cs.columbia.edu/~german/
Root-URL: http://www.cs.columbia.edu
Title: Distributed Management by Delegation  
Author: German S. Goldszmidt 
Degree: Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in the Graduate School of Arts and Sciences  
Date: 1996  
Affiliation: COLUMBIA UNIVERSITY  
Abstract-found: 0
Intro-found: 1
Reference: [ Agrawal and Ezzat, 1987 ] <author> Rakesh Agrawal and Ahmed K. Ezzat. </author> <title> Location Independent Remote Execution in NEST. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(8) </volume> <pages> 905-912, </pages> <month> August </month> <year> 1987. </year>
Reference: [ Anderson, 1980 ] <author> James P. Anderson. </author> <title> Computer Security Threat Monitoring and Surveillance. </title> <editor> James P. </editor> <publisher> Anderson Co., </publisher> <address> Fort Washington, PA, </address> <year> 1980. </year>
Reference-contexts: An intrusion is a successful set of actions to carry out a security threat. Intrusion detection is the ability of a computer system to automatically determine that a security breach has occurred. Anderson <ref> [ Anderson, 1980 ] </ref> identifies three classes of malicious users that perform security breaches: (1) masqueraders are system penetrators that exploit a legitimate account, (2) misfeasors are legitimate users who participate in an illicit activity, and (3) clandestines, who seize supervisory control of the system.
Reference: [ ANSI, 1989 ] <author> ANSI. </author> <title> Programming Language - C. </title> <institution> American National Standards Institute, </institution> <year> 1989. </year> <month> ANSI/X3.159. </month>
Reference-contexts: Translator The Translator compiles source code dps, and stores the output object code in the Repository. If the dp violates any of a set of defined rules for the given language, the dp is rejected. For example, a prototype elastic process supports a specific subset of the ANSI C <ref> [ ANSI, 1989 ] </ref> standard as the base language for encoding dps. This subset language restricts dps on their ability to bind to external functions. The dbm runtime maintains a predefined set of allowed functions. <p> It is even possible to delegate an entire interpreter of a language L to an elastic process, and forthwith delegate agents written in L. The first rds prototype implementation supports agents written in a subset of ANSI C <ref> [ ANSI, 1989 ] </ref> . This subset allows delegated agents to access a predefined set of functions, and eliminates their ability to invoke arbitrary external or internal functions. <p> Notice that this ocp supports an snmp mib. The other dpis use rds to communicate between themselves, with ocps, and with remote processes. 3.3.3 Prototype Language and Services The first m b d-server prototype supports delegated agents written on ANSI C <ref> [ ANSI, 1989 ] </ref> . C is ubiquitous, supports low-level facilities, and has efficient implementations.
Reference: [ Arai and Yemini, 1995 ] <author> Kazushige Arai and Yechiam Yemini. </author> <title> View Definition Language (VDL) for SNMP. </title> <booktitle> In The Fourth International Symposium on Integrated Network Management, </booktitle> <pages> pages 454-465, </pages> <address> Santa Barbara, California, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Many database systems extend their data definition language (ddl) to support views. For snmp mibs, extending the ddl is akin to extending the smi to support views, which is the the approach presented in <ref> [ Arai and Yemini, 1995 ] </ref> . In contrast, our definition leaves the original smi standard intact. We discuss some of the problems with that approach and compare the definitions of views in both languages in Section 5.5.2. The syntax of our vdl is shown in Figure 5.3. <p> A party may be authorized to access a subset of the mib. mib Views extend this mechanism to support not only projections but also computations over mib data. An alternative vdl, which also requires m b d support was proposed by <ref> [ Arai and Yemini, 1995 ] </ref> . Their vdl extends the mib smi to support views. <p> This results in very long and detailed specifications of mib views. Consider, for instance, the simple example given in Figure 5.10, which only takes five lines in our vdl. The same example is given in Figure 5.19 using smi extensions following the notation presented in <ref> [ Arai and Yemini, 1995 ] </ref> . Notice also that the smi is a well established standard at the core of snmp. An extension or revision of such standard must also overcome many non-technical obstacles, as the experience of snmpv2 has shown.
Reference: [ Auerbach et al., 1994a ] <author> Joshua Auerbach, Arthur Goldberg, German Goldszmidt, Ajei Gopal, Mark Kennedy, Josyula Rao, and James Russell. Concert/C: </author> <title> A Language for Distributed Programming. </title> <booktitle> In Proceedings of the Winter 1994 USENIX Conference, </booktitle> <address> San Francisco, California, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: If the dpis are computationally bound, distributing them among several hosts provides an effective way to harness additional computing power. For example, a distributed geology application used full process agents written in Concert/C <ref> [ Auerbach et al., 1994a ] </ref> to collect and analyze seismic sensored phenomena [ Soares and Karben, 1993 ] . A multithreaded elastic process presents a single unit for operating system enforced resource constraints.
Reference: [ Auerbach et al., 1994b ] <author> Joshua Auerbach, Arthur Goldberg, German Goldszmidt, Ajei Gopal, Mark Kennedy, and James Russell. </author> <title> Concert/C Tutorial and User Guide: A Programmer's Guide to a Language for Distributed C Programming. </title> <type> Technical report, </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1994. </year> <month> ftp://software.watson.ibm.com/pub/concert/doc/userguide.ps. </month>
Reference-contexts: Many research efforts have tried, with limited success, to address the intrinsic performance limitations of rpc. Asynchronous rpc (a-rpc) supports non-blocking rpc calls. Promises [ Liskov and Shrira, 1988 ] is an example of an a-rpc design. The Concert/C <ref> [ Auerbach et al., 1994b ] </ref> language supports both rpc and asynchronous message sends. In an a-rpc, the client has the choice of either wait for the call to return or to continue execution concurrently.
Reference: [ Autrata, 1991 ] <author> Matthias Autrata. </author> <title> OSF Distributed Management Environment. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> October </month> <year> 1991. </year>
Reference: [ Bapat, 1993 ] <author> Subodh Bapat. </author> <title> Richer Modeling Semantics for Management Information. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <pages> pages 15-28, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: For example, two specification techniques that combine object-oriented and relation algebraic methods to model mib data are presented in <ref> [ Bapat, 1993; Benz and Leischner, 1993 ] </ref> . The first paper proposes the use of virtual attributes, which are dynamically computed from other attributes to enforce access control. The second paper hints at future extensions of their modeling technique which would include views to filter certain objects.
Reference: [ Bauer et al., 1993 ] <author> Michael Bauer, Pat Finnigan, James Hong, Jan Pachl, and Toby Teorey. </author> <title> An Integrated Distributed System Management Architecture. </title> <booktitle> In Proceedings of the 1993 IBM Centre for Advanced Studies Conference, </booktitle> <pages> pages 27-40, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1993. </year> <month> 160 </month>
Reference-contexts: For instance, when a new pattern of failures is suspected at a switch, a new agent can be delegated to evaluate and correlate its symptoms. Management applications can use dynamic code delegation to address temporal problems, like the detection of 2 See <ref> [ Bauer et al., 1993 ] </ref> for an analysis of the functional requirements of managing distributed systems. 72 intrusion attempts to a networked workstation. 3.1.1 Challenges of Distributing Management Functionality The main problem that this chapter addresses is how to dynamically decentralize network management functions.
Reference: [ Ben-Artzi et al., 1990 ] <author> A. Ben-Artzi, A. Chadna, and U. Warrier. </author> <title> Network Management of TCP/IP Networks: Present and Future. </title> <journal> IEEE Network Magazine, </journal> <month> July </month> <year> 1990. </year>
Reference-contexts: In a Wide Area Network, larger delays will make the number of snmp devices that can be queried an order of magnitude lower. A similar example is described in more detail in <ref> [ Ben-Artzi et al., 1990 ] </ref> . Example: Moving Large Tables Consider a future atm switch providing services to several thousand video-on-demand subscribers. The network management system must keep large tables of atm entities that need to be processed from time to time.
Reference: [ Benz and Leischner, 1993 ] <author> Ch. Benz and M. Leischner. </author> <title> A High Level Specification Technique for Modeling Networks and their Environments including Semantic Aspects. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <pages> pages 29-43, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: For example, two specification techniques that combine object-oriented and relation algebraic methods to model mib data are presented in <ref> [ Bapat, 1993; Benz and Leischner, 1993 ] </ref> . The first paper proposes the use of virtual attributes, which are dynamically computed from other attributes to enforce access control. The second paper hints at future extensions of their modeling technique which would include views to filter certain objects.
Reference: [ Bernstein and Yuhas, 1995 ] <author> Lawrence Bernstein and C.M. Yuhas. </author> <booktitle> Can we talk? In The Fourth International Symposium on Integrated Network Management, </booktitle> <pages> pages 670-676, </pages> <address> Santa Barbara, California, </address> <month> April </month> <year> 1995. </year>
Reference: [ Bernstein, 1993 ] <author> Lawrence Bernstein. </author> <title> The Vision for Networks and their Management, </title> <month> September </month> <year> 1993. </year> <title> An address at the IEEE Second Workshop on Network Management and Control. </title>
Reference: [ Birrell and Nelson, 1984 ] <author> Andrew D. Birrell and Bruce J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1), </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: Examples of these include Remote Procedure Call, Remote Execution, Remote Evaluation, and Remote Scripting. This section reviews these models of distributed processing, and compares their relevant features with remote delegation to elastic processes. 2.7.1 Remote Procedure Call - RPC rpc <ref> [ Birrell and Nelson, 1984 ] </ref> is a widely used mechanism for distributed ipc. A critique of the rpc model is presented in [ Tanembaum and van Renesse, 1988 ] and a survey of rpc systems in [ Soares, 1992 ] .
Reference: [ Borenstein, 1994 ] <author> Nathaniel S. Borenstein. </author> <title> Email With a Mind Of Its Own: The Safe-Tcl Language for Enabled Mail, </title> <year> 1994. </year> <month> ftp://ftp.fv.com/pub/code/other/safe-tcl.tar. </month>
Reference-contexts: Remote Scripting with Agents Several programming languages have recently been proposed to write scripting or mobile agents. Examples of these languages are Java [ Gosling and McGilton, 1995 ] , Safe-TCL <ref> [ Borenstein, 1994 ] </ref> , and Telescript [ White, 1994 ] . Section 2.7.4 describes these technologies, and Section 2.7.5 presents a more detailed comparison with the work presented here. A detailed taxonomy is presented in Table 2.1. The following paragraphs briefly outline some of their differences. <p> terms of type and amount of available hardware (cpu, memory) and software (different operating systems). 2.1.2 Language-Based vs Process-Based Agents Several proposals for mobile agent technologies have been recently described by various groups including Java [ Gosling and McGilton, 1995 ] , Telescript [ White, 1994 ] , and Safe-TCL <ref> [ Borenstein, 1994 ] </ref> . These proposals share a fundamental common base: agents are program scripts written in the corresponding language that are dispatched to a remote interpreter where they are executed. <p> We expected that newer and better languages would appear. And indeed, since we implemented the first prototype in 1991, several new agent scripting languages have appeared. Among the most popular are Java [ Gosling and McGilton, 1995 ] , Safe-TCL <ref> [ Borenstein, 1994 ] </ref> , and Telescript [ White, 1994 ] . Each of these languages provides features that are useful for remote delegation. However, many tasks cannot be effectively handled by interpreted "safe" languages.
Reference: [ Braden and Schon, 1991 ] <author> Robert Braden and Annette De Schon. </author> <title> NNStat Internet Statistics Collection Package Introduction and User Guide. </title> <institution> USC Information Sciences Institute, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: Network Utilization. This observer evaluates the ratio between the number of bytes received in some period of time and the maximum utilization possible for the given network. This information can be obtained from standard mib-ii variables, or via alternative methods, e.g., NNStat <ref> [ Braden and Schon, 1991 ] </ref> . For the InterOp demo, we observed utilization at time t using the s3EnetConcRxOk from the private Synoptics mib [ Synoptics, 1990 ] U tilization (t) = s3EnetConcRxOk (t) s3EnetConcRxOk (t 0 ) (t t 0 ) fl 10000000 3. Collision rate.
Reference: [ Califano and Rigoutsos, 1993 ] <author> Andreas Califano and Isidore Rigoutsos. </author> <title> FLASH: A Fast Look-Up Algorithm for String Homology. </title> <booktitle> In Proceedings First International Conference on Intelligent Systems for Molecular Biology, </booktitle> <address> Washington, DC, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Using delegated agents, applications can overcome many resource constraints. For instance, bandwidth limitations are avoided by reducing the transfer of unnecessary data. Extending an E-mail Based Service - DFlash The dFLASH server <ref> [ Califano and Rigoutsos, 1993 ] </ref> is a homologous sequence retrieval program for protein sequences. The server supports remote researchers via e-mail requests.
Reference: [ Carl-Mitchell and Quarterman, 1994 ] <author> Smoot Carl-Mitchell and John S. Quarter-man. </author> <title> How Wide Is The Internet. </title> <journal> RS/Magazine, </journal> <volume> 3(9) </volume> <pages> 24-27, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: For example, the round-trip delay between two hosts in Austin, Texas was measured as 596 ms, while that between one of these hosts and a host in Japan was only 254 ms <ref> [ Carl-Mitchell and Quarterman, 1994 ] </ref> . Tradeoffs It is much easier and inexpensive to provide dedicated fast cpus than to establish dedicated fast network connections to significantly reduce network latency between remote hosts.
Reference: [ Case et al., 1990 ] <author> Jeffrey D. Case, Mark S. Fedor, Martin L. Schoffstall, and James R. Davin. </author> <title> A Simple Network Management Protocol (SNMP). </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: Yet most useful tools were vendor-specific and supported only a certain class of devices. The increased complexity of operations created a demand for common, vendor-neutral, interoperable, and integrated solutions. Standards organizations ameliorated this situation by providing management interoperability frameworks such as the ietf's snmp <ref> [ Case et al., 1990 ] </ref> and the iso's cmip [ ISO, 1990a ] . Network Management Goals Network management aims include the detection and handling of faults (e.g., network cleavages), performance inefficiencies (e.g., high latency delays), and security compromises (e.g., unauthorized access).
Reference: [ Case et al., 1993 ] <author> Jeffrey D. Case, Keith McCloghrie, Marshall T. Rose, and Steven L. Waldbusser. </author> <title> Introduction to version 2 of the Internet-standard Network Management Framework. </title> <type> RFC 1441, </type> <month> April </month> <year> 1993. </year>
Reference: [ Cheriton, 1988 ] <author> David R. Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 314-333, </pages> <month> March </month> <year> 1988. </year> <month> 161 </month>
Reference-contexts: However, the executable modules must already be present in that host. The V-system <ref> [ Cheriton, 1988 ] </ref> , for instance, allows programs that do not require low-level hardware access to be executed remotely. For example, a program p can be remotely executed from the command interpreter on a randomly chosen host by typing: &lt;p&gt;<arguments>@*.
Reference: [ Chess et al., 1995 ] <author> David Chess, Benjamin Grosof, Colin Harrison, David Levine, Colin Parris, and Gene Tsudik. </author> <title> Itinerant Agents for Mobile Computing. </title> <type> Technical Report 20010, </type> <institution> IBM Research, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Several scripting languages have been proposed and used to write mobile agents, e.g., Java [ Gosling and McGilton, 1995 ] and Safe-TCL [ Boren-stein, 1994 ] , "Itinerant" agents are scripting agents which roam among a set of net-worked servers, seeking assistance and collecting information <ref> [ Chess et al., 1995 ] </ref> . Telescript [ White, 1994 ] is an example of an itinerant agent technology. The following paragraphs outline their main characteristics. Java Java is an interpreted, multithreaded and "type-safe" dialect of C++.
Reference: [ Chu, 1993 ] <author> Wesley W. Chu. </author> <title> System Management Research via Behavior Characterization. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <pages> pages 1-6, </pages> <address> Los Angeles, California, April 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [ Cohen and Feigenbaum, 1981 ] <editor> Paul R. Cohen and Edward A. Feigenbaum, editors. </editor> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <volume> volume 3. </volume> <publisher> William Kaufmann, Inc., </publisher> <address> Los Altos, California, </address> <year> 1981. </year>
Reference-contexts: One way of finding appropriate weights is to begin by using estimates, and let the program modify the settings. Good (poor) predictors should have their weights increased (decreased) until correct classifications are achieved. Similar learning techniques have been used for game playing programs, e.g., Samuel's checkers <ref> [ Cohen and Feigenbaum, 1981 ] </ref> . There are several issues that must be addressed for this type of technique. <p> A number of known algorithms may be used to train such a linear function. The Least Mean Square (LMS) algorithm, for example, adapts the weights after every trial, based on the difference between the actual and desired output <ref> [ Cohen and Feigenbaum, 1981 ] </ref> . The single layer perceptron model is appropriate when computing linearly separable regions. Multi-layer perceptrons are needed for complex cases, e.g., when decision regions can not be separated by a hyperplane [ DARPA, 1988 ] .
Reference: [ Comer and Stevens, 1991 ] <author> Douglas Comer and David Stevens. </author> <title> Internetworking with TCP/IP, Volume II, Design, Implementation and Internals. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference: [ Comer and Stevens, 1993 ] <author> Douglas Comer and David Stevens. </author> <title> Internetworking with TCP/IP, Volume III, Client Server Programming and Applications. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: The protocol component is designed to support different network protocols and data representation encodings. The current prototype is implemented over the BSD socket interface and uses either tcp connections or udp datagrams of the tcp/ip protocol suite <ref> [ Comer and Stevens, 1993 ] </ref> . It uses the asn.1 Basic Encoding Rules [ ISO, 1990b ] to encode rds message headers. 2.3.3 dp management Repository The Repository provides a common database service to store dps in the underlying file system.
Reference: [ Comer, 1991 ] <author> Douglas Comer. </author> <title> Internetworking with TCP/IP, Principles, Protocols and Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference: [ DARPA, 1988 ] <author> DARPA. </author> <title> Neural Network Study. </title> <publisher> AFCEA International Press, </publisher> <address> Fair-fax, Virginia, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: The single layer perceptron model is appropriate when computing linearly separable regions. Multi-layer perceptrons are needed for complex cases, e.g., when decision regions can not be separated by a hyperplane <ref> [ DARPA, 1988 ] </ref> . In a more general scenario, multiple index functions may be simultaneously employed, each providing indications of different possible problems.
Reference: [ Duda and Hart, 1973 ] <author> R. O. Duda and P.E. Hart. </author> <title> Pattern Classification And Scene Analysis. </title> <publisher> John-Wiley & Sons, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: Perceptron Training The problem of computing ~w, can be considered an instance of the problem of perceptron training <ref> [ Duda and Hart, 1973 ] </ref> . A number of known algorithms may be used to train such a linear function.
Reference: [ Dupuy et al., 1989 ] <author> Alex Dupuy, Jed Schwartz, Yechiam Yemini, Gil Barzilai, and Albert Cahana. </author> <title> Network Fault Management A User's View. </title> <editor> In Branislav N. Me-andzija and Jil Westcott, editors, </editor> <booktitle> The First IFIP International Symposium on Integrated Network Management, </booktitle> <pages> pages 101-107, </pages> <address> Boston, MA, May 1989. </address> <publisher> North Holland. </publisher>
Reference: [ Dupuy, 1995 ] <author> Alex Dupuy. </author> <title> Smarts Operations Server. </title> <type> Smarts, </type> <year> 1995. </year>
Reference-contexts: Implementations of Elastic Processing We implemented the first elastic process prototype as an extensible server for management applications [ Goldszmidt et al., 1991 ] . This initial application included a multithreaded server and several clients. System Management Arts implemented an enhanced product version, the SMARTS Operations Server (SOS) <ref> [ Dupuy, 1995 ] </ref> . 1.2.3 Related Work Distributed applications are designed and implemented following diverse remote communication models. Examples of implementations of these models include several "remote-" prefixed mechanisms, such as Remote Procedure Call (rpc), remote execution, remote evaluation, and remote scripting. <p> For instance, if a dpi sends a message to a remote process, the Protocol thread forwards it to its destination. The first prototype implementation supported only a trivial access control authentication for dps and dpis based on their respective handles. A later implementation <ref> [ Dupuy, 1995 ] </ref> added optional MD5 [ Rivest, 1992 ] authentication (see Section 2.4). The protocol component is designed to support different network protocols and data representation encodings. <p> Implementation The first elastic process prototype was implemented on the SunOS 4.1 O/S, using the lightweight process (lwp) library. This prototype was first demonstrated at the InterOp 1991 conference (see Section 4.6.5). The second prototype, the SMARTS Operations Server (SOS) <ref> [ Dupuy, 1995 ] </ref> , was implemented in Solaris and other operating systems. 2.4 Security Network security problems can undermine the security of distributed applications. For example, (1) a protocol analyzer can compromise communications by analyzing protocol frames; (2) malicious attacks can target devices to bring an entire network down. <p> In addition to some demonstration applications that we developed, groups at Aerospace, Harvey Mudd College [ Erlinger et al., 1994 ] , Smarts <ref> [ Dupuy, 1995 ] </ref> , and Synoptics, have used m b d code to implement several network management tools. This section presents three examples 3 of other network management application domains that can benefit from the functions supported by m b d.
Reference: [ Eckerson, 1992 ] <author> W. Eckerson. </author> <title> Net Management Traffic Can Sap Net Performance. Network World, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: The maximum number of registers that the management station can handle is bound by the length of the polling interval divided by the time required for a single poll request. For supermarket point-of-sale registers, a reasonable polling frequency is every 10 seconds <ref> [ Eckerson, 1992 ] </ref> . The maximum tolerable delay will be much lower for many real-time applications (e.g., nuclear reactors), and higher for others (e.g., printers). In a Wide Area Network, larger delays will make the number of snmp devices that can be queried an order of magnitude lower.
Reference: [ Elmasri and Navathe, 1989 ] <author> Ramez Elmasri and Shamkant B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <address> Benjamin/Cummings, </address> <year> 1989. </year>
Reference-contexts: For example, resolution of routing problems typically involves correlation of routing, 131 address translation, and other configuration tables. It would be thus very useful to support effective computations of atomic joins. Database Views Traditional database systems support three data definition levels: internal, conceptual, and external <ref> [ Elmasri and Navathe, 1989 ] </ref> . External data definitions allow remote applications to define "views" which are computations over the conceptual level data. Our approach is to support a similar mechanism over an mib. <p> This m b d-server supports a specialized ocp, namely, the mib Computations of Views Agent, mcva. 133 Management Information Bases An mib can be viewed as a simple database. Indeed, a database is defined by <ref> [ Elmasri and Navathe, 1989 ] </ref> as a logically coherent collection of data with some inherent meaning, which is designed, built, and populated with data for a specific purpose. <p> Unfortunately, the updating of views which involve more than one base table is complicated and may even be ambiguous. In general, views defined on multiple tables using joins, and views defined using aggregate functions (e.g., arithmetic operators) are not updatable. Indeed, updating views is still an active research area <ref> [ Elmasri and Navathe, 1989 ] </ref> . Thus, we apply views only for queries, i.e., read-access operations on mibs. mib View Snapshots View Snapshots are new v-mib objects which provide an instantaneous copy of the values of a collection of mib variables.
Reference: [ Erlinger et al., 1994 ] <author> Mike Erlinger, Elicia Engelman, Nathan Tuck, Adam Wells, Christopher White, and Philip Winston. </author> <title> Demonstrating High Performance Scalable Network Management Paradigms. </title> <type> Technical report, </type> <institution> Harvey Mudd College, </institution> <month> December 16 </month> <year> 1994. </year> <month> 162 </month>
Reference-contexts: In addition to some demonstration applications that we developed, groups at Aerospace, Harvey Mudd College <ref> [ Erlinger et al., 1994 ] </ref> , Smarts [ Dupuy, 1995 ] , and Synoptics, have used m b d code to implement several network management tools. This section presents three examples 3 of other network management application domains that can benefit from the functions supported by m b d.
Reference: [ Erlinger, 1993 ] <author> Michael Erlinger. </author> <title> RMON From Concept to Specification. </title> <editor> In Heinz-Gerd Hegering and Yechiam Yemini, editors, </editor> <booktitle> The Third IFIP International Symposium on Integrated Network Management, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: If instead a decentralized approach is taken, the same function is delegated to an m b d-server, and its aggregated costs are greatly decreased. Most or all of the computations happen 75 at the LAN, and are therefore more effective. The rmon mib <ref> [ Erlinger, 1993 ] </ref> defines remote monitoring probes that collect information from LAN segments. An rmon probe is a device that collects performance data from a LAN segment and performs predefined calculations over that data.
Reference: [ Falcone, 1987 ] <author> Joseph R. Falcone. </author> <title> A Programmable Interface Language for Heteroge-nous Distributed Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Typically an interpreter at the remote host evaluates a program expression and returns the results to the client. rev [ Stamos and Gifford, 1990b ] , SunDew [ Gosling, 1986 ] , and NCL <ref> [ Falcone, 1987 ] </ref> all implement variations of remote evaluation mechanisms. rev supports remote evaluation of program expressions written in the CLU language [ Stamos and Gifford, 1990a ] . NCL [ Falcone, 1987 ] was used to implement a networked file system, using remote evaluation of LISP expressions. <p> to the client. rev [ Stamos and Gifford, 1990b ] , SunDew [ Gosling, 1986 ] , and NCL <ref> [ Falcone, 1987 ] </ref> all implement variations of remote evaluation mechanisms. rev supports remote evaluation of program expressions written in the CLU language [ Stamos and Gifford, 1990a ] . NCL [ Falcone, 1987 ] was used to implement a networked file system, using remote evaluation of LISP expressions. Partridge [ Partridge, 1992 ] argues that late binding rpc, a form of remote evaluation, gives optimal performance in the number of network transits required to complete a computation.
Reference: [ Goldszmidt and Yemini, 1991 ] <author> German Goldszmidt and Yechiam Yemini. </author> <title> The Design of a Management Delegation Engine. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> October </month> <year> 1991. </year>
Reference: [ Goldszmidt and Yemini, 1993 ] <author> German Goldszmidt and Yechiam Yemini. </author> <title> Evaluating Management Decisions via Delegation. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference: [ Goldszmidt and Yemini, 1995 ] <author> German Goldszmidt and Yechiam Yemini. </author> <title> Distributed Management by Delegation. </title> <booktitle> In The 15th International Conference on Distributed Computing Systems. IEEE Computer Society, </booktitle> <month> June </month> <year> 1995. </year>
Reference: [ Goldszmidt et al., 1990 ] <author> German Goldszmidt, Shmuel Katz, and Shaula Yemini. </author> <title> High Level Language Debugging for Concurrent Programs. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(4) </volume> <pages> 311-336, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Such an agent could be developed based on the experiences of other users, after the original application has been deployed. Software Monitoring and Debugging Another use of delegation is to augment a distributed application with monitoring capabilities. This can be very useful for debugging distributed applications <ref> [ Goldszmidt et al., 1990 ] </ref> . A dpi thread can be instantiated to monitor and trace the occurrence of certain events on distributed processes. For instance, dpis could be used to discover patterns of data access, collect and correlate event traces, and so forth.
Reference: [ Goldszmidt et al., 1991 ] <author> German Goldszmidt, Yechiam Yemini, and Shaula Yemini. </author> <title> Network Management: The MAD Approach. </title> <booktitle> In Proceedings of the IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Thus an elastic server process can adapt to provide its clients with dynamic extensions of its functionality. Implementations of Elastic Processing We implemented the first elastic process prototype as an extensible server for management applications <ref> [ Goldszmidt et al., 1991 ] </ref> . This initial application included a multithreaded server and several clients. System Management Arts implemented an enhanced product version, the SMARTS Operations Server (SOS) [ Dupuy, 1995 ] . 1.2.3 Related Work Distributed applications are designed and implemented following diverse remote communication models.
Reference: [ Goldszmidt, 1992 ] <author> German Goldszmidt. </author> <title> Elastic Servers in Cords. </title> <booktitle> In Proceedings of the 2nd IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> November </month> <year> 1992. </year>
Reference: [ Goldszmidt, 1993a ] <author> German Goldszmidt. </author> <title> Distributed System Management via Elastic Servers. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <pages> pages 31-35, </pages> <address> Los Angeles, California, </address> <month> April </month> <year> 1993. </year>
Reference: [ Goldszmidt, 1993b ] <author> German Goldszmidt. </author> <title> On Distributed System Management. </title> <booktitle> In Proceedings of the Third IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1993. </year>
Reference: [ Gosling and McGilton, 1995 ] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment: A White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1995. </year>
Reference-contexts: Many emerging networked applications need such technologies to dynamically deploy software at distributed computing devices. Recent proposals for mobile agent technologies are based on specialized interpreted languages, like Java <ref> [ Gosling and McGilton, 1995 ] </ref> or Telescript [ White, 1994 ] . In these frameworks, an agent is a script that is dispatched to and executed at a remote interpreter. In contrast, this dissertation introduces a language-independent agent technology. <p> Remote Scripting with Agents Several programming languages have recently been proposed to write scripting or mobile agents. Examples of these languages are Java <ref> [ Gosling and McGilton, 1995 ] </ref> , Safe-TCL [ Borenstein, 1994 ] , and Telescript [ White, 1994 ] . Section 2.7.4 describes these technologies, and Section 2.7.5 presents a more detailed comparison with the work presented here. A detailed taxonomy is presented in Table 2.1. <p> For instance, the video game players may have very different personal computers, in terms of type and amount of available hardware (cpu, memory) and software (different operating systems). 2.1.2 Language-Based vs Process-Based Agents Several proposals for mobile agent technologies have been recently described by various groups including Java <ref> [ Gosling and McGilton, 1995 ] </ref> , Telescript [ White, 1994 ] , and Safe-TCL [ Borenstein, 1994 ] . These proposals share a fundamental common base: agents are program scripts written in the corresponding language that are dispatched to a remote interpreter where they are executed. <p> We designed elastic processing to leave the choice of agent programming language open 3 . We expected that newer and better languages would appear. And indeed, since we implemented the first prototype in 1991, several new agent scripting languages have appeared. Among the most popular are Java <ref> [ Gosling and McGilton, 1995 ] </ref> , Safe-TCL [ Borenstein, 1994 ] , and Telescript [ White, 1994 ] . Each of these languages provides features that are useful for remote delegation. However, many tasks cannot be effectively handled by interpreted "safe" languages. <p> They require the existence, at the receiving process, of the corresponding interpreter or compiler back-end. For example, Java <ref> [ Gosling and McGilton, 1995 ] </ref> compilers produce safe intermediate-code. * Object-code dps are in machine specific format. The delegator must be aware of the object code format accepted by the elastic process. <p> Remote "scripting" agents enhance the remote evaluation model by providing safe languages and security features. Several scripting languages have been proposed and used to write mobile agents, e.g., Java <ref> [ Gosling and McGilton, 1995 ] </ref> and Safe-TCL [ Boren-stein, 1994 ] , "Itinerant" agents are scripting agents which roam among a set of net-worked servers, seeking assistance and collecting information [ Chess et al., 1995 ] .
Reference: [ Gosling, 1986 ] <author> James Gosling. Sundew: </author> <title> A distributed and extensible window system. </title> <booktitle> In Proceedings of the 1986 Winter Usenix Technical Conference, </booktitle> <pages> pages 98-103, </pages> <address> Boulder, CO, </address> <month> January </month> <year> 1986. </year> <month> 163 </month>
Reference-contexts: Thus, it is a restricted form of elasticity that combines delegation and invocation into one single action. Typically an interpreter at the remote host evaluates a program expression and returns the results to the client. rev [ Stamos and Gifford, 1990b ] , SunDew <ref> [ Gosling, 1986 ] </ref> , and NCL [ Falcone, 1987 ] all implement variations of remote evaluation mechanisms. rev supports remote evaluation of program expressions written in the CLU language [ Stamos and Gifford, 1990a ] .
Reference: [ Gosling, 1995 ] <author> James Gosling. </author> <title> The HotJava Browser: A White Paper. Sun, </title> <year> 1995. </year>
Reference-contexts: These proposals share a fundamental common base: agents are program scripts written in the corresponding language that are dispatched to a remote interpreter where they are executed. For example, Java scripts are retrieved by a HotJava browser <ref> [ Gosling, 1995 ] </ref> and executed by the Java interpreter at the browser. One can script games and various other local interaction loops in Java and provide these scripts as extensions of standard Web information services. Java thus enables remote dynamic extensibility of Web browsers. <p> In other words, the browser can only access objects whose URL protocol is predefined, e.g., http, smtp, ftp. To support a new protocol, say S-http, the implementation of the browser must be extended. If the browser could be dynamically extended, new protocols could be added as needed. HotJava <ref> [ Gosling, 1995 ] </ref> is an example of an extensible client browser. We compare their model with ours in Section 2.7.4. An Rmtd Daemon Server Process rmtd [ Uni, 1986; Stevens, 1990 ] is a Unix "deamon" server that provides remote file access over magnetic tape drives. <p> The security of this application could be based on authenticating the source of the program as a reputable provider of such services, and executing the browser process in a constrained environment with only read access to certain files. HotJava <ref> [ Gosling, 1995 ] </ref> is an example of an extensible client browser that accepts code written in the Java language. Application developers can not easily reuse their existing code for such extensions. Interpreters for languages like Java or 51 TCL increase the memory size of the process. <p> But the Java interpreter provides no real security against "trojan horses" and other improper behaviors. Java applets are used to add dynamic content into Web pages. These applets can be rendered by a Web browser that supports a Java interpreter, e.g., HotJava <ref> [ Gosling, 1995 ] </ref> . The HotJava browser supports different levels of network access control. Safe-TCL Safe-TCL is a TCL [ Ousterhout, 1990 ] dialect that removes from TCL all the features that can be "harmful" to the recipient.
Reference: [ Harrison et al., 1995 ] <author> Colin Harrison, David Chess, and Aaron Kershenbaum. </author> <title> Mobile Agents: Are they a good idea? Technical Report RC 19887, </title> <institution> IBM Research, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: For instance, "Intelligent" agents [ Riecken, 1994b ] is an active area of research whose main focus is in artificial intelligence issues, such as knowledge representation and planning. Mobile agents are programs, typically written in a scripting language, which are dispatched to a remote computer for execution <ref> [ Harrison et al., 1995 ] </ref> . Remote "scripting" agents enhance the remote evaluation model by providing safe languages and security features.
Reference: [ Hedrick, 1988 ] <author> C Hedrick. </author> <title> Routing Information Protocol. </title> <type> RFC 1058, </type> <month> June </month> <year> 1988. </year>
Reference-contexts: Snapshot views are very useful to investigate transient problems of short duration. Some of these problems are often handled by automatic recovery mechanisms which quickly mask the symptoms of the underlying problem. For example, routing algorithms can dynamically adjust routes to react to changing network conditions. Algorithms like RIP's <ref> [ Hedrick, 1988 ] </ref> distance-vector algorithm, for instance, try to find the best route for every destination. Thus, an intermittent routing problem may be masked by the routing algorithm itself.
Reference: [ Hennessy and Patterson, 1990 ] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Our main concern is that of minimizing the overall response time or transactional time for the application end user who makes a request. Studies report that user productivity is inversely proportional to transactional time <ref> [ Hennessy and Patterson, 1990 ] </ref> . <p> CPU cycles vs Network Latency Over the last few years, cpu power has increased faster than any other computing technology. Researchers predict that the performance of microprocessors will continue to increase at an annual rate of 50% <ref> [ Hennessy and Patterson, 1990 ] </ref> . Network bandwidth availability is also increasing, but at a slower rate and higher relative cost than cpus speeds. Network latency, however, is limited by the speed of light, and quality of service constraints.
Reference: [ ISO, 1989 ] <author> International Standards Organization - ISO. </author> <title> Information Processing - Open System Interconnection Basic Reference Model Part 4 - OSI Management Framework. </title> <address> New York, USA, </address> <month> January 18 </month> <year> 1989. </year>
Reference-contexts: For example, network management aims include the detection and handling of device failures, performance inefficiencies, and security compromises. To achieve these goals, network management systems implement specific management functions. The OSI standards have classified these functions into five major areas <ref> [ ISO, 1989 ] </ref> : fault, accounting, configuration, performance, and security. Management applications use network management services to implement these functions. For instance, they collect management data using device instrumentation and management protocols, and present it to the operators via graphical user interfaces.
Reference: [ ISO, 1990a ] <author> International Standards Organization ISO. </author> <title> Open Systems Interconnection Common Management Information Protocol Specification, </title> <booktitle> 1990. International Standard 9596. </booktitle>
Reference-contexts: The increased complexity of operations created a demand for common, vendor-neutral, interoperable, and integrated solutions. Standards organizations ameliorated this situation by providing management interoperability frameworks such as the ietf's snmp [ Case et al., 1990 ] and the iso's cmip <ref> [ ISO, 1990a ] </ref> . Network Management Goals Network management aims include the detection and handling of faults (e.g., network cleavages), performance inefficiencies (e.g., high latency delays), and security compromises (e.g., unauthorized access).
Reference: [ ISO, 1990b ] <author> International Standards Organization ISO. </author> <title> Open Systems Interconnection Specification of Basic Encoding Rules for Abstract Syntax Notation ONE (ASN.1), </title> <booktitle> 1990. International Standard 8825. </booktitle>
Reference-contexts: The current prototype is implemented over the BSD socket interface and uses either tcp connections or udp datagrams of the tcp/ip protocol suite [ Comer and Stevens, 1993 ] . It uses the asn.1 Basic Encoding Rules <ref> [ ISO, 1990b ] </ref> to encode rds message headers. 2.3.3 dp management Repository The Repository provides a common database service to store dps in the underlying file system. This interface allows it to store, lookup, and delete dps.
Reference: [ Jacobson, 1988 ] <author> Van Jacobson. Traceroute Software, </author> <month> December </month> <year> 1988. </year> <month> ftp://ftp.ee.lbl.gov/pub/traceroute.tar.Z. </month>
Reference-contexts: Before 1990, most available management tools were used in an ad-hoc fashion. At the time, the few generic tools available provided very basic functions. For instance, operators used traceroute <ref> [ Jacobson, 1988 ] </ref> to track the route that ip packets follow or to find a "miscreant" gateway that is discarding some packets. Some networks supported more sophisticated, but proprietary, management tools. As networks grew in size and became more complex, their operational costs increased substantially.
Reference: [ Leinwand and Fang, 1993 ] <author> Allan Leinwand and Karen Fang. </author> <title> Network Management </title>
Reference-contexts: Moreover, they may result in management applications taking wrong decisions, or not taking action when required. For example, security management applications use mib variables to monitor transport connections. To track which remote systems access resources via tcp, for instance, tcpConnTable can be used <ref> [ Leinwand and Fang, 1993 ] </ref> . An intruder, however, may need only a brief connection to gather information.
References-found: 55

