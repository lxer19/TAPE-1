URL: ftp://cl-ftp.dfki.uni-sb.de/pub/papers/local/tg2.ps.Z
Refering-URL: http://cl-www.dfki.uni-sb.de/cl/papers/cl-abstracts.html
Root-URL: 
Email: email: busemann@dfki.uni-sb.de  
Title: Best-First Surface Realization  
Author: Stephan Busemann 
Address: Stuhlsatzenhausweg 3 D-66123 Saarbrucken  
Affiliation: DFKI GmbH  
Abstract: Current work in surface realization concentrates on the use of general, abstract algorithms that interpret large, reversible grammars. Only little attention has been paid so far to the many small and simple applications that require coverage of a small sublanguage at different degrees of sophistication. The system TG/2 described in this paper 1 can be smoothly integrated with deep generation processes, it integrates canned text, templates, and context-free rules into a single formalism, it allows for both textual and tabular output, and it can be parameterized according to linguistic preferences. These features are based on suitably restricted production system techniques and on a generic backtracking regime.
Abstract-found: 1
Intro-found: 1
Reference: [ Busemann et al., 1994 ] <author> S. Busemann, S. Oepen, E. Hinkelman, G. Neumann, and H. Uszko-reit. </author> <title> COSMA-multi-participant NL interaction for appointment scheduling. </title> <note> Research Report RR-94-34, DFKI, Saarbrucken, </note> <year> 1994. </year>
Reference-contexts: In Figure 4, the right-hand side constituent NP is assigned accusative case. Any of these effects are subject to backtracking. Using TGL, small task- and domain-specific grammars can be written quickly. For instance, in the domain of appointment scheduling the system Cosma <ref> [ Busemann et al., 1994 ] </ref> has to accept, reject, modify, or refine suggested meeting dates via email. The sublanguage encoded in TGL only needs a few speech acts, about twenty sentential templates, and a complete account of German date expressions.
Reference: [ Danlos, 1987 ] <author> L. Danlos. </author> <title> The Linguistic Basis of Text Generation. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1987. </year>
Reference-contexts: Ideally, these functions must implement a theory of how mutual dependencies of criteria should be dealt with. For instance, lexical choice and constituent order constraints may suggest the use of passive voice (cf. e.g. <ref> [ Danlos, 1987 ] </ref> ). It is a yet open question whether such a theory can be encoded by weights.
Reference: [ Davis and King, 1977 ] <author> R. Davis and J. King. </author> <title> An overview of production systems. </title> <editor> In E. W. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 300-332. </pages> <publisher> Ellis Horwood, </publisher> <address> Chichester, </address> <year> 1977. </year> <month> 10 </month>
Reference-contexts: In particular, side effects could modify the data base in such a way that other rules become applicable <ref> [ Davis and King, 1977 ] </ref> . However, precondition-action pairs can be used in a more restricted way, preserving transparency by disallowing side effects that affect the database. <p> 3 In the case at hand, the grammar writer preferred to ensure availability of the substructure by virtue of the test predicate. 6 4 An interpreter with generic backtracking TG/2 has a simple interpretation procedure that corresponds to the classical three-step evaluation cycle in production systems (matching, conflict resolution, firing) <ref> [ Davis and King, 1977 ] </ref> . The algorithm receives a GIL structure as its input and uses a distinguished category, TXT, to start from. 1. Matching: Select all rules carrying the current category.
Reference: [ Finkler and Neumann, 1988 ] <author> W. Finkler and G. Neumann. </author> <title> Morphix: A fast realiza-tion of a classification-based approach to morphology. </title> <editor> In H. Trost, editor, </editor> <booktitle> Proc. der 4. Osterreichischen Artificial-Intelligence Tagung, </booktitle> <pages> pages 11-19, </pages> <address> Berlin, </address> <month> August </month> <year> 1988. </year> <pages> Springer. </pages>
Reference-contexts: In this case, processing continues without results from that slot. Functions must return an ASCII string. They are mostly used for word inflection; otherwise, for German every inflectional variant would have to be encoded as a rule. TG/2 uses the morphological inflection component MORPHIX <ref> [ Finkler and Neumann, 1988 ] </ref> . Side effects: The Lisp code under :SIDE-EFFECTS is a function whose value is ignored. It accounts for non-local dependencies between substructures, such as updates of a discourse memory. Note that these effects can be traced and undone in the case of backtracking.
Reference: [ Kasper and Whitney, 1989 ] <author> R. Kasper and R. Whitney. SPL: </author> <title> A sentence plan language for text generation. </title> <type> Technical report, </type> <institution> USC-ISI, Marina del Rey, </institution> <year> 1989. </year>
Reference-contexts: GIL is designed to be a target language suited for deep generation processes. Similar aims have been pursued with the development of the Sentence Plan Language (SPL) <ref> [ Kasper and Whitney, 1989 ] </ref> that is used in a variety of generation systems. Like SPL, GIL assumes only little grammatical information. GIL can represent DAG-like feature structures.
Reference: [ Laubsch, 1992 ] <author> J. Laubsch. Zebu: </author> <title> A Tool for Specifying Reversible LALR(1) Parsers. </title> <type> Technical Report HPL-92-147, </type> <institution> Hewlett-Packard Labs, </institution> <address> Palo Alto, CA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: TGL rules are presently written using a text editor. A specialized TGL grammar editor could improve the development and the organization of grammars considerably. Syntactic correctness is checked at compile-time by an LR-Parser generated by Zebu <ref> [ Laubsch, 1992 ] </ref> on the basis of a BNF syntax for TGL. 3 In the case at hand, the grammar writer preferred to ensure availability of the substructure by virtue of the test predicate. 6 4 An interpreter with generic backtracking TG/2 has a simple interpretation procedure that corresponds to
Reference: [ Mann and Thompson, 1988 ] <author> W. C. Mann and S. A. Thompson. </author> <title> Rhetorical structure theory: Toward a functional theory of text organization. </title> <booktitle> Text, </booktitle> <volume> 8(3) </volume> <pages> 243-281, </pages> <year> 1988. </year>
Reference-contexts: Additional uses could include some rhetorical structuring (e.g. order 5 Note that this conclusion does not depend on the processing strategy chosen. 9 of nucleus and satellites in RST-based analyses <ref> [ Mann and Thompson, 1988 ] </ref> ). The approach presented offers a technical framework that allows a deep generation process to abstract away from many idiosyncrasies of linguistic knowledge by virtue of meaningful weighting functions.
Reference: [ Newell, 1973 ] <author> A. Newell. </author> <title> Production systems: Models of control structures. </title> <editor> In W. G. Chase, editor, </editor> <booktitle> Visual Information Processing, </booktitle> <pages> pages 463-526. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: TG/2 is based on restricted production system techniques that preserve modularity of processing and linguistic knowledge, hence making the system transparent and reusable for various applications. Production systems have been used both for modeling human thought (e.g. <ref> [ Newell, 1973 ] </ref> ) and for the construction of knowledge-based expert systems (e.g. [ Short-liffe, 1976 ] ).
Reference: [ Russell et al., 1990 ] <author> G. Russell, S. Warwick, and J. Carroll. </author> <title> Asymmetry in parsing and generating with unification grammars: Case studies from ELU. </title> <booktitle> In Proc. 28th ACL, </booktitle> <pages> pages 205-211., </pages> <address> Pittsburgh, </address> <year> 1990. </year>
Reference-contexts: In practice, this type of surface realization has several drawbacks. First, many existing grammars have been developed with parsing as the primary type of processing in mind. Adapting their semantics layer to a generation algorithm, and thus achieving reversibility, can turn out to be a difficult enterprise <ref> [ Russell et al., 1990 ] </ref> . Second, many linguistically motivated grammars do not cover common means of information presentation, such as filling in a table, bulletized lists, or semi-frozen formulae used for greetings in letters.
Reference: [ Shieber et al., 1983 ] <author> S. Shieber, H. Uszkoreit, F. Pereira, J. Robinson, and M. Tyson. </author> <title> The formalism and implementation of PATR-II. </title> <editor> In B. J. Grosz and M. E. Stickel, editors, </editor> <booktitle> Research on Interactive Acquisition and Use of Knowledge, </booktitle> <pages> pages 39-79. </pages> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1983. </year>
Reference-contexts: It accounts for non-local dependencies between substructures, such as updates of a discourse memory. Note that these effects can be traced and undone in the case of backtracking. Constraints: Agreement relations are encoded into the rules by virtue of a PATR style <ref> [ Shieber et al., 1983 ] </ref> feature percolation mechanism. The rules can be annotated by equations that either assert equality of a feature's value at two or more constituents or introduce a feature value at a constituent. Attempting to overwrite a feature specification yields an error.
Reference: [ Shieber et al., 1990 ] <author> S. Shieber, G. van Noord, R. C. Moore, and F. Pereira. </author> <title> A semantic-head-driven generation algorithm for unification-based formalisms. </title> <journal> Computational Linguistics, </journal> <volume> 16(1) </volume> <pages> 30-42, </pages> <year> 1990. </year>
Reference-contexts: It is claimed that this way, a grammar can be reused for parsing and generation, or a generator can interpret different grammars (e.g. in machine translation). A prominent example for this type of abstract algorithm is semantic-head-driven generation <ref> [ Shieber et al., 1990 ] </ref> that has been used with HPSG, CUG, DCG and several other formalisms. In practice, this type of surface realization has several drawbacks. First, many existing grammars have been developed with parsing as the primary type of processing in mind.
Reference: [ Shortliffe, 1976 ] <author> E. H. Shortliffe. </author> <title> Computer-based Medical Consultations: MYCIN. </title> <publisher> Elsevier, </publisher> <address> New York, </address> <year> 1976. </year> <month> 11 </month>
References-found: 12

