URL: http://www.cosc.brocku.ca/Research/TechRep/cs9504.ps
Refering-URL: http://www.cosc.brocku.ca/Research/TechRep/
Root-URL: 
Email: frp94bg,brossg@sandcastle.cosc.brocku.ca  
Title: A Symbiosis of Animation and Music  
Author: ROBERT E. PRINGLE BRIAN J. ROSS 
Keyword: animation, music, MIDI, evolutionary art.  
Date: December 12, 1995  
Address: St. Catharines, Ontario, Canada L2S 3A1  
Affiliation: Brock University Department of Computer Science  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Beyls. </author> <title> Musical Morphologies from Self-organizing Systems. </title> <booktitle> Interface, </booktitle> <volume> 19 </volume> <pages> 205-218, </pages> <year> 1990. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [2] <author> R. Bidlack. </author> <title> Chaotic Systems as Simple (but Complex) Compositional Algorithms. </title> <journal> Computer Music Journal, </journal> <volume> 16(3) </volume> <pages> 33-47, </pages> <year> 1992. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [3] <author> C. Dodge and C. R. Bahn. </author> <title> Musical Fractals. </title> <journal> Byte, </journal> <pages> pages 185-196, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [4] <author> B. Evans. </author> <title> Integration of Music and Graphics through Algorithmic Congruence. </title> <booktitle> In Proceedings 1987 International Computer Music Conference, </booktitle> <pages> pages 17-24, </pages> <year> 1987. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [5] <author> B. Evans. </author> <title> Enhancing Scientific Animations with Sonic Maps. </title> <booktitle> In Proceedings 1989 International Computer Music Conference, </booktitle> <pages> pages 105-108, </pages> <address> Columbus, Ohio, </address> <year> 1989. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [6] <author> M. Gogins. </author> <title> Iterated Functions Systems Music. </title> <journal> Computer Music Journal, </journal> <volume> 15(1) </volume> <pages> 40-48, </pages> <year> 1991. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [7] <author> Softimage Inc. </author> <title> Softimage 3D User's Guide. </title> <institution> Microsoft Corp, Montreal, </institution> <year> 1995. </year>
Reference-contexts: Some commercial animation environments permit external control through system interfaces, which is required for motion capture (eg. Softimage's channels <ref> [7] </ref>). Although these systems can use music data (with the help of additional software support), interfaces permitting interactive inspection and acquisition of music features by the animator are not included.
Reference: [8] <institution> International MIDI Association, North Holliwood, CA. MIDI 1.0 Specification, </institution> <year> 1983. </year>
Reference-contexts: The system permits the run-time evolution of creatures through the use of scripts that are defined within kernel objects. Scripts contain programming language code that control local and global characteristics of objects. With respect to music, the script language recognizes MIDI (Musical Instrument Digital Interface) files <ref> [8, 14] </ref>. Script functions can access MIDI file information. When executed in a temporal fashion, creature characteristics are essentially controlled by the MIDI music composition, in the manner dictated by the script.
Reference: [9] <author> B.W. Kernighan and D.M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: In the latter case, execution of scripts may use the same inheritance scheme employed with transforms. The language defined is termed ACL (Animation Control Language), and is an interpreted language with a syntax and semantics similar to C <ref> [9] </ref>. An example script in a script dialogue window is in figure 3. ACL supports basic data types and control mechanisms 4 (tests, loops, iteration). Because ACL is fairly conventional, we forgo further discussion of its design.
Reference: [10] <author> E.W. </author> <title> Large. Beat Tracking with a Nonlinear Oscillator. </title> <editor> In G. Widmer, editor, </editor> <booktitle> IJCAI Workshop in Artificial Intelligence and Music, </booktitle> <pages> pages 24-31, </pages> <address> Montreal, Canada, </address> <year> 1995. </year>
Reference-contexts: For example, a musical source with varying tempo poses great difficulty to an animation that is trying to synchronize some event to a regular tempo. A possible solution is to perform real-time predictive beat tracking <ref> [12, 10] </ref>. Acknowledgement: This work is supported through NSERC Operating Grant 0138467. 9
Reference: [11] <author> J. Nakamura, T. Kaku, T. Noma, and S. Yoshida. </author> <title> Automatic Background Music Generation based on Actors' Emotion and Motions. </title> <booktitle> In Proceedings Pacific Graphics '93, </booktitle> <volume> volume 1, </volume> <pages> pages 147-161, </pages> <address> Seoul, Korea, </address> <year> 1993. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [12] <author> P.E.Allen and R.B. Dannenberg. </author> <title> Tracking Musical Beats in Real Time. </title> <booktitle> In Proceedings 1990 International Computer Music Conference, </booktitle> <pages> pages 140-143, </pages> <address> Glasgow, Scotland, </address> <year> 1990. </year>
Reference-contexts: For example, a musical source with varying tempo poses great difficulty to an animation that is trying to synchronize some event to a regular tempo. A possible solution is to perform real-time predictive beat tracking <ref> [12, 10] </ref>. Acknowledgement: This work is supported through NSERC Operating Grant 0138467. 9
Reference: [13] <author> J. Pressing. </author> <title> Nonlinear Maps as Generators of Musical Design. </title> <journal> Computer Music Journal, </journal> <volume> 12(3) </volume> <pages> 35-46, </pages> <year> 1988. </year>
Reference-contexts: Most work in the automation of music and animation has been directed to the opposite problem of this paper creating music from visual input information. Representative examples of this line of research, many of which use fractal equations to generate both graphics and musical information, are in <ref> [3, 4, 13, 5, 1, 6, 2, 11] </ref>. This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation.
Reference: [14] <author> J. Rothstein. MIDI: </author> <title> A Comprehensive Introduction. </title> <publisher> A-R Editions, Inc, </publisher> <address> Madison, WI, </address> <year> 1992. </year>
Reference-contexts: The system permits the run-time evolution of creatures through the use of scripts that are defined within kernel objects. Scripts contain programming language code that control local and global characteristics of objects. With respect to music, the script language recognizes MIDI (Musical Instrument Digital Interface) files <ref> [8, 14] </ref>. Script functions can access MIDI file information. When executed in a temporal fashion, creature characteristics are essentially controlled by the MIDI music composition, in the manner dictated by the script. <p> We will discuss these aspects of the language in more detail below. MIDI (Musical Instrument Device Interface) is a protocol for exhanging information between digital musical instruments and computers <ref> [14] </ref>. MIDI is a serial protocol in which musical events are converted into standardized packets of information. Events can include notes turned on and off on a keyboard, volume and pitch alterations, timing, instrument channels, and specialized events particular to specific manufacturer's hardware.
Reference: [15] <author> S. Todd and W. Latham. </author> <title> Evolutionary Art and Computers. </title> <publisher> Academic Press, </publisher> <year> 1992. </year>
Reference-contexts: This paper presents an environment that automates animation and music. An interactive toolset has been implemented that permits the construction of an interesting set of creature kernels basic objects suitable for subsequent mutation and animation. The graphic objects chosen are inspired by Todd's and Latham's evolutionary art <ref> [15] </ref>, and were chosen for their generality and natural, life-like appearance. The system permits the run-time evolution of creatures through the use of scripts that are defined within kernel objects. Scripts contain programming language code that control local and global characteristics of objects. <p> The musical and animation control functions of the system are described in section 3. Section 4 presents an example production. Future extensions and related work conclude the paper in section 5. 2 Modeling The objects modeled are inspired by the work of Todd and Latham <ref> [15] </ref>. They present a graphics system that supports the user-influenced evolution of graphical "creatures" (eg. figure 7 (ii)). Their system is built upon an object-oriented object construction language that permits hierarchical, recursive object definitions similar in spirit to L-system models [16]. <p> Todd and Latham mention the chaotic nature of this style of graphical modeling, as the smallest change in one parameter can profoundly alter a creature's overall form <ref> [15] </ref>. Likewise, minute changes in the music data can result in wildly different animations. The system is object-oriented in flavour, as the object definitions and scripts are analogous to object instances and demons in object-oriented programming languages. A number of extensions of this work are possible.
Reference: [16] <author> C. van der Mark. Lparser: </author> <title> a tutorial. </title> <journal> 3D Artist, </journal> (17):34-37, 1994. <volume> 11 </volume>
Reference-contexts: They present a graphics system that supports the user-influenced evolution of graphical "creatures" (eg. figure 7 (ii)). Their system is built upon an object-oriented object construction language that permits hierarchical, recursive object definitions similar in spirit to L-system models <ref> [16] </ref>. A key characteristic of Todd's and Latham's work is their ascribing a genetic-like metaphor for models. By tweaking object "genes", a rich variety of models can be derived and evolved.
References-found: 16

