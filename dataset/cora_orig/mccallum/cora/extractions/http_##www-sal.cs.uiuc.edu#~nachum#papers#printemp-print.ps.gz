URL: http://www-sal.cs.uiuc.edu/~nachum/papers/printemp-print.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Title: 33 Examples of Termination rewrite-based decision procedure, using these dozen rules to compute normal forms:
Author: Nachum Dershowitz xnx e (xny) 
Date: 1 1  
Note: Example 1 (Loops). T. Evans 1951 gave the first  This system obviously terminates, since application of any rule to any redex in t decreases the size (number of symbols) jtj of t. To quote Evans, "[T]he  Research supported in part by the U. S. National Science Foundation under Grants CCR-90-07195 and CCR-90 24271.  
Address: Urbana, IL 61801, USA  enx =(ynx)  
Affiliation: Department of Computer Science, University of Illinois,  e xn(  
Pubnum: 1 1  
Abstract: A graded sequence of examples|presented in a uniform framework|spotlights stages in the development of methods for proving termination of rewrite systems. Let T be the set of all terms over some vocabulary. A rewrite system over T is a (finite or infinite) set of rules, each of the form l ! r, where l and r are terms containing variables ranging over T . A rule l ! r applies to a term t in T if a subterm s of t matches the left-hand side l with some substitution of terms in T for variables appearing in l. The rule is applied by replacing the redex s in t with the corresponding right-hand side r of the rule, to which the same substitution of terms for variables has been applied. We write t ! u to indicate that the term t in T rewrites in this way to the term u in T by a single application of some rule. Note that more than one rule can apply to t and rules can apply at more than one subterm s. Rewrite systems have long been used as decision procedures for validity in equational theories, that is, for truth of an equation in all models of the theory. They are also used as a specification and programming language. See [ Dershowitz and Jouannaud, 1990; Klop, 1992; Plaisted, 1993 ] for recent surveys of term-rewriting and some of its applications. A rewrite system is terminating if there are no infinite derivations t 1 ! t 2 ! t 3 . Termination is undecidable. A proof of termination must take into consideration the many different possible rewrite sequences permitted by the nondeterministic choice of rules and subterms. We present a series of examples culled from the literature to illustrate the progression of techniques used to prove termination of vanilla-flavored rewriting. 1 We describe these techniques in a manner designed to highlight similarities and follow a logical sequence that is not perfectly chronological. Not covered here are methods based on transformations of the given system, including those for more intricate forms of rewriting (notably, when permutation of operands of associative-commutative operators is permitted prior to rewriting). A survey of termination methods for rewriting may be found in [ Dershowitz, 1987 ] . 
Abstract-found: 1
Intro-found: 1
Reference: [ Dershowitz and Hoot, to appear ] <author> Nachum Dershowitz and Charles Hoot. </author> <title> Natural termination. </title> <note> Theoretical Computer Science, to appear. </note>
Reference-contexts: For the second component, we take the first argument of sort, second argument of choose and insert, and any constant for the others; for the last component, we take the third argument of choose. For details of this general path ordering, see <ref> [ Dershowitz and Hoot, to appear ] </ref> . ut Example 33 (Battle of Hydra and Hercules).
Reference: [ Dershowitz and Jouannaud, 1990 ] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [ Dershowitz and Manna, 1979 ] <author> Nachum Dershowitz and Zohar Manna. </author> <title> Proving termination with multiset orderings. </title> <journal> Communications of the ACM, </journal> <volume> 22(8) </volume> <pages> 465-476, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: To prove termination of ::x ! x :(x ^ y) ! (:::x) _ (:::y) ; use the multiset fnumber of and's and or's in xj:x in termg. Finite multisets are compared using the well-founded multiset ordering <ref> [ Dershowitz and Manna, 1979 ] </ref> in which replacing an element with any number of smaller elements decreases the multiset. Since applying a rule does not change the total number of and's and or's, the contribution of superterms of the redex is unchanged thereby. ut Example 21 (Factorial). <p> Sequences are compared as in Example 15, with the differentiation operator maximal in the precedence. ut Example 23. Nested multiset structures can also be used to prove termination of the differentiation example <ref> [ Dershowitz and Manna, 1979 ] </ref> : [[Dx]] = f [[x]]g [[x + y]] = [[x]] [ [[y]] [[ln x]] = [[x]] [ f;g [[x fi y]] = [[x]] [ [[y]] [[x=y]] = [[x]] [ [[y]] [[constant]] = f;g [[x y ]] = [[x]] [ [[y]] [[t]] = f;g : This
Reference: [ Dershowitz, 1982 ] <author> Nachum Dershowitz. </author> <title> Orderings for term-rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17(3) </volume> <pages> 279-301, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: For this to in fact be the case, we need to include the proper subterm relation in the ordering, that is, we must have f (x); g (x) x. This is the simplest example of a "path ordering" <ref> [ Plaisted, 1978a; Dershowitz, 1982 ] </ref> . Example 16. Consider, again, (x y) z ! x (y z) and the triple hsize; first multiplicand; second multiplicandi, where the multiplicands are compared recursively in this lexicographic ordering (for a constant term, minimal elements can be used instead). <p> is "value-preserving." It is enough to show that superterms (as opposed to the redex) do not increase (rather than actually decrease), since this implies that the multiset of pairs for all subterms shows a strict decrease, on account of the fact that terms are taken to be larger than subterms <ref> [ Dershowitz, 1982 ] </ref> . ut Example 22. Another approach, based on multisets, for proving termination of differentiation is D. Plaisted's [ 1978a ] simple path ordering. <p> Again, this is combined with the subterm relation. The value-preserving nature of the interpretation guarantees that superterms do not increase. ut Example 26. The disjunctive normal form example served as motivation for the development of the recursive path ordering in <ref> [ Dershowitz, 1982 ] </ref> , in parallel with related ideas in [ Plaisted, 1978b ] : ::x ! x :(x ^ y) ! (:x) _ (:y) (y _ z) ^ x ! (x ^ y) _ (x ^ z) : Intuitively, the precedence should be : &gt; ^ &gt; _, and <p> To prove termination of if (if (x; y; z); u; v) ! if (x; if (y; u; v); if (z; u; v)) ; one can treat the first argument of if as the top symbol in a recursive path ordering <ref> [ Dershowitz, 1982 ] </ref> : hfirst argument; fother argumentsgi. Rather than an ordinary precedence, one compares first arguments recursively. ut Example 29 (Ackermann's Function). S. Kamin and J.-J.
Reference: [ Dershowitz, 1987 ] <author> Nachum Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> 3(1&2):69-115, Febru-ary/April 1987. Corrigendum: <volume> 4, </volume> 3 (December 1987), <pages> 409-410; </pages> reprinted in Rewriting Techniques and Applications, J.-P. Jouannaud, ed., pp. 69|115, Academic Press, 1987. 
Reference: [ Evans, 1951 ] <author> Trevor Evans. </author> <title> On multiplicative systems defined by generators and relations, I. </title> <booktitle> Proceedings of the Cambridge Philosophical Society, </booktitle> <volume> 47 </volume> <pages> 637-649, </pages> <year> 1951. </year>
Reference: [ Gorn, 1973 ] <author> Saul Gorn. </author> <title> On the conclusive validation of symbol manipulation processes (how do you know it has to work?). </title> <journal> J. of the Franklin Institute, </journal> <volume> 296(6) </volume> <pages> 499-518, </pages> <month> December </month> <year> 1973. </year>
Reference: [ Iturriaga, 1967 ] <author> R. Iturriaga. </author> <title> Contributions to mechanical mathematics. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1967. </year>
Reference-contexts: Another student taking that test, R. Iturriaga, went on to produce a dissertation on symbolic computation <ref> [ Iturriaga, 1967 ] </ref> in which a class of systems, including differentiation, were proved terminating.
Reference: [ Kamin and Levy, 1980 ] <author> Sam Kamin and Jean-Jacques Levy. </author> <title> Two generalizations of the recursive path ordering. Unpublished note, </title> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> February </month> <year> 1980. </year>
Reference-contexts: The lexicographic path ordering cannot directly handle the following system: (x y) z ! x (y z) z (x + f (y)) ! g (z; y) (x + a) : But termination can be proved using a semantic path ordering <ref> [ Kamin and Levy, 1980 ] </ref> with any term of the form z (x + f (y)) greater than any other product, any product greater than any other term, and term greater than its subterms, and products treated lexicographically (left-to-right).
Reference: [ Klop, 1992 ] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference: [ Knuth and Bendix, 1970 ] <author> Donald E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <editor> U. K., </editor> <booktitle> 1970. Reprinted in Automation of Reasoning 2, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1983). </year>
Reference: [ Lankford, 1979 ] <author> Dallas S. Lankford. </author> <title> On proving term rewriting systems are Noetherian. </title> <institution> Memo MTP-3, Mathematics Department, Louisiana Tech. University, Ruston, LA, </institution> <month> May </month> <year> 1979. </year> <note> Revised October 1979. </note>
Reference: [ Lipton and Snyder, 1977 ] <author> R. Lipton and L. Snyder. </author> <title> On the halting of tree replacement systems. </title> <booktitle> In Proceedings of the Conference on Theoretical Computer Science, </booktitle> <pages> pages 43-46, </pages> <address> Waterloo, Canada, </address> <month> August </month> <year> 1977. </year>
Reference: [ Manna and Ness, 1970 ] <author> Zohar Manna and Steven Ness. </author> <title> On the termination of Markov algorithms. </title> <booktitle> In Proceedings of the Third Hawaii International Conference on System Science, </booktitle> <pages> pages 789-792, </pages> <address> Honolulu, HI, </address> <month> January </month> <year> 1970. </year>
Reference: [ Plaisted, 1978a ] <author> David A. Plaisted. </author> <title> Well-founded orderings for proving termination of systems of rewrite rules. </title> <type> Report R-78-932, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: For this to in fact be the case, we need to include the proper subterm relation in the ordering, that is, we must have f (x); g (x) x. This is the simplest example of a "path ordering" <ref> [ Plaisted, 1978a; Dershowitz, 1982 ] </ref> . Example 16. Consider, again, (x y) z ! x (y z) and the triple hsize; first multiplicand; second multiplicandi, where the multiplicands are compared recursively in this lexicographic ordering (for a constant term, minimal elements can be used instead).
Reference: [ Plaisted, 1978b ] <author> David A. Plaisted. </author> <title> A recursively defined ordering for proving termination of term rewriting systems. </title> <type> Report R-78-943, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> September </month> <year> 1978. </year>
Reference-contexts: The value-preserving nature of the interpretation guarantees that superterms do not increase. ut Example 26. The disjunctive normal form example served as motivation for the development of the recursive path ordering in [ Dershowitz, 1982 ] , in parallel with related ideas in <ref> [ Plaisted, 1978b ] </ref> : ::x ! x :(x ^ y) ! (:x) _ (:y) (y _ z) ^ x ! (x ^ y) _ (x ^ z) : Intuitively, the precedence should be : &gt; ^ &gt; _, and terms should be greater than subterms.
Reference: [ Plaisted, 1993 ] <author> David A. Plaisted. </author> <title> Term rewriting systems. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 4, chapter 2. </volume> <publisher> Oxford University Press, Oxford, </publisher> <year> 1993. </year> <note> To appear. </note>
Reference: [ Zantema, 1991 ] <author> Hans Zantema. </author> <title> Classifying termination of term rewriting. </title> <type> Technical Report RUU-CS-91-42, </type> <institution> Utrecht University, </institution> <address> The Netherlands, </address> <month> November </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: So, a lexicographic comparison of pairs is in order. ut Example 14. Other times, it pays to map terms to pairs <ref> [ Zantema, 1991 ] </ref> . Looking again at f (f (x)) ! f (g (f (x))) ; we can let [[]] : T ! N fi N as follows: [[f ]]hx; yi = hx + y; xi, [[g]]hx; yi = hy; xi, and [[constants]] = h1; 1i.
References-found: 18

