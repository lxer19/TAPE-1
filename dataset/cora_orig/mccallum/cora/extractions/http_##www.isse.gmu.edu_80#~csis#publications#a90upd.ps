URL: http://www.isse.gmu.edu:80/~csis/publications/a90upd.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Title: Update Semantics for Multilevel Relations  
Author: Sushil Jajodia Ravi Sandhu and Edgar Sibley 
Address: Fairfax, VA 22030  
Affiliation: Department of Information Systems and Systems Engineering George Mason University  
Date: Dec 1990, pages 103-112  
Note: Proc. of 6th Annual Computer Security Applications Conference, Tucson, Arizona,  
Abstract: In this paper we give a formal operational semantics for update operations on multilevel relations, i.e., relations in which individual data elements are classified at different levels. For this purpose, the familiar INSERT, UPDATE and DELETE operations of SQL are suitably generalized to cope with polyinstantiation. We conjecture that these operations are consistent (or sound) in that all relations which can be constructed will satisfy the basic integrity properties required of multilevel relations. We also conjecture that the operations are complete in that every multilevel relation can be constructed by some sequence of these operations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Heckman, M., and Shockley, W.R. </author> <title> "A Multilevel Relational Data Model." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <month> 220-234 </month> <year> (1987). </year>
Reference-contexts: Polyinstantiation does complicate the meaning of multilevel relations relative to relations as ordinarily considered in a single level world. This is unfortunate since much of the appeal of the relational model is due to its intuitive simplicity and economy of concepts. Polyinstantiation is however inevitable and must be confronted <ref> [1, 2] </ref>. The best we can do is to give as simple a semantics for polyinstantiation as feasible. The semantics of polyinstantiation is reasonably straightforward so long as security classifications are applied to entire tuples ("rows") or attributes ("columns") of a relation. <p> The final requirement states that in any tuple the class of the non-AK attributes must dominate C AK . This rules out the possibility of associating non-null attributes with a null primary key. These requirements seem quite reasonable. Further intuitive justification for them is given in <ref> [1, 5] </ref>. At this point it is important to clarify the semantics of null values. There are two major issues: (i) the classification of null values, and (ii) the subsumption of null values by non-null ones.
Reference: [2] <author> Denning D.E. </author> <title> "Lessons Learned from Modeling a Secure Multilevel Relational Database System." In Landwehr, C.E. (Editor) Database Security: Status and Prospects, </title> <publisher> North-Holland, </publisher> <month> 35-43 </month> <year> (1988). </year>
Reference-contexts: Polyinstantiation does complicate the meaning of multilevel relations relative to relations as ordinarily considered in a single level world. This is unfortunate since much of the appeal of the relational model is due to its intuitive simplicity and economy of concepts. Polyinstantiation is however inevitable and must be confronted <ref> [1, 2] </ref>. The best we can do is to give as simple a semantics for polyinstantiation as feasible. The semantics of polyinstantiation is reasonably straightforward so long as security classifications are applied to entire tuples ("rows") or attributes ("columns") of a relation.
Reference: [3] <author> Denning, D.E., Lunt, T.F., Schell, R.R., Shockley, W.R. and Heckman, M. </author> <title> "The SeaView Security Model." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <month> 218-233 </month> <year> (1988). </year>
Reference-contexts: This level of granularity is however cumbersome and artificial for modeling the real world. When classifications are assigned at the level of individual data elements, the semantics of polyinstantiation turns out to be surprisingly subtle <ref> [3, 6, 7, 9, 11] </ref>. As work on this topic has progressed it has become increasingly evident that a formal consideration of update operations is necessary to fully articulate the meaning of polyin-stantiation. <p> To this end, the familiar INSERT, UPDATE and DELETE operations were suitably generalized to deal with polyinstantiation. In terms of future work, we intend to consider the issue of implementing these update semantics in a ker-nelized DBMS. The existing decomposition and recovery algorithms <ref> [3, 6, 8, 9, 10] </ref> do not exhibit the update semantics proposed in this paper. Thus, they need to suitably modified. It also remains to be shown that our update semantics are consistent (or sound) and complete.
Reference: [4] <institution> Department of Defense National Computer Security Center. Department of Defense Trusted Computer Systems Evaluation Criteria. DoD 5200.28-STD, </institution> <year> (1985). </year>
Reference: [5] <author> Gajnak, G.E. </author> <title> "Some Results from the Entity-Relationship Multilevel Secure DBMS Project." </title> <booktitle> Aerospace Computer Security Applications Conference, </booktitle> <month> 66-71 </month> <year> (1988). </year>
Reference-contexts: The final requirement states that in any tuple the class of the non-AK attributes must dominate C AK . This rules out the possibility of associating non-null attributes with a null primary key. These requirements seem quite reasonable. Further intuitive justification for them is given in <ref> [1, 5] </ref>. At this point it is important to clarify the semantics of null values. There are two major issues: (i) the classification of null values, and (ii) the subsumption of null values by non-null ones.
Reference: [6] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantiation Integrity in Multilevel Relations." </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, Califor-nia, </address> <month> 104-115 </month> <year> (1990). </year>
Reference-contexts: This level of granularity is however cumbersome and artificial for modeling the real world. When classifications are assigned at the level of individual data elements, the semantics of polyinstantiation turns out to be surprisingly subtle <ref> [3, 6, 7, 9, 11] </ref>. As work on this topic has progressed it has become increasingly evident that a formal consideration of update operations is necessary to fully articulate the meaning of polyin-stantiation. <p> To this end, the familiar INSERT, UPDATE and DELETE operations were suitably generalized to deal with polyinstantiation. In terms of future work, we intend to consider the issue of implementing these update semantics in a ker-nelized DBMS. The existing decomposition and recovery algorithms <ref> [3, 6, 8, 9, 10] </ref> do not exhibit the update semantics proposed in this paper. Thus, they need to suitably modified. It also remains to be shown that our update semantics are consistent (or sound) and complete.
Reference: [7] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "A Formal Framework for Single Level Decomposition of Multilevel Relations." </title> <booktitle> IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, NH, </address> <month> 152-158 </month> <year> (1990). </year>
Reference-contexts: This level of granularity is however cumbersome and artificial for modeling the real world. When classifications are assigned at the level of individual data elements, the semantics of polyinstantiation turns out to be surprisingly subtle <ref> [3, 6, 7, 9, 11] </ref>. As work on this topic has progressed it has become increasingly evident that a formal consideration of update operations is necessary to fully articulate the meaning of polyin-stantiation.
Reference: [8] <author> Jajodia, S. and Sandhu, </author> <title> R.S. "Polyinstantiation Integrity in Multilevel Relations Revisited." </title> <booktitle> IFIP WG11.3 Workshop on Database Security, </booktitle> <address> Halifax, U.K. </address> <year> (1990). </year>
Reference-contexts: To this end, the familiar INSERT, UPDATE and DELETE operations were suitably generalized to deal with polyinstantiation. In terms of future work, we intend to consider the issue of implementing these update semantics in a ker-nelized DBMS. The existing decomposition and recovery algorithms <ref> [3, 6, 8, 9, 10] </ref> do not exhibit the update semantics proposed in this paper. Thus, they need to suitably modified. It also remains to be shown that our update semantics are consistent (or sound) and complete.
Reference: [9] <author> Lunt, T.F., Denning, D.E., Schell, R.R., Heckman, M. and Shockley, W.R. </author> <title> "The SeaView Security Model." </title> <journal> IEEE Transactions on Software Engineering 16(6) </journal> <month> 593-607 </month> <year> (1990). </year>
Reference-contexts: This level of granularity is however cumbersome and artificial for modeling the real world. When classifications are assigned at the level of individual data elements, the semantics of polyinstantiation turns out to be surprisingly subtle <ref> [3, 6, 7, 9, 11] </ref>. As work on this topic has progressed it has become increasingly evident that a formal consideration of update operations is necessary to fully articulate the meaning of polyin-stantiation. <p> To this end, the familiar INSERT, UPDATE and DELETE operations were suitably generalized to deal with polyinstantiation. In terms of future work, we intend to consider the issue of implementing these update semantics in a ker-nelized DBMS. The existing decomposition and recovery algorithms <ref> [3, 6, 8, 9, 10] </ref> do not exhibit the update semantics proposed in this paper. Thus, they need to suitably modified. It also remains to be shown that our update semantics are consistent (or sound) and complete.
Reference: [10] <author> Lunt, T. and Hsieh, D. </author> <title> "Update Semantics for a Multilevel Relational Database." </title> <booktitle> IFIP WG11.3 Workshop on Database Security, </booktitle> <address> Halifax, U.K. </address> <year> (1990). </year>
Reference-contexts: To this end, the familiar INSERT, UPDATE and DELETE operations were suitably generalized to deal with polyinstantiation. In terms of future work, we intend to consider the issue of implementing these update semantics in a ker-nelized DBMS. The existing decomposition and recovery algorithms <ref> [3, 6, 8, 9, 10] </ref> do not exhibit the update semantics proposed in this paper. Thus, they need to suitably modified. It also remains to be shown that our update semantics are consistent (or sound) and complete.
Reference: [11] <author> Sandhu, R.S., Jajodia, S. and Lunt, T. </author> <title> "A New Polyinstantiation Integrity Constraint for Multilevel Relations." </title> <booktitle> IEEE Workshop on Computer Security Foundations, </booktitle> <address> Franconia, NH, </address> <month> 159-165 </month> <year> (1990). </year>
Reference-contexts: This level of granularity is however cumbersome and artificial for modeling the real world. When classifications are assigned at the level of individual data elements, the semantics of polyinstantiation turns out to be surprisingly subtle <ref> [3, 6, 7, 9, 11] </ref>. As work on this topic has progressed it has become increasingly evident that a formal consideration of update operations is necessary to fully articulate the meaning of polyin-stantiation.
References-found: 11

