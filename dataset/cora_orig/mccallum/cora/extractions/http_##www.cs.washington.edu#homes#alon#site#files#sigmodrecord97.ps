URL: http://www.cs.washington.edu/homes/alon/site/files/sigmodrecord97.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/CategoryPage_CN316275325.html
Root-URL: http://www.cs.washington.edu
Title: A Query Language for a Web-Site Management System  
Author: Mary Fernandez Daniela Florescu Alon Levy Dan Suciu 
Abstract-found: 0
Intro-found: 1
Reference: [Abi97] <author> Serge Abiteboul. </author> <title> Querying semi-structured data. </title> <booktitle> In ICDT, </booktitle> <year> 1997. </year>
Reference-contexts: We believe that StruQL is a language of independent interest, and is useful for other applications involving the management of semistructured data, as well as a view definition language for such data. We discuss the relationship of StruQL to other languages proposed in the literature in Section 6: see <ref> [Abi97, Bun97] </ref>. 2 Strudel Architecture In every level of the Strudel system, data is viewed uniformly as a graph. At the bottom-most level, data is stored in Strudel's data graph repository or in external sources.
Reference: [AGM + 97] <author> Serge Abiteboul, Roy Goldman, Jason McHugh, Vasilis Vassalos, and Yue Zhuge. </author> <title> Views for semistructured data. </title> <booktitle> In Proceedings of the Workshop on Management of Semi-structured Data, </booktitle> <year> 1997. </year>
Reference-contexts: For example, the LOREL language <ref> [QRS + 95, AGM + 97] </ref> has been developed in the Tsimmis project for the application of data integration.
Reference: [BDHS96] <author> Peter Buneman, Susan Davidson, Gerd Hillebrand, and Dan Suciu. </author> <title> A query language and optimization techniques for unstructured data. </title> <booktitle> In SIGMOD, </booktitle> <year> 1996. </year>
Reference-contexts: The ability to compute the transitive closure of an input graph does not imply the ability to compute the transitive closure of an arbitrary binary or 2n-ary relation. This is proven formally for UnQL <ref> [BDHS96] </ref>. Surprisingly, StruQL can express transitive closure of an arbitrary relation as the composition of two queries 3 . For example, consider the tree-encoding of a binary relation R (A; B) with attributes A and B, as shown below. <p> We can compute all nodes reachable from "x" with two StruQL queries. The first constructs the graph corresponding to the relation R (A; B), and the second uses the regular expression fl to find all nodes accessible from the root. 3 It follows from the result in <ref> [BDHS96] </ref> that a single where link query cannot express transitive closure. input ( where Root (r); r ! "tup" ! s1; r ! "tup" ! s2; s1 ! "A" ! x1; s1 ! "B" ! y1 y1 = x2 create N (y1); N (x2) link N (y1) ! "bogus" ! N <p> In comparison to StruQL, LOREL has the equivalent expressive power to the where clause of StruQL, but unlike LOREL, StruQL can construct an arbitrary new output graph (with the create and link clauses). This feature is strictly necessary in the application of creating web sites. UnQL <ref> [BDHS96] </ref>, another query language for semistructured data, can construct arbitrary new graphs. However, as explained above, StruQL is more expressive than UnQL: the latter cannot compute transitive closure of an arbitrary 2n-ary relation. In theory, StruQL has precisely the same expressive power as stratified linear datalog.
Reference: [Bun97] <author> Peter Buneman. </author> <title> Tutorial: Semistructured data. </title> <booktitle> In PODS, </booktitle> <year> 1997. </year>
Reference-contexts: We believe that StruQL is a language of independent interest, and is useful for other applications involving the management of semistructured data, as well as a view definition language for such data. We discuss the relationship of StruQL to other languages proposed in the literature in Section 6: see <ref> [Abi97, Bun97] </ref>. 2 Strudel Architecture In every level of the Strudel system, data is viewed uniformly as a graph. At the bottom-most level, data is stored in Strudel's data graph repository or in external sources.
Reference: [CEH + 94] <author> M.P. Consens, F.Ch. Eigler, M.Z. Hasan, A.O. Mendelzon, E.G. Noik, A.G. Ryman, and D. </author> <title> Vista. Architecture and applications of the hy+ visualization system. </title> <journal> IBM Systems Journal, </journal> <volume> 33:3:458-476, </volume> <year> 1994. </year>
Reference-contexts: However the translation of StruQL queries into stratified linear datalog results in cumbersome and hard to understand queries. In particular, StruQL enables a concise representation of regular path expressions and clearly separates the querying and the creation of a graph creation. GraphLog <ref> [CEH + 94] </ref> is another query language designed for general purpose database applications, succeeding G and G+ [CMW87, CMW88, Woo88]. GraphLog combines datalog notation with a visual query language and has the same expressive power as stratified linear datalog.
Reference: [CMW87] <author> I. Cruz, A.O. Mendelzon, and P.T Wood. </author> <title> A graphical query language supporting recursion. </title> <booktitle> In Proceedings of ACM SIGMOD Conf., </booktitle> <address> San Francisco, California, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: In particular, StruQL enables a concise representation of regular path expressions and clearly separates the querying and the creation of a graph creation. GraphLog [CEH + 94] is another query language designed for general purpose database applications, succeeding G and G+ <ref> [CMW87, CMW88, Woo88] </ref>. GraphLog combines datalog notation with a visual query language and has the same expressive power as stratified linear datalog.
Reference: [CMW88] <author> I. Cruz, A.O. Mendelzon, and P.T Wood. G+: </author> <title> recursive queries without recursion. </title> <booktitle> In Proc. Second Int'l Conf. on Expert Database System, </booktitle> <address> Tysons Corner, Virginia, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: In particular, StruQL enables a concise representation of regular path expressions and clearly separates the querying and the creation of a graph creation. GraphLog [CEH + 94] is another query language designed for general purpose database applications, succeeding G and G+ <ref> [CMW87, CMW88, Woo88] </ref>. GraphLog combines datalog notation with a visual query language and has the same expressive power as stratified linear datalog.
Reference: [Imm87] <author> Neil Immerman. </author> <title> Languages that capture complexity classes. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16 </volume> <pages> 760-778, </pages> <year> 1987. </year>
Reference-contexts: ! N (x2) collect N ewRoot (N ("x"))) where N ewRoot (x); x ! fl ! N (y) collect Result (y) A B "y" "z" "A" "B" "A" "B" "A" "B" We can prove that StruQL has precisely the same expressive power as first order logic extended with transitive closure <ref> [Imm87] </ref>, FO+T C.
Reference: [LRO96] <author> Alon Y. Levy, Anand Rajaraman, and Joann J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Bombay, India., </address> <year> 1996. </year>
Reference-contexts: The data graph describes the logical structure of all the information available at that site, and may be obtained by integrating information from the various external sources. This integration is done in a similar way to recently proposed data integration prototypes such as Tsimmis [PGMW95] and the Information Manifold <ref> [LRO96] </ref>. Given the data graph, a site builder can define one or more site graphs; each site graph represents the logical structure of the information displayed at that site (i.e., a node for every web page and attributes describing the information in the page and links between pages).
Reference: [PGMW95] <author> Y. Papakonstantinou, H. Garcia-Molina, and J. Widom. </author> <title> Object exchange across heterogeneous information sources. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: At the bottom-most level, data is stored in Strudel's data graph repository or in external sources. External sources may have a variety of formats, but each is translated into the graph data model by a wrapper (see Figure 1). Strudel's graph model is similar to that of OEM <ref> [PGMW95] </ref>. A data graph contains objects connected by directed edges fl AT&T Labs | Research, email: fmff,dana,levy,suciug@research.att.com labeled with string-valued attribute names. Objects are either nodes, carrying a unique object identifier (oid), or are atomic values, such as integers, strings, files, etc. <p> The data graph describes the logical structure of all the information available at that site, and may be obtained by integrating information from the various external sources. This integration is done in a similar way to recently proposed data integration prototypes such as Tsimmis <ref> [PGMW95] </ref> and the Information Manifold [LRO96]. <p> We use the same query and transformation language, StruQL (Site TRansformation Und Query Language), at all three levels. We describe StruQL's core fragment next. 3 Data Model and Query Language Data Model. Our data model is a minor variation on the graph model OEM <ref> [PGMW95] </ref>, designed for semistructured data. First we fix a universe of values, and one of labels. All integers, reals, strings, true and f alse are values, while labels are typically strings.
Reference: [QRS + 95] <author> D. Quass, A. Rajaraman, Y. Sagiv, J. Ullman, and J. Widom. </author> <title> Querying semistructure heterogeneous information. </title> <booktitle> In International Conference on Deductive and Object Oriented Databases, </booktitle> <year> 1995. </year>
Reference-contexts: For example, the LOREL language <ref> [QRS + 95, AGM + 97] </ref> has been developed in the Tsimmis project for the application of data integration.
Reference: [Woo88] <author> Peter T. Wood. </author> <title> Queries on Graphs. </title> <type> PhD thesis, </type> <institution> University of Toronto, Toronto, Canada, M5S 1A1, </institution> <month> December </month> <year> 1988. </year> <note> Available as University of Toronto Technical Report CSRI-223. </note>
Reference-contexts: In particular, StruQL enables a concise representation of regular path expressions and clearly separates the querying and the creation of a graph creation. GraphLog [CEH + 94] is another query language designed for general purpose database applications, succeeding G and G+ <ref> [CMW87, CMW88, Woo88] </ref>. GraphLog combines datalog notation with a visual query language and has the same expressive power as stratified linear datalog.
References-found: 12

