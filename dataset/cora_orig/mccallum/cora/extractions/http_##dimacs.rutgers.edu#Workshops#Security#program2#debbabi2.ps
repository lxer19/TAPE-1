URL: http://dimacs.rutgers.edu/Workshops/Security/program2/debbabi2.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: fdebabi,mejri,tawbi,yahmadig@ift.ulaval.ca  
Title: A New Algorithm for the Automatic Verification of Authentication Protocols: From Specifications to Flaws and
Author: M. Debbabi M. Mejri N. Tawbi I. Yahmadi 
Keyword: Algorithm, Automatic Formal Verification, Cryptographic Protocols, Authentication, Proof System, Flaws, Attack Scenario.  
Address: Quebec, G1K 7P4, Canada.  
Affiliation: Computer Science Department, Laval University,  
Abstract: We present a new formal automatic approach to the verification of authentication protocols. Our method could be applied without any prior specification of properties or invariant. It only needs the protocol specification from which it generates, if any, the set of possible flaws as well as the corresponding attack scenarios. This approach consists of three steps. First, the extraction of roles from the protocol specification. Second, the generation of a proof system that models the intruder abilities to perform communications and computations from the protocol specification. In addition to the classical known intruder computational abilities such as encryption and decryption, we also consider the computations that result from the possible instrumentations of the protocol. Third, the verification is performed according to the extracted roles as well as to the deductive system. This verification consists in checking whether the intruder can answer all the challenges uttered by a particular role. If it is the case, an attack scenario is automatically constructed. To exemplify the usefulness and efficiency of our approach, we illustrate it on Woo and Lam authentication protocol. Abadi and Needham have shown that the protocol is insecure and they proposed a new corrected version. In this paper, we present new unknown flaws in the Woo and Lam protocol as well as in its corrected version. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and Marc. R. Tuttle. </author> <title> A Semantics for a Logic of Authentication. </title> <booktitle> In Proceedings of the 16 10th Annual ACM Symposium On Principles of Distributed Computing, </booktitle> <pages> pages 201-216, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols [11, 12]. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced <ref> [1, 20, 15, 29, 19] </ref>. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42].
Reference: [2] <author> Martin Abadi and Andrew D. Gordon. </author> <title> A Calculus for Cryptographic Protocols: The Spi Calculus. </title> <type> Technical report, </type> <institution> DEC/SRC, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in [40]. Recently, Abadi and Gordon <ref> [2, 3] </ref> advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [3] <author> Martin Abadi and Andrew D. Gordon. </author> <title> A Calculus for Cryptographic Protocols: The Spi Calculus. </title> <booktitle> In the Proceedings of the Fourth ACM Conference on Computer and Communications Security. </booktitle> <publisher> ACM Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in [40]. Recently, Abadi and Gordon <ref> [2, 3] </ref> advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [4] <author> Martin Abadi and Roger Needham. </author> <title> Prudent Engineering Practice for Cryptographic Protocols. </title> <type> Technical report, </type> <institution> SRC DIGITAL, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Nevertheless, the protocol is known to be flawed. In particular, Abadi and Need-ham presented an attack to the protocol in <ref> [4] </ref>. They noticed that an attack is possible because there is no connection between B's request and S's reply. The authors discussed again the protocol in their paper and finally suggested the new corrected version given in Table 2.
Reference: [5] <author> P. Bieber. </author> <title> A Logic of Communication in a Hostile Environment. </title> <booktitle> In Proceedings of the Computer Security Foundations Workshop III, </booktitle> <pages> pages 14-22. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced [1, 20, 15, 29, 19]. In 1990, Bieber <ref> [5] </ref> developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust [18, 35, 37, 45].
Reference: [6] <author> Pierre Bieber and Nora Boulahia Cuppens. </author> <title> Formal Development of Authentication Protocols. </title> <booktitle> In Proceedings of the BCS-FACS 6th Refinemment Workshop on software Engineering and its Applications, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM <ref> [7, 46, 6] </ref>, HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [7] <author> Pierre Bieber, Nora Boulahia Cuppens, Thomas Lehman, and Erich van Wickeren. </author> <title> Abstract Machines for Communication Security. </title> <booktitle> In the Proceedings of the IEEE Computer Security Foundation Workshop VI, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM <ref> [7, 46, 6] </ref>, HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [8] <author> Dominique Bolignano. </author> <title> An Approach to the Formal Verification of Cryptographic Protocols. </title> <booktitle> In the Proceedings of the Third ACM Conference on Computer and Communications Security, </booktitle> <address> CCS'96, New Delhi, India, </address> <pages> pages 106-118. </pages> <publisher> ACM Press, </publisher> <year> 1996. </year>
Reference-contexts: Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq <ref> [8] </ref>. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols. In addition, these methods need much of expert assistance during the verification process.
Reference: [9] <author> Colin Boyd. </author> <title> Security Archituctures Using Formal Methods. </title> <journal> Journal on Selected Areas in Communications, </journal> <volume> 11(5) </volume> <pages> 694-701, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z <ref> [9, 41] </ref> and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols. In addition, these methods need much of expert assistance during the verification process.
Reference: [10] <author> Colin Boyd. </author> <title> A Framework for Authentication. </title> <booktitle> In Proceedings of the European Symposuim on Research in Computer Security, ESORICS 92, volume 648 of Lecture Notes in Computer Science, </booktitle> <pages> pages 273-292. </pages> <publisher> Springer Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS <ref> [48, 49, 47, 10] </ref>, B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8].
Reference: [11] <author> M. Burrows, M. Abadi, and R. Needham. </author> <title> A Logic of Authentication. </title> <journal> In Proceedings of the Royal Society of London, </journal> <volume> volume 426, </volume> <pages> pages 233-271, </pages> <year> 1989. </year>
Reference-contexts: The logic is used to specify the protocol (idealization) as well as the security properties. In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols <ref> [11, 12] </ref>. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced [1, 20, 15, 29, 19].
Reference: [12] <author> Michael Burrows, Martin Abadi, and Roger M. Needham. </author> <title> Rejoinder to Nessett. </title> <journal> ACM Operating Systems Review, </journal> <volume> 24(2) </volume> <pages> 39-40, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The logic is used to specify the protocol (idealization) as well as the security properties. In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols <ref> [11, 12] </ref>. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced [1, 20, 15, 29, 19].
Reference: [13] <author> U. Carlsen. </author> <title> Formal Specification and Analysis of Cryptographic Protocols. </title> <type> PhD thesis, </type> <institution> These d'In-formatique soutenue a l'Universite PARIS XI, </institution> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics. <p> BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced [1, 20, 15, 29, 19]. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in <ref> [13] </ref> and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust [18, 35, 37, 45]. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties.
Reference: [14] <author> John Clark and Jeremy Jacob. </author> <title> A Survey of Authentication Protocol Literature. </title> <note> Unpublished article available at http://dcpu1.cs.york.ac.uk/ ~ jeremy. </note>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [15] <author> K. Gaarder and E. Snekkenes. </author> <title> Applying a formal analysis technique to the CCITT X.509 Strong Two-Way Authentication Protocol. </title> <journal> Journal of cryptology, </journal> <volume> 3(2), </volume> <pages> pages 81-98, </pages> <year> 1991. </year>
Reference-contexts: In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols [11, 12]. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced <ref> [1, 20, 15, 29, 19] </ref>. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42].
Reference: [16] <author> Paul Gardiner, Dave Jackson, Jason Hulance, and Bill Roscoe. </author> <title> Security Modelling in CSP and FDR: </title> <type> Deliverable Bundle 2. Technical report, </type> <institution> Formal Systems (Europe) Ltd, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in <ref> [38, 16, 17] </ref> and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [17] <author> Paul Gardiner, Dave Jackson, and Bill Roscoe. </author> <title> Security Modelling in CSP and FDR: </title> <type> Deliverable Bundle 3. Technical report, </type> <institution> Formal Systems (Eu-rope) Ltd, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in <ref> [38, 16, 17] </ref> and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [18] <author> Janice I. Glasgow, Glenn H. MacEwen, and Prakash Panangaden. </author> <title> A Logic for Reasoning About Security. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(3) </volume> <pages> 226-264, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust <ref> [18, 35, 37, 45] </ref>. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties. Nevertheless, they are not very suitable to specify the protocols themselves. In fact, the protocols are often translated into a set of logical formulas.
Reference: [19] <author> V.D. Gligor and R. Kailar. </author> <title> On Belief Evolution in Authentication Protcols. </title> <booktitle> In Proceedings of the IEEE Computer Security Foundations Workshop IV, Franconia, </booktitle> <pages> pages 103-116, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols [11, 12]. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced <ref> [1, 20, 15, 29, 19] </ref>. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42].
Reference: [20] <author> Li Gong, Roger Needham, and Raphael Yahalom. </author> <title> Reasoning About Belief in Cryptographic Protocols. </title> <editor> In Deborah Cooper and Teresa Lunt, editors, </editor> <booktitle> Proceedings 1990 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 234-248. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1990. </year>
Reference-contexts: In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols [11, 12]. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced <ref> [1, 20, 15, 29, 19] </ref>. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42].
Reference: [21] <author> C. A. R. Hoare. </author> <title> Communating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: Actually, they rely on manual or interactive theorem proving techniques. Lately, the use of process algebra for cryptographic protocol specification and verification has been explored. In 1995, Gavin Lowe [25, 28, 27, 26] was the first to use CSP <ref> [21] </ref> and model-checking techniques for cryptographic protocol analysis. The protocol is specified as a set of communicating sequential processes that are running in parallel and interacting with their surroundings.
Reference: [22] <author> R. A. Kemmerer. </author> <title> Using Formal Verification Techniques to Analyse Encryption Protocols. </title> <booktitle> In Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 134-139. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year> <month> 17 </month>
Reference-contexts: Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL [42], Ina Jo <ref> [22, 23] </ref>, Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [23] <author> R. A. Kemmerer. </author> <title> Analysing Encryption Proto--cols Using Formal Verification Techniques. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7(4) </volume> <pages> 448-457, </pages> <year> 1989. </year>
Reference-contexts: Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL [42], Ina Jo <ref> [22, 23] </ref>, Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [24] <author> Armin Liebl. </author> <title> Authentication in Distributed Systems: A Bibliography. </title> <journal> Operating Systems Review, </journal> <volume> 27(4) </volume> <pages> 122-136, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [25] <author> Gavin Lowe. </author> <title> An Attack on the Needham-Schroeder Public Key Authentication Protocol. </title> <journal> Information Processing Letters, </journal> <volume> 56(3) </volume> <pages> 131-136, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: In addition, these methods need much of expert assistance during the verification process. Actually, they rely on manual or interactive theorem proving techniques. Lately, the use of process algebra for cryptographic protocol specification and verification has been explored. In 1995, Gavin Lowe <ref> [25, 28, 27, 26] </ref> was the first to use CSP [21] and model-checking techniques for cryptographic protocol analysis. The protocol is specified as a set of communicating sequential processes that are running in parallel and interacting with their surroundings.
Reference: [26] <author> Gavin Lowe. </author> <title> Breaking and Fixing the Needham Schroeder Public-Key Protocol using FDR. </title> <booktitle> In Proceedings of TACAS, </booktitle> <volume> volume 1055, </volume> <pages> pages 147-166. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In addition, these methods need much of expert assistance during the verification process. Actually, they rely on manual or interactive theorem proving techniques. Lately, the use of process algebra for cryptographic protocol specification and verification has been explored. In 1995, Gavin Lowe <ref> [25, 28, 27, 26] </ref> was the first to use CSP [21] and model-checking techniques for cryptographic protocol analysis. The protocol is specified as a set of communicating sequential processes that are running in parallel and interacting with their surroundings.
Reference: [27] <author> Gavin Lowe. </author> <title> Some new attacks upon security protocols. </title> <booktitle> In Proceedings of the Computer Security Foundations Workshop VIII. IEEE Computer Society Pres, </booktitle> <year> 1996. </year>
Reference-contexts: In addition, these methods need much of expert assistance during the verification process. Actually, they rely on manual or interactive theorem proving techniques. Lately, the use of process algebra for cryptographic protocol specification and verification has been explored. In 1995, Gavin Lowe <ref> [25, 28, 27, 26] </ref> was the first to use CSP [21] and model-checking techniques for cryptographic protocol analysis. The protocol is specified as a set of communicating sequential processes that are running in parallel and interacting with their surroundings.
Reference: [28] <author> Gavin Lowe. SPLICE-AS: </author> <title> A Case Study in Using CSP to Detect Errors in Security Protocols. </title> <type> Technical report, </type> <institution> Programming Research Group, Oxford, </institution> <year> 1996. </year>
Reference-contexts: In addition, these methods need much of expert assistance during the verification process. Actually, they rely on manual or interactive theorem proving techniques. Lately, the use of process algebra for cryptographic protocol specification and verification has been explored. In 1995, Gavin Lowe <ref> [25, 28, 27, 26] </ref> was the first to use CSP [21] and model-checking techniques for cryptographic protocol analysis. The protocol is specified as a set of communicating sequential processes that are running in parallel and interacting with their surroundings.
Reference: [29] <author> Wenbo Mao and Colin Boyd. </author> <title> Towards the Formal Analysis of Security Protocols. </title> <booktitle> In Proceedings of the Computer Security Foundations Workshop VI, </booktitle> <pages> pages 147-158. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: In 1989, Burrows, Abadi and Needham devised BAN, a modal logic of belief for the specification and verification of cryptographic protocols [11, 12]. BAN is the most known and famous logic dedicated to cryptographic protocols. Since then, plenty of derived logics have been advanced <ref> [1, 20, 15, 29, 19] </ref>. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42].
Reference: [30] <author> Catherine Meadows. </author> <title> The NRL Protocol Anal-yser: An Overview. </title> <journal> Journal of Logic Programming, </journal> <year> 1994. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [31] <author> Catherine Meadows. </author> <title> Formal Verification of Cryptographic Protocols: A Survey. </title> <booktitle> In Proceedings of Asiacrypt 96, </booktitle> <year> 1996. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [32] <author> R. Milner. </author> <title> The Polyadic -Calculus: A Tutorial. </title> <type> Technical report, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, </institution> <year> 1991. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus <ref> [32, 33, 34] </ref>, a mobile process algebra. It has been devised for the description and analysis of security protocols. The process algebra-based methods have been successfully used in the detection of several flaws in well known cryptographic protocols. The approach seems to be very promising and useful.
Reference: [33] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes. </title> <type> Technical report, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Ed-inburgh, </institution> <year> 1989. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus <ref> [32, 33, 34] </ref>, a mobile process algebra. It has been devised for the description and analysis of security protocols. The process algebra-based methods have been successfully used in the detection of several flaws in well known cryptographic protocols. The approach seems to be very promising and useful.
Reference: [34] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes (Parts I and II). </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus <ref> [32, 33, 34] </ref>, a mobile process algebra. It has been devised for the description and analysis of security protocols. The process algebra-based methods have been successfully used in the detection of several flaws in well known cryptographic protocols. The approach seems to be very promising and useful.
Reference: [35] <author> Louise E. Moser. </author> <title> A Logic of Knowledge and Belief about Computer Security. </title> <editor> In J. Thomas Haigh, editor, </editor> <booktitle> Proceedings of the Computer Security Foundations Workshop III, </booktitle> <pages> pages 57-63. </pages> <publisher> IEEE, Computer Society Press of the IEEE, </publisher> <year> 1989. </year>
Reference-contexts: In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust <ref> [18, 35, 37, 45] </ref>. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties. Nevertheless, they are not very suitable to specify the protocols themselves. In fact, the protocols are often translated into a set of logical formulas.
Reference: [36] <author> C. Meadows R. Kemmerer and Jonathan Millen. </author> <title> Three Systems for Cryptographic Protocol Analysis. </title> <journal> Journal of Cryptology, </journal> <volume> 7(2) </volume> <pages> 79-130, </pages> <year> 1994. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [37] <author> P. V. Rangan. </author> <title> An Axomiatic Basis of Trust in Distributed Systems. </title> <booktitle> In Proceedings of the 1988 Symposium on Security and Privacy, </booktitle> <pages> pages 204-211. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1988. </year>
Reference-contexts: In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust <ref> [18, 35, 37, 45] </ref>. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties. Nevertheless, they are not very suitable to specify the protocols themselves. In fact, the protocols are often translated into a set of logical formulas.
Reference: [38] <author> Bill Roscoe and Paul Gardiner. </author> <title> Security Mod-elling in CSP and FDR: </title> <type> Final Report. Technical report, </type> <institution> Formal Systems Europe, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in <ref> [38, 16, 17] </ref> and Steve Schneider in [40]. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [39] <author> A.D. Rubin and P. Honeyman. </author> <title> Formal Methods for the Analysis of Authentication Protocols. </title> <type> Technical Report Technical report 93-7, Technical Report, </type> <institution> Center for Information Technology Integration, 1993. University of Michigan. </institution> <note> Internal Draft. </note>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [40] <author> Steve Schneider. </author> <title> Security Properties and CSP. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 174-187. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: A similar approach was developed by Bill Roscoe, Paul Gardiner, Dave Jackson and Janson Hu-lance in [38, 16, 17] and Steve Schneider in <ref> [40] </ref>. Recently, Abadi and Gordon [2, 3] advanced Spi, a calculus for cryptographic protocols. Spi is built on top of the -calculus [32, 33, 34], a mobile process algebra. It has been devised for the description and analysis of security protocols.
Reference: [41] <author> Einar Snekkenes. </author> <title> Authentiction in Open Systems. </title> <booktitle> In 10th IFIP WG 6.1 Symposium on Protocol Specification, Testing and Verification, </booktitle> <pages> pages 313-324, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z <ref> [9, 41] </ref> and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols. In addition, these methods need much of expert assistance during the verification process.
Reference: [42] <author> Einar Snekkenes. </author> <title> Formal Specification and Analysis of Cryptographic Protocols. </title> <type> PhD thesis, </type> <institution> Faculty of Mathematics and Natural Sciences, University of Oslo, Norwegian Defence Research Establishment, </institution> <address> P.O. Box 25, N-2007, Kjeller, Nor-way, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Since then, plenty of derived logics have been advanced [1, 20, 15, 29, 19]. In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in <ref> [42] </ref>. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust [18, 35, 37, 45]. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties. <p> Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM [7, 46, 6], HOL <ref> [42] </ref>, Ina Jo [22, 23], Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [43] <author> Paul Syverson. </author> <title> The Use of Logic in the Analysis of Cryptographic Protocols. </title> <editor> In Teresa F. Lunt and John McLean, editors, </editor> <booktitle> Proceedings of the 1991 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 156-170. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [44] <author> Paul Syverson. </author> <title> Knowledge, Belief, and Semantics in the Analysis of Cryptographic Protocols. </title> <journal> Journal of Computer Security, </journal> <volume> 1(3) </volume> <pages> 317-334, 92. </pages>
Reference-contexts: Several protocols have been shown flawed in computer security literature. Consequently, a surge of interest has been expressed in the development of formal methods and tools for the specification, design and analysis of cryptographic protocols. A complete bibliography and a comparative study of these methods can be found in <ref> [13, 31, 30, 36, 39, 24, 43, 44, 14] </ref>. These methods can be classified as follows: logical methods, general purpose formal methods and process algebra methods. Typically, logical methods rest on the use of modal (epistemic, temporal and/or doxatic) logics.
Reference: [45] <author> Paul Syverson and Paul C. van Oorshot. </author> <title> On Unifying some Cryptographic Protocol Logics. </title> <booktitle> In 18 Proceedings of the IEEE 1994 Computer Society Symposium on Security and Privacy, </booktitle> <pages> pages 14-28. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: In 1990, Bieber [5] developed 1 CKT5, a modal logic of knowledge which has been re-vised and extended by Carlsen in [13] and Snekkenes in [42]. Concurrently, many other logics attempted to combine several aspects of modal logic such as belief, knowledge and trust <ref> [18, 35, 37, 45] </ref>. These methods have been successfully used to detect many flaws in cryptographic protocols and they are very expressive while specifying security properties. Nevertheless, they are not very suitable to specify the protocols themselves. In fact, the protocols are often translated into a set of logical formulas.
Reference: [46] <institution> The commission of the European Communities CEC DG-XIII. </institution> <type> Security Investigation Final Report. Technical Report S2011/7000/D010 7000 1000, </type> <institution> CEC, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS [48, 49, 47, 10], B, VDM <ref> [7, 46, 6] </ref>, HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8]. Although these formal methods are now firmly established and known to be of great use in specification and verification, it remains that these methods are not dedicated to cryptographic protocols.
Reference: [47] <author> Vijay Varadharajan. </author> <title> Formal specification of a secure distributed system. </title> <booktitle> In Proceedings of the 12th National Computer Security Conference, </booktitle> <pages> pages 146-171, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS <ref> [48, 49, 47, 10] </ref>, B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8].
Reference: [48] <author> Vijay Varadharajan. </author> <title> Verification of network security protocols. </title> <journal> Computers and Security, </journal> <volume> 8, </volume> <month> De-cember </month> <year> 1989. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS <ref> [48, 49, 47, 10] </ref>, B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8].
Reference: [49] <author> Vijay Varadharajan. </author> <title> Use of Formal Technique in the Specification of Authentication protocols. </title> <journal> Computer Standards and Interfaces, </journal> <volume> 9 </volume> <pages> 203-215, </pages> <year> 1990. </year>
Reference-contexts: In addition, the verification of the protocol is always manual and semi-formal. Another trend in formal cryptographic development consists in the accommodation of some well known general purpose formal methods. Representative specification languages that have been used in such accommodations are LOTOS <ref> [48, 49, 47, 10] </ref>, B, VDM [7, 46, 6], HOL [42], Ina Jo [22, 23], Z [9, 41] and Coq [8].
Reference: [50] <author> T. Y. C. Woo and S. S. Lam. </author> <title> Authentication for Distributed Systems. </title> <journal> Computer, </journal> <volume> 25(1) </volume> <pages> 39-52, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In Section 5, we illustrate our approach on the analysis of the corrected version of the Woo and Lam authentication protocol. A few concluding remarks and a discussion of further research are ultimately sketched as a conclusion in Section 6. 2 Basics As defined in <ref> [50, 51] </ref>, a protocol is a precisely defined sequence of communication and computation steps. A communication step transfers messages from one principal (sender) to another (receiver), while a computation step updates a principal's internal state. A protocol with a security objective is called a cryptographic protocol. <p> Subscripts will be used to denote principal association, thus for example N a is a nonce that belongs to A and k as is a shared key between A and S. In the sequel, we recall the one-way Woo and Lam authentication protocol as presented in <ref> [50, 51] </ref>. This protocol relies on symmetric-key cryptography.
Reference: [51] <author> T. Y. C. Woo and S. S. Lam. </author> <title> A Lesson on Authentication Protocol Design. </title> <booktitle> Operating Systems Review, </booktitle> <pages> pages 24-37, </pages> <year> 1994. </year> <month> 19 </month>
Reference-contexts: In Section 5, we illustrate our approach on the analysis of the corrected version of the Woo and Lam authentication protocol. A few concluding remarks and a discussion of further research are ultimately sketched as a conclusion in Section 6. 2 Basics As defined in <ref> [50, 51] </ref>, a protocol is a precisely defined sequence of communication and computation steps. A communication step transfers messages from one principal (sender) to another (receiver), while a computation step updates a principal's internal state. A protocol with a security objective is called a cryptographic protocol. <p> Subscripts will be used to denote principal association, thus for example N a is a nonce that belongs to A and k as is a shared key between A and S. In the sequel, we recall the one-way Woo and Lam authentication protocol as presented in <ref> [50, 51] </ref>. This protocol relies on symmetric-key cryptography.
References-found: 51

