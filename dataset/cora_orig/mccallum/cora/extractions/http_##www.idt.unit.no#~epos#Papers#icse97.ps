URL: http://www.idt.unit.no/~epos/Papers/icse97.ps
Refering-URL: http://www.idt.unit.no/~epos/bibliografia.html
Root-URL: 
Email: Email: fnguyen,alfw,conradig@idt.ntnu.no  
Phone: Phone: +47 73594485, Fax: +47 73594466  
Title: Total Software Process Model Evolution in EPOS Experience Report Process model evolution, experience reuse and
Author: Minh N. Nguyen, Alf Inge Wang and Reidar Conradi 
Note: Keywords:  
Address: N-7034 Trondheim, Norway  
Affiliation: Div. of Computer Science Norwegian University of Science and Technology (NTNU)  
Abstract: This paper presents a case study of Norwegian banking software house where the objective is to adopt a categorization framework for managing evolution in software projects to identify project profiles and evolutionpatterns, and to suggest improvements to better support frequent evolutions. Based on an analysis of collected evolution data from an ongoing case study, we elaborate a QIP-inspired method and own techniques to evolve corresponding process models in our Process-centered Software Engineering Environment, called EPOS. The method describes also how to synthesize and reuse evolution experience from completed projects to improve planning and estimation in new similar projects. The collected data demonstrates that requirement changes which are detected in later development phases, are major causes for cost overruns in the studied organization. 
Abstract-found: 1
Intro-found: 1
Reference: [BCM + 92] <author> Victor Basili, Gianluigi Caldiera, Frank McGarry, Rose Pajersky, Gerald Page, and Sharon Waligora. </author> <title> The Software Engineering Laboratory An Operational Software Experience Factory. </title> <booktitle> In Proceeding of the 14th International Conference in Software Engineering, ICSE, Melbourne, </booktitle> <pages> pages 370-381, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: We can mention efforts such as SEI-CMM [PWCC95], QIP/GQM [BCR94a], Bootstrap [HMK + 94] and SPICE [Dor93], etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies <ref> [BCM + 92] </ref> [PC94]. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects. Frequent changes and interruptions are considered as major cause for late delivery, cost overrun, missing features, and thus poor quality.
Reference: [BCR94a] <author> Victor R. Basili, Gianluigi Caldeera, and H. Dieter Rombach. </author> <booktitle> Measurement, volume 1 of Encyclopedia of Software Engineering, chapter x, </booktitle> <pages> pages 646-661. </pages> <publisher> John Wiley Sons, </publisher> <year> 1994. </year> <note> J. Marciniak (editor). </note>
Reference-contexts: INTRODUCTION The software industry needs to develop high quality software predictably on time and budget. Much research has therefore focused on technologies for Software Process Improvement (SPI), i.e. techniques for improving the productivity and quality of associated processes. We can mention efforts such as SEI-CMM [PWCC95], QIP/GQM <ref> [BCR94a] </ref>, Bootstrap [HMK + 94] and SPICE [Dor93], etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies [BCM + 92] [PC94]. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects. <p> EPOS meta-process for managing model evolution Our meta-process consists of four major steps, and is highly inspired by the Quality Improvement Paradigm of Basili <ref> [BCR94a] </ref>. The steps are MP1: Planning/instantiation; MP2: Enactment/tracking; MP3: Packaging/Assessment and MP4: Evolving/Learning. MP1 and MP2 are reusing project experience, while the other two MP3 and MP4 are synthesizing such experiences. Figure 3 depicts these meta-process steps within a project and associated process tools in EPOS.
Reference: [BCR94b] <author> Victor R. Basili, Gianluigi Caldiera, and H. Dieter Rombach. </author> <title> The Experience Factory, </title> <booktitle> volume 1 of Encyclopedia of Software Engineering, chapter x, </booktitle> <pages> pages 469-476. </pages> <publisher> John Wiley Sons, </publisher> <year> 1994. </year> <note> J. Marciniak (editor). </note>
Reference-contexts: Large software projects are far more complex due to number of persons, number of software components and required amount of management involved. In general, there is little progress in obtaining and keeping control over evolving software processes by exploiting technologies from software measurement [Fen91] [Jon91] or from experience reuse/synthesis <ref> [BCR94b] </ref> [BR91]. Indeed, most project management tools are of limited practical value, due to the accumulated effect of process changes during project execution. Thus, EPOS attempts to integrate process and project support in managing changes during development.
Reference: [BFG93] <author> Sergio Bandinelli, Alfonso Fuggetta, and Carlo Ghezzi. </author> <title> Software Process Model Evolution in the SPADE Environment. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pages 1128-1144, </pages> <month> December </month> <year> 1993. </year> <title> (special issue on Process Model Evolution). </title>
Reference-contexts: We have collected empirical evolution data from several software projects to provide us better understanding of the actual evolution profile. Appropriate support has then been introduced in our PSEE to better manage the observed evolution. RELATED WORK Some research has been dedicated to process model evolution. In [JC93] and <ref> [BFG93] </ref>, basic mechanisms and techniques for process model evolution are identified and implemented in two different PSEEs, EPOS and SPADE respectively. These efforts have emphasized methods and mechanisms for changing process model fragments, represented as types or classes in a versioned repository.
Reference: [BR91] <author> V.R. Basili and H.D. Rombach. </author> <title> Support for comprehensive reuse. </title> <journal> Software Engineering Journal, </journal> <pages> pages 303-316, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In general, there is little progress in obtaining and keeping control over evolving software processes by exploiting technologies from software measurement [Fen91] [Jon91] or from experience reuse/synthesis [BCR94b] <ref> [BR91] </ref>. Indeed, most project management tools are of limited practical value, due to the accumulated effect of process changes during project execution. Thus, EPOS attempts to integrate process and project support in managing changes during development.
Reference: [C + 92] <author> Reidar Conradi et al. </author> <title> Design, Use, and Implementation of SPELL, A Language for Software Process Modeling and Evolution. </title> <booktitle> In [Der92], </booktitle> <pages> pages 167-177, </pages> <year> 1992. </year>
Reference-contexts: EPOS System Overview EPOS [MCL + 95] [C + 94] is a software process modeling and enactment system. EPOS supports a reflexive, object-oriented software process modeling language called SPELL <ref> [C + 92] </ref>. Several different sub-models are supported in EPOS for describing activities and products. These sub-models are: Activity (task) model, Product model, Tool model, Human and Role model, Cooperation model and Meta-Process model.
Reference: [C + 94] <author> Reidar Conradi et al. EPOS: </author> <title> Object-Oriented and Cooperative Process Modelling. </title> <booktitle> In [FKN94], </booktitle> <pages> pages 33-70, </pages> <year> 1994. </year> <note> Also as EPOS TR 198, NTH, </note> <month> 31 Oct. </month> <year> 1993, </year> <pages> Trondheim. </pages>
Reference-contexts: Figure 1 depicts the elaborated categorization framework for process evolution which is used in the case study. EPOS This section gives you an overview of the PSEE EPOS and how EPOS support process evolution through mechnisms and tools. EPOS System Overview EPOS [MCL + 95] <ref> [C + 94] </ref> is a software process modeling and enactment system. EPOS supports a reflexive, object-oriented software process modeling language called SPELL [C + 92]. Several different sub-models are supported in EPOS for describing activities and products.
Reference: [DeM82] <author> Tom DeMarco. </author> <title> Controlling Software Projects: Management, Measurement and Estimation. </title> <publisher> Yourdon Press Computing Series. Prentice Hall, Inc, </publisher> <year> 1982. </year> <note> ISBN 0-13-171711-1 025. </note>
Reference-contexts: In this work, Lehman has identified five evolving entities in the software process: revision/version, S-type program 1 , E-type application 2 , process, and process model. However, this work does not offer sufficient detail in systematizing the impacts of evolution patterns in a concrete context. Work by DeMarco <ref> [DeM82] </ref>, in the TAME project [OB92] and empirical studies at NASA-SEL [MPP + 94] discuss how to achieve control and to improve estimation accuracy in rather large software projects.
Reference: [Der92] <editor> Jean-Claude Derniame, editor. </editor> <booktitle> Proc. Second Eu-ropean Workshop on Software Process Technology (EWSPT'92), </booktitle> <address> Trondheim, Norway. 253 p. </address> <publisher> Springer Verlag LNCS 635, </publisher> <month> September </month> <year> 1992. </year>
Reference: [Dor93] <author> Alex Dorling. SPICE: </author> <title> Software Process Improvement and Capability dEtermination. </title> <journal> Software Quality Journal, </journal> <volume> 2 </volume> <pages> 209-224, </pages> <year> 1993. </year>
Reference-contexts: Much research has therefore focused on technologies for Software Process Improvement (SPI), i.e. techniques for improving the productivity and quality of associated processes. We can mention efforts such as SEI-CMM [PWCC95], QIP/GQM [BCR94a], Bootstrap [HMK + 94] and SPICE <ref> [Dor93] </ref>, etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies [BCM + 92] [PC94]. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects.
Reference: [Fen91] <author> Norman E. Fenton. </author> <title> Software Metrics A Rigorous Approach. </title> <publisher> Chapman & Hall, </publisher> <year> 1991. </year>
Reference-contexts: Large software projects are far more complex due to number of persons, number of software components and required amount of management involved. In general, there is little progress in obtaining and keeping control over evolving software processes by exploiting technologies from software measurement <ref> [Fen91] </ref> [Jon91] or from experience reuse/synthesis [BCR94b] [BR91]. Indeed, most project management tools are of limited practical value, due to the accumulated effect of process changes during project execution. Thus, EPOS attempts to integrate process and project support in managing changes during development.
Reference: [FKN94] <author> Anthony Finkelstein, Jeff Kramer, and Bashar A. Nu-seibeh, </author> <title> editors. Software Process Modelling and Technology. </title> <booktitle> Advanced Software Development Series, </booktitle> <publisher> Research Studies Press/John Wiley & Sons, </publisher> <year> 1994. </year> <note> ISBN 0-86380-169-2, 362 p. </note>
Reference: [HMK + 94] <author> Volkmar Haase, Richard Messnarz, Gunter Koch, Hans J. Kugler, and Paul Decrinis. </author> <title> Bootstrap: Fine-Tuning Process Assessment. </title> <journal> IEEE Software, </journal> <pages> pages 25-35, </pages> <month> July </month> <year> 1994. </year> <title> Special issue for Measurement based Process Improvement. </title>
Reference-contexts: INTRODUCTION The software industry needs to develop high quality software predictably on time and budget. Much research has therefore focused on technologies for Software Process Improvement (SPI), i.e. techniques for improving the productivity and quality of associated processes. We can mention efforts such as SEI-CMM [PWCC95], QIP/GQM [BCR94a], Bootstrap <ref> [HMK + 94] </ref> and SPICE [Dor93], etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies [BCM + 92] [PC94]. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects.
Reference: [JC93] <author> M. Letizia Jaccheri and Reidar Conradi. </author> <title> Techniques for Process Model Evolution in EPOS. </title> <journal> IEEE Trans. on Software Engineering, </journal> <pages> pages 1145-1156, </pages> <month> Decem-ber </month> <year> 1993. </year> <title> (special issue on Process Model Evolution). </title>
Reference-contexts: We have collected empirical evolution data from several software projects to provide us better understanding of the actual evolution profile. Appropriate support has then been introduced in our PSEE to better manage the observed evolution. RELATED WORK Some research has been dedicated to process model evolution. In <ref> [JC93] </ref> and [BFG93], basic mechanisms and techniques for process model evolution are identified and implemented in two different PSEEs, EPOS and SPADE respectively. These efforts have emphasized methods and mechanisms for changing process model fragments, represented as types or classes in a versioned repository. <p> These sub-models are: Activity (task) model, Product model, Tool model, Human and Role model, Cooperation model and Meta-Process model. To support process modeling and evolution, we facilitate basic mechanisms for incremental (re)planning and enactment of the process models by process tools like the Planner and Process Engine <ref> [JC93] </ref> [LC93]. We have built the EPOSDB [Mun93] to store versioned software products, as well as their related process models. EPOS also supports cooperative transactions.
Reference: [Jon86] <author> T.C. Jones. </author> <title> Programming Productivity. </title> <publisher> McGraw Hill, </publisher> <year> 1986. </year>
Reference: [Jon91] <editor> Capers Jones. </editor> <booktitle> Applied Software Measurement: Assuring Productivity and Quality. Software Engineering Series. </booktitle> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: Large software projects are far more complex due to number of persons, number of software components and required amount of management involved. In general, there is little progress in obtaining and keeping control over evolving software processes by exploiting technologies from software measurement [Fen91] <ref> [Jon91] </ref> or from experience reuse/synthesis [BCR94b] [BR91]. Indeed, most project management tools are of limited practical value, due to the accumulated effect of process changes during project execution. Thus, EPOS attempts to integrate process and project support in managing changes during development.
Reference: [LB85] <author> M. M. Lehman and L. A. Belady. </author> <title> Program Evolution - Processes of Software Change. </title> <publisher> Academic Press, </publisher> <year> 1985. </year> <note> ISBN 0-12-442440-6. </note>
Reference-contexts: The model focuses on managing consistent change propagation in a feedback-based environment. Unfortunately, little effort has been dedicated to pursuit and apply the work which still remains at model level. The major focus in <ref> [LB85] </ref> and [Leh94] is on classification and studies of evolving entities, especially software systems, referred to as Program Evolution Dynamics. In this work, Lehman has identified five evolving entities in the software process: revision/version, S-type program 1 , E-type application 2 , process, and process model.
Reference: [LC93] <author> Chunnian Liu and Reidar Conradi. </author> <title> Automatic Replan-ning of Task Networks for Process Model Evolution in EPOS. </title> <booktitle> In [SP93], </booktitle> <pages> pages 434-450, </pages> <year> 1993. </year>
Reference-contexts: These sub-models are: Activity (task) model, Product model, Tool model, Human and Role model, Cooperation model and Meta-Process model. To support process modeling and evolution, we facilitate basic mechanisms for incremental (re)planning and enactment of the process models by process tools like the Planner and Process Engine [JC93] <ref> [LC93] </ref>. We have built the EPOSDB [Mun93] to store versioned software products, as well as their related process models. EPOS also supports cooperative transactions.
Reference: [Leh94] <author> Manny M. Lehman. </author> <title> Software Evolution, </title> <booktitle> volume 2 of Encyclopedia of Software Engineering, chapter x, </booktitle> <pages> pages 1202-1208. </pages> <publisher> Wiley and Co., </publisher> <year> 1994. </year> <note> J. Marciniak (editor). </note>
Reference-contexts: The model focuses on managing consistent change propagation in a feedback-based environment. Unfortunately, little effort has been dedicated to pursuit and apply the work which still remains at model level. The major focus in [LB85] and <ref> [Leh94] </ref> is on classification and studies of evolving entities, especially software systems, referred to as Program Evolution Dynamics. In this work, Lehman has identified five evolving entities in the software process: revision/version, S-type program 1 , E-type application 2 , process, and process model.
Reference: [Mad91] <author> Nazim H. Madhavji. </author> <title> The Process Cycle. </title> <journal> Software Engineering Journal, </journal> <volume> 6(5) </volume> <pages> 234-242, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: These efforts have emphasized methods and mechanisms for changing process model fragments, represented as types or classes in a versioned repository. No concrete couplings have been made with actual evolution in real software projects. On the other hand, Madhavji provided a methodological perspective of evolution <ref> [Mad91] </ref> and environmental facilities (e.g., dependency and change structure) for changes in the Prism model [Mad92]. The model focuses on managing consistent change propagation in a feedback-based environment. Unfortunately, little effort has been dedicated to pursuit and apply the work which still remains at model level.
Reference: [Mad92] <author> Nazim H. Madhavji. </author> <title> Environment Evolution: The Prisme Model of Changes. </title> <journal> Transactions of Software Engineering, </journal> <volume> 18(5) </volume> <pages> 380-392, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: No concrete couplings have been made with actual evolution in real software projects. On the other hand, Madhavji provided a methodological perspective of evolution [Mad91] and environmental facilities (e.g., dependency and change structure) for changes in the Prism model <ref> [Mad92] </ref>. The model focuses on managing consistent change propagation in a feedback-based environment. Unfortunately, little effort has been dedicated to pursuit and apply the work which still remains at model level.
Reference: [MCL + 95] <author> Bjrn P. Munch, Reidar Conradi, Jens-Otto Larsen, Minh N. Nguyen, and Per H. Westby. </author> <title> Integrated Product and Process Management in EPOS. </title> <journal> Journal of Integrated CAE, </journal> <year> 1995. </year> <title> (Forthcoming in special issue on Integrated Product and Process Modeling), </title> <address> 30 p. </address>
Reference-contexts: Figure 1 depicts the elaborated categorization framework for process evolution which is used in the case study. EPOS This section gives you an overview of the PSEE EPOS and how EPOS support process evolution through mechnisms and tools. EPOS System Overview EPOS <ref> [MCL + 95] </ref> [C + 94] is a software process modeling and enactment system. EPOS supports a reflexive, object-oriented software process modeling language called SPELL [C + 92]. Several different sub-models are supported in EPOS for describing activities and products.
Reference: [MPP + 94] <author> Frank McGarry, Rose Pajer-ski, Gerald Page, Sharon Waligora, Victor Basili, and Marvin Zelkowitz. </author> <title> Software Process Improvement in the NASA Software Engineering Laboratory. </title> <type> Technical report, </type> <institution> NASA/Goddard Space Flight Center, Computer Sciences Corporation, University of Maryland, </institution> <month> December </month> <year> 1994. </year> <note> Tecnical Report CMU/SEI-94-TR-22, ESC-TR-94-022. </note>
Reference-contexts: However, this work does not offer sufficient detail in systematizing the impacts of evolution patterns in a concrete context. Work by DeMarco [DeM82], in the TAME project [OB92] and empirical studies at NASA-SEL <ref> [MPP + 94] </ref> discuss how to achieve control and to improve estimation accuracy in rather large software projects.
Reference: [Mun93] <author> Bjrn P. Munch. </author> <title> Versioning in a Software Engineering Database the Change Oriented Way. </title> <type> PhD thesis, </type> <address> DCST, NTH, Trondheim, Norway, </address> <month> August </month> <year> 1993. </year> <type> 265 p. (PhD thesis NTH 1993:78). </type>
Reference-contexts: To support process modeling and evolution, we facilitate basic mechanisms for incremental (re)planning and enactment of the process models by process tools like the Planner and Process Engine [JC93] [LC93]. We have built the EPOSDB <ref> [Mun93] </ref> to store versioned software products, as well as their related process models. EPOS also supports cooperative transactions.
Reference: [NC94] <author> Minh N. Nguyen and Reidar Conradi. </author> <title> Classification of Meta-processes and their Models. </title> <booktitle> In Proc. from the third International Conference on Software Process, </booktitle> <address> Washington, USA, </address> <month> 10-11 October, </month> <pages> pages 167-175, </pages> <year> 1994. </year>
Reference-contexts: We need to improve our ability to predict, plan and manage changes based upon previous experiences. Adequate enactment support for process changes, embedded in a PSEE, is also considered necessary and desirable. Our previous work <ref> [NC94] </ref> has been revised to contain a classification of process change and their impact on the enacting process (project) in the form of recognizable evolution patterns. Such patterns associated with typical project and product profiles will contribute to building an empirical base.
Reference: [NC96] <author> Minh N. Nguyen and Reidar Conradi. </author> <title> Towards a Rigorous Approach for Managing Proces Evolution. </title> <editor> In Carlo Montangero (Ed.): </editor> <booktitle> Proc. 4th European Workshop on Software Process Technology (EWSPT'96), </booktitle> <address> 16 p., Nancy, France, 9-11 Oct. 1996. </address> <publisher> Springer Verlag LNCS xxx (forthcoming). </publisher>
Reference-contexts: External factors, such as market trends/forces, technology availability, and unanticipated delays/distortions, also influence and drive process evolution. Below, we present a categorization framework for process evolution. A detailed description can be found in <ref> [NC96] </ref>. Our framework distinguishes between where, why, what, when, how and by-whom process changes are introduced. Those six dimensions can be hierarchically decomposed for refinement and future extensions. Where: identifies the sources that request or cause a given process change. Why: represents the major causes (drivers) behind changes.
Reference: [OB92] <author> Markku Oivo and Victor R. Basili. </author> <title> Representing Software Engineering Models: The TAME Goal Oriented Approach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(10) </volume> <pages> 886-898, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: However, this work does not offer sufficient detail in systematizing the impacts of evolution patterns in a concrete context. Work by DeMarco [DeM82], in the TAME project <ref> [OB92] </ref> and empirical studies at NASA-SEL [MPP + 94] discuss how to achieve control and to improve estimation accuracy in rather large software projects.
Reference: [PC94] <author> Daniel J. Paulish and Anita D. </author> <title> Carleton. </title> <booktitle> Case Studies of Software-Process-Improvement Measurement. IEEE Computer, </booktitle> <pages> pages 50-57, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: We can mention efforts such as SEI-CMM [PWCC95], QIP/GQM [BCR94a], Bootstrap [HMK + 94] and SPICE [Dor93], etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies [BCM + 92] <ref> [PC94] </ref>. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects. Frequent changes and interruptions are considered as major cause for late delivery, cost overrun, missing features, and thus poor quality.
Reference: [PWCC95] <author> Marc C. Paulk, Charles V. Weber, Bill Curtis, and Mary B. Chrissis. </author> <title> The Capability Maturity Model for Software: Guidelines for Improving the Software Process. </title> <booktitle> SEI Series in Software Engineering. </booktitle> <address> 640 p. </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: INTRODUCTION The software industry needs to develop high quality software predictably on time and budget. Much research has therefore focused on technologies for Software Process Improvement (SPI), i.e. techniques for improving the productivity and quality of associated processes. We can mention efforts such as SEI-CMM <ref> [PWCC95] </ref>, QIP/GQM [BCR94a], Bootstrap [HMK + 94] and SPICE [Dor93], etc. Likewise, many case studies have been conducted in software organizations to validate the applicability of proposed technologies [BCM + 92] [PC94]. However, there is insufficient research addressing the innumerable and unforeseen process changes that occur during normal software projects.
Reference: [SP93] <author> Ian Sommerville and Manfred Paul, </author> <title> editors. </title> <booktitle> Proc. 4th European Software Engineering Conference (Garmisch-Partenkirchen, </booktitle> <address> FRG), </address> <publisher> Springer Verlag LNCS 717, </publisher> <month> September </month> <year> 1993. </year>
References-found: 30

