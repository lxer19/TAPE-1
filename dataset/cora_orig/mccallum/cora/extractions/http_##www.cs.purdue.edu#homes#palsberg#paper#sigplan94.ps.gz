URL: http://www.cs.purdue.edu/homes/palsberg/paper/sigplan94.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/palsberg/publications.html
Root-URL: http://www.cs.purdue.edu
Title: Foundations of Object-Oriented Languages Workshop Report  
Author: Andrew Black Jens Palsberg 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects. </title> <type> Manuscript, </type> <month> February </month> <year> 1994. </year>
Reference-contexts: Encoding the object calculus in a recognized typed -calculus in a way that preserves the subtypings remains an open problem. A draft of a 90+ page paper presenting this theory can be obtained by electronic mail from the authors <ref> [1] </ref>. Shorter versions are to appear as [3, 2]. Giorgio Ghelli: Objects with roles. Ghelli described roles, a concept from the Fibonacci database programming language. The language has a notion of state and a concept of object identity; it also allows existing objects to be extended.
Reference: [2] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Second-order systems. </title> <booktitle> In Proc. ESOP'94, European Symposium on Programming, </booktitle> <pages> pages 1-25. </pages> <publisher> Springer-Verlag (LNCS 788), </publisher> <year> 1994. </year>
Reference-contexts: Encoding the object calculus in a recognized typed -calculus in a way that preserves the subtypings remains an open problem. A draft of a 90+ page paper presenting this theory can be obtained by electronic mail from the authors [1]. Shorter versions are to appear as <ref> [3, 2] </ref>. Giorgio Ghelli: Objects with roles. Ghelli described roles, a concept from the Fibonacci database programming language. The language has a notion of state and a concept of object identity; it also allows existing objects to be extended.
Reference: [3] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Untyped and first-order systems. </title> <booktitle> In Proc. TACS'94, Theoretical Aspects of Computing Sofware, </booktitle> <pages> pages 296-320. </pages> <publisher> Springer-Verlag (LNCS 789), </publisher> <year> 1994. </year>
Reference-contexts: Encoding the object calculus in a recognized typed -calculus in a way that preserves the subtypings remains an open problem. A draft of a 90+ page paper presenting this theory can be obtained by electronic mail from the authors [1]. Shorter versions are to appear as <ref> [3, 2] </ref>. Giorgio Ghelli: Objects with roles. Ghelli described roles, a concept from the Fibonacci database programming language. The language has a notion of state and a concept of object identity; it also allows existing objects to be extended.
Reference: [4] <author> Ole Agesen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Type inference of Self: Analysis of objects with dynamic and multiple inheritance. </title> <journal> Software Practice& Experience. </journal> <note> To appear. Also in Proc. </note> <editor> ECOOP'93, </editor> <booktitle> Seventh European Conference on Object-Oriented Programming, </booktitle> <publisher> Springer--Verlag (LNCS 707), </publisher> <pages> pages 247-267, </pages> <address> Kaiserslautern, Germany, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Ole Agesen: Type inference for Self why and how? Agesen described an application <ref> [4] </ref> of Palsberg and Schwartzbach's theory to the untyped programming language Self. Although Self does not have classes, a similar classification of objects can be created by the transitive closure of the "cloned" relation.
Reference: [5] <author> Kim Bruce and John C. Mitchell. </author> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In Nineteenth Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages. </booktitle> <address> Albuquerque, New Mexico, </address> <pages> pages 316-327, </pages> <year> 1992. </year>
Reference-contexts: In OOLs, recursion is often essential to the interface. Thus, recursion should be central in models of OOLs. Dinesh Katiyar: Interfaces and typed OOP. Katiyar presented a type system featuring bounded existential quantification <ref> [10, 5, 13] </ref>. His experience with modeling systems confirmed the need for such types. A bounded existential quantification may be understood as both hiding a type, and at the same time stating requirements on of what form the hidden type should be.
Reference: [6] <author> Kim B. Bruce and Robert van Gent. </author> <title> TOIL: A new type-safe object-oriented imperative language. </title> <note> To appear, </note> <year> 1993. </year>
Reference-contexts: Robert van Gent: TOIL: a type-safe object-oriented imperative language. Van Gent presented joint work with Kim Bruce on TOIL, an imperative object-oriented language that is provably type safe <ref> [6, 17] </ref>. In TOIL, methods in a subtype can have any subtype of the corresponding method of the supertype; this is deep subtyping (compare with Cardelli and Abadi's shallow subtyping). TOIL can be type-checked in a modular fashion, and inherited methods are type-safe.
Reference: [7] <author> Giuseppe Castagna, Giorgio Ghelli, and Giuseppe Longo. </author> <title> A calculus for overloaded functions with subtyping. </title> <journal> Information and Computation. </journal> <note> To appear. </note>
Reference-contexts: Giuseppe Castagna: Second order ad hoc polymorphism. Castagna presented joint work with Giorgio Ghelli and Giuseppe Longo dealing with generic function languages <ref> [7, 8] </ref>. Such languages treat messages as functions, and message sending as function application. Castagna, Ghelli, and Longo have developed a model for this approach called &. In &, each function has many branches, each corresponding to a method in an object-oriented language.
Reference: [8] <author> Guiseppe Castagna. </author> <title> F & : Integrating parametric and "ad hoc" second order polymorphism. </title> <booktitle> In Proc. 4th International Workshop on Database Programming Languages, </booktitle> <pages> pages 335-355. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Giuseppe Castagna: Second order ad hoc polymorphism. Castagna presented joint work with Giorgio Ghelli and Giuseppe Longo dealing with generic function languages <ref> [7, 8] </ref>. Such languages treat messages as functions, and message sending as function application. Castagna, Ghelli, and Longo have developed a model for this approach called &. In &, each function has many branches, each corresponding to a method in an object-oriented language.
Reference: [9] <author> William Cook. </author> <title> Object-oriented programming versus abstract data types. </title> <booktitle> In Proc. REX Workshop/School on the Foundations of Object-Oriented Languages. </booktitle> <publisher> Springer-Verlag (LNCS 489), </publisher> <year> 1990. </year>
Reference-contexts: He posed the question: if subtyping is undecidable in all interesting type systems, is there any reason to avoid type:type? William Cook: ADTs vs OOLs. Cook contrasted the concepts of Abstract Data Types (ADTs) and objects in Object-Oriented Languages (OOLs) <ref> [9] </ref>. He argued that although both are based on the idea of data abstraction, they are fundamentally different. In short, an ADT may be understood as a set with operations, whereas objects are sets of operations. In an ADT, abstraction is achieved by hiding the type of the representation.
Reference: [10] <author> Dinesh Katiyar, David Luckham, and John Mitchell. </author> <title> A type system for prototyping languages. </title> <booktitle> In Proc. POPL'94, 21st Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 138-150, </pages> <year> 1994. </year> <note> Available by anonymous ftp from theory.stanford.edu:pub/katiyar/papers/popl 94.dvi.Z. </note>
Reference-contexts: In OOLs, recursion is often essential to the interface. Thus, recursion should be central in models of OOLs. Dinesh Katiyar: Interfaces and typed OOP. Katiyar presented a type system featuring bounded existential quantification <ref> [10, 5, 13] </ref>. His experience with modeling systems confirmed the need for such types. A bounded existential quantification may be understood as both hiding a type, and at the same time stating requirements on of what form the hidden type should be.
Reference: [11] <author> Gary T. Leavens and Krishna Kishore Dhara. </author> <title> A model theory for abstract data types with mutable objects (extended abstract). </title> <type> Technical Report 93-21, </type> <institution> Department of Computer Science, Iowa State University, </institution> <month> September </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu, and by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: With the refined subtyping relation, a method can be applied in more contexts than before. Gary Leavens and K. Kishore Dhara: A model theory for subtyping in imperative OOLs. Leavens and Dhara jointly presented work on specification and verification of object-oriented programs <ref> [12, 11] </ref>. The emphasis was on incomplete specifications and model theory. Once one considers specifications, the meaning of subtyping must be changed to include not just the existence the of corresponding methods, but also their behavior.
Reference: [12] <author> Gary T. Leavens and William E. Weihl. </author> <title> Subtyping, modular specification, and modular verification for applicative object-oriented programs. </title> <type> Technical Report 92-28b, </type> <institution> Department of Computer Science, Iowa State University, </institution> <month> October </month> <year> 1993. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu, and by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: With the refined subtyping relation, a method can be applied in more contexts than before. Gary Leavens and K. Kishore Dhara: A model theory for subtyping in imperative OOLs. Leavens and Dhara jointly presented work on specification and verification of object-oriented programs <ref> [12, 11] </ref>. The emphasis was on incomplete specifications and model theory. Once one considers specifications, the meaning of subtyping must be changed to include not just the existence the of corresponding methods, but also their behavior.
Reference: [13] <author> J. C. Mitchell, S. Meldal, and N. Madhav. </author> <title> An extension of Standard ML modules with subtyping and inheritance. </title> <booktitle> In Eighteenth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 316 327, </pages> <year> 1991. </year>
Reference-contexts: In OOLs, recursion is often essential to the interface. Thus, recursion should be central in models of OOLs. Dinesh Katiyar: Interfaces and typed OOP. Katiyar presented a type system featuring bounded existential quantification <ref> [10, 5, 13] </ref>. His experience with modeling systems confirmed the need for such types. A bounded existential quantification may be understood as both hiding a type, and at the same time stating requirements on of what form the hidden type should be.
Reference: [14] <author> Jens Palsberg and Michael I. Schwartzbach. </author> <title> Object-Oriented Type Systems. </title> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: Thus, the theory can deal with "class types" (the set of subclasses of a particular class) as well as with more abstract notions of type (the set of classes whose objects support a particular interface.) The theory and its implications are presented in Palsberg and Schwartzbach's recently published book <ref> [14] </ref>. Ole Agesen: Type inference for Self why and how? Agesen described an application [4] of Palsberg and Schwartzbach's theory to the untyped programming language Self. Although Self does not have classes, a similar classification of objects can be created by the transitive closure of the "cloned" relation.
Reference: [15] <author> Benjamin C. Pierce, Didier Remy, and David N. Turner. </author> <title> A typed higher-order programming language based on the pi-calculus. </title> <note> Draft report; an earlier version was presented as an invited lecture at the Workshop on Type Theory and its Application to Computer Systems, </note> <institution> Kyoto University, </institution> <month> July </month> <year> 1993, </year> <month> July </month> <year> 1993. </year>
Reference-contexts: Benjamin Pierce: Concurrent OO language design. Pierce described work in progress in Edinburgh to design an object-oriented concurrent language based on firm formal foundations <ref> [15, 16] </ref>. He is starting with the -calculus, because this work is going on at Edinburgh, because the -calculus is small and relatively simple, because it is theoretically well understood, and because it is computationally complete. To this base he plans to add values, typing, higher-order programming, results and objects.
Reference: [16] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming. </journal> <note> To appear. A preliminary version appeared in Principles of Programming Languages, </note> <year> 1993, </year> <title> and as University of Edinburgh technical report ECS-LFCS-92-225, under the title "Object-Oriented Programming Without Recursive Types". </title>
Reference-contexts: Benjamin Pierce: Concurrent OO language design. Pierce described work in progress in Edinburgh to design an object-oriented concurrent language based on firm formal foundations <ref> [15, 16] </ref>. He is starting with the -calculus, because this work is going on at Edinburgh, because the -calculus is small and relatively simple, because it is theoretically well understood, and because it is computationally complete. To this base he plans to add values, typing, higher-order programming, results and objects.
Reference: [17] <author> Robert van Gent. </author> <title> TOIL: An imperative type-safe object-oriented language. </title> <type> Williams College Senior Honors Thesis, </type> <year> 1993. </year>
Reference-contexts: Robert van Gent: TOIL: a type-safe object-oriented imperative language. Van Gent presented joint work with Kim Bruce on TOIL, an imperative object-oriented language that is provably type safe <ref> [6, 17] </ref>. In TOIL, methods in a subtype can have any subtype of the corresponding method of the supertype; this is deep subtyping (compare with Cardelli and Abadi's shallow subtyping). TOIL can be type-checked in a modular fashion, and inherited methods are type-safe.
References-found: 17

