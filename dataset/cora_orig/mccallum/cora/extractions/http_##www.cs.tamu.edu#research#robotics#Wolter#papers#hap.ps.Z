URL: http://www.cs.tamu.edu/research/robotics/Wolter/papers/hap.ps.Z
Refering-URL: http://www.cs.tamu.edu/research/robotics/Wolter/asp/bib.html
Root-URL: http://www.cs.tamu.edu
Title: A Structure-Oriented Approach to Assembly Sequence Planning  
Author: Sugato Chakrabarty and Jan Wolter 
Date: January 1995  
Note: Submitted to IEEE Transactions on Robotics and Automation,  
Address: Texas A&M University, College Station, TX 77843-3112  
Affiliation: Department of Computer Science  
Abstract: An assembly sequence planner is a system which, given a description of an assembly to be manufactured, identifies subassemblies and generates high-level plans for the construction of the each subassembly, including the final assembly. Previous research has shown that feasible plans can be efficiently produced for large assemblies, but the generation of good plans has met with less success. Not only are there difficulties in defining "good plans," but all published methods for finding good plans have computational complexities that make them unlikely to be practical for large assemblies. This paper shows that representing an assembly as a hierarchy of assembly structures can overcome many of these difficulties. A planner is described with uses the structure hierarchy both as a framework for structure-dependent definitions of a good plan, and as a tool for finding good plans more rapidly by using high-level expert advice, by reusing subplans for repeated substructures, and by not fully optimizing the plan. Analytical and experimental results are presented to demonstrate the effectiveness of the approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Daniel F. Baldwin, Thomas E. Abell, Man-Cheung Max Lui, Thomas L. De Fazio, and Daniel E. Whitney. </author> <title> An integrated computer aid for generating and evaluating assembly sequences for mechanical products. </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> 7(1) </volume> <pages> 78-94, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: The alternative is to use mating constraint languages, which are composed of constraints on the order in which pairs of parts may be joined (e.g., "parts p 1 and p 2 must be joined before parts p 3 and p 4 are joined")[25]. DeFazio and Whitney <ref> [1, 5, 6] </ref> showed how to generate such constraints in an interactive process. Huang and Lee generate them automatically from insertion constraints [12]. Finding plans that satisfy these constraints, however, remains comparatively difficult. <p> Though Wolter's system was reasonably fast for some typical assemblies, there are some classes of simple assemblies, such as one in which a pair of parts is held together by n bolts, where run times grows exponentially with the number of parts. De Fazio and Whitney <ref> [1] </ref> demonstrated a different approach to plan selection. They generate all possible plans, display them in a compacted form, and then allow the engineer to edit out the bad plans. <p> De Fazio and Whitney's planner also always generated totally ordered plans, thus 7 increasing the difficulty of selecting the best plan because many essentially identical plans appeared as different alternatives <ref> [1] </ref>. Therefore it is important to try to define plans at a level of abstraction which is detailed enough so that the quality of the plans with respect to a certain set of criteria can be assessed, but is not so detailed as to make the planning task extremely slow.
Reference: [2] <author> A. Bourjault. </author> <title> Contribution a une approche methodologique de l'assemblage automatise: Elaboration automatique des sequences operatiores. </title> <type> PhD thesis, </type> <institution> L'Universite de Franche-Comte, </institution> <month> November </month> <year> 1984. </year>
Reference-contexts: A liaison, as defined by Bourjault and popularized by DeFazio and Whitney, most often refers to a contact, but can in general refer to any relationship between two parts that is deemed significant by the engineer <ref> [2, 5] </ref>. This notion of a liaison can be generalized by defining an assembly structure to be a significant relationship involving some set of two or more parts. This includes not only pair-wise relationships such as liaisons, but also standardized relationships among larger sets of parts.
Reference: [3] <author> Sugato Chakrabarty. </author> <title> A Hierarchical Assembly Planning System. </title> <type> PhD thesis, </type> <institution> Texas A&M University, Department of Computer Science, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: The following subsections will give a brief overview of the criteria used by the search to select plans, and the search methodology applied. Further details of both may be found in <ref> [3] </ref>. 5.1 Criteria HAP can use suggested plans to capture knowledge about good ways to build specific structures, but what is good locally may not be as good globally. To capture more global quality criteria, HAP uses numerical 16 evaluation functions similar to those used in previous optimizing planners. <p> Both types of results are presented much more completely in <ref> [3] </ref>, but they will be summarized here. The HAP planner was implemented in C and all run times are CPU seconds on a Sun 4/60. 6.1 Effect of Structure Hierarchy on Run-time The form of the structure hierarchy has a significant influence on the performance of the planner. <p> to generate W top-level plans for a structure with branching-factor n and depth l is T (n; l) 2 O W z (n) l + n l (2W ) n 1 p where z (n) = n1 1 (1p) t=W + 1 A complete derivation of this is given in <ref> [3] </ref>, but is not included here because of space constraints. The concern is how the run time is effected by the size of the input. The total number of primitive structures in the tree is N = n l . <p> Times to generate each plan are given, together with the number of subassemblies in each plan (not including the top-level assembly), and a brief description of the plan. in <ref> [3] </ref>. Every plan included 3 subassemblies in which the LIP parts were fitted into the SOCKETS. Since the BASE blocks the insertion of the LIPS, these subassemblies could only be avoided if the BASE were inserted into three SOCKETS from below after their LIPS had been inserted.
Reference: [4] <author> Sugato Chakrabarty and Jan Wolter. </author> <title> A hierarchical approach to assembly planning. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 258-263, </pages> <month> May </month> <year> 1994. </year> <month> 25 </month>
Reference-contexts: similar to this have received some study for use in function-based design systems [26], and for function-based approaches to manufacturing cost estimation [13], but the only work which has been done on studying their applicability to computer-aided process-planning tasks was a paper describing a previous version of the HAP planner <ref> [4] </ref>. 3.2 Structure Library Assembly structures can be classified by type. While some structure types may be unique to a particular assembly, many appear repeatedly in a wide variety of assemblies. Descriptions of such common structures should be stored in a structure library.
Reference: [5] <author> Thomas L. De Fazio and Daniel E. Whitney. </author> <title> Simplified generation of all mechanical assembly sequences. </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> RA-3(6):640-658, </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: The alternative is to use mating constraint languages, which are composed of constraints on the order in which pairs of parts may be joined (e.g., "parts p 1 and p 2 must be joined before parts p 3 and p 4 are joined")[25]. DeFazio and Whitney <ref> [1, 5, 6] </ref> showed how to generate such constraints in an interactive process. Huang and Lee generate them automatically from insertion constraints [12]. Finding plans that satisfy these constraints, however, remains comparatively difficult. <p> A liaison, as defined by Bourjault and popularized by DeFazio and Whitney, most often refers to a contact, but can in general refer to any relationship between two parts that is deemed significant by the engineer <ref> [2, 5] </ref>. This notion of a liaison can be generalized by defining an assembly structure to be a significant relationship involving some set of two or more parts. This includes not only pair-wise relationships such as liaisons, but also standardized relationships among larger sets of parts.
Reference: [6] <author> Thomas L. De Fazio and Daniel E. Whitney. </author> <title> Correction to "simplified generation of all mechanical assembly sequences". </title> <journal> IEEE J. of Robotics and Automation, </journal> <volume> RA-4(6):705-708, </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: The alternative is to use mating constraint languages, which are composed of constraints on the order in which pairs of parts may be joined (e.g., "parts p 1 and p 2 must be joined before parts p 3 and p 4 are joined")[25]. DeFazio and Whitney <ref> [1, 5, 6] </ref> showed how to generate such constraints in an interactive process. Huang and Lee generate them automatically from insertion constraints [12]. Finding plans that satisfy these constraints, however, remains comparatively difficult.
Reference: [7] <author> Richard Hoffman. </author> <title> Automated assembly planning for b-rep products. </title> <booktitle> In IEEE Intl. Conf. on Systems Engineering, </booktitle> <pages> pages 391-394, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Some early systems accomplished this by sweeping parts along their insertion trajectories and checking for intersections with other parts [8, 19]. However this method proves computationally expensive without careful buffering and reuse of geometric query results <ref> [7] </ref>. Capturing geometric information in symbolic constraint languages has led to faster planners. Two forms of constraints have been used.
Reference: [8] <author> Richard L. Hoffman. </author> <title> Automated assembly in a CSG domain. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 210-215, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Some early systems accomplished this by sweeping parts along their insertion trajectories and checking for intersections with other parts <ref> [8, 19] </ref>. However this method proves computationally expensive without careful buffering and reuse of geometric query results [7]. Capturing geometric information in symbolic constraint languages has led to faster planners. Two forms of constraints have been used.
Reference: [9] <author> Luiz Homem de Mello and Arthur Sanderson. </author> <title> A correct and complete algorithm for the generations of mechanical assembly sequences. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 7(2) </volume> <pages> 228-240, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted <ref> [9] </ref>, the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted <ref> [9] </ref>, the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> Homem de Mello rated plans by their flexibility and parallelism and used an AO* search to find the best <ref> [9] </ref>. To search efficiently, these systems require admissible heuristic functions for each criterion. Since good heuristic functions are often difficult to find, this makes the addition of criteria difficult. Even with the small sets of criteria used in those systems, the time to search grows exponentially in some cases. <p> This can be viewed, somewhat inaccurately, as generating a disassembly sequence by repeatedly separating the assembly into two subsets, and then reversing the procedure it to achieve an assembly sequence. The planners described by Homem de Mello and Sanderson <ref> [9, 10, 19] </ref>, by Lee [14], and by Wilson [21] are typical of this type approach. If the only concern is the geometric feasibility of the assembly (i.e., that parts don't intersect) then this approach has the important advantage that the planner never has to backtrack. <p> If too little detail is included in the plans, then they may become difficult to evaluate. Homem de Mello and Sanderson's assembly trees contained just enough information to determine geometric feasibility <ref> [9] </ref>. But since the planner did not decide which set of parts was held and which set of parts were moved in mating operations, criteria such as fixture complexity and directionality could not easily be included.
Reference: [10] <author> Luiz S. Homem de Mello and Arthur C. Sanderson. </author> <title> A correct and complete algorithm for the generation of mechanical assembly sequences. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 56-61, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: This can be viewed, somewhat inaccurately, as generating a disassembly sequence by repeatedly separating the assembly into two subsets, and then reversing the procedure it to achieve an assembly sequence. The planners described by Homem de Mello and Sanderson <ref> [9, 10, 19] </ref>, by Lee [14], and by Wilson [21] are typical of this type approach. If the only concern is the geometric feasibility of the assembly (i.e., that parts don't intersect) then this approach has the important advantage that the planner never has to backtrack.
Reference: [11] <author> Kai-I Huang. </author> <title> Assembly Sequence Planning for Constrained Environments. </title> <type> PhD thesis, </type> <institution> Texas A&M University, Department of Industrial Engineering, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: as the attachment fl This research was supported by the National Science Foundation Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes <ref> [11, 12] </ref>, the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27].
Reference: [12] <author> Y. F. Huang and C. S. George Lee. </author> <title> A framework of knowledge-based assembly planning. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <pages> pages 599-604, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: as the attachment fl This research was supported by the National Science Foundation Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes <ref> [11, 12] </ref>, the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. <p> MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations <ref> [12, 14, 27] </ref>. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> DeFazio and Whitney [1, 5, 6] showed how to generate such constraints in an interactive process. Huang and Lee generate them automatically from insertion constraints <ref> [12] </ref>. Finding plans that satisfy these constraints, however, remains comparatively difficult. The methods which have been developed for selecting a plan that is good with respect to some nontrivial criteria from the set of geometrically feasible plans have been less satisfactory. <p> Since the structure hierarchy contains no specific geometric information about the shapes of the parts, additional information in the form of assembly insertion constraints is required. Assembly insertion constraints have been used by many assembly planners, including Wolter [23], Huang and Lee <ref> [12] </ref>, and Wilson [21]. They are usually seen as taking the form: If part p 1 is inserted along trajectory , then p 1 must be inserted before p 2 .
Reference: [13] <author> Ehud Kroll. </author> <title> Towards using cost estimation to guide concurrent design processes. </title> <editor> In D. Dutta, editor, </editor> <booktitle> Concurrent Engineering, volume PED-59, </booktitle> <pages> pages 281-293. </pages> <publisher> ASME, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: To produce correct plans, additional geometric information is required, primarily in the form of knowledge about which part motions intersect with which other parts. Views of assemblies similar to this have received some study for use in function-based design systems [26], and for function-based approaches to manufacturing cost estimation <ref> [13] </ref>, but the only work which has been done on studying their applicability to computer-aided process-planning tasks was a paper describing a previous version of the HAP planner [4]. 3.2 Structure Library Assembly structures can be classified by type.
Reference: [14] <author> Sukhan Lee. </author> <title> Backward assembly planning with assembly cost analysis. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2382-2391, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Previous researchers have considered goodness criteria such as the attachment fl This research was supported by the National Science Foundation Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies <ref> [14] </ref>, the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. <p> supported by the National Science Foundation Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations <ref> [14, 27] </ref>, the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations <ref> [12, 14, 27] </ref>. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> This can be viewed, somewhat inaccurately, as generating a disassembly sequence by repeatedly separating the assembly into two subsets, and then reversing the procedure it to achieve an assembly sequence. The planners described by Homem de Mello and Sanderson [9, 10, 19], by Lee <ref> [14] </ref>, and by Wilson [21] are typical of this type approach. If the only concern is the geometric feasibility of the assembly (i.e., that parts don't intersect) then this approach has the important advantage that the planner never has to backtrack. This makes very fast non-optimizing planners possible.
Reference: [15] <author> C.L. Liu. </author> <title> Elements of Discrete Mathmatics. </title> <publisher> McGraw Hill, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Here the component partition, C, is the sum of the original two partitions, C 0 + C 00 . This is constructed by concatenating the two partitions and then unioning together any sets of components which overlap <ref> [15] </ref>.
Reference: [16] <author> Nils J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishing Company, </publisher> <address> Palo Alto, </address> <year> 1980. </year>
Reference-contexts: To select the best parent plan with regard to the installed criteria, a simple best-first search is done <ref> [16, 17] </ref>. HAP decides how to merge in the children one at a time, so that child one is decided at the root of the search tree, child two at the next level, and so forth.
Reference: [17] <author> Judea Pearl. </author> <title> Heuristics : Intelligent Search Strategies for Computer Problem Solving. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: To select the best parent plan with regard to the installed criteria, a simple best-first search is done <ref> [16, 17] </ref>. HAP decides how to merge in the children one at a time, so that child one is decided at the root of the search tree, child two at the next level, and so forth.
Reference: [18] <author> Pearl Pu. </author> <title> An assembly sequence generation algorithm using case-based search techniques. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2425-2430, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Though the final choice of the plan should certainly be left to the engineer, systems are needed that can generate smaller sets of better plans for the engineer to choose from. Pu has described a case-based approach to assembly planning <ref> [18] </ref>. In case-based approaches, a data-base of previously solved assembly planning problems is constructed, so new problems can be solved if they consist of subproblems similar to those in the case data-base. In such systems, no explicit goodness functions are used.
Reference: [19] <author> Arthur C. Sanderson, Luiz S. Homem de Mello, and Hui Zhang. </author> <title> Assembly sequence planning. </title> <journal> AI Magazine, </journal> <volume> 11(1) </volume> <pages> 62-81, </pages> <month> Spring </month> <year> 1990. </year>
Reference-contexts: Some early systems accomplished this by sweeping parts along their insertion trajectories and checking for intersections with other parts <ref> [8, 19] </ref>. However this method proves computationally expensive without careful buffering and reuse of geometric query results [7]. Capturing geometric information in symbolic constraint languages has led to faster planners. Two forms of constraints have been used. <p> This can be viewed, somewhat inaccurately, as generating a disassembly sequence by repeatedly separating the assembly into two subsets, and then reversing the procedure it to achieve an assembly sequence. The planners described by Homem de Mello and Sanderson <ref> [9, 10, 19] </ref>, by Lee [14], and by Wilson [21] are typical of this type approach. If the only concern is the geometric feasibility of the assembly (i.e., that parts don't intersect) then this approach has the important advantage that the planner never has to backtrack.
Reference: [20] <author> Randall H. Wilson. </author> <title> On Geometric Assembly Planning. </title> <type> PhD thesis, </type> <institution> Stanford University, Department of Computer Science, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: It has been demonstrated that these can be efficiently generated and used to rapidly produce geometrically valid plans for large assemblies <ref> [20] </ref>. The alternative is to use mating constraint languages, which are composed of constraints on the order in which pairs of parts may be joined (e.g., "parts p 1 and p 2 must be joined before parts p 3 and p 4 are joined")[25].
Reference: [21] <author> Randall H. Wilson and Jean-Francois Rit. </author> <title> Maintaining geometric dependencies in an assembly planner. </title> <booktitle> In IEEE Intl. Conf. on Robotics and Automation, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: This can be viewed, somewhat inaccurately, as generating a disassembly sequence by repeatedly separating the assembly into two subsets, and then reversing the procedure it to achieve an assembly sequence. The planners described by Homem de Mello and Sanderson [9, 10, 19], by Lee [14], and by Wilson <ref> [21] </ref> are typical of this type approach. If the only concern is the geometric feasibility of the assembly (i.e., that parts don't intersect) then this approach has the important advantage that the planner never has to backtrack. This makes very fast non-optimizing planners possible. <p> Since the structure hierarchy contains no specific geometric information about the shapes of the parts, additional information in the form of assembly insertion constraints is required. Assembly insertion constraints have been used by many assembly planners, including Wolter [23], Huang and Lee [12], and Wilson <ref> [21] </ref>. They are usually seen as taking the form: If part p 1 is inserted along trajectory , then p 1 must be inserted before p 2 . Such constraints most commonly arise when moving part p 1 along path would cause it to intersect with p 2 .
Reference: [22] <author> Jan Wolter. </author> <title> A combinatorial analysis of enumerative data structures for assembly planning. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 611-618, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The second problem that confronts designers of assembly sequence planners is computational. Given some criteria for goodness, it is necessary to to search for valid plans that satisfy those criteria. But the number of possible plans for even fairly simple assemblies is extremely large <ref> [22] </ref>, and given the complexity of realistic criteria, it is often difficult to produce good search heuristics. Thus optimizing algorithms typically run in exponential time and, even with very simple criteria, few are capable of solving problems with more than a couple dozen parts.
Reference: [23] <author> Jan Wolter. </author> <title> On the automatic generation of assembly plans. </title> <editor> In Luiz S. Homem de Mello and Sukhan Lee, editors, </editor> <booktitle> Computer-Aided Assembly Planning, </booktitle> <pages> pages 263-288. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: metrics and then search for the best plan with respect to those metrics. 2 Wolter, for example, rated plans by the number of insertion directions used, the stability of intermediate assemblies, and the manipulation complexity of the assembles and used an opportunistic branch-and-bound search method to find the best plan <ref> [23, 28] </ref>. Homem de Mello rated plans by their flexibility and parallelism and used an AO* search to find the best [9]. To search efficiently, these systems require admissible heuristic functions for each criterion. Since good heuristic functions are often difficult to find, this makes the addition of criteria difficult. <p> Thus, when given two plates held together by a n nuts and bolts, it required exponential time because it was effectively searching all permutations of the order of insertion of the bolts in hopes of finding one that was better than the others <ref> [23] </ref>. De Fazio and Whitney's planner also always generated totally ordered plans, thus 7 increasing the difficulty of selecting the best plan because many essentially identical plans appeared as different alternatives [1]. <p> Since the structure hierarchy contains no specific geometric information about the shapes of the parts, additional information in the form of assembly insertion constraints is required. Assembly insertion constraints have been used by many assembly planners, including Wolter <ref> [23] </ref>, Huang and Lee [12], and Wilson [21]. They are usually seen as taking the form: If part p 1 is inserted along trajectory , then p 1 must be inserted before p 2 . <p> Manipulability rates the difficulty of each operation and the manipulability of each part or subassembly, and favors plans in which the more difficult operations are done with the more easily manipulated parts. These first two criteria are essentially identical to those in Wolter's XAP/1 planner <ref> [23] </ref>. Attachment measures how well the subassemblies that are moved hold themselves together, and favors forming subassemblies only from the more stable subsets of parts. Finally, Similarity measures how many different plans are used for substructures, and prefers plans where substructures of the same type use the same plans.
Reference: [24] <author> Jan Wolter. </author> <title> A combinatorial analysis of enumerative data structures for assembly planning. </title> <journal> Journal of Design and Manufacturing, </journal> <volume> 2(2) </volume> <pages> 93-104, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This avoids the problem of having to quantify the quality of plans and is probably a more appropriate way to choose plans. However, the number of plans presented to the user is potentially extremely large <ref> [24] </ref>, and, even with some automated filters, the problem of editing the plan set down becomes overwhelming for even modest sized assemblies.
Reference: [25] <author> Jan Wolter, Sugato Chakrabarty, and Jungfu Tsao. </author> <title> Mating constraint languages for assembly sequence planning. </title> <type> Technical Report 91-038, </type> <institution> Texas A&M University, Computer Science Dept., </institution> <month> September </month> <year> 1991. </year>
Reference: [26] <author> Jan Wolter and Periannan Chandrasekaran. </author> <title> A concept for a constraint-based representation of functional and geometric design knowledge. </title> <booktitle> In ACM Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 409-418, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: It describes only the semantic structure of the assembly. To produce correct plans, additional geometric information is required, primarily in the form of knowledge about which part motions intersect with which other parts. Views of assemblies similar to this have received some study for use in function-based design systems <ref> [26] </ref>, and for function-based approaches to manufacturing cost estimation [13], but the only work which has been done on studying their applicability to computer-aided process-planning tasks was a paper describing a previous version of the HAP planner [4]. 3.2 Structure Library Assembly structures can be classified by type.
Reference: [27] <author> Jan Wolter and Periannan Chandrasekaran. </author> <title> Knowledge representation for design of mechanical assemblies. </title> <booktitle> In 7th Annual NSF Conference on Design and Manufacturing Systems Research, </booktitle> <pages> pages 633-640, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: supported by the National Science Foundation Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations <ref> [14, 27] </ref>, the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> Presidential Young Investigator grant number DDM 9057883. y Dr Chakrabarty is now at ICAD, Inc., 201 Broadway, Cambridge, MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures <ref> [27] </ref>, the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations [12, 14, 27]. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan. <p> MA 02139-1901. z Corresponding author. 1 of partial assemblies and subassemblies [14], the number of tools and tool changes [11, 12], the number of workpiece reorientations [14, 27], the complexity of fixtures [27], the degree of parallelism permitted [9], the number of subassemblies [9], and the difficulty of the operations <ref> [12, 14, 27] </ref>. Typically numerical evaluation functions are created for each goodness criterion, and some weighted combination of them is used to select a plan.
Reference: [28] <author> Jan Dithmar Wolter. </author> <title> On the Automatic Generation of Plans for Mechanical Assembly. </title> <type> PhD thesis, </type> <institution> University of Michigan, Department of Computer, Information and Control Engineering, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: metrics and then search for the best plan with respect to those metrics. 2 Wolter, for example, rated plans by the number of insertion directions used, the stability of intermediate assemblies, and the manipulation complexity of the assembles and used an opportunistic branch-and-bound search method to find the best plan <ref> [23, 28] </ref>. Homem de Mello rated plans by their flexibility and parallelism and used an AO* search to find the best [9]. To search efficiently, these systems require admissible heuristic functions for each criterion. Since good heuristic functions are often difficult to find, this makes the addition of criteria difficult.
References-found: 28

