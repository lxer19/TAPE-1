URL: http://polaris.cs.uiuc.edu/reports/1335.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: In Proc. of the IEEE/USP International Workshop on High Performance Computing; Compiler and Tools for
Author: Luiz De Rose and David Padua 
Address: 1308 West Main Street Urbana, Illinois 61801  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Date: March 1994  March 1994  
Note: Processing. J. Zuffo ed. pp 97-112, University of Sao Paulo, SP Brazil,  
Pubnum: CSRD Report No. 1335  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> ABELSON, H., SUSSMAN, G. J., AND SUSSMAN, J. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: We should point out that interactive array languages are not the only ones that are typeless. Other examples include Smalltalk [6], an object-oriented programming language, and Scheme <ref> [1] </ref>, a functional language. For this type of languages, similarly to Matlab and APL, type-checking is done at run time. Although run-time type-checking provides more flexibility for the user, it normally means sacrificing performance in order to achieve this goal.
Reference: [2] <author> ADAMS, J., BRAINERD, W., MARTIN, J., SMITH, B., AND WAGENER, J. </author> <title> Fortran 90 Handbook Complete ANSI/ISO Reference. </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1992. </year>
Reference-contexts: However, even for those programs additional analysis would be necessary to detect parallelism across function invocations and to distribute the data efficiently. 3 We are planning to use Matlab [9] as the source language and generate Fortran 90 <ref> [2] </ref> plus directives as output. Matlab was chosen because it is used extensively by computational scientists and is available on a wide range of computer platforms.
Reference: [3] <author> BUDD, T. </author> <title> An APL Compiler. </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In this way, the execution could be made more efficient by eliminating the need for some or all the run-time bookkeeping operations. A study of the effectiveness of this type of approach on APL programs is presented in <ref> [3] </ref>. When the bulk of the computations is done by the high-level array functions, the inefficiency of the interpreter is less of a problem, because these functions are not interpreted and the bookkeeping operations only need to be performed when the function is invoked and/or returns.
Reference: [4] <author> GILMAN, L., AND ROSE, A. </author> <title> APL : An Interactive Approach. </title> <publisher> Wiley, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction Interactive array languages such as APL <ref> [4, 12] </ref> and Matlab [9] are powerful programming tools for the development of numerical programs. Many computational scientists consider that it is easier to prototype algorithms and applications using array languages instead of conventional languages such as Fortran and C.
Reference: [5] <author> GIRKAR, M., AND POLYCHRONOPOULOS, C. D. </author> <title> Automatic Extraction of Functional Parallelism from Ordinary Programs. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 3, </journal> <month> 2 (March </month> <year> 1992). </year>
Reference-contexts: as shown in Figure 9 using MPP Fortran notation [11]. cdir$ shared A (:block,:) cdir$ shared L (:block,:) cdir$ shared U (:block,:) cdir$ shared b (:block) cdir$ shared t (:block) cdir$ shared y (:block) cdir$ shared x (:block) Directives can also be used to facilitate the exploitation of functional parallelism <ref> [5] </ref> and loop parallelism. As described before, Matlab functions are side-effect free; hence, the work executed by a parallelizing compiler to detect functional parallelism can be simplified significantly if this information is given as a directive.
Reference: [6] <author> GOLDEBERG, A., AND ROBSON, D. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1983. </year>
Reference-contexts: We should point out that interactive array languages are not the only ones that are typeless. Other examples include Smalltalk <ref> [6] </ref>, an object-oriented programming language, and Scheme [1], a functional language. For this type of languages, similarly to Matlab and APL, type-checking is done at run time. Although run-time type-checking provides more flexibility for the user, it normally means sacrificing performance in order to achieve this goal.
Reference: [7] <author> GORDON, M. J., MILNER, A. J., AND WADSWORTH, C. P. </author> <title> Edinburgh LCF, </title> <booktitle> vol. 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: As mentioned above, an alternative is the use of a static type-inference mechanism that uses information from the rest of the program to deduce the data types. A classical example is the language ML <ref> [7, 10] </ref>, a meta-language for theorem proving, where the main motivation for strict type-checking is to ensure that every computed value of type theorem is indeed a theorem [7]. To facilitate type inferencing several restrictions are imposed to ML. For example, ML does not allow expressions with mixed types. <p> A classical example is the language ML [7, 10], a meta-language for theorem proving, where the main motivation for strict type-checking is to ensure that every computed value of type theorem is indeed a theorem <ref> [7] </ref>. To facilitate type inferencing several restrictions are imposed to ML. For example, ML does not allow expressions with mixed types. Thus, the following function definition in ML fun successor (n) = n+1; will be considered as a function that takes an integer as argument (n), and returns another integer.
Reference: [8] <author> GUPTA, M., AND BANERJEE, P. </author> <title> Demonstration of Automatic Data Partitioning Techniques for Parallelizing Compilers on Multicomputers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 3, </journal> <month> 2 (March </month> <year> 1992). </year>
Reference-contexts: Directives for data partitioning and distribution can be generated automatically by the compiler <ref> [8] </ref>. With the [L, U, P] = lu (A); x = U n y; 13 use of heuristics, the compiler can select distributions based on its knowledge of the best data partitioning for each built-in function.
Reference: [9] <author> THE MATH WORKS, INC. </author> <title> MATLAB, High-Performance Numeric Computation and Visualization Software. User's Guide, </title> <year> 1992. </year>
Reference-contexts: 1 Introduction Interactive array languages such as APL [4, 12] and Matlab <ref> [9] </ref> are powerful programming tools for the development of numerical programs. Many computational scientists consider that it is easier to prototype algorithms and applications using array languages instead of conventional languages such as Fortran and C. One reason is the interactive nature of the language, which facilitates debugging and analysis. <p> However, even for those programs additional analysis would be necessary to detect parallelism across function invocations and to distribute the data efficiently. 3 We are planning to use Matlab <ref> [9] </ref> as the source language and generate Fortran 90 [2] plus directives as output. Matlab was chosen because it is used extensively by computational scientists and is available on a wide range of computer platforms.
Reference: [10] <author> MILNER, R., TOFTE, M., AND HARPER, R. </author> <title> The Definition of Standard ML. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: As mentioned above, an alternative is the use of a static type-inference mechanism that uses information from the rest of the program to deduce the data types. A classical example is the language ML <ref> [7, 10] </ref>, a meta-language for theorem proving, where the main motivation for strict type-checking is to ensure that every computed value of type theorem is indeed a theorem [7]. To facilitate type inferencing several restrictions are imposed to ML. For example, ML does not allow expressions with mixed types.
Reference: [11] <author> PASE, D. M., MACDONALD, T., AND MELTZER, A. </author> <title> MPP Fortran Programming Model. </title> <type> Tech. rep., </type> <institution> Cray Research, Inc., </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: Thus, in the previous example, the compiler can generate directives for data distribution for solving the linear system using block factorization, as shown in Figure 9 using MPP Fortran notation <ref> [11] </ref>. cdir$ shared A (:block,:) cdir$ shared L (:block,:) cdir$ shared U (:block,:) cdir$ shared b (:block) cdir$ shared t (:block) cdir$ shared y (:block) cdir$ shared x (:block) Directives can also be used to facilitate the exploitation of functional parallelism [5] and loop parallelism.
Reference: [12] <author> POMMIER, S. </author> <title> An Introduction to APL. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1983. </year> <month> 15 </month>
Reference-contexts: 1 Introduction Interactive array languages such as APL <ref> [4, 12] </ref> and Matlab [9] are powerful programming tools for the development of numerical programs. Many computational scientists consider that it is easier to prototype algorithms and applications using array languages instead of conventional languages such as Fortran and C.
References-found: 12

