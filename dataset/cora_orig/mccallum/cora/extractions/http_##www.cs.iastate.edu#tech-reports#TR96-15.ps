URL: http://www.cs.iastate.edu/tech-reports/TR96-15.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: An Exact Algebraic Characterization of Behavioral Subtyping Keywords:behavioral subtype, subtyping, behavior, realization, observable equivalence, simulation,
Author: Gary T. Leavens and Don Pigozzi Gary T. Leavens and Don Pigozzi, . 
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  M S-T E X  
Note: 1991 Mathematics Subject Classification. Primary: 68Q65 Secondary: 68N05, 68N15, 68Q60. Submitted for publication. Copyright c  Typeset by A  
Date: November 1996  
Pubnum: TR #96-15  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Pierre America, </author> <title> Designing an Object-Oriented Programming Langauge with Behavioral Sub-typing, </title> <booktitle> Foundations of Object-Oriented Languages, </booktitle> <address> REX School/Workshop, Noordijkerhout, The Netherlands, </address> <note> May/June 1990 (J. </note> <editor> W. de Bakker and W. P. de Roever and G. Rozen-berg, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 489, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991, </year> <pages> pp. 60-90. </pages>
Reference-contexts: The requirement that ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 27 the simulation be nominal is key to preventing surprising behavior; it contains the idea of a coercion found in other work on behavioral subtyping <ref> [2, 1, 17, 5] </ref>. Definition 5.1 (correct behavioral subtype relation). Let be a signature with subtyping having as its subtyping preorder. Let SPEC be a specification over .
Reference: 2. <author> Kim B. Bruce and Peter Wegner, </author> <title> An Algebraic Model of Subtype and Inheritance, </title> <booktitle> Advances in Database Programming Languages (F. </booktitle> <editor> Ban~cilhon and P. Buneman, eds.), </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1990, </year> <pages> pp. 75-96. </pages>
Reference-contexts: The requirement that ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 27 the simulation be nominal is key to preventing surprising behavior; it contains the idea of a coercion found in other work on behavioral subtyping <ref> [2, 1, 17, 5] </ref>. Definition 5.1 (correct behavioral subtype relation). Let be a signature with subtyping having as its subtyping preorder. Let SPEC be a specification over . <p> However, when it works, the "trick" of constructing such a model is a good proof technique, as we discussed in Ex. 3.8. Bruce and Wegner <ref> [2] </ref> define what we would call correct behavioral subtyping using a generalization of order-sorted algebras where there are coercion functions from each subtype's carrier set to the carrier set of the corresponding supertype.
Reference: 3. <author> Luca Cardelli, </author> <title> A Semantics of Multiple Inheritance, </title> <booktitle> Information and Computation 76 (1988), </booktitle> <pages> 138-164. </pages>
Reference-contexts: Furthermore, we focus on the relationship between comparative behavior and realization by restricting attention in effect to the product of two algebras. The connections between the two notions of realization are discussed in more detail in [14]. The models of data types used by Cardelli <ref> [3] </ref>, and those in order-sorted algebra (OSA, [10, 11]), require that a subtype's carrier set be a subset of its supertype's carrier set.
Reference: 4. <author> Krishna Kishore Dhara and Gary T. Leavens, </author> <title> Weak Behavioral Subtyping for Types with Mutable Objects, </title> <booktitle> Mathematical Foundations of Programming Semantics, Eleventh Annual Conference (S. </booktitle> <editor> Brookes, M. Main, A. Melton and M. Mislove, eds.), </editor> <booktitle> Electronic Notes in Theoretical Computer Science, </booktitle> <volume> vol. 1, </volume> <publisher> Elsevier, </publisher> <year> 1995. </year> <title> ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 35 </title>
Reference-contexts: We are presently investigating such proof-theoretic methods. Another extension planned is to adapt our results to the study of OO ADTs with mutable objects (i.e., objects with time-varying state) <ref> [4, 5, 17] </ref>. Extending our results to types with mutable objects would give necessary and sufficient conditions for behavioral subtyping for types with mutable objects.
Reference: 5. <author> Krishna Kishore Dhara and Gary T. Leavens, </author> <title> Forcing Behavioral Subtyping Through Specification Inheritance, </title> <booktitle> Proceedings of the 18th International Conference on Software Engineering, </booktitle> <address> Berlin, Germany, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1996, </year> <pages> pp. 258-267. </pages>
Reference-contexts: The requirement that ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 27 the simulation be nominal is key to preventing surprising behavior; it contains the idea of a coercion found in other work on behavioral subtyping <ref> [2, 1, 17, 5] </ref>. Definition 5.1 (correct behavioral subtype relation). Let be a signature with subtyping having as its subtyping preorder. Let SPEC be a specification over . <p> We are presently investigating such proof-theoretic methods. Another extension planned is to adapt our results to the study of OO ADTs with mutable objects (i.e., objects with time-varying state) <ref> [4, 5, 17] </ref>. Extending our results to types with mutable objects would give necessary and sufficient conditions for behavioral subtyping for types with mutable objects.
Reference: 6. <author> Joseph A. Goguen, </author> <title> Realization is Universal, Math. </title> <booktitle> Systems Theory 6 (1973), </booktitle> <pages> 359-374. </pages>
Reference-contexts: The key mathematical tool of [14] is an adjunctive relationship between standard and generalized relations and between the pairs that make up each kind of relation. (See Section 5 of [14] for a discussion of related work by Goguen and Meseguer <ref> [6, 8] </ref>.) Starting with the pairs, the data pair ha; bi is a "behavior" of the environment pair h; i and h; i is a "realization" of ha; bi if there is some program that, when run in A and the environment outputs a, and when run in B and the <p> Discussion In this section we discuss related work, future work, and offer some conclusions. Related work. Our decision to formulate our results as a behavior-realization adjunction was considerably influenced by Goguen's categorical theory of automata <ref> [6] </ref> and its subsequent extension to (discrete) algebras by Goguen and Meseguer [8, 9]. Our notion of dual realization can be viewed in a loose sense as a generalization of Goguen and Meseguer's realization of the behavior of an automaton or algebra, although strictly speaking the two notions are incomparable.
Reference: 7. <author> Joseph A. Goguen, </author> <title> Order Sorted Algebras, </title> <type> Technical Report 14, </type> <institution> UCLA Computer Science Department (1978), Semantics and Theory of Computation Series. </institution>
Reference-contexts: We follow Reynolds [18], in contrast to Goguen and Meseguer <ref> [7, 10] </ref>, in not requiring A S A T when S T . <p> This would not differ from the case of discrete algebras if each type domain were required to be a subset of the domain of every supertype, as is the case for the order-sorted algebras of Goguen and Meseguer <ref> [7, 10] </ref>. But it is a definite generalization in our context, and there are many situations where this greater generality seems justified. 2 By "" in these definitions we mean the usual ordering of natural numbers, not the subtype ordering of the signature. 10 GARY T. <p> j fn : i n j ^ n 6= kg; if s 2 II Interval , s = hi; ji, and no case above holds. fl ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 11 II Interval and II IntSet are disjoint, so II, like E, is not order-sorted in the sense of <ref> [7, 10] </ref>. Notice also that II is not nominal, because remove II with an Interval argument may return an Interval instead of an IntSet. Any -algebra can be transformed into a b -algebra and hence into an algebra over a discrete signature. <p> By definition c II is not subtyped, but if it were allowed to inherit the subtyping of II it would be order-sorted in the sense of <ref> [7, 10] </ref> because c II Interval c II IntSet . This applies to all discrete transforms.
Reference: 8. <author> Joseph Goguen and Jose Meseguer, </author> <title> Universal Realization, Persistent Interconnection and Implementation of Abstract Modules, </title> <booktitle> Proceedings, 9th International Conference on Automata, Languages and Programming (M. </booktitle> <editor> Nielsen and E.M. Schmidt, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 140, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1982, </year> <pages> pp. 265-281. </pages>
Reference-contexts: The key mathematical tool of [14] is an adjunctive relationship between standard and generalized relations and between the pairs that make up each kind of relation. (See Section 5 of [14] for a discussion of related work by Goguen and Meseguer <ref> [6, 8] </ref>.) Starting with the pairs, the data pair ha; bi is a "behavior" of the environment pair h; i and h; i is a "realization" of ha; bi if there is some program that, when run in A and the environment outputs a, and when run in B and the <p> Discussion In this section we discuss related work, future work, and offer some conclusions. Related work. Our decision to formulate our results as a behavior-realization adjunction was considerably influenced by Goguen's categorical theory of automata [6] and its subsequent extension to (discrete) algebras by Goguen and Meseguer <ref> [8, 9] </ref>. Our notion of dual realization can be viewed in a loose sense as a generalization of Goguen and Meseguer's realization of the behavior of an automaton or algebra, although strictly speaking the two notions are incomparable.
Reference: 9. <author> Joseph Goguen and Jose Meseguer, Initiality, </author> <title> Induction and Computability, Algebraic Methods in Semantics (M. </title> <editor> Nivat and J. Reynolds, eds.), </editor> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1985, </year> <pages> pp. 459-541. </pages>
Reference-contexts: Discussion In this section we discuss related work, future work, and offer some conclusions. Related work. Our decision to formulate our results as a behavior-realization adjunction was considerably influenced by Goguen's categorical theory of automata [6] and its subsequent extension to (discrete) algebras by Goguen and Meseguer <ref> [8, 9] </ref>. Our notion of dual realization can be viewed in a loose sense as a generalization of Goguen and Meseguer's realization of the behavior of an automaton or algebra, although strictly speaking the two notions are incomparable.
Reference: 10. <author> Joseph Goguen and Jose Meseguer, </author> <title> Order-Sorted Algebra I: Equational Deduction for Multiple Inheritance, Overloading, Exceptions and Partial Operations, </title> <journal> Theor. Comp. Sci. </journal> <volume> 105 (1987), </volume> <pages> 217-273. </pages>
Reference-contexts: We follow Reynolds [18], in contrast to Goguen and Meseguer <ref> [7, 10] </ref>, in not requiring A S A T when S T . <p> This would not differ from the case of discrete algebras if each type domain were required to be a subset of the domain of every supertype, as is the case for the order-sorted algebras of Goguen and Meseguer <ref> [7, 10] </ref>. But it is a definite generalization in our context, and there are many situations where this greater generality seems justified. 2 By "" in these definitions we mean the usual ordering of natural numbers, not the subtype ordering of the signature. 10 GARY T. <p> j fn : i n j ^ n 6= kg; if s 2 II Interval , s = hi; ji, and no case above holds. fl ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 11 II Interval and II IntSet are disjoint, so II, like E, is not order-sorted in the sense of <ref> [7, 10] </ref>. Notice also that II is not nominal, because remove II with an Interval argument may return an Interval instead of an IntSet. Any -algebra can be transformed into a b -algebra and hence into an algebra over a discrete signature. <p> By definition c II is not subtyped, but if it were allowed to inherit the subtyping of II it would be order-sorted in the sense of <ref> [7, 10] </ref> because c II Interval c II IntSet . This applies to all discrete transforms. <p> The connections between the two notions of realization are discussed in more detail in [14]. The models of data types used by Cardelli [3], and those in order-sorted algebra (OSA, <ref> [10, 11] </ref>), require that a subtype's carrier set be a subset of its supertype's carrier set.
Reference: 11. <author> Joseph Goguen and Jose Meseguer, </author> <title> Order-Sorted Algebra Solves the Constructor-Selector, Multiple Representation and Coercion Problems, </title> <booktitle> Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <publisher> IEEE, </publisher> <year> 1987, </year> <pages> pp. 18-29. </pages>
Reference-contexts: The connections between the two notions of realization are discussed in more detail in [14]. The models of data types used by Cardelli [3], and those in order-sorted algebra (OSA, <ref> [10, 11] </ref>), require that a subtype's carrier set be a subset of its supertype's carrier set.
Reference: 12. <author> A. Jung and J. Tiuryn, </author> <title> A new characterization of lambda definability, Typed lambda calculus and applications. </title> <booktitle> International Conference on Typed Lambda Calculus and Applications, TLCA '93 March 1993, Utrecht, The Netherlands Proceedings. </booktitle> <editor> (M. Bezem and J. F. Groote, eds.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 598, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1993, </year> <pages> pp. 245-257. </pages>
Reference-contexts: An independent generalization of logical relations that appears to be closely related to our notion of homomorphic generalized relations is considered in <ref> [12] </ref>. 16 GARY T. LEAVENS AND DON PIGOZZI Definition 3.3 D (generalized homomorphic relation). Let A and B be -algebras and let G be a generalized relation between A and B. <p> For completeness with non-term-generated specifications, one needs to use nominal generalized simulations. Future work. It should be relatively straightforward to extend the results in this paper and in [14] to higher-order terms, using logical relations. Jung and Tiuryn <ref> [12] </ref> use a generalized notion of logical relation, they call them "Kripke logical relations of varying arity", to study lambda definabilty in Henkin models of the simply typed lambda calculus; the idea for such logical relations originated with Sieber [19].
Reference: 13. <author> Gary T. Leavens and Don Pigozzi, </author> <title> Typed Homomorphic Relations Extended with Subtypes, Mathematical Foundations of Programming Semantics '91 (S. </title> <editor> Brookes, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 598, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992, </year> <pages> pp. 144-167. </pages>
Reference-contexts: Our approach to these questions is model-theoretic. That is, we study algebraic models that are mathematical abstractions of the abstract data types (ADTs) used in OO programming. The condition that characterizes behavioral subtyping requires the existence of certain models and relations between them. In this paper, as in <ref> [13] </ref> and [14], we restrict ourselves to model-theoretic methods. That is, we take a specification of an ADT to be a class of algebras that satisfies 1991 Mathematics Subject Classification. Primary: 68Q65 Secondary: 68N05, 68N15, 68Q60. 1994 CR Categories. <p> Completeness of an abstract reasoning technique means that, if subtypes cannot exhibit surprising behavior, then the subtype relation specified can be certified as correct by the technique. In our previous work on behavioral subtyping <ref> [13] </ref> we defined "legal subtype relations", over a set of models (a specification), by requiring that, for each model A in the set, there exist a model B in the set and a simulation relation between them. <p> However, we left open the problem of whether the technique was complete. In this paper we settle this question by showing that the techniques of <ref> [13] </ref> are complete only for term-generated ADTs. By using the techniques of [14], we also give a sound and complete technique for the general case. The most important previous work that describes comparisons of algebraic models is that of Schoett [20]. <p> Here we enrich the algebras by an ordering of type domains to model implementations of ADT specifications with subtyping <ref> [13] </ref>. Definition 2.7 (-algebra, nominal -algebra). Let be a signature with subtyping. <p> g 2 OP n and admissible type ~ T ! S of g, ~a R ~ T ~ b implies g A (~a) R S g B ( ~ b). fl Recall the notion of a homomorphism between type contexts that was defined in Sec. 2 (Def. 2.6). 3 In <ref> [13] </ref>, standard relations that allow for subtyping were called "generalized homomorphic relations." They are different than the generalized homomorphic relations used in this paper. 4 Homomorphic relations are called logical relations when extended to higher types. <p> Such coercion functions are a special case of nominal standard simulations, and are thus sufficient to guarantee correct behavioral subtyping, but not necessary, even for term-generated specifications. The technique we reported on in <ref> [13] </ref> built on the work of Bruce and Wegner, and the category sorted algebras of Reynolds [18]. In [13] we used what are called nominal standard simulation relations in the present paper, and proved that the existence of such a simulation was a sufficient condition for correct behavioral sub-typing. <p> The technique we reported on in <ref> [13] </ref> built on the work of Bruce and Wegner, and the category sorted algebras of Reynolds [18]. In [13] we used what are called nominal standard simulation relations in the present paper, and proved that the existence of such a simulation was a sufficient condition for correct behavioral sub-typing. We have shown that the technique is only complete for term-generated specifications. <p> They appear to be closely related to our generalized homomorphic relations (but do not consider subtyping). We also plan to extend our results to higher-order terms in the presence of nondeterminism, as was done in <ref> [13] </ref>. How useful are the results of this paper to software engineers? This is an important question.
Reference: 14. <author> Gary T. Leavens and Don Pigozzi, </author> <title> The Behavior-Realization Adjunction and Generalized Homomorphic Relations, </title> <journal> Theor. Comp. </journal> <note> Sci., To appear. An extended version is available as [15]. </note>
Reference-contexts: That is, we study algebraic models that are mathematical abstractions of the abstract data types (ADTs) used in OO programming. The condition that characterizes behavioral subtyping requires the existence of certain models and relations between them. In this paper, as in [13] and <ref> [14] </ref>, we restrict ourselves to model-theoretic methods. That is, we take a specification of an ADT to be a class of algebras that satisfies 1991 Mathematics Subject Classification. Primary: 68Q65 Secondary: 68N05, 68N15, 68Q60. 1994 CR Categories. <p> However, we left open the problem of whether the technique was complete. In this paper we settle this question by showing that the techniques of [13] are complete only for term-generated ADTs. By using the techniques of <ref> [14] </ref>, we also give a sound and complete technique for the general case. The most important previous work that describes comparisons of algebraic models is that of Schoett [20]. <p> This mimics the way in which one might test "abstract" types in OO programming: first create the objects, and then pass them to the test routine. Besides allowing nonvisible data as input, the techniques developed in <ref> [14] </ref> differ in one other important way from those of Schoett: a generalization of homomorphic relations is used that relates environments instead of values. Such a generalization is necessary, because standard homomorphic relations (even with subtyping) do not provide a complete characterization technique, unless the specification is term-generated. <p> For example, the map that sends x to a will be an environment of the type context fx : T g if the dynamic type of a is a subtype of T . The key mathematical tool of <ref> [14] </ref> is an adjunctive relationship between standard and generalized relations and between the pairs that make up each kind of relation. (See Section 5 of [14] for a discussion of related work by Goguen and Meseguer [6, 8].) Starting with the pairs, the data pair ha; bi is a "behavior" of <p> The key mathematical tool of <ref> [14] </ref> is an adjunctive relationship between standard and generalized relations and between the pairs that make up each kind of relation. (See Section 5 of [14] for a discussion of related work by Goguen and Meseguer [6, 8].) Starting with the pairs, the data pair ha; bi is a "behavior" of the environment pair h; i and h; i is a "realization" of ha; bi if there is some program that, when run in A and <p> This gives a Galois connection, i.e., a special kind an adjunction, between standard and generalized relations. These ideas are used in <ref> [14] </ref> to give a sound and complete algebraic technique for proving the correctness of an implementation of an incomplete specification, which need not be term-generated. <p> In this paper we apply these ideas to behavioral subtyping, where a behavioral subtype plays the role of an implementation, and its supertypes play the role of the specifications. In what follows, we first describe the mathematical background from <ref> [14] </ref>, extending it with subtyping. In Section 3 we describe the notions of standard and generalized simulations that are the core of our characterization of behavioral sub-typing. In Section 4 we extend the notions of behavior and realization from [14], again extending them with subtyping. <p> In what follows, we first describe the mathematical background from <ref> [14] </ref>, extending it with subtyping. In Section 3 we describe the notions of standard and generalized simulations that are the core of our characterization of behavioral sub-typing. In Section 4 we extend the notions of behavior and realization from [14], again extending them with subtyping. In Section 5 we give the definition of correct behavioral subtyping and prove the soundness and completeness of our algebraic characterization. Finally in Section 6 we offer some discussion and conclusions. ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 5 2. <p> For example d E is the same as E , except that its preordering does not relate Comp to LO. The signatures without subtyping considered in <ref> [14] </ref> can be viewed as signatures with discrete subtyping. To simplify notation we usually write g 2 OP as shorthand for g 2 S for the same reason the subscript on ResType n is normally omitted. <p> The operation g is trivial if its set of admissible types is empty, i.e., if ResType (g; ~ T) is undefined for all ~ T 2 TYPE n . We assume contains no trivial operations. In the sequel we review some definitions of <ref> [14] </ref> relevant to the present paper and extend them to signatures with subtyping by applying them to the discrete transform. Definitions, theorems, lemmas, etc. that do not mention the preorder , and thus carry over directly from [14], will be indicated by a superscript "D" . <p> In the sequel we review some definitions of <ref> [14] </ref> relevant to the present paper and extend them to signatures with subtyping by applying them to the discrete transform. Definitions, theorems, lemmas, etc. that do not mention the preorder , and thus carry over directly from [14], will be indicated by a superscript "D" . Keep in mind that discrete signatures can be considered as a special class of signatures with subtyping. With each signature we associate a unique subsignature of visible types for the purpose of defining observations over . <p> The following definitions of type context, and the type inference rules, are quoted from <ref> [14] </ref>. They are applied to the discrete transform and unaffected by the presence of subtyping. Definition 2.4 D (type context). Let be a signature with subtyping. <p> for every term t (x i ; : : :; x n ) and type T K ` t (x 1 ; : : : ; x n ) : T iff H ` t h (x 1 ); : : : ; h (x n ) : T: In <ref> [14] </ref> the implementations of an ADT specification without subtyping are mod eled by algebras. Here we enrich the algebras by an ordering of type domains to model implementations of ADT specifications with subtyping [13]. Definition 2.7 (-algebra, nominal -algebra). Let be a signature with subtyping. <p> This transformation is not faithful in the sense that some information is lost and the original algebra cannot in general be recovered from its transform. But the process of transformation is important because it allows us to extend the results of <ref> [14] </ref>, which are concerned with specifications without subtyping, to specifications with subtyping. Recall that the definition of a -algebra A insures that the definition of the operation g A must be consistent in spite of its polymorphism. Definition 2.11 (discrete transform algebra). <p> This looser notion of isomorphism is the appropriate one here because of the polymorphism inherent in operation interpretations. Definitions, theorems, etc. in <ref> [14] </ref> that are formulated for discrete algebras can be automatically applied to subtyped algebras by applying them to the discrete transforms (after dropping the discrete ordering on the types). Again these are indicated by a superscript "D" . Definition 2.12 D (VIS-reduct). <p> LEAVENS AND DON PIGOZZI Note that b Aj VIS = Aj VIS because VIS is discretely subtyped. The notion of an environment over an algebra A with subtyping is the same as that of an of environment over b A <ref> [14, Def. 1.10] </ref>. Definition 2.13 (H-environment, nominal, visible). <p> Given an algebra A and environment over it, the meaning of a term is defined by recursion on its structure in the usual way <ref> [14, Def. 1.11] </ref>. ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 13 Definition 2.15 D (meaning). Assume is a signature with subtyping and A a -algebra. Let H be a type context, t : T a well H-typed term, and an H-environment of A. <p> hG H : H 2 TCONi such that G H ENV b A b B for every H 2 TCON. fl R is a standard relation between A and B iff it is a standard relation between the discrete b -algebras b A and b B in the sense of <ref> [14, Def. 2.1] </ref>. It can be identified with the indexed subsets of the Cartesian product b A fi b B. Similar remarks hold for generalized relations. <p> H and K and every context homomorphism h from K to H, G H implies ffi h G K ffi h. fl R is a standard homomorphic relation between A and B exactly when it is a standard homomorphic relation between b A and b B is the sense of <ref> [14, Def. 2.6] </ref>; similarly for generalized homomorphic relations ([14, Def. 2.7]). Both notions of homomorphic relation are symmetric, that is, if R (G) is a standard (generalized) homomorphic relation between A and B, then its converse ` ` G) is a standard (generalized) homomorphic relation between B and A. <p> R + is called the pointwise extension of R. It is shown in <ref> [14, Thm. 4.3] </ref> that if R is homomorphic, then so is R + . One might expect that every generalized homomorphic relation can be formed from a standard homomorphic relations by pointwise extension, but this is not the case; see [14, Ex. A.5]. <p> It is shown in [14, Thm. 4.3] that if R is homomorphic, then so is R + . One might expect that every generalized homomorphic relation can be formed from a standard homomorphic relations by pointwise extension, but this is not the case; see <ref> [14, Ex. A.5] </ref>. The following property of generalized homomorphic relations is an immediate consequence of (GHR2). (GHR3) R H implies j K R K j K for all type contexts H and K such that K is a subcontext of H. Properties (SHR1) and (GHR1) are called substitution properties. <p> Properties (SHR1) and (GHR1) are called substitution properties. Properties (GHR2) and (GHR3) are respectively called the pre-image and the subcontext properties. By a straightforward induction on the structure of terms it can be shown that the substitution property (GHR1) extends to terms in the following sense (cf. <ref> [14, Lem. 2.9] </ref>). ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 17 Lemma 3.4 D . Let A; B 2 SPEC and G be a generalized homomorphic relation between A and B. Let H be a type context and let and be H-environments of A and B, respectively. <p> H = f h; i : 2 ENV A TCONj VIS , and I + H = ; for H =2 TCONj VIS . fl I and I + coincide respectively with the visible standard and generalized identity relations on the discrete algebras b A and b B defined in <ref> [14, Def. 2.2] </ref>. They will prove useful when we define the notion of simulation below. Standard and generalized relations are VIS-identical if their visible parts coincide respectively with I and I + . More formally we have: Definition 3.6 D (VIS -identical relations). <p> R and S are VIS-identical iff they are VIS-identical relations between the discrete b -algebras b A and b B in the sense of <ref> [14, Def. 2.11] </ref>. <p> R and S are VIS-identical iff they are VIS-identical relations between the discrete b -algebras b A and b B in the sense of [14, Def. 2.11]. It is reasonable to require that a visible data element simulate only itself [20], so in <ref> [14, Def. 2.14] </ref> a standard homomorphic relation is said to be a weak bisimulation between discrete algebras A and B if it relates every visible data element only to itself. (Recall our assumption that the visible parts of any two algebras in the specification are the same.) Schoett [20] proves this <p> LEAVENS AND DON PIGOZZI By a standard simulation between algebras with subtyping, we mean a standard simulation between their discrete transforms in the sense of <ref> [14, Def. 2.11] </ref>. <p> Example 3.9. For the algebra E of Example 2.8, with the nonvisible types LO and Comp, there is also no nominal standard simulation of E by E. This follows from Ex. A.1 in <ref> [14] </ref>. In essence, the reason why no nominal standard simulation exists is that, if one did exist, then some integer i in E Comp would have to simulate the natural number 0 in E LO . <p> This leads to a broader notion of simulation by taking the contexts in which elements appear into account. A generalized simulation with subtyping is a generalized simulation of the discrete transforms in the sense of <ref> [14, Def. 2.13] </ref>. A VIS-identical generalized homomorphic relation G between two algebras A and B is a generalized simulation of B by A if, for every type context H, each H-environment over A is G H -related to some H-environment over B. <p> But generalized simulations are actually more general. Example 3.11. Although there is no nominal standard simulation of E by itself, as observed in Ex. 3.9, we now give a nominal generalized simulation of E by itself. The construction is adapted from one given in Exs. 2.8 and 2.16 of <ref> [14] </ref>. Let H 2 TCON and h; i 2 ENV b E b E H be given. We say that h; i is finite partial order isomorphism if the following holds. <p> It is easy to check the G E satisfies the substitution, pre-image, and subcontext properties that define a generalized homomorphic relation (see Ex. 2.8 of <ref> [14] </ref> for details). Moreover, it also satisfies the coercion property of a nominal generalized simulation. To see this let H be a type context 2 ENV b E H . We must show there is a nominal 2 ENV E H such that h; i 2 G E . <p> By visible behavior we mean, informally, the printed or returned results of programs. By realization we mean data that produce the desired behavior predicted by the specification. Surprising behavior contradicts the predictions of the specification. In our earlier paper <ref> [14] </ref> we explained our reasons for formalizing the notion of a realization of an element a of an -algebra as an environment over the algebra with the property that a is the result of executing one of the set of allowed procedures in the environment , and, symmetrically, the behavior of <p> ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 23 These definitions of behavior and realization between subtyped algebras A and B are the same notions of behavior and realization between their discrete transforms b A and b B defined in <ref> [14, Def. 3.2] </ref>. The following definition extends the notion of comparative behavior to a family of pairs of environments in the natural way; that is, it associates a standard relation with each generalized relation between A and B. <p> all ; 2 ENV b A b B RE @ (R) H iff 8 T 2TYPE RE @ (R) is called the dual realization of R, and RE @ is called the dual realization operator. fl The dual behavior of a generalized relation is also definable in the same way <ref> [14] </ref>, but it will play no role in this paper. As an example of the dual realization operator, we will take the dual realization of the maximal standard VIS-identical relation, which is denoted I fl . <p> RE @ (I fl ) = G E , where G E is the nominal generalized relation between E and itself defined in Ex. 3.11 and further considered in Ex. 4.6. fl The elementary part of the theory of the operators BE and RE @ is developed in detail in <ref> [14] </ref>. The main result obtained there is that BE and RE @ form a Galois connection when viewed as mappings between the partially ordered set of standard relations (under set-theoretical inclusion) and the dual partially ordered set of generalized relations. <p> This is expressed in the following equivalences which together we refer to simply as the basic adjunction. It has both a local and a global form. For the proof see <ref> [14, Thm. 3.9 and Cor. 3.10] </ref>. ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 25 Theorem 4.10 D (Basic Adjunction). Let A; B 2 SPEC. (i) Let H 2 TCON. <p> Then BE (G)j VIS = I implies G RE @ (I fl ). fl Let SPEC be a specification and A; B 2 SPEC. A is VIS-behaviorally reducible to B if the discrete transform of A is VIS-behaviorally reducible to the discrete transform of B in the sense of <ref> [14, Def. 3.15] </ref>, that is, A is VIS-behaviorally re ducible to B if the following condition holds. * For every H-environment over A, there is an H-environment over B such that and are VIS-behaviorally equivalent. This applies to all environments, whether visible or nonvisible. <p> This latter, weaker condition turns out to be equivalent to Schoett's [20] notion of behavioral equivalence. The stronger notion of behavioral equivalence considered in <ref> [14] </ref>, which deals with nonvisible as well as visible environments, is thus a natural extension of Schoett's notion. These notions can also be applied to subtyped algebras by applying them to their discrete transforms. <p> Hence, our main result is that nominal generalized simulation is an exact criterion for nominal VIS-behavioral reduction. The key lemma we will need for the proof of this result is the fact that the dual realization of every standard relation is homomorphic. For discrete signatures this is proved in <ref> [14, Thm. 4.10] </ref>. Since these notions are discrete, the theorem of [14] applies automatically to the subtyped case. Theorem 5.2 D . Let A; B 2 SPEC and R b Afi b B. <p> The key lemma we will need for the proof of this result is the fact that the dual realization of every standard relation is homomorphic. For discrete signatures this is proved in [14, Thm. 4.10]. Since these notions are discrete, the theorem of <ref> [14] </ref> applies automatically to the subtyped case. Theorem 5.2 D . Let A; B 2 SPEC and R b Afi b B. <p> LEAVENS AND DON PIGOZZI equal by the assumption that G is VIS-identical. So a = b and hence BE (G) is also VIS-identical. fl As a criterion for establishing VIS-behavioral reducibility the existence of a generalized simulation is both complete and sound. This is proved in <ref> [14] </ref>, Thm. 4.13, in the context of discrete specifications, and it can be applied to subtyped specifications via the discrete transform. <p> Furthermore, we focus on the relationship between comparative behavior and realization by restricting attention in effect to the product of two algebras. The connections between the two notions of realization are discussed in more detail in <ref> [14] </ref>. The models of data types used by Cardelli [3], and those in order-sorted algebra (OSA, [10, 11]), require that a subtype's carrier set be a subset of its supertype's carrier set. <p> We have shown that the technique is only complete for term-generated specifications. For completeness with non-term-generated specifications, one needs to use nominal generalized simulations. Future work. It should be relatively straightforward to extend the results in this paper and in <ref> [14] </ref> to higher-order terms, using logical relations. Jung and Tiuryn [12] use a generalized notion of logical relation, they call them "Kripke logical relations of varying arity", to study lambda definabilty in Henkin models of the simply typed lambda calculus; the idea for such logical relations originated with Sieber [19]. <p> LEAVENS AND DON PIGOZZI Conclusions. We have presented a sound and complete model-theoretic technique for verifying the correctness of an implementation of a specification with subtyping. These results are based on the theory of the adjunction formed by behavior and dual realization developed in <ref> [14] </ref>. The key ideas of this theory, which are essential for completeness in the non-term-generated case, are the generalization of the notion of observation, which allows nonvisible data to be compared, and the notion of a generalized homomorphic relation. <p> It is easy to check that R + = R for every standard relation R and G + G for every generalized relation. Another important property of the projective restriction is that, if G is a homomorphic generalized relation, then G = BE (G). This is established in <ref> [14] </ref>, Proposition 4.1. Theorem A.3 D . Assume SPEC is term-generated and A; B 2 SPEC. Let R b A fi b B. If R is pseudo-transitive, then RE @ (R) = RE @ (R) + Proof. <p> By the above theorem, RE @ (R) + = RE @ (R). Thus RE @ (R) + is homomorphic by Thm. 5.2. But, if the pointwise extension of a standard relation is homomorphic, then the relation itself is homomorphic. (This is easy to show; see <ref> [14] </ref>, Theorem 4.3 for details.) Hence RE @ (R) is homomorphic. But, since RE @ R is homomorphic (by Thm. 5.2), BE by Proposition 4.1 of [14]. Thus BE is homomorphic. fl <p> But, if the pointwise extension of a standard relation is homomorphic, then the relation itself is homomorphic. (This is easy to show; see <ref> [14] </ref>, Theorem 4.3 for details.) Hence RE @ (R) is homomorphic. But, since RE @ R is homomorphic (by Thm. 5.2), BE by Proposition 4.1 of [14]. Thus BE is homomorphic. fl
Reference: 15. <author> Gary T. Leavens and Don Pigozzi, </author> <title> The Behavior-Realization Adjunction and Generalized Homomorphic Relations, </title> <institution> Department of Computer Science, Iowa State University, </institution> <note> TR #94-18b. Available by anonymous ftp from ftp.cs.iastate.edu and by e-mail from alamanc@cs.iastate.edu (September 1994, revised September 1994, </note> <month> July </month> <year> 1996). </year>
Reference: 16. <author> Gary T. Leavens and Don Pigozzi, </author> <title> An exact algebraic characterization of behavioral subtyping, </title> <type> Preprint num. 315, </type> <institution> Centre de Recerca Matematica, </institution> <address> Istitut d'Estudis Catalans (Desembre 1995). </address>
Reference-contexts: Pigozzi's work was also supported in part by the Institut d'Estudis Catalans, Centre de Recerca Matematica (Barcelona) under a grant from the Ministerio de Educacion y Cienca of the government of Spain. A preliminary report on this work appeared as <ref> [16] </ref> 2 GARY T. LEAVENS AND DON PIGOZZI certain algebraic properties. Strictly speaking, a class of algebras should constitute the denotation of a specification stated in some presentation format (a specification language). However, we abuse terminology and refer to the class of algebras as a specification.
Reference: 17. <author> Barbara Liskov and Jeannette Wing, </author> <title> A Behavioral Notion of Subtyping, </title> <journal> ACM Transactions on Programming Languages and Systems 16 (1994), </journal> <volume> no. 11, </volume> <pages> 1811-1841. </pages>
Reference-contexts: The requirement that ALGEBRAIC CHARACTERIZATION OF BEHAVIORAL SUBTYPING 27 the simulation be nominal is key to preventing surprising behavior; it contains the idea of a coercion found in other work on behavioral subtyping <ref> [2, 1, 17, 5] </ref>. Definition 5.1 (correct behavioral subtype relation). Let be a signature with subtyping having as its subtyping preorder. Let SPEC be a specification over . <p> We are presently investigating such proof-theoretic methods. Another extension planned is to adapt our results to the study of OO ADTs with mutable objects (i.e., objects with time-varying state) <ref> [4, 5, 17] </ref>. Extending our results to types with mutable objects would give necessary and sufficient conditions for behavioral subtyping for types with mutable objects.
Reference: 18. <author> John C. Reynolds, </author> <title> Using Category Theory to Design Implicit Conversions and Generic Operators, Semantics-Directed Compiler Generation, </title> <booktitle> Proceedings of a Workshop, Aarhus, </booktitle> <editor> Denmark (N. D. Jones, ed.), </editor> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 94, </volume> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1980, </year> <pages> pp. 211-258. </pages>
Reference-contexts: Preliminaries The syntactic interface of a collection of abstract data types is formally described by a signature. These signatures allow for the overloading of operations, as in an OO language with multi-methods. Our framework for subtyping is a generalization of Reynold's category-sorted algebras <ref> [18] </ref>. Let N = f 0; 1; 2; : : : g be the set of natural numbers. Definition 2.1 (signature with subtyping). <p> We follow Reynolds <ref> [18] </ref>, in contrast to Goguen and Meseguer [7, 10], in not requiring A S A T when S T . <p> Such coercion functions are a special case of nominal standard simulations, and are thus sufficient to guarantee correct behavioral subtyping, but not necessary, even for term-generated specifications. The technique we reported on in [13] built on the work of Bruce and Wegner, and the category sorted algebras of Reynolds <ref> [18] </ref>. In [13] we used what are called nominal standard simulation relations in the present paper, and proved that the existence of such a simulation was a sufficient condition for correct behavioral sub-typing. We have shown that the technique is only complete for term-generated specifications.
Reference: 19. <author> K. Sieber, </author> <title> Reasoning about sequential functions via logical relations, </title> <booktitle> Applications of Categories in Computer Science. Proceedings of the LMS Symposium, Durham 1991 (M. </booktitle> <editor> P. Four-man, P. T. Johnstone, and A. M. Pitts, eds.), </editor> <booktitle> London Mathematical Society Lecture Note Series, </booktitle> <volume> vol. 177, </volume> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1992, </year> <pages> pp. 258-269. </pages>
Reference-contexts: Jung and Tiuryn [12] use a generalized notion of logical relation, they call them "Kripke logical relations of varying arity", to study lambda definabilty in Henkin models of the simply typed lambda calculus; the idea for such logical relations originated with Sieber <ref> [19] </ref>. They appear to be closely related to our generalized homomorphic relations (but do not consider subtyping). We also plan to extend our results to higher-order terms in the presence of nondeterminism, as was done in [13].
Reference: 20. <author> Oliver Schoett, </author> <title> Behavioural Correctness of Data Representations, </title> <booktitle> Science of Computer Programming 14 (June, 1990), </booktitle> <volume> no. 1, </volume> <pages> 43-57. </pages>
Reference-contexts: By using the techniques of [14], we also give a sound and complete technique for the general case. The most important previous work that describes comparisons of algebraic models is that of Schoett <ref> [20] </ref>. Schoett studied the problem of when a partial algebra A can be used in place of a paradigm, a partial algebra B, without exhibiting surprising behavior. <p> R and S are VIS-identical iff they are VIS-identical relations between the discrete b -algebras b A and b B in the sense of [14, Def. 2.11]. It is reasonable to require that a visible data element simulate only itself <ref> [20] </ref>, so in [14, Def. 2.14] a standard homomorphic relation is said to be a weak bisimulation between discrete algebras A and B if it relates every visible data element only to itself. (Recall our assumption that the visible parts of any two algebras in the specification are the same.) Schoett <p> so in [14, Def. 2.14] a standard homomorphic relation is said to be a weak bisimulation between discrete algebras A and B if it relates every visible data element only to itself. (Recall our assumption that the visible parts of any two algebras in the specification are the same.) Schoett <ref> [20] </ref> proves this weak notion of simulation is both necessary and sufficient to insure behavioral equivalence with regard to visible data. We explained in the introduction why, for our purposes, weak simulation is inadequate. <p> This latter, weaker condition turns out to be equivalent to Schoett's <ref> [20] </ref> notion of behavioral equivalence. The stronger notion of behavioral equivalence considered in [14], which deals with nonvisible as well as visible environments, is thus a natural extension of Schoett's notion. These notions can also be applied to subtyped algebras by applying them to their discrete transforms. <p> On the other hand, the existence of a standard homomorphic relation between A and B is both necessary and sufficient for the weaker notion of behavioral equivalence considered by Schoett <ref> [20] </ref>. What makes Schoett's result possible is that fact that the visible reduct of every algebra in SPEC is term-generated.
Reference: 21. <author> Philip Wadler and Stephen Blott, </author> <title> How to make ad-hoc Polymorphism less ad hoc, </title> <booktitle> Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <publisher> ACM, </publisher> <address> New York, </address> <year> 1989, </year> <pages> pp. 60-76. </pages> <institution> Department of Computer Science, Iowa State University, Ames, Iowa 50011-1040 USA 36 GARY T. LEAVENS AND DON PIGOZZI E-mail address: leavens@cs.iastate.edu Department of Mathematics, Iowa State University, Ames, Iowa 50011 USA E-mail address: dpigozzi@iastate.edu </institution>
Reference-contexts: This problem is the original motivation for our study of "programs" with nonvisible inputs. The role of such non-term-generated, or "abstract" ADTs such as Collection is analogous to the role of certain formal type parameters in parameterized code <ref> [21] </ref>. That is, because of subtype polymorphism, such "abstract" supertypes play a role similar to formal type parameters such as T in the type generator Set [T]. Because Schoett's technique relies on visible inputs, it cannot in general settle questions of correctness for ADTs that are not term-generated.
References-found: 21

