URL: http://drl.cs.uiuc.edu/pubs/vjones-thesis.ps
Refering-URL: http://drl.cs.uiuc.edu/security/
Root-URL: http://www.cs.uiuc.edu
Title: ACCESS CONTROL FOR CLIENT-SERVER OBJECT DATABASES  
Author: BY VICKI ELLEN JONES 
Degree: THESIS Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Computer Science in the Graduate College of the  
Date: 1992  
Address: 1985 M.S., University of Illinois,  1997 Urbana, Illinois  
Affiliation: B.S., North Carolina State University,  University of Illinois at Urbana-Champaign,  
Abstract-found: 0
Intro-found: 1
Reference: [AtNPT96] <author> Marc Andreessen and the Netscape Product Team. </author> <title> The Netscape Intranet Vision and Product Roadmap, </title> <note> Version 1.0. http://home.netscape.com/comprod/at work/white paper/intranet/vision.html, </note> <month> June </month> <year> 1996. </year>
Reference-contexts: to be core technologies for their business customers [Gat96] and Netscape has announced future products with fine-grained access control, i.e., fine-grained control over exactly which user can access which data (Catalog, Mail, and News Servers and Publishing System), logging (Proxy Server), and transaction support (Transaction Server for their Merchant System) <ref> [AtNPT96] </ref>. Traditionally, data management needs have been addressed by relational databases using simple data structures such as tables or relations.
Reference: [BDK91] <editor> F. Bancilhon, L. Delobel, and P. Kanellakis, editors. </editor> <title> Building an Object-Oriented Database System: The Story of O 2 . Morgan-Kaufmann, </title> <year> 1991. </year>
Reference-contexts: Object database research and products emerged to address these needs [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment. <p> In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier. This identifier encodes a volume identifier, a page identifier within the volume, and a slot number which indirectly addresses a record within a page <ref> [BDK91] </ref>. Texas OIDs are 64-bit file offsets [WK92]. Objectivity/DB uses a physical page and offset OID. 3.2 Inter-object References Another architectural decision which impacts performance is the in-memory format of references between objects. In traditional databases the data is encapsulated by the query language. <p> All objects reachable from these roots are fetched at transaction start and OIDs are swizzled to memory addresses. In object-fault mode a resident-object hash table is used to map OIDs to in-memory object addresses <ref> [BDK91] </ref>. 3.2.2 Object Descriptors A second issue with respect to the implementation of main-memory object references is the maintenance of run-time object information, such as whether a reference has been swizzled, an object's in-memory location, and its concurrency control information.
Reference: [BW94] <author> E. Bertino and H. Weigand. </author> <title> An approach to authorization modeling in object-oriented database systems. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 12, </volume> <year> 1994. </year> <month> Have(Bertino). </month>
Reference-contexts: The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, BW94, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies. <p> Other semantic modeling constructs, such as composite objects and versions, are also exploited in some of these proposals. Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. <ref> [BW94] </ref> also considers how to support method-based authorization.
Reference: [Cat91] <author> R. G. G. Cattell. </author> <title> Object Data Management. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Object database research and products emerged to address these needs <ref> [Cat91] </ref>. Many object databases (ODBs) are available commercially [Des95a, Ont89, Obj90, BDK91, Cor94] and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment. <p> crash recovery, and data independence), the following are especially important for ODB applications: unique object identifiers, composite objects, efficient referential integrity, object-type hierarchy, associated procedures, ordered sets, large uninterpreted data items (BLOBs), ease of schema changes, integrated programming language, multiple database versions, long-term locking and checkout, and high single-user performance <ref> [Cat91] </ref>. The relative importance of these features varies with the application. Performance, however, is often the most important factor for customers in deciding to use an object database. An order of magnitude difference in performance between systems can effectively constitute a functional difference.
Reference: [CDF + 94] <author> M. Carey, D. DeWitt, M. Franklin, N. Hall, M. McAuliff, J. Naughton, D. Schuh, M. Solomon, C. Tan, O. Tsatalos, S. White, and M. Zwilling. </author> <title> Shoring up persistent applications. </title> <booktitle> In ACM Sigmod International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: A strategy called callback locking has been proposed as a way to improve intertransaction caching <ref> [LLOW91, CDF + 94] </ref>. Under this approach read locks are managed by the client and set when pages are accessed while write locks are managed by the server and explicitly requested by a client.
Reference: [CDG + 90] <author> M. Carey, D. DeWitt, G. Graefe, D. Haight, J. Richardson, D. Schuh, E. Shekita, and S. Vandenberg. </author> <title> The EXODUS extensible DBMS project: An overview. </title> <booktitle> In Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: In most instances this will not be the case and variables must be considered persistent, resulting in runtime access control inefficiency. 45 Persistence by type can be defined by declaration at the time a class is created (e.g., the persistent storage class in EXODUS <ref> [CDG + 90] </ref>) or by being a subtype of a system-supplied persistent object type (e.g., Objectivity). With the former approach, a superset of all references to protected objects can be identified at compile time and access control checks added for them.
Reference: [CFMS94] <author> Silvana Castano, Mariagrazia Fugini, Giancarlo Martella, and Pierangela Sama-rati, </author> <title> editors. Database Security. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year> <month> 144 </month>
Reference-contexts: Other systems allow write-up but carefully manage potential conflicts which may destroy information. Polyinstantiation allows multiple objects with the same primary keys to coexist and is one way to allow write-up while preserving integrity <ref> [CFMS94] </ref>. In addition to hierarchical classification levels, mandatory policies usually assign users and objects to categories, often called "need-to-know" categories. Users must not only have a clearance which allows them to access an object but must also be a member of the object's category for the type of access desired. <p> Authorization mechanisms have three functions: administration of access control information to assign and maintain permissions, checking whether or not an access is allowed (the decision algorithm), and enforcing the negative decisions. Administration of large amounts of access control information is complex. It is discussed in <ref> [CFMS94] </ref> and not addressed further in this thesis. The fundamental conceptual model for access control information is the access matrix. The rows of the matrix represent the users or subjects and the columns represent objects. In an operating system, for example, one type of resource commonly protected is the files.
Reference: [CFZ94] <author> M. Carey, M. Franklin, and M. Zaharioudakis. </author> <title> Fine-grained sharing in a page server OODBMS. </title> <booktitle> In ACM Sigmod International Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: At the end of a transaction a client makes sure all updated pages have been sent to the server, releases all local locks, and retains copies of all cached pages. Several variations of the callback strategy are presented in <ref> [CFZ94] </ref>, including object-level and adaptive strategies. The object-level strategies lock and call back objects instead of pages. Adaptive strategies allow locks to be set on pages and if a conflict arises they are de-escalated to objects if there is no object-level conflict.
Reference: [CLFL94] <author> Jeffrey S. Chase, Henry M. Levy, Michael J. Feeley, and Edward D. Lazowska. </author> <title> Sharing and protection in a single address space operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4) </volume> <pages> 271-307, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: As good performance during reference following is critical for high performance for most ODB applications, a lighter weight approach is preferred. Like Grasshopper, the Opal operating system <ref> [CLFL94] </ref> provides a single address space for transient and persistent data. Segments divide up memory and the unit of execution is a thread. Permission for a thread to operate on an object is specified in a 256-bit capability.
Reference: [Cor] <author> Informix Corporation. </author> <title> Deploying a database on the web: Potential uses and issues. </title> <address> http://www.informix.com/informix/dbweb/grail/deploy.htm. </address>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Sit, Cor, Ker, IBM, Inc] </ref>.
Reference: [Cor92] <author> Oracle Corporation. </author> <title> ORACLE7 Server SWL Language Reference Manual. </title> <publisher> Oracle Corporation, </publisher> <month> December </month> <year> 1992. </year>
Reference-contexts: While there is ongoing discussion about exactly what RBAC means, it is clear that RBAC will consolidate security in a unified service which can be managed while providing the flexibility and customizations required by individual applications [SCFY94]. Support for roles is available in commercial products <ref> [Cor92] </ref> and is being considered as part of the emerging SQL3 standard [PB93].
Reference: [Cor94] <author> Servio Corporation. </author> <title> Introduction to GemStone. </title> <institution> Servio Corporation, Beaverton, Oregon, </institution> <year> 1994. </year>
Reference-contexts: Object database research and products emerged to address these needs [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment.
Reference: [Cor96] <author> Amy Cortese. </author> <title> Here comes the Intranet. </title> <booktitle> Business Week, </booktitle> <pages> pages 76-84, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: For example, Santa Cruz Organization, a relatively small software company, has about 200 servers on its private Intranet and only two Internet servers [Hal96]. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily for intra-organization communication <ref> [Hor96, Cor96] </ref>. In this environment of continuous network connections to numerous data sources, two of the most pressing issues are security and privacy.
Reference: [CS92] <author> R. G. G. Cattell and J. Skeen. </author> <title> Object operations benchmark. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(1) </volume> <pages> 1-31, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: An order of magnitude difference in performance between systems can effectively constitute a functional difference. For example, in CAD applications relational database servers can require minutes to respond to queries which require responses in seconds for reasonable user feedback <ref> [CS92] </ref>. The decisions made by ODB designers impact the functionality and performance of an ODB system. The primary decisions include: * Object Identifiers (OIDs). What is the structure of an OID? What information should it reflect? 18 * Inter-object References. <p> Without adequate performance, added functionality alone would be an insufficient motivation for applications to pursue data protection like that provided by our target access control model. To demonstrate adequate performance we measured the performance of Texas AC on the OO1 benchmark <ref> [CS92] </ref> and compared the results to Texas without access control. OO1 was chosen because it is an industry standard. The OO1 benchmark is designed to be a performance measure for engineering applications such as computer-aided software engineering (CASE) and computer-aided design (CAD).
Reference: [DdBF + 94a] <author> Alan Dearle, Rex di Bona, James Farrow, Frans Henskens, David Hulse, Anders Lindstrom, Stephen Norris, John Rosenberg, and Francis Vaughan. </author> <title> Protection in the Grasshopper operating system. </title> <booktitle> In Proceedings of the 6th International Workshop on Persistent Object Systems, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: As in most ODBs, operating system protection is provided at a very coarse granularity|the file level. As discussed throughout this thesis, for ODB applications a finer granularity of access control is needed. In the Grasshopper operating system <ref> [DdBF + 94a, DdBF + 94b] </ref>, an operating system designed to support orthogonal persistence, the storage abstraction is not a file, but a container|persistent entities which replace both address spaces and file systems. A locus executes within a single container.
Reference: [DdBF + 94b] <author> Alan Dearle, Rex di Bona, James Farrow, Frans Henskens, Anders Lindstrom, John Rosenberg, and Francis Vaughan. Grasshopper: </author> <title> An orthogonally persistent operating system. </title> <journal> Computing Systems, </journal> <volume> 7(3) </volume> <pages> 289-312, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: As in most ODBs, operating system protection is provided at a very coarse granularity|the file level. As discussed throughout this thesis, for ODB applications a finer granularity of access control is needed. In the Grasshopper operating system <ref> [DdBF + 94a, DdBF + 94b] </ref>, an operating system designed to support orthogonal persistence, the storage abstraction is not a file, but a container|persistent entities which replace both address spaces and file systems. A locus executes within a single container.
Reference: [Des95a] <author> Object Design. </author> <title> ObjectStore C++ API User Guide. Object Design, </title> <publisher> Inc., </publisher> <address> Burling-ton, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: Object database research and products emerged to address these needs [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment. <p> Ob-jectStore <ref> [Des95a] </ref>, a well-known commercial disk-image ODB, provides two general approaches to access control: (1) read and write access controls on files, directories, and databases, and (2) database access controls via a password.
Reference: [Des95b] <author> Object Design. </author> <title> ObjectStore C++ Performance, Release 4. Object Design, </title> <publisher> Inc., </publisher> <address> Burlington, Massachusetts, </address> <year> 1995. </year> <month> 145 </month>
Reference-contexts: For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion [KBC + 88], and ObServer [HZ87] use logical identifiers while Ob-jectStore <ref> [Des95b] </ref> uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier. <p> Different ODBs use different approaches to swizzling, or a mixture of approaches. Objectivity/DB never swizzles, instead using a resident object table to locate objects on every reference. ObjectStore, at the other extreme, maintains references in swizzled form at almost all times <ref> [Des95b] </ref>. In O 2 transactions specify at execution time whether they are to run in resident mode or in object-fault mode. In memory-resident mode the persistent roots accessed by the transaction are identified at the beginning of each transaction.
Reference: [Dra95] <author> Martin Drameirecky. </author> <type> Personal communication, </type> <year> 1995. </year>
Reference: [Eco96] <author> Lotus Notes: </author> <title> Enter the Intranet. </title> <journal> The Economist, </journal> <volume> 338(7948) </volume> <pages> 64-65, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Today many corporations are using Internet technology to support their enterprises. Intranets, corporate internal networks based on Internet technology, are currently in use by 22% of America's 1,000 biggest companies. It is estimated that 70% of sales of Internet software are used towards building such networks <ref> [Eco96] </ref>. Experts believe that the market opportunity for Intranet applications is 10 times larger than for Internet applications, which in turn are already a billion dollar business.
Reference: [Gat96] <author> Bill Gates. </author> <title> Transcript from speech at Microsoft Intranet Strategy Day. http://198.105.232.7:80/intranet/, June 1996. Microsoft Intranet Strategy Day, </title> <address> San Jose, CA. </address>
Reference-contexts: Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products [Sit, Cor, Ker, IBM, Inc]. Traditional database features are emerging in Intranet and Internet software|Microsoft considers transaction management and indexing to be core technologies for their business customers <ref> [Gat96] </ref> and Netscape has announced future products with fine-grained access control, i.e., fine-grained control over exactly which user can access which data (Catalog, Mail, and News Servers and Publishing System), logging (Proxy Server), and transaction support (Transaction Server for their Merchant System) [AtNPT96].
Reference: [Gil95] <author> George Gilder. </author> <title> The coming software shift. </title> <booktitle> Forbes ASAP, </booktitle> <pages> pages 147-162, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Introduction The world of computing is currently in the midst of a "fundamental break in the history of technology" 1 <ref> [Gil95] </ref>. As the infrastructure which supports computing paradigms shifts from the desktop focus of the personal computer to the network focus of the Internet and World Wide Web, the technological challenges we face will also evolve. Today many corporations are using Internet technology to support their enterprises.
Reference: [Hal96] <author> Tom R. Halfhill. </author> <title> UNIX vs Windows NT. </title> <journal> Byte, </journal> <pages> pages 42-52, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Experts believe that the market opportunity for Intranet applications is 10 times larger than for Internet applications, which in turn are already a billion dollar business. For example, Santa Cruz Organization, a relatively small software company, has about 200 servers on its private Intranet and only two Internet servers <ref> [Hal96] </ref>. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily for intra-organization communication [Hor96, Cor96]. In this environment of continuous network connections to numerous data sources, two of the most pressing issues are security and privacy.
Reference: [HM93] <author> Antony L. Hosking and J. Eliot B. Moss. </author> <title> Object fault handling for persistent programming languages: A performance evaluation. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1993. </year>
Reference-contexts: The reference following or object loading approach could be layered on top of the facilities provided by Opal to obtain a complete authorization solution in the context of a single-level store. Hosking and Moss <ref> [HM93, Hos96] </ref> experimented with a variety of implementations of persistent Smalltalk.
Reference: [Hor96] <author> Elisabeth Horwitt. </author> <title> Intranet intricacies. </title> <journal> Computerworld Client/Server Journal, </journal> <pages> pages 20-23, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: For example, Santa Cruz Organization, a relatively small software company, has about 200 servers on its private Intranet and only two Internet servers [Hal96]. At Simon & Schuster, one of the world's largest book publishers, 9,000 employees use Intranets daily for intra-organization communication <ref> [Hor96, Cor96] </ref>. In this environment of continuous network connections to numerous data sources, two of the most pressing issues are security and privacy.
Reference: [Hos96] <author> Antony L. Hosking. </author> <title> Residency check elimination for object-oriented persistent languages. </title> <booktitle> In Seventh International Workshop on Persistent Object Systems, </booktitle> <year> 1996. </year>
Reference-contexts: The reference following or object loading approach could be layered on top of the facilities provided by Opal to obtain a complete authorization solution in the context of a single-level store. Hosking and Moss <ref> [HM93, Hos96] </ref> experimented with a variety of implementations of persistent Smalltalk.
Reference: [Hug96] <author> Eric Hughes. </author> <type> Personal communication, </type> <year> 1996. </year>
Reference-contexts: Appendix A contains our implementation of the OO1 benchmark, including the three measured operations. Our OO1 Part and Connection class implementation is similar to ObjectStore's implementation of OO1 <ref> [Hug96] </ref>, with classes for sets and indexes added since they are not provided with Texas. The timing and benchmark structure is modeled after the Wisconsin OO7 benchmark implementation [oWDRG93].
Reference: [HZ87] <author> M. Hornick and S. B. Zdonik. </author> <title> A shared, segmented memory for an object-oriented database. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 5(1), </volume> <year> 1987. </year>
Reference-contexts: For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion [KBC + 88], and ObServer <ref> [HZ87] </ref> use logical identifiers while Ob-jectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [IBM] <institution> Business on the Internet: A mountain of opportunity amid a range of challenges. </institution> <note> http://www.internet.ibm.com/tier.htm. </note>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Sit, Cor, Ker, IBM, Inc] </ref>.
Reference: [Inc] <author> Object Design Inc. </author> <title> ObjectStore, the natural database solution for the web! http://www.odi.com/prodinfo/onweb/overview.html. </title>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Sit, Cor, Ker, IBM, Inc] </ref>.
Reference: [JK90] <author> Sushil Jajodia and Boris Kogan. </author> <title> Integrating an object-oriented data model with multilevel security. </title> <booktitle> In IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <year> 1990. </year> <month> 146 </month>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [JMD93] <author> Dirk Jonscher, Jonathan D. Moffett, and Klaus R. Dittrich. </author> <title> Complex subjects - or: The striving for complexity is ruling our world. </title> <booktitle> In Proceedings of the 7th IFIP Workshop on Database Security, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, BW94, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies.
Reference: [KBC + 88] <author> W. Kim, N. Ballou, H-T. Chou, J. F. Garza, D. Woelk, and J. Banerjee. </author> <title> Integrating an object-oriented programming system with a database system. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1988. </year>
Reference-contexts: For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone [MS90], Orion <ref> [KBC + 88] </ref>, and ObServer [HZ87] use logical identifiers while Ob-jectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [Ker] <author> Mitchell Kertzman. </author> <title> Focusing on a new platform for business applications. </title> <publisher> Sybase Corporation, </publisher> <address> http://www.sybase.com/inc/sybmag/strategy.html. </address>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Sit, Cor, Ker, IBM, Inc] </ref>.
Reference: [KGBW90] <author> W. Kim, J. Garza, N. Ballou, and D. Woelk. </author> <title> Architecture of the ORION next-generation database system. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The same object may be represented in all three places and even updated in one of them. O 2 solves this cache inconsistency problem by flushing all modified objects in the client cache back to the server before execution ([BDK91]). Another solution <ref> [KGBW90] </ref>, execution of the methods on both the client and the server, requires a complex postprocessing step to eliminate duplicates. Both of these solutions are fairly slow.
Reference: [Kim90] <author> Won Kim. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If a segment is not placed in its canonical location, all references to objects in the page must be reswizzled to adjust for the difference between the canonical and actual segment locations. 3.5.2 Handle Reference Architecture: Orion The Orion <ref> [Kim90] </ref> research prototype is an object server. Orion OIDs are logical, reflecting both the type of the object and the unique instance. The resident object table is hashed by OID and contains object handles, not direct pointers to objects.
Reference: [KTT89] <author> T. Keefe, W. T. Tsai, and B. Thuraisingham. </author> <title> SODA|a secure object-oriented database system. </title> <journal> Computers and Security, </journal> <volume> 8(6), </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [LAC + 96] <author> B. Liskov, A. Adya, M. Castro, M. Day, S. Ghemawat, R. Gruber, U. Maheshwari, A. C. Myers, and L. Shrira. </author> <title> Safe and efficient sharing of persistent objects in Thor. </title> <booktitle> In ACM Sigmod International Conference on Management of Data, </booktitle> <year> 1996. </year>
Reference-contexts: Most ODB servers allow client applications access to an entire object by caching it at the client in the address space of the application. (The principal exception is Thor <ref> [LAC + 96] </ref>, which keeps objects in a client DBMS buffer.) This allows an application direct access so no expensive network messages or interprocess boundary crossings are needed for subsequent access to the object.
Reference: [LLOW91] <author> C. Lamb, G. Landis, J. Orenstein, and D. Weinreg. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10), </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: A strategy called callback locking has been proposed as a way to improve intertransaction caching <ref> [LLOW91, CDF + 94] </ref>. Under this approach read locks are managed by the client and set when pages are accessed while write locks are managed by the server and explicitly requested by a client.
Reference: [Lun89] <author> T. Lunt. </author> <title> Multilevel security for object-oriented database systems. </title> <booktitle> In Proceedings of the 3rd IFIP Workshop on Database Security, </booktitle> <year> 1989. </year>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [LW88] <author> Frederick H. Lochovsky and Carson C. Woo. </author> <title> Role-based security in data base management systems. </title> <editor> In C. E. Landwehr, editor, </editor> <booktitle> Database Security: Status and Prospects, </booktitle> <pages> pages 209-222. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. Proposals for roles in object-oriented systems <ref> [LW88, Tin88] </ref> and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [Mic] <author> Data General, </author> <title> Digital, Intel, Intergraph, Network Appliance and Others Join Microsoft in Support of Common Internet 147 File System. </title> <note> http://www.microsoft.com/corpinfo/press/1996/jun96/cifs2pr.htm. Microsoft Press Release, June 13, </note> <year> 1996. </year>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology <ref> [Mic] </ref>. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products [Sit, Cor, Ker, IBM, Inc].
Reference: [ML92] <author> Jonathan K. Millen and Teresa F. Lunt. </author> <title> Security for object-oriented database systems. </title> <booktitle> In IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <pages> pages 260-272, </pages> <year> 1992. </year>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [Mor90] <author> M. Morgenstern. </author> <title> A security model for multilevel objects with bidirectional relationships. </title> <booktitle> In Proceedings of the 4th IFIP Workshop on Database Security, </booktitle> <year> 1990. </year>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [Mos92] <author> J. Eliot B. Moss. </author> <title> Working with persistent objects: To swizzle or not to swizzle. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(8), </volume> <month> August </month> <year> 1992. </year>
Reference-contexts: When the 21 collection of objects accessed by an application is known in advance, <ref> [Mos92] </ref> shows that lazy swizzling always costs more than eager swizzling. This study also supports the expectation that swizzling is advantageous if an application does enough computation with the swizzled objects. Swizzling is worthwhile if, on average, a swizzled reference is followed at least three times.
Reference: [MS90] <author> D. Maier and J. Stein. </author> <title> Development and implementation of an object-oriented DBMS. </title> <editor> In S. Zdonik and D. Maier, editors, </editor> <booktitle> Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: Structured combinations of logical and physical identifiers allow some location independence and provide some information about the physical location of an object. For example, an OID might contain the segment and page number in its high order bits and a logical slot number in its low-order bits. GemStone <ref> [MS90] </ref>, Orion [KBC + 88], and ObServer [HZ87] use logical identifiers while Ob-jectStore [Des95b] uses structured identifiers. In O 2 objects are associated with records in the underlying storage manager (WiSS) and, thus, the OID is the record's identifier.
Reference: [Obj90] <author> Objectivity. </author> <title> Objectivity Database System Overview. Objectivity, </title> <publisher> Inc., </publisher> <address> Menlo Park, California, </address> <year> 1990. </year>
Reference-contexts: Object database research and products emerged to address these needs [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment.
Reference: [Obj96] <institution> Objectivity. </institution> <type> Objectivity Technical Overview Version 4. </type> <institution> Objectivity, Inc., </institution> <address> Menlo Park, California, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Objectivity/DB's page server has been shown to require fewer instructions at the server process, cause less network delay at the client process, and use less network bandwidth than an object server <ref> [Obj96] </ref>. One disadvantage of the pure page-server architecture is that methods can only be executed at the client, thus requiring all pages containing objects in a collection to be transferred to the client even for a simple sequential scan.
Reference: [Ont89] <author> Ontologic. </author> <title> ONTOS Reference Manual. </title> <publisher> Ontologic, Inc., </publisher> <address> Billerica, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Object database research and products emerged to address these needs [Cat91]. Many object databases (ODBs) are available commercially <ref> [Des95a, Ont89, Obj90, BDK91, Cor94] </ref> and provide various tradeoffs between data modeling features, querying capabilities, and performance. Neither today's object nor relational databases, however, address the greater needs for security in today's widely networked environment.
Reference: [oWDRG93] <institution> University of Wisconsin DBMS Research Group. UW DBMS Software Projects. ftp://ftp.cs.wisc.edu/oo7/implementations/, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Our OO1 Part and Connection class implementation is similar to ObjectStore's implementation of OO1 [Hug96], with classes for sets and indexes added since they are not provided with Texas. The timing and benchmark structure is modeled after the Wisconsin OO7 benchmark implementation <ref> [oWDRG93] </ref>. To retrieve parts based on part ID (the lookup operation) we store each part ID and its OID in a 1000-entry hash table indexed by the part ID.
Reference: [PB93] <author> W. T. Polk and Lawrence E. Bassham. </author> <title> Security issues in the database language SQL. </title> <type> Technical report, </type> <institution> National Institute of Standards and Technology, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard <ref> [PB93] </ref>. Proposals for roles in object-oriented systems [LW88, Tin88] and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [RBKW91] <author> Fausto Rabitti, Elisa Bertino, Won Kim, and Darrell Woelk. </author> <title> A model of authorization for next-generation database systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(1) </volume> <pages> 88-131, </pages> <month> March </month> <year> 1991. </year> <month> 148 </month>
Reference-contexts: In open policies the default is to grant access in the absence of an authorization indicating denial. In closed and open policies the authorizations are said to be positive and negative, respectively. While the interactions between positive and negative authorizations can be quite complex <ref> [RBKW91] </ref>, some systems allow both types of authorizations. Effective group-based access controls can be simple or quite complex. In a simple group-based access control model each object is owned by one user, the owner, who specifies a group's permissions to access the object. <p> The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, BW94, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies. <p> At one extreme, each object can have its permissions specified explicitly. Alternatively, permissions may be implicit, requiring computation. Objects may `inherit' permissions from their class; default permissions may be inherited down the class hierarchy; a rule-based specification can be used; `weak' and `strong', positive and negative permissions as in <ref> [RBKW91] </ref>, may be used.
Reference: [RSC92] <author> Joel Richardson, Peter Schwarz, and Luis-Felipe Cabrera. CACL: </author> <title> Efficient fine--grained protection for objects. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1992. </year>
Reference-contexts: Thus lazy or eager checking, check once or check on every access|all will give the same result. Finally, the nature of any dynamic access control is left unspecified by the target model. For example, the target model permits delegation in the style of <ref> [RSC92] </ref>, where each executing method is a different principal with its own permissions. The target model does not support: * Mandatory access controls. <p> However, as with the structural approaches described earlier, the load-time behavioral approach is most suited to static access control models. For dynamic access control, we like the approach proposed in <ref> [RSC92] </ref>. 54 4.3 Managing Access Control Information Conceptually there are two types of access control information: principal and role information, and object permission information. The ODB must keep track of authorized database principals and the roles they are authorized to adopt.
Reference: [SCFY94] <author> Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. </author> <title> Role-based access control: A multi-dimensional view. </title> <booktitle> In Proceedings of the 10th Annual Computer Security Applications Conference, </booktitle> <pages> pages 54-62, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: While there is ongoing discussion about exactly what RBAC means, it is clear that RBAC will consolidate security in a unified service which can be managed while providing the flexibility and customizations required by individual applications <ref> [SCFY94] </ref>. Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. <p> The users, the types of access, and the data items themselves must be aggregated in some manner in order to reduce the sheer number of authorizations to be granted and revoked. Hence the most sophisticated proposals for database security (e.g., <ref> [RBKW91, BW94, JMD93, SCFY94] </ref>) categorize users into roles, and organize roles into an inheritance hierarchy to minimize the number of explicit authorizations that must be granted. Similarly, operations on data items, and the items themselves, are organized into hierarchies so that authorizations can be inherited up and down the hierarchies.
Reference: [Sit] <institution> Oracle Corporation Web Site. </institution> <note> http://www.oracle.com/. </note>
Reference-contexts: Currently the dominant type of repository for networked information servers is (hierarchical) file systems, including the recently announced Common Internet File System (CIFS), a remote collaborative file-sharing technology [Mic]. Databases, however, are gaining popularity on the Web. Gateways have been built between Web servers and most major database products <ref> [Sit, Cor, Ker, IBM, Inc] </ref>.
Reference: [SKW92] <author> Vivek Singhal, Sheetal Kakkad, and Paul Wilson. </author> <title> Texas: An efficient, portable persistent store. In Persistent Object Systems: </title> <booktitle> Proceedings of the Fifth International Workshop on Persistent Object Systems, </booktitle> <pages> pages 11-33, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: With Java's increasing popularity, we also expect more use of safe languages. In this section we describe the embodiment of both the object loading and reference following approaches in a prototype ODB, Texas <ref> [WK92, SKW92] </ref>, under the assumptions that any client superusers are trusted and that the application language is safe 1 . We choose Texas both because source code is available and Texas's disk-image architecture is viewed by many as providing the best performance of any ODB architecture.
Reference: [Ste91] <author> Daniel F. Sterne. </author> <title> On the buzzword "security policy". </title> <booktitle> In IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <year> 1991. </year>
Reference-contexts: The boundaries of a protection domain are typically drawn to encompass the set of processing and communication resources belonging to one organization. Some policies are more strict and ensure more protection than other policies. 1 It has been noted that the term security policy is imprecise <ref> [Ste91] </ref> and may refer to any or a combination of policies with respect to confidentiality, availability, reliability, human safety, accuracy, and general functional correctness.
Reference: [Thu89] <author> M. B. Thuraisingham. </author> <title> Mandatory security in object-oriented database systems. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <year> 1989. </year>
Reference-contexts: Proposals also distinguish between weak authorizations, which can be overridden at lower levels of a hierarchy, and strong authorizations, which cannot. [BW94] also considers how to support method-based authorization. While other recent work on authorization models for ODBs have been reported <ref> [JK90, KTT89, Lun89, ML92, Mor90, Thu89] </ref>, most of these are concerned with multilevel object models providing mandatory controls and none of them address the issues of fine-grained access control in today's client-server ODB environment.
Reference: [Tin88] <author> T. C. Ting. </author> <title> A user-role based data security approach. </title> <editor> In C. E. Landwehr, editor, </editor> <booktitle> Database Security: Status and Prospects, </booktitle> <pages> pages 187-208. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Support for roles is available in commercial products [Cor92] and is being considered as part of the emerging SQL3 standard [PB93]. Proposals for roles in object-oriented systems <ref> [LW88, Tin88] </ref> and more recent descriptions of RBAC characteristics demonstrate the usefulness of roles for controlling access to large data repositories. 2.2 Authorization Mechanisms Protection mechanisms provide the means for controlling access to resources according to an organization's authorization policy.
Reference: [WK92] <author> Paul R. Wilson and Sheetal V. Kakkad. </author> <title> Pointer swizzling at page fault time: Efficiently and compatibly supporting huge address spaces on standard hardware. </title> <booktitle> In International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 364-377, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: This identifier encodes a volume identifier, a page identifier within the volume, and a slot number which indirectly addresses a record within a page [BDK91]. Texas OIDs are 64-bit file offsets <ref> [WK92] </ref>. Objectivity/DB uses a physical page and offset OID. 3.2 Inter-object References Another architectural decision which impacts performance is the in-memory format of references between objects. In traditional databases the data is encapsulated by the query language. <p> With Java's increasing popularity, we also expect more use of safe languages. In this section we describe the embodiment of both the object loading and reference following approaches in a prototype ODB, Texas <ref> [WK92, SKW92] </ref>, under the assumptions that any client superusers are trusted and that the application language is safe 1 . We choose Texas both because source code is available and Texas's disk-image architecture is viewed by many as providing the best performance of any ODB architecture.
Reference: [YBA93] <author> Curtis Yarvin, Richard Bukowski, and Thomas Anderson. Anonymous RPC: </author> <title> Low latency protection in a 64-bit address space. </title> <booktitle> In Proceedings of the Summer USENIX Conference, </booktitle> <pages> pages 175-186, </pages> <month> June </month> <year> 1993. </year> <month> 149 </month>
Reference-contexts: In addition, it is fairly natural in an Intranet environment to trust these superusers that do exist. Finally, current research in operating system protection <ref> [YBA93] </ref> addresses issues of anonymous data placement to make it more difficult to find specific data.
References-found: 61

