URL: http://www.cs.washington.edu/homes/alon/site/files/levy-thesis.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib25.html
Root-URL: 
Title: IRRELEVANCE REASONING IN KNOWLEDGE BASED SYSTEMS  
Author: Alon Yitzchak Levy 
Degree: a dissertation submitted to the department of computer science and the committee on graduate studies of stanford university in partial fulfillment of the requirements for the degree of doctor of philosophy By  
Date: October 1993  
Abstract-found: 0
Intro-found: 1
Reference: [ Abiteboul and Hull, 1988 ] <author> Abiteboul, Serge and Hull, Richard 1988. </author> <title> Data functions, datalog and negation. </title> <booktitle> In Proceedings of ACM SIGMOD 1988 International Conference on Management of Data. </booktitle>
Reference-contexts: Follows from [ Kifer, 1988 ] Follows from [ Sagiv, 1988 ] No recursion + Decidable Decidable constraints Follows from Chapter 3 Chapter 5 Datalog Decidable Undecidable Chapter 3 Lemma 2.17 Lemma 2.16 Datalog with Decidable Undecidable constraints Chapter 3 Lemma 2.17 Lemma 2.16 General Horn rules Undecidable Follows from <ref> [ Abiteboul and Hull, 1988 ] </ref> .
Reference: [ Addanki et al., 1989 ] <author> Addanki, Sanjaya; Cremonini, R.; and Penberthy, J. </author> <year> 1989. </year> <title> Reasoning about assumptions in graphs of models. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Their approach also does not provide guarantees of sufficiency or simplicity. The idea of explicitly representing the differences between CMFs in an assumption class is similar to the graph of models by Addanki et al. <ref> [ Addanki et al., 1989 ] </ref> . Their work addresses the problem of selecting among complete models. Since the models in their graph are complete models instead of fragments, the space requirement of their approach increases exponentially as the number of possible modeling assumptions increases. <p> al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models <ref> [ Addanki et al., 1989 ] </ref> 170 Model simplification [ Weld, 1990; Williams, 1990a ] 170 Table 8.1: References to related work. to a new approach to research on reasoning with abstractions in which we investigate the properties of an abstraction by considering the irrelevance claims on which it is based.
Reference: [ Alchourron et al., 1985 ] <author> Alchourron, C.; Gardenfors, Peter; and Makinson, D. </author> <year> 1985. </year> <title> On the logic of theory change: Partial meet contraction and revision functions. </title> <journal> Journal of Symbolic Logic 50 </journal> <pages> 510-530. </pages>
Reference-contexts: There is little agreement on a single best definition, and the properties that are widely considered desirable of such an operator (e.g., the AGM postulates <ref> [ Alchourron et al., 1985 ] </ref> ) give us little information about the resulting properties of irrelevance. In this dissertation we address directly the notion of irrelevance. However, investigating connections between our analysis and belief revision is an interesting area of research.
Reference: [ Amarel, 1981 ] <author> Amarel, </author> <title> Saul 1981. On representations of problems of reasoning about actions. </title> <editor> In Webber, Bonnie L. and Nilsson, Nils J., editors 1981, </editor> <booktitle> Readings in Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA. </address>
Reference: [ Anderson and Belnap, 1975 ] <author> Anderson, Alan R. and Belnap, Nuel D. </author> <year> 1975. </year> <title> Entailment. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey. </address>
Reference-contexts: In our analysis, we are concerned with finding irrelevant formulas in a large KB, where the form of the KB and the inference mechanism play key roles. A related concept discussed in the formal logic community is of relevance logics (e.g., <ref> [ Anderson and Belnap, 1975; Dunn, 1986; Avron, 1992 ] </ref> ). The key idea in relevance logics is to modify the logic and the inference rules such that only relevant implications can be made. However, two issues are still largely open in this field. <p> This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics <ref> [ Anderson and Belnap, 1975; Avron, 1992 ] </ref> 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava
Reference: [ Avron, 1992 ] <author> Avron, </author> <title> Arnon 1992. </title> <journal> Whither relevance logic? Journal of Philosophical Logic 21 </journal> <pages> 243-281. </pages>
Reference-contexts: In our analysis, we are concerned with finding irrelevant formulas in a large KB, where the form of the KB and the inference mechanism play key roles. A related concept discussed in the formal logic community is of relevance logics (e.g., <ref> [ Anderson and Belnap, 1975; Dunn, 1986; Avron, 1992 ] </ref> ). The key idea in relevance logics is to modify the logic and the inference rules such that only relevant implications can be made. However, two issues are still largely open in this field. <p> This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics <ref> [ Anderson and Belnap, 1975; Avron, 1992 ] </ref> 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava
Reference: [ Bacchus and Yang, 1992 ] <author> Bacchus, Fahiem and Yang, </author> <title> Qiang 1992. The expected value of hierarchical problem-solving. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. </booktitle> <pages> 369-374. </pages>
Reference-contexts: Additional work on automatically generating abstractions is described in [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] . Work on analysis of the utility of abstractions is described in <ref> [ Knoblock, 1990; Bacchus and Yang, 1992 ] </ref> . Chapter 7 Automated Modeling of Physical Systems The previous chapter described how relevance reasoning can play a key role in facilitating reasoning in complex domains that require extensive use of abstractions.
Reference: [ Bacchus et al., 1993 ] <author> Bacchus, F.; Grove, A. J.; Halpern, J. Y.; and Koller, D. </author> <year> 1993. </year> <title> Statistical foundations for default reasoning. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence. </booktitle>
Reference: [ Blakeley et al., 1989 ] <author> Blakeley, J. A.; Coburn, N.; and Larson, P. A. </author> <year> 1989. </year> <title> Updating derived relations: detecting irrelevant and autonomously computable updates. Transactions of Database Systems 14(3) </title> <type> 369-400. 193 194 BIBLIOGRAPHY </type>
Reference-contexts: The question of detecting when a query is independent of an update is closely related to the notion of irrelevance. In Chapter 5, we show that definitions of independence investigated by Elkan [ Elkan, 1990 ] and Blakeley et al <ref> [ Blakeley et al., 1989 ] </ref> are equivalent to weak irrelevance (specifically, W I (; ; ; DI 1 ; D )). This observation enabled us to develop new algorithms for detecting independence. <p> The result provides new decidable cases for independence and weak irrelevance and sound algorithms for the general case. Our results significantly extend the known previous results on detecting independence. Specifically, it is shown that the results of <ref> [ Blakeley et al., 1989; Elkan, 1990 ] </ref> only capture strong irrelevance in datalog knowledge bases without recursion with additional restrictions on the rules. Our results extend the previous ones in two ways. <p> Both P + and P are equivalent to the original program, and therefore, the query adultDriver (X) is independent of the insertion and deletion updates of P u . 5.2.1 Understanding Previous Work Relating the independence problem to irrelevance enables us to understand better previous work on independence by <ref> [ Blakeley et al., 1989 ] </ref> and [ Elkan, 1990 ] . Both of them considered restricted languages in which weak irrelevance is the same as strong irrelevance. The result of Blakeley et al. [ Blakeley et al., 1989 ] applies just to conjunctive queries (cf. [ Ullman, 1989 ] ), <p> Relating the independence problem to irrelevance enables us to understand better previous work on independence by <ref> [ Blakeley et al., 1989 ] </ref> and [ Elkan, 1990 ] . Both of them considered restricted languages in which weak irrelevance is the same as strong irrelevance. The result of Blakeley et al. [ Blakeley et al., 1989 ] applies just to conjunctive queries (cf. [ Ullman, 1989 ] ), i.e., knowledge bases in which the antecedents of every rule are EDB predicates. Furthermore, the rules are restricted such that every predicate can only appear once in the antecedent. <p> INDEPENDENCE OF QUERIES FROM UPDATES 5.4.1 Related Work As discussed throughout the chapter, Blakeley et al. <ref> [ Blakeley et al., 1989 ] </ref> and Elkan [ Elkan, 1990 ] have studied the problem of independence. In summary, they have considered the problem for restricted languages in which strong irrelevance is the same as weak irrelevance. Blakeley et al. consider non-recursive knowledge bases without interpreted predicates. <p> evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence <ref> [ Blakeley et al., 1989; Elkan, 1990 ] </ref> 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992
Reference: [ Bruynooghe et al., 1989 ] <author> Bruynooghe, Maurice; De-Schreye, Danny; and Krekels, B. </author> <year> 1989. </year> <title> Compiling control. </title> <note> Journal of Logic Programming (6) 135-162. </note>
Reference-contexts: Therefore the cost of building the tree can be amortized over many queries. The query-tree is related to several graph-like structures discussed in the literature, such as connection graphs [ Kowalski, 1975 ] , problem space graphs [ Etzioni, 1993 ] , compilation graphs <ref> [ Bruynooghe et al., 1989 ] </ref> and rule-goal graphs [ Ullman, 1989 ] . The main property distinguishing the query-tree from other structures is the principled treatment of recursion and interpretable constraints. <p> Several other authors have considered static analysis of rules for different purposes, such as explanation based learning [ Etzioni, 1993 ] , partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] , automated reasoning <ref> [ Kowalski, 1975; Bruynooghe et al., 1989 ] </ref> and deductive databases [ Srivastava and Ramakrishnan, 1992; Ullman, 1989 ] . <p> Some have also used graph-like representations of the rules, such as problem space graphs [ Etzioni, 1993 ] , connection graphs [ Kowalski, 1975 ] , compilation graphs <ref> [ Bruynooghe et al., 1989 ] </ref> and rule/goal graphs [ Ullman, 1989 ] . Others have used rule folding/unfolding in their analysis.
Reference: [ Bruynooghe et al., 1991 ] <author> Bruynooghe, Maurice; De-Schreye, Danny; and Martens, </author> <title> Bern 1991. A general criterion for avoiding infinite unfolding during partial deduction of logic programs. </title> <booktitle> In Proceedings of the International Symposium on Logic Programming. </booktitle> <pages> 117-131. </pages>
Reference: [ Carnap, 1950 ] <author> Carnap, R. </author> <year> 1950. </year> <title> Logical Foundations of Probability. </title> <publisher> University of Chicago Press, Chicago. </publisher>
Reference-contexts: However, most of the time researchers use the term informally. Formal analyses of irrelevance have been discussed by philosophers as early as [ Keynes, 1921 ] , <ref> [ Carnap, 1950 ] </ref> and [ Gardenfors, 1978 ] . The main thrust of these analyses was to try to capture our common sense notions of irrelevance by a formal definition. <p> Two Possible Approaches: Common Sense Formalization vs. Problem solving Analysis Broadly, we distinguish two possible approaches to analyzing irrelevance. The first approach, which has been pursued by several philosophers ( <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> ), is to try to capture our common sense notion of irrelevance with a formal definition. <p> Finally, strong irrelevance satisfies several properties that have been argued to be natural for the common sense notion of irrelevance (such as closure under union and some forms of monotonicity). The notion of irrelevance has been formally investigated in the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> . As stated earlier, the focus of the discussion there was on formalizing a notion of irrelevance that would fit common sense notions of the word. <p> This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni,
Reference: [ Chandra et al., 1981 ] <author> Chandra, Ashok; Kozen, Dexter; and Stockmeyer, </author> <title> Larry 1981. Alternation. </title> <journal> Journal of the ACM 28(1): </journal> <pages> 114-133. </pages>
Reference-contexts: Proof of Theorem 3.26 We begin by considering the case of SI (r; q; P ; DI 2 ; D q ) when the rules have the predicate 6=. The theorem is proved by reducing the acceptance problem of a linear-space alternating Turing machine (ATM) <ref> [ Chandra et al., 1981 ] </ref> to the problem of finding irrelevance of rules.
Reference: [ Chang, 1979 ] <author> Chang, C. L. </author> <year> 1979. </year> <title> Resolution plans in theorem proving. </title> <booktitle> In Proceedings of the Sixth International Joint Conference on Artificial Intelligence. </booktitle> <pages> 143-148. </pages>
Reference-contexts: However, connection graphs only capture a subset of the possible dependencies between clauses. Specifically, they only show that two clauses connected to a link are unifiable, but say nothing about the relationship between clauses connected via longer paths in the graph. Other work <ref> [ Sickel, 1976; Chang, 1979 ] </ref> has considered following only certain walks on the graph, however, these walks are not guaranteed to encode valid derivations, as are the paths encoded in the query-tree. <p> irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs <ref> [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] </ref> 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991
Reference: [ Clancey, 1983 ] <author> Clancey, William J. </author> <year> 1983. </year> <title> The advantages of abstract control knowledge in expert system design. </title> <booktitle> In Proceedings of the Third National Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 74-78. </pages>
Reference-contexts: issue: * Although the speedups are significantly bigger using the first set of rules in each pair, we still achieve significant savings even when the rules are carefully crafted such that the constraints are used to control the search. * Writing rules with such built-in control has many disadvantages ( <ref> [ Clancey, 1983 ] </ref> ). It is extremely difficult to write such rules in practice and is a very error-prone task.
Reference: [ Cutkosky et al., 1993 ] <author> Cutkosky, Mark R.; Engelmore, Robert S.; Fikes, Richard E.; Genesereth, Michael R.; Gruber, Thomas R.; Mark, William S.; Tenenbaum, Jay M.; and Weber, Jay C. </author> <year> 1993. </year> <title> PACT: An experiment in integrating concurrent engineering systems. </title> <booktitle> IEEE Computer 26(1) </booktitle> <pages> 28-37. </pages>
Reference-contexts: In such systems, updates in one knowledge base may trigger updates in an other. For example, an important application that gives rise to such a setting is concurrent engineering <ref> [ Cutkosky et al., 1993; Levitt et al., 1991 ] </ref> , where several agents may be working on different parts of one design. Design decisions made by one agent may impose constraints on the possible design decisions of another agent, and therefore must be communicated.
Reference: [ Dalal, 1988 ] <author> Dalal, </author> <title> Mukesh 1988. Investigations into the theory of knowledge base revision: preliminary report. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle> <pages> 475-479. </pages> [ <editor> de Kleer and Brown, 1984 ] de Kleer, J. and Brown, J. S. </editor> <year> 1984. </year> <title> A qualitative physics based on confluences. </title> <booktitle> Artificial Intelligence 24 </booktitle> <pages> 7-83. </pages> [ <editor> de Kleer and Brown, 1986 ] de Kleer, J. and Brown, J. S. </editor> <year> 1986. </year> <title> Theories of causal ordering. </title> <booktitle> Artificial Intelligence </booktitle> 29:33-61. [ de Kleer, 1986 ] de Kleer, J. 1986. An assumption-based TMS. Artificial Intelligence 28:127-162. 
Reference: [ Dunn, 1986 ] <author> Dunn, </author> <title> Michael 1986. Relevance logic and entailment. </title> <editor> In Gabbay, Dov and Guenthner, Franz, editors 1986, </editor> <booktitle> Handbook of Philosophical Logic, Volume III. Alternatives to Classical Logic. </booktitle> <address> D. </address> <publisher> Reidel Publishing Company, Dordrecht, Holland. </publisher> <pages> 117-224. BIBLIOGRAPHY 195 </pages>
Reference-contexts: In our analysis, we are concerned with finding irrelevant formulas in a large KB, where the form of the KB and the inference mechanism play key roles. A related concept discussed in the formal logic community is of relevance logics (e.g., <ref> [ Anderson and Belnap, 1975; Dunn, 1986; Avron, 1992 ] </ref> ). The key idea in relevance logics is to modify the logic and the inference rules such that only relevant implications can be made. However, two issues are still largely open in this field.
Reference: [ Elkan, 1990 ] <author> Elkan, </author> <title> Charles 1990. Independence of logic database queries and updates. </title> <booktitle> In Proceedings of the 9th ACM Symp. on Principles of Database Systems. </booktitle> <pages> 154-160. </pages>
Reference-contexts: INTRODUCTION The framework is shown to be general in that it encompasses definitions discussed in the past. These include definitions given by Subramanian [ Subramanian, 1989 ] and definitions given in analysis of databases [ Srivastava and Ramakrishnan, 1992 ] and <ref> [ Elkan, 1990 ] </ref> . <p> The question of detecting when a query is independent of an update is closely related to the notion of irrelevance. In Chapter 5, we show that definitions of independence investigated by Elkan <ref> [ Elkan, 1990 ] </ref> and Blakeley et al [ Blakeley et al., 1989 ] are equivalent to weak irrelevance (specifically, W I (; ; ; DI 1 ; D )). This observation enabled us to develop new algorithms for detecting independence. <p> The result provides new decidable cases for independence and weak irrelevance and sound algorithms for the general case. Our results significantly extend the known previous results on detecting independence. Specifically, it is shown that the results of <ref> [ Blakeley et al., 1989; Elkan, 1990 ] </ref> only capture strong irrelevance in datalog knowledge bases without recursion with additional restrictions on the rules. Our results extend the previous ones in two ways. <p> The query predicate adultDriver is independent of the deletion update P u 1 because the existence of non-drivers under the age of 18 does not affect the ability to derive that a person can drive. Several properties of independence are shown by Elkan <ref> [ Elkan, 1990 ] </ref> . In particular, he showed the following. Lemma 5.6: Consider a query program P and an update program P u . <p> IRRELEVANCE, INDEPENDENCE AND EQUIVALENCE 109 q (a) from P [ E 1 U; E 2 ; : : : ; E n , and so q (a) 2 P (E 1 U; : : : ; E n ) and the independence holds. Elkan <ref> [ Elkan, 1990 ] </ref> shows that detecting independence in general is undecidable. This also follows from Lemma 5.9, since weak irrelevance is undecidable in general. However, viewing independence as weak irrelevance provides insight into the problem of detecting independence. <p> equivalent to the original program, and therefore, the query adultDriver (X) is independent of the insertion and deletion updates of P u . 5.2.1 Understanding Previous Work Relating the independence problem to irrelevance enables us to understand better previous work on independence by [ Blakeley et al., 1989 ] and <ref> [ Elkan, 1990 ] </ref> . Both of them considered restricted languages in which weak irrelevance is the same as strong irrelevance. <p> INDEPENDENCE OF QUERIES FROM UPDATES 5.4.1 Related Work As discussed throughout the chapter, Blakeley et al. [ Blakeley et al., 1989 ] and Elkan <ref> [ Elkan, 1990 ] </ref> have studied the problem of independence. In summary, they have considered the problem for restricted languages in which strong irrelevance is the same as weak irrelevance. Blakeley et al. consider non-recursive knowledge bases without interpreted predicates. <p> evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence <ref> [ Blakeley et al., 1989; Elkan, 1990 ] </ref> 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992
Reference: [ Ellman, 1990 ] <author> Ellman, Thomas, </author> <title> editor 1990. Working Notes of the Automatic Generation of Approximations and Abstractions Workshop. </title> <journal> American Association for Artificial Intelligence. </journal>
Reference-contexts: Second, by removing the formulas that distinguish between the types of cars, we reduce the size of the space that needs to be searched. Recently, research on abstractions and approximations has received renewed attention <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . However, two key problems in this field remain largely open. The first is how a system can automatically create an abstraction that is well suited to a particular query. <p> Knoblock et al. [ Knoblock et al., 1991 ] present other examples of possible relationships between abstract and concrete plans which are then used to prune the search of a planner. Additional work on automatically generating abstractions is described in <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . Work on analysis of the utility of abstractions is described in [ Knoblock, 1990; Bacchus and Yang, 1992 ] .
Reference: [ Ellman, 1992 ] <author> Ellman, Thomas, </author> <title> editor 1992. </title> <booktitle> Working Notes of the Workshop on Approximation and Abstraction of Computational Theories. American Association for Artificial Intelligence. </booktitle>
Reference-contexts: Second, by removing the formulas that distinguish between the types of cars, we reduce the size of the space that needs to be searched. Recently, research on abstractions and approximations has received renewed attention <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . However, two key problems in this field remain largely open. The first is how a system can automatically create an abstraction that is well suited to a particular query. <p> Knoblock et al. [ Knoblock et al., 1991 ] present other examples of possible relationships between abstract and concrete plans which are then used to prune the search of a planner. Additional work on automatically generating abstractions is described in <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . Work on analysis of the utility of abstractions is described in [ Knoblock, 1990; Bacchus and Yang, 1992 ] .
Reference: [ Enderton, 1972 ] <author> Enderton, Herbert B. </author> <year> 1972. </year> <title> A Mathematical Introduction to Logic. </title> <publisher> Academic Press, Inc., </publisher> <address> Orlando, Florida. </address>
Reference-contexts: We call such a representation 147 148 CHAPTER 7. AUTOMATED MODELING OF PHYSICAL SYSTEMS a model for the system. In this chapter, a model refers to a representation of a system. We use the phrase logical-model to refer to the concept of a model in Mathematical Logic (cf. <ref> [ Enderton, 1972 ] </ref> ). For complex physical systems, there is typically no single model of the system that will be adequate and enable efficient inference for all possible queries.
Reference: [ Etherington et al., 1989 ] <author> Etherington, David; Borgida, Alex; Brachman, Ronald J.; and Kautz, </author> <title> Henry 1989. Vivid knowledge and tractable reasoning: Preliminary report. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 1146-1152. </pages>
Reference: [ Etzioni and Minton, 1992 ] <author> Etzioni, Oren and Minton, </author> <title> Steven 1992. Why EBL produces overly-specific knowledge: A critique of the PRODIGY approaches. </title> <booktitle> In Proceedings of the Machine Learning Conference. </booktitle>
Reference-contexts: This happens when the learned descriptions contain irrelevant information. Using overly specific concept descriptions often degrades the preformance of systems (e.g., EBL). Removing irrelevant information is key to making such concept descriptions useful in prob lem solving <ref> [ Etzioni and Minton, 1992 ] </ref> . This dissertation studies the issues involved in reasoning about irrelevance. It presents a general framework and specific methods that enable a system to reason about irrelevance of knowledge to a query. <p> In EBL, new rules are added to the knowledge base that compress sequences of inference into a single rule. The sequences are learned by examining 98 CHAPTER 4. USES OF THE QUERY-TREE derivations of observed queries. The key issue in this approach is the utility of the added rules <ref> [ Minton, 1988; Etzioni and Minton, 1992 ] </ref> . Adding too many rules may have the inverse effect of slowing down inference. Moreover, the learned rules may be long and require many unification operations.
Reference: [ Etzioni, 1990 ] <author> Etzioni, </author> <title> Oren 1990. Why PRODIGY/EBL works. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning <ref> [ Etzioni, 1993; Etzioni, 1990 ] </ref> 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation:
Reference: [ Etzioni, 1993 ] <author> Etzioni, </author> <title> Oren 1993. Acquiring search-control knowledge via static analysis. </title> <booktitle> Artificial Intelligence 62. </booktitle>
Reference-contexts: Therefore the cost of building the tree can be amortized over many queries. The query-tree is related to several graph-like structures discussed in the literature, such as connection graphs [ Kowalski, 1975 ] , problem space graphs <ref> [ Etzioni, 1993 ] </ref> , compilation graphs [ Bruynooghe et al., 1989 ] and rule-goal graphs [ Ullman, 1989 ] . The main property distinguishing the query-tree from other structures is the principled treatment of recursion and interpretable constraints. <p> As we see in the next chapter, the query-tree will also lend itself to other natural usages. Several other authors have considered static analysis of rules for different purposes, such as explanation based learning <ref> [ Etzioni, 1993 ] </ref> , partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] , automated reasoning [ Kowalski, 1975; Bruynooghe et al., 1989 ] and deductive databases [ Srivastava and Ramakrishnan, 1992; Ullman, 1989 ] . <p> Some have also used graph-like representations of the rules, such as problem space graphs <ref> [ Etzioni, 1993 ] </ref> , connection graphs [ Kowalski, 1975 ] , compilation graphs [ Bruynooghe et al., 1989 ] and rule/goal graphs [ Ullman, 1989 ] . Others have used rule folding/unfolding in their analysis. <p> Their techniques cannot be extended to the cases covered by our general method. Another important difference is the size of the query-tree, which depends only on the arity of the predicates. In contrast, in previous tree-like structures (e.g., <ref> [ Etzioni, 1993 ] </ref> ), the termination condition of the tree involves checking whether a node is isomorphic to one of its ancestors. This leads to a tree whose size can be exponential in the number of rules. 11 Obtained simultaneously with ours. 76 CHAPTER 3. <p> The key issue in this approach is the utility of the added rules [ Minton, 1988; Etzioni and Minton, 1992 ] . Adding too many rules may have the inverse effect of slowing down inference. Moreover, the learned rules may be long and require many unification operations. Etzioni <ref> [ Etzioni, 1993 ] </ref> has shown that much of the speedups obtained by EBL can be obtained by merely doing static analysis of the rules in the knowledge base. <p> literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning <ref> [ Etzioni, 1993; Etzioni, 1990 ] </ref> 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation:
Reference: [ Fagin et al., 1983 ] <author> Fagin, Ronald; Ullman, Jeffrey; and Vardi, </author> <title> Moshe 1983. On the semantics of updates in databases. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems. </booktitle> <pages> 352-365. </pages>
Reference: [ Falkenhainer and Forbus, 1991 ] <author> Falkenhainer, Brian and Forbus, </author> <title> Ken 1991. Compositional modeling: Finding the right model for the job. </title> <booktitle> Artificial Intelligence 51 </booktitle> <pages> 95-143. </pages>
Reference-contexts: Briefly, the problem we consider can be formulated as follows. The input consists of three elements: * Domain theory * A system description. 1.2. OVERVIEW OF THE SOLUTIONS 11 * A query about the system. The domain theory consists of a set of model fragments <ref> [ Falkenhainer and Forbus, 1991 ] </ref> . Each model fragment describes a single phenomenon in the physical world. <p> The algorithm has several advantages over previous algorithms [ Nayak, 1992a; Falkenhainer and Forbus, 1991; Addanki et al., 1989 ] . First, it addresses the problem of formulating a model for simulation without creating a complete envisionment of the possible states (as in <ref> [ Falkenhainer and Forbus, 1991 ] </ref> ). Second, the following of possible causal paths by the algorithm frees the user from specifying possible causal interactions explicitly (as in the component interaction heuristic [ Nayak, 1992a ] ). <p> In contrast, our analysis of irrelevance assumes that the underlying logic remains unchanged. Within AI, the notion of irrelevance was used rather informally in various works, such as RLL [ Greiner, 1980 ] and compositional modeling <ref> [ Falkenhainer and Forbus, 1991 ] </ref> . Irrelevance was investigated extensively in the context of probabilistic reasoning [ Pearl, 1988 ] . However, in that context, irrelevance has a natural definition based on the notion of conditional independence. <p> Consequently, the goal of the automated modeling problem is to find a model for a system that is best suited for a specific query. 7.1.1 Compositional Modeling We construct a model for a given physical system based on the Compositional Modeling approach described in <ref> [ Falkenhainer and Forbus, 1991 ] </ref> . In this approach, a physical situation is modeled as a collection of model fragments. Each model fragment represents some atomic aspect of a physical object or a physical phenomenon. <p> ordering f j of c j such that the causal relations among variables in c i (given by f i ) are a subset of the causal relations among variables in c j (given by f j ). 5 The term assumption-class is used in order to be consistent with <ref> [ Falkenhainer and Forbus, 1991 ] </ref> , not because it is especially appropriate. 154 CHAPTER 7. <p> The constraints in C may also be heuristic in nature. For example, the following constraints are a variation on the object expansion heuristic used in <ref> [ Falkenhainer and Forbus, 1991 ] </ref> . <p> It should be noted that the library coherence assumption is made implicitly in <ref> [ Falkenhainer and Forbus, 1991 ] </ref> . <p> 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling <ref> [ Falkenhainer and Forbus, 1991 ] </ref> 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification [ Weld, 1990; Williams, 1990a ] 170 Table 8.1: References to related work. to a new approach to research on reasoning with abstractions in which
Reference: [ Farquhar et al., 1993 ] <author> Farquhar, Adam; Bobrow, Danny; Falkenhainer, Brian; Fikes, Richard; Forbus, Kenneth; Gruber, Thomas; Iwasaki, Yumi; and Kuipers, </author> <month> Ben-jamin </month> <year> 1993. </year> <title> A compositional modeling language. </title> <institution> Knowledge Systems Laboratory Technical Report KSL-93-53, Stanford University, Stanford, California. </institution> <address> 196 BIBLIOGRAPHY </address>
Reference-contexts: Variables: These are time dependent variables associated with the participants in a model fragment instance. We distinguish two kinds of variables. The first, which are also called quantities, are variables that are continuous over time (e.g., 1 For a complete formal discussion of model fragments, see <ref> [ Farquhar et al., 1993 ] </ref> . The description below includes only the aspects relevant to our discussion. 7.1.
Reference: [ Fikes et al., 1991 ] <author> Fikes, Richard; Cutkosky, Mark; Gruber, Thomas; and Van Baalen, </author> <title> Jeffrey 1991. Knowledge sharing technology, project overview. </title> <note> Knowledge Systems Laboratory technical report No. KSL 91-71. </note>
Reference-contexts: In order to achieve efficient performance, an inference engine must be able 1 2 CHAPTER 1. INTRODUCTION to abstract automatically the representation by removing irrelevant distinctions in the representation. Both of these issues will become even more important in the context of future large scale AI systems (e.g., <ref> [ Fikes et al., 1991; Genesereth, 1992 ] </ref> ). Such systems will have access to large amounts of knowledge coming from multiple autonomous sources. The knowledge will overlap in many ways and will be represented in multiple levels of abstraction.
Reference: [ Forbus, 1984 ] <author> Forbus, Kenneth D. </author> <year> 1984. </year> <title> Qualitative process theory. </title> <booktitle> Artificial Intelligence 24 </booktitle> <pages> 85-168. </pages>
Reference-contexts: It should be noted that the library coherence assumption is made implicitly in [ Falkenhainer and Forbus, 1991 ] . In fact, if we assume (as in Qualitative Process Theory <ref> [ Forbus, 1984 ] </ref> ) that all equations are uniquely causally oriented, then the library coherence assumption follows when we make the causal approximations assumption and the assumption that the most complicated scenario model is adequate.
Reference: [ Gardenfors, 1978 ] <author> Gardenfors, </author> <title> Peter 1978. On the logic of relevance. </title> <booktitle> Sythese 37 </booktitle> <pages> 351-367. </pages>
Reference-contexts: However, most of the time researchers use the term informally. Formal analyses of irrelevance have been discussed by philosophers as early as [ Keynes, 1921 ] , [ Carnap, 1950 ] and <ref> [ Gardenfors, 1978 ] </ref> . The main thrust of these analyses was to try to capture our common sense notions of irrelevance by a formal definition. Most of the work focuses on formulating properties of the notion of irrelevance and finding definitions that satisfy the properties. <p> To do so, we analyze irrelevance at the level of the possible derivations (or more generally, solution paths) that a problem solver can pursue in the solution of a goal. In contrast, other analyses have been at the model theoretic level <ref> [ Gardenfors, 1978 ] </ref> or the meta-theoretic level [ Sub-ramanian, 1989 ] . Furthermore, we do not purport to provide a single best definition of irrelevance. Instead, we provide a space of possible definitions of irrelevance and analyze how the properties of irrelevance change as we move in the space. <p> Two Possible Approaches: Common Sense Formalization vs. Problem solving Analysis Broadly, we distinguish two possible approaches to analyzing irrelevance. The first approach, which has been pursued by several philosophers ( <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> ), is to try to capture our common sense notion of irrelevance with a formal definition. <p> It may seem that the second question can be considered an instance of the first by equating and E. 2 However, several assumptions made in addressing the first question (e.g., <ref> [ Gardenfors, 1978 ] </ref> ) make it impractical to use the solutions for the second question. For example, one assumption is that any formula f 2 E will be considered irrelevant to the query (since it is already known and does not change the state of affairs). <p> Finally, strong irrelevance satisfies several properties that have been argued to be natural for the common sense notion of irrelevance (such as closure under union and some forms of monotonicity). The notion of irrelevance has been formally investigated in the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> . As stated earlier, the focus of the discussion there was on formalizing a notion of irrelevance that would fit common sense notions of the word. <p> This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni,
Reference: [ Gardenfors, 1988 ] <author> Gardenfors, </author> <title> Peter 1988. Knowledge in Flux: Modeling the Dynamics of Epistemic States. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: ISSUES IN ANALYZING IRRELEVANCE 17 The notion of irrelevance also plays an important role in designing algorithms for abductive reasoning [ Levesque, 1989 ] and for belief revision <ref> [ Gardenfors, 1988 ] </ref> . 2.2 Issues in Analyzing Irrelevance In this section we discuss several of the issues that arise in an analysis of irrelevance, and provide the motivations underlying our approach.
Reference: [ Geffner and Pearl, 1990 ] <author> Geffner, Hector and Pearl, </author> <title> Judea 1990. A framework for reasoning with defaults. </title> <editor> In Kyburg, H.E.; Loui, R.; and Carlson, G, editors 1990, </editor> <title> Knowledge Representation and Defeasible Reasoning. </title> <publisher> Academic Press, </publisher> <address> Dordrecht, Netherlands. </address>
Reference-contexts: Consequently, the inferences made depend in subtle ways on which formulas are considered. A key property that has been the focus of several non-monotonic formalisms (e.g., <ref> [ Pearl, 1990; Geffner and Pearl, 1990 ] </ref> ) is designing reasoning schemes in which the addition of irrelevant formulas does not change the conclusions.
Reference: [ Genesereth and Nilsson, 1987 ] <author> Genesereth, Michael R. and Nilsson, Nils J. </author> <year> 1987. </year> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA. </address>
Reference-contexts: Tautologies can be shown to be weakly irrelevant (with respect to DI 1 and D ) and therefore are removed by the tautology elimination strategy <ref> [ Genesereth and Nilsson, 1987 ] </ref> . The question of detecting when a query is independent of an update is closely related to the notion of irrelevance. <p> There are many ways of defining minimality of derivations. Here, we consider three possible definitions. Recall that 9 A literal is pure if and only if it has no instance that is complementary to an instance of another literal in the knowledge base <ref> [ Genesereth and Nilsson, 1987 ] </ref> . 2.3. A SPACE OF DEFINITIONS 29 a derivation is a sequence ff 1 ; : : : ; ff n , and it can be viewed as a tree formed by the subgoal relation. The following are three possible definitions of minimality. <p> To facilitate this check, the following theorem provides a syntactic condition for independence. We assume that a formula C is given in clause form (cf. <ref> [ Genesereth and Nilsson, 1987 ] </ref> ). A literal in a clause is negative if it is a negation of an atomic formula (e.g., :q (X) is a negative literal, while p (X; Y ) is a positive literal).
Reference: [ Genesereth, 1992 ] <author> Genesereth, Michael R. </author> <year> 1992. </year> <title> An agent-based framework for software interoperability. </title> <booktitle> In Proceedings of the Software Technology Conference, </booktitle> <address> Los Angeles, CA. </address>
Reference-contexts: In order to achieve efficient performance, an inference engine must be able 1 2 CHAPTER 1. INTRODUCTION to abstract automatically the representation by removing irrelevant distinctions in the representation. Both of these issues will become even more important in the context of future large scale AI systems (e.g., <ref> [ Fikes et al., 1991; Genesereth, 1992 ] </ref> ). Such systems will have access to large amounts of knowledge coming from multiple autonomous sources. The knowledge will overlap in many ways and will be represented in multiple levels of abstraction. <p> This problem is primarily important because it enables us to save the computation needed to reevaluate a query after updates. Detecting independence is also a key issue in developing heterogeneous and distributed knowledge base systems <ref> [ Genesereth, 1992; Litwin et al., 1990 ] </ref> . In such systems, updates in one knowledge base may trigger updates in an other.
Reference: [ Giunchiglia and Walsh, 1992 ] <author> Giunchiglia, Fausto and Walsh, </author> <title> Toby 1992. A theory of abstraction. </title> <booktitle> Artificial Intelligence 56 (3). </booktitle>
Reference-contexts: The contribution of 6.5. DISCUSSION AND RELATED WORK 145 our work on predicate refinements is in providing a logical justification for when a predicate abstraction is appropriate for a given query and providing algorithms for automatically verifying that the justification holds. Giunchiglia and Walsh <ref> [ Giunchiglia and Walsh, 1992 ] </ref> present a theory of abstraction in which they identify two classes of abstractions. The first, TD-abstractions, requires that any formula that is derivable from the abstract knowledge base must also be derivable from the original knowledge base. <p> from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction <ref> [ Giunchiglia and Walsh, 1992 ] </ref> 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification
Reference: [ Graham et al., 1989 ] <author> Graham, Ronald L.; Knuth, Donald E.; and Patashnik, </author> <title> Oren 1989. Concrete Mathematics: A Foundation for Computer Science. </title> <publisher> Addison Wes-ley. </publisher>
Reference-contexts: The number of different atoms of p is the number of possible variable patterns of the arguments of p, which is the number of ways to partition the arguments of p into equivalence classes. This number is exponential in the arity of p (cf. <ref> [ Graham et al., 1989 ] </ref> , pg. 244). Therefore, the number of atoms that may appear in a tag is exponential in the maximum arity of predicates in P. Consequently, since a tag is a set of atoms, the number of possible tags is doubly exponential in the arity.
Reference: [ Greiner and Jurisica, 1992 ] <author> Greiner, Russell and Jurisica, </author> <title> Igor 1992. A statistical approach to solving the EBL utility problem. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. </booktitle>
Reference: [ Greiner, 1980 ] <author> Greiner, Russell 1980. RLL-1: </author> <title> A representation language language. Stanford Heuristic Programming Project, </title> <note> HPP-80-9 (Working Paper). </note>
Reference-contexts: The first is devising clean and intuitive semantics for these logics, and the second is providing tractable inference for them. In contrast, our analysis of irrelevance assumes that the underlying logic remains unchanged. Within AI, the notion of irrelevance was used rather informally in various works, such as RLL <ref> [ Greiner, 1980 ] </ref> and compositional modeling [ Falkenhainer and Forbus, 1991 ] . Irrelevance was investigated extensively in the context of probabilistic reasoning [ Pearl, 1988 ] . However, in that context, irrelevance has a natural definition based on the notion of conditional independence.
Reference: [ Greiner, 1991 ] <author> Greiner, </author> <title> Russell 1991. Finding optimal derivation strategies in a redundant knowledge base. </title> <booktitle> Artificial Intelligence 50(1) </booktitle> <pages> 95-116. </pages>
Reference-contexts: A different approach that was considered to speeding up inference is finding optimal strategies for searching a given space <ref> [ Smith, 1986; Greiner, 1991; Greiner, 1992 ] </ref> . The query-tree can be used to complement and extend these methods in two ways. First, by delimiting the actual space that needs to be searched, some search paths can be eliminated from consideration when looking for the optimal search strategy. <p> Consequently, it can be used as a basis for extending such techniques to fully incorporate knowledge about interpreted literals. In particular, the query-tree can be used to extend Greiner's algorithm <ref> [ Greiner, 1991 ] </ref> for knowledge bases with recursive rules. The goal of Explanation Based Learning [ Minton et al., 1989 ] is also to speed up inferences. In EBL, new rules are added to the knowledge base that compress sequences of inference into a single rule. <p> Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies <ref> [ Smith, 1986; Greiner, 1991 ] </ref> 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug,
Reference: [ Greiner, 1992 ] <author> Greiner, </author> <title> Russell 1992. Learning efficient query processing strategies. </title> <booktitle> In Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA. BIBLIOGRAPHY 197 </address>
Reference-contexts: A different approach that was considered to speeding up inference is finding optimal strategies for searching a given space <ref> [ Smith, 1986; Greiner, 1991; Greiner, 1992 ] </ref> . The query-tree can be used to complement and extend these methods in two ways. First, by delimiting the actual space that needs to be searched, some search paths can be eliminated from consideration when looking for the optimal search strategy.
Reference: [ Guha, 1991 ] <author> Guha, Ramanathan V. </author> <year> 1991. </year> <title> Contexts: A Formalization and Some Applications. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University, Stanford, </institution> <address> CA. </address>
Reference-contexts: Reasoning about the assumptions underlying these descriptions will ensure that we do not compose a description of the battery that ignores its electrical properties (e.g., its voltage) with a description of the wire that considers the voltage of the battery relevant. (b) Reasoning with contexts: Contexts <ref> [ Guha, 1991 ] </ref> are small theories that describe limited aspects of the world. A knowledge base describing a complex domain can benefit from being divided into contexts both in simplicity of representation and efficiency of reasoning.
Reference: [ Hayes, 1973 ] <author> Hayes, Patrick J. </author> <year> 1973. </year> <title> Computation and deduction. </title> <booktitle> In Proceedings of the 1973 Mathematical Foundations of Computer Science Symposium, </booktitle> <institution> Czechoslo-vakian Academy of Sciences. </institution>
Reference: [ Hobbs, 1985 ] <author> Hobbs, Jerry R. </author> <year> 1985. </year> <title> Granularity. </title> <booktitle> In Proceedings of the Ninth International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kauf-mann. </publisher> <pages> 432-435. </pages>
Reference: [ Imielinski, 1987 ] <author> Imielinski, </author> <title> Tomasz 1987. Domain abstraction and limited reasoning. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 997-1003. </pages>
Reference: [ Iwasaki and Levy, 1993 ] <author> Iwasaki, Yumi and Levy, Alon Y. </author> <year> 1993. </year> <title> Automated model selection for simulation. </title> <booktitle> In Proceedings the Seventh International Workshop on Qualitative Reasoning about Physical Systems. </booktitle>
Reference-contexts: Chapter 3 is covered in [ Levy and Sagiv, 1992; Levy et al., 1993 ] . The material of Chapter 5 is presented in [ Levy and Sagiv, 1993b ] . Finally, the material of Chapter 7 is described in <ref> [ Levy et al., 1992; Iwasaki and Levy, 1993 ] </ref> . Chapter 2 Analyzing Irrelevance The notion of irrelevance is used in many contexts in AI research. However, it is typically used informally.
Reference: [ Iwasaki and Low, 1992 ] <author> Iwasaki, Yumi and Low, </author> <title> Chee Meng 1992. Device modeling environment: An integrated model-formulation and simulation environment for continuous and discrete phenomena. </title> <booktitle> In Proceedings of Conference on Intelligent Systems Engineering. </booktitle>
Reference-contexts: An important aspect of our algorithm is that it chooses a model for a simulation of the system without knowing precisely which states the system can reach. The algorithm has been implemented as part of a system called Device Modeling Environment (DME) <ref> [ Iwasaki and Low, 1992 ] </ref> , which is a device modeling program to provide a computational environment for design of electromechanical devices. Given a topological description of a device, DME formulates a behavior model of the device using the compositional modeling approach and simulates its behavior.
Reference: [ Iwasaki and Simon, 1986 ] <author> Iwasaki, Yumi and Simon, </author> <title> Herb 1986. Causality in device behavior. </title> <booktitle> Artificial Intelligence 29 </booktitle> <pages> 3-32. </pages>
Reference-contexts: For example, in a model containing Ohm's law, we may say that the voltage is determined by the current and the resistance. A causal ordering <ref> [ Iwasaki and Simon, 1986; de Kleer and Brown, 1986 ] </ref> specifies the dependency structure among the quantities in the model fragment. 4 It is specified by causally orienting every equation in the model fragment, i.e., associating one quantity f (e) with every equation e in the model.
Reference: [ Kanellakis et al., 1990 ] <author> Kanellakis, P.C.; Kuper, G.M.; and Revesz, P.Z. </author> <year> 1990. </year> <title> Constraint query languages. </title> <booktitle> In Proceedings of the 9th ACM Symp. on Principles of Database Systems. </booktitle> <pages> 299-313. </pages>
Reference-contexts: Our bottom-up evaluation of a program with a database containing facts that are pairs of an atom and a constraint is reminiscent of the procedure used by Kanellakis et al. <ref> [ Kanellakis et al., 1990 ] </ref> . In their procedure, an EDB fact may be a generalized tuple specified in the form of a constraint on the arguments of its predicate. However, there is a key difference between the two methods. In [ Kanellakis et al., 1990 ] , the constraint <p> of the procedure used by Kanellakis et al. <ref> [ Kanellakis et al., 1990 ] </ref> . In their procedure, an EDB fact may be a generalized tuple specified in the form of a constraint on the arguments of its predicate. However, there is a key difference between the two methods. In [ Kanellakis et al., 1990 ] , the constraint specifying a tuple considers only the arguments of the predicate involved. <p> If we use the procedure of <ref> [ Kanellakis et al., 1990 ] </ref> , the result is the pair (p (x 0 ; y 0 ); T rue), which has no recording of the fact that its derivation required that u 0 v 0 . Consequently, we will conclude erroneously that M (s) M (r) holds.
Reference: [ Keynes, 1921 ] <author> Keynes, J. M. </author> <year> 1921. </year> <title> A Treatise on Probability. </title> <publisher> Macmillan, London. </publisher>
Reference-contexts: However, most of the time researchers use the term informally. Formal analyses of irrelevance have been discussed by philosophers as early as <ref> [ Keynes, 1921 ] </ref> , [ Carnap, 1950 ] and [ Gardenfors, 1978 ] . The main thrust of these analyses was to try to capture our common sense notions of irrelevance by a formal definition. <p> Two Possible Approaches: Common Sense Formalization vs. Problem solving Analysis Broadly, we distinguish two possible approaches to analyzing irrelevance. The first approach, which has been pursued by several philosophers ( <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> ), is to try to capture our common sense notion of irrelevance with a formal definition. <p> Finally, strong irrelevance satisfies several properties that have been argued to be natural for the common sense notion of irrelevance (such as closure under union and some forms of monotonicity). The notion of irrelevance has been formally investigated in the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> . As stated earlier, the focus of the discussion there was on formalizing a notion of irrelevance that would fit common sense notions of the word. <p> This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature <ref> [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] </ref> 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni,
Reference: [ Kifer, 1988 ] <author> Kifer, M. </author> <year> 1988. </year> <title> On safety, domain independence, and capturability of database queries. </title> <booktitle> In Proceedings of the International Conference on Data and Knowledge Bases, </booktitle> <address> Jerusalem. </address>
Reference-contexts: Language Strong Irrelevance Weak Irrelevance All Minimal Minimal Support All Derivations Derivations Derivations Derivations Horn rules with Decidable Decidable no recursion Follows from <ref> [ Kifer, 1988 ] </ref> Follows from [ Sagiv, 1988 ] No recursion + Decidable Decidable constraints Follows from Chapter 3 Chapter 5 Datalog Decidable Undecidable Chapter 3 Lemma 2.17 Lemma 2.16 Datalog with Decidable Undecidable constraints Chapter 3 Lemma 2.17 Lemma 2.16 General Horn rules Undecidable Follows from [ Abiteboul and
Reference: [ Klug, 1988 ] <author> Klug, A. </author> <year> 1988. </year> <title> On conjunctive queries containing inequalities. </title> <journal> Journal of the ACM 35(1): </journal> <pages> 146-160. </pages>
Reference-contexts: Our work also generalizes previous work on containment of conjunctive queries with interpreted predicates by Klug <ref> [ Klug, 1988 ] </ref> . Klug showed that if all the constraints are left-semiinterval or all constraints are right-semiinterval, 8 then containment of conjunctive queries can be decided by finding a homomorphism from one query to the other. <p> Therefore, our algorithm is likely to be better in practice, albeit not in the worst case. Of course, our algorithm also applies to more than just conjunctive queries by considering recursive programs as well. 8 See <ref> [ Klug, 1988 ] </ref> for precise definitions of these restrictions. Chapter 6 Irrelevance and Abstractions 6.1 Introduction In the previous chapters we discussed irrelevance claims whose subject was formulas. <p> strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment <ref> [ Klug, 1988; van der Meyden, 1992 ] </ref> 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991
Reference: [ Knoblock et al., 1991 ] <author> Knoblock, Craig; Tenenberg, Josh D.; and Yang, </author> <title> Qiang 1991. Characterizing abstraction hierarchies for planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Cambridge MA. </address> <publisher> MIT Press. </publisher> <pages> 692-697. 198 BIBLIOGRAPHY </pages>
Reference-contexts: This condition enables the planner to considerably prune its search when it refines an abstract solution, since it need only consider monotonic refinements of the abstract plan. Knoblock et al. <ref> [ Knoblock et al., 1991 ] </ref> present other examples of possible relationships between abstract and concrete plans which are then used to prune the search of a planner. Additional work on automatically generating abstractions is described in [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] . <p> ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions <ref> [ Knoblock, 1990; Knoblock et al., 1991 ] </ref> 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification [ Weld, 1990; Williams, 1990a ] 170 Table 8.1: References to
Reference: [ Knoblock, 1990 ] <author> Knoblock, Craig A. </author> <year> 1990. </year> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example, if the first argument of a binary predicate p is irrelevant to a query, and p (a) is derivable from Abs (), then this guarantees that there exists some X such that p (X; a) is derivable from . Knoblock's ALPINE system <ref> [ Knoblock, 1990 ] </ref> is another example of this generalization. <p> Additional work on automatically generating abstractions is described in [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] . Work on analysis of the utility of abstractions is described in <ref> [ Knoblock, 1990; Bacchus and Yang, 1992 ] </ref> . Chapter 7 Automated Modeling of Physical Systems The previous chapter described how relevance reasoning can play a key role in facilitating reasoning in complex domains that require extensive use of abstractions. <p> ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions <ref> [ Knoblock, 1990; Knoblock et al., 1991 ] </ref> 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification [ Weld, 1990; Williams, 1990a ] 170 Table 8.1: References to
Reference: [ Kowalski, 1975 ] <author> Kowalski, Robert 1975. </author> <title> A proof procedure using connection graphs. </title> <journal> Journal of the ACM 22(4): </journal> <pages> 572-595. </pages>
Reference-contexts: Therefore the cost of building the tree can be amortized over many queries. The query-tree is related to several graph-like structures discussed in the literature, such as connection graphs <ref> [ Kowalski, 1975 ] </ref> , problem space graphs [ Etzioni, 1993 ] , compilation graphs [ Bruynooghe et al., 1989 ] and rule-goal graphs [ Ullman, 1989 ] . The main property distinguishing the query-tree from other structures is the principled treatment of recursion and interpretable constraints. <p> Several other authors have considered static analysis of rules for different purposes, such as explanation based learning [ Etzioni, 1993 ] , partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] , automated reasoning <ref> [ Kowalski, 1975; Bruynooghe et al., 1989 ] </ref> and deductive databases [ Srivastava and Ramakrishnan, 1992; Ullman, 1989 ] . <p> Some have also used graph-like representations of the rules, such as problem space graphs [ Etzioni, 1993 ] , connection graphs <ref> [ Kowalski, 1975 ] </ref> , compilation graphs [ Bruynooghe et al., 1989 ] and rule/goal graphs [ Ullman, 1989 ] . Others have used rule folding/unfolding in their analysis. <p> This leads to a tree whose size can be exponential in the number of rules. 11 Obtained simultaneously with ours. 76 CHAPTER 3. THE QUERY-TREE Connection graphs <ref> [ Kowalski, 1975 ] </ref> were also developed for the purpose of focusing a theorem prover by precomputing all the possible pairs of resolvable clauses. <p> irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs <ref> [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] </ref> 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991
Reference: [ Levesque, 1989 ] <author> Levesque, </author> <title> Hector 1989. A knowledge-level account of abduction. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: The first statement of this example can also be replaced by any property of birds that is completely unconnected to flying. 2.2. ISSUES IN ANALYZING IRRELEVANCE 17 The notion of irrelevance also plays an important role in designing algorithms for abductive reasoning <ref> [ Levesque, 1989 ] </ref> and for belief revision [ Gardenfors, 1988 ] . 2.2 Issues in Analyzing Irrelevance In this section we discuss several of the issues that arise in an analysis of irrelevance, and provide the motivations underlying our approach.
Reference: [ Levitt et al., 1991 ] <author> Levitt, Raymond E.; Jin, Yan; and Dym, Clive L. </author> <year> 1991. </year> <title> Knowledge based support for management of concurrent, </title> <booktitle> multidisciplinary design. AI in Engineering, Design and Manufacturing 2(5) </booktitle> <pages> 77-95. </pages>
Reference-contexts: In such systems, updates in one knowledge base may trigger updates in an other. For example, an important application that gives rise to such a setting is concurrent engineering <ref> [ Cutkosky et al., 1993; Levitt et al., 1991 ] </ref> , where several agents may be working on different parts of one design. Design decisions made by one agent may impose constraints on the possible design decisions of another agent, and therefore must be communicated.
Reference: [ Levy and Sagiv, 1992 ] <author> Levy, Alon Y. and Sagiv, </author> <title> Yehoshua 1992. Constraints and redundancy in datalog. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA. </address>
Reference-contexts: Others appear in Appendix A. Some of the material covered in the thesis appears in shorter conference length publications. The material in Chapter 2 and Section 4.2 appears in [ Levy and Sagiv, 1993a ] . Chapter 3 is covered in <ref> [ Levy and Sagiv, 1992; Levy et al., 1993 ] </ref> . The material of Chapter 5 is presented in [ Levy and Sagiv, 1993b ] . Finally, the material of Chapter 7 is described in [ Levy et al., 1992; Iwasaki and Levy, 1993 ] .
Reference: [ Levy and Sagiv, 1993a ] <author> Levy, Alon Y. and Sagiv, </author> <title> Yehoshua 1993a. Exploiting irrelevance reasoning to guide problem solving. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Others appear in Appendix A. Some of the material covered in the thesis appears in shorter conference length publications. The material in Chapter 2 and Section 4.2 appears in <ref> [ Levy and Sagiv, 1993a ] </ref> . Chapter 3 is covered in [ Levy and Sagiv, 1992; Levy et al., 1993 ] . The material of Chapter 5 is presented in [ Levy and Sagiv, 1993b ] .
Reference: [ Levy and Sagiv, 1993b ] <author> Levy, Alon Y. and Sagiv, </author> <title> Yehoshua 1993b. Queries independent of updates. </title> <booktitle> In Proceedings of the 19th VLDB Conference, </booktitle> <address> Dublin, Ireland. </address>
Reference-contexts: The material in Chapter 2 and Section 4.2 appears in [ Levy and Sagiv, 1993a ] . Chapter 3 is covered in [ Levy and Sagiv, 1992; Levy et al., 1993 ] . The material of Chapter 5 is presented in <ref> [ Levy and Sagiv, 1993b ] </ref> . Finally, the material of Chapter 7 is described in [ Levy et al., 1992; Iwasaki and Levy, 1993 ] . Chapter 2 Analyzing Irrelevance The notion of irrelevance is used in many contexts in AI research. However, it is typically used informally.
Reference: [ Levy et al., 1992 ] <author> Levy, Alon; Iwasaki, Yumi; and Motoda, </author> <title> Hiroshi 1992. Using relevance reasoning to guide compositional modeling. </title> <booktitle> In The Proceedings of the Second Pacific Rim International Conference on Artificial Intelligence, Seoul, South Korea. Also appears in the Proceedings of the Workshop on Approximations and Abstractions of Computational Theories, AAAI-92, </booktitle> <address> San Jose, CA. </address>
Reference-contexts: Chapter 3 is covered in [ Levy and Sagiv, 1992; Levy et al., 1993 ] . The material of Chapter 5 is presented in [ Levy and Sagiv, 1993b ] . Finally, the material of Chapter 7 is described in <ref> [ Levy et al., 1992; Iwasaki and Levy, 1993 ] </ref> . Chapter 2 Analyzing Irrelevance The notion of irrelevance is used in many contexts in AI research. However, it is typically used informally.
Reference: [ Levy et al., 1993 ] <author> Levy, Alon Y.; Mumick, Inderpal Singh; Sagiv, Yehoshua; and Shmueli, </author> <title> Oded 1993. Equivalence, query-reachability and satisfiability in data-log extensions. </title> <booktitle> In Proceedings of the Twelfth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Washington D.C. </address>
Reference-contexts: Others appear in Appendix A. Some of the material covered in the thesis appears in shorter conference length publications. The material in Chapter 2 and Section 4.2 appears in [ Levy and Sagiv, 1993a ] . Chapter 3 is covered in <ref> [ Levy and Sagiv, 1992; Levy et al., 1993 ] </ref> . The material of Chapter 5 is presented in [ Levy and Sagiv, 1993b ] . Finally, the material of Chapter 7 is described in [ Levy et al., 1992; Iwasaki and Levy, 1993 ] . <p> Datalog with Undecidable Stratified Negation Lemma 2.18 Lemma 2.17 Lemma 2.16 Negated base Decidable Undecidable predicates Section 3.4 Lemma 2.17 Lemma 2.16 Unary base Decidable predicates <ref> [ Levy et al., 1993 ] </ref> Table 2.1: Decidability of deriving irrelevance claims 2.4.1 A Few Undecidable Cases The following shows that weak irrelevance is undecidable even for function-free Horn rules (i.e., datalog): Lemma 2.16: Let P be a set of datalog rules and be a query. <p> In a similar fashion, we can create a program with a rule r 0 which will be strongly irrelevant if and only if P 1 P 2 . Consequently, if rule irrelevance is decidable for programs with stratified negation, then program equivalence will be decidable. Chapter 3 and <ref> [ Levy et al., 1993 ] </ref> describe restrictions on stratified negation in which strong irrelevance is still decidable. 2.5 Summary and Related Work We have presented a general framework for analyzing and comparing definitions of irrelevance.
Reference: [ Litwin et al., 1990 ] <author> Litwin, Witold; Mark, Leo; and Roussopoulos, </author> <title> Nick 1990. Interoperability of multiple autonomous databases. </title> <booktitle> ACM Computing Surveys 22 </booktitle> (3):267-293. 
Reference-contexts: This problem is primarily important because it enables us to save the computation needed to reevaluate a query after updates. Detecting independence is also a key issue in developing heterogeneous and distributed knowledge base systems <ref> [ Genesereth, 1992; Litwin et al., 1990 ] </ref> . In such systems, updates in one knowledge base may trigger updates in an other.
Reference: [ Lloyd and Shepherdson, 1991 ] <author> Lloyd, J.W. and Shepherdson, J.C. </author> <year> 1991. </year> <title> Partial evaluation in logic programming. </title> <journal> Journal of Logic Programming (11):217-242. BIBLIOGRAPHY 199 </journal>
Reference: [ Lowry, 1992 ] <author> Lowry, Michael R., </author> <title> editor 1992. </title> <booktitle> Proceedings of the Workshop on Change of Representation and Problem Reformulation. </booktitle> <institution> NASA Ames Research Center Technical Report FIA-92-06. </institution>
Reference-contexts: Second, by removing the formulas that distinguish between the types of cars, we reduce the size of the space that needs to be searched. Recently, research on abstractions and approximations has received renewed attention <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . However, two key problems in this field remain largely open. The first is how a system can automatically create an abstraction that is well suited to a particular query. <p> Knoblock et al. [ Knoblock et al., 1991 ] present other examples of possible relationships between abstract and concrete plans which are then used to prune the search of a planner. Additional work on automatically generating abstractions is described in <ref> [ Ellman, 1990; Ellman, 1992; Lowry, 1992 ] </ref> . Work on analysis of the utility of abstractions is described in [ Knoblock, 1990; Bacchus and Yang, 1992 ] .
Reference: [ Minton et al., 1989 ] <author> Minton, Steven; Carbonell, Jaime; Knoblock, Craig; Kuokka, D.; Etzioni, Oren; and Gil, </author> <month> Yolanda </month> <year> 1989. </year> <title> Explanation based learning: A problem solving perspective. </title> <booktitle> Artificial Intelligence 40 </booktitle> <pages> 63-118. </pages>
Reference-contexts: Therefore, the derivation D will also be a valid derivation from . The utility of removing an irrelevant formula is a more subtle issue. Removing a formula that is only weakly irrelevant may not speed inference. In fact, explanation based learning systems <ref> [ Minton et al., 1989 ] </ref> do exactly the opposite, they add redundant rules (which, in our framework, would be considered weakly irrelevant). <p> Consequently, it can be used as a basis for extending such techniques to fully incorporate knowledge about interpreted literals. In particular, the query-tree can be used to extend Greiner's algorithm [ Greiner, 1991 ] for knowledge bases with recursive rules. The goal of Explanation Based Learning <ref> [ Minton et al., 1989 ] </ref> is also to speed up inferences. In EBL, new rules are added to the knowledge base that compress sequences of inference into a single rule. The sequences are learned by examining 98 CHAPTER 4. USES OF THE QUERY-TREE derivations of observed queries.
Reference: [ Minton, 1988 ] <author> Minton, </author> <title> Steve 1988. Quantitative results concerning the utility of explanation based learning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: In EBL, new rules are added to the knowledge base that compress sequences of inference into a single rule. The sequences are learned by examining 98 CHAPTER 4. USES OF THE QUERY-TREE derivations of observed queries. The key issue in this approach is the utility of the added rules <ref> [ Minton, 1988; Etzioni and Minton, 1992 ] </ref> . Adding too many rules may have the inverse effect of slowing down inference. Moreover, the learned rules may be long and require many unification operations.
Reference: [ Mumick et al., 1990 ] <author> Mumick, I. S.; Finkelstein, S.J.; Pirahesh, H.; and Ramakrish-nan, R. </author> <year> 1990. </year> <title> Magic conditions. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Principles of Database Systems. </booktitle> <pages> 314-330. </pages>
Reference-contexts: It should be noted that using the query-tree to propagate the constraints has an advantage over previous techniques, such as the use of bcf adornments <ref> [ Mumick et al., 1990 ] </ref> . That technique attaches a c adornment to an argument of a goal-node if there is some known constraint on it. In contrast, the query-tree considers the semantics of the interpreted literals to compute the actual constraint on the arguments. <p> al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation <ref> [ Ullman, 1989; Mumick et al., 1990 ] </ref> 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments
Reference: [ Nayak, 1992a ] <author> Nayak, </author> <month> Pandurang </month> <year> 1992a. </year> <title> Automated Model Selection. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University, Stanford, </institution> <address> CA. </address>
Reference-contexts: Second, the following of possible causal paths by the algorithm frees the user from specifying possible causal interactions explicitly (as in the component interaction heuristic <ref> [ Nayak, 1992a ] </ref> ). This advantage is important since specifying these interactions is a laborious and error-prone task. Finally, unlike the algorithm proposed by Nayak [ Nayak, 1992a ] that begins with the most complicated model and iteratively simplifies it, our algorithm starts with the simplest model possible and makes <p> the following of possible causal paths by the algorithm frees the user from specifying possible causal interactions explicitly (as in the component interaction heuristic <ref> [ Nayak, 1992a ] </ref> ). This advantage is important since specifying these interactions is a laborious and error-prone task. Finally, unlike the algorithm proposed by Nayak [ Nayak, 1992a ] that begins with the most complicated model and iteratively simplifies it, our algorithm starts with the simplest model possible and makes it more complex only as required by the modeling assumptions. <p> RELATED WORK 169 equations at every state from which a complete model can be extracted (perhaps by removing some equations). We can extract the complete model efficiently using the methods described in <ref> [ Nayak, 1992a ] </ref> . Causal Approximations and Horn Restriction The only role of the causal approximations assumption and the restriction that the modeling constraints must be Horn is to guarantee efficient performance of the model formulation algorithm. <p> The Horn restriction guarantees that once a positive literal has been put in Rel, it will not be retracted. Relaxing either of these two assumptions will require the algorithm to perform arbitrary backtracking and constraint satisfaction. As shown in <ref> [ Nayak, 1992a ] </ref> , this will cause the model selection problem to be intractable. 7.4 Related Work Several researchers have considered the problem of model formulation. Their work addresses one or both of the two aspects of the model formulation problem, namely model construction and model simplification. <p> in <ref> [ Nayak, 1992a ] </ref> , this will cause the model selection problem to be intractable. 7.4 Related Work Several researchers have considered the problem of model formulation. Their work addresses one or both of the two aspects of the model formulation problem, namely model construction and model simplification. Nayak [ Nayak, 1992a ] addressed both aspects. Nayak describes an algorithm for constructing a model for the single state case. His algorithm also follows possible causal influences; however, these influences must be given explicitly using the component interaction heuristic. <p> ] 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations <ref> [ Nayak, 1992a ] </ref> 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification [ Weld, 1990; Williams, 1990a ] 170 Table 8.1: References to related work. to a new approach to research on reasoning with abstractions in which we investigate the properties of an abstraction by considering
Reference: [ Nayak, 1992b ] <author> Nayak, </author> <month> Pandurang </month> <year> 1992b. </year> <title> Causal approximations. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: AUTOMATED MODELING OF PHYSICAL SYSTEMS All of these properties follow if we assume that whenever c i &lt; c j , then c i is a causal approximation of c j <ref> [ Nayak, 1992b ] </ref> . Nayak has shown that causal approximations cover most approximation relations encountered in practice.
Reference: [ Nebel, 1989 ] <author> Nebel, B. </author> <year> 1989. </year> <title> A knowledge level analysis of belief revision. </title> <booktitle> In Proceedings of KR-89. </booktitle> <pages> 301-311. </pages>
Reference: [ Pearl, 1988 ] <author> Pearl, </author> <title> Judea 1988. Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, Cal-ifornia. </address>
Reference-contexts: Consequently, the work has not been concerned 1.2. OVERVIEW OF THE SOLUTIONS 5 with how to use irrelevance for speeding up inference or how to design algorithms for detecting irrelevance. Within AI the notion of irrelevance was investigated in the context of probabilistic reasoning <ref> [ Pearl, 1988 ] </ref> and used there to control inference in Baysian belief networks. In the context of logical knowledge bases, Subramanian [ Subramanian, 1989 ] investigated several formal definitions of irrelevance. However, the issues of deriving irrelevance claims and the utility of irrelevance reasoning were left largely open. <p> Within AI, the notion of irrelevance was used rather informally in various works, such as RLL [ Greiner, 1980 ] and compositional modeling [ Falkenhainer and Forbus, 1991 ] . Irrelevance was investigated extensively in the context of probabilistic reasoning <ref> [ Pearl, 1988 ] </ref> . However, in that context, irrelevance has a natural definition based on the notion of conditional independence. This notion does not carry over to the context of logical knowledge bases. <p> Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning <ref> [ Pearl, 1988 ] </ref> 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith
Reference: [ Pearl, 1990 ] <author> Pearl, </author> <title> Judea 1990. System Z: A natural ordering of defaults with tractable applications to nonmonotic reasoning. </title> <editor> In Vardi, Moshe Y., editor 1990, </editor> <booktitle> Theoretical Aspects of Reasoning About Knowledge. </booktitle> <publisher> Morgan Kaufmann Publishers. </publisher> <pages> 121-135. </pages>
Reference-contexts: Consequently, the inferences made depend in subtle ways on which formulas are considered. A key property that has been the focus of several non-monotonic formalisms (e.g., <ref> [ Pearl, 1990; Geffner and Pearl, 1990 ] </ref> ) is designing reasoning schemes in which the addition of irrelevant formulas does not change the conclusions. <p> ANALYZING IRRELEVANCE 1. Non monotonic reasoning: In non monotonic reasoning, the addition of knowledge can cause previous conclusions to be retracted. Consequently, conclusions drawn in non monotonic reasoning formalisms depend in subtle ways on which knowledge is considered. The following example (from <ref> [ Pearl, 1990 ] </ref> ) illustrates that dependency: Example 2.1: Consider a knowledge base containing the following: Birds typically have wings, Birds typically fly, Penguins are birds, Penguins don't fly Suppose our query is: Do penguins have wings? The difficulty in answering the query is that penguins are abnormal with respect
Reference: [ Plaisted, 1981 ] <author> Plaisted, D. </author> <year> 1981. </year> <title> Theorem proving with abstraction. </title> <booktitle> Artificial Intelligence 16 </booktitle> <pages> 47-108. </pages>
Reference-contexts: Replacing a set of predicates q 1 ; : : : ; q n by a predicate q has been considered as the problem of predicate abstraction <ref> [ Plaisted, 1981; Tenenberg, 1990 ] </ref> . Our treatment of predicate abstraction is inspired by the work of Tenenberg. As before, we denote the result of the syntactic transformation we want to perform to a formula by f Q (). <p> Moreover, weak irrelevance also guarantees that if the query was derivable in the original knowledge base, it will also be derivable in the abstract knowledge base. Therefore, our abstractions can be viewed as being TI-abstractions with respect to a specific query. Historically, TI-abstractions have received more attention (e.g., <ref> [ Sacerdoti, 1974; Plaisted, 1981 ] </ref> ). In that work, the intuition was that in most cases the information removed was irrelevant to the query, and therefore the answer obtained from the abstract knowledge base would hold (or could be refined to an answer) in the original knowledge base. <p> evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction <ref> [ Plaisted, 1981; Tenenberg, 1990 ] </ref> 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 <p> Therefore, I ) SI (r 1 ; g; 0 ; DI 2 ; D q ) cannot hold. A.3 Proofs of Chapter 6 In our proofs we use the following lemma that is proven by Plaisted <ref> [ Plaisted, 1981 ] </ref> : Lemma A.7: Let f be a mapping on literals, which is extended in a straightforward fashion to a mapping on clauses. Suppose f satisfies the following properties: 1. f (:L) = :f (L) for any literal L. 2.
Reference: [ Ramakrishnan et al., 1988 ] <author> Ramakrishnan, Raghu; Beeri, Catriel; and Krishna-murthy, </author> <title> Ravi 1988. Optimizing existential datalog queries. </title> <booktitle> In Proceedings of the Seventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Austin TX. </address> <pages> 89-101. </pages>
Reference-contexts: Subramanian also mentions some of the new irrelevance subjects described here. Our results on projecting predicate arguments are related to the work by Ra-makrishnan et al. <ref> [ Ramakrishnan et al., 1988 ] </ref> on identifying existential queries. That work presents an algorithm for detecting cases in which arguments of subgoals in logic programs can be removed without affecting the answer to the query. <p> The definition of independence that we present in Section 6.3 is better motivated semantically than the one they present and applies to more than just Horn rules. The syntactic condition for independence given in Theorem 6.7 generalizes the condition given in <ref> [ Ramakrishnan et al., 1988 ] </ref> to arbitrary clauses. Finally, their algorithm for identifying irrelevant predicate arguments is based on building a rule-goal graph of the rules in the knowledge base. <p> Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments <ref> [ Ramakrishnan et al., 1988 ] </ref> 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs
Reference: [ Rickel and Porter, 1992 ] <author> Rickel, Jeff and Porter, </author> <title> Bruce 1992. Automated modeling for answering prediction questions: Exploiting interaction paths. </title> <booktitle> In Proceedings of the Sixth International Workshop on Qualitative Reasoning about Physical Systems. </booktitle> <address> 200 BIBLIOGRAPHY </address>
Reference-contexts: Our selection of the simplest model is based on explicit representation of the differences between model fragments and on reasoning with formulas expressing these differences. Rickel and Porter's work on model formulation <ref> [ Rickel and Porter, 1992 ] </ref> is similar to ours since it makes use of graphs of interaction paths among variables to select relevant model fragments.
Reference: [ Rombauer and Rombauer-Becker, 1975 ] <author> Rombauer, Irma S. and Rombauer-Becker, </author> <title> Marion 1975. Joy of Cooking. </title> <publisher> Bobbs Merrill Company Inc., </publisher> <address> N.Y.C., N.Y. </address>
Reference-contexts: A travel domain using a database of real airline data describing flights between cities in the U.S (examples 3-6 in the tables). 2. A wine domain consisting of a knowledge base of 50 rules describing various wines and dishes and compatibilities between them (based in part on <ref> [ Rombauer and Rombauer-Becker, 1975 ] </ref> ) (examples 7-8). 3. A student-advisor domain using a knowledge base about computer science Ph.D graduates, including advisor, school and graduation dates (examples 9-10). 4. The goodP ath example, using the rules in Example 4.1 (examples 1-2).
Reference: [ Russell, 1985 ] <author> Russell, </author> <title> Stuart 1985. The complete guide to MRS. </title> <type> Technical Report KSL-85-12, </type> <institution> Knowledge Systems Laboratory, Department of Computer Science, Stanford University, </institution> <address> CA. </address>
Reference-contexts: relation e in I 1 if a 1 ; : : : ; a n satisfies the constraint label of some leaf of the 2 Which may be the node (n) itself. 3 The performance of the backward chainer compared favorably with that of Epikit (a commercial implementation of MRS <ref> [ Russell, 1985 ] </ref> ). Furthermore, the speedups attained by removing irrelevant formulas (BC2 below) were also tested using the backward chainer of Epikit and the speedups attained were even better than those reported here. In the experiments we tested several rule and goal orderings.
Reference: [ Sacerdoti, 1974 ] <author> Sacerdoti, Earl D. </author> <year> 1974. </year> <title> Planning in a hierarchy of abstraction spaces. </title> <booktitle> Artificial Intelligence 5 </booktitle> <pages> 115-135. </pages>
Reference-contexts: Moreover, weak irrelevance also guarantees that if the query was derivable in the original knowledge base, it will also be derivable in the abstract knowledge base. Therefore, our abstractions can be viewed as being TI-abstractions with respect to a specific query. Historically, TI-abstractions have received more attention (e.g., <ref> [ Sacerdoti, 1974; Plaisted, 1981 ] </ref> ). In that work, the intuition was that in most cases the information removed was irrelevant to the query, and therefore the answer obtained from the abstract knowledge base would hold (or could be refined to an answer) in the original knowledge base. <p> In that work, the intuition was that in most cases the information removed was irrelevant to the query, and therefore the answer obtained from the abstract knowledge base would hold (or could be refined to an answer) in the original knowledge base. For example, ABSTRIPS <ref> [ Sacerdoti, 1974 ] </ref> made the assumption that the action preconditions of lower criticality values are easier to achieve and can therefore be ignored when formulating an abstract plan. The utility of the abstraction depended on how often the problem solver would have to backtrack across abstraction levels.
Reference: [ Sagiv, 1988 ] <author> Sagiv, </author> <title> Yehoshua 1988. Optimizing datalog programs. </title> <editor> In Minker, Jack, editor 1988, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA. </address> <pages> 659-698. </pages>
Reference-contexts: Language Strong Irrelevance Weak Irrelevance All Minimal Minimal Support All Derivations Derivations Derivations Derivations Horn rules with Decidable Decidable no recursion Follows from [ Kifer, 1988 ] Follows from <ref> [ Sagiv, 1988 ] </ref> No recursion + Decidable Decidable constraints Follows from Chapter 3 Chapter 5 Datalog Decidable Undecidable Chapter 3 Lemma 2.17 Lemma 2.16 Datalog with Decidable Undecidable constraints Chapter 3 Lemma 2.17 Lemma 2.16 General Horn rules Undecidable Follows from [ Abiteboul and Hull, 1988 ] . <p> A second sufficient condition for the case of Horn rule knowledge bases is based on the observation that detecting weak irrelevance can be couched as a problem of detecting equivalence of datalog programs. The notion of uniform equivalence, introduced in <ref> [ Sagiv, 1988 ] </ref> , can be used to provide a sufficient condition for equivalence of datalog programs. In order to use uniform equivalence for detecting independence, we extend the algorithm described in [ Sagiv, 1988 ] to programs with interpreted literals and stratified negation. <p> The notion of uniform equivalence, introduced in <ref> [ Sagiv, 1988 ] </ref> , can be used to provide a sufficient condition for equivalence of datalog programs. In order to use uniform equivalence for detecting independence, we extend the algorithm described in [ Sagiv, 1988 ] to programs with interpreted literals and stratified negation. The result provides new decidable cases for independence and weak irrelevance and sound algorithms for the general case. Our results significantly extend the known previous results on detecting independence. <p> Containment of datalog programs is undecidable [ Shmueli, 1987 ] , even for programs without interpreted predicates or stratified negation. However, a weaker condition, uniform containment, was introduced and shown to be decidable in <ref> [ Sagiv, 1988 ] </ref> for programs without interpreted predicates or stratified negation. <p> Uniform containment can also be explained in model-theoretic terms <ref> [ Sagiv, 1988 ] </ref> . <p> As stated earlier, solutions to this problem directly impact the independence problem. Shmueli [ Shmueli, 1987 ] showed that detecting equivalence of two datalog programs is in general undecidable even if the programs do not contain interpreted predicates or negation. Sagiv <ref> [ Sagiv, 1988 ] </ref> introduced a weaker condition, uniform equivalence, and showed that it is decidable for datalog programs without interpreted predicates or negation. Recall that the reduction of the problem of independence to equivalence involved testing equivalence of programs with stratified negation. <p> Recall that the reduction of the problem of independence to equivalence involved testing equivalence of programs with stratified negation. Therefore, in order to use uniform equivalence for detecting independence, we extend the algorithms described in <ref> [ Sagiv, 1988 ] </ref> to handle both interpreted predicates (which are defined in Section 2.4) and stratified negation. <p> The second half follows from the first and from Corollary 5.8. 5.3.1 Uniform Equivalence with Interpreted Predicates The algorithm for detecting uniform containment (and equivalence) for datalog programs without interpreted predicates is based on the model theoretic characterization of the notion, shown in <ref> [ Sagiv, 1988 ] </ref> , which also holds for programs with interpreted predicates. <p> Therefore, we can decide whether M (P 1 ) M (P 2 ) by checking whether M (P 1 ) M (r) for every r 2 P 2 . Based on this observation, when the programs have no interpreted predicates, the following algorithm (from <ref> [ Sagiv, 1988 ] </ref> ) will decide whether a given rule r is uniformly contained in a program P.
Reference: [ Selman and Kautz, 1991 ] <author> Selman, Bart and Kautz, </author> <title> Henry 1991. Knowledge compilation using horn approximations. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <address> Cambridge MA. </address> <publisher> MIT Press. </publisher> <pages> 904-909. </pages>
Reference-contexts: Building a query-tree and the corresponding indices for a query can be viewed as an instance of a general framework for knowledge compilation discussed in <ref> [ Selman and Kautz, 1991 ] </ref> . In their framework, a new simpler knowledge base is created such that it will yield faster answers for a large number of the queries. <p> Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation <ref> [ Selman and Kautz, 1991 ] </ref> 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al.,
Reference: [ Shmueli, 1987 ] <author> Shmueli, </author> <title> Oded 1987. Decidability and expressiveness aspects of logic queries. </title> <booktitle> In Proceedings of the 6th ACM Symposium on Principles of Database Systems. </booktitle> <pages> 237-249. </pages>
Reference-contexts: Conversely, if r is redundant, that means that for every 2 P , if is provable, there is a derivation that doesn't contain r. Therefore, W I (r; ; P ; DI 2 ; D ) holds. However, it follows from <ref> [ Shmueli, 1987 ] </ref> that redundancy is undecidable for dat-alog theories. Therefore, weak irrelevance is undecidable. It should be noted that Subramanian [ Subramanian, 1989 ] states a similar result for DI 3 , but does not give a proof. <p> Proof: We prove the lemma by reducing the containment problem of datalog programs to the strong irrelevance problem for M 3. Since it follows from <ref> [ Shmueli, 1987 ] </ref> that containment is undecidable, strong irrelevance for M 3 is also undecidable. Let P 1 and P 2 be two datalog programs. Let e be a new EDB predicate appearing nowhere in P 1 or P 2 . <p> ANALYZING IRRELEVANCE Lemma 2.18: Let P be a set of datalog rules with stratified negation and r 2 P. Determining whether SI (r; ; P ; DI 2 ; D ) is undecidable, even if P has no interpreted predicates. Proof: Testing equivalence of two datalog programs is undecidable <ref> [ Shmueli, 1987 ] </ref> . <p> Two programs P 1 and P 2 are equivalent, written P 1 P 2 , if P 2 P 1 and P 1 P 2 . Containment of datalog programs is undecidable <ref> [ Shmueli, 1987 ] </ref> , even for programs without interpreted predicates or stratified negation. However, a weaker condition, uniform containment, was introduced and shown to be decidable in [ Sagiv, 1988 ] for programs without interpreted predicates or stratified negation. <p> Consequently, Elkan's algorithm will not detect the independence in this example. 5.3 Testing Equivalence of Datalog Programs In the remainder of this chapter we consider the problem of testing equivalence of datalog programs. As stated earlier, solutions to this problem directly impact the independence problem. Shmueli <ref> [ Shmueli, 1987 ] </ref> showed that detecting equivalence of two datalog programs is in general undecidable even if the programs do not contain interpreted predicates or negation. <p> The problem of determining whether P and Q are equivalent (i.e., produce the same answer for any database D) is undecidable. Proof: In <ref> [ Shmueli, 1987 ] </ref> it is shown that determining whether two arbitrary datalog programs are equivalent is undecidable. Suppose there is an algorithm A to determine equivalence of two programs P and Q when it is known that P Q.
Reference: [ Sickel, 1976 ] <author> Sickel, </author> <title> Susan 1976. A search technique for clause interconnectivity graphs. </title> <journal> IEEE Transactions on Computers C-25(8):823-835. </journal>
Reference-contexts: However, connection graphs only capture a subset of the possible dependencies between clauses. Specifically, they only show that two clauses connected to a link are unifiable, but say nothing about the relationship between clauses connected via longer paths in the graph. Other work <ref> [ Sickel, 1976; Chang, 1979 ] </ref> has considered following only certain walks on the graph, however, these walks are not guaranteed to encode valid derivations, as are the paths encoded in the query-tree. <p> irrelevance [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs <ref> [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] </ref> 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991
Reference: [ Slutzki, 1985 ] <author> Slutzki, G. </author> <year> 1985. </year> <title> Alternating tree automata. </title> <booktitle> Theoretical Computer Science 41 </booktitle> <pages> 305-318. </pages>
Reference-contexts: Each child of a goal-node containing g is a rule-node, containing a rule from the knowledge base, whose consequent unifies with g. The rule-node has a goal-node child for every conjunct in its antecedent, and the contents of each such 2 See <ref> [ Slutzki, 1985 ] </ref> for an exposition of tree automata. 3.1. THE QUERY-TREE METHOD 45 goal-node is the corresponding conjunct in the unification of the rule with g.
Reference: [ Smith and Hickey, 1990 ] <author> Smith, Donald A. and Hickey, Timothy J. </author> <year> 1990. </year> <title> Partial evaluation of a CLP language. </title> <booktitle> In Proceedings of the International Symposium on Logic Programming. </booktitle> <pages> 119-138. </pages>
Reference: [ Smith, 1986 ] <author> Smith, David 1986. </author> <title> Controlling Inference. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University, Stanford, </institution> <address> CA. </address>
Reference-contexts: A different approach that was considered to speeding up inference is finding optimal strategies for searching a given space <ref> [ Smith, 1986; Greiner, 1991; Greiner, 1992 ] </ref> . The query-tree can be used to complement and extend these methods in two ways. First, by delimiting the actual space that needs to be searched, some search paths can be eliminated from consideration when looking for the optimal search strategy. <p> Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies <ref> [ Smith, 1986; Greiner, 1991 ] </ref> 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug,
Reference: [ Srivastava and Ramakrishnan, 1992 ] <author> Srivastava, Divesh and Ramakrishnan, </author> <title> Raghu 1992. Pushing constraint selections. </title> <booktitle> In Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA. </address>
Reference-contexts: INTRODUCTION The framework is shown to be general in that it encompasses definitions discussed in the past. These include definitions given by Subramanian [ Subramanian, 1989 ] and definitions given in analysis of databases <ref> [ Srivastava and Ramakrishnan, 1992 ] </ref> and [ Elkan, 1990 ] . <p> Couching Subramanian's definitions in our framework highlights some of the properties of her definitions, mainly the fact that removing irrelevant formulas may not always lead to speeding up inference. A definition of irrelevance is described in <ref> [ Srivastava and Ramakrishnan, 1992 ] </ref> . Their definition is equivalent to strong irrelevance when DI 2 is quantified over the set of all derivations of the query, i.e., it is equivalent to SI (; ; ; DI 2 ; D ). <p> static analysis of rules for different purposes, such as explanation based learning [ Etzioni, 1993 ] , partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] , automated reasoning [ Kowalski, 1975; Bruynooghe et al., 1989 ] and deductive databases <ref> [ Srivastava and Ramakrishnan, 1992; Ullman, 1989 ] </ref> . <p> The query-tree is novel in that it gives a well motivated termination criterion based on manipulation of the interpreted constraints that appear in the rules. Consequently, with the exception of <ref> [ Srivastava and Ramakrishnan, 1992 ] </ref> , only the query-tree can be shown to be complete in more than straightforward cases (i.e., in the presence of recursion and constraints). <p> logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski, 1975; Sickel, 1976; Chang, 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections <ref> [ Srivastava and Ramakrishnan, 1992 ] </ref> 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal
Reference: [ Subramanian and Genesereth, 1987 ] <author> Subramanian, D. and Genesereth, </author> <title> M.R. 1987. The relevance of irrelevance. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Consequently, there is some derivation D of from such that Base (D) 6j= . The KB consisting of Base (D) is a subset of and does not entail . Consequently, W I 1 (; ; ) holds. A variation of this definition that is described in <ref> [ Subramanian and Genesereth, 1987 ] </ref> can be formulated as W I (; ; ; DI 4 ; D ). Couching Subramanian's definitions in our framework highlights some of the properties of her definitions, mainly the fact that removing irrelevant formulas may not always lead to speeding up inference. <p> However, in that context, irrelevance has a natural definition based on the notion of conditional independence. This notion does not carry over to the context of logical knowledge bases. The work most related to ours is the analysis of irrelevance given by Subra-manian <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> . Subramanian's motivations for analyzing irrelevance are similar to ours, namely, reformulating the knowledge base to create one that is simpler and will therefore lead to more efficient inference. <p> Subramanian also defined a class of 40 CHAPTER 2. ANALYZING IRRELEVANCE computational-irrelevance claims whose exploitation leads to computational savings, but only gave some straightforward examples of such claims. Our class of strong irrelevance claims is a prime example of computational-irrelevance claims. It should be noted that in <ref> [ Subramanian and Genesereth, 1987 ] </ref> , a definition of strong-irrelevance is given. However, instances satisfying this definition are not necessarily instances of computational irrelevance. <p> We have shown that the query-tree can be used to derive logical conclusions of irrelevance claims that are given to the system. A different approach, described in <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> is to give an axiomatization of irrelevance and use the axioms to reason about irrelevance claims. <p> The framework provided a setting in which we could investigate the connection between the notion of irrelevance and the creation of abstractions. This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski,
Reference: [ Subramanian, 1989 ] <author> Subramanian, </author> <month> Devika </month> <year> 1989. </year> <title> A Theory of Justified Reformulations. </title> <type> Ph.D. Dissertation, </type> <institution> Stanford University, Stanford, </institution> <address> CA. BIBLIOGRAPHY 201 </address>
Reference-contexts: Within AI the notion of irrelevance was investigated in the context of probabilistic reasoning [ Pearl, 1988 ] and used there to control inference in Baysian belief networks. In the context of logical knowledge bases, Subramanian <ref> [ Subramanian, 1989 ] </ref> investigated several formal definitions of irrelevance. However, the issues of deriving irrelevance claims and the utility of irrelevance reasoning were left largely open. We want our definitions of irrelevance to make sufficient distinctions to make them useful in developing algorithms for detecting irrelevance. <p> INTRODUCTION The framework is shown to be general in that it encompasses definitions discussed in the past. These include definitions given by Subramanian <ref> [ Subramanian, 1989 ] </ref> and definitions given in analysis of databases [ Srivastava and Ramakrishnan, 1992 ] and [ Elkan, 1990 ] . <p> The query-tree can also be used as a tool for knowledge acquisition by 14 CHAPTER 1. INTRODUCTION illustrating the connections between pieces of knowledge in a knowledge base and by determining the effects of adding knowledge to the KB. Reformulation: Subramanian <ref> [ Subramanian, 1989 ] </ref> first analyzed irrelevance with the goal of automating reformulations. The work presented in this thesis advances Subramanian's analysis and suggests specific methods for discovering irrelevance and creating abstractions. <p> We begin by showing how definitions in previous work can be couched in the space. Other Definitions From the Literature Subramanian investigates several definitions of irrelevance, which are all instances of weak irrelevance in our framework. The main definition investigated in <ref> [ Subramanian, 1989 ] </ref> is the following: Definition 2.11: Let be a formula, be a query and be a knowledge base. <p> Therefore, W I (r; ; P ; DI 2 ; D ) holds. However, it follows from [ Shmueli, 1987 ] that redundancy is undecidable for dat-alog theories. Therefore, weak irrelevance is undecidable. It should be noted that Subramanian <ref> [ Subramanian, 1989 ] </ref> states a similar result for DI 3 , but does not give a proof. <p> However, in that context, irrelevance has a natural definition based on the notion of conditional independence. This notion does not carry over to the context of logical knowledge bases. The work most related to ours is the analysis of irrelevance given by Subra-manian <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> . Subramanian's motivations for analyzing irrelevance are similar to ours, namely, reformulating the knowledge base to create one that is simpler and will therefore lead to more efficient inference. <p> We have shown that the query-tree can be used to derive logical conclusions of irrelevance claims that are given to the system. A different approach, described in <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> is to give an axiomatization of irrelevance and use the axioms to reason about irrelevance claims. <p> To pursue this approach, additional relevance subjects should be considered in detail, as well as exploring alternative definitions of irrelevance. It should be noted that the idea of associating irrelevance with abstractions was also mentioned by Subramanian <ref> [ Subramanian, 1989 ] </ref> , but was not formalized or demonstrated concretely. Subramanian also mentions some of the new irrelevance subjects described here. Our results on projecting predicate arguments are related to the work by Ra-makrishnan et al. [ Ramakrishnan et al., 1988 ] on identifying existential queries. <p> The framework provided a setting in which we could investigate the connection between the notion of irrelevance and the creation of abstractions. This connection led 173 174 CHAPTER 8. CONCLUSIONS Title and reference Page (s) Analysis of (ir)relevance: A theory of irrelevance <ref> [ Subramanian and Genesereth, 1987; Subramanian, 1989 ] </ref> 39, 101, 144 In the philosophy literature [ Keynes, 1921; Carnap, 1950; Gardenfors, 1978 ] 39 Relevance logics [ Anderson and Belnap, 1975; Avron, 1992 ] 39 In probabilistic reasoning [ Pearl, 1988 ] 39 Static Analysis of rules/clauses: Connection graphs [ Kowalski,
Reference: [ Tenenberg, 1990 ] <author> Tenenberg, Josh D. </author> <year> 1990. </year> <title> Abstracting first order theories. </title> <editor> In Benjamin, Paul, editor 1990, </editor> <title> Change of Representation and Inductive Bias. </title> <publisher> Kluwer, </publisher> <address> Boston, Mass. </address>
Reference-contexts: Replacing a set of predicates q 1 ; : : : ; q n by a predicate q has been considered as the problem of predicate abstraction <ref> [ Plaisted, 1981; Tenenberg, 1990 ] </ref> . Our treatment of predicate abstraction is inspired by the work of Tenenberg. As before, we denote the result of the syntactic transformation we want to perform to a formula by f Q (). <p> Our algorithms use the query-tree and can therefore detect a larger class of irrelevance claims by considering interpreted literals in the rules, minimal derivations and extended languages including negated EDB subgoals. Our treatment of predicate abstraction in Section 6.4 is inspired by the work of Tenenberg <ref> [ Tenenberg, 1990 ] </ref> . Tenenberg considers the problem of finding the maximal set of clauses that are independent of a predicate refinement. He presents a constructive proof for the existence of such a set and shows that unless the knowledge base is empty, the set will be infinite. <p> evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction <ref> [ Plaisted, 1981; Tenenberg, 1990 ] </ref> 144 Projecting existential arguments [ Ramakrishnan et al., 1988 ] 144 A theory of abstraction [ Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991
Reference: [ Ullman, 1989 ] <author> Ullman, Jeffery D. </author> <year> 1989. </year> <title> Principles of Database and Knowledge-base Systems, Volumes I, II. </title> <publisher> Computer Science Press, </publisher> <editor> Rockville MD. [ van der Meyden, 1992 ] van der Meyden, </editor> <title> Ron 1992. The complexity of querying indefinite data about linearly ordered domains. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA. </address> <pages> 331-345. </pages>
Reference-contexts: The query-tree is related to several graph-like structures discussed in the literature, such as connection graphs [ Kowalski, 1975 ] , problem space graphs [ Etzioni, 1993 ] , compilation graphs [ Bruynooghe et al., 1989 ] and rule-goal graphs <ref> [ Ullman, 1989 ] </ref> . The main property distinguishing the query-tree from other structures is the principled treatment of recursion and interpretable constraints. <p> When 80% of the ground facts were deemed irrelevant the speedup grew to a factor of 90. We also discuss how the query-tree can be used to extend more sophisticated query evaluation schemes such as message-passing schemes [ Van-Gelder, 1986 ] and magic set transformations <ref> [ Ullman, 1989 ] </ref> . 3. Detecting irrelevant updates: A frequent operation in persistent knowledge bases is recomputing a query after an update is made to the knowledge base. <p> Hereafter, a constraint will refer to a constraint formula in some constraint lan guage L. Finally, we also consider cases in which the rules contain negated literals in their antecedents (and are therefore no longer Horn). In such cases, we assume: * The negation is stratified <ref> [ Ullman, 1989 ] </ref> . 13 * The negation is safe, i.e., if a variable appears in a negative literal in the an tecedent then it also appears in a positive literal in the antecedent. <p> Consequently, SI (e (X); p 3 (X); P 3 ; DI 2 ; M 3) does not hold. Finally, we show that strong irrelevance is undecidable when we allow the rules to have stratified negation. In our discussion, we assume perfect model semantics of the rules (cf. <ref> [ Ullman, 1989 ] </ref> ). 15 15 The perfect model of a set of rules is the one computed in a bottom-up fashion, stratum by stratum. 38 CHAPTER 2. ANALYZING IRRELEVANCE Lemma 2.18: Let P be a set of datalog rules with stratified negation and r 2 P. <p> The atomic formulas of this language are of the form (X Y ) or (X a), where X and Y are variables, a is a constant, and 2 f&lt;; ; &gt;; ; =; 6=g. Formulas in the language are either atomic or conjunctions of atomic formulas. In <ref> [ Ullman, 1989 ] </ref> , a complete polynomial-time decision procedure for this language is presented. Unfortunately, this language does not satisfy the Closure property we require. <p> static analysis of rules for different purposes, such as explanation based learning [ Etzioni, 1993 ] , partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] , automated reasoning [ Kowalski, 1975; Bruynooghe et al., 1989 ] and deductive databases <ref> [ Srivastava and Ramakrishnan, 1992; Ullman, 1989 ] </ref> . <p> Some have also used graph-like representations of the rules, such as problem space graphs [ Etzioni, 1993 ] , connection graphs [ Kowalski, 1975 ] , compilation graphs [ Bruynooghe et al., 1989 ] and rule/goal graphs <ref> [ Ullman, 1989 ] </ref> . Others have used rule folding/unfolding in their analysis. The key issue common to work that utilizes graph-like representations of rules or fold/unfold transformations is when to terminate the creation of the graph (or when to stop unfolding the rules). <p> In contrast, 4.3. ADDITIONAL USES OF THE QUERY-TREE 95 bottom-up techniques will not get into infinite loops (when the rules do not have function symbols), but may compute many facts that are not relevant to the query. The goal of the magic-set transformation method <ref> [ Ullman, 1989 ] </ref> is to combine the advantages of top-down and bottom-up evaluation methods. It transforms a given set of rules P to a new set P 1 , such that P 1 is equivalent to P with respect to the query predicate. <p> We can then refine the equivalence relation on nodes in the tree by requiring that the adornments be the same. The resulting rules will have the unique-binding property needed in order to create a magic program (see <ref> [ Ullman, 1989 ] </ref> , Algorithm 13.1, pg. 828). Applying the magic-sets rule transformation to this set of rules will yield the following rules for the query p (a; Y ) ^ (Y &lt; 2): 96 CHAPTER 4. <p> Since the rules created by the query-tree are equivalent to the original rules with respect to the query, it follows from Theorem 13.1 in <ref> [ Ullman, 1989 ] </ref> that our transformation is correct. It should be noted that using the query-tree to propagate the constraints has an advantage over previous techniques, such as the use of bcf adornments [ Mumick et al., 1990 ] . <p> Both of them considered restricted languages in which weak irrelevance is the same as strong irrelevance. The result of Blakeley et al. [ Blakeley et al., 1989 ] applies just to conjunctive queries (cf. <ref> [ Ullman, 1989 ] </ref> ), i.e., knowledge bases in which the antecedents of every rule are EDB predicates. Furthermore, the rules are restricted such that every predicate can only appear once in the antecedent. <p> Note that applying a stratified program to a database that may also have IDB facts is done stratum by stratum, as in the usual case; in other words, P (D) is the perfect model of the program P and the database D (cf. <ref> [ Ullman, 1989 ] </ref> ). Suppose that P 1 and P 2 are not uniformly equivalent. Hence, there is a database D 0 such that P 1 (D 0 ) 6= P 2 (D 0 ); D 0 is called a counterexample. <p> By the definition of D, if g is a ground fact having only constants from D, then g 2 D if and only if g 2 D; moreover, for every negative subgoal s, the constants appearing in st are all from D, since rules are safe (cf. <ref> [ Ullman, 1989 ] </ref> ). Therefore, items (1)-(3) hold even if we replace D with D, and so it follows that D is not a model of r|a contradiction, since D is a model of P i+1 2 , and r is a rule of P i+1 2 . <p> al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation <ref> [ Ullman, 1989; Mumick et al., 1990 ] </ref> 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted, 1981; Tenenberg, 1990 ] 144 Projecting existential arguments
Reference: [ Van-Gelder, 1986 ] <author> Van-Gelder, </author> <title> Allen 1986. A message passing framework for logical query evaluation. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data. </booktitle> <pages> 155-165. </pages>
Reference-contexts: When 80% of the ground facts were deemed irrelevant the speedup grew to a factor of 90. We also discuss how the query-tree can be used to extend more sophisticated query evaluation schemes such as message-passing schemes <ref> [ Van-Gelder, 1986 ] </ref> and magic set transformations [ Ullman, 1989 ] . 3. Detecting irrelevant updates: A frequent operation in persistent knowledge bases is recomputing a query after an update is made to the knowledge base. <p> In contrast, the query-tree considers the semantics of the interpreted literals to compute the actual constraint on the arguments. Message-Passing Query Evaluation Schemes In a message passing scheme for query evaluation <ref> [ Van-Gelder, 1986 ] </ref> , query evaluation is viewed as a system of cooperating processes communicating by message passing. Each process computes some set of tuples (essentially a subset of the relation for some relation). <p> Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata [ Vardi, 1989 ] 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation <ref> [ Van-Gelder, 1986 ] </ref> 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ] 94 Independence of queries from updates: Detecting independence [ Blakeley et al., 1989; Elkan, 1990 ] 112, 126 Conjunctive query containment [ Klug, 1988; van der Meyden, 1992 ] 126 Abstractions: Predicate abstraction [ Plaisted,
Reference: [ Vardi, 1989 ] <author> Vardi, Moshe Y. </author> <year> 1989. </year> <title> Automata theory for database theoreticians. </title> <booktitle> In Proceedings of the Eighth Symposium on Principles of Database Systems (PODS). </booktitle> <pages> 83-92. </pages>
Reference-contexts: three instances described, the method provides a powerful conceptual framework in which devising new labeling schemes becomes much easier. 3.6.1 Related Work The intuition behind the query-tree algorithm comes from translating the problem into a decision problem for tree-automata. 10 In fact, we have argued that a finite 10 See <ref> [ Vardi, 1989 ] </ref> for a discussion of the importance of tree automata in database theory. 3.6. SUMMARY 75 labeling scheme essentially guarantees that the set of derivations can be recognized by a reachability test on a finite tree automaton. <p> 1979 ] 76 Static analysis in Explanation Based Learning [ Etzioni, 1993; Etzioni, 1990 ] 75, 97 Pushing constraint selections [ Srivastava and Ramakrishnan, 1992 ] 75 Partial evaluation of logic programs [ Smith and Hickey, 1990; Lloyd and Shepherdson, 1991; Bruynooghe et al., 1991 ] 75, 100 Tree automata <ref> [ Vardi, 1989 ] </ref> 74 Automated reasoning and query evaluation: Knowledge compilation [ Selman and Kautz, 1991 ] 100 Deriving optimal search strategies [ Smith, 1986; Greiner, 1991 ] 97 Message passing based query evaluation [ Van-Gelder, 1986 ] 96 Magic set transformation [ Ullman, 1989; Mumick et al., 1990 ]
Reference: [ Weld, 1990 ] <author> Weld, </author> <title> Daniel 1990. Approximation reformulation. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Our approach can be viewed as combining the idea of a graph of models with compositional modeling. The model simplification problem has been addressed by Williams [ Williams, 1990a ] and Weld <ref> [ Weld, 1990 ] </ref> . Williams also makes use of causal influence graphs to simplify a model. Both Weld and Williams assume a complete model of the situation as an input. <p> Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification <ref> [ Weld, 1990; Williams, 1990a ] </ref> 170 Table 8.1: References to related work. to a new approach to research on reasoning with abstractions in which we investigate the properties of an abstraction by considering the irrelevance claims on which it is based.
Reference: [ Williams, 1990a ] <author> Williams, Brian C. </author> <year> 1990a. </year> <title> Capturing how things work: Constructing critical abstractions of local interactions. </title> <booktitle> In Proceedings of the AAAI Workshop on Automatic Generation of Approximations and Abstractions, </booktitle> <address> pp.163-174. </address>
Reference-contexts: Our approach can be viewed as combining the idea of a graph of models with compositional modeling. The model simplification problem has been addressed by Williams <ref> [ Williams, 1990a ] </ref> and Weld [ Weld, 1990 ] . Williams also makes use of causal influence graphs to simplify a model. Both Weld and Williams assume a complete model of the situation as an input. <p> Giunchiglia and Walsh, 1992 ] 145 Automatic creation of abstractions [ Knoblock, 1990; Knoblock et al., 1991 ] 146 Modeling physical devices: Compositional modeling [ Falkenhainer and Forbus, 1991 ] 170 Causal approximations [ Nayak, 1992a ] 169 Graphs of models [ Addanki et al., 1989 ] 170 Model simplification <ref> [ Weld, 1990; Williams, 1990a ] </ref> 170 Table 8.1: References to related work. to a new approach to research on reasoning with abstractions in which we investigate the properties of an abstraction by considering the irrelevance claims on which it is based.
Reference: [ Williams, 1990b ] <author> Williams, Brian C. </author> <year> 1990b. </year> <title> Interaction-based invention: Designing novel devices from first principles. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Williams also makes use of causal influence graphs to simplify a model. Both Weld and Williams assume a complete model of the situation as an input. Williams also makes use of the idea of following causal influences in his work on innovative design <ref> [ Williams, 1990b ] </ref> . 7.5. SUMMARY AND CONTRIBUTIONS 171 7.5 Summary and Contributions This chapter described an application of relevance reasoning to the domain of modeling physical systems.
Reference: [ Winslett, 1990 ] <author> Winslett, </author> <title> Marianne 1990. Updating Logical Databases. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England. </address>
References-found: 98

