URL: http://www.cs.ucsb.edu/~vigna/pub/inspect.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~vigna/listpub.html
Root-URL: http://www.cs.ucsb.edu
Email: vigna@elet.polimi.it  
Title: Inspect: a Lightweight Distributed Approach to Automated Audit Trail Analysis  
Author: Giovanni Vigna 
Address: Piazza Leonardo da Vinci, 32 20133 Milano (Italia)  
Affiliation: Dipartimento di Elettronica e Informazione Politecnico di Milano  
Abstract: Security is a key issue in the design and implementation of complex information systems. Security mechanisms and policies have to be deployed and then continuously maintained, monitored and audited. Auditing information is of great usefulness, but difficult to manage. Thus, several tools for security audit trail analysis have been developed to assist audit trails analysts in their work. Great effort is currently being devoted to improve such tools with real-time intrusion detection capabilities. This paper presents Inspect, a system for automated audit trail analysis, which aims at real-time intrusion detection. Inspect tries to emulate, with its distributed architecture, the behavior of a team of security audit trail analysts, using the divide et impera approach. Inspect is based on InSpeL, a rule-based language, which aims at specifying break-ins and system abuse scenarios. Keywords: computer security, distributed systems, audit trails analysis, intrusion detection.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. P. Anderson. </author> <title> Computer Security Threat Monitoring and Surveillance, </title> <month> April </month> <year> 1980. </year>
Reference-contexts: On the other end, coarse grain auditing could provide insufficient information to security auditors. Usually, the auditing facilities are tuned in order to collect just traces of the operations that are considered security-relevant. In general, auditing is an essential source of information for security managers <ref> [1] </ref>, but presents two main drawbacks: 2 1. it produces a huge amount of data: audit trails analysts have to cope with tons of raw audit records, often difficult to interpret; 2. audit trails provide the evidence of system abuse only after the abuse has occurred. <p> C type integer long int char char string char* real double Table 1: Action body type translation. #include &lt;stdio.h&gt; char* msgString; char* auditRecordVect [5]; ... sprintf (msgString, "WARNING: fast repeated login attempts" at %d as user %s from host %s", LoginTime, LoginName, LoginHost); sendMessage (msgString); auditRecordVect [0] = "repeatedLogins"; auditRecordVect <ref> [1] </ref> = itoa (LoginTime); auditRecordVect [2] = LoginHost; auditRecordVect [3] = LoginName; auditRecordVect [4] = NULL; sendAuditRecord (auditRecordVect); - When the rule is satisfied, an audit record of type repeatedLogins is inserted in the audit record stream and is matched against the existing rule trig gers.
Reference: [2] <institution> Bugtraq mailing list. </institution>
Reference-contexts: Then, firewall maintainers have to continuously keep themselves up to date about new security bugs <ref> [3, 2] </ref> in order to understand if the integrity of their system is in danger and to deploy the required patches in a short time. <p> char char string char* real double Table 1: Action body type translation. #include &lt;stdio.h&gt; char* msgString; char* auditRecordVect [5]; ... sprintf (msgString, "WARNING: fast repeated login attempts" at %d as user %s from host %s", LoginTime, LoginName, LoginHost); sendMessage (msgString); auditRecordVect [0] = "repeatedLogins"; auditRecordVect [1] = itoa (LoginTime); auditRecordVect <ref> [2] </ref> = LoginHost; auditRecordVect [3] = LoginName; auditRecordVect [4] = NULL; sendAuditRecord (auditRecordVect); - When the rule is satisfied, an audit record of type repeatedLogins is inserted in the audit record stream and is matched against the existing rule trig gers.
Reference: [3] <author> CERT. </author> <month> CERT Advisories. </month>
Reference-contexts: Then, firewall maintainers have to continuously keep themselves up to date about new security bugs <ref> [3, 2] </ref> in order to understand if the integrity of their system is in danger and to deploy the required patches in a short time. <p> real double Table 1: Action body type translation. #include &lt;stdio.h&gt; char* msgString; char* auditRecordVect [5]; ... sprintf (msgString, "WARNING: fast repeated login attempts" at %d as user %s from host %s", LoginTime, LoginName, LoginHost); sendMessage (msgString); auditRecordVect [0] = "repeatedLogins"; auditRecordVect [1] = itoa (LoginTime); auditRecordVect [2] = LoginHost; auditRecordVect <ref> [3] </ref> = LoginName; auditRecordVect [4] = NULL; sendAuditRecord (auditRecordVect); - When the rule is satisfied, an audit record of type repeatedLogins is inserted in the audit record stream and is matched against the existing rule trig gers.
Reference: [4] <author> B. Chapman and E. </author> <title> Zwicky. Building Internet Firewalls. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1995. </year>
Reference-contexts: Auditing collects traces of sensitive actions performed by users in the system, in order to provide evidence of abuses, misbehaviors or attacks. As an example of this process let us consider a firewall system <ref> [5, 4] </ref>. The design and implementation of a firewall system is difficult, since filtering access to the global Internet may clash with the throughput requirements or the characteristics of an application (for example the need to open a TCP connection from a host outside the firewall perimeter). <p> Action body type translation. #include &lt;stdio.h&gt; char* msgString; char* auditRecordVect [5]; ... sprintf (msgString, "WARNING: fast repeated login attempts" at %d as user %s from host %s", LoginTime, LoginName, LoginHost); sendMessage (msgString); auditRecordVect [0] = "repeatedLogins"; auditRecordVect [1] = itoa (LoginTime); auditRecordVect [2] = LoginHost; auditRecordVect [3] = LoginName; auditRecordVect <ref> [4] </ref> = NULL; sendAuditRecord (auditRecordVect); - When the rule is satisfied, an audit record of type repeatedLogins is inserted in the audit record stream and is matched against the existing rule trig gers.
Reference: [5] <author> W. R. Cheswick and S. M. Bellovin. </author> <title> Firewalls and Internet Security: Repelling the Wily Hacker. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Auditing collects traces of sensitive actions performed by users in the system, in order to provide evidence of abuses, misbehaviors or attacks. As an example of this process let us consider a firewall system <ref> [5, 4] </ref>. The design and implementation of a firewall system is difficult, since filtering access to the global Internet may clash with the throughput requirements or the characteristics of an application (for example the need to open a TCP connection from a host outside the firewall perimeter). <p> we declare our record format: audrec repeatedLogins - integer time; string loginName; string origHost; - This could be the fastRepeatedLogins rule action: action - 8 InSpeL type C type integer long int char char string char* real double Table 1: Action body type translation. #include &lt;stdio.h&gt; char* msgString; char* auditRecordVect <ref> [5] </ref>; ... sprintf (msgString, "WARNING: fast repeated login attempts" at %d as user %s from host %s", LoginTime, LoginName, LoginHost); sendMessage (msgString); auditRecordVect [0] = "repeatedLogins"; auditRecordVect [1] = itoa (LoginTime); auditRecordVect [2] = LoginHost; auditRecordVect [3] = LoginName; auditRecordVect [4] = NULL; sendAuditRecord (auditRecordVect); - When the rule is satisfied,
Reference: [6] <author> D. E. Denning. </author> <title> An Intrusion Detection Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1987. </year>
Reference-contexts: To cope with the first issue, procedures, algorithms and metrics to recognize suspicious activities have been studied <ref> [17, 6] </ref>. Tools (based on expert system techniques) have been developed to assist audit trail security analysts in their work, automating the off-line security analysis of audit trails [13].
Reference: [7] <author> D. E. Denning and P. G. Neumann. </author> <title> Requirements and Model for IDES </title> - 
Reference-contexts: The evidence produced by such studies has been used as a basis for the development of intrusion-detection systems, which aim at resolving the second issue described above. Such systems continuously monitor user behavior, and interpret the produced data on-line, trying to detect break-ins and system abuses as they occur <ref> [7, 16] </ref>. Intrusion detection can be carried out using approaches based on statistics, models or rules. Following the first approach, the audit information is used to build statistical profiles of the users [11, 14].
References-found: 7

