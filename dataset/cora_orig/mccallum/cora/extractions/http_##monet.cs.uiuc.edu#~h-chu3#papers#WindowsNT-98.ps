URL: http://monet.cs.uiuc.edu/~h-chu3/papers/WindowsNT-98.ps
Refering-URL: http://monet.cs.uiuc.edu/~h-chu3/
Root-URL: http://www.cs.uiuc.edu
Email: clin2, h-chu3, klara@cs.uiuc.edu  
Title: A Soft Real-time Scheduling Server on the Windows NT  
Author: Chih-han Lin, Hao-hua Chu, Klara Nahrstedt 
Address: Urbana Champaign  
Affiliation: Department of Computer Science University of Illinois at  
Abstract: We present the design and implementation of a soft real time CPU server for the timesensitive multimedia applications in the Windows NT environment. The server is a user-level daemon process from which multimedia applications can request and acquire periodic processing time in the well-known form of (processing time per period). Our server is based on a careful manipulation of the real time(RT) priority class, and it does not require any modifications to the kernel. It provides (1) the rate monotonic scheduling algorithm, (2) support for multiple processors (SMP model), (3) limited overrun protection among real-time(RT) processes, (4) fair allocation between the RT and time sharing (TS) processes so that TS processes are not starved for processing time, (5) accessibility by a normal user privilege, and (6) an efficient implementation. We have implemented the CPU scheduling server on top of the Windows NT 4.0 operating system with dual Pentium processors, and we have shown through experiments that our CPU scheduling server provides good soft real time support for the multimedia applications. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Richard Black, Paul Barham, Austin Donnelly, Neil Stratford. </author> <title> Protocol Implementation in a Vertically Structured Operating System. </title> <journal> IEEE LCN, </journal> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis <ref> [1] </ref>, and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling. The RT process first sends a reservation request, which specifies its resource demand, e.g., RT Mach convention of (requested CPU usage time, period), to the resource manager.
Reference: 2. <author> Z. Deng, J.W.-S. Liu, J. Sun. </author> <title> Dynamic Scheduling of Hard Real-Time Applications in Open System Environment. </title> <type> Technical Report No. </type> <institution> UIUCDCS-R-96-1981, Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: There have been several research results that address the issues of accommodating scheduling of soft RT processes in general purpose operating system environment. They are the Constant Utilization Servers <ref> [2] </ref>, the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system [10].
Reference: 3. <author> R. Gopalakrishnan. </author> <title> Efficient Quality of Service Support Within Endsystems for High Speed Multimedia Networking. </title> <type> PhD Thesis, </type> <institution> Washington University. </institution> <month> Dec. 96. </month>
Reference-contexts: They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall <ref> [3] </ref>, the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling.
Reference: 4. <author> Pawan Goyal, Xingang Guo, Harrick Vin. </author> <title> A Hierarchical CPU Scheduler for Multimedia Operating System. </title> <booktitle> The proceedings of Second Usenix Symposium on Operating System Design and Implementation, </booktitle> <address> Seattle WA, </address> <month> Oct </month> <year> 1996. </year>
Reference-contexts: There have been several research results that address the issues of accommodating scheduling of soft RT processes in general purpose operating system environment. They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler <ref> [4] </ref>, the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling.
Reference: 5. <author> Michael B. Jones, Daniela Rosu, Marcel-Catalin Rosu. </author> <title> CPU Reservations and Time Constraints: Efficient, predictable Scheduling of Independent Activities. </title> <booktitle> Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP '97), </booktitle> <address> St. Malo, France, </address> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system <ref> [5] </ref>, the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling.
Reference: 6. <author> Chen Lee, Ragunathan Rajkumar, Cliff Mercer. </author> <title> Experience with Processor Reservation and Dynamic QoS in Real-Time Mach. </title> <booktitle> Multimedia Japan, </booktitle> <year> 1996. </year>
Reference: 7. <author> Jun Kamada, Masanobu Yuhara, Etsuo Ono. </author> <title> User-level Realtime Scheduler Exploiting Kernel-level Fixed Priority Scheduler. </title> <booktitle> Multimedia Japan, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: There have been several research results that address the issues of accommodating scheduling of soft RT processes in general purpose operating system environment. They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler <ref> [7] </ref>, the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling. <p> If the admission control test succeeds, the RT process is scheduled according to the reserv ation contract. Our scheduling mechanism is based on the user-level RT scheduler (URSched) proposed by Kamada <ref> [7] </ref> in UNIX. The URSched mechanism is based on the POSIX.4 fixed priority extension and its priority scheduling rule. The user-level scheduler is implemented on top of the kernel scheduler, and it runs at the highest possible fixed-priority.
Reference: 8. <author> Clifford W. Mercer, Stefan Savage, Hideyuki Tokuda. </author> <title> Processor Capacity Reserves: Operating System Support for Multimedia Applications''. </title> <booktitle> IEEE International Conference on Multimedia Computing and Systems. </booktitle> <month> May </month> <year> 1994. </year>
Reference: 9. <author> Klara Nahrstedt, Hao-hua Chu, Srinivas Narayan. </author> <title> QoS-Aware Resource Management for Distributed Multimedia Application. </title> <type> Technical Report No. </type> <institution> UI-UCDCS-R-97-2030, Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server <ref> [9] </ref>, the Rialto operating system [5], the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling. <p> It provides the flexibility to implement any scheduling algorithms in the user-level scheduler, e.g., rate monotonic, earliest deadline first, or a hierarchical scheduler. The above discussed scheduling mechanism was used and further expanded by additional mechanisms, algorithms, and policies in our QoS-aware resource management middleware <ref> [9] </ref>, called QualMan. In this context, the middleware is understood as a system software between operating system and applications that provides access to extended and flexible OS services, e.g. real time support, to applications without any modifications of the operating systems.
Reference: 10. <author> Jason Nieh, Monica Lam. </author> <title> The Design, Implementation and Evaluation of SMART: A Scheduler for Multimedia Applications. </title> <booktitle> Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> St. Malo, France, </address> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system <ref> [10] </ref>. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling. The RT process first sends a reservation request, which specifies its resource demand, e.g., RT Mach convention of (requested CPU usage time, period), to the resource manager. <p> [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling [11], the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system <ref> [10] </ref>. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling. The RT process first sends a reservation request, which specifies its resource demand, e.g., RT Mach convention of (requested CPU usage time, period), to the resource manager.
Reference: 11. <author> David K.Y. Yau and Simon S. Lam. </author> <title> Adaptive Rate-Controlled Scheduling for Multimedia Applications. </title> <booktitle> ACM Multimedia Conference, </booktitle> <address> Boston, MA, </address> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: They are the Constant Utilization Servers [2], the Processor Reserve of the RT Mach [8,6], the Hierarchical CPU scheduler [4], the User-level Real Time Scheduler [7], the Real Time Upcall [3], the Rate-Controlled Scheduling <ref> [11] </ref>, the Soft RT scheduling Server [9], the Rialto operating system [5], the Nemesis [1], and the SMART system [10]. All except [10] are based on the general concepts of reservation, resource allocation, and scheduling.
Reference: 12. <author> R. Nagarajan and C. Vogt. </author> <title> Guaranteed-Performance Transport of Multimedia Traffic over the Token Ring. </title> <type> Technical Report 43.9201, </type> <institution> IBM Euro-pean Networking Center, IBM Heidelberg, Germany, </institution> <year> 1992. </year>
Reference-contexts: Then the broker and the dispatcher schedule the RT process by manipulating its priority, the mechanism is described below. 2.2 Broker and Dispatch Table The broker receives requests from the client RT processes. It performs an admission control test for the non-preemptive rate monotonic scheduling algorithm <ref> [12] </ref> to determine whether the new client RT process can be scheduled. Note that all equations must be satisfied for the admission test to succeed.
References-found: 12

