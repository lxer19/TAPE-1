URL: http://www2.cs.cornell.edu/zeno/Papers/ThinStreams/ts.ps
Refering-URL: http://www2.cs.cornell.edu/zeno/Papers/
Root-URL: 
Title: Abstract Multicast is a common method for distributing audio and video over the Internet. Since
Note: This work evaluates the join/leave algorithms  
Abstract: This paper presents a new solution to the join/leave problem using ThinStreams. In ThinStreams, a single video layer is multicast over several multicast groups, each with identical bandwidth. ThinStreams separates the coding scheme (i.e., the video layers) from control (i.e., the multicast groups), helping to bound network oscillations caused by receivers joining and leaving high bandwidth multicast groups. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. S. Ahn, P. B. Danzig, Z. Liu, and L. Yan, </author> <title> Evaluation of TCP Vegas: Emulation and Experiment, </title> <booktitle> Proceedings of ACM Sigcomm, </booktitle> <year> 1995 </year>
Reference-contexts: This problem is exasperated by the relatively high bandwidth used in most layered video coding systems. When such a group is added in a join experiment, the network buffering (about 4-8 KB for the Internet <ref> [1] </ref>) is usually insufficient to absorb the resulting congestion caused during the join experiment. For instance, if a 256 Kbps layer is added in a 2 second join experiment, the network must buffer up to 64 KB to avoid loss. <p> We discuss the interaction of the ThinStreams architecture and the video codec in section 7. The thin stream bandwidth, R, is easily calculated. If B is the buffering in the network and T is the duration of the join experiment, then the buffering required to prevent loss is TRB <ref> [1] </ref> Using B=4 Kbytes for the Internet (as in TCP Vegas [1]) and a conservative value for T (2 seconds), we get R=16 Kbps. <p> The thin stream bandwidth, R, is easily calculated. If B is the buffering in the network and T is the duration of the join experiment, then the buffering required to prevent loss is TRB <ref> [1] </ref> Using B=4 Kbytes for the Internet (as in TCP Vegas [1]) and a conservative value for T (2 seconds), we get R=16 Kbps. Since the values of T and B depend on network parameters, such as the latency between joining and leaving a multicast group and the amount of buffering in the network, R can be different for each receiver. <p> The expected throughput is WindowSize/BaseRTT, where BaseRTT is the minimum RTT seen so far. The difference between these quantities corresponds to the amount of buffering in the network and, by adjusting WindowSize, is kept between 4-6 KB <ref> [1] </ref> The advantage of this scheme is that, in the ideal case, it detects congestion before loss has occurred, and therefore causes less congestion than schemes that use loss for flow control.
Reference: [2] <author> J. C. Bolot, T. Turletti, and I. Wakeman, </author> <title> Scalable feedback control for multicast video distribution, </title> <booktitle> Proceedings of ACM Sigcomm, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Bolot suggested a scaleable feedback scheme where the minimum of the bandwidth reported by the receivers, or some percentile of the minimum (e.g., the bandwidth that 80% of the receivers can support) is used as the sending rate <ref> [2] </ref>. For video transmission, such constant bandwidth schemes usually waste bandwidth on some channels or cause congestion on others (or both!). A better solution to the heterogeneous receiver problem is to use layered video coding and multiple multicast groups (MMG).
Reference: [3] <author> L. S. Brakmo, S. W. O'Malley, and L. L. Peterson, </author> <title> TCP Vegas: New Techniques for Congestion Detection and Avoidance, </title> <booktitle> Proceedings of ACM Sigcomm, </booktitle> <month> September </month> <year> 1994 </year>
Reference-contexts: To avoid such adverse effects, ThinStreams does not use loss to detect channel overload. Instead, it uses the difference between the expected and measured throughput, a solution that was inspired by TCP Vegas <ref> [3] </ref>. TCP Vegas uses the difference between the measured throughput and the expected throughput to control the size of the TCP window. In TCP Vegas, the measured throughput is WindowSize/RTT, where RTT is the measured round trip time, and WindowSize is the size of the TCP window.
Reference: [4] <author> N. Chaddha and A. Gupta, </author> <title> A framework for live multicast of video streams over the Internet, </title> <booktitle> Proceedings of IEEE Conference on Image Processing, </booktitle> <month> September </month> <year> 1996 </year>
Reference: [5] <author> S. Deering. </author> <title> Internet multicast routing. State of art and open research issues, MICE Seminar, </title> <address> Stockholm, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: These algorithms must interact gracefully with other receivers that may be using the same algorithm or another congestion control algorithm (e.g., TCP). Deering first suggested that IP multicast be used with layered video coding, mapping layers onto multiple multicast groups (MMG) <ref> [5] </ref>. Several researchers have presented layered compression algorithms [4,8] and suggesting using MMG, but they do not specify algorithms for joining and leaving multicast groups. An important exception is McCanne's Receiver-driven Layered Multicast (RLM) [6], which comes closest in spirit to our work.
Reference: [6] <author> S. McCanne, V. Jacobson, and M. Vetterli, </author> <title> Receiver-driven Layered Multicast, </title> <booktitle> Proceedings of ACM Sigcomm, </booktitle> <year> 1996 </year>
Reference-contexts: More layers leads to a better video quality while fewer layers lead to reduced bandwidth requirements. To implement this scheme, the receiver must decide when to join or leave multicast groups. McCanne proposed a solution to the join/leave problem called Receiver-driven Layered Multicast (RLM) <ref> [6] </ref>. RLM assumes that the network provides best effort service and supports IP multicast, and uses the term session to denote the set of groups used by a source to send layered video. <p> Several researchers have presented layered compression algorithms [4,8] and suggesting using MMG, but they do not specify algorithms for joining and leaving multicast groups. An important exception is McCanne's Receiver-driven Layered Multicast (RLM) <ref> [6] </ref>, which comes closest in spirit to our work. McCanne explores algorithms to join and leave groups within a session (the set of groups used for by a source to send layered video). McCanne uses packet loss to detect congestion and join-experiments to determine when excess capacity is available.
Reference: [7] <author> H. Schulzrinne and S. Casner, RTP: </author> <title> A transport Protocol for Real-Time Applications, </title> <type> Internet Draft, </type> <month> draft-ietf-avt-rtp-04 October, </month> <year> 1993, </year>
Reference-contexts: McCanne uses packet loss to detect congestion and join-experiments to determine when excess capacity is available. If the number of join-experiments is allowed to grow with the number of receivers, the network will be constantly overloaded. Using a protocol like RTCP (Real Time Control Protocol) <ref> [7] </ref> reduces the number of join experiments. Although this allows the protocol to scale, it slows down the convergence of the receivers. RLM therefore uses shared learning to improve convergence. A receiver advertises its intention of conducting an experiment to other members of the group.
Reference: [8] <author> S. Cheung and A. Zakhor, </author> <title> Scalable Video Compression With Motion Compensated Prediction, </title> <booktitle> IEEE International Conference on Image Processing, </booktitle> <address> Washington D.C., </address> <month> Oct </month> <year> 1995. </year>
Reference: [9] <author> M. Gilge and R. Gusella, </author> <title> Motion video coding for packet switched networks - an integrated approach, </title> <booktitle> Proceedings of the SPIE conference on Visual Communications and Image Processing, </booktitle> <month> November, </month> <year> 1991. </year>
Reference-contexts: Related work includes work on unicast and multicast video distribution with layered codecs. Several unicast video distribution systems have studied the problems associated with storing a scaleable video stream on a server <ref> [9, 10, 11, 12] </ref>. The server receives feedback from the client or the network, and adapts the transmission rate based on a control algorithm. These algorithms must interact gracefully with other receivers that may be using the same algorithm or another congestion control algorithm (e.g., TCP). <p> One of the disadvantages of using ThinStreams is slow convergence. Since ThinStreams splits a video layer among many multicast groups, each of which must be joined separately, many groups must be joined before the video quality increases significantly. Our experiences with video perception <ref> [9] </ref> show that users do not want the video quality to oscillate rapidly but prefer it to change more slowly. Thus, we conjecture that the slow rate of convergence will not be a problem in practice. We will continue tuning the algorithm and architecture.
Reference: [10] <author> H. Kanakia, P. P. Mishra, and A. Reibman, </author> <title> An Adaptive Congestion Control Scheme for Real Time Packet Video Transport, </title> <booktitle> Proceedings of ACM SigComm, </booktitle> <year> 1993. </year>
Reference-contexts: Related work includes work on unicast and multicast video distribution with layered codecs. Several unicast video distribution systems have studied the problems associated with storing a scaleable video stream on a server <ref> [9, 10, 11, 12] </ref>. The server receives feedback from the client or the network, and adapts the transmission rate based on a control algorithm. These algorithms must interact gracefully with other receivers that may be using the same algorithm or another congestion control algorithm (e.g., TCP). <p> Some existing codecs, like SPHIT [14] (an enhancement of Embedded Zero Tree Wavelets) and HVQ (Hierarchical Vector Quantization [13]), can be easily split into thin streams. Others, such as Motion JPEG [28], MPEG [11], H.261, Haar (NV <ref> [10] </ref>) require large jumps in bandwidth to obtain significantly different end quality. When inter-frame differential coding is used (such as in H.261 or MPEG), the base layer is usually a high bandwidth stream, reducing the value of layering.
Reference: [11] <author> P. Pancha and M. El Zarki, </author> <title> Prioritized Transmission of Variable Bit Rate MPEG Video, </title> <booktitle> Proceedings of IEEE Globecom, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Related work includes work on unicast and multicast video distribution with layered codecs. Several unicast video distribution systems have studied the problems associated with storing a scaleable video stream on a server <ref> [9, 10, 11, 12] </ref>. The server receives feedback from the client or the network, and adapts the transmission rate based on a control algorithm. These algorithms must interact gracefully with other receivers that may be using the same algorithm or another congestion control algorithm (e.g., TCP). <p> Some existing codecs, like SPHIT [14] (an enhancement of Embedded Zero Tree Wavelets) and HVQ (Hierarchical Vector Quantization [13]), can be easily split into thin streams. Others, such as Motion JPEG [28], MPEG <ref> [11] </ref>, H.261, Haar (NV [10]) require large jumps in bandwidth to obtain significantly different end quality. When inter-frame differential coding is used (such as in H.261 or MPEG), the base layer is usually a high bandwidth stream, reducing the value of layering.
Reference: [12] <author> A. R. Reibman and A. W. Berger, </author> <title> On VBR Video Teleconferencing over ATM Networks, </title> <booktitle> Proceedings of IEEE Infocom, </booktitle> <year> 1992 </year>
Reference-contexts: Related work includes work on unicast and multicast video distribution with layered codecs. Several unicast video distribution systems have studied the problems associated with storing a scaleable video stream on a server <ref> [9, 10, 11, 12] </ref>. The server receives feedback from the client or the network, and adapts the transmission rate based on a control algorithm. These algorithms must interact gracefully with other receivers that may be using the same algorithm or another congestion control algorithm (e.g., TCP).
Reference: [13] <author> N. Chaddha, </author> <title> Hierarchical Vector Quantization, </title> <booktitle> Data Compression Conference, 1994. </booktitle> ( ) <address> m /12 -f </address>
Reference-contexts: As multimedia sessions are usually long this is not a major issue. 7. Discussion and Future Work One question raised by ThinStreams is which compression algorithms can exploit the ThinStreams architecture. Some existing codecs, like SPHIT [14] (an enhancement of Embedded Zero Tree Wavelets) and HVQ (Hierarchical Vector Quantization <ref> [13] </ref>), can be easily split into thin streams. Others, such as Motion JPEG [28], MPEG [11], H.261, Haar (NV [10]) require large jumps in bandwidth to obtain significantly different end quality.
Reference: [14] <author> A. Said and W. A. Pearlman, </author> <title> A New Fast and Efficient Image Codec Based on Set Partitioning in Hierarchical Trees, </title> <journal> IEEE Transactions on Circuits and Systems for Video Technology, </journal> <volume> vol. 6, </volume> <pages> pp. 243-250, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: As multimedia sessions are usually long this is not a major issue. 7. Discussion and Future Work One question raised by ThinStreams is which compression algorithms can exploit the ThinStreams architecture. Some existing codecs, like SPHIT <ref> [14] </ref> (an enhancement of Embedded Zero Tree Wavelets) and HVQ (Hierarchical Vector Quantization [13]), can be easily split into thin streams. Others, such as Motion JPEG [28], MPEG [11], H.261, Haar (NV [10]) require large jumps in bandwidth to obtain significantly different end quality.
Reference: [15] <author> S. Keshav, </author> <title> REAL simulator (software online) 2 </title>
Reference-contexts: The value of t lj at the knee of the curve is used as an approximation for the leave latency. 6. Experimental Evaluation We evaluated ThinStreams using both simulation experiments and the MBone. For the simulation experiments, we modified the REAL 4.0 simulator <ref> [15] </ref> to simulate IP-multicast. This section reports the results of those studies. 6.1 Simulation We simulated ThinStreams on different topologies to stress different aspects of its join-leave algorithm. In all simulations, the bandwidth of each thin stream was 16 Kbps, and the packet size was 256 bytes.
References-found: 15

