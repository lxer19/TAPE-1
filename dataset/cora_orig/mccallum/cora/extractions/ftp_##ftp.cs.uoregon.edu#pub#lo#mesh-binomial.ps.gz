URL: ftp://ftp.cs.uoregon.edu/pub/lo/mesh-binomial.ps.gz
Refering-URL: http://www.cs.uoregon.edu/research/DistributedComputing/archive.html
Root-URL: http://www.cs.uoregon.edu
Email: lo@cs.uoregon.edu  rajopadhye@irisa.fr  
Title: Parallel Divide and Conquer on Meshes  
Author: S. Rajopadhye J. Telle, X. Zhong 
Keyword: mapping, embedding, divide and conquer algorithms, binomial tree, mesh connected machines, routing, wormhole routing, store and forward routing, contention, dilation.  
Note: This research was supported by a grant from the Oregon Advanced Computing Institute (OACIS), and NSF Grants CCR-8808532, MIP-9108528, and MIP-8802454  
Address: Eugene, OR 97403-1202  35042 Rennes, France  Eugene, OR 97403-1202  
Affiliation: Computer Science Department University of Oregon  IRISA  Computer Science Department University of Oregon  
Abstract: We address the problem of mapping divide-and-conquer programs to mesh connected multicomputers with wormhole or store-and-forward routing. We propose the binomial tree as an efficient model of parallel divide-and-conquer and present two mappings of the binomial tree to the 2D mesh. Our mappings exploit regularity in the communication structure of the divide-and-conquer computation and are also sensitive to the underlying flow control scheme of the target architecture. We evaluate these mappings using new metrics which are extensions of the classical notions of dilation and contention. We introduce the notion of communication slowdown as a measure of the total communication overhead incurred by a parallel computation. We conclude that significant performance gains can be realized when the mapping is sensitive to the flow control scheme of the target architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal. </author> <title> Limits on Network Performance. MIT VLSI Memo, </title> <year> 1990. </year>
Reference-contexts: Much work has been done to analytically model a network with different routing schemes <ref> [12, 8, 1] </ref>. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application.
Reference: [2] <author> W. C. Athas and C. L. Seitz. </author> <title> Multicomputers: Message-passing concurrent computers. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 9-23, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: 1 Introduction A well-known problem-solving paradigm that occurs in many computations is divide-and-conquer. If the subproblems are independent of each other, they may be executed in parallel, and this makes it a useful paradigm for designing large scale parallel programs. Divide-and-conquer has been studied by many researchers <ref> [7, 2, 3, 13, 14] </ref> and is applicable to a wide range of applications. In this paper, we address the problem of mapping degree-two divide and conquer computations on two-dimensional meshes. <p> The "keep half, send half" strategy to improve the efficiency of a divide and conquer algorithm was observed in <ref> [7, 2] </ref>. However, the model is not formalized and the underlying binomial tree structure was not recognized in those papers. In [11], a spanning binomial tree of a hypercube was used to achieve efficient broadcasting. <p> As is well known in the folklore and noted by many authors <ref> [2, 7] </ref>, an obvious way to improve the performance is to use the "keep half, send half" strategy, outlined below. The parameter ff, used in step 2 below (we assume that 0 &lt; ff 1), denotes the message size in each phase, as a fraction of the incoming message.
Reference: [3] <author> G. E. Blelloch. </author> <title> Vector Models For Data-Parallel Computing. </title> <publisher> THE MIT PRESS, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction A well-known problem-solving paradigm that occurs in many computations is divide-and-conquer. If the subproblems are independent of each other, they may be executed in parallel, and this makes it a useful paradigm for designing large scale parallel programs. Divide-and-conquer has been studied by many researchers <ref> [7, 2, 3, 13, 14] </ref> and is applicable to a wide range of applications. In this paper, we address the problem of mapping degree-two divide and conquer computations on two-dimensional meshes.
Reference: [4] <author> S. H. Bokhari. </author> <title> Assignment Problems in Parallel and Distributed Computing. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1987. </year> <month> 20 </month>
Reference-contexts: The maximum dilation and contention (congestion) are used as the two major metrics to measure an embedding. In the context of mapping a parallel program which is modeled as a static task graph <ref> [16, 4] </ref>, such an approach is usually used to assign tasks to processors [4]. However, as we have argued in this paper, that approach ignores the temporal aspect of a computation and the underlying communication technique. <p> The maximum dilation and contention (congestion) are used as the two major metrics to measure an embedding. In the context of mapping a parallel program which is modeled as a static task graph [16, 4], such an approach is usually used to assign tasks to processors <ref> [4] </ref>. However, as we have argued in this paper, that approach ignores the temporal aspect of a computation and the underlying communication technique. <p> General formul for arbitrary mappings is the subject of our ongoing work, and is beyond the scope of this paper. The mapping problem typically uses the well known static task graph model of Stone [16] and Bokhari <ref> [4] </ref>. The parallel computation is viewed as a weighted graph, G C = hV C ; E C ; W i.
Reference: [5] <author> S.H. Bokhari. </author> <title> Communication overhead on the Intel iPSC-860 hypercube. </title> <type> Technical report, </type> <institution> ICASE, NASA Langley Research Center, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: For example, it has been well recognized that in a wormhole-routed or a circuit switching multicomputer network, the distance effect, compared with the effect of the message collision, is negligible for the message latency <ref> [10, 8, 5] </ref>. Much work has been done to analytically model a network with different routing schemes [12, 8, 1]. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application.
Reference: [6] <author> S.S. Chittor. </author> <title> Communication Performance of Multicomputers. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Michigan State University, </institution> <year> 1991. </year>
Reference-contexts: all the other edges in E i which also use some link that is used by e, i.e., I (e) = fe 0 2 E i j e 6= e 0 ^ M e (e) " M e (e 0 ) 6= ;g. "Path level contention," as introduced by Chittor <ref> [6] </ref> is a similar notion, except he does not deal with phased computations.
Reference: [7] <author> M. I. Cole. </author> <title> Algorithmic Skeletons: Structured Management of Parallel Computation. </title> <booktitle> In Research Monographs in Parallel and Distributed Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction A well-known problem-solving paradigm that occurs in many computations is divide-and-conquer. If the subproblems are independent of each other, they may be executed in parallel, and this makes it a useful paradigm for designing large scale parallel programs. Divide-and-conquer has been studied by many researchers <ref> [7, 2, 3, 13, 14] </ref> and is applicable to a wide range of applications. In this paper, we address the problem of mapping degree-two divide and conquer computations on two-dimensional meshes. <p> Section 6 presents our analysis and we conclude with a discussion and indication of future work. 1 2 Related Work The divide and conquer model has been widely recognized as an effective parallel programming paradigm <ref> [14, 7] </ref>. Recently, an algebraic theory has been developed to provide a general framework to describe this class of computations and the mapping of such class of algorithms to hypercube-like architectures has been also discussed by Mou and Hudak [13]. <p> The "keep half, send half" strategy to improve the efficiency of a divide and conquer algorithm was observed in <ref> [7, 2] </ref>. However, the model is not formalized and the underlying binomial tree structure was not recognized in those papers. In [11], a spanning binomial tree of a hypercube was used to achieve efficient broadcasting. <p> As is well known in the folklore and noted by many authors <ref> [2, 7] </ref>, an obvious way to improve the performance is to use the "keep half, send half" strategy, outlined below. The parameter ff, used in step 2 below (we assume that 0 &lt; ff 1), denotes the message size in each phase, as a fraction of the incoming message.
Reference: [8] <author> W.J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Trans. Computers., </journal> <volume> C-39(6):775-785, </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: For example, it has been well recognized that in a wormhole-routed or a circuit switching multicomputer network, the distance effect, compared with the effect of the message collision, is negligible for the message latency <ref> [10, 8, 5] </ref>. Much work has been done to analytically model a network with different routing schemes [12, 8, 1]. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application. <p> Much work has been done to analytically model a network with different routing schemes <ref> [12, 8, 1] </ref>. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application.
Reference: [9] <author> T.H. Dunigan. </author> <title> Performance of the Intel iPSC/860 and Ncube 6400 hypercubes. </title> <journal> Parallel Computing, </journal> <volume> 17 </volume> <pages> 1285-1302, </pages> <year> 1991. </year>
Reference-contexts: to an "additional" volume of dh, and this is of the order of a few tens of bytes, the same order of magnitude as the smallest messages in the system), and we have T (e) c (3) Note that the distance is no longer relevant; this has been observed by <ref> [9] </ref>. Now, the estimated communication time for the i-th phase is T (E i ) = max T (e) &gt; &lt; c small volume bW (E i ) large volume where W (E i ) is the weight of the heaviest edge in phase i.
Reference: [10] <editor> C.L. Seitz et al. </editor> <booktitle> The performance and programming of the Ametek series 2010 multicomputer. In Hypercube Computer Conference, </booktitle> <pages> pages 33-36, </pages> <year> 1988. </year>
Reference-contexts: For example, it has been well recognized that in a wormhole-routed or a circuit switching multicomputer network, the distance effect, compared with the effect of the message collision, is negligible for the message latency <ref> [10, 8, 5] </ref>. Much work has been done to analytically model a network with different routing schemes [12, 8, 1]. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application.
Reference: [11] <author> S.L. Johnson. </author> <title> Communication in network architectures. In VLSI and Parallel Computation, page 290. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1990. </year>
Reference-contexts: The "keep half, send half" strategy to improve the efficiency of a divide and conquer algorithm was observed in [7, 2]. However, the model is not formalized and the underlying binomial tree structure was not recognized in those papers. In <ref> [11] </ref>, a spanning binomial tree of a hypercube was used to achieve efficient broadcasting. In [17], an H-tree embedding was proposed to embed a complete binary tree to a mesh. The embedding requires a slightly larger mesh. <p> Thus, in the absence of contention, the time a message takes to travel from one processor to another over a path of length d is given in <ref> [11] </ref> as T (e) = c + b (W (e) + dh) (1) Here, c is the startup cost, 1=b is the bandwidth, and h is the flit size (usually, 1 or 2 bytes).
Reference: [12] <author> P. Kermani and L. Kleinrock. </author> <title> Virtual cut-through: A new computer communication switching technique. </title> <journal> Computer Networks, </journal> <volume> 3 </volume> <pages> 267-286, </pages> <year> 1979. </year>
Reference-contexts: Much work has been done to analytically model a network with different routing schemes <ref> [12, 8, 1] </ref>. However, these models are all based on some assumptions about the message distribution and thus are not accurate for a specific application.
Reference: [13] <author> Z.G. Mou and P. Hudak. </author> <title> An algebraic model for divide-and-conquer algorithms and its parallelism. </title> <journal> The Journal of Supercomputing, </journal> <volume> 2(3) </volume> <pages> 257-278, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 Introduction A well-known problem-solving paradigm that occurs in many computations is divide-and-conquer. If the subproblems are independent of each other, they may be executed in parallel, and this makes it a useful paradigm for designing large scale parallel programs. Divide-and-conquer has been studied by many researchers <ref> [7, 2, 3, 13, 14] </ref> and is applicable to a wide range of applications. In this paper, we address the problem of mapping degree-two divide and conquer computations on two-dimensional meshes. <p> Recently, an algebraic theory has been developed to provide a general framework to describe this class of computations and the mapping of such class of algorithms to hypercube-like architectures has been also discussed by Mou and Hudak <ref> [13] </ref>. The "keep half, send half" strategy to improve the efficiency of a divide and conquer algorithm was observed in [7, 2]. However, the model is not formalized and the underlying binomial tree structure was not recognized in those papers.
Reference: [14] <author> P. A. Nelson and L. Snyder. </author> <title> Programming paradigms for nonshared memory parallel computers. </title> <booktitle> In The Characteristics of Parallel Algorithms, </booktitle> <pages> pages 3-20. </pages> <publisher> The MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction A well-known problem-solving paradigm that occurs in many computations is divide-and-conquer. If the subproblems are independent of each other, they may be executed in parallel, and this makes it a useful paradigm for designing large scale parallel programs. Divide-and-conquer has been studied by many researchers <ref> [7, 2, 3, 13, 14] </ref> and is applicable to a wide range of applications. In this paper, we address the problem of mapping degree-two divide and conquer computations on two-dimensional meshes. <p> Section 6 presents our analysis and we conclude with a discussion and indication of future work. 1 2 Related Work The divide and conquer model has been widely recognized as an effective parallel programming paradigm <ref> [14, 7] </ref>. Recently, an algebraic theory has been developed to provide a general framework to describe this class of computations and the mapping of such class of algorithms to hypercube-like architectures has been also discussed by Mou and Hudak [13].
Reference: [15] <author> A. L. Rosenberg. </author> <title> Graph embeddings 1988: Recent breakthroughs new directions. </title> <type> Technical Report 88-28, </type> <institution> University of Massachusetts at Amherst, </institution> <month> March </month> <year> 1988. </year>
Reference-contexts: In [17], an H-tree embedding was proposed to embed a complete binary tree to a mesh. The embedding requires a slightly larger mesh. Graph embedding techniques are usually used to emulate a machine of one topology by a machine of a different topology <ref> [15, 17] </ref>. The maximum dilation and contention (congestion) are used as the two major metrics to measure an embedding. In the context of mapping a parallel program which is modeled as a static task graph [16, 4], such an approach is usually used to assign tasks to processors [4]. <p> Typically, one seeks a mapping which minimizes the communication overhead while maintaining a balanced load. In the past, metrics that have been used to evaluate mappings use the following traditional notions of dilation and contention <ref> [15, 17] </ref>: Definition 4 The dilation, D (e), of an edge e 2 E C , is jM e (e)j, i.e., the length of path, to which e is mapped.
Reference: [16] <author> H. S. Stone. </author> <title> Multiprocessor scheduling with the aid of network flow algorithms. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-3(1):85-93, </volume> <month> January </month> <year> 1977. </year> <month> 21 </month>
Reference-contexts: The maximum dilation and contention (congestion) are used as the two major metrics to measure an embedding. In the context of mapping a parallel program which is modeled as a static task graph <ref> [16, 4] </ref>, such an approach is usually used to assign tasks to processors [4]. However, as we have argued in this paper, that approach ignores the temporal aspect of a computation and the underlying communication technique. <p> General formul for arbitrary mappings is the subject of our ongoing work, and is beyond the scope of this paper. The mapping problem typically uses the well known static task graph model of Stone <ref> [16] </ref> and Bokhari [4]. The parallel computation is viewed as a weighted graph, G C = hV C ; E C ; W i.
Reference: [17] <author> J.D. Ullman. </author> <title> Computational Aspects of VLSI. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1984. </year>
Reference-contexts: However, the model is not formalized and the underlying binomial tree structure was not recognized in those papers. In [11], a spanning binomial tree of a hypercube was used to achieve efficient broadcasting. In <ref> [17] </ref>, an H-tree embedding was proposed to embed a complete binary tree to a mesh. The embedding requires a slightly larger mesh. Graph embedding techniques are usually used to emulate a machine of one topology by a machine of a different topology [15, 17]. <p> In [17], an H-tree embedding was proposed to embed a complete binary tree to a mesh. The embedding requires a slightly larger mesh. Graph embedding techniques are usually used to emulate a machine of one topology by a machine of a different topology <ref> [15, 17] </ref>. The maximum dilation and contention (congestion) are used as the two major metrics to measure an embedding. In the context of mapping a parallel program which is modeled as a static task graph [16, 4], such an approach is usually used to assign tasks to processors [4]. <p> Typically, one seeks a mapping which minimizes the communication overhead while maintaining a balanced load. In the past, metrics that have been used to evaluate mappings use the following traditional notions of dilation and contention <ref> [15, 17] </ref>: Definition 4 The dilation, D (e), of an edge e 2 E C , is jM e (e)j, i.e., the length of path, to which e is mapped.

References-found: 17

