URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-93-03.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A Tutorial and Reference Manual  
Author: John L. Pfaltz 
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Date: April, 1993  
Note: The ADAMS Language:  This research was supported in part by DOE Grant #DE-FG05-88ER25063 and by JPL Contract #957721.  
Pubnum: IPC-93-003  
Abstract: IPC Technical Report 93-003 Abstract: This report describes the ADAMS language as it would be used by an applications programmer. It does not describe how ADAMS is implemented. The first three sections assume no knowledge of ADAMS whatever, and are quite tutorial in nature. Only basic, introductory concepts are covered. The remaining sections, although still tutorial, presume some familiarity, e.g. having coded simple programs of the same complexity as those in Section 3. The treatment in these sections is definitive, so that the report can be also used as a reference manual. 
Abstract-found: 1
Intro-found: 1
Reference: [Bar89] <author> P. Baron, </author> <title> The ADAMS Preprocessor, </title> <institution> IPC TR-89-009, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: In particular it revealed deficiencies in the language, and suggested several modifications that were included in the version of ADAMS described in [PFG89b]. This newer version was followed by a second prototype that made use of a preliminary storage manager [Jan89], and a preliminary preprocessor <ref> [Bar89] </ref> that converted source code with embedded ADAMS statements into purely host language code. It is important to note that, because of manpower, both this earlier, and the current, preprocessor totally ignore the context provided by the host language code.
Reference: [Che76] <author> P. P. Chen, </author> <title> The Entity-Relationship Model---Toward a Unified View of Data, </title> <journal> Trans. Database Systems 1,1 (Mar. </journal> <year> 1976), </year> <pages> 9-36. </pages>
Reference-contexts: Simple Examples of ADAMS Code We can put together the fragments of code developed in the preceding section, to define a simple school structure in the data space. Initially, it will only consist of STUDENTS and FACULTY, together with a single many-to-one relationship advisor between them. The E-R diagram <ref> [Che76] </ref> would look like: advisor INSTRUCTOR: (last_name, first_name, age, rank, dept) STUDENT:(last_name, first_name, age, gpa) Execution of the following code creates the desired attributes, classes, and maps, which are entered into the user's name space. main () /* ** This program creates a simple school database ** consisting of STUDENTS and <p> But, it will illustrate the flexibility of the language, together with many of its capabilities. Again, all code given here has been compiled and executed. 5.1. Graphs and Relationships General many-to-many relationships are fundamental in database design, c.f. <ref> [Che76] </ref>.
Reference: [Cle91] <author> T. P. Cleary, </author> <title> A Relational Interface to an Object Based System, or Translating SQL to ADAMS, </title> <institution> IPC TR-91-009, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: These two efforts, together with several others, culminated in the version described in [PFG89a]. Considerable experimentation and development was based on this version of ADAMS: a Fortran version was created [Wat90], an interactive version was implemented [Rie90], and a SQL interface developed <ref> [Cle91] </ref>. From the experience gained with these projects, yet a third version of the ADAMS language was created, as described in [PFG91]. The language described in this report is very close to the latter, although there have still been a few changes.
Reference: [Cod70] <author> E. F. Codd, </author> <title> A Relational Model for Large Shared Data Banks, </title> <journal> Comm. of the ACM 13,6 (June 1970), </journal> <pages> 377-387. </pages>
Reference-contexts: Because ADAMS is also a programming language, knowledge of any of these languages will be of value in learning ADAMS, but beware, there are significant differences. Similarly, because ADAMS grew out of a database tradition, some of its terms were borrowed directly from the relational model of data <ref> [Cod70, Mai83] </ref>. A knowledge of relational database theory will provide valuable intuition, but again beware, ADAMS is not a relational database language, per se .
Reference: [Jan89] <author> S. A. Janet Jr., </author> <title> The ADAMS Storage Management System, </title> <institution> IPC TR-89-008, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: In particular it revealed deficiencies in the language, and suggested several modifications that were included in the version of ADAMS described in [PFG89b]. This newer version was followed by a second prototype that made use of a preliminary storage manager <ref> [Jan89] </ref>, and a preliminary preprocessor [Bar89] that converted source code with embedded ADAMS statements into purely host language code. It is important to note that, because of manpower, both this earlier, and the current, preprocessor totally ignore the context provided by the host language code.
Reference: [Joh75] <author> S. C. Johnson, </author> <title> Yacc Yet Another Compiler Compiler, </title> <institution> Comp. Sci. </institution> <type> Tech. Rep. No. 32, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> Sep. </month> <year> 1975. </year>
Reference-contexts: Syntax of ADAMS This section presents the formal syntax of ADAMS as a phrase structure grammar, such as might be used by a parser like yacc <ref> [Joh75] </ref>, to accept ADAMS statements. To assure correct ness, it is, in fact, the yacc grammar that our preprocessor currently uses. Those constructs which will be parsed correctly, but for which no code generation is as yet provided, are again marked with . 7.1.
Reference: [KeR88] <author> B. W. Kernighan and D. M. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <note> second edition 1988. </note>
Reference-contexts: Examples and code fragments will be set in courier. ADAMS expressions included in the body of the text and references to names and expressions within code examples will be set in italics. For the purposes of this tutorial, we will assume that the host language is ANSI C <ref> [KeR88] </ref>. 2.1. Elements, Attributes, and Classes The basic concept in ADAMS is that of an element.
Reference: [KhC86] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> Object Identity, </title> <booktitle> OOPSLA '86, Conf. Proc., </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> 406-416. </pages>
Reference-contexts: It instantiates an unnamed element of the appropriate class to which &lt;ADAMS_var &gt; points (or denotes). Nevertheless, every process requires at least one symbolic variable name, it might be root or current_node in the case of a tree structure, to gain access into the linked structure itself. In <ref> [KhC86] </ref>, Khoshafian and Copeland make clear that there exist a large variety of other mechanisms for denoting data elements, that is for establishing element identity, without explicitly naming them.
Reference: [Klu88] <author> C. Klumpp, </author> <title> Implementation of an ADAMS Prototype: the ADAMS Preprocessor, </title> <institution> IPC TR-88-005, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Moreover, current research indicates that the approach that ADAMS has taken to database implementation may immensely facilitate both distributed and parallel processing. Historically, ADAMS as described in [PSF88] was implemented by a very rapid prototype <ref> [Klu88] </ref>. Although severely limited, it established a rudimentary proof of concept. In particular it revealed deficiencies in the language, and suggested several modifications that were included in the version of ADAMS described in [PFG89b].
Reference: [LeS75] <author> M. E. Lesk and E. Schmidt, </author> <title> Lex A Lexical Analyzer Generator, </title> <institution> Comp. Sci. </institution> <type> Tech. Rep. No. 39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> Oct. </month> <year> 1975. </year>
Reference-contexts: It is one of important open research issues raised by ADAMS. 4.2.5. Codomain Declaration Statement A codomain declaration statement is of the form: &lt;< &lt;codomain_name&gt; isa CODOMAIN consisting of #&lt;lex_expr&gt;# &gt;> where the &lt;lex_expr &gt;, delimited by # ... #, is a lex expression <ref> [LeS75] </ref> that designates the regular set comprising the codomain. In effect, the &lt;lex_expr &gt; specifies what literal strings will be regarded as well-formed values in that codomain.
Reference: [Mai83] <author> D. Maier, </author> <title> The Theory of Relational Databases, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1983. </year>
Reference-contexts: Because ADAMS is also a programming language, knowledge of any of these languages will be of value in learning ADAMS, but beware, there are significant differences. Similarly, because ADAMS grew out of a database tradition, some of its terms were borrowed directly from the relational model of data <ref> [Cod70, Mai83] </ref>. A knowledge of relational database theory will provide valuable intuition, but again beware, ADAMS is not a relational database language, per se .
Reference: [Mos85] <author> J. E. B. Moss, </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1985. </year>
Reference-contexts: That is, either all statements succeed or all are considered to fail. In the event of failure, all statements must be re-executed. If transactions are nested, as in <ref> [Mos85] </ref>, then only the failed transactions need be re-executed. A nested transaction is initiated by the statement &lt;< tr_start &lt;trans_id&gt; &gt;> where &lt;trans_id &gt; is any unique character string denoting this transaction. A transaction is terminated with &lt;< tr_end &lt;trans_id&gt; &gt;> 4.3.
Reference: [Pfa77] <author> J. L. Pfaltz, </author> <title> Computer Data Structures, </title> <publisher> McGraw-Hill, </publisher> <month> Feb. </month> <year> 1977. </year>
Reference-contexts: Similarly, we will call the set of all vertices, - z -, which are reachable by a directed path from x , its closure. This graph terminol ogy is extensively developed in <ref> [Pfa77] </ref>. The problem is that nbhrs is a map defined on the class of VERTEX elements into the class of sets of VERTEX elements. It is a recursive definition.
Reference: [PFW88] <author> J. L. Pfaltz, J. C. French and J. L. Whitlatch, </author> <title> Scoping Persistent Name Spaces in ADAMS, </title> <institution> IPC TR-88-003, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Changing name visibility in this way can have unforeseen consequences. See the discussion in Section 6.1, or in <ref> [PFW88] </ref>. 4.2.19. Start, End Transaction Statements The entire sequence of executable ADAMS statements, beginning with the open_ADAMS statement and terminating with a close_ADAMS statement is a transaction. That is, either all statements succeed or all are considered to fail. In the event of failure, all statements must be re-executed.
Reference: [PSF88] <author> J. L. Pfaltz, S. H. Son and J. C. </author> <title> French, The ADAMS Interface Language, </title> <booktitle> Proc. 3th Conf. on Hypercube Concurrent Computers and Applications, </booktitle> <address> Pasadena, CA, </address> <month> Jan. </month> <year> 1988, </year> <pages> 1382-1389. </pages>
Reference-contexts: Moreover, current research indicates that the approach that ADAMS has taken to database implementation may immensely facilitate both distributed and parallel processing. Historically, ADAMS as described in <ref> [PSF88] </ref> was implemented by a very rapid prototype [Klu88]. Although severely limited, it established a rudimentary proof of concept. In particular it revealed deficiencies in the language, and suggested several modifications that were included in the version of ADAMS described in [PFG89b].
Reference: [Pfa88] <author> J. L. Pfaltz, </author> <title> Implementing Set Operators Over a Semantic Hierarchy, </title> <institution> IPC TR-88-004, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: For more details regarding CLASS semi-lattices and their induced SET semi-lattices, see <ref> [Pfa88] </ref>. In fact there are four class semi-lattices. Besides the CLASS and SET semi-lattices illustrated above, we also have ATTRIBUTE and MAP semi-lattices.
Reference: [PFG89a] <author> J. L. Pfaltz, J. C. French, A. Grimshaw, S. H. Son, P. Baron, S. Janet, Y. Lin, L. Loyd and R. McElrath, </author> <title> Implementation of the ADAMS Database System, </title> <institution> IPC TR-89-010, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: These two efforts, together with several others, culminated in the version described in <ref> [PFG89a] </ref>. Considerable experimentation and development was based on this version of ADAMS: a Fortran version was created [Wat90], an interactive version was implemented [Rie90], and a SQL interface developed [Cle91].
Reference: [PFG89b] <author> J. L. Pfaltz, J. C. French, A. Grimshaw, S. H. Son, P. Baron, S. Janet, A. Kim, C. Klumpp, Y. Lin and L. Loyd, </author> <title> The ADAMS Database Language, </title> <institution> IPC TR-89-002, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Historically, ADAMS as described in [PSF88] was implemented by a very rapid prototype [Klu88]. Although severely limited, it established a rudimentary proof of concept. In particular it revealed deficiencies in the language, and suggested several modifications that were included in the version of ADAMS described in <ref> [PFG89b] </ref>. This newer version was followed by a second prototype that made use of a preliminary storage manager [Jan89], and a preliminary preprocessor [Bar89] that converted source code with embedded ADAMS statements into purely host language code.
Reference: [PfF90] <author> J. L. Pfaltz and J. C. </author> <title> French, Implementing Subscripted Identifiers in Scientific Databases, in Statistical and Scientific Database Management, </title> <editor> Z. Michalewicz (editor), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <month> Apr. </month> <year> 1990, </year> <pages> 80-91. 58 </pages>
Reference-contexts: All subscripts must be non-negative integers, but there is no upper bound declared on this family. We must emphasize that this statement does not instantiate an array structure in the usual sense of programming languages, only a family of subscripted names, c.f. <ref> [PfF90] </ref>. Any subsequent reference to point followed by three non-negative subscripts will be assumed to denote a POINT element. Actual instantiation of this element will occur when it is first used. <p> One cannot easily pass the matrix as a parameter to procedures. The approach we actually use in ADAMS is based on subscripting attributes, not the elements on which the attribute is defined <ref> [PfF90] </ref>.
Reference: [PFG91] <author> J. L. Pfaltz, J. C. French and A. Grimshaw, </author> <title> An Introduction to the ADAMS Interface Language: Part I, </title> <institution> IPC TR-91-06, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: Considerable experimentation and development was based on this version of ADAMS: a Fortran version was created [Wat90], an interactive version was implemented [Rie90], and a SQL interface developed [Cle91]. From the experience gained with these projects, yet a third version of the ADAMS language was created, as described in <ref> [PFG91] </ref>. The language described in this report is very close to the latter, although there have still been a few changes. Since ADAMS is an evolving language, there may still be a few more. However, it is attaining a relative stability that makes writing a tutorial introduction worthwhile.
Reference: [Pfa92] <author> J. L. Pfaltz, </author> <title> Programming over a Persistent Data Space, </title> <institution> IPC TR-92-008, Institute for Parallel Computation, Univ. of Virginia, </institution> <month> Sep. </month> <year> 1992. </year>
Reference-contexts: 1. Introduction Although the acronym, ADAMS, stands for Advanced DAta Management System, ADAMS should not be viewed as a database system , but rather as a complete language based on a formal definition of persistent data <ref> [Pfa92] </ref>. It is a way of talking about persistent data that a user has inserted into the ADAMS data space.
Reference: [PfF93] <author> J. L. Pfaltz and J. C. </author> <title> French, Scientific Database Management with ADAMS, </title> <booktitle> Data Engineering 14,1 (Mar. </booktitle> <year> 1993). </year>
Reference-contexts: ADAMS has been developed with four basic database goals in mind <ref> [PfF93] </ref>. First, and foremost, its purpose has been to interface many different computing environments to a common, persistent data space.
Reference: [Rie90] <author> E. Rietscha, </author> <title> The ADAMS Interactive Interpreter, MCS Project, </title> <institution> Univ. of Virginia, </institution> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: These two efforts, together with several others, culminated in the version described in [PFG89a]. Considerable experimentation and development was based on this version of ADAMS: a Fortran version was created [Wat90], an interactive version was implemented <ref> [Rie90] </ref>, and a SQL interface developed [Cle91]. From the experience gained with these projects, yet a third version of the ADAMS language was created, as described in [PFG91]. The language described in this report is very close to the latter, although there have still been a few changes.

References-found: 23

