URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9308.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: Comparison of Two Real-time Description Techniques  
Author: John J. Zic 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Note: A  
Abstract: SCS&E Report 9308 June, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ISO/TC 97/SC 16/ WG 6. </author> <title> Information Processing Systems Open Systems Interconnection Transport Service Definition - Connectionless mode transmission. Standard ISO-8072-1986-Addendum1, ISO, </title> <year> 1986. </year>
Reference-contexts: e [(5:f ); (6:g); (7:h); (8:i); (9:j ); (10:k )] 5 &gt; 10 Cannot meet both transit delay and output timing requirements Table 1: Buffer timing assuming earliest initial message output and average message delays, throughput, reliability, probability of loss of a message, and other client requirements may be important <ref> [4, 1] </ref>. <p> buffer with hysteresis. 5 B oout Subsequence Time Difference hin; ini 0 hin; outi 0 hout; ini 2 hout; outi 2 Table 4: Buffer with input delay t i = 0 and output delay t o = 2 Buffer t i t o Transit delay range B oin 1 0 <ref> [1; 128] </ref> B oout 0 2 [0; 256] Table 5: Buffer transit delay intervening outputs) followed by 128 successive outputs (with no intervening inputs). <p> If we require that our new clock tick once per second (say), then each tick is enabled precisely one second since its predecessor (which, of course, was another tick ). This is expressed by TimedClk b= X fl <ref> [1; 1] </ref>:tick ! X : (8) It should be noted that the recursive call does not take any time in this extended model. When does the first tick occur in this process definition? This question is resolved by introducing a special event, called the process instantiation event (denoted by ?).
Reference: [2] <author> Ed. Brinksma. </author> <title> An Introduction to LOTOS. </title> <editor> In H. Rudin and C.H. West, editors, </editor> <title> Protocol Specification, Testing, and Verification, VII. </title> <publisher> Elsevier Science Publishers B.V., </publisher> <address> Amsterdam, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: In addition, Reed and Roscoe provided a complete timed semantics for their timed failures model. Gerber, Lee and Zwarico [5] introduced a timed action operation to temporally separate adjacent events into their timed acceptances model. Quemada and Fernandez [9] proposed an extension to the LOTOS specification language <ref> [2] </ref> by associating an enabling interval with each event. This time interval represents the time over which a process may engage the event. <p> This paper attempts to describe a communication system with the following character istics given by a (somewhat) naive client: * up to 128 messages in transit at any time, * message latency in the range <ref> [2; 5] </ref> time units, * message input rate set to 1 message per time unit., and * message output rate of one messages per two time units. 2.1 Initial timing analysis As the informal timing constraints stand, there will be problems with any implementation. <p> After the first output, the system must satisfy both the output timing (outputs need to be spaced at exactly two time units) and the transit delay (which lies in the range <ref> [2; 5] </ref>) requirements. 1 The buffer contents is displayed after input and output operations have been performed. 2 Time In Out Buffer contents Oldest age 0 a . [(0:a)] 0 2 c . [(0:a); (1:b); (2:c)] 2 4 e . [(0:a); (1:b); (2:c); (3:d ); (4:e)] 4 6 g . [(1:b); <p> Producing a buffer which delays each message by the required delay is straightforward in this model: X fl in?x ! WAIT I out!x ! X (2) with the interval I = <ref> [2; 5] </ref>. This buffer accepts an input, then delays by an amount taken from the interval I , and then outputs the message. Notice that there is an asymmetry in this process. <p> Notice that changing the above enabling interval allows the specification of a clock which tick s once per every two seconds by writing <ref> [2; 2] </ref>:tick for the enabling interval in TimedClk . Similarly, it may be made to tick once every third of a second by rewriting the enabling interval to [1=3; 1=3]. <p> We change the conditional so that either the buffer produces an output only once if it is full or if the head of the queue of messages has been delayed by an amount in the interval <ref> [2; 5] </ref>: During this interval, the buffer may also accept further inputs.
Reference: [3] <author> Jim Davies and Steve Schneider. </author> <title> A brief history of Timed CSP. </title> <type> Technical report, </type> <institution> Programming Research Group, Oxford University, </institution> <address> Oxford OX1 3QD UK, </address> <year> 1992. </year>
Reference-contexts: Most other algebras adopt the former view, and use a temporal operation or process to provide the required interevent delay. 3 We start, then, with the Timed CSP model first proposed by Reed and Roscoe [10], which has been subsequently modified to eliminate the system delay constant <ref> [3] </ref> so that any event timing must be explicitly described using a WAIT process. Producing a buffer which delays each message by the required delay is straightforward in this model: X fl in?x ! WAIT I out!x ! X (2) with the interval I = [2; 5].
Reference: [4] <author> D. Ferrari. </author> <title> Client requirements for real-time communication services. Published as part of the Internet Network Working Group Request for Comments (RFC), </title> <booktitle> number 1193 (RFC1193)., </booktitle> <year> 1990 </year> <month> November. </month>
Reference-contexts: e [(5:f ); (6:g); (7:h); (8:i); (9:j ); (10:k )] 5 &gt; 10 Cannot meet both transit delay and output timing requirements Table 1: Buffer timing assuming earliest initial message output and average message delays, throughput, reliability, probability of loss of a message, and other client requirements may be important <ref> [4, 1] </ref>.
Reference: [5] <author> R. Gerber, I. Lee, and A. Zwarico. </author> <title> A complete axiomatization of real-time processes. </title> <type> Technical Report MS-CIS-88-88, </type> <institution> Dept. of Computer and Information Science, School of Engineering and Applied Sciences, Uni. of Pennsylvania PA 19104, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Timed CSP [10] introduced a similar special process WAIT n. In addition, Reed and Roscoe provided a complete timed semantics for their timed failures model. Gerber, Lee and Zwarico <ref> [5] </ref> introduced a timed action operation to temporally separate adjacent events into their timed acceptances model. Quemada and Fernandez [9] proposed an extension to the LOTOS specification language [2] by associating an enabling interval with each event. <p> This paper attempts to describe a communication system with the following character istics given by a (somewhat) naive client: * up to 128 messages in transit at any time, * message latency in the range <ref> [2; 5] </ref> time units, * message input rate set to 1 message per time unit., and * message output rate of one messages per two time units. 2.1 Initial timing analysis As the informal timing constraints stand, there will be problems with any implementation. <p> After the first output, the system must satisfy both the output timing (outputs need to be spaced at exactly two time units) and the transit delay (which lies in the range <ref> [2; 5] </ref>) requirements. 1 The buffer contents is displayed after input and output operations have been performed. 2 Time In Out Buffer contents Oldest age 0 a . [(0:a)] 0 2 c . [(0:a); (1:b); (2:c)] 2 4 e . [(0:a); (1:b); (2:c); (3:d ); (4:e)] 4 6 g . [(1:b); <p> Producing a buffer which delays each message by the required delay is straightforward in this model: X fl in?x ! WAIT I out!x ! X (2) with the interval I = <ref> [2; 5] </ref>. This buffer accepts an input, then delays by an amount taken from the interval I , and then outputs the message. Notice that there is an asymmetry in this process. <p> We change the conditional so that either the buffer produces an output only once if it is full or if the head of the queue of messages has been delayed by an amount in the interval <ref> [2; 5] </ref>: During this interval, the buffer may also accept further inputs.
Reference: [6] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall International (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hempstead, Hertfordshire HP2 4RG UK, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction There has been considerable effort recently in extending Hoare's CSP <ref> [6] </ref> and Milner's CCS [7, 8] to allow formal reasoning about real-time systems. <p> So we abandon the use of single place buffers in seeking a solution to this problem and move onto finite size buffers, which are based on the infinite buffer of <ref> [6, p138, X9] </ref>. <p> An alternative method is required for specifying interevent timings. 3.2 Using the extended CSP algebra 3.2.1 A brief description of the extensions The CSP+T syntax is a superset of the basic untimed deterministic CSP syntax presented by Hoare <ref> [6] </ref>. The fundamental changes to the untimed algebra are that: * A new event operator 1 is introduced so that (informally) writing ev 1 v means that the time at which the event ev is observed in a process execution is recorded in the variable v .
Reference: [7] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> 1980. </year>
Reference-contexts: 1 Introduction There has been considerable effort recently in extending Hoare's CSP [6] and Milner's CCS <ref> [7, 8] </ref> to allow formal reasoning about real-time systems. Examples of such systems are commonly found in communication protocols where the response to a message is required before the message becomes obsolete, or where message outputs need to be spaced so as to avoid overflow conditions at the receiving end.
Reference: [8] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall International (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hempstead, Hertfordshire HP2 4RG UK, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction There has been considerable effort recently in extending Hoare's CSP [6] and Milner's CCS <ref> [7, 8] </ref> to allow formal reasoning about real-time systems. Examples of such systems are commonly found in communication protocols where the response to a message is required before the message becomes obsolete, or where message outputs need to be spaced so as to avoid overflow conditions at the receiving end.
Reference: [9] <author> Juan Quemada and Angel Fernandez. </author> <title> Introduction of quantitative relative time into LOTOS. </title> <editor> In H. Rudin and C.H. West, editors, </editor> <title> Protocol Specification, Testing, and Verification, </title> <booktitle> VII, </booktitle> <pages> pages 105-121. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1987. </year>
Reference-contexts: Timed CSP [10] introduced a similar special process WAIT n. In addition, Reed and Roscoe provided a complete timed semantics for their timed failures model. Gerber, Lee and Zwarico [5] introduced a timed action operation to temporally separate adjacent events into their timed acceptances model. Quemada and Fernandez <ref> [9] </ref> proposed an extension to the LOTOS specification language [2] by associating an enabling interval with each event. This time interval represents the time over which a process may engage the event.
Reference: [10] <author> G.M. Reed and A.W. Roscoe. </author> <title> A Timed Model for Communicating Sequential Processes. </title> <booktitle> In Automata, Languages, and Programming , 13th Intl. Colloqium Proceedings, Lecture Notes in Computer Science, </booktitle> <address> Berlin-Heidelberg-New York, 1986. </address> <publisher> Springer-Verlag. </publisher> <pages> 11 </pages>
Reference-contexts: At the time, the author felt that this should have been sufficient to capture most of the timing constraints within a system. Timed CSP <ref> [10] </ref> introduced a similar special process WAIT n. In addition, Reed and Roscoe provided a complete timed semantics for their timed failures model. Gerber, Lee and Zwarico [5] introduced a timed action operation to temporally separate adjacent events into their timed acceptances model. <p> The proposed extended CSP (called CSP+T ) uses this latter view. Most other algebras adopt the former view, and use a temporal operation or process to provide the required interevent delay. 3 We start, then, with the Timed CSP model first proposed by Reed and Roscoe <ref> [10] </ref>, which has been subsequently modified to eliminate the system delay constant [3] so that any event timing must be explicitly described using a WAIT process.
Reference: [11] <author> J.J. Zic. </author> <title> A New Communication Protocol Specification and Analysis Technique. </title> <type> Tech--nical Report TR287, </type> <institution> Basser Department of Computer Science, </institution> <month> July </month> <year> 1986. </year>
Reference-contexts: The author proposed some informal time (and probability) extensions to CSP in <ref> [11] </ref> where a special DELAY n process allowed temporal separation between any two successive events by n time units. At the time, the author felt that this should have been sufficient to capture most of the timing constraints within a system. <p> When full, it may enter a cycle of outputting a message, then accepting an input, becoming full again, outputting, accepting an input, etc. Realistic buffers incorporate some form of hysteresis which prevents this type of behaviour. See <ref> [11] </ref> for the specification of a buffer with hysteresis. 5 B oout Subsequence Time Difference hin; ini 0 hin; outi 0 hout; ini 2 hout; outi 2 Table 4: Buffer with input delay t i = 0 and output delay t o = 2 Buffer t i t o Transit delay
Reference: [12] <author> John J. Zic. </author> <title> Using CSP+T to describe a stop-and-wait protocol. </title> <booktitle> Submitted to the 1993 International Conference on Network Protocols (ICNP'93), </booktitle> <month> Feburary </month> <year> 1993. </year>
Reference-contexts: The example presented in this paper highlights the ease of use of the notation. It has been the author's experience that these extensions allow concise and natural descriptions of a wide range of systems (clocks, time-out timers, multiplexers, other buffers, and a real-time limited stop and wait protocol. <ref> [13, 12] </ref>). 10 However, the notation does not offer a complete semantics as yet, and only partial results may be formulated. This clearly defines the task ahead if this notation is to develop into a useful real-time Formal Description Technique.
Reference: [13] <author> John J. Zic. CSP+T: </author> <title> a formalism for describing real-time systems. </title> <type> PhD thesis, </type> <institution> Basser Department of Computer Science, University of Sydney, NSW 2006, </institution> <month> July </month> <year> 1991. </year> <month> 12 </month>
Reference-contexts: Quemada and Fernandez [9] proposed an extension to the LOTOS specification language [2] by associating an enabling interval with each event. This time interval represents the time over which a process may engage the event. Recently the author in <ref> [13] </ref> proposed an extended CSP by not only associating an enabling interval with each event, but also allowing this interval to be expressed as a function of one or more marker events. <p> In the author's experience, this combination of expressing enabling intervals in terms of marker events allow particularly concise descriptions of some realistic real-time systems. Some of the examples considered in <ref> [13] </ref> were various clocks (accurate and inaccurate), buffers, multichannel multiplexers, a TCP timer and a stop and wait communication protocol. This paper is organised as follows. First, we present the problem, which is the modelling of a store-and-forward communication system with specific quality of service requirements. <p> The example presented in this paper highlights the ease of use of the notation. It has been the author's experience that these extensions allow concise and natural descriptions of a wide range of systems (clocks, time-out timers, multiplexers, other buffers, and a real-time limited stop and wait protocol. <ref> [13, 12] </ref>). 10 However, the notation does not offer a complete semantics as yet, and only partial results may be formulated. This clearly defines the task ahead if this notation is to develop into a useful real-time Formal Description Technique. <p> Again, this is the subject of ongoing work presented in the author's thesis <ref> [13] </ref>.
References-found: 13

