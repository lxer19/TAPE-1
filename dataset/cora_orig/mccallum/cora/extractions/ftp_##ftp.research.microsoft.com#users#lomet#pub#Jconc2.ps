URL: ftp://ftp.research.microsoft.com/users/lomet/pub/Jconc2.ps
Refering-URL: http://www.research.microsoft.com/users/lomet/
Root-URL: http://www.research.microsoft.com
Title: Concurrency and Recovery for Index Trees  
Author: David Lomet Betty Salzberg 
Keyword: Categories and Subject Descriptors: E.1 [Data]: Data Structures Trees; E.2 [Data]: Data Storage Representations Composite Structures; H.2.2 [Database Management]: Physical Design Access methods; H.2.4 [Database Management]: Systems Concurrency; H.3.3 [Information Storage and Retrieval]: Information Search and Retrieval Clustering, Retrieval models, Search process. Keywords:concurrency, recovery, indexing, access methods, B-trees  
Address: One Microsoft Way, Bldg 9, Redmond, WA 98052-6399,  Boston, MA 02115,  
Affiliation: Microsoft Corporation  College of Computer Science Northeastern University,  
Note: Ph.D., Senior Scientist,  Ph.D., Professor,  corresponding author: Betty Salzberg  This work was partially supported by NSF grants IRI-88-15707 and IRI-91-02821 and IRI-93-03403.  
Email: (lomet@microsoft.com)  (salzberg@ccs.neu.edu)  E-mail: salzberg@ccs.neu.edu  
Phone: tel. (206) 703-1853  tel. (617) 373-2229  Phone: (617) 373-2229, Fax: (617) 373-5121,  
Abstract-found: 0
Intro-found: 1
Reference: <author> Bayer, R., Schkolnick, M., </author> <title> Concurrency of operations on B-trees. </title> <note> Acta Informatica Vol 9 (1977) pp 1-21. </note>
Reference: <author> Bratsberg, S. E., Hvasshovd, S.-O. and Torbjornsen, O., </author> <title> Improved Transaction Response Time by Deferred Maintenance of Access Methods, </title> <type> manuscript. </type>
Reference: <author> Evangelidis, G., Lomet, D. and Salzberg, B., </author> <title> The hB -tree: A Modified hB-tree Supporting Concurrency, Recovery and Node Consolidation. </title> <booktitle> Proc. Very Large Databases Conf., </booktitle> <address> Zurich, </address> <year> 1995, </year> <pages> pp. 551-561. </pages>
Reference-contexts: A Time-Split B-tree (or TSB-tree) (Lomet, 1989) can be made into a -tree by adding sibling links. The TSB-tree is a temporal index, where the search space is a two-dimensional space based on time and database key. The hB -tree <ref> (Evangelidis, 1995) </ref> is a spatial search structure on any number 3 of dimensions which is a -tree. <p> Universal takes the following arguments. * LEVEL of the tree to be updated; * KEY value for the search; The KEY value can be more complex than a simple byte string value. Such complexity is ignored here. For example, see <ref> (Evangelidis, 1995) </ref> for the specifics of how this works with hB-trees. * PATH that was saved for index posting and for consolidation. * LOCKS that need to be acquired in order for the operation to complete; * OPERATION which is one of (i) posting an index term, (ii) dropping an index
Reference: <author> Gray, J.N., Lorie, R. A., Putzolu, G. R., and Traiger, I. L., </author> <title> Granularity of locks and degrees of 40 consistency in a shared data base. </title> <booktitle> IFIP Working Conf on Modeling of Data Base Management Systems, </booktitle> <pages> (1976) pp 1-29. </pages>
Reference-contexts: Promotion is the most common cause of deadlock (Gray, 1993). For example, when two transactions set S latches on the same object to be updated, and then subsequently desire to promote their latches to X, a deadlock results. Update (U) latches <ref> (Gray, 1976) </ref> support latch promotion by retaining an exclusive claim on a resource that is currently shared (Lomet, 1980). They allow sharing by readers, but conflict with X or other U latches.
Reference: <author> Gray, J. and Reuter, </author> <title> A.,Transaction Processing: Techniques and Concepts, </title> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, Ca., </address> <year> 1993. </year>
Reference-contexts: The details of this algorithm, with explicit directions for locking, are in section 6. The subject of concurrency in B + -trees has a long history (Bayer, 1977; Lehman, 1981; Mohan, June 1992; Sagiv, 1986; Salzberg, 1985; Shasha, 1988). Most work, with the exception of (Mohan, June 1992) and <ref> (Gray, 1993) </ref> has not treated the problem of system crashes during structural changes. <p> Parents are latched before children and containers before contained nodes. Promoting a previously acquired latch violates the ordering of resources and compromises deadlock avoidance. Promotion is the most common cause of deadlock <ref> (Gray, 1993) </ref>. For example, when two transactions set S latches on the same object to be updated, and then subsequently desire to promote their latches to X, a deadlock results.
Reference: <author> Guttman, A., R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <year> 1984, </year> <pages> pp 47-54. </pages>
Reference-contexts: The TSB-tree is a temporal index, where the search space is a two-dimensional space based on time and database key. The hB -tree (Evangelidis, 1995) is a spatial search structure on any number 3 of dimensions which is a -tree. The R-tree <ref> (Guttman, 1984) </ref> is not a -tree (and could not easily be made into one by adding sibling links) because the spaces associated with nodes which are on the same level of the tree overlap. The algorithm described here can be used on any -tree.
Reference: <author> Lehman, P., Yao, </author> <title> S.B., Efficient locking for concurrent operations on B-trees. </title> <journal> ACM Trans on Database Systems, </journal> <note> Vol 6, No 4 (Dec 1981) pp 650-670. </note>
Reference-contexts: We call such a tree a -tree, and we give a formal definition of the -tree in section 3. A B link -tree <ref> (Lehman, 1981) </ref>, which is a B + -tree with sibling links, is a -tree. A Time-Split B-tree (or TSB-tree) (Lomet, 1989) can be made into a -tree by adding sibling links. <p> These are: 1. We define a search structure, called a -tree , that is a generalization of the B link -tree <ref> (Lehman, 1981) </ref>. Our concurrency and recovery method is defined to work with all search structures in this class. 2. -tree structural changes consist of a sequence of atomic actions (Lomet, 1977). These actions are guaranteed to have the all or nothing property by the recovery method. <p> However, each node at a level need not have a parent node at the next higher level. This is an abstraction and 13 generalization of the idea introduced in the B link -tree <ref> (Lehman, 1981) </ref>. That is, having a new node connected in the B link -tree only via a side pointer is acceptable. We never know whether a node directly contains the space of interest or whether it is merely responsible for the space until we examine the sibling terms.
Reference: <author> Lomet, D. B. </author> <title> Process structuring, synchronization, and recovery using atomic actions. </title> <booktitle> Proc. ACM Conf. on Language Design for Reliable Software, SIGPLAN Notices 12,3 (Mar 1977) pp 128-137. </booktitle>
Reference-contexts: We define a search structure, called a -tree , that is a generalization of the B link -tree (Lehman, 1981). Our concurrency and recovery method is defined to work with all search structures in this class. 2. -tree structural changes consist of a sequence of atomic actions <ref> (Lomet, 1977) </ref>. These actions are guaranteed to have the all or nothing property by the recovery method. Searchers can see the intermediate states of the -tree that exist between these atomic actions. No locks are held between atomic actions. However, incomplete structural changes do not affect search correctness. 3.
Reference: <author> Lomet, </author> <title> D.B. Subsystems of processes with deadlock avoidance. </title> <journal> IEEE Trans. on Software Engineering, </journal> <note> vol SE-6, no. 3 (May 1980) pp. 297-304. </note>
Reference-contexts: For example, when two transactions set S latches on the same object to be updated, and then subsequently desire to promote their latches to X, a deadlock results. Update (U) latches (Gray, 1976) support latch promotion by retaining an exclusive claim on a resource that is currently shared <ref> (Lomet, 1980) </ref>. They allow sharing by readers, but conflict with X or other U latches. An atomic action is not allowed to promote from a S to an X latch, because this increases its claim. But it may promote from a U latch to an X latch.
Reference: <author> Lomet, D., Salzberg, B., </author> <title> Access methods for multiversion data, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Portland, </address> <month> (June </month> <year> 1989), </year> <pages> pp. 315-324. </pages>
Reference-contexts: We call such a tree a -tree, and we give a formal definition of the -tree in section 3. A B link -tree (Lehman, 1981), which is a B + -tree with sibling links, is a -tree. A Time-Split B-tree (or TSB-tree) <ref> (Lomet, 1989) </ref> can be made into a -tree by adding sibling links. The TSB-tree is a temporal index, where the search space is a two-dimensional space based on time and database key. <p> This is the simplest case, since only a single attribute is being indexed. In this section, we describe briefly how the TSB-tree and the hB -tree can be described as -trees, and hence exploit our concurrency control and recovery method. 7.1 The TSB-tree A TSB-tree <ref> (Lomet, 1989) </ref> provides indexed access to multiple versions of key sequenced records. As a result, it indexes these records both by key and by time. We take advantage of the property that historical nodes (nodes created by a split in the time dimension) never split again.
Reference: <author> Lomet, </author> <title> D.B. Recovery for shared disk systems using multiple redo logs. </title> <institution> Digital Equipment Corp. </institution> <type> Technical Report CRL90/4 (Oct. </type> <institution> 1990) Cambridge Research Lab, </institution> <address> Cambridge, MA. </address>
Reference-contexts: To verify saved information, we use state identifiers <ref> (Lomet, 1990) </ref> within nodes to indicate the states of each node. We record these identifiers as part of our saved path.
Reference: <author> Lomet, D. Salzberg, B. </author> <title> Access Method Concurrency with Recovery, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Diego, </address> <month> (June </month> <year> 1992), </year> <pages> pp. 351-360. </pages>
Reference-contexts: Only data-node splitting sometimes takes place within database transactions. All other parts of index tree restructuring are independent of such transactions. This is especially important in real-time applications where each transaction must complete within a given time limit. The basic principles of this algorithm were exposed in <ref> (Lomet 1992) </ref>. This paper gives a step-by-step description of the algorithm details. In order to use this algorithm, a search structure must have several structural and behavioral properties. * It must partition the search space at each level of the tree. <p> This affects the decisions on the type of locking done by our atomic actions. Section 5 describes how atomic actions are scheduled and how information from previous atomic actions about the search path can sometimes be used. Most of the material in sections 3, 4 and 5 appeared in <ref> (Lomet, 1992) </ref> and is repeated here to make this paper self-contained. Section 6 presents the algorithm. We give examples of adaptations of two search structures so as to be forms of -trees in section 7.
Reference: <author> Mohan, C., ARIES/KVL: </author> <title> A key-value locking method for concurrency control of multiaction transactions operating on B-tree indexes, </title> <booktitle> Proc. Very Large Databases Conf. </booktitle> <address> Brisbane (Aug 1990), </address> <pages> pp. 392-405. </pages>
Reference: <author> Mohan, C., Haderle, D., Lindsay, B., Pirahesh, P., and Schwarz, P. </author> <title> ARIES: a transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging. </title> <journal> ACM Trans. Database Systems March 1992, </journal> <pages> pp. 94-162. </pages>
Reference-contexts: The details of this algorithm, with explicit directions for locking, are in section 6. The subject of concurrency in B + -trees has a long history (Bayer, 1977; Lehman, 1981; Mohan, June 1992; Sagiv, 1986; Salzberg, 1985; Shasha, 1988). Most work, with the exception of <ref> (Mohan, June 1992) </ref> and (Gray, 1993) has not treated the problem of system crashes during structural changes. <p> database system component responsible for the atomicity property, i.e. the all or nothing execution of the action. 24 Three possible ways of identifying an atomic action to the recovery manager are as (i) a separate database transaction, (ii) a special system transaction, or (iii) as a "nested top level action" <ref> (Mohan, March 1992) </ref>. Our approach works with any of these techniques, or any other that guarantees atomicity. <p> Note that move locks are never acquired in non-page-oriented UNDO systems, so the releasing of the page latches for a split at leaf level commits the split (makes it a nested top-level action) as in <ref> (Mohan, June 1992) </ref>. Leaf-level splits in page-oriented UNDO systems are part of database transactions. Other structural changes take place within independent atomic actions.
Reference: <author> Mohan, C. and Levine, F., ARIES/IM: </author> <title> an efficient and high concurrency index management method using write-ahead logging. </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <address> San Diego, </address> <month> (June </month> <year> 1992), </year> <pages> pp. 371-380. </pages>
Reference-contexts: The details of this algorithm, with explicit directions for locking, are in section 6. The subject of concurrency in B + -trees has a long history (Bayer, 1977; Lehman, 1981; Mohan, June 1992; Sagiv, 1986; Salzberg, 1985; Shasha, 1988). Most work, with the exception of <ref> (Mohan, June 1992) </ref> and (Gray, 1993) has not treated the problem of system crashes during structural changes. <p> database system component responsible for the atomicity property, i.e. the all or nothing execution of the action. 24 Three possible ways of identifying an atomic action to the recovery manager are as (i) a separate database transaction, (ii) a special system transaction, or (iii) as a "nested top level action" <ref> (Mohan, March 1992) </ref>. Our approach works with any of these techniques, or any other that guarantees atomicity. <p> Note that move locks are never acquired in non-page-oriented UNDO systems, so the releasing of the page latches for a split at leaf level commits the split (makes it a nested top-level action) as in <ref> (Mohan, June 1992) </ref>. Leaf-level splits in page-oriented UNDO systems are part of database transactions. Other structural changes take place within independent atomic actions.
Reference: <author> Sagiv, Y., </author> <title> Concurrent operations on B* trees with overtaking. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol 33, No 2, </volume> <pages> (1986) pp. 275-296 Salzberg, </pages> <editor> B., </editor> <title> Restructuring the Lehman-Yao tree. </title> <institution> Northeastern University Technical Report TR BS-85-21 (1985), </institution> <address> Boston, MA. </address>
Reference: <author> Salzberg, B., Lomet, D., </author> <title> The hB-tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM Trans on Database Systems, </journal> <volume> vol 15, no. </volume> <month> 4 (Dec </month> <year> 1990), </year> <pages> pp. 625-658. </pages>
Reference-contexts: No historical nodes ever split and nodes are never consolidated. Thus in the TSB-tree, the existence of multi-parent nodes and the fact that more than one history sibling pointer may point to the same historical node causes no extra difficulties. 7.2 The hB-Tree In the hB-tree <ref> (Salzberg, 1990) </ref>, the idea of containing and contained nodes is explicit and is described with kd-tree fragments. The "External" markers can be replaced with the addresses of the nodes which were extracted, and a linking network established with the desired properties. <p> The "External" markers can be replaced with the addresses of the nodes which were extracted, and a linking network established with the desired properties. In addition, when the split is by a hyperplane, instead of eliminating the root of the local tree in the splitting node, as in <ref> (Salzberg 1990) </ref>, one child of the root (say the right child) points to the new sibling containing the contents of the right subtree. This makes the treatment of hyperplane splits consistent with that of other splits. This is illustrated in Figure 4.
Reference: <author> Shasha, D., Goodman, N., </author> <title> Concurrent search structure algorithms. </title> <journal> ACM Trans. on Database Systems, </journal> <volume> vol 13, No. </volume> <pages> 1 (March 1988) pp 53-90. </pages>
Reference-contexts: That is, having a new node connected in the B link -tree only via a side pointer is acceptable. We never know whether a node directly contains the space of interest or whether it is merely responsible for the space until we examine the sibling terms. Like <ref> (Shasha, 1988) </ref>, we define the requirements of a well-formed general search structure.
Reference: <author> Zou, C. and Salzberg, B., </author> <title> On-line Reorganization of Sparsely-Populated B + -trees. </title> <booktitle> Proc. ACM SIGMOD Conf. </booktitle> <address> Montreal, </address> <month> (June, </month> <pages> 1996) pp. 115-124. 42 </pages>
Reference-contexts: The state is tested again in the completing atomic action to assure the idempotence of completion. The log could be used to detect and complete structural changes as in (Bratsberg, 1996) or to complete other actions as in <ref> (Zou, 1996) </ref>.
References-found: 19

