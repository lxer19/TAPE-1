URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/papers/object.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/whois-richm.html
Root-URL: 
Email: -richm, bam-@cs.cmu.edu  
Title: A DYNAMIC AND FLEXIBLE PROTOTYPE-INSTANCE OBJECT AND CONSTRAINT SYSTEM IN C++ the automatic management of
Author: Richard McDaniel and Brad A. Myers 
Note: innovations in the Amulet object and constraint systems are Amulet also provides constraints which are relations that  2. Amulet  
Web: http://www.cs.cmu.edu/Web/Groups/amulet/amulet-home.html  
Address: 5000 Forbes Avenue Pittsburgh, PA 15213  
Affiliation: Human-Computer Interaction Institute School of Computer Science Carnegie Mellon University  
Abstract: The Amulet object system also supports a part-owner for quickly prototyping, designing, and implementing user C++ which supports the development of user interface interface software. For Amulet, we took the opportunity to software. As part of Amulet, we have developed a fix a number of problems we experienced with Garnet, and dynamic and flexible prototype-instance object system em Amulet also contains a number of important innovations, bedded in C++. In a prototype-instance object system, including the automatic management of a part-owner there is no distinction between classes and instances: every hierarchy along with the prototype instance hierarchy, con-object can serve as a prototype for other objects, and any trol over the inheritance of slots, the support for multiple values (called ``slots'' in Amulet) that are not declared lo constraint solvers, and a flexible demon mechanism. In cally in an object are inherited from the prototype. Another addition, Amulet's default constraint solver is more flexible important feature of Amulet's object system is that there is than other one-way systems. Finally, it is interesting how no distinction between methods and data: any object can we were able to provide dynamic slot typing, a dynamic override an inherited method as easily as inherited data. The Amulet user interface development environment aims to make the design, prototyping, implementation, and evaluation of user interfaces significantly easier, while supporting flexible experimentation with new styles of interaction. Amulet will include a number of design and implementation innovations including new constraint and object models (described in this paper), new input and output models, and new forms of interactive tools. In addition, it will support the creation of innovative user interfaces that incorporate features such as speech and gesture recog hierarchy, by which objects can be grouped together. A In order to support rapid prototyping and efficient construc- common use for part-owner in Amulet is to group graphical tion of user interface software, the Amulet user interface objects into a collection or aggregate. For instance, the development environment uses a prototype-instance object graphics in a window are added as parts of the window. model integrated with a constraint solver. The important
Abstract-found: 1
Intro-found: 1
References-found: 0

