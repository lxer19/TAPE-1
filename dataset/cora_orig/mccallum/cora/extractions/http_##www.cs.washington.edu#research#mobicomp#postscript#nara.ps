URL: http://www.cs.washington.edu/research/mobicomp/postscript/nara.ps
Refering-URL: http://www.cs.washington.edu/research/mobicomp/nara.html
Root-URL: 
Email: nara@cs.washington.edu  
Title: Distributed Transactions in a Mobile Computing System  
Author: Vivek R. Narasayya 
Date: March 9, 1994  
Note: Draft of  
Abstract: due to low-bandwidth high-latency wireless communication of mobile systems. Mobile computers can be treated simply as I/O device, as full fledged database servers, or as something in-between where local data is treated as a cache for the primary copy. A method for handling transactions using a batched transaction approach is presented and discussed. Implementation is on to test performance of this method.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tomasz Imielinski and B.R. Badrinath, </author> <title> "Data Management for Mobile Computing." </title> <booktitle> In SIGMOD RECORD, </booktitle> <volume> Vol. 22, No. 1, </volume> <month> March </month> <year> 1993. </year> <pages> pp. 34-39 </pages>
Reference-contexts: When combined with wireless technology, they operate as part of a distributed system. The issues in mobile computing are different from conventional distributed systems due to the unique characteristics of mobile hardware and wireless technology <ref> [1] </ref> One class of mobile devices are Personal Digit Assistants (PDAs)[2], which are devices that are small enough to be carried around at all times and have a screen large enough to allow user interaction for extended periods of time. <p> on work in this project. 2 Related Work Two broad classes of issues in data management for mobile computing systems are those that are arise because the mobile devices move and those that arise because of the unique way mobile devices operate (e.g. over slow wireless networks, in disconnected mode). <ref> [1] </ref> identifies research issues in managing data for mobile systems. One question is how to organize and query location dependent data. Dynamic replication is suggested as a means of maintaining good performance as the user moves through the network.
Reference: [2] <author> Marvin Theimer, Alan Demers and Brent Welch, </author> <title> "Operating System Issues for PDAs." </title>
Reference: [3] <author> Rafael Alonso and Henry F. Korth, MITL. </author> <title> "Database System Issues in Nomadic Computing." </title> <note> Submitted to Database Challenges Session. 12 </note>
Reference-contexts: Even taking into account the expected improvement in wireless bandwidth over the next few years, it is safe to assume that network bandwidth will remain a performance bottleneck in system design <ref> [3] </ref>. Other drawbacks of mobile devices of today are limited battery capacity, small screen sizes and the unreliability of the environment in which they operate. Each of these characteristics impacts issues like data placement and consistency mechanisms for transactions. <p> The local disk (if one exists) on the mobile device cannot be considered stable storage due to the possibility that the unit is dropped or lost. Thus the logs may have to be maintained at the server rather than on the mobile device <ref> [3] </ref>. One of the big impacts of mobility on data management is that the algorithms will, as far as possible, have to shift the costs of computation and communication to the to the static (strongly connected) portion of the network. <p> This is normally done using logs at the server sites. In the case of mobile computers it may not be appropriate to consider the hard disk as stable storage because of the threat of being dropped or stolen. <ref> [3] </ref> We could get away with an atomic broadcast based consistency mecha nism if the reads/writes ratio is big. This is analogous to parallel programming in Orca with shared memory, which relies on a software layer that turns unreliable broadcasting offered by the hardware into reliable broadcasting [8].
Reference: [4] <author> Arup Acharya and B.R. Badrinath. </author> <title> "Delivering multicast messages in networks with mobile hosts." </title> <booktitle> In 13th ICDCS, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: By adopting a weak consistency approach, communication with the server can be reduced. Wireless broadcasting is suggested as a powerful way of propagating changes in data to a large number of users who are weakly connected. <ref> [4] </ref> suggests a way to deliver multicast messages in networks with mobile hosts. This protocol guarantees exactly once semantics and a total ordering on the messages delivered to the destinations. The protocol could be used for maintaining consistency in a database replicated at mobile hosts.
Reference: [5] <author> Tomasz Imielinski and B.R. Badrinath. </author> <title> "Mobile Wireless Computing: Solutions and Challenges in Data Management." </title>
Reference-contexts: Then the mobility of users affects data placement and may require the dynamic creation of servers during the execution of a transaction <ref> [5] </ref>. 3 System Model The particular mobile computing system considered for this project consists of some number of Mobile Units (MUs) connected through one or more base stations over some wireless network like infrared. Typically these networks will have low bandwidth and high latency characteristics.
Reference: [6] <author> James W. Stamos and Flaviu Cristian. </author> <title> "A Low Cost Atomic Commit Protocol." </title> <booktitle> 9th Symposium on Reliable Distributed Systems. </booktitle>
Reference-contexts: The issue is the commit protocol employed to ensure atomicity of transactions. Given that we want to minimize the number of rounds of messages in the protocol, conventional protocols like 3-phase commit or even 2-phase commit (2PC) become too 5 expensive. Optimizations to 2PC like Early Prepare <ref> [6] </ref> must be used. A Unilateral Commit protocol based on the notion of persistent transmission [7] could reduce the number of round-trip messages in the protocol. * That no two writes nor a read and a write is performed concurrently on a data item.
Reference: [7] <author> Meichun Hsu and Avi Silberschatz. </author> <title> "Unilateral Commit: A New Paradigm for Reliable Distributed Transaction Processing." </title> <booktitle> 1991 IEEE. </booktitle>
Reference-contexts: Optimizations to 2PC like Early Prepare [6] must be used. A Unilateral Commit protocol based on the notion of persistent transmission <ref> [7] </ref> could reduce the number of round-trip messages in the protocol. * That no two writes nor a read and a write is performed concurrently on a data item.
Reference: [8] <author> Andrew S. Tanenbaum, M. Frans Kaashoek, Henri E. Bal. </author> <title> "Parallel Programming Using Shared Objects and Broadcasting." </title> <booktitle> 1992 IEEE. </booktitle>
Reference-contexts: This is analogous to parallel programming in Orca with shared memory, which relies on a software layer that turns unreliable broadcasting offered by the hardware into reliable broadcasting <ref> [8] </ref>. The difference though, is the fact that the hardware in a mobile system is far more unreliable. In addition to dealing with retransmissions, the software complexity will be compounded by factors like disconnected operation of other servers on mobile devices.
Reference: [9] <author> Bill Schilit, Norman Adams, Rich Gold, Michael Tso and Roy Want. </author> <booktitle> "The ParcTab Mobile Computing System." </booktitle>
Reference-contexts: The hardware in the system consists of a couple of ParcTabs <ref> [9] </ref> and a HP-100 that communicate via infrared packets. The Tabs are essentially I/O devices with a 128X64 pixel touch sensitive display. The HP-100 has 1 MB of memory and it exports an interface identical to the Tabs.
Reference: [10] <author> David Goldberg and Cate Richardson. </author> <title> "Touch Typing With a Stylus." </title> <booktitle> INTERCHI 1993 Conference Proceedings, </booktitle> <address> Amsterdam, </address> <month> April </month> <year> 1993, </year> <pages> pp. 80-87 </pages>
Reference-contexts: For example a 'button' widget and a 'place' widget have been created. To get a browse/update version of Xvis, we will have to either deal with handwriting recognition or adopt a simple alphabet like Unistrokes <ref> [10] </ref> that simplifies character recognition. In order to test performance of the batched transaction scheme and overall performance of the system, it is necessary to get Xvis onto the HP-100. This should be a relatively simple job, given that widgets for the HP-100 have been developed 2 .
References-found: 10

