URL: http://www.cs.iastate.edu/tech-reports/TR96-21.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: Non-Atomic Components of Data Flow Diagrams: Stores, Persistent Flows, and Tests for Empty Flows Keywords:
Author: Jurgen Symanzik and Albert L. Baker Jurgen Symanzik and Albert L. Baker. 
Degree: All rights reserved.  
Address: 226 Atanasoff Hall  Ames, Iowa 50011-1040, USA  
Affiliation: Department of Computer Science  Iowa State University  
Note: c Copyright 1996 by  
Date: December 1996  
Pubnum: TR #96-21  
Abstract-found: 0
Intro-found: 0
Reference: [CB94] <author> D.L. Coleman and A.L. Baker. </author> <title> Synthesizing Structured Analysis and Object-Oriented Specifications. </title> <type> Technical Report 94-04, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> March </month> <year> 1994. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality. The authors use the approach to formalizing DFD's developed originally in [Col91], <ref> [CB94] </ref>, [WBL93] and refined more precisely in [WBL93] and [LWBL96]. These Formalized Data Flow Diagrams (FDFD's) are described more fully in the next section.
Reference: [Col91] <author> D.L. Coleman. </author> <title> Formalized Structured Analysis Specifications. </title> <type> PhD Thesis, </type> <institution> Iowa State University, Ames, Iowa, </institution> <month> 50011, </month> <year> 1991. </year>
Reference-contexts: These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality. The authors use the approach to formalizing DFD's developed originally in <ref> [Col91] </ref>, [CB94], [WBL93] and refined more precisely in [WBL93] and [LWBL96]. These Formalized Data Flow Diagrams (FDFD's) are described more fully in the next section. <p> In traditional DFD's, stores are viewed as data at rest (whatever that means). Stores are often just thinly veiled abstractions for files. They are often depicted as rectangles with open sides. 1.2.1 The Syntax of FDFD's Since <ref> [Col91] </ref> provides a formal syntax and [WBL93] provides a semantics for FDFD's, we refer to the language for expressing FDFD's as DFD-SPECS. The presentation in the rest of this section is less formal than in the cited references and we continue to refer to FDFD's (rather than DFD-SPECS). <p> Similarly, a bubble obtaining a data value from a store would need to designate a particular selector operation. Coleman suggests modelling stores as persistent flows with multiple originating bubbles, representing bubbles adding data values to a store, and multiple destination bubbles, representing bubbles obtaining data values from a store <ref> [Col91] </ref>. This perspective on stores as flows with multiple origin and destination bubbles is adopted in the syntax of FDFD's. Terminators are depicted simply as bubbles in which either they have no inflows, representing the data sources, or in which they have no outflows, representing the data sinks.
Reference: [DeM78] <author> T. DeMarco. </author> <title> Structured Analysis and System Specification. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1978. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in <ref> [DeM78] </ref>, [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [GHG + 93] <author> J.V. Guttag, J.J. Horning, S.J. Garland, K.D. Jones, A. Modet, and J.M. Wing. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: At this specification level, these types are viewed as abstract types. They are specified using a formal, model-based approach, similar to that of <ref> [GHG + 93] </ref> and [Jon86]. The firing rules defining the behavior of bubbles are expressed as assertions over the abstract types.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A Visual Formalism for Complex Systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], <ref> [Har87] </ref>, [TP89], [You89], [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [Har92] <author> D. Harel. </author> <title> Biting the Silver Bullet. </title> <journal> Computer, </journal> <volume> 21(1) </volume> <pages> 8-20, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], <ref> [Har92] </ref>, and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [Har96] <author> D. Harel. </author> <title> Executable Object Modeling with Statecharts. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 246-257. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1996. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], [You89], [Har92], and <ref> [Har96] </ref>. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [Jon86] <author> C.B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: At this specification level, these types are viewed as abstract types. They are specified using a formal, model-based approach, similar to that of [GHG + 93] and <ref> [Jon86] </ref>. The firing rules defining the behavior of bubbles are expressed as assertions over the abstract types.
Reference: [LP81] <author> H.R. Lewis and C.H. Papadimitriou. </author> <title> Elements of the Theory of Computation. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference: [LWBL96] <author> G.T. Leavens, T. Wahls, A.L. Baker, and K. Lyle. </author> <title> An Operational Semantics of Firing Rules for Structured Analysis Style Data Flow Diagrams. </title> <type> Technical Report 93-28d, </type> <institution> Iowa 22 State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1993, </year> <note> revised, July 1996. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality. The authors use the approach to formalizing DFD's developed originally in [Col91], [CB94], [WBL93] and refined more precisely in [WBL93] and <ref> [LWBL96] </ref>. These Formalized Data Flow Diagrams (FDFD's) are described more fully in the next section. <p> ::= + j j fl j = j % j [ j " j || j = j &lt; j j &gt; j j 2 j j j j 1.2.2 An Informal Semantics of FDFD's This informal description of FDFD's semantics is based on the previously referenced works ([CB94] and <ref> [LWBL96] </ref>) and on the interpreter developed by Wahls. The key concept in providing a meaning of FDFD's that allow them to serve as formal functional specifications is that of firing a bubble. <p> Since there has been no formalism for representing different "constructor" operations to add to a store and no formalism for representing different "selector" or "query" operations for getting data from a 14 store, stores have not been included in FDFD's in <ref> [LWBL96] </ref>, although a possible extension has been mentioned. However, the question of whether stores, i. e., the usual way stores are used in traditional DFD's, can be modeled using just the features of PFF-RDFD's is pertinent.
Reference: [Mat70] <author> J.V. Matijasevic. </author> <title> Enumerable Sets are Diophantine. </title> <journal> Soviet Mathematics, Doklady, </journal> <volume> 11(2) </volume> <pages> 354-358, </pages> <year> 1970. </year>
Reference: [SB96] <author> J. Symanzik and A.L. Baker. </author> <title> Formalized Data Flow Diagrams and Their Relation to Other Computational Models. </title> <type> Technical Report 96-20, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <month> December </month> <year> 1996. </year> <note> Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: 1 NON-ATOMIC COMPONENTS OF DATA FLOW DIAGRAMS: STORES, PERSISTENT FLOWS, AND TESTS FOR EMPTY FLOWS Abstract It has been shown in <ref> [SB96] </ref> that a particular subclass of Formalized Data Flow Diagrams (FDFD's) is Turing equivalent. We call this Turing equivalent subclass of FDFD's persistent flow-free Reduced Data Flow Diagrams (PFF-RDFD's). <p> Change the state of the bubble from working to idle. (iv) Repeat the above steps until the set of bubbles allowed to fire in step one is empty. 1.2.3 Restricted Classes of FDFD's As mentioned earlier, the authors have shown that a particular restricted class of FDFD's is Turing equivalent <ref> [SB96] </ref>. In this section we define this class of FDFD's. The first restriction is on the nature of enabling conditions. The enabling condition must do more than test for the presence of a value on a flow. <p> Finally, we restrict RDFD's to preclude persistent flows: Definition (1.2.3.3): An RDFD that does not have any persistent flows is called a persistent flow-free Reduced (Formalized) Data Flow Diagram (PFF-RDFD). It is PFF-RDFD's that is shown to be Turing equivalent in <ref> [SB96] </ref>.
Reference: [TP89] <author> T.H. Tse and L. Pong. </author> <title> Towards a Formal Foundation for DeMarco Data Flow Diagrams. </title> <journal> The Computer Journal, </journal> <volume> 32(1) </volume> <pages> 1-12, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], <ref> [TP89] </ref>, [You89], [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [WBL93] <author> T. Wahls, A.L. Baker, and G.T. Leavens. </author> <title> An Executable Semantics for a Formalized Data Flow Diagram Specification Language. </title> <type> Technical Report 93-27, </type> <institution> Iowa State University, Department of Computer Science, 226 Atanasoff Hall, Ames, Iowa 50011, </institution> <note> Novem-ber 1993. Available by anonymous ftp from ftp.cs.iastate.edu or by e-mail from almanac@cs.iastate.edu. </note>
Reference-contexts: These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality. The authors use the approach to formalizing DFD's developed originally in [Col91], [CB94], <ref> [WBL93] </ref> and refined more precisely in [WBL93] and [LWBL96]. These Formalized Data Flow Diagrams (FDFD's) are described more fully in the next section. <p> Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality. The authors use the approach to formalizing DFD's developed originally in [Col91], [CB94], <ref> [WBL93] </ref> and refined more precisely in [WBL93] and [LWBL96]. These Formalized Data Flow Diagrams (FDFD's) are described more fully in the next section. <p> The latest reference on this work is <ref> [WBL93] </ref>. This interpreter can be viewed as an executable semantics for what he refers to as constructive assertions. It can also be viewed as a prototype for a CASE tool providing direct execution of abstract model-based specifications. 3 syntactic features included for expressive convenience. <p> In traditional DFD's, stores are viewed as data at rest (whatever that means). Stores are often just thinly veiled abstractions for files. They are often depicted as rectangles with open sides. 1.2.1 The Syntax of FDFD's Since [Col91] provides a formal syntax and <ref> [WBL93] </ref> provides a semantics for FDFD's, we refer to the language for expressing FDFD's as DFD-SPECS. The presentation in the rest of this section is less formal than in the cited references and we continue to refer to FDFD's (rather than DFD-SPECS).
Reference: [WM85a] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 1: Introduction and Tools. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], <ref> [WM85a] </ref>, [WM85b], [Har87], [TP89], [You89], [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [WM85b] <author> P.T. Ward and S.J. Mellor. </author> <title> Structured Development for Real-Time Systems, Volume 2: Essential Modeling Techniques. </title> <publisher> Yourdon, Inc., </publisher> <address> New York, New York, </address> <year> 1985. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], <ref> [WM85b] </ref>, [Har87], [TP89], [You89], [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
Reference: [You89] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Yourdon Press Computing Series. Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: Numerous formalizations of DFD's have appeared in the technical literature, e. g., in [DeM78], [WM85a], [WM85b], [Har87], [TP89], <ref> [You89] </ref>, [Har92], and [Har96]. These attempts involve, in part, a more dynamic interpretation of data movement in DFD's. Given this type of rigorous and dynamic semantics, a DFD can serve as a formal specification of system functionality.
References-found: 17

