URL: http://www.cs.duke.edu/~jsv/Papers/AAE98.linear_constraints.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node24.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Efficient Searching with Linear Constraints (Extended Abstract)  
Author: Pankaj K. Agarwal Lars Arge Jeff Erickson Paolo G. Franciosa Jeffrey Scott Vitter 
Keyword: fpankaj,large,jeffe,jsvg.  
Note: Supported in part by National Science Foundation research grant CCR-93-01259, by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by a National Science Foundation NYI award and matching funds from Xerox Corporation, and by a grant from the U.S.-Israeli Binational Science Foundation. Supported in part by U.S. Army Research Office MURI grant DAAH04-96-1-0013. Supported in part by National Science Foundation grant DMS-9627683 and by U.S. Army Research Office MURI grant DAAH04-96-1-0013.  franciosa/. Supported in part by EU Project no. 20244 (Alcom-IT). Part of this work was done while visiting Duke University under the Short Term Mobility program of CNR. k Supported in part by U.S. Army Research Office MURI grant DAAH04-96-1-0013 and by National Science Foundation grant CCR-9522047.  
Web: fpankaj,large,jeffe,jsvg@cs:duke:edu; http://www:cs:duke:edu/  pgf@dis:uniroma1:it; http://www-ae:dis:uniroma1:it/ae/people/  
Address: Box 90129, Durham, NC 27708-0129;  "La Sapienza," Via Salaria 113, 00198, Rome;  
Affiliation: Center for Geometric Computing, Department of Computer Science, Duke University,  -Dipartimento di Informatica e Sistemistica, Universita di Roma  
Abstract: We show how to preprocess a set S of points in R d into an external memory data structure that efficiently supports linear-constraint queries. Each query is in the form of a linear constraint a x b; the data structure must report all the points of S that satisfy the constraint. Our goal is to minimize the number of disk blocks required to store the data structure and the number of disk accesses (I/Os) required to answer a query. For d = 2, we present the first near-linear size data structure that can answer linear-constraint queries using an optimal number of I/Os. We also present a linear-size data structure that can answer queries efficiently in the worst case. We combine these two approaches to obtain tradeoffs between space and query time. Finally, we show that some of our techniques extend to higher dimensions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, B. Aronov, T. Chan, and M. Sharir. </author> <title> On levels in arrangements of lines, segments, planes, and triangles. </title> <journal> Discrete Comput. Geom., </journal> <note> 1998, in press. </note>
Reference-contexts: For d = 3, the best known bound on the complexity of A k (H) is O (N k 5=3 ) <ref> [1] </ref>. Neither of these bounds is known to be tight. However, if we choose a random level of A (H), a better bound can be proven using a result of Clarkson and Shor [14]; see, for example, Agarwal et al. [4]. Lemma 2.2.
Reference: [2] <author> P. K. Agarwal, M. de Berg, J. Matousek, and O. Schwarzkopf. </author> <title> Constructing levels in arrangements and higher order Voronoi diagrams. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 67-75, </pages> <year> 1994. </year>
Reference-contexts: A clustering of A k (P ) consists of a partition of the facets into O (-k =k) families, such that for each family , its associated cluster S tains O (k) planes. The entire clustering can be stored using O (-k =B) blocks. Lemma 6.1 (Agarwal et al. <ref> [2] </ref>). Let P be a set of N planes. For any 1 k N , a clustering of A k (P ) can be constructed using O (N k 5=3 ) expected I/Os. We construct our data structure for P as follows.
Reference: [3] <author> P. K. Agarwal and J. Erickson. </author> <title> Geometric range searching and its relatives. </title> <editor> In B. Chazelle, J. E. Goodman, and R. Pollack, editors, </editor> <title> Discrete and Computational Geometry: Ten Years Later, </title> <note> 1998, to appear. </note>
Reference-contexts: We refer to these bounds as "linear" and introduce the notation n = dN=Be and t = dT =Be. 1.2 Previous results In recent years tremendous progress has been made on non-isothetic range searching in the computational geometry community; see the recent surveys <ref> [3, 34] </ref> and the references therein. As mentioned, halfspace range searching is the simplest form of non-isothetic range searching and thus the problem has been especially extensively studied. Unfortunately, all the results are obtained in main memory models of computation where I/O efficiency is not considered. <p> Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys <ref> [3, 24, 28, 37] </ref>.) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one dimension using B-trees. <p> We use this theorem to build a range-searching data structure for S called a partition tree T . Partition trees are one of the most commonly used internal memory data structures for geometric range searching <ref> [3, 26, 32, 47] </ref>; our construction closely follows the one by Ma-tousek [32]. Each node v in a partition tree T is associated with a subset S v S of points and a triangle v .
Reference: [4] <author> P. K. Agarwal, M. van Kreveld, and M. Overmars. </author> <title> Intersection queries in curved objects. </title> <journal> J. Algorithms, </journal> <volume> 15 </volume> <pages> 229-266, </pages> <year> 1993. </year>
Reference-contexts: Neither of these bounds is known to be tight. However, if we choose a random level of A (H), a better bound can be proven using a result of Clarkson and Shor [14]; see, for example, Agarwal et al. <ref> [4] </ref>. Lemma 2.2. Let H be a set of N hyperplanes in R d . <p> Our approach is first to find the layer containing the query point and then to report all lines of L lying below the query point. Similar ideas have been used previously to build range searching data structures in internal memory <ref> [4, 13] </ref> and external memory [46]. How exactly we do this efficiently is described next. For each i, we compute a 3 i -clustering i of A i (L) of size at most N= i , as described by Lemma 3.1.
Reference: [5] <author> L. Arge and J. S. Vitter. </author> <title> Optimal dynamic interval management in external memory. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 560-569, </pages> <year> 1996. </year>
Reference-contexts: One key reason for this discrepancy is the important practical restriction that the structures must use near-linear space. Recently, some progress has been made on the construction of structures with provably good performance for (special cases of) two-dimensional <ref> [5, 30, 40, 45] </ref> and three-dimensional [46] isothetic range searching. Even though the practical data structures mentioned above are often presented as structures for performing isothetic range searching, most of them can be easily modified to answer non-isothetic queries and thus also halfspace range queries.
Reference: [6] <author> R. Bayer and E. McCreight. </author> <title> Organization and maintenance of large ordered indexes. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: Most of the developed data structures are inefficient when mapped to external memory. The practical need for I/O support has led to the development of a large number of external data structures in the spatial database community. B-trees and their variants <ref> [6, 15] </ref> have been an unqualified success in supporting one-dimensional range queries. B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal.
Reference: [7] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R*-tree: An efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. SIG-MOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 322-331, </pages> <year> 1990. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants <ref> [7, 25, 29, 44, 9] </ref>. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one
Reference: [8] <author> S. Berchtold, C. Bohm, D. A. Keim, and H.-P. Kriegel. </author> <title> A cost model for nearest neighbor search in high-dimensional data space. </title> <booktitle> In Proc. ACM Sympos. Principles of Database Systems, </booktitle> <pages> pages 78-86, </pages> <year> 1997. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees <ref> [42, 43, 8] </ref>, k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is
Reference: [9] <author> S. Berchtold, D. A. Keim, and H.-P. Kriegel. </author> <title> The X-tree: An index structure for higher dimensional data. </title> <booktitle> In Proc. 22th International Conference on Very Large Databases, </booktitle> <pages> pages 28-39, </pages> <year> 1996. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants <ref> [7, 25, 29, 44, 9] </ref>. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one
Reference: [10] <author> B. Chazelle. </author> <title> Filtering search: A new approach to query-answering. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 703-724, </pages> <year> 1986. </year>
Reference-contexts: In fact, we present two different structures that achieve this bound. Both structures use O (n log 2 n) blocks of space and are simple enough to be of use in practice. Both structures are based on the geometric technique called filtering search <ref> [10, 11, 13] </ref>. As mentioned, practical considerations often prohibit the use of more than linear space.
Reference: [11] <author> B. Chazelle, R. Cole, F. P. Preparata, and C. K. Yap. </author> <title> New upper bounds for neighbor searching. </title> <journal> Inform. Control, </journal> <volume> 68 </volume> <pages> 105-124, </pages> <year> 1986. </year>
Reference-contexts: In fact, we present two different structures that achieve this bound. Both structures use O (n log 2 n) blocks of space and are simple enough to be of use in practice. Both structures are based on the geometric technique called filtering search <ref> [10, 11, 13] </ref>. As mentioned, practical considerations often prohibit the use of more than linear space.
Reference: [12] <author> B. Chazelle, L. J. Guibas, and D. T. Lee. </author> <title> The power of geometric duality. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 76-90, </pages> <year> 1985. </year>
Reference-contexts: Similar performance degradation can be shown for the other mentioned structures. In the internal memory model, a two-dimensional halfspace query can be answered in time O (log 2 N +T ) time using O (N ) space <ref> [12] </ref>, but it may require O (log 2 N + T ) I/Os in terms of the external memory model.
Reference: [13] <author> B. Chazelle and F. P. Preparata. </author> <title> Halfspace range search: An algorithmic application of k-sets. </title> <journal> Discrete Comput. Geom., </journal> <volume> 1 </volume> <pages> 83-93, </pages> <year> 1986. </year>
Reference-contexts: In fact, we present two different structures that achieve this bound. Both structures use O (n log 2 n) blocks of space and are simple enough to be of use in practice. Both structures are based on the geometric technique called filtering search <ref> [10, 11, 13] </ref>. As mentioned, practical considerations often prohibit the use of more than linear space. <p> Our approach is first to find the layer containing the query point and then to report all lines of L lying below the query point. Similar ideas have been used previously to build range searching data structures in internal memory <ref> [4, 13] </ref> and external memory [46]. How exactly we do this efficiently is described next. For each i, we compute a 3 i -clustering i of A i (L) of size at most N= i , as described by Lemma 3.1.
Reference: [14] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of random sampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: Neither of these bounds is known to be tight. However, if we choose a random level of A (H), a better bound can be proven using a result of Clarkson and Shor <ref> [14] </ref>; see, for example, Agarwal et al. [4]. Lemma 2.2. Let H be a set of N hyperplanes in R d .
Reference: [15] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11 </volume> <pages> 121-137, </pages> <year> 1979. </year>
Reference-contexts: Most of the developed data structures are inefficient when mapped to external memory. The practical need for I/O support has led to the development of a large number of external data structures in the spatial database community. B-trees and their variants <ref> [6, 15] </ref> have been an unqualified success in supporting one-dimensional range queries. B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal.
Reference: [16] <author> T. Dey. </author> <title> Improved bounds for k-sets and k-th levels. </title> <booktitle> In Proc. 38th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages, 156-161, </pages> <year> 1997. </year>
Reference-contexts: Replacing the second level red-black tree by a B-tree, the number of I/Os required to compute the level can be reduced to O (-(log 2 n) log B n), Little is known about the worst-case complexity of the k-level. A recent result of Dey <ref> [16] </ref> shows that the maximum number of vertices on the k-level in an arrangement of N lines in the plane is O (N k 1=3 ). For d = 3, the best known bound on the complexity of A k (H) is O (N k 5=3 ) [1].
Reference: [17] <author> F. Dumortier, M. Gyssens, and L. Vandeurzen. </author> <title> On the decidability of semi-linearity for semi-algebraic sets and its implications for spatial databases. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 68-77, </pages> <year> 1997. </year>
Reference-contexts: While most attention has focused on isothetic or orthogonal range searching, where a query is a d-dimensional axis-aligned hyper-rectangle, the importance of non-isothetic queries has also been recognized, most recently in <ref> [17, 22] </ref>. Many of the proposed data structures can be used to answer non-isothetic queries.
Reference: [18] <author> H. Edelsbrunner and E. Welzl. </author> <title> Constructing belts in two-dimensional arrangements with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 271-284, </pages> <year> 1986. </year>
Reference-contexts: For example, the k-level in an arrangement of lines is a x-monotone polygonal chain. Figure 2 (ii) depicts the 2-level in an arrangements of lines in the plane. An algorithm by Edels-brunner and Welzl <ref> [18] </ref> can compute a two-dimensional level with edges in O (- log 2 2 n) time. Their algorithm uses the dynamic convex-hull algorithm by Overmars and van-Leeuwen [38], which in turn uses a two-level red-black tree.
Reference: [19] <author> G. Evangelidis, D. Lomet, and B. Salzberg. </author> <title> The hB - tree: a multi-attribute index supporting concurrency, recovery and node consolidation. </title> <journal> The VLDB Journal, </journal> <volume> 6 </volume> <pages> 1-25, </pages> <year> 1997. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees <ref> [19, 31] </ref>, and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n +
Reference: [20] <author> P. Franciosa and M. Talamo. </author> <title> Time optimal halfplane search on external memory. </title> <type> Unpublished manuscript, </type> <year> 1997. </year>
Reference-contexts: The only known external memory data structure with provably good query performance works in two dimensions, where it uses O (n N ) blocks of space and answers queries using op timal O (log B n + t) I/Os <ref> [20, 21] </ref>. 1.3 Our results In Section 3, we give the first known data structure for answering two-dimensional halfspace range queries in optimal O (log B n + t) I/Os using near-linear size. In fact, we present two different structures that achieve this bound.
Reference: [21] <author> P. G. Franciosa and M. Talamo. </author> <title> Orders, k-sets and fast halfplane search on paged memory. </title> <booktitle> In Proc. Workshop on Orders, Algorithms and Applications, volume 831 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 117-127. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The only known external memory data structure with provably good query performance works in two dimensions, where it uses O (n N ) blocks of space and answers queries using op timal O (log B n + t) I/Os <ref> [20, 21] </ref>. 1.3 Our results In Section 3, we give the first known data structure for answering two-dimensional halfspace range queries in optimal O (log B n + t) I/Os using near-linear size. In fact, we present two different structures that achieve this bound.
Reference: [22] <author> J. Goldstein, R. Ramakrishnan, U. Shaft, and J.-B. Yu. </author> <title> Processing queries by linear constraints. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 257-267, </pages> <year> 1997. </year>
Reference-contexts: While most attention has focused on isothetic or orthogonal range searching, where a query is a d-dimensional axis-aligned hyper-rectangle, the importance of non-isothetic queries has also been recognized, most recently in <ref> [17, 22] </ref>. Many of the proposed data structures can be used to answer non-isothetic queries. <p> Note that a query corresponds to reporting all points below a query hyperplane h defined by a x = b. An example of a simple query that can be interpreted as a halfspace range query is the following <ref> [22] </ref>: Given a relation Companies (Name; PricePerShare; EarningsPerShare ); retrieve the names of all companies whose price-earnings ratio is less than 10.
Reference: [23] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory computational geometry. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 714-723, </pages> <year> 1993. </year>
Reference-contexts: random integer .) We also construct an external point-location data structure for the planar map obtained by projecting A (P ) vertically onto the xy-plane; this will allow us to compute the facet of A (P ) directly above or below a query point in O (log B n) time <ref> [23] </ref>.
Reference: [24] <author> R. Guting. </author> <title> An introduction to spatial database systems. </title> <journal> VLDB Journal, </journal> <volume> 4 </volume> <pages> 357-399, </pages> <year> 1994. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys <ref> [3, 24, 28, 37] </ref>.) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one dimension using B-trees.
Reference: [25] <author> A. Guttman. R-trees: </author> <title> A dynamic index structure for spatial searching. </title> <booktitle> In Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 47-57, </pages> <year> 1985. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants <ref> [7, 25, 29, 44, 9] </ref>. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one
Reference: [26] <author> D. Haussler and E. Welzl. </author> <title> Epsilon-nets and simplex range queries. </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 </volume> <pages> 127-151, </pages> <year> 1987. </year>
Reference-contexts: We use this theorem to build a range-searching data structure for S called a partition tree T . Partition trees are one of the most commonly used internal memory data structures for geometric range searching <ref> [3, 26, 32, 47] </ref>; our construction closely follows the one by Ma-tousek [32]. Each node v in a partition tree T is associated with a subset S v S of points and a triangle v .
Reference: [27] <author> A. Henrich. </author> <title> Improving the performance of multidimensional access structures based on kd-trees. </title> <booktitle> In Proc. 12th IEEE Intl. Conf. on Data Engineering, </booktitle> <pages> pages 68-74, </pages> <year> 1996. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants <ref> [41, 27] </ref>, hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log
Reference: [28] <author> E. G. Hoel and H. Samet. </author> <title> A qualitative comparison study of data structures for large line segment databases. </title> <booktitle> In Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 205-214, </pages> <year> 1992. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys <ref> [3, 24, 28, 37] </ref>.) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one dimension using B-trees.
Reference: [29] <author> I. Kamel and C. Faloutsos. Hilbert R-tree: </author> <title> An improved R-tree using fractals. </title> <booktitle> In Proceedings 20th International Conference on Very Large Databases, </booktitle> <pages> pages 500-509, </pages> <year> 1994. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants <ref> [7, 25, 29, 44, 9] </ref>. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one
Reference: [30] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, and J. S. Vitter. </author> <title> Indexing for data models with constraints and classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 52 </volume> <pages> 589-612, </pages> <year> 1996. </year>
Reference-contexts: Range searching and its variants are problems that often need to be solved efficiently. In relational database systems and in SQL, for example, one-dimensional range search is a commonly used operation <ref> [30, 40] </ref>. A number of special cases of two-dimensional range searching are important for the support of new language features, such as constraint query languages [30] and class hierarchies in object-oriented databases [30, 39]. <p> In relational database systems and in SQL, for example, one-dimensional range search is a commonly used operation [30, 40]. A number of special cases of two-dimensional range searching are important for the support of new language features, such as constraint query languages <ref> [30] </ref> and class hierarchies in object-oriented databases [30, 39]. In spatial databases such as geographic information systems (GIS), range searching obviously plays an extremely important role, and a large number of external data structures for answering such queries have been developed (see, for example, [42, 37]). <p> In relational database systems and in SQL, for example, one-dimensional range search is a commonly used operation [30, 40]. A number of special cases of two-dimensional range searching are important for the support of new language features, such as constraint query languages [30] and class hierarchies in object-oriented databases <ref> [30, 39] </ref>. In spatial databases such as geographic information systems (GIS), range searching obviously plays an extremely important role, and a large number of external data structures for answering such queries have been developed (see, for example, [42, 37]). <p> One key reason for this discrepancy is the important practical restriction that the structures must use near-linear space. Recently, some progress has been made on the construction of structures with provably good performance for (special cases of) two-dimensional <ref> [5, 30, 40, 45] </ref> and three-dimensional [46] isothetic range searching. Even though the practical data structures mentioned above are often presented as structures for performing isothetic range searching, most of them can be easily modified to answer non-isothetic queries and thus also halfspace range queries.
Reference: [31] <author> D. Lomet and B. Salzberg. </author> <title> The hB-tree: A multi-attribute indexing method with good guaranteed performance. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <year> 1990. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees <ref> [19, 31] </ref>, and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n +
Reference: [32] <author> J. Matousek. </author> <title> Efficient partition trees. </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 </volume> <pages> 315-334, </pages> <year> 1992. </year>
Reference-contexts: The size of , here denoted r, is the number of pairs. A simplicial partition is balanced if each subset S i contains between N=r and 2N=r points. Theorem 4.1 (Matousek <ref> [32] </ref>). Let S be a set of N points in the plane, and let 1 &lt; r N=2 be a given parameter. <p> We use this theorem to build a range-searching data structure for S called a partition tree T . Partition trees are one of the most commonly used internal memory data structures for geometric range searching <ref> [3, 26, 32, 47] </ref>; our construction closely follows the one by Ma-tousek [32]. Each node v in a partition tree T is associated with a subset S v S of points and a triangle v . <p> We use this theorem to build a range-searching data structure for S called a partition tree T . Partition trees are one of the most commonly used internal memory data structures for geometric range searching [3, 26, 32, 47]; our construction closely follows the one by Ma-tousek <ref> [32] </ref>. Each node v in a partition tree T is associated with a subset S v S of points and a triangle v . For the root u of T , we have S u = S and u = R 2 . <p> The constant of proportionality depends on " <ref> [32] </ref>. Theorem 4.2. Given a set S of N points in the plane and a parameter " &gt; 0, we can preprocess S into a data structure of size O (n) blocks so that a halfspace range query can be answered using O (n 1=2+" + t) I/Os. <p> That is, for any set S of n points in R d for any r, we can construct a balanced partition of size r so that any hyperplane intersects O (r 11=d ) simplices of <ref> [32] </ref>. Thus our data structure can be modified to work in higher dimensions.
Reference: [33] <author> J. Matousek. </author> <title> Reporting points in halfspaces. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 2(3) </volume> <pages> 169-186, </pages> <year> 1992. </year>
Reference-contexts: In this abstract we only outline the basic approach. A line ` is called k-shallow with respect to S, for k &lt; N , if at most k points of S lie below `. Theorem 5.2 (Matousek <ref> [33] </ref>). Let S be a set of n points in the plane, and let 1 &lt; r n=2 be a given parameter. <p> For any d &gt; 2, we obtain a data structure requiring O (n log B n) blocks that can answer halfspace queries in O (n 11=bd=2c+" + t) I/Os. The corresponding internal-memory data structure is described by Matousek <ref> [33] </ref>. 6 Halfspace Range Searching in 3D In this section we sketch our three-dimensional data structure. Details will appear in the full version of this paper. Our structure closely follows the binary tree structure described in Section 3.2.
Reference: [34] <author> J. Matousek. </author> <title> Geometric range searching. </title> <journal> ACM Com-put. Surv., </journal> <volume> 26 </volume> <pages> 421-461, </pages> <year> 1994. </year>
Reference-contexts: We refer to these bounds as "linear" and introduce the notation n = dN=Be and t = dT =Be. 1.2 Previous results In recent years tremendous progress has been made on non-isothetic range searching in the computational geometry community; see the recent surveys <ref> [3, 34] </ref> and the references therein. As mentioned, halfspace range searching is the simplest form of non-isothetic range searching and thus the problem has been especially extensively studied. Unfortunately, all the results are obtained in main memory models of computation where I/O efficiency is not considered.
Reference: [35] <author> R. Motwani and P. Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: The test can be performed in time proportional to the complexity of A (L) by scanning through the vertices of the level, keeping a count of how many lines of L 1 and L 2 lie below the level. Since = (ln N ), Chernoff's bound <ref> [35, page 86] </ref> implies that this partition is balanced with high probability (that is, with probability O (1 n c ) for some constant c &gt; 0).
Reference: [36] <author> J. Nievergelt, H. Hinterberger, and K. Sevcik. </author> <title> The grid file: An adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 9 </volume> <pages> 257-276, </pages> <year> 1984. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files <ref> [36] </ref>, quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query
Reference: [37] <author> J. Nievergelt and P. Widmayer. </author> <title> Spatial data struc-tures: Concepts and design choices. </title> <editor> In M. van Kreveld, J. Nievergelt, T. Roos, and P. Widmayer, editors, </editor> <title> Algorithmic Foundations of GIS. </title> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> Lecture Notes in Computer Science Vol. 1340. </note>
Reference-contexts: In spatial databases such as geographic information systems (GIS), range searching obviously plays an extremely important role, and a large number of external data structures for answering such queries have been developed (see, for example, <ref> [42, 37] </ref>). While most attention has focused on isothetic or orthogonal range searching, where a query is a d-dimensional axis-aligned hyper-rectangle, the importance of non-isothetic queries has also been recognized, most recently in [17, 22]. Many of the proposed data structures can be used to answer non-isothetic queries. <p> Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys <ref> [3, 24, 28, 37] </ref>.) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one dimension using B-trees.
Reference: [38] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Maintenance of configurations in the plane, </title> <booktitle> 23 </booktitle> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: Figure 2 (ii) depicts the 2-level in an arrangements of lines in the plane. An algorithm by Edels-brunner and Welzl [18] can compute a two-dimensional level with edges in O (- log 2 2 n) time. Their algorithm uses the dynamic convex-hull algorithm by Overmars and van-Leeuwen <ref> [38] </ref>, which in turn uses a two-level red-black tree. Replacing the second level red-black tree by a B-tree, the number of I/Os required to compute the level can be reduced to O (-(log 2 n) log B n), Little is known about the worst-case complexity of the k-level.
Reference: [39] <author> S. Ramaswamy and P. Kanellakis. </author> <title> OOBD indexing by class division. </title> <booktitle> In A.P.I.C. Series, </booktitle> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: In relational database systems and in SQL, for example, one-dimensional range search is a commonly used operation [30, 40]. A number of special cases of two-dimensional range searching are important for the support of new language features, such as constraint query languages [30] and class hierarchies in object-oriented databases <ref> [30, 39] </ref>. In spatial databases such as geographic information systems (GIS), range searching obviously plays an extremely important role, and a large number of external data structures for answering such queries have been developed (see, for example, [42, 37]).
Reference: [40] <author> S. Ramaswamy and S. Subramanian. </author> <title> Path caching: A technique for optimal external searching. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 25-35, </pages> <year> 1994. </year>
Reference-contexts: Range searching and its variants are problems that often need to be solved efficiently. In relational database systems and in SQL, for example, one-dimensional range search is a commonly used operation <ref> [30, 40] </ref>. A number of special cases of two-dimensional range searching are important for the support of new language features, such as constraint query languages [30] and class hierarchies in object-oriented databases [30, 39]. <p> One key reason for this discrepancy is the important practical restriction that the structures must use near-linear space. Recently, some progress has been made on the construction of structures with provably good performance for (special cases of) two-dimensional <ref> [5, 30, 40, 45] </ref> and three-dimensional [46] isothetic range searching. Even though the practical data structures mentioned above are often presented as structures for performing isothetic range searching, most of them can be easily modified to answer non-isothetic queries and thus also halfspace range queries.
Reference: [41] <author> J. Robinson. </author> <title> The K-D-B tree: A search structure for large multidimensional dynamic indexes. </title> <booktitle> In Proc. ACM SIGMOD Conf. on Management of Data, </booktitle> <pages> pages 10-18, </pages> <year> 1984. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants <ref> [41, 27] </ref>, hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log
Reference: [42] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addi-son Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: In spatial databases such as geographic information systems (GIS), range searching obviously plays an extremely important role, and a large number of external data structures for answering such queries have been developed (see, for example, <ref> [42, 37] </ref>). While most attention has focused on isothetic or orthogonal range searching, where a query is a d-dimensional axis-aligned hyper-rectangle, the importance of non-isothetic queries has also been recognized, most recently in [17, 22]. Many of the proposed data structures can be used to answer non-isothetic queries. <p> B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees <ref> [42, 43, 8] </ref>, k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is
Reference: [43] <author> H. Samet. </author> <title> The Design and Analyses of Spatial Data Structures. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: B-trees occupy O (n) space and answer queries in O (log B n + t) I/Os, which is optimal. Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees <ref> [42, 43, 8] </ref>, k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants [7, 25, 29, 44, 9]. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is
Reference: [44] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The R + -tree: A dynamic index for multi-dimensional objects. </title> <booktitle> In Proc. IEEE International Conf. on Very Large Databases, </booktitle> <year> 1987. </year>
Reference-contexts: Numerous structures have been proposed for range searching in two and higher dimensions, for example, grid files [36], quad-trees [42, 43, 8], k-d-B-trees and variants [41, 27], hB-trees [19, 31], and R-trees and variants <ref> [7, 25, 29, 44, 9] </ref>. (More references can be found in the surveys [3, 24, 28, 37].) Although these data structures have good average-case query performance for common geometric searching problems, their worst-case query performance is much worse than the O (log B n + t) I/O bound obtained in one
Reference: [45] <author> S. Subramanian and S. Ramaswamy. </author> <title> The p-range tree: A new data structure for range searching in secondary memory. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 378-387, </pages> <year> 1995. </year>
Reference-contexts: One key reason for this discrepancy is the important practical restriction that the structures must use near-linear space. Recently, some progress has been made on the construction of structures with provably good performance for (special cases of) two-dimensional <ref> [5, 30, 40, 45] </ref> and three-dimensional [46] isothetic range searching. Even though the practical data structures mentioned above are often presented as structures for performing isothetic range searching, most of them can be easily modified to answer non-isothetic queries and thus also halfspace range queries.
Reference: [46] <author> D. E. Vengroff and J. S. Vitter. </author> <title> Efficient 3-d range searching in external memory. </title> <booktitle> In Proc. of the 28th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 192-201, </pages> <year> 1996. </year>
Reference-contexts: One key reason for this discrepancy is the important practical restriction that the structures must use near-linear space. Recently, some progress has been made on the construction of structures with provably good performance for (special cases of) two-dimensional [5, 30, 40, 45] and three-dimensional <ref> [46] </ref> isothetic range searching. Even though the practical data structures mentioned above are often presented as structures for performing isothetic range searching, most of them can be easily modified to answer non-isothetic queries and thus also halfspace range queries. However, the query performance often seriously degrades. <p> Our approach is first to find the layer containing the query point and then to report all lines of L lying below the query point. Similar ideas have been used previously to build range searching data structures in internal memory [4, 13] and external memory <ref> [46] </ref>. How exactly we do this efficiently is described next. For each i, we compute a 3 i -clustering i of A i (L) of size at most N= i , as described by Lemma 3.1.
Reference: [47] <author> D. E. Willard. </author> <title> Polygon retrieval. </title> <journal> SIAM J. Comput., </journal> <volume> 11 </volume> <pages> 149-165, </pages> <year> 1982. </year>
Reference-contexts: We use this theorem to build a range-searching data structure for S called a partition tree T . Partition trees are one of the most commonly used internal memory data structures for geometric range searching <ref> [3, 26, 32, 47] </ref>; our construction closely follows the one by Ma-tousek [32]. Each node v in a partition tree T is associated with a subset S v S of points and a triangle v .
References-found: 47

