URL: ftp://ftp.cs.utexas.edu/pub/darshan/hawaii95.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/darshan/abstracts/abstracts.html
Root-URL: 
Title: Power-efficient Delay-insensitive Codes for Data Transmission  
Author: P. Patra and D. S. Fussell 
Address: Austin, TX 78712-1188, USA  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We have introduced and formalized the notion of dynamic delay-insensitive codes for data communication. We describe several codes and protocols designed to optimize switching energy expended at the data pins during data transmission in asynchronous systems. These include adaptations of some existing communication methods as well as some new techniques for reducing energy used in dynamic data communication between delay-insensitive circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Athas, J. Koller, and L. Svensson, </author> <title> "An energy-efficient cmos line driver using adiabatic switching," </title> <type> report ACMOS-TR-2, </type> <institution> Information Sciences Institute, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: Power management generally involves power down techniques to reduce dissipation by disabling portions of a circuit not currently in use. Dynamic power is the dominant source of dissipation in digital CMOS circuits (which do not use energy recovery techniques <ref> [1] </ref>).
Reference: [2] <author> A. Chandrakasan, S. Sheng, and R. Brodersen, </author> <title> "Low-power cmos digital design," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> vol. 27, </volume> <pages> pp. 473-483, </pages> <month> Apr. </month> <year> 1992. </year>
Reference: [3] <author> K. van Berkel, R. Burgess, J. Kessels, A. Peeters, M. Roncken, and F. Schalij, </author> <title> "A fully-asynchronous low-power error corrector for the DCC player," </title> <booktitle> in International Solid State Circuits Conference, </booktitle> <pages> pp. 88-89, </pages> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: This class holds a great, although largely un-demonstrated, potential for low-power applications since there are no global clock trees to be powered and switching activity occurs only in conjunction with useful computation or communication. For an application where particularly impressive power savings have been demonstrated using delay-insensitive circuitry, see <ref> [3] </ref>. DI systems can be expected to employ DI communication protocols not only within the computational logic of the system but also on busses used for communication between major subsystems.
Reference: [4] <author> M. Greenstreet, STARI: </author> <title> A Technique for High-Bandwidth Communication. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <month> January </month> <year> 1993. </year>
Reference: [5] <author> P. Patra, </author> <title> "Design of efficient and robust asynchronous circuits a dissertation proposal (section on power-efficient DI codes)," </title> <month> Jan. </month> <year> 1994. </year> <institution> Dept. of Comp. Sci., Univ of Texas at Austin. </institution>
Reference-contexts: Previous work on DI protocols for parallel bus communication has not explicitly dealt with the issue of minimizing the signal transitions required and thus the power consumed, although the importance of minimizing I/O signal transitions by means of coding was observed by both <ref> [5] </ref> and [6]. However, the former offered only an initial attempt at the problem, and the latter focused on synchronous data transmission only. In this paper we consider ways to reduce transitions in DI data communication over a parallel bus through efficient protocols and codes.
Reference: [6] <author> M. Stan and W. Burleson, </author> <title> "Limited-weight codes for low-power I/O," </title> <booktitle> in Proceedings of the 1994 International Workshop on Low Power Design, </booktitle> <address> ACM/IEEE, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Previous work on DI protocols for parallel bus communication has not explicitly dealt with the issue of minimizing the signal transitions required and thus the power consumed, although the importance of minimizing I/O signal transitions by means of coding was observed by both [5] and <ref> [6] </ref>. However, the former offered only an initial attempt at the problem, and the latter focused on synchronous data transmission only. In this paper we consider ways to reduce transitions in DI data communication over a parallel bus through efficient protocols and codes.
Reference: [7] <author> I. E. Sutherland, </author> <title> "Micropipelines," </title> <journal> Communications of the ACM, </journal> <volume> vol. 32, </volume> <pages> pp. 720-738, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The receiver acknowledges each received spacer or dataword on the hyperpath that the sender follows, when ready for the next|perhaps using a separate feedback line to the sender. This way the two communicating parties synchronize with each other. Note that self-timed circuits (such as micropipelines <ref> [7] </ref>) are quite compatible with this notion of spacers, as a receiver can receive a codeword and throw it out, if it is a spacer, without affecting the underlying computation.
Reference: [8] <author> T. Verhoeff, </author> <title> "Delay-insensitive codes|an overview," </title> <journal> Distributed Computing, </journal> <volume> vol. 3, no. 1, </volume> <pages> pp. 1-8, </pages> <year> 1988. </year>
Reference: [9] <author> R. Hill, </author> <title> A First Course in Coding Theory. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1986. </year>
Reference: [10] <author> C. V. </author> <title> Freiman, "Optimal error detection codes for completely asymmetric binary channels," </title> <journal> Inf Control 5, </journal> <pages> pp. 64-71, </pages> <year> 1962. </year>
Reference-contexts: For example, we can take the binary representation (x) of a data and concatenate another set of bits (y) encoding the data-validity condition to give a codeword (x : y). Decoding such a codeword involves stripping off the y bits that encode the validity condition. The Berger code <ref> [10] </ref> is an example of such a `separable' code (it is a statically DI code, too.) 6.1 Code interpretation in terms of bit transitions We have two choices as to how we transmit a codeword.
References-found: 10

