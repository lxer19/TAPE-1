URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS93-06.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Set-Serializability: A Formal Theory for Partitioned Data (Extended abstract)  
Author: G. Alonso A. El Abbadi 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract-found: 0
Intro-found: 1
Reference: [ABGM90] <author> R. Alonso, D. Barbara, and H. Garcia Molina. </author> <title> Data Caching isues in an information retrieval system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: They introduce the notion of a distributed assertion, key in partitioned data, and present an algorithm for maintaining these assertions on a distributed system. Barbara and Garc ia-Molina [BGM92] used these ideas and some previous work on Data Caching <ref> [ABGM90] </ref> to develop the Demarcation Protocol. To date, this protocol is the most complete attempt to solve Data Partitioning. However, it restricts the types of constraints allowed and issues like recovery and integration with non-partitioned data are not covered.
Reference: [BGM92] <author> D. Barbara and H. Garcia Molina. </author> <title> The Demarcation Protocol: A technique for maintaining linear arithmetic constraints in distributed database systems. </title> <booktitle> 3rd International Conference on Extending Database Technology, </booktitle> <address> Vienna, Austria, </address> <pages> pages 373-387, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In that way, sites can proceed locally without communication with the central site or with other sites, speeding up the processing of transactions <ref> [BGM92, GT92, SS90] </ref>. To guarantee correct executions, constraints must be imposed on the operations that can be executed in parallel over the partitioned data items. These constraints can be represented as distributed assertions and a mechanism must be provided to maintain them across the distributed system. <p> To our knowledge, this problem was first formalized by Carvalho and Roucairol [CR82]. They introduce the notion of a distributed assertion, key in partitioned data, and present an algorithm for maintaining these assertions on a distributed system. Barbara and Garc ia-Molina <ref> [BGM92] </ref> used these ideas and some previous work on Data Caching [ABGM90] to develop the Demarcation Protocol. To date, this protocol is the most complete attempt to solve Data Partitioning. However, it restricts the types of constraints allowed and issues like recovery and integration with non-partitioned data are not covered. <p> Thus, the set of executions allowed by set-serializability is a superset of of that allowed by serializability. Previous approaches <ref> [BGM92, SS90] </ref> considered a restricted set of constraints, ignored the issue of recovery and did not address the problem of integrating partitioned data with the standard non-partitioned data. <p> This process is carried out in two parts that constitute the Reconfiguration Protocol (conceptually similar to the Demarcation Protocol <ref> [BGM92] </ref>). The protocol first checks whether an update operation is safe. If this is the case, the operation is performed and the protocol (the reconfiguration) terminates. If this is not the case the site sends reconfiguration requests to all other sites. <p> Any particular implementation of the protocol will have several policies to decide how many sites to contact (acquisition policy), the amount of the request (amount-borrowed policy) and other details <ref> [BGM92, GT92, Kum90] </ref>. <p> By transitivity t 2 conditionally-commits t 1 . Using the same type of reasoning it can be stated that t 1 conditionally commits t 2 . This sort of cooperative execution is not allowed in any of the existing protocols for partitioned data. The Demarcation Protocol <ref> [BGM92] </ref> will always abort both transactions since in this protocol a transaction that requires a reconfiguration is always aborted. Even with this strong restriction on the execution of the transactions and reconfigurations, the Demarcation Protocol may lead to executions that are not recoverable. <p> Finally the notion of serializing sets of transactions instead of individual transactions allows a greater concurrency by grouping together transactions involved in a conditional-commit cycle. This enhances the transaction throughput of the overall distributed 10 system. Our protocol is a generalization of the Demarcation Protocol <ref> [BGM92] </ref> and most of the previous work [BGM92, GT92, SS90] on partitioned data can be easily mapped to and analyzed with our model. <p> This enhances the transaction throughput of the overall distributed 10 system. Our protocol is a generalization of the Demarcation Protocol [BGM92] and most of the previous work <ref> [BGM92, GT92, SS90] </ref> on partitioned data can be easily mapped to and analyzed with our model.
Reference: [BHG87] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: More formally, a conditional-commit relation between two transactions t i and t j is defined as follows: t i conditionally-commits t j if the abortion of t i implies the abortion of t j . This definition includes the traditional recoverability relationship induced by reads-from relations <ref> [BHG87] </ref>. It also includes any other dependency among transactions that may lead to cascading aborts. In the previous example, t R1 or t R2 conditionally-commit t R0 4 A motivating example of cyclic dependencies The Reconfiguration Protocol allows transactions to communicate outside the realm of the database.
Reference: [CR82] <author> O.S.F. Carvalho and G. Roucairol. </author> <title> On the distribution of an assertion. </title> <booktitle> Proceedings of the ACM-SIGOPS Symposium on Principles of Distributed Computing, Ottawa, </booktitle> <pages> pages 121-131, </pages> <year> 1982. </year>
Reference-contexts: To solve this problem, a protocol has to be developed to dynamically redefine a partition of data in such a way that the data is available at the site where it is needed. To our knowledge, this problem was first formalized by Carvalho and Roucairol <ref> [CR82] </ref>. They introduce the notion of a distributed assertion, key in partitioned data, and present an algorithm for maintaining these assertions on a distributed system. Barbara and Garc ia-Molina [BGM92] used these ideas and some previous work on Data Caching [ABGM90] to develop the Demarcation Protocol.
Reference: [GT92] <author> L. Golubchik and A. Thomasian. </author> <title> Token allocation in distributed systems. </title> <booktitle> IEEE 12th International Conference on Distributed Computing Systems, </booktitle> <address> Yokohama, Japan, </address> <month> 12 </month> <pages> 64-71, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In that way, sites can proceed locally without communication with the central site or with other sites, speeding up the processing of transactions <ref> [BGM92, GT92, SS90] </ref>. To guarantee correct executions, constraints must be imposed on the operations that can be executed in parallel over the partitioned data items. These constraints can be represented as distributed assertions and a mechanism must be provided to maintain them across the distributed system. <p> Soparkar and Silberchatz [SS90] have proposed the Data Value Partitioning protocol (DvP) as a way to cope with network partition failures and avoid the blocking behavior commit protocols. The overall goal is to deal with network partition failures and not to improve transaction throughput. Golubchik and Thomasian <ref> [GT92] </ref> present a simplified analysis fl This research was partially supported by the NSF under grant number IRI-9117904. 1 of the DvP protocol in terms of the policies used for initial allocation and data redistribution. <p> Any particular implementation of the protocol will have several policies to decide how many sites to contact (acquisition policy), the amount of the request (amount-borrowed policy) and other details <ref> [BGM92, GT92, Kum90] </ref>. <p> This enhances the transaction throughput of the overall distributed 10 system. Our protocol is a generalization of the Demarcation Protocol [BGM92] and most of the previous work <ref> [BGM92, GT92, SS90] </ref> on partitioned data can be easily mapped to and analyzed with our model.
Reference: [Had88] <author> V. Hadzilacos. </author> <title> A Theory of Reliability in Database Systems. </title> <journal> Journal of the ACM, </journal> <volume> 35(1) </volume> <pages> 121-145, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: To define correctness we will us the notion of committed projection of a history as the subset of committed transactions of a given history <ref> [Had88] </ref>.
Reference: [HC86] <author> M. Hsu and A. Chan. </author> <title> Partitioned Two-Phase Locking. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 431-446, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Golubchik and Thomasian [GT92] present a simplified analysis fl This research was partially supported by the NSF under grant number IRI-9117904. 1 of the DvP protocol in terms of the policies used for initial allocation and data redistribution. Hsu and Chan <ref> [HC86] </ref> have developed a Partitioned Two-Phase Locking mechanism that takes advantage of a hierarchically decomposed database. These same ideas have also been applied to enhance concurrency in replicated databases using the Escrow Transactional Method [KB92, KS88, Kum90, O'N86].
Reference: [KB92] <author> N. Krishnakumar and A.J. Bernstein. </author> <title> High throuhput Escrow algorithms for replicated databases. </title> <booktitle> Proceedings of the 18th VLDB Conference, Vancouver, Canada, </booktitle> <volume> 18 </volume> <pages> 175-186, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Hsu and Chan [HC86] have developed a Partitioned Two-Phase Locking mechanism that takes advantage of a hierarchically decomposed database. These same ideas have also been applied to enhance concurrency in replicated databases using the Escrow Transactional Method <ref> [KB92, KS88, Kum90, O'N86] </ref>. In this paper we introduce a general theory for distributed assertions and a protocol for maintaining the validity of these assertions over a distributed database.
Reference: [KS88] <author> A. Kumar and M. Stonebraker. </author> <title> Semantics based transaction management techniques for replicated data. </title> <booktitle> Proceedings of the ACM-SIGMOD International Conference on Management of Data, </booktitle> <publisher> Chicago, </publisher> <pages> pages 117-125, </pages> <year> 1988. </year>
Reference-contexts: Hsu and Chan [HC86] have developed a Partitioned Two-Phase Locking mechanism that takes advantage of a hierarchically decomposed database. These same ideas have also been applied to enhance concurrency in replicated databases using the Escrow Transactional Method <ref> [KB92, KS88, Kum90, O'N86] </ref>. In this paper we introduce a general theory for distributed assertions and a protocol for maintaining the validity of these assertions over a distributed database.
Reference: [Kum90] <author> A. Kumar. </author> <title> An Analysis of Borrowing Policies for Escrow Transactions in a Replicated Data Environment. </title> <booktitle> Proceedings of the IEEE Conference on Data Engineering, </booktitle> <pages> pages 446-454, </pages> <year> 1990. </year>
Reference-contexts: Hsu and Chan [HC86] have developed a Partitioned Two-Phase Locking mechanism that takes advantage of a hierarchically decomposed database. These same ideas have also been applied to enhance concurrency in replicated databases using the Escrow Transactional Method <ref> [KB92, KS88, Kum90, O'N86] </ref>. In this paper we introduce a general theory for distributed assertions and a protocol for maintaining the validity of these assertions over a distributed database. <p> Any particular implementation of the protocol will have several policies to decide how many sites to contact (acquisition policy), the amount of the request (amount-borrowed policy) and other details <ref> [BGM92, GT92, Kum90] </ref>.
Reference: [O'N86] <author> P. O'Neil. </author> <title> The Escrow Transactional Method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 405-430, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Hsu and Chan [HC86] have developed a Partitioned Two-Phase Locking mechanism that takes advantage of a hierarchically decomposed database. These same ideas have also been applied to enhance concurrency in replicated databases using the Escrow Transactional Method <ref> [KB92, KS88, Kum90, O'N86] </ref>. In this paper we introduce a general theory for distributed assertions and a protocol for maintaining the validity of these assertions over a distributed database.

References-found: 11

