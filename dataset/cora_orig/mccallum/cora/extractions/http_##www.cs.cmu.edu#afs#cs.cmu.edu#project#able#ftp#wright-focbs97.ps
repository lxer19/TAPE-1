URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/able/ftp/wright-focbs97.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/wright-focbs97.html
Root-URL: 
Title: Specifying Dynamism in Software Architectures  
Author: Robert Allen Remi Douence David Garlan 
Keyword: Software Architecture, Wright, Dynamic Topology, Analysis, CSP  
Note: Avaible in: Proceedings of Foundations of Component-Based Systems Workshop  
Address: Pittsburgh, Pensylvania, 15213-3890  
Affiliation: School of Computer Science Carnegie Mellon University  
Email: Email: douence@cs.cmu.edu  
Date: (Sept. 97)  
Abstract: A critical issue for complex component-based systems design is the modeling and analysis of architecture. One of the complicating factors in developing architectural models is accounting for systems whose architecture changes dynamically (during run time). This is because dynamic changes to architectural structure may interact in subtle ways with on-going computations of the system. In this paper we argue that it is possible and valuable to provide a modeling approach that accounts for the interactions between architectural reconfiguration and non-reconfiguration system functionality, while maintaining a separation of concerns between these two aspects of a system. The key to the approach is to use a uniform notation and semantic base for both reconfiguration and steady-state behavior, while at the same time providing syntactic separation between the two. As we will show, this permits us to view the architecture in terms of a set possible architectural snapshots, each with its own steady-state behavior. Transitions between these snapshots are accounted for by special reconfiguration-triggering events. fl Research sponsored by the INRIA, the Defense Advanced Research Projects Agency, and Rome Laboratory, Air Force Materiel Command, USAF, under agreement number F30602-97-2-0031, and by the National Science Foundation under Grant No. CCR-9357792. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright annotation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of INRIA, the Defense Advanced Research Projects Agency Rome Laboratory, or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [AG97] <author> R.J. Allen and D. Garlan. </author> <title> A formal basis for architectural connection. </title> <booktitle> ACM Transac tions on Software Engineering and Methodology, </booktitle> <year> 1997. </year>
Reference-contexts: These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright [All97] <ref> [AG97] </ref>, UniCon [SDK + 95], Rapide [LAK + 95], Darwin [MK96] and ACME [GMW]. There are many aspects of a software system that can be addressed in an architectural description, including functional behavior, allocation of resources, performance, fault-tolerance, flexibility in the face of altered requirements, and so on. <p> This sequence of actions can be repeated many times. The Wright specification shown in Figure 2 shows this interaction pattern, and further provides important details about the rules of the interaction. As detailed elsewhere [All97] <ref> [AG97] </ref>, Wright uses a variant of CSP [Hoa85] to characterize architectural behavior. The essential idea is to treat both components and connectors as processes, which synchronize over suitably renamed alphabets. <p> The use of external choice (2) in the server specification indicates that the server is expected to respond to any number of requests, and may not terminate prematurely. Successful termination is indicated by x. We have described in [All97] <ref> [AG97] </ref> how these formal descriptions can be used to check the consistency and completeness of architectural descriptions. Note, however, that the server role will never terminate until the client is ready.
Reference: [All97] <author> R.J. Allen. </author> <title> A Formal Approach to Software Architecture. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1997. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable progress on the development of architecture description languages (ADLs [Med97]) to support software architecture design and analysis. These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright <ref> [All97] </ref> [AG97], UniCon [SDK + 95], Rapide [LAK + 95], Darwin [MK96] and ACME [GMW]. There are many aspects of a software system that can be addressed in an architectural description, including functional behavior, allocation of resources, performance, fault-tolerance, flexibility in the face of altered requirements, and so on. <p> This sequence of actions can be repeated many times. The Wright specification shown in Figure 2 shows this interaction pattern, and further provides important details about the rules of the interaction. As detailed elsewhere <ref> [All97] </ref> [AG97], Wright uses a variant of CSP [Hoa85] to characterize architectural behavior. The essential idea is to treat both components and connectors as processes, which synchronize over suitably renamed alphabets. <p> The use of external choice (2) in the server specification indicates that the server is expected to respond to any number of requests, and may not terminate prematurely. Successful termination is indicated by x. We have described in <ref> [All97] </ref> [AG97] how these formal descriptions can be used to check the consistency and completeness of architectural descriptions. Note, however, that the server role will never terminate until the client is ready.
Reference: [GMW] <author> D. Garlan, R.T. Monroe, and D. Wile. Acme: </author> <title> An architecture description interchange language. </title> <note> Submitted for publication. </note>
Reference-contexts: These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright [All97] [AG97], UniCon [SDK + 95], Rapide [LAK + 95], Darwin [MK96] and ACME <ref> [GMW] </ref>. There are many aspects of a software system that can be addressed in an architectural description, including functional behavior, allocation of resources, performance, fault-tolerance, flexibility in the face of altered requirements, and so on. Each ADL tend to focus on one or more of these aspects.
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: This sequence of actions can be repeated many times. The Wright specification shown in Figure 2 shows this interaction pattern, and further provides important details about the rules of the interaction. As detailed elsewhere [All97] [AG97], Wright uses a variant of CSP <ref> [Hoa85] </ref> to characterize architectural behavior. The essential idea is to treat both components and connectors as processes, which synchronize over suitably renamed alphabets. For example, the use of internal choice (u) in the client specification indicates that it is the client that decides whether it will make a request. <p> In this section we sketch the formal basis for 8 this. The basic idea is to translate the notation into pure CSP <ref> [Hoa85] </ref>. In attempting to provide such a semantics, the key difficulties are to account for the dynamic creation and deletion of processes, and to arrange things so that the alphabets of the evolving topology leads to the intended interactions.
Reference: [LAK + 95] <author> D.C. Luckham, L.M. Augustin, J.J. Kenney, J. Vera, D. Bryan, and W. Mann. </author> <title> Specifi cation and analysis of system architecture using rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <year> 1995. </year>
Reference-contexts: These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright [All97] [AG97], UniCon [SDK + 95], Rapide <ref> [LAK + 95] </ref>, Darwin [MK96] and ACME [GMW]. There are many aspects of a software system that can be addressed in an architectural description, including functional behavior, allocation of resources, performance, fault-tolerance, flexibility in the face of altered requirements, and so on.
Reference: [Med97] <author> N. Medvidovic. </author> <title> A classification and comparison framework for software architecture description languages. </title> <type> Technical report, </type> <institution> University of California, Irvine, Department of Information and Computer Science, </institution> <year> 1997. </year>
Reference-contexts: 1 Introduction Recently, there has been considerable progress on the development of architecture description languages (ADLs <ref> [Med97] </ref>) to support software architecture design and analysis. These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright [All97] [AG97], UniCon [SDK + 95], Rapide [LAK + 95], Darwin [MK96] and ACME [GMW].
Reference: [MK96] <author> J. Magee and J. Kramer. </author> <title> Dynamic structure in software architectures. </title> <booktitle> In Proceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <year> 1996. </year>
Reference-contexts: These languages capture the key design properties of a system by exposing the architectural structure as a composition of components interacting via connectors. Examples include Wright [All97] [AG97], UniCon [SDK + 95], Rapide [LAK + 95], Darwin <ref> [MK96] </ref> and ACME [GMW]. There are many aspects of a software system that can be addressed in an architectural description, including functional behavior, allocation of resources, performance, fault-tolerance, flexibility in the face of altered requirements, and so on. Each ADL tend to focus on one or more of these aspects.
Reference: [RD95] <author> J.G. Rivera and A.A. Danylyszyn. </author> <title> Formalizing the uni-processor simplex architecture. </title> <type> Technical report, </type> <institution> Carnegie Mellon University School of Computer Science, </institution> <year> 1995. </year> <month> 11 </month>
Reference-contexts: This includes a broad class of client-server systems and many fault tolerant architectures (such as Simplex <ref> [RD95] </ref>). We believe that this trade-off is worth making, and that we have identified an important place in the design space of architectural formalization. However, at present this is largely a conjecture.

References-found: 8

