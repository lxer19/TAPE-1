URL: ftp://crl.dec.com/pub/DEC/AF/af-usenix93.ps
Refering-URL: http://www.cs.umd.edu/projects/mcml/mmothers.html
Root-URL: 
Title: AudioFile: A Network-Transparent System for Distributed Audio Applications  
Author: Thomas M. Levergood, Andrew C. Payne, James Gettys, G. Winfield Treese and Lawrence C. Stewart flfl 
Note: This is a reprint of a paper that appeared in the Proceedings of the USENIX Summer Conference, June, 1993. c flUSENIX Association 1993. Permission to copy without fee all or part of this material is granted, provided that the copies are not made or distributed for commercial advantage, the USENIX Association copyright notice and the title and date of publication appear, and that notice is given that copying is by permission of the USENIX Association. To copy or republish otherwise requires specific permission from the USENIX Association. Also with the  The authors' names are in random order.  
Affiliation: Digital Equipment Corporation Cambridge Research Lab  MIT Laboratory for Computer Science. flfl  
Abstract: AudioFile is a portable, device-independent, network-transparent system for computer audio systems. Similar to the X Window System, it provides an abstract audio device interface with a simple network protocol to support a variety of audio hardware and multiple simultaneous clients. AudioFile emphasizes client handling of audio data and permits exact control of timing. This paper describes our approach to digital audio, the AudioFile protocol, the client library, the audio server, and some example client applications. It also discusses the performance of the system and our experience using standard networking protocols for audio. A source code distribution is available by anonymous FTP. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Susan Angebranndt, Richard L. Hyde, Daphne Huetu Luong, Nagendra Siravara, and Chris Schmandt. </author> <title> Integrating audio and telephony in a distributed workstation environment. </title> <booktitle> In Proceedings of the USENIX Summer Conference. USENIX, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: VOX was constrained by the view that clients would control the flow of audio between external devices, rather than handling the data themselves. Other projects were underway at about the same time as AudioFile. Digital's XMedia <ref> [1] </ref> and Bellcore's Sonix [12] are similar to VOX in their emphasis on handling audio within the server. The conferencing system described by Terek and Pasquale [16] was based on a modified X server.
Reference: [2] <author> B. Arons, C. Binding, K. Lantz, and C. Schmandt. </author> <title> The VOX audio server. </title> <booktitle> In Multimedia '89: 2nd IEEE COMSOC International Multimedia Communications Workshop, </booktitle> <year> 1989. </year>
Reference-contexts: This system pioneered explicit client control of time (as described in Section 3) and was primarily used for applications such as teleconferencing and multimedia presentations. In the mid to late 1980's, the MIT Media Lab and Olivetti Research collaborated on a project called VOX <ref> [2] </ref>. In this system almost all audio functions were implemented inside the server, with the client merely controlling those functions. VOX was constrained by the view that clients would control the flow of audio between external devices, rather than handling the data themselves.
Reference: [3] <author> Edward Bruckert, Martin Minow, and Walter Tetschner. </author> <title> Three-tiered software and VLSI aid developmental system to read text aloud. </title> <publisher> Electronics, </publisher> <month> Apr. 21, </month> <year> 1983. </year>
Reference-contexts: For example, our software implementation of the DECtalk <ref> [3] </ref> speech synthesizer uses aplay for output. aplay handles only raw sound files but could be easily extended to handle popular sound file formats. aplay works with any fixed-size encoding format and any number of channels but the user must know the format of the file and choose an appropriate server
Reference: [4] <author> Steve Deering and Steve Casner. </author> <title> The first IETF audiocast. </title> <journal> ACM Communications Review, </journal> <volume> 22(3), </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: DECspin DECspin is a Digital product for network audio and video teleconferencing. DECspin uses AudioFile to provide its voice capability. VAT A team at the University of California, led by Van Jacobson, has built a network teleconferencing application using IP multicast protocols <ref> [4] </ref>. VAT can use AudioFile for its audio I/O. Sphinx Sphinx II is a continuous speech recognition system [6] developed at Carnegie Mellon University.
Reference: [5] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proc. SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314-329, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: These stem from packet losses caused by a phenomenon known as ACK-compression [10, 20], a subtle consequence of the use of window-based flow control. The duration of each dropout is exacerbated by TCP's slow-start algorithm <ref> [5] </ref>, which comes into play when packets are dropped by the network. ACK-compression occurs when the spacing between acknowledgments is changed by delays in the routers. This can cause cause TCP to send large bursts of packets, which overrun the buffers in a router, causing packets to be dropped.
Reference: [6] <author> Kai-Fu Lee. </author> <title> Automatic Speech Recognition: The Development of the SPHINX System. </title> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1989. </year> <title> 8 You really should read Thompson's paper on the Plan 9 C compiler [18]. </title> <type> 17 </type>
Reference-contexts: DECspin uses AudioFile to provide its voice capability. VAT A team at the University of California, led by Van Jacobson, has built a network teleconferencing application using IP multicast protocols [4]. VAT can use AudioFile for its audio I/O. Sphinx Sphinx II is a continuous speech recognition system <ref> [6] </ref> developed at Carnegie Mellon University. We use AudioFile's high fidelity input capability to supply audio to Sphinx. 9 Performance Results In this section, we present some performance results for our implementation of the AudioFile System. First, we measure the time to complete client library operations.
Reference: [7] <author> Thomas M. Levergood. LoFi: </author> <title> A TURBOchannel audio module. </title> <type> CRL Technical Report 93/9, </type> <institution> Digital Equipment Corporation, Cambridge Research Lab, </institution> <year> 1993. </year>
Reference-contexts: Currently supported devices include: LoFi LoFi, 6 designed at CRL, is a workstation peripheral later released as the DECaudio product <ref> [7] </ref>. LoFi supports two 8 KHz CODECs, one connecting to a telephone line. LoFi contains a digital signal processing chip with 32K words of memory shared with the host.
Reference: [8] <author> Thomas M. Levergood, Andrew C. Payne, James Gettys, G. Winfield Treese, and Lawrence C. Stewart. Audiofile: </author> <title> A network-transparent system for distributed audio applications. </title> <type> CRL Technical Report 93/8, </type> <institution> Digital Equipment Corporation, Cambridge Research Lab, </institution> <year> 1993. </year>
Reference-contexts: Some stereo sound bites are in AF2R2-other.tar.Z. A more detailed description of the design and implementation of AudioFile is also available as a technical report <ref> [8] </ref>. We apologize for the code being cluttered with left-justified chicken scratches. 8 We wanted AudioFile to be portable, but at least one major vendor does not support function prototypes with their stock C compiler. We have created an Internet mailing list af@crl.dec.com for discussions of AudioFile.
Reference: [9] <author> D. L. Mills. </author> <title> Network time protocol (NTP). Internet RFC 958, </title> <institution> Network Information Center, </institution> <month> September </month> <year> 1985. </year>
Reference-contexts: There are a remarkable number of clocks in a modern distributed computer system. A simple desktop system might have four different clocks: time-of-day, interval timer, display refresh, and audio. Each computer system in a network has its own clocks. Time-of-day clocks may be synchronized with protocols such as NTP <ref> [9] </ref>, but we are not aware of any systems that keep the other clocks synchronized. In principle, it is possible to use any clock for audio. Because we wanted to be able to specify audio data down to the individual sample, we chose to use the audio sample rate clock.
Reference: [10] <author> Jeffrey C. Mogul. </author> <title> Observing TCP dynamics in real networks. </title> <booktitle> In Proc. SIGCOMM '92 Symposium on Communications Architectures and Protocols, </booktitle> <address> Baltimore, MD, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: These stem from packet losses caused by a phenomenon known as ACK-compression <ref> [10, 20] </ref>, a subtle consequence of the use of window-based flow control. The duration of each dropout is exacerbated by TCP's slow-start algorithm [5], which comes into play when packets are dropped by the network. ACK-compression occurs when the spacing between acknowledgments is changed by delays in the routers.
Reference: [11] <author> John K. Ousterhout. </author> <title> An X11 toolkit based on the Tcl language. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: Some clients have graphical user interfaces using X and Tk toolkits <ref> [11] </ref>. Table 3 summarizes the clients. In the remainder of this section we describe two clients, aplay and apass, in some detail, to illustrate the simplicity of the AudioFile client library programming interface.
Reference: [12] <author> Steven J. Rohall. Sonix: </author> <title> A network-transparent sound server. </title> <booktitle> In Proceedings of the Xhibition 92 Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: VOX was constrained by the view that clients would control the flow of audio between external devices, rather than handling the data themselves. Other projects were underway at about the same time as AudioFile. Digital's XMedia [1] and Bellcore's Sonix <ref> [12] </ref> are similar to VOX in their emphasis on handling audio within the server. The conferencing system described by Terek and Pasquale [16] was based on a modified X server.
Reference: [13] <author> Robert W. Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <note> 3rd edition, </note> <year> 1991. </year>
Reference-contexts: Once that hardware was available, we began work on software. The result of our efforts is the AudioFile System. Similar to the X Window System <ref> [13] </ref>, AudioFile was designed to allow multiple clients, to support a variety of audio hardware, and to permit transparent access through the network. Since its original implementation, AudioFile has been used for many applications and experiments with desktop audio.
Reference: [14] <author> Henry Spencer. </author> <title> How to steal code -or- inventing the wheel only once. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 335-346. </pages> <publisher> USENIX, </publisher> <month> February </month> <year> 1988. </year>
Reference-contexts: Next, we describe some sample applications and analyze AudioFile's performance. We conclude with a brief discussion of our plans for future work. 1 And video, but that is another story. 2 Why start with a clean slate? For more information on how to steal code, consult Spencer <ref> [14] </ref>. 3 We think that something like an audio window manager might be useful, but so far we have not found it necessary to implement one. 2 2 Background In the early 1980's, Xerox PARC built an Ethernet-based telephone system called Etherphone [15].
Reference: [15] <author> D. C. Swinehart, L. C. Stewart, and S. M. Ornstein. </author> <title> Adding voice to an office computer network. </title> <booktitle> In Proceedings of GlobeCom 1983, </booktitle> <month> November </month> <year> 1983. </year>
Reference-contexts: information on how to steal code, consult Spencer [14]. 3 We think that something like an audio window manager might be useful, but so far we have not found it necessary to implement one. 2 2 Background In the early 1980's, Xerox PARC built an Ethernet-based telephone system called Etherphone <ref> [15] </ref>. The system also had capabilities for workstation control of recording, playback, and storage. The Etherphone system was used primarily to explore issues of multimedia documents and computer-telephone integration. In the mid 1980's, the Firefly multiprocessor [17] developed at Digital's Systems Research Center incorporated telephone-quality audio.
Reference: [16] <author> Robert Terek and Joseph Pasquale. </author> <title> Experiences with audio conferencing using the X window system, UNIX, </title> <booktitle> and TCP/IP. In Proceedings of the USENIX Summer Conference. USENIX, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Other projects were underway at about the same time as AudioFile. Digital's XMedia [1] and Bellcore's Sonix [12] are similar to VOX in their emphasis on handling audio within the server. The conferencing system described by Terek and Pasquale <ref> [16] </ref> was based on a modified X server. In contrast, we think audio and graphics should be kept separate for ease of implementation and so that non-graphics equipped machines can still use audio. 3 Audio Abstractions This section describes the fundamental abstractions of AudioFile.
Reference: [17] <author> Charles P. Thacker, Lawrence C. Stewart, and Edwin H. Satterthwaite Jr. Firefly: </author> <title> A multiprocessor workstation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 909-920, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: The system also had capabilities for workstation control of recording, playback, and storage. The Etherphone system was used primarily to explore issues of multimedia documents and computer-telephone integration. In the mid 1980's, the Firefly multiprocessor <ref> [17] </ref> developed at Digital's Systems Research Center incorporated telephone-quality audio. An audio server buffered the past input and future output and exported a remote procedure call (RPC) interface to clients.
Reference: [18] <author> Ken Thompson. </author> <title> A new C compiler. </title> <booktitle> In Proceedings of the Summer 1990 UKUUG Conf., </booktitle> <pages> pages 41-51, </pages> <address> London, </address> <month> July </month> <year> 1990. </year>
Reference: [19] <author> Stephen A. Uhler. PhoneStation, </author> <title> moving the telephone onto the virtual desktop. </title> <booktitle> In Proceedings of the USENIX Winter Conference. USENIX, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: The telephone interface on LoFi enables applications such as voice mail and remote information access. We see no difficulty in supporting other kinds of telephone interfaces, such as ISDN or PhoneStation <ref> [19] </ref>. JVideo JVideo is an experimental desktop video peripheral. Like LoFi, JVideo includes audio hardware based on a DSP and shared memory. However, JVideo has neither telephony capability nor an external DSP port.

References-found: 19

