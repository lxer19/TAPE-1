URL: ftp://ftp.csd.uu.se/pub/papers/reports/0094.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Phone: Phone: +481818 25 00 Fax: +461851 19 25  
Title: Reflection into SLD-resolution (Extended Abstract)  
Author: Jonas Barklund Stefania Costantini Pierangelo Dell'Acqua Gaetano A. Lanzarone 
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Uppsala University Universita degli Studi di Milano Uppsala University Computing Science Department  Universita degli Studi di Milano and Uppsala Univ.  
Note: Integrating  P. Dell'Acqua has been supported by both  
Abstract: UPMAIL Technical Report No. 94 20 January, 1995 Abstract In this paper we present an extension of SLD-resolution that allows us to model reflection rules in metalevel architectures. We employ an abstract language, introduce the concept of a name theory for such a language, and present an inference system that is parameterized with a name theory. The proposed mechanism is completely general in such a way that for any metalevel architecture where the procedural semantics is independent of the specific device for unification and naming mechanism, a similar generalization is also possible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aiello, L. C., Cecchi, C. and Sartini, D., </author> <title> Representation and Use of Metaknowl-edge, </title> <journal> Proc. of the IEEE, </journal> <volume> 74 </volume> <month> 1304-1321 </month> <year> (1986). </year>
Reference-contexts: 1 Introduction The need for expressing and using metalevel knowledge has been widely recognized in the AI literature. Aiello et al. <ref> [1] </ref>, for example, argue that meta-knowledge and metalevel reasoning are suitable for devising proof strategies in automated deduction systems, for controlling the inference in problem solving, and for increasing the expressive power of knowledge representation languages.
Reference: [2] <author> Cervesato, I. and Rossi, G., </author> <title> Logic Meta-Programming Facilities in 'Log, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: In general a "k-th" name of the term f (a) is the compound name term [f k ; a k ]. Example 2. 'Log <ref> [2] </ref> provides two meta-representations for every expression of the language: atomic names and structural descriptive names. The alphabet of 'Log therefore contains a metasymbol for every expression of the language.
Reference: [3] <author> Clark, K. L., </author> <title> Negation as Failure, </title> <editor> in: H. Gallaire and J. Minker (eds.), </editor> <booktitle> Logic and Data Bases, </booktitle> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: Every name theory contains the axioms that characterize the equality interpretation of `=' and the freeness axioms <ref> [3] </ref>. In order to consider names of expressions of L, a name theory must also contain the axioms that characterize name terms and the symbols `"' and `#'. Example 5. <p> Martelli and Montanari [7] recast the problem of finding a most general unifier of a set of terms as the problem of finding a solution of a set of equations. Clark <ref> [3] </ref> showed that every step of the unification algorithm is a particular use of one of the freeness axioms or one of the the equality axioms.
Reference: [4] <author> Clark, K. L., </author> <title> Logic Programming Schemes and Their Implementations, </title> <editor> in: J.- L. Lassez and G. Plotkin (eds.), </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1991. </year>
Reference-contexts: They characterize meta-to-object reflection (case (ii)) and object-to-meta reflection (case (iii)), respectively. In order to have uniformity with the language of the name theory, we express substitutions as sets of equations and we take as a basis of the presentation one of the abstract schemes presented by Clark <ref> [4] </ref>. A computation is invoked by a goal that is a multiset of atoms G meaning a conjunction of its atoms A 1 ; : : : ; A k .
Reference: [5] <author> Costantini, S. and Lanzarone, G. A., </author> <title> A Metalogical Programming Approach: Language, Semantics and Applications, </title> <journal> J. Exper. Theor. Artificial Intelligence, </journal> <month> 1 </month> <year> (1993). </year>
Reference-contexts: Name terms contain metavariables and metasymbols. The language of a program. Given an L program P , the language of P is the subset of L that can be generated from the alphabet of P . Example 1. The alphabet of Reflective Prolog <ref> [5] </ref> contains various metasym-bols that are intended as names for constants, function symbols and predicate symbols. Since Reflective Prolog employs structural descriptive names, name terms of the language also contain compound name terms. <p> In the language design, this has been achieved by introducing forms of reflection into SLD-resolution to shift from the object level to the metalevel and vice versa. The extended SLD-resolution has been called RSLD-resolution <ref> [5] </ref>. RSLD-resolution. In the following we assume that names of expressions of L are structural descriptive and the alphabet of the language contains the distinguished predicate symbol solve.
Reference: [6] <author> Lloyd, J. W., </author> <title> Foundations of Logic Programming, Second Edition, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year> <month> 6 </month>
Reference-contexts: We call the abstract language L 0 . To do this, we first assume the basic features of the language L 0 of definite programs, as defined by Lloyd <ref> [6] </ref>, then we extend it in order to include expressions that name expressions of L 0 . Alphabet.
Reference: [7] <author> Martelli, A. and Montanari, U., </author> <title> An Efficient Unification Algorithm, </title> <journal> ACM TOPLAS, </journal> <volume> 4 </volume> <month> 258-282 </month> <year> (1982). </year> <month> 7 </month>
Reference-contexts: Martelli and Montanari <ref> [7] </ref> recast the problem of finding a most general unifier of a set of terms as the problem of finding a solution of a set of equations.
References-found: 7

