URL: http://www.cs.bu.edu/techreports/93-002-scc.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (best@cs.bu.edu)  
Title: Speculative Concurrency Control  
Author: Azer Bestavros 
Date: January 27, 1993  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: In this paper, we propose a new class of Concurrency Control Algorithms that is especially suited for real-time database applications. Our approach relies on the use of (potentially) redundant computations to ensure that serializ-able schedules are found and executed as early as possible, thus, increasing the chances of a timely commitment of transactions with strict timing constraints. Due to its nature, we term our concurrency control algorithms Speculative. The aforementioned description encompasses many algorithms that we call collectively Speculative Concurrency Control (SCC) algorithms. SCC algorithms combine the advantages of both Pessimistic and Optimistic Concurrency Control (PCC and OCC) algorithms, while avoiding their disadvantages. On the one hand, SCC resembles PCC in that conflicts are detected as early as possible, thus making alternative schedules available in a timely fashion in case they are needed. On the other hand, SCC resembles OCC in that it allows conflicting transactions to proceed concurrently, thus avoiding unecessary delays that may jeopardize their timely commitment. 
Abstract-found: 1
Intro-found: 1
Reference: [Abbo88] <author> Robert Abbott and Hector Garcia-Molina. </author> <title> "Scheduling real-time transactions: A performance evaluation." </title> <booktitle> In Prooceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <address> Los Angeles, Ca, </address> <year> 1988. </year>
Reference-contexts: These attempts have been successful in the sense that they improved the performance of the basic PCC and OCC algorithms in the context of real-time database management systems (RTDBMS). Most real-time concurrency control schemes considered in the literature are based on Two-Phase Locking (2PL) <ref> [Abbo88, Stan88, Huan90, Sha91] </ref> a PCC algorithm that has been well studied in traditional database management systems (DBMS).
Reference: [Agra87] <author> R. Agrawal, M. Carey, and M. Linvy. </author> <title> "Concurency control performance modeling: Alternatives and implications." </title> <journal> ACM Transaction on Database Systems, </journal> <volume> 12(4), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Finally, in section 4, we conclude this paper and describe our current and future research directions. 2 Previous Work For a conventional DBMS with limited resources, performance studies of concurrency control methods (e.g. <ref> [Agra87] </ref>) have concluded that PCC locking protocols, due to their conservation of resources, perform better than OCC techniques. The main reason for this good performance is that PCC's blocking-based conflict resolution policy results in resource conservation, whereas OCC with its restart-based conflict resolution policy wastes more resources.
Reference: [Bern87] <author> A. Bernstein, A. Philip, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control And Recovery In Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Each transaction in the system is assumed to preserve the consistency of the shared database. Therefore, any sequential (or serializable) execution of any collection of transactions will also preserve consistency <ref> [Bern87] </ref>. 3 Notice that this is not needed in PCC algorithms that rely on blocking. 7 Given a concurrent execution of transactions, action a ir of transaction T i conflicts with action a js of T j , if they access the same object and either a ir is a read
Reference: [Best92a] <author> Azer Bestavros. </author> <title> "Performance measures for real-time database management systems." </title> <type> Technical Report (In progress), </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: For real-time database applications where transactions execute under strict timing constraints, maximum concurrency (or throughput) ceases to be an expressive measure of performance. Rather, the number of transactions completed before their set deadlines becomes the decisive performance measure <ref> [Best92a] </ref>. Recently, several attempts at modifying PCC and OCC algorithms to suit real-time database applications have been proposed. These attempts have been successful in the sense that they improved the performance of the basic PCC and OCC algorithms in the context of real-time database management systems (RTDBMS).
Reference: [Best92b] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "A family of speculative concurrency control algorithms." </title> <type> Technical Report TR-92-017, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year> <note> Also submitted for publication to SIGMOD'93. </note>
Reference-contexts: It is conceivable to think about other alternatives, in which instead of considering M -tupple orderings or 2-tupple orderings, one could consider N - tupple orderings, 1 N M . In <ref> [Best92b] </ref> we present a generic SCC-based algorithm, which allows the redundancy level for the individual transactions in the system to be different and to vary dynamically.
Reference: [Best92c] <author> Azer Bestavros and Spyridon Braoudakis. </author> <title> "Speculative concurrency control algorithms for real-time databases: An alternative expression of transaction priority." </title> <type> Technical Report (In progress), </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: In [Best92b] we present a generic SCC-based algorithm, which allows the redundancy level for the individual transactions in the system to be different and to vary dynamically. In <ref> [Best92c] </ref>, we use this feature to express the priority (or urgency) of transactions in real-time databases. 12 4 Conclusion SCC-based algorithms offer a new dimension (namely redundancy) that can be used effectively in RTDBMS. In this paper, we introduced the basic idea behind SCC algorithms.
Reference: [Best93] <author> Azer Bestavros, Spyridon Braoudakis, and Euthimios Panagos. </author> <title> "Performance evaluation of two-shadow speculative concurrency control in a client-server distributed system." </title> <type> Technical Report TR-93-001, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> January </month> <year> 1993. </year> <note> Also submitted for publication to VLDB'93, Ireland. </note>
Reference-contexts: The above simulations assumed tight deadlines, which explains the high percentage of transactions missing their deadlines. Similar results confirming SCC-2S superiority were obtained for looser timing constraints and various levels of data conflicts. They are discussed in <ref> [Best93] </ref>. 3.3 Other SCC-based Algorithms The SCC-basic algorithm and the SCC-2S algorithm represent two extremes regarding the amount of redundant computations they introduce.
Reference: [Elma89] <author> Ramez Elmasri and Shamkant Navathe. </author> <title> Fundamentals of Database Systems. </title> <publisher> The Ben-jamin/Cummings Publishing Company Inc., </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction In order for multiple transactions to operate concurrently on a shared database, a protocol must be adopted to coordinate their activities. Such a protocol called a concurrency control algorithm aims at insuring a consistent state of the database system, while allowing the maximum possible concurrency among transactions <ref> [Elma89] </ref>. Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic [Mena82]. Pessimistic Concurrency Control (PCC) algorithms avoid any concurrent execution of transactions as soon as conflicts that might result in future inconsistencies are detected.
Reference: [Hari90a] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "Dynamic real-time optimistic concurrency control." </title> <booktitle> In Prooceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems. <p> In addition, the non-blocking and deadlock free properties of OCC are especially attractive to real-time transaction processing. The performance studies in <ref> [Hari90b, Hari90a, Huan91] </ref> confirm that, for systems with firm deadlines, 1 OCC outperforms 2PL under low system loads and high resource availability. In this paper we propose a categorically different approach to Concurrency Control that is particularly well-suited for real-time database applications. <p> In an environment with an abundance of resources, the advantage that PCC blocking-based algorithms have over OCC restart-based algorithms vanishes. In particular, under such conditions, OCC algorithms become attractive since computing resources wasted due to restarts do not adversely affect performance. Haritsa et al. <ref> [Hari90b, Hari90a] </ref> investigated the behavior of both PCC and OCC schemes in a real-time environment. The study showed that for a RTDBMS with firm deadlines (where late transactions are immediately discarded) OCC outperforms PCC, especially when resource contention is low.
Reference: [Hari90b] <author> Jayant R. Haritsa, Michael J. Carey, and Miron Linvy. </author> <title> "On being optimistic about real-time constraints." </title> <booktitle> In Prooceedings of the 1990 ACM PODS Symposium, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems. <p> In addition, the non-blocking and deadlock free properties of OCC are especially attractive to real-time transaction processing. The performance studies in <ref> [Hari90b, Hari90a, Huan91] </ref> confirm that, for systems with firm deadlines, 1 OCC outperforms 2PL under low system loads and high resource availability. In this paper we propose a categorically different approach to Concurrency Control that is particularly well-suited for real-time database applications. <p> In an environment with an abundance of resources, the advantage that PCC blocking-based algorithms have over OCC restart-based algorithms vanishes. In particular, under such conditions, OCC algorithms become attractive since computing resources wasted due to restarts do not adversely affect performance. Haritsa et al. <ref> [Hari90b, Hari90a] </ref> investigated the behavior of both PCC and OCC schemes in a real-time environment. The study showed that for a RTDBMS with firm deadlines (where late transactions are immediately discarded) OCC outperforms PCC, especially when resource contention is low.
Reference: [Huan90] <author> J. Huang, J. Stankovic, D. Towsley, and K. Ramamritham. </author> <title> "Real-time transaction processing: Design, implementation and performance evaluation." </title> <type> Technical Report COINS TR-90-43, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA 01003, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: These attempts have been successful in the sense that they improved the performance of the basic PCC and OCC algorithms in the context of real-time database management systems (RTDBMS). Most real-time concurrency control schemes considered in the literature are based on Two-Phase Locking (2PL) <ref> [Abbo88, Stan88, Huan90, Sha91] </ref> a PCC algorithm that has been well studied in traditional database management systems (DBMS).
Reference: [Huan91] <author> Jiandong Huang, John A. Stankovic, and Don Towslwy Krithi Ramamritham. </author> <title> "Experimental evaluation of real-time optimistic concurrency control schemes." </title> <booktitle> In Prooceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems. <p> In addition, the non-blocking and deadlock free properties of OCC are especially attractive to real-time transaction processing. The performance studies in <ref> [Hari90b, Hari90a, Huan91] </ref> confirm that, for systems with firm deadlines, 1 OCC outperforms 2PL under low system loads and high resource availability. In this paper we propose a categorically different approach to Concurrency Control that is particularly well-suited for real-time database applications.
Reference: [Kim91] <author> Woosaeng Kim and Jaideep Srivastava. </author> <title> "Enhancing real-time dbms performance with multiver-sion data and priority based disk scheduling." </title> <booktitle> In Prooceedings of the 12th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems.
Reference: [Kung81] <author> H. Kung and John Robinson. </author> <title> "On optimistic methods for concurrency control." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: With classical OCC <ref> [Kung81] </ref>, the execution of a transaction consists of three phases: read, validation, and write. The key component in OCC algorithms is the validation phase where the transaction's fate is determined.
Reference: [Lin90] <author> Yi Lin and Sang Son. </author> <title> "Concurrency control in real-time databases by dynamic adjustment of serialization order." </title> <booktitle> In Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems.
Reference: [Mena82] <author> D. Menasce and T. Nakanishi. </author> <title> "Optimistic versus pessimistic concurrency control mechanisms in database management systems." </title> <journal> Information Systems, </journal> <volume> 7(1), </volume> <year> 1982. </year>
Reference-contexts: Such a protocol called a concurrency control algorithm aims at insuring a consistent state of the database system, while allowing the maximum possible concurrency among transactions [Elma89]. Traditional concurrency control algorithms can be broadly classified as either pessimistic or optimistic <ref> [Mena82] </ref>. Pessimistic Concurrency Control (PCC) algorithms avoid any concurrent execution of transactions as soon as conflicts that might result in future inconsistencies are detected. <p> PCC two-phase locking algorithms do not suffer from this problem because they detect potential conflicts as they occur. They suffer, however, from the possibility of unnecessarily missing set deadlines as a result of unbounded waiting due to blocking. The Broadcast Commit variant (OCC-BC) of classical OCC <ref> [Mena82, Robi82] </ref> remedies this problem partially. When a transaction commits, it notifies those concurrently running transactions that conflict with it. Those transactions are immediately restarted.
Reference: [Robi82] <author> John Robinson. </author> <title> Design of Concurrency Controls for Transaction Processing Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1982. </year> <month> 14 </month>
Reference-contexts: PCC two-phase locking algorithms do not suffer from this problem because they detect potential conflicts as they occur. They suffer, however, from the possibility of unnecessarily missing set deadlines as a result of unbounded waiting due to blocking. The Broadcast Commit variant (OCC-BC) of classical OCC <ref> [Mena82, Robi82] </ref> remedies this problem partially. When a transaction commits, it notifies those concurrently running transactions that conflict with it. Those transactions are immediately restarted.
Reference: [Sha91] <author> Lui Sha, R. Rajkumar, Sang Son, and Chun-Hyon Chang. </author> <title> "A real-time locking protocol." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(7) </volume> <pages> 793-800, </pages> <year> 1991. </year>
Reference-contexts: These attempts have been successful in the sense that they improved the performance of the basic PCC and OCC algorithms in the context of real-time database management systems (RTDBMS). Most real-time concurrency control schemes considered in the literature are based on Two-Phase Locking (2PL) <ref> [Abbo88, Stan88, Huan90, Sha91] </ref> a PCC algorithm that has been well studied in traditional database management systems (DBMS).
Reference: [Son92] <author> S. Son, S. Park, and Y. Lin. </author> <title> "An integrated real-time locking protocol." </title> <booktitle> In Prooceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Tempe, AZ, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Despite its widespread use, 2PL has some properties (such as the possibility of deadlocks and/or long, unpredictable blocking times), which damage its appeal for RTDBMS, where in addition to preserving database consistency, strict timing constraints must be honored. Recently, some alternatives to 2PL for real-time systems have been proposed <ref> [Hari90b, Hari90a, Huan91, Kim91, Lin90, Son92] </ref>. A class of these concurrency control protocols is based on OCC, which due to its potential for a high degree of concurrency was expected to perform better than 2PL when integrated with priority-driven CPU scheduling in real-time database systems.
Reference: [Stan88] <author> John Stankovic and Wei Zhao. </author> <title> "On real-time transactions." </title> <journal> ACM, SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 4-18, </pages> <year> 1988. </year>
Reference-contexts: These attempts have been successful in the sense that they improved the performance of the basic PCC and OCC algorithms in the context of real-time database management systems (RTDBMS). Most real-time concurrency control schemes considered in the literature are based on Two-Phase Locking (2PL) <ref> [Abbo88, Stan88, Huan90, Sha91] </ref> a PCC algorithm that has been well studied in traditional database management systems (DBMS).
References-found: 20

