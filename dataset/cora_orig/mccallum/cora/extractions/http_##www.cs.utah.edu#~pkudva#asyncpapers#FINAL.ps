URL: http://www.cs.utah.edu/~pkudva/asyncpapers/FINAL.ps
Refering-URL: http://www.cs.utah.edu/~pkudva/diss.html
Root-URL: 
Title: SYNTHESIS OF ASYNCHRONOUS SYSTEMS TARGETING FINITE STATE MACHINES  
Author: by Prabhakar N. Kudva 
Degree: A dissertation submitted to the faculty of The University of Utah in partial fulfillment of the requirements for the degree of Doctor of Philosophy  
Date: December 1995  
Affiliation: Department of Computer Science The University of Utah  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Custom layout/Virtuoso LAS user's manual, cadence design systems, inc., </institution> <year> 1992. </year>
Reference-contexts: The Viewlogic synthesis tools are used to generate data paths and the complete ACK tool set is also encapsulated into the Viewlogic interface using the CAD Framework Initiative (CFI) encapsulation mechanism. This means that our tools can be run directly from the Viewlogic cockpit. LAS <ref> [1] </ref> in the Cadence tool set is used to automatically generate layouts for complex gates. The Lager tool set is used for place and route of standard cells for both the datapath and control (when implemented as AND/OR gates). Both commercial and public domain Verilog simulators have been used. <p> Results for Complex Gate Versus Standard Gate Implementations Circuit Name Output Complex gate (ns) Two-level gate (ns) chu-ad-opt dr 1.1 1.5 van-bek-ad-opt dr 0.9 1.3 lr 1.2 0.93 sendr-done DoneS 1.3 1.36 sbuf-read-ctl Ack 1.3 1.36 RamRdSbuf 0.97 1.53 q42 a4 0.94 1.56 circuits were then run through the LAS <ref> [1] </ref> layout synthesizer available with the Cadence tool-set, to obtain the layout of the circuits. The critical paths of these layouts taking into account the parasitics in the circuit were found.
Reference: [2] <author> Viewlogic user's guide, </author> <month> October </month> <year> 1994. </year>
Reference-contexts: If customized complex-gate implementations are synthesized, the Cadence layout tool LAS is used to generate automatic layout. For all other circuits, the Lager auto place and route tool Timberwolfe is used for layout of standard cell libraries. 7.1 Overview of the Tools Viewlogic <ref> [2] </ref> is a commercial electronic design automation (EDA) tool. The Viewlogic user interface is used for our tools as well. The user interface is shown in into the standard Viewlogic suite of tool boxes.
Reference: [3] <author> Ajmone Marsan, G. B., and Conte, G. </author> <title> Performance Models of Multiprocessor Systems. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: The following sketch of some of the relevant terminology and theorems of Markov Chain theory is presented here. A detailed discussion of the Discrete-Time Markov Chains and their relationship to stochastic Petri nets is described in <ref> [3, 70] </ref>. The strongly connected components of the state space (when viewed as a directed graph) are the classes of the Markov Chain. The condensed graph (one vertex for each class) is a directed acyclic graph with one root.
Reference: [4] <author> Akella, V. </author> <title> An Integrated Framework for the Automatic Synthesis of Efficient Self-Timed Circuits from Behavioral Specifications. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1992. </year>
Reference-contexts: In the case of asynchronous high level synthesis, similar compatibility and conflict graphs can be derived based on whether actions are serial or potentially concurrent (since resources for potentially concurrent actions cannot be shared). An algorithm called Concur <ref> [4, 5] </ref> has been used in previous works that detect seriality of actions in a concurrent high level specification, and the algorithm can be applied to our work, although for a different purpose.
Reference: [5] <author> Akella, V., and Gopalakrishnan, G. </author> <title> From Process-Oriented Functional Specifications to Efficient Asynchronous Circuits. </title> <booktitle> In Fifth International Conference on VLSI, </booktitle> <address> Bangalore, India (Jan. </address> <year> 1992). </year>
Reference-contexts: In the case of asynchronous high level synthesis, similar compatibility and conflict graphs can be derived based on whether actions are serial or potentially concurrent (since resources for potentially concurrent actions cannot be shared). An algorithm called Concur <ref> [4, 5] </ref> has been used in previous works that detect seriality of actions in a concurrent high level specification, and the algorithm can be applied to our work, although for a different purpose.
Reference: [6] <author> Akella, V., and Gopalakrishnan, G. SHILPA: </author> <title> A high-level synthesis system for self-timed circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 587-591. </pages>
Reference-contexts: The work of [118] uses Tangram descriptions to specify behavioral descriptions. This language is also a variant of CSP and the descriptions in this language are translated into handshake circuits, networks of elementary components that interact by handshake signaling. In <ref> [6] </ref>, behavioral descriptions are given in a language called hopCP which describes a set of sequential processes modeled as Petri nets that communicate through CSP style communication primitives as well as shared variables. The use of shared variables makes this technique different from the others discussed earlier. <p> The low-level design is implemented using specialized custom atomic elements along with simple atomic combinational gates. A quasi-delay-insensitive microprocessor was designed using this synthesis method. 20 In [46], CSP like specifications in Tangram are converted into handshake expansions to derive an asynchronous circuit. In <ref> [6] </ref>, the language hopCP is used that models communicating Petri net processes that communicate through channels as well as shared variables. These descriptions are then converted into macromodule based circuits. All the methods described above rely on syntax directed translation. <p> ACK is the tool framework to assist in this process. 21 Although there is no consensus on the requirements for a good HDL, based on extensive research in this area <ref> [6, 13, 64, 118] </ref>, some factors have emerged as important for asynchronous synthesis. These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog [114, 107] and VHDL [90, 7] have emerged as standards in the industry. <p> Our choice of timed Petri nets as the internal representation has the added advantage that we can later interface the performance analysis tool with the high level synthesis tool developed by our group <ref> [6] </ref>. 101 6.1 Key Contributions The main contribution of this chapter is to demonstrate that using an existing Generalized Timed Petri net (GTPN) model [43] it is possible to model a wide class of asynchronous circuits and systems in a uniform manner as well as to model arbitration, resource usage, hierarchical
Reference: [7] <author> Allen Dewey, A. J. D. </author> <title> VHDL:toward a unified view of design. </title> <booktitle> IEEE Design and Test (june 1992), </booktitle> <pages> 8-17. </pages>
Reference-contexts: These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog [114, 107] and VHDL <ref> [90, 7] </ref> have emerged as standards in the industry. Support for these languages is becoming an important factor in the acceptability of tools for VLSI design. To balance these factors, a language based on Petri nets that supports many of the required features in asynchronous design is defined. <p> They have exactly one input place and one output place. Note that there may be choices within the thread as long as the thread has exactly one input and one output place. * VHDL. VHSIC Hardware Description Language <ref> [90, 7] </ref>. A IEEE standard hardware description language. * VLSI. Very Large Scale Integration.
Reference: [8] <author> Beerel, P., and Meng, T.-Y. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (IC-CAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 581-587. </pages>
Reference-contexts: Many Signal Transition Graph (STG) based techniques guarantee hazard freeness by checking the properties of the graphs [20, 68]. Conditions for hazard free realizations of graph based speed independent designs are given in <ref> [8, 47] </ref>. 1.3.3 Controller Synthesis The work in synthesis of controller circuits broadly falls into two main categories, namely, (1) Petri net and graph based methods and (2) Asynchronous finite state machine (AFSM) based methods. 1.3.3.1 Petri Net and Graph Based Methods Most of the work in the Petri net and <p> Work in [68] presented an automatic synthesis algorithm based on this work, which transforms an STG into a series of Boolean equations implemented by a complex gate. In <ref> [8] </ref>, a method was proposed to generate speed-independent gate level realizations from a state-graph, where a state-graph is a data structure derived from an STG and was based on the work in [124]. <p> Implementations consist of combinational logic blocks and C-elements, where each combinational logic block is implemented out of simple unlimited-fanin AND and OR gates. Work in [60] assumes the same implementation as <ref> [8] </ref>, but starts from an STG instead of a state graph, reducing the complexity of the synthesis process and allowing larger circuits to be synthesized. More recently, in [47] conditions have been given to generate speed independent circuits from state graphs.
Reference: [9] <author> Beerel, P. A., Hsieh, C.-T., and Wadekar, S. </author> <title> Estimation of energy consumption in speed-independent control circuits. </title> <booktitle> In 1995 International Workshop on Low Power Design (Apr. </booktitle> <year> 1995). </year>
Reference-contexts: By self-timed circuits, in this case, it is meant that both the data path and the control path are self-timed. It has been shown <ref> [48, 9, 10] </ref> that these stochastic techniques can be extended both to power estimation as well as to other styles of control implementation styles such as burst mode as well as STG style control circuits. <p> The following remain open problems for future research. 115 * Although the technique described in this chapter is aimed at performance analysis, it has also been more recently successfully applied to power estima tion <ref> [48, 9, 10] </ref> of a wide class of asynchronous circuits. * Macromodule based circuits lend themselves very well to Petri net based analysis. <p> However, these analysis techniques have been applied to other classes of asynchronous circuits as well, such as e.g., burst-mode controllers [10] and STGs <ref> [9] </ref>. * Another possible source of inaccuracy in our current approach is the following.
Reference: [10] <author> Beerel, P. A., Yun, K., and Nowick, S. </author> <title> Estimation and bounding of energy consumption in burst mode circuits. </title> <booktitle> In 1995 International Conference on Computer Aided Design (Nov. </booktitle> <year> 1995). </year>
Reference-contexts: By self-timed circuits, in this case, it is meant that both the data path and the control path are self-timed. It has been shown <ref> [48, 9, 10] </ref> that these stochastic techniques can be extended both to power estimation as well as to other styles of control implementation styles such as burst mode as well as STG style control circuits. <p> The following remain open problems for future research. 115 * Although the technique described in this chapter is aimed at performance analysis, it has also been more recently successfully applied to power estima tion <ref> [48, 9, 10] </ref> of a wide class of asynchronous circuits. * Macromodule based circuits lend themselves very well to Petri net based analysis. <p> However, these analysis techniques have been applied to other classes of asynchronous circuits as well, such as e.g., burst-mode controllers <ref> [10] </ref> and STGs [9]. * Another possible source of inaccuracy in our current approach is the following.
Reference: [11] <author> Bredeson, J. G. </author> <title> Synthesis of multiple input-change hazard-free combinational switching circuits without feedback. </title> <journal> Int. Journal Electronics 39, </journal> <volume> 6 (1975), </volume> <pages> 615-624. </pages>
Reference-contexts: Therefore, obtaining hazard free logic is an important part of asynchronous logic synthesis. Hazard free logic minimization and technology mapping procedures are necessary. There are two basic classes of combinational hazards <ref> [12, 11, 117] </ref>: function and logic hazards. Function hazards are a property of the logic function and cannot be eliminated under unbounded gate and wire delay assumptions, whereas logic hazards are purely a property of the implementation. <p> This method extends the work of [80] for the first time into the realm of complex gate networks. * A technique to produce multilevel network, of such CMOS gates is described. This technique allows efficient solutions to a large class of asynchronous specifications. This method extends the work of <ref> [11] </ref> that targets multi-level AND/OR gate networks. * Techniques presented in this chapter allow designers the flexibility to efficiently perform hazard free mapping into customized complex gates instead of being confined to a standard library. 5.2 Terminology In this section we will provide definitions relating to pass transistor and CMOS logic <p> As the height of the stack increases to three we found that the complex gate implementations perform about the same as standard cell implementations after which complex gate circuits performed worse than gate-level circuits. This prompted an investigation of multilevel complex gate circuits. 90 5.4 Multilevel Implementations In <ref> [11] </ref> a technique was presented to derive single output multilevel gate circuits implemented using AND and OR gates. The algorithm assumes a fully specified function and attempts to eliminate hazards even for unspecified transitions leading to inefficient implementations. It also targets multilevel AND/OR gates. <p> Second, it does not take advantage of the static hazard robust behavior of SOP/SOP style CMOS implementations. Another technique that is an extension of work in <ref> [11] </ref> that deals with the above issues will be presented. The procedure will be presented in three steps. First, a model will be given for the multilevel complex gates we target. The procedure is then illustrated on an example.
Reference: [12] <author> Bredeson, J. G., and Hulina, P. T. </author> <title> Elimination of static and dynamic hazards for multiple input changes in combinational switching circuits. </title> <booktitle> Information and Control 20 (1972), </booktitle> <pages> 114-124. </pages>
Reference-contexts: Therefore, obtaining hazard free logic is an important part of asynchronous logic synthesis. Hazard free logic minimization and technology mapping procedures are necessary. There are two basic classes of combinational hazards <ref> [12, 11, 117] </ref>: function and logic hazards. Function hazards are a property of the logic function and cannot be eliminated under unbounded gate and wire delay assumptions, whereas logic hazards are purely a property of the implementation. <p> Within the class of logic hazards, there are single-input change (SIC) hazards and multiple-input-change (MIC) hazards. Additionally, each class of hazards (function and logic) includes both static and dynamic hazards. The following definitions from <ref> [12] </ref> describe the terms used. Definition 9 A transition cube is a cube with a start point and an end point. <p> In this chapter we will consider MIC logic hazards, i.e., we will assume that the given Boolean function is free of function hazards. It has been shown in <ref> [12] </ref> that it is impossible to realize a network for a Boolean function f which will eliminate possible multiple output changes for the input change ff to fi, if f has a function hazard for the input change assuming arbitrary gate and wire delays.
Reference: [13] <author> Brunvand, E. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year> <month> 141 </month>
Reference-contexts: One such class of circuits are quasi delay-insensitive circuits where "isochronic forks" are assumed. Various other methods to achieve delay-insensitive circuits have been researched. These methods usually build larger circuits using a collection of specialized modules to aid in the creation of delay-insensitive implementations <ref> [13, 28] </ref>. A speed-independent (SI) circuit is one that operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. Many controller synthesis styles based on Petri nets [91, 75] and state graphs derive circuits that are speed independent. <p> Most of these HDLs directly use or have been influenced by Communication Sequential Processes (CSP) [41] style process descriptions and communication primitives. Work in <ref> [13] </ref> uses Occam, a language based on CSP, to describe computation as a set of concurrent processes over fixed channels. The description is then synthesized into 15 delay-insensitive circuits. In [64], CSP with added communication primitives [62], is directly used to synthesize quasi-delay insensitive implementations. <p> Two frequently used communication protocols are two-phase and four-phase signaling. Two-phase transition signalling <ref> [66, 110, 13] </ref> uses transitions on event wires to communicate the request and acknowledge events described previously. <p> High level synthesis includes the steps of architectural synthesis and logic synthesis. Various researchers have used specialized modules to aid in the creation of delay-insensitive circuitry because of the difficulty of implementing DI designs in terms of single output gates [16, 63]. Work in <ref> [13] </ref> uses Occam for high level description and then compiles it into an implementation composed of delay-insensitive control units utilizing a two-phase handshake protocol and bundled data paths. Work in [28] uses a trace-theory based method for delay-insensitive design. <p> ACK is the tool framework to assist in this process. 21 Although there is no consensus on the requirements for a good HDL, based on extensive research in this area <ref> [6, 13, 64, 118] </ref>, some factors have emerged as important for asynchronous synthesis. These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog [114, 107] and VHDL [90, 7] have emerged as standards in the industry.
Reference: [14] <author> Brunvand, E. </author> <title> The NSR processor. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <publisher> Eds. </publisher>
Reference-contexts: In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends [23], high-performance cache memory subsystems [79], complex arbiter circuits [36], high performance arithmetic units [113], and decou-pled processors <ref> [31, 14] </ref> whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature. Arbitration for shared resources is an important concern in most of these systems. <p> The crossbar circuit considered here is the asynchronous version proposed in [36]. This example demonstrates the ability of GTPN to allow conditional (state dependent) probabilities. In Section 6.3.2, the analysis of the Nonsynchronous RISC (NSR) <ref> [14] </ref> self-timed processor architecture is presented. In the same section, we compare the performance estimated by the GTPN tool against actually measured performance figures from the NSR processor's Actel FPGA circuit, and point out that these measurements track each other, thereby justifying our approach.
Reference: [15] <author> Bryant, R. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers C-35, </journal> <month> 8 (Aug. </month> <year> 1986), </year> <pages> 677-691. </pages>
Reference-contexts: The work also provides algorithms and supporting tools to make this possible. APPENDIX GLOSSARY * ACK. Asynchronous Circuit Kompiler, a framework for asynchronous circuit synthesis described in this dissertation. * BDD. A Boolean Decision Diagram. Algorithms for manipulating canonical representations for BDDs have been provided by <ref> [15] </ref>. * CAD. Computer Aided Design. * CFI. CAD Framework Initiative. A group of electronic design automation companies that set standards to allow common interfaces for designers who want to use different tools. * CMOS. Complementary Metal Oxide Semiconductor.
Reference: [16] <author> Brzozowski, J., and Ebergen, J. C. </author> <title> Recent developments in the design of asynchronous circuits. </title> <type> Tech. Rep. </type> <institution> CS-89-18, Department of Computer Science, University of Waterloo, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: High level synthesis includes the steps of architectural synthesis and logic synthesis. Various researchers have used specialized modules to aid in the creation of delay-insensitive circuitry because of the difficulty of implementing DI designs in terms of single output gates <ref> [16, 63] </ref>. Work in [13] uses Occam for high level description and then compiles it into an implementation composed of delay-insensitive control units utilizing a two-phase handshake protocol and bundled data paths. Work in [28] uses a trace-theory based method for delay-insensitive design.
Reference: [17] <author> Burns, S. </author> <title> Performance evaluation of asynchronous circuits. </title> <type> Tech. Rep. </type> <institution> TR-91-1, Computer Science Dept., California Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: Timed Petri nets can model systems with these characteristics, and therefore are central to our approach. 100 Asynchronous circuit performance analysis has been conducted at an analytical level by <ref> [105, 125, 17] </ref>. Their work is primarily concerned with the study of asynchronous pipelines. They do not consider data dependent behaviors, arbitration, or resource usages. Petri nets have been widely used for studying asynchronous computations [75] as well as for modeling and synthesizing synchronous [89] and asynchronous circuits. <p> In the first category, decision-free Petri net structures are used to model computations [96] whereas in the second category, Petri nets with decisions (or "choices") are allowed [134, 43]. Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams <ref> [17, 125] </ref>. These authors model the computation as a constraint-graph and solve performance equations using linear programming techniques.
Reference: [18] <author> Burns, S. M., and Martin, A. J. </author> <title> Syntax-directed translation of concurrent programs into self-timed circuits. </title> <booktitle> In Proceedings of the Fifth MIT Conference on Advanced Research in VLSI (1988), </booktitle> <editor> J. Allen and F. Leighton, Eds., </editor> <publisher> MIT Press, </publisher> <pages> pp. 35-50. </pages>
Reference-contexts: Various forms of partitioning have also been used in asynchronous synthesis such as process decomposition <ref> [18, 64] </ref>, contraction [20, 94], and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. <p> Work in [28] uses a trace-theory based method for delay-insensitive design. A delay-insensitive circuit is generated from a regular-expression like syntax into an implementation composed of basic elements such as toggles, sequencers and C-elements. In <ref> [18] </ref>, an automatic synthesis procedure was developed for quasi-delay-insensitive designs that takes a design described in CSP and automatically synthesizes equations implementing the circuit. The low-level design is implemented using specialized custom atomic elements along with simple atomic combinational gates.
Reference: [19] <author> Camposano, R., and Wolf, W. </author> <title> High Level VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: that of using two-phase transition signaling protocol, pipelined organization of the computation, the use of a basic set of delay insensitive library modules to implement control, and self-timed bundled data paths. 1.4.5 Scheduling and Allocation A great deal of research effort in synchronous design synthesis is spent on scheduling algorithms <ref> [19, 35, 69] </ref>. Unlike synchronous circuits, the concern of scheduling in asynchronous circuits is different as one does not have to schedule actions into clock cycles. <p> Since synchronous clocks couple the computation- and physical-time, performance evaluation in the area of synchronous system design is almost always carried out in terms of the clock cycle time <ref> [19, 39] </ref>. Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult.
Reference: [20] <author> Chu, T.-A. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph Theoretic Specifications. </title> <type> PhD thesis, </type> <institution> Department of EECS, Massachusetts Institute of Technology, </institution> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Other techniques have been presented to make circuits hazard free. In [55] hazard free realizations are obtained by added delays as required to make the circuit hazard free. Many Signal Transition Graph (STG) based techniques guarantee hazard freeness by checking the properties of the graphs <ref> [20, 68] </ref>. <p> The use of STGs to model asynchronous circuits was introduced independently in <ref> [98, 20] </ref>. In [20], an approach was presented for synthesizing speed-independent control circuits from STGs. An STG is a form of an interpreted Petri net, where 10 transitions on a net correspond to polarized signal transitions in a control circuit. <p> The use of STGs to model asynchronous circuits was introduced independently in [98, 20]. In <ref> [20] </ref>, an approach was presented for synthesizing speed-independent control circuits from STGs. An STG is a form of an interpreted Petri net, where 10 transitions on a net correspond to polarized signal transitions in a control circuit. <p> Various forms of partitioning have also been used in asynchronous synthesis such as process decomposition [18, 64], contraction <ref> [20, 94] </ref>, and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. Contraction [20, 94] has been suggested as a partitioning technique for STG specifications. <p> have also been used in asynchronous synthesis such as process decomposition [18, 64], contraction <ref> [20, 94] </ref>, and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. Contraction [20, 94] has been suggested as a partitioning technique for STG specifications. In this method, output partitioning is performed on the specification before state encoding, as against output partitioning after encoding, as is done in techniques that do not use contraction. <p> Sum of Products/Sum of Products. A style of CMOS circuit design where both the top and bottom pass networks are implemented as series parallel transistor networks. Details in Chapter 5. 139 * STG. Signal Transition Graphs, first proposed in <ref> [20] </ref>. A restricted form of Petri nets with signal transitions with polarities associated with Petri net transitions. Used for specification and synthesis of asynchronous controllers. * STS graphs. Single Threaded Subgraphs are Petri net snippets that have only input and output burst concurrency.
Reference: [21] <author> Coates, B., Davis, A., and Stevens, K. </author> <title> The Post Office experience: Designing a large asynchronous chip. Integration, </title> <journal> the VLSI journal 15, </journal> <month> 3 (Oct. </month> <year> 1993), </year> <pages> 341-366. </pages>
Reference-contexts: A few notable ones will be mentioned. The design of the asynchronous microprocessor family [34, 33, 32] consisting of processors such as AMULET1 and especially the AMULET1e developed at Manchester has demonstrated some of 4 the performance and low power benefits of using asynchronous circuits. The Post Office chip <ref> [23, 21] </ref> and the synthesis of a receiver for an Infrared Communications Protocol [61] have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs.
Reference: [22] <author> Davis, A., Coates, B., and Stevens, K. </author> <title> Automatic synthesis of fast compact asynchronous control circuits. In Asynchronous Design Methodologies (1993), </title> <editor> S. Furber and M. Edwards, Eds., </editor> <volume> vol. </volume> <booktitle> A-28 of IFIP Transactions, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 193-207. </pages>
Reference-contexts: However, this method involved the use of inertial delay elements, that are not reliable and also slow down 11 circuit operation. An extension to fundamental mode that allowed an extended form of multiple-input changes to the state machine was the burst-mode style <ref> [22] </ref> of operation of the Huffman style machines. Burst mode machines were described in [22]. A formal description of burst-mode specification style and synthesis methods were given in [81] and later extended in [130]. In this section the burst mode specification style used in this work will be reviewed. <p> An extension to fundamental mode that allowed an extended form of multiple-input changes to the state machine was the burst-mode style <ref> [22] </ref> of operation of the Huffman style machines. Burst mode machines were described in [22]. A formal description of burst-mode specification style and synthesis methods were given in [81] and later extended in [130]. In this section the burst mode specification style used in this work will be reviewed. More details can be found in [81].
Reference: [23] <author> Davis, A., Coates, B., and Stevens, K. </author> <title> The Post Office Experience: Designing a Large Asynchronous Chip. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <booktitle> Eds., </booktitle> <pages> pp. 409-418. </pages> <note> [24] de Jong, </note> <author> G., and Lin, B. </author> <title> A communicating petri net model for the design of concurrent asynchronous modules. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 49-55. </pages>
Reference-contexts: A few notable ones will be mentioned. The design of the asynchronous microprocessor family [34, 33, 32] consisting of processors such as AMULET1 and especially the AMULET1e developed at Manchester has demonstrated some of 4 the performance and low power benefits of using asynchronous circuits. The Post Office chip <ref> [23, 21] </ref> and the synthesis of a receiver for an Infrared Communications Protocol [61] have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs. <p> Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers <ref> [23, 108] </ref>. There are several reasons for considering custom CMOS complex-gate based circuits. As VLSI feature sizes decrease and wire delays become significant, customized CMOS complex-gates may provide more efficient controller implementations compared to those obtained through standard-cell place and route tools. <p> Whenever quiescent, the network corresponding to the I-net must first await a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [23, 81] </ref>) to arrive in any order. After absorbing the input-burst, the network corresponding to the I-net should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [23, 81]) in any order. <p> or more high-going or low-going input signal transitions (i.e., an input burst <ref> [23, 81] </ref>) to arrive in any order. After absorbing the input-burst, the network corresponding to the I-net should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [23, 81]) in any order. This mode of interaction between the network and its environment is called the burst-mode behavior, which is a generalization of fundamental-mode [117] operation. Consider the simple example of such a conversion procedure given in Figure 4.1. <p> Techniques for obtaining encoded state graphs have been given in [106]. Finally, the EISG is converted into a burst-mode machine using our algorithm burst-mode reduction (detailed later), and the resulting burst-mode machine is synthesized using an existing tool (e.g., see <ref> [85, 132, 23] </ref>). The algorithm for 65 66 67 burst-mode reduction from EISG traverses a path of the state graph starting from the starting state, collecting input transitions into a set called an input-burst, until it encounters a state that has only arcs labeled by output signal transitions exiting it. <p> In addition, the problem of obtaining a multilevel network of such CMOS gates will also be considered. Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman mode asynchronous controllers <ref> [23, 108] </ref>, although a systematic analysis and synthesis methodology for deriving these have not been previously given. There are several reasons for considering customized CMOS complex gate based circuits. <p> Technology mapping techniques to perform hazard nonincreasing mapping of two-level AND-OR networks into complex gate networks from a standard cell library have been given in [104]. Other technology mapping techniques have implemented Boolean functions as single gate hazard free CMOS complex gate circuits <ref> [108, 23] </ref>, where the Boolean function is implemented as a single gate, i.e., as a network of p and n channel transistors. However, no systematic procedure to derive such CMOS gates has been outlined. <p> Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult. In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends <ref> [23] </ref>, high-performance cache memory subsystems [79], complex arbiter circuits [36], high performance arithmetic units [113], and decou-pled processors [31, 14] whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature.
Reference: [25] <author> Dean, M., Williams, T., and Dill, D. </author> <title> Efficient self-timing with level-encoded 2-phase dual-rail (LEDR). </title> <booktitle> In Advanced Research in VLSI: Proceedings of the 1991 UC Santa Cruz Conference (1991), </booktitle> <editor> C. H. Sequin, Ed., </editor> <publisher> MIT Press, </publisher> <pages> pp. 55-70. </pages>
Reference-contexts: The use of delay matching can cause loss of performance due to the pessimistic delay used. Methods developed to perform completion sensing and take advantage of average case delay have been proposed. Examples of these are standard dual-rail [118] methods, Level Encoded Dual Rail (LEDR) <ref> [25] </ref>. and current sensing [25]. 17 1.4.3 Handshake Protocols Handshake protocols for asynchronous circuits are often defined in terms of a pair of signals that request an action, and acknowledge that the requested action has been completed. Two frequently used communication protocols are two-phase and four-phase signaling. <p> The use of delay matching can cause loss of performance due to the pessimistic delay used. Methods developed to perform completion sensing and take advantage of average case delay have been proposed. Examples of these are standard dual-rail [118] methods, Level Encoded Dual Rail (LEDR) <ref> [25] </ref>. and current sensing [25]. 17 1.4.3 Handshake Protocols Handshake protocols for asynchronous circuits are often defined in terms of a pair of signals that request an action, and acknowledge that the requested action has been completed. Two frequently used communication protocols are two-phase and four-phase signaling.
Reference: [26] <author> Dean, M. E. </author> <title> STRiP: A Self-Timed RISC Processor Architecture. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1992. </year> <month> 142 </month>
Reference-contexts: In Figure 2.5, the delay line that is associated with the DB logic models the datapath delay. This is usually done by modeling the critical path delay of the logic in the block <ref> [26] </ref>. PB implements data-dependent control flow, e.g., conditional branches.
Reference: [27] <author> Dutt, N., and Ramachandran, C. </author> <title> 1992 high level synthesis design repository. </title> <type> Tech. Rep. 92-107, </type> <institution> University of California, Irvine, </institution> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: In Table 7.1 we present examples synthesized with both two and four phase protocols. The experimental designs in the table include a factorial computation unit, a pipelined version of the same, a differential equation solver from <ref> [27] </ref>, the Barcode reader from [86] and some smaller examples that we used in order to get an understanding of how two and four phase implementations differ in terms of performance and area for different types of high level descriptions. 129 Table 7.1.
Reference: [28] <author> Ebergen, J. C. </author> <title> Translating Programs into Delay-Insensitive Circuits, </title> <type> vol. </type> <institution> 56 of CWI Tract. Centre for Mathematics and Computer Science, </institution> <year> 1989. </year>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> One such class of circuits are quasi delay-insensitive circuits where "isochronic forks" are assumed. Various other methods to achieve delay-insensitive circuits have been researched. These methods usually build larger circuits using a collection of specialized modules to aid in the creation of delay-insensitive implementations <ref> [13, 28] </ref>. A speed-independent (SI) circuit is one that operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. Many controller synthesis styles based on Petri nets [91, 75] and state graphs derive circuits that are speed independent. <p> This requirement is usually satisfied by using additional macromodules such as Toggles [110] and/or Decision-waits <ref> [28] </ref> that are used to steer the global input to the right subcontroller. In order to provide this translation of inputs we have to rely on a standard available library of such elements (such as toggle elements). <p> Work in [13] uses Occam for high level description and then compiles it into an implementation composed of delay-insensitive control units utilizing a two-phase handshake protocol and bundled data paths. Work in <ref> [28] </ref> uses a trace-theory based method for delay-insensitive design. A delay-insensitive circuit is generated from a regular-expression like syntax into an implementation composed of basic elements such as toggles, sequencers and C-elements.
Reference: [29] <author> Eichelberger, E. B. </author> <title> Hazard detection in combinational and sequential switching circuits. </title> <journal> IBM Journal of Research and Development 9 (Mar. </journal> <year> 1965), </year> <pages> 90-99. </pages>
Reference-contexts: Consider function F making a 0 ! 0 transition, in sum of product implementation of F, such a transition does not cause a change in the p pass network implementing F, since a sum of products implementation of F does not have any 0 ! 0 hazards <ref> [29, 117] </ref>, and therefore its output stays at Z. The transition may cause a 0-Z-0 transition in the n pass network implementing F'. During this period the output is unaffected.
Reference: [30] <author> Fuhrer, R., Lin, B., and Nowick, S. M. </author> <title> Algorithms for the optimal state assignment of asynchronous state machines. </title> <booktitle> In Proceedings of Advanced Research in VLSI (1995). </booktitle>
Reference-contexts: There is a body of work that deals with cascade and serial optimal state machine decomposition [112]. These methods do not guarantee optimal decomposition. Early work in huffman-style state machine decomposition and more recent research in optimal state assignment <ref> [30] </ref> and logic minimization can be used as starting points for this effort. 135 8.2.3 Synthesis of Complex Gates Some open problems in the synthesis of complex gates are given below. * First, one could develop a technique that can take advantage of the properties of complex gate to guarantee hazard-free
Reference: [31] <author> Furber, S. </author> <title> Lectures on the Asynchronous ARM Processor given at the VII Banff Workshop on "Asynchronous Hardware Design", </title> <address> Banff, Canada, </address> <note> August 28-September 3, 1993. (Organizer: Graham Birtwistle). </note>
Reference-contexts: In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends [23], high-performance cache memory subsystems [79], complex arbiter circuits [36], high performance arithmetic units [113], and decou-pled processors <ref> [31, 14] </ref> whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature. Arbitration for shared resources is an important concern in most of these systems.
Reference: [32] <author> Furber, S. </author> <title> Computing without clocks: Micropipelining the ARM processor. </title> <booktitle> In Proceedings Banff VIII Workshop: Asynchronous Digital Circuit Design (1995), </booktitle> <editor> G. Birtwistle and A. Davis, Eds., </editor> <booktitle> Workshops in Computing, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The basics of asynchronous design will be briefly reviewed. 1.2 Asynchronous Design Even though asynchronous design research is still addressing basic issues, actual circuit designs have demonstrated some of the possible advantages of asynchronous circuits. A few notable ones will be mentioned. The design of the asynchronous microprocessor family <ref> [34, 33, 32] </ref> consisting of processors such as AMULET1 and especially the AMULET1e developed at Manchester has demonstrated some of 4 the performance and low power benefits of using asynchronous circuits.
Reference: [33] <author> Furber, S. B., Day, P., Garside, J. D., Paver, N. C., Temple, S., and Woods, J. V. </author> <title> The design and evaluation of an asynchronous microprocessor. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. </booktitle> <year> 1994). </year>
Reference-contexts: The basics of asynchronous design will be briefly reviewed. 1.2 Asynchronous Design Even though asynchronous design research is still addressing basic issues, actual circuit designs have demonstrated some of the possible advantages of asynchronous circuits. A few notable ones will be mentioned. The design of the asynchronous microprocessor family <ref> [34, 33, 32] </ref> consisting of processors such as AMULET1 and especially the AMULET1e developed at Manchester has demonstrated some of 4 the performance and low power benefits of using asynchronous circuits.
Reference: [34] <author> Furber, S. B., Day, P., Garside, J. D., Paver, N. C., and Woods, J. V. AMULET1: </author> <title> A micropipelined ARM. </title> <booktitle> In Proceedings IEEE Computer Conference (Mar. </booktitle> <year> 1994). </year>
Reference-contexts: The basics of asynchronous design will be briefly reviewed. 1.2 Asynchronous Design Even though asynchronous design research is still addressing basic issues, actual circuit designs have demonstrated some of the possible advantages of asynchronous circuits. A few notable ones will be mentioned. The design of the asynchronous microprocessor family <ref> [34, 33, 32] </ref> consisting of processors such as AMULET1 and especially the AMULET1e developed at Manchester has demonstrated some of 4 the performance and low power benefits of using asynchronous circuits.
Reference: [35] <author> Gajski, D., Dutt, N., Wu, A., and Lin, S. </author> <title> High-Level Synthesis; Introduction to Chip and System Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1992. </year> <note> ISBN 0-7923-9194-2. </note>
Reference-contexts: that of using two-phase transition signaling protocol, pipelined organization of the computation, the use of a basic set of delay insensitive library modules to implement control, and self-timed bundled data paths. 1.4.5 Scheduling and Allocation A great deal of research effort in synchronous design synthesis is spent on scheduling algorithms <ref> [19, 35, 69] </ref>. Unlike synchronous circuits, the concern of scheduling in asynchronous circuits is different as one does not have to schedule actions into clock cycles.
Reference: [36] <author> Gopalakrishnan, G. </author> <title> Micropipeline wavefront arbiters using lockable c-elements. </title> <journal> IEEE Design and Test of Computers (1994). Special Issue on Asynchronous Systems, </journal> <month> Fall </month> <year> 1994. </year>
Reference-contexts: Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult. In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends [23], high-performance cache memory subsystems [79], complex arbiter circuits <ref> [36] </ref>, high performance arithmetic units [113], and decou-pled processors [31, 14] whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature. Arbitration for shared resources is an important concern in most of these systems. <p> In Section 6.3.1, we present the analysis of a symmetric crossbar arbiter [111]. Arbiters are control intensive circuits whose performance is critical to the overall performance of the asynchronous 107 system using them. The crossbar circuit considered here is the asynchronous version proposed in <ref> [36] </ref>. This example demonstrates the ability of GTPN to allow conditional (state dependent) probabilities. In Section 6.3.2, the analysis of the Nonsynchronous RISC (NSR) [14] self-timed processor architecture is presented. <p> The problem faced by a crossbar arbiter is to select, from among the queued up requests, the maximum number of requests that will not conflict on a row or a column. For our example, the maximum number of switch connections are achieved by closing (2,1), (1,3), and (4,2). In <ref> [36] </ref>, a crossbar arbiter, called a wavefront arbiter, has been proposed. In a wavefront arbiter, a diagonal wavefront travels from the top-left corner to the bottom-right corner, sequentially examining pending requests. <p> The Petri net for the wavefront arbiter described in the last paragraph is given in Figure 6.3. Each location of this arbiter is realized using a component called the lock-c <ref> [36] </ref>, which is a Muller c-element that can be asynchronously locked. According to the figure, when a and b arrive, the lock-c element gets enabled. While in the enabled state, the l input ("lock") can arrive, thus postponing the 108 109 firing of c.
Reference: [37] <author> Gopalakrishnan, G., and Akella, V. </author> <title> High-level optimizations in compiling process descriptions to asynchronous circuits. </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> 7 (1994), </volume> <pages> 33-45. </pages> <note> Special issue on Asynchronous Circuits and Systems. </note>
Reference-contexts: The use of shared variables makes this technique different from the others discussed earlier. A synthesis system called SHILPA was presented in <ref> [37] </ref>. 1.4.2 Datapath and Completion Sensing Traditional clocked synchronous systems are an example of one particular structure applied to circuit design to facilitate design and debugging: signals are latched into various registers on edges of the clock signal. <p> An algorithm called Concur [4, 5] has been used in previous works that detect seriality of actions in a concurrent high level specification, and the algorithm can be applied to our work, although for a different purpose. The Concur algorithm was primarily used to detect access to shared variables <ref> [37] </ref>. 2.5 Summary In this chapter, a Petri net based language to represent asynchronous behavioral descriptions has been presented. It has been demonstrated how a specification in this language can also be described using Verilog, therefore providing a standard language interface to our synthesis method.
Reference: [38] <author> Gopalakrishnan, G. C., Kudva, P., Brunvand, E. L., and Akella, V. </author> <title> Peephole optimization of asynchronous macromodule networks. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD) (1994), </booktitle> <pages> pp. 442-446. </pages>
Reference-contexts: Synthesis from Petri nets with event annotations (known as I-nets) was first suggested in [106] and extended to derive burst mode circuit implementations in <ref> [38] </ref>. The technique used in these works was to derive state graphs (interface state graphs) to completely enumerate all possible behaviors of the specification and obtain a single implementation that satisfies these behaviors. These techniques were mostly suitable for deriving smaller single centralized controllers for the specifications. <p> In order for SFJ graphs to be translated into burst-mode machines, a few additional restrictions are necessary. The first three are necessary to generate legal [84] burst-mode machines, and the last is required by burst-mode reduction <ref> [38] </ref>: * An SFJ graph must be initially quiescent, and attain quiescence infinitely often. <p> An example of synthesized AND/OR logic from a burst mode specification is shown in Figure 4.10. 4.5 Summary In this chapter, a two-phase controller to burst-mode reduction method is presented <ref> [38] </ref>. This method can be applied to all I-nets obtained in our synthesis procedure. Limitations of this method are as follows. <p> In practice, we have found that most specifications do not run into this problem. The methods presented have also been applied to the peephole optimization of asynchronous macromodule networks <ref> [38] </ref>. A four-phase controller to burst-mode reduction method is also presented. Reshu*ing optimizations for four-phase synthesis are incorporated into the four-phase method. Synthesis of the generated burst-mode descriptions using existing methods is briefly discussed.
Reference: [39] <author> Hennessy, J., and Patterson, D. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: Since synchronous clocks couple the computation- and physical-time, performance evaluation in the area of synchronous system design is almost always carried out in terms of the clock cycle time <ref> [19, 39] </ref>. Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult.
Reference: [40] <author> Henrik Hulgaard, Steven M Burns, T. A., and Boriello, G. </author> <title> An algorithm for exact bounds on the time separation of events in concurrent systems. </title> <type> Tech. Rep. </type> <institution> UW-CSE-94-02-02, Department of Computer Science, University of Washington, </institution> <year> 1994. </year> <month> 143 </month>
Reference-contexts: Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams [17, 125]. These authors model the computation as a constraint-graph and solve performance equations using linear programming techniques. Hulgaard et al. <ref> [40] </ref> adapt the work by Burns and provide an algorithm to find exact bounds on the time separation of events in a process graph without conditional behavior that serves as a basis for evaluation during time constrained synthesis or design.
Reference: [41] <author> Hoare, C. A. R. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: These issues in the context of asynchronous circuit synthesis will be discussed. 1.4.1 Hardware Description Languages (HDLs) Many HDLs have been used for architectural synthesis of asynchronous circuits. Most of these HDLs directly use or have been influenced by Communication Sequential Processes (CSP) <ref> [41] </ref> style process descriptions and communication primitives. Work in [13] uses Occam, a language based on CSP, to describe computation as a set of concurrent processes over fixed channels. The description is then synthesized into 15 delay-insensitive circuits. <p> Complementary Metal Oxide Semiconductor. Circuit design style which uses P and N transistor networks that implement complementary func tions in a single gate [67]. * CSP. Communicating Sequential Processes <ref> [41] </ref> is a formalism to model con current systems. * DB. Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit. One that operates correctly according to its specification when modeled with unbounded wire delay [64, 55].
Reference: [42] <author> Holliday, M., and Vernon, M. </author> <title> The GTPN analyzer: Numerical methods and user interface. </title> <journal> IEEE Comp Soc. </journal> <note> 1986 Fall Joint Computer Conference (Nov. </note> <year> 1986). </year>
Reference-contexts: For 105 techniques to find these characteristics, readers are referred to <ref> [42] </ref>. Once absorbed in a particular recurrent class, the long-run [56] probability distribution over the states in the recurrent class needs to be computed. <p> Both P ij and P i are obtained from the underlying state graph of the timed Petri net <ref> [42] </ref>.
Reference: [43] <author> Holliday, M., and Vernon, M. </author> <title> A generalized timed petri net model for performance analysis. </title> <journal> IEEE Transactions on Software Engineering 13 (Dec. </journal> <year> 1987), </year> <pages> 1297-1310. </pages>
Reference-contexts: Basically one can observe two categories of works in this area. In the first category, decision-free Petri net structures are used to model computations [96] whereas in the second category, Petri nets with decisions (or "choices") are allowed <ref> [134, 43] </ref>. Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams [17, 125]. These authors model the computation as a constraint-graph and solve performance equations using linear programming techniques. <p> the internal representation has the added advantage that we can later interface the performance analysis tool with the high level synthesis tool developed by our group [6]. 101 6.1 Key Contributions The main contribution of this chapter is to demonstrate that using an existing Generalized Timed Petri net (GTPN) model <ref> [43] </ref> it is possible to model a wide class of asynchronous circuits and systems in a uniform manner as well as to model arbitration, resource usage, hierarchical circuits, and thereby make insightful observations about factors that determine the performance of asynchronous circuits. 6.2 Timed Petri Nets In this section, we first <p> We describe existing means for analysis of the Petri nets, and how they are adapted and extended for our purposes. A GTPN <ref> [43] </ref> is a Petri net that has been augmented to include a set of firing durations (D), a set of firing frequencies (F ), and a possibly empty set of resources (R) associated with each transition. <p> The frequencies, F , associated with each transition are used in assigning probabilities to the next state of the Petri net. The detailed GTPN semantics can be found in <ref> [43] </ref>. 6.2.1 Modeling of Delay and Firing Frequencies In our approach, the delays in the circuits are modeled by the firing durations (D) of the transitions in the Petri nets. These delays can be obtained from a library, through experiments, or through known timing estimation techniques. In given. <p> All other transitions are assumed to have a firing frequency of 1. 104 6.2.2 Background on the GTPN Analysis Techniques We present below a quick overview of the GTPN analysis techniques from <ref> [43] </ref>, for the sake of completeness. The following sketch of some of the relevant terminology and theorems of Markov Chain theory is presented here. A detailed discussion of the Discrete-Time Markov Chains and their relationship to stochastic Petri nets is described in [3, 70]. <p> Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits. Proposed in [106]. * GTPN. Generalized Timed Petri Net. A Petri net formalism used for stochastic performance analysis <ref> [43] </ref>. * HDL. Hardware Description Languages. Usually used to describe hardware at various levels of abstraction. Examples are behavior level and register transfer level modeling using languages such as Verilog and VHDL. * MIC. Multiple-input change: Model for an environment that presents inputs to a logic circuit.
Reference: [44] <author> Holliday, M., and Vernon, M. </author> <title> A generalized timed petri net model for performance analysis. </title> <journal> IEEE Transactions on Software Engineering 13 (Dec. </journal> <year> 1987), </year> <pages> 1297-1310. </pages>
Reference-contexts: In addition to converting a Viewlogic gate level schematic into layout using the ITD cell library, it also allows us to place and route custom cells which in our case are asynchronous standard cells such as C elements and Select elements. GTPN <ref> [44] </ref> is a tool used for performance analysis of high level Petri net descriptions. The GTPN tool allows Petri net descriptions with transition probability and delay information for each transition. In addition resource usage during each transition can be provided.
Reference: [45] <author> Huffman, D. A. </author> <title> The synthesis of sequential switching circuits. In Sequential Machines: Selected Papers, </title> <editor> E. F. Moore, Ed. </editor> <publisher> Addison-Wesley, </publisher> <year> 1964. </year>
Reference-contexts: They are assumed to operate in fundamental mode. Originally intended to operate only under single input change operation in <ref> [45] </ref>, a method was suggested to extend these machines to allow multiple-input changes [117]. However, this method involved the use of inertial delay elements, that are not reliable and also slow down 11 circuit operation.
Reference: [46] <author> Kessels, J., van Berkel, K., Burgess, R., Roncken, M., and Schalij, F. </author> <title> An error decoder for the compact disc player as an example of VLSI programming. </title> <type> Tech. rep., </type> <institution> Philips Research Laboratories, Eindhoven, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: The low-level design is implemented using specialized custom atomic elements along with simple atomic combinational gates. A quasi-delay-insensitive microprocessor was designed using this synthesis method. 20 In <ref> [46] </ref>, CSP like specifications in Tangram are converted into handshake expansions to derive an asynchronous circuit. In [6], the language hopCP is used that models communicating Petri net processes that communicate through channels as well as shared variables. These descriptions are then converted into macromodule based circuits. <p> Note that this example does not illustrate some abilities of the input description language such as fork-joins and signal transitions. A complete discussion of the input description language is given in [49]. The high level description given in the example, translated from the original Tangram specification in <ref> [46] </ref> gives an error detector of a compact disc player. In this section we will focus on the behavioral description of such an error detector. The description given in Figure 2.3 consists of a single process. <p> The speed of our circuit in 2.0 micron CMOS technology was calculated in a similar manner and came to 140 ns per step for worst case temperature and voltage. Using an conservative technology vs. performance scaling factor of 2.0 <ref> [46] </ref>, the performance of our circuit could be about 70ns for a 1.2 micron technology. Our performance gains seem mainly due to the efficient controllers that we use, although some points are worthy of note in this example.
Reference: [47] <author> Kondratyev, A., Kishinevsky, M., Lin, B., Vanbekbergen, P., and Yakovlev, A. </author> <title> Basic gate implementation of speed-independendent circuits. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 56-62. </pages>
Reference-contexts: Many Signal Transition Graph (STG) based techniques guarantee hazard freeness by checking the properties of the graphs [20, 68]. Conditions for hazard free realizations of graph based speed independent designs are given in <ref> [8, 47] </ref>. 1.3.3 Controller Synthesis The work in synthesis of controller circuits broadly falls into two main categories, namely, (1) Petri net and graph based methods and (2) Asynchronous finite state machine (AFSM) based methods. 1.3.3.1 Petri Net and Graph Based Methods Most of the work in the Petri net and <p> Work in [60] assumes the same implementation as [8], but starts from an STG instead of a state graph, reducing the complexity of the synthesis process and allowing larger circuits to be synthesized. More recently, in <ref> [47] </ref> conditions have been given to generate speed independent circuits from state graphs. Work in [87] has shown that some of these conditions can be relaxed by using the hazard free technology mapping techniques of [103]. Synthesis of timed graphs called event rule systems have also been researched [77].
Reference: [48] <author> Kudva, P., and Akella, V. </author> <title> A technique for estimating power in self-timed asynchronous circuits. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems (Nov. </booktitle> <year> 1994), </year> <pages> pp. 166-175. </pages>
Reference-contexts: By self-timed circuits, in this case, it is meant that both the data path and the control path are self-timed. It has been shown <ref> [48, 9, 10] </ref> that these stochastic techniques can be extended both to power estimation as well as to other styles of control implementation styles such as burst mode as well as STG style control circuits. <p> The following remain open problems for future research. 115 * Although the technique described in this chapter is aimed at performance analysis, it has also been more recently successfully applied to power estima tion <ref> [48, 9, 10] </ref> of a wide class of asynchronous circuits. * Macromodule based circuits lend themselves very well to Petri net based analysis.
Reference: [49] <author> Kudva, P., Gopalakrishnan, G., and Akella, V. </author> <title> An asynchronous high level synthesis system targeted at interacting burst-mode controllers. </title> <booktitle> In International Conference on Hardware Description Languages (CHDL) (1995). </booktitle>
Reference-contexts: Note that this example does not illustrate some abilities of the input description language such as fork-joins and signal transitions. A complete discussion of the input description language is given in <ref> [49] </ref>. The high level description given in the example, translated from the original Tangram specification in [46] gives an error detector of a compact disc player. In this section we will focus on the behavioral description of such an error detector.
Reference: [50] <author> Kudva, P., and Gopalakrishnan, G. C. </author> <title> Synthesis of distributed burst mode circuits. </title> <booktitle> In Participants Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (1995). </booktitle>
Reference-contexts: Methods have been presented for both two-phase and four-phase protocol based synthesis methods. Although this method has been presented in the context of our synthesis method <ref> [50] </ref>, it is clear that can be the basis for any partitioning method involving Table 3.3.
Reference: [51] <author> Kudva, P., Gopalakrishnan, G. C., and Brunvand, E. L. </author> <title> Performance analysis and optimization for asynchronous circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD) (1994), </booktitle> <pages> pp. 221-225. </pages>
Reference-contexts: This Petri net format can, of course, be used directly as an input language if desired. Petri nets can be analyzed for performance using techniques reported in <ref> [51] </ref>. Once in Petri net form, a protocol, either two-phase or four-phase, is chosen for control signaling. The rest of the synthesis will assume this selected protocol. This is followed by allocation of data path resources for computation, and other resources for communication. <p> ARP is an unoptimized version of this circuit and ARP-OPT an optimized version based on data dependent probabilities of the reordering requests. 6.4 Summary Our experiments with the performance analysis methodology have been very encouraging <ref> [51] </ref>. We have been able to analyze reasonably large examples and have been able to obtain the performance estimates in less than a second of CPU time in most cases as shown in Table 6.1.
Reference: [52] <author> Kung, D. </author> <title> Hazard-non-increasing gate level optimization algorithms. </title> <booktitle> In International Conference on Computer Aided Design (ICCAD), </booktitle> <address> Santa Clara (Nov. </address> <year> 1992). </year>
Reference-contexts: In [81], a modified Quine-McCluskey algorithm has been presented for hazard free two-level minimization. Static and dynamic hazard free AND/OR gates are derived for a given set of MIC transitions. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in <ref> [52] </ref>. In [58] a method to derive multilevel hazard free networks based on Binary Decision Diagrams (BDDs) that target multiplexor networks is presented. This method assumes hazard free multiplexors as the basic element. <p> Various techniques for hazard free logic minimization have been proposed to cover the constant function region. A modified Quine-McCluskey method that targets two-level AND-OR circuits is given in [80]. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in <ref> [117, 52] </ref>. A BDD based method [58] that targets multilevel multiplexor based networks has been developed and has been shown to produce efficient circuits. Technology mapping techniques to perform hazard nonincreasing mapping of two-level AND-OR networks into complex gate networks from a standard cell library have been given in [104].
Reference: [53] <author> Lavagno, L., Moon, C., Brayton, R., and Sangiovanni-Vincentelli, A. </author> <title> Solving the state assignment problem for signal transition graphs. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 568-572. </pages>
Reference-contexts: Synthesis of timed graphs called event rule systems have also been researched [77]. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in <ref> [53, 93, 123] </ref>, have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in [73, 72, 129] propose heuristic techniques for gate-level hazard elimination for speed-independent design.
Reference: [54] <author> Lavagno, L., and Sangiovanni-Vincentelli, A. </author> <title> Linear programming for optimum hazard elimination in asynchronous circuits. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 275-278. 144 </pages>
Reference-contexts: The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in [73, 72, 129] propose heuristic techniques for gate-level hazard elimination for speed-independent design. In <ref> [54] </ref> logic synthesis algorithms are used for hazard analysis and to avoid hazards by adding delay. 1.3.3.2 Asynchronous Finite State Machines Huffman style machines are the main class of asynchronous finite state machines. They are assumed to operate in fundamental mode.
Reference: [55] <author> Lavagno, L., and Sangiovanni-Vincentelli, A. </author> <title> Algorithms for Synthesis and Testing of Asynchronous Circuits. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> The circuit is mapped to a standard cell library. Hazard nonincreasing mapping of speed independent circuits into standard libraries is also addressed in this work. Other techniques have been presented to make circuits hazard free. In <ref> [55] </ref> hazard free realizations are obtained by added delays as required to make the circuit hazard free. Many Signal Transition Graph (STG) based techniques guarantee hazard freeness by checking the properties of the graphs [20, 68]. <p> Communicating Sequential Processes [41] is a formalism to model con current systems. * DB. Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit. One that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55] </ref>. Other definitions are also available [71, 100]. 138 * EDA. Electronic Design Automation. Referred to CAD tools for VLSI design in the industry. * EISG. Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits.
Reference: [56] <author> Leon-Garcia, A. </author> <title> Probability and Random Processes for Electrical Engineering. </title> <publisher> Addison Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: For 105 techniques to find these characteristics, readers are referred to [42]. Once absorbed in a particular recurrent class, the long-run <ref> [56] </ref> probability distribution over the states in the recurrent class needs to be computed.
Reference: [57] <author> Liebchen, A., and Gopalakrishnan, G. </author> <title> Dynamic reordering of high latency transactions in time-warp simulation using a modified micropipeline. </title> <booktitle> In International Conference on Computer Design (ICCD), </booktitle> <year> 1992 (1992). </year> <note> Accepted for publication. Also available as Technical Report UUCS-TR-92-005, </note> <institution> Department of Computer Science, University of Utah. </institution>
Reference-contexts: An Asynchronous Reordering Pipeline <ref> [57] </ref> has also been analyzed. This circuit is a modified asynchronous micropipeline that implements a dynamic instruction reordering scheme that optimizes multiple pending instructions to achieve higher throughput.
Reference: [58] <author> Lin, B., and Devadas, S. </author> <title> Synthesis of hazard-free multi-level implementations under multiple-input changes from binary decision diagrams. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. </booktitle> <year> 1994). </year>
Reference-contexts: In [81], a modified Quine-McCluskey algorithm has been presented for hazard free two-level minimization. Static and dynamic hazard free AND/OR gates are derived for a given set of MIC transitions. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in [52]. In <ref> [58] </ref> a method to derive multilevel hazard free networks based on Binary Decision Diagrams (BDDs) that target multiplexor networks is presented. This method assumes hazard free multiplexors as the basic element. <p> This differs from the approach where one chooses standard gates from a library to implement the required boolean function in a hazard free manner <ref> [81, 104, 58] </ref>. Techniques will be presented for the efficient synthesis of hazard free Boolean functions under multiple input change. In addition, the problem of obtaining a multilevel network of such CMOS gates will also be considered. <p> A modified Quine-McCluskey method that targets two-level AND-OR circuits is given in [80]. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in [117, 52]. A BDD based method <ref> [58] </ref> that targets multilevel multiplexor based networks has been developed and has been shown to produce efficient circuits. Technology mapping techniques to perform hazard nonincreasing mapping of two-level AND-OR networks into complex gate networks from a standard cell library have been given in [104]. <p> Complex gates are modeled as alternating levels of sum of product and product of sums implementations and a method is given that also takes advantage of the hazard properties of complex gates discussed in the last section. A method in <ref> [58] </ref> is given to derive multilevel circuits using BDDs that target multiplexer based circuits. The multiplexers in this method are assumed to be hazard free. Work in [104] targets multilevel hazard free circuits, by starting from a hazard free two-level circuit. <p> Topological considerations as well as timing assumptions could help solve the problem. * Second, other general multilevel synthesis methods can be developed building on the work presented in this thesis. Current work includes extending the BDD based method of <ref> [58] </ref> developed for multiplexor style design to the problem of CMOS complex-gate synthesis.
Reference: [59] <author> Lin, B., and Vercauteren, S. </author> <title> Synthesis of concurrent system interface modules with automatic protocol conversion generation. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. </booktitle> <year> 1994), </year> <pages> pp. 101-108. </pages>
Reference-contexts: The Lager tool set is used for place and route of standard cells for both the datapath and control (when implemented as AND/OR gates). Both commercial and public domain Verilog simulators have been used. The 3D [130] tool is used for burst mode synthesis. An interface to the ASSASSIN <ref> [59] </ref> tools and the UCLOCK [82] tools can be easily provided. 1.6 Overview of the Thesis The synthesis method targets implementations that have self-timed data paths, whereas the controller circuits are Huffman style state machines that operate under the fundamental mode environmental assumption.
Reference: [60] <author> Lin, K.-J., and Lin, C.-S. </author> <title> Automatic synthesis of asynchronous circuits. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 296-301. </pages>
Reference-contexts: Implementations consist of combinational logic blocks and C-elements, where each combinational logic block is implemented out of simple unlimited-fanin AND and OR gates. Work in <ref> [60] </ref> assumes the same implementation as [8], but starts from an STG instead of a state graph, reducing the complexity of the synthesis process and allowing larger circuits to be synthesized. More recently, in [47] conditions have been given to generate speed independent circuits from state graphs.
Reference: [61] <author> Marshall, A., Coates, B., and Siegel, P. </author> <title> Designing an asynchronous communications chip. </title> <booktitle> IEEE Design & Test of Computers 11, 2 (1994), </booktitle> <pages> 8-21. </pages>
Reference-contexts: The Post Office chip [23, 21] and the synthesis of a receiver for an Infrared Communications Protocol <ref> [61] </ref> have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs. A floating point divider chip [126, 127, 102] has demonstrated the advantages of micropipeline ring style design and has recently shipped as a commercial part.
Reference: [62] <author> Martin, A. J. </author> <title> The probe: An addition to communication primitives. </title> <journal> Information Processing Letters 20, </journal> <month> 3 (Apr. </month> <year> 1985), </year> <pages> 125-130. </pages> <note> An Erratum related to this article appeared in the August 1985 issue of the Info. Proc. Letters. </note>
Reference-contexts: Work in [13] uses Occam, a language based on CSP, to describe computation as a set of concurrent processes over fixed channels. The description is then synthesized into 15 delay-insensitive circuits. In [64], CSP with added communication primitives <ref> [62] </ref>, is directly used to synthesize quasi-delay insensitive implementations. The work of [118] uses Tangram descriptions to specify behavioral descriptions. This language is also a variant of CSP and the descriptions in this language are translated into handshake circuits, networks of elementary components that interact by handshake signaling.
Reference: [63] <author> Martin, A. J. </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits. </title> <booktitle> Distributed Computing 1, 4 (1986), </booktitle> <pages> 226-234. </pages>
Reference-contexts: High level synthesis includes the steps of architectural synthesis and logic synthesis. Various researchers have used specialized modules to aid in the creation of delay-insensitive circuitry because of the difficulty of implementing DI designs in terms of single output gates <ref> [16, 63] </ref>. Work in [13] uses Occam for high level description and then compiles it into an implementation composed of delay-insensitive control units utilizing a two-phase handshake protocol and bundled data paths. Work in [28] uses a trace-theory based method for delay-insensitive design.
Reference: [64] <author> Martin, A. J. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming (1989), </booktitle> <editor> e. C.A.R. Hoare, Ed., </editor> <publisher> Addison-Wesley. </publisher>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> Various forms of partitioning have also been used in asynchronous synthesis such as process decomposition <ref> [18, 64] </ref>, contraction [20, 94], and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. <p> Work in [13] uses Occam, a language based on CSP, to describe computation as a set of concurrent processes over fixed channels. The description is then synthesized into 15 delay-insensitive circuits. In <ref> [64] </ref>, CSP with added communication primitives [62], is directly used to synthesize quasi-delay insensitive implementations. The work of [118] uses Tangram descriptions to specify behavioral descriptions. <p> ACK is the tool framework to assist in this process. 21 Although there is no consensus on the requirements for a good HDL, based on extensive research in this area <ref> [6, 13, 64, 118] </ref>, some factors have emerged as important for asynchronous synthesis. These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog [114, 107] and VHDL [90, 7] have emerged as standards in the industry. <p> Similarly in the case of four-phase, the same high level action is expanded into a set of four-phase handshake signals. Note that the four-phase expansion shown in the figure is a naive expansion. In general, various optimizations such as reshu*ing <ref> [64] </ref> are performed on the graph. These optimizations are described 41 in later chapters. <p> Both static and dynamic implementations of such circuits are 79 possible. The design of such circuits has been well understood and is known as Generalized C elements <ref> [64, 76] </ref>. Methods are also currently being investigated to derive generalized C element implementations for burst mode circuits. In this chapter, we will specifically address the problem of deriving hazard free customized CMOS realizations for asynchronous controllers under multiple-input change. <p> Communicating Sequential Processes [41] is a formalism to model con current systems. * DB. Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit. One that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55] </ref>. Other definitions are also available [71, 100]. 138 * EDA. Electronic Design Automation. Referred to CAD tools for VLSI design in the industry. * EISG. Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits.
Reference: [65] <author> Martin, A. J. </author> <title> Asynchronous datapaths and the design of an asynchronous adder. Formal Methods in System Design 1, </title> <month> 1 (July </month> <year> 1992), </year> <pages> 119-137. </pages>
Reference-contexts: Two modules connected with a bundled data path are shown in Figure 1.3. Another class of data path design styles use completion sensing <ref> [65] </ref>. These methods attempt to avoid the problems imposed by the use of self-timed blocks. The use of delay matching can cause loss of performance due to the pessimistic delay used. Methods developed to perform completion sensing and take advantage of average case delay have been proposed.
Reference: [66] <author> Mead, C. A., and Conway, L. </author> <title> An Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year> <note> Chapter 7, entitled "System Timing". </note>
Reference-contexts: Two frequently used communication protocols are two-phase and four-phase signaling. Two-phase transition signalling <ref> [66, 110, 13] </ref> uses transitions on event wires to communicate the request and acknowledge events described previously.
Reference: [67] <author> Mead, C. A., and Conway, L. </author> <title> An Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year>
Reference-contexts: A group of electronic design automation companies that set standards to allow common interfaces for designers who want to use different tools. * CMOS. Complementary Metal Oxide Semiconductor. Circuit design style which uses P and N transistor networks that implement complementary func tions in a single gate <ref> [67] </ref>. * CSP. Communicating Sequential Processes [41] is a formalism to model con current systems. * DB. Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit.
Reference: [68] <author> Meng, T. H., Brodersen, R. W., and Messerchmitt, D. G. </author> <title> Automatic synthesis of asynchronous circuits from high-level specifications. </title> <journal> IEEE Transactions on Computer-Aided Design 8, </journal> <volume> 11 (Nov. </volume> <year> 1989), </year> <pages> 1185-1205. 145 </pages>
Reference-contexts: Other techniques have been presented to make circuits hazard free. In [55] hazard free realizations are obtained by added delays as required to make the circuit hazard free. Many Signal Transition Graph (STG) based techniques guarantee hazard freeness by checking the properties of the graphs <ref> [20, 68] </ref>. <p> In this work it was proved that a hazard free implementation can be derived from an STG in which certain properties hold, such as liveness and persistency. Work in <ref> [68] </ref> presented an automatic synthesis algorithm based on this work, which transforms an STG into a series of Boolean equations implemented by a complex gate.
Reference: [69] <author> Micheli, G. D. </author> <title> Optimization and Synthesis of Logic Circuits. </title> <publisher> McGraw Hill, </publisher> <year> 1994. </year>
Reference-contexts: The relevant background and ongoing research work in synthesis and in particular, asynchronous design and synthesis will be discussed. 1.1 Automatic Synthesis Synthesis is the generation of a detailed circuit model, starting from a less detailed one <ref> [69] </ref>. Models for synthesis can be classified in terms of levels of abstraction and views. Synthesis can be seen as a set of transformations along these two axes. <p> that of using two-phase transition signaling protocol, pipelined organization of the computation, the use of a basic set of delay insensitive library modules to implement control, and self-timed bundled data paths. 1.4.5 Scheduling and Allocation A great deal of research effort in synchronous design synthesis is spent on scheduling algorithms <ref> [19, 35, 69] </ref>. Unlike synchronous circuits, the concern of scheduling in asynchronous circuits is different as one does not have to schedule actions into clock cycles.
Reference: [70] <author> Molloy, M. K. </author> <title> Performance analysis using stochastic petri nets. </title> <journal> IEEE Transactions on Computers C-31 (1982), </journal> <pages> 417-423. </pages>
Reference-contexts: The following sketch of some of the relevant terminology and theorems of Markov Chain theory is presented here. A detailed discussion of the Discrete-Time Markov Chains and their relationship to stochastic Petri nets is described in <ref> [3, 70] </ref>. The strongly connected components of the state space (when viewed as a directed graph) are the classes of the Markov Chain. The condensed graph (one vertex for each class) is a directed acyclic graph with one root.
Reference: [71] <author> Molnar, C. E., Fang, T.-P., and Rosenberger, F. U. </author> <title> Synthesis of delay-insensitive modules. In 1985 Chapel Hill Conference on Very Large Scale Integration (1985), </title> <editor> H. Fuchs, Ed., </editor> <publisher> Computer Science Press, </publisher> <pages> pp. 67-86. </pages>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit. One that operates correctly according to its specification when modeled with unbounded wire delay [64, 55]. Other definitions are also available <ref> [71, 100] </ref>. 138 * EDA. Electronic Design Automation. Referred to CAD tools for VLSI design in the industry. * EISG. Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits. Proposed in [106]. * GTPN.
Reference: [72] <author> Moon, C. W., and Brayton, R. K. </author> <title> Elimination of dynamic hazards in asynchronous circuits by factoring. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1993), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 7-13. </pages>
Reference-contexts: Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in <ref> [73, 72, 129] </ref> propose heuristic techniques for gate-level hazard elimination for speed-independent design. In [54] logic synthesis algorithms are used for hazard analysis and to avoid hazards by adding delay. 1.3.3.2 Asynchronous Finite State Machines Huffman style machines are the main class of asynchronous finite state machines.
Reference: [73] <author> Moon, C. W., Stephan, P. R., and Brayton, R. K. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 322-325. </pages>
Reference-contexts: Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in <ref> [73, 72, 129] </ref> propose heuristic techniques for gate-level hazard elimination for speed-independent design. In [54] logic synthesis algorithms are used for hazard analysis and to avoid hazards by adding delay. 1.3.3.2 Asynchronous Finite State Machines Huffman style machines are the main class of asynchronous finite state machines.
Reference: [74] <author> Muller, D. E., and Bartky, W. S. </author> <title> A theory of asynchronous circuits. </title> <booktitle> In Proceedings of an International Symposium on the Theory of Switching (Apr. 1959), </booktitle> <publisher> Harvard University Press, </publisher> <pages> pp. 204-243. </pages>
Reference-contexts: two main categories, namely, (1) Petri net and graph based methods and (2) Asynchronous finite state machine (AFSM) based methods. 1.3.3.1 Petri Net and Graph Based Methods Most of the work in the Petri net and graph based models that target speed independent design are motivated by the Muller model <ref> [74] </ref>. The use of STGs to model asynchronous circuits was introduced independently in [98, 20]. In [20], an approach was presented for synthesizing speed-independent control circuits from STGs.
Reference: [75] <author> Murata, T. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE (1989). </booktitle>
Reference-contexts: A speed-independent (SI) circuit is one that operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. Many controller synthesis styles based on Petri nets <ref> [91, 75] </ref> and state graphs derive circuits that are speed independent. This class has been extended to include circuits with a limited form 8 of nondeterminism. A self-timed [101] circuit is a legal interconnection of self-timed elements. <p> Set up and hold time requirements are satisfied by placing appropriate delay values between request and acknowledge. The behavior graph is then refined. Refinement of actions associated with transitions of a Petri net is based on the notion of action refinement <ref> [75] </ref> frequently used for hierarchical modeling and macroexpansion in Petri nets. <p> Their work is primarily concerned with the study of asynchronous pipelines. They do not consider data dependent behaviors, arbitration, or resource usages. Petri nets have been widely used for studying asynchronous computations <ref> [75] </ref> as well as for modeling and synthesizing synchronous [89] and asynchronous circuits. They have also been widely used in performance analysis studies at the system level. Basically one can observe two categories of works in this area.
Reference: [76] <author> Myers, C., and Meng, T. H.-Y. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 279-282. </pages>
Reference-contexts: Both static and dynamic implementations of such circuits are 79 possible. The design of such circuits has been well understood and is known as Generalized C elements <ref> [64, 76] </ref>. Methods are also currently being investigated to derive generalized C element implementations for burst mode circuits. In this chapter, we will specifically address the problem of deriving hazard free customized CMOS realizations for asynchronous controllers under multiple-input change.
Reference: [77] <author> Myers, C. J., and Meng, T. H.-Y. </author> <title> Synthesis of timed asynchronous circuits. </title> <journal> IEEE Transactions on VLSI Systems 1, </journal> <month> 2 (June </month> <year> 1993), </year> <pages> 106-119. </pages>
Reference-contexts: Work in [87] has shown that some of these conditions can be relaxed by using the hazard free technology mapping techniques of [103]. Synthesis of timed graphs called event rule systems have also been researched <ref> [77] </ref>. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards.
Reference: [78] <author> Nielson, C. D., and Kishinevsky, M. </author> <title> Performance analysis based on timing simulation. </title> <type> Tech. Rep. </type> <institution> ID-TR:1993-125, Department of Computer Science, Technical University of Denmark, </institution> <year> 1993. </year>
Reference-contexts: Hulgaard et al. [40] adapt the work by Burns and provide an algorithm to find exact bounds on the time separation of events in a process graph without conditional behavior that serves as a basis for evaluation during time constrained synthesis or design. In <ref> [78] </ref>, the problem of determining the cycle time and critical paths using the timing simulation of an underlying signal graph is addressed.
Reference: [79] <author> Nowick, S., Dean, M., Dill, D., and Horowitz, M. </author> <title> The design of a high-performance cache controller: A case study in asynchronous synthesis. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <booktitle> Eds., </booktitle> <pages> pp. 419-427. </pages>
Reference-contexts: Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult. In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends [23], high-performance cache memory subsystems <ref> [79] </ref>, complex arbiter circuits [36], high performance arithmetic units [113], and decou-pled processors [31, 14] whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature. Arbitration for shared resources is an important concern in most of these systems.
Reference: [80] <author> Nowick, S., and Dill, D. L. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <journal> IEEE Transactions on Computer-Aided Design 14, </journal> <month> 8 (Aug. </month> <year> 1995), </year> <pages> 986-997. </pages>
Reference-contexts: Various techniques for hazard free logic minimization have been proposed to cover the constant function region. A modified Quine-McCluskey method that targets two-level AND-OR circuits is given in <ref> [80] </ref>. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in [117, 52]. A BDD based method [58] that targets multilevel multiplexor based networks has been developed and has been shown to produce efficient circuits. <p> In particular a style of CMOS gate design called the SOP/SOP form of design that reduces the constraints in hazard free synthesis of single CMOS complex gates is presented. This method extends the work of <ref> [80] </ref> for the first time into the realm of complex gate networks. * A technique to produce multilevel network, of such CMOS gates is described. This technique allows efficient solutions to a large class of asynchronous specifications. <p> There are some differences mainly because one can ignore hazards due to static transitions in the SOP/SOP form. The Make-sets algorithm given in <ref> [80] </ref>, which is the first step in the two-level minimization of AND-OR gate implementations, is summarized and modified for complex gate circuits to Complex-Make-sets. Steps that are common to both the two-level AND/OR realization and the pass network realizations are then discussed. <p> The Make-sets algorithm is first in a series of three steps in exact-logic free minimization. In this algorithm we find the required set cubes (req-set), the off-set cubes and the privileged set (priv-set) cubes. These terms are defined in <ref> [80] </ref>. The required set is the set of cubes (referred to as required cubes) that will have to be included in some cover in the final implementation. These include cubes that cover a 1 ! 1 static transition and maximal on-set cubes during a dynamic transition.
Reference: [81] <author> Nowick, S. M. </author> <title> Automatic synthesis of burst-mode asynchronous controllers. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Within the class of logic hazards, there are single-input change (SIC) hazards and multiple-input change 9 (MIC) hazards. Additionally, each class of hazards (function and logic) includes both static and dynamic hazards. Essential hazards [117, 108, 130] may also result due to the feedback path. In <ref> [81] </ref>, a modified Quine-McCluskey algorithm has been presented for hazard free two-level minimization. Static and dynamic hazard free AND/OR gates are derived for a given set of MIC transitions. Hazard nonincreasing transformations and algorithms for optimization of gate level logic have been given in [52]. <p> An extension to fundamental mode that allowed an extended form of multiple-input changes to the state machine was the burst-mode style [22] of operation of the Huffman style machines. Burst mode machines were described in [22]. A formal description of burst-mode specification style and synthesis methods were given in <ref> [81] </ref> and later extended in [130]. In this section the burst mode specification style used in this work will be reviewed. More details can be found in [81]. An asynchronous state machine allowing multiple-input changes can be specified by a form of state diagram, called a burst-mode specification. <p> Burst mode machines were described in [22]. A formal description of burst-mode specification style and synthesis methods were given in <ref> [81] </ref> and later extended in [130]. In this section the burst mode specification style used in this work will be reviewed. More details can be found in [81]. An asynchronous state machine allowing multiple-input changes can be specified by a form of state diagram, called a burst-mode specification. <p> It can be seen that the example is a state machine with burst-mode input and output transitions in the specification style described earlier. Many synthesis methods that support hazard free gate-level realization from burst-mode specifications are available. Work in <ref> [81] </ref> formalized the burst-mode style of specification, targeted locally clocked implementations and provided algorithms for two-level minimization under multiple-input change. <p> It is hoped this work will open up avenues in the future to mix many protocols within a single design. 23 1.5.5 Support Complex-gate Design Although interacting burst-mode controllers can be built efficiently using standard gate-level cell libraries <ref> [81, 104] </ref>, even better performance may be obtained by mapping the burst-mode controllers to custom CMOS complex-gate implementations. Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers [23, 108]. There are several reasons for considering custom CMOS complex-gate based circuits. <p> Whenever quiescent, the network corresponding to the I-net must first await a collection of one or more high-going or low-going input signal transitions (i.e., an input burst <ref> [23, 81] </ref>) to arrive in any order. After absorbing the input-burst, the network corresponding to the I-net should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [23, 81]) in any order. <p> or more high-going or low-going input signal transitions (i.e., an input burst <ref> [23, 81] </ref>) to arrive in any order. After absorbing the input-burst, the network corresponding to the I-net should, in a finite amount of time, produce a collection of high-going or low-going output signal transitions (i.e., an output burst [23, 81]) in any order. This mode of interaction between the network and its environment is called the burst-mode behavior, which is a generalization of fundamental-mode [117] operation. Consider the simple example of such a conversion procedure given in Figure 4.1. <p> This differs from the approach where one chooses standard gates from a library to implement the required boolean function in a hazard free manner <ref> [81, 104, 58] </ref>. Techniques will be presented for the efficient synthesis of hazard free Boolean functions under multiple input change. In addition, the problem of obtaining a multilevel network of such CMOS gates will also be considered. <p> By reducing the number of required cubes, we increase the number of functions that could have a solution. For instance, the example used in <ref> [81] </ref> to demonstrate the absence of a solution for AND-OR implementations has a solution in the SOP-SOP form of complex gate implementations. Circuits from the state machine benchmarks [130] were synthesized to find the practical applicability of the techniques presented earlier. <p> The n pass network is obtained using the SOP implementation for function F and this is a simple two-level AND/OR function. In Figure 5.4 (f) we have shown a circuit for the same output generated by the the two-level minimizer <ref> [81] </ref> in the 3D [130] synthesis tool. Note that an additional state variable has been added to eliminate the hazard problem in this case.
Reference: [82] <author> Nowick, S. M. Uclock: </author> <title> Automated design of high-performance unclocked state machines. </title> <booktitle> In Proceedings of the International Conference on Computer Design (1994), </booktitle> <pages> pp. 434-441. 146 </pages>
Reference-contexts: Both commercial and public domain Verilog simulators have been used. The 3D [130] tool is used for burst mode synthesis. An interface to the ASSASSIN [59] tools and the UCLOCK <ref> [82] </ref> tools can be easily provided. 1.6 Overview of the Thesis The synthesis method targets implementations that have self-timed data paths, whereas the controller circuits are Huffman style state machines that operate under the fundamental mode environmental assumption. <p> Currently the 3D [130] method is used to synthesize the circuits, but the UCLOCK <ref> [82] </ref> 74 75 76 method can also be used. The synthesis methods start from burst-mode specifications, performs state minimization and state assignment followed by logic minimization to obtain hazard-free AND/OR logic for the controllers.
Reference: [83] <author> Nowick, S. M., and Dill, D. L. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 318-321. </pages>
Reference-contexts: Methods are also currently being investigated to derive generalized C element implementations for burst mode circuits. In this chapter, we will specifically address the problem of deriving hazard free customized CMOS realizations for asynchronous controllers under multiple-input change. This problem is encountered during the synthesis of burst mode circuits <ref> [83, 131] </ref> and is a general problem in asynchronous synthesis. 5.1 Key Contributions The techniques we propose in this chapter have the following important features: * The hazard properties of single CMOS gate implementations are described under the unbounded gate and wire delay assumptions.
Reference: [84] <author> Nowick, S. M., and Dill, D. L. </author> <title> Synthesis of asynchronous state machines using a local clock. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1991), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 192-197. </pages>
Reference-contexts: In order for SFJ graphs to be translated into burst-mode machines, a few additional restrictions are necessary. The first three are necessary to generate legal <ref> [84] </ref> burst-mode machines, and the last is required by burst-mode reduction [38]: * An SFJ graph must be initially quiescent, and attain quiescence infinitely often.
Reference: [85] <author> Nowick, S. M., Yun, K. Y., and Dill, D. L. </author> <title> Practical asynchronous controller design. </title> <booktitle> In Proceedings of the International Conference on Computer Design (1992). </booktitle>
Reference-contexts: Techniques for obtaining encoded state graphs have been given in [106]. Finally, the EISG is converted into a burst-mode machine using our algorithm burst-mode reduction (detailed later), and the resulting burst-mode machine is synthesized using an existing tool (e.g., see <ref> [85, 132, 23] </ref>). The algorithm for 65 66 67 burst-mode reduction from EISG traverses a path of the state graph starting from the starting state, collecting input transitions into a set called an input-burst, until it encounters a state that has only arcs labeled by output signal transitions exiting it.
Reference: [86] <author> Panda, P. R., and Dutt, N. </author> <title> 1995 High level synthesis design repository. </title> <type> Tech. Rep. 95-04, </type> <institution> University of California, Irvine, </institution> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: This example was motivated by a similar situation arising out of a QRS chip description from the High Level Synthesis 95 benchmarks <ref> [86] </ref>. It consists of six (chosen for illustration) alternations of input signal transition go and output signal transition gone, after which an output transition doit is generated. Then, control transfers to a loop where output doit is generated for each iteration. When input dontloop is provided, the iteration ceases. <p> The input-translators (ISM1-5) add an area overhead and latencies in certain paths; however, they can allow critical loops to execute with very low overheads, thus helping to increase throughputs. 3.4.3 Example 3: A Barcode Reader A barcode reader with limited error-correction capabilities from the 1995 High Level Synthesis Design benchmarks <ref> [86] </ref> was converted from a synchronous VHDL specification to an asynchronous Verilog specification by hand. Results are shown in Table 3.3. 3.5 Summary In this chapter we have presented a method to perform partitioning of centralized controllers into a set of distributed controllers in the synthesis approach. <p> The layout generated can be integrated into the layout produced for the data path using the Lager tools. 7.2 A Complete Example In this section we will describe the synthesis of the high level description of a barcode reader <ref> [86] </ref>. We will demonstrate synthesis using the system. A high level 121 description is taken and synthesized all the way to the circuit level. The steps at each level of abstraction is described. Consider the example shown in Figure 7.3 and the corresponding Petri net representation given in Figure 7.4. <p> In Table 7.1 we present examples synthesized with both two and four phase protocols. The experimental designs in the table include a factorial computation unit, a pipelined version of the same, a differential equation solver from [27], the Barcode reader from <ref> [86] </ref> and some smaller examples that we used in order to get an understanding of how two and four phase implementations differ in terms of performance and area for different types of high level descriptions. 129 Table 7.1.
Reference: [87] <author> Pastor, E., Cortadella, J., and Riog, O. </author> <title> A new look at the conditions for the synthesis of speed independent designs. </title> <booktitle> In Proc. of the 5th Great Lakes Symposium on VLSI (Mar. 1995), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 230-236. </pages>
Reference-contexts: More recently, in [47] conditions have been given to generate speed independent circuits from state graphs. Work in <ref> [87] </ref> has shown that some of these conditions can be relaxed by using the hazard free technology mapping techniques of [103]. Synthesis of timed graphs called event rule systems have also been researched [77]. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques.
Reference: [88] <author> Pedron, C., and Stauffer, A. </author> <title> Analysis and synthesis of combinational pass transistor circuits. </title> <journal> IEEE Transactions on CAD/CAS 6, </journal> <volume> 5 (1988), </volume> <pages> 727-750. </pages>
Reference-contexts: A brief description of some terminology on hazards in then presented. 80 5.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [88, 95, 99, 103] </ref>. The model presented in these papers will be extended to develop our own model for single CMOS gates.
Reference: [89] <author> Peng, Z., and Kuchcinski, K. </author> <title> Automated transformation of algorithms into register-transfer level implementations. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 13, </journal> <month> 2 (Feb. </month> <year> 1994), </year> <pages> 150-166. </pages>
Reference-contexts: Their work is primarily concerned with the study of asynchronous pipelines. They do not consider data dependent behaviors, arbitration, or resource usages. Petri nets have been widely used for studying asynchronous computations [75] as well as for modeling and synthesizing synchronous <ref> [89] </ref> and asynchronous circuits. They have also been widely used in performance analysis studies at the system level. Basically one can observe two categories of works in this area.
Reference: [90] <author> Perry, D. VHDL. McGraw Hill, </author> <year> 1993. </year>
Reference-contexts: These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog [114, 107] and VHDL <ref> [90, 7] </ref> have emerged as standards in the industry. Support for these languages is becoming an important factor in the acceptability of tools for VLSI design. To balance these factors, a language based on Petri nets that supports many of the required features in asynchronous design is defined. <p> They have exactly one input place and one output place. Note that there may be choices within the thread as long as the thread has exactly one input and one output place. * VHDL. VHSIC Hardware Description Language <ref> [90, 7] </ref>. A IEEE standard hardware description language. * VLSI. Very Large Scale Integration.
Reference: [91] <author> Peterson, J. L. </author> <title> Petri Net Theory and The Modeling Of Systems. </title> <publisher> Prentice-Hall, </publisher> <year> 1981. </year>
Reference-contexts: A speed-independent (SI) circuit is one that operates correctly regardless of gate delays; wires are assumed to have zero or negligible delay. Many controller synthesis styles based on Petri nets <ref> [91, 75] </ref> and state graphs derive circuits that are speed independent. This class has been extended to include circuits with a limited form 8 of nondeterminism. A self-timed [101] circuit is a legal interconnection of self-timed elements. <p> A Petri net sequencing graph is associated with each module which describes the behavior of the module. The behavior graphs are State machines with Fork-Join (SFJ) graphs. Informally a SFJ graph, which is a Petri net graph <ref> [91] </ref>, contains the following kinds of transitions. * Action transitions that have in- and out-degree of one. Each signal-transition 30 is labeled with an action. <p> These Petri nets are "state machines <ref> [91] </ref> with fork/joins"|a subclass of Petri nets. SFJ graphs have been described earlier in Chapter 2. The refined Petri nets at this point are also SFJ graphs but with different labels on the transitions.
Reference: [92] <author> Pratt, G. A., and Nguyen, J. </author> <title> Distributed synchronous clocking. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 6, </journal> <month> 3 (Mar. </month> <year> 1995), </year> <pages> 314-328. </pages>
Reference-contexts: Noise on wires can cause an asynchronous system to fail. This problem also occurs in synchronous systems but the global clock limits the window of noise vulnerability. Noise has been mentioned by researchers <ref> [92] </ref> as the main reason to pursue distributed synchronous design instead of self-timed design styles. It is necessary to understand the importance of 136 noise and its effects on asynchronous system design.
Reference: [93] <author> Puri, R., and Gu, J. </author> <title> Signal transition graph constraints for speed-independent circuit synthesis. </title> <booktitle> In Proc. International Symposium on Circuits and Systems (1993), </booktitle> <volume> vol. 3, </volume> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 1686-1689. </pages>
Reference-contexts: Synthesis of timed graphs called event rule systems have also been researched [77]. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in <ref> [53, 93, 123] </ref>, have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in [73, 72, 129] propose heuristic techniques for gate-level hazard elimination for speed-independent design.
Reference: [94] <author> Puri, R., and Gu, J. </author> <title> A modular partitioning approach for asynchronous circuit synthesis. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1994), </booktitle> <pages> pp. 63-69. </pages>
Reference-contexts: Various forms of partitioning have also been used in asynchronous synthesis such as process decomposition [18, 64], contraction <ref> [20, 94] </ref>, and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. Contraction [20, 94] has been suggested as a partitioning technique for STG specifications. <p> have also been used in asynchronous synthesis such as process decomposition [18, 64], contraction <ref> [20, 94] </ref>, and process refinement [24, 128]. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. Contraction [20, 94] has been suggested as a partitioning technique for STG specifications. In this method, output partitioning is performed on the specification before state encoding, as against output partitioning after encoding, as is done in techniques that do not use contraction.
Reference: [95] <author> Radhakrishnan, D., Whitaker, S., and Maki, G. </author> <title> Formal design procedures for pass transistor switching circuits. </title> <journal> IEEE Journal of Solid State Circuits 20, </journal> <volume> 2 (1985), </volume> <pages> 531-536. </pages>
Reference-contexts: A brief description of some terminology on hazards in then presented. 80 5.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [88, 95, 99, 103] </ref>. The model presented in these papers will be extended to develop our own model for single CMOS gates.
Reference: [96] <author> Ramamoorthy, C., and Ho, G. </author> <title> Performance evaluation of asynchronous concurrent systems using petri nets. </title> <journal> IEEE Transactions on Software Engineering SE-6, </journal> <month> 5 (Sept. </month> <year> 1980), </year> <pages> 440-449. </pages>
Reference-contexts: They have also been widely used in performance analysis studies at the system level. Basically one can observe two categories of works in this area. In the first category, decision-free Petri net structures are used to model computations <ref> [96] </ref> whereas in the second category, Petri nets with decisions (or "choices") are allowed [134, 43]. Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams [17, 125].
Reference: [97] <author> Richardson, W. F., and Brunvand, E. </author> <title> The NSR Processor Prototype. </title> <type> Tech. Rep. </type> <institution> UUCS-92-022, Department of Computer Science, University of Utah, </institution> <month> Oct. </month> <year> 1992. </year> <month> 147 </month>
Reference-contexts: For example, in the NSR chip, performance was measured by placing a series of 1000 instructions in a large loop and then executing the loop 65536 times <ref> [97] </ref>. The 111 112 Petri net model was modified corresponding to each actual test to incorporate the probabilities of the instructions.
Reference: [98] <author> Rosenblum, L. Y., and Yakovlev, A. V. </author> <title> Signal graphs: from self-timed to timed ones. </title> <booktitle> In Proceedings of International Workshop on Timed Petri Nets (Torino, </booktitle> <address> Italy, July 1985), </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 199-207. </pages>
Reference-contexts: The use of STGs to model asynchronous circuits was introduced independently in <ref> [98, 20] </ref>. In [20], an approach was presented for synthesizing speed-independent control circuits from STGs. An STG is a form of an interpreted Petri net, where 10 transitions on a net correspond to polarized signal transitions in a control circuit.
Reference: [99] <author> Sasi, S., and Radhakrishnan, D. </author> <title> Hazards in CMOS circuits. </title> <journal> Int. Journal Electronics 68, </journal> <volume> 6 (1990), </volume> <pages> 967-990. </pages>
Reference-contexts: A brief description of some terminology on hazards in then presented. 80 5.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [88, 95, 99, 103] </ref>. The model presented in these papers will be extended to develop our own model for single CMOS gates.
Reference: [100] <author> Schols, H. </author> <title> Delay-insensitive Communication. </title> <type> PhD thesis, </type> <institution> Dept. of Math. and C.S., Eindhoven Univ. of Technology, </institution> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> Data Block. Defined in Chapter 2. * DHF-PI. Dynamic Hazard Free Prime Implicants. * DI. Delay insensitive: Circuit. One that operates correctly according to its specification when modeled with unbounded wire delay [64, 55]. Other definitions are also available <ref> [71, 100] </ref>. 138 * EDA. Electronic Design Automation. Referred to CAD tools for VLSI design in the industry. * EISG. Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits. Proposed in [106]. * GTPN.
Reference: [101] <author> Seitz, C. L. </author> <title> Self-timed VLSI systems. </title> <booktitle> In Proceedings of the 1st Caltech Conference on Very Large Scale Integration (Pasadena, </booktitle> <address> CA, </address> <month> Jan. </month> <year> 1979), </year> <editor> C. L. Seitz, Ed., </editor> <publisher> Caltech C.S. Dept., </publisher> <pages> pp. 345-355. </pages>
Reference-contexts: Many controller synthesis styles based on Petri nets [91, 75] and state graphs derive circuits that are speed independent. This class has been extended to include circuits with a limited form 8 of nondeterminism. A self-timed <ref> [101] </ref> circuit is a legal interconnection of self-timed elements. Each element is contained within an equipotential region, where wires may have negligible or well-bounded delay. An element itself may be an SI circuit, or a circuit whose operation relies on localized timing assumptions. <p> When the receiver is finished with its processing it produces an acknowledge event by passing that token back to the sender. The sender and receiver may be data path modules or control elements (distributed or centralized) all of which must be self-timed. Many methods use self-timed blocks <ref> [101, 110] </ref>, which encode data using one wire for each data bit. In this case if an n-bit data value is to be passed at the 16 output, then n+2 wires need to be used (n bits for data, one request bit and one acknowledge bit).
Reference: [102] <author> Shen, G., Williams, T., and et. al. </author> <title> A 64b 4-issue out-of-order execution risc processor. </title> <booktitle> In 1995 IEEE International Solid-State Circuits Conference (1995), </booktitle> <pages> pp. 170-171. </pages> <note> ISBN 0-7803-2495-1. </note>
Reference-contexts: The Post Office chip [23, 21] and the synthesis of a receiver for an Infrared Communications Protocol [61] have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs. A floating point divider chip <ref> [126, 127, 102] </ref> has demonstrated the advantages of micropipeline ring style design and has recently shipped as a commercial part. Other examples include the design of low power asynchronous chips at Philips labs [121, 120, 122] and the design of a SCSI controller at AMD [130].
Reference: [103] <author> Siegel, P. </author> <title> Automatic technology mapping for asynchronous designs. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: In [58] a method to derive multilevel hazard free networks based on Binary Decision Diagrams (BDDs) that target multiplexor networks is presented. This method assumes hazard free multiplexors as the basic element. Work in <ref> [103] </ref> addresses the problem of targeting multilevel circuits using a hazard nonincreasing procedure starting from a hazard free two-level solution. The circuit is mapped to a standard cell library. Hazard nonincreasing mapping of speed independent circuits into standard libraries is also addressed in this work. <p> More recently, in [47] conditions have been given to generate speed independent circuits from state graphs. Work in [87] has shown that some of these conditions can be relaxed by using the hazard free technology mapping techniques of <ref> [103] </ref>. Synthesis of timed graphs called event rule systems have also been researched [77]. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. <p> This work was extended by [133] to allow Huffman style state machine implementations where conditionals and "don't cares" were supported and an optimized implementation was targeted where outputs could feed back as state variables. Work in <ref> [103] </ref> developed a technology mapping technique to map the hazard free two-level logic to more complex standard cells from a known library. These synthesis methods have been successfully used in a large number of design examples. <p> A brief description of some terminology on hazards in then presented. 80 5.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [88, 95, 99, 103] </ref>. The model presented in these papers will be extended to develop our own model for single CMOS gates.
Reference: [104] <author> Siegel, P., Micheli, G. D., and Dill, D. </author> <title> Automatic technology mapping for generalized fundamental-mode asynchronous designs. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (June 1993), </booktitle> <pages> pp. 61-67. </pages>
Reference-contexts: It is hoped this work will open up avenues in the future to mix many protocols within a single design. 23 1.5.5 Support Complex-gate Design Although interacting burst-mode controllers can be built efficiently using standard gate-level cell libraries <ref> [81, 104] </ref>, even better performance may be obtained by mapping the burst-mode controllers to custom CMOS complex-gate implementations. Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers [23, 108]. There are several reasons for considering custom CMOS complex-gate based circuits. <p> This differs from the approach where one chooses standard gates from a library to implement the required boolean function in a hazard free manner <ref> [81, 104, 58] </ref>. Techniques will be presented for the efficient synthesis of hazard free Boolean functions under multiple input change. In addition, the problem of obtaining a multilevel network of such CMOS gates will also be considered. <p> A BDD based method [58] that targets multilevel multiplexor based networks has been developed and has been shown to produce efficient circuits. Technology mapping techniques to perform hazard nonincreasing mapping of two-level AND-OR networks into complex gate networks from a standard cell library have been given in <ref> [104] </ref>. Other technology mapping techniques have implemented Boolean functions as single gate hazard free CMOS complex gate circuits [108, 23], where the Boolean function is implemented as a single gate, i.e., as a network of p and n channel transistors. <p> A method in [58] is given to derive multilevel circuits using BDDs that target multiplexer based circuits. The multiplexers in this method are assumed to be hazard free. Work in <ref> [104] </ref> targets multilevel hazard free circuits, by starting from a hazard free two-level circuit. An extension of this standard complex gate library based approach aimed at deriving cutomized complex gates is presented. The need for a new method to specifically target customized CMOS gates will be motivated. <p> The need for a new method to specifically target customized CMOS gates will be motivated. An alternate method that targets CMOS gates and can take advantage of multilevel realizations to provide solutions to a larger class of circuits will be presented. The method presented in <ref> [104] </ref> proceeds in three steps. First the hazard free two-level function is decomposed into base functions using De Morgan's theorem and associative laws. The circuit is then partitioned into cones using a heuristic.
Reference: [105] <author> Sparsoe, J., and Staunstrup, J. </author> <title> Design and performance evaluation of delay insensitive multi-ring structures. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <publisher> Eds. </publisher>
Reference-contexts: Timed Petri nets can model systems with these characteristics, and therefore are central to our approach. 100 Asynchronous circuit performance analysis has been conducted at an analytical level by <ref> [105, 125, 17] </ref>. Their work is primarily concerned with the study of asynchronous pipelines. They do not consider data dependent behaviors, arbitration, or resource usages. Petri nets have been widely used for studying asynchronous computations [75] as well as for modeling and synthesizing synchronous [89] and asynchronous circuits.
Reference: [106] <author> Sproull, R. F., and Sutherland, I. E. </author> <title> Asynchronous Systems. Sutherland, </title> <publisher> Sproull and Associates, </publisher> <address> Palo Alto, </address> <year> 1986. </year> <title> Vol. I: Introduction, Vol. II: Logical effort and asynchronous modules, Vol. III: Case studies. </title>
Reference-contexts: We also have Petri net descriptions in which each of the Petri net transitions is annotated with signal transitions on wires. In the case of two-phase protocols we have subclass of I-nets <ref> [106] </ref> and in the case of four-phase we have Petri nets with signal transitions that have polarities associated with them. The controller generated at this step may be partitioned and burst mode state machines can then be generated from them. <p> Synthesis from Petri nets with event annotations (known as I-nets) was first suggested in <ref> [106] </ref> and extended to derive burst mode circuit implementations in [38]. The technique used in these works was to derive state graphs (interface state graphs) to completely enumerate all possible behaviors of the specification and obtain a single implementation that satisfies these behaviors. <p> The two-phase controllers are abstract representations of the behavior since they make no assumptions about the polarities of each signal transition. In <ref> [106] </ref> a technique was proposed to convert such two-phase Petri net descriptions (I-Nets) into state graphs and to derive implementations directly from the state graphs. <p> A two-phase I-net description is converted into an Encoded Interface State Graph (EISG) <ref> [106] </ref> by obtaining a reachability graph for the I-net and assigning an encoding for such a reachability graph. EISGs are automata that label their state transitions with polarized signal transitions (e.g., "a rising" (a+), "b falling" (b-), etc.). Techniques for obtaining encoded state graphs have been given in [106]. <p> Graph (EISG) <ref> [106] </ref> by obtaining a reachability graph for the I-net and assigning an encoding for such a reachability graph. EISGs are automata that label their state transitions with polarized signal transitions (e.g., "a rising" (a+), "b falling" (b-), etc.). Techniques for obtaining encoded state graphs have been given in [106]. Finally, the EISG is converted into a burst-mode machine using our algorithm burst-mode reduction (detailed later), and the resulting burst-mode machine is synthesized using an existing tool (e.g., see [85, 132, 23]). <p> Other definitions are also available [71, 100]. 138 * EDA. Electronic Design Automation. Referred to CAD tools for VLSI design in the industry. * EISG. Encoded Interface State Graph. These refer to state graphs obtained from Petri net descriptions that have been uniquely encoded with state bits. Proposed in <ref> [106] </ref>. * GTPN. Generalized Timed Petri Net. A Petri net formalism used for stochastic performance analysis [43]. * HDL. Hardware Description Languages. Usually used to describe hardware at various levels of abstraction. Examples are behavior level and register transfer level modeling using languages such as Verilog and VHDL. * MIC.
Reference: [107] <author> Sternheim, E., Singh, R., and Trivedi, Y. </author> <title> Digital Design with Verilog HDL. </title> <publisher> Automata Publishing Company, </publisher> <address> Cupertino, CA, 95014, </address> <year> 1990. </year> <note> ISBN 0-9627488-0-3. </note>
Reference-contexts: These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog <ref> [114, 107] </ref> and VHDL [90, 7] have emerged as standards in the industry. Support for these languages is becoming an important factor in the acceptability of tools for VLSI design. <p> All other Verilog behavioral and concurrent process constructs are also supported. Examples of the constructs supported in the subset of the Verilog language <ref> [114, 107] </ref> include if-then-else statements, various loop statements, multiway branching statements, functions, events, named events as well as sequential and parallel blocks. 37 The use of channels in our Petri net language posed a problem since Verilog has no equivalent for these communication primitives.
Reference: [108] <author> Stevens, K. </author> <type> Ph.d thesis. Tech. rep., </type> <institution> Computer Systems Dept, University of Calgary, </institution> <year> 1994. </year>
Reference-contexts: Within the class of logic hazards, there are single-input change (SIC) hazards and multiple-input change 9 (MIC) hazards. Additionally, each class of hazards (function and logic) includes both static and dynamic hazards. Essential hazards <ref> [117, 108, 130] </ref> may also result due to the feedback path. In [81], a modified Quine-McCluskey algorithm has been presented for hazard free two-level minimization. Static and dynamic hazard free AND/OR gates are derived for a given set of MIC transitions. <p> Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers <ref> [23, 108] </ref>. There are several reasons for considering custom CMOS complex-gate based circuits. As VLSI feature sizes decrease and wire delays become significant, customized CMOS complex-gates may provide more efficient controller implementations compared to those obtained through standard-cell place and route tools. <p> In addition, the problem of obtaining a multilevel network of such CMOS gates will also be considered. Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman mode asynchronous controllers <ref> [23, 108] </ref>, although a systematic analysis and synthesis methodology for deriving these have not been previously given. There are several reasons for considering customized CMOS complex gate based circuits. <p> Technology mapping techniques to perform hazard nonincreasing mapping of two-level AND-OR networks into complex gate networks from a standard cell library have been given in [104]. Other technology mapping techniques have implemented Boolean functions as single gate hazard free CMOS complex gate circuits <ref> [108, 23] </ref>, where the Boolean function is implemented as a single gate, i.e., as a network of p and n channel transistors. However, no systematic procedure to derive such CMOS gates has been outlined.
Reference: [109] <author> Stok, L. </author> <title> Data path synthesis. Integration, </title> <journal> the VLSI journal 18, </journal> <month> 1 </month> <year> (1994). </year>
Reference-contexts: In syntax directed translation each high level action is macroexpanded into a sequence of actions on control signals associated with allocated hardware resources. Efficient resource allocation techniques are necessary for architectural synthesis. Research in synchronous architectural synthesis has addressed the problem of allocation <ref> [109] </ref>. <p> A thorough analysis of the design methods and their applicability to particular situations is necessary. * The problem of sharing resources optimally during high level synthesis and application of high level optimizations remains open for further research. This problem has been extensively researched in synchronous high level synthesis <ref> [109] </ref> and it appears that some of these ideas can be extended to asyn chronous circuit design. 8.2.2 Partitioning A method is presented in this dissertation that allows partitioning of incom pletely specified machines. Some open problems are: * Automatic Partitioning.
Reference: [110] <author> Sutherland, I. Micropipelines. </author> <note> Communications of the ACM (June 1989). The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: This requirement is usually satisfied by using additional macromodules such as Toggles <ref> [110] </ref> and/or Decision-waits [28] that are used to steer the global input to the right subcontroller. In order to provide this translation of inputs we have to rely on a standard available library of such elements (such as toggle elements). <p> When the receiver is finished with its processing it produces an acknowledge event by passing that token back to the sender. The sender and receiver may be data path modules or control elements (distributed or centralized) all of which must be self-timed. Many methods use self-timed blocks <ref> [101, 110] </ref>, which encode data using one wire for each data bit. In this case if an n-bit data value is to be passed at the 16 output, then n+2 wires need to be used (n bits for data, one request bit and one acknowledge bit). <p> Two frequently used communication protocols are two-phase and four-phase signaling. Two-phase transition signalling <ref> [66, 110, 13] </ref> uses transitions on event wires to communicate the request and acknowledge events described previously. <p> The micropipeline style of design uses delay insensitive control circuits built using delay insensitive components with self-timed data paths using delay matching. This style of design deserves separate discussion since it can lead to very efficient implementations for arithmetic units. In <ref> [110] </ref>, this work was first presented based on the following basic ideas: that of using two-phase transition signaling protocol, pipelined organization of the computation, the use of a basic set of delay insensitive library modules to implement control, and self-timed bundled data paths. 1.4.5 Scheduling and Allocation A great deal of <p> This information is useful in predicting the performance of the arbiter for different "traffic" situations. 6.3.2 The Nonsynchronous RISC (NSR) Architecture The NSR processor is a general purpose processor structured as a collection of self-timed units that operate concurrently and communicate over bundled data channels in the style of micropipelines <ref> [110] </ref>. The NSR pipeline stages correspond to standard synchronous pipeline stages such as Instruction Fetch, Instruction 110 Decode, Execute, Memory Interface and Register File. However, each stage operates concurrently as a separate self-timed process.
Reference: [111] <author> Tamir, Y., and Chi, H.-C. </author> <title> Symmetric crossbar arbiters for VLSI communication switches. </title> <journal> IEEE Transactions on Paralled and Distributed Systems 4, </journal> <volume> 1 (1993), </volume> <pages> 13-27. </pages>
Reference-contexts: This approach makes it possible to apply the results of Section 6.2.2 to hierarchical Petri nets as well. 6.3 Examples Two examples are considered in this section. In Section 6.3.1, we present the analysis of a symmetric crossbar arbiter <ref> [111] </ref>. Arbiters are control intensive circuits whose performance is critical to the overall performance of the asynchronous 107 system using them. The crossbar circuit considered here is the asynchronous version proposed in [36]. This example demonstrates the ability of GTPN to allow conditional (state dependent) probabilities.
Reference: [112] <author> Tan, C., Menon, P. R., and Friedman, A. D. </author> <title> Structural simplification and decomposition of asynchronous sequential circuits. </title> <journal> IEEE Transactions on Computers (Sept. </journal> <year> 1969), </year> <pages> 830-838. 148 </pages>
Reference-contexts: One should be able to extend the basic ideas developed in this thesis to STGs. * Exact state machine decomposition is another way to design distributed controllers. There is a body of work that deals with cascade and serial optimal state machine decomposition <ref> [112] </ref>. These methods do not guarantee optimal decomposition.
Reference: [113] <author> T.E.Williams, and Horowitz, M. </author> <title> A zero-overhead self-timed 160ns 54bit cmos divider. </title> <journal> IEEE Journal of Solid State Circuits 26, </journal> <volume> 11 (Nov. </volume> <year> 1991), </year> <pages> 1651-1661. </pages>
Reference-contexts: Since there is no such global measure of time in asynchronous circuits, the problem is much more difficult. In addition, asynchronous circuits are often used to realize systems such as high-performance communication front-ends [23], high-performance cache memory subsystems [79], complex arbiter circuits [36], high performance arithmetic units <ref> [113] </ref>, and decou-pled processors [31, 14] whose execution time is data dependent. The execution characteristics of these systems are very decoupled as well as probabilistic in nature. Arbitration for shared resources is an important concern in most of these systems.
Reference: [114] <author> Thomas, D. E., and Moorby, P. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: These include support for CSP style channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog <ref> [114, 107] </ref> and VHDL [90, 7] have emerged as standards in the industry. Support for these languages is becoming an important factor in the acceptability of tools for VLSI design. <p> The description of these functions are usually given separately with the Petri net representation but have not been shown in Figure 2.4. 2.3 Verilog The Verilog hardware description language <ref> [114] </ref> provides the digital system designer with a mean of describing a digital system a wide range of levels of abstraction, and at the same time, provides access to computer-aided tools to aid in the design process at these levels. <p> All other Verilog behavioral and concurrent process constructs are also supported. Examples of the constructs supported in the subset of the Verilog language <ref> [114, 107] </ref> include if-then-else statements, various loop statements, multiway branching statements, functions, events, named events as well as sequential and parallel blocks. 37 The use of channels in our Petri net language posed a problem since Verilog has no equivalent for these communication primitives.
Reference: [115] <author> Udding, J. T. </author> <title> Classification and Composition of Delay-Insensitive Circuits. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1984. </year>
Reference-contexts: A delay-insensitive (DI) circuit is one that operates correctly according to its specification when modeled with unbounded wire delay <ref> [64, 55, 71, 100, 28, 115] </ref>. It has been shown that very few circuits built out of basic gates operate in a delay insensitive manner although various assumptions and design styles have been developed to overcome this problem. <p> Two key transformation are performed. (1) Inputs that were sequential are collected into bursts. By Udding's <ref> [115] </ref> condition of delay insensitivity, the system should be capable of accepting a burst of inputs if it can accept the inputs in any particular order.
Reference: [116] <author> Udding, J. T. </author> <title> A formal model for defining and classifying delay-insensitive circuits. </title> <booktitle> Distributed Computing 1, 4 (1986), </booktitle> <pages> 197-204. </pages>
Reference-contexts: * The subset property must be obeyed, i.e., the signal-burst that labels a transition going out of a place p with more than one out-degree should not be a subset of a signal-burst that labels another transition going out of p. * An SFJ graph represents a delay insensitive behavior <ref> [116] </ref>. 3.2.2 Identifying Stand-alone Partitions Given SFJ graphs of the kind described in Section 3.2.1, the next step is to identify the partitions.

Reference: [123] <author> Vanbekbergen, P., Lin, B., Goossens, G., and de Man, H. </author> <title> A generalized state assignment theory for transformations on signal transition graphs. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 112-117. </pages>
Reference-contexts: Synthesis of timed graphs called event rule systems have also been researched [77]. Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in <ref> [53, 93, 123] </ref>, have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in [73, 72, 129] propose heuristic techniques for gate-level hazard elimination for speed-independent design.
Reference: [124] <author> Varshavsky, V. I. </author> <title> Hardware support of parallel asynchronous processes. Research Reports Series A, No. </title> <type> 2, </type> <institution> Digital Systems Laboratory, Helsinki Univ. of Technology, Otaniemi, Otakaari 5 A, SF-02150 ESPOO 15, Finland, </institution> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: In [8], a method was proposed to generate speed-independent gate level realizations from a state-graph, where a state-graph is a data structure derived from an STG and was based on the work in <ref> [124] </ref>. Implementations consist of combinational logic blocks and C-elements, where each combinational logic block is implemented out of simple unlimited-fanin AND and OR gates.
Reference: [125] <author> Williams, T. E. </author> <title> Self-Timed Rings and Their Applications to Division. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Timed Petri nets can model systems with these characteristics, and therefore are central to our approach. 100 Asynchronous circuit performance analysis has been conducted at an analytical level by <ref> [105, 125, 17] </ref>. Their work is primarily concerned with the study of asynchronous pipelines. They do not consider data dependent behaviors, arbitration, or resource usages. Petri nets have been widely used for studying asynchronous computations [75] as well as for modeling and synthesizing synchronous [89] and asynchronous circuits. <p> In the first category, decision-free Petri net structures are used to model computations [96] whereas in the second category, Petri nets with decisions (or "choices") are allowed [134, 43]. Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams <ref> [17, 125] </ref>. These authors model the computation as a constraint-graph and solve performance equations using linear programming techniques.
Reference: [126] <author> Williams, T. E., and Horowitz, M. A. </author> <title> A 160ns 54bit CMOS division implementation using self-timing and symmetrically overlapped SRT stages. </title> <booktitle> In Proceedings of the 10th IEEE Symposium on Computer Arithmetic (1991), </booktitle> <editor> P. Ko-rnerup and D. W. Matula, </editor> <booktitle> Eds., </booktitle> <pages> pp. 210-217. 149 </pages>
Reference-contexts: The Post Office chip [23, 21] and the synthesis of a receiver for an Infrared Communications Protocol [61] have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs. A floating point divider chip <ref> [126, 127, 102] </ref> has demonstrated the advantages of micropipeline ring style design and has recently shipped as a commercial part. Other examples include the design of low power asynchronous chips at Philips labs [121, 120, 122] and the design of a SCSI controller at AMD [130].
Reference: [127] <author> Williams, T. E., and Horowitz, M. A. </author> <title> A zero-overhead self-timed 160ns 54b CMOS divider. </title> <journal> IEEE Journal of Solid-State Circuits 26, </journal> <volume> 11 (Nov. </volume> <year> 1991), </year> <pages> 1651-1661. </pages>
Reference-contexts: The Post Office chip [23, 21] and the synthesis of a receiver for an Infrared Communications Protocol [61] have demonstrated the suitability of asynchronous circuits in large communications networks and the suitability of asynchronous synthesis techniques for large designs. A floating point divider chip <ref> [126, 127, 102] </ref> has demonstrated the advantages of micropipeline ring style design and has recently shipped as a commercial part. Other examples include the design of low power asynchronous chips at Philips labs [121, 120, 122] and the design of a SCSI controller at AMD [130].
Reference: [128] <author> Yakovlev, A. V., Koelmans, A. M., and Lavagno, L. </author> <title> High level modeling and design of asynchronous circuits. </title> <booktitle> IEEE Design and Test (Spring 1995), </booktitle> <pages> 32-40. </pages>
Reference-contexts: Various forms of partitioning have also been used in asynchronous synthesis such as process decomposition [18, 64], contraction [20, 94], and process refinement <ref> [24, 128] </ref>. Existing techniques in asynchronous synthesis will be briefly summarized. STG based synthesis techniques enumerate all possible behaviors of a Petri net specification and then encode the reachable states. Contraction [20, 94] has been suggested as a partitioning technique for STG specifications.
Reference: [129] <author> Yu, M.-L., and Subrahmanyan, P. A. </author> <title> A path oriented approach for reducing hazards in asynchronous designs. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conference (1992), </booktitle> <pages> pp. 239-244. </pages>
Reference-contexts: Many optimized synthesis methods have been developed, most using modifications of synchronous techniques. The work in [53, 93, 123], have proposed techniques for state minimization and state assignment from STG specifications. Many STG algorithms have also addressed the problem of gate-level hazards. Work in <ref> [73, 72, 129] </ref> propose heuristic techniques for gate-level hazard elimination for speed-independent design. In [54] logic synthesis algorithms are used for hazard analysis and to avoid hazards by adding delay. 1.3.3.2 Asynchronous Finite State Machines Huffman style machines are the main class of asynchronous finite state machines.
Reference: [130] <author> Yun, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Other examples include the design of low power asynchronous chips at Philips labs [121, 120, 122] and the design of a SCSI controller at AMD <ref> [130] </ref>. Asynchronous designs have been pursued for a wide variety of reasons. The motivations range from modularity to possible low power consumption of asynchronous circuits to pure theoretical interest. Since asynchronous systems do not assume a global clock, they have the following possible benefits. <p> Within the class of logic hazards, there are single-input change (SIC) hazards and multiple-input change 9 (MIC) hazards. Additionally, each class of hazards (function and logic) includes both static and dynamic hazards. Essential hazards <ref> [117, 108, 130] </ref> may also result due to the feedback path. In [81], a modified Quine-McCluskey algorithm has been presented for hazard free two-level minimization. Static and dynamic hazard free AND/OR gates are derived for a given set of MIC transitions. <p> Burst mode machines were described in [22]. A formal description of burst-mode specification style and synthesis methods were given in [81] and later extended in <ref> [130] </ref>. In this section the burst mode specification style used in this work will be reviewed. More details can be found in [81]. An asynchronous state machine allowing multiple-input changes can be specified by a form of state diagram, called a burst-mode specification. <p> The goal was to target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis. Therefore burst mode techniques are targeted and currently the 3D <ref> [130] </ref> synthesis tool is used to generate controller circuits. 1.5.4 Support Two-phase and Four-phase Design The ability to support a four-phase protocol comes naturally from our use of the asynchronous finite states as target controllers. <p> The Lager tool set is used for place and route of standard cells for both the datapath and control (when implemented as AND/OR gates). Both commercial and public domain Verilog simulators have been used. The 3D <ref> [130] </ref> tool is used for burst mode synthesis. <p> For each refined Petri net, some required partitions and user defined partitions are derived in Chapter 3. After partitioning, the resulting refined Petri net controllers are converted into burst-mode state machine descriptions. These burst-mode descriptions are then synthesized using the 3D synthesis system <ref> [130] </ref>. Details of reduction of Petri net controllers to burst mode state machines, correctness arguments, and the synthesis of these controllers are given in Chapter 4. Finally, technology mapping is performed either to a standard gate implementation or a customized complex gate implementation. <p> The language supports the early conceptual stages of design with its behavioral constructs, and later implementation stages with its structural constructs. Our work concerns itself mainly with behavioral constructs at the input specification level. Use of Verilog for structural description of logic for burst-mode controllers has been presented in <ref> [130] </ref>. 2.3.1 Embedding the Petri Net Language in Verilog A module in our Petri net language is represented by the module construct in Verilog. Usually Verilog modules could contain more than one process. For the purpose of synthesis we will restrict that each module contain exactly one process. <p> Reshu*ing rules increase signal concurrency but guarantee that the overall causality of the signals is not violated. 4.4 Synthesis of Burst-mode Machines Once the burst mode controllers are generated, any synthesis method that supports burst mode synthesis into Huffman style state machines can be used. Currently the 3D <ref> [130] </ref> method is used to synthesize the circuits, but the UCLOCK [82] 74 75 76 method can also be used. The synthesis methods start from burst-mode specifications, performs state minimization and state assignment followed by logic minimization to obtain hazard-free AND/OR logic for the controllers. <p> For instance, the example used in [81] to demonstrate the absence of a solution for AND-OR implementations has a solution in the SOP-SOP form of complex gate implementations. Circuits from the state machine benchmarks <ref> [130] </ref> were synthesized to find the practical applicability of the techniques presented earlier. In this section we present comparisons between a CMOS complex gate based approach and the gate level design approach. <p> The n pass network is obtained using the SOP implementation for function F and this is a simple two-level AND/OR function. In Figure 5.4 (f) we have shown a circuit for the same output generated by the the two-level minimizer [81] in the 3D <ref> [130] </ref> synthesis tool. Note that an additional state variable has been added to eliminate the hazard problem in this case. <p> In this section, we have provided an algorithm for the synthesis of multilevel complex gate circuits. Many examples have been synthesized using this technique. For these examples, our method obtained a hazard free combinational logic solution whereas the 3D tool <ref> [130] </ref> had to add often one and sometimes two state variables just in order to prevent hazards. In our experiments the input-output latency between the circuit generated by 3D and our complex gate based approach were comparable. <p> The system is shown in Figure 7.1. The resulting refined Petri net controllers are converted into burst-mode state machine descriptions using a tool called Petri2Burst. The burst-mode descriptions are then synthesized using the 3D synthesis system <ref> [130] </ref>. 118 Finally, technology mapping is performed either to a standard gate implementation or a customized complex gate implementation. If customized complex-gate implementations are synthesized, the Cadence layout tool LAS is used to generate automatic layout. <p> The refined Petri net representations for the controllers are converted into burst-mode specifications in the same format as required for input to the 3D system. The Petri2Burst algorithm consists of two main algorithms, namely, conversion of refined Petri net to EISGs and reduction of EISGs to burst-mode specifications. 3D <ref> [130] </ref> is a public domain tool. It accepts a burst-mode specification as input and generates a set of boolean equations that implement the controller given by the specification. The primary components of this method are state minimization, state assignment and logic minimization.
Reference: [131] <author> Yun, K. Y., and Dill, D. L. </author> <title> Automatic synthesis of 3D asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer-Aided Design (ICCAD) (Nov. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 576-580. </pages>
Reference-contexts: Methods are also currently being investigated to derive generalized C element implementations for burst mode circuits. In this chapter, we will specifically address the problem of deriving hazard free customized CMOS realizations for asynchronous controllers under multiple-input change. This problem is encountered during the synthesis of burst mode circuits <ref> [83, 131] </ref> and is a general problem in asynchronous synthesis. 5.1 Key Contributions The techniques we propose in this chapter have the following important features: * The hazard properties of single CMOS gate implementations are described under the unbounded gate and wire delay assumptions. <p> It is clear that this problem does not have a solution in the two-level combinational circuit form. The standard techniques add state variables in such situations in order to solve the problem <ref> [131] </ref>. Adding state variable does give a solution but makes the circuit sequential. A multilevel combinational circuit for the output x will be derived. In order to derive a multilevel solution, first all the required cubes and DHF prime implicants for a two-level implementation are derived.
Reference: [132] <author> Yun, K. Y., Dill, D. L., and Nowick, S. M. </author> <title> Synthesis of 3D asynchronous state machines. </title> <booktitle> In Proc. International Conf. Computer Design (ICCD) (Oct. 1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 346-350. </pages>
Reference-contexts: Techniques for obtaining encoded state graphs have been given in [106]. Finally, the EISG is converted into a burst-mode machine using our algorithm burst-mode reduction (detailed later), and the resulting burst-mode machine is synthesized using an existing tool (e.g., see <ref> [85, 132, 23] </ref>). The algorithm for 65 66 67 burst-mode reduction from EISG traverses a path of the state graph starting from the starting state, collecting input transitions into a set called an input-burst, until it encounters a state that has only arcs labeled by output signal transitions exiting it.
Reference: [133] <author> Yun, K. Y., Dill, D. L., and Nowick, S. M. </author> <title> Automatic synthesis of 3D asynchronous state machines from burst-mode specifications. </title> <type> Tech. rep., </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1994. </year>
Reference-contexts: Many synthesis methods that support hazard free gate-level realization from burst-mode specifications are available. Work in [81] formalized the burst-mode style of specification, targeted locally clocked implementations and provided algorithms for two-level minimization under multiple-input change. This work was extended by <ref> [133] </ref> to allow Huffman style state machine implementations where conditionals and "don't cares" were supported and an optimized implementation was targeted where outputs could feed back as state variables.
Reference: [134] <author> Zuberek, W. </author> <title> Timed petri nets and preliminary performance evaluation. </title> <booktitle> In 7th Annual International Symposium on Computer Architecture (1980), </booktitle> <pages> pp. 88-96. </pages>
Reference-contexts: Basically one can observe two categories of works in this area. In the first category, decision-free Petri net structures are used to model computations [96] whereas in the second category, Petri nets with decisions (or "choices") are allowed <ref> [134, 43] </ref>. Recent work on asynchronous circuit performance analysis falling under the first category include the works of Burns and of Williams [17, 125]. These authors model the computation as a constraint-graph and solve performance equations using linear programming techniques. <p> Our usage of long-run time in this manner is related to <ref> [134] </ref>, which uses this notion on examples with a single recurrence class. It is important to note that this long-run time is useful in the comparison of different designs and serves as a numerical measure with which to compare the designs. For example, Zuberek [134] has suggested that by using this <p> in this manner is related to <ref> [134] </ref>, which uses this notion on examples with a single recurrence class. It is important to note that this long-run time is useful in the comparison of different designs and serves as a numerical measure with which to compare the designs. For example, Zuberek [134] has suggested that by using this approach two architectures can be compared against each other, although he does this only for systems that can be modeled as Petri nets with a single recurrence class.
References-found: 127

