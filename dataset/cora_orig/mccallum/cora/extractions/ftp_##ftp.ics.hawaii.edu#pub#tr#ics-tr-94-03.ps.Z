URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-94-03.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Email: johnson@hawaii.edu  
Phone: (808) 956-3489  
Title: SUPPORTING TECHNOLOGY TRANSFER OF FORMAL TECHNICAL REVIEW THROUGH A COMPUTER SUPPORTED COLLABORATIVE REVIEW SYSTEM  
Author: Philip M. Johnson 
Address: Honolulu, HI 96822  
Affiliation: Department of Information and Computer Sciences University of Hawaii  
Abstract: Formal technical review (FTR) is an essential component of all modern software quality assessment, assurance, and improvement techniques, and is acknowledged to be the most cost-effective form of quality improvement when practiced effectively. However, traditional FTR methods such as inspection are very difficult to adopt in organizations: they introduce substantial new up-front costs, training, overhead, and group process obstacles. Sustained commitment from high-level management along with substantial resources is often necessary for successful technology transfer of FTR. Since 1991, we have been designing and evaluating a series of versions of a system called CSRS: an instrumented, computer-supported cooperative work environment for formal technical review. The current version of CSRS includes an FTR method definition language, which allows organizations to design their own FTR method, and to evolve it over time. This paper describes how our approach to computer supported FTR can address some of the issues in technology transfer of FTR. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Lowell Jay Arthur. </author> <title> Improving Software Quality. </title> <booktitle> Wi-ley Professional Computing, </booktitle> <year> 1993. </year>
Reference: [2] <author> Victor Basili, Michael Daskalantonakis, and Robert Yacobellis. </author> <title> Technology transfer at Motorola. </title> <journal> IEEE Software, </journal> <volume> 11(4), </volume> <month> March </month> <year> 1994. </year>
Reference: [3] <author> V.R. Basili, R.W. Selby, and D.H. Hutchins. </author> <title> Experimentation in software engineering. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):733-743, </volume> <month> July </month> <year> 1986. </year>
Reference: [4] <author> Bill Brykczynski, Reginald Meeson, and David A. Wheeler. </author> <title> Software inspection: Eliminating software defects. </title> <booktitle> In Proceedings of the Sixth Annual Software Technology Conference, </booktitle> <address> Alexandria, VA., </address> <month> May </month> <year> 1994. </year>
Reference: [5] <author> Stephen Doheny-Farina. Rhetoric, </author> <title> Innovation, Technology: Case Studies of Technical Communication in Technology Transfers. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: [6] <author> Michael E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <year> 1976. </year>
Reference: [7] <author> Michael E. Fagan. </author> <title> Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7):744-751, </volume> <month> July </month> <year> 1986. </year>
Reference: [8] <author> Robert Grady and Tom Van Slack. </author> <title> Key lessons in achieving widespread inspection use. </title> <journal> IEEE Software, </journal> <volume> 11(4), </volume> <month> July </month> <year> 1994. </year>
Reference: [9] <author> Jonathan Grudin. </author> <title> Groupware and social dynamics: Eight challenges for developers. </title> <journal> Communications of the ACM, </journal> <volume> 37(1) </volume> <pages> 92-105, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: A groupware application to support teams of five nurses that initially appeals to only one nurse in five is a big disaster. <ref> [9] </ref> Interestingly, there is a great deal of overlap between the technology transfer problems of groupware and that of FTR. An FTR method that initially appeals to only one developer in five is also a big disaster.
Reference: [10] <author> Philip M. Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the 1992 Conference on Computer Supported Cooperative Work, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: introduction, we will describe how the process modelling language for FTR in CSRS can be used to facilitate the technology transfer process. 3 CSRS: Computer Supported FTR Defini tion and Enactment CSRS is a multi-user, interactive hypertext environment for performing FTR, implemented using the Egret collaborative work environment <ref> [10] </ref>. Egret has a client-server architecture, where a database back-end server Unix process written in C++ communicates over TCP/IP to X window client processes implemented using a customized version of Lucid Emacs.
Reference: [11] <author> Philip M. Johnson. </author> <title> An instrumented approach to improving software quality through formal technical review. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <month> May </month> <year> 1994. </year>
Reference: [12] <author> Philip M. Johnson and Danu Tjahjono. </author> <title> Improving software quality through computer supported collaborative review. </title> <booktitle> In Proceedings of the Third Euro-pean Conference on Computer Supported Cooperative Work, </booktitle> <month> September </month> <year> 1993. </year>
Reference: [13] <author> Philip M. Johnson, Danu Tjahjono, Dadong Wan, and Robert Brewer. </author> <title> Experiences with CSRS: An instrumented software review environment. </title> <booktitle> In Proceedings of the Pacific Northwest Software Quality Conference, </booktitle> <year> 1993. </year>
Reference: [14] <author> John C. Knight and E. Ann Myers. </author> <title> An improved inspection technique. </title> <journal> Communications of The ACM, </journal> <volume> 11(11) </volume> <pages> 51-61, </pages> <month> November </month> <year> 1993. </year>
Reference: [15] <author> Richard C. Linger. </author> <title> Cleanroom software engineering for zero-defect software. </title> <booktitle> In Proceedings of the 15th International Conference on Software Engineering, </booktitle> <year> 1993. </year>
Reference: [16] <author> G. Myers. </author> <title> A controlled experiment in program testing and code walkthrough/ inspection. </title> <journal> Communications of the ACM, </journal> <volume> 21(9) </volume> <pages> 760-768, </pages> <month> September </month> <year> 1978. </year>
Reference: [17] <editor> George Orwell. Nineteen eighty-four. </editor> <publisher> Clarendon Press, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: Second, developers were concerned about the detailed data to be gathered: the idea that their activities were being so precisely monitored caused repeated reference to the Big Brother <ref> [17] </ref> nature of the system, with its attendant possibility of management abuse. Finally, there was a class of problems raised by both managers and developers concerning the use of a computer-supported cooperative work system to replace a manual process. Such groupware technology transfer problems are significant.
Reference: [18] <author> Mark C. Paulk, Bill Curtis, and Mary Beth Chris-sis. </author> <title> Capability maturity model, Version 1.1. </title> <journal> IEEE Software, </journal> <volume> 10(4), </volume> <month> July </month> <year> 1993. </year>
Reference: [19] <author> Glen W. Russell. </author> <title> Experience with inspection in ultralarge-scale developments. </title> <journal> IEEE Software, </journal> <month> Jan-uary </month> <year> 1991. </year>
References-found: 19

