URL: http://www.it.kth.se/docs/Reports/se/refl-jfgcs.ps.Z
Refering-URL: http://www.it.kth.se/docs/Reports/se/
Root-URL: http://www.it.kth.se
Email: [tyugu, mattin]@it.kth.se  
Title: DECLARATIVE REFLECTION TOOLS FOR AGENT SHELLS  
Author: Enn Tyugu, Mattin Addibpour 
Keyword: Declarative reection; Intelligent agents; Metaprogramming.  
Note: 1.0 Introduction  
Address: Electrum-204 KTH, 164 40 Kista, Sweden  
Affiliation: Department of Teleinformatics, Royal Institute of Technology  
Abstract: This paper introduces declarative reection schemata and describes implementation tools for it. The keywords are planning and inference, i.e. a declarative (non-procedural) description of self must exist and be used for making inferences about the future activities of the reective system and about consequences of these activities. The NUT system is used as a platform for intelligent agents with reection. NUT processes running in a network are agent shells filled with knowledge in the form of NUT packages. A knowledge-based technique supported by automatic synthesis of programs is used for declarative reection: a reection schema with a model of self managed by daemons is implemented using run-time compilation/decompilation of classes and metaprogramming with productions. We use a concept of declarative reection in order to distinguish a reection where actions are planned and performed depending on the nonprocedural description (model) of the self from a parametric and procedural reection. The keywords here are planning and inference, i.e. we require that a declarative (nonprocedural) description of the self must exist and be used for making inferences about the future activities of a reective system, as well as about the consequences of these activities. The tools needed for implementing systems with declarative reection are necessarily much more complicated than basic tools needed for procedural reection. They must contain an inference engine which is expected to operate reliably and efficiently without the interference from outside (from a user). In a number of implementations of reection, a procedural approach has been taken which leads to reective towers in functional programming [3, 11] and from object-to-the-bottom principle in object-oriented programming to the metaobject protocols [4]. Reection in logic programming is the closest to the declarative reection which we propose here, because inference is inherently used in the metapredicate Demo. Model of self is represented in this case in the same language as the whole program which we call self. Reection can be realized at the lowest level procedurally as soon as programs can be handled as data. In this case, the reection can be implemented in a straightforward way, first, by representing (reifying) the self and its environment as data in a form chosen by the developer of a reective system rather arbitrarily, and, second, building 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-R. </author> <title> Abrial, Steam-boiler Control Specification Problem, A problem suggestion for the Dagstuhl Meeting on Methods for semantic and specification, </title> <month> August, </month> <year> 1994. </year>
Reference: [2] <author> M. Addibpour, </author> <title> Control Structures for Parallel Computing in NUT, </title> <institution> MSc Thesis TRITA-IT R 95:18, Dept. of Teleinformatics, Royal Institute of Technology, Stockholm, </institution> <year> 1995. </year>
Reference: [3] <author> J. des Rivires and B. C. Smith, </author> <booktitle> The Implementation of Procedurally Reective Languages, Proc. ACM Conference on LISP and Functional Programming, </booktitle> <address> Austin, TX, </address> <year> (1984) </year> <month> 331-347. </month>
Reference: [4] <author> G. Kiczales, J. des Rivires and D. G. Bobrow, </author> <title> The Art of the Metaobject Protocol (MIT Press, </title> <address> Cambridge Mass., </address> <year> 1991). </year>
Reference: [5] <author> V. Kotkas and E. Tyugu, </author> <title> Knowledge-Based Techniques for Network Management, </title> <institution> Technical Report TRITA-IT R 94:09, Dept. of Teleinformatics, Royal Institute of Technology, Stockholm, </institution> <year> 1994. </year>
Reference: [6] <author> P. Maes, </author> <title> Concepts and Experiments in Computational Reection, </title> <booktitle> Proc. of ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, </booktitle> <address> Orlando, </address> <year> (1987) </year> <month> 147-156. </month>
Reference: [7] <author> P. Maes, </author> <title> Issues in Computational Reection, </title> <editor> in: P. Maes and D. Nardi, eds., Meta-level Architectures and Reection (North_holland, Amesterdam, </editor> <year> 1988) </year> <month> 21-35. </month>
Reference: [8] <author> M. Matskin and J. Komorowski, </author> <title> Program Synthesis and Transformations in an Object-Oriented Environment, </title> <booktitle> Proc. ERCIM Workshop on Development and Transformations of Programs, </booktitle> <address> Nancy, France, </address> <year> (1993) </year> <month> 131-140. </month>
Reference: [9] <author> G. Mints and E. Tyugu, </author> <title> Justification of the Structural Synthesis of Programs, </title> <booktitle> Science of Computer Programming, </booktitle> <month> 2 (3) </month> <year> (1982) </year> <month> 215-240. </month>
Reference: [10] <author> D. Sidarkeviciute, M. Addibpour and E. Tyugu, </author> <title> Experimental Software Analysis in the NUT System, </title> <institution> Technical Report TRITA-IT R 95:16, Dept. of Teleinformatics, Royal Institute of Technology, Stockholm, </institution> <year> 1995. </year>
Reference: [11] <author> B. Smith, </author> <title> Reection and Semantics in a Procedural Language, </title> <type> Ph.D. thesis MIT-TR-272, </type> <institution> MIT laboratory for Computer Science, Cambridge, Massachusetts, </institution> <year> 1982. </year>
Reference: [12] <author> E. Tyugu and T. Uustalu, </author> <title> Higher-Order Functional Constraint Networks, </title> <booktitle> Proc. NATO ASI on Constraint Programming, Springer Verlag. NATO ASI Series F: Computer and System Sciences, </booktitle> <month> 131 </month> <year> (1994) </year> <month> 116-139. </month>
Reference: [13] <author> E. Tyugu, </author> <title> Using Classes as Specifications for Automatic Construction of Programs in the NUT System, </title> <journal> J. Automated Software Engineering, </journal> <month> 1 (3-4) </month> <year> (1994) </year> <month> 315-334. </month>
Reference: [14] <author> V. Vlassov, E. Tyugu and M. Addibpour, </author> <title> A Distributed Programming Toolkit for NUT, </title> <institution> Technical Report TRITA-IT R 94:34, Dept. of Teleinformatics, Royal Institute of Technology, Stockholm, </institution> <year> 1994. </year>
References-found: 14

