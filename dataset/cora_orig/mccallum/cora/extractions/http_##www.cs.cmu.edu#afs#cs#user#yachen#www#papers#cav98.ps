URL: http://www.cs.cmu.edu/afs/cs/user/yachen/www/papers/cav98.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/user/yachen/www/publication.html
Root-URL: 
Email: yachen+@cs.cmu.edu, bryant+@cs.cmu.edu  
Title: Verification of Floating-Point Adders  
Author: Yirng-An Chen and Randal E. Bryant 
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Dept., Carnegie Mellon Univ.,  
Abstract: In this paper, we present a "black box" version of verification of FP adders. In our approach, FP adders are verified by an extended word-level SMV using reusable specifications without knowing the circuit implementation. Word-level SMV is improved by using Multiplicative Power HDDs (*PHDDs), and by incorporating conditional symbolic simulation as well as a short-circuiting technique. Based on a case analysis, the adder specification is divided into several hundred implementation-independent sub-specifications. We applied our system and these specifications to verify the IEEE double precision FP adder in the Aurora III Chip from the University of Michigan. Our system found several design errors in this FP adder. Each specification can be checked in less than 5 minutes. A variant of the corrected FP adder was created to illustrate the ability of our system to handle different FP adder designs. For each adder, the verification task finished in 2 CPU hours on a Sun UltraSPARC-II server.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> BROCK, B., KAUFMANN, M., AND MOORE, J. S. </author> <title> ACL2 theorems about commerical microprocessors. </title> <booktitle> In Proceedings of the Formal Methods on Computer-Aided Design (November 1996), </booktitle> <pages> pp. 275293. </pages>
Reference-contexts: Most of the IEEE FP standard has been formalized by Carreno and Miner [4] for the HOL and PVS theorem provers. To verify arithmetic circuits, theorem provers require users to guide the proof which is structured as series of lemmas describing the effect of circuit modules and their interactions <ref> [1] </ref>. Thus, the verification process is very tedious and implementation-dependent. After the famous Pentium division bug [10], Intel researchers applied word-level SMV [9] with Hybrid Decision Diagrams (HDDs) [8] to verify the functionality of the FP unit in one of Intel's processors [7].
Reference: 2. <author> BRYANT, R. E. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> In IEEE Transactions on Computers (August 1986), </journal> <pages> pp. </pages> <month> 8:677691. </month>
Reference-contexts: To the best of our knowledge, only two types of arithmetic circuits can be verified by treating them as black boxes (i.e., the specifications contain only the inputs and outputs). First, an integer adder can be verified by using Binary Decision Diagrams (BDDs) <ref> [2] </ref>. Second, Hamaguchi et al [13] presented the verification of integer multipliers without knowing their implementations using Multiplicative Binary Moment Diagrams (*BMDs) [3]. However, their approach does not work for incorrect designs, because the *BMDs explode in size and counterexamples can not be generated for debugging.
Reference: 3. <author> BRYANT, R. E., AND CHEN, Y.-A. </author> <title> Verification of arithmetic circuits with binary moment diagrams. </title> <booktitle> In Proceedings of the 32nd ACM/IEEE Design Automation Conference (June 1995), </booktitle> <pages> pp. 535541. </pages>
Reference-contexts: First, an integer adder can be verified by using Binary Decision Diagrams (BDDs) [2]. Second, Hamaguchi et al [13] presented the verification of integer multipliers without knowing their implementations using Multiplicative Binary Moment Diagrams (*BMDs) <ref> [3] </ref>. However, their approach does not work for incorrect designs, because the *BMDs explode in size and counterexamples can not be generated for debugging. None of the previous approaches can verify FP adders without knowing their circuit implementations. <p> Readers can refer to [5] for more details of FP representation using *PHDDs. In this verification work, the output Boolean vector of a FP adder are converted into word-level functions represented by *PHDDs using a method similar to one described in <ref> [3] </ref>. Thus, the specifications of FP adders can be expressed in word-level functions using *PHDDs. 3 Floating-Point Adders Let us consider the representation of FP numbers by IEEE standard 754.
Reference: 4. <author> CARRE nO, V. A., AND MINER, P. S. </author> <title> Specification of the IEEE-854 floating-point standard in HOL and PVS. In High Order Logic Theorem Proving and Its Applications (September 1995). </title>
Reference-contexts: However, it is impossible to perform exhaustive simulations for a floating-point adder. Formal verification techniques such as theorem proving and model checking have been used to verify arithmetic circuits. Most of the IEEE FP standard has been formalized by Carreno and Miner <ref> [4] </ref> for the HOL and PVS theorem provers. To verify arithmetic circuits, theorem provers require users to guide the proof which is structured as series of lemmas describing the effect of circuit modules and their interactions [1]. Thus, the verification process is very tedious and implementation-dependent.
Reference: 5. <author> CHEN, Y.-A., AND BRYANT, R. E. *PHDD: </author> <title> An efficient graph representation for floating point circuit verification. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design (November 1997), </booktitle> <pages> pp. 27. </pages>
Reference-contexts: In this paper, we present a black box version of verification of FP adders. In our approach, a FP adder is treated as a black box and is verified by an extended version of word-level SMV with reusable specifications. Word-level SMV is improved by using Multiplicative Power HDDs (*PHDDs) <ref> [5] </ref> to represent the FP functions, and by incorporating conditional symbolic simulation as well as a short-circuiting technique. The FP adder specification is divided into several hundred sub-specifications based on the sign bits and the exponent differences. <p> Since these circuits are much simpler than FP adders and only have one input operand, we believe that our system can be used to verify the correctness of these circuits. 2 *PHDD Overview Chen and Bryant <ref> [5] </ref> introduced a representation, called Multiplicative Power HDDs (*PHDDs), to provide a compact representation for integer and floating-point functions. <p> The power edge weights enable us to represent functions mapping Boolean variables to FP values. To the best of our knowledge, *PHDD is the only decision diagram that can represent integer or floating-point functions efficiently. Readers can refer to <ref> [5] </ref> for more details of FP representation using *PHDDs. In this verification work, the output Boolean vector of a FP adder are converted into word-level functions represented by *PHDDs using a method similar to one described in [3].
Reference: 6. <author> CHEN, Y.-A., AND BRYANT, R. E. </author> <title> Verification of floating-point adders. </title> <type> Tech. Rep. </type> <institution> CMU-CS-98-121, School of Computer Science, Carnegie Mellon University, </institution> <year> 1998. </year>
Reference-contexts: For the close case, the result of mantissa subtraction requires a massive left shift (i.e., LZA is active), which makes the verification harder. Thus, the specifications of the close case must be divided further based on the number of bits to be left shifted. Readers can refer to <ref> [6] </ref> for the details of these specifications. 4.2 Specification Coverage Since the specifications of floating-point adders are split into several hundred sub-specifications, do these sub-specifications cover the entire input space? To answer this question, one might use a theorem prover to check the case splitting.
Reference: 7. <author> CHEN, Y.-A., CLARKE, E. M., HO, P.-H., HOSKOTE, Y., KAM, T., KHAIRA, M., O'LEARY, J., AND ZHAO, X. </author> <title> Verification of all circuits in a floating-point unit using word-level model checking. </title> <booktitle> In Proceedings of the Formal Methods on Computer-Aided Design (November 1996), </booktitle> <pages> pp. </pages> <year> 1933. </year>
Reference-contexts: Thus, the verification process is very tedious and implementation-dependent. After the famous Pentium division bug [10], Intel researchers applied word-level SMV [9] with Hybrid Decision Diagrams (HDDs) [8] to verify the functionality of the FP unit in one of Intel's processors <ref> [7] </ref>. Due to the limitations of HDDs, the FP adder was partitioned into several sub-circuits to be verified. The correctness of the overall circuit had to be ascertained manually from the verified specifications of the sub-circuits. This partitioning approach requires user intervention and thus could be error prone.
Reference: 8. <author> CLARKE, E. M., FUJITA, M., AND ZHAO, X. </author> <title> Hybrid decision diagrams overcoming the limitations of MTBDDs and BMDs. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design (November 1995), </booktitle> <pages> pp. 159163. </pages>
Reference-contexts: Thus, the verification process is very tedious and implementation-dependent. After the famous Pentium division bug [10], Intel researchers applied word-level SMV [9] with Hybrid Decision Diagrams (HDDs) <ref> [8] </ref> to verify the functionality of the FP unit in one of Intel's processors [7]. Due to the limitations of HDDs, the FP adder was partitioned into several sub-circuits to be verified. The correctness of the overall circuit had to be ascertained manually from the verified specifications of the sub-circuits. <p> In other words, the union of the conds can be used to compute the percentage of input space covered by our specifications and to generate the missing cases. 5 Verification System: Extended Word-Level SMV with *PHDDs To verify integer arithmetic circuits, SMV [16] was extended using HDDs <ref> [8] </ref> to handle word level expressions in the specification formulas [9]. For verification of FP circuits, we replaced the HDDs in word-level SMV with *PHDDs and introduced relational operators for FP numbers.
Reference: 9. <author> CLARKE, E. M., KHAIRA, M., AND ZHAO, X. </author> <title> Word level model checking Avoiding the Pentium FDIV error. </title> <booktitle> In Proceedings of the 33rd ACM/IEEE Design Automation Conference (June 1996), </booktitle> <pages> pp. 645648. </pages>
Reference-contexts: Thus, the verification process is very tedious and implementation-dependent. After the famous Pentium division bug [10], Intel researchers applied word-level SMV <ref> [9] </ref> with Hybrid Decision Diagrams (HDDs) [8] to verify the functionality of the FP unit in one of Intel's processors [7]. Due to the limitations of HDDs, the FP adder was partitioned into several sub-circuits to be verified. <p> conds can be used to compute the percentage of input space covered by our specifications and to generate the missing cases. 5 Verification System: Extended Word-Level SMV with *PHDDs To verify integer arithmetic circuits, SMV [16] was extended using HDDs [8] to handle word level expressions in the specification formulas <ref> [9] </ref>. For verification of FP circuits, we replaced the HDDs in word-level SMV with *PHDDs and introduced relational operators for FP numbers.
Reference: 10. <author> COE, T. </author> <title> Inside the Pentium Fdiv bug. </title> <journal> Dr. </journal> <note> Dobbs Journal (April 1996), pp. 129135. </note>
Reference-contexts: 1 Introduction The floating-point (FP) division bug <ref> [10] </ref> in Intel's Pentium processor and the overflow flag erratum of the FIST instruction (FP to integer conversion) [12] in Intel's Pentium Pro and Pentium II processors have demonstrated the importance and the difficulty of verifying FP arithmetic circuits and the high cost of an arithmetic bug. <p> To verify arithmetic circuits, theorem provers require users to guide the proof which is structured as series of lemmas describing the effect of circuit modules and their interactions [1]. Thus, the verification process is very tedious and implementation-dependent. After the famous Pentium division bug <ref> [10] </ref>, Intel researchers applied word-level SMV [9] with Hybrid Decision Diagrams (HDDs) [8] to verify the functionality of the FP unit in one of Intel's processors [7]. Due to the limitations of HDDs, the FP adder was partitioned into several sub-circuits to be verified.
Reference: 11. <author> COUDERT, O., AND MADRE, J. C. </author> <title> A unified framework for the formal verification of sequential circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design (November 1990), </booktitle> <pages> pp. 126129. </pages>
Reference-contexts: Our approach is to apply the conditions directly during the symbolic simulation process. After building the BDD for a circuit gate, the condition is used to simplify the BDD using the restrict <ref> [11] </ref> algorithm. Then, the simplified BDD is used as the input function for the gates connected to this one. This process is repeated until the outputs are reached.
Reference: 12. <author> FISHER, L. M. </author> <title> Flaw reported in new intel chip. </title> <address> New York Times (May 6 1997), D, 4:3. </address>
Reference-contexts: 1 Introduction The floating-point (FP) division bug [10] in Intel's Pentium processor and the overflow flag erratum of the FIST instruction (FP to integer conversion) <ref> [12] </ref> in Intel's Pentium Pro and Pentium II processors have demonstrated the importance and the difficulty of verifying FP arithmetic circuits and the high cost of an arithmetic bug. FP adders are the most common units in FP processors. <p> For each FP adder, verification took 2 CPU hours. We believe that our system and specifications can be applied to directly verify other FP adder designs and to help find design errors. The overflow flag erratum of the FIST instruction (FP to integer conversion) <ref> [12] </ref> in Intel's Pentium Pro and Pentium II processors has illustrated the importance of verification of the conversion circuits which convert the data from one format to another format (e.g., IEEE single precision to double precision). <p> If the subtrahend's variables use the positive Davio decomposition, the *PHDDs for OU T can not be built after a long CPU time (&gt; 4 hours). 7 Conversion Circuits The overflow flag erratum of the FIST instruction (FP to integer conversion) <ref> [12] </ref> in Intel's Pentium Pro and Pentium II processors has illustrated the importance of verification of conversion circuits [14] which convert the data from one format to another. These circuits perform conversions between any of the three number formats: integer, IEEE single precision, and IEEE double precision. <p> For each FP adder, verification finished in 2 CPU hours on a Sun UltraSPARC-II server. We believe that our system and specifications can be applied to directly verify FP adders and to help find errors. The overflow flag erratum of the FIST instruction <ref> [12] </ref> in Intel's Pentium Pro and Pentium II processors has illustrated the importance of verification of conversion circuits which convert data from one format to another.
Reference: 13. <author> HAMAGUCHI, K., MORITA, A., AND YAJIMA, S. </author> <title> Efficient construction of binary moment diagrams for verifying arithmetic circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design (November 1995), </booktitle> <pages> pp. 7882. </pages>
Reference-contexts: To the best of our knowledge, only two types of arithmetic circuits can be verified by treating them as black boxes (i.e., the specifications contain only the inputs and outputs). First, an integer adder can be verified by using Binary Decision Diagrams (BDDs) [2]. Second, Hamaguchi et al <ref> [13] </ref> presented the verification of integer multipliers without knowing their implementations using Multiplicative Binary Moment Diagrams (*BMDs) [3]. However, their approach does not work for incorrect designs, because the *BMDs explode in size and counterexamples can not be generated for debugging.
Reference: 14. <author> HUFF, T. R. </author> <title> Architectural and circuit issues for a high clock rate floating-point processor. </title> <institution> PhD Dissertation in Electrical Engineering Department, University of Michigan (1995). </institution>
Reference-contexts: In general, this short-circuiting technique can be used when different parts of the circuit are used under different operating conditions. We used our system and these specifications to verify the FP adder in the Aurora III Chip <ref> [14] </ref> at the University of Michigan. This FP adder is based on the design described in [17], and supports IEEE double precision and all 4 IEEE rounding modes. <p> Ordering Offset BDD Size CPU Time (Sec.) 0 157 0.68 2 608 1.35 4 2346 3.79 6 9016 13.05 8 34550 61.61 Table 2. Performance measurements of a 52-bit comparator with different orderings. 6 Verification of FP Adders We use the FP adder in the Aurora III Chip <ref> [14] </ref>, designed by Dr. Huff as part of his PhD dissertation at the University of Michigan, as an example to illustrate the verification of FP adders. This adder is based on the same approach as the SNAP FP adder [17] at Stanford University. <p> the *PHDDs for OU T can not be built after a long CPU time (&gt; 4 hours). 7 Conversion Circuits The overflow flag erratum of the FIST instruction (FP to integer conversion) [12] in Intel's Pentium Pro and Pentium II processors has illustrated the importance of verification of conversion circuits <ref> [14] </ref> which convert the data from one format to another. These circuits perform conversions between any of the three number formats: integer, IEEE single precision, and IEEE double precision.
Reference: 15. <author> JAIN, P., AND GOPALAKRISHNAN, G. </author> <title> Efficient symbolic simulation-based verification using the parametric form of boolean expressions. </title> <booktitle> In IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (August 1994), </booktitle> <pages> pp. 10051015. </pages>
Reference-contexts: The concept of conditional symbolic simulation is to perform the simulation process under restricted conditions, expressed as a Boolean function over the inputs. In <ref> [15] </ref>, Jain and Gopalakrishnan encoded the conditions together with the original inputs as new inputs to the symbolic simulator using a parametric form of Boolean expressions, but it is hard to incorporate this approach into word-level SMV. Our approach is to apply the conditions directly during the symbolic simulation process.
Reference: 16. <author> MCMILLAN, K. L. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: In other words, the union of the conds can be used to compute the percentage of input space covered by our specifications and to generate the missing cases. 5 Verification System: Extended Word-Level SMV with *PHDDs To verify integer arithmetic circuits, SMV <ref> [16] </ref> was extended using HDDs [8] to handle word level expressions in the specification formulas [9]. For verification of FP circuits, we replaced the HDDs in word-level SMV with *PHDDs and introduced relational operators for FP numbers.
Reference: 17. <author> QUACH, N., AND FLYNN, M. </author> <title> Design and implementation of the SNAP floating-point adder. </title> <type> Tech. Rep. </type> <institution> CSL-TR-91-501, Stanford University, </institution> <month> December </month> <year> 1991. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: FP adders are the most common units in FP processors. Modern high-speed FP adders <ref> [17] </ref> are very complicated, because they require many types of modules: a right shifter for alignment, a left shifter for normalization, a leading zero anticipator (LZA), an adder for mantissas, and a rounding unit. Formal verification or exhaustive simulation can be used to ensure the correctness of FP adders. <p> We used our system and these specifications to verify the FP adder in the Aurora III Chip [14] at the University of Michigan. This FP adder is based on the design described in <ref> [17] </ref>, and supports IEEE double precision and all 4 IEEE rounding modes. In this verification work, we verified the FP adder only in the round-to-nearest mode, because we believe that this is the most challenging rounding mode for verification. Our system found several design errors. <p> Summary of the FP addition of two numbers of X and Y . F represents the normal and denormal numbers. * indicates FP invalid arithmetic operands. University <ref> [17] </ref>. <p> Huff as part of his PhD dissertation at the University of Michigan, as an example to illustrate the verification of FP adders. This adder is based on the same approach as the SNAP FP adder <ref> [17] </ref> at Stanford University. This FP adder only handles operands with normal values. When the result is a denormal value, it is truncated to 0. This adder supports IEEE double precision format and the 4 IEEE rounding modes. Dr. Huff found several errors with the approach described in [17]. <p> FP adder <ref> [17] </ref> at Stanford University. This FP adder only handles operands with normal values. When the result is a denormal value, it is truncated to 0. This adder supports IEEE double precision format and the 4 IEEE rounding modes. Dr. Huff found several errors with the approach described in [17]. In this verification work, we verify the adder only in round to nearest mode, because we believe that the round to nearest mode is the hardest one to verify. All experiments were carried out on a Sun 248 MHz UltraSPARC-II server with 1.5 GB memory. <p> Another design error we found is in the sticky bit generation. The sticky bit generation is based on the table given in page 10 of Quach's paper describing the SNAP FP adder <ref> [17] </ref>. The table only handles cases when the absolute value of the exponent difference is less than 54. The design sets the sticky bit to 1 when the absolute value of the exponent difference is greater than 53 (for normal numbers only). <p> Therefore an entry for the case jE x E y j = 54 is needed in the table of Quach's paper <ref> [17] </ref>. Fig. 5. Sticky bit generation, when E x E y = 54. 6.3 Corrected Designs After identifying the bugs, we fixed SMV version of the circuit. In addition, we created another FP adder by adding the compare unit in Figure 1.b to Huff's design.
References-found: 17

