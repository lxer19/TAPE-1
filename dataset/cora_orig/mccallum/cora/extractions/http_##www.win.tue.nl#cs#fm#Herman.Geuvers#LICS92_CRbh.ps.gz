URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/LICS92_CRbh.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Title: The Church-Rosser Property for fij-reduction in Typed -Calculi  
Author: Herman Geuvers 
Address: Nijmegen, The Netherlands  
Affiliation: Faculty of Mathematics and Computer Science University of Nijmegen  
Abstract: In this paper we investigate the Church-Rosser property (CR) for Pure Type Systems with fij-reduction. For Pure Type Systems with only fi-reduction, CR on well typed terms follows immediately from CR on the so called 'pseudoterms' and subject reduction. For fij-reduction, CR on the set of pseudoterms is just false, as was shown by [Nederpelt 1973]. Here we prove that CR (for fij) on the well-typed terms of a fixed type holds, which is the maximum we can expect in view of Neder-pelts counterexample. The proof is given for a large class of Pure Type systems that contains e.g. LF (for which CR for fij was proved by [Salvesen 1989] and [Coquand 1991]), F, F! and the Calculus of Constructions. In the proof, one key lemma (a very weak form of CR for fij on pseudoterms) takes a central position. It is remarkable that in the proof of this key lemma the counterexample to CR for fij is essentially used. 
Abstract-found: 1
Intro-found: 1
Reference: [Barendregt 1984] <author> H.P. Barendregt, </author> <title> The lambda calculus: its syntax and semantics, revised edition. </title> <booktitle> Studies in Logic and the Foundations of Mathematics, </booktitle> <publisher> North Holland. </publisher>
Reference-contexts: is Church-Rosser on T. (That is, if M !! fi M 1 and M !! fi M 2 then M 1 !! fi N and M 2 !! fi N for some N 2 T. (The proof follows precisely the Church-Rosser proof of fi-reduction on the untyped lambda terms in <ref> [Barendregt 1984] </ref>.) Corollary 2.3 (Confluence of fi on T, CON fi ) If M = fi M 0 then M !! fi N and M 0 !! fi N for some N 2 T. <p> In un-typed lambda calculus, if M !! M 1 and M !! M 2 , a common reduct of M 1 and M 2 can be found using complete developments. (See <ref> [Barendregt 1984] </ref>.) Here one has to do something more, namely reducing the domains: Consider e.g. M := x:A:(y:B:y)x, M 1 := x:A:x and M 2 := y:B:y.
Reference: [Barendregt 199+] <author> H.P. Barendregt, </author> <title> Typed lambda calculi. </title> <editor> In Abramski et al. (eds.), </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <institution> Oxford Univ. </institution> <note> Press, to appear. </note>
Reference-contexts: in [Geuvers and Nederhof 1991] can easily be adapted to the case for fij-reduction.) 2 Pure Type Systems and the exten sion with j-reduction Let's take a look at the definition of Pure Type Systems (PTSs for short) and give some of the meta theory. (See [Geuvers and Nederhof 1991], <ref> [Barendregt 199+] </ref> for more meta-theory and examples.) Definition 2.1 For S a set, A ae S fi S and R ae S fi S fi S, (S; A; R) is the typed lambda calculus with the following deduction rules. 1. (sort) ` s 1 : s 2 if (s 1 ; <p> same as the one introduced before.) The inconsistent type system fl, where 'Type' is a type is also a PTS ((fTypeg; fType:Typeg; f (Type; Type)g) and the notion of PTS also captures logical systems like first, second order and higher order predicate logic, as shown by [Berardi 1988]. (See also <ref> [Barendregt 199+] </ref>.) In this paper we want to study the extension with j-equality. <p> Section 2 gives an outline of the proof. 2.1 Properties of Pure Type Systems Here we give some of the meta-theory for PTSs, mainly those theorems that will be encountered later in the Church-Rosser proof. For detailed proofs we refer to [Geuvers and Nederhof 1991] or <ref> [Barendregt 199+] </ref>. In the following, unless noted otherwise, we work in an arbitrary PTS.
Reference: [van Benthem Jutting 199+] <editor> L.S. van Benthem Jutting, </editor> <title> Typing in Pure Type Systems. </title> <note> To appear in Information and Computation. </note>
Reference-contexts: In the proof one needs strengthening : Proposition 2.7 (Strengthening) If 1 ; x:A; 2 ` M : B with x =2 FV ( 2 ; M; B), then 1 ; 2 ` M : B. The proof is in <ref> [van Benthem Jutting 199+] </ref>. <p> have also seen that confluence for well-typed terms of different types doesn't hold. (And the same for well-typed terms in different contexts; take and 0 such that ` x (y : A:y) : Type and 0 ` x (y : B:y) : Type.) We think that, using the work of <ref> [van Benthem Jutting 199+] </ref>, who gives an analysis of typing in PTSs, these results can be extended to arbitrary normalizing type systems. The most interesting extension, however, seems to be the one to non-normalizing type systems, like fl.
Reference: [Berardi 1988] <author> S. Berardi, </author> <title> Towards a mathematical analysis of the Coquand-Huet calculus of constructions and the other systems in Barendregts cube. </title> <institution> Dept. Computer Science, Carnegie-Mellon University and Dipartimento Matematica, Uni-versita di Torino, Italy. </institution>
Reference-contexts: of F! is the same as the one introduced before.) The inconsistent type system fl, where 'Type' is a type is also a PTS ((fTypeg; fType:Typeg; f (Type; Type)g) and the notion of PTS also captures logical systems like first, second order and higher order predicate logic, as shown by <ref> [Berardi 1988] </ref>. (See also [Barendregt 199+].) In this paper we want to study the extension with j-equality.
Reference: [Coquand 1991] <author> Th. Coquand, </author> <title> An algorithm for testing conversion in type theory. </title> <editor> In Huet and Plotkin (eds.), </editor> <title> Logical Frameworks, </title> <publisher> Cambridge Univ. Press. </publisher>
Reference-contexts: CR fij for LF was proved in [Salvesen 1989] and later by <ref> [Coquand 1991] </ref>, but for more complicated systems with dependent types the question of CR fij was still open. Here we shall prove CR fij for normalizing, functional Pure Type Systems, which includes CC. (There is no proof of normalization for fij-reduction for CC in the literature.
Reference: [van Daalen 1980] <author> D.T. van Daalen, </author> <title> The language theory of AUTOMATH. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven Technological University, The Netherlands. </institution>
Reference: [Geuvers and Nederhof 1991] <author> J.H. Geuvers and M.J. Nederhof, </author> <title> A modular proof of strong normalization for the calculus of constructions. </title> <journal> Journal of Functional Programming, </journal> <volume> vol 1 (2), </volume> <pages> pp 155-189. </pages>
Reference-contexts: Here we shall prove CR fij for normalizing, functional Pure Type Systems, which includes CC. (There is no proof of normalization for fij-reduction for CC in the literature. However, the strong normalization proof for fi-reduction for CC in <ref> [Geuvers and Nederhof 1991] </ref> can easily be adapted to the case for fij-reduction.) 2 Pure Type Systems and the exten sion with j-reduction Let's take a look at the definition of Pure Type Systems (PTSs for short) and give some of the meta theory. (See [Geuvers and Nederhof 1991], [Barendregt 199+] <p> for fi-reduction for CC in <ref> [Geuvers and Nederhof 1991] </ref> can easily be adapted to the case for fij-reduction.) 2 Pure Type Systems and the exten sion with j-reduction Let's take a look at the definition of Pure Type Systems (PTSs for short) and give some of the meta theory. (See [Geuvers and Nederhof 1991], [Barendregt 199+] for more meta-theory and examples.) Definition 2.1 For S a set, A ae S fi S and R ae S fi S fi S, (S; A; R) is the typed lambda calculus with the following deduction rules. 1. (sort) ` s 1 : s 2 <p> Section 2 gives an outline of the proof. 2.1 Properties of Pure Type Systems Here we give some of the meta-theory for PTSs, mainly those theorems that will be encountered later in the Church-Rosser proof. For detailed proofs we refer to <ref> [Geuvers and Nederhof 1991] </ref> or [Barendregt 199+]. In the following, unless noted otherwise, we work in an arbitrary PTS. <p> In the proof one needs strengthening : Proposition 2.7 (Strengthening) If 1 ; x:A; 2 ` M : B with x =2 FV ( 2 ; M; B), then 1 ; 2 ` M : B. The proof is in [van Benthem Jutting 199+]. In <ref> [Geuvers and Nederhof 1991] </ref> a proof is given for a subcollection of PTSs, the so called functional ones: A PTS is functional if the relation A is a function from S to S and the relation R is a function from S fi S to S. (That is, if s : <p> Theorem 3.6 (SR fi ) For i a PTS fij , i j= SR fi . The proofs of the proposition and the theorem are straightforward by redoing the proofs for PTS fi in <ref> [Geuvers and Nederhof 1991] </ref>, using the Key Lemma. <p> This may look problematic but in practice it isn't. For example for the Calculus of Constructions, the strong normalization proof in <ref> [Geuvers and Nederhof 1991] </ref> for the system with (conv fi ) can be adapted to a proof of strong normalization for the system with (conv fij ). In that paper a reduction preserving map from Term (CC) to Term (F!) is defined.
Reference: [Harper et al. 1987] <author> R. Harper, F. Honsell and G. Plotkin, </author> <title> A framework for defining logics. </title> <booktitle> Proceedings Second Symposium on Logic in Computer Science, </booktitle> <address> (Ithaca, N.Y.), </address> <publisher> IEEE, </publisher> <address> Washington DC, </address> <pages> pp 194-204. </pages>
Reference-contexts: The completeness of the interpretation of a formal system in a signature relies on defining a mapping back, from terms in the signature to terms of the formal system, which is defined on (representants of) fij-equivalence classes. (See <ref> [Harper et al. 1987] </ref>.) A nice consequence of CR fij is that the unification algorithms for the Calculus of Constructions, as discussed in [Pfenning 1991] are complete. A semantical reason for strengthening the equality is that in almost all models of type systems the j rule is valid.
Reference: [Jacobs 1991] <author> B.P.F. Jacobs, </author> <title> Categorical type theory. </title> <type> Ph.D. thesis, </type> <institution> University of Nijmegen, The Netherlands. </institution>
Reference-contexts: A semantical reason for strengthening the equality is that in almost all models of type systems the j rule is valid. Further CR fij is essential if we relate the syntax of PTSs to the semantics: The systems that are really interpreted in e.g. [Streicher 1989] and <ref> [Jacobs 1991] </ref> are not the ones as formulated above (with equality on the pseudoterms as a side condition), but with an equality judgement inside the context.
Reference: [Nederpelt 1973] <author> R.P. </author> <title> Nederpelt, Strong normalization in a typed lambda calculus with lambda structured types. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven Technological University, The Netherlands. </institution>
Reference-contexts: If one is interested in the combination of fi- and j-reduction, the situation is a little bit more complicated, because we have the following counterexample to CR for fij-reduction on T ! . (Originally due to <ref> [Nederpelt 1973] </ref>.) Take M := x:oe:(y:o:y)x; with oe 6= o . Then M ! fi x:oe:x and M ! j x:o:x and both are in normal form. <p> We therefore define an erasure mapping from T to fl and give some properties for it. Then we give some properties of fij-reduction and equality on T, which will enable us to prove SR fi and SR j . The counterexample of <ref> [Nederpelt 1973] </ref> shows that, if one tries to prove CR fij , there is a problem in the types of the -abstracted variables.
Reference: [Pfenning 1991] <author> F. Pfenning, </author> <title> Unification and anti-unification in the Calculus of Constructions. </title> <booktitle> Proceedings Sixth Symposium on Logic in Computer Science, </booktitle> <address> (Amsterdam, the Netherlands), </address> <publisher> IEEE, </publisher> <address> Washington DC, </address> <pages> pp 74-85. </pages>
Reference-contexts: signature relies on defining a mapping back, from terms in the signature to terms of the formal system, which is defined on (representants of) fij-equivalence classes. (See [Harper et al. 1987].) A nice consequence of CR fij is that the unification algorithms for the Calculus of Constructions, as discussed in <ref> [Pfenning 1991] </ref> are complete. A semantical reason for strengthening the equality is that in almost all models of type systems the j rule is valid.
Reference: [Salvesen 1989] <author> A. Salvesen, </author> <title> The Church-Rosser Theorem for LF with j reduction. </title> <booktitle> Notes of a talk presented at the BRA-Logical Frameworks meeting, Antibes 1990. </booktitle>
Reference-contexts: CR fij for LF was proved in <ref> [Salvesen 1989] </ref> and later by [Coquand 1991], but for more complicated systems with dependent types the question of CR fij was still open.
Reference: [Streicher 1989] <author> Th. Streicher, </author> <title> Correctness and completeness of a categorical semantics of the Calculus of Constructions. </title> <type> Ph. D. thesis, </type> <institution> University of Passau, Germany. </institution>
Reference-contexts: A semantical reason for strengthening the equality is that in almost all models of type systems the j rule is valid. Further CR fij is essential if we relate the syntax of PTSs to the semantics: The systems that are really interpreted in e.g. <ref> [Streicher 1989] </ref> and [Jacobs 1991] are not the ones as formulated above (with equality on the pseudoterms as a side condition), but with an equality judgement inside the context.
References-found: 13

