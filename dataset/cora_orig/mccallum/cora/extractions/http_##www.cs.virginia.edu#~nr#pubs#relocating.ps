URL: http://www.cs.virginia.edu/~nr/pubs/relocating.ps
Refering-URL: http://www.cs.virginia.edu/~nr/toolkit/
Root-URL: http://www.cs.virginia.edu
Title: Relocating Machine Instructions by Currying  
Author: Norman Ramsey 
Keyword: Categories and Subject Descriptors: D.4.9 [Operating Systems]: Systems Programs and Utilities|Linkers; D.1.1 [Programming Techniques]: Applicative (Functional) Programming; D.3.2 [Programming Languages]: Language Classifications|specialized application languages General Terms: Relocation, Linking, Currying Additional Key Words and Phrases: higher-order functions  
Affiliation: University of Virginia  
Abstract: Relocation adjusts machine instructions to account for changes in the locations of the instructions themselves or of external symbols to which they refer. Standard linkers implement a finite set of relocation transformations, suitable for a single architecture. These transformations are enumerated, named, and engraved in a machine-dependent object-file format, and linkers must recognize them by name. These names and their associated transformations are an unnecessary source of machine-dependence. An alternative is to use SLED (Specification Language for Encoding and Decoding) to specify representations of machine instructions. Instructions are described by constructors, which denote functions mapping lists of operands to instructions' binary representations. Any operand can be designated as "relocatable," meaning that the operand's value need not be known at the time the instruction is encoded. From a SLED specification, the New Jersey Machine-Code Toolkit can generate functions that encode instructions in the native binary representation. For instructions with relocatable operands, the toolkit also computes relocating transformations. Tool writers can create machine-independent software that uses these transformations to relocate machine instructions. For example, mld, a retargetable linker built with the toolkit, needs only 20 lines of C code for relocation, and that code is machine-independent. The toolkit discovers relocating transformations by currying encoding functions. An attempt to encode an instruction with a relocatable operand results in the creation of a closure. The closure can be applied when the values of the relocatable operands become known. Currying provides a general, machine-independent method of relocation. Currying rewrites a -term into two nested -terms. The standard implementation has the first allocate a closure and store therein its operands and a pointer to the second . Using this strategy in the toolkit means that, when it builds an application, the toolkit generates code for many different inner -terms|one for each instruction that uses a relocatable address. Hoisting some of the computation out of the second into the first makes many of the second s identical|a handful are enough for a whole instruction set. This optimization reduces the size of machine-dependent assembly and linking code by 15-25% for the Alpha, MIPS, SPARC, and PowerPC, and by about 40% for the Pentium. It also makes the second s equivalent to relocating transformations named in standard object-file formats. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Appel, A. W. </author> <year> 1992. </year> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge. </address>
Reference: <author> Ball, T. and Larus, J. R. </author> <year> 1992. </year> <title> Optimally profiling and tracing programs. </title> <booktitle> In Conference Record of the 19th Annual ACM Symposium on Principles of Programming Languages. </booktitle> <address> Albuquerque, NM, 59-70. </address> <note> Relocating Machine Instructions by Currying 17 Briggs, </note> <author> P. and Cooper, K. D. </author> <year> 1994. </year> <title> Effective partial redundancy elimination. </title> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 29, </booktitle> <month> 6 (June), </month> <pages> 159-170. </pages>
Reference: <author> Cmelik, B. and Keppel, D. </author> <year> 1994. </year> <title> Shade: A fast instruction-set simulator for execution profiling. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems. </booktitle> <pages> 128-137. </pages>
Reference: <author> Fern andez, M. F. </author> <year> 1995. </year> <title> Simple and effective link-time optimization of Modula-3 programs. </title> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 30, </booktitle> <month> 6 (June), </month> <pages> 103-115. </pages>
Reference: <author> Fraser, C. W. and Hanson, D. R. </author> <year> 1982. </year> <title> A machine-independent linker. </title> <journal> Software|Practice & Experience 12, </journal> <volume> 4 (Apr.), </volume> <pages> 351-366. </pages>
Reference: <author> Fraser, C. W. and Hanson, D. R. </author> <year> 1995. </year> <title> A Retargetable C Compiler: Design and Implementation. </title> <address> Benjamin/Cummings, Redwood City, CA. </address>
Reference: <author> Gircys, G. R. </author> <year> 1988. </year> <title> Understanding and Using COFF. Nutshell Handbooks. </title> <publisher> O'Reilly & Associates, </publisher> <address> Sebastopol, CA. </address>
Reference: <author> Hanson, D. R. </author> <year> 1990. </year> <title> Fast allocation and deallocation of memory based on object lifetimes. </title> <journal> Software|Practice & Experience 20, </journal> <volume> 1 (Jan.), </volume> <pages> 5-12. </pages>
Reference: <author> Hastings, R. and Joyce, B. </author> <year> 1992. </year> <title> Purify: Fast detection of memory leaks and access errors. </title> <booktitle> In Proceedings of the Winter USENIX Conference. </booktitle> <address> San Francisco, CA, </address> <pages> 125-136. </pages>
Reference: <author> Johnson, S. C. </author> <year> 1990. </year> <title> Postloading for fun and profit. </title> <booktitle> In Proceedings of the Winter USENIX Conference. </booktitle> <pages> 325-330. </pages>
Reference: <author> Jones, D. W. </author> <year> 1983. </year> <title> Assembly language as object code. </title> <journal> Software|Practice & Experience 13, </journal> <volume> 8 (Aug.). </volume>
Reference: <author> Jones, N. D., Sestoft, P., and Stndergaard, H. </author> <year> 1989. </year> <title> Mix: A self-applicable partial evaluator for experiments in compiler generation. </title> <booktitle> Lisp and Symbolic Computation 2, </booktitle> <volume> 1, </volume> <pages> 9-50. </pages>
Reference: <author> Kane, G. </author> <year> 1988. </year> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference: <author> Larus, J. R. and Schnarr, E. </author> <year> 1995. </year> <title> EEL: machine-independent executable editing. </title> <booktitle> Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 30, </booktitle> <month> 6 (June), </month> <pages> 291-300. </pages>
Reference: <editor> Peyton Jones, S. L. </editor> <booktitle> 1987. The Implementation of Functional Programming Languages. International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address> <publisher> Prentice Hall 1993a. System V Application Binary Interface, Third ed. Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address> <publisher> Unix Press. </publisher> <editor> Prentice Hall 1993b. </editor> <title> System V Application Binary Interface, SPARC Architecture Processor Supplement, Third ed. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ. </address> <publisher> Unix Press. </publisher>
Reference: <author> Proebsting, T. A. </author> <year> 1995. </year> <title> Optimizing an ANSI C interpreter with superoperators. </title> <booktitle> In Conference Record of the 22nd Annual ACM Symposium on Principles of Programming Languages. </booktitle> <address> San Francisco, California, </address> <pages> 322-332. </pages>
Reference: <author> Ramsey, N. </author> <year> 1992. </year> <title> A retargetable debugger. </title> <type> Ph.D. thesis, </type> <institution> Princeton University, Department of Computer Science. </institution> <note> Also Technical Report CS-TR-403-92. </note>
Reference: <author> Ramsey, N. and Fern andez, M. F. </author> <year> 1994. </year> <title> New Jersey Machine-Code Toolkit architecture specifications. </title> <type> Tech. Rep. </type> <institution> TR-470-94, Department of Computer Science, Princeton University. </institution> <month> Oct. </month> <note> Revised December, </note> <year> 1996. </year>
Reference: <author> Ramsey, N. and Fern andez, M. F. </author> <year> 1997. </year> <title> Specifying representations of machine instructions. </title> <journal> ACM Transactions on Programming Languages and Systems. </journal> <note> To appear. </note>
Reference: <author> Sites, R. L., Chernoff, A., Kirk, M. B., Marks, M. P., and Robinson, S. G. </author> <year> 1993. </year> <title> Binary translation. </title> <journal> Communications of the ACM 36, </journal> <volume> 2 (Feb.), </volume> <pages> 69-81. </pages>
Reference: <author> Srivastava, A. and Eustace, A. </author> <year> 1994. </year> <title> ATOM: A system for building customized program analysis tools. </title> <booktitle> Proceedings of the ACM SIGPLAN '94 Conference on Programming Language Design and Implementation, in SIGPLAN Notices 29, </booktitle> <month> 6 (June), </month> <pages> 196-205. </pages>
Reference: <author> Srivastava, A. and Wall, D. W. </author> <year> 1993. </year> <title> A practical system for intermodule code optimization. </title> <journal> Journal of Programming Languages 1, </journal> <pages> 1-18. </pages> <note> Also available as WRL Research Report 92/6, December 1992. </note> <author> 18 N. Ramsey Szymanski, T. G. </author> <year> 1978. </year> <title> Assembling code for machines with span-dependent instructions. </title> <journal> Communications of the ACM 21, </journal> <volume> 4 (Apr.), </volume> <pages> 300-308. </pages>
Reference: <author> Wahbe, R., Lucco, S., Anderson, T. E., and Graham, S. L. </author> <year> 1993. </year> <title> Efficient software-based fault isolation. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating System Principles. </booktitle> <pages> 203-216. </pages>
References-found: 23

