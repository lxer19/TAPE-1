URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers/monica.ps
Refering-URL: http://delicias.dia.fi.upm.es/WORKSHOP/ECAI98/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Experiments in Building Program Supervision Engines from Reusable Components  
Author: Monica Crubzy Mar Marcos and Sabine Moisan 
Abstract: In this paper, we present a case study of KBS engines built thanks to our knowledge-based system (KBS) development platform Lama. The Lama platform enables the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. This paper emphasizes engine design activity and shows how our platform helps easily create new engines or modify existing ones. Indeed, designers need help to build the problem-solving method (PSM) of an engine, appropriately for an application domain. The current available tools neither integrate designers' knowledge at the right level, nor oer development, integration and testing facilities to implement KBS engines. Our experience tackles problems such as PSM and ontology design and (partial) reuse. This involves aspects such as the choice of an appropriate set of reasoning blocks to cover the needs of a problem-solving task, with the right level of granularity. As a trst experimental teld, we focus on program supervision (PS), an example task on which we have several previous experiences. PS aims at automating the management of expert decisions about the use of programs, that are dicult to handle by non-specialists. Building three PS engines by means of the Lama platform enabled us to better identify the appropriate level of granularity for reuse and the requirements for eective reusability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Aubry, V. Chameroy, F. Lavaire, J.P. Ramond, I.E. Saidane, A. Giron, Y. Bizais, A. Todd-Pokropek, and R. Di Paola, </author> <title> `Medical Image Management Using a Semantic Approach : Image Description', </title> <booktitle> in CAR'93, </booktitle> <pages> pp. 264271, </pages> <address> Berlin, </address> <year> (1993). </year>
Reference-contexts: Second, to handle the solving of abstract steps, a new concept in the PS ontology is involved: the abstract step. Third, following ideas of Pulsar engine, MedIA includes a rich data description specitc to medical images, decomposed in dierent perspectives on data, according to their role in decisions <ref> [1, 12] </ref>. It was easy to extend the object type hierarchy provided by Lama, to integrate this new data structure.
Reference: [2] <author> R. </author> <title> Benjamins, Problem Solving Methods for Diagnosis, </title> <type> Ph.D. dissertation, </type> <institution> University of Amsterdam, </institution> <year> 1993. </year>
Reference-contexts: The concepts of the PS ontology (i.e. object structures or methods) can also be extended to represent domain expertise more accurately and accordingly to their use by the engine. We present a task-method decomposition <ref> [2, 3] </ref> of the PS task in tgure 2, detned under the perspective of the knowledge representation model developed in our team [31]. Although we have described PS in terms of four independent phases, actually it is not the case.
Reference: [3] <author> R. Benjamins, L. Nunes de Barros, and A. Valente, </author> <title> `Constructing Planners Through Problem-Solving Methods', </title> <booktitle> in 10th Ban Knowledge Acquisition for Knowledge-Based Systems Workshop, </booktitle> <year> (1996). </year>
Reference-contexts: The concepts of the PS ontology (i.e. object structures or methods) can also be extended to represent domain expertise more accurately and accordingly to their use by the engine. We present a task-method decomposition <ref> [2, 3] </ref> of the PS task in tgure 2, detned under the perspective of the knowledge representation model developed in our team [31]. Although we have described PS in terms of four independent phases, actually it is not the case. <p> On the one hand, once a PS method is designed, it makes assumptions on the domain knowledge that must be available, which applications must tt, as described in [20], or <ref> [14, 3] </ref>. But on the other hand, the choice, adaptation and development of a PS method is in turn guided by domain knowledge characteristics or requirements, and domain expert reasoning. For example, an incremental process, due to the unpredictable nature of an application, is matched by an interleaved PS method. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS. <p> Moreover, this experiment has been crucial for identifying the issues involved in the election of the level of granularity we need to promote component reusability. Besides, the reuse of (parts of) a PS engine demands that its characteristics and requirements are made explicit in our platform <ref> [3, 20] </ref>. Although our experience helps identify them, we still need to formalize these aspects in Lama. They would enable to better select the appropriate engine for a given domain application, or to generate automatically the corresponding knowledge acquisition tools, such as in Par-KAP [24] or Pro-tg [30] systems.
Reference: [4] <author> T.J. Biggersta, </author> <title> `An Assessment and Analysis of Software Reuse', </title> <booktitle> in Advances in Computers, </booktitle> <editor> ed., M.C. Yovits, </editor> <volume> volume 34, 157, </volume> <publisher> Academic Press, </publisher> <year> (1992). </year>
Reference-contexts: The problem of tnding the correct level of granularity is thus tightly connected to another main diculty: to provide really reusable components. The design of Blocks components followed some important ideas from the the teld of reuse in software engineering <ref> [4] </ref>. First, Blocks components are basically designed for reuse, in the form of rather simple and general instructions or structures. They are also intended to be combined together. Second, we narrowed the range of our target tasks (hence PSMs).
Reference: [5] <author> R. Bodington, </author> <title> `A Software Environment for the Automatic Contguration of Inspections Systems', </title> <booktitle> in First International Workshop on Knowledge-Based Systems for the (re)Use of Programs Libraries KBUP'95, </booktitle> <editor> ed., </editor> <booktitle> IN-RIA, </booktitle> <pages> pp. 99 108. </pages> <institution> INRIA, Sophia Antipolis, </institution> <month> (November </month> <year> 1995). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements.
Reference: [6] <author> J. Breuker, </author> <title> `Problems, Tasks and Problem Solving Methods: Constructing the Common KADS', </title> <booktitle> in First International Workshop on Knowledge-Based Systems for the (re)Use of Programs Libraries KBUP'95, </booktitle> <institution> Sophia Antipolis, France, </institution> <year> (1995). </year> <note> INRIA. </note>
Reference-contexts: A KBS is often dedicated to the solving of a task, like planning, classitcation or diagnosis. This task is usually well known by designers but the tools they have to cope with do not integrate their knowledge at the right level. Knowledge modeling tools, such as CommonKADS <ref> [6] </ref>, provide means to specify a task, the methods to solve it, and the domain ontology it relies on. However, they do not oer development, integration and testing facilities to implement KBS engines. Dierent PSMs can often solve the same task: they must be easily integrated to (variants of) engines.
Reference: [7] <author> B. Chandrasekaran and T.R. Johnson, </author> <title> `Generic Tasks and Task Structures: History, Critique and New Directions', in Second Generation Expert Systems, </title> <editor> eds., J. David, J. Krivine, and R.Simons, </editor> <volume> 232272, </volume> <publisher> Springer-Verlag, </publisher> <year> (1993). </year>
Reference-contexts: Moreover, this platform allows the reuse of (parts of) existing engines. In addition, our platform provides for a corresponding task-oriented representation framework, to guide domain experts in expressing their knowledge at the expertise level. Our approach follows well-known trends about second generation expert systems <ref> [27, 7] </ref>, and is in the spirit of knowledge engineering environments such as SBF [17], Protg-II [13], or Par-KAP [24]. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS.
Reference: [8] <author> S. A. Chien, </author> <title> `Automated Synthesis of Image Processing Procedures for a Large-scale Image Database', </title> <booktitle> in First IEEE International Conference on Image Processing, </booktitle> <address> Austin, TX, </address> <month> (November </month> <year> 1994). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements.
Reference: [9] <author> V. Clment and M. Thonnat, </author> <title> `Integration of Image Processing procedures, Ocapi: a Knowledge-Based Approach', </title> <booktitle> Computer Vision Graphics and Image Processing: Ima ge Understanding, </booktitle> <volume> 57(2), </volume> <month> (March </month> <year> 1993). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements. <p> These components can in turn be reused as-is by less-experienced designers. 4 Monica Crubzy, Mar Marcos, and Sabine Moisan 4.1 Pegase Pegase is a PS engine developed on the basis of the engine previously realized in our team for the Ocapi system <ref> [9] </ref>. The behavior of Ocapi mainly consists in hierarchical planning (also named skeletal-plan retnement), typically convenient for the supervision of image processing libraries.
Reference: [10] <author> D. Crevier, </author> <title> `Expert Systems as Design Aids for Artitcial Vision Systems: a Survey', </title> <booktitle> SPIE Inteligent Robots and Computer Vision, 2055(XII), </booktitle> <volume> 8496, </volume> <year> (1993). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements.
Reference: [11] <author> M. Crubzy, F. Aubry, S. Moisan, V. Chameroy, M. Thonnat, and R. Di Paola, </author> <title> `Managing Complex Processing of Medical Image Sequences by Program Supervision Techniques', </title> <booktitle> in SPIE Medical Imaging'97, </booktitle> <volume> volume 3035, </volume> <pages> pp. 614625, </pages> <month> (February </month> <year> 1997). </year>
Reference-contexts: An analysis of this application domain reveals the need for a hybrid PS method <ref> [11] </ref>. The MedIA PS engine thus also combines hierarchical planning as in Pegase and dynamic planning methods, however a bit dierently from Pulsar. As in Pegase, the four PS phases of MedIA supervision process are interleaved, so the global algorithm is organized the same way.
Reference: [12] <author> M. Crubzy, S. Moisan, F. Aubry, J. van den Elst, and V. Chameroy, </author> <title> `Program Supervision in Medical Imagery', </title> <booktitle> in Eighth Australian Joint Artitcial Intelligence Conference, </booktitle> <editor> eds., L. Lock Lee and J. Hough, </editor> <booktitle> Applications Stream, </booktitle> <pages> pp. 3240, </pages> <address> Canberra, </address> <month> (November </month> <year> 1995). </year>
Reference-contexts: Second, to handle the solving of abstract steps, a new concept in the PS ontology is involved: the abstract step. Third, following ideas of Pulsar engine, MedIA includes a rich data description specitc to medical images, decomposed in dierent perspectives on data, according to their role in decisions <ref> [1, 12] </ref>. It was easy to extend the object type hierarchy provided by Lama, to integrate this new data structure.
Reference: [13] <author> H. Eriksson, Y. Shahar, S.W. Tu, A.R. Puerta, and M. Musen, </author> <title> `Task Modeling with Reusable Problem-solving Methods', </title> <journal> Artitcial Intelligence, </journal> <volume> 79, 293326, </volume> <year> (1995). </year>
Reference-contexts: In addition, our platform provides for a corresponding task-oriented representation framework, to guide domain experts in expressing their knowledge at the expertise level. Our approach follows well-known trends about second generation expert systems [27, 7], and is in the spirit of knowledge engineering environments such as SBF [17], Protg-II <ref> [13] </ref>, or Par-KAP [24]. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. These are of smaller grainsize than classical PSMs, such as propose-and-revise or cover-and-dierentiate. Design in a compositional perspective provides a recursive detnition of PSMs (as detned in [13]) that <p> Protg-II <ref> [13] </ref>, or Par-KAP [24]. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. These are of smaller grainsize than classical PSMs, such as propose-and-revise or cover-and-dierentiate. Design in a compositional perspective provides a recursive detnition of PSMs (as detned in [13]) that fosters easy (re)contguration of engines, while not impeding reuse at dierent PSM levels alltogether. Besides, although this important aspect is not avoided, the generation of corresponding knowledge acquisition facilities is not as mature in our platform as in the above-cited systems. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS.
Reference: [14] <author> D. Fensel, A. Schnegge, R. Groenboom, and B. Wielinga, </author> <booktitle> `Specitcation and Veritcation of Knowledge-Based Systems', in European Conference on Artitcial Intelligence workshop on Validation, Veritcation and Retnement of Knowledge-Based Systems, </booktitle> <year> (1996). </year>
Reference-contexts: First, the PSM implemented by the engine merely mirrors the reasoning process of an expert performing the task. Second, the ontology corresponds to templates for the knowledge base contents, that are enforced altogether by the domain, the task, and the chosen PSM <ref> [14] </ref>. Note that the model is not unique for a task, and that more or less complex versions may be needed. <p> On the one hand, once a PS method is designed, it makes assumptions on the domain knowledge that must be available, which applications must tt, as described in [20], or <ref> [14, 3] </ref>. But on the other hand, the choice, adaptation and development of a PS method is in turn guided by domain knowledge characteristics or requirements, and domain expert reasoning. For example, an incremental process, due to the unpredictable nature of an application, is matched by an interleaved PS method. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS.
Reference: [15] <author> L. Gong and C.A. Kulikowski, `VISIPLAN: </author> <title> A Hierarchical Planning Framework for Composing Biomedical Image Analysis Processes', </title> <booktitle> in Proceedings of International Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pp. 718723, </pages> <address> Piscataway, NJ, </address> <year> (1994). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements.
Reference: [16] <author> M. Haest, G. Bastin, M. Gevers, and V. Weutz, `ES-PION: </author> <title> An expert system for system identitcation', </title> <journal> Au-tomatica, </journal> <volume> 26(1), 8595, </volume> <year> (1989). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing [15, 21, 8, 10, 9, 5], signal processing [23] or automatic control <ref> [16, 18] </ref>. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements. PS is thus a typical problem-solving task, interesting application-wise, that motivates the need for a platform to easily build dierent engines.
Reference: [17] <author> G. Kinkler, C. Bhola, G. Dallemagne, D. Marques, and J. McDermott, </author> <title> `Usable and Reusable Programming Constructs', </title> <journal> Knowledge Acquisition, </journal> <volume> 3, 117135, </volume> <year> (1991). </year>
Reference-contexts: In addition, our platform provides for a corresponding task-oriented representation framework, to guide domain experts in expressing their knowledge at the expertise level. Our approach follows well-known trends about second generation expert systems [27, 7], and is in the spirit of knowledge engineering environments such as SBF <ref> [17] </ref>, Protg-II [13], or Par-KAP [24]. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. These are of smaller grainsize than classical PSMs, such as propose-and-revise or cover-and-dierentiate. <p> They are also intended to be combined together. Second, we narrowed the range of our target tasks (hence PSMs). As a result, we obtained instructions that are indeed applicable for many dierent purposes, but that are kept simple and small enough <ref> [17] </ref>. Finally the components are free of implementation details. We are also working on a formal semantics for e.g each instruction, which also increases their reusability potential. In order to build an engine, a designer explicitly or implicitly uses a model of the corresponding task. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS.
Reference: [18] <author> J.E. Larsson and P. Persson, </author> <title> `An Expert System Interface for an Identitcation Program', </title> <journal> Automatica, </journal> <volume> 27(6), 919930, </volume> <year> (1991). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing [15, 21, 8, 10, 9, 5], signal processing [23] or automatic control <ref> [16, 18] </ref>. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements. PS is thus a typical problem-solving task, interesting application-wise, that motivates the need for a platform to easily build dierent engines.
Reference: [19] <author> M. Marcos, S. Moisan, and A. P. del Pobil, </author> <title> `A Model-Based Approach to the Veritcation of Program Supervision Systems', </title> <booktitle> in 4th European Symposium on the Validation and Veritcation of Knowledge Based Systems, </booktitle> <pages> pp. 231241, </pages> <month> (June </month> <year> 1997). </year>
Reference-contexts: Associated veritcation tools (KB veritcation toolkit) analyze the contents of an expert knowledge base to check its consistency and completeness, according to the knowledge assumptions enforced by the engine in use <ref> [19] </ref>. These contents are afterwards translated (Yakl parser and translator) into programming structures that the engine can manage. Finally a communication module allows engines, knowledge bases, and interfaces to interact. <p> Indeed, Lama veritcation toolkit provides facilities from which the veritcation tool is built to tt the characteristics (knowledge contents and their properties) of the engine in use <ref> [19] </ref>. In conclusion, regarding the common detnitions of PSMs and ontologies, our work is situated as follows. First, the PSMs that we have presented here are not meant to cross tasks, we have chosen to focus on task-oriented PSMs for reuse.
Reference: [20] <author> M. Marcos, S. Moisan, and A. P. del Pobil, </author> <title> `Knowledge Modeling of Program Supervision Task', </title> <booktitle> in IEA-AIE'98 International Conference on Industrial & Engineering Applications of Artitcial Intelligence & Expert Systems, Lecture Notes in Computer Science, </booktitle> <address> Benicasim, Spain, (June 1998). </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Subtask execute plan cor responds to execution phase, evaluation and repair phases, including its main subtask refine and execute operator that decomposes or specializes complex operators and executes primitive operators. Evaluation and repair phases are also subtasks of refine and execute operator. As in <ref> [20] </ref>, this task-method decomposition is a general framework that results from the analysis of three (experimental) PS engines built with Lama: Pegase, Pulsar and MedIA. This view corresponds to an abstraction of the task-specitc instructions provided by the Blocks library. <p> Without trying to be exhaustive, some signitcant behavioral features are compared between the three engines, in the same way is was analyzed for Pegase and Pulsar in <ref> [20] </ref>. We also emphasize the way Pulsar and MedIA were built, by reusing and adapting parts of Pegase engine. <p> On the one hand, once a PS method is designed, it makes assumptions on the domain knowledge that must be available, which applications must tt, as described in <ref> [20] </ref>, or [14, 3]. But on the other hand, the choice, adaptation and development of a PS method is in turn guided by domain knowledge characteristics or requirements, and domain expert reasoning. <p> Moreover, this experiment has been crucial for identifying the issues involved in the election of the level of granularity we need to promote component reusability. Besides, the reuse of (parts of) a PS engine demands that its characteristics and requirements are made explicit in our platform <ref> [3, 20] </ref>. Although our experience helps identify them, we still need to formalize these aspects in Lama. They would enable to better select the appropriate engine for a given domain application, or to generate automatically the corresponding knowledge acquisition tools, such as in Par-KAP [24] or Pro-tg [30] systems.
Reference: [21] <author> T. </author> <title> Matsuyama, `Expert Systems for Image Processing: Knowledged-Based Composition of Image Analysis Processes', Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 48, 2249, </volume> <year> (1989). </year>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing <ref> [15, 21, 8, 10, 9, 5] </ref>, signal processing [23] or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements.
Reference: [22] <author> S. Moisan, R. Vincent, J. van den Elst, , and F. van Harmelen, </author> <title> `Towards an Intelligent Failure Handling Mechanism in Program Supervision', </title> <booktitle> in First International Workshop on Knowledge-Based systems for the (re)Use of Program libraries, </booktitle> <institution> ed., INRIA, Sophia An-tipolis, France, </institution> <month> (November </month> <year> 1995). </year>
Reference-contexts: The evaluation and possible repair phases, that occur between execution and subsequent planning, further simulate the exibility of experts' trial and error strategy, typical in image processing domain. An important improvement in Pegase concerns its failure handling mechanism, that enables the transmission of problems accross the hierarchy of operators <ref> [22] </ref>. The interface of the operator concept was also extended for Pegase by providing necessary attributes such as its judgement after execution and the corresponding type of failure diagnosed.
Reference: [23] <author> S.H. Nawab and V. Lesser, </author> <title> `Integrated Processing and Understanding of Signals', in Symbolic and Knowledge-Based Signal Processing, </title> <editor> eds., A.V.Oppenheim and S.H.Nawab, </editor> <volume> 251285, </volume> <publisher> Prentice Hall, </publisher> <year> (1992). </year> <note> 9 Monica Crubzy, Mar Marcos, and Sabine Moisan </note>
Reference-contexts: Many PS systems have been built for dierent purposes or application domains, namely in the area of image processing [15, 21, 8, 10, 9, 5], signal processing <ref> [23] </ref> or automatic control [16, 18]. These systems show that the PS task can be realized by many dierent methods, depending on domain requirements. PS is thus a typical problem-solving task, interesting application-wise, that motivates the need for a platform to easily build dierent engines.
Reference: [24] <author> L. Nunes de Barros, J. Hendler, </author> <title> and V.R. Benjamins, `Par-KAP: a Knowledge Acquisition Tool for Building Practical Planning Systems', </title> <booktitle> in Proc. of the 15th International Joint Conference on Artitcial Intelligence (IJCAI'97), </booktitle> <publisher> ed., </publisher> ??, <pages> pp. 12461251. </pages> ??, <month> (August </month> <year> 1997). </year>
Reference-contexts: Our approach follows well-known trends about second generation expert systems [27, 7], and is in the spirit of knowledge engineering environments such as SBF [17], Protg-II [13], or Par-KAP <ref> [24] </ref>. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. These are of smaller grainsize than classical PSMs, such as propose-and-revise or cover-and-dierentiate. <p> Although our experience helps identify them, we still need to formalize these aspects in Lama. They would enable to better select the appropriate engine for a given domain application, or to generate automatically the corresponding knowledge acquisition tools, such as in Par-KAP <ref> [24] </ref> or Pro-tg [30] systems. Nevertheless, the work presented in this 8 Monica Crubzy, Mar Marcos, and Sabine Moisan paper also enables to improve our ideas linked to the veritca--tion of KBSs, an important research issue in our team.
Reference: [25] <author> G. Schreiber, B. Wielinga, R. de Hoog, H. Akkermans, and W. Van de Velde, `CommonKADS: </author> <title> A Comprehensive Methodology for KBS Development', </title> <journal> IEEE Expert, </journal> <volume> 9(6), 2837, </volume> <year> (1994). </year>
Reference-contexts: It is a knowledge-level way to specify a PSM in an implementation independent way. There merely exists guidelines resulting from the CommonKADS project, on how to operationalize such a model <ref> [25] </ref>. In contrast, Lama provides a symbol-level architecture to implement engines: given a PSM model, a developer translates it into pseudo code, based on Blocks instructions. Since most Blocks components have been designed keeping in mind a model analysis of PSM, it facilitates the operationalization process.
Reference: [26] <author> C. Shekhar, P. Burlina, and S. Moisan, </author> <title> `Design of Self-Tuning IU Systems', </title> <booktitle> in DARPA Image Understanding Workshop, </booktitle> <volume> volume 1, </volume> <pages> pp. 529536, </pages> <address> New Orleans, LA, </address> <month> (May </month> <year> 1997). </year>
Reference-contexts: Examples are go-to-state and change-state for state handling, or set-judgement, that manipulate the history of judgements and failure of an operator. Pegase has been successfully applied to domains such as the classitcation of galaxy images [28], or vehicle detection in aerial images <ref> [26] </ref>. 4.2 Pulsar To overcome Pegase lack of exibility, Pulsar PS engine was developed as a trst tentative towards combining hierarchical and dynamic operator-based planning methods within the same engine [31]. Indeed, Pulsar includes automatic planning features that are less demanding on the knowledge base structure.
Reference: [27] <author> L. Steels, </author> <title> `Components of Expertise', </title> <journal> AI Magazine, </journal> <volume> 11(2), 2849, </volume> <year> (1990). </year>
Reference-contexts: Moreover, this platform allows the reuse of (parts of) existing engines. In addition, our platform provides for a corresponding task-oriented representation framework, to guide domain experts in expressing their knowledge at the expertise level. Our approach follows well-known trends about second generation expert systems <ref> [27, 7] </ref>, and is in the spirit of knowledge engineering environments such as SBF [17], Protg-II [13], or Par-KAP [24]. Lama emphasizes the software-level composition of KBS engines (hence PSMs) for a given task from reusable reasoning blocks. <p> Indeed, although a KBS engine must not necessarily mirror experts' reasoning to be ecient, the latter is nevertheless inuenced by domain knowledge characteristics and availability, that also enforce the choice of an appropriate PSM <ref> [27] </ref>. The easy contguration of PS methods is therefore crucial, it must enable concept specialization, and partial reuse from one engine to another. In developing a software library like Blocks, a challenge is to determine the optimal grain-size of structures and instructions, that should be provided to the developer. <p> Many of the ideas discussed here have been already discussed in past literature <ref> [27, 17, 7, 13, 3, 14] </ref>, given as guidelines to develop KBS.
Reference: [28] <author> M. Thonnat, V. Clment, and J. C. Ossola, </author> <title> `Automatic Galaxy Description', </title> <journal> Astrophysical Letters and Communication, </journal> <volume> 31(1-6), 6572, </volume> <year> (1995). </year>
Reference-contexts: Examples are go-to-state and change-state for state handling, or set-judgement, that manipulate the history of judgements and failure of an operator. Pegase has been successfully applied to domains such as the classitcation of galaxy images <ref> [28] </ref>, or vehicle detection in aerial images [26]. 4.2 Pulsar To overcome Pegase lack of exibility, Pulsar PS engine was developed as a trst tentative towards combining hierarchical and dynamic operator-based planning methods within the same engine [31].
Reference: [29] <author> M. Thonnat and S. Moisan, </author> <title> `Knowledge-based Systems for Program Supervision', </title> <booktitle> in First International Workshop on Knowledge-Based systems for the (re)Use of Programs Libraries KBUP'95, </booktitle> <institution> Sophia Antipolis, France, </institution> <year> (1995). </year> <note> INRIA. </note>
Reference-contexts: Besides, although this important aspect is not avoided, the generation of corresponding knowledge acquisition facilities is not as mature in our platform as in the above-cited systems. As a trst experimental teld, we focus on program supervision (PS), an example problem-solving task on which we have several previous experiences <ref> [29] </ref>. PS frees non-specialists from handling low-level details about the adequate use of a set of programs to process data.
Reference: [30] <author> S. Tu, H. Eriksson, J. Gennari, Y. Shahar, and M. Musen, </author> <title> `Ontology-Based Contguration of Problem-Solving Methods and Generation of Knowledge-Acquisition Tools: Application of PROTEGE-II to Protocol-Based Decision Support', </title> <journal> Artitcial Intelligence in Medicine, </journal> <volume> 7(3), 257289, </volume> <month> (June </month> <year> 1995). </year>
Reference-contexts: Although our experience helps identify them, we still need to formalize these aspects in Lama. They would enable to better select the appropriate engine for a given domain application, or to generate automatically the corresponding knowledge acquisition tools, such as in Par-KAP [24] or Pro-tg <ref> [30] </ref> systems. Nevertheless, the work presented in this 8 Monica Crubzy, Mar Marcos, and Sabine Moisan paper also enables to improve our ideas linked to the veritca--tion of KBSs, an important research issue in our team.
Reference: [31] <author> J. van den Elst, </author> <title> Modlisation de Connaissances pour le Pilotage de Programmes de Traitement d'Images, </title> <type> Ph.D. dissertation, </type> <institution> Universit de Nice-Sophia Antipolis, </institution> <month> Octo-ber </month> <year> 1996. </year>
Reference-contexts: We present a task-method decomposition [2, 3] of the PS task in tgure 2, detned under the perspective of the knowledge representation model developed in our team <ref> [31] </ref>. Although we have described PS in terms of four independent phases, actually it is not the case. Planning phase is essentially performed by the trst two subtasks of plan and execute: expand plan and select plan. <p> has been successfully applied to domains such as the classitcation of galaxy images [28], or vehicle detection in aerial images [26]. 4.2 Pulsar To overcome Pegase lack of exibility, Pulsar PS engine was developed as a trst tentative towards combining hierarchical and dynamic operator-based planning methods within the same engine <ref> [31] </ref>. Indeed, Pulsar includes automatic planning features that are less demanding on the knowledge base structure. This second planning method matches the description of both the type and the contents of data to process and to obtain with operator preconditions and eects. <p> This experiment thus helped us better detne Blocks: new general-purpose instructions were there fore developed and integrated, such as match. 6 Monica Crubzy, Mar Marcos, and Sabine Moisan Pulsar has been applied to road obstacle detection and to medical imaging <ref> [31] </ref>.
Reference: [32] <author> J. van den Elst, F. van Harmelen, and M. Thonnat, </author> <title> `Modelling Software Components for Reuse', </title> <booktitle> in Seventh International Conference on Software Engin eering and Knowledge Engineering, </booktitle> <pages> pp. 350357. </pages> <institution> Knowledge Systems Institute, </institution> <month> (June </month> <year> 1995). </year>
Reference-contexts: The ontology for PS comprises concepts that are shared among the planning and the software engineering and reuse communities <ref> [32] </ref>. Goals describe an abstract functionality to achieve, together with constraints on the expected tnal state. Operators either represent executable programs (i.e. primitive operators) or known combinations of operators that solve abstract processing steps (i.e. complex operators).
Reference: [33] <author> R. Vincent and M. Thonnat, </author> <title> `Planning, Executing, Controlling and Replanning for IP Program Library', </title> <booktitle> in Proceedings of 8th Artitcial Intelligence and Soft computing ASC'97, </booktitle> <month> (July </month> <year> 1997). </year> <note> 10 Monica Crubzy, Mar Marcos, and Sabine Moisan </note>
Reference-contexts: Pegase PS method improves Ocapi PS method to better match experts' incremental strategy, as well as the unpredictable dimension of image processing domain. It performs pure hierarchical planning <ref> [33] </ref>, which consists in recursively retning a hierarchy of complex operators (in PEGASE execute plan), either organized in sequential decompositions or alternative specializations, until primitive operators are reached (that are executed by the execute operator subtask).
References-found: 33

