URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-418.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Phone: 2  
Title: Meaningless terms in rewriting  
Author: Richard Kennaway Vincent van Oostrom Fer-Jan de Vries 
Date: 16 December 1996, 20:00  
Address: East Anglia, Norwich NR4 7TJ, U.K.  Boelelaan 1081a, 1081 HV Amsterdam, Netherlands 3 ETL, 1-1-4 Umezono, Tsukuba, Ibaraki 305, Japan  
Affiliation: 1 School of Information Systems, University of  Vrije Universiteit, Department of Mathematics and Computer Science De  
Abstract: We present an axiomatic approach to concept of meaninglessness in finite and transfinite term rewriting and lambda calculus. We justify our axioms in several ways. They can be intuitively justified from the viewpoint of rewriting as computation. They are shown to imply important properties of meaninglessness: genericity of the class of meaningless terms, the consistency of equating all meaningless terms, and the construction of Bohm trees and models of rewrite systems. Finally, we show that they can be easily verified for many existing notions of meaninglessness, and easily refuted for some notions that are known not to be good characterisations of meaninglessness.
Abstract-found: 1
Intro-found: 1
Reference: [AGM92] <editor> S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors. </editor> <booktitle> Handbook of Logic in Computer Science, volume 2, Background: Computational Structures. </booktitle> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [AKK + 94] <author> Z. M. Ariola, J. R. Kennaway, J. W. Klop, M. R. Sleep, and F. J. de Vries. </author> <title> Syntactic definitions of undefined: On defining the undefined. </title> <booktitle> In Int. Symp. on Theoretical Aspects of Computer Software, Sendai, </booktitle> <pages> pages 543-554, </pages> <year> 1994. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 789. </volume> <pages> 20 </pages>
Reference-contexts: The results in this paper correct and extend results presented in <ref> [AKK + 94] </ref>, which deals with term rewriting systems. Our second axiom here was missing from that paper, as observed by the second author of the present paper. Our paper [KKSdV96] on infinite lambda calculus benefitted greatly from these insights. <p> Lemma 3.9 (Genericity) In a left-linear TRS, every set U satisfying Axioms 1 and 2 is generic. Proof. Immediate from Lemma 3.8. 2 We remark that the axioms we gave in <ref> [AKK + 94] </ref> do not suffice for genericity, as is demonstrated by the example of the rule F (A) ! B and the set U = fAg. This satisfies the axioms of that paper, but U is not generic. <p> These include all the examples in <ref> [AKK + 94] </ref>. <p> Axiom 2 is immediate. Axiom 1 is immediate in the finitary case, and is simple to prove in the transfinite case. Axiom 4 (2) follows from orthogonality. 2 In <ref> [AKK + 94] </ref> the definition of opaqueness is stated erroneously, but this was the concept intended. 16 To prove Axiom 5, suppose that s and t are !-undefined, and C [s] is not.
Reference: [Bar84] <author> H. P. Barendregt. </author> <title> The Lambda Calculus, Its Syntax and Seman--tics, </title> <booktitle> volume 103 of Studies in Logic and the Foundations of Mathematics. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <address> Amsterdam, </address> <note> revised edition, </note> <year> 1984. </year>
Reference-contexts: We assume the reader to be familiar with the basic theory of term rewriting systems [DJ90, Klo92] and lambda calculus <ref> [Bar84, HS86] </ref>. We will show the usefulness of our axioms in several ways. * They arise naturally from the notion of rewriting as computation of the meaning of terms. * The axioms imply two standard lemmas: the Genericity Lemma and the Consistency Lemma. <p> are equivalent for lambda calculus.) From Lemma 5.2, transfinite lambda calculus is confluent up to H, and therefore also up to any superset of H, so the Consistency Lemma can dispense with that as a hypothesis. 6 Bohm trees In lambda calculus we have the notion of a Bohm tree <ref> [Bar84] </ref>. This is a possibly infinite lambda term in normal form which may also contain the constant ?, which represents undefinedness. <p> This confirms the conclusion of [KKSdV96] that these are the only measures which yield well-behaved versions of infinitary lambda calculus. 19 Unsolvable/!-undefined/001-active A lambda term s is solvable <ref> [Bar84] </ref> if there exist tuples x of variables and t of terms such that (x:s)t !! I. Taking the same definition of !-undefinedness as for TRSs, it is not difficult to check that the unsolvable terms coincide with the !-undefined ones.
Reference: [Bar92] <author> H. P. Barendregt. </author> <title> Representing `undefined' in lambda calculus. </title> <journal> Journal of Functional Programming, </journal> <volume> 2(3) </volume> <pages> 367-374, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: M For any n 0, the set n of terms of the form M 1 : : : M n satisfies all the axioms except Axiom 4 (1). Each of these classes is therefore generic and consistent, but does not give a Bohm model. Zero terms A zero term <ref> [Bar92] </ref> is a term which cannot be reduced to an abstraction. The terms, all of whose instances are zero terms, are the opaque terms of lambda calculus. These are easily shown to satisfy Axioms 1, 2, 3 and 2.
Reference: [Ber] <author> A. Berarducci. </author> <title> Infinite -calculus and non-sensible models. </title> <note> Presented to the conference in honour of Roberto Magari, Siena 1994. </note>
Reference-contexts: Hence all axioms hold. Mute/hypercollapsing/root-active A term is mute if it is a zero term which cannot be reduced to a variable or to an application of a zero term to any term <ref> [Ber] </ref>. This definition is equivalent to the properties of being hypercollapsing or being root-active, which in turn are equivalent to 111-activeness.
Reference: [Chu41] <author> A. Church. </author> <title> The Calculi of Lambda Conversion. </title> <publisher> Princeton University Press, </publisher> <year> 1941. </year>
Reference-contexts: When lambda terms are restricted such that each abstracted variable occurs at least once in the body of the lambda term (Church's I-calculus <ref> [Chu41] </ref>), then the two classes coincide, and are generic, by an argument similar to the one for non-erasing orthogonal TRSs. In the transfinite I-calculus this does not hold, because of the same phenomenon of `pushing to infinity' that we saw for transfinite TRSs.
Reference: [DJ90] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <booktitle> In [Lee90, Ch. </booktitle> <pages> 6 pp. 243-320], </pages> <year> 1990. </year>
Reference-contexts: The latter allow infinitely large terms and rewrite sequences of any ordinal length, the basic theory of which has been set out for both term rewrite systems [KKSdV95b] and lambda calculus [KKSdV96]. We assume the reader to be familiar with the basic theory of term rewriting systems <ref> [DJ90, Klo92] </ref> and lambda calculus [Bar84, HS86]. We will show the usefulness of our axioms in several ways. * They arise naturally from the notion of rewriting as computation of the meaning of terms. * The axioms imply two standard lemmas: the Genericity Lemma and the Consistency Lemma.
Reference: [HS86] <author> J. R. Hindley and J. P. Seldin. </author> <title> Introduction to Combinators and -Calculus, volume 1 of London Mathematical Society Students Texts. </title> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: We assume the reader to be familiar with the basic theory of term rewriting systems [DJ90, Klo92] and lambda calculus <ref> [Bar84, HS86] </ref>. We will show the usefulness of our axioms in several ways. * They arise naturally from the notion of rewriting as computation of the meaning of terms. * The axioms imply two standard lemmas: the Genericity Lemma and the Consistency Lemma.
Reference: [JZ85] <author> J. G. Jacopini and M. Venturini Zilli. </author> <title> Easy terms in the lambda calculus. </title> <journal> Fundamenta Informaticae, </journal> <volume> VIII, </volume> <year> 1985. </year>
Reference-contexts: Therefore C [x := r][t [x := r]] is not a zero term, and C [t] is not in the class of meaningless terms. Easy terms t is an easy term if for every closed term s, the fi-calculus plus the equation t = s is consistent <ref> [JZ85] </ref>. It is immediate that Axiom 1 holds for the class of easy terms. Axiom 3 holds, since t [x := r] = s follows from t = s if s is closed.
Reference: [KKSdV95a] <author> J. R. Kennaway, J. W. Klop, M. R. Sleep, and F. J. de Vries. </author> <title> Infinitary lambda calculus and Bohm models. </title> <booktitle> In Proc. Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 257-270, </pages> <year> 1995. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 914. </pages>
Reference-contexts: Our paper [KKSdV96] on infinite lambda calculus benefitted greatly from these insights. In particular, not all variants of Bohm reduction and beta-reduction up to identification of 0-active terms are Church-Rosser, as claimed in <ref> [KKSdV95a] </ref>. 2 Axioms and properties of notions of mean inglessness We first establish some notation. We make extensive use of the notion of a position, also called an occurrence, for identifying subterms of terms. A position is a finite sequence of positive integers.
Reference: [KKSdV95b] <author> J. R. Kennaway, J. W. Klop, M. R. Sleep, and F. J. de Vries. </author> <title> Transfinite reductions in orthogonal term rewriting systems. </title> <journal> Information and Computation, </journal> <volume> 119 </volume> <pages> 18-38, </pages> <year> 1995. </year>
Reference-contexts: We consider term rewrite systems and lambda calculus, in both finitary and transfinite versions. The latter allow infinitely large terms and rewrite sequences of any ordinal length, the basic theory of which has been set out for both term rewrite systems <ref> [KKSdV95b] </ref> and lambda calculus [KKSdV96]. We assume the reader to be familiar with the basic theory of term rewriting systems [DJ90, Klo92] and lambda calculus [Bar84, HS86]. <p> Thus the other hypotheses of Lemma 3.12 hold. The proof proceeds as for that lemma. 2 5 Transfinite rewriting 5.1 Basic concepts The basic concepts of transfinite term rewriting and lambda calculus have been set out in <ref> [KKSdV95b, KKSdV96] </ref>. We shall very briefly state the fundamental definitions and two basic theorems. The length of a strongly continuous rewrite sequence may be any finite or infinite ordinal ff. For each ordinal fi &lt; ff, the sequence gives a reduction step t fi ! t fi+1 . <p> The introduction of sequences of length greater than ! does not lose computational motivation, because of the Compression Lemma: Lemma 5.1 (Compression) <ref> [KKSdV95b, KKSdV96] </ref> For left-linear TRSs and for lambda calculus, for any ordinal ff, if t reduces to s then t reduces to s by a reduction of length at most !. 2 The main difference with finite rewriting is that infinitary confluence (confluence of !!) is not implied by orthogonality. <p> The only obstacle to confluence lies with the hypercollapsing terms. All of the terms in the example are hypercollapsing. Lemma 5.2 <ref> [KKSdV95b, KKSdV96] </ref> Transfinite orthogonal TRSs and lambda calculus are confluent up to H. 2 Lemma 5.3 s in U out U !! t implies s out U !! t 1 Readers familiar with [KKSdV96] should note that for brevity, we only discuss fl 111 in this paper.
Reference: [KKSdV96] <author> J. R. Kennaway, J. W. Klop, M. R. Sleep, and F. J. de Vries. </author> <title> Infinitary lambda calculus. </title> <journal> Th. Comp. </journal> <note> Sci., 1996. to appear. </note>
Reference-contexts: We consider term rewrite systems and lambda calculus, in both finitary and transfinite versions. The latter allow infinitely large terms and rewrite sequences of any ordinal length, the basic theory of which has been set out for both term rewrite systems [KKSdV95b] and lambda calculus <ref> [KKSdV96] </ref>. We assume the reader to be familiar with the basic theory of term rewriting systems [DJ90, Klo92] and lambda calculus [Bar84, HS86]. <p> The results in this paper correct and extend results presented in [AKK + 94], which deals with term rewriting systems. Our second axiom here was missing from that paper, as observed by the second author of the present paper. Our paper <ref> [KKSdV96] </ref> on infinite lambda calculus benefitted greatly from these insights. In particular, not all variants of Bohm reduction and beta-reduction up to identification of 0-active terms are Church-Rosser, as claimed in [KKSdV95a]. 2 Axioms and properties of notions of mean inglessness We first establish some notation. <p> Thus the other hypotheses of Lemma 3.12 hold. The proof proceeds as for that lemma. 2 5 Transfinite rewriting 5.1 Basic concepts The basic concepts of transfinite term rewriting and lambda calculus have been set out in <ref> [KKSdV95b, KKSdV96] </ref>. We shall very briefly state the fundamental definitions and two basic theorems. The length of a strongly continuous rewrite sequence may be any finite or infinite ordinal ff. For each ordinal fi &lt; ff, the sequence gives a reduction step t fi ! t fi+1 . <p> The introduction of sequences of length greater than ! does not lose computational motivation, because of the Compression Lemma: Lemma 5.1 (Compression) <ref> [KKSdV95b, KKSdV96] </ref> For left-linear TRSs and for lambda calculus, for any ordinal ff, if t reduces to s then t reduces to s by a reduction of length at most !. 2 The main difference with finite rewriting is that infinitary confluence (confluence of !!) is not implied by orthogonality. <p> The only obstacle to confluence lies with the hypercollapsing terms. All of the terms in the example are hypercollapsing. Lemma 5.2 <ref> [KKSdV95b, KKSdV96] </ref> Transfinite orthogonal TRSs and lambda calculus are confluent up to H. 2 Lemma 5.3 s in U out U !! t implies s out U !! t 1 Readers familiar with [KKSdV96] should note that for brevity, we only discuss fl 111 in this paper. <p> All of the terms in the example are hypercollapsing. Lemma 5.2 [KKSdV95b, KKSdV96] Transfinite orthogonal TRSs and lambda calculus are confluent up to H. 2 Lemma 5.3 s in U out U !! t implies s out U !! t 1 Readers familiar with <ref> [KKSdV96] </ref> should note that for brevity, we only discuss fl 111 in this paper. <p> Axiom 3 holds because if s [x := t] is usable, then (x:s)t is, and by the definition of strict context, so is s. Axiom 4 (2) holds since the unusable terms include the unsolvables, and root-active terms are unsolvable. Axiom 5 is proved as before. abc-active (cf. <ref> [KKSdV96] </ref>) Given a string of three binary digits abc, there is a measure D abc (s; ) of length of a position of a term s: D abc (s; *) = def 0 D abc (st; 0) = def b + D abc (s; ) Any of these measures can be <p> Detailed proofs for each axiom and depth measure are given in the appendix. From this we conclude that Genericity, Consistency, and the existence and uniqueness of Bohm trees hold for the measures 001, 101, and 111, for both finite and transfinite lambda calculus. This confirms the conclusion of <ref> [KKSdV96] </ref> that these are the only measures which yield well-behaved versions of infinitary lambda calculus. 19 Unsolvable/!-undefined/001-active A lambda term s is solvable [Bar84] if there exist tuples x of variables and t of terms such that (x:s)t !! I.
Reference: [Klo92] <author> J. W. Klop. </author> <title> Term rewriting systems. </title> <booktitle> In [AGM92, </booktitle> <pages> pp. 1-116], </pages> <year> 1992. </year>
Reference-contexts: The latter allow infinitely large terms and rewrite sequences of any ordinal length, the basic theory of which has been set out for both term rewrite systems [KKSdV95b] and lambda calculus [KKSdV96]. We assume the reader to be familiar with the basic theory of term rewriting systems <ref> [DJ90, Klo92] </ref> and lambda calculus [Bar84, HS86]. We will show the usefulness of our axioms in several ways. * They arise naturally from the notion of rewriting as computation of the meaning of terms. * The axioms imply two standard lemmas: the Genericity Lemma and the Consistency Lemma. <p> B (A) has an infinite rewrite, but its reduct C does not. However, for finitary orthogonal non-erasing TRSs | that is, where every variable occurring on the left of a rule also occurs on the right of that rule (cf. <ref> [Klo92, p. 75] </ref>) | the two classes coincide and are generic. Axiom 4 (2) holds, since root-active terms have no normal form. <p> From Lemma 3.7 we have t !! q 0 U = q. By Axiom 2, q 0 must also be overlapped by a redex, therefore t is not opaque. !-undefined A finite term is !-undefined if all terms reachable from it can be decomposed into `redex compatible' parts <ref> [Klo92, Def. 3.3.15] </ref>. Precisely, we add a nullary symbol !, and define the !-rule: t ! ! if t is not ! and can be transformed into a redex by replacing occurrences of ! by other terms. Every finite term t has a unique normal form !(t) by this rule.
Reference: [Kup94] <author> J. Kuper. </author> <title> Partiality in Logic and Computation, Aspects of Unde-finedness. </title> <type> PhD thesis, </type> <institution> Universiteit Twente, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: But t [x := s] is easy, therefore so is (x:t)s. We do not know the status of Axiom 5. Unusable Consider the lambda calculus ffi with ffi-rules of <ref> [Kup94, Sec. 7.2] </ref> and [Kup95].
Reference: [Kup95] <author> J. Kuper. </author> <title> Proving the Genericity Lemma by leftmost reduction is simple. </title> <booktitle> In Proc. Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 271-278, </pages> <year> 1995. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 914. </volume> <pages> 21 </pages>
Reference-contexts: But t [x := s] is easy, therefore so is (x:t)s. We do not know the status of Axiom 5. Unusable Consider the lambda calculus ffi with ffi-rules of [Kup94, Sec. 7.2] and <ref> [Kup95] </ref>. Define the notion of strict context thus: the empty context [ ] is a strict context, and if C [ ] is a strict context, then so are C [ ]s, x:C [ ] and F C [ ], for any term s, variable x and constant F .
Reference: [Lee90] <editor> J. van Leeuwen, editor. </editor> <booktitle> Handbook of Theoretical Computer Sci--ence, volume B: Formal Models and Semantics. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference: [Ong88] <author> C.-H. L. Ong. </author> <title> The Lazy Lambda Calculus: An Investigation into the Foundations of Functional Programming. </title> <type> PhD thesis, </type> <institution> Imperial College of Science and Technology, University of London, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: It is well-known that the unsolvable terms are exactly the terms without head normal form. This implies that unsolvability is equivalent to 001-active, treated above. Hence all axioms hold. Strongly unsolvable/101-active A term is strongly unsolvable <ref> [Ong88, Sec. 2.1.1-2] </ref> if it is a zero term and it is not convertible to a term of the form xs. That is, it has no weak head normal form, or equivalently it is a 101-active form, treated above. Hence all axioms hold.
Reference: [Oos94] <author> V. van Oostrom. </author> <title> Confluence for Abstract and Higher-Order Rewriting. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Definition 2.2 A term t is root-active if every reduct of t can be reduced to a redex. R is the set of root-active terms. A term rewrite rule is collapsing if its right-hand side is a variable. A higher-order rewrite rule (see e.g. <ref> [Oos94] </ref>) is collapsing if the root of its right-hand side is a metavariable. A collapsing redex is a redex of a collapsing rule. A term is hypercollapsing if each of its reducts reduces to a collapsing redex. H is the set of hypercollapsing terms.
References-found: 18

