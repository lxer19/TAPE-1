URL: http://www.cs.ucsb.edu/~schauser/papers/97-ipps-superweb.ps
Refering-URL: http://www.cs.ucsb.edu/~schauser/papers/
Root-URL: http://www.cs.ucsb.edu
Email: fberto,ibel,schauser,chrissg@cs.ucsb.edu  
Title: SuperWeb: Towards a Global Web-Based Parallel Computing Infrastructure  
Author: Albert D. Alexandrov, Maximilian Ibel, Klaus E. Schauser, and Chris J. Scheiman 
Keyword: Global computing, Internet, Java, WorldWide-Web, massively parallel computing, secure computing, microeconomic model.  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: The Internet, best known by most users as the WorldWide-Web, continues to expand at an amazing pace. We propose a new infrastructure to harness the combined resources, such as CPU cycles or disk storage, and make them available to everyone interested. This infrastructure has the potential for solving parallel supercomputing applications involving thousands of cooperating components. Our approach is based on recent advances in Internet connectivity and the implementation of safe distributed computing embodied in languages such as Java. We developed a prototype of a global computing infrastructure, called SuperWeb, that consists of hosts, brokers and clients. Hosts register a fraction of their computing resources (CPU time, memory, bandwidth, disk space) with resource brokers. Client computations are then mapped by the broker onto the registered resources. We examine an economic model for trading computing resources, and discuss several technical challenges associated with such a global computing environment. 
Abstract-found: 1
Intro-found: 1
Reference: [BBB96] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: Tests were run on a heterogeneous platform consisting of Pentiums, Meiko CS-2 nodes (Sparc 10s) and UltraSparcs. scale networks. These include ATLAS <ref> [BBB96] </ref>, Charlotte [BKKW96], and ParaWeb [BSST96].
Reference: [BKKW96] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyck-off. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In In Proceedings of the 9th Conference on Parallel and Distributed Computing Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Tests were run on a heterogeneous platform consisting of Pentiums, Meiko CS-2 nodes (Sparc 10s) and UltraSparcs. scale networks. These include ATLAS [BBB96], Charlotte <ref> [BKKW96] </ref>, and ParaWeb [BSST96].
Reference: [BSST96] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In In Proceedings of the Seventh ACM SIGOPS Euro-pean Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: Tests were run on a heterogeneous platform consisting of Pentiums, Meiko CS-2 nodes (Sparc 10s) and UltraSparcs. scale networks. These include ATLAS [BBB96], Charlotte [BKKW96], and ParaWeb <ref> [BSST96] </ref>.
Reference: [CCI + 97] <author> P. Capello, B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-based computing using Java. </title> <type> Technical report, </type> <institution> University of California, Santa Barbara, </institution> <year> 1997. </year>
Reference-contexts: This can be generalized to a division scheme that guarantees that even k out of a total of n parts of the computation do not reveal meaningful information. 6 Measurements In this section we cite and briefly discuss performance numbers from a second prototype implementation of SuperWeb, called Javelin <ref> [CCI + 97] </ref>. For a more detailed presentation of the performance results and the application used the reader is referred to [CCI + 97]. <p> of the computation do not reveal meaningful information. 6 Measurements In this section we cite and briefly discuss performance numbers from a second prototype implementation of SuperWeb, called Javelin <ref> [CCI + 97] </ref>. For a more detailed presentation of the performance results and the application used the reader is referred to [CCI + 97]. The experiments were conducted on a heterogeneous network of computers consisting of a 64-node Meiko CS-2, Sun UltraSparcs, and Pentium PCs connected by an SCI and 10 Mbit Ethernet networks. The test were done with the Mersenne Prime Application.
Reference: [CDL + 96] <author> K. M. Chandy, B. Dimitrov, H. Le, J. Mandle--son, M. Richardson, A. Rifkin, P. A. G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. <ref> [CDL + 96] </ref> and Fox et al. [FF96].
Reference: [Fei85] <author> J. Feigenbaum. </author> <title> Encrypting Problem Instances | Or, ..., Can You Take Advantage of Someone Without Having to Trust Him? In Proceedings of the CRYPTO'85 Conference, </title> <type> 85. </type>
Reference-contexts: One approach is to encrypt the input and run an algorithm on it that works without explicitly decrypting the data at any point. Although this idea looks utopian at first glance, the idea of encrypted computing is neither completely new nor impracticable. Indeed Feigenbaum <ref> [Fei85] </ref> showed that many, if not all NP-complete problems are encryptable, i.e., allow for an encryption scheme sketched above. Although encrypted computing is probably not possible for all applications, there are important practical problems that are encryptable, such as the Fast Fourier Transform (FFT) and matrix multiplication.
Reference: [Fer] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia.edu/~ajf2j/jpvm.html. </address>
Reference-contexts: Thus, they are limited in size and have a high administrative overhead. Although more recent systems, such as JPVM <ref> [Fer] </ref> and Java-MPI [Tay], overcome the heterogeneity of today's networks, they are not intended to execute on anonymous machines.
Reference: [FF96] <author> G. Fox and W. Furmanski. </author> <title> Towards Web/Java based High Performance Distributed Computing - An Evolving Virtual Machine. </title> <booktitle> In In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [CDL + 96] and Fox et al. <ref> [FF96] </ref>. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]).
Reference: [FJa] <institution> Free Java compilers. </institution> <address> http://webhackers.cygnus.com/ webhackers/projects/java.html. </address>
Reference-contexts: Recently, a large variety of Java performance boosters <ref> [FJa] </ref> available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries.
Reference: [GK92] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of Recycled Garbage: Preliminary Experience with Piranha. </title> <booktitle> In Proceedings of the Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha <ref> [GK92] </ref>, and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [GM95] <author> J. Golsing and H. McGilton. </author> <title> The Java Language Environment A Whitepaper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Ideally, the combined resources of millions of hosts on the Internet could be harnessed to form a powerful global computing infrastructure. Recent advances made in Internet connectivity, and the implementation of safe distributed computing as embodied in languages such as Java <ref> [GM95] </ref> make this a promising and realizable goal. Key idea. We propose a design of a global computing infrastructure called SuperWeb. In our model there are three kinds of participating computers: brokers, clients and hosts. Brokers coordinate the supply and demand for computing resources. <p> With this approach, the client compiles its task to the machine independent language and then sends it to the host. The host executes the task either by interpreting it, or by compiling and then running it. Java <ref> [GM95] </ref> employs this approach. It defines both a high-level programming language for writing programs and a machine-independent virtual machine language, Java bytecode. Although it provides additional compatibility and security guarantees, it is not necessary to invent a new high-level language in order to ensure portability.
Reference: [Gut] <author> Y. S. Gutfreund. </author> <note> The WWWinda Orchestrator. http://info.gte.com/ftp/circus/Orchestrator/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and <ref> [Gut] </ref>). Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. The secure execution of arbitrary binaries has been recently addressed by at least two techniques.
Reference: [GWF + 94] <author> A. S. Grimshaw, W. A. Wulf, J. C. French, A. C. Weaver, and P. F. Reynolds, Jr. </author> <title> A Synopsis of the Legion Project. </title> <type> Technical Report CS-94-20, </type> <institution> Department of Computer Science, University of Virginia, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion <ref> [GWF + 94] </ref> can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [GWTB96] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications | Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Before running a piece of machine code, it is instrumented by placing safety checks in front of every potentially dangerous instruction. If a safety check determines a security violation, the perpetrating instruction is aborted. Other variations of SFI <ref> [GWTB96] </ref> do not modify the executable at all, but instead use operating system specific mechanisms to intercept and screen dangerous system calls. 4.4 Correctness The economic incentive in SuperWeb raises the very real possibility of incorrect behavior (cheating). <p> The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques [Sof95] guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications <ref> [GWTB96] </ref> use operating system tracing facilities to limit the use of resources that could violate system integrity. 8 Conclusion In this paper, we have proposed a global computing architecture.
Reference: [HOR] <institution> HORB - Hirano's Object Request Broker. </institution> <note> http://ring.etl.go.jp/openlab/horb/. </note>
Reference-contexts: This was a rudimentary implementation based on HORB <ref> [HOR] </ref>. It had poor performance and none of the enhancements discussed later. Nevertheless, it is a good practical illustration of how SuperWeb can be implemented. In the prototype, hosts register their CPU by visiting a broker web page.
Reference: [Man95] <author> M. S. Manasse. </author> <title> The Millicent Protocols for Electronic Commerce. </title> <booktitle> In First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, NY, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Depending on the value of its services, the client receives certain credits in exchange. A similar approach has been suggested by the Mariposa project [SDK + 94]. Most likely, currency-based trading would form the basis of this model, and a micro-currency <ref> [Tan95, Man95] </ref> could be used, since the cost of a short computation is very small. Alternatively, it may be better to consider a economic model based on barter.
Reference: [MPI94] <author> MPI: </author> <title> A Message-Passing Interface Standard. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 8(3), </volume> <year> 1994. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI <ref> [MPI94] </ref>, Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in
Reference: [Ros] <author> D. Rossi. </author> <note> Jada. http://www.cs.unibo.it/~rossi/jada/. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], <ref> [Ros] </ref> and [Gut]). Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. The secure execution of arbitrary binaries has been recently addressed by at least two techniques.
Reference: [SC96] <author> P. A. G. Sivilotti and K. M. Chandy. </author> <title> Reliable Synchronization Primitives for Java Threads. </title> <type> Technical Report CS-TR-96-11, </type> <institution> California Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) [Sun96b] and Object Serialization [Sun96a], or have already been provided by other research groups (for example <ref> [SC96] </ref>, [Ros] and [Gut]). Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. The secure execution of arbitrary binaries has been recently addressed by at least two techniques.
Reference: [SDK + 94] <author> M. Stonebraker, R. Devine, M. Kor-nacker, W. Litwin, A. Pfeffer, A. Sah, and C. Staelin. </author> <title> An economic paradigm for query processing and data migration in Mariposa. </title> <booktitle> In Proceedings of the Third International Conference on Parallel and Distributed Information Systems, </booktitle> <address> Austin, TX, </address> <month> September </month> <year> 1994. </year>
Reference-contexts: This quality might be measured in reliability promises or time and availability constraints. Depending on the value of its services, the client receives certain credits in exchange. A similar approach has been suggested by the Mariposa project <ref> [SDK + 94] </ref>. Most likely, currency-based trading would form the basis of this model, and a micro-currency [Tan95, Man95] could be used, since the cost of a short computation is very small. Alternatively, it may be better to consider a economic model based on barter.
Reference: [Sof95] <institution> Colusa Software. </institution> <note> Omniware Technical Overview. http://www.colusa.com, 1995. </note>
Reference-contexts: Java [GM95] employs this approach. It defines both a high-level programming language for writing programs and a machine-independent virtual machine language, Java bytecode. Although it provides additional compatibility and security guarantees, it is not necessary to invent a new high-level language in order to ensure portability. For example, Omniware <ref> [Sof95] </ref> only defines a machine-independent task shipping language and any high-level language can be compiled to it. Another feasible solution is to submit tasks as machine specific binaries. This offers high execution speed, but limits the choice of hosts on which the task can run in a heterogeneous environment. <p> Fortunately, this is not a fundamental problem with portable code, but rather a shortcoming of the current implementations. For example, compiled Omniware tasks run within 9.3% of native machine code <ref> [Sof95] </ref>. Even for Java, modern techniques such as just-in-time compilation and dynamic compilation can eliminate most of the interpretation overhead by compiling pieces of the application to machine code. Using these approaches, Java bytecode code can be executed at a speed close to that of compiled C code. <p> Ensuring protection of the host from compiled code or plain binary executables is more complicated since there is no controlling entity that can check every instruction for safety. The recently developed technique of Software Fault Isolation (SFI) <ref> [Sof95] </ref> inserts the protection checks in the machine code itself. Before running a piece of machine code, it is instrumented by placing safety checks in front of every potentially dangerous instruction. If a safety check determines a security violation, the perpetrating instruction is aborted. <p> Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too. The secure execution of arbitrary binaries has been recently addressed by at least two techniques. First, software-based fault isolation techniques <ref> [Sof95] </ref> guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications [GWTB96] use operating system tracing facilities to limit the use of resources that could violate system integrity. 8 Conclusion In this paper, we have proposed a global computing architecture.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <type> Technical Report ORNL/TM-11375, </type> <institution> Dept. of Math and Computer Science, Emory University, </institution> <address> Atlanta, GA, USA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM <ref> [Sun90] </ref>, MPI [MPI94], Linda [WL88], CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures
Reference: [Sun96a] <author> Sun Microsystems, Inc. </author> <title> Java Object Serialization Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) [Sun96b] and Object Serialization <ref> [Sun96a] </ref>, or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Sun96b] <author> Sun Microsystems, Inc. </author> <title> Java Remote Method Invocation Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Re mote Method Invocation (RMI) <ref> [Sun96b] </ref> and Object Serialization [Sun96a], or have already been provided by other research groups (for example [SC96], [Ros] and [Gut]). Recently, a large variety of Java performance boosters [FJa] available. Most commercial compiler vendors offer JIT Java compilers, and new web browsers use JIT techniques, too.
Reference: [Tan95] <author> L. Tang. </author> <title> A Set of Protocols for Micropayments in Distributed Systems. </title> <booktitle> In First USENIX Workshop on Electronic Commerce, </booktitle> <address> New York, NY, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Depending on the value of its services, the client receives certain credits in exchange. A similar approach has been suggested by the Mariposa project [SDK + 94]. Most likely, currency-based trading would form the basis of this model, and a micro-currency <ref> [Tan95, Man95] </ref> could be used, since the cost of a short computation is very small. Alternatively, it may be better to consider a economic model based on barter.
Reference: [Tay] <author> S. Taylor. </author> <title> Prototype Java-MPI Package. http://cisr.anu.edu.au/~sam/java/ java mpi prototype.html. </title>
Reference-contexts: Thus, they are limited in size and have a high administrative overhead. Although more recent systems, such as JPVM [Fer] and Java-MPI <ref> [Tay] </ref>, overcome the heterogeneity of today's networks, they are not intended to execute on anonymous machines.
Reference: [WL88] <author> R. A. Whiteside and J. S. Leichter. </author> <title> Using Linda for Supercomputing on a Local Area Network. </title> <type> Technical Report YALEU/DCS/TR-638, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Con-necticut, </address> <year> 1988. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda <ref> [WL88] </ref>, CORBA [YD96], Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
Reference: [YCW92] <author> K. Q. Yan, Y. H. Chin, and S. C. Wang. </author> <title> Optimal agreement protocol in malicious faulty processors and faulty links. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(3), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: This at least doubles the amount of work done by the computation, but gives a reasonable guarantee that the results are correct. Some work in the area of fault-tolerance with malicious failures can be found in <ref> [YCW92] </ref>. A related concern is fault-tolerance caused by non-malicious failures: clients or hosts crash or lose connectivity, networks go down, etc. This related issue is also important, though easier to handle, and sufficiently covered in the literature. 4.5 Communication speed For many parallel applications the communication network is a bottleneck.
Reference: [YD96] <author> Z. Yang and K. Duddy. </author> <title> CORBA: A Platform for Distributed Object Computing. </title> <journal> OSR, </journal> <volume> 30(2), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: Earlier network computing approaches, such as Network of Workstations (NOW), PVM [Sun90], MPI [MPI94], Linda [WL88], CORBA <ref> [YD96] </ref>, Piranha [GK92], and Legion [GWF + 94] can be distinguished from this project in that they either require the user to have login access to all machines used in the computation, require operating system modifications, or require the maintenance of binaries for all architectures used in the computation.
References-found: 29

