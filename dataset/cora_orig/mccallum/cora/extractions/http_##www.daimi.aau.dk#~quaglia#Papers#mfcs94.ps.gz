URL: http://www.daimi.aau.dk/~quaglia/Papers/mfcs94.ps.gz
Refering-URL: http://www.daimi.aau.dk/~quaglia/papers.html
Root-URL: http://www.daimi.aau.dk
Email: fgiangi,ugo,quagliag@di.unipi.it  
Title: A -calculus with Explicit Substitutions: the Late Semantics  
Author: GianLuigi Ferrari Ugo Montanari Paola Quaglia 
Date: 342-351, 1994  
Note: In: Proc. MFCS '94, LNCS 841, pp.  
Address: Pisa  
Affiliation: Dipartimento di Informatica, Universita di  
Abstract: A new formulation of the -calculus, where name instantiation is handled explicitly, is presented. The explicit handling of name instantiation allows us to reduce the -calculus transitional semantics to a standard SOS framework. Hence, -calculus bisimulation models can take fully advantage of the SOS meta-theory developed for `static' process calculi. For instance, complete axiomatic characterizations of -calculus bisimulation equivalences can be automatically derived by turning SOS rules into equations. Moreover, this formulation of the -calculus is promising for the development of semantic-based automatic verification tools. Here we treat in full detail the Late bisimulation semantics. A finite branching labelled transition system and a complete axiomatic characterization of the Late bisimulation equivalence are obtained. 
Abstract-found: 1
Intro-found: 1
Reference: [ABV92] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS Rules into Equations. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 113-124, </pages> <year> 1992. </year>
Reference-contexts: The SOS system we provide fits in a mild generalization ([FGM91]) of the De Simone general format [DS85]. As a consequence, the axiomatic characterization (s) of the -calculus bisimulation (s) can be automatically derived without caring of the specific issue of naming but by simply using a general procedure <ref> [ABV92] </ref> which only analyzes the structure of the inference rules. As a final remark notice that, although naming is explicitly handled, our work is only remotely related to the nameless approaches to -calculi (e.g. the De Bruijn notation). <p> If 1 and 2 are j-reachable, then a -calculus process P exists such that 1 :: P and 2 :: P are j-reachable, and ( 1 :: P ) 6 j 2 We now provide an equational characterization of the Strong bisimulation semantics by exploiting the procedure presented in <ref> [ABV92] </ref>. The key idea of [ABV92] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This last problem was already solved in [HM85]. <p> are j-reachable, then a -calculus process P exists such that 1 :: P and 2 :: P are j-reachable, and ( 1 :: P ) 6 j 2 We now provide an equational characterization of the Strong bisimulation semantics by exploiting the procedure presented in <ref> [ABV92] </ref>. The key idea of [ABV92] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This last problem was already solved in [HM85].
Reference: [BIM88] <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation Can't Be Traced: Preliminary Report. </title> <booktitle> In Proc. 15th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 229-239, </pages> <year> 1988. </year>
Reference-contexts: A format is a constraint on the syntactic structure of the SOS inference rules such that some general theorems hold (e.g. `bisimulation is a congruence' <ref> [DS85, BIM88, GV92] </ref>) for all the process combinators whose behaviour can be described within the format. Finally, even if the -calculus owes a lot to CCS [Mil80], the algorithms developed for CCS automated verification tools (e.g. [CPS93]) cannot be directly re-used for it.
Reference: [CPS93] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: A Semantics-Based Tool for the Verification of Concurrent Systems. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: Finally, even if the -calculus owes a lot to CCS [Mil80], the algorithms developed for CCS automated verification tools (e.g. <ref> [CPS93] </ref>) cannot be directly re-used for it. Summarizing, both theoretical and practical considerations call for an explicit handling of name instantiation. In this paper, we provide a new but equivalent formulation of the -calculus, where name instantiation is handled explicitly via the introduction of a suitable combinator.
Reference: [DS85] <author> R. De Simone. </author> <title> Higher level synchronizing devices in MEIJE-SCCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 37(3) </volume> <pages> 245-267, </pages> <year> 1985. </year>
Reference-contexts: A format is a constraint on the syntactic structure of the SOS inference rules such that some general theorems hold (e.g. `bisimulation is a congruence' <ref> [DS85, BIM88, GV92] </ref>) for all the process combinators whose behaviour can be described within the format. Finally, even if the -calculus owes a lot to CCS [Mil80], the algorithms developed for CCS automated verification tools (e.g. [CPS93]) cannot be directly re-used for it. <p> The main contribution of this paper is the characterization of the semantics of fi-nite -calculus agents as a standard SOS. The SOS system we provide fits in a mild generalization ([FGM91]) of the De Simone general format <ref> [DS85] </ref>. As a consequence, the axiomatic characterization (s) of the -calculus bisimulation (s) can be automatically derived without caring of the specific issue of naming but by simply using a general procedure [ABV92] which only analyzes the structure of the inference rules. <p> The bisimulation over the labelled transition system induced by the pair (j; ffi) is denoted by ffi . 2 As a final remark, notice that the inference rules of Tab. 1 fit with a mild generalization of the De Simone format <ref> [DS85] </ref> where labels of transitions are elements of an algebra with several operations rather than elements of a monoid of actions. Also the inference rule (fl) immediately fits with the same generalization. 2 The Late semantics In this section we present the characterization result for the Late semantics.
Reference: [FGM91] <author> G.L. Ferrari, R. Gorrieri, and U. Montanari. </author> <title> An Extended Expansion Theorem. </title> <booktitle> In Proc. International Joint Conference on Theory and Practice of Software Development, TAPSOFT '91, volume 494 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The second component is a logical formula, called obligation. The symbolic operational semantics is reported in Tab. 1. Transition labels (see Tab. 2) form an algebra with several operations: an Observation Algebra in the spirit of <ref> [FGM91] </ref>. Notice that, differently from the -calculus, communication is characterized by a single inference rule. More precisely, we avoided to use the Close rule which describes the communication of a private name and causes a restriction to appear on the top of the synchronizing processes.
Reference: [GV92] <author> J.F. Groote and F. Vaandrager. </author> <title> Structured Operational Semantics and Bisimulation as a Congruence. </title> <journal> Information and Computation, </journal> <volume> 100(2) </volume> <pages> 202-260, </pages> <year> 1992. </year>
Reference-contexts: A format is a constraint on the syntactic structure of the SOS inference rules such that some general theorems hold (e.g. `bisimulation is a congruence' <ref> [DS85, BIM88, GV92] </ref>) for all the process combinators whose behaviour can be described within the format. Finally, even if the -calculus owes a lot to CCS [Mil80], the algorithms developed for CCS automated verification tools (e.g. [CPS93]) cannot be directly re-used for it.
Reference: [HM85] <author> M. Hennessy and R. Milner. </author> <title> Algebraic Laws for Nondeterminism and Concurrency. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 137-161, </pages> <year> 1985. </year>
Reference-contexts: The key idea of [ABV92] is to reduce processes to head normal forms (finite labelled trees) by introducing suitable auxiliary operators. Thus, proving completeness is reduced to proving equalities of labelled finite trees. This last problem was already solved in <ref> [HM85] </ref>.
Reference: [McC60] <author> J. McCarthy. </author> <title> Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part 1. </title> <journal> Communications of the ACM, </journal> <volume> 3, </volume> <year> 1960. </year>
Reference-contexts: The update and the result functions (j L , ffi L ) for the Late schema are reported in Tab. 3 in McCarthy style <ref> [McC60] </ref>. We now comment on the definition of j L , where we coerce elements to be singleton sets. The first step in computing the update function j L consists in checking for the environment to contain an active variable.
Reference: [Mil80] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Finally, even if the -calculus owes a lot to CCS <ref> [Mil80] </ref>, the algorithms developed for CCS automated verification tools (e.g. [CPS93]) cannot be directly re-used for it. Summarizing, both theoretical and practical considerations call for an explicit handling of name instantiation.
Reference: [MPW91] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal Logics for Mobile Processes. </title> <booktitle> In Proc. 2nd CONCUR, volume 527 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: It turns out that the strategies for name instantiation can be uniformly described by suitable formulations of the functions j and ffi. Here we treat in detail only the Late semantics. In the full paper we show how other -calculus bisimulation semantics (Early <ref> [MPW91] </ref>, Open [San93]) can be retrieved simulating by convenient definitions of (j,ffi) the corresponding name instantiation strategies. Some basic properties characterize our treatment of the -calculus semantics. <p> Then P is Late bisimilar to Q iff ( N :: P ) j L The observability of the actual parameter of an input action is worth some discussion. In <ref> [MPW91] </ref> the Early bisimulation semantics was given an alternative characterization in terms of the Strong bisimulation over a specialized transition system which makes observable the actual instantiation of input objects. <p> Here, we dealt with the finitary fragment of the -calculus, and discussed in detail only the Late semantics. However, both Theorem 5 and Theorem 7 hold for the full calculus. Also, other bisimulation semantics (e.g. Early <ref> [MPW91] </ref>, Open [San93]) and their equational characterizations can be retrieved as suitable instances of the j ffi Strong bisimulation. Acknowledgments We are very grateful to Rocco De Nicola, Joachim Parrow and Davide Sangiorgi for their comments on early stages of the work.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, Part I and II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: 0 Introduction The -calculus <ref> [MPW92] </ref> is a process calculus able to express concurrent computations of `mobile' processes, i.e. agents with a communication topology which is dynamically changing. The most primitive notion in the -calculus is that of naming. <p> Substitution of names for names crucially manifests itself also in the definition of behavioural equivalences. For instance, consider the input clause of the Late bisimulation relation <ref> [MPW92] </ref>: if P !P 0 and y 62 f n (P; Q), then there is Q 0 such that Q !Q 0 and for all w, P 0 fw=yg is Late bisimilar to Q 0 fw=yg. (L) ? Work partially supported by ESPRIT BRA Project 6454 CONFER.
Reference: [Par81] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> In Proc. 5th GI-Conference, volume 104 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: The result function ffi computes concrete labels which do not include obligations anymore. Hence, the transition system induced by the pair (j; ffi) is a standard labelled transition system, and the usual notion of Strong bisimulation <ref> [Par81] </ref> can be used to equate -calculus processes.
Reference: [Plo81] <author> G. D. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DAIMI-FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: Due to the fact that name instantiation is a meta-syntactic operation, the -calculus transitional semantics does not fit with any of the studied SOS <ref> [Plo81] </ref> formats. A format is a constraint on the syntactic structure of the SOS inference rules such that some general theorems hold (e.g. `bisimulation is a congruence' [DS85, BIM88, GV92]) for all the process combinators whose behaviour can be described within the format. <p> Either in x (y) or in xy or in x (y), the name x is said the subject, while y is called the object. 1.0 The symbolic operational semantics We first define an operational semantics in the style of <ref> [Plo81] </ref>. It is called symbolic in that neither requirements on names are checked, nor name instantiation is applied to processes. Both requirements and name instantiation are made symbolic via a labelled transition system where transition labels ! are pairs of the form hff; Ci.
Reference: [San93] <author> D. Sangiorgi. </author> <title> A Theory of Bisimulation for the -calculus. </title> <booktitle> In Proc. 4th CONCUR, volume 715 of LNCS. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: It turns out that the strategies for name instantiation can be uniformly described by suitable formulations of the functions j and ffi. Here we treat in detail only the Late semantics. In the full paper we show how other -calculus bisimulation semantics (Early [MPW91], Open <ref> [San93] </ref>) can be retrieved simulating by convenient definitions of (j,ffi) the corresponding name instantiation strategies. Some basic properties characterize our treatment of the -calculus semantics. We prove that environments have fully abstract semantics, in the sense that they include the minimal information needed to distinguish between observationally inequivalent processes. <p> Moreover at any time during execution only finitely many names are considered. So -calculus processes can be always represented by labelled trees with a finite branching degree. Up-to-date the only tree-like representations of -calculus terms are the so-called `conditional trees' <ref> [San93] </ref>. They are trees whose branches, besides being labelled by actions, may also be labelled by predicates on names (e.g. x = y). <p> Here, we dealt with the finitary fragment of the -calculus, and discussed in detail only the Late semantics. However, both Theorem 5 and Theorem 7 hold for the full calculus. Also, other bisimulation semantics (e.g. Early [MPW91], Open <ref> [San93] </ref>) and their equational characterizations can be retrieved as suitable instances of the j ffi Strong bisimulation. Acknowledgments We are very grateful to Rocco De Nicola, Joachim Parrow and Davide Sangiorgi for their comments on early stages of the work.
References-found: 14

