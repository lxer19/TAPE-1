URL: ftp://ftp.netcom.com/pub/hb/hbaker/Subtypep.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: (818) 501-4956(818) 986-1360 (FAX)  
Title: A Decision Procedure for Common Lisp's SUBTYPEP Predicate  ideal for performing type inference  
Author: Henry G. Baker 
Keyword: system of Common Lisp [Beer88]. Categories and Subject Descriptors: Lisp, dynamic typing, compiler optimization, type inference, decision procedure.  
Address: 16231 Meadow Ridge Way, Encino, California 91436  
Affiliation: Nimble Computer Corporation,  
Note: Lisp and Symbolic Computation 5,3 (Sept.1992), 157-190. 1989 Nimble Computer Corporation 1  This work was supported in part by the U.S. Department of Energy Contract No. DE-AC03-88ER80663. The lattice mechanism described here for deciding subtypep is also  [Baker90]; the particular implementation developed here, however, is specific to the type  1 I n t r o d u c t i o n  
Abstract: Common Lisp [CL84,CL90] includes a dynamic datatype system of moderate complexity, as well as predicates for checking the types of language objects. Additionally, an interesting predicate of two "type specifiers"SUBTYPEPis included in the language. This subtypep predicate provides a mechanism with which to query the Common Lisp type system regarding containment relations among the various built-in and user-defined types. While subtypep is rarely needed by an applications programmer, the efficiency of a Common Lisp implementation can depend critically upon the quality of its subtypep predicate: the runtime system typically calls upon subtypep to decide what sort of representations to use when making arrays; the compiler calls upon subtypep to interpret user declarations, on which efficient data representation and code generation decisions are based. As might be expected due to the complexity of the Common Lisp type system, there may be type containment questions which cannot be decided. In these cases subtypep is expected to return "can't determine", in order to avoid giving an incorrect answer. Unfortunately, most Common Lisp implementations have abused this license by answering "can't determine" in all but the most trivial cases. In particular, most Common Lisp implementations of SUBTYPEP fail on the basic axioms of the Common Lisp type system itself [CL84,p.33]. This situation is particularly embarrassing for Lispthe premier "symbol processing language"in which the implementation of complex symbolic logical operations should be relatively easy. Since subtypep was presumably included in Common Lisp to answer the hard cases of type containment, this "lazy evaluation" limits the usefulness of an important language feature. This paper shows how those type containment relations of Common Lisp which can be decided at all, can be decided simply and quickly by a decision procedure which can dramatically reduce the number of occurrences of the "can't determine" answer from subtypep. This decision procedure does not require the conversion of a type specifier expression to conjunctive or disjunctive normal form, and therefore does not incur the exponential explosion in space and time that such a conversion would entail. The Common Lisp functions typep and subtypep are the basic predicates of the Common Lisp type system [CL84,p.72]. Loosely speaking, (typepxy) poses the question of whether the object x is an element of the type y, while (subtypepyz) poses the question of whether the type y is a subset of the type z. While typep is heavily used to distinguish object types at runtime, and indeed the common typecase construct [CL84,p.118] depends upon typep, subtypep is considered by most Common Lisp applications programmers to be an obscure language function of only theoretical interest. However, if these programmers were aware that the quality of the optimization of their programs depended critically on the quality of the implementation of subtypep, they might take more notice. For example, these programmers might become exasperated if a program with a variable declared as a bit (taking on only the integer values 0 or 1) 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ada83. </author> <title> Reference Manual for the Ada Programming Language. ANSI/MIL-STD-1815A-1983, </title> <type> US GPO, </type> <address> Wash, DC, </address> <year> 1983. </year>
Reference: <author> Aho86. Aho, Alfred V.; Sethi, Ravi; and Ullman, Jeffrey D. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference: <author> Baker90. Baker, Henry G. </author> <title> "The Nimble Type Inferencer for Common Lisp-84". </title> <note> Submitted to ACM Trans. on Prog. Langs. and Systems. </note>
Reference: <author> Bauer74. Bauer, Alan M., and Saal, Harry J. </author> <title> "Does APL really need runtime checking?" Software Practice and Experience, v.4, </title> <publisher> 1974,pp.129-138. </publisher>
Reference: <author> Beer88. Beer, Randall D. </author> <title> "The compile-time type inference and type checking of Common Lisp programs: a technical summary". </title> <type> TR 88-116, Ctr. </type> <institution> for Automation and Intelligent Sys. Research, Case Western Reserve Univ., </institution> <month> May </month> <year> 1988. </year>
Reference: <author> Bobrow88. Bobrow, et al. </author> <title> "Common Lisp Object System Specification X3J13", </title> <journal> ACM SIGPLAN Notices, </journal> <note> v.23, Sept. 1988; also Lisp and Symbolic Computation 1, 3-4, pp245-394; also X3J13 Document 88-002R, </note> <month> June </month> <year> 1988. </year>
Reference: <author> Borning82. Borning, Alan H. and Ingalls, Daniel H. H. </author> <title> "A Type Declaration and Inference System for Smalltalk" ACM POPL 9, 1982, pp.133-141. Budd88. Budd, Timothy. An APL Compiler. </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1988. </year>
Reference: <author> Church56. Church, A. </author> <title> Introduction to Mathematical Logic, Vol. I. </title> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference: <author> CL84. Steele, Guy L., Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <year> 1984. </year>
Reference: <author> CL90. Steele, Guy L., Jr. </author> <title> Common Lisp: The Language, Second Edition. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1990. </year>
Reference: <author> Ferrante, J., and Rackoff, C. </author> <title> "A decision procedure for the first order theory of real addition with order". </title> <journal> SIAM J. Comput. </journal> <volume> 4, 1 (1975),69-76. </volume>
Reference: <author> Ferrante, J. and Geiser, J. </author> <title> "An efficient decision procedure for the theory of rational order". </title> <journal> Theor. Computer Sci. </journal> <volume> 4, 2 (1977),227-234. </volume>
Reference: <author> Hughes68. Hughes, G.E., and Cresswell, M.J. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen and Co., </publisher> <year> 1968. </year> <title> IEEE82. Floating-Point Working Group 754 of the Microprocessor Standards Committee. "A Standard for Binary Floating-Point Arithmetic". </title> <publisher> IEEE, 345 E. </publisher> <address> 47'th St., New York, NY 10017, </address> <year> 1982. </year> <booktitle> Lisp and Symbolic Computation 5,3 (Sept.1992), </booktitle> <pages> 157-190. </pages> <note> 1989 Nimble Computer Corporation 22 Loos83. </note> <author> Loos, R. </author> <title> "Computing in Algebraic Extensions". </title> <editor> In Buchberger, et al. </editor> <booktitle> Computer Algebra: Symbolic and Algebraic Computation, Second Edition. </booktitle> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1983, </year> <month> pp.173-187. </month>
Reference: <author> Kaplan80. Kaplan, Marc A., and Ullman, Jeffrey D. </author> <title> "A Scheme for the Automatic Inference of Variable Types". </title>
Reference: <author> JACM 27,1, </author> <month> Jan. </month> <year> 1980, </year> <month> pp.128-145. </month>
Reference: <author> Ma, Kwan-Liu, and Kessler, Robert R. </author> <title> "TICLA Type Inference System for Common Lisp". </title> <note> SWPrac.&Exper. </note> <author> 20,6 (June1990),593-623. MacLane67. MacLane, Saunders and Birkhoff, Garrett. </author> <title> ALGEBRA. </title> <publisher> Macmillan, </publisher> <year> 1967. </year>
Reference: <author> McAllester, David, and Zabih, Ramin. </author> <title> "Boolean Classes". </title> <booktitle> Proc. '86 OOPSLA, Sigplan Notices 21,11 (Nov. </booktitle> <address> 1986),417-423. </address>
Reference: <author> Milner78. Milner, Robin. </author> <title> "A Theory of Type Polymorphism in Programming" JCSS 17, </title> <publisher> 1978,pp.348-375. </publisher>
Reference: <author> Morris73. Morris, J.H. </author> <title> "Types are Not Sets". </title> <booktitle> ACM POPL, </booktitle> <year> 1973, </year> <title> pp.120-124. Rackoff75. Rackoff, C.W. "The complexity of theories of the monadic predicate calculus". </title> <type> IRIA Rep. 136, </type> <address> Roquencourt, France, </address> <year> 1975. </year>
Reference: <editor> Rees86. Rees, J. and Clinger, W., et al. </editor> <title> "Revised Report on the Algorithmic Language Scheme". </title> <journal> SIGPLAN Notices 21, </journal> <month> 12 (Dec. </month> <year> 1986), </year> <pages> 37-79. </pages>
Reference: <author> Scott76. Scott, D. </author> <title> "Data types as lattices". </title> <journal> SIAM J. Computing, </journal> <month> 5,3 (Sept. </month> <year> 1976), </year> <pages> 522-587. </pages>
Reference: <author> Steele78. Steele, Guy L., Jr. Rabbit: </author> <title> A Compiler for SCHEME (A Study in Compiler Optimization). </title> <booktitle> AI-TR-474, Artificial Intelligence Laboratory, </booktitle> <publisher> MIT, </publisher> <month> May </month> <year> 1978. </year>
Reference: <author> Suzuki81. Suzuki, Norihisa. </author> <title> "Inferring Types in Smalltalk". </title> <booktitle> ACM POPL 8, </booktitle> <editor> 1981,pp.187-199. Tarski51. Tarski, A. </editor> <title> A Decision Method for Elementary Algebra and Geometry, 2nd ed., </title> <institution> Univ. of Cal. Press, Berkeley, </institution> <year> 1951. </year>
References-found: 23

