URL: http://www.cs.umd.edu/users/dwelch/Pubs/dsej.ps
Refering-URL: http://www.cs.umd.edu/users/dwelch/pubs.html
Root-URL: 
Email: email: dwelch@cs.umd.edu  Mailing Address:  
Phone: Home Phone: (301) 571-9579 School Phone: (301) 405-2722 Fax: (301) 405-6707  
Title: Building Self-Reconfiguring Distributed Virtual Environments using Compensating Reconfiguration  
Author: Don Welch and Jim Purtilo Don Welch A. V. Williams Building 
Address: College Park, Maryland 20741  
Affiliation: Department of Computer Science  University of Maryland  
Note: Contact Author:  
Abstract-found: 0
Intro-found: 1
Reference: [Bro97] <author> W. Broll. </author> <title> Bringing People Together---An Infrastructure for Shared Virtual Worlds on the Internet. </title> <booktitle> In Proceedings of the 6 th WET-ICE. </booktitle> <month> June </month> <year> 1997, </year> <pages> pages 199-204. </pages>
Reference: [Bru97] <author> D. Brutzman, M. Zyda, K. Watsen, and M. Macedonia. </author> <title> Virtual Reality Transfer Protocol(VRTP) Design Rationale. </title> <booktitle> In Proceedings of the 6 th WET-ICE. </booktitle> <month> June </month> <year> 1997, </year> <pages> pages 179-186. </pages>
Reference: [Cal94] <author> J. Calvin and D. Van Hook. </author> <title> AGENTS: An Architectural Construct to Support Distributed Simulation. </title> <booktitle> In Proceedings of the 11th Distributed Interactive Simulation Standards Workshop, </booktitle> <month> Sep 94. </month> <title> [Cri91]F. Cristian. Understanding Fault-Tolerant Distriubuted Systems. </title> <journal> Communications of the ACM, </journal> <volume> 34(2) </volume> <pages> 57-78, </pages> <month> Feb. </month> <year> 1991. </year>
Reference-contexts: However, insuring that object attributes have one and only one owner is not addressed, and neither are ways to reconfigure a running federation in response to conditions. <ref> [Cal94] </ref> There has been a lot of work other than HLA to define DVE architectures and interaction protocols both in the Academic [Bro97][Bru97] and commercial realm. [Wat97] The gluing together of disparate heterogeneous distributed systems forms the foundation of HLA.
Reference: [DMSO97a] <institution> Defense Modeling and Simulation Office. High Level Architecture Rules, </institution> <month> Aug. </month> <year> 1997. </year> <note> Version 1.2. </note>
Reference-contexts: The compensating reconfiguration 7 component created through this environment imposes a very small performance penalty on the simulation, and is not an unreasonably complex burden for the simulation builders. 2. Related Work In the DoD distributed simulation domain there has been an abundance of work in defining the HLA. <ref> [DMSO97a] </ref> [DMSO97b] [DMSO97c] The HLA addresses the late joining, early departure and changing ownership of federates (simulator components).
Reference: [DMSO97b] <author> Defense Modeling and Simulation Office. </author> <title> High Level Architecture Interface Specification, </title> <month> Aug. </month> <year> 1997. </year> <note> Version 1.2. </note>
Reference-contexts: Related Work In the DoD distributed simulation domain there has been an abundance of work in defining the HLA. [DMSO97a] <ref> [DMSO97b] </ref> [DMSO97c] The HLA addresses the late joining, early departure and changing ownership of federates (simulator components).
Reference: [DMSO97c] <author> Defense Modeling and Simulation Office. </author> <title> High Level Architecture Object Model Template, </title> <month> Feb. </month> <year> 1997. </year> <note> Version 1.1. </note>
Reference-contexts: Related Work In the DoD distributed simulation domain there has been an abundance of work in defining the HLA. [DMSO97a] [DMSO97b] <ref> [DMSO97c] </ref> The HLA addresses the late joining, early departure and changing ownership of federates (simulator components).
Reference: [Fag97] <author> R. Fagin, J. Halpern, Y. Moses, and M. Vardi. </author> <title> Knowledge-based Programs. </title> <journal> Distributed Computing, </journal> <volume> 10(4) </volume> <pages> 199-225, </pages> <month> Aug. </month> <year> 1997. </year>
Reference: [Gia93] <author> J. Giarratano. </author> <title> CLIPS User's Guide. </title> <institution> NASA Johnson Space Center, Information Systems Directorate, Software Technology Branch. </institution> <year> 1993. </year>
Reference: [Hof91] <author> C. Hofmeister and J. Purtilo. </author> <title> Dynamic Reconfiguration of Distributed Programs. </title> <booktitle> In Proceedings of the 11 th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 560-571, </pages> <year> 1991. </year>
Reference-contexts: This technique is appropriate for analysis, aggregate, and test and evaluation simulations. DVEs because of their real-time nature are best reconfigured with Hofmeister's approach. <ref> [Hof91] </ref> She requires the components involved to divulge their internal state, then loads this into the new component. Since simulators in a distributed simulation continuously divulge their internal state (the part that the rest of the simulation cares about anyway), the software is ready for dynamic reconfiguration without change.
Reference: [Kra90a] <author> J. Kramer and J. Magee. </author> <title> The Evolving Philosophers Problem: Dynamic Change Management. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(11) </volume> <pages> 1293-1306, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Including compensating reconfiguration as a service allows the interface specification to remain the same while adding the functionality to the DVE. 8 There are two primary approaches to dynamic reconfiguration. The CONIC approach moves the application to a quiescent state prior to reconfiguration. <ref> [Kra90a] </ref> This approach requires logic located in each component that will migrate a component to a quiescent state in finite time. This technique is appropriate for analysis, aggregate, and test and evaluation simulations.
Reference: [Kra90b] <author> J. Kramer, J. Magee and A. Young. </author> <title> Towards Unifying Fault and Change Management. </title> <booktitle> In Proceedings of the IEEE International Workshop on Distributed Computing Systems in the 90's, </booktitle> <pages> pages 57-63, </pages> <year> 1990. </year>
Reference-contexts: Some fault-tolerant techniques apply to some instances of DVEs. [Cri91] We are working to provide a framework through which we can apply traditional fault-tolerance as well as going beyond to the rich environment of compensating reconfiguration. There has been some work in merging fault-tolerance and dynamic reconfiguration, <ref> [Kra90b] </ref> but it does not cover the complexities of the DVE domain. 9 3. COMPENSATING RECONFIGURATION DVEs may need to be dynamically reconfigured to maintain correct execution. The proper compensation for an external condition is not always readily apparent.
Reference: [Mag89] <author> J. Magee , J. Kramer and M. Sloman. </author> <title> Constructing Distributed Systems in Conic. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(6): </volume> <pages> 663-675, </pages> <month> Jun. </month> <year> 1989. </year> <month> 26 </month>
Reference-contexts: We believe that compensating reconfiguration should be one of the services provided to the components of a DVE. We built on the work in interconnection abstractions like CORBA [Sei96], CONIC <ref> [Mag89] </ref> and POLYLITH [Pur94] that provide reconfiguration primitives. Using standard interconnection abstractions makes the development of a software engineering environment practical. These abstractions make it possible for our framework to work with existing systems without resorting to changing any of the simulations themselves.
Reference: [Min96] <author> N. Minksy. </author> <title> Independent On-Line Monitoring of Evolving Systems. </title> <booktitle> In Proceedings of the 18 th International Conference on Software Engineering. </booktitle> <month> Mar. </month> <year> 1996. </year>
Reference: [Pur94] <author> J. Purtilo. </author> <title> The POLYLITH Software Bus. </title> <journal> ACM Transactions on Programming languages, </journal> <volume> 16 </volume> <pages> 151-174, </pages> <month> Jan </month> <year> 1994. </year> <title> [Sie96]J. Siegel. CORBA Fundamentals and Programming. </title> <publisher> Wiley Computer Publishing Group, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: We believe that compensating reconfiguration should be one of the services provided to the components of a DVE. We built on the work in interconnection abstractions like CORBA [Sei96], CONIC [Mag89] and POLYLITH <ref> [Pur94] </ref> that provide reconfiguration primitives. Using standard interconnection abstractions makes the development of a software engineering environment practical. These abstractions make it possible for our framework to work with existing systems without resorting to changing any of the simulations themselves.
Reference: [Wat97] <author> R. Water, D. Anderson and D. Schwenke. </author> <title> Design of the Interactive Sharing Transfer Protocol. </title> <booktitle> In Proceedings of the 6 th WET-ICE. </booktitle> <month> June </month> <year> 1997, </year> <pages> pages 140-147. </pages>
Reference-contexts: object attributes have one and only one owner is not addressed, and neither are ways to reconfigure a running federation in response to conditions. [Cal94] There has been a lot of work other than HLA to define DVE architectures and interaction protocols both in the Academic [Bro97][Bru97] and commercial realm. <ref> [Wat97] </ref> The gluing together of disparate heterogeneous distributed systems forms the foundation of HLA. We believe that compensating reconfiguration should be one of the services provided to the components of a DVE.
References-found: 15

