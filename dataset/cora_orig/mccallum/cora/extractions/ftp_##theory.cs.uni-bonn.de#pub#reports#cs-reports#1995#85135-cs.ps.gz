URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1995/85135-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1995-en.html
Root-URL: http://cs.uni-bonn.de
Email: marek@cs.uni-bonn.de  rytter@mimuw.edu.pl  ayumi@rifis.kyushu-u.ac.jp  
Phone: 2  3  
Title: An Improved Pattern-Matching Algorithm for Strings with Short Descriptions  
Author: Marek Karpinski Wojciech Rytter ; Ayumi Shinohara ; 
Note: Research partially supported by the DFG Grant KA 673/4-1, and by the ESPRIT BR Grants 7097 and ECUS 030. Supported by the DFG grant.  
Address: 53117 Bonn, Germany  ul. Banacha 2, 02-097 Warszawa, Poland  33, Fukuoka 812, Japan  
Affiliation: 1 Department of Computer Science, University of Bonn  Institute of Informatics, Warsaw University  Research Institute of Fundamental Information Science, Kyushu University  
Abstract: We improve the time complexity of the pattern matching problem for strings which are succinctly described in terms of straight-line programs (or alternatively in terms of context-free grammars or recurrences). Examples of such strings are Fibonacci words and Thue-Morse words, see [?]. Usually the strings of descriptive size n are of exponential length with respect to n. A complicated algorithm for the equality-test (testing if two shortly described strings are the same) in O(n 4 ) time was constructed in [?]. This algorithm was extended in [?] to the pattern-matching problem by using O(n 3 ) instances of the equality-test, this gave O(n 7 ) time. In this paper we reduce the time complexity to O(n 4 log n). We show that the pattern matching for shortly described strings can be done without applying an algorithm from [?] and the problem has the similar asymptotic complexity as the best algorithm for the equality-test. The latter problem is a special instance of the pattern-matching problem and can be solved by our algorithm. The crucial point in the algorithm is the succinct (linear size) representation of all (potentially many) periods of a string of an exponential size. The structure of our algorithm is bottom-up, while the construction of [?] is quite different and works top-down in the sense of evaluation trees for straight-line programs (or derivation trees in the case of grammars). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Crochemore and W. Rytter, </author> <title> Text Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> New York (1994). </address>
Reference: [2] <author> M. Farach and M. </author> <note> Thorup, "String-matching in Lempel-Ziv compressed strings", to appear in Proc. 27th ACM STOC (1995). </note>
Reference: [3] <author> D. Knuth, </author> <title> The Art of Computing, Vol. II: Seminumerical Algorithms. Second edition. </title> <publisher> Addison-Wesley (1981). </publisher>
Reference: [4] <author> M. </author> <title> Lothaire, Combinatorics on Words. </title> <publisher> Addison-Wesley (1993). </publisher>
Reference: [5] <author> M. Karpinski, W. Rytter, A. Shinohara, </author> <title> "Pattern-matching for strings with short descriptions", to appear in the proceedings of Combinatorial Pattern Matching 1995, </title> <note> preliminary version in Research Report, </note> <institution> Institut fur Informatik der Universitat Bonn, No. </institution> <month> 85124-CS </month> <year> (1995) </year>
Reference: [6] <author> W. Plandowski, </author> <title> "Testing equivalence of morphisms on context-free languages", </title> <booktitle> ESA'94, Lecture Notes in Computer Science 855, </booktitle> <publisher> Springer-Verlag, </publisher> <month> 460-470 </month> <year> (1994). </year> <title> 12 continuation of this periodicity in C is found by two applications of searching first mismatches in overlaps. 13 14 difference is the length of the pattern. </title> <type> 15 </type>
References-found: 6

