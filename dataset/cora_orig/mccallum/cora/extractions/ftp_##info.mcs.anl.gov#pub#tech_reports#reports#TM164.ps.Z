URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/TM164.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/tech_memos.htm
Root-URL: http://www.mcs.anl.gov
Title: ADIFOR Working Note #9 Getting Started with ADIFOR  
Author: by Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland 
Note: This work was supported by the Office of Scientific Computing, U.S. Department of Energy, under Contract W-31-109-Eng-38, through NSF Cooperative Agreement No. CCR-8809615, by the W. M. Keck Foundation, and by NASA Purchase Order L25935D. Address: Center for Research on Parallel  
Date: June 1993  
Web: ANL/MCS-TM-164  
Address: 9700 South Cass Avenue Argonne, IL 60439  P.O. Box 1892, Houston, TX 77251  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  Computation, Rice University,  
Pubnum: Technical Memorandum No. 164  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. DuCroz, A. Greenbaum, S. Hammarling, A. McKen-ney, S. Ostrouchov, and D. Sorensen. </author> <title> LAPACK User's Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: It shows a simple Newton iteration being used to minimize Rosenbrock's function. The routines DLANGE and DGESV from the LAPACK package <ref> [1] </ref> are used to compute the norm of y and to solve the linear system dy dx s = y. This program and all of the auxillary files mentioned in this section can be found in /usr/local/adifor/examples/rosenbrock at Argonne. For details on using ADIFOR at Argonne, see section 8.
Reference: [2] <author> Christian Bischof, Alan Carle, George Corliss, and Andreas Griewank. ADIFOR: </author> <title> Automatic differentiation in a source translator environment. </title> <editor> In Paul Wang, editor, </editor> <booktitle> International Symposium on Symbolic and Algebraic Computing 92, </booktitle> <pages> pages 294-302, </pages> <address> Washington, D.C., 1992. </address> <publisher> ACM. </publisher>
Reference-contexts: ADIFOR provides a mechanism for the automatic generation of Fortran code for the computation of derivatives, using the Fortran code for the evaluation of the function as input. More information on ADIFOR can be found in <ref> [2, 3, 4, 5] </ref>. The organization of this paper is as follows. The next section is devoted to a step-by-step description of how to process a code using ADIFOR, and an explanation of how ADIFOR-generated code may be incorporated into a program.
Reference: [3] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hovland. ADIFOR: </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 11-29, </pages> <year> 1992. </year>
Reference-contexts: ADIFOR provides a mechanism for the automatic generation of Fortran code for the computation of derivatives, using the Fortran code for the evaluation of the function as input. More information on ADIFOR can be found in <ref> [2, 3, 4, 5] </ref>. The organization of this paper is as follows. The next section is devoted to a step-by-step description of how to process a code using ADIFOR, and an explanation of how ADIFOR-generated code may be incorporated into a program.
Reference: [4] <author> Christian Bischof, George Corliss, and Andreas Griewank. </author> <title> ADIFOR exception handling. </title> <note> Technical Report ANL/MCS-TM-159 (also ADIFOR Working Note #3), </note> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: ADIFOR provides a mechanism for the automatic generation of Fortran code for the computation of derivatives, using the Fortran code for the evaluation of the function as input. More information on ADIFOR can be found in <ref> [2, 3, 4, 5] </ref>. The organization of this paper is as follows. The next section is devoted to a step-by-step description of how to process a code using ADIFOR, and an explanation of how ADIFOR-generated code may be incorporated into a program. <p> The subroutines are located in the file intrinsic.f (which can be found in /usr/local/adifor/lib | see Section 8) and this file should be included in the compilation of ADIFOR-generated code. For more details on exception handling and the supporting subroutines, see <ref> [4] </ref>, which can be found in /usr/local/adifor/doc (see Section 8). 5 Workarounds and Shortcuts 5.1 Input and Output ADIFOR currently just echoes I/O statements like READ and WRITE. <p> If feasible, try breaking the file into several smaller files, by hand or using the fsplit utility. * Compiler complains about presence of $ character If a program contains functions which have points of nondifferentiability, ADIFOR will insert calls to the exception handling library (see Section 4 and <ref> [4] </ref> for more details). At present, the subroutines in this library have names containing the $ character. This will change in future versions of ADIFOR. Presently, the simplest solution is to globally replace the $ character with some symbol which the compiler will accept.
Reference: [5] <author> Christian Bischof and Paul Hovland. </author> <title> Using ADIFOR to compute dense and sparse Jacobians. </title> <note> Technical Report ANL/MCS-TM-158 (also ADIFOR Working Note #2), </note> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1991. </year>
Reference-contexts: ADIFOR provides a mechanism for the automatic generation of Fortran code for the computation of derivatives, using the Fortran code for the evaluation of the function as input. More information on ADIFOR can be found in <ref> [2, 3, 4, 5] </ref>. The organization of this paper is as follows. The next section is devoted to a step-by-step description of how to process a code using ADIFOR, and an explanation of how ADIFOR-generated code may be incorporated into a program. <p> Then a value of 10 for PMAX is suitable choice. Also for sparse Jacobians, PMAX need not be the total number of independent variables. These issues are discussed in detail in <ref> [5] </ref>, which is available on-line (see Section 8). For our example program, we choose a value of 2 for PMAX, because x is the only independent variable, and it has 2 elements. SEP: ADIFOR uses the character specified by SEP for generating names for Fortran variables used in derivative computations. <p> Other initializations of S allow one to exploit a known sparsity structure of J (see <ref> [5] </ref>). For our example, all we wish to compute is the Jacobian, so we should let g$x = 1 0 ! More details on the initialization of seed matrices are described in Section 7.4 and in [5] (this document can be found in /usr/local/adifor/doc see Section 8). 3. <p> initializations of S allow one to exploit a known sparsity structure of J (see <ref> [5] </ref>). For our example, all we wish to compute is the Jacobian, so we should let g$x = 1 0 ! More details on the initialization of seed matrices are described in Section 7.4 and in [5] (this document can be found in /usr/local/adifor/doc see Section 8). 3. Call the ADIFOR-generated top-level subroutine The ADIFOR-generated subroutine computes both the function value and the value of the derivatives. So, in our example, we can replace both the call to func and fprime by a call to g$func$3. <p> Thus, for our simple example, the call would look like: call g$func$3 (2, x, g$x, pmax, y, g$y, pmax) For our example, the new driver is shown in Figure 4 fl . Note that ADIFOR computes the transpose of the Jacobian (see <ref> [5] </ref> for details). Hence, we must re-transpose g$y before passing it to dgesv. Together with the subroutine func and the subroutine shown in Figure 3, the new program replaces the program shown in Figure 1. <p> Other examples of seed matrix initialization can be found in <ref> [5] </ref>. 28 7.5 Incorporating the ADIFOR-generated subroutine Following the procedure outlined in Section 2, the gradient objects g$engst, g$tnsdta, g$astrpy, g$xmup, g$xmud, and g$bf should be declared and initialized, and a call to g$ssinc$4001ca00 added at the point where the derivative values are required.
Reference: [6] <author> Herbert Fischer. </author> <title> Special problems in automatic differentiation. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 43 - 50. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, Penn., </address> <year> 1991. </year>
Reference-contexts: Similarly, the value of dy dx j x=1 will be 1 rather than 4. This "anomaly" stems from the fact that automatic differentiation differentiates the statements executed in the course of program execution. This issue, as well as other subtle pitfalls, are discussed in <ref> [6] </ref>, which can be found in /usr/local/adifor/doc (see Section 8). * Nondifferentiable functions Some Fortran intrinsic functions, such as sqrt (), abs (), and max (), are not differentiable at all points. Spe cial subroutines have been implemented to handle these exceptions.
Reference: [7] <author> Andreas Griewank. </author> <title> On automatic differentiation. </title> <booktitle> In Mathematical Programming: Recent Developments and Applications, </booktitle> <pages> pages 83-108, </pages> <address> Amsterdam, 1989. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference: [8] <author> NAG. </author> <title> NAGWare f77 Tools (Unix). The Numerical Algorithms Group Limited, </title> <address> London, </address> <year> 1991. </year>
Reference-contexts: Thus, call foo (active+5.0) should be rewritten as temp = active+5.0 call foo (temp) which is processed correctly. Constants or expressions passed as arguments, which correspond to parameters that may be modified, are unsafe references (see <ref> [8] </ref>) and flagged by nag pfort as such. They are not reliably portable and hence, there may be some compilers where their use leads to unexpected results. <p> This tool rebuilds the declarative part of a Fortran 77 program unit declaring all names and also pretty prints. More details can be found in <ref> [8] </ref> and in the man pages for the individual tools (the manual pages are located in /usr/local/NAGWare f77 tools/manl). Your site may provide similar tools, such as forchek.
Reference: [9] <author> Louis B. Rall. </author> <title> Automatic Differentiation: Techniques and Applications, </title> <booktitle> volume 120 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year> <month> 33 </month>
References-found: 9

