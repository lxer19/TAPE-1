URL: http://dimacs.rutgers.edu/techps/1994/94-08.ps
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1994.html
Root-URL: http://www.cs.rutgers.edu
Email: e-mail: cucker@upf.es  e-mail: koiran@dimacs.rutgers.edu  
Title: over the Reals with Addition and Order: Higher Complexity Classes 1  
Author: by Felipe Cucker ; Pascal Koiran 
Address: Balmes 132, Barcelona 08008 SPAIN  Piscataway, NJ 08855 USA  
Affiliation: Universitat Pompeu Fabra  DIMACS, Rutgers University  LIP, Ecole Normale Superieure de Lyon, France.  
Note: Computing  2 Partially supported by DGICyT PB 920498, the ESPRIT BRA Program of the EC under contracts no. 7141 and 6546, projects ALCOM II and PROMotion. 3 Most of this author's work was performed while he was with  Support by an INRIA fellowship is also acknowledged. DIMACS is a cooperative project of Rutgers University, Princeton University, AT&T Bell Laboratories and Bellcore. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Abstract: DIMACS Technical Report 94-8 April 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.L. Balcazar, J. Diaz, and J. Gabarro. </author> <title> Structural Complexity I. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In complexity theory, it is usually done differently. The hierarchy is introduced in a recursive way using oracle machines, and the characterization of its classes in terms of quantifier alternations is then shown as a theorem (see <ref> [1] </ref> ch.8). In this section we shall prove that this equivalence also holds in our setting. We shall only do it for the ordered case, but the main result in this section also holds in the order-free case. <p> Theorem 4 For every k 0 we have a) g &lt; k k = &lt; c) g D &lt; k k = &lt; Proof. Part a) is done in the same way as theorem 8.2. in <ref> [1] </ref> and part b) trivially follows. Parts c) and d) will be shown togheter by induction on k. If k = 0 the result is certainly true. Let us then consider k &gt; 0 and let L be a set in &lt; k . <p> Proof. The set DTRAO belongs to PAR &lt; add and then to E. For the hardness we shall use an argument that closely follows the hardness of QBF for PSPACE (see <ref> [1] </ref> 3.9). Let S 2 E. Then there is a machine M as in definition 9 deciding S working in time 2 n O (1) and in space n k . Let a 1 ; : : : ; a r be the constants of M .
Reference: [2] <author> J.L. Balcazar, J. Diaz, and J. Gabarro. </author> <title> Structural Complexity II. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Proof. Given a set S in PAR &lt; add , let M be the additive machine that generates the circuits C n . The output of the gates of C n are linear combination of the required form. Then, the well known algorithm (see <ref> [2] </ref> 4.2) for simulating the computation of C n using M in polynomial space proves the statement. 2 Theorem 7 The set DTRAO is E-complete. Proof. The set DTRAO belongs to PAR &lt; add and then to E.
Reference: [3] <author> L. Blum, M. Shub, and S. Smale. </author> <title> On a theory of computation and complexity over the real numbers: NP-completeness, recursive functions and universal machines. </title> <journal> Bulletin of the American Mathematical Society, </journal> <volume> 21(1) </volume> <pages> 1-46, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The complexity of the decision and quantifier elimination problems in the theory of the reals with addition and order is also studied. In recent years the study of the complexity of computational problems involving real numbers has been an increasing research area. A foundational paper has been <ref> [3] </ref> where a computational model |the real Turing machine| for dealing with the above problems is developped. Subsequently, several papers dealt with different restrictions of the real Turing machine. <p> Our results are more general because we allow real inputs and real constants, whereas in [10] only quantified variables can represent real numbers. - 2 - 1 Basic concepts and notations In the following we shall deal with the theory of computability and complexity over the reals introduced in <ref> [3] </ref>. The ground concepts in our paper are taken from there. As usual, we denote by IR 1 the direct sum L 1 1 IR. <p> Another concept that we remind from [4] is the digital nondeterminism. This is defined by requiring the guesses to belong to f0; 1g and the word full is used to distinguish the nonde-terminism as it was introduced in <ref> [3] </ref> from the digital one. The corresponding complexity classes for polynomial time are denoted by NP &lt; add and NP = add (see [4] or [6] for details). We now introduce a notation that will be useful in the sequel.
Reference: [4] <author> F Cucker and M. Matamala. </author> <title> On digital nondeterminism. </title> <type> preprint, </type> <year> 1993. </year>
Reference-contexts: A foundational paper has been [3] where a computational model |the real Turing machine| for dealing with the above problems is developped. Subsequently, several papers dealt with different restrictions of the real Turing machine. Thus in <ref> [4] </ref> a different kind of nondeterminism |there called digital| is introduced by requiring the guesses to belong to the set f0; 1g. <p> The main properties of these machines and the basic complexity classes defined using them (mainly P &lt; add , P = add and NP = add ) can be found in <ref> [4] </ref> or in [6]. We just remind here that we shall use the superscripts &lt; or = for complexity classes according to whether the machines used to define them branch over order tests or only over equality tests. <p> Thus, for instance EXP &lt; add and EXP = add denote the classes of subsets of IR 1 accepted by additive machines in single exponential time branching over order and equality respectively. Another concept that we remind from <ref> [4] </ref> is the digital nondeterminism. This is defined by requiring the guesses to belong to f0; 1g and the word full is used to distinguish the nonde-terminism as it was introduced in [3] from the digital one. <p> The corresponding complexity classes for polynomial time are denoted by NP &lt; add and NP = add (see <ref> [4] </ref> or [6] for details). We now introduce a notation that will be useful in the sequel. It refers to a concept first studied in [7]: the computational power of real Turing machines over binary inputs.
Reference: [5] <author> J. Ferrante and C.W. Rachof. </author> <title> The Computational Complexity of Logical Theories. </title> <journal> Lect. Notes in Math., </journal> <volume> vol. 718. </volume> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: When n = 0, i.e. when there are no free variables, it is said that ' is a sentence. A traditional problem in complexity theory is to determine the complexity of the decision of logical theories (see <ref> [5] </ref>). That is, for any theory T , the problem of deciding T consists on, given any sentence in the language, determine whether belongs to T , i.e. whether it is true or not over the reals.
Reference: [6] <author> P. Koiran. </author> <title> Computing over the reals with addition and order. </title> <booktitle> Presented at the Barcelona workshop on continuous algorithms and complexity, </booktitle> <year> 1993. </year> <note> To appear in TCS. </note>
Reference-contexts: Subsequently, several papers dealt with different restrictions of the real Turing machine. Thus in [4] a different kind of nondeterminism |there called digital| is introduced by requiring the guesses to belong to the set f0; 1g. Immediately after, in <ref> [6] </ref>, it is shown that for additive machines (i.e. real Turing machines that do not perform multiplications or divisions) the classes NP resulting from allowing the use of both kinds of nondeterminism whithin polynomial time coincide. <p> The study of this "boolean part" of complexity classes over the reals had already been the central subjet of [7]. This paper can be seen as a continuation of <ref> [6] </ref> since it deals with the computational power of additive machines when restricted to binary inputs and alternation is allowed. <p> Any integer number y can be coded in fl in a sequence whose length is bounded by the height of y which is usually defined to be log 2 (1 + jyj). There is a natural inclusion of fl in IR 1 that we shall freely use. As in <ref> [6] </ref> we shall deal with additive machines, i.e. real Turing machines that do not multiply or divide. <p> The main properties of these machines and the basic complexity classes defined using them (mainly P &lt; add , P = add and NP = add ) can be found in [4] or in <ref> [6] </ref>. We just remind here that we shall use the superscripts &lt; or = for complexity classes according to whether the machines used to define them branch over order tests or only over equality tests. <p> The corresponding complexity classes for polynomial time are denoted by NP &lt; add and NP = add (see [4] or <ref> [6] </ref> for details). We now introduce a notation that will be useful in the sequel. It refers to a concept first studied in [7]: the computational power of real Turing machines over binary inputs. <p> More precisely, BP (C) = fS " fl ; S 2 Cg: 2 More basic facts on polyhedra The main result of this section is Theorem 2, which establishes the existence of "small" points in polyhedra. The similar but weaker result of <ref> [6] </ref> is sufficient for dealing with nondeterministic machines, but not with higher levels in the polynomial hierarchy. The following linear programming result will be useful (see [9], corollary 7.1i). <p> These identities follow from the equalities BP (P &lt; add ) = P=poly and BP (P = add ) = P shown in <ref> [6] </ref>. <p> This is certainly not the case in our setting since we now have that all problems in EXP &lt; add can be solved in exponential time and constant work space (see <ref> [6] </ref> th. 12). Now, a set in EXP &lt; add can be efficiently parallelized if and only if there is a sequential algorithm satisfying the conditions of definition 9. <p> In order to eliminate a block of universal quantifiers, we note that 8x F is equivalent to : 9x :F . 2 The following result demonstrates the necessity of boolean quantifiers. It is similar to the the P = add result of <ref> [6] </ref>.
Reference: [7] <author> P. Koiran. </author> <title> A weak version of the Blum, Shub & Smale model. </title> <booktitle> In Proc. 34 th FOCS Symp., </booktitle> <pages> pages 486-495, </pages> <year> 1993. </year>
Reference-contexts: The study of this "boolean part" of complexity classes over the reals had already been the central subjet of <ref> [7] </ref>. This paper can be seen as a continuation of [6] since it deals with the computational power of additive machines when restricted to binary inputs and alternation is allowed. <p> The corresponding complexity classes for polynomial time are denoted by NP &lt; add and NP = add (see [4] or [6] for details). We now introduce a notation that will be useful in the sequel. It refers to a concept first studied in <ref> [7] </ref>: the computational power of real Turing machines over binary inputs.
Reference: [8] <author> W. Maass. </author> <title> Bounds for the computational power and learning complexity of analog neural nets. </title> <booktitle> In Proc. 25th STOC, </booktitle> <pages> pages 335-344, </pages> <year> 1993. </year>
Reference-contexts: We first consider the simpler case of closed polyhedra. The proof method is borrowed from <ref> [8] </ref>. - 3 - Theorem 1 Let P be a non-empty polyhedron of IR n defined by a system Ax b of N large inequalities, where the entries of A are integers of size L.
Reference: [9] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> Wiley, </publisher> <address> New-York, </address> <year> 1986. </year>
Reference-contexts: The similar but weaker result of [6] is sufficient for dealing with nondeterministic machines, but not with higher levels in the polynomial hierarchy. The following linear programming result will be useful (see <ref> [9] </ref>, corollary 7.1i).
Reference: [10] <author> E. D. Sontag. </author> <title> Real addition and the polynomial hierarchy. </title> <journal> Information Processing Letters, </journal> <volume> 20 </volume> <pages> 115-120, </pages> <year> 1985. </year>
Reference-contexts: Finally, in section 7 the boolean complexity of quantifier elimination is studied. Most of the results of sections 2, 3, and 7 can be seen as generalizations of the results of <ref> [10] </ref>. This paper studied the complexity of the decision problem for formulas in the fist order theory of the reals with addition and order, on the usual Turing machine model. Our results are more general because we allow real inputs and real constants, whereas in [10] only quantified variables can represent <p> generalizations of the results of <ref> [10] </ref>. This paper studied the complexity of the decision problem for formulas in the fist order theory of the reals with addition and order, on the usual Turing machine model. Our results are more general because we allow real inputs and real constants, whereas in [10] only quantified variables can represent real numbers. - 2 - 1 Basic concepts and notations In the following we shall deal with the theory of computability and complexity over the reals introduced in [3]. The ground concepts in our paper are taken from there.
References-found: 10

