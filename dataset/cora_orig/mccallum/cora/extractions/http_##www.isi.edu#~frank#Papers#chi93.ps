URL: http://www.isi.edu/~frank/Papers/chi93.ps
Refering-URL: http://www.isi.edu/~frank/Papers/papers.html
Root-URL: http://www.isi.edu
Email: -martin,foley-@cc.gatech.edu  
Title: MODEL-BASED USER INTERFACE DESIGN BY EXAMPLE AND BY ANSWERING QUESTIONS a design methodology on their
Author: Martin R. Frank, James D. Foley Cite as: M. Frank and J. Foley. 
Keyword: Story-boarding. User Interface Management Systems. Model-based User Interface Design. METHODOLOGY  
Note: Model-based UIMSs impose  Adjunct Proceedings of INTERCHI, ACM Conference on Human Factors in Computing Systems, pages 161-162, (Amsterdam, The Netherlands, April 24-29) 1993.  
Affiliation: Georgia Institute of Technology  
Abstract: Model-based user interface design is based on a description of application objects and operations at a level of abstraction higher than that of code. A good model can be used to assist in designing the user interface, support multiple interfaces, help separate interface and application, describe input sequencing in a simple way, check consistency and completeness of the interface, evaluate its speed-of-use and generate contextspecific textual and animated help. However , designers rarely use computersupported application model-ling today and prefer less formal approaches such as using a story board of interface prototypes. One reason is that available tools use special-purpose languages for the model specification. Another reason is that these tools force the designers to specify the application model before they can start working on the visual interface, which is their main area of expertise. We present a novel methodology for concurrent development of the user interface and the application model which overcomes both problems by combining story-boarding and model-based interface design. Model-based user interface design uses an application model as an executable specification of the interface to the application rather than a paper specification. The key idea is to explicitly represent knowledge that had been buried in code before. For example, the objects and operations of an application are represented in code but they are not normally accessible from outside the application code. An application model is accessible by the interface, the application and external tools at design and at run time. Examples of model-based user interface management systems (UIMS) are UIDE [1,4] and HUMANOID [3,5] which both use a high-level object-oriented application model. ITS [6] is an example of a UIMS which encodes detailed interface style rules in order to generate very high quality user interfaces from the model. many user interface designers prefer starting the design with a story board. In our new approach, we combine the power of model-based design with the intuitive appeal of story board based design. We use an existing user interface design tool for the story-boarding which is a combination of an interface builder and an objectoriented drawing program [2]. Sequencing of the interface is achieved through an interpreted script language or through communication with an application program. This tool can be used for interface prototypes as well as for the actual application interface. In our methodology, the designer has the choice of starting a new design with the application model or with the user interface. If the application model is specif ied first our tool can generate a default interface from it, similar to other systems with an interface generation component. If the designer chooses to build the interface or story boards f irst, our tool 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Foley, J., W. Kim, S. Kovacevic, and K. </author> <title> Murray , Defining Interfaces at a High Level of Abstraction, </title> <journal> IEEE Software, </journal> <volume> 6(1), </volume> <month> Jan. </month> <year> 1989, </year> <pages> pp. 25-32. </pages>
Reference: [2] <author> Kuehme, T. and M. Schneider -Hufschmidt, </author> <title> SX/ Tools - An Open Design Environment for Adaptable Multimedia User Interfaces, </title> <journal> Computer Graphics Forum, </journal> <volume> 11(3), </volume> <month> Sept. </month> <year> 1992, </year> <pages> pp. 93-105. </pages>
Reference: [3] <author> Luo, P., P. Szekely and R. </author> <title> Neches, </title> <booktitle> Management Of Interface Design in HUMANOID, Proceedings of INTERCHI93, </booktitle> <address> Amsterdam, Netherlands. </address>
Reference: [4] <author> Sukaviriya, P., J. Foley and T. Griffith, </author> <title> A Second Generation User Interface Design Environment: The Model And The Runtime Architecture, </title> <booktitle> Proceedings of INTERCHI93, </booktitle> <address> Amsterdam, Netherlands. </address>
Reference: [5] <author> Szekely, P., P. Luo and R. Neches, </author> <title> Facilitating the Exploration of Interface Design Alternatives: The H U M A N O I D M o d e l o f I n t e r f a c e D e s i g n , Proceedings of CHI92, </title> <booktitle> ACM Conference on Human Factors in Computing Systems, </booktitle> <address> Monterey, CA, </address> <pages> pp. 507-515. </pages>
Reference: [6] <author> Wiecha, C. and S. Boies, </author> <title> Generating User Interfaces: Principles and Use of ITS Style Rules, </title> <booktitle> Proceedings of UIST90, ACM Symposium on User Interf ace Software and Technology, </booktitle> <address> Snowbird, UT, </address> <pages> pp. 21-30. </pages>
References-found: 6

