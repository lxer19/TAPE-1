URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR344.ps.Z
Refering-URL: http://www.cs.indiana.edu/trindex.html
Root-URL: 
Email: gandhim@copper.ucs.indiana.edu  edrbtsn@iuvax.cs.indiana.edu  
Title: A Specification-based Data Model viewpoint has other advantages. It keeps specifications and implementations consistent with
Author: Munish Gandhi Edward L. Robertson 
Note: This  Partially supported by the Indiana Business Modernization and Technology Corporation.  
Abstract: This report presents a conceptual data model for engineered products ranging from software systems to physical objects. The presented model views the hierarchy of components that constitute a system as layers of alternating specification and implementation. If one considers the principles of abstraction and encapsulation, one can see that this viewpoint is quite natural. Abstraction implies that all implementations are implementations of some specification. Thus specifications may be regarded as directly "above" implementations. Encapsulation implies that implementations, at least conceptually, use specifications rather than other implementations to fulfill their goals. Thus, implementations may be regarded as directly "above" specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [AN91] <author> R. Ahmed and S.B. Navathe. </author> <title> Version Management of Composite Objects in CAD Databases. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 218-227, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The last example demonstrates the power of 14 the model in designing products in a domain with a rich set of structural relationships, namely the object-oriented domain. 2.4.1 CAD Database We model a CAD application using an example similar to that used in <ref> [AN91] </ref>. Consider the design of an adder which outputs the sum of two 2-bit numbers. In order to illustrate the versioning mechanisms of our model, we will assume a hypothetical scenario consisting of the following steps a) We begin by specifying our objectives for the adder (Figure 8).
Reference: [Boe88] <author> B. W. Boehm. </author> <title> A spiral model of software development and enhancement. </title> <journal> IEEE Computer, </journal> <volume> 21(5) </volume> <pages> 61-72, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Thus, the framework should be minimal and offer the least resistance when adopted for a particular domain. 3. Specifications should be pre-eminent in the model. This would allow all major design decisions used in developing a product to be reflected in the specifications. 1 The spiral model of Boehm <ref> [Boe88] </ref> recognizes this fact, but does so only at the macro level. 4 4. Changes in design should occur only under human mediation. For example, redesigning a part should not cause changes in units containing that part except under the designers control.
Reference: [Boo91] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: Specifically, both CHASSIS and the nodes below it correspond to OR nodes. 2.4.3 Object Oriented Software Systems We illustrate the applicability of SBDM to object oriented software systems in this subsection. Our examples use principles represented in the design approaches of Booch <ref> [Boo91] </ref> and Meyer [Mey88]. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. <p> For example, in ADA if each class is placed in a separate package, the package implementation may be considered an ImC for that class (and the specification package a 22 part of the SC). We now adapt an example from <ref> [Boo91] </ref> to illustrate the above concepts. A home heating system provides and controls heat to individual rooms in a home. The structure of one system is modeled in SBDM in Figure 16. The rooms have temperature sensors which allow the RoomControl to message the HeatFlowRegulator whether it NeedsHeat or NoLongerNeedsHeat.
Reference: [CK86] <author> H. T. Chou and W. Kim. </author> <title> A Unifying Framework for Version Control in a CAD Environment. </title> <booktitle> In Proceedings of the 12th VLDB conference, </booktitle> <address> Kyoto, Japan, </address> <pages> pages 336-346, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Else, we are done. Of course, it may not be necessary to explicitly create CCs and link them to get the desired configuration. A method of defaults may achieve this in a more implicit manner. The idea here subsumes that used in <ref> [CK86] </ref>. For each specification one may designate a distinguished object from its design set as current. To configure an object, we recursively construct it using the current versions of each functionality linked by the needs link. An atomic ImC, is configured using the ImC itself. Consider Figure 6 again.
Reference: [Kat90] <author> R. H. Katz. </author> <title> Toward a Unified Framework for Version Modeling in Engineering Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 375-407, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: However, we do recognize that the best may not always be so easily distinguished and hence needs a more explicit configuring mechanism. 3.2 Manifestation Component <ref> [Kat90] </ref> refers to the need for distinguishing an instance hierarchy and a definition hierarchy. The Manifestation Component (MC) entity in SBDM together with the contains relationship 6 Note that there may be many CCs for an ImC.
Reference: [Mey88] <author> B. Meyer. </author> <title> Object-oriented Software Construction. </title> <publisher> Prentice Hall International (UK) Ltd., </publisher> <address> Hertfordshire, HP2 4RG, </address> <year> 1988. </year>
Reference-contexts: Specifically, both CHASSIS and the nodes below it correspond to OR nodes. 2.4.3 Object Oriented Software Systems We illustrate the applicability of SBDM to object oriented software systems in this subsection. Our examples use principles represented in the design approaches of Booch [Boo91] and Meyer <ref> [Mey88] </ref>. A specification for a family of objects in SBDM is very close to the notion of a class interface in object-oriented systems. It defines the communication protocol used to interact with the objects, the behavior expected of the objects, and other important information 21 regarding the objects.
Reference: [SB82] <author> W. Swartout and R. Balzer. </author> <title> On the inevitable intertwining of specification and implementation. </title> <journal> Communications of the ACM, </journal> <volume> 25(7) </volume> <pages> 438-440, </pages> <month> July </month> <year> 1982. </year> <month> 33 </month>
Reference-contexts: In this report, we present a model in which the specification of each component of a product is closely linked to its implementation. The need for such an integration has been felt before. For example, Swartout and Balzer <ref> [SB82] </ref> argue that even though software process models view specification and implementation as successive steps, in reality they influence one another. In other words, as software evolves both specifications and implementations undergo change 1 . Certain philosohical principles have been used to guide us in developing this model.
References-found: 7

