URL: http://www.cs.helsinki.fi/~tirri/qc/mettinen.ps.gz
Refering-URL: http://www.cs.Helsinki.FI/~tirri/qc/qc1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Why do quantum algorithms work? The Deutsch-Josza problem  
Author: Jukka-Pekka Koskela, Kari Mettinen 
Affiliation: University of Helsinki Department of computer science  
Date: Helsinki 7. 11. 1997  
Pubnum: Quantum Computing  
Abstract-found: 0
Intro-found: 0
Reference: [DeJo92] <author> D.Deutsch and R. Jozsa. </author> <title> Rapid solutions of problems by quantum computation. </title> <booktitle> Proceedings of the Royal Society, </booktitle> <address> London. A439:553-558, </address> <year> 1992. </year>
Reference-contexts: Simon [Sim94] used entanglement of all possible initial values and values of function computed from them to get suitable interference. 2 The Deutsch-Josza problem The Deutsch-Josza problem <ref> [DeJo92] </ref> specites a function f : f0; 1g n ! f0; 1g and a promise, that f is either constant or balanced.
Reference: [Yao93] <author> A. C.-C. Yao. </author> <title> Quantum circuit complexity. </title> <booktitle> Proceedings of the 34th IEEE Symposium on Foundations of Computer Science , 352, </booktitle> <year> 1993. </year>
Reference-contexts: Informally speaking, unitarity means that information can not be lost. But it is dif-tcult to prove a transition function to be unitary. On the contrary quantum gate arrays are clearly more natural way to human introduce unitarity in computation.Yao <ref> [Yao93] </ref> has shown that acyclic quantum gate arrays can simulate quantum Turing machines. So quantum gate arrays have become the standard quantum computing model.
Reference: [Lec63] <author> Y. Lecerf. Macines de Turing rversibles. </author> <title> Rcursive insolubilit en n 2 N de l'quation u = n o est un isomorphisme de codes. </title> <journal> Comptes rendus de l'Acadmie franaise des sciences, </journal> <volume> 257 </volume> <pages> 2597-2600, </pages> <year> 1963. </year>
Reference-contexts: On the contrary quantum gate arrays are clearly more natural way to human introduce unitarity in computation.Yao [Yao93] has shown that acyclic quantum gate arrays can simulate quantum Turing machines. So quantum gate arrays have become the standard quantum computing model. Quantum computing Lecerf <ref> [Lec63] </ref> and later again Bennett [Ben73] have proved that for any Turing machine T computing a function f there exists a reversible Turing machine T computing x; f (x).
Reference: [Ben73] <author> C.H. Bennett. </author> <title> Logical reversibility of computations. </title> <journal> IBM Journal of Res. Develop., </journal> <volume> 17 </volume> <pages> 525-532, </pages> <year> 1973. </year>
Reference-contexts: On the contrary quantum gate arrays are clearly more natural way to human introduce unitarity in computation.Yao [Yao93] has shown that acyclic quantum gate arrays can simulate quantum Turing machines. So quantum gate arrays have become the standard quantum computing model. Quantum computing Lecerf [Lec63] and later again Bennett <ref> [Ben73] </ref> have proved that for any Turing machine T computing a function f there exists a reversible Turing machine T computing x; f (x).
Reference: [Ben82] <author> P.A. Benio. </author> <title> Quantum mechanical hamiltonian models of turing machines. </title> <journal> Journal of Statistical Physics ,29(3):515-546, </journal> <year> 1982. </year>
Reference-contexts: Running time is within a constant factor of the running time of T and the cost of space is also polynomial in jxj.Benio <ref> [Ben82] </ref> and Deutsch [Deu85] have shown that quantum Turing machines can directly simulate reversible Turing machines. Remember prove of Yao mentioned before. So far we have seen, that a Turing-computable function f is always computable on a quantum gate array (with negligible increase in the time complexity).
Reference: [Deu85] <author> D. Deutsch. </author> <booktitle> Quantum theory, the Church-Turing principle and the universal quantum computer. Proceedings of the Royal Society, </booktitle> <address> London, A400:97-117, </address> <year> 1985. </year>
Reference-contexts: Running time is within a constant factor of the running time of T and the cost of space is also polynomial in jxj.Benio [Ben82] and Deutsch <ref> [Deu85] </ref> have shown that quantum Turing machines can directly simulate reversible Turing machines. Remember prove of Yao mentioned before. So far we have seen, that a Turing-computable function f is always computable on a quantum gate array (with negligible increase in the time complexity). <p> Problem is that this way only one pair x; f (x) (where x is choosen randomly) is got. In order to get all values of f this way, function should be called exponential times. Method is as laborious as the use of probabilistic Turing machine. Deutsch <ref> [Deu85] </ref> proved that such simple way to use quantum parallelism can not produce values of f faster than classical machines. To get benett of superposition interference must be used.
Reference: [Sim94] <editor> D. Simon. </editor> <booktitle> On The power of quntum computation. Proceedings of the 35th IEEE Symposium on Foundations of Computer Science , 116-123, </booktitle> <year> 1994. </year>
Reference-contexts: In the Deutsch-Josza problem essential idea is to transfer computed values of function into the amplitudes relative to each of the basis states. Simon <ref> [Sim94] </ref> used entanglement of all possible initial values and values of function computed from them to get suitable interference. 2 The Deutsch-Josza problem The Deutsch-Josza problem [DeJo92] specites a function f : f0; 1g n ! f0; 1g and a promise, that f is either constant or balanced.
Reference: [CEMM96] <author> R. Cleve, A. Ekert, C. Machiavello and M. Mosca. </author> <title> Quantum Algorithms Revisited. </title> <journal> Phil. Trans. R. Soc, London, </journal> <pages> 1-18, </pages> <year> 1996 </year> <month> 4 </month>
Reference-contexts: The quantum algorithm that achieves this has 7 steps and only 2 calls to f while any traditional algorithm needs 2 n1 + 1 calls to f . 1 Start with n + 1 zeros. ! jf0g n 0i 2 Apply Hadamard <ref> [CEMM96] </ref> transformation on trst n qubits. ! p 2 n 1 X jj; 0i 3 Call f on j. ! p 2 n 1 X jj; f (j)i 4 Apply phase ip on f (j). ! p 2 n 1 X (1) f (j) jj; f (j)i 5 Call f again
References-found: 8

