URL: http://www.merl.com/reports/TR98-02/TR98-02.ps.gz
Refering-URL: http://www.merl.com/reports/TR98-02/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (krithi@cs.umass.edu)  (shen@merl.com)  
Title: Using Windows NT for Real-Time Applications: Experimental Observations and Recommendations  
Author: Krithi Ramamritham, Chia Shen(*), Oscar Gonzalez, Shubo Sen and Shreedhar B Shirgurkar 
Date: December 17, 1997  
Address: Amherst, MA 01003  Cambridge, MA 02139  
Affiliation: Computer Science Department University of Massachusetts  MERL A Mitsubishi Electric Research Lab  
Abstract: Windows NT was not designed as a real-time operating system, but market forces and the acceptance of NT in industrial applications have generated a need for achieving real-time functionality with NT. As its use for real-time applications proliferates, based on an experimental evaluation of NT, we quantitatively characterize the obstacles placed by NT. As a result of these observations, we provide a set of recommendations for users to consider while building real-time applications on NT. These are validated by the use of NT for a prototype application involving real-time control that includes multimedia information processing. The results of the above study should provide system designers with feasible and acceptable guidelines, as well as insight, into the design of an architecture based on NT for supporting applications with components having real-time constraints.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Custer, </author> <title> "Inside Windows NT", </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: The I/O manager completes the I/O request. In the third step of I/O processing, the system writes the data from the I/O operation into the thread's address space, which requested the I/O. In this step, two mechanisms are used <ref> [1] </ref>: 4 * Buffered I/O: Used for slower I/O devices where the data transfer first takes place into the system memory area and an Asynchronous Procedure Call (APC) is queued to copy this data into thread' s local area. * Direct I/O: Used for faster devices like the disk.
Reference: [2] <author> HyperKernel, </author> <note> http://www.imagination.com/. </note>
Reference-contexts: The VenturCom approach also modifies the HAL in order to isolate interrupts between NT and the real-time subsystem. * A third commercial solution is the one offered by Imagination Systems <ref> [2] </ref>. Imagination Systems claim that they have built a real-time subsystem called HyperKernel which does not require any modifications to the HAL. The Hyperkernel has its own scheduler, its own set of services, and its own internal kernel.
Reference: [3] <author> G. Bollella and K. Jeffay. </author> <title> "Support for Real-Time Computing within General Purpose Operating Systems", </title> <booktitle> In Proceedings of the IEEE Real-Time Technology and Applications Symposium, </booktitle> <address> Chicago, IL, </address> <month> May </month> <year> 1995, </year> <month> pp.4-14. </month>
Reference-contexts: The following is a description of the commercial products using this approach: * RadiSys places INtime, a real-time kernel based on iRMX, outside the Windows NT address space. This approach is similar to the work done in <ref> [3] </ref>. This mechanism uses hardware support in order achieve a complete separation between two co-resident operating systems. The two OSs are able to communicate via an extension to the Windows NT API. The difference between INtime and [3] is that INtime runs Windows NT as its lowest priority process and in <p> This approach is similar to the work done in <ref> [3] </ref>. This mechanism uses hardware support in order achieve a complete separation between two co-resident operating systems. The two OSs are able to communicate via an extension to the Windows NT API. The difference between INtime and [3] is that INtime runs Windows NT as its lowest priority process and in [3] the CPU is shared between the two operating systems. <p> The two OSs are able to communicate via an extension to the Windows NT API. The difference between INtime and <ref> [3] </ref> is that INtime runs Windows NT as its lowest priority process and in [3] the CPU is shared between the two operating systems. The measures adopted to impart predictability to the system include The INtime real-time kernel is based on the iRMX kernel, provides 256 priority levels, and preemptive round-robin scheduling within the same priority level. <p> Also, it seems that interrupts are controlled by direct access to the Interrupt controller. Superficially at least, their methodology seems to have elements of commonality to the approach taken by RadiSys as well as the work by Jeffay and Bollela <ref> [3] </ref>. The latter work implemented a small CPU executive which multiplexes the CPU between their own real-time kernel and an IBM microkernel with an OSF1 server.
Reference: [4] <author> Z. Deng and J.W.S. Liu. </author> <title> Scheduling Real-Time Applications in an Open Environment. </title> <booktitle> !8th Real-Time Systems Symposium, </booktitle> <month> Dec </month> <year> 1997, </year> <pages> pp. 308-319. </pages>
Reference-contexts: Once such an application is implemented, changes are either disallowed or require a complete overhaul in order to guarantee the timing requirements. Also, the designer needs to be an expert in NT's internals. * Modifications to the Windows NT kernel <ref> [4] </ref>. This option requires continuous changes to the modifications as new versions of NT appear. * Coupling of real-time operating systems with Windows NT, with each OS running in a different machine. * Provide a Win32 API wrapper around a Real-Time OS.
Reference: [5] <author> O. Gonzalez, C. Shen, I. Mizunuma, and M. Takegaki. </author> <title> Implementation and Performance of MidART. </title> <booktitle> In IEEE Workshop on Middleware for Distributed Real-time systems and Services, </booktitle> <address> San Francisco, CA, </address> <month> December </month> <year> 1997. </year> <month> 19 </month>
Reference-contexts: But, used judiciously, it may be useful for applications that (1) can tolerate occasional deadline misses, and (2) have delay/response time requirements in the tens to hundreds of milliseconds range such as those described in <ref> [5, 7, 9] </ref>. To this end, a key element of our study is to see to what extent the unpredictable parts of NT can be "masked". We begin, in Section 2, by giving an overview of the capabilities of NT that are potentially useful to real-time system builders.
Reference: [6] <author> I. Kawakami, Y. Katayama, and H. Kurosawa. </author> <title> A Newly Structured Real-Time Control Mech--anism based on Personal Computers(RT-PC). </title> <booktitle> In International Conference on Electrical Engineering, </booktitle> <address> Matsue, Japan, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: This is only a partial solution, which needs to be coupled with a small real-time executive as in done in Real-Time Linux [15]. * Compose a Windows NT driver to run all the time critical threads. This is the approach taken in <ref> [6] </ref>. This approach has the drawback of (1) having to create a totally new API for users to construct real-time tasks to run in this driver environment, and (2) may still incurring all potential blocking from other ISR and DPCs.
Reference: [7] <author> I. Mizunuma, C. Shen, and M. Takegaki. </author> <title> Middleware for Distributed Industrial Real-Time Systems on ATM Networks. </title> <booktitle> In 17th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1996. </year> <title> [8] "Approaches to Real-Time Windows NT", </title> <address> http://www.radisys.com/products/rtos/intime app.html. </address>
Reference-contexts: But, used judiciously, it may be useful for applications that (1) can tolerate occasional deadline misses, and (2) have delay/response time requirements in the tens to hundreds of milliseconds range such as those described in <ref> [5, 7, 9] </ref>. To this end, a key element of our study is to see to what extent the unpredictable parts of NT can be "masked". We begin, in Section 2, by giving an overview of the capabilities of NT that are potentially useful to real-time system builders.
Reference: [9] <author> C. Shen and I. Mizunuma. RT-CRM: </author> <title> Real-Time Channel-Based Reflective Memory. </title> <booktitle> In IEEE Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: But, used judiciously, it may be useful for applications that (1) can tolerate occasional deadline misses, and (2) have delay/response time requirements in the tens to hundreds of milliseconds range such as those described in <ref> [5, 7, 9] </ref>. To this end, a key element of our study is to see to what extent the unpredictable parts of NT can be "masked". We begin, in Section 2, by giving an overview of the capabilities of NT that are potentially useful to real-time system builders. <p> In particular the focus was on the operator's workstation <ref> [9] </ref>. The software running on the workstation has the following components [10]. * Operator input: The operator may input control messages and actuator settings.
Reference: [10] <author> H. Shimakawa, </author> <title> Mitsubishi Electric Corporation, </title> <type> personal communication, </type> <year> 1996. </year>
Reference-contexts: In particular the focus was on the operator's workstation [9]. The software running on the workstation has the following components <ref> [10] </ref>. * Operator input: The operator may input control messages and actuator settings. <p> As for the workload tested, what we have experimented with is a real work load <ref> [10] </ref> characterizing a typical operator workstation which experiences periodic sensor data input in 1K byte sizes, sends out sporadic operator commands not more often than 100ms, and displays one video window. The quality of the video output was used as an indicator of the effect on the video player's performance.
Reference: [11] <author> S. Sommers and J. Potter, </author> <title> "Operating Systems Extensions for Dynamic Real-Time Applications", </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <address> Washington, D.C., </address> <month> Dec. </month> <year> 1996. </year>
Reference: [12] <author> S. Sommers, </author> <title> "Temporal Protection in Dreams", </title> <booktitle> Proceedings of the 20th Australasian Computer Science Conference, </booktitle> <address> Sydney, Australia, </address> <month> February </month> <year> 1997, </year>
Reference: [13] <author> M. Timmerman, </author> <title> "Windows NT as Real-Time OS", Real Time Magazine, </title> <note> 1Q97 Issue, http://www.realtime-info.be/encyc/magazine/articles/winnt/winnt.htm#backfive. </note>
Reference-contexts: Section 5 critically evaluates these efforts as well as NT/CE (intended for embedded applications) and other research efforts. Although there have been efforts in qualitatively analyzing Windows NT's suitability for real-time applications <ref> [13] </ref>, this paper is the first effort in quantitatively studying NT via an experimental approach. We hope this paper, based on systematic experimental evaluations, will provide guidelines, as well as insight, needed to design a software architecture based on Windows NT capable of supporting hard and soft real-time tasks. <p> The following are some of the limitations in Windows NT due mostly to the lack of provisions that take into account the priority of an event/object by various services/mechanisms that may contribute to unpredictable delays for user applications <ref> [8, 13, 16] </ref>. The priority level of interrupts is always higher than that of a user-level thread, including threads in the real-time class. When an interrupt occurs, the trap handler saves the machine's state and calls the interrupt dispatcher. <p> However, there is a caveat: NT can still unlock the pages and swap them out to the disk if the whole process is inactive <ref> [13] </ref>. 3.5 Summary of the Experiments and Recommendations From a real-time perspective, the above observations imply that to use Windows NT for real-time applications, the following principles should be practiced: (a) Use threads instead of processes so as to manipulate priorities with less overheads. (b) Lock pages in memory for real-time
Reference: [14] <editor> Windows CE web pages: </editor> <address> http://www.microsoft.com/windowsce/developer/technical/rtdraft6.htm http://www.microsoft.com/msdn/news/feature/100197/codetalkanswers.htm </address>
Reference-contexts: Another alternative to NT is Windows CE that is targeted at embedded applications. We now give a detailed comparison of Windows NT and Windows CE for real-time applications <ref> [14] </ref>. Unlike Windows NT, Windows CE does not provide process priority classes. At any time, there can be a maximum of 32 processes within the system.
Reference: [15] <author> V. Yodaiken, </author> <title> "A Real-Time Linux", </title> <address> http://luz.cs.nmt.edu/ rtlinux/. </address>
Reference-contexts: This alternative does not meet the requirement of running Windows NT applications in unison with the real-time tasks. * Modification of Hardware Abstraction Layer (HAL). This is only a partial solution, which needs to be coupled with a small real-time executive as in done in Real-Time Linux <ref> [15] </ref>. * Compose a Windows NT driver to run all the time critical threads. This is the approach taken in [6]. <p> We believe that NT is also considered the lowest priority process, but have not been able to confirm this. The approach taken by VenturCom is similar to the one take in Real-Time Linux <ref> [15] </ref>. Here a software emulation of the interrupt control hardware interacts with the OS. Interrupts directed to Linux are passed to the emulation software after real-time task are executed by a small real-time executive.
Reference: [16] <institution> VenturCom home page: </institution> <note> http://www.vci.com/. </note>
Reference-contexts: In this work our intention is to evaluate NT "as is" for real-time uses. On the other hand, various commercial efforts are aggressively working towards extending NT (typically by modifying NT or its underlying layers [8], <ref> [16] </ref>). Section 5 critically evaluates these efforts as well as NT/CE (intended for embedded applications) and other research efforts. Although there have been efforts in qualitatively analyzing Windows NT's suitability for real-time applications [13], this paper is the first effort in quantitatively studying NT via an experimental approach. <p> The following are some of the limitations in Windows NT due mostly to the lack of provisions that take into account the priority of an event/object by various services/mechanisms that may contribute to unpredictable delays for user applications <ref> [8, 13, 16] </ref>. The priority level of interrupts is always higher than that of a user-level thread, including threads in the real-time class. When an interrupt occurs, the trap handler saves the machine's state and calls the interrupt dispatcher. <p> The HAL traps attempts to assign interrupt handlers to interrupts reserved for real-time use. - RadiSys also claims to maintain complete address space isolation and memory protection between real-time and Windows NT processes. * The VenturCom approach <ref> [16] </ref> places a real-time OS (RTX) as a subsystem inside Windows NT in the form of a device driver. RTX facilities include priority scheduling, non-degrading priorities, inversion management, IPC support, fast clocks and timers, memory allocation and page fault elimination.

References-found: 15

