URL: http://pertsserver.cs.uiuc.edu/papers/StLi94a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: A SIMULATION ENVIRONMENT FOR DISTRIBUTED REAL-TIME SYSTEMS  
Author: Matthew F. Storch and Jane W.-S. Liu 
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois  
Date: April 1994.  
Note: An abridged version appeared in the Proceedings of the 1994 Simulation Multiconference (Military, Gov- ernment and Aerospace Track),  
Abstract: Several aspects of real-time systems make an a priori schedulability analysis difficult or impossible. In order to determine the timing properties of such systems, we often turn to simulation methods. While simulation methods have been extensively studied, most simulators are designed around a single scheduling paradigm and do not focus on real-time issues. This paper describes an object-oriented simulation environment called DRTSS, which allows its users to easily construct discrete-event simulators of multi-paradigm, distributed real-time systems. A cornerstone of DRTSS is the ability to both simulate the execution of tasks for which no code is specified and to actually execute tasks for which code is available. A key to DRTSS flexibility is the notion of DRTSS as a "software backplane." The user will be able to add custom scheduling algorithms, resource access control protocols, and executable tasks to DRTSS using the software backplane protocol. However, DRTSS will be supplied with many modern scheduling algorithms and resource access control protocols, so most users will not be required to implement these algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aydt, R. A. </author> <year> 1993. </year> <title> "SDDF: The Pablo Self-Defining Data Format." </title> <type> Technical Report. </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL. </institution> <note> (May) Chiu, </note> <author> W. W. and W. M. Chow. </author> <year> 1978. </year> <title> "A Performance Model of MVS." </title> <journal> IBM Systems Journal 17, </journal> <volume> no. 4: </volume> <pages> 444-462. </pages>
Reference-contexts: We plan to provide several analysis tools written in CELL. In addition, since the events are stored in the Pablo Self Defining Data Format <ref> (Aydt 1993) </ref> tools provided by or compatible with the Pablo Performance Analysis Environment (Reed 1993) can be used. 8. Multiple Simulation Runs There are two reasons to make multiple simulation runs during one instance of DRTSS execution: collecting sample values and searching the parameter space.
Reference: <author> Lehoczky, J. P.; L. Sha; and J. K. Strosnider. </author> <year> 1992. </year> <title> "Enhanced Aperiodic Responsiveness in Hard Real-Time Environments." </title> <booktitle> In Proceedings of the Real Time Systems Symposium (Phoenix, </booktitle> <address> AZ, </address> <month> Dec. </month> <pages> 2-4). </pages> <publisher> IEEE Computer Society Press, Los Alamitos, CA, </publisher> <pages> 110-123. </pages>
Reference-contexts: We call the composition of these schedulers a scheduling hierarchy. Hierarchical scheduling has been used in periodic real-time systems that make use of periodic servers to handle aperiodic tasks. Algorithms for scheduling periodic servers include the sporadic server, described in (Sha 1989) and the deferrable server, described in <ref> (Lehoczky 1992) </ref>. The server scheduling algorithm determines when the periodic server runs, and the server itself determines which of the currently outstanding aperiodic client tasks to run. We can also consider a database example.
Reference: <author> Reed, D. A.; R. D. Olson; R. A. Aydt; T. M. Madhyastha; T. Birkett; D. W. Jensen; B. A. A. Nazief; and Brian K. Totty. </author> <year> 1991. </year> <title> "Scalable Performance Environments for Parallel Systems." </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (Apr.) </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, CA, </publisher> <pages> 562-569. </pages>
Reference: <author> H. D. Schwetman. </author> <year> 1978. </year> <title> "Hybrid Simulation Models of Computer Systems." </title> <journal> Communications of the ACM 21, </journal> <volume> no. 9 (Sept.): </volume> <pages> 718-723. </pages>
Reference-contexts: If on the other hand, the user wants to supply custom scheduling algorithms and executable tasks, the facilities are there for him to do so. An additional benefit of allowing live tasks is that the user can easily implement a hybrid model as in (Chiu and Chow 1978) or <ref> (Schwetman 1978) </ref>. A hybrid model allows the user to take advantage of both analytic and simulation methods. The user may have a good analytic model for certain subsystems of a large system, but cannot model the system as a whole analytically.
Reference: <author> Sha, L.; B. Sprunt; and J. P. Lehoczky. </author> <year> 1989. </year> <title> "Aperiodic Task Scheduling for Hard Real-Time Systems." </title> <booktitle> The Journal of Real-Time Systems 1: </booktitle> <pages> 27-60. </pages>
Reference-contexts: We call the composition of these schedulers a scheduling hierarchy. Hierarchical scheduling has been used in periodic real-time systems that make use of periodic servers to handle aperiodic tasks. Algorithms for scheduling periodic servers include the sporadic server, described in <ref> (Sha 1989) </ref> and the deferrable server, described in (Lehoczky 1992). The server scheduling algorithm determines when the periodic server runs, and the server itself determines which of the currently outstanding aperiodic client tasks to run. We can also consider a database example.
Reference: <author> Silberman, A. </author> <year> 1994. </year> <title> "RTM: A Programming Environment for Real-Time Systems." </title> <type> Ph.D. </type> <note> Thesis (in preparation). </note> <institution> Department of Computer Science, University of Illinois, Urbana, IL. </institution> <month> 8 </month>
Reference-contexts: It uses a task graph to describe the application software running on the platform in terms of the work it does. (A complete description of these models can be found in <ref> (Silberman 1994) </ref>.) Each vertex in a resource graph represents either an active or passive resource. The defining characteristic of an active resource, called a processor from here on, is that it can cause a task to make progress. A processor is usually referred to as a server in queueing models.
References-found: 6

