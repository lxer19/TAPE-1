URL: http://www.cs.wisc.edu/~cs740-1/papers/time2.ps
Refering-URL: 
Root-URL: 
Title: Internet Time Synchronization: the Network Time Protocol  
Author: ,, David L. Mills 
Keyword: network clock synchronization, standard time distribution, fault-tolerant architecture, maximum-likelihood principles, disciplined oscillator, internet protocol.  
Affiliation: Electrical Engineering Department University of Delaware  
Abstract: This paper describes the Network Time Protocol (NTP), which is designed to distribute time information in a large, diverse internet system operating at speeds from mundane to lightwave. It uses a symmetric architecture in which a distributed subnet of time servers operating in a self-organizing, hierarchical configuration synchronizes local clocks within the subnet and to national time standards via wire, radio or calibrated atomic clock. The servers can also redistribute time information within a network via local routing algorithms and time daemons. This paper also discusses the architecture, protocol and algorithms, which were developed over several years of implementation refinement and resulted in the designation of NTP as an Internet Standard protocol. The NTP synchronization system, which has been in regular operation in the Internet for the last several years, is described along with performance data which shows that timekeeping accuracy throughout most portions of the Internet can be ordinarily maintained to within a few milliseconds, even in cases of failure or disruption of clocks, time servers or networks.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Allan, D.W., J.E. Gray and H.E. Machlan. </author> <title> The National Bureau of Standards atomic time scale: generation, stability, accuracy and accessibility. In: Blair, B.E. (Ed.). Time and Frequency Theory and Fundamentals . National Bureau of Standards Monograph 140, </title> <type> U.S. </type> <institution> Department of Commerce, </institution> <year> 1974, </year> <pages> 205-231. </pages>
Reference-contexts: Time Standards and Distribution Since 1972 the time and frequency standards of the world have been based on International Atomic Time (TAI), which is currently maintained using multiple cesium-beam clocks to an accuracy of a few parts in 10 12 <ref> [1] </ref>. The International Bureau of Weights and Measures uses astronomical observations provided by the U.S. Naval 3 Observatory and other observatories to determine cor-rections for small changes in the mean solar rotation period of the Earth, which results in Coordinated Universal Time (UTC). <p> Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and [31]. A number of algorithms for filtering, smoothing and classifying timekeeping data have been described in the literature <ref> [1] </ref>, [6], [12], [13], [19], including convergence algorithms, which attempt 8 to reduce errors by repeatedly casting out statistical outlyers, and consistency algorithms, which attempt to classify subsets of clocks as trusted or not by comparing statistics such as mean and variance. <p> The offsets of the peers remaining on the candidate list are statistically equivalent, so any of them can be chosen to adjust the local clock. Some implementations combine them using a weighted-average algorithm similar to that described in <ref> [1] </ref>, in which the offsets of the peers remaining on the list are weighted by estimated error to produce a combined estimate. In these implementations the error 10 estimate is taken to be the reciprocal of synchronization dispersion.
Reference: 2. <author> Bell Communications Research. </author> <title> Digital Synchronization Network Plan. </title> <type> Technical Advisory TANPL 000436, </type> <month> 1 November </month> <year> 1986. </year>
Reference-contexts: Following conventions established by the telephone industry, the accuracy of each time server is defined by a number called the stratum , with the reference level (primary servers) assigned as one and each succeeding level towards the leaves (secondary servers) assigned as one greater than the preceding level <ref> [2] </ref>. Using existing stations and available timecode receivers with computed propagation-delay corrections, accuracies in the order of a millisecond can be achieved at the network interface of a primary server. As the stratum increases from one, the accuracies achievable will degrade depending on the network paths and local-clock stabilities.
Reference: 3. <author> Bertsekas, D., and R. </author> <title> Gallager. </title> <booktitle> Data Networks . Prentice-Hall, </booktitle> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: As the stratum increases from one, the accuracies achievable will degrade depending on the network paths and local-clock stabilities. The synchronization subnet is organized using a variant of the Bellman-Ford distributed routing algorithm to compute the minimum-weight spanning trees rooted at the primary reference sources <ref> [3] </ref>. The distance metric is determined first by stratum, then by total roundtrip path delay to the root, called the synchronization distance . The timekeeping quality at a particular peer is determined by a sum of weighted offset differences, called the dispersion .
Reference: 4. <author> Blair, </author> <title> B.E. Time and frequency dissemination: an overview of principles and techniques. In: Blair, B.E. (Ed.). Time and Frequency Theory and Fundamentals . National Bureau of Standards Monograph 140, </title> <type> U.S. </type> <institution> Department of Commerce, </institution> <year> 1974, </year> <pages> 233-313. </pages>
Reference-contexts: One approach to time synchronization is to provide timecode receivers at every site where required. However, these receivers are specialized, moderately expensive and subject to occasional gross errors due to propagation and equipment failures. A comprehensive summary of radio synchronization techniques can be found in <ref> [4] </ref>. The U.S. National Institute of Standards and Technology (NIST) (formerly National Bureau of Standards), recently announced a computer time service available to 2 the general public by means of a standard telephone modem [26].
Reference: 5. <author> Cole, R., and C. Foxcroft. </author> <title> An experiment in clock synchronisation. </title> <booktitle> The Computer Journal 31 , 6 (1988), </booktitle> <pages> 496-502. </pages>
Reference-contexts: Obviously, the accuracies achievable depend upon the statistical properties of the outbound and inbound data paths. Further analysis and experimental results bearing on this issue can be found below and in <ref> [5] </ref>, [19] and [20]. As shown in Figure 2, the computed delays and offsets are processed in the data filters to reduce incidental timing noise and the most accurate and reliable subset determined by the peerselection algorithm.
Reference: 6. <author> Cristian, F. </author> <title> A probabilistic approach to distributed clock synchronization. </title> <booktitle> Proc. Ninth IEEE International Conference on Distributed Computing Sys tems (June 1989), </booktitle> <pages> 288-296. </pages>
Reference-contexts: The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them [11]. While addressing no particular protocol architecture, the schemes proposed in <ref> [6] </ref> have features in common with NTP, including masterslave synchronization with provisions for failures and changing system load. However, none of these protocols includes engineered algorithms to compensate for the effects of statistical delay variations encountered in wide-area networks and are unsuitable for precision time distribution throughout the Internet. <p> Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and [31]. A number of algorithms for filtering, smoothing and classifying timekeeping data have been described in the literature [1], <ref> [6] </ref>, [12], [13], [19], including convergence algorithms, which attempt 8 to reduce errors by repeatedly casting out statistical outlyers, and consistency algorithms, which attempt to classify subsets of clocks as trusted or not by comparing statistics such as mean and variance. <p> A variation on the FAT algorithm suggested in a recent paper <ref> [6] </ref> attempts to bound the offset errors when read ing a remote clock by casting out readings where the measured roundtrip delay is above a specified value.
Reference: 7. <institution> Defense Advanced Research Projects Agency. Internet Control Message Protocol. DARPA Network Working Group Report RFC-792, USC Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Various Internet protocols have been used to record and transmit the time at which an event takes place, including the Daytime protocol [28], Time protocol [29], ICMP Timestamp message <ref> [7] </ref> and IP Timestamp option [34]. The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them [11]. <p> NTP is built on the Internet Protocol (IP) [8] and User Datagram Protocol (UDP) [27], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. It is evolved from the Time Protocol [29] and the ICMP Timestamp Message <ref> [7] </ref>, but is specifically designed to maintain accuracy and reliability, even when used over typical Internet paths involving multiple gateways and unreliable networks. There are no provisions for peer discovery, configuration or acquisition in NTP itself, although some implementations include these features.
Reference: 8. <institution> Defense Advanced Research Projects Agency. Internet Protocol. DARPA Network Working Group Report RFC-791, USC Information Sciences Insti tute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Network Time Protocol The Network Time Protocol (NTP), now established as an Internet Standard protocol [22], is used to organize and maintain a set of time servers and transmission paths as a synchronization subnet. NTP is built on the Internet Protocol (IP) <ref> [8] </ref> and User Datagram Protocol (UDP) [27], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: 9. <institution> Data Encryption Standard . Federal Information Processing Standards Publication 46. National Bureau of Standards, U.S. Department of Commerce, </institution> <year> 1977. </year>
Reference-contexts: The procedures are used to insure an unbroken chain of authenticated associations within the synchronization subnet to the primary servers. An authenticator, consisting of a key identifier and encrypted checksum, is computed using the DES encryption algorithm <ref> [9] </ref> and DES cipher block-chaining method [10]. Some implementations incorporate special provisions to compensate for the delays inherent in the encryption computations. Careful consideration was given during design to factors affecting network overheads.
Reference: 10. <institution> DES Modes of Operation . Federal Information Processing Standards Publication 81. National Bu 13 reau of Standards, U.S. Department of Commerce, </institution> <month> December </month> <year> 1980. </year>
Reference-contexts: The procedures are used to insure an unbroken chain of authenticated associations within the synchronization subnet to the primary servers. An authenticator, consisting of a key identifier and encrypted checksum, is computed using the DES encryption algorithm [9] and DES cipher block-chaining method <ref> [10] </ref>. Some implementations incorporate special provisions to compensate for the delays inherent in the encryption computations. Careful consideration was given during design to factors affecting network overheads. Some of the present Internet time servers operate with over 100 peers and a few operate with many more than that.
Reference: 11. <author> Gusella, R., and S. Zatti. </author> <title> TEMPO - A network time controller for a distributed Berkeley UNIX system. </title> <note> IEEE Distributed Processing Technical Committee Newsletter 6, NoSI-2 (June 1984), 7-15. Also in: Proc. </note> <institution> Summer 1984 USENIX (Salt Lake City, </institution> <month> June </month> <year> 1984). </year>
Reference-contexts: The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them <ref> [11] </ref>. While addressing no particular protocol architecture, the schemes proposed in [6] have features in common with NTP, including masterslave synchronization with provisions for failures and changing system load.
Reference: 12. <author> Halpern, J.Y., B. Simons, R. Strong and D. Dolly. </author> <title> Fault-tolerant clock synchronization. </title> <booktitle> Proc. Third Annual ACM Sympos. on Principles of Distributed Computing (August 1984), </booktitle> <pages> 89-102. </pages>
Reference-contexts: Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and [31]. A number of algorithms for filtering, smoothing and classifying timekeeping data have been described in the literature [1], [6], <ref> [12] </ref>, [13], [19], including convergence algorithms, which attempt 8 to reduce errors by repeatedly casting out statistical outlyers, and consistency algorithms, which attempt to classify subsets of clocks as trusted or not by comparing statistics such as mean and variance. <p> The NTP peerselection algorithm, which attempts to find the best (i.e., the most reliable) clocks from a population, belongs to the latter class. 4.1. Data-Filtering Algorithm Interactive convergence algorithms use statistical clus tering techniques such as the fault-tolerant average (FAT) algorithm of <ref> [12] </ref>, the CNV algorithm of [17], the majority-subset algorithm of [19], the non-Byzantine algorithm of [30] and the egocentric algorithm of [31]. <p> Interactive consistency algorithms are designed to tolerate faulty clock processes which might indicate grossly inconsistent offsets in successive readings or to different readers. These algorithms use an agreement protocol involving successive rounds of readings, possibly relayed and possibly augmented by digital signatures. Examples include the fireworks algorithm of <ref> [12] </ref> and the optimum algorithm of [33]. However, these algorithms as described require an excessive burden of messages, especially when large numbers of clocks are involved, and require statistically awkward assumptions in order to certify correctness.
Reference: 13. <author> Kopetz, H., and W. Ochsenreiter. </author> <title> Clock synchronization in distributed real-time systems. </title> <journal> IEEE Trans. Computers C-36, </journal> <month> 8 (August </month> <year> 1987), </year> <pages> 933-939. </pages>
Reference-contexts: Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and [31]. A number of algorithms for filtering, smoothing and classifying timekeeping data have been described in the literature [1], [6], [12], <ref> [13] </ref>, [19], including convergence algorithms, which attempt 8 to reduce errors by repeatedly casting out statistical outlyers, and consistency algorithms, which attempt to classify subsets of clocks as trusted or not by comparing statistics such as mean and variance.
Reference: 14. <author> Lamport, L., </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Comm. ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in <ref> [14] </ref>, [15], [18] and [31].
Reference: 15. <author> Lamport, L., </author> <title> and P.M. Melliar-Smith. Synchronizing clocks in the presence of faults. </title> <type> JACM 32, </type> <month> 1 (January </month> <year> 1985), </year> <pages> 52-78. </pages>
Reference-contexts: Current network clock synchronization techniques have evolved from both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [16], while Byzantine methods for clock synchronization are summarized in <ref> [15] </ref>. While reliable clock synchronization has been studied using agreement algorithms [15], [33], in practice it is not possible to distinguish the truechimer clocks, which maintain timekeeping accuracy to a previously published (and trusted) standard, from the falseticker clocks, which do not, on other than a statistical basis. <p> Current network clock synchronization techniques have evolved from both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [16], while Byzantine methods for clock synchronization are summarized in <ref> [15] </ref>. While reliable clock synchronization has been studied using agreement algorithms [15], [33], in practice it is not possible to distinguish the truechimer clocks, which maintain timekeeping accuracy to a previously published (and trusted) standard, from the falseticker clocks, which do not, on other than a statistical basis. <p> A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], <ref> [15] </ref>, [18] and [31].
Reference: 16. <author> Lindsay, W.C., and A.V. Kantak. </author> <title> Network synchronization of random signals. </title> <journal> IEEE Trans. Communi cations COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <pages> 1260-1266. </pages>
Reference-contexts: However, neither of these methods would be economically viable for widespread deployment in a large, diverse internet system. Current network clock synchronization techniques have evolved from both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in <ref> [16] </ref>, while Byzantine methods for clock synchronization are summarized in [15].
Reference: 17. <author> Lundelius, J., and N.A. Lynch. </author> <title> A new fault-tolerant algorithm for clock synchronization. </title> <booktitle> Proc. Third Annual ACM Sympos. on Principles of Distributed Computing (August 1984), </booktitle> <pages> 75-88. </pages>
Reference-contexts: The NTP peerselection algorithm, which attempts to find the best (i.e., the most reliable) clocks from a population, belongs to the latter class. 4.1. Data-Filtering Algorithm Interactive convergence algorithms use statistical clus tering techniques such as the fault-tolerant average (FAT) algorithm of [12], the CNV algorithm of <ref> [17] </ref>, the majority-subset algorithm of [19], the non-Byzantine algorithm of [30] and the egocentric algorithm of [31].
Reference: 18. <author> Marzullo, K., and S. Owicki. </author> <title> Maintaining the time in a distributed system. </title> <booktitle> ACM Operating Systems Review 19, </booktitle> <month> 3 (July </month> <year> 1985), </year> <pages> 44-54. </pages>
Reference-contexts: A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], <ref> [18] </ref> and [31]. <p> As experience accumulates, improvements are being made continuously to the filtering and selection algorithms described in this paper. Recent improvements now being tested include engineered budgets for reading errors and skewerror accumulation, as well as an improved peerselection algorithm based on the work of Marzullo and Owicki <ref> [18] </ref>. The goal is to provide reliable timing and timing-error information while preserving correctness, stability and accuracy. There may also be room for additional improvements in the offset-combination algorithm recently introduced, for example, as well as methods to compensate for asymmetric delays commonly found on Internet paths.
Reference: 19. <author> Mills, </author> <title> D.L. Algorithms for synchronizing network clocks. DARPA Network Working Group Report RFC-956, </title> <address> M/A-COM Linkabit, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Obviously, the accuracies achievable depend upon the statistical properties of the outbound and inbound data paths. Further analysis and experimental results bearing on this issue can be found below and in [5], <ref> [19] </ref> and [20]. As shown in Figure 2, the computed delays and offsets are processed in the data filters to reduce incidental timing noise and the most accurate and reliable subset determined by the peerselection algorithm. <p> Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and [31]. A number of algorithms for filtering, smoothing and classifying timekeeping data have been described in the literature [1], [6], [12], [13], <ref> [19] </ref>, including convergence algorithms, which attempt 8 to reduce errors by repeatedly casting out statistical outlyers, and consistency algorithms, which attempt to classify subsets of clocks as trusted or not by comparing statistics such as mean and variance. <p> Data-Filtering Algorithm Interactive convergence algorithms use statistical clus tering techniques such as the fault-tolerant average (FAT) algorithm of [12], the CNV algorithm of [17], the majority-subset algorithm of <ref> [19] </ref>, the non-Byzantine algorithm of [30] and the egocentric algorithm of [31]. A variation on the FAT algorithm suggested in a recent paper [6] attempts to bound the offset errors when read ing a remote clock by casting out readings where the measured roundtrip delay is above a specified value.
Reference: 20. <author> Mills, </author> <title> D.L. Experiments in network clock synchronization. DARPA Network Working Group Report RFC-957, </title> <address> M/A-COM Linkabit, </address> <month> September </month> <year> 1985. </year>
Reference-contexts: Obviously, the accuracies achievable depend upon the statistical properties of the outbound and inbound data paths. Further analysis and experimental results bearing on this issue can be found below and in [5], [19] and <ref> [20] </ref>. As shown in Figure 2, the computed delays and offsets are processed in the data filters to reduce incidental timing noise and the most accurate and reliable subset determined by the peerselection algorithm.
Reference: 21. <author> Mills, </author> <title> D.L. </title> <booktitle> The Fuzzball. Proc. ACM SIGCOMM 88 Symposium (Palo Alto, </booktitle> <address> CA, </address> <month> August </month> <year> 1988), </year> <pages> 115-122. </pages>
Reference-contexts: It is estimated that well over 2000 hosts presently synchronize local clocks to UTC using NTP and the Internet primary servers. In this section an overview of the various NTP implementations and subnet configurations is presented along with an evaluation of performance expected in routine operation. The Fuzzball <ref> [21] </ref> is a software package consisting of a fast, compact operating system and an array of application programs for network protocol development, testing and evaluation.
Reference: 22. <author> Mills, </author> <title> D.L. Network Time Protocol (Version 2) specification and implementation. DARPA Net work Working Group Report RFC-1119, </title> <institution> University of Delaware, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: The total dispersion to the root due to all causes is called the synchronization dispersion . 3. Network Time Protocol The Network Time Protocol (NTP), now established as an Internet Standard protocol <ref> [22] </ref>, is used to organize and maintain a set of time servers and transmission paths as a synchronization subnet. NTP is built on the Internet Protocol (IP) [8] and User Datagram Protocol (UDP) [27], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. <p> The following subsections contain an overview of the data formats, entities, state variables and procedures used in NTP. Further details are contained in the formal specification <ref> [22] </ref>. The specification is based on the imple 1 3 3 3 2 3 (a) (b) 4 mentation model illustrated below, but it is not intended that this model be the only one upon which a specification can be based. <p> In other modes these variables have a fleeting persistence lasting only until the reply message has been formulated and sent. Further discussion on some of these variables is given later in this paper. A complete description is given in <ref> [22] </ref>. follows the IP and UDP headers. Following is a short description of the various fields. Leap Indicator (LI). Warns of an impending leap second to be inserted or deleted in the UTC timescale at the end of the current day. Version Number (VN). <p> Simulation of the entire PLL with the variables and constants specified in <ref> [22] </ref> results in the following characteristics: At the widest bandwidth (smallest t ) and a 100-ms phase change the PLL reaches zero error in 39 minutes, overshoots 7 ms in 54 minutes and settles to less than 1 ms in about six hours. <p> The NTP PLL is designed to adapt automatically to these regimes by measuring the dispersions and adjusting t over a five-octave range. Design details are discussed in <ref> [22] </ref> and performance assessed in [24]. 6. NTP in the Internet System The penetration of NTP in the Internet has steadily increased over the last few years. It is estimated that well over 2000 hosts presently synchronize local clocks to UTC using NTP and the Internet primary servers.
Reference: 23. <author> Mills, </author> <title> D.L. Internet time synchronization: the Network Time Protocol. </title> <institution> DARPA Network Working Group Report RFC-1129, University of Delaware, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: The international NTP synchronization system of time servers now operating in the Internet is described and its performance assessed in Section 6. Section 7 discusses further development and issues for future research. This paper itself is an updated and condensed version of <ref> [23] </ref>. 1.1. Definitions In this paper the stability of a clock is how well it can maintain a constant frequency, the accuracy is how well its time compares with national standards and the precision is how precisely time can be resolved in a particular timekeeping system.
Reference: 24. <author> Mills, </author> <title> D.L. On the accuracy and stability of clocks synchronized by the Network Time Protocol in the Internet system. </title> <journal> ACM Computer Communication Review 20, </journal> <month> 1 (January </month> <year> 1990), </year> <pages> 65-75. </pages>
Reference-contexts: How do hosts in a large, dispersed networking community know what time it is? How accurate are their clocks? In a recent survey involving 94,260 hosts of the Internet system, 20,758 provided local time using three time-transfer protocols <ref> [24] </ref>. About half of the replies had errors greater than two minutes, while ten percent had errors greater than four hours. A few had errors over two weeks. Most local clocks are set by eyeball-and-wristwatch to within a minute or two and rarely checked after that. <p> Several experiments were made to evaluate this design using measurements between NTP primary servers, so that delays and offsets could be determined inde pendently of the measurement procedure itself <ref> [24] </ref>. The experiments were performed over several paths involv ing ARPANET, NSFNET and various LANs and using minimum filters and various other algorithms based on median and trimmed-mean statistics. The results show consistently lower errors for the minimum filter when compared the other algorithms. <p> The NTP PLL is designed to adapt automatically to these regimes by measuring the dispersions and adjusting t over a five-octave range. Design details are discussed in [22] and performance assessed in <ref> [24] </ref>. 6. NTP in the Internet System The penetration of NTP in the Internet has steadily increased over the last few years. It is estimated that well over 2000 hosts presently synchronize local clocks to UTC using NTP and the Internet primary servers. <p> A companion paper <ref> [24] </ref> contains an extended discussion of performance issues and concludes that, using the adaptive-parameter PLL model described above together with the new combining algorithm, timing accuracies to a few milliseconds and frequency stabilities to a few milliseconds per day are regularly achieved. 7.
Reference: 25. <author> Mitra, D. </author> <title> Network synchronization: analysis of a hybrid of masterslave and mutual synchronization. </title> <journal> IEEE Trans. Communications COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <pages> 1245-1259. </pages>
Reference-contexts: Thus, both the server and the peer can independently calculate delay and offset using a single message stream. This can be described as a symmetric, continuously sampled, time-transfer method similar to those used in some digital telephone networks <ref> [25] </ref>. Among its advantages are that the transmission times and received message orders are unimportant and that reliable delivery is not required. Obviously, the accuracies achievable depend upon the statistical properties of the outbound and inbound data paths.
Reference: 26. <institution> Automated Computer Time Service (ACTS) . NBS Research Material 8101, U.S. Department of Com merce, </institution> <year> 1988. </year>
Reference-contexts: A comprehensive summary of radio synchronization techniques can be found in [4]. The U.S. National Institute of Standards and Technology (NIST) (formerly National Bureau of Standards), recently announced a computer time service available to 2 the general public by means of a standard telephone modem <ref> [26] </ref>. The service is intended for use by personal workstations to set clock-calendars, for example, but would not be suitable for a large population of clients calling on a frequent, regular basis without further redistribution. <p> In fact, the recently introduced NIST telephone time service <ref> [26] </ref> already includes both the year and advance leapsecond information. The current mechanism of time delivery using dedicated radio systems and multifunction radionavigation and land-resources satellite systems requires relatively expensive timecode receivers subject to occasional disruption due to propagation path or radio failure.
Reference: 27. <author> Postel, J. </author> <title> User Datagram Protocol. </title> <institution> DARPA Network Working Group Report RFC-768, USC Infor mation Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: Network Time Protocol The Network Time Protocol (NTP), now established as an Internet Standard protocol [22], is used to organize and maintain a set of time servers and transmission paths as a synchronization subnet. NTP is built on the Internet Protocol (IP) [8] and User Datagram Protocol (UDP) <ref> [27] </ref>, which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: 28. <author> Postel, J. </author> <title> Daytime protocol. </title> <institution> DARPA Network Working Group Report RFC-867, USC Information Sciences Institute, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: Various Internet protocols have been used to record and transmit the time at which an event takes place, including the Daytime protocol <ref> [28] </ref>, Time protocol [29], ICMP Timestamp message [7] and IP Timestamp option [34]. The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them [11].
Reference: 29. <author> Postel, J. </author> <title> Time protocol. </title> <institution> DARPA Network Working Group Report RFC-868, USC Information Sciences Institute, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: Various Internet protocols have been used to record and transmit the time at which an event takes place, including the Daytime protocol [28], Time protocol <ref> [29] </ref>, ICMP Timestamp message [7] and IP Timestamp option [34]. The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them [11]. <p> NTP is built on the Internet Protocol (IP) [8] and User Datagram Protocol (UDP) [27], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. It is evolved from the Time Protocol <ref> [29] </ref> and the ICMP Timestamp Message [7], but is specifically designed to maintain accuracy and reliability, even when used over typical Internet paths involving multiple gateways and unreliable networks. There are no provisions for peer discovery, configuration or acquisition in NTP itself, although some implementations include these features.
Reference: 30. <author> Rickert, N.W. </author> <title> Non Byzantine clock synchronization - a programming experiment. </title> <booktitle> ACM Operating Sys tems Review 22, </booktitle> <month> 1 (January </month> <year> 1988), </year> <pages> 73-78. </pages>
Reference-contexts: Data-Filtering Algorithm Interactive convergence algorithms use statistical clus tering techniques such as the fault-tolerant average (FAT) algorithm of [12], the CNV algorithm of [17], the majority-subset algorithm of [19], the non-Byzantine algorithm of <ref> [30] </ref> and the egocentric algorithm of [31]. A variation on the FAT algorithm suggested in a recent paper [6] attempts to bound the offset errors when read ing a remote clock by casting out readings where the measured roundtrip delay is above a specified value.
Reference: 31. <author> Schneider, </author> <title> F.B. A paradigm for reliable clock synchronization. </title> <institution> Department of Computer Science Technical Report TR 86-735, Cornell University, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: A good deal of research has gone into mechanisms to synchronize clocks in a community where some clocks cannot be trusted. Determining whether a particular clock can be trusted is an interesting abstract problem which can be attacked using methods such as described in [14], [15], [18] and <ref> [31] </ref>. <p> Data-Filtering Algorithm Interactive convergence algorithms use statistical clus tering techniques such as the fault-tolerant average (FAT) algorithm of [12], the CNV algorithm of [17], the majority-subset algorithm of [19], the non-Byzantine algorithm of [30] and the egocentric algorithm of <ref> [31] </ref>. A variation on the FAT algorithm suggested in a recent paper [6] attempts to bound the offset errors when read ing a remote clock by casting out readings where the measured roundtrip delay is above a specified value.
Reference: 32. <author> S mi th , J. </author> <title> Modern Communications Circuits . McGraw-Hill, </title> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: The loop filter produces the output V c , which is used to adjust the frequency of the voltage-controlled oscillator VCO in order to reduce the offset q . Using familiar techniques of analysis <ref> [32] </ref>, the (open-loop) transfer function of the PLL can be approximated as w c s 2 t 2 s t ) e -sT , where w c is the gain (crossover frequency), w z the corner frequency of the lead network (necessary for PLL stability), T is the data-filter delay and
Reference: 33. <author> Srikanth, T.K., and S. Toueg. </author> <title> Optimal clock syn chronization. </title> <type> JACM 34, </type> <month> 3 (July </month> <year> 1987), </year> <pages> 626-645. </pages>
Reference-contexts: Current network clock synchronization techniques have evolved from both linear systems and Byzantine agreement methodologies. Linear methods for digital telephone network synchronization are summarized in [16], while Byzantine methods for clock synchronization are summarized in [15]. While reliable clock synchronization has been studied using agreement algorithms [15], <ref> [33] </ref>, in practice it is not possible to distinguish the truechimer clocks, which maintain timekeeping accuracy to a previously published (and trusted) standard, from the falseticker clocks, which do not, on other than a statistical basis. <p> These algorithms use an agreement protocol involving successive rounds of readings, possibly relayed and possibly augmented by digital signatures. Examples include the fireworks algorithm of [12] and the optimum algorithm of <ref> [33] </ref>. However, these algorithms as described require an excessive burden of messages, especially when large numbers of clocks are involved, and require statistically awkward assumptions in order to certify correctness.
Reference: 34. <author> Su, Z. </author> <title> A specification of the Internet protocol (IP) timestamp option. DARPA Network Working Group Report RFC-781. </title> <booktitle> SRI International, </booktitle> <month> May </month> <year> 1981. </year>
Reference-contexts: Various Internet protocols have been used to record and transmit the time at which an event takes place, including the Daytime protocol [28], Time protocol [29], ICMP Timestamp message [7] and IP Timestamp option <ref> [34] </ref>. The Unix 4.3bsd time daemon timed uses an elected master host to measure offsets of a number of slave hosts and send periodic corrections to them [11].
References-found: 34

