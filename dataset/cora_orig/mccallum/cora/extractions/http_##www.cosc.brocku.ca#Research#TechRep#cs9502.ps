URL: http://www.cosc.brocku.ca/Research/TechRep/cs9502.ps
Refering-URL: http://www.cosc.brocku.ca/Research/TechRep/
Root-URL: 
Title: A Process Algebra for Stochastic Music Composition  
Author: BRIAN J. ROSS 
Keyword: Key words: process algebra, concurrency, computer music, stochastic composition  
Address: St. Catharines, Ontario, Canada L2S 3A1  
Affiliation: Brock University Department of Computer Science  
Email: email: bross@sandbanks.cosc.brocku.ca  
Phone: phone: (416) 688-5550 ext. 4284 fax: (416) 688-3255  
Date: May 2, 1995  
Abstract: A process algebra suitable for modelling stochastic music composition is presented. The algebra is based on Toft's weighted sequential calculus of communicating systems, which is a probabilistic version of Milner's SCCS. The algebra permits the design of stochastically-based automata which perform a variety of musically interesting behaviours, including reactive behavior between processes (horizontal composition), and simultaneity of musical events (vertical composition). The most notable feature of the algebra is the ability to mathematically model complex musical systems with an algebra having a rigorous but simple formal semantics. This permits formal analysis of musical systems, as well as a basis for deriving well-founded implementations. This algebra complements other models based in trace theory, Petri Nets, Markov processes, and other stochastic music programming languages. 
Abstract-found: 1
Intro-found: 1
Reference: [BB91] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Real time process algebra. </title> <journal> Journal of Formal Aspects of Computing Science, </journal> <volume> 3(2) </volume> <pages> 142-188, </pages> <year> 1991. </year>
Reference-contexts: Using its notion of bisimulation, different stochastic music systems can be compared. Other process algebra in the literature are equally applicable to music. Timed process algebra such as <ref> [BB91] </ref> are worth investigation, as they permit a more convenient representation of note duration and real-time system timing. A working implementation of a music programming language based on MWSCCS is currently being undertaken. New issues must be addressed when implementing an algebra like MWSCCS.
Reference: [Bel92] <author> B. Bel. </author> <title> Symbolic and Sonic Representations of Sound-Object Structures. </title> <editor> In M. Bala-ban, K. Ebcioglu, and O. Laske, editors, </editor> <booktitle> Understanding Music with AI, </booktitle> <pages> pages 64-109. </pages> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In reality, music is much more complex: notes have different durations, dynamics, and timbres. Many formal models of these phenomena exist in the literature. For example, <ref> [Bel92, CT88] </ref> suggest means for representing temporal properties of music. Enhanced musical activity can be modelled by suitably enriching the action domain.
Reference: [Che87] <editor> M. Chemillier. Monoide Libre et Musique: Deuxierme Partie. </editor> <booktitle> Theoretical Informatics and Applications, </booktitle> <volume> 21(4) </volume> <pages> 379-418, </pages> <year> 1987. </year> <month> 13 </month>
Reference-contexts: As discussed below, both Petri nets and trace theory have been applied successfully to different extents, and this paper therefore completes the "triad" by modelling music with process algebra. Chemillier's algebraic model of music explores the use of traces in musical modelling, analysis, recognition, and composition <ref> [Che87, CT88, Che90] </ref>. He defines a solfege semantics of music, which uses a free monoid algebra to denote traces of musical events. Action prefixing and simultaneity are denoted by string concatenation and set union respectively. Superposition, interposition, and literal shu*e operators are used to compose traces.
Reference: [Che90] <author> M. Chemillier. Solfege, </author> <title> Commutation Partielle et Automates de Contrepoint. </title> <journal> Math. Inf. Sci. Hum., </journal> <volume> 28(110) </volume> <pages> 5-25, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The perspective of music as a concurrent activity is well established. Music models using Petri nets [HR88, HS92] and algebraic interleaving <ref> [CT88, Che90] </ref> are rooted in the concurrent computation paradigm to different extents. This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. Process algebra are popular contemporary formalisms for modelling and analyzing concurrent systems [Hoa85, Mil89]. <p> As discussed below, both Petri nets and trace theory have been applied successfully to different extents, and this paper therefore completes the "triad" by modelling music with process algebra. Chemillier's algebraic model of music explores the use of traces in musical modelling, analysis, recognition, and composition <ref> [Che87, CT88, Che90] </ref>. He defines a solfege semantics of music, which uses a free monoid algebra to denote traces of musical events. Action prefixing and simultaneity are denoted by string concatenation and set union respectively. Superposition, interposition, and literal shu*e operators are used to compose traces.
Reference: [CT88] <author> M. Chemillier and D. Timis. </author> <title> Toward a theory of formal musical languages. </title> <booktitle> In Proceedings ICMC, </booktitle> <pages> pages 175-183, </pages> <address> Cologne, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction The perspective of music as a concurrent activity is well established. Music models using Petri nets [HR88, HS92] and algebraic interleaving <ref> [CT88, Che90] </ref> are rooted in the concurrent computation paradigm to different extents. This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. Process algebra are popular contemporary formalisms for modelling and analyzing concurrent systems [Hoa85, Mil89]. <p> In reality, music is much more complex: notes have different durations, dynamics, and timbres. Many formal models of these phenomena exist in the literature. For example, <ref> [Bel92, CT88] </ref> suggest means for representing temporal properties of music. Enhanced musical activity can be modelled by suitably enriching the action domain. <p> For example, [Bel92, CT88] suggest means for representing temporal properties of music. Enhanced musical activity can be modelled by suitably enriching the action domain. A basic enhancement that permits note duration is to use explicit Note on and Note off signals for each note <ref> [CT88] </ref>, which has the advantage of mapping to MIDI. For example, let a represent 8 an on-note, and a 0 an off-note. <p> The wait action 1 is used to designate timing intervals. This process is written in MWSCCS as: P = c:1:1:1:ec 0 :e 0 g:1:g 0 :P 0 Another possibility mentioned in <ref> [CT88] </ref> is to use Note on and Note continue actions. Then the above passage is denotable as: P ! ! ! ! ! ! ! P 0 Other enhancements to the domain space permit additional important musical features to be represented. <p> As discussed below, both Petri nets and trace theory have been applied successfully to different extents, and this paper therefore completes the "triad" by modelling music with process algebra. Chemillier's algebraic model of music explores the use of traces in musical modelling, analysis, recognition, and composition <ref> [Che87, CT88, Che90] </ref>. He defines a solfege semantics of music, which uses a free monoid algebra to denote traces of musical events. Action prefixing and simultaneity are denoted by string concatenation and set union respectively. Superposition, interposition, and literal shu*e operators are used to compose traces.
Reference: [Hen88] <author> M. Hennessy. </author> <title> Algebraic Theory of Processes. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: Process algebra are mathematical formalisms for modelling processes. There are many varieties of process algebra in the literature (eg. <ref> [Hoa85, Hen88, Mil89] </ref>), which establish different perspectives on what precisely constitutes observable behavior. As we will show, process algebra have natural application to music, since musical events are observed (heard) and reacted upon by observers (musicians, audiences). We call the algebra MWSCCS (Musical Weighted Sequential Calculus of Communicating Systems).
Reference: [Hen90] <author> M. Hennessy. </author> <title> The Semantics of Programming Languages An Elementary Introduction Using Structural Operational Semantics. </title> <publisher> John Wiley and Sons, </publisher> <year> 1990. </year>
Reference-contexts: Tofts defines the semantics of WSCCS using natural deduction-style rules of inference (figure 1). These transition rules are sequents in which the expression below the line can be inferred when the premise expressions above it hold <ref> [Plo81, Hen90] </ref>. The rules define two least relations, ! E fi Act fi E and 7! E fi W fi E.
Reference: [HM88] <author> E.C.R. Hehner and A.J. Malton. </author> <title> Termination Conventions and Comparative Semantics. </title> <journal> Acta Informatica, </journal> <volume> 25 </volume> <pages> 1-14, </pages> <year> 1988. </year>
Reference-contexts: A general solution adopted here is to establish a conventional signal for when musical activity ends <ref> [HM88] </ref>. The action p represents the termination of a musical process. When p is transmitted from a process, it is the final action seen from that process, and no further activity will be exhibited from it. However, the process should remain silently alive, rather than literally terminate.
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. Process algebra are popular contemporary formalisms for modelling and analyzing concurrent systems <ref> [Hoa85, Mil89] </ref>. They are widely accepted as effective models of concurrency largely because of the high degree of abstraction possible with them, along with their intuitive "programming language" feel. MWSCCS considers music as comprised of streams of discrete, concurrent behaviors that can be observed and reacted upon by musical processes. <p> Process algebra are mathematical formalisms for modelling processes. There are many varieties of process algebra in the literature (eg. <ref> [Hoa85, Hen88, Mil89] </ref>), which establish different perspectives on what precisely constitutes observable behavior. As we will show, process algebra have natural application to music, since musical events are observed (heard) and reacted upon by observers (musicians, audiences). We call the algebra MWSCCS (Musical Weighted Sequential Calculus of Communicating Systems).
Reference: [HR88] <author> G. Haus and A. Rodriguez. </author> <title> Music Description and Processing by Petri Nets. </title> <editor> In G. Rozenberg, editor, </editor> <booktitle> Advances in Petri Nets (LNCS 340), </booktitle> <pages> pages 175-199. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The perspective of music as a concurrent activity is well established. Music models using Petri nets <ref> [HR88, HS92] </ref> and algebraic interleaving [CT88, Che90] are rooted in the concurrent computation paradigm to different extents. This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. <p> It would be interesting to apply some or all of these ideas with Chemillier's elegant algebra. Haus et al have derived a powerful Petri net (PN) based model of music <ref> [HR88, HS92] </ref>. A PN is an automaton that denotes multiple simultaneous stimuli and reactions in a concurrent system. Haus defines a PN programming language for music, which is used for implementing concurrent music systems. By tweaking a PN's parameters, different varieties of compositions arise.
Reference: [HS92] <author> G. Haus and A. Sametti. ScoreSynth: </author> <title> A System for the Synthesis of Music Scores Based on Petri Nets and a Music Algebra. </title> <editor> In D. Baggi, editor, </editor> <booktitle> Computer-Generated Music, </booktitle> <pages> pages 53-77. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction The perspective of music as a concurrent activity is well established. Music models using Petri nets <ref> [HR88, HS92] </ref> and algebraic interleaving [CT88, Che90] are rooted in the concurrent computation paradigm to different extents. This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. <p> It would be interesting to apply some or all of these ideas with Chemillier's elegant algebra. Haus et al have derived a powerful Petri net (PN) based model of music <ref> [HR88, HS92] </ref>. A PN is an automaton that denotes multiple simultaneous stimuli and reactions in a concurrent system. Haus defines a PN programming language for music, which is used for implementing concurrent music systems. By tweaking a PN's parameters, different varieties of compositions arise.
Reference: [LA85] <author> G. Loy and C. Abbott. </author> <title> Programming Languages for Computer Music Synthesis, Performance, and Composition. </title> <journal> Computing Surveys, </journal> <volume> 17(2) </volume> <pages> 235-265, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: Process algebra are generally considered to be more specification-oriented than PNs, which might be a point in their favour in a music composition setting. It is also worth mentioning the similarity between WSCCS and other conventional music programming languages <ref> [LA85] </ref>, especially those using object-orientation. The main advantage shared by WSCCS and Haus's PN language in comparison to other music languages are their well-defined mathematical foundation, which permits direct formal analyses of systems built with them. Acknowledgement: Support through NSERC Operating Grant 0138467 is gratefully acknowledged.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: This paper introduces a process algebra model of music called the Musical Weighted Synchronous Calculus of Communicating Systems, or MWSCCS. Process algebra are popular contemporary formalisms for modelling and analyzing concurrent systems <ref> [Hoa85, Mil89] </ref>. They are widely accepted as effective models of concurrency largely because of the high degree of abstraction possible with them, along with their intuitive "programming language" feel. MWSCCS considers music as comprised of streams of discrete, concurrent behaviors that can be observed and reacted upon by musical processes. <p> Process algebra are mathematical formalisms for modelling processes. There are many varieties of process algebra in the literature (eg. <ref> [Hoa85, Hen88, Mil89] </ref>), which establish different perspectives on what precisely constitutes observable behavior. As we will show, process algebra have natural application to music, since musical events are observed (heard) and reacted upon by observers (musicians, audiences). We call the algebra MWSCCS (Musical Weighted Sequential Calculus of Communicating Systems). <p> We call the algebra MWSCCS (Musical Weighted Sequential Calculus of Communicating Systems). It is an enhancement of Tofts' WSCCS algebra [Tof90], which is a probabilistic version of Milner's Synchronous Calculus of Communicating Systems <ref> [Mil89] </ref>. It adds to WSCCS by defining a musical action domain and useful musical operators.
Reference: [Nie87] <author> M. Nielsen. </author> <title> CCS and its Relationship to Net Theory. </title> <editor> In W. Brauer, editor, </editor> <booktitle> Petri Nets: Application and Relationship to Other Models of Concurrency (LNCS 255), </booktitle> <pages> pages 393-415. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Haus defines a PN programming language for music, which is used for implementing concurrent music systems. By tweaking a PN's parameters, different varieties of compositions arise. The differences between the PN model and WSCCS result from the inherent differences between PNs and process algebra <ref> [Nie87] </ref>. PNs are said to model "true concurrency", in that they make explicit all the simultaneous causal relationships amongst components of a concurrent system. Process algebra view concurrency more abstractly, and causal relationships amongst components are not explicit denoted.
Reference: [Plo81] <author> G. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Tofts defines the semantics of WSCCS using natural deduction-style rules of inference (figure 1). These transition rules are sequents in which the expression below the line can be inferred when the premise expressions above it hold <ref> [Plo81, Hen90] </ref>. The rules define two least relations, ! E fi Act fi E and 7! E fi W fi E.
Reference: [Roa79] <author> C. Roads. </author> <title> Grammars as Representations for Music. </title> <journal> Computer Music Journal, </journal> <volume> 3(1) </volume> <pages> 48-55, </pages> <year> 1979. </year>
Reference-contexts: On the other hand, if we run M 0 without a conductor, M 0 n ff inig it behaves as before. 10 3.3 Grammatical composition structure Using the notion of termination, WSCCS can duplicate the expressiveness of regular grammars, and therefore permits grammatical description of composition <ref> [Roa79] </ref> For example, we might like to structure a composition as: T une = P relude ; M ain ; F inale P relude def = 2ccdce: p :Silent + cdcee: p :Silent M ain = F irstP art ; SecondP art ; Climax ; Resolution F irstP art def =
Reference: [Tof90] <author> C. Tofts. </author> <title> A Synchronous Calculus of Relative Frequency. </title> <editor> In J.C.M. Baeten and J.W.Klop, editors, </editor> <booktitle> CONCUR 90, </booktitle> <address> Amsterdam, The Netherlands, 1990. </address> <publisher> Springer-Verlag LNCS 458. </publisher> <pages> 14 </pages>
Reference-contexts: As we will show, process algebra have natural application to music, since musical events are observed (heard) and reacted upon by observers (musicians, audiences). We call the algebra MWSCCS (Musical Weighted Sequential Calculus of Communicating Systems). It is an enhancement of Tofts' WSCCS algebra <ref> [Tof90] </ref>, which is a probabilistic version of Milner's Synchronous Calculus of Communicating Systems [Mil89]. It adds to WSCCS by defining a musical action domain and useful musical operators.
References-found: 17

