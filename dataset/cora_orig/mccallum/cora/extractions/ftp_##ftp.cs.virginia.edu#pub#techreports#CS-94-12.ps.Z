URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-94-12.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: robins@cs.virginia.edu  
Phone: Phone: (804) 982-2207, FAX: (804) 982-2214  
Title: New Graph Arborescence and Steiner Constructions for High-Performance FPGA Routing  
Author: Michael J. Alexander and Gabriel Robins 
Address: Thornton Hall,  Charlottesville, VA 22903-2442  
Affiliation: Department of Computer Science,  University of Virginia,  
Abstract: The flexibility and reusability of field-programmable gate arrays (FPGAs) enable significant speed and cost savings in the VLSI design/validation/simulation cycle. However, this is achieved at a substantial performance penalty due to signal delays through the programmable interconnect. This motivates a critical-net routing objective which seeks to minimize source-sink signal propagation delays; we formulate this objective as a graph Steiner arborescence (i.e., shortest-path tree with minimum wirelength) problem and propose an effective heuristic which produces routing trees with optimal source-sink pathlengths, and having wirelength on par with the best existing graph Steiner tree heuristics. Our second contribution is a new class of greedy Steiner tree constructions in weighted graphs, based on an iterated application of an arbitrary given graph Steiner heuristic; this construction significantly outperforms the best known graph Steiner tree heuristics of Kou, Markowsky and Berman [24], and of Zelikovsky [38]. We incorporated our algorithms into an actual router, enabling the complete routing of several industrial designs while requiring a reduced maximum channel width. All of our methods are directly applicable to other graph-based routing regimes, such as building-block design, routing in the presence of obstacles, etc., as well as in non-CAD areas such as multicasting in communication networks.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Alexander and G. Robins, </author> <title> A New Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Moreover, the performance bound of our new method is the same as that of Zelikovsky's heuristic, namely 11 6 times optimal. The recent incorporation of our algorithms into an actual FPGA router <ref> [1] </ref> enabled the successful routing of several large industry benchmark circuits, using smaller channel widths than was required by other tools. <p> Other research has adopted a more abstract model of FPGA routing connections [28], or explored modified architectures [33] in order to reduce the number of programmable switches required. More recently, <ref> [1] </ref> developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. <p> Any node in V N may be used as a potential Steiner point in order to optimize the overall wirelength. The GMST problem is known to be NP-complete [20]; it arises in various applications, e.g., routing in the presence of obstacles [17], FPGA routing <ref> [1] </ref>, as well as in building-block design [8, 16, 26]. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks).
Reference: [2] <author> C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng, </author> <title> A Direct Combination of the Prim and Dijkstra Constructions for Improved Performance-Driven Global Routing, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <address> Chicago, IL, </address> <month> May </month> <year> 1993, </year> <pages> pp. 1869-1872. </pages>
Reference-contexts: While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11]. The bounded-radius bounded-cost (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. <ref> [2] </ref> both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [11] and [2] both produce the same shortest-paths tree as would Dikstra's algorithm. <p> (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. <ref> [2] </ref> both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [11] and [2] both produce the same shortest-paths tree as would Dikstra's algorithm.
Reference: [3] <author> N. B. Bhat and D. D. Hill, </author> <title> Routable Technology Mapping for LUT FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 95-98. </pages>
Reference-contexts: On the other hand, less attention has been focused on the actual routing, which is surprising since it was observed that FPGA performance is limited by routing delays, rather than by combinational logic delays <ref> [3] </ref>. The use of a specific routing resource in routing a particular net precludes its use in routing other nets. In order to maintain the routing feasibility of the overall design, it is therefore prudent to minimize the number of routing resources used by each net.
Reference: [4] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Fidelity and Near-Optimality of Elmore-Based Routing Constructions, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer Design, </booktitle> <address> Cam-bridge, MA, </address> <month> October </month> <year> 1993, </year> <pages> pp. 81-84. </pages>
Reference-contexts: Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous <ref> [4, 5, 10, 11] </ref>. The bounded-radius bounded-cost (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength.
Reference: [5] <author> K. D. Boese, A. B. Kahng, and G. Robins, </author> <title> High-Performance Routing Trees With Identified Critical Sinks, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> Dallas, </address> <month> June </month> <year> 1993, </year> <pages> pp. 182-187. </pages>
Reference-contexts: Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous <ref> [4, 5, 10, 11] </ref>. The bounded-radius bounded-cost (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength.
Reference: [6] <author> S. Brown, J. Rose, and Z. G. Vranesic, </author> <title> A Detailed Router for Field-Programmable Gate Arrays, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 620-628. </pages>
Reference-contexts: Previous work on FPGA routing has primarily concentrated on producing feasible solutions that use the fewest routing resources. For example, the SEGA [27] detailed routing algorithm and its predecessor, CGE <ref> [6, 7] </ref>, route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections [28], or explored modified architectures [33] in order to reduce the number of programmable switches required. <p> A common criteria used to evaluate the quality of FPGA routing solutions is the maximum channel width required to successfully route all nets of a design <ref> [6] </ref>. We have therefore implemented a real FPGA router based on our algorithms, and used it to route several industrial FPGA benchmark circuits (the underlying architecture we modeled was that of the XILIX parts, and the benchmark circuits contained up to 352 nets each). <p> For each of the circuits, we compared the maximum channel width required by our router to that required by CGE <ref> [6] </ref>. Table 2 shows the maximum channel width required by the CGE router [6], as well as the corresponding value for our IGMST-based router. <p> For each of the circuits, we compared the maximum channel width required by our router to that required by CGE <ref> [6] </ref>. Table 2 shows the maximum channel width required by the CGE router [6], as well as the corresponding value for our IGMST-based router. <p> On the right, we see the maximum channel width required to route all nets for the CGE router of <ref> [6] </ref>, as well as our IGMST heuristic; for all of the circuits IGMST requires a smaller channel width (i.e., fewer routing resources). 11 three benchmark circuits. 6 Conclusion We have proposed a critical-net FPGA routing algorithm to mitigate the performance penalty incurred by designers when using FPGAs.
Reference: [7] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Section 5 outlines the experimental results, and we conclude in Section 6. 2 2 FPGA Routing An FPGA architecture consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing <ref> [7] </ref> [35] (See Figure 1). Each of the logic blocks implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks. <p> Previous work on FPGA routing has primarily concentrated on producing feasible solutions that use the fewest routing resources. For example, the SEGA [27] detailed routing algorithm and its predecessor, CGE <ref> [6, 7] </ref>, route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections [28], or explored modified architectures [33] in order to reduce the number of programmable switches required.
Reference: [8] <author> D. Chen and C. Sechen, Mickey: </author> <title> A Macro Cell Global Router, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Amsterdam, The Netherlands, </address> <month> February </month> <year> 1991, </year> <pages> pp. 248-252. </pages>
Reference-contexts: The GMST problem is known to be NP-complete [20]; it arises in various applications, e.g., routing in the presence of obstacles [17], FPGA routing [1], as well as in building-block design <ref> [8, 16, 26] </ref>. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks).
Reference: [9] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, DAG-Map: </author> <title> Graph-Based FPGA Technology Mapping for Delay Optimization, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 7-20. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. extensively studied by e.g. <ref> [9, 18, 19, 23, 32] </ref>, where a typical goal is to minimize the maximum circuit depth.
Reference: [10] <author> J. Cohoon and J. Randall, </author> <title> Critical Net Routing, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer Design, </booktitle> <address> Cambridge, MA, </address> <month> October </month> <year> 1991, </year> <pages> pp. 174-177. </pages>
Reference-contexts: Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous <ref> [4, 5, 10, 11] </ref>. The bounded-radius bounded-cost (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength.
Reference: [11] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Provably Good Performance-Driven Global Routing, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 739-752. </pages>
Reference-contexts: Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous <ref> [4, 5, 10, 11] </ref>. The bounded-radius bounded-cost (BRBC) method of Cong et al. [11] and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. <p> While these approaches implicitly equate delay minimization with wirelength optimization [15, 21, 22, 30], it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11]. The bounded-radius bounded-cost (BRBC) method of Cong et al. <ref> [11] </ref> and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [11] and [2] both produce the same shortest-paths tree <p> bounded-radius bounded-cost (BRBC) method of Cong et al. <ref> [11] </ref> and the AHHK method of Alpert et al. [2] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [11] and [2] both produce the same shortest-paths tree as would Dikstra's algorithm.
Reference: [12] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> Performance-Driven Interconnect Design Based on Distributed RC Delay Model, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> Dallas, </address> <month> June </month> <year> 1993, </year> <pages> pp. 606-611. </pages>
Reference-contexts: Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [11] and [2] both produce the same shortest-paths tree as would Dikstra's algorithm. The recent A-Tree algorithm of Cong et al. <ref> [12] </ref> for rectilinear arborescence Steiner trees depends heavily on the Manhattan norm, and is therefore not suitable for graph-based regimes. 3 Before we can apply graph-based techniques to FPGA routing, we must first model the FPGA as a graph, where the overall graph topology mirrors the complete FPGA architecture; paths in <p> This is also why the A-Tree method of Cong et al. <ref> [12] </ref> is not applicable to arbitrary weighted graphs. 5 3 (a). Define min (p; q) to be the farthest point from the source that is dominated by both p and q (Figure 3 (b)).
Reference: [13] <author> W. M. Dai, T. Asano, and E. S. Kuh, </author> <title> Routing Region Definition and Ordering Scheme for Building-Block Layout, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 4 (1985), </volume> <pages> pp. 189-197. 13 </pages>
Reference-contexts: This is a graph spanning arborescence (as opposed to a Steiner arborescence). We compared all of these methods (i.e., DJKA, DOM, GSA, KMB, ZEL, IKMB, IZEL) on the same inputs, both in terms of total wirelength as well as maximum source-sink pathlength. The inputs consisted of channel intersection graphs <ref> [13] </ref> over uniformly distributed random nets in the 10000 fi 10000 Manhattan grid. For each net size, 10000 random nets were generated and routed using the seven algorithms above. The data in Table 1 represents average values over 10000 cases per each net size.
Reference: [14] <author> E. W. Dijkstra, </author> <title> A Note on Two Problems in Connection With Graphs, </title> <journal> Numerische Math--ematik, </journal> <volume> 1 (1959), </volume> <pages> pp. 269-271. </pages>
Reference-contexts: Thus, we generalize Dijkstra's shortest-paths approach <ref> [14] </ref>: given an arbitrary weighted routing graph, our algorithm produces a spanning tree where all source-sink paths are the shortest possible, but where total tree cost is heuristically optimized as well. Experimental results indicate that the wirelength used is competitive with the best known Steiner tree heuristics. <p> For comparison, we have also implemented: * DJKA This heuristic is an adaptation of Dijkstra's shortest-paths tree algorithm <ref> [14] </ref> to the GSA problem (Dijkstra's algorith spans all of V , while the GSA problem seeks to span only N V ).
Reference: [15] <author> A. E. Dunlop, V. D. Agrawal, D. Deutsch, M. F. Jukl, P. Kozak, and M. Wiesel, </author> <title> Chip Layout Optimization Using Critical Path Weighting, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1984, </year> <pages> pp. 133-136. </pages>
Reference-contexts: More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [15, 21, 22, 30] </ref>, it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11].
Reference: [16] <author> H. Esbensen and P. Mazumder, </author> <title> A Genetic Algorithm for the Steiner Problem in a Graph, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Paris, France, </address> <month> February </month> <year> 1994, </year> <pages> pp. 402-406. </pages>
Reference-contexts: The GMST problem is known to be NP-complete [20]; it arises in various applications, e.g., routing in the presence of obstacles [17], FPGA routing [1], as well as in building-block design <ref> [8, 16, 26] </ref>. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks).
Reference: [17] <author> J. L. Ganley and J. P. Cohoon, </author> <title> Routing a Multi-Terminal Critical Net: Steiner Tree Construction in the Presence of Obstacles, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems (to appear), </booktitle> <address> London, England, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Any node in V N may be used as a potential Steiner point in order to optimize the overall wirelength. The GMST problem is known to be NP-complete [20]; it arises in various applications, e.g., routing in the presence of obstacles <ref> [17] </ref>, FPGA routing [1], as well as in building-block design [8, 16, 26]. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks). <p> For nets of size 4, GSA produces routings with optimal wirelength and optimal radius. This is significant because it is known that for typical VLSI designs most nets have four or less pins <ref> [17] </ref>. Finally, we see that on average across all nets, GSA affords optimal radius (i.e., 10% average radius reduction with respect to IZEL) at the expense of an average of only about 1% wirelength penalty.
Reference: [18] <author> T. Gao, K. C. Chen, J. Cong, Y. Ding, and C. L. Liu, </author> <title> Placement and Placement Driven Technology Mapping for FPGA Synthesis, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-91. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. extensively studied by e.g. <ref> [9, 18, 19, 23, 32] </ref>, where a typical goal is to minimize the maximum circuit depth.
Reference: [19] <author> N. Hasan, G. Vijayan, and C. K. Wong, </author> <title> A Neighborhood Improvement Algorithm for Rectilinear Steiner Trees, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <address> New Orleans, LA, </address> <year> 1990. </year>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. extensively studied by e.g. <ref> [9, 18, 19, 23, 32] </ref>, where a typical goal is to minimize the maximum circuit depth.
Reference: [20] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: The complexity of the GSA problem is currently open: no polynomial-time algorithm has been found, and nor is the GSA problem known to be NP-complete <ref> [20] </ref>. In Section 3 we address the GSA problem using a graph-based generalization of rectilinear Steiner arborescence heuristic of Rao et al. [31]. <p> Any node in V N may be used as a potential Steiner point in order to optimize the overall wirelength. The GMST problem is known to be NP-complete <ref> [20] </ref>; it arises in various applications, e.g., routing in the presence of obstacles [17], FPGA routing [1], as well as in building-block design [8, 16, 26]. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks). <p> A number of heuristics were proposed over the years for the GMST problem <ref> [20] </ref>, two of which have performance bounds of a constant factor from optimal: (1) the heuristic of Kou, Markowsy and Berman [24] (KMB) with performance bound of 2 (1 1 L ) where L is the maximum number of leafs in any optimal solution, and (2) the recent heuristic of Zelikovsky
Reference: [21] <author> M. A. B. Jackson, E. S. Kuh, and M. Marek-Sadowska, </author> <title> Timing-Driven Routing for Building Block Layout, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <year> 1987, </year> <pages> pp. 518-519. </pages>
Reference-contexts: More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [15, 21, 22, 30] </ref>, it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11].
Reference: [22] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [15, 21, 22, 30] </ref>, it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11]. <p> Similarly, our IZEL construction inherits the theoretical performance bound 11 6 times optimal of Zelikovsky's heuristic. We also note that the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [22] </ref> is a special case of IGMST, where H is an ordinary rectilinear minimum spanning tree algorithm. Experimental results in Section 5 indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. <p> For example, IKMB may be implemented within time O (jN j jV j 3 ). Another way of reducing the time complexity follows from the observation that rather than adding Steiner points one at a time, they may be added in "batches" based on a non-interference criterion <ref> [22] </ref>. In practice, the number of such rounds tends to be very small (typically 3), bringing the practical time complexity of IKMB down to O (jV j 3 ).
Reference: [23] <author> K. Karplus, Xmap: </author> <title> a Technology Mapper for Table-lookup Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1991, </year> <pages> pp. 240-243. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. extensively studied by e.g. <ref> [9, 18, 19, 23, 32] </ref>, where a typical goal is to minimize the maximum circuit depth.
Reference: [24] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Algorithm for Steiner Trees, </title> <journal> Acta Informatica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: Our second contribution is a new general class of graph-based greedy algorithms for noncritical-net routing, based on an iterative application of an arbitrary given graph Steiner heuristic. Our Graph Steiner construction significantly outperforms the best-known general Graph Steiner tree heuristics, i.e., those of Kou, Markowsky and Berman <ref> [24] </ref>, and of Zelikovsky [38]. Moreover, the performance bound of our new method is the same as that of Zelikovsky's heuristic, namely 11 6 times optimal. <p> In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks). Figure 2 (a) depicts the solution produced by the KMB graph Steiner heuristic of <ref> [24] </ref>; Figure 2 (b) depicts the optimal Steiner tree solution (which is also the solution produced by our IGMST algorithm described below); and 4 by our GSA algorithm described below). <p> both produce a wirelength savings of 10% in this example); moreover, the maximum pathlength improvements of IGMST and GSA over KMB in this example are 23% and 45%, respectively. the dark block, while the lightly-shaded blocks are the sinks): (a) the solution produced by the KMB graph Steiner heuristic of <ref> [24] </ref>; (b) the optimal Steiner tree solution (which is also the solution produced by our IGMST algorithm described below); (c) depicts the optimal Steiner arborescence solution (which is also the solution produced by our GSA algorithm described below). <p> A number of heuristics were proposed over the years for the GMST problem [20], two of which have performance bounds of a constant factor from optimal: (1) the heuristic of Kou, Markowsy and Berman <ref> [24] </ref> (KMB) with performance bound of 2 (1 1 L ) where L is the maximum number of leafs in any optimal solution, and (2) the recent heuristic of Zelikovsky [38] (ZEL) with performance bound of 11 6 (these two methods are described in detail in the Appendix).
Reference: [25] <author> Y. Lan, A. H. Esfahanian, and L. M. Ni, </author> <title> Distributed Multi-Destination Routing in Hypercube Multiprocessors, </title> <booktitle> in Proc. 3rd Conf. Hypercube Computers and Concurrent Applications, </booktitle> <month> January </month> <year> 1988, </year> <pages> pp. 631-639. </pages>
Reference-contexts: All of our methods are directly applicable to other graph-based routing regimes, such as building-block design, routing in the presence of obstacles, etc., as well as in non-CAD areas such as multicasting in communication networks <ref> [25, 29] </ref>. The remainder of the paper is organized as follows: Section 2 describes a typical FPGA architecture, reviews previous FPGA routing work, and states the FPGA routing problem for both critical and non-critical nets. Section 3 presents the graph-based Steiner arborescence algorithm for routing critical nets.
Reference: [26] <author> K. W. Lee and C. Sechen, </author> <title> A Global Router for Sea-of-Gates Circuits, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Amsterdam, The Netherlands, </address> <month> February </month> <year> 1991, </year> <pages> pp. 242-247. </pages>
Reference-contexts: The GMST problem is known to be NP-complete [20]; it arises in various applications, e.g., routing in the presence of obstacles [17], FPGA routing [1], as well as in building-block design <ref> [8, 16, 26] </ref>. In Section 4 we address the GMST problem using an effective greedy strategy. the dark block, while the lightly-shaded blocks are the sinks).
Reference: [27] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Our work focuses on the routing phase of FPGA design; thus, we assume that partitioning, technology mapping, and placement have already been performed. grammable interconnection resources. Previous work on FPGA routing has primarily concentrated on producing feasible solutions that use the fewest routing resources. For example, the SEGA <ref> [27] </ref> detailed routing algorithm and its predecessor, CGE [6, 7], route nets based on demand and assign critical nets a higher routing priority.
Reference: [28] <author> F. D. Lewis and W. C. Pong, </author> <title> A Negative Reinforcement Method of PGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 601-605. </pages>
Reference-contexts: For example, the SEGA [27] detailed routing algorithm and its predecessor, CGE [6, 7], route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections <ref> [28] </ref>, or explored modified architectures [33] in order to reduce the number of programmable switches required. More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays.
Reference: [29] <author> X. Lin and L. M. Ni, </author> <title> Multicast Communication in Multicomputer Networks, </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> 4 (1993), </volume> <pages> pp. 1105-1117. </pages>
Reference-contexts: All of our methods are directly applicable to other graph-based routing regimes, such as building-block design, routing in the presence of obstacles, etc., as well as in non-CAD areas such as multicasting in communication networks <ref> [25, 29] </ref>. The remainder of the paper is organized as follows: Section 2 describes a typical FPGA architecture, reviews previous FPGA routing work, and states the FPGA routing problem for both critical and non-critical nets. Section 3 presents the graph-based Steiner arborescence algorithm for routing critical nets.
Reference: [30] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> A Timing-Driven Global Router for Custom Chip Design, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 48-51. </pages>
Reference-contexts: More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [15, 21, 22, 30] </ref>, it recently became increasingly apparent that these two goals are not synonymous [4, 5, 10, 11].
Reference: [31] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> The Rectilinear Steiner Arborescence Problem, </title> <journal> Algorithmica, </journal> <year> (1992), </year> <pages> pp. 277-288. </pages>
Reference-contexts: However, for routing critical nets, the primary objective is not wirelength optimization, but rather the minimization of source-to-sink delays. (with the secondary criteria being wirelength minimization). Our first contribution is a method for critical-net routing based on a generalization of rectilinear Steiner arborescences (RSAs) <ref> [31] </ref> to arbitrary weighted graphs. <p> The complexity of the GSA problem is currently open: no polynomial-time algorithm has been found, and nor is the GSA problem known to be NP-complete [20]. In Section 3 we address the GSA problem using a graph-based generalization of rectilinear Steiner arborescence heuristic of Rao et al. <ref> [31] </ref>. <p> example is 10%, while the maximum pathlength improvements of IGMST and GSA over KMB are 23% and 45%, respectively. 3 A New Graph Steiner Arborescence Heuristic For pointsets in the Manhattan plane, a particularly effective heuristic was recently proposed, namely the rectilinear Steiner arborescence (RSA) construction of Rao et al. <ref> [31] </ref>. The RSA method enjoys a good performance ratio of 2 times optimal [31], as well as excellent empirical performance. <p> KMB are 23% and 45%, respectively. 3 A New Graph Steiner Arborescence Heuristic For pointsets in the Manhattan plane, a particularly effective heuristic was recently proposed, namely the rectilinear Steiner arborescence (RSA) construction of Rao et al. <ref> [31] </ref>. The RSA method enjoys a good performance ratio of 2 times optimal [31], as well as excellent empirical performance.
Reference: [32] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> FPGA MCM Partitioning and Placement, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 211-212. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been fl Corresponding author is Professor Gabriel Robins, Department of Computer Science, Thornton Hall, University of Virginia, Charlottesville, VA 22903-2442, Email: robins@cs.virginia.edu, phone: (804) 982-2207, FAX: (804) 982-2214. extensively studied by e.g. <ref> [9, 18, 19, 23, 32] </ref>, where a typical goal is to minimize the maximum circuit depth.
Reference: [33] <author> Y. Sun, T. C. Wang, C. K. Wong, and C. L. Liu, </author> <title> Routing for Symmetric FPGAs and FPICs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1993, </year> <pages> pp. 486-490. </pages>
Reference-contexts: For example, the SEGA [27] detailed routing algorithm and its predecessor, CGE [6, 7], route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections [28], or explored modified architectures <ref> [33] </ref> in order to reduce the number of programmable switches required. More recently, [1] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. Unfortunately, none of these works directly minimizes the source-sink signal propagation delays.
Reference: [34] <author> S. Trimberger, </author> <title> Manager of Advanced Development, Xilinx Inc., </title> <type> private communication, </type> <month> February, </month> <year> 1994. </year>
Reference-contexts: Unfortunately, the flexibility provided by FPGAs is achieved at a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern to both FPGA designers and users <ref> [34] </ref>.
Reference: [35] <author> S. Trimberger, </author> <title> Field-Programmable Gate Arrays, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 3-5. </pages>
Reference-contexts: Section 5 outlines the experimental results, and we conclude in Section 6. 2 2 FPGA Routing An FPGA architecture consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing [7] <ref> [35] </ref> (See Figure 1). Each of the logic blocks implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks.
Reference: [36] <author> Y. F. Wu, P. Widmayer, and C. K. Wong, </author> <title> A Faster Approximation Algorithm for the Steiner Problem in Graphs, </title> <journal> Acta Informatica, </journal> <volume> 23 (1986), </volume> <pages> pp. 223-229. </pages>
Reference: [37] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xilinx, Inc., </publisher> <address> San Jose, California, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Field-Programmable Gate Arrays (FPGAs) are flexible and reusable high density circuits that can be easily (re)configured by the designer, enabling the VLSI design/validation/simulation cycle to be performed more quickly and cheaply <ref> [37] </ref>. Unfortunately, the flexibility provided by FPGAs is achieved at a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern to both FPGA designers and users [34].

References-found: 37

