URL: http://www.cs.dartmouth.edu/~stavros/papers/thesis.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~stavros/
Root-URL: http://www.cs.dartmouth.edu
Title: EXACT AND APPROXIMATION ALGORITHMS FOR NETWORK FLOW AND DISJOINT-PATH PROBLEMS  Examining Committee:  
Author: Stavros G. Kolliopoulos (chair) Clifford Stein Prasad Jayanti Fillia Makedon Aravind Srinivasan Neal E. Young Roger D. Sloboda Dean 
Degree: A Thesis Submitted to the Faculty in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Computer Science by  
Date: August 31, 1998  
Address: Hanover, New Hampshire  
Affiliation: DARTMOUTH COLLEGE  of Graduate Studies  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Aharoni, P. Erd-os, and N. Linial. </author> <title> Optima of dual integer linear programs. </title> <journal> Combinatorica, </journal> <volume> 8 </volume> <pages> 13-20, </pages> <year> 1988. </year>
Reference-contexts: set of all n-vertex directed networks and suppose P is a probability measure on G n : We may identify G n with the set of all n fi n matrices with entries in (1; +1): P is uniquely characterized by its distribution function, F P : G n ! <ref> [0; 1] </ref>; defined by F P (G) = P fG 0 2 G n jc G 0 (i; j) c G (i; j) for 1 i; j ng: We say that P is endpoint independent if, for 1 i; j; k n and G 2 G n ; we have that <p> Alternatively, the new maximum flow algorithm of Goldberg and Rao [41] with T 1 (n; m) = O (min (n 2=3 ; m 1=2 )m log ( n 2 m ) log U ) may be used, if edge capacities can be expressed as integers in a range <ref> [1; : : : ; U ] </ref>: We point out that if an edge representation of the output routing suffices, the Goldberg-Rao algorithm can be used to surpass the O (nm) bottleneck. We sketch the idea. <p> The total running time of the new implementation would be O (log (n=") min (n 2=3 ; m 1=2 )m log ( n 2 m ) log (U D)); assuming in the original network we have integral capacities in the range <ref> [1; : : : ; U ] </ref> and the minimum demand is 1=D for D 2 Z &gt;0 : Although we can improve upon the 4-approximation, algorithm Partition introduces some of the basic ideas behind all of our algorithms. <p> The algorithm runs in polynomial time. Proof. We instantiate the partitioning scheme as follows. The parameter r &gt; 1; to be chosen later, is the ratio of the geometrically decreasing intervals. (In the proof of Theorem 3.3.1, r = 2:) We partition the interval <ref> [1=D; 1] </ref> of demands into O (log r D) geometrically increasing subintervals: [1=D; 1=r blog r Dc ]; : : : ; (1=r i+1 ; 1=r i ]; : : : ; (1=r; 1]: By Lemma 3.5.1 the total flow through an edge e such that 1=r i+1 &lt; u e <p> Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching <ref> [76, 1] </ref>, job-shop scheduling [84, 90, 98, 77]. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios. <p> We now elaborate on our results under the rounding approach, providing further background as necessary. 4.1.1 Packing Integer Programs Following [95] a packing integer program (PIP) is defined as follows. Definition 1 Given A 2 <ref> [0; 1] </ref> mfin ; b 2 [1; 1) m and c 2 [0; 1] n with max j c j = 1; a PIP P = (A; b; c) seeks to maximize c T x subject to x 2 Z n + and Ax b: Constraints of the form 0 x <p> We now elaborate on our results under the rounding approach, providing further background as necessary. 4.1.1 Packing Integer Programs Following [95] a packing integer program (PIP) is defined as follows. Definition 1 Given A 2 [0; 1] mfin ; b 2 <ref> [1; 1) m and c 2 [0; 1] </ref> n with max j c j = 1; a PIP P = (A; b; c) seeks to maximize c T x subject to x 2 Z n + and Ax b: Constraints of the form 0 x j d j are also allowed. <p> We now elaborate on our results under the rounding approach, providing further background as necessary. 4.1.1 Packing Integer Programs Following [95] a packing integer program (PIP) is defined as follows. Definition 1 Given A 2 <ref> [0; 1] </ref> mfin ; b 2 [1; 1) m and c 2 [0; 1] n with max j c j = 1; a PIP P = (A; b; c) seeks to maximize c T x subject to x 2 Z n + and Ax b: Constraints of the form 0 x j d j are also allowed. <p> Some complications arise with respect to the cost vector c: If the maximum entry C 0 of c is larger than 1; dividing c by C 0 ensures that the entries of the resulting c 0 lie in <ref> [0; 1] </ref>: Let OP T (P); OP T (P 0 ) be the respective optima of the original PIP P and the resulting P 0 after rescaling c: Trivially OP T (P) = C 0 OP T (P 0 ): We solve approximately P 0 to obtain a feasible solution x: <p> (P) will be scaled down with respect to the guarantee for OP T (P 0 ) by a function of C 0 ; in the example above by (1=C 0 ) 1=bBc : In what follows, we assume that the cost vector for the problem of interest always belongs to <ref> [0; 1] </ref> n : The requirement of scaling down c by C 0 ; arises from the analysis of the algorithms in [94, 95] that we use as subroutines and in particular from the use of the Chernoff bound (cf. Theorem 4.2.1). <p> Find the n-vector x fl that yields the optimal solution to the linear relaxation of P: Step 2a. Define a partition of the interval <ref> [(fi log m) 1 ; 1] </ref> into ~ = O (log log m) consecutive subintervals [(fi log m) 1 ; 4 blog 4 (fi log m)c ]; : : : ; (4 ; 4 +1 ]; : : : ; (4 2 ; 4 1 ]; (4 1 ; 1]: For <p> of the graph G = (V; E): More generally the result applies to the even powers of G: We subsequently give an inapproximability result and an O ( q jEj) approximation for odd powers of G: 108 Theorem 4.3.6 Given an undirected graph G = (V; E) and c 2 <ref> [0; 1] </ref> jV j a weight vector on the vertices, there exists a polynomial-time algorithm, which outputs an independent set in the G 2k = (V; E 2k ); k 2 Z 1 ; of weight (maxfy fl = q where y fl denotes the optimum of a fractional relaxation and <p> Depending on the actual graph G it is possible that jEj = o (jE k j); k 2; therefore the following theorem existentially improves upon the naive bound. Theorem 4.3.8 Given an undirected graph G = (V; E) and c 2 <ref> [0; 1] </ref> jV j a weight vector on the vertices, there exists a polynomial-time algorithm, which outputs an 110 independent set in the G 2k+1 = (V; E 2k+1 ); k 2 Z 0 ; of weight (maxfy fl = q where y fl denotes the optimum of a fractional relaxation
Reference: [2] <author> R. K. Ahuja, A. V. Goldberg, J. B. Orlin, and R. E. Tarjan. </author> <title> Finding Minimum-Cost Flows by Double Scaling. </title> <journal> Mathematical Programming, </journal> <volume> 53 </volume> <pages> 243-266, </pages> <year> 1992. </year>
Reference-contexts: + ffi + " = ffi 2 + 1 + ": Currently the best time bound T 2 (n; m) for fractional minimum-cost flow is O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) 56 due to <ref> [40, 2, 80] </ref>. Finally, by modifying the congestion algorithm of Theorem 3.4.2, it easy to see how to obtain a (2; 3) simultaneous approximation for cost and congestion. The essential modification to H Partition lies in the use of the minimum-cost analogue to Lemma 3.4.1.
Reference: [3] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network flows: Theory, Algorithms and Applications. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Many reference sources for network flow theory exist; we refer the interested reader to the monographs by Ford and Fulkerson [30], Lawler [70] and Ahuja, Magnanti and Orlin <ref> [3] </ref>. Different variations of network flow problems are known to lie in different time complexity classes. While the basic maximum and minimum-cost flow problems defined above are in P; i.e. they can be solved in polynomial time, other variations are N P -hard. <p> This is an old and fundamental problem in network optimization with a plethora of applications in operations research (see, for example <ref> [3] </ref>). It also arises as a subproblem in other optimization problems such as network flows. A survey of 1 This chapter contains joint work with Cliff Stein [68]. 7 over 200 shortest-path papers through the year 1984 appeared in [20]. <p> The recent scaling algorithm of Goldberg [38], runs in O ( p nm log C) time, where C denotes the absolute value of the largest edge cost. Under the similarity assumption <ref> [3] </ref>, i.e. log C = O (log n); Goldberg's algorithm runs in O (n 2:5 log n) time on dense graphs, therefore our algorithm is faster. <p> Our algorithms will make use of the well-known flow decomposition theorem <ref> [3] </ref>. Given problem (G; s; T ) let a flow solution f be represented as an edge flow, i.e. an 38 assignment of flow values to edges. <p> Flow decomposition can be done in O (nm) time <ref> [3] </ref>, thus the running time of step 2 is O (nm + m~): Implementing Interval Routing with the augmenting path algorithm gives total running time O (km) for all the ~ 1 invocations at Step 3.
Reference: [4] <author> N. Alon, Z. Galil, and O. Margalit. </author> <title> On the exponent of the all pairs shortest path problem. </title> <booktitle> In Proceedings of the 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 569-575, </pages> <year> 1991. </year>
Reference-contexts: They also showed that under weak assumptions (n log n) time is required with high probability for solving SSSP on networks with the endpoint-independent distribution. Recently some research has been done on randomized algorithms that use ideas from matrix multiplication <ref> [4, 89] </ref>, but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [48] and minimum spanning tree [49], is an open question. The outline of the chapter is as follows.
Reference: [5] <author> Y. Aumann and Y. Rabani. </author> <title> Improved bounds for all-optical routing. </title> <booktitle> In Proceedings of the 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 567-576, </pages> <year> 1995. </year>
Reference-contexts: We also note that a -approximation for the maximization problem entails an O ( log jEj) approximation for the problem of routing in rounds <ref> [5, 60] </ref> (cf. Chapter 3 for a study of the problem in a single-source setting). We do not pursue the latter problem any further in this thesis. Application 2: weighted vertex-disjoint paths.
Reference: [6] <author> A. Baveja and A. Srinivasan. </author> <title> Approximation algorithms for disjoint paths and related routing and packing problems. </title> <note> Submitted for publication, </note> <year> 1998. </year>
Reference-contexts: In Section 4.3 we show how unsplittable flow and related problems can be approximated by resorting to packing. In Section 4.4 we conclude with the greedy algorithm. A preliminary version of the material in this chapter appeared in [67]. Independently of our work, Baveja and Srinivasan <ref> [6] </ref> have obtained results similar to ours for approximating vertex-disjoint paths under the rounding approach, unsplittable flow and column-restricted packing integer programs.
Reference: [7] <author> R. Bellman. </author> <title> On a routing problem. </title> <journal> Quarterly of Applied Mathematics, </journal> <volume> 16(1) </volume> <pages> 87-90, </pages> <year> 1958. </year>
Reference-contexts: A survey of 1 This chapter contains joint work with Cliff Stein [68]. 7 over 200 shortest-path papers through the year 1984 appeared in [20]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time <ref> [7, 30] </ref>. This simple algorithm has been widely used and studied for over 35 years; however, in all that time, no progress has been made in improving the worst case time bound for arbitrary real-valued shortest path problems. Our results. <p> In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford <ref> [7, 30] </ref> and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs. <p> In this section we give an algorithm for SSSP with average-case running time O (n 2 log n) on a broad class of networks with random edge costs. We will give the algorithm in two parts. In Section 2.2.1 we give a modified version of the Bellman-Ford <ref> [7, 30] </ref> algorithm that reduces solving a shortest path problem to a sequence of n shortest path problems in a simpler network. Then in Section 2.2.2 we show how to solve this simpler shortest path problem in O (n log n) time, on average. <p> mean cycle problem on G; whose running time is O (n 2 log n) with probability 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) [69, 32] O (n 2 log n) [55] SSSP O (n 3 ) <ref> [7, 30] </ref> O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. The input model in [55] is defined as a special case of the endpoint-independent one.
Reference: [8] <author> P. A. Bloniarz. </author> <title> A shortest path algorithm with expected time O(n 2 log n log fl n). </title> <journal> SIAM Journal on Computing, </journal> <volume> 12 </volume> <pages> 588-600, </pages> <year> 1983. </year>
Reference-contexts: A conceptual contribution of our method is that one can solve real-weighted SSSP by solving O (n) SSSP problems with nonnegative weights. When these problems can be solved in sublinear time, we get a faster algorithm. Our model of random edge costs is Bloniarz's endpoint-independent model <ref> [8] </ref>. 8 This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [8, 33, 79, 99, 93] </ref>). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. <p> This result was later refined [9] to take into account nonunique edge costs and improved in [99], where an O (n 2 log n log log n) expected time algorithm was given. Bloniarz <ref> [8] </ref> achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary distribution. He introduced the more general endpoint-independent randomness model. <p> The definition follows <ref> [8] </ref> except that we allow negative costs as well. <p> The reader is referred to <ref> [8] </ref> for further examples. We proceed with a high-level description of the Moffat-Takaoka method. Moffat and Takaoka give a SSSP algorithm with an expected running time O (n log n) under the above input model for a nonnegative-cost assignment, assuming that all of the edge lists are sorted.
Reference: [9] <author> P. A. Bloniarz, A. Meyer, and M. Fischer. </author> <title> Some observations on Spira's shortest path algorithm. </title> <type> Technical Report 79-6, </type> <institution> Department of Computer Science, State University of New York at Albany, </institution> <month> August </month> <year> 1979. </year>
Reference-contexts: A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira [93] (see [12] for minor corrections). This result was later refined <ref> [9] </ref> to take into account nonunique edge costs and improved in [99], where an O (n 2 log n log log n) expected time algorithm was given.
Reference: [10] <author> A. Z. Broder, A. M. Frieze, and E. Upfal. </author> <title> Static and dynamic path selection on expander graphs: a random walk approach. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 531-539, </pages> <year> 1997. </year>
Reference-contexts: In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [11] <author> R. G. Busaker and P. J. Gowen. </author> <title> A procedure for determining minimal-cost flow network patterns. </title> <type> Technical Report ORO-15, </type> <institution> Operational Research Office, Johns Hopkins University, Baltimore, MD, </institution> <year> 1961. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for minimum-cost flow (developed independently by [47], [46], <ref> [11] </ref>); it is a corollary of the integrality property of minimum-cost flow, with integral units scaled by : Two lemmata for the analysis follow. They generalize Lemmata 3.3.1 and 3.3.2 to accommodate costs.
Reference: [12] <author> J. S. Carson and A. M. </author> <title> Law. A note on Spira's algorithm for the all-pairs shortest path problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6 </volume> <pages> 696-699, </pages> <year> 1977. </year>
Reference-contexts: A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira [93] (see <ref> [12] </ref> for minor corrections). This result was later refined [9] to take into account nonunique edge costs and improved in [99], where an O (n 2 log n log log n) expected time algorithm was given.
Reference: [13] <author> C. Chekuri and S. Khanna. </author> <title> On multi-dimensional packing problems. </title> <type> Unpublished manuscript, </type> <year> 1998. </year>
Reference-contexts: Theorem 4.2.5). It is open whether an approximation ratio 1=m 1=(bBc+1)" ; " &gt; 0; can be achieved for general B: In recent work, Chekuri and Khanna showed that no 1=ff 1=(B+1)" ; " &gt; 0; can be achieved unless N P = ZP P <ref> [13] </ref>. It is interesting to investigate further whether the (1=m 1=(bBc+1) ) ratio extends beyond the column-restricted class to general PIP's. The grouping-and-scaling technique does not seem to apply to the general setting.
Reference: [14] <author> B. V. Cherkassky, A. V. Goldberg, and T. Radzik. </author> <title> Shortest path algorithms: theory and experimental evaluation. </title> <journal> Mathematical Programming, </journal> <volume> 73 </volume> <pages> 129-174, </pages> <year> 1996. </year>
Reference-contexts: Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. The vertex-potential model had been previously used by Cherkassky et al. <ref> [14] </ref> in an experimental evaluation of shortest path algorithms. Our method uses ideas from Bellman-Ford and from an algorithm of Moffat and Takaoka [79] originally intended for nonnegative-cost assignments, and turns out to be quite simple, drawing on the simplicity of these two algorithms.
Reference: [15] <author> H. Chernoff. </author> <title> A measure of the asymptotic efficiency for tests of a hypothesis based on sum of observations. </title> <journal> Ann. Math. Stat., </journal> <volume> 23 </volume> <pages> 493-509, </pages> <year> 1952. </year>
Reference-contexts: In particular, the randomized rounding scheme of Raghavan and Thompson [86] together with a straightforward application of the Chernoff bound <ref> [15] </ref> yields the well-known result we present in Theorem 4.2.2. We give first the relevant Chernoff-type bound. We provide a simplified bound, which is sufficient for our purposes. <p> We give first the relevant Chernoff-type bound. We provide a simplified bound, which is sufficient for our purposes. Theorem 4.2.1 <ref> [15, 85] </ref> If Y is the sum of independent random variables each in 89 [0; U ]; with E (Y ) ; then, for any * &gt; 0; P r [Y (1 + *)] e minf*;* 2 g=3U : For the sake of completeness we sketch the proof of the following
Reference: [16] <author> C. Cooper. </author> <title> The thresold of Hamilton cycles in the square of a random graph. Random Structures and Algorithms, </title> <booktitle> 5 </booktitle> <pages> 25-31, </pages> <year> 1994. </year> <month> 122 </month>
Reference-contexts: Studying NP-hard problems in powers of graphs is a topic that has received some attention in the literature <ref> [28, 100, 75, 16] </ref>. 4.1.3 A Greedy Algorithm Under the routing approach (approach (ii)) we give a simple greedy algorithm Greedy Path for edge-disjoint paths that has performance guarantees comparable to those obtained by the multicommodity flow based algorithms [96].
Reference: [17] <author> C. Cooper, A. Frieze, K. Mehlhorn, and V. Priebe. </author> <title> Average-case complexity of shortest-paths problems in the vertex-potential model. In Randomization and Approximation Techniques in Computer Science, </title> <booktitle> volume 1269 of Lecture Notes in Computer Science, </booktitle> <pages> pages 15-26. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. <ref> [17] </ref> studied the vertex-potential model which disallows negative-cost cycles. The vertex-potential model had been previously used by Cherkassky et al. [14] in an experimental evaluation of shortest path algorithms.
Reference: [18] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Let K ((k)) denote the minimum k such that a relation (k) holds. We assume, wlog, that 0 n k. We can upper bound the left-hand side of (2.4) by using the identity <ref> [18] </ref> k k r : (2.5) We can lower bound the right-hand side of (2.4) by m! = m (m 1) : : : (m r + 1) (m r) r : (2.6) k 0 = K k ! m! ! r r (k r) kr (m r) r = k
Reference: [19] <author> G. B. Dantzig. </author> <title> On the shortest route through a network. </title> <journal> Management Science, </journal> <volume> 6 </volume> <pages> 197-190, </pages> <year> 1960. </year>
Reference-contexts: Based on the policy selection, we obtain Spira's [93] and Dantzig's <ref> [19] </ref> methods respectively. The 19 Moffat-Takaoka routine (MT) uses Dantzig's algorithm up to a critical point with respect to the size of S and then switches to Spira's.
Reference: [20] <author> N. Deo and C. Pang. </author> <title> Shortest-path algorithms: taxonomy and annotation. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 275-323, </pages> <year> 1984. </year>
Reference-contexts: It also arises as a subproblem in other optimization problems such as network flows. A survey of 1 This chapter contains joint work with Cliff Stein [68]. 7 over 200 shortest-path papers through the year 1984 appeared in <ref> [20] </ref>. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time [7, 30].
Reference: [21] <author> E. W. Dijkstra. </author> <title> A note on two problems in connexion with graphs. </title> <journal> Numerische Mathematik, </journal> <volume> 1 </volume> <pages> 260-271, </pages> <year> 1959. </year>
Reference-contexts: This is O (n 3 ) for dense graphs. Until recently, all alternative implementations of Bellman-Ford first solved an assignment problem to find vertex potentials, which allows reweighting of edges so that all edge costs become nonnegative. Then Dijkstra's algorithm <ref> [21] </ref> is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [69]. <p> We also note that if the costs are nonnegative, faster algorithms are possible, as Dijkstra's algorithm <ref> [21] </ref> implemented with Fibonacci heaps [32] runs in O (n log n + m) time. We are not aware of any work on the average-case complexity of the SSSP problem for real-valued edge costs. <p> Moffat and Takaoka give a SSSP algorithm with an expected running time O (n log n) under the above input model for a nonnegative-cost assignment, assuming that all of the edge lists are sorted. Their algorithm is similar to Dijkstra's <ref> [21] </ref> and exploits the fact that vertices extracted in increasing cost order from a priority queue cannot have their cost decreased later on; once a vertex v is removed from the priority queue, its distance estimate is the cost of the actual shortest path from the source to v. <p> Algorithm ff-C Routing works as follows. Find shortest paths from s to all the sinks in G using Dijkstra's algorithm <ref> [21, 32] </ref>.
Reference: [22] <author> E. A. Dinitz. </author> <title> Algorithm for solution of a problem of maximum flow in networks with power estimation. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11 </volume> <pages> 1277-1280, </pages> <year> 1970. </year>
Reference: [23] <author> Y. Dinitz, N. Garg, and M. Goemans. </author> <title> On the single-source unsplittable flow problem. </title> <booktitle> To appear in Proceedings of 39th Symposium on Foundations of Computer Science, </booktitle> <year> 1998. </year>
Reference-contexts: At the first publication of our results [66] we claimed a (3:23 + o (1))-approximation. Subsequently we improved our scheme to obtain a 3 ratio; prior to this improvement, new results on Ufp were independently obtained by Dinitz, Garg and Goemans <ref> [23] </ref>. We give first a specialized version of Lemma 3.3.2 to be used in the new algorithm. <p> Dinitz, Garg and Goemans <ref> [23] </ref> first extended the theorem to arbitrary powers of 1=2: Their derivation uses a completely different algorithm. Proof. We describe the algorithm 2H Partition. We introduce an assumption, which we will eliminate at the end of the proof. <p> For single-source unsplittable flow, a number of improvements on our results were recently obtained by Dinitz, Garg and Goemans <ref> [23] </ref>. They obtain a 1 + max 2 approximation for congestion. Recall that max denotes the maximum demand value. This result matches the approximation ratio obtained by Lenstra et al. [74] and Shmoys and Tardos [91] for makespan minimization on unrelated machines. <p> A straightforward extension of the result in [74] yields actually a 1 + min hardness bound for unsplittable flow (see also <ref> [23] </ref>). It is an important open question whether 3=2 is possible either for S or more generally for single-source unsplittable flow. If this is the case, a new more powerful relaxation than maximum flow is possibly required. Dinitz, Garg and Goemans [23] improve on the other metrics as well, and show <p> + min hardness bound for unsplittable flow (see also <ref> [23] </ref>). It is an important open question whether 3=2 is possible either for S or more generally for single-source unsplittable flow. If this is the case, a new more powerful relaxation than maximum flow is possibly required. Dinitz, Garg and Goemans [23] improve on the other metrics as well, and show approximation ratios of at least 0:226 and 5 for maximum demand and minimum number of rounds; they prove corresponding integrality gaps of 0:3845 and 3 respectively.
Reference: [24] <author> P. Elias, A. Feinstein, and C. E. Shannon. </author> <title> Note on maximum flow through a network. </title> <journal> IRE Transactions on Information Theory IT-2, </journal> <pages> pages 117-199, </pages> <year> 1956. </year>
Reference-contexts: We will explicitly state it when we deal with a Ufp in which the minimum capacity can be arbitrarily small. Finally, we use (k-Ufp) to denote a multiple-source unsplittable flow problem with k distinct sources. The following theorem is an easy consequence of the well-known augmenting path algorithm ([29], <ref> [24] </ref>) and will be of use. It was also used as part of the approximation techniques in [61].
Reference: [25] <author> P. Erd-os and J. L. Selfridge. </author> <title> On a combinatorial game. </title> <journal> Journal of Combinatorial Theory A, </journal> <volume> 14 </volume> <pages> 298-301, </pages> <year> 1973. </year> <month> 123 </month>
Reference-contexts: (1=2)y fl &lt; (1=4)y fl (1 p) + (1=2)y fl p ) p &gt; 1=3: Therefore, with probability at least 1=31=m; the random experiment yields a feasible solution to P of value at least (1=4)y fl : The outlined algorithm can be derandomized by applying the method of conditional probabilities <ref> [25, 92, 85] </ref>. Theorem 4.2.2 combined with the linearity of the objective function has interesting consequences.
Reference: [26] <author> S. Even, A. Itai, and A. Shamir. </author> <title> On the complexity of timetable and multi--commodity flow problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 5 </volume> <pages> 691-703, </pages> <year> 1976. </year>
Reference-contexts: While the basic maximum and minimum-cost flow problems defined above are in P; i.e. they can be solved in polynomial time, other variations are N P -hard. One example of the latter type of problems is the integral multicom-modity flow problem <ref> [26] </ref>. <p> In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard <ref> [53, 26, 82] </ref>,extensively studied problems (see e.g. [87, 31, 88, 81, 60, 64, 10]), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling.
Reference: [27] <author> S. Even and R. E. Tarjan. </author> <title> Network flow and testing graph connectivity. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4 </volume> <pages> 507-518, </pages> <year> 1975. </year>
Reference-contexts: Our algorithm is motivated by the blocking flow method for the s-t maximum flow problem ([22], see also <ref> [27] </ref>). The latter method proceeds by iterations on the current residual graph. On every iteration a flow is found, which greedily saturates at least one edge on (i.e. blocks) all shortest paths from the source to the sink.
Reference: [28] <author> H. Fleischner. </author> <title> The square of every two-connected graph is Hamiltonian. </title> <journal> Journal of Combinatorial Theory B, </journal> <volume> 16 </volume> <pages> 29-34, </pages> <year> 1974. </year>
Reference-contexts: Studying NP-hard problems in powers of graphs is a topic that has received some attention in the literature <ref> [28, 100, 75, 16] </ref>. 4.1.3 A Greedy Algorithm Under the routing approach (approach (ii)) we give a simple greedy algorithm Greedy Path for edge-disjoint paths that has performance guarantees comparable to those obtained by the multicommodity flow based algorithms [96].
Reference: [29] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Maximal flow through a network. </title> <journal> Canad. J. Math., </journal> <volume> 8 </volume> <pages> 399-404, </pages> <year> 1956. </year>
Reference: [30] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Flows in networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: Many reference sources for network flow theory exist; we refer the interested reader to the monographs by Ford and Fulkerson <ref> [30] </ref>, Lawler [70] and Ahuja, Magnanti and Orlin [3]. Different variations of network flow problems are known to lie in different time complexity classes. <p> A survey of 1 This chapter contains joint work with Cliff Stein [68]. 7 over 200 shortest-path papers through the year 1984 appeared in [20]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time <ref> [7, 30] </ref>. This simple algorithm has been widely used and studied for over 35 years; however, in all that time, no progress has been made in improving the worst case time bound for arbitrary real-valued shortest path problems. Our results. <p> In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford <ref> [7, 30] </ref> and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs. <p> In this section we give an algorithm for SSSP with average-case running time O (n 2 log n) on a broad class of networks with random edge costs. We will give the algorithm in two parts. In Section 2.2.1 we give a modified version of the Bellman-Ford <ref> [7, 30] </ref> algorithm that reduces solving a shortest path problem to a sequence of n shortest path problems in a simpler network. Then in Section 2.2.2 we show how to solve this simpler shortest path problem in O (n log n) time, on average. <p> mean cycle problem on G; whose running time is O (n 2 log n) with probability 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) [69, 32] O (n 2 log n) [55] SSSP O (n 3 ) <ref> [7, 30] </ref> O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. The input model in [55] is defined as a special case of the endpoint-independent one. <p> Proof. In order to determine in Step 2 the capacity u i e of edge e in the i-th copy G i , 1 i ~; of G we use the flow decomposition theorem <ref> [30] </ref>. Any flow along cycles given by the decomposition theorem is discarded since it does not contribute to the routing of demands.
Reference: [31] <author> A. Frank. </author> <title> Packing paths, cuts and circuits a survey. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schrijver, editors, </editor> <booktitle> Paths, Flows and VLSI-Layout, </booktitle> <pages> pages 49-100. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: For the latter problem, a large amount 1 This chapter contains joint work with Cliff Stein [66]. 29 of work exists either for solving exactly interesting special cases (e.g. <ref> [31] </ref>, [88], [87]) or for approximating, with limited success, various objective functions (e.g. [86],[37], [63], [64],[60]). We examine the general multiple-source unsplittable flow problem in Chapter 4. In this chapter we focus on the important special case of the single-source unsplittable flow problem, denoted Ufp. <p> In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [32] <author> M. L. Fredman and R. E. Tarjan. </author> <title> Fibonacci heaps and their uses in improved network optimization algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 596-615, </pages> <year> 1987. </year>
Reference-contexts: Then Dijkstra's algorithm [21] is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [69]. Implemented with Fibonacci heaps <ref> [32] </ref>, this algorithm runs in O (nm + n 2 log n) time. <p> We also note that if the costs are nonnegative, faster algorithms are possible, as Dijkstra's algorithm [21] implemented with Fibonacci heaps <ref> [32] </ref> runs in O (n log n + m) time. We are not aware of any work on the average-case complexity of the SSSP problem for real-valued edge costs. However, the all pairs shortest path problem with nonneg-ative edge costs is well studied and the relevant literature spans two decades. <p> Algorithm Fast SSSP solves SSSP on G in O (n 2 log n) expected time if no negative-cost cycle exists. Otherwise it reports the existence of a negative-cost cycle in the same time bound. Modifying the Moffat-Takaoka routine to use Fibonacci heaps <ref> [32] </ref>, Mehlhorn and Priebe also obtained a high probability result. In our setting it can be phrased as follows. <p> There is an algorithm that solves the minimum mean cycle problem on G; whose running time is O (n 2 log n) with probability 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) <ref> [69, 32] </ref> O (n 2 log n) [55] SSSP O (n 3 ) [7, 30] O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. <p> Algorithm ff-C Routing works as follows. Find shortest paths from s to all the sinks in G using Dijkstra's algorithm <ref> [21, 32] </ref>.
Reference: [33] <author> A. M. Frieze and G. R. Grimmett. </author> <title> The shortest-path problem for graphs with random arc-lengths. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 </volume> <pages> 57-77, </pages> <year> 1985. </year>
Reference-contexts: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [8, 33, 79, 99, 93] </ref>). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. <p> Hassin and Zemel [43] considered the case in which the edge costs are uniformly distributed independently and gave an O (n 2 log n) expected time algorithm. Their result extends under some assumptions to independently and iden 11 tically distributed edge costs. Frieze and Grimmett <ref> [33] </ref> gave an O (n 2 log n) expected time algorithm for the case in which edge costs are identically and independently distributed with distribution function F; where F (0) = 0 and F is differentiable at 0: The fastest algorithm so far under the endpoint-independent model is due to Moffat
Reference: [34] <author> H. Gabow. </author> <title> Scaling algorithms for network problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 31 </volume> <pages> 148-168, </pages> <year> 1985. </year>
Reference-contexts: Table 2.1 indicates that as far as we currently know, these three problems share the same worst-case and average-case time bounds. It is interesting to note that a linear time (ignoring log factors) reduction is known to exist from SSSP to the assignment problem <ref> [34] </ref>. We have been unable to use this reduction in conjunction with Karp's O (n 2 log n) assignment algorithm [55] to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs.
Reference: [35] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(5) </volume> <pages> 1013-1036, </pages> <year> 1989. </year> <month> 124 </month>
Reference-contexts: The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [69]. Implemented with Fibonacci heaps [32], this algorithm runs in O (nm + n 2 log n) time. Gabow and Tarjan <ref> [35] </ref> gave a scaling algorithm for the assignment problem that runs in O ( p nm log (nC)) time, where C is the largest absolute value of an edge cost. 10 Goldberg [38] proposed a scaling algorithm that finds shortest paths without solving an assignment problem first; this algorithm has a
Reference: [36] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of N P -Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: If it is clear from the context that we examine a maximization problem, we will sometimes refer to a -approximation algorithm as achieving a (1=)-approximation, &gt; 1: Readers unfamiliar with the theory of N P -completeness are referred to the classical text of Garey and Johnson <ref> [36] </ref>. In this thesis, we study network flow problems with an emphasis on the edge-disjoint path problem and its generalizations. We study both problems that are known to be in P and N P -hard problems. <p> The Bellman-Ford algorithm fits into this model. Previous and Related Work. For arbitrary real costs the existence of negative-cost cycles, i.e. paths of negative cost in which every vertex has in-degree and out-degree 1, makes the SSSP problem NP-hard <ref> [36] </ref>. In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford [7, 30] and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs.
Reference: [37] <author> N. Garg, V. Vazirani, and M. Yannakakis. </author> <title> Primal-dual approximation algorithms for integral flow and multicut in trees. </title> <journal> Algorithmica, </journal> <volume> 18 </volume> <pages> 3-20, </pages> <year> 1997. </year>
Reference-contexts: This approach is known to have limitations, e.g. it is known that a gap of ( q jV j) exists between the fractional and integral optima for both the edge- and vertex-disjoint path problems on a graph with jEj = fi (jV j) <ref> [37] </ref>. (ii) Under the second approach, which we call the routing approach, a commodity is never split, i.e. routed fractionally along more than one path during the course of the algorithm. <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem <ref> [37] </ref>. Application 3: routing with low congestion.
Reference: [38] <author> A. V. Goldberg. </author> <title> Scaling algorithms for the shortest path problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 494-504, </pages> <year> 1995. </year>
Reference-contexts: Our input model is that of a complete graph with random costs, therefore the running time of our algorithm outperforms the O (n 3 ) bound of the Bellman-Ford algorithm. The recent scaling algorithm of Goldberg <ref> [38] </ref>, runs in O ( p nm log C) time, where C denotes the absolute value of the largest edge cost. <p> Gabow and Tarjan [35] gave a scaling algorithm for the assignment problem that runs in O ( p nm log (nC)) time, where C is the largest absolute value of an edge cost. 10 Goldberg <ref> [38] </ref> proposed a scaling algorithm that finds shortest paths without solving an assignment problem first; this algorithm has a running time of O ( p of these algorithms detect the existence of a negative-cost cycle.
Reference: [39] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> A new approach to the maximum flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: A fractional maximum flow can be found by the push-relabel method of Goldberg and Tarjan <ref> [39] </ref> whose currently fastest implementation has running time T 1 (n; m) = O (nm log m n log n [57]. In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single maximum flow computation.
Reference: [40] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <journal> Mathematics of Operations Research, </journal> <volume> 15(3) </volume> <pages> 430-466, </pages> <year> 1990. </year>
Reference-contexts: + ffi + " = ffi 2 + 1 + ": Currently the best time bound T 2 (n; m) for fractional minimum-cost flow is O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) 56 due to <ref> [40, 2, 80] </ref>. Finally, by modifying the congestion algorithm of Theorem 3.4.2, it easy to see how to obtain a (2; 3) simultaneous approximation for cost and congestion. The essential modification to H Partition lies in the use of the minimum-cost analogue to Lemma 3.4.1.
Reference: [41] <author> A.V. Goldberg and S. Rao. </author> <title> Beyond the flow decomposition barrier. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-11, </pages> <year> 1997. </year>
Reference-contexts: In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single maximum flow computation. Alternatively, the new maximum flow algorithm of Goldberg and Rao <ref> [41] </ref> with T 1 (n; m) = O (min (n 2=3 ; m 1=2 )m log ( n 2 m ) log U ) may be used, if edge capacities can be expressed as integers in a range [1; : : : ; U ]: We point out that if an
Reference: [42] <author> D. Goldfarb, J. Hao, and S. R. Kai. </author> <title> A computational comparison of label correcting and simplex algorithms for computing shortest paths. </title> <type> Technical report, </type> <institution> IEOR Department, Columbia University, </institution> <address> New York, </address> <year> 1986. </year>
Reference-contexts: Modification 2. During pass i only vertices already at length exactly i 1 from the source need to have their outgoing edges relaxed. This is an idea that has been used before, see e.g. <ref> [42] </ref>. Consider a vertex v and let j i 1 be the minimum value such that d i1 (v) = d i2 (v) = : : : = d j1 (v), i.e. a vertex that is at length exactly j 1 from the source.
Reference: [43] <author> R. Hassin and E. Zemel. </author> <title> On shortest paths in graphs with random weights. </title> <journal> Mathematics of Operations Research, </journal> <volume> 10(4) </volume> <pages> 557-564, </pages> <month> November </month> <year> 1985. </year>
Reference-contexts: Bloniarz [8] achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary distribution. He introduced the more general endpoint-independent randomness model. Hassin and Zemel <ref> [43] </ref> considered the case in which the edge costs are uniformly distributed independently and gave an O (n 2 log n) expected time algorithm. Their result extends under some assumptions to independently and iden 11 tically distributed edge costs.
Reference: [44] <author> J. Hastad. </author> <booktitle> Clique is hard to approximate within n 1" . In Proceedings of the 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 627-636, </pages> <year> 1996. </year> <note> Updated version appears in Electronic Colloquium on Computational Complexity. 125 </note>
Reference-contexts: a graph G = (V; E) can be formulated as a (0; 1) packing integer program P G with jEj constraints and B = 1: No -approximation, = jV j 1" ; " &gt; 0; can be obtained in polynomial time for independent set unless N P = ZP P <ref> [44] </ref>. <p> an arbitrary graph G 0 = (V 0 ; E 0 ) to finding an independent set in the k-th power (G 0 ) k of a graph G 0 = (V 0 ; E 0 ) such that jV 0 j (k + 2)jE 0 j: By Hastad's result <ref> [44] </ref> there is no jV 0 j 1" -approximation algorithm, " &gt; 0; for maximum independent set in G 0 unless N P = ZP P: This implies that no jE 0 j 1=2"=2 - approximation algorithm exists unless N P = ZP P: Therefore no (jV 0 j=(k + 2)) <p> For odd powers of G; we can prove a weaker O ( q jEj) approximation. By Hastad's result <ref> [44] </ref>, it is unlikely that an O (jEj 1=2" ); " &gt; 0; approximation can be achieved for G 1 = G: From this point of view, the O ( q jEj) bound is tight up to subpolynomial factors.
Reference: [45] <author> D. S. Hochbaum and D. B. Shmoys. </author> <title> Using dual approximation algorithms for scheduling problems: theoretical and practical results. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 144-162, </pages> <year> 1987. </year>
Reference-contexts: It remains to eliminate Assumption 3.4.1. In case the optimum congestion is not 1; one can use the algorithm we propose as a (1 + max min )-relaxed decision 50 procedure in conjunction with a binary search for the optimum congestion to obtain the claimed approximation. See <ref> [45] </ref> for details on relaxed decision procedures. Theorem 3.4.2 Let = (G = (V; E; u); s; T ) be a Ufp with maximum and minimum demand values max ; and min respectively. <p> As in the proof of Theorem 3.4.1 we assume without loss of generality that has an unsplittable routing with congestion 1: Otherwise one can use the algorithm we propose as a C-relaxed decision procedure <ref> [45] </ref> in conjunction with a binary search for the optimum congestion to obtain the claimed approximation. The algorithm is as follows. Round all demands down to p: Call the resulting problem 0 : Since an unsplittable flow solution exists for ; one exists for 0 as well.
Reference: [46] <author> M. Iri. </author> <title> A new method of solving transportation-network problems. </title> <journal> Journal of the Operations Research Society of Japan, </journal> <volume> 3 </volume> <pages> 27-87, </pages> <year> 1960. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for minimum-cost flow (developed independently by [47], <ref> [46] </ref>, [11]); it is a corollary of the integrality property of minimum-cost flow, with integral units scaled by : Two lemmata for the analysis follow. They generalize Lemmata 3.3.1 and 3.3.2 to accommodate costs.
Reference: [47] <author> W. S. Jewell. </author> <title> Optimal flow through networks. </title> <type> Technical Report 8, </type> <institution> Operations Research Center, MIT, </institution> <address> Cambridge, MA, </address> <year> 1958. </year>
Reference-contexts: Moreover, this unsplittable flow can be found in polynomial time. This theorem is an easy consequence of the well known successive shortest path algorithm for minimum-cost flow (developed independently by <ref> [47] </ref>, [46], [11]); it is a corollary of the integrality property of minimum-cost flow, with integral units scaled by : Two lemmata for the analysis follow. They generalize Lemmata 3.3.1 and 3.3.2 to accommodate costs.
Reference: [48] <author> D. Karger and C. Stein. </author> <title> A new approach to the minimum cut problem. </title> <journal> Journal of the ACM, </journal> <volume> 43 </volume> <pages> 601-640, </pages> <year> 1996. </year>
Reference-contexts: Recently some research has been done on randomized algorithms that use ideas from matrix multiplication [4, 89], but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut <ref> [48] </ref> and minimum spanning tree [49], is an open question. The outline of the chapter is as follows. In Section 2.2 we start with a high-level description of the new algorithm. Subsequently we present the randomness model, and give an implementation with fast average case.
Reference: [49] <author> D. R. Karger, P. N. Klein, and R. E. Tarjan. </author> <title> A randomized linear-time algorithm to find minimum spanning trees. </title> <journal> Journal of the ACM, </journal> <volume> 42 </volume> <pages> 321-328, </pages> <year> 1995. </year>
Reference-contexts: The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [48] and minimum spanning tree <ref> [49] </ref>, is an open question. The outline of the chapter is as follows. In Section 2.2 we start with a high-level description of the new algorithm. Subsequently we present the randomness model, and give an implementation with fast average case.
Reference: [50] <author> D. R. Karger, D. Koller, and S. J. Phillips. </author> <title> "Finding the hidden path: Time bounds for all-pairs shortest paths. </title> <journal> SIAM Journal on Computing, </journal> <volume> 22 </volume> <pages> 1199-1217, </pages> <year> 1993. </year>
Reference-contexts: Time lower bounds in natural computational models are known for very few problems. For shortest paths, we are aware of two previous lower bound results. Karger, Koller and Phillips <ref> [50] </ref> showed an (nm fl ) lower bound for APSP in a path-comparison model, where m fl denotes the number of edges in a shortest path solution. In the path-comparison model, edge costs are accessed only through pairwise comparisons of path costs.
Reference: [51] <author> D. R. Karger and M. S. Levine. </author> <title> Finding maximum flows in simple undirected graphs seems easier than bipartite matching. </title> <booktitle> In Proceedings of the 30th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1998. </year>
Reference-contexts: Call G P the induced graph. P can be viewed as a flow solution to a unit-capacity s 0 -t 0 maximum flow problem in G P : By a theorem of Karger and Levine <ref> [51] </ref>, if the graph induced by P is acyclic, the total length of the paths in P is O (jV j q jP j) = O (jV j 3=2 ): Therefore Condition (i) is satisfied.
Reference: [52] <author> R. M. Karp. </author> <title> Reducibility among combinatorial problems. </title> <booktitle> In Complexity of Computer Computations, </booktitle> <pages> pages 85-103. </pages> <publisher> Plenum Press, </publisher> <year> 1972. </year>
Reference-contexts: We give a gap-preserving reduction from the NP-complete problem 3-D Matching <ref> [52] </ref>. Our reduction establishes that it is N P -hard to achieve an approximation ratio better than 2 for 2-Ufp.
Reference: [53] <author> R. M. Karp. </author> <title> On the computational complexity of combinatorial problems. </title> <journal> Networks, </journal> <volume> 5 </volume> <pages> 45-68, </pages> <year> 1975. </year> <month> 126 </month>
Reference-contexts: In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard <ref> [53, 26, 82] </ref>,extensively studied problems (see e.g. [87, 31, 88, 81, 60, 64, 10]), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling.
Reference: [54] <author> R. M. Karp. </author> <title> A characterization of the minimum cycle mean in a digraph. </title> <journal> Discrete Mathematics, </journal> <volume> 23 </volume> <pages> 309-311, </pages> <year> 1978. </year>
Reference-contexts: In addition, we show how ideas from our shortest path algorithm can be used to obtain an O (n 2 log n) expected time implementation of Karp's algorithm <ref> [54] </ref> for the minimum mean cycle problem when the input satisfies the requirements of the endpoint-independent model. In this problem, given a directed network, a cycle is sought with the smallest mean cost, i.e., the ratio of its cost to the number of edges in the cycle. <p> a cycle W be defined as the number of vertices in W: The minimum mean cycle problem consists of finding a cycle W with the minimum mean cost, i.e. a cycle W that minimizes the ratio P (i;j)2W c (i; j)=jW j: The currently fastest algorithm is due to Karp <ref> [54] </ref> and finds a minimum mean cycle in O (nm) worst-case time. We are not aware of any average-case results for this problem. <p> Let fl denote the minimum mean cost of a cycle in G and D i (v) be the minimum cost of an edge progression of length i from a chosen source s 2 V to v: As shown in <ref> [54] </ref> D i (v) can computed with the following recurrence: D i (v) = min fD i1 (u) + c (u; v)g 8v 2 V; 1 i n (2.7) Karp's algorithm is based on the following theorem. 25 Theorem 2.4.1 [54] fl = min max ( n k : Therefore, once <p> chosen source s 2 V to v: As shown in <ref> [54] </ref> D i (v) can computed with the following recurrence: D i (v) = min fD i1 (u) + c (u; v)g 8v 2 V; 1 i n (2.7) Karp's algorithm is based on the following theorem. 25 Theorem 2.4.1 [54] fl = min max ( n k : Therefore, once the quantities D i (v); 8v 2 V; 1 i n; have been computed, fl can be determined in O (n 2 ) time. <p> 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) [69, 32] O (n 2 log n) [55] SSSP O (n 3 ) [7, 30] O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) <ref> [54] </ref> O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. The input model in [55] is defined as a special case of the endpoint-independent one.
Reference: [55] <author> R. M. Karp. </author> <title> An algorithm to solve the M fi N assignment problem in expected time O(M N log N ). Networks, </title> <booktitle> 10 </booktitle> <pages> 143-152, </pages> <year> 1980. </year>
Reference-contexts: Interestingly, our result yields the same bound for the average-case complexity of the SSSP and the minimum mean cycle problems as the one that is known for the 9 assignment problem. Karp <ref> [55] </ref> gave an O (n 2 log n) expected time algorithm for the assignment problem on an input model very similar to the endpoint-independent one. The worst-case complexity of the assignment problem is also O (n 3 ); the same as that of SSSP and minimum mean cycle. <p> an algorithm that solves the minimum mean cycle problem on G; whose running time is O (n 2 log n) with probability 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) [69, 32] O (n 2 log n) <ref> [55] </ref> SSSP O (n 3 ) [7, 30] O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. The input model in [55] is defined as a special <p> O (n 2 log n) <ref> [55] </ref> SSSP O (n 3 ) [7, 30] O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems. The input model in [55] is defined as a special case of the endpoint-independent one. Worst-case time bounds are reported for dense graphs. 2.5 Discussion In this chapter we provided deterministic algorithms that improve on the average-case time complexity of two fundamental network problems: SSSP and minimum mean cycle. <p> In addition, our algorithms achieve the O (n 2 log n) time bound with high probability. Putting our work in perspective, we may contrast our results with the already known O (n 2 log n) result for the assignment problem <ref> [55] </ref>. Table 2.1 provides the best known running times (on dense graphs) for the assignment, SSSP and minimum mean cycle problems, both worst case and average case. These three problems are known to be conceptually related. <p> It is interesting to note that a linear time (ignoring log factors) reduction is known to exist from SSSP to the assignment problem [34]. We have been unable to use this reduction in conjunction with Karp's O (n 2 log n) assignment algorithm <ref> [55] </ref> to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs. In other words it must be c (u; v) (u) (v); 8u; v: Karp's algorithm in [55] is of the shortest augmenting <p> 2 log n) assignment algorithm <ref> [55] </ref> to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs. In other words it must be c (u; v) (u) (v); 8u; v: Karp's algorithm in [55] is of the shortest augmenting path type. It starts by perform-ing the standard transformation of adding a big positive constant to the real-valued costs. Thus the potentials it computes do not satisfy the relation above. <p> It starts by perform-ing the standard transformation of adding a big positive constant to the real-valued costs. Thus the potentials it computes do not satisfy the relation above. On the other hand, if the first step of adding the constant is not taken the average-case analysis in <ref> [55] </ref> does not hold. 28 Chapter 3 Approximation Algorithms for Single-Source Unsplittable Flow 1 3.1 Introduction In the multiple-source unsplittable flow problem (G; T ); we are given a capacitated network G = (V; E; u); and a set T of connection requests, also called commodities.
Reference: [56] <author> R. M. Karp, F. T. Leighton, R. L. Rivest, C. D. Thompson, U. V. Vazirani, and V. V. Vazirani. </author> <title> Global wire routing in two-dimensional arrays. </title> <journal> Algorithmica, </journal> <volume> 2 </volume> <pages> 113-129, </pages> <year> 1987. </year>
Reference-contexts: Typically this is a multicommodity flow problem. We then explicitly use the solution x to guide the formation of a column-restricted or (0; 1)-PIP. A related usage of a solution to the linear relaxation of integer programs in a different context can be found in <ref> [56, 97] </ref>. An integral approximate solution to the created PIP will be an approximate solution to the original disjoint path problem (with possibly some small degradation in the approximation factor).
Reference: [57] <author> V. King, S. Rao, and R. Tarjan. </author> <title> A faster deterministic maximum flow algorithm. </title> <booktitle> In Proceedings of the 3rd ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 157-164, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: A fractional maximum flow can be found by the push-relabel method of Goldberg and Tarjan [39] whose currently fastest implementation has running time T 1 (n; m) = O (nm log m n log n <ref> [57] </ref>. In that case even when our algorithm is used to obtain a 4 + 1 2 n approximation, the running time is dominated by a single maximum flow computation.
Reference: [58] <author> P. Klein, A. Agrawal, R. Ravi, and S. Rao. </author> <title> Approximation through multicom-modity flow. </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 726-737, </pages> <year> 1990. </year>
Reference-contexts: The congestion metric 30 edge capacities are equal to 1: was a primary testbed for the randomized rounding technique of Raghavan and Thompson [86] and has been studied extensively for its connections to multi commodity flow and cuts (e.g. <ref> [73, 58, 72, 59] </ref>) 2 maximum routable demand. Route unsplittably a subset of the commodities of maximum total demand, while respecting capacity constraints. minimum number of rounds.
Reference: [59] <author> P. Klein, S. A. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximation algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 466-487, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: The congestion metric 30 edge capacities are equal to 1: was a primary testbed for the randomized rounding technique of Raghavan and Thompson [86] and has been studied extensively for its connections to multi commodity flow and cuts (e.g. <ref> [73, 58, 72, 59] </ref>) 2 maximum routable demand. Route unsplittably a subset of the commodities of maximum total demand, while respecting capacity constraints. minimum number of rounds.
Reference: [60] <author> J. M. Kleinberg. </author> <title> Approximation algorithms for disjoint paths problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Similarly, one can define the vertex disjoint-path problem, in which terminal pairs must be connected along vertex-disjoint paths. In addition to their rich combinatorial structure, disjoint-path type problems have been brought to further prominence by emerging applications in high-speed networks <ref> [60] </ref>. Nevertheless, designing good approximation algorithms that work on general graphs seems currently a very challenging task. Disjoint-path problems are conceptually related with packing integer programs. <p> The conceptual difficulty in Ufp arises from combining packing constraints due to the existence of capacities with path selection through an arbitrary graph. The feasibility question for Ufp, i.e., can all commodities be routed unsplittably, is strongly NP-complete <ref> [60] </ref>. We focus thus on efficient algorithms to obtain approximate solutions. Three main optimization versions of unsplittable flow can be defined. minimum congestion. <p> Kleinberg <ref> [60, 61] </ref> was the first to consider Ufp as a distinct problem and gave constant-factor approximation algorithms for all three optimization versions presented above, on both directed and undirected graphs. Our results. <p> When all demands and capacities are 1 in the multiple-source unsplittable flow problem we obtain the edge-disjoint path problem. See <ref> [60] </ref> and Chapter 3 for further applications and motivation for unsplittable flow. In all the above problems one can assign a weight w i 1 to each connection request and seek to find a realizable set of maximum total weight. <p> In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks. <p> Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks. It is hoped that a better theoretical understanding will lead to good heuristics for practical admission control and virtual-circuit routing problems. See Kleinberg's thesis for relevant background <ref> [60] </ref>. <p> The only example of this method we are aware of is the on-line Bounded Greedy Algorithm in <ref> [60] </ref> whose approximation guarantee depends also on the diameter of the graph. The algorithm can be easily modified into an off-line procedure, which outputs realizable sets of size (OP T = q q jV j)) for edge ( vertex)-disjoint paths. <p> We also note that a -approximation for the maximization problem entails an O ( log jEj) approximation for the problem of routing in rounds <ref> [5, 60] </ref> (cf. Chapter 3 for a study of the problem in a single-source setting). We do not pursue the latter problem any further in this thesis. Application 2: weighted vertex-disjoint paths. <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting. <p> It is in this last stage that a column-restricted PIP is used. A well-known analogue of Theorem 4.2.2, follows using standard randomized rounding [86, 85] and the Chernoff bound of Theorem 4.2.1. The proof is quite similar in spirit to that of Theorem 4.2.2. See for example <ref> [60] </ref> for a randomized algorithm.
Reference: [61] <author> J. M. Kleinberg. </author> <title> Single-source unsplittable flow. </title> <booktitle> In Proceedings of the 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 68-77, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: From this point of view, Ufp generalizes single-source edge-disjoint paths. Ufp is also important as a unifying framework for a variety of scheduling and load balancing problems <ref> [61] </ref>. It can be used to model bin-packing [61] and certain scheduling problems on parallel machines [74]. Another possible application for Ufp is in virtual-circuit routing, where the source would represent a node wishing to multicast data to selected sinks. <p> From this point of view, Ufp generalizes single-source edge-disjoint paths. Ufp is also important as a unifying framework for a variety of scheduling and load balancing problems <ref> [61] </ref>. It can be used to model bin-packing [61] and certain scheduling problems on parallel machines [74]. Another possible application for Ufp is in virtual-circuit routing, where the source would represent a node wishing to multicast data to selected sinks. <p> Kleinberg <ref> [60, 61] </ref> was the first to consider Ufp as a distinct problem and gave constant-factor approximation algorithms for all three optimization versions presented above, on both directed and undirected graphs. Our results. <p> Our results. We give a new approach for single-source unsplittable flow that has three main advantages. * The algorithms are simple and do not need the machinery developed in <ref> [61] </ref>. * Our approach treats in a unified manner directed and undirected graphs. * We obtain significant improvements upon the approximation ratios for all three optimization versions. All our algorithms follow the same grouping-and-scaling technique. We first find a maximum flow. <p> All our algorithms follow the same grouping-and-scaling technique. We first find a maximum flow. This is a "splittable" solution, i.e., it allows the demand for a commodity to be split along more than one path. As in the previous work <ref> [61] </ref> our work uses the maximum flow solution as a guide for the discovery of an unsplittable routing. <p> In the latter problem, increasing the original edge capacities as the routings g i are superimposed on G; only affects the approximation ratio. For the other two versions, it would be infeasible to do so. We note that a grouping scheme on the commodities is also used in <ref> [61] </ref>, though in a more complicated way; ours is based solely on demand values and does not require any topological information from the graph. We now elaborate on the approximation ratios we obtain. Minimum congestion. We give a 3-approximation algorithm for both directed and undirected graphs. <p> Our approach gives the first constant-factor approximation for minimum-cost unsplittable flow on directed graphs; it also improves considerably upon the constants known for the minimum cost version on undirected graphs. In particular, existing results for undirected graphs <ref> [61] </ref> give a simultaneous (7:473; 10:473) approximation for cost and congestion. We provide a (2; 3) simultaneous approximation on both directed and undirected graphs. <p> Shmoys and Tardos [91] give an algorithm for the generalized assignment problem 33 that simultaneously achieves optimum cost and a 2-approximation for congestion. Maximum routable demand. We show how to route at least :075; i.e., 7:5% of the optimum. In <ref> [61] </ref> the constant is not given explicitly but it can be as low as :031 for undirected graphs and of the order of 10 9 for directed graphs. Minimum number of rounds. <p> Minimum number of rounds. We show how to route all the demands in at most 13 times the optimum number of rounds, an improvement upon the 32 upper bound given in <ref> [61] </ref>. We emphasize that our algorithms for all three different versions are simple and make use of the same generic framework. Although they are presented separately for ease of exposition, they could all be stated in terms of one algorithm, with different subroutines invoked for subproblems. <p> Although they are presented separately for ease of exposition, they could all be stated in terms of one algorithm, with different subroutines invoked for subproblems. The dominant computational steps are maximum flow and flow decomposition; these are tools that work well on both directed and undirected graphs. In <ref> [61] </ref> it is noted that "the disjoint paths problem is much less well understood for directed than it is for undirected graphs : : : in keeping with the general principle we will find that the algorithms we obtain for directed graphs will be more complicated". Generalizations. <p> The 2-approximation algorithm of Lenstra, Shmoys and Tardos [74] or Shmoys and Tardos [91] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation-preserving reduction is known to exist from S to single-source unsplittable flow (see Fig. 3.2) <ref> [61] </ref>, so the 3=2 lower bound for S [74] applies to single-source unsplittable flow as well. <p> Finally, we use (k-Ufp) to denote a multiple-source unsplittable flow problem with k distinct sources. The following theorem is an easy consequence of the well-known augmenting path algorithm ([29], [24]) and will be of use. It was also used as part of the approximation techniques in <ref> [61] </ref>. <p> For each sink t i route, on the corresponding path, flow equal to the demand i ff: Given a real number interval with endpoints a and b; 0 &lt; a &lt; b; the ratio r (a; b) of the interval is b=a: The following fact is also used in <ref> [61] </ref>; we include a proof for the sake of completeness. Lemma 3.3.2 [61] Given an Ufp = (G; s; T ); with demands in the interval (a; b] and arbitrary capacities, there is an algorithm, Interval Routing, which finds in polynomial time an unsplittable routing g; such that for all edges <p> equal to the demand i ff: Given a real number interval with endpoints a and b; 0 &lt; a &lt; b; the ratio r (a; b) of the interval is b=a: The following fact is also used in <ref> [61] </ref>; we include a proof for the sake of completeness. Lemma 3.3.2 [61] Given an Ufp = (G; s; T ); with demands in the interval (a; b] and arbitrary capacities, there is an algorithm, Interval Routing, which finds in polynomial time an unsplittable routing g; such that for all edges e; g e r (a; b)u e + b: Remark: The statement <p> At least one of the two intervals contains at least half of the total demand in T ; so we obtain a constant-factor approximation for the entire problem. This was also the high-level approach used in <ref> [61] </ref>. In fact, in order to route the demands in the subinterval (ff; 1] we will use a simple and intuitive algorithm developed by Kleinberg [61]. <p> This was also the high-level approach used in <ref> [61] </ref>. In fact, in order to route the demands in the subinterval (ff; 1] we will use a simple and intuitive algorithm developed by Kleinberg [61]. For the demands in (0; ff]; we show how a partitioning scheme, similar to the one used for minimizing congestion, can give a simple algorithm with a constant performance guarantee. <p> The following lemma, shown in <ref> [61] </ref>, will be used to attack the demands in (ff; 1]: The spirit of the proof is similar to the one of Lemma 3.3.2. Lemma 3.7.1 [61] Given an Ufp = (G; s; T ); with demands in the interval (a; b]; there is an algorithm, K Routing, which finds a <p> The following lemma, shown in <ref> [61] </ref>, will be used to attack the demands in (ff; 1]: The spirit of the proof is similar to the one of Lemma 3.3.2. Lemma 3.7.1 [61] Given an Ufp = (G; s; T ); with demands in the interval (a; b]; there is an algorithm, K Routing, which finds a partial unsplittable flow g of value at least 1 2 [r (a; b)] 1 ff f (G; s; T ): The algorithm runs in polynomial time. <p> solution of minimum congestion for a problem (G; s; T ); the quantity d f (G; s; T )e is a lower bound on the minimum number of rounds, which we denote by (G; s; T ): We employ a subroutine that we call KR Routing (see Lemma 5.3 in <ref> [61] </ref>) and a variant R Routing to deal with subproblems having demands in a bounded range. The subroutines are similar in spirit to the subroutines K Routing and M Routing used for the maximum demand metric; however their basic ingredient is not Theorem 3.2.1. <p> The subroutines are similar in spirit to the subroutines K Routing and M Routing used for the maximum demand metric; however their basic ingredient is not Theorem 3.2.1. Maximum flow integrality is not useful in the rounds setting and instead a result from <ref> [61] </ref> is used, given as Theorem 3.8.1 below. The proof of the latter theorem uses results from matroid theory. Theorem 3.8.1 [61] Given an Ufp (G; s; T ) with all demands equal to and all capacities multiples of ; d f (G; s; T )e = (G; s; T ): <p> Maximum flow integrality is not useful in the rounds setting and instead a result from <ref> [61] </ref> is used, given as Theorem 3.8.1 below. The proof of the latter theorem uses results from matroid theory. Theorem 3.8.1 [61] Given an Ufp (G; s; T ) with all demands equal to and all capacities multiples of ; d f (G; s; T )e = (G; s; T ): Moreover, a routing in (G; s; T ) rounds can be found in polynomial time. Lemma 3.8.1 [61] Let = (G; <p> Theorem 3.8.1 <ref> [61] </ref> Given an Ufp (G; s; T ) with all demands equal to and all capacities multiples of ; d f (G; s; T )e = (G; s; T ): Moreover, a routing in (G; s; T ) rounds can be found in polynomial time. Lemma 3.8.1 [61] Let = (G; s; T ); be a Ufp with demands in the interval (a; b]; and f a corresponding fractional solution. There is a polynomial-time algorithm, KR Routing, which routes in at most d2r (a; b) f (G; s; T )e rounds. <p> From a straightforward modification to Theorem 5 in [74], the following hardness result is obtained. Theorem 3.10.1 [74] Unless P=NP, no approximation better than 3=2 exists for S with processing times from the set f1; 2; 1g: Kleinberg <ref> [61] </ref> gave an approximation-preserving reduction from S to minimum congestion unsplittable flow on a three-level directed graph G: A source vertex has edges directed to vertices representing the machines. The vertex set of G contains also one vertex for each job. <p> Invoking algorithm A for P 0 returns an integral solution of objective value (m; bkc; ff; y fl ): 92 The proof of the following lemma generalizes that of Lemma 4.1 in <ref> [61] </ref>. See also Lemma 3.7.1 in Chapter 3.
Reference: [62] <author> J. M. Kleinberg and R. Rubinfeld. </author> <title> Short paths in expander graphs. </title> <booktitle> In Pro--ceedings of the 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 86-95, </pages> <year> 1996. </year>
Reference-contexts: Let d denote the dilation of the fractional solution, i.e. the maximum length of a flow 78 path in the fractional relaxation. Bounds that rely on the dilation are particu-larly appealing for expander graphs, where it is known that d = O (polylog (n)) <ref> [71, 62] </ref>.
Reference: [63] <author> J. M. Kleinberg and E. Tardos. </author> <title> Approximations for the disjoint paths problem in high-diameter planar networks. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 26-35, </pages> <year> 1995. </year>
Reference-contexts: For the latter problem, a large amount 1 This chapter contains joint work with Cliff Stein [66]. 29 of work exists either for solving exactly interesting special cases (e.g. [31], [88], [87]) or for approximating, with limited success, various objective functions (e.g. [86],[37], <ref> [63] </ref>, [64],[60]). We examine the general multiple-source unsplittable flow problem in Chapter 4. In this chapter we focus on the important special case of the single-source unsplittable flow problem, denoted Ufp. In Ufp all commodities in T share a common source vertex s: See Figure 3.1 for an example instance.
Reference: [64] <author> J. M. Kleinberg and E. Tardos. </author> <title> Disjoint paths in densely-embedded graphs. </title> <booktitle> In Proceedings of the 36th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 52-61, </pages> <year> 1995. </year>
Reference-contexts: In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [65] <author> S. G. Kolliopoulos and C. Stein. </author> <title> Finding real-valued single-source shortest paths in o(n 3 ) expected time. </title> <editor> In W. H. Cunningham, S. T. McCormick, and M. Queyranne, editors, </editor> <booktitle> Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, volume 1084 of Lecture Notes in Computer Science, </booktitle> <pages> pages 94-104. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work <ref> [65] </ref>, Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. The vertex-potential model had been previously used by Cherkassky et al. [14] in an experimental evaluation of shortest path algorithms. <p> In Section 2.4 we explain how the shortest path algorithmic ideas extend to the minimum mean cycle problem. In Section 2.5 we conclude with a discussion of our results. A preliminary version of the material in this chapter appeared in <ref> [65] </ref>. 12 2.2 The Shortest-Path Algorithm We use n to denote jV j and m to denote jEj for the network G = (V; E; c) of interest.
Reference: [66] <author> S. G. Kolliopoulos and C. Stein. </author> <title> Improved approximation algorithms for un-splittable flow problems. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 426-435, </pages> <year> 1997. </year>
Reference-contexts: Improved guarantees are obtained, when the optimal solution has special structure. The results in this thesis were obtained jointly with Cliff Stein and preliminary expositions have appeared in <ref> [68, 66, 67] </ref>. Note on terminology: We use the terms graph and network completely interchangeably throughout the thesis. Given a network G = (V; E) of interest, we use n and m to denote jV j and jEj unless otherwise specified. <p> For the latter problem, a large amount 1 This chapter contains joint work with Cliff Stein <ref> [66] </ref>. 29 of work exists either for solving exactly interesting special cases (e.g. [31], [88], [87]) or for approximating, with limited success, various objective functions (e.g. [86],[37], [63], [64],[60]). We examine the general multiple-source unsplittable flow problem in Chapter 4. <p> In Section 3.9 we present the hardness result for 2--source unsplittable flow. Finally, in Section 3.10 we examine the connection between Ufp and scheduling problems. A preliminary version of the material in this chapter appeared in <ref> [66] </ref>. 3.2 Preliminaries A single-source unsplittable flow problem (Ufp) (G; s; T ) is defined on a capacitated network G = (V; E; u) where a subset T = ft 1 ; : : : ; t k g of V is the set of sinks; every edge e has a <p> Solid and dashed flow paths carry 1 and 1=2 units of flow respectively. 3.4 A 3-approximation algorithm for congestion An improved approximation algorithm can be obtained by combining the partitioning idea above with a more careful treatment of the subproblems. At the first publication of our results <ref> [66] </ref> we claimed a (3:23 + o (1))-approximation. Subsequently we improved our scheme to obtain a 3 ratio; prior to this improvement, new results on Ufp were independently obtained by Dinitz, Garg and Goemans [23]. <p> by min : There is an algorithm, 2H Partition, which obtains in polynomial time an unsplittable routing such that the flow through any edge e is at most u e + max min ): Remark: We first obtained this theorem for the case with demand values in f1=2; 1g in <ref> [66] </ref>. Dinitz, Garg and Goemans [23] first extended the theorem to arbitrary powers of 1=2: Their derivation uses a completely different algorithm. Proof. We describe the algorithm 2H Partition. We introduce an assumption, which we will eliminate at the end of the proof. <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting.
Reference: [67] <author> S. G. Kolliopoulos and C. Stein. </author> <title> Approximating disjoint-path problems using greedy algorithms and packing integer programs. </title> <editor> In R. E. Bixby, E. A. Boyd, and R. Z. Rios-Mercado, editors, </editor> <booktitle> Proceedings of the 6th Conference on Integer Programming and Combinatorial Optimization, volume 1412 of Lecture Notes in Computer Science, </booktitle> <pages> pages 153-168. </pages> <publisher> Springer-Verlag, </publisher> <year> 1998. </year> <month> 128 </month>
Reference-contexts: Improved guarantees are obtained, when the optimal solution has special structure. The results in this thesis were obtained jointly with Cliff Stein and preliminary expositions have appeared in <ref> [68, 66, 67] </ref>. Note on terminology: We use the terms graph and network completely interchangeably throughout the thesis. Given a network G = (V; E) of interest, we use n and m to denote jV j and jEj unless otherwise specified. <p> We are therefore interested in packing a maximum number of the column vectors of A into the m-cube. Packing in 1 This chapter contains joint work with Cliff Stein <ref> [67] </ref>. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching [76, 1], job-shop scheduling [84, 90, 98, 77]. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios. <p> In Section 4.2 we present approximation algorithms for packing integer programs. In Section 4.3 we show how unsplittable flow and related problems can be approximated by resorting to packing. In Section 4.4 we conclude with the greedy algorithm. A preliminary version of the material in this chapter appeared in <ref> [67] </ref>. Independently of our work, Baveja and Srinivasan [6] have obtained results similar to ours for approximating vertex-disjoint paths under the rounding approach, unsplittable flow and column-restricted packing integer programs.
Reference: [68] <author> S. G. Kolliopoulos and C. Stein. </author> <title> Finding real-valued single-source shortest paths in o(n 3 ) expected time. </title> <journal> Journal of Algorithms, </journal> <volume> 28 </volume> <pages> 125-141, </pages> <year> 1998. </year>
Reference-contexts: Improved guarantees are obtained, when the optimal solution has special structure. The results in this thesis were obtained jointly with Cliff Stein and preliminary expositions have appeared in <ref> [68, 66, 67] </ref>. Note on terminology: We use the terms graph and network completely interchangeably throughout the thesis. Given a network G = (V; E) of interest, we use n and m to denote jV j and jEj unless otherwise specified. <p> This is an old and fundamental problem in network optimization with a plethora of applications in operations research (see, for example [3]). It also arises as a subproblem in other optimization problems such as network flows. A survey of 1 This chapter contains joint work with Cliff Stein <ref> [68] </ref>. 7 over 200 shortest-path papers through the year 1984 appeared in [20]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time [7, 30].
Reference: [69] <author> H. W. Kuhn. </author> <title> The Hungarian method for the assignment problem. </title> <journal> In Naval Research Logistics Quarterly, </journal> <volume> volume 2, </volume> <pages> pages 83-97, </pages> <year> 1955. </year>
Reference-contexts: Then Dijkstra's algorithm [21] is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm <ref> [69] </ref>. Implemented with Fibonacci heaps [32], this algorithm runs in O (nm + n 2 log n) time. <p> There is an algorithm that solves the minimum mean cycle problem on G; whose running time is O (n 2 log n) with probability 1 O (n fl ); for some constant fl &gt; 0: 26 worst case average case assignment O (n 3 ) <ref> [69, 32] </ref> O (n 2 log n) [55] SSSP O (n 3 ) [7, 30] O (n 2 log n) [this thesis] minimum mean cycle O (n 3 ) [54] O (n 2 log n) [this thesis] Table 2.1: Best strongly polynomial time bounds for three related problems.
Reference: [70] <author> E. L. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Rine-hart and Winston, </publisher> <year> 1976. </year>
Reference-contexts: Many reference sources for network flow theory exist; we refer the interested reader to the monographs by Ford and Fulkerson [30], Lawler <ref> [70] </ref> and Ahuja, Magnanti and Orlin [3]. Different variations of network flow problems are known to lie in different time complexity classes. While the basic maximum and minimum-cost flow problems defined above are in P; i.e. they can be solved in polynomial time, other variations are N P -hard.
Reference: [71] <author> F. T. Leighton and S. B. Rao. </author> <title> Circuit switching: a multi-commodity flow approach. </title> <booktitle> In Workshop on Randomized Parallel Computing, </booktitle> <year> 1996. </year>
Reference-contexts: Let d denote the dilation of the fractional solution, i.e. the maximum length of a flow 78 path in the fractional relaxation. Bounds that rely on the dilation are particu-larly appealing for expander graphs, where it is known that d = O (polylog (n)) <ref> [71, 62] </ref>.
Reference: [72] <author> T. Leighton, F. Makedon, S. Plotkin, C. Stein, E. Tardos, and S. Tragoudas. </author> <title> Fast approximation algorithms for multicommodity flow problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 50 </volume> <pages> 228-243, </pages> <year> 1995. </year>
Reference-contexts: The congestion metric 30 edge capacities are equal to 1: was a primary testbed for the randomized rounding technique of Raghavan and Thompson [86] and has been studied extensively for its connections to multi commodity flow and cuts (e.g. <ref> [73, 58, 72, 59] </ref>) 2 maximum routable demand. Route unsplittably a subset of the commodities of maximum total demand, while respecting capacity constraints. minimum number of rounds. <p> Partition the commodities into the a minimum num ber of sets, called rounds, so that commodities assigned to the same round can be routed unsplittably without violating the capacity constraints. The randomized rounding technique applies to the more general multiple-source 2 In <ref> [72] </ref> congestion is defined as max e ff e =u e g: In this setting a congestion of 2 (0; 1); implies that it is possible to multiply all demands by 1= and still satisfy them by a flow which respects the capacity constraints. <p> Algorithmically the two definitions are equivalent: with a polynomial number of invocations of an algorithm which minimizes congestion according to our definition, one can minimize congestion according to the definition in <ref> [72] </ref>. 31 unsplittable flow problem and provides an O (log jEj= log log jEj) approximation for congestion; for the maximum demand and minimum number of rounds versions, it can give meaningful approximations only when the minimum capacity value is (1= log jEj) times the value of the maximum demand [86, 85]. <p> For the unweighted version of the problem, a fast combinatorial approximation algorithm can be used instead <ref> [72] </ref>. The relaxation allows commodity k to be shipped along more than one path. Call these paths the fractional paths.
Reference: [73] <author> T. Leighton and S. Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: The congestion metric 30 edge capacities are equal to 1: was a primary testbed for the randomized rounding technique of Raghavan and Thompson [86] and has been studied extensively for its connections to multi commodity flow and cuts (e.g. <ref> [73, 58, 72, 59] </ref>) 2 maximum routable demand. Route unsplittably a subset of the commodities of maximum total demand, while respecting capacity constraints. minimum number of rounds. <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting.
Reference: [74] <author> J. K. Lenstra, D. B. Shmoys, and E. Tardos. </author> <title> Approximation algorithms for scheduling unrelated parallel machines. </title> <journal> Mathematical Programming, </journal> <volume> 46 </volume> <pages> 259-271, </pages> <year> 1990. </year>
Reference-contexts: From this point of view, Ufp generalizes single-source edge-disjoint paths. Ufp is also important as a unifying framework for a variety of scheduling and load balancing problems [61]. It can be used to model bin-packing [61] and certain scheduling problems on parallel machines <ref> [74] </ref>. Another possible application for Ufp is in virtual-circuit routing, where the source would represent a node wishing to multicast data to selected sinks. The conceptual difficulty in Ufp arises from combining packing constraints due to the existence of capacities with path selection through an arbitrary graph. <p> Applications to scheduling. We also examine applications of unsplittable flow to scheduling problems. A lower bound of 3=2 exists for the approximability of minimum makespan on parallel machines when a job j can be processed only on a subset M (j) of the available machines <ref> [74] </ref>. Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [74] or Shmoys and Tardos [91] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation-preserving reduction is known to exist from S to <p> A lower bound of 3=2 exists for the approximability of minimum makespan on parallel machines when a job j can be processed only on a subset M (j) of the available machines <ref> [74] </ref>. Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [74] or Shmoys and Tardos [91] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation-preserving reduction is known to exist from S to single-source unsplittable flow (see Fig. 3.2) [61], so the 3=2 lower bound for S [74] <p> <ref> [74] </ref> or Shmoys and Tardos [91] for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation-preserving reduction is known to exist from S to single-source unsplittable flow (see Fig. 3.2) [61], so the 3=2 lower bound for S [74] applies to single-source unsplittable flow as well. <p> In our reduction we use ideas from Theorem 5 in <ref> [74] </ref>. <p> S is a special case of minimizing makespan on unrelated machines. In the unrelated machine setting, job j has a machine-dependent processing time p ij on i 2 M: The best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling <ref> [74, 91] </ref>. From a straightforward modification to Theorem 5 in [74], the following hardness result is obtained. <p> In the unrelated machine setting, job j has a machine-dependent processing time p ij on i 2 M: The best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling [74, 91]. From a straightforward modification to Theorem 5 in <ref> [74] </ref>, the following hardness result is obtained. Theorem 3.10.1 [74] Unless P=NP, no approximation better than 3=2 exists for S with processing times from the set f1; 2; 1g: Kleinberg [61] gave an approximation-preserving reduction from S to minimum congestion unsplittable flow on a three-level directed graph G: A source vertex <p> From a straightforward modification to Theorem 5 in <ref> [74] </ref>, the following hardness result is obtained. Theorem 3.10.1 [74] Unless P=NP, no approximation better than 3=2 exists for S with processing times from the set f1; 2; 1g: Kleinberg [61] gave an approximation-preserving reduction from S to minimum congestion unsplittable flow on a three-level directed graph G: A source vertex has edges directed to vertices representing the machines. <p> For single-source unsplittable flow, a number of improvements on our results were recently obtained by Dinitz, Garg and Goemans [23]. They obtain a 1 + max 2 approximation for congestion. Recall that max denotes the maximum demand value. This result matches the approximation ratio obtained by Lenstra et al. <ref> [74] </ref> and Shmoys and Tardos [91] for makespan minimization on unrelated machines. As explained in Section 3.1, a special case, denoted by S; of this scheduling problem reduces to single-source unsplittable flow. <p> The approximation ratio of 1 + max matches known integrality gaps both for minimum-congestion unsplittable flow and the scheduling problem S: On the other hand, the known inapproximability result states that it in N P -hard to achieve a ratio less than 3=2 <ref> [74] </ref>. A straightforward extension of the result in [74] yields actually a 1 + min hardness bound for unsplittable flow (see also [23]). It is an important open question whether 3=2 is possible either for S or more generally for single-source unsplittable flow. <p> approximation ratio of 1 + max matches known integrality gaps both for minimum-congestion unsplittable flow and the scheduling problem S: On the other hand, the known inapproximability result states that it in N P -hard to achieve a ratio less than 3=2 <ref> [74] </ref>. A straightforward extension of the result in [74] yields actually a 1 + min hardness bound for unsplittable flow (see also [23]). It is an important open question whether 3=2 is possible either for S or more generally for single-source unsplittable flow.
Reference: [75] <author> Y.-L. Lin and S. E. Skiena. </author> <title> Algorithms for square roots of graphs. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: Studying NP-hard problems in powers of graphs is a topic that has received some attention in the literature <ref> [28, 100, 75, 16] </ref>. 4.1.3 A Greedy Algorithm Under the routing approach (approach (ii)) we give a simple greedy algorithm Greedy Path for edge-disjoint paths that has performance guarantees comparable to those obtained by the multicommodity flow based algorithms [96]. <p> Lin and Skiena <ref> [75] </ref> give an approximation-preserving reduction from finding an independent set in an arbitrary graph G 0 = (V 0 ; E 0 ) to finding an independent set in the k-th power (G 0 ) k of a graph G 0 = (V 0 ; E 0 ) such that jV
Reference: [76] <author> L. Lovasz. </author> <title> On the ratio of optimal and fractional covers. </title> <journal> Discrete Mathematics, </journal> <volume> 13 </volume> <pages> 383-390, </pages> <year> 1975. </year>
Reference-contexts: Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching <ref> [76, 1] </ref>, job-shop scheduling [84, 90, 98, 77]. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios.
Reference: [77] <author> P. Martin and D. B. Shmoys. </author> <title> A new approach to computing optimal schedules for the job-shop scheduling problem. </title> <booktitle> In Proceedings of the 5th Conference on Integer Programming and Combinatorial Optimization, </booktitle> <pages> pages 389-403, </pages> <year> 1996. </year>
Reference-contexts: Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching [76, 1], job-shop scheduling <ref> [84, 90, 98, 77] </ref>. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios.
Reference: [78] <author> K. Mehlhorn and V. Priebe. </author> <title> On the all-pairs shortest path algorithm of Moffat and Takaoka. Random Structures and Algorithms, </title> <booktitle> 10 </booktitle> <pages> 205-220, </pages> <year> 1997. </year>
Reference-contexts: Mehlhorn and Priebe <ref> [78] </ref> corrected an oversight in the analysis given by Moffat and Takaoka and provided a slightly modified version of the algorithm that runs in O (n 2 log n) time with high probability. <p> Using standard binary heaps, it can be shown that the original analysis of the algorithm by Moffat and Takaoka together with a correction by Mehlhorn and Priebe <ref> [78] </ref> yields the following lemma. Lemma 2.2.2 ([79],[78]) Let G be a network of n vertices with nonnegative edge costs drawn from an endpoint-independent distribution and let S be a set of vertices of G whose shortest path distances have been computed. <p> Then MT (G; S) solves SSSP on G in O (n log n) expected time, given that the edge lists are presorted by cost. Proof. See Theorem 1 in [79] and <ref> [78] </ref>. We note that, in general, the nonnegativity condition is necessary for correctness, as it is in Dijkstra's algorithm. However, we will now show that for a single-source, two-level network with real costs, such as G " , MT computes correctly shortest paths. <p> Karger, Koller and Phillips [50] showed an (nm fl ) lower bound for APSP in a path-comparison model, where m fl denotes the number of edges in a shortest path solution. In the path-comparison model, edge costs are accessed only through pairwise comparisons of path costs. Mehlhorn and Priebe <ref> [78] </ref> defined a model in which the algorithm can make two types of queries: (i) what is the cost of a given edge e? (ii) given a vertex v 2 V 22 and an integer k 2 f1; : : : ; ng; what is the head of the edge with
Reference: [79] <author> A. Moffat and T. Takaoka. </author> <title> An all pairs shortest path algorithm with expected time O(n 2 log n). </title> <journal> SIAM Journal on Computing, </journal> <volume> 16 </volume> <pages> 1023-1031, </pages> <year> 1987. </year>
Reference-contexts: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [8, 33, 79, 99, 93] </ref>). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. <p> The vertex-potential model had been previously used by Cherkassky et al. [14] in an experimental evaluation of shortest path algorithms. Our method uses ideas from Bellman-Ford and from an algorithm of Moffat and Takaoka <ref> [79] </ref> originally intended for nonnegative-cost assignments, and turns out to be quite simple, drawing on the simplicity of these two algorithms. <p> O (n 2 log n) expected time algorithm for the case in which edge costs are identically and independently distributed with distribution function F; where F (0) = 0 and F is differentiable at 0: The fastest algorithm so far under the endpoint-independent model is due to Moffat and Takaoka <ref> [79] </ref> and runs in O (n 2 log n) expected time. Mehlhorn and Priebe [78] corrected an oversight in the analysis given by Moffat and Takaoka and provided a slightly modified version of the algorithm that runs in O (n 2 log n) time with high probability. <p> In this section we define the class of probability measures for which our analysis holds and then present an algorithm by Moffat and Takaoka <ref> [79] </ref> and show that it can be used to efficiently find shortest paths in G " : We define first the random cost model used for the analysis. The definition follows [8] except that we allow negative costs as well. <p> Then MT (G; S) solves SSSP on G in O (n log n) expected time, given that the edge lists are presorted by cost. Proof. See Theorem 1 in <ref> [79] </ref> and [78]. We note that, in general, the nonnegativity condition is necessary for correctness, as it is in Dijkstra's algorithm. However, we will now show that for a single-source, two-level network with real costs, such as G " , MT computes correctly shortest paths. <p> Thus it will compute correctly shortest paths. For the running time, it suffices to notice that the analysis in Theorem 1 of <ref> [79] </ref> relies on the following fact. In an endpoint-independent distribution when jSj = j each candidate leads to each of the n j 20 unlabeled vertices with equal probability. This fact is not harmed by the negativity of a candidate edge.
Reference: [80] <author> J. B. Orlin. </author> <title> A faster strongly polynomial minimum cost flow algorithm. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 377-387, </pages> <year> 1988. </year>
Reference-contexts: + ffi + " = ffi 2 + 1 + ": Currently the best time bound T 2 (n; m) for fractional minimum-cost flow is O (minfnm log (n 2 =m) log (nC); nm (log log U ) log (nC); (m log n)(m + n log n)g) 56 due to <ref> [40, 2, 80] </ref>. Finally, by modifying the congestion algorithm of Theorem 3.4.2, it easy to see how to obtain a (2; 3) simultaneous approximation for cost and congestion. The essential modification to H Partition lies in the use of the minimum-cost analogue to Lemma 3.4.1.
Reference: [81] <author> D. Peleg and E. Upfal. </author> <title> Disjoint paths on expander graphs. </title> <journal> Combinatorica, </journal> <volume> 9 </volume> <pages> 289-313, </pages> <year> 1989. </year>
Reference-contexts: In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [82] <author> Y. Perl and Y. Shiloach. </author> <title> Finding two disjoint paths between two pairs of vertices in a graph. </title> <journal> Journal of the ACM, </journal> <volume> 25 </volume> <pages> 1-9, </pages> <year> 1978. </year>
Reference-contexts: In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard <ref> [53, 26, 82] </ref>,extensively studied problems (see e.g. [87, 31, 88, 81, 60, 64, 10]), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling.
Reference: [83] <author> S. Plotkin. </author> <title> Competitive routing of virtual circuits in ATM networks. </title> <journal> IEEE J. Selected Areas in Comm., </journal> <pages> pages 1128-1136, </pages> <year> 1995. </year> <booktitle> Special issue on Advances in the Fundamentals of Networking. </booktitle>
Reference-contexts: The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting.
Reference: [84] <author> S. Plotkin, D. B. Shmoys, and E. Tardos. </author> <title> Fast approximation algorithms for fractional packing and covering problems. </title> <journal> Mathematics of Operations Research, </journal> <volume> 20 </volume> <pages> 257-301, </pages> <year> 1995. </year>
Reference-contexts: See <ref> [84] </ref> for results on the congestion metric. In Chapter 4 we explore 4 the topic of approximating disjoint-path problems using polynomial-size packing in-teger programs. Our approach gives a unified treatment of different versions of the problems, including multiple-source unsplittable flow, while achieving some of the best known approximation bounds. <p> Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching [76, 1], job-shop scheduling <ref> [84, 90, 98, 77] </ref>. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios. <p> Relaxing the integrality constraint on x yields a fractional solution to the underlying flow problem. The given formulation has however a variable for each of an exponential number of paths. (See <ref> [84] </ref> for an alternative packing formulation and how despite the exponential size a fractional solution can be efficiently computed). The close connection between packing and disjoint paths has found only limited use in the design of approximation algorithms. <p> The close connection between packing and disjoint paths has found only limited use in the design of approximation algorithms. To our knowledge the connection has been previously used only for the congestion metric <ref> [84] </ref>. In the latter case, which we will not consider here, congestion corresponds to an amount by which a solution can violate capacity constraints. This allows solutions to be infeasible and the objective is to bound the amount of infeasibility introduced. <p> Previous Work on Packing Programs. The basic techniques for approximating packing integer programs have been the randomized rounding technique of Raghavan and Thompson [85, 86] and the work of Plotkin, Shmoys and Tardos <ref> [84] </ref>. Randomized rounding schemes in the packing setting can be typically derandomized through the use of suitable pessimistic estimators, resulting in deterministic algorithms. Let y fl denote the optimum value of the linear relaxation of the PIP of interest. <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting.
Reference: [85] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximating packing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37 </volume> <pages> 130-143, </pages> <year> 1988. </year>
Reference-contexts: in [72]. 31 unsplittable flow problem and provides an O (log jEj= log log jEj) approximation for congestion; for the maximum demand and minimum number of rounds versions, it can give meaningful approximations only when the minimum capacity value is (1= log jEj) times the value of the maximum demand <ref> [86, 85] </ref>. Kleinberg [60, 61] was the first to consider Ufp as a distinct problem and gave constant-factor approximation algorithms for all three optimization versions presented above, on both directed and undirected graphs. Our results. <p> Theorem 4.2.1). We will state explicitly when some packing program in this chapter deviates from the requirements in Definition 1. Previous Work on Packing Programs. The basic techniques for approximating packing integer programs have been the randomized rounding technique of Raghavan and Thompson <ref> [85, 86] </ref> and the work of Plotkin, Shmoys and Tardos [84]. Randomized rounding schemes in the packing setting can be typically derandomized through the use of suitable pessimistic estimators, resulting in deterministic algorithms. Let y fl denote the optimum value of the linear relaxation of the PIP of interest. <p> We give first the relevant Chernoff-type bound. We provide a simplified bound, which is sufficient for our purposes. Theorem 4.2.1 <ref> [15, 85] </ref> If Y is the sum of independent random variables each in 89 [0; U ]; with E (Y ) ; then, for any * &gt; 0; P r [Y (1 + *)] e minf*;* 2 g=3U : For the sake of completeness we sketch the proof of the following <p> (1=2)y fl &lt; (1=4)y fl (1 p) + (1=2)y fl p ) p &gt; 1=3: Therefore, with probability at least 1=31=m; the random experiment yields a feasible solution to P of value at least (1=4)y fl : The outlined algorithm can be derandomized by applying the method of conditional probabilities <ref> [25, 92, 85] </ref>. Theorem 4.2.2 combined with the linearity of the objective function has interesting consequences. <p> In the second stage, among the commodities routed during the first stage, we select those that will ultimately be routed while respecting the capacity constraints. It is in this last stage that a column-restricted PIP is used. A well-known analogue of Theorem 4.2.2, follows using standard randomized rounding <ref> [86, 85] </ref> and the Chernoff bound of Theorem 4.2.1. The proof is quite similar in spirit to that of Theorem 4.2.2. See for example [60] for a randomized algorithm.
Reference: [86] <author> P. Raghavan and C. D. Thompson. </author> <title> Randomized rounding: a technique for provably good algorithms and algorithmic proofs. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 365-374, </pages> <year> 1987. </year>
Reference-contexts: The congestion metric 30 edge capacities are equal to 1: was a primary testbed for the randomized rounding technique of Raghavan and Thompson <ref> [86] </ref> and has been studied extensively for its connections to multi commodity flow and cuts (e.g. [73, 58, 72, 59]) 2 maximum routable demand. Route unsplittably a subset of the commodities of maximum total demand, while respecting capacity constraints. minimum number of rounds. <p> in [72]. 31 unsplittable flow problem and provides an O (log jEj= log log jEj) approximation for congestion; for the maximum demand and minimum number of rounds versions, it can give meaningful approximations only when the minimum capacity value is (1= log jEj) times the value of the maximum demand <ref> [86, 85] </ref>. Kleinberg [60, 61] was the first to consider Ufp as a distinct problem and gave constant-factor approximation algorithms for all three optimization versions presented above, on both directed and undirected graphs. Our results. <p> Theorem 4.2.1). We will state explicitly when some packing program in this chapter deviates from the requirements in Definition 1. Previous Work on Packing Programs. The basic techniques for approximating packing integer programs have been the randomized rounding technique of Raghavan and Thompson <ref> [85, 86] </ref> and the work of Plotkin, Shmoys and Tardos [84]. Randomized rounding schemes in the packing setting can be typically derandomized through the use of suitable pessimistic estimators, resulting in deterministic algorithms. Let y fl denote the optimum value of the linear relaxation of the PIP of interest. <p> Let y fl denote the optimum value of the linear relaxation of the PIP of interest. Standard randomized rounding yields integral solutions of value (y fl =m 1=B ) for general PIP's and (y fl =m 1=(bBc+1) ) for (0; 1)-PIP's <ref> [86] </ref> (see also [94]). Observe that for a (0; 1)- PIP, the integral optimum is not affected if B is rounded down to the nearest integer. <p> For future reference, we codify 82 previous work in the following theorem. Theorem 4.1.1 <ref> [86, 94, 95] </ref> Let P be a PIP conforming to Definition 1, and y fl be the optimum of the linear relaxation of P: One can compute in deterministic polynomial time a feasible solution to P of value (maxfy fl =m 1=B ; y fl (y fl =m) 1=(B1) ); y <p> The algorithm is surprisingly 85 simple but the performance guarantee matches the integrality gap known for the problem [37]. Application 3: routing with low congestion. A problem that has received a lot of attention in the literature on routing problems (e.g. <ref> [86, 73, 84, 83, 60, 66] </ref>) is that of minimizing congestion, i.e. the factor by which one is allowed to scale up capacities in order to achieve an optimal (or near-optimal) realizable set. See also Chapter 3 for study of the congestion metric in the single-source unsplittable flow setting. <p> In particular, the randomized rounding scheme of Raghavan and Thompson <ref> [86] </ref> together with a straightforward application of the Chernoff bound [15] yields the well-known result we present in Theorem 4.2.2. We give first the relevant Chernoff-type bound. We provide a simplified bound, which is sufficient for our purposes. <p> In the second stage, among the commodities routed during the first stage, we select those that will ultimately be routed while respecting the capacity constraints. It is in this last stage that a column-restricted PIP is used. A well-known analogue of Theorem 4.2.2, follows using standard randomized rounding <ref> [86, 85] </ref> and the Chernoff bound of Theorem 4.2.1. The proof is quite similar in spirit to that of Theorem 4.2.2. See for example [60] for a randomized algorithm.
Reference: [87] <author> N. Robertson and P. D. Seymour. </author> <title> Outline of a disjoint paths algorithm. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schrijver, editors, </editor> <title> Paths, Flows and VLSI-Layout. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: For the latter problem, a large amount 1 This chapter contains joint work with Cliff Stein [66]. 29 of work exists either for solving exactly interesting special cases (e.g. [31], [88], <ref> [87] </ref>) or for approximating, with limited success, various objective functions (e.g. [86],[37], [63], [64],[60]). We examine the general multiple-source unsplittable flow problem in Chapter 4. In this chapter we focus on the important special case of the single-source unsplittable flow problem, denoted Ufp. <p> In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [88] <author> A. Schrijver. </author> <title> Homotopic routing methods. </title> <editor> In B. Korte, L. Lovasz, H. J. Promel, and A. Schrijver, editors, </editor> <title> Paths, Flows and VLSI-Layout. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1990. </year>
Reference-contexts: For the latter problem, a large amount 1 This chapter contains joint work with Cliff Stein [66]. 29 of work exists either for solving exactly interesting special cases (e.g. [31], <ref> [88] </ref>, [87]) or for approximating, with limited success, various objective functions (e.g. [86],[37], [63], [64],[60]). We examine the general multiple-source unsplittable flow problem in Chapter 4. In this chapter we focus on the important special case of the single-source unsplittable flow problem, denoted Ufp. <p> In this chapter we will state explicitly when we deal with the weighted version of a problem. Both the edge- and vertex-disjoint path problems are fundamental, NP-hard [53, 26, 82],extensively studied problems (see e.g. <ref> [87, 31, 88, 81, 60, 64, 10] </ref>), which 77 combine two basic combinatorial notions: packing and routing. They have applica-tions in diverse areas such as telecommunications, VLSI and scheduling. Disjoint-path problems have been brought to further prominence due to the emergence of high-speed, large-bandwidth networks.
Reference: [89] <author> R. Seidel. </author> <title> On the all-pairs-shortest-path problem. </title> <booktitle> In Proceedings of the 24th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 745-749, </pages> <year> 1992. </year>
Reference-contexts: They also showed that under weak assumptions (n log n) time is required with high probability for solving SSSP on networks with the endpoint-independent distribution. Recently some research has been done on randomized algorithms that use ideas from matrix multiplication <ref> [4, 89] </ref>, but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [48] and minimum spanning tree [49], is an open question. The outline of the chapter is as follows.
Reference: [90] <author> D. B. Shmoys, C. Stein, and J. Wein. </author> <title> Improved approximation algorithms for shop scheduling problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(3) </volume> <pages> 617-632, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching [76, 1], job-shop scheduling <ref> [84, 90, 98, 77] </ref>. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios.
Reference: [91] <author> D. B. Shmoys and E. Tardos. </author> <title> An approximation algorithm for the generalized assignment problem. </title> <journal> Mathematical Programming A, </journal> <volume> 62 </volume> <pages> 461-474, </pages> <year> 1993. </year>
Reference-contexts: Interestingly, the minimum cost version of Ufp on directed graphs contains as a special case the generalized assignment problem. In the latter problem, the vertices adjacent to the source together with the sinks form a bipartite graph. Shmoys and Tardos <ref> [91] </ref> give an algorithm for the generalized assignment problem 33 that simultaneously achieves optimum cost and a 2-approximation for congestion. Maximum routable demand. We show how to route at least :075; i.e., 7:5% of the optimum. <p> Let S denote this scheduling problem. The 2-approximation algorithm of Lenstra, Shmoys and Tardos [74] or Shmoys and Tardos <ref> [91] </ref> for the more general problem of scheduling on unrelated machines is the best known for S: On the other hand an approximation-preserving reduction is known to exist from S to single-source unsplittable flow (see Fig. 3.2) [61], so the 3=2 lower bound for S [74] applies to single-source unsplittable flow <p> S is a special case of minimizing makespan on unrelated machines. In the unrelated machine setting, job j has a machine-dependent processing time p ij on i 2 M: The best approximation algorithm known for S is the 2-approximation for unrelated machine scheduling <ref> [74, 91] </ref>. From a straightforward modification to Theorem 5 in [74], the following hardness result is obtained. <p> They obtain a 1 + max 2 approximation for congestion. Recall that max denotes the maximum demand value. This result matches the approximation ratio obtained by Lenstra et al. [74] and Shmoys and Tardos <ref> [91] </ref> for makespan minimization on unrelated machines. As explained in Section 3.1, a special case, denoted by S; of this scheduling problem reduces to single-source unsplittable flow. The result of Shmoys and Tardos [91] is in fact a simultaneous (1; 1 + max ) approximation of cost and congestion for the <p> This result matches the approximation ratio obtained by Lenstra et al. [74] and Shmoys and Tardos <ref> [91] </ref> for makespan minimization on unrelated machines. As explained in Section 3.1, a special case, denoted by S; of this scheduling problem reduces to single-source unsplittable flow. The result of Shmoys and Tardos [91] is in fact a simultaneous (1; 1 + max ) approximation of cost and congestion for the generalized assignment problem (see Section 3.1). It is interesting to examine whether the ideas of Dinitz, Garg and Goemans can yield the same bound for minimum-cost single-source unsplittable flow.
Reference: [92] <author> J. Spencer. </author> <title> Ten Lectures on the Probabilistic Method. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1987. </year>
Reference-contexts: (1=2)y fl &lt; (1=4)y fl (1 p) + (1=2)y fl p ) p &gt; 1=3: Therefore, with probability at least 1=31=m; the random experiment yields a feasible solution to P of value at least (1=4)y fl : The outlined algorithm can be derandomized by applying the method of conditional probabilities <ref> [25, 92, 85] </ref>. Theorem 4.2.2 combined with the linearity of the objective function has interesting consequences.
Reference: [93] <author> P. M. Spira. </author> <title> A new algorithm for finding all shortest paths in a graph of positive arcs in average time O(n 2 log 2 n). </title> <journal> SIAM Journal on Computing, </journal> <volume> 2 </volume> <pages> 28-32, </pages> <year> 1973. </year>
Reference-contexts: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [8, 33, 79, 99, 93] </ref>). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. <p> A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira <ref> [93] </ref> (see [12] for minor corrections). This result was later refined [9] to take into account nonunique edge costs and improved in [99], where an O (n 2 log n log log n) expected time algorithm was given. <p> Several natural edge-cost assignments are endpoint independent, including the one used by Spira <ref> [93] </ref> in which edge costs are independently, identically distributed random variables. <p> Based on the policy selection, we obtain Spira's <ref> [93] </ref> and Dantzig's [19] methods respectively. The 19 Moffat-Takaoka routine (MT) uses Dantzig's algorithm up to a critical point with respect to the size of S and then switches to Spira's.
Reference: [94] <author> A. Srinivasan. </author> <title> Improved approximations of packing and covering problems. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 268-276, </pages> <year> 1995. </year> <month> 131 </month>
Reference-contexts: The restrictions on the actual values of the entries of A; b are without loss of generality; the values in an arbitrary packing program can be scaled to satisfy the above requirements <ref> [94] </ref>. <p> ; in the example above by (1=C 0 ) 1=bBc : In what follows, we assume that the cost vector for the problem of interest always belongs to [0; 1] n : The requirement of scaling down c by C 0 ; arises from the analysis of the algorithms in <ref> [94, 95] </ref> that we use as subroutines and in particular from the use of the Chernoff bound (cf. Theorem 4.2.1). We will state explicitly when some packing program in this chapter deviates from the requirements in Definition 1. Previous Work on Packing Programs. <p> Let y fl denote the optimum value of the linear relaxation of the PIP of interest. Standard randomized rounding yields integral solutions of value (y fl =m 1=B ) for general PIP's and (y fl =m 1=(bBc+1) ) for (0; 1)-PIP's [86] (see also <ref> [94] </ref>). Observe that for a (0; 1)- PIP, the integral optimum is not affected if B is rounded down to the nearest integer. <p> Observe that for a (0; 1)- PIP, the integral optimum is not affected if B is rounded down to the nearest integer. Therefore it is not unnatural to work with bBc: Srinivasan <ref> [94, 95] </ref> improved on the exponent of m in the above bounds and introduced new ones, depending on ff: His work examines more closely the correlation between the packing constraints and introduces probabilistic tools of independent interest. For future reference, we codify 82 previous work in the following theorem. <p> For future reference, we codify 82 previous work in the following theorem. Theorem 4.1.1 <ref> [86, 94, 95] </ref> Let P be a PIP conforming to Definition 1, and y fl be the optimum of the linear relaxation of P: One can compute in deterministic polynomial time a feasible solution to P of value (maxfy fl =m 1=B ; y fl (y fl =m) 1=(B1) ); y <p> This integral solution can be found using existing algorithms for approximating PIP's as a black box; we abstract away the relevant complications arising from sophisticated randomized rounding schemes and their derandomization 84 <ref> [94, 95] </ref>. Our algorithms apply to the case when there are weights on the commodities, and thus generalize those of Srinivasan for edge-disjoint paths. This general approach yields four applications which we explain below. Application 1: weighted unsplittable flow. <p> a generic ffi &lt; 1: We would like to point out that the approximation ratios in this section can be also obtained in a more direct fashion by using an observation of Srinivasan: the column values and B can be rescaled so that the min i b i becomes B=ffi <ref> [94] </ref>. Rescaling does not affect feasibility of solutions. We choose to give a modified version of algorithm Column Partition to demonstrate the versatility of the grouping-and-scaling technique. The approximation ratio we achieve will be a 98 algorithm New Partition (P; ) Step 1.
Reference: [95] <author> A. Srinivasan. </author> <title> An extension of the Lovasz Local Lemma and its applications to integer programming. </title> <booktitle> In Proceedings of the 7th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 6-15, </pages> <year> 1996. </year>
Reference-contexts: Further, we believe that both our new algorithm for column--restricted packing integer programs and the technique associated with its derivation are of independent interest. We now elaborate on our results under the rounding approach, providing further background as necessary. 4.1.1 Packing Integer Programs Following <ref> [95] </ref> a packing integer program (PIP) is defined as follows. <p> ; in the example above by (1=C 0 ) 1=bBc : In what follows, we assume that the cost vector for the problem of interest always belongs to [0; 1] n : The requirement of scaling down c by C 0 ; arises from the analysis of the algorithms in <ref> [94, 95] </ref> that we use as subroutines and in particular from the use of the Chernoff bound (cf. Theorem 4.2.1). We will state explicitly when some packing program in this chapter deviates from the requirements in Definition 1. Previous Work on Packing Programs. <p> Observe that for a (0; 1)- PIP, the integral optimum is not affected if B is rounded down to the nearest integer. Therefore it is not unnatural to work with bBc: Srinivasan <ref> [94, 95] </ref> improved on the exponent of m in the above bounds and introduced new ones, depending on ff: His work examines more closely the correlation between the packing constraints and introduces probabilistic tools of independent interest. For future reference, we codify 82 previous work in the following theorem. <p> For future reference, we codify 82 previous work in the following theorem. Theorem 4.1.1 <ref> [86, 94, 95] </ref> Let P be a PIP conforming to Definition 1, and y fl be the optimum of the linear relaxation of P: One can compute in deterministic polynomial time a feasible solution to P of value (maxfy fl =m 1=B ; y fl (y fl =m) 1=(B1) ); y <p> This integral solution can be found using existing algorithms for approximating PIP's as a black box; we abstract away the relevant complications arising from sophisticated randomized rounding schemes and their derandomization 84 <ref> [94, 95] </ref>. Our algorithms apply to the case when there are weights on the commodities, and thus generalize those of Srinivasan for edge-disjoint paths. This general approach yields four applications which we explain below. Application 1: weighted unsplittable flow.
Reference: [96] <author> A. Srinivasan. </author> <title> Improved approximations for edge-disjoint paths, unsplittable flow and related routing problems. </title> <booktitle> In Proceedings of the 38th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 416-425, </pages> <year> 1997. </year>
Reference-contexts: The fractional relaxation is typically multicommodity flow and the rounding techniques used to date involved sophisticated and use of randomized rounding <ref> [96] </ref>. The objective value of the resulting solution is compared to the fractional optimum y fl , which is an upper bound on the integral optimum, OPT. This approach has been the more successful one and recently yielded the first approximation algorithm for uniform unsplittable flow [96] which is the special <p> use of randomized rounding <ref> [96] </ref>. The objective value of the resulting solution is compared to the fractional optimum y fl , which is an upper bound on the integral optimum, OPT. This approach has been the more successful one and recently yielded the first approximation algorithm for uniform unsplittable flow [96] which is the special case of unsplittable flow where all the capacities have the same value. Let d denote the dilation of the fractional solution, i.e. the maximum length of a flow 78 path in the fractional relaxation. <p> approach yields, for unweighted uniform unsplittable flow (and thus for unweighted edge-disjoint paths as well) a realizable set of size (maxf (y fl ) 2 =jEj; y fl = q jEj; y fl =dg) and an (maxf (y fl ) 2 =jEj; y fl =dg) bound for the weighted version <ref> [96] </ref>. <p> Tables 4.1 and 4.2 sum marize previous and new bounds for edge-, vertex-disjoint path and unsplittable flow 79 routing approach rounding approach unweighted EDP OP T p jEj jE o j jEj (y fl ) 2 OPT 2 d o d <ref> [96] </ref> weighted EDP | y fl p jEj (y fl ) 2 y fl weighted UCUFP | (y fl ) 2 d [96] weighted UFP | y fl log log jEj jEj d jEj log 2 jEj log log jEj Table 4.1: Known approximation bounds for edge-disjoint paths (EDP), uniform capacity <p> path and unsplittable flow 79 routing approach rounding approach unweighted EDP OP T p jEj jE o j jEj (y fl ) 2 OPT 2 d o d <ref> [96] </ref> weighted EDP | y fl p jEj (y fl ) 2 y fl weighted UCUFP | (y fl ) 2 d [96] weighted UFP | y fl log log jEj jEj d jEj log 2 jEj log log jEj Table 4.1: Known approximation bounds for edge-disjoint paths (EDP), uniform capacity unsplittable flow (UCUFP), and general unsplittable flow (UFP), -notation omitted. <p> Armed with both this new algorithm and existing algorithms for general packing integer programs, we show how packing formulations both provide a unified and simplified derivation of many results from <ref> [96] </ref> and also how they lead to new ones. In particular, we obtain the first approximation algorithm for weighted multiple-source unsplittable flow on networks with arbitrary demands and capacities and the first approximation algorithm for weighted 80 vertex-disjoint paths. <p> For example the approximation for edge-disjoint paths becomes (maxfy fl (y fl =jEj log log jEj) 1=B ; y fl =jEj 1=(B+1) ; y fl =d 1=B g); when the number of connection requests is O (jEj): Our congestion tradeoffs generalize previous work by Srinivasan <ref> [96] </ref> who showed the (y fl =d 1=B ) tradeoff for uniform capacity unsplittable flow. We do not state the tradeoffs explicitly for the various problems since they can be easily obtained by simple modifications to the given algorithms. Application 4: Independent Set in powers of a graph. <p> is a topic that has received some attention in the literature [28, 100, 75, 16]. 4.1.3 A Greedy Algorithm Under the routing approach (approach (ii)) we give a simple greedy algorithm Greedy Path for edge-disjoint paths that has performance guarantees comparable to those obtained by the multicommodity flow based algorithms <ref> [96] </ref>. Greedy algorithms have been extensively studied in combinatorial optimization due to their elegance and simplicity. Our work provides another example of the usefulness of the greedy method. <p> Independently of our work, Baveja and Srinivasan [6] have obtained results similar to ours for approximating vertex-disjoint paths under the rounding approach, unsplittable flow and column-restricted packing integer programs. Their work follows a different approach and builds on the methods in <ref> [96] </ref>. 88 4.2 Approximating a column-restricted PIP 4.2.1 Notation and basic facts Let P = (A; b; c) be a column-restricted PIP. <p> Finally, an important open question, is whether an (1=jV j " ); " &lt; 1; approximation ratio is possible for edge-disjoint paths on general graphs. The work in <ref> [96] </ref> and in this thesis demonstrates that this is possible if one of the following conditions holds: (i) the optimal solution uses O (n 2ffi ); ffi &gt; 0; edges. (ii) a fractional solution with dilation O (n 1ffi ); ffi &gt; 0 can be efficiently computed. (iii) the average length
Reference: [97] <author> A. Srinivasan and C.-P. Teo. </author> <title> A constant-factor approximation algorithm for packet routing and balancing local vs. global criteria. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 636-643, </pages> <year> 1997. </year>
Reference-contexts: Typically this is a multicommodity flow problem. We then explicitly use the solution x to guide the formation of a column-restricted or (0; 1)-PIP. A related usage of a solution to the linear relaxation of integer programs in a different context can be found in <ref> [56, 97] </ref>. An integral approximate solution to the created PIP will be an approximate solution to the original disjoint path problem (with possibly some small degradation in the approximation factor).
Reference: [98] <author> C. Stein. </author> <title> Approximation algorithms for multicommodity flow and shop scheduling problems. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <address> Cambridge, MA, </address> <month> August </month> <year> 1992. </year> <note> Also appears as MIT/LCS/TR-550. </note>
Reference-contexts: Packing in 1 This chapter contains joint work with Cliff Stein [67]. 75 teger programs are a well-studied class of integer programs. They can model several NP-complete problems, including independent set, hypergraph k-matching [76, 1], job-shop scheduling <ref> [84, 90, 98, 77] </ref>. Many of these problems seem to be difficult to approximate, and not much is known about their worst-case approximation ratios.
Reference: [99] <author> T. Takaoka and A. M. Moffat. </author> <title> An O(n 2 log n log log n) expected time algorithm for the all shortest distance problem. </title> <editor> In P. Dembinski, editor, </editor> <booktitle> Mathematical Foundations of Computer Science, volume 88 of Lecture Notes in Computer Science, </booktitle> <pages> pages 643-655. </pages> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [8, 33, 79, 99, 93] </ref>). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan [101]. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. <p> This result was later refined [9] to take into account nonunique edge costs and improved in <ref> [99] </ref>, where an O (n 2 log n log log n) expected time algorithm was given. Bloniarz [8] achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary distribution.
Reference: [100] <author> P. </author> <title> Underground. On graphs with Hamiltonian squares. </title> <journal> Discrete Mathematics, </journal> <volume> 21:323, </volume> <year> 1978. </year>
Reference-contexts: Studying NP-hard problems in powers of graphs is a topic that has received some attention in the literature <ref> [28, 100, 75, 16] </ref>. 4.1.3 A Greedy Algorithm Under the routing approach (approach (ii)) we give a simple greedy algorithm Greedy Path for edge-disjoint paths that has performance guarantees comparable to those obtained by the multicommodity flow based algorithms [96].
Reference: [101] <author> S. K. Walley and H. H. Tan. </author> <title> Shortest paths in random weighted graphs. </title> <booktitle> In Proc. 1st Int. Conf. on Computing and Combinatorics, </booktitle> <pages> pages 213-222, </pages> <year> 1995. </year>
Reference-contexts: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, [8, 33, 79, 99, 93]). To our knowledge the only random cost model studied, which is incomparable to Bloniarz's is a recent one of Walley and Tan <ref> [101] </ref>. Following the first publication of this work [65], Cooper et al. [17] studied the vertex-potential model which disallows negative-cost cycles. The vertex-potential model had been previously used by Cherkassky et al. [14] in an experimental evaluation of shortest path algorithms.
Reference: [102] <author> Neal Young. </author> <title> Randomized rounding without solving the linear program. </title> <booktitle> In Proceedings of the 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 170-178, </pages> <year> 1995. </year>
Reference-contexts: The work of Young on oblivious rounding <ref> [102] </ref> may provide a starting point for establishing a connection between the rounding and routing approaches. Finally, an important open question, is whether an (1=jV j " ); " &lt; 1; approximation ratio is possible for edge-disjoint paths on general graphs.
References-found: 102

