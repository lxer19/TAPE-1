URL: ftp://ftp.cs.arizona.edu/reports/1994/TR94-28.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Constructing a Configurable Group RPC Service  
Author: Matti A. Hiltunen Richard D. Schlichting 
Note: TR 94-28  
Abstract-found: 0
Intro-found: 1
Reference: [AGH + 91] <author> H-R. Aschmann, N. Giger, E. Hoepli, P. Janak, and H. Kirrmann. Alphorn: </author> <title> A remote procedure call environment for fault-tolerant, heterogeneous, </title> <journal> distributed systems. IEEE Micro, </journal> <volume> 11(5) 16-19,60-67, </volume> <month> Oct </month> <year> 1991. </year>
Reference-contexts: With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call. Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn <ref> [AGH + 91] </ref>, lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC.
Reference: [Apo89] <author> Apollo Computer Inc. </author> <title> Network computing system (NCS) reference. </title> <type> Technical report, </type> <institution> Apollo Computer Inc., </institution> <year> 1989. </year>
Reference-contexts: Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo <ref> [Apo89] </ref>, and DCE RPC. On the surface, the semantics of RPC seem very simple, yet the reality is that there are subtleties and variations. For example, there are many ways to define how an RPC service deals with server and communication failures. <p> Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [ATK91] <author> A.L. Ananda, B.H. Tay, and E.K. Koh. </author> <title> ASTRA An asynchronous remote procedure call facility. </title> <booktitle> In Proceedings of the 8th International IEEE Conference on Distributed Computing Systems, </booktitle> <pages> pages 172-179, </pages> <address> Arlington, Texas, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: In the latter case, the RPC system may include another system call that allows the thread to retrieve results later. Although synchronous is most commonly used, a number of systems provide an asynchronous option as well <ref> [ATK91, LS88, WNF90] </ref>. * Orphan handling semantics specify how orphansthat is, server computations associated with clients that have failedare dealt with. Orphans not only waste computing resources, but may also interfere with new calls issued by a recovered client.
Reference: [BALL90] <author> B. Bershad, T. Anderson, E. Lazokska, and H. Levy. </author> <title> Lightweight remote procedure call. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 37-55, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call. Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC <ref> [BALL90] </ref>, Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC. <p> Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding <ref> [BN84, LT91, BALL90] </ref>, performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server <p> Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding [BN84, LT91, BALL90], performance or performance optimizations, <ref> [PA88, RST89, SB90, BALL90] </ref>, and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server procedure, both when the call returns successfully
Reference: [BHG87] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: This can be optimized by just storing the changes (deltas) from one checkpoint to the next. Other techniques can be found in, for example, <ref> [BHG87] </ref>.
Reference: [Bir85] <author> A. D. Birrell. </author> <title> Secure communication using remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 1-14, </pages> <month> Feb </month> <year> 1985. </year>
Reference-contexts: Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues <ref> [Bir85] </ref>. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server procedure, both when the call returns successfully and when the call returns unsuccessfully.
Reference: [BN84] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> Feb </month> <year> 1984. </year>
Reference-contexts: 1 Introduction Remote Procedure Call (RPC) <ref> [Nel81, BN84] </ref> is a communication abstraction designed to simplify the writing of distributed programs. With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call. <p> Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding <ref> [BN84, LT91, BALL90] </ref>, performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server
Reference: [BS94] <author> N. T. Bhatti and R. D. Schlichting. </author> <title> Operating system support for configurable high-level protocols. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1994. </year> <note> in preparation. </note>
Reference-contexts: They then select the desired variant of each type. For example, they might select at least once semantics to deal with failures [Spe82] and orphan termination to deal with orphaned computations [Shr83]. Finally, software modules called micro-protocols <ref> [HS93, BS94] </ref>, each of which implements a single selected property, are configured together using a software framework based on the x-kernel [HP91]. The approach assumes an asynchronous distributed system, where the underlying communication system can experience both omission and performance failures, and where sites can experience crash failures. <p> or total ordering, every server must receive the same set of messages, i.e., the reliability property must hold. 3 Micro-protocols and event-driven execution A configurable RPC system based on the above properties is realized using a model for composing fine-grained software modules [HS93] and its associated x-kernel based implementation platform <ref> [BS94] </ref>. The basic building block of this model is a collection of micro-protocols, each of which implements a well-defined property. A micro-protocol, in turn, is structured as a collection of event handlers, which are procedure-like segments of code that are invoked when an event occurs.
Reference: [CGR88] <author> R.F. Cmelik, N.H. Gehani, and W. D. Roome. </author> <title> Fault Tolerant Concurrent C: A tool for writing fault tolerant distributed programs. </title> <booktitle> In Proceedings of the Eighteenth International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 55-61, </pages> <address> Tokyo, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Che86] <author> D. R. Cheriton. VMTP: </author> <title> A transport protocol for the next generation of communication systems. </title> <booktitle> In Proceedings of SIGCOMM'86 Symposium on Communication Architectures and Protocols, </booktitle> <pages> pages 406-415, </pages> <month> Aug </month> <year> 1986. </year> <month> 18 </month>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Coo85] <author> E. C. Cooper. </author> <title> Replicated distributed programs. </title> <booktitle> In Proceedings of the Tenth ACM Sympo--sium on Operating Systems Principles, </booktitle> <pages> pages 63-78, </pages> <address> Orcas Island, WA, </address> <year> 1985. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Coo90] <author> E. C. Cooper. </author> <title> Programming language support for multicast communication in distributed systems. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems (ICDCS-10), </booktitle> <pages> pages 450-457, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Gib87] <author> P.B. Gibbons. </author> <title> A stub generator for multilanguage RPC in heterogeneous environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(1) </volume> <pages> 77-87, </pages> <month> Jan </month> <year> 1987. </year>
Reference-contexts: Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [HP91] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: For example, they might select at least once semantics to deal with failures [Spe82] and orphan termination to deal with orphaned computations [Shr83]. Finally, software modules called micro-protocols [HS93, BS94], each of which implements a single selected property, are configured together using a software framework based on the x-kernel <ref> [HP91] </ref>. The approach assumes an asynchronous distributed system, where the underlying communication system can experience both omission and performance failures, and where sites can experience crash failures.
Reference: [HPOA89] <author> N. C. Hutchinson, L. L. Peterson, S. O'Malley, and M. Abbott. </author> <title> RPC in the x-kernel: Evaluating new design techniques. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 91-101, </pages> <address> Litchfield Park, AZ, </address> <month> Dec </month> <year> 1989. </year>
Reference-contexts: All this derives from our experience with the Consul system, which suggests that current techniques are inadequate for supporting modularity in the type of complex protocols often found in fault-tolerant distributed systems [MPS93] . 17 Other researchers have also proposed modular implementations of RPC. For example, in <ref> [HPOA89] </ref> a modularization technique also based on the x-kernel is described. In contrast with our emphasis on modularizing along the lines of abstract properties, however, that paper describes a more syntactic scheme based on functional components of an RPC service implementing one chosen semantics.
Reference: [HR94] <author> Y-M. Huang and C. Ravishankar. </author> <title> Designing an agent synthesis system for cross-RPC communication. </title> <journal> IEEE transactions on software engineering, </journal> <volume> 19(3) </volume> <pages> 188-198, </pages> <month> Mar </month> <year> 1994. </year>
Reference-contexts: In contrast with our emphasis on modularizing along the lines of abstract properties, however, that paper describes a more syntactic scheme based on functional components of an RPC service implementing one chosen semantics. The work on agent synthesis system for Cross-RPC communication in <ref> [HR94] </ref> is relatively closely related to our goals. Although the primary goal in [HR94] is to allow heterogeneous RPC systems to communicate with one another, the system also offers the possibility for designing and prototyping new variants of RPC. <p> The work on agent synthesis system for Cross-RPC communication in <ref> [HR94] </ref> is relatively closely related to our goals. Although the primary goal in [HR94] is to allow heterogeneous RPC systems to communicate with one another, the system also offers the possibility for designing and prototyping new variants of RPC.
Reference: [HS87] <author> R. Hayes and R.D. Schlichting. </author> <title> Facilitating mixed language programming in distributed systems. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> 13(12) </volume> <pages> 1254-1264, </pages> <month> Dec </month> <year> 1987. </year>
Reference-contexts: Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [HS93] <author> M. A. Hiltunen and R. D. Schlichting. </author> <title> An approach to constructing modular fault-tolerant protocols. </title> <booktitle> In Proceedings of the 12th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 105-114, </pages> <address> Princeton, NJ, USA, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: They then select the desired variant of each type. For example, they might select at least once semantics to deal with failures [Spe82] and orphan termination to deal with orphaned computations [Shr83]. Finally, software modules called micro-protocols <ref> [HS93, BS94] </ref>, each of which implements a single selected property, are configured together using a software framework based on the x-kernel [HP91]. The approach assumes an asynchronous distributed system, where the underlying communication system can experience both omission and performance failures, and where sites can experience crash failures. <p> For example, to implement FIFO or total ordering, every server must receive the same set of messages, i.e., the reliability property must hold. 3 Micro-protocols and event-driven execution A configurable RPC system based on the above properties is realized using a model for composing fine-grained software modules <ref> [HS93] </ref> and its associated x-kernel based implementation platform [BS94]. The basic building block of this model is a collection of micro-protocols, each of which implements a well-defined property.
Reference: [JZ93] <author> D. Johnson and W. Zwaenepoel. </author> <title> The Peregrine high-performance RPC system. </title> <journal> Software: practice & experience, </journal> <volume> 23(2) </volume> <pages> 201-222, </pages> <year> 1993. </year>
Reference-contexts: With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call. Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine <ref> [JZ93] </ref>, and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC.
Reference: [LS83] <author> B. Liskov and R. W. Scheifler. </author> <title> Guardians and actions: Linguistic support for robust distributed programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(3) </volume> <pages> 381-404, </pages> <month> Jul </month> <year> 1983. </year>
Reference-contexts: At most once is the same as exactly once if the invocation terminates normally, while if the invocation terminates abnormally, the execution of the remote procedure is guaranteed to be atomic, i.e., either completely executed or not at all <ref> [LS83] </ref>. In our classification, each of these semantics can be realized as some combination of the unique and atomic execution properties, as illustrated in Figure 1.
Reference: [LS88] <author> B. Liskov and L. Shrira. </author> <title> Promises: Linguistic support for efficient asynchronous procedure calls in distributed systems. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 260-268, </pages> <month> Jun </month> <year> 1988. </year>
Reference-contexts: In the latter case, the RPC system may include another system call that allows the thread to retrieve results later. Although synchronous is most commonly used, a number of systems provide an asynchronous option as well <ref> [ATK91, LS88, WNF90] </ref>. * Orphan handling semantics specify how orphansthat is, server computations associated with clients that have failedare dealt with. Orphans not only waste computing resources, but may also interfere with new calls issued by a recovered client.
Reference: [LT91] <author> H. Levy and E. Tempero. </author> <title> Modules, objects and distributed programming: Issues in RPC and remote object invocation. </title> <journal> Software, practice & experience, </journal> <volume> 21(1) </volume> <pages> 77-90, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding <ref> [BN84, LT91, BALL90] </ref>, performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server
Reference: [Mar86] <author> B. Martin. </author> <title> Parallel remote procedure call language reference and user's guide. </title> <type> Technical report, </type> <institution> Computer Systems Research Group, University of California, </institution> <address> San Diego, </address> <year> 1986. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [MPS93] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> Experience with modularity in Consul. </title> <journal> Software Practice & Experience, </journal> <volume> 23(10) </volume> <pages> 1059-1075, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: All this derives from our experience with the Consul system, which suggests that current techniques are inadequate for supporting modularity in the type of complex protocols often found in fault-tolerant distributed systems <ref> [MPS93] </ref> . 17 Other researchers have also proposed modular implementations of RPC. For example, in [HPOA89] a modularization technique also based on the x-kernel is described.
Reference: [Nel81] <author> B.J. Nelson. </author> <title> Remote Procedure Call. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1981. </year>
Reference-contexts: 1 Introduction Remote Procedure Call (RPC) <ref> [Nel81, BN84] </ref> is a communication abstraction designed to simplify the writing of distributed programs. With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call.
Reference: [PA88] <author> M. Pucci and J. Alberi. </author> <title> Optimized communication in an extended remote procedure call model. </title> <journal> Computer architecture news, </journal> <volume> 16(4) </volume> <pages> 37-44, </pages> <month> Sep </month> <year> 1988. </year> <month> 19 </month>
Reference-contexts: Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding [BN84, LT91, BALL90], performance or performance optimizations, <ref> [PA88, RST89, SB90, BALL90] </ref>, and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server procedure, both when the call returns successfully
Reference: [PS88] <author> F. Panzieri and S. K. Shrivastava. Rajdoot: </author> <title> A remote procedure call mechanism supporting orphan detection and killing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(1):30-37, </volume> <month> Jan </month> <year> 1988. </year>
Reference-contexts: Options for dealing with orphans include interference avoidance, where the orphans finish their computation before the recovered client is allowed to issue new requests, and orphan termination, where orphans are terminated upon detection <ref> [Shr83, PS88] </ref>. * Communication semantics specify properties about the communication between the client and server. Here, we concentrate on reliable communication, which can be implemented by message acknowledgements and retransmissions. <p> If the server has not responded by the deadline, the call returns with an indication of failure. We point out that our classification of failure semantics subsumes more traditional distinctions, which can be summarized as follows <ref> [PS88] </ref>. At least once guarantees that if the invocation terminates normally, the remote procedure has been executed one or more times, and if it terminates abnormally, no conclusion is possible [Spe82].
Reference: [RST89] <author> R. Van Renesse, H. Van Staveren, and A. S. Tanenbaum. </author> <title> Performance of the Amoeba distributed operating system. </title> <journal> Software Practice and Experience, </journal> <volume> 19 </volume> <pages> 223-234, </pages> <month> Mar </month> <year> 1989. </year>
Reference-contexts: Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding [BN84, LT91, BALL90], performance or performance optimizations, <ref> [PA88, RST89, SB90, BALL90] </ref>, and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server procedure, both when the call returns successfully
Reference: [SB90] <author> M. Schroeder and M. Burrows. </author> <title> Performance of Firefly RPC. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 1-17, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: With RPC, a request for service from a client to a server process is structured to give synchronization semantics at the client similar to normal procedure call. Numerous examples of different RPC services and implementations exist, including Firefly RPC <ref> [SB90] </ref>, Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC. <p> Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity [Sun88, Gib87, HS87, Apo89, TB90, WSG91], binding [BN84, LT91, BALL90], performance or performance optimizations, <ref> [PA88, RST89, SB90, BALL90] </ref>, and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the client about the execution of the server procedure, both when the call returns successfully
Reference: [Shr83] <author> S. K. Shrivastava. </author> <title> On the treatment of orphans in a distributed system. </title> <booktitle> In Proceedings of Third Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 155-162, </pages> <address> Florida, </address> <month> Oct </month> <year> 1983. </year>
Reference-contexts: They then select the desired variant of each type. For example, they might select at least once semantics to deal with failures [Spe82] and orphan termination to deal with orphaned computations <ref> [Shr83] </ref>. Finally, software modules called micro-protocols [HS93, BS94], each of which implements a single selected property, are configured together using a software framework based on the x-kernel [HP91]. <p> Options for dealing with orphans include interference avoidance, where the orphans finish their computation before the recovered client is allowed to issue new requests, and orphan termination, where orphans are terminated upon detection <ref> [Shr83, PS88] </ref>. * Communication semantics specify properties about the communication between the client and server. Here, we concentrate on reliable communication, which can be implemented by message acknowledgements and retransmissions.
Reference: [Spe82] <author> A. Z. Spector. </author> <title> Performing remote operations efficiently on a local computer network. </title> <journal> Communications of the ACM, </journal> <volume> 25(17) </volume> <pages> 246-260, </pages> <month> Apr </month> <year> 1982. </year>
Reference-contexts: In our approach, a user begins by analyzing the requirements of the application with respect to the different types of properties realized by RPC. They then select the desired variant of each type. For example, they might select at least once semantics to deal with failures <ref> [Spe82] </ref> and orphan termination to deal with orphaned computations [Shr83]. Finally, software modules called micro-protocols [HS93, BS94], each of which implements a single selected property, are configured together using a software framework based on the x-kernel [HP91]. <p> We point out that our classification of failure semantics subsumes more traditional distinctions, which can be summarized as follows [PS88]. At least once guarantees that if the invocation terminates normally, the remote procedure has been executed one or more times, and if it terminates abnormally, no conclusion is possible <ref> [Spe82] </ref>. Exactly once guarantees that if the invocation terminates normally, the remote procedure has been executed exactly one time, and if it terminates abnormally, no conclusion is possible other than that it has not been executed more than once.
Reference: [SS90] <author> M. Satyanarayanan and E. H. Siegel. </author> <title> Parallel communication in a large distributed environment. </title> <journal> IEEE transactions on computers, </journal> <month> Mar </month> <year> 1990. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Sto94] <author> A. Stoyenko. SUPRA-RPC: </author> <title> SUbprogram PaRAmeters in Remote Procedure Calls. </title> <journal> Software, practice & experience, </journal> <volume> 24(1) </volume> <pages> 27-49, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC <ref> [Sto94] </ref>. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC. On the surface, the semantics of RPC seem very simple, yet the reality is that there are subtleties and variations.
Reference: [Sun88] <author> Sun Microsystems. </author> <title> RPC: Remote procedure call protocol specification. </title> <type> Technical Report RFC-1057, </type> <institution> Sun Microsystems, </institution> <month> Jun </month> <year> 1988. </year>
Reference-contexts: Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox [Xer81], Sun RPC <ref> [Sun88] </ref>, Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC. On the surface, the semantics of RPC seem very simple, yet the reality is that there are subtleties and variations. <p> Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [TB90] <author> Y.K. Tham and S.K. Bhonsle. </author> <title> Retargetable stub generator for a remote procedure call facility. </title> <journal> Computer communications, </journal> <volume> 13(6) </volume> <pages> 323-330, </pages> <month> Jul </month> <year> 1990. </year>
Reference-contexts: Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [WNF90] <author> E. Walker, P. Neves, and R. Floyd. </author> <title> Asynchronous remote operation execution in distributed systems. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems (ICDCS-10), </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: In the latter case, the RPC system may include another system call that allows the thread to retrieve results later. Although synchronous is most commonly used, a number of systems provide an asynchronous option as well <ref> [ATK91, LS88, WNF90] </ref>. * Orphan handling semantics specify how orphansthat is, server computations associated with clients that have failedare dealt with. Orphans not only waste computing resources, but may also interfere with new calls issued by a recovered client.
Reference: [WSG91] <author> Y.-H. Wei, A. Stoyenko, and G. Goldszmidt. </author> <title> The design of a stub generator for heterogeneous RPC systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 11(3) </volume> <pages> 188-197, </pages> <month> Mar </month> <year> 1991. </year>
Reference-contexts: Many of the properties for which multiple variants exist are related to failure handling and fault-tolerance, so we deal exclusively here with these aspects of RPC. Other issues, although important, are beyond the scope of this paper. These include stub generation and heterogeneity <ref> [Sun88, Gib87, HS87, Apo89, TB90, WSG91] </ref>, binding [BN84, LT91, BALL90], performance or performance optimizations, [PA88, RST89, SB90, BALL90], and security issues [Bir85]. 2 Properties of RPC Services 2.1 Point-to-point RPC The properties of RPC can be classified into categories as follows. * Failure semantics specify what guarantees are given to the
Reference: [WZZ93] <author> Wang Xingwei, Zhao Hong, and Zhu Jiakeng. GRPC: </author> <title> A communication cooperation mechanism in distributed systems. </title> <journal> Operating Systems Review, </journal> <volume> 27(3) </volume> <pages> 75-86, </pages> <month> Jul </month> <year> 1993. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
Reference: [Xer81] <author> Xerox. Courier: </author> <title> The remote procedure call protocol. </title> <type> Technical Report XSIS 038112, </type> <institution> Xerox System Integration Standard, Stamford, CT, </institution> <month> Dec </month> <year> 1981. </year>
Reference-contexts: Numerous examples of different RPC services and implementations exist, including Firefly RPC [SB90], Alphorn [AGH + 91], lightweight RPC [BALL90], Peregrine [JZ93], and SUPRA-RPC [Sto94]. Among the commercial RPC packages released have been Courier from Xerox <ref> [Xer81] </ref>, Sun RPC [Sun88], Netwise RPC from Novell Netware, NCA from Apollo [Apo89], and DCE RPC. On the surface, the semantics of RPC seem very simple, yet the reality is that there are subtleties and variations.
Reference: [YJT88] <author> K. Yap, P. Jalote, and S. Tripathi. </author> <title> Fault tolerant remote procedure call. </title> <booktitle> In Proceedings of the 8th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 48-54, </pages> <month> Jun </month> <year> 1988. </year>
Reference-contexts: Group RPC has numerous applications. For 2 example, it can be used to implement replicated servers to increase availability of the service in the event of failures, to implement parallel computation, or to improve response time. Examples of group or multicast RPC include <ref> [Coo85, YJT88, CGR88, WZZ93, Che86, SS90, Mar86, Coo90] </ref>. For brevity, in this paper we consider only one-to-many group RPC, in which one client uses RPC to invoke a procedure implemented by a server group.
References-found: 40

