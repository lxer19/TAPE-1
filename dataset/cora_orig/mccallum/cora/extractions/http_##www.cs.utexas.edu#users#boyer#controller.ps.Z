URL: http://www.cs.utexas.edu/users/boyer/controller.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/moore/publications/index.html
Root-URL: 
Title: THE USE OF A FORMAL SIMULATOR TO VERIFY A SIMPLE REAL TIME CONTROL PROGRAM  
Author: Robert S. Boyer Milton W. Green J Strother Moore 
Note: This research was supported in part by NASA Contract NAS1-15528, NSF Grant MCS-7904081, and ONR Contract N00014-75-C-0816.  
Abstract: The work reported here was performed while the authors were in the Computer Science Laboratory, SRI International, Menlo Park, California 94025. Present addresses for the authors are: Boyer, Computer Sciences Department, University of Texas, Austin, Texas 78712; Green, 440 Sherwood Way, Menlo Park 94025; Moore, Computational Logic, Inc., Suite 290, 1717 W. 6th St., Austin, Texas 78703. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. B. Anderson. </author> <title> Proving Programs Correct. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, New York, </address> <year> 1979. </year>
Reference-contexts: introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6].
Reference: 2. <author> American National Standards Institute, Inc. </author> <title> American National Standard Programming Language FORTRAN. </title> <type> Tech. </type> <institution> Rept. ANSI X3.9-1978, American National Standards Institute, Inc., </institution> <address> 1430 Broadway, N.Y. 10018, </address> <month> April, </month> <year> 1978. </year>
Reference: 3. <author> A. M. Ballantyne and W. W. Bledsoe. </author> <title> Automatic Proofs of Theorems in Analysis using NonStandard Techniques. </title> <type> Tech. </type> <institution> Rept. ATP-23, Department of Mathematics, University of Texas at Austin, </institution> <month> July, </month> <year> 1975. </year>
Reference-contexts: Our illustrative control program is a function of the current reading and the previously obtained reading: v (t+1) = v (t) + deltav (sen1,sen2) where 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 4 sen2 = sgn (y (t)), and deltav is the mathematical function specifying the output of the control program. 3.
Reference: 4. <author> W. Bledsoe, R. Boyer, and W. Henneman. </author> <title> "Computer Proofs of Limit Theorems". </title> <booktitle> Artificial Intelligence 3 (1972), </booktitle> <pages> 27-60. </pages>
Reference-contexts: Our illustrative control program is a function of the current reading and the previously obtained reading: v (t+1) = v (t) + deltav (sen1,sen2) where 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 4 sen2 = sgn (y (t)), and deltav is the mathematical function specifying the output of the control program. 3.
Reference: 5. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system [6]. The logic and a mechanical theorem-prover for it are completely described in <ref> [5] </ref>. The syntax of the logic is akin to that of Church's lambda-calculus. If f is a function in the logic and e1 and e2 are two expressions in the logic, then we write (f e1 e2) to denote the value of f on the two arguments e1 and e2. <p> Then the y-position of the vehicle in that final STATE is 0. 5. Proving the Conjectures The foregoing conjectures can be proved mathematically. Indeed, they have been proved by the mechanical theorem-prover described in <ref> [5] </ref>. The key to the proof is that the state space of the vehicle can be partitioned into a small finite number of classes.
Reference: 6. <author> R. S. Boyer and J S. Moore. </author> <title> A Verification Condition Generator for FORTRAN. In The Correctness Problem in Computer Science, </title> <editor> R. S. Boyer and J S. Moore, Eds., </editor> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: introduction to program verification, see [9, 10, 11, 1]. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in <ref> [6] </ref>. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program [7], among others. To admit mechanical proof, the specifications must be written in a completely formal notation. <p> Formalizing the Model To state the conjectures formally we must formalize the model of the control program and its environment. We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system <ref> [6] </ref>. The logic and a mechanical theorem-prover for it are completely described in [5]. The syntax of the logic is akin to that of Church's lambda-calculus.
Reference: 7. <author> R. S. Boyer and J S. Moore. </author> <title> The Mechanical Verification of a FORTRAN Square Root Program. </title> <booktitle> SRI International, </booktitle> <year> 1981. </year>
Reference-contexts: Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6]. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program <ref> [7] </ref>, among others. To admit mechanical proof, the specifications must be written in a completely formal notation.
Reference: 8. <author> R. S. Boyer and J S. Moore. </author> <title> MJRTY - A Fast Majority Vote Algorithm. </title> <type> Technical Report ICSCA-CMP-32, </type> <institution> Institute for Computing Science and Computer Applications, University of Texas at Austin, </institution> <year> 1982. </year> <note> Also available through Computational Logic, </note> <institution> Inc., </institution> <address> Suite 290, 1717 West Sixth Street, Austin, TX 78703.. </address>
Reference-contexts: Allowance for noise in the sensors can be handled by existing program verification technology. For example, if one provides redundant sensors and employs a signal select algorithm based on software majority voting, DELTAV can be rewritten to use an algorithm such as that verified in <ref> [8] </ref> to compute the majority sensor reading (if any).
Reference: 9. <author> R. Floyd. </author> <title> Assigning Meanings to Programs. </title> <booktitle> In Mathematical Aspects of Computer Science, Proceedings of Symposia in Applied Mathematics, </booktitle> <publisher> American Mathematical Society, </publisher> <address> Providence, Rhode Island, </address> <year> 1967, </year> <pages> pp. 19-32. </pages>
Reference-contexts: introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6].
Reference: 10. <author> J. C. King. </author> <title> A Program Verifier. </title> <type> Ph.D. </type> <institution> Th., Carnegie-Mellon University, </institution> <year> 1969. </year>
Reference-contexts: introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6].
Reference: 11. <author> Z. Manna. </author> <title> Mathematical Theory of Computation. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, New York, </address> <year> 1974. </year>
Reference-contexts: introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6].
Reference: 12. <author> J. Moses. </author> <title> Algebraic Simplification: A Guide for the Perplexed. </title> <booktitle> 2nd Symposium on Symbolic and Algebraic Manipulation, ACM, </booktitle> <year> 1971. </year>
Reference-contexts: Several existing mechanical theorem-provers, e.g., those of Bledsoe's school [4, 3], and the MAXSYMA symbolic manipulation system <ref> [12] </ref>, provide analytic capability. 4 sen2 = sgn (y (t)), and deltav is the mathematical function specifying the output of the control program. 3.
Reference: 13. <institution> United States of America Standards Institute. USA Standard FORTRAN. Tech. Rept. USAS X3.9-1966, United States of America Standards Institute, </institution> <address> 10 East 40th Street, New York, New York 10016, </address> <year> 1966. </year> <title> i Table of Contents </title>
Reference: 1. <author> Background 1 1.1. </author> <title> Program Verification 1 1.2. Boebert's Challenge 2 </title>
Reference-contexts: introduction to program verification, see <ref> [9, 10, 11, 1] </ref>. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6].
Reference: 2. <institution> The Informal Model 3 </institution>
Reference: 3. <institution> The Control Program 4 </institution>
Reference-contexts: Our illustrative control program is a function of the current reading and the previously obtained reading: v (t+1) = v (t) + deltav (sen1,sen2) where 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 4 sen2 = sgn (y (t)), and deltav is the mathematical function specifying the output of the control program. 3.
Reference: 4. <institution> Formalizing the Model 5 </institution>
Reference-contexts: Our illustrative control program is a function of the current reading and the previously obtained reading: v (t+1) = v (t) + deltav (sen1,sen2) where 3 This is not a limitation of mechanized logic in general. Several existing mechanical theorem-provers, e.g., those of Bledsoe's school <ref> [4, 3] </ref>, and the MAXSYMA symbolic manipulation system [12], provide analytic capability. 4 sen2 = sgn (y (t)), and deltav is the mathematical function specifying the output of the control program. 3.
Reference: 5. <institution> Proving the Conjectures 7 </institution>
Reference-contexts: We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system [6]. The logic and a mechanical theorem-prover for it are completely described in <ref> [5] </ref>. The syntax of the logic is akin to that of Church's lambda-calculus. If f is a function in the logic and e1 and e2 are two expressions in the logic, then we write (f e1 e2) to denote the value of f on the two arguments e1 and e2. <p> Then the y-position of the vehicle in that final STATE is 0. 5. Proving the Conjectures The foregoing conjectures can be proved mathematically. Indeed, they have been proved by the mechanical theorem-prover described in <ref> [5] </ref>. The key to the proof is that the state space of the vehicle can be partitioned into a small finite number of classes.
Reference: 6. <institution> Comments on the Model 8 </institution>
Reference-contexts: introduction to program verification, see [9, 10, 11, 1]. Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in <ref> [6] </ref>. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program [7], among others. To admit mechanical proof, the specifications must be written in a completely formal notation. <p> Formalizing the Model To state the conjectures formally we must formalize the model of the control program and its environment. We will define this model as a function in the same mechanized mathematical logic used by the FORTRAN verification system <ref> [6] </ref>. The logic and a mechanical theorem-prover for it are completely described in [5]. The syntax of the logic is akin to that of Church's lambda-calculus.
Reference: 7. <institution> Conclusion 9 </institution>
Reference-contexts: Because the mathematics involved in program verification is often tedious and elementary, mechanical program verification systems have been developed. One such system is described in [6]. That system handles a subset of ANSI FORTRAN 66 and 77 and has verified the above mentioned square root program <ref> [7] </ref>, among others. To admit mechanical proof, the specifications must be written in a completely formal notation.
References-found: 20

