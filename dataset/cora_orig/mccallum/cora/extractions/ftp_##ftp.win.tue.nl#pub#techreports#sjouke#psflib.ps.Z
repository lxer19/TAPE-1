URL: ftp://ftp.win.tue.nl/pub/techreports/sjouke/psflib.ps.Z
Refering-URL: http://www.win.tue.nl/cs/fm/sjouke/publications.html
Root-URL: http://www.win.tue.nl
Email: email: fsjouke,hansmg@win.tue.nl  
Title: A PSF library of data types  
Author: S. Mauw J. C. Mulder 
Address: P.O. Box 513, 5600 MB Eindhoven, The Netherlands,  
Affiliation: Dept. of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: We present a library of basic data types for the process specification formalism PSF. The specification is written in the algebraic specification formalism ASF, which is a sublanguage of PSF. 
Abstract-found: 1
Intro-found: 1
Reference: [BHK89] <author> J.A. Bergstra, J. Heering, and P. Klint, </author> <title> editors. Algebraic specification. </title> <publisher> ACM Press frontier series. ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction PSF (Procees Specification Formalism, [MV93]) is a language for the formal specification of distributed systems. The dynamic part is based on the Algebra of Communicating Processes (ACP [BW90, BK84]) and the static part on the Algebraic Specification Formalism (ASF <ref> [BHK89] </ref>). In this paper we will only discuss the static part. The elegance of an algebraic specifiation formalism such as ASF partly comes from the fact that, in contrast to modern programming languages, it has no built in data types. <p> Consequently, we provide them as separate modules. One can use renaming to create a sort with more meaningful names. A drawback is that it is not easy to create two different types with the same number of elements in this way. By using simple renamings, the origin rule <ref> [BHK89] </ref> would make them equal. module: f5 sort: f5 functions: 0f5, 1f5, 2f5, 3f5, 4f5 : -&gt; f5 succ, pred : f5 -&gt; f5 eq, ne, lt, le, gt, ge : f5 # f5 -&gt; BOOLEAN ord : f5 -&gt; NATURAL f5 : NATURAL -&gt; f5 typical normal form: 2f5 example:
Reference: [BK84] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information & Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction PSF (Procees Specification Formalism, [MV93]) is a language for the formal specification of distributed systems. The dynamic part is based on the Algebra of Communicating Processes (ACP <ref> [BW90, BK84] </ref>) and the static part on the Algebraic Specification Formalism (ASF [BHK89]). In this paper we will only discuss the static part.
Reference: [BMW91] <author> J.A. Bergstra, S. Mauw, and F. Wiedijk. </author> <title> Uniform algebraic specifications of finite sets with equality. </title> <journal> Int. J. of Foundations of Computer Science, </journal> <volume> 1(2) </volume> <pages> 43-65, </pages> <year> 1991. </year>
Reference-contexts: As shown in <ref> [BMW91] </ref> it is not easy to do this in a manner which is both correct and efficient. Therefore we included specifications of finite sorts up to 25 elements and a perl script to generate larger sorts. It would be nice to do this in a parameterized fashion, but in [BMW91] it <p> in <ref> [BMW91] </ref> it is not easy to do this in a manner which is both correct and efficient. Therefore we included specifications of finite sorts up to 25 elements and a perl script to generate larger sorts. It would be nice to do this in a parameterized fashion, but in [BMW91] it was shown that this is impossible. Consequently, we provide them as separate modules. One can use renaming to create a sort with more meaningful names. A drawback is that it is not easy to create two different types with the same number of elements in this way.
Reference: [BW90] <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 18. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction PSF (Procees Specification Formalism, [MV93]) is a language for the formal specification of distributed systems. The dynamic part is based on the Algebra of Communicating Processes (ACP <ref> [BW90, BK84] </ref>) and the static part on the Algebraic Specification Formalism (ASF [BHK89]). In this paper we will only discuss the static part.
Reference: [ISO89] <author> ISO International Organization for Standardization. </author> <title> Information processing systems Open systems interconnection - LOTOS A formal description technique based on the temporal ordering of observational behaviour, IS 8807. </title> <year> 1989. </year>
Reference-contexts: A drawback is that the implementation of the library data types by means of the existing tools for term rewriting may not be as efficient as a tailored implementation. There exist several libraries for algebraic specification languages. We mention the LOTOS library <ref> [ISO89] </ref>, the SDL library [IT88] and the library from [Mos92]. The first two libraries can be considered subsets of our library (neglecting the language specific data types in the SDL library). The library from [Mos92] is about as extensive as ours, but has a rather different goal.
Reference: [IT88] <author> ITU-TS. </author> <title> ITU-TS Recommendation Z.100: Specification and Description Language (SDL). </title> <address> ITU-TS, Geneva, </address> <year> 1988. </year>
Reference-contexts: A drawback is that the implementation of the library data types by means of the existing tools for term rewriting may not be as efficient as a tailored implementation. There exist several libraries for algebraic specification languages. We mention the LOTOS library [ISO89], the SDL library <ref> [IT88] </ref> and the library from [Mos92]. The first two libraries can be considered subsets of our library (neglecting the language specific data types in the SDL library). The library from [Mos92] is about as extensive as ours, but has a rather different goal.
Reference: [Mos92] <author> P. D. Mosses. </author> <title> Action Semantics. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 26. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: There exist several libraries for algebraic specification languages. We mention the LOTOS library [ISO89], the SDL library [IT88] and the library from <ref> [Mos92] </ref>. The first two libraries can be considered subsets of our library (neglecting the language specific data types in the SDL library). The library from [Mos92] is about as extensive as ours, but has a rather different goal. <p> There exist several libraries for algebraic specification languages. We mention the LOTOS library [ISO89], the SDL library [IT88] and the library from <ref> [Mos92] </ref>. The first two libraries can be considered subsets of our library (neglecting the language specific data types in the SDL library). The library from [Mos92] is about as extensive as ours, but has a rather different goal. The language used there has a rich syntax and semantics allowing for short and expressive specifications. By contrast, PSF is rather spartan. <p> The language used there has a rich syntax and semantics allowing for short and expressive specifications. By contrast, PSF is rather spartan. Under the restriction that our specification must be algebraically correct, we tried to make a specification as efficient as possible. This is not the target of <ref> [Mos92] </ref>, in which readability was the primary goal. Experience has shown that it is difficult to write a library which satisfies the needs of all users. An example of a particularly hard problem is to provide a sufficiently flexible error handling mechanism.
Reference: [MV93] <editor> S. Mauw and G.J. Veltink, editors. </editor> <title> Algebraic specification of communication protocols. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 36. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction PSF (Procees Specification Formalism, <ref> [MV93] </ref>) is a language for the formal specification of distributed systems. The dynamic part is based on the Algebra of Communicating Processes (ACP [BW90, BK84]) and the static part on the Algebraic Specification Formalism (ASF [BHK89]). In this paper we will only discuss the static part. <p> Even if one comes close to a complete library, the so-called Not Invented Here syndrome causes people to write their own basic data type specifications anyway. For PSF two attempts for a general library of basic data types are in <ref> [MV93] </ref> and [vW93]. The first only contains the modules that are shared by the specifications in [MV93]. The second is a more serious attempt to make a general library. Both are currently being distributed with the PSF-Toolkit [Vel93]. <p> For PSF two attempts for a general library of basic data types are in <ref> [MV93] </ref> and [vW93]. The first only contains the modules that are shared by the specifications in [MV93]. The second is a more serious attempt to make a general library. Both are currently being distributed with the PSF-Toolkit [Vel93]. The library from [vW93] Proceedings of the ASF+SDF95 workshop on generating tools from algebraic specifications, May 11 & 12, 1995, CWI, Amsterdam 2 S. Mauw & J. C.
Reference: [Vel93] <author> G.J. Veltink. </author> <title> The PSF Toolkit. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 25(7) </volume> <pages> 875-898, </pages> <year> 1993. </year>
Reference-contexts: The first only contains the modules that are shared by the specifications in [MV93]. The second is a more serious attempt to make a general library. Both are currently being distributed with the PSF-Toolkit <ref> [Vel93] </ref>. The library from [vW93] Proceedings of the ASF+SDF95 workshop on generating tools from algebraic specifications, May 11 & 12, 1995, CWI, Amsterdam 2 S. Mauw & J. C. Mulder has several shortcomings. First of all, due to its size, compilation takes quite some time.
Reference: [vW93] <author> J.J. van Wamel. </author> <title> A library for PSF. </title> <type> Report P9301, </type> <institution> Programming Research Group, University of Amsterdam, </institution> <year> 1993. </year>
Reference-contexts: Even if one comes close to a complete library, the so-called Not Invented Here syndrome causes people to write their own basic data type specifications anyway. For PSF two attempts for a general library of basic data types are in [MV93] and <ref> [vW93] </ref>. The first only contains the modules that are shared by the specifications in [MV93]. The second is a more serious attempt to make a general library. Both are currently being distributed with the PSF-Toolkit [Vel93]. The library from [vW93] Proceedings of the ASF+SDF95 workshop on generating tools from algebraic specifications, <p> a general library of basic data types are in [MV93] and <ref> [vW93] </ref>. The first only contains the modules that are shared by the specifications in [MV93]. The second is a more serious attempt to make a general library. Both are currently being distributed with the PSF-Toolkit [Vel93]. The library from [vW93] Proceedings of the ASF+SDF95 workshop on generating tools from algebraic specifications, May 11 & 12, 1995, CWI, Amsterdam 2 S. Mauw & J. C. Mulder has several shortcomings. First of all, due to its size, compilation takes quite some time. <p> Next, the interfaces of the data types are not completely uniform and some useful data types were missing. Finally it contains some errors. The library presented in this paper is adapted from the library in <ref> [vW93] </ref> where we resolved the above mentioned shortcomings. We don't think this is the final PSF library. Practical experience has to point out new shortcomings. <p> The increase in efficiency comes from the fact that we used more efficient algorithms. It was often possible to reduce, say, quadratic algorithms to linear ones. Since all numerical data types define the same functions, we think that our specification has a more consistent interface than <ref> [vW93] </ref>. We encountered several shortcomings in the ASF specification formalism which influenced the efficiency. The ability to use so-called default conditions in many cases 12 S. Mauw & J. C. Mulder would reduce the duplication in the reduction of conditions.
References-found: 10

