URL: ftp://ftp.research.microsoft.com/users/lomet/pub/timestamp.ps
Refering-URL: http://www.research.microsoft.com/users/lomet/pub/default.htm
Root-URL: http://www.research.microsoft.com
Title: Using Timestamping to Optimize Two Phase Commit  
Author: David Lomet 
Address: One Kendall Sq., Cambridge, MA 02139  
Affiliation: DEC Cambridge Research Lab  
Abstract: The two phase commit (2PC) protocol is used to guarantee the serializability of distributed transactions. The message cost of the standard 2PC has led to efforts to optimize the protocol and reduce the number of messages required. The common optimizations require that each cohort of a transaction be terminated (finished with normal accessing of data) in order for these optimizations to lead to serial schedules. This paper suggests using timestamps as a substitute for knowing when cohorts are terminated, and shows how the 2PC protocol itself can be used to choose the times-tamps. The key to this is to permit cohorts to vote transaction time ranges within which the transaction must commit or else be aborted. Using time ranges, the read only optimization and early release of read locks can be supported. The transaction times chosen are appropriate for identifying versions of data in a multiversion rollback database. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bernstein, P., Hadzilacos, V. and Goodman, N. </author> <title> Concurrency Control and Recovery in Database Systems, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading MA (1987). </address>
Reference-contexts: Inexpensive WORM optical disks change dramatically the functionality/cost trade-off and may make transaction time databases useful for a large number of applications. 5.2.2 Providing Transaction Timestamps Timestamping methods impose serialization when the timestamp is chosen <ref> [1] </ref>. Competing requests from transactions with timestamps ordered differently from request order require that one of the transactions be aborted. When a timestamp is chosen at transaction start, it is known to all cohorts during updating, and can be used to stamp the data then.
Reference: [2] <author> Gray, J. </author> <booktitle> Notes on Database Operating Systems. in "Operating Systems: an Advanced Course", Lecture Notes in Computer Science 60, </booktitle> <publisher> Springer Verlag, </publisher> <year> (1978) </year> <month> 393-481. </month> <note> also in IBM Research Re port RJ2188 (Feb. </note> <year> 1978). </year>
Reference-contexts: 1 Introduction 1.1 Two Phase Commit Two phase commit <ref> [2, 6] </ref> is a protocol that is used to ensure the serializability of distributed transactions. This protocol has two phases, as indicated in its name.
Reference: [3] <author> Gray, J. and Reuter, A. </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann Pub lishers, Inc., </publisher> <address> San Mateo CA (in preparation). </address>
Reference-contexts: Hence, the timestamps for T1 and T2 do not necessarily agree with a valid serialization of T1 and T2, which must order T1 before T2. 4.2 The Role of the Transaction Manager Distributed transaction processing systems have a system component called the transaction manager (TM) <ref> [3] </ref>. The TM exists at every site in the system and assists the database systems at each site to coordinate distributed transactions. It does this by presenting a strictly local interface to each database system through which the two phase commit protocol is exercised.
Reference: [4] <author> Herlihy, M. </author> <title> Optimistic Concurrency Control for Abstract Data Types. </title> <booktitle> Proc. Symp. on Principles of Distributed Computing, </booktitle> <year> (1986) </year> <month> 206-217. </month>
Reference-contexts: Not only is it used to agree on and propagate the commit/abort state of the transaction. It is also used to agree on the transaction time. This is done without extra message overhead, as suggested in <ref> [4, 11] </ref>. We suggest here that cohorts vote on the transaction time using bounded time ranges.
Reference: [5] <author> Lamport, L. </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System. </title> <note> Communications of the ACM 21,7 (July 1978) 558-565. </note>
Reference-contexts: Green-wich Mean Time. Our intent is to assign times to transactions that reflect users' perceptions of when the transactions actually occurred. We combine these local clocks with an adaptation of Lamport clocks <ref> [5] </ref> to ensure that transaction times are monotonically increasing.
Reference: [6] <author> Lampson, B. and Sturgis, H. </author> <title> Crash Recovery in a Distributed System. </title> <note> Tech Report (1976) Xerox PARC, </note> <institution> Palo Alto CA. </institution>
Reference-contexts: 1 Introduction 1.1 Two Phase Commit Two phase commit <ref> [2, 6] </ref> is a protocol that is used to ensure the serializability of distributed transactions. This protocol has two phases, as indicated in its name.
Reference: [7] <author> Lomet, D. and Salzberg, B. </author> <title> Access methods for multiversion data. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Portland, OR (May 1989) 315-324. </address>
Reference-contexts: Data that is current may continue to be updated, and hence is best stored on a medium that can be multiply written, e.g. magnetic disk. However, "historical" data is never updated, and hence could be stored on write-once, read many (WORM) optical disks <ref> [10, 7] </ref>. Inexpensive WORM optical disks change dramatically the functionality/cost trade-off and may make transaction time databases useful for a large number of applications. 5.2.2 Providing Transaction Timestamps Timestamping methods impose serialization when the timestamp is chosen [1].
Reference: [8] <author> Lomet, D. and Salzberg, B. </author> <title> Rollback Databases. </title> <institution> Digital Equipment Corp. Tech Report CRL92/1 (Jan 1992) Cambridge Research Lab, </institution> <address> Cambridge, MA.. </address>
Reference-contexts: This is not unlike other choices for timeouts, e.g. for deadlocks or in network communication protocols. The substantial payoff for voting timestamp ranges is the elimination of termination messages and the potential for early release of locks. 5.2 Multiversion Databases 5.2.1 Transaction Time Databases Transaction time databases <ref> [8] </ref> use transaction time to stamp each version of data in a multiversion database. The order of the timestamps must be a correct serial-ization of the transactions. Time-slice queries retrieve data a transaction consistent view of the database as of some past time. <p> What is needed is either a second visit to the updated data, or a persistent way of associating transaction time with a transaction identifier stored with the data. Combinations of these strategies are also possible so as to enable lazy posting of the timestamps (see <ref> [10, 8] </ref>). Acknowledgments Discussions with Phil Bernstein, Jim Johnson, and Ken Wilner aided in the development of the timestamping 2PC protocol. Phil Bernstein, Betty Salzberg, and Murray Mazer provided useful comments on earlier drafts of this paper.
Reference: [9] <author> Mohan, C., Lindsay, B. </author> <title> Efficient Commit Proto cols for the Tree of Processes Model of Distributed Transactions. </title> <booktitle> Proc. Symp. on Principles of Dis tributed Computing, </booktitle> <address> Montreal, CA (Aug. </address> <year> 1983) </year>
Reference-contexts: Each of these messages is routinely acknowledged. Hence, the usual message cost of two phase commit (2PC) is four messages per transaction participant (cohort). Optimizations to the 2PC protocol have been designed to reduce the above message cost. Most optimizations <ref> [9] </ref> rely on the assumption that all non-commit related processing in all cohorts of a transaction has terminated prior to the commit protocol beginning. In particular, no activity requiring the locking of additional data is continuing.
Reference: [10] <author> Stonebraker, M. </author> <title> The Design of the POSTGRES Storage System. </title> <booktitle> Proc. Very Large Databases Conf., </booktitle> <address> Brighton, UK (Sept. </address> <year> 1987), </year> <pages> 289-300. </pages>
Reference-contexts: Data that is current may continue to be updated, and hence is best stored on a medium that can be multiply written, e.g. magnetic disk. However, "historical" data is never updated, and hence could be stored on write-once, read many (WORM) optical disks <ref> [10, 7] </ref>. Inexpensive WORM optical disks change dramatically the functionality/cost trade-off and may make transaction time databases useful for a large number of applications. 5.2.2 Providing Transaction Timestamps Timestamping methods impose serialization when the timestamp is chosen [1]. <p> What is needed is either a second visit to the updated data, or a persistent way of associating transaction time with a transaction identifier stored with the data. Combinations of these strategies are also possible so as to enable lazy posting of the timestamps (see <ref> [10, 8] </ref>). Acknowledgments Discussions with Phil Bernstein, Jim Johnson, and Ken Wilner aided in the development of the timestamping 2PC protocol. Phil Bernstein, Betty Salzberg, and Murray Mazer provided useful comments on earlier drafts of this paper.

References-found: 10

