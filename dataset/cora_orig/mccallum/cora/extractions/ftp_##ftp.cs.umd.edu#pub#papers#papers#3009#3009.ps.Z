URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3009/3009.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: On Packing R-trees  
Author: Ibrahim Kamel and Christos Faloutsos 
Address: College Park, MD 20742  
Affiliation: Department of CS University of Maryland  
Abstract: We propose new R-tree packing techniques for static databases. Given a collection of rectangles, we sort them and we build the R-tree bottom-up. There are several ways to sort the rectangles; the innovation of this work is the use of fractals, and specifically the hilbert curve, to achieve better ordering of the rectangles and eventually better packing. We proposed and implemented several variations and performed experiments on synthetic, as well as real data (TIGER files from the U.S. Bureau of Census). The winning variation (`2D-c') was the one that sorts the rectangles according to the hilbert value of the center. This variation consistently outperforms the packing method of Roussopoulos and Leifker [24], as well as other R-tree variants. The performance gain of the our method seems to increase with the skeweness of the data distribution; specifically, on the (highly skewed) TIGER dataset, it achieves up to 58% improvement in response time over the older packing algorithm and 36% over the best known R-tree variant. We also, introduce an analytical formula to compute the average response time of a range query as a function of the geometric characteristics of the R-tree.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Walid G. Aref and Hanan Samet. </author> <title> Optimization strategies for spatial query processing. </title> <booktitle> Proc. of VLDB (Very Large Data Bases), </booktitle> <pages> pages 81-90, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] <ref> [1] </ref> or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. <p> Notice that the resulting nodes have smaller perimeters. 11 * Eq. 3 has theoretical as well as practical value: From a practical point of view, it can assist with the cost estimation and query optimization for spatial queries <ref> [1] </ref>: Maintaining only a few numbers about the R-tree (total area, total perimeter), a query optimizer can make a good estimate for the cost of a range query. Moreover, researchers working on R-trees can use Eq 3 to avoid issuing queries in their simulation studies.
Reference: [2] <author> D. Ballard and C. Brown. </author> <title> Computer Vision. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [27]; Computer-Aided Design (CAD) [22] [12]; computer vision and robotics <ref> [2] </ref>; traditional databases, where a record with k attributes corresponds to a point in a k-d space; temporal databases, where time can be considered as one more dimension [18]; scientific databases, with spatial-temporal data, etc. fl Currently on sabbatical at IBM Almaden Research Center.
Reference: [3] <author> N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The r*-tree: an efficient and robust access method for points and rectangles. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pages 322-331, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The original R-tree [13] and almost all of its variants are designed for a dynamic environment, being able to handle insertions and deletions. Operating in this mode, the R-tree guarantees that the space utilization is at least 50%; experimental results <ref> [3] </ref> showed that the average utilization is 70%. However, for a static set of data rectangles, we should be able to do better. <p> Subsequent work on R-trees includes the work by Greene [9], the R + -tree [26], R-trees using Minimum Bounding Polygons [16], and finally, the R fl -tree <ref> [3] </ref>, which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert, which is analog to the deferred-splitting in B-trees. <p> d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [24] sorts on the x coordinate of the lower left corner linear-split R-tree [13] Guttman's R-tree, with linear split quadratic-split R-tree [13] Guttman's R-tree with quadratic split R fl -tree <ref> [3] </ref> R-tree variant, better packing, forced reinsert Table 1: List of methods the proposed ones are in italics For the sake of comparison, we also examined a method that uses the Peano curve, or `z-ordering', despite the fact that the z-ordering achieves inferior clustering compared to the hilbert curve.
Reference: [4] <author> J.L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> CACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees <ref> [4] </ref>, k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR).
Reference: [5] <author> T. Bially. </author> <title> Space-filling curves: Their generation and their application to bandwidth reduction. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <month> November </month> <year> 1969. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [10], [17]. An algorithm for higher dimensionalities is in <ref> [5] </ref>. The path of a space filling curve imposes a linear ordering on the grid points, which may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [6] <author> C. Faloutsos. </author> <title> Gray codes for partial match and range queries. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 14(10) </volume> <pages> 1381-1393, </pages> <month> October </month> <year> 1988. </year> <note> early version available as UMIACS-TR-87-4, also CS-TR-1796. </note>
Reference-contexts: A space filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve <ref> [6] </ref> are examples of space filling curves. In [7], it was shown experimentally that the Hilbert curve achieves the best clustering among the three above methods.
Reference: [7] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> Eighth ACM SIGACT SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. </note>
Reference-contexts: A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves <ref> [7] </ref> [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. <p> A space filling curve visits all the points in a k-dimensional grid exactly once and never crosses itself. The Z-order (or Morton key order, or bit-interleaving, or Peano curve), the Hilbert curve, and the Gray-code curve [6] are examples of space filling curves. In <ref> [7] </ref>, it was shown experimentally that the Hilbert curve achieves the best clustering among the three above methods. Next we provide a brief introduction to the Hilbert curve: The basic Hilbert curve on a 2x2 grid, denoted by H 1 , is shown in Figure 5.
Reference: [8] <author> I. </author> <title> Gargantini. An effective way to represent quadtrees. </title> <journal> Comm. of ACM (CACM), </journal> <volume> 25(12):905 910, </volume> <month> December </month> <year> 1982. </year>
Reference-contexts: A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees <ref> [8] </ref> [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13].
Reference: [9] <author> D. Greene. </author> <title> An implementation and performance analysis of spatial data access methods. </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pages 606-615, </pages> <year> 1989. </year>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves 3 the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene <ref> [9] </ref>, the R + -tree [26], R-trees using Minimum Bounding Polygons [16], and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants.
Reference: [10] <author> J.G. Griffiths. </author> <title> An algorithm for displaying a class of space-filling curves. </title> <journal> Software-Practice and Experience, </journal> <volume> 16(5) </volume> <pages> 403-411, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in <ref> [10] </ref>, [17]. An algorithm for higher dimensionalities is in [5]. The path of a space filling curve imposes a linear ordering on the grid points, which may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [11] <author> O. Gunther. </author> <title> The cell tree: an index for geometric data. </title> <note> Memorandum No. </note> <institution> UCB/ERL M86/89, Univ. of California, Berkeley, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees <ref> [11] </ref> e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR).
Reference: [12] <author> A. Guttman. </author> <title> New Features for Relational Database Systems to Support CAD Applications. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [27]; Computer-Aided Design (CAD) [22] <ref> [12] </ref>; computer vision and robotics [2]; traditional databases, where a record with k attributes corresponds to a point in a k-d space; temporal databases, where time can be considered as one more dimension [18]; scientific databases, with spatial-temporal data, etc. fl Currently on sabbatical at IBM Almaden Research Center.
Reference: [13] <author> A. Guttman. R-trees: </author> <title> a dynamic index structure for spatial searching. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 47-57, </pages> <month> June </month> <year> 1984. </year> <month> 18 </month>
Reference-contexts: A special case of the range query is the point query or stabbing query, where the query rectangle degenerates to a point. We focus on R-trees, which is one of the most efficient methods that support range queries. The original R-tree <ref> [13] </ref> and almost all of its variants are designed for a dynamic environment, being able to handle insertions and deletions. Operating in this mode, the R-tree guarantees that the space utilization is at least 50%; experimental results [3] showed that the average utilization is 70%. <p> These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree <ref> [13] </ref>, k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR). <p> [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree <ref> [13] </ref>, k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR). <p> hilbert value of the center and diameters, i.e., (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [24] sorts on the x coordinate of the lower left corner linear-split R-tree <ref> [13] </ref> Guttman's R-tree, with linear split quadratic-split R-tree [13] Guttman's R-tree with quadratic split R fl -tree [3] R-tree variant, better packing, forced reinsert Table 1: List of methods the proposed ones are in italics For the sake of comparison, we also examined a method that uses the Peano curve, or <p> (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree [24] sorts on the x coordinate of the lower left corner linear-split R-tree <ref> [13] </ref> Guttman's R-tree, with linear split quadratic-split R-tree [13] Guttman's R-tree with quadratic split R fl -tree [3] R-tree variant, better packing, forced reinsert Table 1: List of methods the proposed ones are in italics For the sake of comparison, we also examined a method that uses the Peano curve, or `z-ordering', despite the fact that the z-ordering achieves
Reference: [14] <author> L. M. Haas, J. C. Freytag, G. M. Lohman, and H. Pirahesh. </author> <title> Extensible query processing in starburst. </title> <booktitle> Proc. ACM-SIGMOD 1989 Int'l Conf. Management of Data, </booktitle> <pages> pages 377-388, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: More importantly, the performance gap seems to be wider for real, skewed data distributions. An additional, smaller contribution, is the derivation of (Eq. 3), From a practical point of view, it can help a query optimizer <ref> [14] </ref> give a good estimate for the cost of an R-tree index. Moreover, it makes the simulation analysis of R-trees easier and more reliable, eliminating the need to ask queries.
Reference: [15] <author> K. Hinrichs and J. Nievergelt. </author> <title> The grid file: a data structure to support proximity queries on spatial objects. </title> <booktitle> Proc. of the WG'83 (Intern. Workshop on Graph Theoretic Concepts in Computer Science), </booktitle> <pages> pages 100-113, </pages> <year> 1983. </year>
Reference-contexts: Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space <ref> [15] </ref>; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13].
Reference: [16] <author> H. V. Jagadish. </author> <title> Spatial search with polyhedra. </title> <booktitle> Proc. Sixth IEEE Int'l Conf. on Data Engi neering, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves 3 the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene [9], the R + -tree [26], R-trees using Minimum Bounding Polygons <ref> [16] </ref>, and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert, which is analog to the deferred-splitting in B-trees.
Reference: [17] <author> H.V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] <ref> [17] </ref>; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. <p> The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [10], <ref> [17] </ref>. An algorithm for higher dimensionalities is in [5]. The path of a space filling curve imposes a linear ordering on the grid points, which may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [18] <author> Curtis P. Kolovson and Michael Stonebraker. </author> <title> Segment indexes: Dynamic indexing techniques for multi-dimensional interval data. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 138-147, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Spatial data arise in many applications, including: Cartography [27]; Computer-Aided Design (CAD) [22] [12]; computer vision and robotics [2]; traditional databases, where a record with k attributes corresponds to a point in a k-d space; temporal databases, where time can be considered as one more dimension <ref> [18] </ref>; scientific databases, with spatial-temporal data, etc. fl Currently on sabbatical at IBM Almaden Research Center.
Reference: [19] <author> David B. Lomet and Betty Salzberg. </author> <title> The hb-tree: a multiattribute indexing method with good guaranteed performance. </title> <journal> ACM TODS, </journal> <volume> 15(4) </volume> <pages> 625-658, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees <ref> [19] </ref>, cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR).
Reference: [20] <author> B. Mandelbrot. </author> <title> Fractal Geometry of Nature. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: To derive a curve of order i, each vertex of the basic curve is replaced by the curve of order i 1, which may be appropriately rotated and/or reflected. 5 infinity, the resulting curve is a fractal, with a fractal dimension of 2 <ref> [20] </ref>. The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [10], [17]. An algorithm for higher dimensionalities is in [5].
Reference: [21] <author> J. Orenstein. </author> <title> Spatial query processing in an object-oriented database system. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 326-336, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: A recent survey can be found in [25]. These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering <ref> [21] </ref> or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees [23], hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects.
Reference: [22] <author> J. K. Ousterhout, G. T. Hamachi, R. N. Mayo, W. S. Scott, and G. S. Taylor. </author> <title> Magic: a vlsi layout system. </title> <booktitle> In 21st Design Automation Conference, </booktitle> <pages> pages 152 - 159, </pages> <address> Alburquerque, NM, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography [27]; Computer-Aided Design (CAD) <ref> [22] </ref> [12]; computer vision and robotics [2]; traditional databases, where a record with k attributes corresponds to a point in a k-d space; temporal databases, where time can be considered as one more dimension [18]; scientific databases, with spatial-temporal data, etc. fl Currently on sabbatical at IBM Almaden Research Center.
Reference: [23] <author> J.T. Robinson. </author> <title> The k-d-b-tree: a search structure for large multidimensional dynamic indexes. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 10-18, </pages> <year> 1981. </year>
Reference-contexts: These methods fall in the following broad classes: methods that transform rectangles into points in a higher dimensionality space [15]; methods that use linear quadtrees [8] [1] or, equivalently, the z-ordering [21] or other space filling curves [7] [17]; and finally, methods based on trees (R-tree [13], k-d-trees [4], k-d-B-trees <ref> [23] </ref>, hB-trees [19], cell-trees [11] e.t.c.) One of the most promising approaches in the last class is the R-tree [13]. It is the extension of the B-tree for multidimensional objects. A geometric object is represented by its minimum bounding rectangle (MBR).
Reference: [24] <author> N. Roussopoulos and D. Leifker. </author> <title> Direct spatial search on pictorial databases using packed r-trees. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: This heuristic consistently gives significant saving in response time over all the known R-tree variants, namely, the quadratic-split R-tree, the R fl tree, as well as the method proposed by Roussopoulos and Leifker <ref> [24] </ref>, which is the only R-tree packing known up to now. We also propose an analytical formula to compute the average response time of a range query by using the area and perimeter of the R-tree nodes. This formula works for any R-tree variation, either static or dynamic. <p> All the above R-tree variants support insertions and deletions, and are thus suitable for dynamic environments. For a static environment, the only R-tree packing scheme we are aware of is the method of Roussopoulos and Leifker <ref> [24] </ref>. They proposed a method to build a packed R-tree that achieves (almost) 100% space utilization. The idea is to sort the data on the x or y coordinate of one of the corners of the rectangles. <p> Our goal is to design a simple heuristic to construct an R-tree with 100% space utilization, which, on the same time, will have as good response time as possible. The lowx packed R-tree <ref> [24] </ref> is a step towards this goal. However, it suffers from a subtle pitfall. Although it performs very well for point queries on point data, its performance degrades for larger queries. Figures 3 and 4 highlight the problem. <p> low y ; high x ; high y ) 4D-cd sorts on 4-d hilbert value of the center and diameters, i.e., (c x ; c y ; d x ; d y ) 2Dz-c sorts on the z-value of the center (c x ; c y ) lowx packed R-tree <ref> [24] </ref> sorts on the x coordinate of the lower left corner linear-split R-tree [13] Guttman's R-tree, with linear split quadratic-split R-tree [13] Guttman's R-tree with quadratic split R fl -tree [3] R-tree variant, better packing, forced reinsert Table 1: List of methods the proposed ones are in italics For the sake
Reference: [25] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Section 5 presents 2 our experimental results that compare the proposed schemes with others. Section 6 gives the conclusions and directions for future research. 2 Survey Several spatial access methods have been proposed. A recent survey can be found in <ref> [25] </ref>.
Reference: [26] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos. </author> <title> The r+ tree: a dynamic index for multi dimensional objects. </title> <booktitle> In Proc. 13th International Conference on VLDB, </booktitle> <pages> pages 507-518, </pages> <address> Eng-land,, </address> <month> September </month> <year> 1987. </year> <note> also available as SRC-TR-87-32, UMIACS-TR-87-3, CS-TR-1795. 19 </note>
Reference-contexts: Their names come from their complexity; among the three, the quadratic split algorithm is the one that achieves 3 the best trade-off between splitting time and search performance. Subsequent work on R-trees includes the work by Greene [9], the R + -tree <ref> [26] </ref>, R-trees using Minimum Bounding Polygons [16], and finally, the R fl -tree [3], which seems to have the best performance among the R-tree variants. The main idea in the R fl -tree is the concept of forced re-insert, which is analog to the deferred-splitting in B-trees.
Reference: [27] <author> M. White. N-Trees: </author> <title> Large Ordered Indexes for Multi-Dimensional Space. </title> <institution> Application Math ematics Research Staff, Statistical Research Division, U.S. Bureau of the Census, </institution> <month> December </month> <year> 1981. </year>
Reference-contexts: 1 Introduction One of the requirements for the database management systems (DBMSs) of the near future is the ability to handle spatial data. Spatial data arise in many applications, including: Cartography <ref> [27] </ref>; Computer-Aided Design (CAD) [22] [12]; computer vision and robotics [2]; traditional databases, where a record with k attributes corresponds to a point in a k-d space; temporal databases, where time can be considered as one more dimension [18]; scientific databases, with spatial-temporal data, etc. fl Currently on sabbatical at IBM
References-found: 27

