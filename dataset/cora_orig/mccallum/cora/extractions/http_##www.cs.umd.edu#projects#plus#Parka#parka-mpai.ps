URL: http://www.cs.umd.edu/projects/plus/Parka/parka-mpai.ps
Refering-URL: http://www.cs.umd.edu/projects/plus/papers.html
Root-URL: 
Email: waander@cs.umd.edu Email: hendler@cs.umd.edu Email: evett@cs.umd.edu Email: kettler@cs.umd.edu  
Title: Massively Parallel Matching of Knowledge Structures  
Author: William A. Andersen James A. Hendler Matthew P. Evett Brian P. Kettler 
Note: Email:  
Address: College Park, MD 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: As knowledge bases used for AI systems increase in size, access to relevant information is the dominant factor in the cost of inference. This is especially true for analogical (or case-based) reasoning, in which the ability of the system to perform inference is dependent on efficient and flexible access to a large base of exemplars (cases) judged likely to be relevant to solving a problem at hand. In this chapter we discuss a novel algorithm for efficient associative matching of relational structures in large semantic networks. The structure matching algorithm uses massively parallel hardware to search memory for knowledge structures matching a given probe structure. The algorithm is built on top of PARKA, a massively parallel knowledge representation system which runs on the Connection Machine. We are currently exploring the utility of this algorithm in CaPER, a case-based planning system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aronis, J., </author> <title> "Implementing Inheritance with Roles on the Connection Machine," </title> <type> Ph.D. dissertation, </type> <institution> University of Pittsburgh, </institution> <address> Pittsburgh, PA, </address> <year> 1993. </year>
Reference-contexts: PARADYME provided different procedures for case retrieval than those used by CaPER. PARKA's query algorithms are more complete and significantly faster than those used by PARADYME [3]. There are other massively parallel knowledge representation systems. Aronis <ref> [1] </ref> has developed a frame-based system for studying nonmonotonic inheritance mechanisms. The inheritance mechanisms of that system are much more powerful than PARKA's, but are nearly two orders of magnitude slower.
Reference: [2] <author> Brachman, R.J. and Schmolze, J.G., </author> <title> "An Overview of the KL-ONE Knowledge Representation System", </title> <journal> Cognitive Science, </journal> <volume> Vol. </volume> <month> 9 </month> <year> (1985). </year>
Reference-contexts: Restricting expressiveness to achieve tractability is an undesirable but necessary practice that has become fairly common in the KR community. Although PARKA's semantics are roughly based upon those of NETL [5] and KL-ONE <ref> [2] </ref>, we avoided semantic constructs lacking a computationally effective implementation. PARKA's run-time performance on even very large KBs more than compensates for its restricted expressiveness when compared to that of other, serial, KR systems.
Reference: [3] <author> Evett, M.P., Hendler, J.A., and Spector, L., </author> <title> "Parallel Knowledge Representation on the Connection Machine," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <year> 1993 </year> <month> (forthcoming). </month>
Reference-contexts: similar to a retrieval probe is reduced to a problem of structural matching, or of identifying subgraphs in the semantic network that are isomorphic to the probe. 4 4 Implementation of structure matching using PARKA The structure matching algorithm is implemented on top of the PARKA knowledge representation (KR) system <ref> [3] </ref>. PARKA is a general-purpose knowledge representation system, intended for use by other AI systems. It uses a frame-based representation scheme, optimized to take advantage of the massive parallelism of the Connection Machine. <p> One application of PARADYME was an unindexed memory of cases, potentially of use to a CBR system but never actually used by one. PARADYME provided different procedures for case retrieval than those used by CaPER. PARKA's query algorithms are more complete and significantly faster than those used by PARADYME <ref> [3] </ref>. There are other massively parallel knowledge representation systems. Aronis [1] has developed a frame-based system for studying nonmonotonic inheritance mechanisms. The inheritance mechanisms of that system are much more powerful than PARKA's, but are nearly two orders of magnitude slower.
Reference: [4] <author> Evett, M.P., Hendler, J.A., and Andersen, </author> <title> W.A., "Massively Parallel Support for Com-putationally Effective Recognition Queries", </title> <booktitle> AAAI Eleventh National Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: Via the use of pipelining techniques, PARKA can perform multiple top-down inheritance queries in O (k + d) time, for a set of k top-down queries 1 . In <ref> [4] </ref>, we present timing results of pipelined inheritance queries on a PARKA encoding 2 of a subset of the Cyc commonsense knowledge base [15]. <p> As discussed in <ref> [4] </ref>, the computation of individual unary constraints can be performed by PARKA in O (d) time. Via pipelining techniques used in PARKA, multiple unary constraints can be processed in O (k + d) time, for a set of k unary constraints.
Reference: [5] <author> Fahlman, </author> <title> S.E., "NETL: A System for Representing and Using Real World Knowledge", </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1979. </year>
Reference-contexts: Restricting expressiveness to achieve tractability is an undesirable but necessary practice that has become fairly common in the KR community. Although PARKA's semantics are roughly based upon those of NETL <ref> [5] </ref> and KL-ONE [2], we avoided semantic constructs lacking a computationally effective implementation. PARKA's run-time performance on even very large KBs more than compensates for its restricted expressiveness when compared to that of other, serial, KR systems.
Reference: [6] <author> Geller, J., and Du, C.Y., </author> <title> "Parallel Implementation of a Class Reasoner," </title> <journal> Journal for Experimental and Theoretical Artificial Intelligence, </journal> <volume> 3, </volume> <year> 1991, </year> <pages> pp. 109-127. </pages>
Reference-contexts: There are other massively parallel knowledge representation systems. Aronis [1] has developed a frame-based system for studying nonmonotonic inheritance mechanisms. The inheritance mechanisms of that system are much more powerful than PARKA's, but are nearly two orders of magnitude slower. Geller <ref> [6] </ref> has developed a frame-based system that offers essentially constant-time inheritance inferences, but only for tree-structured knowledge networks. 10 Conclusions We believe that associative memory plays a crucial role in many artificial intelligence tasks.
Reference: [7] <author> Gentner, D., </author> <title> "The mechanisms of analogical learning," In Similarity and Analogical Reasoning, </title> <editor> Eds. S. Vosniadou and A. Ortony, </editor> <publisher> Cambridge: Cambridge University Press, </publisher> <year> 1989, </year> <pages> pp. 199-241. </pages>
Reference-contexts: Cases that avoid known failures are preferred in future retrievals. Other types of derived features typically used include causal and structural relations among the surface features and higher-order relations (i.e., relations involving other relations) (e.g. <ref> [7] </ref>). Story cases are often indexed by derived features such as the moral or theme, in addition to surface features such as the characters, setting, and props. 2.1 Some Shortcomings of Memory Pre-indexing There are several problems with pre-indexing case memory. First, indexing hinders flexibility in case retrieval. <p> It is unclear how an indexing scheme might be constructed for accessing cases in these domains. Finally, the psychological plausibility of pre-indexing is questionable given evidence from psychological studies of human analogue retrieval (e.g., <ref> [7, 19, 21] </ref>). Human analogue retrieval is fast and highly associative, with many re-mindings being generated.
Reference: [8] <author> Goodman, M., </author> <title> "Projective Visualization: Learning to Act from Experience", </title> <booktitle> AAAI Eleventh National Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference-contexts: Many approaches to indexing have been proposed, ranging from the ad hoc to the use of machine learning techniques such as explanation-based learning/generalization (EBL/EBG) and induction (e.g. <ref> [8] </ref>). Planning cases are often indexed by pragmatic features such as the goals of the case. The CHEF system [9] indexes recipes by their main ingredients.
Reference: [9] <author> Hammond, K.J. </author> <year> (1990a), </year> <title> "Case-based planning: A framework for planning from experience," </title> <journal> Cognitive Science, </journal> <volume> Vol. 14 (1990), </volume> <pages> pp. 384-443. </pages>
Reference-contexts: Many approaches to indexing have been proposed, ranging from the ad hoc to the use of machine learning techniques such as explanation-based learning/generalization (EBL/EBG) and induction (e.g. [8]). Planning cases are often indexed by pragmatic features such as the goals of the case. The CHEF system <ref> [9] </ref> indexes recipes by their main ingredients. Planning cases are also frequently indexed by features of their initial situations 1 including surface features (the actors, objects, etc.) and derived features, such as spatial or other kinds of relations among the actors, objects, etc.
Reference: [10] <author> Higuchi, T., Kitano, H., Furuya, T., Kusumoto, H., Handa, K., and Kokubu, A., </author> <month> "IXM2: </month>
References-found: 10

