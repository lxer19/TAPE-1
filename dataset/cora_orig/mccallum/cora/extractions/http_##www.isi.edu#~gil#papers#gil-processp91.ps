URL: http://www.isi.edu/~gil/papers/gil-processp91.ps
Refering-URL: http://www.isi.edu/~gil/papers/papers-other.html
Root-URL: 
Title: A Specification of Manufacturing Processes for Planning  
Author: Yolanda Gil 
Note: This research was sponsored by the Defense Advanced Research Projects Agency (DOD) and monitored by the Avionics Laboratory, Air Force Wright Aeronautical Laboratories, Aeronautical Systems Division (AFSC), Wright-Patterson AFB, OH 45433-6543 under Contract F33615-87-C-1499, ARPA Order No. 4976, Amendment 20. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency or of the U.S. Government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: August 1991  
Pubnum: CMU-CS-91-179  
Abstract: Much research is being done on the automation of manufacturing processes. The planning component in the production stage is very significant, due to the variety of alternative processes, their complexity, and their interactions. This document describes a specification of some manufacturing processes, including the machining, joining, and finishing of parts. The aim of this specification is not to be comprehensive or detailed, but to present the AI community with a model of a complex and realistic application, and to use it to demonstrate the feasibility of effective implementations of large-scale complex domains in a general-purpose architecture. This specification has been successfully demonstrated in the architecture, and is one of the largest domains available for general-purpose planners. 
Abstract-found: 1
Intro-found: 1
Reference: [ Carbonell and Gil, 1990 ] <author> J. G. Carbonell and Y. Gil. </author> <title> Learning by experimentation: The operator refinement method. </title> <publisher> In . Morgan Kaufmann, </publisher> <address> Irvine, CA, </address> <year> 1990. </year>
Reference-contexts: Domain knowledge can also be acquired by interaction with the environment <ref> [ Carbonell and Gil, 1990 ] </ref> . Given some initial body of knowledge and the possibility to execute actions and collect observations, autonomous acquisition of domain knowledge is possible. The system has expectations that emerge from its current knowledge.
Reference: [ Carbonell and Veloso, 1988 ] <author> J. G. Carbonell and M. M. Veloso. </author> <title> Integrating derivational analogy into a general problem-solving architecture. In , Tampa, </title> <address> FL, May 1988. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Another method that is being investigated is how to use similar previously solved problems to solve new ones <ref> [ Carbonell and Veloso, 1988 ] </ref> . records solved problems along with the justifications for each decision taken in the process. A similarity metric is used to retrieve old episodes and a derivational analogy engine reconstructs a solution reusing the decisions where equivalent justifications hold true.
Reference: [ Chang and Wysk, 1985 ] <author> T. C. Chang and R. A. </author> <title> Wysk. </title> . <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1985. </year> [ <institution> CLEVELAND, 1984 ] . Cleveland Twist Drill: an ACME Cleveland Company, Cleveland, OH, </institution> <year> 1984. </year>
Reference-contexts: The automation of process planning is becoming a need in industry. Experts are progressively more scarce, and it is becoming harder for them to keep up with a technology that changes very rapidly. There have been many attempts to automate different aspects of process planning (see <ref> [ Chang and Wysk, 1985 ] </ref> for an overview), and some of them use AI techniques [ Hayes, 1990, Descotte and Latombe, 1985, Nau, 1987 ] . The variety of alternative processes, their complexity, and their interactions make the planning task very complex. <p> Currently, finds solutions for process planning problems in a generative fashion, i.e., by constructing plans given a set of possible operators. 's analogical engine could be used to implement a variant approach <ref> [ Chang and Wysk, 1985 ] </ref> using predefined plans associated with families of parts, modifying them for the particular part wanted. 21 An orthogonal issue in learning and problem solving is the acquisition of domain knowledge. can engage in an apprentice-like dialogue that enables the user to specify domain knowledge, monitor
Reference: [ DeGarmo , 1984 ] <author> E. P. DeGarmo, J. T. Black, and R. A. </author> <title> Kohser. </title> . <publisher> Macmillan Publishing Company, </publisher> <address> New York, </address> <year> 1984. </year>
Reference: [ Descotte and Latombe, 1985 ] <author> Y. Descotte and J. Latombe. </author> <title> Making compromises among antagonist constraints in a planner. </title> , <type> 27(2), </type> <year> 1985. </year>
Reference-contexts: There have been many attempts to automate different aspects of process planning (see [ Chang and Wysk, 1985 ] for an overview), and some of them use AI techniques <ref> [ Hayes, 1990, Descotte and Latombe, 1985, Nau, 1987 ] </ref> . The variety of alternative processes, their complexity, and their interactions make the planning task very complex. Plan quality is crucial, among other things it is important to minimize both resource consumption and execution time.
Reference: [ Etzioni, 1990 ] <author> O. Etzioni. </author> . <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1990. </year>
Reference-contexts: We describe now briefly how learning is combined with each of these mechanisms, and their use for process planning applications. The control rules included in Appendix 1 were hand-coded but they can be acquired automatically. The module <ref> [ Etzioni, 1990 ] </ref> constructs control rules by analyzing the domain description prior to problem solving. Then, [ Minton, 1988 ] examines the problem-solving traces and acquires additional rules using explanation-based learning.
Reference: [ Fox and Smith, 1984 ] <author> M. Fox and S. Smith. </author> <title> ISIS: A knowledge-based system for factory scheduling. </title> , <type> 1(1), </type> <year> 1984. </year>
Reference-contexts: The abstract solution is then used to guide the search in the lower abstraction levels. Abstraction planning is a good approach to tame the complexity of planning domains in general [ Knoblock, 1991 ] , and it seems promising for both process planning and scheduling domains <ref> [ Fox and Smith, 1984, Nau, 1987 ] </ref> . Another method that is being investigated is how to use similar previously solved problems to solve new ones [ Carbonell and Veloso, 1988 ] . records solved problems along with the justifications for each decision taken in the process.
Reference: [ Fox, 1987 ] <editor> M. Fox. </editor> . <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Other processes like casting and forming are usually performed elsewhere (e.g., a foundry). This makes for a natural division of the possible operations. The plans that we intend to produce specify certain sequence constraints on the operations, but we do not address scheduling issues any further <ref> [ Fox, 1987 ] </ref> . We asked an expert machinist to assist in the construction of the domain so it would be as accurate as possible. The machinist also helped with the description of a real machine shop and sample parts for constructing problems.
Reference: [ Gil, 1991 ] <author> Y. Gil. </author> <title> A domain-independent framework for effective experimentation in planning. </title> <address> In , Evanston, IL, 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Plan execution is monitored, and when the expectations and the observations diverge, learning is triggered. uses experimentation strategies to correct the domain knowledge in order to prevent future failures. In fact, this research is being applied to the process planning application described in this paper <ref> [ Gil, 1991 ] </ref> . In summary, learning in is combined with problem solving through the automatic acquisition of episodes useful for analogical reasoning, producing abstraction hierarchies, and learning control rules.
Reference: [ Hayes, 1987 ] <author> C. Hayes. </author> . <type> PhD thesis, </type> <institution> The Robotics Institute, Carnegie Mellon University, </institution> <year> 1987. </year>
Reference-contexts: First, we describe possible extensions to the domain that would make the current specification more precise. Then we describe how 's learning mechanisms could improve the current performance of the system. 5.1. Possible Extensions of the Specification We describe now possible extensions to the specification presented in this paper. <ref> [ Hayes, 1987 ] </ref> and [ Hayes, 1990 ] present alternative models that address some of these issues. Many more machines, tools, and operations are available and can be easily added to the current domain. This specification assumes that all the parts have been already squared.
Reference: [ Hayes, 1990 ] <author> C. Hayes. </author> . <type> PhD thesis, </type> <institution> The Robotics Institute, Carnegie Mellon University, </institution> <year> 1990. </year>
Reference-contexts: There have been many attempts to automate different aspects of process planning (see [ Chang and Wysk, 1985 ] for an overview), and some of them use AI techniques <ref> [ Hayes, 1990, Descotte and Latombe, 1985, Nau, 1987 ] </ref> . The variety of alternative processes, their complexity, and their interactions make the planning task very complex. Plan quality is crucial, among other things it is important to minimize both resource consumption and execution time. <p> Then we describe how 's learning mechanisms could improve the current performance of the system. 5.1. Possible Extensions of the Specification We describe now possible extensions to the specification presented in this paper. [ Hayes, 1987 ] and <ref> [ Hayes, 1990 ] </ref> present alternative models that address some of these issues. Many more machines, tools, and operations are available and can be easily added to the current domain. This specification assumes that all the parts have been already squared. The domain could be extended to produce squaring plans.
Reference: [ Joseph, 1989 ] <author> R. L. Joseph. </author> <title> Graphical knowledge acquisition. In , Banff, </title> <address> Canada, </address> <year> 1989. </year>
Reference-contexts: with families of parts, modifying them for the particular part wanted. 21 An orthogonal issue in learning and problem solving is the acquisition of domain knowledge. can engage in an apprentice-like dialogue that enables the user to specify domain knowledge, monitor the search process, and provide useful advice on line <ref> [ Joseph, 1989 ] </ref> . Domain knowledge can also be acquired by interaction with the environment [ Carbonell and Gil, 1990 ] . Given some initial body of knowledge and the possibility to execute actions and collect observations, autonomous acquisition of domain knowledge is possible.
Reference: [ Knoblock, 1991 ] <author> C. A. </author> <title> Knoblock. </title> . <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1991. </year>
Reference-contexts: The abstract solution is then used to guide the search in the lower abstraction levels. Abstraction planning is a good approach to tame the complexity of planning domains in general <ref> [ Knoblock, 1991 ] </ref> , and it seems promising for both process planning and scheduling domains [ Fox and Smith, 1984, Nau, 1987 ] .
Reference: [ McGeough, 1988 ] <editor> J. A. McGeough. </editor> . <publisher> Chapman and Hall, </publisher> <address> New York, NY, </address> <year> 1988. </year> <month> 23 </month>
Reference-contexts: We now describe in more detail the possible requests along each dimension that we allow. 3 (a) Casting or molding (b) Forming (c) Machining 1984 ] and <ref> [ McGeough, 1988 ] </ref> ) 4 5 2.1. Geometry of the Parts In order to simplify the process of holding various shapes, the only shapes that we consider are cylinders and rectangles. Rectangles are specified by length, width, and height. Cylinders are specified by length and diameter.
Reference: [ Minton , 1989a ] <author> S. Minton, J. G. Carbonell, C. A. Knoblock, D. R. Kuokka, O. Etzioni, and Y. Gil. </author> <title> Explanation-based learning: A problem solving perspective. </title> , <address> 40(1-3):63-118, </address> <year> 1989. </year>
Reference-contexts: The above references describe special-purpose systems that implement different aspects of process planning. We want to investigate the feasibility of efficient implementations of this complex task in a general-purpose system. This paper describes a specification of some manufacturing processes and their implementation in the system <ref> [ Minton , 1989a, Minton , 1989b ] </ref> . The combination of 's learning methods with its powerful inference engine should demonstrate the feasibility of effective implementations of process planning tasks in general-purpose systems. <p> An Implementation in the Architecture This section begins with a brief description of . Then we describe how this paper's specification of process planning has been implemented in this architecture. We then give an example of how to create a plan to produce a part. 4.1. The Architecture The <ref> [ Minton , 1989a, Minton , 1989b ] </ref> system is a general-purpose problem solver that integrates several learning mechanisms to improve performance. A problem is given by an internal state, representing the current state of the world, and a goal state.
Reference: [ Minton , 1989b ] <author> S. Minton, C. A. Knoblock, D. R. Kuokka, Y. Gil, R. L. Joseph, and J. G. Carbonell. 2.0: </author> <title> The manual and tutorial. </title> <type> Technical Report CMU-CS-89-146, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1989. </year>
Reference-contexts: The above references describe special-purpose systems that implement different aspects of process planning. We want to investigate the feasibility of efficient implementations of this complex task in a general-purpose system. This paper describes a specification of some manufacturing processes and their implementation in the system <ref> [ Minton , 1989a, Minton , 1989b ] </ref> . The combination of 's learning methods with its powerful inference engine should demonstrate the feasibility of effective implementations of process planning tasks in general-purpose systems. <p> An Implementation in the Architecture This section begins with a brief description of . Then we describe how this paper's specification of process planning has been implemented in this architecture. We then give an example of how to create a plan to produce a part. 4.1. The Architecture The <ref> [ Minton , 1989a, Minton , 1989b ] </ref> system is a general-purpose problem solver that integrates several learning mechanisms to improve performance. A problem is given by an internal state, representing the current state of the world, and a goal state.
Reference: [ Minton, 1988 ] <author> S. </author> <title> Minton. </title> . <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Massachusetts, </address> <year> 1988. </year>
Reference-contexts: The control rules included in Appendix 1 were hand-coded but they can be acquired automatically. The module [ Etzioni, 1990 ] constructs control rules by analyzing the domain description prior to problem solving. Then, <ref> [ Minton, 1988 ] </ref> examines the problem-solving traces and acquires additional rules using explanation-based learning. All the rules are subject to a dynamic utility analysis that recommends which rules are useful and should be retained. can also be used as a hierarchical problem solver.
Reference: [ Nau, 1987 ] <author> D. Nau. </author> <title> Automated process planning using hierarchical abstraction. </title> <booktitle> In , 1987. </booktitle>
Reference-contexts: There have been many attempts to automate different aspects of process planning (see [ Chang and Wysk, 1985 ] for an overview), and some of them use AI techniques <ref> [ Hayes, 1990, Descotte and Latombe, 1985, Nau, 1987 ] </ref> . The variety of alternative processes, their complexity, and their interactions make the planning task very complex. Plan quality is crucial, among other things it is important to minimize both resource consumption and execution time. <p> The abstract solution is then used to guide the search in the lower abstraction levels. Abstraction planning is a good approach to tame the complexity of planning domains in general [ Knoblock, 1991 ] , and it seems promising for both process planning and scheduling domains <ref> [ Fox and Smith, 1984, Nau, 1987 ] </ref> . Another method that is being investigated is how to use similar previously solved problems to solve new ones [ Carbonell and Veloso, 1988 ] . records solved problems along with the justifications for each decision taken in the process.
Reference: [ Shell and Carbonell, 1991 ] <author> P. Shell and J. G. Carbonell. </author> <title> Empirical and analytical performance of iterative operators. </title> <publisher> In . Lawrence Erlbaum Associates, </publisher> <year> 1991. </year> <month> 24 </month>
References-found: 19

