URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/fsttcs95.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/papers.html
Root-URL: http://www.cs.berkeley.edu
Email: bianco@polito.it  luca@cs.stanford.edu  
Phone: 2  
Title: Model Checking of Probabilistic and Nondeterministic Systems  
Author: Andrea Bianco and Luca de Alfaro 
Address: Torino, Italy.  USA.  
Affiliation: 1 Politecnico di  Stanford University,  
Abstract: The temporal logics pCTL and pCTL* have been proposed as tools for the formal specification and verification of probabilistic systems: as they can express quantitative bounds on the probability of system evolutions, they can be used to specify system properties such as reliability and performance. In this paper, we present model-checking algorithms for extensions of pCTL and pCTL* to systems in which the probabilistic behavior coexists with nondeterminism, and show that these algorithms have polynomial-time complexity in the size of the system. This provides a practical tool for reasoning on the reliability and performance of parallel systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Verifying automata specifications of probabilistic real-time systems. In Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 28-44. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains <ref> [14, 18, 12, 1, 20] </ref> or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior [22, 19, 5, 20]. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. <p> To give a formal definition of PNS, we first introduce next-state probability distributions. Definition 1 (next-state probability distribution). If S is the state space of a system, a next-state probability distribution is a function p : S 7! <ref> [0; 1] </ref> such that P s2S p (s) = 1. For s 2 S, p (s) represents the probability of making a direct transition to s from the current state. ut A PNS can then be defined as follows. Definition 2 (PNS). <p> Stat (2) 2 Seq =) A; E; IP ./a 2 Stat (3) 2 Stat =) 2 Seq (4) ; 2 Seq =) ^ ; :; 2 ; 3 ; U 2 Seq : (5) In the above definition, ./ stands for one of &lt;, , , &gt;, and a 2 <ref> [0; 1] </ref>. The logic pCTL is a restricted version of pCTL*, and its definition can be obtained by replacing the clauses (4), (5) in the above definition with the single clause ; 2 Stat =) 2 ; 3 ; U 2 Seq : (6) Semantics.
Reference: 2. <author> A. Aziz, V. Singhal, F. Balarin, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> It usually works: The temporal logic of stochastic systems. </title> <booktitle> In Computer Aided Verification, 7th International Workshop, volume 939 of Lect. Notes in Comp. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Subsequently, <ref> [10, 2] </ref> considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> The model-checking algorithms presented in <ref> [10, 2] </ref> can be used to determine the validity of pCTL and pCTL* formulas on systems modeled by finite Markov chains. <p> The model-checking algorithms presented in [10, 2] can be used to determine the validity of pCTL and pCTL* formulas on systems modeled by finite Markov chains. Moreover, <ref> [2] </ref> considers generalized Markov processes, representing families of Markov chains, and shows that the decision problem for pCTL* formulas on generalized Markov processes is decidable using results from the theory of real closed fields. However, no efficient computational method is given for this latter problem. <p> IP a ) means that the probability of holding in the future evolution of the system is at least (resp. at most) a <ref> [10, 11, 9, 2] </ref>. Formally, we distinguish two classes of formulas: the class Stat of state formulas (whose truth-value is evaluated on the states), and the class Seq of sequence formulas (whose truth-value is evaluated on infinite sequences of states). <p> The second part of this corollary shows that nondeterminism cannot be encoded by leaving some transition probabilities of a Markov chain unspecified, if pCTL* is used as the specification language. 5 Conclusions It is known from <ref> [10, 2] </ref> that pCTL and pCTL* model checking on Markov chains can be done in polynomial time in the size of the system. <p> Model checking of pCTL formulas can be done in linear time on the size of the formula both for Markov chains [10] and PNS. However, while pCTL* model checking on Markov chains can be done in single exponential time in the size of the formula <ref> [5, 2] </ref>, pCTL* model checking on PNS requires at least doubly exponential time in the size of the formula.
Reference: 3. <author> E. Chang, Z. Manna, and A. Pnueli. </author> <title> The safety-progress classification. </title> <booktitle> In Logic, Algebra, and Computation, NATO ASI Series, Subseries F: Computer and System Sciences. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: The resulting formula 0 is a linear-time temporal formula constructed with the propositional connectives and the temporal operators 2 , 3 , U on the propo sitional variables r 1 ; : : : ; r n [17]. By the results of <ref> [16, 3] </ref>, : 0 can be put into the canonical form V l i=1 ( 23 i _ 32 i ) for some past temporal formulas 1 , . . . , l , 1 , . . . , l built with propositional connectives and the past temporal operators S
Reference: 4. <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite state concurrent systems using temporal logic. </title> <booktitle> In Proc. 10th ACM Symp. Princ. of Prog. </booktitle> <address> Lang., </address> <year> 1983. </year>
Reference-contexts: Complexity of pCTL model checking. Combining the results about the complexity of CTL model checking <ref> [4] </ref> with Theorem 9, we get the following theorem about the complexity of pCTL model checking on PNS. Theorem 10.
Reference: 5. <author> C. Courcoubetis and M. Yannakakis. </author> <title> Verifying temporal properties of finite-state probabilistic programs. </title> <booktitle> In Proc. 29th IEEE Symp. </booktitle> <institution> Found. of Comp. Sci., </institution> <year> 1988. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains [14, 18, 12, 1, 20] or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior <ref> [22, 19, 5, 20] </ref>. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> The logics pCTL and pCTL*, together with these model-checking algorithms, provide a practical tool for the formal specification and verification of the performance and reliability of parallel systems. Nondeterminism, as already recognized by <ref> [22, 19, 5, 20] </ref>, is in fact the key to the natural modeling of parallel probabilistic systems by interleaving, as it allows us to model the choice of which system in the parallel composition takes a transition. Nondeterminism also gives the flexibility of leaving some transition probabilities unspecified. <p> To formalize the idea of favorable and unfavor-able choices, we introduce the concept of strategies (similar to the schedules of <ref> [22, 19, 5, 20] </ref>), that determine which next-state probability distribution is chosen for each state. <p> Theorem 18. Model checking of pCTL* formulas over a PNS can be done in polynomial time in jj. On the other hand, from the results of <ref> [5] </ref> we know that determining whether a linear-time temporal formula is satisfied with probability 1 by a PNS requires at least doubly exponential time in the size of the formula. As this problem can be reduced to pCTL* model checking, we have the following result. Theorem 19. <p> Model checking of pCTL formulas can be done in linear time on the size of the formula both for Markov chains [10] and PNS. However, while pCTL* model checking on Markov chains can be done in single exponential time in the size of the formula <ref> [5, 2] </ref>, pCTL* model checking on PNS requires at least doubly exponential time in the size of the formula.
Reference: 6. <author> E.A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume E, chapter 16, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: From s; () = 1 s; ( s ), we have s () = inf s; () = s ( s ). ut 3 Probabilistic Temporal Logic Syntax. The logics pCTL and pCTL* are derived from the branching-time logics CTL and CTL* <ref> [6] </ref> by introducing a probabilistic operator IP, with the intuitive reading that IP a (resp. IP a ) means that the probability of holding in the future evolution of the system is at least (resp. at most) a [10, 11, 9, 2].
Reference: 7. <author> E.A. Emerson and C.L. Lei. </author> <title> Modalities for model checking: Branching time strikes back. </title> <booktitle> In Proc. 12th ACM Symp. Princ. of Prog. Lang., </booktitle> <pages> pages 84-96, </pages> <year> 1985. </year>
Reference-contexts: We will prove that these algorithms have polynomial time complexity in the size of the description of . We first give the algorithm for pCTL, and then we examine the one for pCTL*. The algorithms share the same basic structure of those proposed in <ref> [8, 7] </ref> for CTL and CTL*. <p> By combining results about the complexity of CTL* model checking <ref> [7] </ref>, pCTL model checking, and an analysis of the above algorithm, we get the following result, that summarizes the complexity of pCTL* model checking for PNS. Theorem 18. Model checking of pCTL* formulas over a PNS can be done in polynomial time in jj.
Reference: 8. <author> E.A. Emerson and A.P. Sistla. </author> <title> Deciding branching time logic. </title> <booktitle> In Proc. 16th ACM Symp. Theory of Comp., </booktitle> <pages> pages 14-24, </pages> <year> 1984. </year>
Reference-contexts: We will prove that these algorithms have polynomial time complexity in the size of the description of . We first give the algorithm for pCTL, and then we examine the one for pCTL*. The algorithms share the same basic structure of those proposed in <ref> [8, 7] </ref> for CTL and CTL*.
Reference: 9. <author> H. Hansson. </author> <title> Time and Probabilities in Formal Design of Distributed Systems. Real-Time Safety Critical Systems. </title> <publisher> Elsevier, </publisher> <year> 1994. </year>
Reference-contexts: IP a ) means that the probability of holding in the future evolution of the system is at least (resp. at most) a <ref> [10, 11, 9, 2] </ref>. Formally, we distinguish two classes of formulas: the class Stat of state formulas (whose truth-value is evaluated on the states), and the class Seq of sequence formulas (whose truth-value is evaluated on infinite sequences of states).
Reference: 10. <author> H. Hansson and B. Jonsson. </author> <title> A framework for reasoning about time and reliability. </title> <booktitle> In Proc. of Real Time Systems Symposium, </booktitle> <pages> pages 102-111. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: Subsequently, <ref> [10, 2] </ref> considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> The model-checking algorithms presented in <ref> [10, 2] </ref> can be used to determine the validity of pCTL and pCTL* formulas on systems modeled by finite Markov chains. <p> IP a ) means that the probability of holding in the future evolution of the system is at least (resp. at most) a <ref> [10, 11, 9, 2] </ref>. Formally, we distinguish two classes of formulas: the class Stat of state formulas (whose truth-value is evaluated on the states), and the class Seq of sequence formulas (whose truth-value is evaluated on infinite sequences of states). <p> The second part of this corollary shows that nondeterminism cannot be encoded by leaving some transition probabilities of a Markov chain unspecified, if pCTL* is used as the specification language. 5 Conclusions It is known from <ref> [10, 2] </ref> that pCTL and pCTL* model checking on Markov chains can be done in polynomial time in the size of the system. <p> The situation is different for the time bounds expressed in terms of the size of the formula. Model checking of pCTL formulas can be done in linear time on the size of the formula both for Markov chains <ref> [10] </ref> and PNS. However, while pCTL* model checking on Markov chains can be done in single exponential time in the size of the formula [5, 2], pCTL* model checking on PNS requires at least doubly exponential time in the size of the formula.
Reference: 11. <author> H. Hansson and B. Jonsson. </author> <title> A logic for reasoning about time and probability. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6(5) </volume> <pages> 512-535, </pages> <year> 1994. </year>
Reference-contexts: IP a ) means that the probability of holding in the future evolution of the system is at least (resp. at most) a <ref> [10, 11, 9, 2] </ref>. Formally, we distinguish two classes of formulas: the class Stat of state formulas (whose truth-value is evaluated on the states), and the class Seq of sequence formulas (whose truth-value is evaluated on infinite sequences of states).
Reference: 12. <author> S. Hart and M. Sharir. </author> <title> Probabilistic temporal logic for finite and bounded models. </title> <booktitle> In Proc. 16th ACM Symp. Theory of Comp., </booktitle> <pages> pages 1-13, </pages> <year> 1984. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains <ref> [14, 18, 12, 1, 20] </ref> or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior [22, 19, 5, 20]. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions.
Reference: 13. <author> J.G. Kemeny, J.L. Snell, and A.W. Knapp. </author> <title> Denumerable Markov Chains. </title> <address> D. </address> <publisher> Van Nostrand Company, </publisher> <year> 1966. </year>
Reference-contexts: This algebra is called the Borel -algebra of basic cylinder sets, and its elements are the measurable sets of sequences, to which it will be possible to assign a probability <ref> [13] </ref>. Minimal and Maximal Probabilities Due to the presence of nondeterminism, we cannot define a probability measure on the Borel -algebra B s . However, for each set of sequences 2 B s , we can define its maximal probability + s () and its minimal probability s (). <p> These probabilities for the finite sequences give rise to a unique probability measure s; on B s that associates with each 2 B s its probability s; () <ref> [13] </ref>. We can then define minimal and maximal probabilities as follows. Definition 4 (minimal and maximal probability).
Reference: 14. <author> D. Lehman and S. Shelah. </author> <title> Reasoning with time and chance. </title> <journal> Information and Control, </journal> <volume> 53(3) </volume> <pages> 165-198, </pages> <year> 1982. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains <ref> [14, 18, 12, 1, 20] </ref> or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior [22, 19, 5, 20]. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions.
Reference: 15. <author> O. Lichtenstein, A. Pnueli, and L. Zuck. </author> <title> The glory of the past. </title> <booktitle> In Proc. Conf. Logics of Programs, volume 193 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 196-218. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: be put into the canonical form V l i=1 ( 23 i _ 32 i ) for some past temporal formulas 1 , . . . , l , 1 , . . . , l built with propositional connectives and the past temporal operators S (since) and e (previous) <ref> [15, 17] </ref>. Thus, 0 can be put into the form 00 : i=1 where again ffi 1 , . . . , ffi l , 1 , . . . , l are past temporal formulas.
Reference: 16. <author> O. Maler and A. Pnueli. </author> <title> Tight bounds on the complexity of cascaded decomposition of automata. </title> <booktitle> In Proc. 31th IEEE Symp. Found. of Comp. Sci., </booktitle> <pages> pages 672-682, </pages> <year> 1990. </year>
Reference-contexts: The resulting formula 0 is a linear-time temporal formula constructed with the propositional connectives and the temporal operators 2 , 3 , U on the propo sitional variables r 1 ; : : : ; r n [17]. By the results of <ref> [16, 3] </ref>, : 0 can be put into the canonical form V l i=1 ( 23 i _ 32 i ) for some past temporal formulas 1 , . . . , l , 1 , . . . , l built with propositional connectives and the past temporal operators S
Reference: 17. <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: The resulting formula 0 is a linear-time temporal formula constructed with the propositional connectives and the temporal operators 2 , 3 , U on the propo sitional variables r 1 ; : : : ; r n <ref> [17] </ref>. <p> be put into the canonical form V l i=1 ( 23 i _ 32 i ) for some past temporal formulas 1 , . . . , l , 1 , . . . , l built with propositional connectives and the past temporal operators S (since) and e (previous) <ref> [15, 17] </ref>. Thus, 0 can be put into the form 00 : i=1 where again ffi 1 , . . . , ffi l , 1 , . . . , l are past temporal formulas.
Reference: 18. <author> A. Pnueli. </author> <title> On the extremely fair treatment of probabilistic algorithms. </title> <booktitle> In Proc. 15th ACM Symp. Theory of Comp., </booktitle> <pages> pages 278-290, </pages> <year> 1983. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains <ref> [14, 18, 12, 1, 20] </ref> or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior [22, 19, 5, 20]. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions.
Reference: 19. <author> A. Pnueli and L. Zuck. </author> <title> Probabilistic verification by tableaux. </title> <booktitle> In Proc. First IEEE Symp. Logic in Comp. Sci., </booktitle> <pages> pages 322-331, </pages> <year> 1986. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains [14, 18, 12, 1, 20] or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior <ref> [22, 19, 5, 20] </ref>. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> However, no efficient computational method is given for this latter problem. In this paper, we extend the logics pCTL and pCTL* to systems in which nondeterministic and probabilistic behavior coexist. We model these systems by probabilistic-nondeterministic systems, similar to the augmented Markov models of <ref> [19, 20] </ref>. Due to the presence of nondeterminism it is not possible, in general, to talk about the probability with which a formula is satisfied, but only about the lower and upper bounds of such probability. Therefore, according to our definition, the formula IP a (resp. <p> The logics pCTL and pCTL*, together with these model-checking algorithms, provide a practical tool for the formal specification and verification of the performance and reliability of parallel systems. Nondeterminism, as already recognized by <ref> [22, 19, 5, 20] </ref>, is in fact the key to the natural modeling of parallel probabilistic systems by interleaving, as it allows us to model the choice of which system in the parallel composition takes a transition. Nondeterminism also gives the flexibility of leaving some transition probabilities unspecified. <p> Leaving some transition probabilities unspecified can also be useful when it is not desirable that a correctness proof of the system with respect to some specification depends on the value of those probabilities. 2 Probabilistic-Nondeterministic Systems Following an approach similar to <ref> [19, 20] </ref>, we use Probabilistic-Nondeterministic Systems (PNS) to model systems in which probabilistic and nondeterministic components of the behavior coexist. To give a formal definition of PNS, we first introduce next-state probability distributions. Definition 1 (next-state probability distribution). <p> This model, based on the one proposed in <ref> [19] </ref>, generalizes the approach of [22] by allowing a simpler encoding of the parallel composition of systems. To see how parallelism can be modeled by a PNS, consider as an example the parallel composition of m Markov chains A 1 ; : : :; A m . <p> To formalize the idea of favorable and unfavor-able choices, we introduce the concept of strategies (similar to the schedules of <ref> [22, 19, 5, 20] </ref>), that determine which next-state probability distribution is chosen for each state.
Reference: 20. <author> A. Pnueli and L.D. Zuck. </author> <title> Probabilistic verification. </title> <journal> Information and Computation, </journal> <volume> 103 </volume> <pages> 1-29, </pages> <year> 1993. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains <ref> [14, 18, 12, 1, 20] </ref> or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior [22, 19, 5, 20]. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. <p> The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains [14, 18, 12, 1, 20] or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior <ref> [22, 19, 5, 20] </ref>. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> However, no efficient computational method is given for this latter problem. In this paper, we extend the logics pCTL and pCTL* to systems in which nondeterministic and probabilistic behavior coexist. We model these systems by probabilistic-nondeterministic systems, similar to the augmented Markov models of <ref> [19, 20] </ref>. Due to the presence of nondeterminism it is not possible, in general, to talk about the probability with which a formula is satisfied, but only about the lower and upper bounds of such probability. Therefore, according to our definition, the formula IP a (resp. <p> The logics pCTL and pCTL*, together with these model-checking algorithms, provide a practical tool for the formal specification and verification of the performance and reliability of parallel systems. Nondeterminism, as already recognized by <ref> [22, 19, 5, 20] </ref>, is in fact the key to the natural modeling of parallel probabilistic systems by interleaving, as it allows us to model the choice of which system in the parallel composition takes a transition. Nondeterminism also gives the flexibility of leaving some transition probabilities unspecified. <p> Leaving some transition probabilities unspecified can also be useful when it is not desirable that a correctness proof of the system with respect to some specification depends on the value of those probabilities. 2 Probabilistic-Nondeterministic Systems Following an approach similar to <ref> [19, 20] </ref>, we use Probabilistic-Nondeterministic Systems (PNS) to model systems in which probabilistic and nondeterministic components of the behavior coexist. To give a formal definition of PNS, we first introduce next-state probability distributions. Definition 1 (next-state probability distribution). <p> To formalize the idea of favorable and unfavor-able choices, we introduce the concept of strategies (similar to the schedules of <ref> [22, 19, 5, 20] </ref>), that determine which next-state probability distribution is chosen for each state.
Reference: 21. <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <editor> J. </editor> <publisher> Wiley & Sons, </publisher> <year> 1987. </year>
Reference-contexts: The size of , denoted by jj, will be simply the length of this description, considered as a string. Using algorithms based on the ellipsoid method, the above linear programming problem can be solved in polynomial time in jj <ref> [21] </ref>. Therefore, we have the following theorem. Theorem 9. If the truth-values of fl, are known at all s 2 S, the truth-value of IP a (fl U ) at all s 2 S can be computed in polynomial time in jj. Computation of Pr + s .
Reference: 22. <author> M.Y. Vardi. </author> <title> Automatic verification of probabilistic concurrent finite-state systems. </title> <booktitle> In Proc. 26th IEEE Symp. Found. of Comp. Sci., </booktitle> <pages> pages 327-338, </pages> <year> 1985. </year>
Reference-contexts: The first applications of temporal logic to probabilistic systems consisted in studying which temporal logic properties are satisfied with probability 1 by systems modeled either as finite Markov chains [14, 18, 12, 1, 20] or as augmented Markov models exhibiting both nondeterministic and probabilistic behavior <ref> [22, 19, 5, 20] </ref>. Subsequently, [10, 2] considered systems modeled by discrete Markov chains, and introduced the logics pCTL and pCTL*, that can express quantitative bounds on the probability of system evolutions. These logics can thus be used to reason on the reliability and performance of systems. <p> The logics pCTL and pCTL*, together with these model-checking algorithms, provide a practical tool for the formal specification and verification of the performance and reliability of parallel systems. Nondeterminism, as already recognized by <ref> [22, 19, 5, 20] </ref>, is in fact the key to the natural modeling of parallel probabilistic systems by interleaving, as it allows us to model the choice of which system in the parallel composition takes a transition. Nondeterminism also gives the flexibility of leaving some transition probabilities unspecified. <p> This model, based on the one proposed in [19], generalizes the approach of <ref> [22] </ref> by allowing a simpler encoding of the parallel composition of systems. To see how parallelism can be modeled by a PNS, consider as an example the parallel composition of m Markov chains A 1 ; : : :; A m . <p> To formalize the idea of favorable and unfavor-able choices, we introduce the concept of strategies (similar to the schedules of <ref> [22, 19, 5, 20] </ref>), that determine which next-state probability distribution is chosen for each state. <p> To see that the semantics is well-defined, it is possible to show by induction on the structure of that f! 2 s j ! j= g 2 B s for every 2 Seq <ref> [22] </ref>. We say that a formula 2 Stat is satisfied by a PNS , written j= , if s in j= . 4 Model Checking We now present algorithms to decide whether a PNS with finite state space S satisfies a specification written in pCTL or pCTL*.
References-found: 22

