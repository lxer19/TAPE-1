URL: http://www.win.tue.nl/inf/onderzoek/csr/abs/95.22.ps
Refering-URL: http://www.win.tue.nl/inf/onderzoek/publicaties.html
Root-URL: http://www.win.tue.nl
Email: arie@win.tue.nl,  Email: martijn@konbib.nl  
Title: An Algebraic Specification of a Language for Describing Financial Products  
Author: B.R.T. Arnold A. van Deursen 
Note: M. Res Royal Library, Prins Willem Alexanderhof 5, 2595 BE The Hague The Netherlands.  Work done while at  Work done while at the Programming Research  
Web: http://www.win.tue.nl/win/cs/fm/arie/  
Address: P.O. Box 2575, 3500 GN Utrecht, The Netherlands  Eindhoven, 5600 MB P.O. Box 513, The Netherlands  CWI, P.O. Box 94079, 1090 GB Amsterdam, The Netherlands.  
Affiliation: Bank MeesPierson, Rotterdam; and CAP Volmac, Utrecht  Department of Mathematics and Computing Science TU  Group of the University of Amsterdam.  
Abstract: We report on the use of formal methods and supporting tools during the development of a language applied in a banking environment. This language, called RISLA, is used to define the nature of the interest products offered by a bank. A RISLA description fixes the cash flows (amounts of money coming in or going out on particular dates) resulting from a product, and is used to generate COBOL code. The language has been developed with the use of algebraic specifications, the role of which is discussed. Note: An extended abstract appeared under the same title in M. Wirsing (editor), Proceedings of the ICSE-17 Workshop on Formal Methods Application in Software Engineering Practice, Seattle, April 1995. Keywords & Phrases: algebraic specifications, financial engineering, COBOL, for mal methods experience, tool support; 
Abstract-found: 1
Intro-found: 1
Reference: [AD92] <author> B.R.T. Arnold and A. van Deursen. </author> <title> Algebraic specification of a language defining interest rate products. </title> <publisher> CWI, Amsterdam; ORFIS International, </publisher> <editor> Huis ter Heide, </editor> <year> 1992. </year>
Reference-contexts: Therefore, CAP Volmac and Bank MeesPierson decided to use formal methods during the design of this language. A cooperation was started with CWI, the Dutch national center for mathematics and computer science. An algebraic specification describing the language was to be written <ref> [AD92, Res94, Deu94] </ref>, using the formalism ASF+SDF and its supporting system [BHK89, Kli93]. 1 The work on RISLA was in particular initiated by the Orfis group the Organization for Financial Information Systems; now part of CAP Volmac. 2 The cooperation originally started with Bank Mees & Hope. 3 A Dutch/English acronym <p> Moreover, ten representative interest rate products had to be described using the newly developed RISLA, in order to illustrate its expressive power. The results of this project included a specification of the fundamental data types, a proposal for a context free grammar, and the definition of 10 example products <ref> [AD92] </ref>. In addition to developing the new language RISLA, CAP Volmac, CWI, and the University of Amsterdam (UvA), studied whether an existing language could be used. <p> Six months are planned, during which time the bank's people will intensively use the ASF+SDF Meta-environment. 4 Specification Results In order to appreciate of the specification activities involved in the RISLA project, we briefly discuss the specifications of some fundamental data types, the syntax and the translation to COBOL (see <ref> [AD92, Res94, Deu94] </ref> for the full specifications). 4.1 Data Types The cash flow is the most important data type of RISLA. <p> Related to cash flows are balances, which are modeled as lists of hamount, intervali pairs, indicating that a certain amount of money will be available for the bank during the given date interval. Specifying the data types of RISLA <ref> [AD92, Appendix A.1] </ref> took 5 product LOAN declaration contract data PAMOUNT : amount %% Principal Amount STARTDATE : date %% Starting date MATURDATE : date %% Maturity data INTRATE : int-rate %% Interest rate RDMLIST := [] : cashflow-list %% List of redemptions. information PAF : cashflow-list %% Resulting Principal Amount
Reference: [AG92] <author> B.R.T Arnold and H. Gouw. </author> <note> Internal draft papers on RPM. ORFIS International, </note> <editor> Huis ter Heide, </editor> <address> The Netherlands, </address> <year> 1992. </year>
Reference-contexts: Amphion is based on a formally documented library of geometrical (FORTRAN) routines. Domain experts state their problem in a high-level formalism, and theorem proving is used to find the right call solving that problem correctly [LPPU94]. 3 Project Overview Before the RISLA formalization started, a folder <ref> [AG92] </ref> concerning the language RISLA was available, containing a number of product definitions. The notation used looked relatively stable, although small variations were visible between different products, and certain descriptions resorted to ad-hoc extensions of the notation. Various built-in functions were assumed. <p> The implementation section defines how these cash flow lists can be computed, taking, e.g., the redemption list into account. Several built-in functions on cash-flows and balances are used, such as IBD, Initial Balance on Date, or CIA, Calculate Interest Amount. The original folder on RISLA <ref> [AG92] </ref> did not contain a context-free grammar for RISLA. Together with the author of most of the initial example product definitions, we constructed an initial version of a grammar, tested whether a simple product description fitted well in this syntax, updated the syntax where necessary, and tried the next product.
Reference: [BHK89] <author> J.A. Bergstra, J. Heering, and P. Klint, </author> <title> editors. Algebraic Specification. </title> <publisher> ACM Press Frontier Series. The ACM Press in co-operation with Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: A cooperation was started with CWI, the Dutch national center for mathematics and computer science. An algebraic specification describing the language was to be written [AD92, Res94, Deu94], using the formalism ASF+SDF and its supporting system <ref> [BHK89, Kli93] </ref>. 1 The work on RISLA was in particular initiated by the Orfis group the Organization for Financial Information Systems; now part of CAP Volmac. 2 The cooperation originally started with Bank Mees & Hope. 3 A Dutch/English acronym for Rente (interest) Informatie Systeem LAnguage.
Reference: [Bra93] <author> M.G.J. van den Brand. </author> <title> Prettyprinting without losing comments. </title> <type> Report P9315, </type> <institution> University of Amsterdam, </institution> <year> 1993. </year> <note> Available by ftp from ftp.cwi.nl:/pub/gipe/reports as Bra93.ps.Z. </note>
Reference-contexts: Note that this term rewriting systems produces an abstract syntax tree, and that proper pretty printing of this COBOL tree is essential (indenting at correct column levels). We were able to use the pretty print generator implemented by Van den Brand for these purposes <ref> [Bra93] </ref>. 5 Discussion * Financial engineering is extremely suitable as application area for formal methods. There are, of course, no safety critical issues, as, e.g., in nuclear or railway applications, but the financial damage due to incorrect data provided by management information systems can be considerable.
Reference: [Cog95] <author> Ph. Coggan. </author> <title> The Money Machine: How the City Works. </title> <booktitle> Pinguin, 1995. Third edition. </booktitle>
Reference-contexts: 1 Introduction Among the most exciting banking activities is the inter-bank trade of interest rate products <ref> [Tuc91, Cog95] </ref>. Large amounts of money are transferred, in order to fulfill the bank's current or future financial needs. Interest rates can change at any moment, and trade in financial products is not without risk.
Reference: [Deu94] <author> A. van Deursen. </author> <title> Executable Language Definitions: Case Studies and Origin Tracking Techniques. </title> <type> PhD thesis, </type> <institution> University of Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: Therefore, CAP Volmac and Bank MeesPierson decided to use formal methods during the design of this language. A cooperation was started with CWI, the Dutch national center for mathematics and computer science. An algebraic specification describing the language was to be written <ref> [AD92, Res94, Deu94] </ref>, using the formalism ASF+SDF and its supporting system [BHK89, Kli93]. 1 The work on RISLA was in particular initiated by the Orfis group the Organization for Financial Information Systems; now part of CAP Volmac. 2 The cooperation originally started with Bank Mees & Hope. 3 A Dutch/English acronym <p> Six months are planned, during which time the bank's people will intensively use the ASF+SDF Meta-environment. 4 Specification Results In order to appreciate of the specification activities involved in the RISLA project, we briefly discuss the specifications of some fundamental data types, the syntax and the translation to COBOL (see <ref> [AD92, Res94, Deu94] </ref> for the full specifications). 4.1 Data Types The cash flow is the most important data type of RISLA.
Reference: [EG92] <author> Th. Eggenschwiler and E. Gamma. ET++ SwapsManager: </author> <title> Using object technology in the financial engineering domain. </title> <booktitle> In OOPSLA'92 Seventh Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 166-177. </pages> <publisher> ACM, </publisher> <year> 1992. </year> <journal> SIGPLAN Notices 27(10). </journal>
Reference-contexts: sketch an overview of the RISLA project, give the main ingredients of the specifications written, and discuss reasons of success, suggestions for improvement, and areas for further research. 2 Related Work A completely independent, but remarkably similar project is described by Eggenschweiger and Gamma from the Union Bank of Switzerland <ref> [EG92] </ref>. They describe how ET++, a class library for C++, has been used to implement a swap valuation system. The idea of using domain-specific languages to increase software productivity is studied at various sites.
Reference: [Hal90] <author> A. Hall. </author> <title> Seven myths of formal methods. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 11-19, </pages> <year> 1990. </year>
Reference-contexts: The design of RISLA was not yet finished, while implementation was started already, requiring several time consuming re-implementations. During a formalization, such changes in the design are processed more easily. * Theorem proving played no role. Conform Hall, the fact is that formal methods are all about specifications <ref> [Hal90] </ref>, we only described the RISLA language formally. * Crucial for the success of a formal methods project is the attitude taken by the partners.
Reference: [Kli93] <author> P. Klint. </author> <title> A meta-environment for generating programming environments. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 2(2) </volume> <pages> 176-201, </pages> <year> 1993. </year>
Reference-contexts: A cooperation was started with CWI, the Dutch national center for mathematics and computer science. An algebraic specification describing the language was to be written [AD92, Res94, Deu94], using the formalism ASF+SDF and its supporting system <ref> [BHK89, Kli93] </ref>. 1 The work on RISLA was in particular initiated by the Orfis group the Organization for Financial Information Systems; now part of CAP Volmac. 2 The cooperation originally started with Bank Mees & Hope. 3 A Dutch/English acronym for Rente (interest) Informatie Systeem LAnguage.
Reference: [LPPU94] <author> M. Lowry, A. Philpot, T. Pressburger, and I. Underwood. </author> <title> A formal approach to domain-oriented software design environments. </title> <booktitle> In KBSE'94, </booktitle> <year> 1994. </year> <month> 9 </month>
Reference-contexts: Related to that is the Amphion approach in use at Nasa. Amphion is based on a formally documented library of geometrical (FORTRAN) routines. Domain experts state their problem in a high-level formalism, and theorem proving is used to find the right call solving that problem correctly <ref> [LPPU94] </ref>. 3 Project Overview Before the RISLA formalization started, a folder [AG92] concerning the language RISLA was available, containing a number of product definitions. The notation used looked relatively stable, although small variations were visible between different products, and certain descriptions resorted to ad-hoc extensions of the notation.
Reference: [MV90] <author> S. Mauw and G.J. Veltink. </author> <title> A process specification formalism. </title> <note> Fundamenta Informaticae, 12:85--139, </note> <year> 1990. </year>
Reference-contexts: As it was conjectured that interest products involved certain processes, like pay interest, or redeem a loan, a language tailored towards process description was chosen, namely the Process Specification Formalism PSF <ref> [MV90] </ref>. In a pilot study, four interest products were defined using PSF. Surprisingly, the process specification facilities were not used to define these products; the definitions only involved functions and data structures. Finally, it was decided to stop experimenting with existing languages.
Reference: [Res94] <author> M. </author> <title> Res. A generated programming environment for RISLA, a specification language defining financial products. </title> <type> Master's thesis, </type> <institution> Progr. Res. Group, Univ. of Amsterdam, </institution> <year> 1994. </year>
Reference-contexts: Therefore, CAP Volmac and Bank MeesPierson decided to use formal methods during the design of this language. A cooperation was started with CWI, the Dutch national center for mathematics and computer science. An algebraic specification describing the language was to be written <ref> [AD92, Res94, Deu94] </ref>, using the formalism ASF+SDF and its supporting system [BHK89, Kli93]. 1 The work on RISLA was in particular initiated by the Orfis group the Organization for Financial Information Systems; now part of CAP Volmac. 2 The cooperation originally started with Bank Mees & Hope. 3 A Dutch/English acronym <p> To support this, they decided to formalize type checking and to come up with a specified version of the RISLA to COBOL translation. This project was started in 1993, and took 6 person months to complete <ref> [Res94] </ref>. The bank's reaction to this project was favorable. While developing their C-based compiler, it turned out that the design of RISLA was not yet fully mature: consequently, it had to be changed several times. <p> Six months are planned, during which time the bank's people will intensively use the ASF+SDF Meta-environment. 4 Specification Results In order to appreciate of the specification activities involved in the RISLA project, we briefly discuss the specifications of some fundamental data types, the syntax and the translation to COBOL (see <ref> [AD92, Res94, Deu94] </ref> for the full specifications). 4.1 Data Types The cash flow is the most important data type of RISLA. <p> Each RISLA description defines a product, for which a name is given and, most importantly, functions computing the resulting cash-flows are defined. A simple definition for a loan is shown in Figure 1 (taken from <ref> [Res94] </ref>). The contract data of a loan are the principal amount, start and maturity date, and interest rate, which are given a value whenever an instance of a loan is created (i.e., when two parties have agreed on a contract).
Reference: [Tuc91] <author> A.L. Tucker. </author> <title> Financial Futures, Options, and Swaps. </title> <publisher> West Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Among the most exciting banking activities is the inter-bank trade of interest rate products <ref> [Tuc91, Cog95] </ref>. Large amounts of money are transferred, in order to fulfill the bank's current or future financial needs. Interest rates can change at any moment, and trade in financial products is not without risk.
Reference: [WH95] <author> L. Walton and J. Hook. </author> <title> Design automation: Making formal methods relevant. </title> <editor> In M. Wirsing, editor, </editor> <booktitle> ICSE-17 Workshop on Formal Methods Application, </booktitle> <pages> pages 93-100, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The domain specialists can use the language to build and maintain their future (GUI-based) applications. The SDRR (Software Design for Reliability and Reuse) group from Oregon advocates the development of small, domain-specific design languages, and the use of these languages as front-ends to program generation systems <ref> [WH95] </ref>. Related to that is the Amphion approach in use at Nasa. Amphion is based on a formally documented library of geometrical (FORTRAN) routines.
References-found: 14

