URL: ftp://ftp.netcom.com/pub/hb/hbaker/LBoyer.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: 91436(818) 501-4956(818) 986-1360 (FAX)  
Title: The Boyer Benchmark Meets Linear Logic  
Author: Henry G. Baker 
Address: 16231 Meadow Ridge Way, Encino, CA  
Affiliation: Nimble Computer Corporation,  
Note: ACM Sigplan Lisp Pointers VI,4 (October-December1993), 3-10. Copyright 1993 by Nimble Computer Corporation 1  This material is based upon work supported by the National Science Foundation under Grant No. III-9261682.  
Abstract: Of the Gabriel Lisp Benchmarks, the Boyer Benchmark ("Boyer") is the most representative of real AI applications, because it performs Prolog-like ruledirected rewriting, and because it relies heavily on garbage collection (GC) for the recovery of storage. We investigated the notion that such programs are unsuitable for explicit storage management e.g., by means of a "linear" programming style in which every bound name dynamically occurs exactly once. We programmed Boyer in a "linear" fragment of Lisp in both interpretive-rule and compiled-rule versions, using both true linear (unshared) and reference count methods. We found that since the intermediate result of rewrite is unshared, the linear interpreted version is slower than the nonlinear interpreted version, while the linear compiled version is slightly faster than the nonlinear compiled version. When sharing is allowed, requiring reference counts for the linear versions, the linear shared versions are not competitive with the nonlinear versions, except when "anchored pointers" are used. The anchored pointer reference count version, which reclaims storage, is still 1.25X slower than the nonlinear version, which reclaims no storage. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abramsky, S. </author> <title> "Computational interpretations of linear logic". </title> <journal> Theor. Comp. Sci. </journal> <volume> 111 (1993), </volume> <pages> 3-57. </pages>
Reference: <author> Baker, H.G. </author> <title> "Unify and Conquer (Garbage, Updating, Aliasing, </title> ...) <booktitle> in Functional Languages". ACM Lisp & Funct. </booktitle> <address> Progr. </address> <year> (1990), </year> <pages> 218-226. </pages>
Reference: <author> Baker, H.G. </author> <title> "The Buried Binding and Dead Binding Problems of Lisp 1.5: Sources of Incomparability in Garbage Collector Measurements". </title> <booktitle> ACM Lisp Pointers V,2 (Apr.-June1992), </booktitle> <pages> 11-19. </pages> <note> 4 This number is not 49,747 because [Baker92] did not include the one-way-unify1 fix discussed earlier in this paper. ACM Sigplan Lisp Pointers VI,4 (October-December1993), 3-10. Copyright 1993 by Nimble Computer Corporation 7 Baker, </note> <author> H.G. </author> <title> "The Boyer Benchmark at Warp Speed". </title> <booktitle> ACM Lisp Pointers V,3 (July-Sept.1992), </booktitle> <pages> 13-14. </pages>
Reference: <author> Baker, H.G. </author> <title> "Lively Linear Lisp 'Look Ma, No Garbage!'". </title> <journal> ACM Sigplan Notices 27,8 (Aug.1992), </journal> <pages> 89-98. </pages>
Reference: <author> Baker, H.G. </author> <title> "NREVERSAL of FortuneThe Thermodynamics of Garbage Collection". </title> <booktitle> Int'l. W/S on Memory Mgmt., </booktitle> <address> St Malo, France, Sept. 1992, </address> <publisher> Springer LNCS 637. </publisher>
Reference: <author> Baker, H.G. </author> <title> "Minimizing Reference Count Updating with Deferred and Anchored Pointers". </title> <type> Manuscript, </type> <month> Nov., </month> <year> 1993. </year>
Reference: <author> Baker, H.G. </author> <title> "Sparse Polynomials and Linear Logic". </title> <journal> ACM Sigsam Bulletin 27,4 (Dec. </journal> <year> 1993), </year> <pages> 10-14. </pages>
Reference: <author> Baker, H.G. </author> <title> "A 'Linear Logic' Quicksort". </title> <journal> ACM Sigplan Notices 29,2 (Feb. </journal> <year> 1994), </year> <pages> 13-18. </pages>
Reference: <author> Baker, H.G. </author> <title> "Linear Logic and Permutation StacksThe Forth Shall Be First". </title> <journal> ACM Sigarch Computer Architecture News 22,1 (Mar.1994), </journal> <pages> 34-43. </pages>
Reference: <author> Barth, J. </author> <title> "Shifting garbage collection overhead to compile time". </title> <journal> CACM 20, </journal> <volume> 7 (July1977),513-518. </volume>
Reference: <author> Boyer, R. </author> <title> "Rewrite Rule Compilation". </title> <type> TR AI-194-86-P, </type> <institution> M.C.C., Austin, </institution> <address> TX 1986. </address>
Reference: <author> Berry, G., and Boudol, G. </author> <title> "The chemical abstract machine". </title> <journal> Theor. Comp. Sci. </journal> <volume> 96 (1992), </volume> <pages> 217-248. </pages>
Reference: <author> Carriero, N., and Gelernter, D. </author> <title> "Linda in Context". </title> <journal> CACM 32,4 (April 1989),444-458. </journal>
Reference: <author> Chirimar, J., et al. </author> <title> "Proving Memory Management Invariants for a Language Based on Linear Logic". </title> <booktitle> Proc. ACM Conf. Lisp & Funct. Prog., </booktitle> <address> San Francisco, CA, </address> <month> June, </month> <year> 1992, </year> <note> also ACM Lisp Pointers V,1 (Jan.-Mar.1992), 139. </note>
Reference: <author> Clark, D.W., and Green, </author> <title> C.C. "An Empirical Study of List Structure in Lisp". </title> <journal> CACM 20,2 (Feb.1977), </journal> <pages> 78-87. </pages>
Reference: <author> Collins, G.E. </author> <title> "A method for overlapping and erasure of lists". </title> <journal> CACM 3,12 (Dec.1960), </journal> <pages> 655-657. </pages>
Reference: <author> Francis, </author> <title> R.S. "Containment Defines a Class of Recursive Data Structures". Sigplan Not. </title> <booktitle> 18,4 (Apr.1983), </booktitle> <pages> 58-64. </pages>
Reference: <author> Friedman, </author> <title> D.P., and Wise, D.S. "Aspects of applicative programming for parallel processing". </title> <journal> IEEE Trans. Comput. C-27,4 (Apr.1978), </journal> <pages> 289-296. </pages>
Reference: <author> Gabriel, </author> <title> R.P. Performance and Evaluation of Lisp Systems. </title> <publisher> MIT Press, Camb., </publisher> <address> MA 1985. </address>
Reference: <author> Girard, J.-Y. </author> <title> "Linear Logic". </title> <journal> Theoretical Computer Sci. </journal> <volume> 50 (1987),1-102. </volume>
Reference: <author> Gray, J.N. </author> <title> "Notes on Database Operating Systems", </title> <editor> in Bayer, R., et al, eds. </editor> <booktitle> Operating Systems. </booktitle> <publisher> Springer 1978. </publisher>
Reference: <author> Harms, D.E., and Weide, B.W. </author> <title> "Copying and Swapping: Influences on the Design of Reusable Software Components". </title> <journal> IEEE Trans. SW Eng. </journal> <note> 17,5 (May 1991),424-435. </note>
Reference: <author> Hesselink, </author> <title> W.H. "Axioms and Models of Linear Logic". </title> <journal> Formal Aspects of Comput. 2,2 (Apr-June1990), </journal> <pages> 139-166. </pages>
Reference: <author> Kieburtz, R.B. </author> <title> "Programming without pointer variables". </title> <booktitle> Proc. Conf. on Data: Abstraction, Definition and Structure, Sigplan Not. 11 (special issue 1976), </booktitle> <pages> 95-107. </pages>
Reference: <author> Lafont, Y. </author> <title> "The Linear Abstract Machine". </title> <journal> Theor. Comp. Sci. </journal> <volume> 59 (1988), </volume> <pages> 157-180. </pages>
Reference: <author> Mairson, H.G. </author> <title> "Deciding ML Typeability is Complete for Deterministic Exponential Time". </title> <booktitle> ACM POPL 17 (1990). </booktitle>
Reference: <author> Mart-Oliet, N., and Meseguer, J. </author> <title> "From Petri nets to linear logic". </title> <journal> Math. </journal> <note> Struct. in Comp. Sci. 1,1 (Mar.1991). </note>
Reference: <author> Shalit, A. </author> <title> Dylan: An objectoriented dynamic language. </title> <institution> Apple Computer, Camb., </institution> <address> MA, </address> <year> 1992. </year>
Reference: <author> Steele, G.L. </author> <title> Common Lisp, The Language; 2nd Ed. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1990. </year>
Reference: <author> Strom, R.E. </author> <title> "Mechanisms for Compile-Time Enforcement of Security". </title> <booktitle> Proc. ACM POPL 10, </booktitle> <month> Jan. </month> <year> 1983. </year>
Reference: <author> Strom, R.E., and Yemini, S. "Typestate: </author> <title> A Programming Language Concept for Enhancing Software Reliability". </title> <journal> IEEE Trans. SW Engrg. SE-12,1 (Jan.1986), </journal> <pages> 157-171. </pages>
Reference: <author> Wadler, P. </author> <title> "Is there a use for linear logic?". </title> <booktitle> Proc. ACM PEPM'91, </booktitle> <address> New Haven, </address> <month> June </month> <year> 1991, </year> <pages> 255-273. </pages>
Reference: <author> Wakeling, D., and Runciman, C. </author> <title> "Linearity and Laziness". </title> <journal> Proc. Funct. Progr. & Computer Arch., </journal> <volume> LNCS 523, </volume> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1991, </year> <pages> 215-240. </pages>
References-found: 33

