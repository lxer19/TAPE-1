URL: http://arch.cs.ucdavis.edu/~chong/250C/yau/pamette.ps
Refering-URL: http://arch.cs.ucdavis.edu/~chong/250C/yau/
Root-URL: http://www.cs.ucdavis.edu
Email: Laurent.Moll@devinci.fr  shand@acm.org  
Title: Systems Performance Measurement on PCI Pamette  
Author: Laurent Moll Pole Universitaire Leonard Mark Shand 
Address: Vinci La Defense, France.  Palo Alto, California, USA.  
Affiliation: de  Digital Equipment Corporation, Systems Research Center  
Abstract: We describe the use of a reconfigurable board to obtain information on the performance that can be expected on particular systems. Our goal is to use the reconfigurability of the board's interface to test a system and discover not only the maximum bandwidth and best latency attainable, but also the way to reliably achieve these figures. The board we present uses the now widespread PCI bus. PCI is sufficiently complex, and its implementations sufficiently varied, that it is impossible to guess the performance that can be obtained by a specific board on a specific computer with the only technical characteristics of the two in hand. We observe astonishing performance differences between almost identical systems and comparable figures between small PCs and big servers. Our performance tests can be an end in themselves, however they also serve to demonstrate the value of a reconfigurable bus interface. With the same board, we can test and choose a system, make informed architectural decisions on the hardware/software interface, and then finely tune the bus interface to get maximum and predictable figures in the running application. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Mark Shand PCI Pamette V1 World-wide-web http://www.research.digital.com/SRC/pamette 1996 and 1997. </institution>
Reference-contexts: 1 Introduction PCI Pamette <ref> [1] </ref> is a reconfigurable computing device which uses the PCI bus to connect to its host processor. PCI Pamette follows strongly in the tradition of the PAM Project [2]: the reconfigurable logic is seen as a coprocessor designed to work in harmony with the host processor.
Reference: [2] <author> Jean Vuillemin, Patrice Bertin, Philippe Boucard, Didier Roncin, Mark Shand, </author> <title> Herve Touati Programmable Active Memories: </title> <journal> Reconfigurable Systems Come of Age IEEE Transactions on VLSI Systems, </journal> <month> April </month> <year> 1996. </year>
Reference-contexts: 1 Introduction PCI Pamette [1] is a reconfigurable computing device which uses the PCI bus to connect to its host processor. PCI Pamette follows strongly in the tradition of the PAM Project <ref> [2] </ref>: the reconfigurable logic is seen as a coprocessor designed to work in harmony with the host processor.
Reference: [3] <institution> Mark Shand Measuring Unix Kernel Performance with Reprogammable Hardware PRL Research Report #19, </institution> <month> Aug </month> <year> 1992. </year> <month> ftp://ftp.digital.com/pub/DEC/PRL/research-reports/PRL-RR-19.ps.Z </month>
Reference-contexts: Our previous experience had been with systems based on Digital's TURBOchannel, a simple high performance system expansion bus that, as early as 1991, had enabled members of the PAM Project at Digital's Paris Research Laboratory to build coprocessors with DMA performance of 80-90 MB/s <ref> [3] </ref>. Although PCI promises theoretical peak performance of 133 MB/s, it is clear from the most cursory reading of the PCI Specification [4] that PCI is a far more complex bus than TURBOchannel and that it allows many more opportunities for implementations to introduce wait-states and other performance degrading artifacts. <p> From the outset, system exercising and measurement were seen as important applications of PCI Pamette. We had already used reconfigurable technology to measure TURBOchannel performance, and understood its value <ref> [3] </ref>. The complexity of PCI and disappointing early performance figures obtained by others made repeating these sorts of measurements on PCI even more compelling. PCI has an aggressive electrical specification making it challenging to implement in anything but a custom chip.
Reference: [4] <editor> PCI Local Bus Specification 2.1, </editor> <booktitle> PCI Special Interest Group, </booktitle> <year> 1995. </year>
Reference-contexts: Although PCI promises theoretical peak performance of 133 MB/s, it is clear from the most cursory reading of the PCI Specification <ref> [4] </ref> that PCI is a far more complex bus than TURBOchannel and that it allows many more opportunities for implementations to introduce wait-states and other performance degrading artifacts. The first PCI chipsets confirmed our fears with many developers reporting never seeing performance above 30 MB/s.
Reference: [5] <author> John H. Zurawski, John E. Murray, and Paul J. </author> <title> Lem-mon The Design and Verification of the AlphaStation 600 5-series Workstation Digital Technical Journal, Volume 7, Number 1, </title> <note> Special Edition 1995. </note>
Reference-contexts: On an AlphaServer 4100 (64-bit PCI), we can get 260 MB/s. On an AlphaSta-tion 500, though, 64-bit DMA Writes are only marginally faster than 32-bit mode. The designers of this workstation made an explicit decision that ~100 MB/s was more than adequate for disk and network I/O <ref> [5] </ref>, and focused most effort on support for graphics whose primary bandwidth requirement is from the host to the PCI option (DMA Read and PIO Write). 3.2.2 DMA Read (board reads from memory) This kind of transaction resembles DMA Write except that, as it involves a roundtrip to the memory system
Reference: [6] <author> R. Gillett and R. Kaufman, </author> <title> Experiences Using the 1st-Generation Memory Channel for PCI Network, </title> <booktitle> Hot Interconnects Symposium IV 1996, </booktitle> <address> Stanford University, Palo Alto (CA). </address>
Reference-contexts: 0071 R 1 41 39 42 00087 0071 R 1 41 39 43 00089 0071 R 1 41 39 40 00091 0071 R 1 41 39 42 00093 0070 W 0 03 02 6 00095 0070 W 0 03 02 5 4.3 Example 2: the Memory Channel spy Memory Channel <ref> [6] </ref> is Digital's high-end cluster interconnect; it is used to tightly couple several servers through a high-speed link. The hardware component of this product consists of a full-length PCI board in each machine, and an active hub to exchange the data between the boards.
Reference: [7] <author> H. Custer, </author> <title> Inside Windows NT, </title> <publisher> Microsoft Press, </publisher> <year> 1993. </year>
Reference-contexts: There are several levels where interrupts are handled (all the terms used here are specific to Windows NT <ref> [7] </ref> , but the overall interrupt scheme is common also to Unix systems): * In the Interrupt Service Routine, where the kernel-mode device driver has to decide whether its board is responsible for the interrupt (interrupt lines are shareable on PCI), shut it off, and do some small amount of processing
Reference: [8] <institution> Real-Time Systems and Microsoft Windows NT, </institution> <address> MSDN Library, </address> <publisher> Microsoft Corporation, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: Figure 5 shows the corresponding data for the unblocking of the waiting user-mode thread. All axes are logarithmic scales, all times above 1ms have been truncated. The figures presented have been obtained with a thread at maximum priority (31 or real-time time-critical <ref> [8] </ref>) on a HP Vectra XU 6/200 (Pentium Pro 200) running Mi-crosoft Windows NT 4.0. The same tests can also be applied to Alpha systems running Windows NT or Digital Unix. The histograms exhibit sharp peaks.
References-found: 8

