URL: http://www-csag.cs.uiuc.edu/projects/concert/icc/ref-manual.ps
Refering-URL: http://www-csag.cs.uiuc.edu/projects/concert/icc-plusplus.html
Root-URL: http://www.cs.uiuc.edu
Title: The ICC++ Programmers' Reference  
Author: A. Chien, J. Dolby, V. Karamcheti, J. Plevyak and X. Zhang 
Date: July 30, 1995  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. A. Chien, U. S. Reddy, J. Plevyak, and J. Dolby. </author> <title> ICC++ a C++ dialect for high performance parallel computing. </title> <note> Submitted for Publication, </note> <year> 1995. </year>
Reference-contexts: This document is a programmers reference for the ICC++ language, in which comprehensiveness is more important than brevity. For a concise definition of the language, see [2]. The motivation of the language design is discussed in <ref> [1] </ref>. Conventions In some places both C++ and ICC++ code are used side-by-side for comparison.
Reference: [2] <author> Andrew Chien and Uday Reddy. </author> <title> ICC++ language definition. Concurrent Systems Architecture Group Memo, </title> <month> February </month> <year> 1995. </year>
Reference-contexts: This document is a programmers reference for the ICC++ language, in which comprehensiveness is more important than brevity. For a concise definition of the language, see <ref> [2] </ref>. The motivation of the language design is discussed in [1]. Conventions In some places both C++ and ICC++ code are used side-by-side for comparison.
Reference: [3] <author> John R. Ellis and David L. Detlefs. </author> <title> Safe, efficient garbage collection for c++. </title> <type> Technical report, </type> <institution> Xerox Palo Alto Research Center, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Thus, the standard practice of using pointer declarations for arrays, as shown in the left hand of Figure 1 is forbidden. * Divorcing pointers and arrays, and integrating arrays into the object model is increasingly common in C++ dialects such as <ref> [3, 7] </ref> because it can improve both language safety and analyzability. * Note that separating pointers and arrays makes pointer arithmetic useless, since it was only defined within arrays (see [4]).
Reference: [4] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: * Divorcing pointers and arrays, and integrating arrays into the object model is increasingly common in C++ dialects such as [3, 7] because it can improve both language safety and analyzability. * Note that separating pointers and arrays makes pointer arithmetic useless, since it was only defined within arrays (see <ref> [4] </ref>). <p> Thus, they correspond to dynamic cast rather than static cast in the new C++ casting terminology. As with dynamic cast all failing casts return NULL. All other casts are exactly as in C++. <ref> [6, 4] </ref> define a new cast syntax consisting of four cast operators: static cast, dynamic cast, const cast and reinterpret cast. These operators are modified as follows: static cast is only allowed for coercions that may be done implicitly.
Reference: [5] <author> W. Horwat, A. Chien, and W. Dally. </author> <title> Experience with CST: </title> <booktitle> Programming and implementation. In Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 101-9. </pages> <booktitle> ACM SIGPLAN, </booktitle> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: Passing reply out can be used to implement tail forwarding as well as user defined synchronization structures. 3.3.3 Unstructured Idioms The spawn and reply mechanisms can be used to implement customized communication and synchronization structures. A couple of common examples, tail forwarding <ref> [5] </ref> and barriers, are described below. Tail Forwarding can accomplished simply using the form spawn reply (e). The expression e will be spawned and evaluated in parallel, and then the result will be returned to the caller of the spawning function. Barriers can be implemented using a user-defined barrier class.
Reference: [6] <author> Bjarne Stroustrup. </author> <title> The Design and Evolution of C++. </title> <address> Addsion-Wesley, </address> <year> 1994. </year>
Reference-contexts: Thus, they correspond to dynamic cast rather than static cast in the new C++ casting terminology. As with dynamic cast all failing casts return NULL. All other casts are exactly as in C++. <ref> [6, 4] </ref> define a new cast syntax consisting of four cast operators: static cast, dynamic cast, const cast and reinterpret cast. These operators are modified as follows: static cast is only allowed for coercions that may be done implicitly.

References-found: 6

