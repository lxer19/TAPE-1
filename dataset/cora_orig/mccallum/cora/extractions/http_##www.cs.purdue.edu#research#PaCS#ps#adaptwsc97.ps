URL: http://www.cs.purdue.edu/research/PaCS/ps/adaptwsc97.ps
Refering-URL: http://www.cs.purdue.edu/research/PaCS/parasol.html
Root-URL: http://www.cs.purdue.edu
Title: MINIMUM COST ADAPTIVE SYNCHRONIZATION: EXPERIMENTS WITH THE ParaSol SYSTEM  
Author: Edward Mascarenhas Felipe Knop Vernon Rego 
Address: 2011 N. Shoreline Blvd. MS 510 Mountain View, CA 94043  522 South Road, MS P963 Poughkeepsie, NY 12601  West Lafayette, IN 47907  
Affiliation: Silicon Graphics Computer Systems  IBM Corporation  Department of Computer Sciences Purdue University  
Abstract: We present a novel adaptive synchronization algorithm, called the minimum average cost (MAC) algorithm, in the context of the ParaSol parallel simulation system. ParaSol is a multithreaded system for parallel simulation on shared- and distributed-memory environments, designed to support domain-specific Simulation Object Libraries. The proposed MAC algorithm is based on minimizing the cost of synchronization delay and rollback at a process, whenever its simulation driver must decide whether to either proceed optimistically or to delay processing. In the former case the risk is rollback cost, in the event of a straggler's arrival. In the latter case the risk is unnecessary delay, in the event a late-comer is not a straggler. In addition to the MAC algorithm and an optimal delay computation model, we report on some early experiments comparing the performance of MAC-based adaptive synchronization to optimistic synchronization. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ball, D., and S. Hoyt. </author> <year> 1990. </year> <title> The adaptive time-warp concurrency control algorithm. </title> <booktitle> In Proceedings of the SCS MultiConference on Distributed Simulation, </booktitle> <pages> 174-177. </pages>
Reference: <author> Chandy, K. M., and J. Misra. </author> <year> 1979. </year> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 5(5) </volume> <pages> 440-452. </pages>
Reference-contexts: The major focus of parallel simulation research, in recent years, has centered around assessment of these two synchronization methods. In the conservative approach <ref> (Chandy and Misra 1979) </ref>, events are executed strictly in order of their occurrence in simulation time. This approach prevents causality errors from occurring, but may lead to deadlock; an LP may wait for events that never arrive. <p> This approach prevents causality errors from occurring, but may lead to deadlock; an LP may wait for events that never arrive. LPs that have no messages to send to other LPs may use special "informant" messages, called Null messages, to prevent deadlocks <ref> (Chandy and Misra 1979) </ref>. In the optimistic (Time Warp) (Jefferson 1985) algorithm, an LP processes events as event messages arrive from other LPs until a causality error is detected: a message arrives with a time-stamp less than the LP's LVT.
Reference: <author> Das, S. R., and R. M. Fujimoto. </author> <year> 1994. </year> <title> An adaptive memory management protocol for time warp parallel simulation. </title> <booktitle> In Proceedings of the 1994 ACM Sigmetrics Conference on Measurement and Mod-elling of Computer Systems, </booktitle> <pages> 201-210. </pages>
Reference-contexts: These include estimates based on the arithmetic mean, median, exponentially smoothed average, and computationally intensive auto-regressive and integrated moving-average forecasting methods. Some success was reported with these methods (Ferscha 1995, Ferscha and Chiola 1994). Another proposed strategy for limiting optimism is based on memory management <ref> (Das and Fujimoto 1994) </ref>. Here, optimism is limited in an indirect manner, by controlling the amount of memory provided to an LP. The adaptive protocol attempts to provide each LP with only as much memory as necessary for optimal performance.
Reference: <author> Ferscha, A. </author> <year> 1995. </year> <title> Probabilistic adaptive direct optimism control in time warp. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 120-129. </pages>
Reference-contexts: Yet another proposed approach is to predict the time-stamp of the next message arrival on a given channel, using message-arrival history. Only available events with time-stamps smaller than the predicted time-stamp are processed <ref> (Ferscha 1995) </ref>. A confidence level assigned to each estimate enables the execution of each event with a certain probability. Several different methods of predicting the time-stamp of the next arrival have been proposed. <p> Several different methods of predicting the time-stamp of the next arrival have been proposed. These include estimates based on the arithmetic mean, median, exponentially smoothed average, and computationally intensive auto-regressive and integrated moving-average forecasting methods. Some success was reported with these methods <ref> (Ferscha 1995, Ferscha and Chiola 1994) </ref>. Another proposed strategy for limiting optimism is based on memory management (Das and Fujimoto 1994). Here, optimism is limited in an indirect manner, by controlling the amount of memory provided to an LP.
Reference: <author> Ferscha, A., and G. Chiola. </author> <year> 1994. </year> <title> Self adaptive logical processes: The probabilistic distributed simulation protocol. </title> <booktitle> In Proceedings of the 27th Annual Simulation Symposium, </booktitle> <pages> pages 78-88. </pages>
Reference: <author> Ferscha, A., and J. Luthi. </author> <year> 1995. </year> <title> Estimating rollback overhead for optimism control in time warp. </title> <booktitle> In Proceedings of the 28th Annual Simulation Symposium, </booktitle> <pages> 2-12. </pages>
Reference-contexts: Yet another proposed approach is to predict the time-stamp of the next message arrival on a given channel, using message-arrival history. Only available events with time-stamps smaller than the predicted time-stamp are processed <ref> (Ferscha 1995) </ref>. A confidence level assigned to each estimate enables the execution of each event with a certain probability. Several different methods of predicting the time-stamp of the next arrival have been proposed. <p> Several different methods of predicting the time-stamp of the next arrival have been proposed. These include estimates based on the arithmetic mean, median, exponentially smoothed average, and computationally intensive auto-regressive and integrated moving-average forecasting methods. Some success was reported with these methods <ref> (Ferscha 1995, Ferscha and Chiola 1994) </ref>. Another proposed strategy for limiting optimism is based on memory management (Das and Fujimoto 1994). Here, optimism is limited in an indirect manner, by controlling the amount of memory provided to an LP.
Reference: <author> Fujimoto, R. </author> <year> 1990. </year> <title> Parallel discrete event simulation. </title> <journal> CACM, </journal> <volume> 33(10) </volume> <pages> 30-53. </pages>
Reference-contexts: The idea is that giving an LP unchecked access to memory each time such memory is requested, subject to machine limitations, may hamper progress at other LPs. 3 ADAPTIVE SYNCHRONIZATION Both conservative as well as optimistic synchronization protocols have their advantages and disadvantages <ref> (Fujimoto 1990) </ref>. Which protocol is better depends on the characteristics of a given application (number of simulation objects, density of messages, etc.), input data, and the run-time environment (processor speeds, communication latency, etc.). There is a need for synchronization schemes that work well in an application-independent way.
Reference: <author> Hamnes, D. O., and A. Tripathi. </author> <year> 1994. </year> <title> Investigations in adaptive distributed simulation. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 20-23. </pages>
Reference-contexts: Proposals for adaptive synchronization, based either on local channel-state information or on global information, have recently begun to appear. In the Local Adaptive Protocol (LAP), LPs compute a real-time blocking window (RTBW) based on the average event-arrival rates in real and virtual time <ref> (Hamnes and Tripathi 1994) </ref>. An LP blocks if it finds an empty channel for which the increment in virtual time between the last event processed and the next candidate event is larger than the average virtual inter-arrival time. <p> Adaptive control is achieved via a channel specific constant c, enabling various "degrees" of optimism. The constant c is chosen in a way that maximizes the rate of simulation time advance. In experimental work, this protocol has been shown to exhibit good performance <ref> (Hamnes and Tripathi 1994) </ref>. Ferscha and Chiola (1994) propose a probabilistic control of optimism, based on the determination of a local virtual time window. Events within the window are executed with a given probability, computed using the virtual time-stamps of arriving messages.
Reference: <author> Jefferson, D. R. </author> <year> 1985. </year> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425. </pages>
Reference-contexts: LPs that have no messages to send to other LPs may use special "informant" messages, called Null messages, to prevent deadlocks (Chandy and Misra 1979). In the optimistic (Time Warp) <ref> (Jefferson 1985) </ref> algorithm, an LP processes events as event messages arrive from other LPs until a causality error is detected: a message arrives with a time-stamp less than the LP's LVT.
Reference: <author> Knop, F. </author> <year> 1996. </year> <title> Software Architectures for Fault-Tolerant Replications and Multithreaded Decompositions: Experiments with Practical Parallel Simulation. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, Purdue University. </institution>
Reference: <author> Law, A. M., and W. D. Kelton. </author> <year> 1982. </year> <title> Simulation Modeling and Analysis. </title> <publisher> McGraw-Hill. </publisher>
Reference-contexts: We assume that fR j;n ; n 1g and fT j;n ; n 1g are stationary sequences <ref> (Law and Kelton 1982) </ref>.
Reference: <author> Mascarenhas, E. </author> <year> 1996. </year> <title> A System for Multithreaded Parallel Simulation and Computation with Migrant Threads and Object. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, Purdue University. </institution>
Reference-contexts: In a physical system, dynamic entities move between physical processes. In the logical system, these entities are represented by active-transactions: user-level threads <ref> (Mascarenhas and Rego 1996) </ref> which may move between LPs. By binding simulation time-stamps which indicate occurrence-times of simulation events to transactions, a flow of transactions between LPs enables LPs to communicate and thus to synchronize with one another.
Reference: <author> Mascarenhas, E., and V. Rego. </author> <year> 1996. </year> <title> Ariadne: Architecture of a portable threads system supporting thread migration. </title> <journal> Software-Practice and Experience, </journal> <volume> 26(3) </volume> <pages> 327-356. </pages>
Reference-contexts: In a physical system, dynamic entities move between physical processes. In the logical system, these entities are represented by active-transactions: user-level threads <ref> (Mascarenhas and Rego 1996) </ref> which may move between LPs. By binding simulation time-stamps which indicate occurrence-times of simulation events to transactions, a flow of transactions between LPs enables LPs to communicate and thus to synchronize with one another.
Reference: <author> Mascarenhas, E., F. Knop, R. Pasquini, and V. Rego. </author> <year> 1997. </year> <title> Checkpoint and recovery methods in the ParaSol simulation system. </title> <booktitle> In Proceedings of the Winter Simulation Conference. </booktitle>

References-found: 14

