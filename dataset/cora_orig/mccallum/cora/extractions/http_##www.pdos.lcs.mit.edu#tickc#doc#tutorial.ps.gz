URL: http://www.pdos.lcs.mit.edu/tickc/doc/tutorial.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/tickc/papers.html
Root-URL: 
Title: A `C Tutorial  
Author: Dawson R. Engler and Massimiliano Poletto 
Keyword: dynamic code generation, C  
Note: Last modified:  
Address: Cambridge, MA 02139  
Affiliation: Laboratory for Computer Science Massachusetts Institute of Technology  
Email: engler@lcs.mit.edu, maxp@lcs.mit.edu  
Date: June 14, 1997  
Abstract: This paper describes `C (Tick C), a superset of ANSI C that allows high-level, efficient, and machine-independent specification of dynamically generated code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: These operations are frequently performed to support remote procedure call <ref> [1] </ref>. Generating specialized code for the most active functions results in substantial performance benefits [12]. We present two functions, marshal and unmarshal, that dynamically generate marshaling and unmarshaling code (respectively) given a printf-style format string specifying the types of arguments.
Reference: [2] <author> R.L. Burden and J.D. Faires. </author> <title> Numerical Methods. </title> <publisher> PWS-kent Publishing Company, </publisher> <address> Boston, MA, </address> <note> fourth edition, </note> <year> 1989. </year>
Reference-contexts: By using `C to compose cspecs instead of function pointers, library functions can be parameterized easily and efficiently, since cspecs can be integrated directly into `C code without extra function calls. The `C code for Newton's method <ref> [2] </ref> illustrates `C's advantages for parameterized functions. The function newton takes as arguments the maximum allowed number of iterations, a tolerance, an initial estimate, and two pointers to functions that return cspecs to evaluate a function and its derivative.
Reference: [3] <author> D. D. Clark and D. L. Tennenhouse. </author> <title> Architectural considerations for a new generation of protocols. </title> <booktitle> In ACM Communication Architectures, Protocols, and Applications (SIGCOMM) 1990, </booktitle> <month> September </month> <year> 1990. </year>
Reference-contexts: Inexpensive function composition has many applications; an important one is the optimization of networking code. The modular composition of different protocol layers has long been a goal in the networking community <ref> [3] </ref>. Unfortunately, each protocol layer frequently has data-touching operations associated with it (e.g., computing a checksum, byte-swapping, etc.). As a result, as data moves through each layer, data can be touched multiple times, which is expensive [3]. `C can be used to construct a network subsystem that solves this problem by <p> composition of different protocol layers has long been a goal in the networking community <ref> [3] </ref>. Unfortunately, each protocol layer frequently has data-touching operations associated with it (e.g., computing a checksum, byte-swapping, etc.). As a result, as data moves through each layer, data can be touched multiple times, which is expensive [3]. `C can be used to construct a network subsystem that solves this problem by dynamically integrating protocol data operations into a single pass over memory (e.g., by integrating encryption and compression into a single copy operation).
Reference: [4] <author> S. Draves. </author> <title> Lightweight languages for interactive graphics. </title> <type> Thesis proposal, </type> <month> June </month> <year> 1995. </year>
Reference-contexts: For small input vectors (on the order of 30 elements), this results in lookup performance superior even to that of a hash table. 3.1.3 Exponentiation Another example in which it is beneficial to create code tailored to a given input set comes from work in computer graphics <ref> [4] </ref>, where it is sometimes necessary to apply an exponent function to a large data set.
Reference: [5] <author> S.P. Harbison and G.L. Steele Jr. </author> <title> C, A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, third edition, </address> <year> 1991. </year>
Reference-contexts: The discussion assumes a working knowlege of the C language. The classic C text is K & R [8]; a good reference is <ref> [5] </ref>. Section 2 describes the language in detail. Section 3 provides several example uses that help illustrate the language's features. 2 `C Language `C extends ANSI C with two type constructors, two unary operators, and some special forms.
Reference: [6] <author> SPARC International. </author> <title> The SPARC Architecture Manual Verson 8. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1992. </year>
Reference-contexts: Such optimizations are increasingly profitable on modern architectures, where cache misses are very expensive and division and multiplication are frequently provided in only software <ref> [6, 11] </ref>. This examples also illustrates that turning a C function into `C requires few changes.
Reference: [7] <author> D. Keppel, S.J. Eggers, and R.R. Henry. </author> <title> Evaluating runtime-compiled value-specific optimizations. </title> <type> TR 93-11-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: The small query languages used to query databases are well-known targets for dynamic code generation <ref> [7] </ref>; since databases are large, dynamically compiled queries will usually be applied many times, easily amortizing the cost of dynamic code generation. We provide a toy example below. The function mk query takes a vector of queries.
Reference: [8] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language, Second Ed. </title> <publisher> Prentice Hall Software Series, </publisher> <year> 1988. </year>
Reference-contexts: This paper is intended to serve both as a reference to the language, and as a source of ideas and techniques on how to use `C and dynamic code generation effectively. The discussion assumes a working knowlege of the C language. The classic C text is K & R <ref> [8] </ref>; a good reference is [5]. Section 2 describes the language in detail. Section 3 provides several example uses that help illustrate the language's features. 2 `C Language `C extends ANSI C with two type constructors, two unary operators, and some special forms.
Reference: [9] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley Professional Computing Series. Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Dynamic generation of unmarshaling code is equally profitable. The process relies on our mechanisms for constructing calls to arbitrary functions at run time. The ability to invoke arbitrary functions is not just useful for efficiency: it also provides useful functionality. For example, in Tcl <ref> [9] </ref> the run-time system can make upcalls into an application. However, because Tcl cannot dynamically create code to call an arbitrary function, it marshals all of the upcall arguments into a single byte vector, and forces applications to explicitly unmarshal them.
Reference: [10] <author> R. Pike, B.N. Locanthi, and J.F. Reiser. </author> <title> Hardware/software trade-offs for bitmap graphics on the Blit. </title> <journal> Software Practice and Experience, </journal> <volume> 15(2) </volume> <pages> 131-151, </pages> <month> February </month> <year> 1985. </year> <month> 24 </month>
Reference-contexts: The size of the generated code will usually be rather small and the performance benefits over traditional methods quite large, making this a very profitable optimization. 3.2.2 Copy Copying an arbitrarily sized region of memory is another common operation. An important application of this is computer graphics <ref> [10] </ref>.
Reference: [11] <author> R. L. </author> <title> Sites. Alpha AXP architecture. </title> <journal> Communications of the ACM, </journal> <volume> 36(2), </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: Such optimizations are increasingly profitable on modern architectures, where cache misses are very expensive and division and multiplication are frequently provided in only software <ref> [6, 11] </ref>. This examples also illustrates that turning a C function into `C requires few changes.
Reference: [12] <author> C. A. Thekkath and H. M. Levy. </author> <title> Limits to low-latency communication on high-speed networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 11(2) </volume> <pages> 179-203, </pages> <month> May </month> <year> 1993. </year> <title> A `C Grammar The grammar for `C consists of the grammar specified in Harbison and Steele's C reference manual [5] with the following additions: </title> <journal> unary-expression : backquote-expression dollar-expression backquote-expression : ` unary-expression ` compound-statement dollar-expression : $ unary-expression pointer : cspec type-qualifier-list opt vspec type-qualifier-list opt cspec type-qualifier-list opt pointer vspec type-qualifier-list opt pointer 25 </journal>
Reference-contexts: These operations are frequently performed to support remote procedure call [1]. Generating specialized code for the most active functions results in substantial performance benefits <ref> [12] </ref>. We present two functions, marshal and unmarshal, that dynamically generate marshaling and unmarshaling code (respectively) given a printf-style format string specifying the types of arguments. The generation of marshaling code relies on `C's ability to specify arbitrary numbers of incoming parameters.
References-found: 12

