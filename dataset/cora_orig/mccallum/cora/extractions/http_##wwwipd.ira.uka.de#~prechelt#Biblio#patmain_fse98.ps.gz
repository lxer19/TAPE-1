URL: http://wwwipd.ira.uka.de/~prechelt/Biblio/patmain_fse98.ps.gz
Refering-URL: 
Root-URL: 
Email: (prechelt@ira.uka.de)  (unger@ira.uka.de)  (tichy@ira.uka.de)  (Peter.Broessler@sdm.de)  (votta@research.bell-labs.com)  
Phone: +49/721/608-4068, Fax: +49/721/608-7343  
Title: A controlled experiment in maintenance comparing design patterns to simpler solutions  
Author: Lutz Prechelt Barbara Unger Walter F. Tichy Peter Brossler Lawrence G. Votta 
Address: D-76128 Karlsruhe, Germany  Thomas-Dehler-Str. 27 81737 Munchen, Germany  IL 60566  
Affiliation: Fakultat fur Informatik, Universitat Karlsruhe  sd&m GmbH Co KG  Software Production Research Department Bell Labs, Lucent Technologies Naperville,  
Date: 1998  
Note: Submission to ACM 'Foundations of Software Engineering' conference  
Abstract: Software design patterns package proven solutions to recurring design problems in a form that simplifies reuse. We are seeking empirical evidence whether using design patterns is beneficial. In particular, one may prefer using a design pattern even if the actual design problem is simpler than that solved by the pattern, i.e., if not all of the functionality offered by the pattern is actually required. Our experiment investigates software maintenance scenarios that employ various design patterns and compares to simpler alternative designs. The subjects were professional software engineers. We find that programs using design patterns can be more difficult to maintain than more conventional solutions, or can be simpler to maintain (even where the specific core advantages of the pattern solution are not relevant), or can be neutral. Carefully applied common sense is a good discriminator between these cases. One should consider alternatives and rely on judgment even when design patterns are applicable. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Beck, J.O. Coplien, R. Crocker, L. Dominick, G. Meszaros, F. Paulisch, and J. Vlissides. </author> <title> Industrial experience with design patterns. </title> <booktitle> In 18th Intl. Conf. on Software Engineering, </booktitle> <pages> pages 103-114, </pages> <address> Berlin, March 1996. </address> <publisher> IEEE CS press. </publisher>
Reference-contexts: As a consequence, they often allow adding new functionality without changing old code. Besides patterns being proven solutions, using patterns purportedly provides additional advantages: Design patterns provide precise terminology that improves communication among designers <ref> [1] </ref> or from designers to maintainers [6]. They purportedly also make it easier to think clearly about a design and encourage the use of "best practices". <p> The subjects are professional software engineers. 1.2 Related work A lot of work is currently being done in both scientific and industrial context towards identifying design patterns, writing them up, discussing and teaching them and their use, building support tools, etc. <ref> [1, 2, 3, 5] </ref>. Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment. <p> Reports on the effects of patterns are available in anecdotal form from various practitioners <ref> [1] </ref>, but there is little work done yet in a quantitative fashion, let alone in a controlled environment. In fact the only quantitative, controlled experiment on patterns reported so far seems to be [8] (see [7, 9] for details). It investigates communication improvements through patterns in a maintenance situation.
Reference: [2] <author> F. J. Budinsky, M. A. Finnie, J. M. Vlissides, and P. S. Yu. </author> <title> Automatic code generation from design patterns. </title> <journal> IBM Systems Journal, </journal> <volume> 35(2) </volume> <pages> 151-171, </pages> <year> 1996. </year>
Reference-contexts: The subjects are professional software engineers. 1.2 Related work A lot of work is currently being done in both scientific and industrial context towards identifying design patterns, writing them up, discussing and teaching them and their use, building support tools, etc. <ref> [1, 2, 3, 5] </ref>. Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment.
Reference: [3] <author> Frank Buschmann, Regine Meunier, Hans Rohn-ert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern-Oriented Software Architecture | A System of Patterns. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, UK, </address> <year> 1996. </year>
Reference-contexts: The subjects are professional software engineers. 1.2 Related work A lot of work is currently being done in both scientific and industrial context towards identifying design patterns, writing them up, discussing and teaching them and their use, building support tools, etc. <ref> [1, 2, 3, 5] </ref>. Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment.
Reference: [4] <author> Bradley Efron and Robert Tibshirani. </author> <title> An introduction to the Bootstrap. Monographs on statistics and applied probability 57. </title> <publisher> Chapman and Hall, </publisher> <address> New York, London, </address> <year> 1993. </year>
Reference-contexts: Note that this style of discussion is complex and dense but no simpler form would adequately characterize the effects we observed. Statistical hypothesis tests were performed using the percentile method (one-sided) after 10000 iterations of bootstrap resampling <ref> [4] </ref> of the difference of arithmetic means. Bootstrap was used because given our small sample sizes we did not want to make distributional assumptions but still compare the means.
Reference: [5] <author> Gert Florijn, Marco Meijers, and Pieter van Win-sen. </author> <title> Tool support for object-oriented patterns. </title> <editor> In Mehmet Aksit, editor, </editor> <booktitle> 11th European Conference on Object-Oriented Programming (ECOOP), </booktitle> <volume> LNCS 1241, </volume> <pages> pages 472-495, </pages> <address> Jyvaskyla, Finland, June 1997. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: The subjects are professional software engineers. 1.2 Related work A lot of work is currently being done in both scientific and industrial context towards identifying design patterns, writing them up, discussing and teaching them and their use, building support tools, etc. <ref> [1, 2, 3, 5] </ref>. Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment.
Reference: [6] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction Object-oriented design patterns as presented by Gamma et al. <ref> [6] </ref> are becoming increasingly popular. Their purpose is capturing design knowledge in such a form that it can be reused easily, even by less experienced designers. Most design patterns collected in the popular book by Gamma et al. [6] aim at reducing coupling and increasing flexibility within systems. <p> 1 Introduction Object-oriented design patterns as presented by Gamma et al. <ref> [6] </ref> are becoming increasingly popular. Their purpose is capturing design knowledge in such a form that it can be reused easily, even by less experienced designers. Most design patterns collected in the popular book by Gamma et al. [6] aim at reducing coupling and increasing flexibility within systems. For instance, many of these patterns delay decisions until run time that would otherwise be made at compile time or they factor functionality into separate classes. As a consequence, they often allow adding new functionality without changing old code. <p> As a consequence, they often allow adding new functionality without changing old code. Besides patterns being proven solutions, using patterns purportedly provides additional advantages: Design patterns provide precise terminology that improves communication among designers [1] or from designers to maintainers <ref> [6] </ref>. They purportedly also make it easier to think clearly about a design and encourage the use of "best practices". <p> We use well-documented, modestly-sized, artificial programs that contain implementations of the design patterns Abstract Factory, Composite, Decorator, Facade, Observer, and Visitor as described in the book <ref> [6] </ref>. The subjects are professional software engineers. 1.2 Related work A lot of work is currently being done in both scientific and industrial context towards identifying design patterns, writing them up, discussing and teaching them and their use, building support tools, etc. [1, 2, 3, 5].
Reference: [7] <author> Lutz Prechelt. </author> <title> An experiment on the usefulness of design patterns: Detailed description and evaluation. </title> <type> Technical Report 9/1997, </type> <institution> Fakultat fur In-formatik, Universitat Karlsruhe, Germany, </institution> <month> June </month> <year> 1997. </year> <month> ftp.ira.uka.de. </month>
Reference-contexts: Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment. In fact the only quantitative, controlled experiment on patterns reported so far seems to be [8] (see <ref> [7, 9] </ref> for details). It investigates communication improvements through patterns in a maintenance situation. Maintenance can be done quicker and with fewer errors for software that documents its use of design patterns explicitly as opposed to the same software without the pattern documentation.
Reference: [8] <author> Lutz Prechelt, Barbara Unger, Michael Philippsen, and Walter F. Tichy. </author> <title> Two controlled experiments assessing the usefulness of design pattern information during program maintenance. Empirical Software Engineering, </title> .(.):., . <note> 1998. Submitted. http://wwwipd.ira.uka.de/~prechelt/Biblio/. </note>
Reference-contexts: Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment. In fact the only quantitative, controlled experiment on patterns reported so far seems to be <ref> [8] </ref> (see [7, 9] for details). It investigates communication improvements through patterns in a maintenance situation. Maintenance can be done quicker and with fewer errors for software that documents its use of design patterns explicitly as opposed to the same software without the pattern documentation.
Reference: [9] <author> Lutz Prechelt, Barbara Unger, and Douglas Schmidt. </author> <title> Replication of the first controlled experiment on the usefulness of design patterns: Detailed description and evaluation. </title> <type> Technical Report wucs-97-34, </type> <institution> Washington University, Dept. of CS, St. Louis, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: Reports on the effects of patterns are available in anecdotal form from various practitioners [1], but there is little work done yet in a quantitative fashion, let alone in a controlled environment. In fact the only quantitative, controlled experiment on patterns reported so far seems to be [8] (see <ref> [7, 9] </ref> for details). It investigates communication improvements through patterns in a maintenance situation. Maintenance can be done quicker and with fewer errors for software that documents its use of design patterns explicitly as opposed to the same software without the pattern documentation.
References-found: 9

