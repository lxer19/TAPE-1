URL: http://www.ite.mh.se/~justin/survey.ps
Refering-URL: http://www.csd.uu.se/~justin/index.html
Root-URL: 
Title: A Survey of Tractable Constraint Satisfaction Problems overall structure; Conditions on the nature of the
Author: Justin Pearson Peter Jeavons 
Note: Conditions on the  
Date: July 14, 1997  
Abstract: In this report we discuss constraint satisfaction problems. These are problems in which values must be assigned to a collection of variables, subject to specified constraints. We focus specifically on problems in which the domain of possible values for each variable is finite. The report surveys the various conditions that have been shown to be sufficient to ensure tractability in these problems. These are broken down into three categories: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg. </author> <title> Efficient algorithms for combinatorial problems on graphs with bounded decomposability. </title> <journal> BIT, </journal> <volume> 25 </volume> <pages> 2-23, </pages> <year> 1985. </year>
Reference-contexts: However, there are heuristic approaches which obtain an ordering whose width is a good approximation to the hypergraph width in many cases [13]. It has been shown <ref> [1] </ref> that the width of any graph can be characterised in terms of a generalised form of tree-structure, known as a k-tree, which is defined as follows. First note that a k-clique in a graph is a set of k vertices, such that there is an edge containing each pair. <p> A graph has width less than or equal to k if and only if it is a subgraph of a k-tree <ref> [1] </ref>. In particular, a graph has width 1 if and only if it is a tree, as defined in Section 3.2. Hence, the results in this section can be seen as a generalisation of the results for trees, above (see [21]).
Reference: [2] <author> S. Arnborg, D.G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding an embedding in k-trees. </title> <journal> SIAM journal of Algebraic and Discrete Methods, </journal> <volume> 8 </volume> <pages> 277-284, </pages> <year> 1987. </year>
Reference-contexts: One difficulty with applying Theorem 3.20, is that, in general, finding a minimal width ordering of a graph or hypergraph is an NP-complete problem <ref> [2, 22] </ref>. However, there are heuristic approaches which obtain an ordering whose width is a good approximation to the hypergraph width in many cases [13].
Reference: [3] <author> K.A. Baker and A.F. Pixley. </author> <title> Polynomial interpolation and the chinese remainder theorem. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 143 </volume> <pages> 165-174, </pages> <year> 1975. </year>
Reference-contexts: Proof: This result follows from a classical result of universal algebra concerning near-unanimity functions, obtained by Baker and Pixley <ref> [3] </ref>. This result states that every algebra in a variety contains a near-unanimity function of arity n amongst its term operations if and only if all subalgebras of product algebras in that variety are uniquely determined by their (n 1)-ary projections [3]. <p> algebra concerning near-unanimity functions, obtained by Baker and Pixley <ref> [3] </ref>. This result states that every algebra in a variety contains a near-unanimity function of arity n amongst its term operations if and only if all subalgebras of product algebras in that variety are uniquely determined by their (n 1)-ary projections [3]. Now let be a fixed set of relations over D, and let P be any constraint satisfaction problem in C .
Reference: [4] <author> C. Beeri, R. Fagin, D. Maier, and M. Yannakakis. </author> <title> On the desirability of acyclic database schemes. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 479-513, </pages> <year> 1983. </year>
Reference-contexts: Many other characterisations of acyclic hypergraphs have been identified [16], and we shall give another useful char-acterisation in the next section. The desirable properties of such hypergraphs are well-known in relational database theory <ref> [4] </ref>. Acyclic hypergraphs include the class of generalised trees defined above, but for non-binary hypergraphs they represent a significant generalisation of this class, as the next example illustrates. <p> general, the time complexity of constructing a hinge-tree, then constructing the corresponding tree-structured problem, and then solving that, is: O (jV jn 2 ) + O (nl logl) 4 This definition of acyclic hypergraphs has been shown to be equivalent [24] to the more standard definitions, given in, for example, <ref> [4, 16] </ref> 5 This procedure is equivalent to the `perfect relaxation' strategy described in [35] 21 where V is the set of variables of the problem,n is the number of constraints, l is the size of the largest constraint (number of tuples), and is the degree of cyclicity [23].
Reference: [5] <author> Claude Berge. </author> <title> Graphs and Hypergraphs. </title> <publisher> North Holland, </publisher> <year> 1973. </year>
Reference-contexts: We give a definition of trees which can be applied to arbitrary hypergraphs as well as to graphs. This definition makes use of the the notion of a chain <ref> [5] </ref>, which is simply a list of distinct vertices with connecting edges. Definition 3.4 ([5]) A chain of length q in a hypergraph (V; E) is defined to be a sequence (x 1 ; E 1 ; x 2 ; E 2 ; : : : ; E q ; x <p> Freuder showed that binary constraint satisfaction problems can be decomposed into smaller problems corresponding to the biconnected components <ref> [5] </ref> of the associated graph. The idea was extended, and generalised to hypergraphs, by Gyssens et al. [23], who introduced the notion of hinges as the fundamental building blocks of any graph or hypergraph.
Reference: [6] <author> A.L. Brearley, G. Mitra, </author> <title> and H.P. Wiliams. Analysis of mathematical programming problems prior to applying the simplex method. </title> <journal> Mathematical Programming, </journal> <volume> 8 </volume> <pages> 54-83, </pages> <year> 1975. </year>
Reference-contexts: These results give conditions on a constraint graph that 7 There is a useful analogy between the process of adding or modifying constraints based on implicit information and the presolve process used in most commercial linear programming systems to pre-process the problem formulation <ref> [6] </ref> 23 guarantee efficient backtrack search when the problem has a certain level of strong consistency. Freuder's central result relies on the notion of width, which is well-established in graph theory (although less commonly applied to hypergraphs).
Reference: [7] <author> E.F. Codd. </author> <title> A relational model of data for large shared databanks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <year> 1970. </year>
Reference: [8] <author> D.A. Cohen, M. Gyssens, and P.G. Jeavons. </author> <title> Derivation of constraints and database relations. </title> <booktitle> In Proceedings 2nd International Conference on Constraint Programming|CP'96 (Boston, </booktitle> <month> August </month> <year> 1996), </year> <booktitle> volume 1118 of Lecture Notes in Computer Science, </booktitle> <pages> pages 134-148. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: To apply the above result, we note that the set Sol (P) may be seen as a subalgebra of a direct product of algebras of the form (D; Fun ()). In fact, by Theorem 10 of <ref> [8] </ref>, every possible subalgebra can be obtained as the projection of Sol (P), for some P. Hence, by the result of Baker and Pixley, Sol (P) is determined by its (n 1)-ary projections, which means that if P is strong n-consistent, then it is globally consistent.
Reference: [9] <author> P.M. Cohn. </author> <title> Universal Algebra. </title> <publisher> Harper & Row, </publisher> <year> 1965. </year>
Reference-contexts: The following result was recently established by Jeavons [25]. Theorem 4.4 ([25]) The complexity of C is determined by Fun (). For any set of relations , the set of functions Fun () has certain algebraic properties which mean that this set is a clone <ref> [9, 39] </ref>. There are very general algebraic results about clones [39, 37] which show that the possibilities for Fun () are therefore limited in certain ways, as the next result indicates.
Reference: [10] <author> M.C. Cooper. </author> <title> An optimal k-consistency algorithm. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 89-95, </pages> <year> 1989. </year> <month> 39 </month>
Reference-contexts: The required constraint relations can be constructed from the constraint relations in the original problem using a combination of join and projection operators. (For a more detailed analysis of efficient algorithms which can modify a problem to ensure k-consistency see <ref> [10, 11] </ref>.) The earliest results concerning consistency and tractability were obtained by Freuder [19]. <p> Corollary 4.9 If is closed under a near-unanimity function, then the class of problems C is tractable. Proof: As we remarked earlier, any problem can be made strong n-consistent, for any fixed n, in polynomial time <ref> [10] </ref>. The new constraints introduced by this process can be obtained from the original constraints by some sequence of join and projection operations, so they are all closed under the near-unanimity function. Now applying Theorem 4.8 to the set of constraint relations in the strong n-consistent problem gives the result.
Reference: [11] <author> R. Dechter. </author> <title> From local to global consistency. </title> <journal> Artificial Intelligence, </journal> <volume> 55(1) </volume> <pages> 87-107, </pages> <year> 1992. </year>
Reference-contexts: The required constraint relations can be constructed from the constraint relations in the original problem using a combination of join and projection operators. (For a more detailed analysis of efficient algorithms which can modify a problem to ensure k-consistency see <ref> [10, 11] </ref>.) The earliest results concerning consistency and tractability were obtained by Freuder [19]. <p> First, we examine the result given by Dechter in <ref> [11] </ref>, which relates the arity of the constraints, the size of the domain, and the level of consistency that is required to ensure global consistency. Theorem 5.1 ([11]) Let P be a constraint satisfaction problem with domain size d, and let r be the length of the largest scope in P.
Reference: [12] <author> R. Dechter and J. Pearl. </author> <title> Network-based heuristics for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34(1) </volume> <pages> 1-38, </pages> <year> 1988. </year>
Reference-contexts: Hence, if the level of consistency is greater than the width of the ordering, then the partial assignments can be extended at each step, and the search will proceed without backtracking. Theorem 3.20 can be generalised to allow a weaker form of consistency, known as directional consistency <ref> [12] </ref>. In fact, many of the results concerning consistency which appear in the literature can be generalised in this way, but this idea will not be explored further in this report.
Reference: [13] <author> R. Dechter and J. Pearl. </author> <title> Tree clustering for constraint networks. </title> <journal> Artificial Intelligence, </journal> <volume> 38 </volume> <pages> 353-366, </pages> <year> 1989. </year>
Reference-contexts: This graph is often referred to as the constraint graph of the problem <ref> [13] </ref>. <p> We can therefore generalise Theorem 3.5, as follows. Theorem 3.7 Let C acyclic be the class of all constraint satisfaction problems for which the associated hypergraph is acyclic. C acyclic is tractable. (This generalisation was pointed out in <ref> [13] </ref>.) The technique of successively removing edges in the way we have described, in order to determine whether or not a hypergraph is acyclic, is referred to as GYO reduction [41]. <p> Another approach to decomposing constraint satisfaction problems is described in <ref> [13] </ref>. This approach involves forming subproblems from clusters of variables and then solving these subproblems separately. For many problems this clustering approach results in a finer decomposition than the hinge-tree method described here, and hence this approach can be very useful in practice. <p> One difficulty with applying Theorem 3.20, is that, in general, finding a minimal width ordering of a graph or hypergraph is an NP-complete problem [2, 22]. However, there are heuristic approaches which obtain an ordering whose width is a good approximation to the hypergraph width in many cases <ref> [13] </ref>. It has been shown [1] that the width of any graph can be characterised in terms of a generalised form of tree-structure, known as a k-tree, which is defined as follows.
Reference: [14] <author> Nick Dunkin and Stuart Allen. </author> <title> Frequency assignment problems: Representations and solutions. </title> <type> Technical Report CSD-TR-97-14, </type> <institution> Department of Computer Science, Royal Holloway, University of London, Egham, Surrey, UK, </institution> <year> 1997. </year>
Reference-contexts: construct arbitrary instances of the Graph Colorability problem, which is well-known to be NP-complete [36]. 2 In many cases of practical interest, such as the frequency assignment problem, it seems from experimental evidence that many of the problems arising in practice can be solved very efficiently, using simple heuristic algorithms <ref> [14] </ref>. However, it is currently difficult to identify properties of these problems which ensure tractability, so each case must be investigated experimentally, without any guarantee of success.
Reference: [15] <author> P. Erdos and L. Lovasz. </author> <title> Problems and results on 3-chromatic hyper-graphs and some related questions. </title> <editor> In A. Hajnal et al., editors, </editor> <title> Infinite and Finite Sets, volume 11 of Colloq. </title> <journal> Math. Soc. Janos Bolyai, </journal> <pages> pages 609-627. </pages> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference-contexts: Another result of this kind may be obtained by an application of a well-known result in combinatorial theory, which is usually referred to as the Lovasz Local Lemma <ref> [15] </ref>. Theorem 5.2 Let P be a constraint satisfaction problem in which each variable occurs in at most t constraint scopes, the length of the largest constraint 36 scope is r, and the proportion of assignments allowed by each constraint re- lation is at least p. <p> If 1 ; then P has a solution. (The constant e in the inequality is the base of natural logarithms, 2:718 : : :.) Proof: The Lovasz Local Lemma <ref> [15] </ref> states that for any collection of events E 1 ; E 2 ; : : : ; E n , which each have probability at most p 0 , if each E i is independent of all but at most s of the others, and p 0 (s + 1)
Reference: [16] <author> R. Fagin. </author> <title> Degrees of acyclicity for hypergraphs and relational database schemes. </title> <journal> Journal of the ACM, </journal> <volume> 30 </volume> <pages> 514-550, </pages> <year> 1983. </year>
Reference-contexts: Any hypergraph for which Stage 1 of Algorithm 3.6 can successfully order the complete set of edges is referred to as acyclic <ref> [16] </ref>. We can therefore generalise Theorem 3.5, as follows. Theorem 3.7 Let C acyclic be the class of all constraint satisfaction problems for which the associated hypergraph is acyclic. <p> Many other characterisations of acyclic hypergraphs have been identified <ref> [16] </ref>, and we shall give another useful char-acterisation in the next section. The desirable properties of such hypergraphs are well-known in relational database theory [4]. <p> general, the time complexity of constructing a hinge-tree, then constructing the corresponding tree-structured problem, and then solving that, is: O (jV jn 2 ) + O (nl logl) 4 This definition of acyclic hypergraphs has been shown to be equivalent [24] to the more standard definitions, given in, for example, <ref> [4, 16] </ref> 5 This procedure is equivalent to the `perfect relaxation' strategy described in [35] 21 where V is the set of variables of the problem,n is the number of constraints, l is the size of the largest constraint (number of tuples), and is the degree of cyclicity [23].
Reference: [17] <author> T. Feder and M.Y. Vardi. </author> <title> Monotone monadic SNP and constraint satisfaction. </title> <booktitle> In Proceedings of 25th ACM Symposium on the Theory of Computing (STOC), </booktitle> <pages> pages 612-622, </pages> <year> 1993. </year>
Reference-contexts: A similar result to Theorem 4.8 is given in <ref> [17] </ref>, although the connection with consistency is not made explicit. (The full version of [17] also gives an interesting characterisation of closure under near-unanimity functions in terms of the language Datalog, which is widely-used to specify relations.) 29 4.4 Affine functions If the relations in are closed under an affine function, <p> A similar result to Theorem 4.8 is given in <ref> [17] </ref>, although the connection with consistency is not made explicit. (The full version of [17] also gives an interesting characterisation of closure under near-unanimity functions in terms of the language Datalog, which is widely-used to specify relations.) 29 4.4 Affine functions If the relations in are closed under an affine function, then C is tractable [28, 17]. <p> consistency is not made explicit. (The full version of [17] also gives an interesting characterisation of closure under near-unanimity functions in terms of the language Datalog, which is widely-used to specify relations.) 29 4.4 Affine functions If the relations in are closed under an affine function, then C is tractable <ref> [28, 17] </ref>.
Reference: [18] <author> E.C. Freuder. </author> <title> Synthesizing constraint expressions. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 958-966, </pages> <year> 1978. </year>
Reference: [19] <author> E.C. Freuder. </author> <title> A sufficient condition for backtrack-free search. </title> <journal> Journal of the ACM, </journal> <volume> 29(1) </volume> <pages> 24-32, </pages> <year> 1982. </year>
Reference-contexts: A hypergraph is said to be a tree if it contains no cyclic chains. The following result was established by Montanari, in the very first paper to deal explicitly with constraint satisfaction problems [34]. It was later obtained by Freuder <ref> [19] </ref>, as a special case of a much more general result, to be discussed below (Section 3.4). Theorem 3.5 ([34, 19]) Let C tree be the class of all binary constraint satisfaction problems for which the associated constraint graph is a tree. C tree is tractable. <p> relations can be constructed from the constraint relations in the original problem using a combination of join and projection operators. (For a more detailed analysis of efficient algorithms which can modify a problem to ensure k-consistency see [10, 11].) The earliest results concerning consistency and tractability were obtained by Freuder <ref> [19] </ref>. <p> If P is strong (w + 1)-consistent, then a solution to P can be obtained by performing a backtrack-free search using this variable ordering. A proof of this theorem, for the special case of binary constraint satisfaction problems, is given in <ref> [19] </ref>. The generalisation to problems of arbitrary arity is straightforward. Intuitively, the result is obtained because at each step which assigns a value to a variable the number of previously assigned values which need to be taken into account is at most the width of the ordering.
Reference: [20] <author> E.C. Freuder. </author> <title> A sufficient condition for backtrack-bounded search. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 755-761, </pages> <year> 1985. </year>
Reference-contexts: part, information can be carried forth into the second part which can be used to solve that part of the problem in a compatible way. 16 17 The idea of decomposing a problem into smaller pieces with limited in-terconnections, which can be solved separately, was first explored by Freuder in <ref> [20] </ref>. Freuder showed that binary constraint satisfaction problems can be decomposed into smaller problems corresponding to the biconnected components [5] of the associated graph.
Reference: [21] <author> E.C. Freuder. </author> <title> Exploiting structure in constraint satisfaction problems. </title> <editor> In M. Mayoh, E. Tyugum, and J. Penjam, editors, </editor> <booktitle> Constraint Programming, volume 131 of NATO ASI Series. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In particular, a graph has width 1 if and only if it is a tree, as defined in Section 3.2. Hence, the results in this section can be seen as a generalisation of the results for trees, above (see <ref> [21] </ref>).
Reference: [22] <author> M. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> San Francisco, CA., </address> <year> 1979. </year>
Reference-contexts: introduction to complexity theory, see <ref> [22] </ref> or [36].) The main results we shall describe show that, for certain special types of problems, it is possible to design algorithms which will always find a solution efficiently (or discover that there are no solutions). <p> On the other side of the coin, it is sometimes possible to show that a class of problems is very unlikely to be tractable. In several cases, we shall establish that a particular class of constraint satisfaction problems is NP-complete <ref> [22] </ref>. To do this we show that any algorithm which could solve all the problems in this class in polynomial time would also allow us to solve some well-established difficult problems, such as Graph Colorability [36], in polynomial-time. <p> One difficulty with applying Theorem 3.20, is that, in general, finding a minimal width ordering of a graph or hypergraph is an NP-complete problem <ref> [2, 22] </ref>. However, there are heuristic approaches which obtain an ordering whose width is a good approximation to the hypergraph width in many cases [13]. <p> We will now show that C fRg is NP-complete, by showing that the k-Colorability problem <ref> [22] </ref>, can be reduced to C fRg in polynomial time. Let P be an instance of the k-Colorability problem, specified by a graph (V; E), where E = fe 1 ; e 2 ; : : : ; e n g. <p> Example 4.14 Consider the relation, N over f0; 1g, defined as follows: N = fh0; 0; 1i; h0; 1; 0i; h1; 0; 0i; h1; 1; 0i; h1; 0; 1i; h0; 1; 1ig: The class of constraint satisfaction problems C fNg is equivalent to the Not-All-Equal satisfiability problem <ref> [38, 22] </ref>, which is NP-complete.
Reference: [23] <author> M. Gyssens, P.G. Jeavons, and D.A. Cohen. </author> <title> Decomposing constraint satisfaction problems using database techniques. </title> <journal> Artificial Intelligence, </journal> <volume> 66(1) </volume> <pages> 57-89, </pages> <year> 1994. </year>
Reference-contexts: Freuder showed that binary constraint satisfaction problems can be decomposed into smaller problems corresponding to the biconnected components [5] of the associated graph. The idea was extended, and generalised to hypergraphs, by Gyssens et al. <ref> [23] </ref>, who introduced the notion of hinges as the fundamental building blocks of any graph or hypergraph. Using this idea allows us to identify a much wider class of tractable hypergraphs than the acyclic hypergraphs discussed in Section 3.2. <p> Figures 9 and 10 show two of the hinges contained in this hypergraph. 2 u u u & % & % 19 ' u u u ~ ' $ ~ A minimal hinge is a hinge that does not contain any other hinges. It is shown in <ref> [23] </ref> that that the minimal hinges of a hypergraph are fundamental structural components. In particular, any hypergraph can be decomposed into a collection of minimal hinges, which overlap each other in a tree struc ture. This structure is referred to as a hinge-tree, and is defined as follows. Definition 3.13 ([23]) <p> Example 3.14 Figure 11 shows one possible hinge-tree for the hypergraph described in Example 3.12, and illustrated in Figure 8. 2 It is possible to calculate a hinge-tree for any given hypergraph in a time which is polynomial in the size of that hypergraph <ref> [23] </ref>. For any given hypergraph there may be more than one hinge-tree, and they may contain different minimal hinges, but it is shown in [23, 26] that they all have an important feature in common. <p> For any given hypergraph there may be more than one hinge-tree, and they may contain different minimal hinges, but it is shown in <ref> [23, 26] </ref> that they all have an important feature in common. Theorem 3.15 ([23, 26]) For any hypergraph (V; E), there is a number, , called the degree of cyclicity, such that, in all hinge-trees of (V; E), the largest node has exactly edges. 20 # ff & % s ' <p> For any constraint satisfaction problem, any corresponding hinge-tree can be used to obtain a new constraint satisfaction problem, which has the same solutions as the original problem, but whose associated hypergraph is acyclic <ref> [23] </ref>. To construct this equivalent problem one simply solves each of the constraint satisfaction problems associated with each of the hinges in the hinge-tree, and replaces that hinge with a single constraint relation, consisting of the set of solutions 5 . <p> for example, [4, 16] 5 This procedure is equivalent to the `perfect relaxation' strategy described in [35] 21 where V is the set of variables of the problem,n is the number of constraints, l is the size of the largest constraint (number of tuples), and is the degree of cyclicity <ref> [23] </ref>. It follows from this that, if the degree of cyclicity is fixed, then we have a polynomial-time algorithm for the corresponding constraint satisfaction problems. Theorem 3.16 ([23]) For any fixed value of , the class of constraint satisfaction problems whose associated hypergraphs have degree of cyclicity at most is tractable. <p> When this is the case it can be shown that the hypergraph cannot, in general, be decomposed into smaller units which can be solved separately, regardless of the constraint relations <ref> [23] </ref>. However, as we remarked earlier, the degree of cyclicity of a hypergraph can be determined in polynomial time [23], so the hinge-tree decomposition technique can always be used as a first step on a given problem without sacrificing efficiency 6 . <p> When this is the case it can be shown that the hypergraph cannot, in general, be decomposed into smaller units which can be solved separately, regardless of the constraint relations <ref> [23] </ref>. However, as we remarked earlier, the degree of cyclicity of a hypergraph can be determined in polynomial time [23], so the hinge-tree decomposition technique can always be used as a first step on a given problem without sacrificing efficiency 6 . Another approach to decomposing constraint satisfaction problems is described in [13]. This approach involves forming subproblems from clusters of variables and then solving these subproblems separately. <p> Hence this clustering approach does not lead to the specification of tractable problem classes whose members can be efficiently identified. (For a comparison between the two approaches, and suggestions on how to combine them, see <ref> [23] </ref>.) 6 A direct comparison between the notion of degree of cyclicity and the notion of width (described in Section 3.4) is problematic, because the first is defined in terms of the number of edges and the second is defined in terms of the number of vertices.
Reference: [24] <author> M. Gysssens and J. Paradaens. </author> <title> A decomposition methodology for cyclic databases. </title> <booktitle> In Advances in Database Theory, </booktitle> <volume> volume 2, </volume> <pages> pages 85-122. </pages> <publisher> Plenum Press, </publisher> <address> New York, NY, </address> <year> 1984. </year>
Reference-contexts: In general, the time complexity of constructing a hinge-tree, then constructing the corresponding tree-structured problem, and then solving that, is: O (jV jn 2 ) + O (nl logl) 4 This definition of acyclic hypergraphs has been shown to be equivalent <ref> [24] </ref> to the more standard definitions, given in, for example, [4, 16] 5 This procedure is equivalent to the `perfect relaxation' strategy described in [35] 21 where V is the set of variables of the problem,n is the number of constraints, l is the size of the largest constraint (number of
Reference: [25] <author> P.G. Jeavons. </author> <title> On the algebraic structure of combinatorial problems. </title> <type> Technical Report CSD-TR-95-15, </type> <institution> Computer Science Department, Royal Holloway, University of London, Egham , Surrey , UK, </institution> <year> 1995. </year> <note> to appear in Theoretical Computer Science. </note>
Reference-contexts: The following result was recently established by Jeavons <ref> [25] </ref>. Theorem 4.4 ([25]) The complexity of C is determined by Fun (). For any set of relations , the set of functions Fun () has certain algebraic properties which mean that this set is a clone [9, 39]. <p> Hence, by Theorem 4.4, C is NP-complete for any which is only closed under a rectangular band function, but a proof of this requires more theoretical machinery than is presented here (see <ref> [25] </ref>). 4.6 Semiprojections We will now show that closure under a semiprojection is not a sufficient condition for tractability. To do this we give an example of an NP-complete problem class in which the constraint relations are closed under all semipro-jections. <p> semiprojection on the domain of P, which was actually set to be f0; 1; 2g. 2 33 Theorem 4.4 can be used to show that C is NP-complete for any which is only closed under semiprojections, but a proof of this requires more theoretical machinery than is presented here (see <ref> [25] </ref>). 4.7 Essentially unary functions We will now show that closure under an essentially unary function is not a sufficient condition for tractability. To do this we give an example of an NP-complete problem class in which the constraint relations are closed under all essentially unary functions. <p> the function which exchanges the two values, and both of these leave N unchanged). 2 Theorem 4.4 can be used to show that C is NP-complete for any which is only closed under essentially unary functions, but a proof of this requires more theoretical machinery than is presented here (see <ref> [25] </ref>). 4.8 Summary of results for closure functions The results about closure functions and tractability presented above are sum-marised in the following theorem.
Reference: [26] <author> P.G. Jeavons, D.A. Cohen, and M. Gyssens. </author> <title> A structural decomposition for hypergraphs. </title> <journal> Contemporary Mathematics, </journal> <volume> 178 </volume> <pages> 161-177, </pages> <year> 1994. </year>
Reference-contexts: For any given hypergraph there may be more than one hinge-tree, and they may contain different minimal hinges, but it is shown in <ref> [23, 26] </ref> that they all have an important feature in common. Theorem 3.15 ([23, 26]) For any hypergraph (V; E), there is a number, , called the degree of cyclicity, such that, in all hinge-trees of (V; E), the largest node has exactly edges. 20 # ff & % s ' <p> the largest node has exactly edges. 20 # ff & % s ' $ s s s ffi fl " ! ffi fl s # ffi s s # ffi s s # ffi s If the degree of cyclicity of a hypergraph is 2, then the hypergraph is acyclic <ref> [26] </ref> 4 . For any constraint satisfaction problem, any corresponding hinge-tree can be used to obtain a new constraint satisfaction problem, which has the same solutions as the original problem, but whose associated hypergraph is acyclic [23].
Reference: [27] <author> P.G. Jeavons, D.A. Cohen, and M. Gyssens. </author> <title> A unifying framework for tractable constraints. </title> <booktitle> In Proceedings 1st International Conference on Constraint Programming|CP'95 (Cassis, </booktitle> <address> France, </address> <month> September </month> <year> 1995), </year> <booktitle> volume 976 of Lecture Notes in Computer Science, </booktitle> <pages> pages 276-291. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Furthermore, the join of any two relations closed under an operation is also closed under that operation <ref> [27] </ref>. Throughout this section we shall assume that is a set of relations over a finite set D with at least two elements. <p> Otherwise, because each of these relations is closed under , each constraint relation contains a tuple hd; d; : : : ; di. Assigning d to each variable will therefore be a solution. 4.3 Majority functions and near-unanimity functions It was first shown in <ref> [27] </ref> that if a set of relations, , is closed under a majority function, then C is tractable. We shall here prove a slightly more general result, which concerns the class of functions known as near-unanimity functions. <p> In this case, any relation which is closed under an affine function must be of the following form <ref> [27] </ref>: f (x 1 ; x 2 ; : : : ; x r ) 2 Z r r X a i x i ~ = ag for some a; a 1 ; a 2 ; : : : ; a r 2 Z p : Thus, any constraint satisfaction problem <p> Now consider the problem P 0 = 8 Actually, in [30] the order v was required to be a total order, but the results are still valid when the order is a partial order, as shown in <ref> [27] </ref> 9 This example was suggested by Marc Gyssens. 32 (V; D; R (e 1 ); R (e 2 ); : : : ; R (e n )), in which the constraint scopes correspond to the edges of E, and the constraint relation in each constraint is the relation R defined
Reference: [28] <author> P.G. Jeavons, D.A. Cohen, and M. Gyssens. </author> <title> Closure properties of constraints. </title> <type> Technical Report CSD-TR-96-15, </type> <institution> Computer Science Department, Royal Holloway, University of London, Egham, Surrey, UK, </institution> <year> 1996. </year> <note> to appear in Journal of the ACM. </note>
Reference-contexts: consistency is not made explicit. (The full version of [17] also gives an interesting characterisation of closure under near-unanimity functions in terms of the language Datalog, which is widely-used to specify relations.) 29 4.4 Affine functions If the relations in are closed under an affine function, then C is tractable <ref> [28, 17] </ref>. <p> This powerful result means that in order to determine whether C is a tractable class of problems, we simply need to calculate the closure functions of . These closure functions are themselves precisely the solutions to certain constraint satisfaction problems in C , which are called indicator problems <ref> [29, 28] </ref>. (There is one indicator problem for each arity of closure function.) For more discussion and examples of the use of indicator problems to establish tractability, see [29]. 4.9 Other restricted constraint types In the preceding sections, we have examined each of the possible forms of closure function identified in
Reference: [29] <author> P.G. Jeavons, D.A. Cohen, and M. Gyssens. </author> <title> A test for tractability. </title> <booktitle> In Proceedings 2nd International Conference on Constraint Programming| CP'96 (Boston, </booktitle> <month> August </month> <year> 1996), </year> <booktitle> volume 1118 of Lecture Notes in Computer Science, </booktitle> <pages> pages 267-281. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: This powerful result means that in order to determine whether C is a tractable class of problems, we simply need to calculate the closure functions of . These closure functions are themselves precisely the solutions to certain constraint satisfaction problems in C , which are called indicator problems <ref> [29, 28] </ref>. (There is one indicator problem for each arity of closure function.) For more discussion and examples of the use of indicator problems to establish tractability, see [29]. 4.9 Other restricted constraint types In the preceding sections, we have examined each of the possible forms of closure function identified in <p> These closure functions are themselves precisely the solutions to certain constraint satisfaction problems in C , which are called indicator problems [29, 28]. (There is one indicator problem for each arity of closure function.) For more discussion and examples of the use of indicator problems to establish tractability, see <ref> [29] </ref>. 4.9 Other restricted constraint types In the preceding sections, we have examined each of the possible forms of closure function identified in Theorem 4.5. It follows from Theorem 4.4 that we have therefore covered every possible way in which placing restrictions on the constraint relations alone can ensure tractability.
Reference: [30] <author> P.G. Jeavons and M.C. Cooper. </author> <title> Tractable constraints on ordered domains. </title> <journal> Artificial Intelligence, </journal> <volume> 79(2) </volume> <pages> 327-339, </pages> <year> 1995. </year>
Reference-contexts: A binary idempotent function which is both associative and commutative is known as an ACI function. The complexity of constraint satisfaction problems in which the constraint relations are closed under ACI functions was first investigated in <ref> [30] </ref>. 30 Theorem 4.10 ([27, 28]) If is closed under a binary idempotent function which is associative and commutative, then C is tractable. Example 4.11 The constraint programming language CHIP [45] incorporates constraint solving techniques for certain arithmetical constraints. <p> All of these constraints are closed under the ACI function max, which yields the arithmetic maximum of its two arguments, and hence are tractable by the result above. Further, the following constraints (listed in <ref> [30] </ref>) are also closed under this ACI function, and could therefore be added to the CHIP system without compromising the efficiency of the system. * a 1 X 1 + a 2 X 2 + : : : a r X r bY + c, * (a 1 X 1 b <p> Because any ACI function is calculates a least upper bound, or max-imum, of its arguments, relative to this ordering, constraints in which the constraint relation is closed under an ACI function were called max-closed constraints in <ref> [30] </ref> 8 . One possible algorithm for solving problems in which the constraint relations are closed under an ACI function works as follows [30]. <p> bound, or max-imum, of its arguments, relative to this ordering, constraints in which the constraint relation is closed under an ACI function were called max-closed constraints in <ref> [30] </ref> 8 . One possible algorithm for solving problems in which the constraint relations are closed under an ACI function works as follows [30]. First, establish what is called pairwise consistency, by repeatedly forming the join of every pair of constraints and projecting the result onto the original scopes, until there are no further changes in the constraints. <p> Let P be an instance of the k-Colorability problem, specified by a graph (V; E), where E = fe 1 ; e 2 ; : : : ; e n g. Now consider the problem P 0 = 8 Actually, in <ref> [30] </ref> the order v was required to be a total order, but the results are still valid when the order is a partial order, as shown in [27] 9 This example was suggested by Marc Gyssens. 32 (V; D; R (e 1 ); R (e 2 ); : : : ;
Reference: [31] <author> G. Kondrak and P. van Beek. </author> <title> A theoretical evaluation of selected backtracking algorithms. </title> <journal> Artificial Intelligence, </journal> <volume> 89 </volume> <pages> 365-387, </pages> <year> 1997. </year>
Reference: [32] <author> A.K. Mackworth. </author> <title> Constraint satisfaction. In S.C. </title> <editor> Shapiro, editor, </editor> <booktitle> Encyclopedia of Artificial Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 285-293. </pages> <publisher> Wiley In-terscience, </publisher> <year> 1992. </year>
Reference: [33] <author> R.N. McKenzie, G.F. McNulty, and W.F. Taylor. </author> <title> Algebras, Lattices and Varieties, volume I. </title> <publisher> Wadsworth and Brooks, </publisher> <address> California, </address> <year> 1987. </year>
Reference-contexts: If any set D (v) is empty, then the problem has no solution. If all D (v) are non-empty, then assigning the least upper bound of the set D (v) to the variable v gives a solution to the problem. 4.5.2 Rectangular band functions A rectangular band function <ref> [33] </ref> is an associative, idempotent, binary function , such that (d 1 ; (d 2 ; d 3 )) = (d 1 ; d 3 ) for all d 1 ; d 2 ; d 3 2 D. <p> These transforms can be carried out in polynomial time, so the result follows. 2 It is known from general algebraic results <ref> [33] </ref> that for any rectangular band function : D 2 ! D, the algebra (D; ) is isomorphic to the algebra (S fi T; 0 ) for some sets S and T , where 0 (hs; ti; hs 0 ; t 0 i) = hs; t 0 i, as in the
Reference: [34] <author> U. Montanari. </author> <title> Networks of constraints: fundamental properties and applications to picture processing. </title> <journal> Information Sciences, </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year> <month> 41 </month>
Reference-contexts: A hypergraph is said to be a tree if it contains no cyclic chains. The following result was established by Montanari, in the very first paper to deal explicitly with constraint satisfaction problems <ref> [34] </ref>. It was later obtained by Freuder [19], as a special case of a much more general result, to be discussed below (Section 3.4). Theorem 3.5 ([34, 19]) Let C tree be the class of all binary constraint satisfaction problems for which the associated constraint graph is a tree.
Reference: [35] <author> U. Montanari and F. Rossi. </author> <title> Constraint relaxation may be perfect. </title> <journal> Ar--tificial Intelligence, </journal> <volume> 48 </volume> <pages> 143-170, </pages> <year> 1991. </year>
Reference-contexts: and then solving that, is: O (jV jn 2 ) + O (nl logl) 4 This definition of acyclic hypergraphs has been shown to be equivalent [24] to the more standard definitions, given in, for example, [4, 16] 5 This procedure is equivalent to the `perfect relaxation' strategy described in <ref> [35] </ref> 21 where V is the set of variables of the problem,n is the number of constraints, l is the size of the largest constraint (number of tuples), and is the degree of cyclicity [23].
Reference: [36] <author> C.H. Papadimitriou. </author> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: introduction to complexity theory, see [22] or <ref> [36] </ref>.) The main results we shall describe show that, for certain special types of problems, it is possible to design algorithms which will always find a solution efficiently (or discover that there are no solutions). <p> To do this we show that any algorithm which could solve all the problems in this class in polynomial time would also allow us to solve some well-established difficult problems, such as Graph Colorability <ref> [36] </ref>, in polynomial-time. <p> Conversely, any Boolean disjunction involving 3 distinct variables is satisfied by any combination of Boolean values for those variables except one, so it can be expressed with a relation from 3 . Hence, there is a polynomial time reduction from the 3-Satisfiability problem <ref> [36] </ref>, which is NP-complete, to C 3 . This establishes that C 3 is NP-complete. <p> This relation does not, in general, ensure tractability, since it can be used to construct arbitrary instances of the Graph Colorability problem, which is well-known to be NP-complete <ref> [36] </ref>. 2 In many cases of practical interest, such as the frequency assignment problem, it seems from experimental evidence that many of the problems arising in practice can be solved very efficiently, using simple heuristic algorithms [14].
Reference: [37] <author> I.G. Rosenberg. </author> <title> Minimal clones I: the five types. </title> <booktitle> In Lectures in Universal Algebra (Proc. Conf. Szeged 1983), volume 43 of Colloq. </booktitle> <publisher> Math. Soc. Janos Bolyai, </publisher> <pages> pages 405-427. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: Theorem 4.4 ([25]) The complexity of C is determined by Fun (). For any set of relations , the set of functions Fun () has certain algebraic properties which mean that this set is a clone [9, 39]. There are very general algebraic results about clones <ref> [39, 37] </ref> which show that the possibilities for Fun () are therefore limited in certain ways, as the next result indicates.
Reference: [38] <author> T.J. Schaefer. </author> <title> The complexity of satisfiability problems. </title> <booktitle> In Proceedings 10th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 216-226, </pages> <year> 1978. </year>
Reference-contexts: Example 4.14 Consider the relation, N over f0; 1g, defined as follows: N = fh0; 0; 1i; h0; 1; 0i; h1; 0; 0i; h1; 1; 0i; h1; 0; 1i; h0; 1; 1ig: The class of constraint satisfaction problems C fNg is equivalent to the Not-All-Equal satisfiability problem <ref> [38, 22] </ref>, which is NP-complete.
Reference: [39] <author> A. Szendrei. </author> <title> Clones in Universal Algebra, </title> <institution> volume 99 of Seminaires de Mathematiques Superieures. University of Montreal, </institution> <year> 1986. </year>
Reference-contexts: The following result was recently established by Jeavons [25]. Theorem 4.4 ([25]) The complexity of C is determined by Fun (). For any set of relations , the set of functions Fun () has certain algebraic properties which mean that this set is a clone <ref> [9, 39] </ref>. There are very general algebraic results about clones [39, 37] which show that the possibilities for Fun () are therefore limited in certain ways, as the next result indicates. <p> Theorem 4.4 ([25]) The complexity of C is determined by Fun (). For any set of relations , the set of functions Fun () has certain algebraic properties which mean that this set is a clone [9, 39]. There are very general algebraic results about clones <ref> [39, 37] </ref> which show that the possibilities for Fun () are therefore limited in certain ways, as the next result indicates.
Reference: [40] <author> E. Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1993. </year>
Reference: [41] <author> Jeffrey D. Ullman. </author> <booktitle> Database and Knowledge-Base Systems, </booktitle> <volume> volume 1 & 2. </volume> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: C acyclic is tractable. (This generalisation was pointed out in [13].) The technique of successively removing edges in the way we have described, in order to determine whether or not a hypergraph is acyclic, is referred to as GYO reduction <ref> [41] </ref>. Many other characterisations of acyclic hypergraphs have been identified [16], and we shall give another useful char-acterisation in the next section. The desirable properties of such hypergraphs are well-known in relational database theory [4].
Reference: [42] <author> P. van Beek. </author> <title> On the minimality and decomposability of row-convex constraint networks. </title> <booktitle> In Proceedings AAAI-92 (San Jose, </booktitle> <address> CA), </address> <pages> pages 447-452, </pages> <year> 1992. </year>
Reference-contexts: On the other hand, if we impose other conditions on the problems as well, then it is possible to obtain tractable classes of problems which do not fall into any of the categories discussed earlier. One example of a result of this type was obtained by van Beek <ref> [42] </ref>, and later extended by van Beek and Dechter [44]. It concerns a class of relations known as row-convex relations.
Reference: [43] <author> P. van Beek. </author> <title> Reasoning about qualitative temporal information. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 297-326, </pages> <year> 1992. </year>
Reference: [44] <author> P. van Beek and R. Dechter. </author> <title> On the minimality and decomposability of row-convex constraint networks. </title> <journal> Journal of the ACM, </journal> <volume> 42 </volume> <pages> 543-561, </pages> <year> 1995. </year>
Reference-contexts: One example of a result of this type was obtained by van Beek [42], and later extended by van Beek and Dechter <ref> [44] </ref>. It concerns a class of relations known as row-convex relations. <p> is satisfied vacuously, so any constraint over a 2-valued domain is row-convex.) Theorem 4.17 ([42, 44]) If is a set of binary relations such that every relation in is row-convex, then any strong 3-consistent problem in C is globally consistent. (Extensions of this result to non-binary constraints are given in <ref> [44] </ref>.) If P is a constraint satisfaction problem in C which is not strong 3-consistent, then it can be modified to make it strong 3-consistent, as described earlier, but doing so may introduce new constraints which are not row-convex. (In fact, Theorem 4.8 indicates that a collection of row-convex constraint relations <p> It is shown in <ref> [44] </ref> that if such a re-ordering exists, then it can be calculated in polynomial time. 5 Tractability due to local properties In this section, we consider results which relate local properties of a constraint satisfaction problem to global properties, such as the existence of a solution, or the possibility of backtrack-free
Reference: [45] <author> P. van Hentenryck, Y. Deville, and C-M. Teng. </author> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 291-321, </pages> <year> 1992. </year>
Reference-contexts: Example 4.11 The constraint programming language CHIP <ref> [45] </ref> incorporates constraint solving techniques for certain arithmetical constraints.
References-found: 45

