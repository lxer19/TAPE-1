URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1997/UM-CS-1997-059.ps
Refering-URL: http://dis.cs.umass.edu/~wagner/pubs.html
Root-URL: 
Title: Criteria-Directed Task Scheduling  
Author: Thomas Wagner Alan Garvey Victor Lesser 
Keyword: real-time, task scheduling, heuristic, approximate, satisficing  
Address: Amherst, MA 01003  Kirksville, MO 63501  Amherst, MA 01003  
Affiliation: Computer Science Department University of Massachusetts  Division of Math Computer Science Truman State University  Computer Science Department University of Massachusetts  UMass Computer Science  
Pubnum: Technical Report 1997-59  
Email: Email: wagner@cs.umass.edu  Email: agarvey@truman.edu  Email: lesser@cs.umass.edu  
Date: October 16, 1997  
Abstract: Scheduling complex problem solving tasks, where tasks are interrelated and there are multiple different ways to go about achieving a particular task, is an imprecise science and the justification for this lies soundly in the combinatorics of the scheduling problem. Intractable problems require approximate solutions. We have developed a new domain-independent approach to task scheduling called Design-to-Criteria that controls the combinatorics via a satisficing methodology and custom designs schedules to meet a particular client's goal criteria. In Design-to-Criteria, criteria directed focusing, approximation, and heuristics, in conjunction with soft goal criteria are used to make the scheduling problem tractable. We describe the interesting facets of the Design-to-Criteria approach and give examples of its power at reducing the complexity of the scheduling task while designing custom satisficing schedules. fl A version of this paper appears in the Specail Scheduling Issue of the International Journal of Approximate Reasoning, 1998. y This material is based upon work supported by the National Science Foundation under Grant No. IRI-9523419, the Department of the Navy, Office of the Chief of Naval Research, under Grant No. N00014-95-1-1198, and via a subcontract from Boeing Helicopter which is being supported by DARPA under the RaDEO program (contract number 70NANB6H0074). The content of the information does not necessarily reflect the position or the policy of the Government, National Science Foundation, or Boeing Helicopter and no official endorsement should be inferred. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> N. Carver and V. Lesser. </author> <title> The DRESUN testbed for research in FA/C distributed situation assessment: Extensions to the model of external evidence. </title> <booktitle> In Proceedings of the International Conference on Multiagent Systems, </booktitle> <month> June, </month> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment <ref> [1] </ref>, and surviveable systems [21] funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 2. <author> T. Dean and M. Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 49-54, </pages> <address> St. Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Since open environments are less predictable, applications must be able to adapt their processing to the available resources and the different goal criteria set by different clients. These requirements have given rise to the subdiscipline of flexible computation <ref> [13, 2] </ref> that researches methodologies, algorithms, and techniques for designing adaptive applications. <p> Much work in flexible computation makes use of anytime algorithms <ref> [2, 20, 24] </ref>, algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold.
Reference: 3. <author> Keith S. Decker. </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent <ref> [3] </ref> coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects.
Reference: 4. <author> Keith S. Decker. </author> <title> TMS: A framework for analysis and design of coordination mechanisms. </title> <editor> In G. O'Hare and N. Jennings, editors, </editor> <booktitle> Foundations of Distributed Artificial Intelligence, chapter 16. </booktitle> <publisher> Wiley Inter-Science, </publisher> <year> 1995. </year>
Reference-contexts: We have framed this task scheduling problem in terms of a domain-independent representation framework called TMS (Task Analysis, Environment Modeling, and Simulation) <ref> [4, 5] </ref> that models a wide range of computational task structures. Our research focuses on a class of computational task structures where there are typically multiple different actions for performing a particular task, each action has different statistical performance characteristics, and uncertainty about the outcomes of actions is ubiquitous.
Reference: 5. <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex environments. </title> <journal> International Journal of Intelligent Systems in Accounting, Finance, and Management, </journal> <volume> 2(4) </volume> <pages> 215-234, </pages> <month> December </month> <year> 1993. </year> <title> Special issue on "Mathematical and Computational Models of Organizations: Models and Characteristics of Agent Behavior". </title>
Reference-contexts: We have framed this task scheduling problem in terms of a domain-independent representation framework called TMS (Task Analysis, Environment Modeling, and Simulation) <ref> [4, 5] </ref> that models a wide range of computational task structures. Our research focuses on a class of computational task structures where there are typically multiple different actions for performing a particular task, each action has different statistical performance characteristics, and uncertainty about the outcomes of actions is ubiquitous.
Reference: 6. <author> Keith S. Decker and Victor R. Lesser. </author> <title> Coordination assistance for mixed human and computational agent systems. </title> <booktitle> In Proceedings of Concurrent Engineering 95, </booktitle> <pages> pages 337-348, </pages> <address> McLean, VA, </address> <year> 1995. </year> <institution> Concurrent Technologies Corp. </institution> <note> Also available as UMASS CS TR-95-31. </note>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design <ref> [6] </ref>, distributed situation assessment [1], and surviveable systems [21] funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 7. <author> K.S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proccedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year> <month> 20 </month>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering <ref> [19, 7, 16] </ref>, collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 8. <author> E. Durfee and V. Lesser. </author> <title> Predictability vs. responsiveness: Coordinating problem solvers in dynamic domains. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 66-71, </pages> <address> St. Paul, Minnesota, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: However, in situations where rescheduling is not appealing, the scheduler can create less efficient schedules that are fault tolerant by making conservative probabilistic assumptions about quality, cost, duration and uncertainty. This relates somewhat to previous work done by Durfee and Lesser <ref> [8] </ref> and in [9] in which schedules are made "loose" by increasing duration expectations when building schedules, effectively creating a slack-time buffer between each action.
Reference: 9. <author> S. Fujita and V.R. Lesser. </author> <title> Centralized task distribution in the presence of uncertainty and time deadlines. </title> <booktitle> In Proceedings of the Second International Conference on Multi-Agent Systems (ICMAS-96), </booktitle> <address> Japan, </address> <year> 1996. </year>
Reference-contexts: However, in situations where rescheduling is not appealing, the scheduler can create less efficient schedules that are fault tolerant by making conservative probabilistic assumptions about quality, cost, duration and uncertainty. This relates somewhat to previous work done by Durfee and Lesser [8] and in <ref> [9] </ref> in which schedules are made "loose" by increasing duration expectations when building schedules, effectively creating a slack-time buffer between each action.
Reference: 10. <author> Alan Garvey, Keith Decker, and Victor Lesser. </author> <title> A negotiation-based interface between a real-time scheduler and a decision-maker. </title> <booktitle> In AAAI Workshop on Models of Conflict Management, </booktitle> <address> Seattle, </address> <year> 1994. </year> <note> Also UMASS CS TR-94-08. </note>
Reference-contexts: An area of future work related to the meta-analysis focus is the refinement of the interface between the scheduler and other complex problem solving components and/or humans. Interactive negotiation <ref> [10] </ref> between the client and the scheduler could control and refine satisficing activities as they happen.
Reference: 11. <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1491-1502, </pages> <year> 1993. </year>
Reference-contexts: TMS is a framework for modeling complex and inherently approximate problem solving activities; no TMS based control component relies wholly on the accuracy of the initial quality, cost, and duration distributions associated with TMS methods. TMS models are the grounding element and medium of exchange for Design-to-Time <ref> [11, 12] </ref> and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects.
Reference: 12. <author> Alan Garvey and Victor Lesser. </author> <title> Representing and scheduling satisficing tasks. In Swaminathan Natarajan, editor, </title> <journal> Imprecise and Approximate Computation, </journal> <pages> pages 23-34. </pages> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1995. </year>
Reference-contexts: TMS is a framework for modeling complex and inherently approximate problem solving activities; no TMS based control component relies wholly on the accuracy of the initial quality, cost, and duration distributions associated with TMS methods. TMS models are the grounding element and medium of exchange for Design-to-Time <ref> [11, 12] </ref> and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects.
Reference: 13. <author> Eric Horvitz, Gregory Cooper, and David Heckerman. </author> <title> Reflection and action under scarce resources: Theoretical principles and empirical study. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1989. </year>
Reference-contexts: Since open environments are less predictable, applications must be able to adapt their processing to the available resources and the different goal criteria set by different clients. These requirements have given rise to the subdiscipline of flexible computation <ref> [13, 2] </ref> that researches methodologies, algorithms, and techniques for designing adaptive applications. <p> We provide empirical examples of this characteristic of our scheduling problem in Section 4. This work falls into the general area of flexible computation <ref> [13] </ref>, but differs from most flexible computation approaches in its use of multiple actions for task achievement (one exception is [14]), in its first class treatment of uncertainty, and in its ability to use uncertainty information in the selection of methods for execution.
Reference: 14. <author> Eric Horvitz and Jed Lengyel. </author> <title> Flexible Rendering of 3D Graphics Under Varying Resources: Issues and Directions. </title> <booktitle> In Proceedings of the AAAI Symposium on Flexible Computation in Intelligent Systems, </booktitle> <address> Cambridge, Massachusetts, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: We provide empirical examples of this characteristic of our scheduling problem in Section 4. This work falls into the general area of flexible computation [13], but differs from most flexible computation approaches in its use of multiple actions for task achievement (one exception is <ref> [14] </ref>), in its first class treatment of uncertainty, and in its ability to use uncertainty information in the selection of methods for execution.
Reference: 15. <author> Frank Klassner. </author> <title> Data Reprocessing in Signal Understanding Systems. </title> <type> PhD thesis, </type> <institution> University of Mas-sachusetts at Amherst, Amherst, Massachusetts, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: Our research focuses on a class of computational task structures where there are typically multiple different actions for performing a particular task, each action has different statistical performance characteristics, and uncertainty about the outcomes of actions is ubiquitous. For example, in the signal processing domain <ref> [15] </ref> there are multiple different techniques that can be used to process and identify signals; an approximate signal processing algorithm such as QSTFT (quantized short-time Fourier transform) [17] is inexpensive to compute but likely to produce interpretations that have significant uncertainty and there is a high probability that the interpretations will
Reference: 16. <author> Victor Lesser, Bryan Horling, Frank Klassner, Anita Raja, Thomas Wagner, and Shelley XQ. Zhang. </author> <title> Information Gathering as a Resource Bounded Interpretation Task. </title> <institution> UMASS Department of Computer Science Technical Report TR-97-34, </institution> <month> March, </month> <year> 1997. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering <ref> [19, 7, 16] </ref>, collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 17. <author> S. H. Nawab and E. Dorken. </author> <title> Quality versus Efficiency Tradeoffs in STFT Computation. </title> <journal> IEEE Transactions on Signal Processing, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: For example, in the signal processing domain [15] there are multiple different techniques that can be used to process and identify signals; an approximate signal processing algorithm such as QSTFT (quantized short-time Fourier transform) <ref> [17] </ref> is inexpensive to compute but likely to produce interpretations that have significant uncertainty and there is a high probability that the interpretations will altogether miss certain types of signal sources.
Reference: 18. <author> S. H. Nawab and T. Quatieri. </author> <title> Short-time Fourier transform. </title> <editor> In S. H. Nawab and T. Quatieri, editors, </editor> <booktitle> Advanced Topics in Signal Procesing. </booktitle> <publisher> Prentice-Hall, </publisher> <address> New Jersey, </address> <year> 1988. </year>
Reference-contexts: In contrast, a STFT (short-time Fourier transform) <ref> [18] </ref> is expensive to compute, but has very good quality and it is highly likely that all signal sources will be represented to some degree in the interpretation. This example is deliberately simple to illustrate a point.
Reference: 19. <author> T. Oates, M. V. Nagendra Prasad, and V. R. Lesser. </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach. </title> <institution> Computer Science Technical Report 94-66, University of Massachusetts, </institution> <year> 1994. </year> <note> To appear in Journal of Software Engineering, Special Issue on Developing Agent Based Systems, </note> <year> 1997. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering <ref> [19, 7, 16] </ref>, collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 20. <author> Stuart J. Russell and Shlomo Zilberstein. </author> <title> Composing real-time systems. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 212-217, </pages> <address> Sydney, Australia, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: Much work in flexible computation makes use of anytime algorithms <ref> [2, 20, 24] </ref>, algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold.
Reference: 21. <author> Regis Vincent, Bryan Horling, Thomas Wagner, and Victor Lesser. </author> <title> Survivability simulator for multi-agent adaptive coordination. </title> <booktitle> In Proceedings of the First International Conference on Web-Based Modeling and Simulation, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling [22, 23] and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems <ref> [21] </ref> funded research projects. TMS diverges from traditional hierarchical representations in that different alternatives for achieving a task are expressed explicitly and reasoning about trade-offs is a first class activity.
Reference: 22. <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Complex Goal Criteria and Its Application in Design-to-Criteria Scheduling. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <month> July </month> <year> 1997. </year> <note> Also available as UMASS Department of Computer Science Technical Report TR-1997-10. </note>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling <ref> [22, 23] </ref> and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects. <p> After computing the raw goodness, threshold/limit, certainty, and certainty threshold rating components, the alternate or schedule rating is computed by weighting the rating components according to the relations specified by the meta sliders. The full details are presented in <ref> [22] </ref>. As the evaluation mechanism is used to reduce the computational work required by the scheduling process, it is important to realize that the above components are inexpensive to compute.
Reference: 23. <author> Thomas Wagner, Alan Garvey, and Victor Lesser. </author> <title> Leveraging Uncertainty in Design-to-Criteria Scheduling. </title> <institution> UMASS Department of Computer Science Technical Report TR-97-11, </institution> <month> January, </month> <year> 1997. </year>
Reference-contexts: TMS models are the grounding element and medium of exchange for Design-to-Time [11, 12] and Design-to-Criteria scheduling <ref> [22, 23] </ref> and multi-agent [3] coordination research, and are being used in Cooperative-Information-Gathering [19, 7, 16], collaborative distributed design [6], distributed situation assessment [1], and surviveable systems [21] funded research projects. <p> When reducing uncertainty is important to the client, the scheduler may schedule multiple alternatives for achieving a particular task, using a form of redundancy <ref> [23] </ref> to increase the probability that a particular result will be generated. Certainty Thresholds This bank is analogous to the thresholds/limits bank above except that this bank focuses on the uncertainty associated with quality, cost, and duration.
Reference: 24. <author> S. Zilberstein and S. J. Russell. </author> <title> Optimal composition of real-time systems. </title> <journal> Artificial Intelligence, </journal> <volume> 79(2), </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: Much work in flexible computation makes use of anytime algorithms <ref> [2, 20, 24] </ref>, algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold.
Reference: 25. <author> Shlomo Zilberstein. </author> <title> Operational rationality through compilation of anytime algorithms. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1993. </year> <month> 21 </month>
Reference-contexts: Schedules are then rated against the client's quality, cost, and duration criteria and the best one is returned for execution. This iterative process has an anytime <ref> [27, 25] </ref> flavor since generating the set of alternatives for the root task is relatively inexpensive and fast real-timewise, due to complexity control, compared to the process of building schedules.
Reference: 26. <author> Shlomo Zilberstein. </author> <title> Using anytime algorithms in intelligent systems. </title> <journal> AI Magazine, </journal> <volume> 17(3) </volume> <pages> 73-83, </pages> <year> 1996. </year>
Reference-contexts: In our work, uncertainty is a first class concept that both appears in the statistical descriptions of the available methods and is propagated and related as schedules and schedule approximations are generated. Unlike most work in anytime algorithms that focuses on the propagation of uncertainty <ref> [26] </ref>, we can also include uncertainty and uncertainty reduction in the goal criteria and focus work on reducing uncertainty when important to the client. This ability stems from our task model's representation of alternative ways to perform various tasks.
Reference: 27. <author> Shlomo Zilberstein and Stuart J. Russell. </author> <title> Constructing utility-driven real-time systems using anytime algorithms. </title> <booktitle> In Proceedings of the IEEE Workshop on Imprecise and Approximate Computation, </booktitle> <pages> pages 6-10, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: Schedules are then rated against the client's quality, cost, and duration criteria and the best one is returned for execution. This iterative process has an anytime <ref> [27, 25] </ref> flavor since generating the set of alternatives for the root task is relatively inexpensive and fast real-timewise, due to complexity control, compared to the process of building schedules.
Reference: 28. <author> M. Zweben, B. Daun, E. Davis, and M. Deale. </author> <title> Scheduling and rescheduling with iterative repair. </title> <editor> In M. Zweben and M. Fox, editors, </editor> <title> Intelligent Scheduling, chapter 8. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: This can be caused by an overconstrained problem, but also by complex task interactions that are glossed over by the alternative approximation and not considered by the action ordering heuristics. A secondary set of improvement <ref> [28] </ref> heuristics act as a safety net to catch the errors that are correctable.
References-found: 28

