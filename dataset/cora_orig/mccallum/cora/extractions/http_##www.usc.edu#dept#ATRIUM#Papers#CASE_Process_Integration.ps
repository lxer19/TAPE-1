URL: http://www.usc.edu/dept/ATRIUM/Papers/CASE_Process_Integration.ps
Refering-URL: http://cwis.usc.edu/dept/ATRIUM/index.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fpmi,scacchig@usc.edu  
Phone: Tel (213) 740-4782  
Title: Process Integration in CASE Environments  
Author: Peiwei Mi and Walt Scacchi 
Address: Los Angeles, CA 90089  
Affiliation: Computer Science Department and Decision Systems Department University of Southern California 1  
Abstract: Integrated CASE Environments (CASEEs) have been focused on tool and object integration. In this paper, we present a new type of integration called process integration as a strategy for creating process-centered CASEEs. We argue that the major benefits of process integration to software development include explicit process guidance and improved project management. We also present a few key components to implement process integration which form the backbone of a process-centered CASEE. These components include software process models, a process enactment mechanism, a developer's interface and a process manager's interface. Furthermore, our strategy implements process integration by merging these key components with existing CASEEs and creates process-centered CASEEs with reasonable effort. To exemplify this strategy, we have migrated an operational CASEE, the SOFTMAN environment, into a process-centered CASEE. 
Abstract-found: 1
Intro-found: 1
Reference: [AHM89] <author> E.W. Adams, M. Honda, and T.C. Miller. </author> <title> Object Management in a CASE Environment. </title> <booktitle> In Proc. of the 11th International Conference on Software Engineering, </booktitle> <pages> pages 154-165, </pages> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Tool integration deals with the implicit invocation and control of development tools [BGMT89, GI90, Tho89]. Object integration, on the other hand, provides a consistent view of development artifacts and easy-to-use interfaces to generate, access, and control them <ref> [AHM89, CS91] </ref>. This paper presents a higher level of integration called process integration that explicitly represents development activities as a software process model (SPM), and provides process guidance and coordination as well as tool and object integration.
Reference: [BGMT89] <author> G. Boudier, F. Gallo, R. Minot, and I. Thomas. </author> <title> An Overview of PCTE and PCTE+. </title> <booktitle> ACM SIGPLAN Notice, </booktitle> <pages> pages 226-227, </pages> <month> Feb </month> <year> 1989. </year> <month> 11 </month>
Reference-contexts: 1 Introduction Current research in CASE Environments (CASEEs) has been focused on two kinds of integration: tool integration and object integration. Tool integration deals with the implicit invocation and control of development tools <ref> [BGMT89, GI90, Tho89] </ref>. Object integration, on the other hand, provides a consistent view of development artifacts and easy-to-use interfaces to generate, access, and control them [AHM89, CS91].
Reference: [CS89] <author> S.C. Choi and W. Scacchi. </author> <title> Assuring the Correctness of Configured Software Descriptions. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 17(7) </volume> <pages> 67-76, </pages> <year> 1989. </year>
Reference-contexts: STEP 1: The SOFTMAN environment is an integrated CASEE supporting forward and reverse engineering of large scale software systems. Through extensive studies, the following concepts were identified as important to SOFTMAN: It supports an incremental life-cycle development methodology, a product model assuming the correctness of interrelated life cycle artifacts <ref> [CS89] </ref>, and a set of structure-oriented tools [CS91]. Figure 7 shows an example of the SOFTMAN user interface where two activities take place: editing a design specification and viewing an operational requirements.
Reference: [CS91] <author> S.C. Choi and W. Scacchi. SOFTMAN: </author> <title> An Environment for Forward and Reverse CASE. </title> <journal> Information and Software Technology, </journal> <volume> 33(9), </volume> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Tool integration deals with the implicit invocation and control of development tools [BGMT89, GI90, Tho89]. Object integration, on the other hand, provides a consistent view of development artifacts and easy-to-use interfaces to generate, access, and control them <ref> [AHM89, CS91] </ref>. This paper presents a higher level of integration called process integration that explicitly represents development activities as a software process model (SPM), and provides process guidance and coordination as well as tool and object integration. <p> A mechanism for executing SPMs then follows. After this, a developer's interface and a process manager's interface that provide the user interfaces for a process-centered CASEE are given. We then discuss our implementation strategy which is exemplified by migrating an existing CASEE, the SOFTMAN environment <ref> [CS91] </ref>, into a process-centered CASEE. We also describe our observations from this experiment and highlight some outstanding issues for future investigation at the end. 2 Process Integration Today's CASEEs generally support some form of tool and object integration. <p> Another facility is used to create, prototype, and simulate SPMs that are initialized by process managers [MS90]. 7 exemplify this strategy, we describe such an experiment in this section. The example CASEE is the SOFTMAN environment <ref> [CS91] </ref> developed in the USC System Factory Project over the past few years 3 . The comprehensive set of support mechanisms and tools in SOFTMAN, on the one hand, makes it a powerful environment to support large scale software development. <p> Through extensive studies, the following concepts were identified as important to SOFTMAN: It supports an incremental life-cycle development methodology, a product model assuming the correctness of interrelated life cycle artifacts [CS89], and a set of structure-oriented tools <ref> [CS91] </ref>. Figure 7 shows an example of the SOFTMAN user interface where two activities take place: editing a design specification and viewing an operational requirements.
Reference: [FO91] <author> C. Fernstrom and L. Ohlsson. </author> <title> Integration Needs in Process Enacted Environments. </title> <booktitle> Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 142-158, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: This is then done with a modification function shown in the lower-left corner of Figure 6. 7 The SOFTMAN Experiment As we suggested earlier, our strategy to implement process-centered CASEEs is to integrate the key components with existing CASEEs rather than building them from scratch <ref> [FO91] </ref>. To 2 Other than to initialize an SPM and to ensure that the minimum required resources needed to start the SPM are allocated.
Reference: [GI90] <author> D. Garlan and E. Ilias. </author> <title> Low-cost, Adaptable Tool Integration Policies for Integrated Environments. </title> <booktitle> In Proc. of the 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 1-10, </pages> <address> Irvine, CA, </address> <month> Dec. 3-5 </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Current research in CASE Environments (CASEEs) has been focused on two kinds of integration: tool integration and object integration. Tool integration deals with the implicit invocation and control of development tools <ref> [BGMT89, GI90, Tho89] </ref>. Object integration, on the other hand, provides a consistent view of development artifacts and easy-to-use interfaces to generate, access, and control them [AHM89, CS91].
Reference: [MS90] <author> P. Mi and W. Scacchi. </author> <title> A Knowledge-based Environment for Modeling and Simulating Software Engineering Processes. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(3) </volume> <pages> 283-294, </pages> <month> Sept </month> <year> 1990. </year>
Reference-contexts: Further, these objects are linked through many kinds of relations. Altogether, SPMs serve as a repository of information on the status of development processes and activities that get manipulated throughout a software development project. Readers can find a detailed definition of SPMs elsewhere, such as in <ref> [MS90] </ref>. An SPM specifies an activity hierarchy that describes a decomposition of development activities and resource requirements including software artifacts, tools, developers, and other critical resources. We follow the scheme presented in [MS90]. <p> Readers can find a detailed definition of SPMs elsewhere, such as in <ref> [MS90] </ref>. An SPM specifies an activity hierarchy that describes a decomposition of development activities and resource requirements including software artifacts, tools, developers, and other critical resources. We follow the scheme presented in [MS90]. An activity hierarchy represents decomposition of an SPM into a hierarchy of smaller activities called tasks and actions. Levels of decomposition can be arbitrary depending on the complexity of the process. <p> To 2 Other than to initialize an SPM and to ensure that the minimum required resources needed to start the SPM are allocated. Another facility is used to create, prototype, and simulate SPMs that are initialized by process managers <ref> [MS90] </ref>. 7 exemplify this strategy, we describe such an experiment in this section. The example CASEE is the SOFTMAN environment [CS91] developed in the USC System Factory Project over the past few years 3 .
Reference: [MS91] <author> P. Mi and W. Scacchi. </author> <title> Modeling Articulation Work in Software Engineering Processes. </title> <booktitle> Proc. of the 1st International Conference on the Software Process, </booktitle> <pages> pages 188-201, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: During performance of the actions, some of them may be Done successfully, others may be Stopped, or even become Broken which needs repairing or rescheduling actions to recover it <ref> [MS91] </ref>. Once some of the actions are Done, they trigger the process enactment driver to update the SPM and assert more Ready actions. The enactment continues until the SPM is Done.
Reference: [Tho89] <author> I. Thomas. </author> <title> Tool Integration in the PACT Environment. </title> <booktitle> In Proc. of the 11th International Conference on Software Engineering, </booktitle> <pages> pages 13-22, </pages> <year> 1989. </year> <month> 12 </month>
Reference-contexts: 1 Introduction Current research in CASE Environments (CASEEs) has been focused on two kinds of integration: tool integration and object integration. Tool integration deals with the implicit invocation and control of development tools <ref> [BGMT89, GI90, Tho89] </ref>. Object integration, on the other hand, provides a consistent view of development artifacts and easy-to-use interfaces to generate, access, and control them [AHM89, CS91].
References-found: 9

