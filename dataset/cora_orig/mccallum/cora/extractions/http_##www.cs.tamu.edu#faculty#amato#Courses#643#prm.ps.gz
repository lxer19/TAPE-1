URL: http://www.cs.tamu.edu/faculty/amato/Courses/643/prm.ps.gz
Refering-URL: http://www.cs.tamu.edu/seminars/airobotics/fall97.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Probabilistic Roadm  aps for Path Planning in High-Dimensional Configuration Spaces  
Author: Lydia E. Kavraki Petr Svestka Jean-Claude Latombe Mark H. Overmars 
Date: 12(4), 566-580, 1996  
Note: IEEE Trans. on Robotics and Automation,  
Abstract: A new motion planning method for robots in static workspaces is presented. This method proceeds in two phases: a learning phase and a query phase. In the learning phase, a probabilistic roadmap is constructed and stored as a graph whose nodes correspond to collision-free configurations and whose edges correspond to feasible paths between these configurations. These paths are computed using a simple and fast local planner. In the query phase, any given start and goal configurations of the robot are connected to two nodes of the roadmap; the roadmap is then searched for a path joining these two nodes. The method is general and easy to implement. It can be applied to virtually any type of holonomic robot. It requires selecting certain parameters (e.g., the duration of the learning phase) whose values depend on the scene, that is the robot and its workspace. But these values turn out to be relatively easy to choose. Increased efficiency can also be achieved by tailoring some components of the method (e.g., the local planner) to the considered robots. In this paper the method is applied to planar articulated robots with many degrees of freedom. Experimental results show that path planning can be done in a fraction of a second on a contemporary workstation ( 150 MIPS), after learning for relatively short periods of time (a few dozen seconds). 
Abstract-found: 1
Intro-found: 1
Reference: [ATBM92] <author> J. M. Ahuactzin, E.-G. Talbi, P. Bessiere, and E. Mazer. </author> <title> Using genetic algorithms for robot motion planning. </title> <booktitle> 10th Europ. Conf. Artific. Intelligence. </booktitle> <pages> 671-675. </pages> <publisher> John Wiley and Sons, Ltd., </publisher> <address> London, England, </address> <year> 1992. </year>
Reference-contexts: The planner in [Kon91] finds paths for six-dof manipulators using heuristic search techniques that limit the part of the C-space that is explored, and the planner in <ref> [ATBM92] </ref> utilizes genetic algorithms to help search for a path in high-dimensional C-spaces. Parallel processing techniques are investigated in [CG93, LPO91]. The planning method presented in this paper differs significantly from the methods referenced above, which are for the most part based on potential field or cell decomposition approaches.
Reference: [BCH94] <author> M. Barbehenn, P.C. Chen, and S. Hutchinson. </author> <title> An efficient hybrid planner in changing environments. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 2755-2760, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The approach in [Ch92] builds a sparse network of robot subgoals with the use of a simple and a computationally expensive planner. This network can also include information to accommodate local changes in the environment <ref> [Ch93, BCH94] </ref>. Our method emphasizes efficiency and is primarily developed for robots with many dofs which move in static environments. We are not aware of other roadmap techniques 6 that have been effectively applied to high-dimensional C-spaces. <p> We observed no dramatic slowdown of the RPP planner. A challenging goal would now be to extend the method to dynamic scenes. One first question is: how should a roadmap computed for a given workspace be updated if a few obstacles are removed or added? The work in <ref> [BCH94, Ch92] </ref> discusses how to deal with changes in the environment in the context of the hybrid planner presented in [Ch92]. We hope that similar techniques could apply to our planner.
Reference: [BF94] <author> J. Barraquand and P. Ferbach. </author> <title> Path planning through variational dynamic programming. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 1839-1846, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: One way to prevent this from happening is to let RPP randomly use several potential functions, but this solution is rather time consuming. Our roadmap planner deals efficiently with problems that are difficult for RPP, as discussed in Section 5. Other interesting lines of work include the method in <ref> [BF94] </ref> which is based on a variational dynamic programming approach and can tackle problems of similar complexity to the problems solved by RPP.
Reference: [BKLLMR95] <author> B. Barraquand, L.E. Kavraki, J.-C. Latombe, T.-Y. Li, R. Motwani, and P. Raghavan. </author> <title> A random sampling scheme for robot path planning. Robotics Research, </title> <editor> G. Giralt and G. Hirzinger (ed.), </editor> <publisher> North Holland, </publisher> <year> 1996, </year> <title> to appear. </title> <booktitle> (Proc. 7th Int. Symp. on Robotics Research, </booktitle> <address> Herrsching, Germany, </address> <month> October </month> <year> 1995.) </year>
Reference-contexts: Bet--ter expansion techniques were introduced in [KL94a, KL94b]. That approach is described in detail in [Kav95] and a theoretical analysis bounding the time spent by that planner is given in [KLMR95] and in <ref> [BKLLMR95] </ref>. The present paper combines the ideas of the experimental work in these previous papers.
Reference: [BLL92] <author> J. Barraquand, B. Langlois, and J.-C. Latombe. </author> <title> Numerical potential field techniques for robot path planning. </title> <journal> IEEE Tr. Syst., Man, and Cybern., </journal> <volume> 22(2) </volume> <pages> 224-241, </pages> <year> 1992. </year>
Reference-contexts: Recently there has been renewed interest in developing heuristic, but practical path planners. For few-dof robots, many such planners have been designed and some are extremely fast (e.g., <ref> [BLL92, LRDG90] </ref>). Considerable attention is now directed toward the creation of efficient heuristic planners for many-dof robots. Indeed, while such robots are becoming increasingly useful in industrial applications, complete methods for such robots have overwhelming complexity. <p> This learning scheme was applied with some success to robots with up to 6 dofs. However, the size of the r n array becomes impractical when n grows larger. Techniques for both computing potential functions and escaping local minima in high-dimensional C-spaces are presented in <ref> [BL91, BLL92] </ref>. The Randomized Path Planner (RPP) described in [BL91] escapes local minima by executing random walks. It has been successfully experimented on difficult problems involving robots with 3 to 31 dofs.
Reference: [BL91] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: a distributed representation approach. </title> <journal> Int. J. Robotics Research, </journal> <volume> 10 </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: The main disadvantage of these planners is the presence of local minima in the potential fields. These minima may be difficult to escape. Local minima-free potential functions (also called navigation functions) have been defined in <ref> [Kod87, RK92, BL91] </ref>. But these functions are expensive to compute in high-dimensional configuration spaces and have not been used for many-dof robots. One of the first successful potential field planners for robots with many dof is described in [FT87]. <p> This learning scheme was applied with some success to robots with up to 6 dofs. However, the size of the r n array becomes impractical when n grows larger. Techniques for both computing potential functions and escaping local minima in high-dimensional C-spaces are presented in <ref> [BL91, BLL92] </ref>. The Randomized Path Planner (RPP) described in [BL91] escapes local minima by executing random walks. It has been successfully experimented on difficult problems involving robots with 3 to 31 dofs. <p> However, the size of the r n array becomes impractical when n grows larger. Techniques for both computing potential functions and escaping local minima in high-dimensional C-spaces are presented in [BL91, BLL92]. The Randomized Path Planner (RPP) described in <ref> [BL91] </ref> escapes local minima by executing random walks. It has been successfully experimented on difficult problems involving robots with 3 to 31 dofs. <p> Verifying that a straight line segment remains within the joint limits is straightforward. On the other hand, collision checking can be done as follows <ref> [BL91] </ref>. <p> Experimental results show that our method can efficiently solve certain kinds of problems which are beyond the capabilities of other existing methods. For example, for planar articulated robots with many dofs, the customized implementation of Section 5 is much more consistent than the Randomized Path Planner (RPP) of <ref> [BL91] </ref>. Indeed, the latter can be very fast on some difficult problems, but it may also take prohibitive time on some others. We have not observed such disparity with our roadmap method.
Reference: [BG94] <author> S. Berchtold and B. Glavina. </author> <title> A scalable optimizer for automatically generated manipulator motions. </title> <booktitle> Proc. IEEE/RSJ/GI Int. Conf. Intelligent Robots and Systems, </booktitle> <pages> 1796-1802, </pages> <address> Munchen, Germany, </address> <year> 1994. </year>
Reference-contexts: If one wishes, this path may be improved by running a smoothing algorithm on it. Smoothing techniques that can be used here include the one in [LTJ90], which selects random segments of the global path and tries to shortcut them by using the local planner, and the method in <ref> [BG94] </ref>, which iteratively performs local geometric operations (i.e., cutting off triangle corners). The main question is how to compute the paths P s and P g . The queries should preferably terminate quasi-instantaneously, so no expensive algorithm is desired here.
Reference: [Can88] <author> J.F. Canny. </author> <title> The complexity of robot motion planning. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: Instead, our method applies a roadmap approach [Lat91], that is, it constructs a network of paths in free C-space. Previous roadmap methods include the visibility graph [LPW79], Voronoi diagram [OY82], and silhouette <ref> [Can88] </ref> methods. All these three methods compute in a single shot a roadmap that completely represents the connectivity of the free C-space. The visibility graph and Voronoi diagram methods are limited to low-dimensional C-spaces. The silhouette method applies to C-spaces of any dimension, but its complexity makes it little practical.
Reference: [CL90] <author> J.F. Canny and M.C. Lin. </author> <title> An opportunistic global path planner. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 1554-1559, </pages> <address> Cincinnati, OH, </address> <year> 1990. </year>
Reference-contexts: The visibility graph and Voronoi diagram methods are limited to low-dimensional C-spaces. The silhouette method applies to C-spaces of any dimension, but its complexity makes it little practical. Roadmaps have also been built and used incrementally in several other planners. The planner in <ref> [CL90] </ref> incrementally builds the skeleton of the C-space using a local opportunistic strategy. This work has inspired the approaches in [RC94, CB94] which construct retracts of the free C-space using sensor data and thus do not assume that the (static) environment in which the robot moves is known a priori.
Reference: [CG93] <author> D. Chalou and M. Gini. </author> <title> Parallel robot motion planning. </title> <booktitle> Proc. of IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 24-51, </pages> <address> Atlanta, GA, </address> <year> 1993. </year>
Reference-contexts: Recently, RPP has been embedded in a larger "manipulation planner" to automatically animate scenes involving human figures modeled with 62 dofs [KKKL94]. However, several examples have also been identified where RPP behaves poorly <ref> [CG93, ZG93] </ref>. In these examples, RPP falls into local minima whose basins of attraction are mostly bounded by obstacles, with only narrow passages to escape. The probability that any random walk finds its way through such a passage is almost zero. <p> The planner in [Kon91] finds paths for six-dof manipulators using heuristic search techniques that limit the part of the C-space that is explored, and the planner in [ATBM92] utilizes genetic algorithms to help search for a path in high-dimensional C-spaces. Parallel processing techniques are investigated in <ref> [CG93, LPO91] </ref>. The planning method presented in this paper differs significantly from the methods referenced above, which are for the most part based on potential field or cell decomposition approaches. Instead, our method applies a roadmap approach [Lat91], that is, it constructs a network of paths in free C-space.
Reference: [CL95] <author> H. Chang and T.-Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <address> Nayoga, JP, </address> <year> 1995. </year>
Reference-contexts: It has been successfully experimented on difficult problems involving robots with 3 to 31 dofs. It has also been used in practice with good results to plan motions for performing riveting operations on plane fuselages [GMKL92], and to plan disassembly operations for the maintenance of aircraft engines <ref> [CL95] </ref>. Recently, RPP has been embedded in a larger "manipulation planner" to automatically animate scenes involving human figures modeled with 62 dofs [KKKL94]. However, several examples have also been identified where RPP behaves poorly [CG93, ZG93].
Reference: [Ch92] <author> P.C. Chen. </author> <title> Improving path planning with learning. </title> <booktitle> Proc. Machine Learning Conference, </booktitle> <pages> 55-61, </pages> <year> 1992. </year>
Reference-contexts: Other interesting lines of work include the method in [BF94] which is based on a variational dynamic programming approach and can tackle problems of similar complexity to the problems solved by RPP. In [GG92, GZ94] a sequential framework with backtracking is proposed for serial manipulators, and in <ref> [CH92] </ref> a motion planner with performance proportional to task difficulty is developed for arbitrary many-dof robots operating in cluttered environments. <p> This work has inspired the approaches in [RC94, CB94] which construct retracts of the free C-space using sensor data and thus do not assume that the (static) environment in which the robot moves is known a priori. The approach in <ref> [Ch92] </ref> builds a sparse network of robot subgoals with the use of a simple and a computationally expensive planner. This network can also include information to accommodate local changes in the environment [Ch93, BCH94]. <p> We observed no dramatic slowdown of the RPP planner. A challenging goal would now be to extend the method to dynamic scenes. One first question is: how should a roadmap computed for a given workspace be updated if a few obstacles are removed or added? The work in <ref> [BCH94, Ch92] </ref> discusses how to deal with changes in the environment in the context of the hybrid planner presented in [Ch92]. We hope that similar techniques could apply to our planner. <p> One first question is: how should a roadmap computed for a given workspace be updated if a few obstacles are removed or added? The work in [BCH94, Ch92] discusses how to deal with changes in the environment in the context of the hybrid planner presented in <ref> [Ch92] </ref>. We hope that similar techniques could apply to our planner. Being able to plan when obstacles move will be very useful because then we could apply our method to scenes subject to small incremental changes.
Reference: [Ch93] <author> P.C. Chen. </author> <title> Adaptive path planning in changing environments. </title> <type> Report SAND92-2744, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: The approach in [Ch92] builds a sparse network of robot subgoals with the use of a simple and a computationally expensive planner. This network can also include information to accommodate local changes in the environment <ref> [Ch93, BCH94] </ref>. Our method emphasizes efficiency and is primarily developed for robots with many dofs which move in static environments. We are not aware of other roadmap techniques 6 that have been effectively applied to high-dimensional C-spaces.
Reference: [CH92] <author> P.C. Chen and Y.K. Hwang. SANDROS: </author> <title> A motion planner with performance proportional to task difficulty. </title> <booktitle> Proc. of IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 2346-2353, </pages> <address> Nice, France, </address> <year> 1992. </year>
Reference-contexts: Other interesting lines of work include the method in [BF94] which is based on a variational dynamic programming approach and can tackle problems of similar complexity to the problems solved by RPP. In [GG92, GZ94] a sequential framework with backtracking is proposed for serial manipulators, and in <ref> [CH92] </ref> a motion planner with performance proportional to task difficulty is developed for arbitrary many-dof robots operating in cluttered environments. <p> This work has inspired the approaches in [RC94, CB94] which construct retracts of the free C-space using sensor data and thus do not assume that the (static) environment in which the robot moves is known a priori. The approach in <ref> [Ch92] </ref> builds a sparse network of robot subgoals with the use of a simple and a computationally expensive planner. This network can also include information to accommodate local changes in the environment [Ch93, BCH94]. <p> We observed no dramatic slowdown of the RPP planner. A challenging goal would now be to extend the method to dynamic scenes. One first question is: how should a roadmap computed for a given workspace be updated if a few obstacles are removed or added? The work in <ref> [BCH94, Ch92] </ref> discusses how to deal with changes in the environment in the context of the hybrid planner presented in [Ch92]. We hope that similar techniques could apply to our planner. <p> One first question is: how should a roadmap computed for a given workspace be updated if a few obstacles are removed or added? The work in [BCH94, Ch92] discusses how to deal with changes in the environment in the context of the hybrid planner presented in <ref> [Ch92] </ref>. We hope that similar techniques could apply to our planner. Being able to plan when obstacles move will be very useful because then we could apply our method to scenes subject to small incremental changes.
Reference: [CB94] <author> H. Choset and J. Burdick. </author> <title> Sensor based planning and nonsmooth analysis. </title> <booktitle> Proc. of IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 3034-3041, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: Roadmaps have also been built and used incrementally in several other planners. The planner in [CL90] incrementally builds the skeleton of the C-space using a local opportunistic strategy. This work has inspired the approaches in <ref> [RC94, CB94] </ref> which construct retracts of the free C-space using sensor data and thus do not assume that the (static) environment in which the robot moves is known a priori.
Reference: [ELP86] <author> M. Erdmann and T. Lozano-Perez. </author> <title> On multiple moving objects. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 1152-1159, </pages> <year> 1986. </year>
Reference-contexts: Similar incremental changes also occur in automatic graphic animation. A second question is: how should the learning and query phase be modified if some obstacles are moving along known trajectories? An answer to this question might consist of applying our roadmap method in the configurationfitime space of the robot <ref> [ELP86] </ref>. The roadmap would then have to be built as a directed graph, since local paths between any two nodes must monotonically progress along the time axis, with possibly additional constraints on their slope and curvature to reflect bounds on the robot's velocity and acceleration. Acknowledgments: L.E. Kavraki and J.-C.
Reference: [FT87] <author> B. Faverjon and P. Tournassoud. </author> <title> A local approach for path planning of manipulators with a high number of degrees of freedom. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 1152-1159, </pages> <address> Raleigh, NC, </address> <year> 1987. </year>
Reference-contexts: But these functions are expensive to compute in high-dimensional configuration spaces and have not been used for many-dof robots. One of the first successful potential field planners for robots with many dof is described in <ref> [FT87] </ref>. This planner has been used to compute paths of an 8-dof manipulator among vertical pipes in a nuclear plant, with interactive human assistance to escape local minima. In [FT90] the same authors present a learning scheme to avoid falling into the local minima of the potential field.
Reference: [FT90] <author> B. Faverjon and P. Tournassoud. </author> <title> A practical approach to motion planning for manipulators with many degrees of freedom. Robotics Research 5, </title> <editor> H. Miura and S. Arimoto (Eds.), </editor> <address> 65-73, </address> <publisher> MIT Press, </publisher> <address> MA, </address> <year> 1990. </year>
Reference-contexts: One of the first successful potential field planners for robots with many dof is described in [FT87]. This planner has been used to compute paths of an 8-dof manipulator among vertical pipes in a nuclear plant, with interactive human assistance to escape local minima. In <ref> [FT90] </ref> the same authors present a learning scheme to avoid falling into the local minima of the potential field.
Reference: [Gie93] <author> G.-J. Giezeman. </author> <title> PlaGeo|A library for planar geometry. </title> <type> Tech. Rep., </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, The Netherlands, </address> <year> 1993. </year> <month> 36 </month>
Reference-contexts: It can be done using a variety of existing general techniques. In the general implementation considered in Section 6 the test is performed analytically using optimized routines from the PLAGEO library <ref> [Gie93] </ref>. Alternatively, we could use an iterative collision checker, like the one described in [Qui94], which automatically generates successive approximations of the objects involved in the collision test. In 2D workspaces, we may use a faster, but more specific collision checker (see Section 4). The local planner. <p> Hence, as described in Section 3, the local path constructed between any two configurations is the straight line segment joining them in C-space; the distance function D is the one defined by Eqn. (1); and collision checking is done analytically, using routines from the PLAGEO library <ref> [Gie93] </ref>. The planner was implemented on a Silicon Graphics Indigo 2 workstation rated at 96.5 SPECfp92 and 90.4 SPECint92. This machine is comparable to the one we used for the results in the previous section.
Reference: [GMKL92] <author> L. Graux, P. Millies, P.L. Kociemba, and B. Langlois. </author> <title> Integration of a path generation algorithm into off-line programming of airbus panels. Aerospace Automated Fastening Conf. and Exp., </title> <type> SAE Tech. Paper 922404, </type> <month> October </month> <year> 1992. </year>
Reference-contexts: It has been successfully experimented on difficult problems involving robots with 3 to 31 dofs. It has also been used in practice with good results to plan motions for performing riveting operations on plane fuselages <ref> [GMKL92] </ref>, and to plan disassembly operations for the maintenance of aircraft engines [CL95]. Recently, RPP has been embedded in a larger "manipulation planner" to automatically animate scenes involving human figures modeled with 62 dofs [KKKL94]. However, several examples have also been identified where RPP behaves poorly [CG93, ZG93].
Reference: [GG92] <author> K. Gupta and Z. Gou. </author> <title> Sequential search with backtracking. </title> <booktitle> Proc. of IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 2328-2333, </pages> <address> Nice, France, </address> <year> 1992. </year>
Reference-contexts: Other interesting lines of work include the method in [BF94] which is based on a variational dynamic programming approach and can tackle problems of similar complexity to the problems solved by RPP. In <ref> [GG92, GZ94] </ref> a sequential framework with backtracking is proposed for serial manipulators, and in [CH92] a motion planner with performance proportional to task difficulty is developed for arbitrary many-dof robots operating in cluttered environments.
Reference: [GZ94] <author> K. Gupta and X. Zhu. </author> <title> Practical motion planning for many degrees of freedom: A novel approach within sequential framework. </title> <booktitle> Proc. of IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 2038-2043, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: Other interesting lines of work include the method in [BF94] which is based on a variational dynamic programming approach and can tackle problems of similar complexity to the problems solved by RPP. In <ref> [GG92, GZ94] </ref> a sequential framework with backtracking is proposed for serial manipulators, and in [CH92] a motion planner with performance proportional to task difficulty is developed for arbitrary many-dof robots operating in cluttered environments.
Reference: [HST94] <author> Th. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at C-space obstacles. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 3318-3323, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: Though computation times reported in these papers were obtained with different versions of our method, their orders of magnitude remain meaningful. Finally, it should be noted that another planner which bares similarities with our approach, but was developed independently of our two teams, is proposed in <ref> [HST94] </ref>. 3 The general method We now describe our path planning method in general terms for a holonomic robot without focusing on any specific type of robot. During the learning phase a data structure called the roadmap is constructed in a probabilistic way for a given scene.
Reference: [Kav93] <author> L.E. Kavraki. </author> <title> Computation of configuration-space obstacles using the fast fourier transform. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 255-261, </pages> <address> Atlanta, GA, </address> <year> 1993. </year> <note> To appear in IEEE Tr. Robotics and Automation. </note>
Reference-contexts: of the objects.) Then draw and fill the obstacles into the 2D bitmap. (On many workstations, this second operation can be done very quickly using raster-scan hardware originally designed to efficiently display filled polygons on graphic terminals.) Each 2D bitmap may also be computed using the FFT-based method described in <ref> [Kav93] </ref>, whose complexity depends only on the size of the bitmap. This FFT method is advantageous when the obstacles are originally input as bitmaps. In any case, experiments show that computing a 3D bitmap with a size on the order of 128 fi 128 fi 128 takes a few seconds. <p> First, let us note that in 2D workspaces the effect is likely to be limited if the bitmap collision-checking technique of Section 4 is used. Indeed, once bitmaps have been precomputed, collision checking is a constant-time operation; and the cost of computing bitmaps using the FFT-based technique described in <ref> [Kav93] </ref> only depends on the resolution (i.e., the size) of these bitmaps. However, more complicated geometry may require increasing the bitmap resolution in order to represent geometric details with desired accuracy. With 3D workspaces the situation is completely different, since we can no longer use the bitmap technique.
Reference: [Kav95] <author> L.E. Kavraki. </author> <title> Random networks in configuration space for fast path planning, </title> <type> Ph.D. Thesis, Tech. Rep. </type> <institution> STAN-CS-95-1535, Dept. Comput. Sci., Stanford Univ., Stanford, </institution> <address> CA, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: The need to expand the roadmap in 7 "difficult" regions of C-space was noted there and addressed with simple techniques. Bet--ter expansion techniques were introduced in [KL94a, KL94b]. That approach is described in detail in <ref> [Kav95] </ref> and a theoretical analysis bounding the time spent by that planner is given in [KLMR95] and in [BKLLMR95]. The present paper combines the ideas of the experimental work in these previous papers. <p> Which particular heuristic function should be used depends to some extent on the input scene. A more detailed discussion on expansion techniques can be found in <ref> [Kav95] </ref>. <p> The customized implementation can solve very difficult path planning queries involving many-dof robots in a fraction of a second, after a learning time of a few dozen seconds. The general implementation solves the same problems in several minutes, but it is still very efficient in less difficult problems. In <ref> [KL94a, KL94b, Kav95, O S95] </ref> prior versions of the method have been applied to a great variety of holonomic robots including planar and spatial articulated robots with revolute, prismatic, and/or spherical joints, fixed or free base, and single or multiple kinematic chains.
Reference: [KL93] <author> L.E. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <type> Tech. Rep. </type> <institution> STAN-CS-93-1490, Dept. Comput. Sci., Stanford Univ., Stanford, </institution> <address> CA, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: In [ SO95] these results are extended to simultaneous motion planning for multiple car-like robots. Independently, a preprocessing scheme similar to the learning phase was introduced in <ref> [KL93] </ref>. This scheme also builds a probabilistic roadmap in free C-space, but focuses on the case of many-dof robots. The need to expand the roadmap in 7 "difficult" regions of C-space was noted there and addressed with simple techniques. Bet--ter expansion techniques were introduced in [KL94a, KL94b].
Reference: [KL94a] <author> L.E. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 2138-2145, </pages> <address> San Diego, CA, </address> <year> 1994. </year>
Reference-contexts: This scheme also builds a probabilistic roadmap in free C-space, but focuses on the case of many-dof robots. The need to expand the roadmap in 7 "difficult" regions of C-space was noted there and addressed with simple techniques. Bet--ter expansion techniques were introduced in <ref> [KL94a, KL94b] </ref>. That approach is described in detail in [Kav95] and a theoretical analysis bounding the time spent by that planner is given in [KLMR95] and in [BKLLMR95]. The present paper combines the ideas of the experimental work in these previous papers. <p> The same techniques can also be applied, possibly with minor adaptations, to other types of articulated robots, e.g., robots with prismatic joints and/or with multiple kinematic chains <ref> [KL94a] </ref> and articulated robots in 3D workspace [KL94b]. Local path planning. Let a and b be any two given configurations that we wish to connect with the local planner. Our local planner constructs a path as follows. <p> The customized implementation can solve very difficult path planning queries involving many-dof robots in a fraction of a second, after a learning time of a few dozen seconds. The general implementation solves the same problems in several minutes, but it is still very efficient in less difficult problems. In <ref> [KL94a, KL94b, Kav95, O S95] </ref> prior versions of the method have been applied to a great variety of holonomic robots including planar and spatial articulated robots with revolute, prismatic, and/or spherical joints, fixed or free base, and single or multiple kinematic chains.
Reference: [KL94b] <author> L.E. Kavraki and J.-C. Latombe. </author> <title> Randomized preprocessing of configuration space for path planning: Articulated robots. </title> <booktitle> Proc. IEEE/RSJ/GI Int. Conf. Intelligent Robots and Systems, </booktitle> <pages> 1764-1772, </pages> <address> Germany, </address> <year> 1994. </year>
Reference-contexts: In this paper we report in detail on experiments with planar articulated robots (or linkages) with many dofs moving in constrained workspaces. However, the method is directly applicable to other kinds of holonomic robots, such as spatial articulated robots in 3D workspaces <ref> [KL94b] </ref>. Additionally, a version of the method described here has been successfully applied to nonholonomic car-like robots [ SO94]. In all cases, experimental results show that the learning times required for the construction of adequate roadmaps, i.e., roadmaps that capture well the connectivity of the free C-space, are short. <p> This scheme also builds a probabilistic roadmap in free C-space, but focuses on the case of many-dof robots. The need to expand the roadmap in 7 "difficult" regions of C-space was noted there and addressed with simple techniques. Bet--ter expansion techniques were introduced in <ref> [KL94a, KL94b] </ref>. That approach is described in detail in [Kav95] and a theoretical analysis bounding the time spent by that planner is given in [KLMR95] and in [BKLLMR95]. The present paper combines the ideas of the experimental work in these previous papers. <p> The same techniques can also be applied, possibly with minor adaptations, to other types of articulated robots, e.g., robots with prismatic joints and/or with multiple kinematic chains [KL94a] and articulated robots in 3D workspace <ref> [KL94b] </ref>. Local path planning. Let a and b be any two given configurations that we wish to connect with the local planner. Our local planner constructs a path as follows. <p> The customized implementation can solve very difficult path planning queries involving many-dof robots in a fraction of a second, after a learning time of a few dozen seconds. The general implementation solves the same problems in several minutes, but it is still very efficient in less difficult problems. In <ref> [KL94a, KL94b, Kav95, O S95] </ref> prior versions of the method have been applied to a great variety of holonomic robots including planar and spatial articulated robots with revolute, prismatic, and/or spherical joints, fixed or free base, and single or multiple kinematic chains. <p> However, more complicated geometry may require increasing the bitmap resolution in order to represent geometric details with desired accuracy. With 3D workspaces the situation is completely different, since we can no longer use the bitmap technique. Our experiments in 3D workspaces reported in <ref> [KL94b] </ref> show that the higher cost of collision checking increases the duration of the learning phase. It affects less the 33 query phase, since less collision checks are performed there. The results in [KL94b] also show that the duration of the learning phase remains quite reasonable (on the order of minutes), <p> Our experiments in 3D workspaces reported in <ref> [KL94b] </ref> show that the higher cost of collision checking increases the duration of the learning phase. It affects less the 33 query phase, since less collision checks are performed there. The results in [KL94b] also show that the duration of the learning phase remains quite reasonable (on the order of minutes), but they were obtained with simple 3D geometry (for example, the robot links were line segments).
Reference: [KLMR95] <author> L.E. Kavraki, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query processing in robot path planning. </title> <booktitle> Proceedings of the 27th Annual 37 ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> 353-362, </pages> <address> Las Vegas, NV, </address> <month> May </month> <year> 1995, </year>
Reference-contexts: Bet--ter expansion techniques were introduced in [KL94a, KL94b]. That approach is described in detail in [Kav95] and a theoretical analysis bounding the time spent by that planner is given in <ref> [KLMR95] </ref> and in [BKLLMR95]. The present paper combines the ideas of the experimental work in these previous papers.
Reference: [Kod87] <author> D.E. Koditschek. </author> <title> Exact robot navigation by means of potential functions: some topological considerations. </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <pages> 1-6, </pages> <address> Raleigh, NC, </address> <year> 1987. </year>
Reference-contexts: The main disadvantage of these planners is the presence of local minima in the potential fields. These minima may be difficult to escape. Local minima-free potential functions (also called navigation functions) have been defined in <ref> [Kod87, RK92, BL91] </ref>. But these functions are expensive to compute in high-dimensional configuration spaces and have not been used for many-dof robots. One of the first successful potential field planners for robots with many dof is described in [FT87].
Reference: [KKKL94] <author> Y. Koga, K. Kondo, J. Kuffner, and J.-C. Latombe. </author> <title> Planning motions with intentions. </title> <booktitle> Proc. of SIGGRAPH'94, </booktitle> <pages> 395-408, </pages> <address> FL, </address> <year> 1994. </year>
Reference-contexts: Recently, RPP has been embedded in a larger "manipulation planner" to automatically animate scenes involving human figures modeled with 62 dofs <ref> [KKKL94] </ref>. However, several examples have also been identified where RPP behaves poorly [CG93, ZG93]. In these examples, RPP falls into local minima whose basins of attraction are mostly bounded by obstacles, with only narrow passages to escape. <p> RPP is another planner that heavily relies on collision checking. For long we ran RPP on geometrically simple problems; but, recently, we used it to automatically animate graphic 3D scenes of complex geometry <ref> [KKKL94] </ref> using the above iterative collision checker. We observed no dramatic slowdown of the RPP planner. A challenging goal would now be to extend the method to dynamic scenes.
Reference: [Kon91] <author> K. Kondo. </author> <title> Motion planning with six degrees of freedom by multistrategic bidirectional heuristic free-space enumeration. </title> <journal> IEEE Tr. on Robotics and Automation, </journal> <volume> 7(3) </volume> <pages> 267-277, </pages> <year> 1991. </year>
Reference-contexts: In [GG92, GZ94] a sequential framework with backtracking is proposed for serial manipulators, and in [CH92] a motion planner with performance proportional to task difficulty is developed for arbitrary many-dof robots operating in cluttered environments. The planner in <ref> [Kon91] </ref> finds paths for six-dof manipulators using heuristic search techniques that limit the part of the C-space that is explored, and the planner in [ATBM92] utilizes genetic algorithms to help search for a path in high-dimensional C-spaces. Parallel processing techniques are investigated in [CG93, LPO91].
Reference: [Lat91] <author> J.-C. Latombe. </author> <title> Robot motion planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Section 6 discusses other experimental results obtained with a general implementation of the method. Section 7 concludes the paper. 2 Relation to previous work Path planning for robots in known and static workspaces has been studied extensively over the last two decades <ref> [Lat91] </ref>. Recently there has been renewed interest in developing heuristic, but practical path planners. For few-dof robots, many such planners have been designed and some are extremely fast (e.g., [BLL92, LRDG90]). Considerable attention is now directed toward the creation of efficient heuristic planners for many-dof robots. <p> Parallel processing techniques are investigated in [CG93, LPO91]. The planning method presented in this paper differs significantly from the methods referenced above, which are for the most part based on potential field or cell decomposition approaches. Instead, our method applies a roadmap approach <ref> [Lat91] </ref>, that is, it constructs a network of paths in free C-space. Previous roadmap methods include the visibility graph [LPW79], Voronoi diagram [OY82], and silhouette [Can88] methods. All these three methods compute in a single shot a roadmap that completely represents the connectivity of the free C-space.
Reference: [LTJ90] <author> J.-P. Laumond, M. Taix, and P. Jacobs. </author> <title> A motion planner for car-like robots based on a global/local approach. </title> <booktitle> Proc. IEEE Internat. Workshop Intell. Robot Syst. </booktitle> <pages> 765-773. </pages> <year> 1990. </year>
Reference-contexts: If one wishes, this path may be improved by running a smoothing algorithm on it. Smoothing techniques that can be used here include the one in <ref> [LTJ90] </ref>, which selects random segments of the global path and tries to shortcut them by using the local planner, and the method in [BG94], which iteratively performs local geometric operations (i.e., cutting off triangle corners). The main question is how to compute the paths P s and P g .
Reference: [LRDG90] <author> J. Lengyel, M. Reichert, B.R. Donald, and P. Greenberg. </author> <title> Real-time robot motion planning using rasterizing computer graphics hardware. </title> <booktitle> Proc. SIG-GRAPH'90, </booktitle> <pages> 327-335, </pages> <address> Dallas, TX, </address> <year> 1990. </year>
Reference-contexts: Recently there has been renewed interest in developing heuristic, but practical path planners. For few-dof robots, many such planners have been designed and some are extremely fast (e.g., <ref> [BLL92, LRDG90] </ref>). Considerable attention is now directed toward the creation of efficient heuristic planners for many-dof robots. Indeed, while such robots are becoming increasingly useful in industrial applications, complete methods for such robots have overwhelming complexity. <p> If the link and the obstacles are modeled as collections of possibly overlapping convex polygons, the construction of a 2D bitmap can be done as follows <ref> [LRDG90] </ref>.
Reference: [LP83] <author> T. Lozano-Perez. </author> <title> Spatial planning: a configuration space approach. </title> <journal> IEEE Tr. on Computers, </journal> <volume> 32 </volume> <pages> 108-120, </pages> <year> 1983. </year>
Reference-contexts: In the learning phase a probabilistic roadmap is constructed by repeatedly generating random free configurations of the robot and connecting these configurations using some simple, but very fast motion planner. We call this planner the local planner. The roadmap thus formed in the free configuration space (C-space <ref> [LP83] </ref>) of the robot is stored as an undirected graph R. The configurations are the nodes of R and the paths computed by the local planner are the edges of R. The learning phase is concluded by some postprocessing of R to improve its connectivity. <p> If the link and the obstacles are modeled as collections of possibly overlapping convex polygons, the construction of a 2D bitmap can be done as follows [LRDG90]. First use the algorithm in <ref> [LP83] </ref> to produce the vertices of the obstacles in the link's C-space. (This algorithm takes linear time in the number of vertices of the objects.) Then draw and fill the obstacles into the 2D bitmap. (On many workstations, this second operation can be done very quickly using raster-scan hardware originally designed
Reference: [LPO91] <author> T. Lozano-Perez and P. O'Donnel. </author> <title> Parallel robot motion planning. </title> <booktitle> Proc. IEEE Int. Conf. Rob. and Automation, </booktitle> <pages> 1000-1007, </pages> <address> Sacramento, CA, </address> <year> 1991. </year>
Reference-contexts: The planner in [Kon91] finds paths for six-dof manipulators using heuristic search techniques that limit the part of the C-space that is explored, and the planner in [ATBM92] utilizes genetic algorithms to help search for a path in high-dimensional C-spaces. Parallel processing techniques are investigated in <ref> [CG93, LPO91] </ref>. The planning method presented in this paper differs significantly from the methods referenced above, which are for the most part based on potential field or cell decomposition approaches. Instead, our method applies a roadmap approach [Lat91], that is, it constructs a network of paths in free C-space.
Reference: [LPW79] <author> T. Lozano-Perez and M.A. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Comm. of the ACM, </journal> <volume> 22(10) </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference-contexts: Instead, our method applies a roadmap approach [Lat91], that is, it constructs a network of paths in free C-space. Previous roadmap methods include the visibility graph <ref> [LPW79] </ref>, Voronoi diagram [OY82], and silhouette [Can88] methods. All these three methods compute in a single shot a roadmap that completely represents the connectivity of the free C-space. The visibility graph and Voronoi diagram methods are limited to low-dimensional C-spaces.
Reference: [Mas92] <author> J. Mastwijk. </author> <title> Motion planning using potential field methods. </title> <type> Master Thesis, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, The Netherlands, </address> <month> August </month> <year> 1992. </year> <month> 38 </month>
Reference-contexts: Local paths needed not be memorized since recomputing them at query time is inexpensive. We actually tried several local planners, some very fast, some slower but more powerful, and our experimental observations clearly confirmed this conclusion (e.g., see <ref> [Mas92, Sve93] </ref>). A quite general such local planner, which is applicable to all holonomic robots, connects any two given configurations by a straight line segment in configuration space and checks this line segment for collision and joint limits (if any).
Reference: [OY82] <author> C. O'Dunlaing and C.K. Yap. </author> <title> A retraction method for planning the motion of a disc. </title> <journal> J. of Algorithms, </journal> <volume> 6 </volume> <pages> 104-111, </pages> <year> 1982. </year>
Reference-contexts: Instead, our method applies a roadmap approach [Lat91], that is, it constructs a network of paths in free C-space. Previous roadmap methods include the visibility graph [LPW79], Voronoi diagram <ref> [OY82] </ref>, and silhouette [Can88] methods. All these three methods compute in a single shot a roadmap that completely represents the connectivity of the free C-space. The visibility graph and Voronoi diagram methods are limited to low-dimensional C-spaces.
Reference: [Ove92] <author> M. Overmars. </author> <title> A random approach to motion planning. </title> <type> Tech. Rep. </type> <institution> RUU-CS-92-32, Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, The Netherlands, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The authors of this paper are from two different teams and the work presented here builds upon previous work they did separately. A single-shot random planner was described in <ref> [Ove92] </ref> and was subsequently expanded into a learning approach in [O S95]. In these papers the emphasis was on robots with a rather low number of dofs.
Reference: [O S95] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. In Algorithmic Foundations of Robotics, </title> <editor> K. Goldberg et al. </editor> <publisher> (eds.), </publisher>
Reference-contexts: The authors of this paper are from two different teams and the work presented here builds upon previous work they did separately. A single-shot random planner was described in [Ove92] and was subsequently expanded into a learning approach in <ref> [O S95] </ref>. In these papers the emphasis was on robots with a rather low number of dofs. Similar techniques have been applied both to car-like robots that can move forward and backward (symmetrical nonholonomic robots) and car-like robots that can only move forward [ Sve93, SO94]. <p> The customized implementation can solve very difficult path planning queries involving many-dof robots in a fraction of a second, after a learning time of a few dozen seconds. The general implementation solves the same problems in several minutes, but it is still very efficient in less difficult problems. In <ref> [KL94a, KL94b, Kav95, O S95] </ref> prior versions of the method have been applied to a great variety of holonomic robots including planar and spatial articulated robots with revolute, prismatic, and/or spherical joints, fixed or free base, and single or multiple kinematic chains.
References-found: 42

