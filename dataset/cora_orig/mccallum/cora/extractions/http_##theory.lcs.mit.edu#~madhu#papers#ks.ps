URL: http://theory.lcs.mit.edu/~madhu/papers/ks.ps
Refering-URL: http://theory.lcs.mit.edu/~madhu/papers.html
Root-URL: 
Title: ECCC  Optimization Complexity of Constraint Satisfaction Problems  
Author: Sanjeev Khanna Madhu Sudan 
Address: Stanford, CA 94305. Sup  P.O. Box 218, Yorktown Heights, NY 10598.  
Affiliation: Department of Computer Science, Stanford University,  Watson Research Center,  
Note: The  sanjeev@theory.stanford.edu.  ported by a Schlumberger Foundation Fellowship, an OTL grant, and NSF Grant CCR-9357849. madhu@watson.ibm.com. IBM Thomas J.  
Abstract: TR96-028 Electronic Colloquium on Computational Complexity - Reports Series 1996 - available via: FTP: ftp.eccc.uni-trier.de:/pub/eccc/ WWW: http://www.eccc.uni-trier.de/eccc/ Email: ftpmail@ftp.eccc.uni-trier.de with subject 'help eccc' Abstract In 1978, Schaefer [12] considered a subclass of languages in NP and proved a dichotomy theorem for this class. The subclass considered were problems expressible as constraint satisfaction problems, and the dichotomy theorem showed that every language in this class is either in P, or is NP-hard. This result is in sharp contrast to a result of Ladner [9], which shows that such a dichotomy does not hold for NP, unless NP=P. We consider optimization version of the dichotomy question and show an analog of Schae-fer's result for this case. More specifically, we consider optimization version of constraint satisfaction problems and show that every optimization problem in this class is either solvable exactly in P, or is MAX SNP-hard, and hence not approximable to within some constant factor in polynomial time, unless NP=P. This result does not follow directly from Schaefer's result. In particular, the set of problems that turn out to be hard in this case, is quite different from the set of languages which are shown hard by Schaefer's result. A similar result has been independently shown by Creignou [4] using quite different techniques. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. ARORA AND S. SAFRA. </author> <title> Probabilistic checking of proofs: A new characterization of NP. </title> <booktitle> Proceedings of the 33rd Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1992. </year>
Reference: [2] <author> S. ARORA, L. BABAI, J. STERN AND Z. SWEEDYK. </author> <title> The Hardness of Approximate Optima in Lattices, Codes, and Systems of Linear Equations. </title> <booktitle> Proceedings of the 34th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1993. </year>
Reference-contexts: This is not surprising given that problems such as 2SAT and Linear systems over GF (2) are easy problems for the decision version and the maximization versions are known to be hard, even to approximate <ref> [10, 2] </ref>. Nevertheless, the set of problems that are shown to be easy is extremely small. CSP (F ) for F which is 0-valid or 1-valid is really a trivial problem; leaving only the class of 2-monotone functions as somewhat interesting.
Reference: [3] <author> S. ARORA, C. LUND, R. MOTWANI, M. SUDAN, AND M. SZEGEDY. </author> <title> Proof verification and the intractability of approximation problems. </title> <booktitle> Proceedings of the 33rd Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: All problems in this class are known to be approximable to within some constant factor, and the complete problems in the class are known to be non-approximable in polynomial time to within some constant factor, unless NP=P <ref> [3] </ref>. In what follows we describe this class formally and present our main result. 1.1 Definitions and Main Result We start with the definition of a constraint. Definition 1 [Constraint] A constraint is a function f : f0; 1g k ! f0; 1g.
Reference: [4] <author> N. CREIGNOU. </author> <title> A Dichotomy Theorem for Maximum Generalized Satisfiability Problems. </title> <note> To appear in JCSS, </note> <month> December </month> <year> 1995. </year>
Reference-contexts: Later we remove the assumptions and Theorem 1 and Theorem 2 is shown without the use of any constants or repetition. In fact, in the process we remove a minor irritant from Schaefer's proof which actually needed to use repetitions. Related Work Theorem 1 was independently discovered by Creignou <ref> [4] </ref>. Here we clarify the main points of difference between this paper and that of [4]. In [4], the easy" problems are characterized by a 3 graph-theoretic representation (this is possible since the functions involved in the easy side can be expressed as CNF formulas such that each clause is implicative, <p> In fact, in the process we remove a minor irritant from Schaefer's proof which actually needed to use repetitions. Related Work Theorem 1 was independently discovered by Creignou <ref> [4] </ref>. Here we clarify the main points of difference between this paper and that of [4]. In [4], the easy" problems are characterized by a 3 graph-theoretic representation (this is possible since the functions involved in the easy side can be expressed as CNF formulas such that each clause is implicative, that is of the form (x ! y) (:x _ y)) and the proof uses <p> In fact, in the process we remove a minor irritant from Schaefer's proof which actually needed to use repetitions. Related Work Theorem 1 was independently discovered by Creignou <ref> [4] </ref>. Here we clarify the main points of difference between this paper and that of [4]. In [4], the easy" problems are characterized by a 3 graph-theoretic representation (this is possible since the functions involved in the easy side can be expressed as CNF formulas such that each clause is implicative, that is of the form (x ! y) (:x _ y)) and the proof uses graph-theoretic ideas. <p> Our result are stated and established via techniques in the more general context of constraint satisfaction. The proof might be adapted to problems over other domains (larger than the boolean one), whereas it seems unlikely that one could extend the proof of <ref> [4] </ref> in such a way. Additionally, technical aspects of the proof given here may be of some independent interest. Particularly, the notion of ff-implementation defined here gives a clear way to translate all the hardness results shown here into hardness of approximation results.
Reference: [5] <author> T. FEDER AND M. VARDI. </author> <title> Monotone monadic SNP and constraint satisfaction. </title> <booktitle> Proceedings of the 25th Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1993. </year>
Reference-contexts: He refers to this as a dichotomy theorem, since it partitions the class of problems studied into two polynomial time equivalent classes. A further study along these lines looking for other dichotomic classes within NP was carried out more recently by Feder and Vardi <ref> [5] </ref>. They suggest several promising classes which may show such a dichotomy. The works of Schaefer and Feder and Vardi motivates our class of optimization problems which we refer to as constraint satisfaction problems fl . <p> Is it then the case that every problem in this class is either in P or MAX SNP-hard ? Feder and Vardi <ref> [5] </ref> recently initiated a systematic investigation to find the largest subclass of NP which exhibits a dichotomy for the decision version of the problems. Their efforts identify a subclass of SNP (the decision class underlying MAX SNP), called MMSNP monotone, monadic SNP with no inequalities. <p> It contains problems which are in P or MAX SNP-hard or n * -hard and and yet does not have any intermediate approximation classes sandwiched in between. 13 Acknowledgments We would like to thank Tomas Feder for providing us with a timely copy of the full version of <ref> [5] </ref>. We would like to thank David Karger and David Williamson for their valuable comments.
Reference: [6] <author> U. FEIGE, S. GOLDWASSER, L. LOVASZ, S. SAFRA, AND M. SZEGEDY. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> Proceedings of the 32nd Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1991. </year>
Reference: [7] <author> S. KHANNA, R. MOTWANI, M. SUDAN, AND U. VAZIRANI. </author> <title> On Syntactic versus Computational Views of Approximation. </title> <booktitle> Proceedings of the 35th Symposium on Foundations of Computer Science, IEEE, </booktitle> <year> 1994 </year>
Reference-contexts: We feel that it further stresses the role of syntactic prescriptions in the study of approximability. This was the fundamental insight on which the class MAX SNP was defined by Papadimitriou and Yannakakis [10]. Recent work of Khanna, Motwani, Sudan and Vazirani <ref> [7] </ref> also stresses this relationship, where they used syntactically defined classes to identify a structured core of hard problems for approximation classes such as APX, log-APX and poly-APX. A natural question arising from this work is that of identifying larger classes which exhibit such dichotomies with respect to approximability.
Reference: [8] <author> S. KHANNA, M. SUDAN, AND D.P. WILLIAMSON. </author> <title> A Trichotomy Theorem for a Class of Structure Optimization Problems. </title> <note> In preparation. </note>
Reference-contexts: They provide strong evidence that this class may in fact exhibit a P versus NP-hard dichotomy. We suspect that it is probably the case that the optimization analog of the class MMSNP exhibits a P versus MAX SNP-hard dichotomy. In a recent related work, Khanna, Sudan and Williamson <ref> [8] </ref> have studied the optimization complexity of finding an assignment with maximum number of ones such that it satisfies every constraint in a given SAT (F ) problem. This class contains many natural optimization problems such as MAX CUT and MAX CLIQUE as its members.
Reference: [9] <author> R. LADNER. </author> <title> On the structure of polynomial time reducibility. </title> <journal> Journal of the ACM, </journal> <volume> 22:1, </volume> <pages> pp. 155-171, </pages> <year> 1975. </year>
Reference-contexts: Even if the problem is presented in its simplest form it may be the case that the answer need not be easy" or NP-hard this is established by a theorem of Ladner <ref> [9] </ref>. In the presence of such barriers one is forced to weaken one's goals and focus one's attention onto a restricted subclass of NPO (optimization problems within NP) in the hope that some features of hard problems can be isolated from this subclass.
Reference: [10] <author> C. PAPADIMITRIOU AND M. YANNAKAKIS. </author> <title> Optimization, approximation and complexity classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43, </volume> <pages> pp. 425-440, </pages> <year> 1991. </year>
Reference-contexts: These are problems obtained from Schaefer's class of decision problems in a natural fashion and are a subset of the problems in the class MAX SNP. Recall that MAX SNP is the class of optimization problems defined by Papadimitriou and Yannakakis <ref> [10] </ref> based on syntactic prescriptions. All problems in this class are known to be approximable to within some constant factor, and the complete problems in the class are known to be non-approximable in polynomial time to within some constant factor, unless NP=P [3]. <p> This is not surprising given that problems such as 2SAT and Linear systems over GF (2) are easy problems for the decision version and the maximization versions are known to be hard, even to approximate <ref> [10, 2] </ref>. Nevertheless, the set of problems that are shown to be easy is extremely small. CSP (F ) for F which is 0-valid or 1-valid is really a trivial problem; leaving only the class of 2-monotone functions as somewhat interesting. <p> The main MAX SNP-hard problem which we reduce to any of these new ones is the MAX CUT problem shown to be MAX SNP hard by Papadimitriou and Yannakakis <ref> [10] </ref>. Initially we consider the case where we are essentially allowed to repeat variables and set some variables to true or false. This provides a relatively painless proof that if a function is not 2-monotone, then it provides a MAX SNP hard problem. <p> We feel that it further stresses the role of syntactic prescriptions in the study of approximability. This was the fundamental insight on which the class MAX SNP was defined by Papadimitriou and Yannakakis <ref> [10] </ref>. Recent work of Khanna, Motwani, Sudan and Vazirani [7] also stresses this relationship, where they used syntactically defined classes to identify a structured core of hard problems for approximation classes such as APX, log-APX and poly-APX.
Reference: [11] <author> E. PETRANK. </author> <title> The Hardness of Approximation: Gap Location. Computational Complexity, </title> <editor> v. </editor> <volume> 4, </volume> <year> 1994. </year>
Reference-contexts: This is termed hardness at gap location 1 by Petrank <ref> [11] </ref> who highlights the usefulness of such hardness results in other reductions. 11 An important characteristic of ff implementation of a function f is that if we are given an assignment to the function variables which does not satisfy f , it can always be extended to the auxiliary variables such
Reference: [12] <author> T. SCHAEFER. </author> <booktitle> The complexity of satisfiability problems Proceedings of the 10th Annual Symposium on Theory of Computing, ACM, </booktitle> <year> 1978. </year> <note> i </note>
Reference-contexts: Our choice of the appropriate restriction comes from the work of Schaefer <ref> [12] </ref> who carried out an analogous investigation in the case of decision problems. Schaefer considered a restriction of NP that he called satisfiability problems and successfully characterized every problem in this (infinite) class as being easy (polynomial time decidable) or hard (NP-hard). <p> Also, the fact that we do not need to use repetition of variables in functions, to obtain hardness results is another technical improvement on previous results, including that of <ref> [12] </ref>. Rest of this paper Sections 2 and 3 are devoted to proving Theorem 1. In Section 4 we show how to prove Theorem 2.
References-found: 12

