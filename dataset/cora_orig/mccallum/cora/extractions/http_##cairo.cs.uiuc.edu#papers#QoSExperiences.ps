URL: http://cairo.cs.uiuc.edu/papers/QoSExperiences.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: Experiences with QoS Brokerage and Enforcement  
Author: Klara Nahrstedt 
Affiliation: Computer Science Department University of Illinois at Urbana-Champaign  
Abstract: We designed and implemented end-point services and protocols for provision of end-to-end QoS guarantees. They strongly rely on a distributed QoS management entity, called the QoS Broker, to translate, negotiate/renegotiate, admit, monitor and adapt end-to-end QoS as a contract, as well as on end-to-end soft real-time protocols to transmit multimedia according to the negotiated contract. We tested our approach on a telerobotics application and a video-on-demand application. This paper presents various lessons and experiences we learned during the design and implementation of the QoS brokerage and enforcement services and protocols. Performance results show that the QoS brokerage and enforcement services can provide end-to-end QoS guarantees. 
Abstract-found: 1
Intro-found: 1
Reference: [CSZ92] <author> D.D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting Real-Time Applications in an Integrated Services Packet Network: Architecture and Mechanism. </title> <booktitle> In SIGCOMM'92, </booktitle> <pages> pages 14-22, </pages> <address> Baltimore, MD, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The QoS Broker concept is general enough to be useful across many implementation technologies. It can incorporate, for example, the integrated layering approach in the control-management plane, proposed by Clark, et al. <ref> [CSZ92] </ref>. Furthermore, the broker has interaction mechanisms in it to make `contracts' with an OS as well as with network resource management. When operating systems and network subsystems for which contract protocols exist are available, the broker uses them.
Reference: [CT90] <author> D.D. Clark and D.L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In ACM SIGCOMM'90, </booktitle> <pages> pages 200-208, </pages> <address> Philadelphia, PA, </address> <month> September 2 </month> <year> 1990. </year>
Reference-contexts: The obvious gain came from the sharing of data in a single address space; which reduced or eliminated the need for copying data between layers. Thus, the implementation exploited many of the features of the "Integrated Layer Processing" ideas of Clark and Ten-nenhouse <ref> [CT90] </ref>, and some performance gain from this would not be surprising. The outstanding question was the ability of the implementation to meet the guarantees required by the telerobotics application.
Reference: [Dav93] <author> B. S. Davie. </author> <title> The Architecture and Implementation of a High-Speed Host Interface. </title> <journal> IEEE JSAC, </journal> <volume> 11(2) </volume> <pages> 228-239, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Unless the adapter is capable of multiplexing several DMAs at a time, this problem is fundamental. One means of addressing this problem is to perform DMA in smaller units, such as an ATM cell-size, as was done by Davie <ref> [Dav93] </ref>. Even in this case, the algorithms employed to manage the manipulation of packets or cells must be archi-tected to reflect the timing requirements of the end-to-end system if timing criteria are not to be violated. 2.
Reference: [DSP93] <author> V. Desikachar, M. Stein, and R. Paul. </author> <title> Wide Bandwidth, Distributed Digital Teleoperation. </title> <type> Technical Report MS-CIS-93-65, </type> <institution> University of Pennsylvania, </institution> <address> CSDepartment, Philadelphia, PA, </address> <year> 1993. </year>
Reference-contexts: The comparison from the architectural point of view is shown in Figure 1. Telerobotics with TCP/IP/Ethernet: The time delay of 1.22 second reported in <ref> [DSP93] </ref> was based on the following experimental setup: The application subsystem and TCP/IP/Ethernet at the master side resided at IRIS workstation. The application subsystem and TCP/IP/Ethernet at the slave side used SUN 4 station.
Reference: [Nah95] <author> K. Nahrstedt. </author> <title> An Architecture for End-to-End Quality of Service Provision and its Experimental Validation. </title> <type> PhD thesis, </type> <institution> University of Penn-sylvania, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The main emphasize was on the measured QoS parameter: end-to-end (processing) delay between the sources and sinks at the master and slave side. Complete measurements are described in <ref> [Nah95] </ref>. Here, we show the results for some selected cases. The statistical evaluation was based on 100 experiments per Scenario if admitted. QoS Broker Performance: The performance of the broker was measured on lightly loaded workstations, i.e., no additional application software was running on both workstations.
Reference: [NS95] <author> K. Nahrstedt and J. M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: The QoS management is performed by the distributed QoS management entity, called the QoS Broker <ref> [NS95] </ref>. The broker utilizes negotiation, admission, adaptation and other management services, called together the QoS brokerage services, to assist in provision of resources for a connection with end-to-end resource guarantees. We tested the QoS architecture on telerobotics and video-on-demand (VOD) applications and the measured performance revealed many valuable lessons.
Reference: [NS96] <author> K. Nahrstedt and J. M. Smith. </author> <title> Design, Implementation and Experiences of the OMEGA EndPoint Architecture. </title> <journal> IEEE JSAC, </journal> <volume> 14(7) </volume> <pages> 1263-1279, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Provision of end-to-end quality of service (QoS) guarantees for multimedia streams became one of major requirements for a design and implementation of complex multimedia distributed systems. We worked on this requirement and we specified, designed and implemented QoS management architecture <ref> [NS96] </ref> with end-point communication services and protocols for provision of hard and soft end-to-end QoS guarantees. The services rely on network guaranteed or best-effort services, and use selected real-time OS services. <p> The reason is that this would allow asymmetric applications use different underlying reservation schemes. The design of a constructive algorithm which creates a feasible and correct schedule (joint schedule) for multimedia streams based on QoS was needed <ref> [NS96] </ref>. The algorithm allows to input QoS specifications of individual streams and task specifications for processing the streams and the broker provides a feasible schedule. <p> In Scenario 2 we displayed approximately 20 frames/second with EED of 52 ms. For Scenario 3 and 4, both scenarios were rejected by the admission service because of large video processing times violating the sensory data deadlines of 20 ms (sample rate of sensory data) <ref> [NS96] </ref>. 3.2 Video-on-Demand application Our adaptive Video-on-Demand (VOD) application on top of a `best-effort' environment (Figure 2) allows to playback movie clips with the content of a lecturer giving a presentation. For this type of content, smooth audio/video playback and lip synchronization are crucial.
Reference: [QN97] <author> L. Qiao and K. Nahrstedt. </author> <title> Lip Synchronization within an Adaptive VOD System. </title> <booktitle> In SPIE Multimedia Computing and Networking 1997, </booktitle> <address> San Jose, CA, </address> <month> Febraury </month> <year> 1997. </year>
Reference-contexts: The monitoring and adaptive synchronization in MMGP at the server and client side were tightly coupled in a tuning system and created a complex feedback control loop to adapt against changes introduced by the user, by the network/OS, or between application resources available during recording and playback phases <ref> [QN97] </ref>. The adaptive synchronization protocol had been tested on various video clips. We selected one representative movie to show our results. The measured metrics of interest was the synchronization skew between audio and video at the client side during the playback phase. <p> It is important to note that our adaptive scheme is scalable and works for various rate changes between the recording and the system rate (e.g., change from requested 20 fps to system rate of 7 or 5 fps, depending on available resources). Extensive tests and results are shown in <ref> [QN97] </ref>. 3.2.3 Experimental results The results from the test are showed in the Figure 3. The average skew was 24.08 ms with standard deviation of 49.05 ms. Our results showed that the algorithms for QoS enforcement `lip synchronization' were effective and responded quickly to the dynamic status of the system.
Reference: [SE93] <author> R. Steinmetz and C. Engler. </author> <title> Human Perception of Media Synchronization. </title> <type> Technical Report 43.9310, </type> <institution> IBM European Networking Center Hei-delberg, </institution> <address> Heidelberg, Germany, </address> <year> 1993. </year>
Reference-contexts: However, during the presentation the jitter must be minimal and the intermediate delay must be such that a smooth periodic playback behavior corresponding to the recording video frame rate is preserved. * Audio and video must be lip synchronized with lip synchronization skew of (+) or (-) 80 ms <ref> [SE93] </ref>((+) means audio is ahead of video, (-) means video is ahead of audio). 3.2.2 Implementation choices Our VOD application with its clients and server were implemented on SGI Indy machines under IRIX OS. The client and the server QoS brokerage and enforcement services were connected via 10 Mbps Ethernet.
References-found: 9

