URL: http://www.cs.toronto.edu/~paige/Writing/hoom.ps.gz
Refering-URL: http://www.cs.toronto.edu/~paige/use.html
Root-URL: 
Email: paige@cs.toronto.edu  
Title: Using Heterogeneous Notations to Integrate a Formal and Object-Oriented Method  
Author: Richard F. Paige 
Date: February 7, 1997  
Address: Toronto, Ontario, M5S 3G4, Canada  
Affiliation: Department of Computer Science, University of Toronto,  
Abstract: We combine a formal specification technique with an object-oriented method using a meta-method for formal method integration based on heterogeneous notations [18, 19]. We discuss the integrated method, and then apply it to an example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Back, R.J.R. and von Wright, J. </author> <title> (1989) A Lattice-Theoretical Basis for a Specification Language. In Mathematics of Program Construction, </title> <publisher> LNCS 375, Springer-Verlag. </publisher>
Reference-contexts: SSToPred (w : [ pre; post ]) b= frame w * (pre ) post ) [17] describes how to map to a predicate that includes references to the time variables t and t 0 . The predica-tive notation cannot represent angelic specifications <ref> [1] </ref> and terminating but otherwise arbitrary behaviour [16], and so SSToPred cannot translate these specifications and maintain their interpretation. The Z schema Op b= [ S ; i ? : I ; o! : O j pred ] can be mapped into a specification statement using the function ZToSS .
Reference: [2] <author> Barden, R., Stepney, S., and Cooper. D. </author> <title> (1994) Z in Practice, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: We next apply the meta-method in combining the Coad-Yourdon method with a Z specification style. 4 Coad-Yourdon/Z Method In this section, we describe a heterogeneous variant of Coad-Yourdon OOA/D. We integrate a Z specification style (associated with a technique for data refinement) <ref> [2] </ref> and the Coad-Yourdon method. We describe when Z can be composed with Coad-Yourdon notations, and how the Coad-Yourdon procedures can be combined with Z specification styles. We examine this integration for several reasons. It demonstrates how an object-oriented method can be extended to (restrictably) include formal methods. <p> document; this is based on the lexicon. wordSeq : seq CHAR ! seq word 8 d : seq CHAR; s : seq word * (wordSeq d = s) , ((d - pWSpace = a = s) ^ (ran s = lexicon d )) (- is the anti-filter function defined in <ref> [2] </ref>. d - pWSpace is a sequence containing those characters of d that are not in the set pWSpace.) The operation to obtain a token from a text file f ? can be specified using these functions. Note that the token will contain letters and numbers only.
Reference: [3] <author> Booch, G. </author> <title> (1994) Object-oriented Design, </title> <note> Second Edition, Benjamin-Cummings. </note>
Reference: [4] <author> Coad, P. and Yourdon, E. </author> <title> (1990) Object-oriented Analysis, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: The focus of this paper is to further demonstrate a general formal method integration technique based on heterogeneous notations [18] by combining a formal specification technique (Z [25]) with a semiformal object-oriented method (Coad-Yourdon <ref> [4] </ref>). We present and discuss the integrated technique and then apply it to an example. Before proceeding, we briefly touch on some background material on heterogeneous notations in general. <p> To demonstrate this procedure, we carry it out for the object-oriented notations of Coad-Yourdon. If the interpretation and formalization that we provide in this demonstrate is inappropriate for an application, then a new interpretation and formalization should be taken. Coad-Yourdon object-oriented analysis and design (OOA/D) <ref> [4] </ref> use notations especially constructed for describing objects, and on existing notations for describing data and procedural details.
Reference: [5] <author> DeMarco, T. </author> <title> (1982) Controlling Software Projects: Management, Measurement, and Estimation, </title> <publisher> Yourdon Press. </publisher>
Reference-contexts: 1 Introduction It is generally accepted that a single method for software development is insufficient for all situations <ref> [11, 5] </ref>. This is due to the complexity of the problems being solved, the diversity of expertise, and the limitations of a single set of notations and procedures, among other reasons.
Reference: [6] <author> Hall, A. </author> <year> (1994). </year> <title> Specifying and Interpreting Class Hierarchies in Z. </title> <booktitle> In Proc. Eighth Z User Meeting, Workshops in Computing Series, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In this section, we discuss object and class specification, and the formalization of a few of the Coad-Yourdon specifications in Z. We base the semantics of objects on the work of Hall <ref> [6] </ref>, and adapt the work of Hammond [8] to Coad-Yourdon notations. A key part of object-oriented analysis is the identification of objects. An example of an object is given in Figure 2. <p> A key part of object-oriented analysis is the identification of objects. An example of an object is given in Figure 2. Object CHEMICALS has attributes litres, formulas, and value, but has no specified methods. (Coad-Yourdon convention is that double rounded rectangles specify multiple instances of objects.) In <ref> [6] </ref>, an object is described by a Z state schema and a collection of operation schemas. The state schema contributes a variable id whose type is the set of identities of that kind of object. Consider an object O with a number of attributes and methods. <p> Chemicals id : CHEM ID litres : PN formulas : PFORMULA value : N The collection of all existing instances of CHEMICALS in a particular system is mod-elled as a data store, using the DS convention from <ref> [6] </ref>. A state schema DSChemicals is used to model all object instances in the system. DSChemicals chemicals : F Chemicals idChemicals : CHEM ID 7 Chemicals idChemicals = fc : chemicals * c:id 7! cg The function idChemicals guarantees that no two objects in the state have the same identity. <p> DSChemicals chemicals : F Chemicals idChemicals : CHEM ID 7 Chemicals idChemicals = fc : chemicals * c:id 7! cg The function idChemicals guarantees that no two objects in the state have the same identity. A second convention from <ref> [6] </ref> is used in specifying methods. The notation ROp denotes an operation schema Op converted into a function. If Op is a method of object R as follows Op args? : A id 0 = id then the following definition of ROp is assumed. <p> A method f of an object R is specified as: Rf where extra invariant details can be added as necessary. The second part of method specification is to specify the effect of a method on the system. This is encompassed in Convention 1, adapted from <ref> [6] </ref>. 4 Convention 1 For a given system, the effect of a method f of a unique object R on the system is spec ified as an operation schema, RfSystem, as follows. <p> With this approach, operations are specified in terms of their overall effect on the system state, rather than in terms of the messages that are sent in implementing the operation. We refer the reader to <ref> [6] </ref> for class models and further details. We now examine how the preceding might be used in expressing further Coad-Yourdon notations. We start by considering notations to describe relationships between objects. An assembly structure describes object assembly relations. Consider the structure shown in Figure 3. <p> Further details of this approach|including conventions to handle method inheritance|are discussed in <ref> [6] </ref>. Hall also provides several sound (but not complete) conditions for the subclass relation in the intensional semantics to hold. An instance diagram describes relationships between object instances. An example of a simple instance diagram is shown in Figure 5.
Reference: [7] <author> Hall, A. </author> <title> (1996) Using Formal Methods to Develop an ATC Information System. </title> <journal> IEEE Software, </journal> <volume> 13(2). </volume>
Reference-contexts: Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages [28]; for writing simpler specifications than might be produced using a single language [29]; for ease of expression; and because they have been proven successful in practice <ref> [22, 23, 28, 7] </ref>. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. Precise meaning is provided by a heterogeneous framework.
Reference: [8] <author> Hammond, J. </author> <title> (1994) Producing Z Specifications from Object-Oriented Analysis. </title> <booktitle> In Proc. Eighth Z User Meeting, </booktitle> <address> Cambridge, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In this section, we discuss object and class specification, and the formalization of a few of the Coad-Yourdon specifications in Z. We base the semantics of objects on the work of Hall [6], and adapt the work of Hammond <ref> [8] </ref> to Coad-Yourdon notations. A key part of object-oriented analysis is the identification of objects. An example of an object is given in Figure 2. <p> Define appropriate types for the attributes of O. 2. Define a schema O which has components matching the object's attributes, using the types from 1. 3. If the object has a single identifying attribute, then name the corresponding schema component id. (See <ref> [8] </ref> for an approach to handling com pound attributes.) 4. Add invariants to the schema as necessary. CHEMICALS then might be formally expressed as in the following Z state schema. <p> That is, a pure formal (Z-based) method can be generated, or a pure semiformal (Coad-Yourdon based) method can be extracted, and then fol lowed. Z has been linked with object-oriented methods in the past, e.g., see <ref> [8] </ref>, for a combination of Z with Shlaer-Mellor [24]. The main difference between Hammond's general approach and our own is in procedure: Hammond constructs a transformation from the Shlaer-Mellor products into Z, and interleaving of different method steps is not considered.
Reference: [9] <author> Hehner, E.C.R. </author> <title> (1993) A Practical Theory of Programming, </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It is also used 1 to provide the basis on which integrated methods are defined. The framework that we use in this paper is depicted in Figure 1. The predicate notation is from <ref> [9] </ref>. Specification statements (i.e., w : [pre; post]) are from [16]; Z is from [25]. The other notations are from the Coad-Yourdon object-oriented method. In the diagram, the arrows represent translations and formalizations that we explicitly write down. <p> The simplifying assumption that we make is that all languages use the primed/unprimed notation of <ref> [9] </ref> to distinguish between poststate and 2 prestate. We also assume that type and type constructors can be translated freely. As is done in [18], we denote the translations as functions from language to language. <p> We also assume that type and type constructors can be translated freely. As is done in [18], we denote the translations as functions from language to language. A predicate specification frame w *P that does not refer to the time variables t; t 0 <ref> [9] </ref> can be translated to a specification statement [16] using the mapping PredToSS . PredToSS (frame w * P ) b= w : [ true; P ]: (Alternative translations are given in [17]; this translation will suffice for our purposes. <p> Any of the three axes can be selected; and the rotation may be of arbitrary angle (0-360 degrees). We use the method from Section 4, integrated with a third technique|predicative programming <ref> [9] </ref>. The Coad-Yourdon procedures organize the overall development. The Z notation will be used in two places: for supplying a formal semantics to heterogeneous specification; and for specifying several objects that will have complex functionality. <p> To continue the design, we must provide specifications for each method and attribute in the system. This is considered fully in [18]. We provide only a few samples here, skipping most of the details. A Text object contains three attributes as follows (using the notation from <ref> [9] </ref>): string : [flchar]; len : nat ; pos : 0; ::len The substr method of a Text object is as follows. 18 Method: Textsubstr Inputs: integer start, length Results: if length &gt; 0 ^ start 0 ^ start + length &lt; len then string [start ; ::start + length] else <p> SE b= frame s * s 0 = s cj xj : #W 1 * Wj = `e ^ W (j 1) 62 VOWEL (x is the bunch constructor of <ref> [9] </ref>, and cj is bunch cardinality.) Words with an `io' fragment will have their syllable count incremented if the `io' is at the beginning of the word, or if the `io' is immediately preceded by a hard sound. <p> In the refinement tree, define the predicate P as follows: P b= Wj = `u ^ W (j + 1) = `a ^ The refinement can then proceed. In the first step, we apply the substitution rule <ref> [9] </ref>. UA ( i := 0: s 0 = s + cj xj : i ; ::#W 1 * P We refine the new specification using a tail recursive construction.
Reference: [10] <editor> Hinchey, M. and Bowen, J. </editor> <booktitle> (1995) Applications of Formal Methods, </booktitle> <publisher> Prentice-Hall. </publisher>
Reference: [11] <author> Jackson, M.A. </author> <title> (1995) Software Requirements and Specifications, </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: 1 Introduction It is generally accepted that a single method for software development is insufficient for all situations <ref> [11, 5] </ref>. This is due to the complexity of the problems being solved, the diversity of expertise, and the limitations of a single set of notations and procedures, among other reasons.
Reference: [12] <author> King, S. </author> <title> (1990) Z and the refinement calculus. In VDM `90: VDM and Z Formal Methods in Software Development, </title> <publisher> LNCS 428, Springer-Verlag. </publisher>
Reference-contexts: The Z schema Op b= [ S ; i ? : I ; o! : O j pred ] can be mapped into a specification statement using the function ZToSS . This result is due to <ref> [12] </ref>. ZToSS (Op) b= w : [ (9 w 0 : T j inv * pred ); pred ] (The -schema denotes those state elements that Op can change.
Reference: [13] <author> Kronlof, K. (ed.) </author> <title> (1993) Method Integration: Concepts and Case Studies, </title> <publisher> Wiley. </publisher>
Reference-contexts: This is due to the complexity of the problems being solved, the diversity of expertise, and the limitations of a single set of notations and procedures, among other reasons. Method integration <ref> [13, 18] </ref> is a technique that can be used to abet multiple-method use, and solve some of the problems associated with using a single technique. <p> Method integration has been studied in at least two settings: in the context of integrating particular methods [20, 22]; and, in a setting where systematic and general-purpose approaches are defined <ref> [13, 14, 18, 19] </ref>. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented.
Reference: [14] <author> MetaPHOR Project Group. </author> <title> (1994) MetaPHOR: Metamodeling, Principles, Hypertext, Objects and Repositories. </title> <type> Technical Report TR-7, </type> <institution> University of Jyvaskyla. </institution>
Reference-contexts: Method integration has been studied in at least two settings: in the context of integrating particular methods [20, 22]; and, in a setting where systematic and general-purpose approaches are defined <ref> [13, 14, 18, 19] </ref>. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented. <p> The approach to method integration offered by heterogeneous notations is general, in that it applies to any techniques that make use of notations. In future work, we hope to extend the meta-method by combining procedure modelling (e.g., as in <ref> [14] </ref>) so as to better support a completely formal model of integration. Acknowledgements. Thanks to Ric Hehner, Ric Holt, Dave Wortman, Alberto Mendelzon, and John Mylopoulos for suggestions.
Reference: [15] <author> Meyer, B. </author> <title> (1990) Object-oriented Software Construction, Second Edition, </title> <publisher> Prentice-Hall. </publisher>
Reference: [16] <author> Morgan, </author> <title> C.C. (1994) Programming from Specifications, Second Edition, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: It is also used 1 to provide the basis on which integrated methods are defined. The framework that we use in this paper is depicted in Figure 1. The predicate notation is from [9]. Specification statements (i.e., w : [pre; post]) are from <ref> [16] </ref>; Z is from [25]. The other notations are from the Coad-Yourdon object-oriented method. In the diagram, the arrows represent translations and formalizations that we explicitly write down. The full details of the translations involving formalisms are given in [17, 18]. <p> As is done in [18], we denote the translations as functions from language to language. A predicate specification frame w *P that does not refer to the time variables t; t 0 [9] can be translated to a specification statement <ref> [16] </ref> using the mapping PredToSS . PredToSS (frame w * P ) b= w : [ true; P ]: (Alternative translations are given in [17]; this translation will suffice for our purposes. <p> SSToPred (w : [ pre; post ]) b= frame w * (pre ) post ) [17] describes how to map to a predicate that includes references to the time variables t and t 0 . The predica-tive notation cannot represent angelic specifications [1] and terminating but otherwise arbitrary behaviour <ref> [16] </ref>, and so SSToPred cannot translate these specifications and maintain their interpretation. The Z schema Op b= [ S ; i ? : I ; o! : O j pred ] can be mapped into a specification statement using the function ZToSS . This result is due to [12]. <p> The interior specification statement (marked with a ) is refined first by adding a following assignment, and then by using Law 4.1 of <ref> [16] </ref>, to introduce a guarded alternation. v if R ! syllables := syllables + 1 [] :R ! skip fi ; The Lex object and Vector class are straightforward to implement.
Reference: [17] <author> Paige, </author> <title> R.F. (1996) Heterogeneous Notations for Formal Method Integration, </title> <note> submitted to Formal Aspects of Computing. </note>
Reference-contexts: Specification statements (i.e., w : [pre; post]) are from [16]; Z is from [25]. The other notations are from the Coad-Yourdon object-oriented method. In the diagram, the arrows represent translations and formalizations that we explicitly write down. The full details of the translations involving formalisms are given in <ref> [17, 18] </ref>. We provide the specifics for the semiformal object-oriented notations in Section 2. Unlike approaches to combining notations that use a single formalism to define the meaning of a heterogeneous specification, the framework above defines a method that can be used to give a semantics to a heterogeneous specification. <p> A predicate specification frame w *P that does not refer to the time variables t; t 0 [9] can be translated to a specification statement [16] using the mapping PredToSS . PredToSS (frame w * P ) b= w : [ true; P ]: (Alternative translations are given in <ref> [17] </ref>; this translation will suffice for our purposes. Translations are given in [17] for handling time variables.) A specification statement can be translated to a predicate as follows. SSToPred (w : [ pre; post ]) b= frame w * (pre ) post ) [17] describes how to map to a predicate <p> PredToSS (frame w * P ) b= w : [ true; P ]: (Alternative translations are given in <ref> [17] </ref>; this translation will suffice for our purposes. Translations are given in [17] for handling time variables.) A specification statement can be translated to a predicate as follows. SSToPred (w : [ pre; post ]) b= frame w * (pre ) post ) [17] describes how to map to a predicate that includes references to the time variables t and t 0 . <p> P ]: (Alternative translations are given in <ref> [17] </ref>; this translation will suffice for our purposes. Translations are given in [17] for handling time variables.) A specification statement can be translated to a predicate as follows. SSToPred (w : [ pre; post ]) b= frame w * (pre ) post ) [17] describes how to map to a predicate that includes references to the time variables t and t 0 . The predica-tive notation cannot represent angelic specifications [1] and terminating but otherwise arbitrary behaviour [16], and so SSToPred cannot translate these specifications and maintain their interpretation.
Reference: [18] <author> Paige, </author> <title> R.F. (1997) Formal Method Integration via Heterogeneous Notations, </title> <type> PhD Dissertation, </type> <institution> University of Toronto, expected. </institution>
Reference-contexts: This is due to the complexity of the problems being solved, the diversity of expertise, and the limitations of a single set of notations and procedures, among other reasons. Method integration <ref> [13, 18] </ref> is a technique that can be used to abet multiple-method use, and solve some of the problems associated with using a single technique. <p> Method integration has been studied in at least two settings: in the context of integrating particular methods [20, 22]; and, in a setting where systematic and general-purpose approaches are defined <ref> [13, 14, 18, 19] </ref>. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented. <p> Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented. The focus of this paper is to further demonstrate a general formal method integration technique based on heterogeneous notations <ref> [18] </ref> by combining a formal specification technique (Z [25]) with a semiformal object-oriented method (Coad-Yourdon [4]). We present and discuss the integrated technique and then apply it to an example. Before proceeding, we briefly touch on some background material on heterogeneous notations in general. <p> We present and discuss the integrated technique and then apply it to an example. Before proceeding, we briefly touch on some background material on heterogeneous notations in general. Further details can be found in the references, e.g., <ref> [18, 19] </ref>. 1.1 Heterogeneous notations and specifications Notations play an important role in software development methods: they are a facility through which developers make use of a method's procedures. <p> Precise meaning is provided by a heterogeneous framework. Definition 2 A heterogeneous framework provides the underlying formal semantics to compositions of specifications written in two or more notations. The heterogeneous framework we use in this paper is part of one presented in <ref> [18] </ref>. It is created by translation. We discuss it in the next section. 1.2 A heterogeneous framework A heterogeneous framework gives a precise semantics to a heterogeneous specification [18]. It is also used 1 to provide the basis on which integrated methods are defined. <p> The heterogeneous framework we use in this paper is part of one presented in <ref> [18] </ref>. It is created by translation. We discuss it in the next section. 1.2 A heterogeneous framework A heterogeneous framework gives a precise semantics to a heterogeneous specification [18]. It is also used 1 to provide the basis on which integrated methods are defined. The framework that we use in this paper is depicted in Figure 1. The predicate notation is from [9]. Specification statements (i.e., w : [pre; post]) are from [16]; Z is from [25]. <p> Specification statements (i.e., w : [pre; post]) are from [16]; Z is from [25]. The other notations are from the Coad-Yourdon object-oriented method. In the diagram, the arrows represent translations and formalizations that we explicitly write down. The full details of the translations involving formalisms are given in <ref> [17, 18] </ref>. We provide the specifics for the semiformal object-oriented notations in Section 2. Unlike approaches to combining notations that use a single formalism to define the meaning of a heterogeneous specification, the framework above defines a method that can be used to give a semantics to a heterogeneous specification. <p> The notation used to define the formal meaning of a heterogeneous specification can be fixed once an application is determined. A set of translations was first described in detail in <ref> [18] </ref>. We present the framework from Figure 1 in this section, starting with translations involving only formal notations, and then presenting the translations involving the object-oriented notations. 2.1 Formal translations We briefly summarize several translations between formalisms here. <p> The simplifying assumption that we make is that all languages use the primed/unprimed notation of [9] to distinguish between poststate and 2 prestate. We also assume that type and type constructors can be translated freely. As is done in <ref> [18] </ref>, we denote the translations as functions from language to language. A predicate specification frame w *P that does not refer to the time variables t; t 0 [9] can be translated to a specification statement [16] using the mapping PredToSS . <p> To add such semiformal notations to the framework, we must fix an interpretation for each notation and then express specifications in this notation in one of the formalisms in the framework <ref> [18] </ref>. Then, compositions involving this semiformalism can be written with a precise meaning given in terms of formal heterogeneous or homogeneous specifications. To demonstrate this procedure, we carry it out for the object-oriented notations of Coad-Yourdon. <p> We have not provided a complete description of all object concepts; extension of the technique to polymorphism and other facilities still needs to be considered. 3 A Meta-Method Based on Heterogeneous Notations A meta-method for formal method integration was presented in <ref> [18, 19] </ref>. The meta-method is based on heterogeneous notations, and describes a strategy for constructing relationships between procedure steps. We recap the steps of the method here for the sake of completeness. 1. Fix a base method. <p> Then, relations between the generalized base procedures and invasive procedures can be defined. Possible relations are described in <ref> [18] </ref>; they include: * linking of method steps by translation, e.g., as in [22]; * extension of a sequence of procedures by replacing certain steps with generalized pro cedure steps [18]; * parallel use of procedures by describing relationships that interleave the use of two or more separate sequences of procedures; <p> Then, relations between the generalized base procedures and invasive procedures can be defined. Possible relations are described in <ref> [18] </ref>; they include: * linking of method steps by translation, e.g., as in [22]; * extension of a sequence of procedures by replacing certain steps with generalized pro cedure steps [18]; * parallel use of procedures by describing relationships that interleave the use of two or more separate sequences of procedures; * supplementation of a sequence of procedure steps by addition of a new sequence of procedures that operate in step with the origi nal sequence of steps. 5. <p> A pause mark is a comma, semicolon, colon, or dash. * The number of words with at least three sylla bles. Other statistics are considered in <ref> [18] </ref>. The system facilities to be offered by an implementation must include the following. * Compute, load, and save the above-mentioned statistics for a specified text document. * Plot loaded statistics in a viewing volume (a three-dimensional space). <p> Our presentation of the development will be structured according to the procedures presented in Section 4. We do not give all the details in the development; these can be found in <ref> [18] </ref>. 5.1 Identification of objects The first step in the method of Section 4 is to identify objects. <p> We provide a few example definitions: the Graphic-sSystem, Text, and Clusters objects, and those objects formally specified earlier. Full details can be found in <ref> [18] </ref>. GraphicsSystem For coordinating the plotting of axes and clusters. Its methods will include: * Plot: plot all axes and clusters represented in the system. * RenderPolygon: a generic method to render a polygon. <p> We now define operations for those objects that earlier had attributes formally specified. We provide the operation schemas (and their precise details) in the design stages; we name a few operations here. Convention 1 of Section 2.2 will be used to associate methods with a particular object. See <ref> [18] </ref> for full details. Calc Gathers the relevant analysis statistics and computes scores. Methods include: * CountSyllables: count the number of syllables in the current token gathered by in the lexan. * Report: compute Fog and Flesch scores and other non-fundamental statistics, and pre pare a report for the user. <p> It also forces the computation by invoking the statistics gathering operations on each word. Operations include: * Init: initialize the lexan with a filename. * GetToken: get the next token from the specified file and invoke the statistical ana lyzer upon it. The reader is directed to <ref> [18] </ref> for the definitions of the objects (and methods and attributes) not included here. We now use instance diagrams to describe how objects in the system interact. Heterogeneous instance diagrams are shown in Figure 12 (in the figure, we do not specify all attributes and methods for each object). <p> We provide the precise details of the CountSylla-bles operation of the Text object shortly. We do not specify methods for Vector here; these details can be found in <ref> [18] </ref>. Finally, we provide one operation schema for the Lex object. The initialization operation, LexInit , is straightforward (and can be found in [18]). We specify the method for acquiring a token from a given text file. <p> We do not specify methods for Vector here; these details can be found in <ref> [18] </ref>. Finally, we provide one operation schema for the Lex object. The initialization operation, LexInit , is straightforward (and can be found in [18]). We specify the method for acquiring a token from a given text file. <p> Note that the token will contain letters and numbers only. LexGetToken Lex f ? : seq CHAR id 0 = id p token 0 = token token 0 = wordSeq (f ?)[index ] index 0 = index + 1 In <ref> [18] </ref>, a number of utility functions are specified that help in interfacing the Calc and Lex objects. To continue the design, we must provide specifications for each method and attribute in the system. This is considered fully in [18]. <p> = wordSeq (f ?)[index ] index 0 = index + 1 In <ref> [18] </ref>, a number of utility functions are specified that help in interfacing the Calc and Lex objects. To continue the design, we must provide specifications for each method and attribute in the system. This is considered fully in [18]. We provide only a few samples here, skipping most of the details. <p> There is a specification to deal with words that include `ue' fragments, words that end in a silent `e', words that include `ia' fragments, etcetera. We specify three special cases here (the rest are in <ref> [18] </ref>). Note that more than one case can apply for a word. For words containing a silent `e', we decrement the syllable count if the word ends in `e' and the next-to-last letter is a consonant. <p> Clip object clips the polygon p against a viewing volume to determine that part of the polygon that is visible to the viewer. 5.5 System integration and imple mentation We have specified attributes and methods for (some of) the objects in the system; the remaining details can be found in <ref> [18] </ref>. What remains for us to do is to implement the methods and attributes of each object, provide a suitable user-interface, and integrate the subsystems. <p> We provide only basic details of this process; it is detailed in <ref> [18] </ref>. Here, we concentrate on refining and implementing the formal parts of the specification. We start with the refinement of the operations that calculate the number of syllables in a word. <p> We direct the reader to <ref> [18] </ref> for the details of implementing the methods and data structures that were not formally specified. Integration of the system components according to the instance diagram of Figure 12 must now occur. <p> The integration was derived by using a meta-method for formal method integration based on heterogeneous notations. We used a heterogeneous framework derived from <ref> [18] </ref> that consisted of several formalisms and selected object-oriented notations. The integrated technique was applied to a small problem, for which we provided examples of specifications and designs.
Reference: [19] <author> Paige, </author> <title> R.F. (1997) A Meta-Method for Formal Method Integration, </title> <note> submitted to Formal Methods Europe 1997. 22 </note>
Reference-contexts: Method integration has been studied in at least two settings: in the context of integrating particular methods [20, 22]; and, in a setting where systematic and general-purpose approaches are defined <ref> [13, 14, 18, 19] </ref>. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented. <p> Our intent with this paper is to follow the latter path and continue the work of <ref> [19] </ref>, where a meta-method for integration was presented. The focus of this paper is to further demonstrate a general formal method integration technique based on heterogeneous notations [18] by combining a formal specification technique (Z [25]) with a semiformal object-oriented method (Coad-Yourdon [4]). <p> We present and discuss the integrated technique and then apply it to an example. Before proceeding, we briefly touch on some background material on heterogeneous notations in general. Further details can be found in the references, e.g., <ref> [18, 19] </ref>. 1.1 Heterogeneous notations and specifications Notations play an important role in software development methods: they are a facility through which developers make use of a method's procedures. <p> we claim that heterogeneous notations can provide a systematic basis for dealing with formal method integration, and it is for this reason that we discuss them in this paper. 1.4 Overview In this paper, we summarize the meta-method for formal method integration based on heterogeneous notations that was presented in <ref> [19] </ref>. Then we apply it|and attempt to demonstrate its generality| in combining Coad-Yourdon object-oriented analysis and design with a Z-based method. The general organization of the paper is as follows. * In Section 2, we construct the heterogeneous framework of Figure 1. <p> This amounts to providing translations of formal notations and formal expressions of the object-oriented notations in Z|thus fixing interpretations for the course of their use. * In Section 3, we recap the meta-method for formal method integration from <ref> [19] </ref>. Then, in Section 4, we apply it and create an integration of Coad-Yourdon and a Z specification style. We briefly discuss the properties we obtain by using this method of integration. * Finally, in Section 5, we summarize the details of an application of the integrated method. <p> We have not provided a complete description of all object concepts; extension of the technique to polymorphism and other facilities still needs to be considered. 3 A Meta-Method Based on Heterogeneous Notations A meta-method for formal method integration was presented in <ref> [18, 19] </ref>. The meta-method is based on heterogeneous notations, and describes a strategy for constructing relationships between procedure steps. We recap the steps of the method here for the sake of completeness. 1. Fix a base method.
Reference: [20] <author> Polack F., Whiston, M., and Mander, K.C. </author> <title> (1993) The SAZ Project: Integrating SSADM and Z. </title> <booktitle> In Proc. FME `93: Industrial-strength Formal Methods, </booktitle> <publisher> LNCS 670, Springer-Verlag. </publisher>
Reference-contexts: Method integration [13, 18] is a technique that can be used to abet multiple-method use, and solve some of the problems associated with using a single technique. Method integration has been studied in at least two settings: in the context of integrating particular methods <ref> [20, 22] </ref>; and, in a setting where systematic and general-purpose approaches are defined [13, 14, 18, 19]. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented.
Reference: [21] <author> Schatz, B., Hussmann, H., and Broy, M. </author> <title> (1996) Graphical Development of Consistent System Specifications. </title> <booktitle> In Proc. FME `96, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The final object notation we discuss is a variation on state transition diagrams. Session state diagrams (SSDs) <ref> [21] </ref> are a form of transition diagram with hierarchical aspects. We demonstrate how to integrate SSDs|a particular variant of state transition diagrams|into the heterogeneous framework. The approach we describe applies equally well to pure state transition diagrams, and may be generalized to other similar diagram notations, as well.
Reference: [22] <author> Semmens, L.T. and Allen, P. </author> <title> (1991) Using Your-don and Z: an approach to formal specification. </title> <booktitle> In Z User Workshop, Workshops in Computing Series, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Method integration [13, 18] is a technique that can be used to abet multiple-method use, and solve some of the problems associated with using a single technique. Method integration has been studied in at least two settings: in the context of integrating particular methods <ref> [20, 22] </ref>; and, in a setting where systematic and general-purpose approaches are defined [13, 14, 18, 19]. Our intent with this paper is to follow the latter path and continue the work of [19], where a meta-method for integration was presented. <p> Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages [28]; for writing simpler specifications than might be produced using a single language [29]; for ease of expression; and because they have been proven successful in practice <ref> [22, 23, 28, 7] </ref>. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. Precise meaning is provided by a heterogeneous framework. <p> Then, relations between the generalized base procedures and invasive procedures can be defined. Possible relations are described in [18]; they include: * linking of method steps by translation, e.g., as in <ref> [22] </ref>; * extension of a sequence of procedures by replacing certain steps with generalized pro cedure steps [18]; * parallel use of procedures by describing relationships that interleave the use of two or more separate sequences of procedures; * supplementation of a sequence of procedure steps by addition of a new
Reference: [23] <author> Semmens, L.T., France, R.B., and Docker, T.W. </author> <title> (1992) Integrated Structured Analysis and Formal Specification Techniques, </title> <journal> The Computer Journal 35(6). </journal>
Reference-contexts: Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages [28]; for writing simpler specifications than might be produced using a single language [29]; for ease of expression; and because they have been proven successful in practice <ref> [22, 23, 28, 7] </ref>. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. Precise meaning is provided by a heterogeneous framework.
Reference: [24] <author> Shlaer, S. and Mellor, </author> <title> S.J. </title> <booktitle> (1992) Object Lifestyles Modeling the World in States, </booktitle> <publisher> Prentice-Hall. </publisher>
Reference-contexts: That is, a pure formal (Z-based) method can be generated, or a pure semiformal (Coad-Yourdon based) method can be extracted, and then fol lowed. Z has been linked with object-oriented methods in the past, e.g., see [8], for a combination of Z with Shlaer-Mellor <ref> [24] </ref>. The main difference between Hammond's general approach and our own is in procedure: Hammond constructs a transformation from the Shlaer-Mellor products into Z, and interleaving of different method steps is not considered.
Reference: [25] <author> Spivey, J.M. </author> <title> (1989) The Z Notation: A Reference Manual, </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: The focus of this paper is to further demonstrate a general formal method integration technique based on heterogeneous notations [18] by combining a formal specification technique (Z <ref> [25] </ref>) with a semiformal object-oriented method (Coad-Yourdon [4]). We present and discuss the integrated technique and then apply it to an example. Before proceeding, we briefly touch on some background material on heterogeneous notations in general. <p> It is also used 1 to provide the basis on which integrated methods are defined. The framework that we use in this paper is depicted in Figure 1. The predicate notation is from [9]. Specification statements (i.e., w : [pre; post]) are from [16]; Z is from <ref> [25] </ref>. The other notations are from the Coad-Yourdon object-oriented method. In the diagram, the arrows represent translations and formalizations that we explicitly write down. The full details of the translations involving formalisms are given in [17, 18]. We provide the specifics for the semiformal object-oriented notations in Section 2.
Reference: [26] <author> Stepney, S., Barden, R., and Cooper, D. (eds.) </author> <title> (1992) Object-Orientation in Z, </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The main difference between Hammond's general approach and our own is in procedure: Hammond constructs a transformation from the Shlaer-Mellor products into Z, and interleaving of different method steps is not considered. Z has also been extended to various formal object-oriented specification methods, e.g., Object-Z <ref> [26] </ref>. 5 Example The example involves constructing a system for carrying out textual analysis|generating statistics for a text document. The system includes a graphics subsystem that is used to display visual representations of collections of gathered statistics (as 3D polygons), and to transform these representations.
Reference: [27] <author> Weber-Wulff, D. </author> <title> (1993) Selling Formal Methods to Industry. </title> <booktitle> In Proc. FME `93: Industrial-strength Formal Methods, </booktitle> <publisher> LNCS 670, Springer-Verlag. </publisher>
Reference: [28] <author> Zave, P. and Jackson, M. </author> <title> (1993) Conjunction as Composition, </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <volume> 2(4). </volume>
Reference-contexts: It is used to write heterogeneous specifications. Definition 1 A heterogeneous specification is composed from parts written in two or more different notations. Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages <ref> [28] </ref>; for writing simpler specifications than might be produced using a single language [29]; for ease of expression; and because they have been proven successful in practice [22, 23, 28, 7]. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. <p> Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages [28]; for writing simpler specifications than might be produced using a single language [29]; for ease of expression; and because they have been proven successful in practice <ref> [22, 23, 28, 7] </ref>. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. Precise meaning is provided by a heterogeneous framework.
Reference: [29] <author> Zave, P. and Mataga, P. </author> <title> (1993) A formal specification of some important 5ESS features, Part I: Overview. </title> <journal> AT&T Bell Laboratories Technical Memorandum. </journal> <volume> 23 </volume>
Reference-contexts: Heterogeneous notations are useful for a number of reasons: for extending expressive capabilities of single notations; for producing simpler specification languages [28]; for writing simpler specifications than might be produced using a single language <ref> [29] </ref>; for ease of expression; and because they have been proven successful in practice [22, 23, 28, 7]. The precise meaning of a heterogeneous specification is given by formally defining the meaning of all the notation compositions. Precise meaning is provided by a heterogeneous framework.
References-found: 29

