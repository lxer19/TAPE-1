URL: http://www.pms.informatik.uni-muenchen.de/publikationen/PMS-FB/PMS-FB-1996-4.ps.gz
Refering-URL: http://karna.cs.umd.edu:3264/people/godfrey/cites.html
Root-URL: 
Title: A Compositional Semantics for Logic Programs and Deductive Databases  
Author: Fran~cois Bry 
Note: Programmier- und Modellierungssprachen Oettingenstrae 67, D-80538 Munchen  
Affiliation: INSTITUT F UR INFORMATIK Lehr- und Forschungseinheit fur  
Abstract: Short version in: Proc. Joint International Conference and Symposium on Logic Programming, MIT Press, 1996 http://www.pms.informatik.uni-muenchen.de/publikationen Forschungsbericht/Research Report PMS-FB-1996-4, August 1996 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bry. </author> <title> Theorie der Logikprogrammierung. </title> <booktitle> Lecture Notes. Unpublished, </booktitle> <year> 1995. </year>
Reference-contexts: The result follows by induction. Theorem 4 is established in [13] for definite - i.e. non-disjunctive - positive unconstrained programs. Related results are given in [12, 9]. 4.4 Procedural Semantics The following Theorem, the proof of which is easy <ref> [1] </ref>, shows that minimal logic derivations and SLD-resolution proofs of atoms and conjunctions of atoms from positive, definite, and unconstrained programs are, up to the shape, identical. Note that a successful branch of an SLD-resolution tree corresponds to a minimal logic derivation, i.e. a tree.
Reference: [2] <author> F. Bry. </author> <title> A Compositional Semantics for Logic Programs and Deductive Databases. </title> <booktitle> Proc. of the Joint International Conference and Symposium on Logic Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1996 </year>
Reference-contexts: For example, H w (fa; bg) is not a supported weak model of fa b ; b ag. (In the preliminary version <ref> [2] </ref> of this paper, a simpler but weaker 19 form of Definition 14 is given, which uncorrectly does not preclude "cyclic supports".) Proposition 15 Let P be a set of positive clauses and I a Herbrand interpretation. <p> For specifying such methods, techniques applied for integrity verification in databases are likely to be applicable. 28 Acknowledgements I thank Norbert Eisinger and Heribert Schutz and the anonymous referes of <ref> [2] </ref> for useful comments, Gopalan Nadathur for fruitful discussions on natural deduction and logic programming, and Helmut Schwichtenberg for drawing my attention to minimal logic.
Reference: [3] <author> K. Clark. </author> <title> Negation as Failure. Logic and Databases. </title> <editor> H. Gallaire and J. Minker, eds. </editor> <address> 293-322, </address> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: Minimal logic is however more general than SLD-resolution since by Theorem 4 it provides with a procedural semantics for disjunctive and constrained programs as well. Like SLD-resolution, minimal logic can be extended with various forms of "negation as failure" <ref> [3] </ref> depending on the termination properties resulting from the adopted search strategy.
Reference: [4] <author> M. Gelfond and V. Lifschitz. </author> <title> The Stable Model Semantics for Logic Programming. </title> <booktitle> Proc. of the Fifth International Conference and Symposium on Logic Programming. </booktitle> <pages> 1070-1080, </pages> <address> Seattle, </address> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: In contrast, SLDNF-resolution is not complete for Datalog : programs. 22 5.5 Stability In this section, it is shown that the "compositional semantics" is "stable" under the evaluation of consistently true literals and generalizes the stable model semantics <ref> [4] </ref>. Notation 20 Let P be a set of ground clauses, I a weak Herbrand interpretation, and S a set of ground literals that are consistently true in I. <p> If I is an intended model of P , then it is an intended model of Q. By Theorem 21, I is an intended model of Simp (Q; N eg (I)), i.e., since all clauses in Q are positive, a minimal (classical) model of Q. By definition <ref> [4] </ref>, I is a stable model of Q. It follows that I is a stable model of P . Theorem 23 Let P be a set of definite clauses and I a weak Herbrand interpretation. <p> The proposed notion of intended model has also been characterized within classical logic in terms of program completions, thus extending the completion semantics of positive and definite logic programs. Finally, the proposed semantics has been shown to be generalize the stable model semantics <ref> [4] </ref> and, in contrast to this semantics, to be "compositional" in the sense that it fulfils a natural program composition requirement. The compositional semantics proposed in this paper seems to be natural and simple enough for being as easily applied as the usual semantics of positive logic programs.
Reference: [5] <author> G. </author> <title> Gentzen. Untersuchungen uber das logische Schlieen. </title> <journal> Mathematis-che Zeitschrift. </journal> <volume> Vol. 39, </volume> <pages> 176-210, </pages> <year> 1934. </year>
Reference: [6] <author> K. Kunen. </author> <title> Declarative Semantics of Logic Programming. </title> <journal> Bulletin of the European Association for Theoretical Computer Science. </journal> <volume> Vol. 44, </volume> <pages> 147-167, </pages> <year> 1991. </year>
Reference: [7] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <editor> 2nd Ed., </editor> <year> 1987. </year>
Reference-contexts: Except when otherwise stated, we consider in the sequel a fixed first-order language L in which the programs are defined. 5.1 Weak Models In this Section, weak interpretations and weak models are defined through slight changes in the classical definitions (see, e.g. <ref> [7] </ref>): since in weak interpretations the truth of a formula does not exclude that of its negation, assignments of both truth values t (true) and f (false) are specified in the following definition. <p> Note that in case A 62 S, then A is consistently false in H w (S), no matter whether :A 2 S or :A 62 S. Thus, H w (S) = H w (S) and classical Herbrand interpretations can be represented as usual <ref> [7] </ref>. Notation 11 Let I be a weak interpretation. S I := fL j L 2 EHB (L) ^ L I : tg. Note that, if I is a weak interpretation, then H w (S I ) is a weak Herbrand interpretation. <p> A (classical) Herbrand model of program P which is minimal for the order of Definition 13 clearly is also minimal in the classical sense. Thus, the intended model of positive, unconstrained and definite program (as defined in <ref> [7] </ref>) is its (unique) minimal weak model. However, not all minimal weak models of a non-positive program convey its intuitive meaning. Consider for example the program P = fp :pg. The minimal model H w (fpg) of P clearly does not convey the intuition, because it is not supported. <p> The completion Comp (P ) of a definite and unconstrained program <ref> [7] </ref> - i.e. the set of completed clauses of P augmented with Clark's equality theory CET extends to disjunctive (possibly constrained) programs P as follows [8]: Let p be an k-ary (k 0) predicate symbol or ?.
Reference: [8] <author> J. Lobo, J. Minker, and A. Rajasekar. </author> <title> Foundations of Disjunctive Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The completion Comp (P ) of a definite and unconstrained program [7] - i.e. the set of completed clauses of P augmented with Clark's equality theory CET extends to disjunctive (possibly constrained) programs P as follows <ref> [8] </ref>: Let p be an k-ary (k 0) predicate symbol or ?. <p> Since the general programs considered in this article might have several intended models, a fixpoint operator could be specified in terms of disjunctions of ground atoms instead of ground atoms, like the operator defined in <ref> [8] </ref> for disjunctive databases. Second, the usefulness of the proposed semantics for practical applications of logic programming and deductive database should be experimentally investigated.
Reference: [9] <author> D. Miller, G. Nadathur, F. Pfenning, and A. Scedrov. </author> <title> Uniform Proofs as a Foundation for Logic Programming. </title> <journal> Annals of Pure and Applied Logic. </journal> <volume> Vol. 51, </volume> <pages> 125-157, </pages> <year> 1991. </year>
Reference-contexts: By hypothesis, E G contains no applications of ? c . A G can therefore be replaced in D F by E G . The result follows by induction. Theorem 4 is established in [13] for definite - i.e. non-disjunctive - positive unconstrained programs. Related results are given in <ref> [12, 9] </ref>. 4.4 Procedural Semantics The following Theorem, the proof of which is easy [1], shows that minimal logic derivations and SLD-resolution proofs of atoms and conjunctions of atoms from positive, definite, and unconstrained programs are, up to the shape, identical.
Reference: [10] <author> D. Prawitz. </author> <title> Natural Deduction. A Proof-Theoretical Study. </title> <publisher> Almqvist & Wiksell, </publisher> <address> Stockholm, </address> <year> 1965. </year>
Reference-contexts: Since minimal logic treats ? like 2 Like classical logic intuitionistic logic <ref> [10] </ref> "globalizes" inconsistencies, for it has the "ex falso quodlibet" principle as a deduction rule. 8 any atom B, if ` m ::A ! A, then ` m ((A ! B) ! B) ! A. <p> logic, minimal logic is proven below to be complete a proof theory for positive unconstrained programs. 4.3 Completeness of Minimal Logic for Positive Unconstrai ned Programs Some deductions might contain useless so-called detours, e.g.: D A D B A ^ I Deduction without detours, called normal deductions, have been formalized <ref> [10] </ref>. For the purpose of this article, their definition is not needed. The proofs will only refer to the fact that a deduction occurring within a normal deduction is normal, and to the following two theorems. <p> Theorem 1 (Normal Deduction Theorem) If T ` c F , then there is a (classical logic) normal deduction of F in T . A proof of the Normal Deduction Theorem is given in <ref> [10] </ref> for restricted languages in which _ and 9 are expressed in terms of ^, 8, and :. Although this proof does not extend to the general syntax, the validity of the Normal Deduction Theorem in the general case, i.e. of Theorem 1, is mentioned in [10]. <p> Theorem is given in <ref> [10] </ref> for restricted languages in which _ and 9 are expressed in terms of ^, 8, and :. Although this proof does not extend to the general syntax, the validity of the Normal Deduction Theorem in the general case, i.e. of Theorem 1, is mentioned in [10]. Normal deduction have an interesting structure. In particular they satisfy a subformula property referring to the following inductive definition: 1. F is a subformula of F . 2. <p> deduction of F in T is a subformula of F or of some formula of T , except for assumptions discharged by applications of the rule ? c and for occurrences of ? that stand immediately below such assumptions. 9 A simpler form of the Subformula Property is proved in <ref> [10] </ref> for (unrestricted syntax) intuitionistic and minimal logic. This proof directly extends to classical logic, provided the proviso "except for assumptions ..." is made.
Reference: [11] <author> T. Sato. </author> <title> Completed Logic Programs and Their Consistency. </title> <journal> Journal of Logic Programming. </journal> <volume> Vol. 9, No. 1, </volume> <pages> 33-44, </pages> <year> 1990. </year> <month> 29 </month>
Reference: [12] <author> H. Schwichtenberg. </author> <title> Minimal From Classical Proofs. Computer Sci--ence Logic. </title> <editor> H. Kleine-Buning and M.M. Richter, eds. </editor> <address> 326-328, </address> <publisher> Springer Verlag LNCS 626, </publisher> <year> 1992. </year>
Reference-contexts: By hypothesis, E G contains no applications of ? c . A G can therefore be replaced in D F by E G . The result follows by induction. Theorem 4 is established in [13] for definite - i.e. non-disjunctive - positive unconstrained programs. Related results are given in <ref> [12, 9] </ref>. 4.4 Procedural Semantics The following Theorem, the proof of which is easy [1], shows that minimal logic derivations and SLD-resolution proofs of atoms and conjunctions of atoms from positive, definite, and unconstrained programs are, up to the shape, identical.
Reference: [13] <author> R. F. Stark. </author> <title> A Direct Proof for the Completeness of SLD-Resolution. </title> <booktitle> Computer Science Logic. </booktitle> <editor> E. Borger, H. Kleine-Buning and M.M. Richter, eds. </editor> <address> 382-383, </address> <publisher> Springer-Verlag LNCS 440, </publisher> <year> 1990. </year>
Reference-contexts: Hence, A G = E G (G ! ?) G ? c . By hypothesis, E G contains no applications of ? c . A G can therefore be replaced in D F by E G . The result follows by induction. Theorem 4 is established in <ref> [13] </ref> for definite - i.e. non-disjunctive - positive unconstrained programs.
Reference: [14] <author> A.S. Troelstra and D. van Dalen. </author> <title> Constructivism in Mathematics. An Introduction. Vol 1. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1988. </year>
Reference: [15] <author> A. van Gelder, K. Ross, and J. Schlipf. </author> <title> The Well-Founded Semantics for General Logic Programs. </title> <journal> Journal of the ACM. </journal> <volume> Vol. 38, No. 3, </volume> <pages> 620-650, </pages> <year> 1991. </year>
Reference: [16] <author> L. Vieille. </author> <title> Recursive Query Processing: The Power of Logic. </title> <journal> Theoretical Computer Science. </journal> <volume> Vol. 68, No. 2, </volume> <year> 1989. </year> <month> 30 </month>
Reference-contexts: Which proofs can be constructed by a deduction system computing negation as finite failure depends on the search strategy under which the system is run, indeed. For example, a system extending SLDAL-resolution <ref> [16] </ref> with negation as failure would be complete for Datalog : programs [16]. <p> Which proofs can be constructed by a deduction system computing negation as finite failure depends on the search strategy under which the system is run, indeed. For example, a system extending SLDAL-resolution <ref> [16] </ref> with negation as failure would be complete for Datalog : programs [16]. In contrast, SLDNF-resolution is not complete for Datalog : programs. 22 5.5 Stability In this section, it is shown that the "compositional semantics" is "stable" under the evaluation of consistently true literals and generalizes the stable model semantics [4].
References-found: 16

