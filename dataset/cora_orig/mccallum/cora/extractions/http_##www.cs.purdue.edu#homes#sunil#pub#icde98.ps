URL: http://www.cs.purdue.edu/homes/sunil/pub/icde98.ps
Refering-URL: http://www.cs.purdue.edu/homes/sunil/pub.html
Root-URL: http://www.cs.purdue.edu
Title: Cyclic Allocation of Two-Dimensional Data  
Author: S. Prabhakar K. Abdel-Ghaffar D. Agrawal A. El Abbadi 
Date: Feb. 1998  
Note: Appeared in Proceedings of the 14th International Conference on Data Engineering (ICDE), Orlando,  
Address: Santa Barbara Davis CA 93106, U.S.A. CA 95616, U.S.A.  
Affiliation: Department of Computer Science Department of Electrical Computer Engineering University of California University of California  
Abstract: Various proposals have been made for declustering two-dimensionally tiled data on multiple I/O devices. Recently it has been shown that strictly optimal solutions only exist under very restrictive conditions on the tiling of the two-dimensional space or for very few I/O devices. In this paper we explore allocation methods where no strictly optimal solution exists. We propose a general class of allocation methods, referred to as cyclic allocation methods, and show that many existing methods are instances of this class. As a result, various seemingly ad hoc and unrelated methods are presented in a single framework. Furthermore, the framework is used to develop new allocation methods that give better performance than any previous method and that approach the best feasible performance. 
Abstract-found: 1
Intro-found: 1
Reference: [AE97] <author> K. A. S. Abdel-Ghaffar and A. El Abbadi. </author> <title> Optimal allocation of two-dimensional data. </title> <booktitle> In International Conference on Database Theory, </booktitle> <pages> pages 409-418, </pages> <address> Delphi, Greece, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Some of these studies were conducted in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data). Recently in <ref> [AE97] </ref>, it was shown that strictly optimal solutions (defined shortly) for rectangular queries exist only under very restrictive conditions on the tiling or for very few I/O devices (namely 1,2,3 and 5). In this paper we explore allocation methods where no strictly optimal solution exists. <p> The minimum possible cost when retrieving A tiles distributed over M devices is d A M e. An allocation policy is said to be strictly optimal if no rectangular area A has more than d A M e tiles allocated to the same device. In <ref> [AE97] </ref>, the necessary and sufficient conditions for the existence of strictly optimal allocation schemes are derived. <p> M N 1 N 2 2, or M=8, and N 1 =N 2 =4, or M =N 1 N 2 4 and minfN 1 ; N 2 g = 3). Strictly optimal allocations for each of these cases are also defined in <ref> [AE97] </ref>. Of these cases, only the second case is of general interest. To demonstrate sufficiency of these conditions, a strictly optimal allocation method is given, which allocates tile (i; j) to device (b M 2 ci + j) mod M . We will refer to this as the HalfM method. <p> Overall, we observe that there is no single existing approach that gives the best performance for all or even most values of M . It should be noted that as expected from the results obtained in <ref> [AE97] </ref>, none of the policies produces strictly optimal results, except for the special cases. DM is strictly optimal for M= 2 and 3, FX for M= 2 and HalfM for M= 2; 3 and 5. <p> We did not consider HCAM in this comparison due to its performance sensitivity to different query types. 5 Discussion It has been shown that strictly optimal allocations for two-dimensional data on different I/O devices exist only in very limited cases <ref> [AE97] </ref>. We proposed a Number of I/O devices % Improvement over M DM HCAM FX 5 100 100 100 15 59.459 83.680 93.380 25 83.076 84.887 94.669 16 72.177 86.234 65.107 Table 1: Percentage reduction in gap. general class of cyclic declustering methods applicable in these cases. <p> We have shown that the Disk Modulo [DS82], HalfM <ref> [AE97] </ref> and the Fibonacci [CLRS86] allocation methods are special cases of this class.
Reference: [CC92] <author> C. Y. Chen and C. C. Chang. </author> <title> On the gdm allocation method for partial range queries. </title> <journal> Information Systems, </journal> <volume> 17(5) </volume> <pages> 381-394, </pages> <year> 1992. </year>
Reference-contexts: We call this a class of cyclic allocation methods. This class is a subset of the class of allocations defined by the GDM method introduced in [DS82] and studied in <ref> [CC92] </ref>. As in the cyclic methods, the GDM approach, also requires the two hop values, a and b, to be relatively prime with respect to M . However, it does not require that a and b be relatively prime with respect to each other.
Reference: [CDN + 97] <author> X. Cheng, R. Dolin, M. Neary, S. Prab-hakar, K. Ravikanth, D. Wu, D. Agrawal, A. El Abbadi, M. Freeston, A. Singh, T. Smith, and J. Su. </author> <title> Scalable access within the context of digital libraries. </title> <booktitle> In IEEE International Conference on Advances in Digital Libraries, ADL, </booktitle> <pages> pages 70-81, </pages> <address> Washington, D.C., </address> <year> 1997. </year>
Reference-contexts: An increasingly popular and user-friendly approach for retrieving geographically referenced information is to request the user to define a rectangular bounding box on a map indicating the area of interest. In the Alexan-dria Digital Library project <ref> [CDN + 97] </ref>, we are exploring various methods for supporting such geographically referenced data. For example, if a user is interested in more information about the Sierra Nevada mountains, the user can draw a rectangle around the area on a map of the United States.
Reference: [CLRS86] <author> B. Chor, C. E. Leiserson, R. L. Rivest, and J. B. Shearer. </author> <title> An application of number theory to the organization of raster-graphics memory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 33(1) </volume> <pages> 86-104, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: In this subsection we consider another method for identifying a good cyclic method that uses a hop value that is relatively prime with respect to M . The method is motivated by an allocation based upon certain properties of Fi-bonacci numbers proposed by Chor, Leiserson, Rivest and Shearer <ref> [CLRS86] </ref>, for the allocation of two-dimensional screen pixels to memory chips. We will call this method FIB. The FIB method is applicable only to very few values of M , in particular, only for values of M that are odd order Fibonacci numbers, i.e. <p> We have shown that the Disk Modulo [DS82], HalfM [AE97] and the Fibonacci <ref> [CLRS86] </ref> allocation methods are special cases of this class.
Reference: [DS82] <author> H. C. Du and J. S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple-disk systems. </title> <journal> ACM Transactions of Database Systems, </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93] </ref>. Some of these studies were conducted in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data). <p> Several allocation methods have been proposed in the literature. The Disk Modulo (DM) <ref> [DS82] </ref> approach proposed by Du and Sobolewski and later extended for range queries and dynamic files in [LSR92] allocates tile (i; j) to device (i+j) mod M . <p> We call this a class of cyclic allocation methods. This class is a subset of the class of allocations defined by the GDM method introduced in <ref> [DS82] </ref> and studied in [CC92]. As in the cyclic methods, the GDM approach, also requires the two hop values, a and b, to be relatively prime with respect to M . However, it does not require that a and b be relatively prime with respect to each other. <p> We have shown that the Disk Modulo <ref> [DS82] </ref>, HalfM [AE97] and the Fibonacci [CLRS86] allocation methods are special cases of this class.
Reference: [FB93] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> In Proceedings of the 2nd International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 18 - 25, </pages> <address> San Diego, CA, </address> <month> Jan </month> <year> 1993. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93] </ref>. Some of these studies were conducted in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data). <p> Thus the tile (i; j) is allocated to device k given by: k = (i B j B ) mod M where i B and j B are the binary representations of i and j respectively and is the bit-wise exclusive-OR operation. The HCAM method <ref> [FB93] </ref> is based upon the Hilbert space filling curves. Hilbert curves can be used to convert a discrete two-dimensional array into a linear sequence such that spatial proximity in the original array is preserved. <p> We now consider the special case of queries with the same number of rows and columns, called square queries. This is an interesting case because the HCAM approach <ref> [FB93] </ref> has been shown to have very good performance for square queries. Figure 6 gives the performance of the various approaches for square queries. We observe that the HCAM approach performs better than DM and FX for almost all values of M .
Reference: [KP88] <author> M. H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 173-182, </pages> <address> Chicago, </address> <year> 1988. </year>
Reference-contexts: On the other hand, if they are allocated to the same device, response time is maximized, since the tiles must be retrieved sequentially instead of concurrently. Various proposals have been made for the allocation of data on multiple I/O devices <ref> [DS82, KP88, FB93] </ref>. Some of these studies were conducted in the context of relational databases, where data is defined over several attributes. We address the important but restricted case of two attributes (the x and y coordinates of two-dimensional data). <p> Several allocation methods have been proposed in the literature. The Disk Modulo (DM) [DS82] approach proposed by Du and Sobolewski and later extended for range queries and dynamic files in [LSR92] allocates tile (i; j) to device (i+j) mod M . The FX method proposed by Kim and Pramanik <ref> [KP88] </ref>, requires that N 1 ; N 2 and M are all powers of 2. The tile (i; j) is then allocated to the device given by the lowest log 2 M bits of the bit-wise exclusive-OR of the binary representations of i and j.
Reference: [LSR92] <author> J. Li, J. Srivastava, and D. Rotem. CMD: </author> <title> a multidimensional declustering method for parallel database systems. </title> <booktitle> In Proceedings of the Int. Conf. on Very Large Data Bases, </booktitle> <pages> pages 3-14, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Several allocation methods have been proposed in the literature. The Disk Modulo (DM) [DS82] approach proposed by Du and Sobolewski and later extended for range queries and dynamic files in <ref> [LSR92] </ref> allocates tile (i; j) to device (i+j) mod M . The FX method proposed by Kim and Pramanik [KP88], requires that N 1 ; N 2 and M are all powers of 2.
Reference: [PAAE97] <author> S. Prabhakar, K. Abdel-Ghaffar, D. Agrawal, and A. El Abbadi. </author> <title> Cyclic allocation of two-dimensional data. </title> <type> Technical Report TRCS97-08, </type> <institution> Dept. of Computer Science, Univ. of California, Santa Barbara, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: This insensitivity to the number of tiles in each dimension was observed in all our experiments. For this reason, in the paper we present only the results for N 1 =N 2 =32 since these graphs are less dense. Results of other experiments not reported here are available in <ref> [PAAE97] </ref>. Also for clarity, in the remainder of the paper, the Random method is not shown because of its poor performance. The performance of FX for values of M that are not powers of 2 is observed to be quite poor. <p> We also demonstrate the robustness of the new approaches with respect to variations in the numbers of tiles in each dimension, and the number of I/O devices. Results of further experiments demonstrating the robustness of our approach to varying parameters are available in <ref> [PAAE97] </ref>. 4.1 Effect of Varying the Queries Let us first consider only those queries for which the number of columns is less than or equal to the number of rows. Since for these the vertical side is longer than the horizontal side, we call them tall queries.
References-found: 9

