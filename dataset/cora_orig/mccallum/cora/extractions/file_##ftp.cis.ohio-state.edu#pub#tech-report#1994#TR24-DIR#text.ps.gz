URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR24-DIR/text.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~parent/vita.html
Root-URL: 
Title: Polyhedral Shapes as General Implicit Surface Primitives  
Author: Karansher Singh and Richard Parent 
Date: 15 November 1993  
Address: 2036 Neil Avenue, Columbus, OH 43210 USA  
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Implicit Surfaces provide an elegant approach to modeling and animating physically deformable and organic looking objects. Existing implementations use simple analytically defined geometric shapes as modeling primitives. This paper discusses limitations of these shapes and argues the case for a more general primitive. A generalized primitive implicit shape definition is presented and the usage of arbitrary polyhedral structures as primitives described. A major drawback of implicit surfaces is their rendering complexity. Rendering polyhedral primitives efficiently using various techniques, with emphasis on ray tracing is described. Finally, useful applications of the above primitive definition, such as shape change are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. </author> <title> Blinn. A generalization of algebraic surface drawing. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(3) </volume> <pages> 235-256, </pages> <year> 1982. </year>
Reference-contexts: For example the object generated by a summation is a smooth blend of the primitive functions. For a summation F (P ) = P f i (P ) T , where i runs over the primitive polynomial functions f i and T is a threshold value 2 <ref> [0; 1] </ref>. A subset of these implicit surfaces are distance surfaces and convolution surfaces [3]. These are constructed by combining a number of implicit primitives. <p> The surface is then generated from the combined contributions of the primitives. Examples of f : <ref> [0; 1] </ref> ! [0; 1], also called a density function, with the desired properties [13] are shown in Figure 1. For a point P within V the function value is determined by first computing a value 2 [0; 1] called a distance ratio. f (distanceratio) is then the function value. <p> The surface is then generated from the combined contributions of the primitives. Examples of f : <ref> [0; 1] </ref> ! [0; 1], also called a density function, with the desired properties [13] are shown in Figure 1. For a point P within V the function value is determined by first computing a value 2 [0; 1] called a distance ratio. f (distanceratio) is then the function value. <p> Examples of f : <ref> [0; 1] </ref> ! [0; 1], also called a density function, with the desired properties [13] are shown in Figure 1. For a point P within V the function value is determined by first computing a value 2 [0; 1] called a distance ratio. f (distanceratio) is then the function value. The distance ratio is computed by taking the ratio of the shortest euclidean distance from P to a point Q on S, and a value determined by the shape of V (usually a constant radius value R). <p> The simplest implicit shape to use as a modeling primitive is a sphere within which the function is radially sym 1 metric about a central point in space. The terms metaball, blob and soft objects have been used in previous work, <ref> [1] </ref>, [10], [15] to refer to this shape and, by extension, to any such primitive used in constructing an implicit surface. For spheres, the distance surface and convolution surface is the same. Other primitives such as sphylinders, cone-spheres and rounded polygons [13] have been used. <p> Given a point P within V , let Q be the point on S with the shortest euclidean distance to P . Let the ray from Q through P intersect V at point P 0 . Define g : R 3 ! <ref> [0; 1] </ref>. For a point P , g (P ) = min (1; jP Qj jP P 0 j ). Clearly g (P ) is a value that ranges from 0 for points on or inside the surface S to 1 for point on or outside the volume V . <p> The rate of change of the implicit surface is bounded by the rate of change of the component polyblobs bounding polymeshes. By computing this bound the technique developed in [6] could be applied. * Blinn <ref> [1] </ref> uses a heuristically driven numerical technique to find the surface intersection for spherical primitives. The algorithm involves evaluating the function at a number of guess points one for each primitive, where the threshold is likely to be achieved.
Reference: [2] <author> J. Bloomenthal. </author> <title> Polygonization of implicit surfaces. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 341-355, </pages> <year> 1988. </year>
Reference-contexts: Alternatively a surface reconstruction algorithm may be applied to construct a boundary representation of the surface [7], <ref> [2] </ref>. The reconstructed surface can then be rendered by any of various rendering algorithms. Various techniques for fast and robust ray tracing of implicit surfaces have been studied [16],[6]. We discuss and extend the application of these techniques to the rendering of polyhedral primitives. <p> We feel that this should give comparable rendering speed to that using analytic primitives. 4.3 Surface Reconstruction Polygonization of general implicit surfaces is described in <ref> [2] </ref> using convergence and surface tracking techniques with an octree structure. This approach is directly applicable to surfaces using polyhedral primitives. One of the motivating factors for polyhedral primitives was to reduce the number of primitives used to model the surface.
Reference: [3] <author> J. Bloomenthal and K. Shoemake. </author> <title> Convolution surfaces. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 251-256, </pages> <year> 1991. </year>
Reference-contexts: For a summation F (P ) = P f i (P ) T , where i runs over the primitive polynomial functions f i and T is a threshold value 2 [0; 1]. A subset of these implicit surfaces are distance surfaces and convolution surfaces <ref> [3] </ref>. These are constructed by combining a number of implicit primitives. <p> The distance ratio is computed by taking the ratio of the shortest euclidean distance from P to a point Q on S, and a value determined by the shape of V (usually a constant radius value R). The above description generates what is termed as an offset surface <ref> [3] </ref>. The class of distance surfaces are generated when radius R need not be constant. Convolution surfaces require the integration of function values obtained with Q varying over every point on S, rather than just the closest. <p> For implicit primitives defined with a constant offset distance from a skeleton <ref> [3] </ref> r (spheres, sphylinders and rounded polygons), with an associated function of distance ratio f , the normal vector contribution for the primitive is identically f 0 (d)flN r where d is the distance ratio at pnt, and N is the normal vector to the primitive shape at pnt. <p> Here the behaviour of the implicit surface is very predicatable. It is useful for blending sharp corners. Unacceptable bulges can arise on blending just as is the case with other primitives, however, these can be avoided by applying Bloomenthals technique of convolution surfaces <ref> [3] </ref>. Techniques that deal with variations in the density functions such as directional blending are still applicable. The rendering efficiency obtained from the implementation appears reasonable. This can be seen from a comparison with the time taken to render the same image, where each polyblob is an individual object.
Reference: [4] <author> J. Bloomenthal and B. Wyvill. </author> <title> Interactive techniques for implicit modeling. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 109-116, </pages> <year> 1990. </year>
Reference-contexts: Implicit surfaces are popular due to several reasons. * The modeling primitives over which the functions are specified usually have a simple convex geometric shape. They are, therefore, intuitive for the user to employ as primitives in building more complex shapes <ref> [4] </ref>. * A complex object can be deformed and animated easily, by manipulating individual primitive shapes [9]. * The resulting surface can be made continuous by appropriately combining continuous primitive functions.
Reference: [5] <author> M. Gascuel. </author> <title> An implicit formulation for precise contact modeling between flexible solids. </title> <booktitle> Proc. of SIG-GRAPH, </booktitle> <pages> pages 313-320, </pages> <year> 1993. </year>
Reference: [6] <author> D. Kalra and A. Barr. </author> <title> Guaranteed ray intersections with implicit surfaces. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 297-306, </pages> <year> 1989. </year>
Reference-contexts: The spatial coherence of rays r from adjacent points along the ray now, greatly speeds up the intersection routines overall performance. * An approach yielding guaranteed ray implicit surface intersections <ref> [6] </ref> for functions with bounded rates of change is given. The rate of change of the implicit surface is bounded by the rate of change of the component polyblobs bounding polymeshes. By computing this bound the technique developed in [6] could be applied. * Blinn [1] uses a heuristically driven numerical <p> overall performance. * An approach yielding guaranteed ray implicit surface intersections <ref> [6] </ref> for functions with bounded rates of change is given. The rate of change of the implicit surface is bounded by the rate of change of the component polyblobs bounding polymeshes. By computing this bound the technique developed in [6] could be applied. * Blinn [1] uses a heuristically driven numerical technique to find the surface intersection for spherical primitives. The algorithm involves evaluating the function at a number of guess points one for each primitive, where the threshold is likely to be achieved.
Reference: [7] <author> W. Lorenson and H. Cline. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 163-169, </pages> <year> 1987. </year>
Reference-contexts: Alternatively a surface reconstruction algorithm may be applied to construct a boundary representation of the surface <ref> [7] </ref>, [2]. The reconstructed surface can then be rendered by any of various rendering algorithms. Various techniques for fast and robust ray tracing of implicit surfaces have been studied [16],[6]. We discuss and extend the application of these techniques to the rendering of polyhedral primitives.
Reference: [8] <author> N. Max. </author> <title> Cone-spheres. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 59-62, </pages> <year> 1990. </year>
Reference-contexts: C. * Sphylinders (rounded polygons) [13] have V to be the bounding sphylindrical (rounded polygon) shape, defined by radius R around the line (polygon) of key points, S is the line segment (polygon) formed by the key points. * Cone-Spheres, are more complex, in that their bounding volume, a cone-sphere <ref> [8] </ref>, is not a constant offset volume around S, the line segment formed by the key points. 3 Polyhedral Implicit Primitives A polyhedral primitive (referred to as a polyblob) is simply a polymesh volume V . S is an arbitrary polymesh surface contained within V .
Reference: [9] <author> G. Wyvill C. McPheeters and B. Wyvill. </author> <title> Animating soft objects. </title> <journal> Visual Computer, </journal> <volume> 2 </volume> <pages> 235-242, </pages> <year> 1986. </year>
Reference-contexts: They are, therefore, intuitive for the user to employ as primitives in building more complex shapes [4]. * A complex object can be deformed and animated easily, by manipulating individual primitive shapes <ref> [9] </ref>. * The resulting surface can be made continuous by appropriately combining continuous primitive functions. This makes implicit surfaces an attractive alternative to using higher order surface patches for object modeling. * Topological changes to the object due to manipulation of the primitives are handled automatically and elegantly.
Reference: [10] <author> G. Wyvill C. McPheeters and B. Wyvill. </author> <title> Data structures for soft objects. </title> <journal> Visual Computer, </journal> <volume> 2 </volume> <pages> 227-234, </pages> <year> 1986. </year>
Reference-contexts: The simplest implicit shape to use as a modeling primitive is a sphere within which the function is radially sym 1 metric about a central point in space. The terms metaball, blob and soft objects have been used in previous work, [1], <ref> [10] </ref>, [15] to refer to this shape and, by extension, to any such primitive used in constructing an implicit surface. For spheres, the distance surface and convolution surface is the same. Other primitives such as sphylinders, cone-spheres and rounded polygons [13] have been used.
Reference: [11] <author> P. Ning and J. Bloomenthal. </author> <title> An evaluation of implicit surface tilers. </title> <journal> IEEE Computer Graphics and Appliacations, </journal> <volume> 13(6) </volume> <pages> 33-41, </pages> <year> 1993. </year>
Reference: [12] <author> P.Hanrahan. </author> <title> Ray tracing algebraic surfaces. </title> <journal> Computer Graphics, </journal> <volume> 17(3) </volume> <pages> 83-90, </pages> <year> 1983. </year>
Reference: [13] <author> K. Singh and R. Parent. </author> <title> Fast scanline processing of useful implicitly-defined shapes: Sphylinders, cone-spheres and rounded polygons. submitted to Graphics Interface, </title> <year> 1994. </year>
Reference-contexts: The surface is then generated from the combined contributions of the primitives. Examples of f : [0; 1] ! [0; 1], also called a density function, with the desired properties <ref> [13] </ref> are shown in Figure 1. For a point P within V the function value is determined by first computing a value 2 [0; 1] called a distance ratio. f (distanceratio) is then the function value. <p> For spheres, the distance surface and convolution surface is the same. Other primitives such as sphylinders, cone-spheres and rounded polygons <ref> [13] </ref> have been used. A major drawback of this approach is the time taken to sample space in order to determine the implicitly defined surface [1],[13]. <p> Existing primitives are special instances of V and S. * Spheres are the case where V is the bounding sphere defined by the radius R around the center C, S is just the point C. * Sphylinders (rounded polygons) <ref> [13] </ref> have V to be the bounding sphylindrical (rounded polygon) shape, defined by radius R around the line (polygon) of key points, S is the line segment (polygon) formed by the key points. * Cone-Spheres, are more complex, in that their bounding volume, a cone-sphere [8], is not a constant offset <p> The first intersection point corresponding to a span be comes its guess point. 2. The center of the span is taken as its guess point if it has no intersection of scaledPm within it. * An analytical approach may also be applied to some primitives <ref> [13] </ref>. Quartic polynomials, (See Figure 1.) facilitate precise surface intersection calculation within a nonoverlapping span, for object primitives whose geometry is defined in terms of a skeleton and a constant distance around it. <p> The same may be done for the innerPm and the scaledPm. Further the list of polygons defining the extent in Z can be easily maintained. Use of bucket sorts to maintain active polyblob lists is then straightforward <ref> [13] </ref>. Now the analytic technique that specifies the function value as a quadratic in terms of the defining polygon over an interval can be computed with great efficiency and interval coherence used when going from one pixel to another for a powerful heuristic.
Reference: [14] <author> R. Szeliski and D. Tonnesen. </author> <title> Surface modeling with oriented particle systems. </title> <journal> Computer Graphics, </journal> <volume> 26(2) </volume> <pages> 185-194, </pages> <year> 1992. </year>
Reference: [15] <author> A. Fujimoto T. Tanaka and K. Iwata. </author> <title> Arts: Accelerated ray tracing system. </title> <journal> Computer Graphics and Applications, </journal> <volume> 6(4) </volume> <pages> 16-26, </pages> <year> 1986. </year>
Reference-contexts: The simplest implicit shape to use as a modeling primitive is a sphere within which the function is radially sym 1 metric about a central point in space. The terms metaball, blob and soft objects have been used in previous work, [1], [10], <ref> [15] </ref> to refer to this shape and, by extension, to any such primitive used in constructing an implicit surface. For spheres, the distance surface and convolution surface is the same. Other primitives such as sphylinders, cone-spheres and rounded polygons [13] have been used.
Reference: [16] <author> G. Wyvill and A. Trotman. </author> <title> Ray tracing soft objects. </title> <booktitle> Proc. of Computer Graphics International, </booktitle> <year> 1990. </year> <month> 9 </month>
References-found: 16

