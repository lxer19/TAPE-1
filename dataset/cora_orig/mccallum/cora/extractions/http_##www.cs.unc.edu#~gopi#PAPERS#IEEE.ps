URL: http://www.cs.unc.edu/~gopi/PAPERS/IEEE.ps
Refering-URL: http://www.cs.unc.edu/~gopi/
Root-URL: http://www.cs.unc.edu
Title: A Unified Architecture for the computation of B-Spline Curves and Surfaces 1  
Author: Meenakshisundaram Gopi Swami Manohar 
Keyword: NURBS, Graphics, Geometric Modeling, VLSI architecture.  
Address: Bangalore 560012 INDIA  
Affiliation: Supercomputer Education and Research Centre Indian Institute of Science  
Abstract: B-Splines in general, and Non-Uniform Rational B-Splines in particular, have become indispensable modeling primitives in computer graphics and geometric modeling applications. In this paper a novel high-performance architecture for the computation of uniform, non-uniform, rational and non-rational B-Spline curves and surfaces is presented. This architecture has been derived through a sequence of steps. First, a systolic architecture for the computation of the basis function values, the basis function evaluation array (the BFEA), is developed. Using the BFEA as its core, an architecture for the computation of non-uniform rational B-Spline curves is constructed. This architecture is then extended to compute NURBS surfaces. Finally, this architecture is augmented to compute the surface normals so that the output from this architecture can be directly used for rendering the NURBS surface. The overall linear structure of the architecture, its small I/O requirements, its non-dependence on the size of the problem (in terms of the number of control points and the number of points on the curve/surface that has to be computed), and its very high throughput make this architecture highly suitable for integration into the standard graphics pipeline of high-end workstations. Results of the timing analysis indicate a potential throughput of one triangle with the normal vectors at its vertices, every two clock cycles. 1 An extended abstract of this paper appears in [12] 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kurt Akeley. </author> <title> Reality engine graphics. </title> <booktitle> In SIGGRAPH '93 Proceedings, </booktitle> <pages> pages 109-116, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference: [2] <author> B.A Barsky, R.H. Bartels, and J.C. Beatty. </author> <title> An introduction to use of splines in computer graphics. </title> <type> Technical report, </type> <institution> Univ. of California, Berkeley, </institution> <year> 1983. </year>
Reference: [3] <author> J.H. Clark. </author> <title> The geometry engine : A VLSI geometry engine for graphics. </title> <journal> ACM Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 127-133, </pages> <month> July </month> <year> 1982. </year>
Reference: [4] <author> C. de Boor. </author> <title> A Practical Guide to Splines. </title> <journal> Applied Mathematical Sciences, Springer-Verlag, </journal> <volume> 27 </volume> <pages> 132-136, </pages> <year> 1978. </year>
Reference: [5] <author> C. de Boor. </author> <title> Package for calculating with splines. </title> <journal> Journal of Numerical Analysis, </journal> <volume> 14(3) </volume> <pages> 441-472, </pages> <year> 1977. </year>
Reference: [6] <author> M.F. Deering and Scott T. Nelson. Leo: </author> <title> A system for cost effective 3D shaded graphics. </title> <booktitle> In SIGGRAPH '93 Proceedings, </booktitle> <pages> pages 101-108, </pages> <address> Anaheim, California, </address> <month> Aug. </month> <year> 1993. </year>
Reference: [7] <author> T. DeRose and T. Holman. </author> <title> The triangle: A multiprocessor architecture for fast curve and surface generation. </title> <type> Technical report, </type> <institution> Univ. of Washington, </institution> <year> 1987. </year>
Reference-contexts: A few hardware implementations of B-Splines have been reported in the literature. One of the early papers in this direction is the work of T.Li et al.[16] where an architecture to generate Bezier curves and patches was proposed. De Rose <ref> [7] </ref> et al., proposed a triangular architecture to generate B-Spline curves using the deBoor-Cox algorithm. Mathias [17], has developed a similar architecture for Bezier curves using the de Casteljau algorithm. He has also developed architectures for B-Spline inversion and B-Spline generation [18].
Reference: [8] <author> J.D. Foley, A.L. van Dam, S.K. Feiner, and J.F. Hughes. </author> <title> Computer Graphics: Principles and Practice(2nd edition). </title> <publisher> Addison-Wesley Publishing Company Inc., </publisher> <year> 1990. </year>
Reference-contexts: In general, the basis function N i;k will be non-zero for the values of u from t i to t i+k . It can be shown that at any particular value of u in the valid range, there will be k and only k basis functions with non-zero values <ref> [8] </ref>. The valid range of u is from t k1 to t n+1 . In our example, the valid range is from u = 0:3 to u = 0:6. Those basis functions with non-zero values for the value of u under consideration, are called useful basis functions. <p> These restrictions give raise to various kinds of B-Splines. If the knot vector is such that, t 1 t 0 = t 2 t 1 = t 3 t 2 = = t n+k t n+k1 then the resultant B-Spline is called an Uniform B-Spline <ref> [8] </ref>. A typical uniform knot vector would be [0.0, 0.1, 0.2, 0.3, , 0.9, 1.0]. Here we can see that the differences between the adjacent knot values are equal. For a Uniform B-Spline all basis function curves are identical (Figure 4).
Reference: [9] <author> M. Gopi. </author> <title> Special Purpose Architectures for B-Splines. </title> <type> Master's thesis, </type> <institution> Supercomputer Education & Research Centre, Indian Institute of Science, </institution> <address> Bangalore, India, </address> <year> 1994. </year>
Reference-contexts: The controller itself can be divided into various functional modules as shown in the Figure 17. The detailed design of the various modules of the Controller have been presented in <ref> [9] </ref>. 24 5 Performance Evaluation The architecture presented above decouples the size of the problem to the extent possible. Every computation/result computed in BFEA is indispensable.
Reference: [10] <author> M. Gopi and S. Manohar. </author> <title> VLSI architectures for the computation of uniform B-Spline curves. </title> <journal> Microprocessing and Microprogramming, </journal> <volume> 40, </volume> <pages> pages 617-626, </pages> <year> 1994. </year>
Reference-contexts: Hence it is enough to calculate the basis function curve only once, thus reducing the complexity of the 6 B-Spline computation to a large extent. Taking advantage of this fact, a VLSI architecture to solve Uniform B-Spline curves has been proposed in <ref> [10] </ref> and a unified architecture to compute uniform rational/non-rational B-Spline curves/patches is also proposed in [11]. In the uniform knot vector, if the first and the last knot values are repeated k times then the resultant knot vector is called the Open knot vector.
Reference: [11] <author> M. Gopi and S. Manohar. </author> <title> Parallel architecture for the computation of uniform rational B-Spline patches. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 30 </volume> <pages> 91-98, </pages> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Taking advantage of this fact, a VLSI architecture to solve Uniform B-Spline curves has been proposed in [10] and a unified architecture to compute uniform rational/non-rational B-Spline curves/patches is also proposed in <ref> [11] </ref>. In the uniform knot vector, if the first and the last knot values are repeated k times then the resultant knot vector is called the Open knot vector. This forces the curve to start from the first control point and end in the last control point.
Reference: [12] <author> M. Gopi and S. Manohar. </author> <title> VLSI architecture for the computation of NURBS patches. </title> <booktitle> In Proceedings of International Conference on VLSI Design, </booktitle> <address> New Delhi, India, </address> <month> Jan. </month> <year> 1995. </year>
Reference: [13] <author> William M. Hsu, John F. Hughes, and Henry Kaufman. </author> <title> Direct manipulation of free-form deformations. </title> <booktitle> In SIGGRAPH '92 Proceedings, </booktitle> <pages> pages 177-184, </pages> <month> July </month> <year> 1992. </year>
Reference: [14] <author> IGES. </author> <title> Initial Graphics Exchange Specification, </title> <type> version 3.0. </type> <institution> National Bureau of Standards, Gaithersburg, MD, USA, </institution> <year> 1986. </year> <month> 29 </month>
Reference: [15] <author> E.T.Y. Lee. </author> <title> Rational quadratic Bezier representation for conics. </title> <editor> in Farin, G (ed.) </editor> <booktitle> Geometric modeling SIAM, </booktitle> <year> 1986. </year>
Reference-contexts: Introduction to rational quadratic representation of conics can be found in <ref> [15] </ref>. Further information about the NURBS representation of circles is in [21],[24]. A few hardware implementations of B-Splines have been reported in the literature. One of the early papers in this direction is the work of T.Li et al.[16] where an architecture to generate Bezier curves and patches was proposed.
Reference: [16] <author> T. Li, K.R. Smith, and D. Hanscon. </author> <title> VLSI systolic architectures for computer graphics. </title> <booktitle> In Proceedings of International Conference on Computers, Systems & Signal Processing, </booktitle> <pages> pages 1527-1530, </pages> <address> Bangalore, India, </address> <month> December </month> <year> 1984. </year>
Reference: [17] <author> P.C. Mathias. </author> <title> Systolic Architectures for Realistic 3D Graphics. </title> <type> PhD thesis, </type> <institution> Indian Institute of Science, </institution> <year> 1989. </year>
Reference-contexts: One of the early papers in this direction is the work of T.Li et al.[16] where an architecture to generate Bezier curves and patches was proposed. De Rose [7] et al., proposed a triangular architecture to generate B-Spline curves using the deBoor-Cox algorithm. Mathias <ref> [17] </ref>, has developed a similar architecture for Bezier curves using the de Casteljau algorithm. He has also developed architectures for B-Spline inversion and B-Spline generation [18]. Recently, Megson [19] has come up with a design to calculate the basis functions required to generate B-Splines.
Reference: [18] <author> P.C. Mathias, L.M Patnaik, and Sudha Ramesh. </author> <title> Systolic architecture in curve generation. </title> <journal> Computers and Graphics, </journal> <volume> 13(4) </volume> <pages> 561-570, </pages> <year> 1989. </year>
Reference-contexts: De Rose [7] et al., proposed a triangular architecture to generate B-Spline curves using the deBoor-Cox algorithm. Mathias [17], has developed a similar architecture for Bezier curves using the de Casteljau algorithm. He has also developed architectures for B-Spline inversion and B-Spline generation <ref> [18] </ref>. Recently, Megson [19] has come up with a design to calculate the basis functions required to generate B-Splines. He has also developed a composite design to calculate B-Spline patches.
Reference: [19] <author> G.M. Megson. </author> <title> Systolic algorithms for B-Spline patch generation. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 11 </volume> <pages> 231-238, </pages> <year> 1991. </year>
Reference-contexts: De Rose [7] et al., proposed a triangular architecture to generate B-Spline curves using the deBoor-Cox algorithm. Mathias [17], has developed a similar architecture for Bezier curves using the de Casteljau algorithm. He has also developed architectures for B-Spline inversion and B-Spline generation [18]. Recently, Megson <ref> [19] </ref> has come up with a design to calculate the basis functions required to generate B-Splines. He has also developed a composite design to calculate B-Spline patches. <p> Further, as BFEA forms the core of the NURBS architecture, the optimizations adopted in this design, have a direct impact on the design of the final architecture. For example, we are computing just the k non-zero useful basis functions, whereas, the solution proposed by Megson <ref> [19] </ref>, computes all the n+1 basis functions. As k &lt;< n, the time required to generate the curve/surface is drastically reduced. <p> Thus this architecture outputs one triangle every two clock cycles after the initial pipeline fill. We now compare the performance of this architecture with that of the architecture proposed by Megson <ref> [19] </ref>. If the C u and C v are proportional to n and m, then the time required for the computation of the curve/surface increases linearly when using the architecture proposed in this 25 paper. <p> Results of the timing analysis indicate a potential performance of one triangle every two clock cycles, with its normal vectors at its vertices. It has also been shown that the BFEA is considerably better than the earlier solution for the basis function computation <ref> [19] </ref>. Further, improvements in the basis function computation are not immediately warranted since as seen in section 4.4, the BFEA has to be slowed down by the introduction of some delay so that its output can be utilized by the inner product computation units.
Reference: [20] <author> M.E Mortenson. </author> <title> Geometric Modeling. </title> <publisher> John Wiley & Sons, </publisher> <year> 1985. </year>
Reference: [21] <author> L. Piegl. </author> <title> On the use of infinite control points in CAGD Computer Aided Geometric Design, </title> <address> 4(1-2):155-166, </address> <year> 1987. </year>
Reference: [22] <author> L Piegl and W. Tiller. </author> <title> Curve and surface constructions using rational B-Splines. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 19(9) </volume> <pages> 485-498, </pages> <year> 1987. </year>
Reference-contexts: All the knot values put together is called a knot vector. In section 2.1 we will see more about the knot vector and the properties of the basis functions. The properties of basis functions and B-Splines are discussed in detail in <ref> [22] </ref>. For further reading on B-Splines [2][4][20] and [23] are suggested. The extension of a B-Spline curve is the B-Spline surface given by P (u; v) = i=0 j=0 where, P (u; v) is the point on the surface for the parametric values u and v. <p> Detailed study of rational B-Spline was carried out first by Versprille [26]. More details about rational B-Splines can be found in <ref> [22] </ref>, [24], [25]. 5 A rational B-Spline surface is defined by the formula, P (u; v) = i=0 j=0 P ij w ij N i;k (u)N j;l (v) i=0 j=0 w ij N i;k (u)N j;l (v) Here again, the term w ij N i;k (u)N j;l (v) P n P
Reference: [23] <author> R.F. Riesenfeld. </author> <title> Applications of B-Spline approximation to Geometric problems of Computer Aided Design. </title> <type> PhD thesis, </type> <institution> Syracuse Univ., </institution> <year> 1972. </year> <note> Also published as Univ. of Utah report UTEC-CSc-73-126. </note>
Reference-contexts: All the knot values put together is called a knot vector. In section 2.1 we will see more about the knot vector and the properties of the basis functions. The properties of basis functions and B-Splines are discussed in detail in [22]. For further reading on B-Splines [2][4][20] and <ref> [23] </ref> are suggested. The extension of a B-Spline curve is the B-Spline surface given by P (u; v) = i=0 j=0 where, P (u; v) is the point on the surface for the parametric values u and v.
Reference: [24] <author> W. Tiller. </author> <title> Rational B-Splines for curve and surface representation. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 3(9) </volume> <pages> 61-69, </pages> <year> 1983. </year>
Reference-contexts: Detailed study of rational B-Spline was carried out first by Versprille [26]. More details about rational B-Splines can be found in [22], <ref> [24] </ref>, [25]. 5 A rational B-Spline surface is defined by the formula, P (u; v) = i=0 j=0 P ij w ij N i;k (u)N j;l (v) i=0 j=0 w ij N i;k (u)N j;l (v) Here again, the term w ij N i;k (u)N j;l (v) P n P m
Reference: [25] <author> W. Tiller. </author> <title> Geometric modeling using non-uniform rational B-Splines: mathematical techniques. </title> <booktitle> In SIGGRAPH '86, Tutorial Notes, </booktitle> <year> 1986. </year>
Reference-contexts: Detailed study of rational B-Spline was carried out first by Versprille [26]. More details about rational B-Splines can be found in [22], [24], <ref> [25] </ref>. 5 A rational B-Spline surface is defined by the formula, P (u; v) = i=0 j=0 P ij w ij N i;k (u)N j;l (v) i=0 j=0 w ij N i;k (u)N j;l (v) Here again, the term w ij N i;k (u)N j;l (v) P n P m denotes
Reference: [26] <author> K.J. Versprille. </author> <title> Computer-aided design applications of the rational B-spline approximation form. </title> <type> PhD thesis, </type> <institution> Syracuse University, </institution> <year> 1975. </year> <month> 30 </month>
Reference-contexts: When w i tends to infinity, the curve is pulled towards P i and when w i is zero, the control point P i does not have any influence over the curve. Detailed study of rational B-Spline was carried out first by Versprille <ref> [26] </ref>.
References-found: 26

