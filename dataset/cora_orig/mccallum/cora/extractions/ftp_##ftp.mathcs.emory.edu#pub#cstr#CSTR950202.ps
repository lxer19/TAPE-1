URL: ftp://ftp.mathcs.emory.edu/pub/cstr/CSTR950202.ps
Refering-URL: http://www.cs.dartmouth.edu/pario/new.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: moyer@mathcs.emory.edu  vss@mathcs.emory.edu  
Title: Scalable Concurrency Control for Parallel File Systems  
Author: Steven A. Moyer and V. S. Sunderam 
Note: Research supported by the National Science Foundation, under awards CCR-9118787 and ASC-9214149, the U. S. Department of Energy, under grant DE-FG05-91ER25105, the Office of Naval Research, under grant N00014-93-1-0278, the Army Research Office, under grant ARO-93G0045, and the National Aeronautics and Space Administration, under grant NAG2-828.  
Date: February 1995 (Revised June 1995)  
Address: Atlanta, GA 30322, USA  
Affiliation: Department of Math and Computer Science Emory University,  
Pubnum: Computer Science Technical Report CSTR-950202  
Abstract-found: 0
Intro-found: 1
Reference: [BHG87] <author> Philip Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: A thorough treatment of serializability and fault-tolerance in database systems is presented by Bernstein et al. <ref> [BHG87] </ref>. Next we examine the traditional parallel file system architecture, and discuss how volatile transactions can be efficiently incorporated to provide concurrency control for file access operations. 3 Architecture and Implementation processors. <p> Since both commit and abort requests must succeed, no reply is required 2 . A naive implementation of the S-2PL scheduler will allow transactions to deadlock if a circular wait condition develops. Fortunately, deadlock avoidance techniques are well known and have been the subject of numerous studies <ref> [BHG87] </ref>. A simple and efficient solution, and the one employed in the PIOUS file system, is for an I/O daemon to timeout a request that has been delayed too long waiting on a lock, and reply indicating failure. The transaction can then be aborted and re-tried. <p> Database performance analysis indicates that, for short transactions, blocking can be minimized by reducing the lock granularity <ref> [BHG87] </ref>. <p> Measurements from typical database systems indicate that, for S-2PL schedulers, aborts/retries are rare events <ref> [BHG87] </ref>. Though parallel file system access patterns are quite different from those of a typical database, the relative infrequency of read-write/write-write file byte sharing in current parallel workloads is likely to effect similar behavior.
Reference: [CF94] <author> Peter F. Corbett and Dror G. Feitelson. </author> <title> Design and implementation of the Vesta parallel file system. </title> <booktitle> In Proceedings of the Scalable High-Performance Computing Conference, </booktitle> <pages> pages 63-70, </pages> <year> 1994. </year>
Reference-contexts: In addition to the potential loss of parallelism, a limitation of this concurrency control mechanism is that coordinated file access is not provided between unrelated processes. The Intel CFS [Pie89] is an example of a parallel file system that implements synchronized file operations. To our knowledge, the IBM Vesta <ref> [CF94] </ref> and Intel PFS file systems are the only commercial parallel file systems to incorporate a general concurrency control mechanism.
Reference: [Cro89] <author> Thomas W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: PIOUS data servers access storage via the native file systems of the host machines. 5.2 PAT Benchmark We define the partitioned access throughput (PAT) benchmark to be a parallel program that reads and writes a file using the partitioned sequential access pattern <ref> [Cro89] </ref> employed by many parallel computations. Partitioned access divides a linear file into contiguous blocks, one per process, with each block accessed sequentially by a different process. Figure 5 illustrates this file access pattern for a parallel computation consisting of four processes.
Reference: [dC94] <author> Juan Miguel del Rosario and Alok Choudhary. </author> <title> High performance I/O for parallel computers: Problems and prospects. </title> <journal> IEEE Computer, </journal> <volume> 27(3) </volume> <pages> 59-68, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Parallel computers commonly employ a parallel file system in an effort to offset the growing disparity in computational and I/O capability <ref> [dC94] </ref>. Parallel file systems address the I/O bottleneck by logically aggregating multiple independent storage devices into a single high-performance storage subsystem. Capacity increases naturally as a function of the number of devices.
Reference: [FPD91] <author> James C. French, Terrence W. Pratt, and Mriganka Das. </author> <title> Performance measurement of a parallel input/output system for the Intel iPSC/2 hypercube. </title> <booktitle> In Proceedings of the 1991 ACM Sigmetrics Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 178-187, </pages> <year> 1991. </year>
Reference-contexts: File size must be sufficient such that each process' partition is a "reasonable" multiple of the data stripe size, and each file read or write operation must access exactly one 9 Emory University CSTR-950202 data stripe. Benchmark results must be given in terms of the minimum sustained aggregate rate <ref> [FPD91] </ref>, the data rate obtained by all processes as perceived by an outside observer. To achieve consistent results in our implementation of the PAT benchmark for PIOUS, file access parameters have been chosen so as to minimize variance in the performance of the system software on which PIOUS is layered.
Reference: [GS92] <author> G. A. Geist and V. S. Sunderam. </author> <title> Network-based concurrent computing on the PVM system. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 4(4) </volume> <pages> 293-311, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. Volatile transactions have been successfully employed in PIOUS [MS94a, MS94b, MS95], a file system for parallel-distributed computing environments such as PVM <ref> [Sun90, GS92] </ref>.
Reference: [HW90] <author> M. P. Herlihy and J. M. Wing. </author> <title> Linearizability: A correctness condition for concurrent objects. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 463-492, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: A final observation on implementing file operations as volatile transactions via S-2PL is that file accesses are not only sequentially consistent, but linearizable <ref> [HW90] </ref> as well. This follows directly from the fact that one transaction can not read or write data written by another transaction until the later has completed.
Reference: [KN94] <author> David Kotz and Nils Nieuwejaar. </author> <title> Dynamic file-access characteristics of a production parallel scientific workload. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <pages> pages 640-649, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Most commercial parallel file systems provide very limited concurrency control. Whether this is due to a belief that concurrency control is unnecessary or imposes too much overhead is difficult to determine. An extensive study by Kotz and Nieuwejaar <ref> [KN94] </ref> of parallel file system workloads in a production environment shows that, while there is a significant degree of read-only byte sharing among processes in a parallel computation, there is little read-write byte sharing and almost no write-only byte sharing.
Reference: [Kot94] <author> David Kotz. </author> <title> Disk-directed I/O for MIMD multiprocessors. </title> <type> Technical Report PCS-TR94-226, </type> <institution> Dept. of Computer Science, Dartmouth College, </institution> <month> July </month> <year> 1994. </year> <month> Revised November 8, </month> <year> 1994. </year>
Reference-contexts: At the same time, the mechanism is general enough to be used in conjunction with collective operations and disk-directed I/O <ref> [Kot94] </ref>, two complementary techniques for the efficient transfer of noncontiguous data to each process participating in a coordinated file operation. 5 Experimental Results PIOUS is a parallel file system that employs volatile transactions to provide sequential consistency of access.
Reference: [Lam79] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Declustering the data from a single file across multiple devices allows the system to access the file in parallel. Because a single read or write operation can generate concurrent data accesses on multiple storage devices, a parallel file system will not support standard sequential consistency <ref> [Lam79] </ref> semantics, such as provided by the Unix file system, unless a concurrency control mechanism is employed.
Reference: [MS94a] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> A parallel I/O system for high-performance distributed computing. </title> <booktitle> In Proceedings of the IFIP WG10.3 Working Conference on Programming Environments for Massively Parallel Distributed Systems, </booktitle> <year> 1994. </year>
Reference-contexts: In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. Volatile transactions have been successfully employed in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a file system for parallel-distributed computing environments such as PVM [Sun90, GS92].
Reference: [MS94b] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> PIOUS: a scalable parallel I/O system for distributed computing environments. </title> <booktitle> In Proceedings of the Scalable High-Performance Computing Conference, </booktitle> <pages> pages 71-78, </pages> <year> 1994. </year> <institution> 19 Emory University CSTR-950202 </institution>
Reference-contexts: In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. Volatile transactions have been successfully employed in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a file system for parallel-distributed computing environments such as PVM [Sun90, GS92].
Reference: [MS95] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> PIOUS for PVM: </title> <note> User's Guide and Reference Manual Version 1, 1995. Software and documentation available via the PIOUS home page at http://www.mathcs.emory.edu/pious.html. </note>
Reference-contexts: In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. Volatile transactions have been successfully employed in PIOUS <ref> [MS94a, MS94b, MS95] </ref>, a file system for parallel-distributed computing environments such as PVM [Sun90, GS92].
Reference: [Pie89] <author> Paul Pierce. </author> <title> A concurrent file system for a highly parallel mass storage system. </title> <booktitle> In Fourth Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <year> 1989. </year>
Reference-contexts: Presumably this behavior results from the difficulty of coordinating writes to shared files, indicating that concurrency control for file operations may indeed be beneficial to parallel computation. Though some of the results presented by Kotz and Nieuwejaar may be specific to the Intel CFS <ref> [Pie89] </ref> file system instrumented for the study, or the workloads measured, they are likely to indicate general trends in file sharing on systems without concurrency control. In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. <p> In addition to the potential loss of parallelism, a limitation of this concurrency control mechanism is that coordinated file access is not provided between unrelated processes. The Intel CFS <ref> [Pie89] </ref> is an example of a parallel file system that implements synchronized file operations. To our knowledge, the IBM Vesta [CF94] and Intel PFS file systems are the only commercial parallel file systems to incorporate a general concurrency control mechanism.
Reference: [SGM86] <author> Kenneth Salem and Hector Garcia-Molina. </author> <title> Disk striping. </title> <booktitle> In IEEE 1986 Conference on Data Engineering, </booktitle> <pages> pages 336-342, </pages> <year> 1986. </year>
Reference-contexts: Figure 5 illustrates this file access pattern for a parallel computation consisting of four processes. The PAT benchmark specifies that file data must be declustered according to a distribution pattern known as disk striping <ref> [SGM86] </ref>. In disk striping, a linear sequence of fixed size data blocks, called striping units, are distributed in round-robin fashion across some number of storage devices. A data stripe consists of the set of striping units distributed in a single round.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Concur-rency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year> <month> 20 </month>
Reference-contexts: In this paper we present volatile transactions, a scalable, light-weight concurrency control mechanism for parallel file systems. Volatile transactions have been successfully employed in PIOUS [MS94a, MS94b, MS95], a file system for parallel-distributed computing environments such as PVM <ref> [Sun90, GS92] </ref>.
References-found: 16

