URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--94-18--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Email: e-mail: ama-dio@loria.fr.  e-mail: mfd@sics.se.  
Title: Reasoning about Higher-Order Processes  
Author: Roberto M. Amadio Mads Dam 
Note: The first author is partially supported by ESPRIT BRA 6454 CONFER, part of this work was done while visiting  The second author is partially supported by ESPRIT BRA 8130 LOMAPS.  
Date: October 20, 1994  
Address: Stockholm 2  CRIN-INRIA, BP 239, F-54506, Vanduvre, FRANCE,  2 SICS, Box 1263, S-164 28, Kista, SWEDEN,  
Affiliation: CRIN-INRIA, Nancy 1 SICS,  1  SICS.  
Pubnum: SICS Research Report RR:94-18  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> A domain equation for bisimulation. </title> <journal> Information and Computation, </journal> <volume> 92 </volume> <pages> 161-218, </pages> <year> 1991. </year>
Reference-contexts: The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in [19, 7]. These works are based on logics extracted from a domain theoretic interpretation of the calculus, following general ideas described in, e.g., <ref> [1] </ref>. This approach has been rather successful in the case of dynamic scoping. On the other hand it is not clear how to obtain a fully abstract denotational semantics of restriction in the case of static scoping (c.f. [15] for some typical problems).
Reference: [2] <author> R. Amadio. </author> <title> On the reduction of chocs bisimulation to -calculus bisimulation. </title> <booktitle> In Proc. CONCUR 93, Hildesheim, </booktitle> <pages> pages 112-126. </pages> <address> SLNCS 715, </address> <year> 1993. </year> <note> Also appeared as Research Report Inria-Lorraine 1786, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: Here we consider Thomsen's Plain Chocs. This is an extension of CCS where processes are transmissible values and the restriction operator is subject to a static scoping discipline. A considerable effort has been put into the development of a bisimu-lation based semantics for this calculus (c.f. <ref> [20, 2, 17] </ref>). The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in [19, 7]. <p> Section 2 will show that this can be achieved in an elegant and simple way. It should be remarked that the resulting bisimulation coincides with the one considered in <ref> [2, 17] </ref>, which in turn has been shown to be compatible with the -calculus semantics. Logical Characterization. Having found a suitable way to specify properties of Chocs processes we pursue our programme of relating logical equivalence to bisimulation equivalence. <p> We denote with ~ the largest bisimulation. Up to some notational conventions ~ is the bisimulation studied in <ref> [2, 17] </ref>. The relation ~ is extended to process functionals by considering their equivalence on all closed instances, e.g. P [f ] ~ Q [f ] if any R [x], [R [x]=f ]P ~ [R [x]=f ]Q.
Reference: [3] <author> H. Andersen and G. Winskel. </author> <title> Compositional checking of satisfaction. Formal methods in System Design, </title> <type> 1(4), </type> <year> 1992. </year>
Reference-contexts: For instance for finite state CCS processes it is possible to efficiently transform the guess for one parallel component to a property required to hold for the other (c.f. <ref> [10, 3] </ref>). In general, however, we can as yet provide no assistance, and in practice during a proof one is often forced to backtrack in order to modify the hypotheses.
Reference: [4] <author> G. Boudol. </author> <title> Towards a lambda calculus for concurrent and communicating systems. </title> <booktitle> SLNCS, 351, 1989. In Proc. TAPSOFT. </booktitle>
Reference-contexts: 1 Introduction In the last years there has been a rising interest in calculi and programming languages where complex data such as processes and functions are transmissible values <ref> [4, 6, 13, 16, 20] </ref>. At least two main motivations for these studies can be identified: (i) to generalize the functional model of computation to a parallel and/or concurrent framework, and (ii) to model the notion of code transmission which is relevant to the programming of distributed systems.
Reference: [5] <author> M. Dam. </author> <title> Model checking mobile processes. </title> <booktitle> In Proc. CONCUR'93, Lecture Notes in Computer Science, </booktitle> <volume> 715 </volume> <pages> 22-36, </pages> <year> 1993. </year> <note> Full version in SICS report RR94:1, </note> <year> 1994. </year>
Reference-contexts: Second, we should determine some requirements for our candidate specification logic. Roughly, we expect it to be an extension of Hennessy-Milner logic which characterizes some standard Chocs bisimulation. 1 Previous work on extending Hennessy-Milner logic to calculi including value and channel transmission (c.f. <ref> [5, 8, 12] </ref>) relies on the recurrent idea of introducing modalities that state properties of the transmitted values. For instance, one can specify that a process P can output the value 3 on channel c and then satisfy property by writing: P : hc!3i:.
Reference: [6] <author> A. Giacalone, P. Mishra, and S. Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2) </volume> <pages> 121-160, </pages> <year> 1989. </year>
Reference-contexts: 1 Introduction In the last years there has been a rising interest in calculi and programming languages where complex data such as processes and functions are transmissible values <ref> [4, 6, 13, 16, 20] </ref>. At least two main motivations for these studies can be identified: (i) to generalize the functional model of computation to a parallel and/or concurrent framework, and (ii) to model the notion of code transmission which is relevant to the programming of distributed systems.
Reference: [7] <author> M. Hennessy. </author> <title> A denotational model for higher-order processes. </title> <booktitle> In Proc. </booktitle> <address> IEEE-LICS, </address> <year> 1993. </year>
Reference-contexts: A considerable effort has been put into the development of a bisimu-lation based semantics for this calculus (c.f. [20, 2, 17]). The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in <ref> [19, 7] </ref>. These works are based on logics extracted from a domain theoretic interpretation of the calculus, following general ideas described in, e.g., [1]. This approach has been rather successful in the case of dynamic scoping.
Reference: [8] <author> M. Hennessy and X. Liu. </author> <title> A modal logic for message passing processes. </title> <institution> Dept. of Computer Science, University of Sussex, </institution> <type> Report 3/93, </type> <year> 1993. </year>
Reference-contexts: Second, we should determine some requirements for our candidate specification logic. Roughly, we expect it to be an extension of Hennessy-Milner logic which characterizes some standard Chocs bisimulation. 1 Previous work on extending Hennessy-Milner logic to calculi including value and channel transmission (c.f. <ref> [5, 8, 12] </ref>) relies on the recurrent idea of introducing modalities that state properties of the transmitted values. For instance, one can specify that a process P can output the value 3 on channel c and then satisfy property by writing: P : hc!3i:.
Reference: [9] <author> M. Hennessy and R. Milner. </author> <title> Algebraic laws for nondeterminism and concurrency. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 137-162, </pages> <year> 1985. </year>
Reference-contexts: On the other hand it is not clear how to obtain a fully abstract denotational semantics of restriction in the case of static scoping (c.f. [15] for some typical problems). This motivates our shift towards an operational approach to the problem, along the lines of Hennessy and Milner <ref> [9] </ref>.
Reference: [10] <author> K. G. Larsen and L. Xinxin. </author> <title> Compositionality through an operational semantics of contexts. </title> <journal> Journal of Logic and Computation, </journal> <volume> 1 </volume> <pages> 761-795, </pages> <year> 1991. </year>
Reference-contexts: For instance for finite state CCS processes it is possible to efficiently transform the guess for one parallel component to a property required to hold for the other (c.f. <ref> [10, 3] </ref>). In general, however, we can as yet provide no assistance, and in practice during a proof one is often forced to backtrack in order to modify the hypotheses.
Reference: [11] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: In -c:P the restriction operator creates a new channel which will be local to the process P . Finally + is the non-deterministic choice, j is the parallel composition, and 0 is the nil process, with the usual CCS semantics <ref> [11] </ref>. We briefly refer to this calculus as Chocs, after [19]. Second, we should determine some requirements for our candidate specification logic.
Reference: [12] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal logics for mobile processes. </title> <journal> TCS, </journal> <volume> 114 </volume> <pages> 149-171, </pages> <year> 1993. </year>
Reference-contexts: Second, we should determine some requirements for our candidate specification logic. Roughly, we expect it to be an extension of Hennessy-Milner logic which characterizes some standard Chocs bisimulation. 1 Previous work on extending Hennessy-Milner logic to calculi including value and channel transmission (c.f. <ref> [5, 8, 12] </ref>) relies on the recurrent idea of introducing modalities that state properties of the transmitted values. For instance, one can specify that a process P can output the value 3 on channel c and then satisfy property by writing: P : hc!3i:.
Reference: [13] <author> F. Nielsen. </author> <title> The typed lambda calculus with first class processes. </title> <booktitle> Springer Lecture Notes in Computer Science, 366, 1989. In Proc. PARLE. </booktitle>
Reference-contexts: 1 Introduction In the last years there has been a rising interest in calculi and programming languages where complex data such as processes and functions are transmissible values <ref> [4, 6, 13, 16, 20] </ref>. At least two main motivations for these studies can be identified: (i) to generalize the functional model of computation to a parallel and/or concurrent framework, and (ii) to model the notion of code transmission which is relevant to the programming of distributed systems.
Reference: [14] <author> F. Nielson and H. R. Nielson. </author> <title> From CML to Process Algebras. </title> <type> Technical Report DAIMI-PB-433, DAIMI, </type> <institution> Aarhus University, </institution> <year> 1993. </year> <note> Appears in Proceedings of CONCUR'93. </note>
Reference-contexts: For instance, type systems for concurrent applicative languages such as CML and Facile have been recently proposed <ref> [14, 21] </ref> which partially describe the input-output behaviour of a program. Is there a connection between these types and specifications as presented here ? Acknowledgments. We are indebted to Lone Leth, Sanjiva Prasad, and Bent Thomsen for several discussions on the topics presented here.
Reference: [15] <author> A. Pitts and I. Stark. </author> <booktitle> What's new? In Proc. Mathematical Foundations of Computer Science, </booktitle> <address> Gdansk, Poland. SLNCS 711, </address> <year> 1993. </year>
Reference-contexts: This approach has been rather successful in the case of dynamic scoping. On the other hand it is not clear how to obtain a fully abstract denotational semantics of restriction in the case of static scoping (c.f. <ref> [15] </ref> for some typical problems). This motivates our shift towards an operational approach to the problem, along the lines of Hennessy and Milner [9].
Reference: [16] <author> J. Reppy. </author> <title> Cml: A higher-order concurrent language. </title> <booktitle> In Proc. ACM-SIGPLAN 91, Conf. on Prog. Lang. Design and Impl., </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction In the last years there has been a rising interest in calculi and programming languages where complex data such as processes and functions are transmissible values <ref> [4, 6, 13, 16, 20] </ref>. At least two main motivations for these studies can be identified: (i) to generalize the functional model of computation to a parallel and/or concurrent framework, and (ii) to model the notion of code transmission which is relevant to the programming of distributed systems.
Reference: [17] <author> D. Sangiorgi. </author> <title> Expressing mobility in process algebras: first-order and higher order paradigms. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Here we consider Thomsen's Plain Chocs. This is an extension of CCS where processes are transmissible values and the restriction operator is subject to a static scoping discipline. A considerable effort has been put into the development of a bisimu-lation based semantics for this calculus (c.f. <ref> [20, 2, 17] </ref>). The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in [19, 7]. <p> Section 2 will show that this can be achieved in an elegant and simple way. It should be remarked that the resulting bisimulation coincides with the one considered in <ref> [2, 17] </ref>, which in turn has been shown to be compatible with the -calculus semantics. Logical Characterization. Having found a suitable way to specify properties of Chocs processes we pursue our programme of relating logical equivalence to bisimulation equivalence. <p> We denote with ~ the largest bisimulation. Up to some notational conventions ~ is the bisimulation studied in <ref> [2, 17] </ref>. The relation ~ is extended to process functionals by considering their equivalence on all closed instances, e.g. P [f ] ~ Q [f ] if any R [x], [R [x]=f ]P ~ [R [x]=f ]Q.
Reference: [18] <author> C. Stirling. </author> <title> Modal logics for communicating systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 49 </volume> <pages> 311-347, </pages> <year> 1987. </year>
Reference-contexts: While the first two groups are quite stable (coming straight from proof theory) the last group is still open to debate. Here we follow quite closely previous work by Colin Stirling <ref> [18] </ref> concerning proof systems for CCS (note however the different formulation of the rules for parallel composition). The rules reflect very closely the operational semantics. The most involved rules are those for parallel composition.
Reference: [19] <author> B. Thomsen. </author> <title> A calculus of higher order communicating systems. </title> <type> PhD thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1990. </year>
Reference-contexts: A considerable effort has been put into the development of a bisimu-lation based semantics for this calculus (c.f. [20, 2, 17]). The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in <ref> [19, 7] </ref>. These works are based on logics extracted from a domain theoretic interpretation of the calculus, following general ideas described in, e.g., [1]. This approach has been rather successful in the case of dynamic scoping. <p> Finally + is the non-deterministic choice, j is the parallel composition, and 0 is the nil process, with the usual CCS semantics [11]. We briefly refer to this calculus as Chocs, after <ref> [19] </ref>. Second, we should determine some requirements for our candidate specification logic.
Reference: [20] <author> B. Thomsen. </author> <title> Plain chocs. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 1-59, </pages> <year> 1993. </year> <note> Also appeared as TR 89/4, </note> <institution> Imperial College, </institution> <address> London. </address>
Reference-contexts: 1 Introduction In the last years there has been a rising interest in calculi and programming languages where complex data such as processes and functions are transmissible values <ref> [4, 6, 13, 16, 20] </ref>. At least two main motivations for these studies can be identified: (i) to generalize the functional model of computation to a parallel and/or concurrent framework, and (ii) to model the notion of code transmission which is relevant to the programming of distributed systems. <p> Here we consider Thomsen's Plain Chocs. This is an extension of CCS where processes are transmissible values and the restriction operator is subject to a static scoping discipline. A considerable effort has been put into the development of a bisimu-lation based semantics for this calculus (c.f. <ref> [20, 2, 17] </ref>). The specification of Plain Chocs processes (and processes in related calculi) is a much less developed topic. Two notable attempts in this direction are described in [19, 7].
Reference: [21] <author> B. Thomsen. </author> <title> Polymorphic sorts and types for concurrent functional programs. </title> <type> Technical report, </type> <institution> ECRC, TR-93-10, </institution> <year> 1993. </year> <month> 18 </month>
Reference-contexts: For instance, type systems for concurrent applicative languages such as CML and Facile have been recently proposed <ref> [14, 21] </ref> which partially describe the input-output behaviour of a program. Is there a connection between these types and specifications as presented here ? Acknowledgments. We are indebted to Lone Leth, Sanjiva Prasad, and Bent Thomsen for several discussions on the topics presented here.
References-found: 21

