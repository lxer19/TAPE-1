URL: http://www.cs.clemson.edu/~steve/vandvcse.ps
Refering-URL: http://www.cs.clemson.edu/~steve/resint.html
Root-URL: http://www.cs.clemson.edu
Title: A Critical Look at Design, Verification, and Validation of Large Scale Simulations managers. I have
Author: D. E. Stevenson 
Address: Clemson, SC 29634-1906  
Affiliation: Department of Computer Science Clemson University  
Note: IEEE Manuscript #107243 To Appear IEEE CSE  Note to the Reader. I see six constituencies in CSE: computer, mathematical, and physical scientists; engineers; and technical and non-technical  make this article as widely accessible as possible. I have also provided a Bibliography. I. There Is A Disconnect Between Us?  
Abstract: Purpose: To show we are not communicating. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Don-garra, J. Du Croz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <title> LA-PACK Users' Guide. </title> <publisher> SIAM, </publisher> <year> 1995. </year>
Reference-contexts: Number of uses of features outside a validated, safe subset. (ANSI Fortran, ISO/IEC 9899 for C, New standard for C++). 5. Number of uses outside standard, validated libraries such as the C standard [39], LAPack <ref> [1] </ref>. However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too.
Reference: [2] <author> Aristotle. </author> <title> Prior and Posterior Analytics. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1949. </year>
Reference-contexts: This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle <ref> [2] </ref>. I discussed the evolution in [44]. Suppe [48] presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no.
Reference: [3] <editor> Paul Benacerraf and Hilary Putnam, editors. </editor> <booktitle> Philosophy of Mathematics: selected readings. </booktitle> <publisher> Cambridge University Press, </publisher> <address> 2 edition, </address> <year> 1983. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic <ref> [3] </ref>, [4], [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [4] <author> Errett Bishop and Douglas Bridges. </author> <title> Constructive Analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], <ref> [4] </ref>, [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [5] <author> Thomas Bowen, Gary Wigle, and Jay Tsai. </author> <title> Specification of software quality attributes. </title> <type> Technical Report RADC-TR-85-37, </type> <institution> Rome Air Development Center, </institution> <month> Feb </month> <year> 1985. </year>
Reference-contexts: If you accept my Pareto premise, then simulations may have huge supporting code systems. There is plenty for software engineering to do since computer science defines and implements the vast majority of the system. The ideas of software quality, going back to the early 1980s <ref> [5] </ref>, may be sufficient for their part. This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2].
Reference: [6] <author> Frederick P. Brooks, Jr. </author> <title> No silver bullet. </title> <editor> In H.- J. Kugler, editor, </editor> <booktitle> Information Processing 1986, the Proceedings of the IFIP 10th World Congress, </booktitle> <pages> pages 1069-76, </pages> <year> 1986. </year>
Reference-contexts: Fred Brooks' "No silver bullets." The PSE Issue. The software engineering literature is filled with magical solutions to development problems. Fred Brooks said it best in "No Silver Bullets" <ref> [6] </ref>: "There is no single development in either technology or management technique which by itself promises even one order-of-magnitude improvement within a decade in productivity, in reliability, in simplicity." For ASCI, a major focus is on what are known in the literature as problem-solving environments (PSE).
Reference: [7] <author> A. Catlin, C. Chui, C. Crabill, E.N. Houstis, S. Markus, J.R. Rice, and S. Weerawarana. Pdelab: </author> <title> An object-oriented framework for building problem solving environments for pde based applications. </title> <editor> In A. Vermeulen, editor, </editor> <booktitle> 2nd Object-Oriented Numerics Conf., </booktitle> <pages> pages 79-92, </pages> <address> Corvallis, OR, </address> <year> 1994. </year> <note> RogueWare Software. </note>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice <ref> [7] </ref>, [8], [10], [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [8] <author> A.C. Catlin, M.G. Gaitatzes, E.N. Houstis, Z.Ma, S. Markus, J.R. Rice, N.H. Wang, and S. Weer-awarana. </author> <title> The softlab experience: Building virtual laboratories for computational science. </title> <type> Technical Report CSD-TR-97-014, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], <ref> [8] </ref>, [10], [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [9] <author> W. J. Cody. </author> <title> Algorithm 665. machar: A subroutine to dynamically determine machine parameters. </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 14(4) </volume> <pages> 302-31, </pages> <month> Dec </month> <year> 1988. </year>
Reference-contexts: However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too. Likewise, the virtual machine must be validated using such programs as paranoia 5 and machar <ref> [9] </ref>. 60. How to measure internal quality. There are possible measures of internal quality about programs. We need only turn to the compiler literature. The literature develops good mathematical models of structure. The hope of measuring internal quality every compilation rests on understanding how quality manifests itself.
Reference: [10] <author> M.A. Cornea-Hasegan, C. Costian, D.C. Marinescu, I. Martin, and J.R. Rice. </author> <title> Towards problem solving environments for high performance computing. </title> <booktitle> In High Performance Computing '94, National Supercomputer Research Center, Singapore, </booktitle> <pages> pages 354-366, </pages> <year> 1994. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], <ref> [10] </ref>, [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [11] <author> W. Edwards Deming. </author> <title> Out of the Crisis. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Other areas of engineering have met the crisis. We have some hints from reading Deming's Out of the Crisis <ref> [11] </ref>. We can see that the concept of quality he proposes has yet to take hold of American manufacturing. Since software engineering uses these same metaphors, we can expect software engineering to not adhere to Deming's thoughts. <p> Deming and the 14 points. I can think of no better way to start any discussion about quality than to look at W. Edward Dem-ing's Fourteen Points <ref> [11] </ref> seen in Figure 2. After all, it has worked well for Japan. Some of these ideas are pretty radical, especially in an organization that has been quite successful over the years doing something else. However, engineering education today stresses these principles because organizations succeed when they adopt these attitudes. <p> Quality | too expensive? Quality is hardly a new issue. Historically the cost of quality has been thought to be extremely high in both time and money. Out of the Crisis <ref> [11] </ref> attacks this view much better than I could. But since "time is money," costs make it hard to sell quality in our frantic, market-driven economic system.
Reference: [12] <author> J. Demmel. </author> <title> Lapack and ieee arithmetic. </title> <type> personal communications, </type> <month> Oct 14 </month> <year> 1998. </year>
Reference-contexts: Now we have LAPACK. According to Professor James Demmel, new releases of LAPACK will be for IEEE 754 arithmetic only. A personal communication from Professor Demmel indicates that there are many reasons for going to IEEE only arithmetic <ref> [12] </ref>, [13]. Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1.
Reference: [13] <author> J. Demmel and X. Li. </author> <title> Faster numerical algorithms via exception handling. </title> <journal> IEEE Trans Comp, </journal> <year> 1994. </year>
Reference-contexts: Now we have LAPACK. According to Professor James Demmel, new releases of LAPACK will be for IEEE 754 arithmetic only. A personal communication from Professor Demmel indicates that there are many reasons for going to IEEE only arithmetic [12], <ref> [13] </ref>. Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1.
Reference: [14] <author> T.T. Drashansky, A. Joshi, and J.R. Rice. </author> <title> SciAgents | an agent based environment for distribute cooperative scientific computing. </title> <booktitle> In Tools in AI, </booktitle> <year> 1995. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], <ref> [14] </ref>, [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [15] <author> Tzvetan Drashansky. </author> <title> A software architecture of collaborating agents for solving pdes. </title> <type> Master's thesis, </type> <institution> Purdue, </institution> <month> Jan </month> <year> 1995. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], <ref> [15] </ref>, [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [16] <author> N. E. Fenton and Shari Lawrence Pfleeger. </author> <title> Software Metrics: A Rigorous and Practical Approach. </title> <publisher> PWS Publishing Company, </publisher> <address> 2 edition, </address> <year> 1997. </year>
Reference-contexts: Documentation is not a panacea. Why is the "programming" literature such a mess? We are likely documenting the wrong information: The derivation is the thing 12. Software engineering metrics and processes, as currently practiced, measure nothing of interest except those in Chapter 8 of Fenton and Pfleeger <ref> [16] </ref>. I claim that those measure are more of cognitive complexity than any inherent measure of intrinsic complexity. 39. People, Design and Computing Environment Needs: A Summary. Looking at the anecdotal evidence, we can find many areas of concern. People. <p> Such information never has, as far as I know, been applied to the concept of internal quality. They have been used to derive metrics <ref> [16] </ref>. Some compiler do communicate information about parallelism. However, a better information/feedback mechanism would make for better internal quality. I find the pragma or directive approach dangerous, in the same way Hatton found optimization dangerous. Summary. This section has proposed working definitions of validation and verification.
Reference: [17] <author> James H. </author> <title> Fetzer. Program verification: the very idea. </title> <journal> CACM, </journal> <volume> 31(9), </volume> <year> 1988. </year>
Reference-contexts: Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs [22]. 6. The Fetzer boundary [43]. In Fetzer's controversial (in computer science) article <ref> [17] </ref> "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7. Machine Codes as the active agents.
Reference: [18] <author> E. Gallopoulos, E. Houstis, and J. R. Rice. </author> <title> Future research directions in problem solving environments for computational science. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> April </month> <year> 1991. </year> <title> Report of Workshop on Research Directions in Integrating Numerical Analysis, </title> <booktitle> Symbolic Computing, Computational Geometry, and Aritificial Intelligence for Computational Science held in Washington, </booktitle> <address> DC, </address> <month> April 11-12, </month> <year> 1991. </year> <note> Distributed in PostScript in early 1993. </note>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], <ref> [18] </ref>, [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [19] <author> Efstratios Gallopoulos, Elias Houstis, and John R. Rice. </author> <title> Computer as thinker/doer: Problem-solving environments for computational science. </title> <booktitle> IEEE Computational Science & Engineering 1, </booktitle> <pages> pages 11-23, </pages> <month> Summer </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], <ref> [19] </ref>, [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [20] <author> Stratis Gallopoulos, Elias Houstis, and John R. Rice. </author> <title> Workshop on problem-solving environments: findings and recommendations. </title> <journal> Computing Surveys, </journal> <pages> pages 277-9, </pages> <month> Jun </month> <year> 1995. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], <ref> [20] </ref>, [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [21] <author> Joseph Goguen and Susanna Ginali. </author> <title> A categorical approach to general systems theory. </title> <booktitle> In Applied General Systems Research, </booktitle> <pages> pages 257-270. </pages> <publisher> Plenum, </publisher> <year> 1978. </year>
Reference-contexts: Saying all this does not make it so. More to the point, what are the properties of these magical morphisms? This is obviously technical work that needs completion. Some ideas come in <ref> [21] </ref>. VII. Intrinsic Quality versus Internal Quality Purpose: To set the difference between intrinsic and internal quality. 52. What is Intrinsic Quality? In science, Occam's Razor stands as the measure of internal quality in a relative sense. Each scientific and engineering discipline has its own view of quality.
Reference: [22] <author> Carl A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: We have a finite number of numbers, finite precision and finite processes. 5. Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs <ref> [22] </ref>. 6. The Fetzer boundary [43]. In Fetzer's controversial (in computer science) article [17] "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7.
Reference: [23] <author> John Gustafson. </author> <title> Computational verifiability and feasibility of the asci program. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> Jan.-Mar. </volume> <year> 1998. </year>
Reference-contexts: 1. Introduction: There is a disconnect between the modelers and the managers The January-March, 1998, issue of IEEE Computational Science and Engineering presented two papers on the Department of Energy's Accelerated Scientific Computing Initiative or ASCI. These two papers come from two respected authors. John Gustafson <ref> [23] </ref> from Ames Lab at Iowa State presented a discussion of the computational problems with ASCI. Alex Larzelere [31], the past Director for Strategic Computing and Modeling for Department of Energy Defense Programs, discussed software engineering and management aspects of ASCI.
Reference: [24] <author> R. W. </author> <title> Hamming. Numerical methods for scientists and engineers. </title> <publisher> McGraw-Hill, </publisher> <year> 1973. </year>
Reference-contexts: Computing is about insight. But let us be clear about the process. We are not interested in the codes per se. Richard Hamming said it best: "The purpose of computing is insight, not numbers" <ref> [24] </ref>. Insight is a very elusive commodity and may take years to develop. Insight is what the scientist or engineer counts on to guide her/his research. Nobel prizes are given for insight and not necessarily details. 12. Artists need insights, too. A story for the ages.
Reference: [25] <author> Les Hatton. </author> <title> Safer C: Developing Software for High-Integrity and Safety Critical Systems. </title> <publisher> McGraw-Hill, </publisher> <year> 1995. </year>
Reference-contexts: Forgiven. Except twenty years later and twice in one month NORAD threatened to shoot everything due to computer glitches <ref> [25] </ref>. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive [36]. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over <p> NORAD threatened to shoot everything due to computer glitches <ref> [25] </ref>. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive [36]. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. One problem among many was that two different binary versions of the number 0.1 were used. <p> Can we meet expectations? Is it possible that American management practices and software engineering can guarantee that millions of lines of code will be without significant defects? If Hatton is correct that the number of fatal errors is proportional to the log of the number of lines of code <ref> [25] </ref>, then a million line code has around ten fatal errors. 6. Other areas of engineering have met the crisis. We have some hints from reading Deming's Out of the Crisis [11]. We can see that the concept of quality he proposes has yet to take hold of American manufacturing. <p> First, how valuable is experience and insight? Vladimir Horowitz was convinced that one note of the many thousands to be found in Beethoven's Apassionata was wrong. Going to the original, he found he was right. The score had been miscopied almost from the beginning <ref> [25] </ref>. The moral is clear: Horowitz had the insight born of years of study and experience | something that seems to be scarce these days. Beethoven wrote wonderfully structured music; Horowitz knew from the structure what must have been the note. These insights are crucial to modeling. <p> There is a large collection of software tools | sometimes called shelfware | that industrial groups attempt to use but soon discard, for whatever reasons, as irrelevant. "The shelfware syndrome is singular, if not unique, to the software world" <ref> [25] </ref>. So the hunt continues for quality design disciplines and methods for measuring quality. 35. Programming is not art. Beethoven knew what he was doing. There will be those who counter the drive to understand quality in terms of the code as written. <p> from Hatton sets the tone for the "speed freaks:" "It is probably best to ban optimization of any ... code on the grounds that it is responsible for the bulk of the compiler errors reported in most languages and also because it effectively alters the defined characteristics of the program" <ref> [25] </ref>. It has been my observation, first at Bell Labs and again as moderator of comp.parallel, that programmers love to talk about tricks to make the code faster but I have never heard a programmer talk about tricks making a code safer. Speed is the opiate of programmers. <p> Let me term internal quality those elements of programs that can be measured or attributed to the abstract program tree of the program. Hatton observes that poor internal quality and dependence on weak linguistic features almost guarantee poor overall quality <ref> [25] </ref>: ... all the [internal] quality that is likely to be built into a code component must be built in before compilation, while the software is soft. .... After compilation, the software becomes brittle and the costs of building in [internal] quality, together with programmer resistance, rise considerably. 58. <p> After compilation, the software becomes brittle and the costs of building in [internal] quality, together with programmer resistance, rise considerably. 58. Measures of Internal Quality of Programs. The following measures proposed by <ref> [25] </ref> are measures of internal quality: All the following numbers should be zero: 1. Number of statically-detected faults. 2. Number of transgression of group programming standards. 3. Number of uses of nonstandard features or vendor-dependent linguistic features with respect to the programming language standard. 4.
Reference: [26] <author> Les Hatton. </author> <title> The T experiments: Errors in scientific software. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 27-38, </pages> <month> Apr-Jun </month> <year> 1997. </year>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton <ref> [26] </ref> and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it.
Reference: [27] <author> Arend Heyting. </author> <title> Intuitionism: an introduction. </title> <publisher> North-Holland, </publisher> <address> 3 edition, </address> <year> 1971. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], [4], <ref> [27] </ref>. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [28] <author> E.N. Houstis, J.R. Rice, S. Weerawarana, A.C. Catlin, P. Papachiou, K.Y. Wang, and M. Gaitatzes. </author> <title> Parallel (//) ellpack: A problem solving environment for pde based applications on multicomputer platforms. </title> <type> Technical Report CSD-TR-96-070, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], <ref> [28] </ref>, [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [29] <author> Clarence L. 'Kelly' Johnson and Maggie Smith. </author> <title> Kelly : More Than My Share of It All. </title> <publisher> Smithsonian Institution Press, </publisher> <year> 1990. </year>
Reference-contexts: What is that organization about? How do they do it? For me, that organization is the famous "Skunk Works," the Lockheed-Martin's Lockheed Advanced Development Company. The Skunk Works developed the U-2 and SR-71. A check into how Clarence L. "Kelly" Johnson <ref> [29] </ref> and Ben Rich 5 [41] ran the Skunk Works reveals an organiza-tion that I am sure Deming would have given a stamp of approval 1 . 27. Overloaded minds and mind boggling cognitive complexity. V. A. <p> We are working to change that. 12 homework assignment. The setting is the 1940s. The Lockheed P38 Lighting was designed by "Kelly" Johnson at the Skunk Works. During development and even into early use, the tails twisted off when the P38 flew faster than about Mach .60 <ref> [29] </ref>. Johnson had suspected from the very beginning that compressibility effects in the trans-sonic region might cause problems. But first, the team had to battle critics who thought it was the Lighting's unique design. Compressibility finally won out as the culprit.
Reference: [30] <author> Thomas S. Kuhn. </author> <title> The structure of scientific revolutions. </title> <editor> In Otto Neurath, Rudolf Carnap, and Charles Morris, editors, </editor> <booktitle> International Encyclopedia of Unified Science, volume I-II. Unknown, </booktitle> <year> 1962. </year>
Reference-contexts: A. Modeling And Insight Are The Focus 10. Modeling is the reason we write simulations. Our primary concern is about models, not simulations. Models refer to the systems of assumptions, functions, and relations that make up a scientific or engineering discipline <ref> [30] </ref>. Validation is the process by which we attempt to convince ourselves that the simulations correctly capture the model and have some relation to an observable world. But models are not reality! Validation to a model is not validation to the "real world." 11. Computing is about insight. <p> Each scientific and engineering discipline has its own view of quality. There is the mythical, elusive mathematical elegance in mathematical circles. However, science, engineering and mathematics all use consensus as the basis of knowledge <ref> [30] </ref>. In computer science, the concept of quality may be the most elusive of all. I would characterize what computer science has now focused on as internal quality: lines of code, test coverage, etc. Intrinsic quality is more since I see it as addressing all implementations.
Reference: [31] <author> Alex R. Larzelere II. </author> <title> Creating simulation capabilities. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> Jan.-Mar. </volume> <year> 1998. </year>
Reference-contexts: These two papers come from two respected authors. John Gustafson [23] from Ames Lab at Iowa State presented a discussion of the computational problems with ASCI. Alex Larzelere <ref> [31] </ref>, the past Director for Strategic Computing and Modeling for Department of Energy Defense Programs, discussed software engineering and management aspects of ASCI. The two papers could not have been more diametrically opposed in their content.
Reference: [32] <author> Leonard Lee. </author> <title> The Day the Phones Stopped. Primus-Donald I. Fine, </title> <publisher> Inc, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The final moments of Chalk Three were observed from two other helicopters. "... Chalk Three suddenly pitches sharply upwards, then pitches sharply downwards, plummeting until it impacts the earth at a near vertical angle, upside down and backwards" <ref> [32] </ref>. These are just a few of the problems in technical systems that have surfaced in the literature. 4.
Reference: [33] <author> M. M. Lehman. </author> <title> Models in software development and evolution. In Software Process Modeling in Practice. </title> <publisher> Butterworth-Heinemann, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: To caution further: "To expect process models of themselves to improve the quality of software ... permitting, for example, total mechanisation of the process, is as futile as the search over the last three decades for automatic programming; [It] is, in fact, part of the same mirage." <ref> [33] </ref> 33. Academia is part of the problem space, not the solution space. But things get worse. In a scathing indictment of academic computer science, Greg Wilson pointed out that academic computer science is flawed in that the students always play with toy projects [51].
Reference: [34] <author> N. Leveson. </author> <title> Software safety: What, why and how. </title> <journal> ACM Computing Surveys, </journal> <pages> pages 125-63, </pages> <year> 1986. </year>
Reference-contexts: But be aware that these costs are high: Leveson reports that $15 million to inspect a 1,200 line program for a nuclear reactor in Canada <ref> [34] </ref>. How much more so for ASCI and other high profile simulations, as in the aerospace and automotive industry? 30. There is no dearth of advice out there.
Reference: [35] <author> G. A Miller. </author> <title> The magic number seven, plus or minus two: Some limits on our capacity for processing information. </title> <journal> Psychological Review, </journal> <volume> 63 </volume> <pages> 81-97, </pages> <year> 1956. </year>
Reference-contexts: Cognitive complexity is the difficulty in understanding a concept, thought, or system. Ultimately, the validity of code comes from our ability to understand the entire simulation. Cognitive complexity is an attempt to quantify mind-boggling. We know that this complexity is 7 2 "things" <ref> [35] </ref> and is closely related to Pareto distributions. but where is it for each person? for the programming group? How do we get a handle on this? 29. Quality | too expensive? Quality is hardly a new issue.
Reference: [36] <author> Peter G. Neumann. </author> <title> Computer Related Risks. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Forgiven. Except twenty years later and twice in one month NORAD threatened to shoot everything due to computer glitches [25]. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive <ref> [36] </ref>. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. <p> threatened to shoot everything due to computer glitches [25]. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive <ref> [36] </ref>. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. One problem among many was that two different binary versions of the number 0.1 were used.
Reference: [37] <author> Mark C. Paulk, Charles V. Weber, and Bill Cur-tis. </author> <title> he Capability Maturity Model : Guidelines for Improving the Software Process. </title> <booktitle> Series in Software Engineering. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: One might counter with, "But reliability is the same thing." The Horowitz story above shows that reliability is not equal to correctness: the score was reliably copied | except once. To read the literature on the ISO 9xxx standards and the Capability Maturity Model (CMM) <ref> [37] </ref>, one would think all is well. Interestingly enough, Japanese industry has no ISO standards because their own national standards exceed the ISO/CMM standards.
Reference: [38] <author> Charles Perrow. </author> <title> Normal Accidents. </title> <publisher> Basic Books, </publisher> <year> 1984. </year>
Reference-contexts: One of his comments was, "I've never seen a poorly performing, under-loaded system." This is especially true for people: overloaded, confused people lead to disasters. Charles Perrow, in Normal Accidents <ref> [38] </ref>, advances a thesis that there are two causes for accidents such as Three Mile Island: mind-boggling component complexity and mind-boggling interconnectivity of components.
Reference: [39] <author> P. J. Plauger. </author> <title> The Standard C Library. </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference-contexts: Number of uses of features outside a validated, safe subset. (ANSI Fortran, ISO/IEC 9899 for C, New standard for C++). 5. Number of uses outside standard, validated libraries such as the C standard <ref> [39] </ref>, LAPack [1]. However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too.
Reference: [40] <author> J.R. Rice and S. Rosen. </author> <title> Napss anumerical analysis problem solving system. </title> <booktitle> In Proc. ACM Nat'l. Conf, </booktitle> <pages> pages 51-56, </pages> <year> 1966. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], [28], <ref> [40] </ref>, [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [41] <author> Ben R. Rich and Leo Janos (Contributor). </author> <title> Skunk Works : A Personal Memoir of My Years at Lockhee. </title> <publisher> Little Brown & Co, </publisher> <year> 1996. </year>
Reference-contexts: What is that organization about? How do they do it? For me, that organization is the famous "Skunk Works," the Lockheed-Martin's Lockheed Advanced Development Company. The Skunk Works developed the U-2 and SR-71. A check into how Clarence L. "Kelly" Johnson [29] and Ben Rich 5 <ref> [41] </ref> ran the Skunk Works reveals an organiza-tion that I am sure Deming would have given a stamp of approval 1 . 27. Overloaded minds and mind boggling cognitive complexity. V. A.
Reference: [42] <author> Robert Skeel. </author> <title> Roundoff error and the patriot missile. </title> <booktitle> Science, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: One problem among many was that two different binary versions of the number 0.1 were used. This led the Patriots to improperly compute the closing speed <ref> [42] </ref>. * On March 13, 1985, a Blackhawk helicopter from Fort Bragg, North Carolina, crashed. Blackhawks are "fly-by-wire," meaning that computers mediate all control actions by the pilot. The final moments of Chalk Three were observed from two other helicopters. "...
Reference: [43] <author> D. E. Stevenson. </author> <title> What is computational knowledge and how do we acquire it? submitted to Synthese. </title>
Reference-contexts: Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs [22]. 6. The Fetzer boundary <ref> [43] </ref>. In Fetzer's controversial (in computer science) article [17] "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7.
Reference: [44] <author> D. E. Stevenson. </author> <title> Science, computational science, and computer science: At a crossroads. </title> <journal> Comm. ACM, </journal> <volume> 37(12) </volume> <pages> 85-96, </pages> <year> 1994. </year>
Reference-contexts: Balci's and Sargent's Circle fails to capture that V&V plays a vital role in the self-correcting nature of the process of science and not just the product. In OR, this may not be a problem, but in science this is exactly the problem (See <ref> [44] </ref>). Validation should guarantee a model's usefulness and upgrade the process by which science and engineering proceed. 17. Modern software development is not a cottage industry. Secondly, the Sargent's Circle is too old (1979) to recognize the mod ern software development processes. <p> This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2]. I discussed the evolution in <ref> [44] </ref>. Suppe [48] presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no. Not epistemology! If the purpose of computing is insight, then the quality of the computing is measured by the quality of the insight. <p> The point is that if we cannot agree as to what constitutes knowledge then we cannot agree what constitutes quality. Nor can we agree on quality assurance until we can agree on justification. 21. CSE Principles. In <ref> [44] </ref>, I did propose three principles for computational science and engineering (CSE) knowledge: " Physical Exactness. We must strive to eliminate non-physical (mathematically convenient) assumptions. 1. 2. Computability. We must identify non-computable relationships. Most mathematical relationships turn out to be approximate, not exact. 3. Bounded Errors. <p> Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources <ref> [44] </ref>, [45], [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [45] <author> D. E. Stevenson. </author> <booktitle> Software engineering frontiers in computational science and engineering. In Proc. 33d Ann. Southeast Conf., </booktitle> <address> Clemson, SC, </address> <pages> pages 120-127., </pages> <month> March 17-18 </month> <year> 1995. </year>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], <ref> [45] </ref>, [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [46] <author> D. E. Stevenson. </author> <title> How goes CSE? Thoughts on the IEEE CS workshop at Purdue. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 49-54, </pages> <month> Apr-Jun </month> <year> 1997. </year>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], <ref> [46] </ref>, [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [47] <author> D. E. Stevenson. </author> <booktitle> The logical foundations of validation. In The Proceedings of the European Simulation Multiconference 1999, </booktitle> <address> Warsaw, Poland, </address> <month> June 1-5, </month> <year> 1999, </year> <note> page submitted, </note> <year> 1999. </year>
Reference-contexts: What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science [48] and continuing development through the 1990s [49]. I have tried to use these ideas in <ref> [47] </ref>. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. There are three classes of systems to attend to: observational, theoretical or formal, and calculational.
Reference: [48] <author> Frederick Suppe. </author> <title> Introduction and afterword. </title> <editor> In Frederick Suppe, editor, </editor> <booktitle> The Structure of Scientific Theories: The Search for Philosophic Understanding of Scientific Theories, </booktitle> <pages> pages 3-244, 617-730, </pages> <address> Ur-bana, IL, 1977. </address> <publisher> University of Illinois Press. </publisher>
Reference-contexts: But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2]. I discussed the evolution in [44]. Suppe <ref> [48] </ref> presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no. Not epistemology! If the purpose of computing is insight, then the quality of the computing is measured by the quality of the insight. <p> That having been said, let me plunge onward. What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science <ref> [48] </ref> and continuing development through the 1990s [49]. I have tried to use these ideas in [47]. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. <p> The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. There are three classes of systems to attend to: observational, theoretical or formal, and calculational. Carnap and Hempel <ref> [48] </ref> already address the observational-theoretical link. Crossing the Fetzer boundary (see below) between the theoretical and calculational system leaves the formal world. <p> Classical analysis as practiced in science and engineering. This is the world of idealized science. Here we have infinite processes, an uncountable number of numbers, countably infinite precision, and idealized solution processes. This encoding of the system is the subject of Carnap's and Hempel's development documented in <ref> [48] </ref>. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], [4], [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error.
Reference: [49] <editor> Patrick Suppes. </editor> <booktitle> Models and Methods in the Philosophy of Science. </booktitle> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference-contexts: That having been said, let me plunge onward. What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science [48] and continuing development through the 1990s <ref> [49] </ref>. I have tried to use these ideas in [47]. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational.
Reference: [50] <author> S. Weerawarana, E.N. Houstis, J.R. Rice, A. Joshi, , and C.E. Houstis. </author> <title> Pythia expert system. </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 23 </volume> <pages> 447-468, </pages> <year> 1997. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], [28], [40], <ref> [50] </ref>, [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [51] <author> Gregory V. Wilson. </author> <title> What should computer scientists teach to physical scientists and engineers. </title> <journal> IEEE Computational Science & Engineering, </journal> <pages> pages 46-62, </pages> <month> Summer </month> <year> 1996. </year> <note> Responses included. </note>
Reference-contexts: Academia is part of the problem space, not the solution space. But things get worse. In a scathing indictment of academic computer science, Greg Wilson pointed out that academic computer science is flawed in that the students always play with toy projects <ref> [51] </ref>. It is my observation, both in and out of academia, that science and engineering students "pick up" computer knowledge on their own. This makes Wilson's observation even more chilling: the players have neither the skill set nor experience to design, implement or validate a large, complex simulation. 34. <p> Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], <ref> [51] </ref>. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.

Reference: [1] <institution> Software assurance standard. National Aeronautics and Space Administration, </institution> <address> Washington, DC, </address> <year> 1992. </year>
Reference-contexts: Number of uses of features outside a validated, safe subset. (ANSI Fortran, ISO/IEC 9899 for C, New standard for C++). 5. Number of uses outside standard, validated libraries such as the C standard [39], LAPack <ref> [1] </ref>. However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too.
Reference: [2] <institution> IMACS/GAMM International Symposium on Scientific Computing, Computer Arithmetic, and Validated Numerics, </institution> <address> Budapest, Hungary, </address> <month> September </month> <year> 1998. </year>
Reference-contexts: This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle <ref> [2] </ref>. I discussed the evolution in [44]. Suppe [48] presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no.
Reference: [3] <author> F. S. Acton. </author> <title> Numerical Methods That (Usually) Work. </title> <publisher> Harper & Row, </publisher> <year> 1970. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic <ref> [3] </ref>, [4], [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [4] <author> Forman S. Acton. </author> <title> Real Computing Made Real: Preventing Errors in Scientific and Engineering Calculations. </title> <publisher> Princeton University Press, </publisher> <year> 1996. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], <ref> [4] </ref>, [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [5] <author> E. Anderson, Z. Bai, C. Bischof, J. Dem-mel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammarling, A. McKenney, S. Ostrouchov, and D. Sorensen. </author> <note> LAPACK Users' Guide. SIAM, </note> <year> 1995. </year>
Reference-contexts: If you accept my Pareto premise, then simulations may have huge supporting code systems. There is plenty for software engineering to do since computer science defines and implements the vast majority of the system. The ideas of software quality, going back to the early 1980s <ref> [5] </ref>, may be sufficient for their part. This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2].
Reference: [6] <author> Krzysztof R. Apt and Ernst-Rudiger Olderog. </author> <title> Verification of Sequential and Concurrent Programs. </title> <address> Spring-Verlag, </address> <year> 1991. </year>
Reference-contexts: Fred Brooks' "No silver bullets." The PSE Issue. The software engineering literature is filled with magical solutions to development problems. Fred Brooks said it best in "No Silver Bullets" <ref> [6] </ref>: "There is no single development in either technology or management technique which by itself promises even one order-of-magnitude improvement within a decade in productivity, in reliability, in simplicity." For ASCI, a major focus is on what are known in the literature as problem-solving environments (PSE).
Reference: [7] <author> Aristotle. </author> <title> Prior and Posterior Analytics. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1949. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice <ref> [7] </ref>, [8], [10], [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [8] <author> O. Balci and R. G. Sargent. </author> <title> A bibliography of simulation. </title> <booktitle> Simuletter, </booktitle> <pages> pages 15-21, </pages> <year> 1984. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], <ref> [8] </ref>, [10], [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [9] <editor> Osman Balci. </editor> <title> Principles of simulation model validation, verification, and testing. </title> <journal> Transactions of the society for computer simulation, </journal> <volume> 14(1), </volume> <year> 1997. </year>
Reference-contexts: However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too. Likewise, the virtual machine must be validated using such programs as paranoia 5 and machar <ref> [9] </ref>. 60. How to measure internal quality. There are possible measures of internal quality about programs. We need only turn to the compiler literature. The literature develops good mathematical models of structure. The hope of measuring internal quality every compilation rests on understanding how quality manifests itself.
Reference: [10] <editor> Osman Balci and Richard E. Nance. </editor> <title> Formulated problem verification as an explicit requirement of model credibility. </title> <journal> Simulation, </journal> <volume> 45 </volume> <pages> 76-86, </pages> <year> 1985. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], <ref> [10] </ref>, [14], [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be.
Reference: [11] <author> Michael J. Beeson. </author> <title> Foundations of Constructive Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Other areas of engineering have met the crisis. We have some hints from reading Deming's Out of the Crisis <ref> [11] </ref>. We can see that the concept of quality he proposes has yet to take hold of American manufacturing. Since software engineering uses these same metaphors, we can expect software engineering to not adhere to Deming's thoughts. <p> Deming and the 14 points. I can think of no better way to start any discussion about quality than to look at W. Edward Dem-ing's Fourteen Points <ref> [11] </ref> seen in Figure 2. After all, it has worked well for Japan. Some of these ideas are pretty radical, especially in an organization that has been quite successful over the years doing something else. However, engineering education today stresses these principles because organizations succeed when they adopt these attitudes. <p> Quality | too expensive? Quality is hardly a new issue. Historically the cost of quality has been thought to be extremely high in both time and money. Out of the Crisis <ref> [11] </ref> attacks this view much better than I could. But since "time is money," costs make it hard to sell quality in our frantic, market-driven economic system.
Reference: [12] <author> B. Beizer. </author> <title> Software Testing Techniques. </title> <publisher> Van Nos-trand Reinhold, </publisher> <year> 1990. </year>
Reference-contexts: Now we have LAPACK. According to Professor James Demmel, new releases of LAPACK will be for IEEE 754 arithmetic only. A personal communication from Professor Demmel indicates that there are many reasons for going to IEEE only arithmetic <ref> [12] </ref>, [13]. Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1.
Reference: [13] <editor> Paul Benacerraf and Hilary Putnam, editors. </editor> <booktitle> Philosophy of Mathematics: selected readings. </booktitle> <publisher> Cam-bridge University Press, </publisher> <address> 2 edition, </address> <year> 1983. </year>
Reference-contexts: Now we have LAPACK. According to Professor James Demmel, new releases of LAPACK will be for IEEE 754 arithmetic only. A personal communication from Professor Demmel indicates that there are many reasons for going to IEEE only arithmetic [12], <ref> [13] </ref>. Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1.
Reference: [14] <author> J. Bieman and Yin. </author> <title> Designing for software testability using automated oracles. </title> <booktitle> In Proc. International Test Conference, </booktitle> <pages> pages 900-907, </pages> <month> Sep </month> <year> 1992. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], <ref> [14] </ref>, [15], [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [15] <author> Errett Bishop and Douglas Bridges. </author> <title> Constructive Analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], <ref> [15] </ref>, [18], [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [16] <author> Barry Boehm and Tom DeMarco. </author> <title> Software risk management. </title> <journal> IEEE Software, </journal> <volume> 14 </volume> <pages> 17-89, </pages> <year> 1997. </year>
Reference-contexts: Documentation is not a panacea. Why is the "programming" literature such a mess? We are likely documenting the wrong information: The derivation is the thing 12. Software engineering metrics and processes, as currently practiced, measure nothing of interest except those in Chapter 8 of Fenton and Pfleeger <ref> [16] </ref>. I claim that those measure are more of cognitive complexity than any inherent measure of intrinsic complexity. 39. People, Design and Computing Environment Needs: A Summary. Looking at the anecdotal evidence, we can find many areas of concern. People. <p> Such information never has, as far as I know, been applied to the concept of internal quality. They have been used to derive metrics <ref> [16] </ref>. Some compiler do communicate information about parallelism. However, a better information/feedback mechanism would make for better internal quality. I find the pragma or directive approach dangerous, in the same way Hatton found optimization dangerous. Summary. This section has proposed working definitions of validation and verification.
Reference: [17] <author> Thomas Bowen, Gary Wigle, and Jay Tsai. </author> <title> Specification of software quality attributes. </title> <type> Technical Report RADC-TR-85-37, </type> <institution> Rome Air Development Center, </institution> <month> Feb </month> <year> 1985. </year>
Reference-contexts: Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs [22]. 6. The Fetzer boundary [43]. In Fetzer's controversial (in computer science) article <ref> [17] </ref> "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7. Machine Codes as the active agents.
Reference: [18] <author> Claude Brezinski. </author> <title> Extrapolation Methods : Theory and Practice. Number 2 in Studies in Computational Mathematics. </title> <publisher> North Holland, </publisher> <year> 1991. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], <ref> [18] </ref>, [20], [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [19] <author> Frederick P. Brooks, Jr. </author> <title> No silver bullet. </title> <editor> In H.- J. Kugler, editor, </editor> <booktitle> Information Processing 1986, the Proceedings of the IFIP 10th World Congress, </booktitle> <pages> pages 1069-76, </pages> <year> 1986. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], <ref> [19] </ref>, [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [20] <author> Frederick P. Brooks, Jr. </author> <booktitle> The Mythical Man-Month : Essays on Software Engineering. Anniversary Edition. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], <ref> [20] </ref>, [19], [28], [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [21] <author> A. Catlin, C. Chui, C. Crabill, E.N. Houstis, S. Markus, J.R. Rice, and S. Weerawarana. Pdelab: </author> <title> An object-oriented framework for building problem solving environments for pde based applications. </title> <editor> In A. Vermeulen, editor, </editor> <booktitle> 2nd Object-Oriented Numerics Conf., </booktitle> <pages> pages 79-92, </pages> <address> Corvallis, OR, </address> <year> 1994. </year> <note> Rogue-Ware Software. </note>
Reference-contexts: Saying all this does not make it so. More to the point, what are the properties of these magical morphisms? This is obviously technical work that needs completion. Some ideas come in <ref> [21] </ref>. VII. Intrinsic Quality versus Internal Quality Purpose: To set the difference between intrinsic and internal quality. 52. What is Intrinsic Quality? In science, Occam's Razor stands as the measure of internal quality in a relative sense. Each scientific and engineering discipline has its own view of quality.
Reference: [22] <author> A.C. Catlin, M.G. Gaitatzes, E.N. Houstis, Z.Ma, S. Markus, J.R. Rice, N.H. Wang, and S. Weer-awarana. </author> <title> The softlab experience: Building virtual laboratories for computational science. </title> <type> Technical Report CSD-TR-97-014, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> April </month> <year> 1997. </year>
Reference-contexts: We have a finite number of numbers, finite precision and finite processes. 5. Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs <ref> [22] </ref>. 6. The Fetzer boundary [43]. In Fetzer's controversial (in computer science) article [17] "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7.
Reference: [23] <author> Francoise Chaitin-Chatelin and Valerie Fraysse. </author> <title> Lectures on Finite Precision Computations. Software, Environments and Tools. </title> <publisher> SIAM, </publisher> <year> 1996. </year>
Reference-contexts: 1. Introduction: There is a disconnect between the modelers and the managers The January-March, 1998, issue of IEEE Computational Science and Engineering presented two papers on the Department of Energy's Accelerated Scientific Computing Initiative or ASCI. These two papers come from two respected authors. John Gustafson <ref> [23] </ref> from Ames Lab at Iowa State presented a discussion of the computational problems with ASCI. Alex Larzelere [31], the past Director for Strategic Computing and Modeling for Department of Energy Defense Programs, discussed software engineering and management aspects of ASCI.
Reference: [24] <author> T. E. Cheatham, G. H. Holloway, and T. A. Town-ley. </author> <title> Symbolic evaluation and analysis of programs. </title> <journal> Trans. on Soft. Engr., </journal> <volume> 5 </volume> <pages> 402-417, </pages> <year> 1979. </year>
Reference-contexts: Computing is about insight. But let us be clear about the process. We are not interested in the codes per se. Richard Hamming said it best: "The purpose of computing is insight, not numbers" <ref> [24] </ref>. Insight is a very elusive commodity and may take years to develop. Insight is what the scientist or engineer counts on to guide her/his research. Nobel prizes are given for insight and not necessarily details. 12. Artists need insights, too. A story for the ages.
Reference: [25] <author> L. A. Clarke. </author> <title> A system to generate and symbolically execute programs. </title> <journal> Trans. on Soft. </journal> <volume> Engr., </volume> <pages> pages 215-222, </pages> <year> 1976. </year>
Reference-contexts: Forgiven. Except twenty years later and twice in one month NORAD threatened to shoot everything due to computer glitches <ref> [25] </ref>. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive [36]. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over <p> NORAD threatened to shoot everything due to computer glitches <ref> [25] </ref>. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive [36]. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. One problem among many was that two different binary versions of the number 0.1 were used. <p> Can we meet expectations? Is it possible that American management practices and software engineering can guarantee that millions of lines of code will be without significant defects? If Hatton is correct that the number of fatal errors is proportional to the log of the number of lines of code <ref> [25] </ref>, then a million line code has around ten fatal errors. 6. Other areas of engineering have met the crisis. We have some hints from reading Deming's Out of the Crisis [11]. We can see that the concept of quality he proposes has yet to take hold of American manufacturing. <p> First, how valuable is experience and insight? Vladimir Horowitz was convinced that one note of the many thousands to be found in Beethoven's Apassionata was wrong. Going to the original, he found he was right. The score had been miscopied almost from the beginning <ref> [25] </ref>. The moral is clear: Horowitz had the insight born of years of study and experience | something that seems to be scarce these days. Beethoven wrote wonderfully structured music; Horowitz knew from the structure what must have been the note. These insights are crucial to modeling. <p> There is a large collection of software tools | sometimes called shelfware | that industrial groups attempt to use but soon discard, for whatever reasons, as irrelevant. "The shelfware syndrome is singular, if not unique, to the software world" <ref> [25] </ref>. So the hunt continues for quality design disciplines and methods for measuring quality. 35. Programming is not art. Beethoven knew what he was doing. There will be those who counter the drive to understand quality in terms of the code as written. <p> from Hatton sets the tone for the "speed freaks:" "It is probably best to ban optimization of any ... code on the grounds that it is responsible for the bulk of the compiler errors reported in most languages and also because it effectively alters the defined characteristics of the program" <ref> [25] </ref>. It has been my observation, first at Bell Labs and again as moderator of comp.parallel, that programmers love to talk about tricks to make the code faster but I have never heard a programmer talk about tricks making a code safer. Speed is the opiate of programmers. <p> Let me term internal quality those elements of programs that can be measured or attributed to the abstract program tree of the program. Hatton observes that poor internal quality and dependence on weak linguistic features almost guarantee poor overall quality <ref> [25] </ref>: ... all the [internal] quality that is likely to be built into a code component must be built in before compilation, while the software is soft. .... After compilation, the software becomes brittle and the costs of building in [internal] quality, together with programmer resistance, rise considerably. 58. <p> After compilation, the software becomes brittle and the costs of building in [internal] quality, together with programmer resistance, rise considerably. 58. Measures of Internal Quality of Programs. The following measures proposed by <ref> [25] </ref> are measures of internal quality: All the following numbers should be zero: 1. Number of statically-detected faults. 2. Number of transgression of group programming standards. 3. Number of uses of nonstandard features or vendor-dependent linguistic features with respect to the programming language standard. 4.
Reference: [26] <author> W. J. Cody. </author> <title> Algorithm 665. machar: A subroutine to dynamically determine machine parameters. </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 14(4) </volume> <pages> 302-31, </pages> <month> Dec </month> <year> 1988. </year>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton <ref> [26] </ref> and other sources [44], [45], [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it.
Reference: [27] <author> W. J. Cody and W. Waite. </author> <title> Software Manual for the Elementary Functions. </title> <publisher> Prentice-Hall, </publisher> <year> 1980. </year>
Reference-contexts: This encoding of the system is the subject of Carnap's and Hempel's development documented in [48]. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], [4], <ref> [27] </ref>. Here we have rational numbers so we have a countable number of numbers and so introduce error. Whether or not Platonic analysis and constructive analysis are equivalent is a long standing point of contention. 3.
Reference: [28] <author> B. Connolly. </author> <title> A process for preventing software hazards. </title> <journal> Hewlett-Packard J., </journal> <pages> pages 47-52, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], <ref> [28] </ref>, [40], [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [29] <author> M.A. Cornea-Hasegan, C. Costian, D.C. Marinescu, I. Martin, and J.R. Rice. </author> <title> Towards problem solving environments for high performance computing. </title> <booktitle> In High Performance Computing '94, National Supercomputer Research Center, Singapore, </booktitle> <pages> pages 354-366, </pages> <year> 1994. </year>
Reference-contexts: What is that organization about? How do they do it? For me, that organization is the famous "Skunk Works," the Lockheed-Martin's Lockheed Advanced Development Company. The Skunk Works developed the U-2 and SR-71. A check into how Clarence L. "Kelly" Johnson <ref> [29] </ref> and Ben Rich 5 [41] ran the Skunk Works reveals an organiza-tion that I am sure Deming would have given a stamp of approval 1 . 27. Overloaded minds and mind boggling cognitive complexity. V. A. <p> We are working to change that. 12 homework assignment. The setting is the 1940s. The Lockheed P38 Lighting was designed by "Kelly" Johnson at the Skunk Works. During development and even into early use, the tails twisted off when the P38 flew faster than about Mach .60 <ref> [29] </ref>. Johnson had suspected from the very beginning that compressibility effects in the trans-sonic region might cause problems. But first, the team had to battle critics who thought it was the Lighting's unique design. Compressibility finally won out as the culprit.
Reference: [30] <author> Susan Craw. </author> <title> Refinement complements verification and validation. </title> <journal> International Journal of Human Computer Studies, </journal> <volume> 44 </volume> <pages> 245-56, </pages> <month> Feb </month> <year> 1996. </year>
Reference-contexts: A. Modeling And Insight Are The Focus 10. Modeling is the reason we write simulations. Our primary concern is about models, not simulations. Models refer to the systems of assumptions, functions, and relations that make up a scientific or engineering discipline <ref> [30] </ref>. Validation is the process by which we attempt to convince ourselves that the simulations correctly capture the model and have some relation to an observable world. But models are not reality! Validation to a model is not validation to the "real world." 11. Computing is about insight. <p> Each scientific and engineering discipline has its own view of quality. There is the mythical, elusive mathematical elegance in mathematical circles. However, science, engineering and mathematics all use consensus as the basis of knowledge <ref> [30] </ref>. In computer science, the concept of quality may be the most elusive of all. I would characterize what computer science has now focused on as internal quality: lines of code, test coverage, etc. Intrinsic quality is more since I see it as addressing all implementations.
Reference: [31] <author> W. Edwards Deming. </author> <title> Out of the Crisis. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: These two papers come from two respected authors. John Gustafson [23] from Ames Lab at Iowa State presented a discussion of the computational problems with ASCI. Alex Larzelere <ref> [31] </ref>, the past Director for Strategic Computing and Modeling for Department of Energy Defense Programs, discussed software engineering and management aspects of ASCI. The two papers could not have been more diametrically opposed in their content.
Reference: [32] <author> J. Demmel. </author> <title> Lapack and ieee arithmetic. </title> <type> personal communications, </type> <month> Oct 14 </month> <year> 1998. </year>
Reference-contexts: The final moments of Chalk Three were observed from two other helicopters. "... Chalk Three suddenly pitches sharply upwards, then pitches sharply downwards, plummeting until it impacts the earth at a near vertical angle, upside down and backwards" <ref> [32] </ref>. These are just a few of the problems in technical systems that have surfaced in the literature. 4.
Reference: [33] <author> J. Demmel and X. Li. </author> <title> Faster numerical algorithms via exception handling. </title> <journal> IEEE Trans Comp, </journal> <year> 1994. </year>
Reference-contexts: To caution further: "To expect process models of themselves to improve the quality of software ... permitting, for example, total mechanisation of the process, is as futile as the search over the last three decades for automatic programming; [It] is, in fact, part of the same mirage." <ref> [33] </ref> 33. Academia is part of the problem space, not the solution space. But things get worse. In a scathing indictment of academic computer science, Greg Wilson pointed out that academic computer science is flawed in that the students always play with toy projects [51].
Reference: [34] <author> Edsger W. Dijkstra and Carel S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: But be aware that these costs are high: Leveson reports that $15 million to inspect a 1,200 line program for a nuclear reactor in Canada <ref> [34] </ref>. How much more so for ASCI and other high profile simulations, as in the aerospace and automotive industry? 30. There is no dearth of advice out there.
Reference: [35] <author> T.T. Drashansky, A. Joshi, and J.R. Rice. </author> <title> SciA-gents | an agent based environment for distribute cooperative scientific computing. </title> <booktitle> In Tools in AI, </booktitle> <year> 1995. </year>
Reference-contexts: Cognitive complexity is the difficulty in understanding a concept, thought, or system. Ultimately, the validity of code comes from our ability to understand the entire simulation. Cognitive complexity is an attempt to quantify mind-boggling. We know that this complexity is 7 2 "things" <ref> [35] </ref> and is closely related to Pareto distributions. but where is it for each person? for the programming group? How do we get a handle on this? 29. Quality | too expensive? Quality is hardly a new issue.
Reference: [36] <author> Tzvetan Drashansky. </author> <title> A software architecture of col-laborating agents for solving pdes. </title> <type> Master's thesis, </type> <institution> Purdue, </institution> <month> Jan </month> <year> 1995. </year>
Reference-contexts: Forgiven. Except twenty years later and twice in one month NORAD threatened to shoot everything due to computer glitches [25]. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive <ref> [36] </ref>. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. <p> threatened to shoot everything due to computer glitches [25]. * The software in Apollo 11 had the sign wrong on the gravitational constant: some programmer made gravity repulsive instead of attractive <ref> [36] </ref>. * Gemini V was 100 miles off course because a programmer played fast and loose with physics [25], [36]. * The Patriot missiles missed a Scud over Dhahran, Saudi Arabia, during the Gulf War. One problem among many was that two different binary versions of the number 0.1 were used.
Reference: [37] <author> R. E. Fairley. </author> <title> Static analysis and dynamic testing of computer software. </title> <booktitle> Computer, </booktitle> <pages> pages 14-28, </pages> <year> 1978. </year>
Reference-contexts: One might counter with, "But reliability is the same thing." The Horowitz story above shows that reliability is not equal to correctness: the score was reliably copied | except once. To read the literature on the ISO 9xxx standards and the Capability Maturity Model (CMM) <ref> [37] </ref>, one would think all is well. Interestingly enough, Japanese industry has no ISO standards because their own national standards exceed the ISO/CMM standards.
Reference: [38] <author> D. Famum. </author> <title> Compiler support for floating point computation. </title> <journal> Software Practice & Experience, </journal> <volume> 18(1), </volume> <year> 1988. </year>
Reference-contexts: One of his comments was, "I've never seen a poorly performing, under-loaded system." This is especially true for people: overloaded, confused people lead to disasters. Charles Perrow, in Normal Accidents <ref> [38] </ref>, advances a thesis that there are two causes for accidents such as Three Mile Island: mind-boggling component complexity and mind-boggling interconnectivity of components.
Reference: [39] <author> S. Feferman. </author> <title> Constructive theories of functions and classes. </title> <editor> In M. Boffa, D. van Dalen, and K. McAloon, editors, </editor> <booktitle> Logic Colloquia 1978 Mons, number 97 in Stud. Logic Found Math., </booktitle> <pages> pages 159-224. </pages> <publisher> North Holland, </publisher> <year> 1979. </year>
Reference-contexts: Number of uses of features outside a validated, safe subset. (ANSI Fortran, ISO/IEC 9899 for C, New standard for C++). 5. Number of uses outside standard, validated libraries such as the C standard <ref> [39] </ref>, LAPack [1]. However, experience certainly shows that unless these attributes are uniformly and universally enforced in each and every compile, our best ef forts will be for naught. 59. The virtual machine must be tested, too.
Reference: [40] <author> N. E. Fenton and Shari Lawrence Pfleeger. </author> <title> Software Metrics: A Rigorous and Practical Approach. </title> <publisher> PWS Publishing Company, </publisher> <address> 2 edition, </address> <year> 1997. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], [28], <ref> [40] </ref>, [50], [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [41] <author> James H. </author> <title> Fetzer. Program verification: the very idea. </title> <journal> CACM, </journal> <volume> 31(9), </volume> <year> 1988. </year>
Reference-contexts: What is that organization about? How do they do it? For me, that organization is the famous "Skunk Works," the Lockheed-Martin's Lockheed Advanced Development Company. The Skunk Works developed the U-2 and SR-71. A check into how Clarence L. "Kelly" Johnson [29] and Ben Rich 5 <ref> [41] </ref> ran the Skunk Works reveals an organiza-tion that I am sure Deming would have given a stamp of approval 1 . 27. Overloaded minds and mind boggling cognitive complexity. V. A.
Reference: [42] <author> L. D. Fosdick. </author> <title> Techniques of static program analysis. </title> <editor> In M. A. Hennell and L. M. Delves, editors, </editor> <booktitle> Production and Assessment of Numerical Software, </booktitle> <pages> pages 185-225. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference-contexts: One problem among many was that two different binary versions of the number 0.1 were used. This led the Patriots to improperly compute the closing speed <ref> [42] </ref>. * On March 13, 1985, a Blackhawk helicopter from Fort Bragg, North Carolina, crashed. Blackhawks are "fly-by-wire," meaning that computers mediate all control actions by the pilot. The final moments of Chalk Three were observed from two other helicopters. "...
Reference: [43] <author> L. Fox and D. F. Mayers. </author> <title> Computing Methods For Scientists and Engineers. </title> <publisher> Clarendon Press, </publisher> <year> 1968. </year>
Reference-contexts: Scott domains as a means of understanding semantics. Scott domains allow us to understand the meaning of computing constructs and 2 My thanks to one of the referees who suggested this wording. 10 programs [22]. 6. The Fetzer boundary <ref> [43] </ref>. In Fetzer's controversial (in computer science) article [17] "Program Proofs: The Very Idea" advanced the idea that until we actually run a program everything is a formal system capable of analysis. Once run, the system is no longer formal and proof is meaningless. 7.
Reference: [44] <author> P. A. Fox, A. D. Hall, and N. L. Schryer. </author> <title> Testing the port utilities. </title> <journal> TOMS, </journal> <pages> pages 176-188, </pages> <year> 1978. </year>
Reference-contexts: Balci's and Sargent's Circle fails to capture that V&V plays a vital role in the self-correcting nature of the process of science and not just the product. In OR, this may not be a problem, but in science this is exactly the problem (See <ref> [44] </ref>). Validation should guarantee a model's usefulness and upgrade the process by which science and engineering proceed. 17. Modern software development is not a cottage industry. Secondly, the Sargent's Circle is too old (1979) to recognize the mod ern software development processes. <p> This support system goes to the very heart of software requirements and specification but certainly is not part of the science, per se. But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2]. I discussed the evolution in <ref> [44] </ref>. Suppe [48] presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no. Not epistemology! If the purpose of computing is insight, then the quality of the computing is measured by the quality of the insight. <p> The point is that if we cannot agree as to what constitutes knowledge then we cannot agree what constitutes quality. Nor can we agree on quality assurance until we can agree on justification. 21. CSE Principles. In <ref> [44] </ref>, I did propose three principles for computational science and engineering (CSE) knowledge: " Physical Exactness. We must strive to eliminate non-physical (mathematically convenient) assumptions. 1. 2. Computability. We must identify non-computable relationships. Most mathematical relationships turn out to be approximate, not exact. 3. Bounded Errors. <p> Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources <ref> [44] </ref>, [45], [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [45] <author> E. Gallopoulos, E. Houstis, and J. R. Rice. </author> <title> Future research directions in problem solving environments for computational science. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> April </month> <year> 1991. </year> <title> Report of Workshop on Research Directions in Integrating Numerical Analysis, </title> <booktitle> Symbolic Computing, Computational Geometry, and Aritificial Intelligence for Computational Science held in Washington, </booktitle> <address> DC, </address> <month> April 11-12, </month> <year> 1991. </year> <note> Distributed in PostScript in early 1993. </note>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], <ref> [45] </ref>, [46], [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [46] <author> Efstratios Gallopoulos, Elias Houstis, and John R. Rice. </author> <title> Computer as thinker/doer: Problem-solving environments for computational science. </title> <booktitle> IEEE Computational Science & Engineering 1, </booktitle> <pages> pages 11-23, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], <ref> [46] </ref>, [51]. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [47] <author> Stratis Gallopoulos, Elias Houstis, and John R. Rice. </author> <title> Workshop on problem-solving environments: findings and recommendations. </title> <journal> Computing Surveys, </journal> <pages> pages 277-9, </pages> <month> Jun </month> <year> 1995. </year>
Reference-contexts: What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science [48] and continuing development through the 1990s [49]. I have tried to use these ideas in <ref> [47] </ref>. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. There are three classes of systems to attend to: observational, theoretical or formal, and calculational.
Reference: [48] <author> David W Gledhill. </author> <title> The use of case tools as an aid to the verification of complex software systems. </title> <journal> Simulation, </journal> <volume> 63 </volume> <pages> 329-36, </pages> <month> Nov </month> <year> 1994. </year>
Reference-contexts: But the concept of quality in science and mathematics go back 2,300 years to the Posterior Analytics of Aristotle [2]. I discussed the evolution in [44]. Suppe <ref> [48] </ref> presented a wonderful review of the state of the philosophy of science. There is much to contemplate in Suppe's remarks. 20. Oh, no. Not epistemology! If the purpose of computing is insight, then the quality of the computing is measured by the quality of the insight. <p> That having been said, let me plunge onward. What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science <ref> [48] </ref> and continuing development through the 1990s [49]. I have tried to use these ideas in [47]. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. <p> The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational. There are three classes of systems to attend to: observational, theoretical or formal, and calculational. Carnap and Hempel <ref> [48] </ref> already address the observational-theoretical link. Crossing the Fetzer boundary (see below) between the theoretical and calculational system leaves the formal world. <p> Classical analysis as practiced in science and engineering. This is the world of idealized science. Here we have infinite processes, an uncountable number of numbers, countably infinite precision, and idealized solution processes. This encoding of the system is the subject of Carnap's and Hempel's development documented in <ref> [48] </ref>. 2. Constructive analysis as practiced by followers of Errett Bishop, theoretical computer science, and certain areas of logic [3], [4], [27]. Here we have rational numbers so we have a countable number of numbers and so introduce error.
Reference: [49] <author> Joseph Goguen and Susanna Ginali. </author> <title> A categorical approach to general systems theory. </title> <booktitle> In Applied General Systems Research, </booktitle> <pages> pages 257-270. </pages> <publisher> Plenum, </publisher> <year> 1978. </year>
Reference-contexts: That having been said, let me plunge onward. What I have to say in this section relates to mathematics and computing. I do note the philosophy of science had many very interesting developments on the logic of science [48] and continuing development through the 1990s <ref> [49] </ref>. I have tried to use these ideas in [47]. The logical rules for the observed system and the theoretical system are beyond the scope of this discussion. 48. The three classes: observational, theoretical, and calculational.
Reference: [50] <author> D. Goldberg. </author> <title> What every computer scientist should know about floating-point arithmetic. </title> <journal> ACM Comuputing Surveys, </journal> <volume> 23(1) </volume> <pages> 5-48, </pages> <month> Mar </month> <year> 1991. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], [28], [40], <ref> [50] </ref>, [52]. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [51] <author> R. L. Goodstein. </author> <title> A Text-Book of Mathematical Analysis: The uniform calculus and its applications. </title> <publisher> Clarendon Press, </publisher> <pages> 1948-1949. </pages>
Reference-contexts: Academia is part of the problem space, not the solution space. But things get worse. In a scathing indictment of academic computer science, Greg Wilson pointed out that academic computer science is flawed in that the students always play with toy projects <ref> [51] </ref>. It is my observation, both in and out of academia, that science and engineering students "pick up" computer knowledge on their own. This makes Wilson's observation even more chilling: the players have neither the skill set nor experience to design, implement or validate a large, complex simulation. 34. <p> Good bye, X-MP. 38. What should we conclude? A long list of points. Below are some conclusions from what one can only hope will become a widely read paper by Les Hatton [26] and other sources [44], [45], [46], <ref> [51] </ref>. Some obvious questions are listed too. 1. Good practice matters. Unfortunately, academics don't teach it and organizations can't enforce it. What is good practice? Is good practice decidable? Enforceable? What good practice is prevented by languages? What good practices are available to enhance speed? 2.
Reference: [52] <author> Carl A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Much of the PSE work is being reported out of Purdue under John Rice [7], [8], [10], [14], [15], [18], [20], [19], [28], [40], [50], <ref> [52] </ref>. It is too early to tell exactly what form these systems will take or what their exact place in the scheme of thing will be. However, one must be wary that management will see PSEs as silver bullets in Brooks' sense.
Reference: [53] <author> John Gustafson. </author> <title> Computational verifiability and feasibility of the asci program. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> Jan.-Mar. </volume> <year> 1998. </year>
Reference: [54] <author> J. Hagar. </author> <title> A systems approach to software testing and reliability. </title> <booktitle> In 10th Ann. Software Reliability Symposium, </booktitle> <month> Jun </month> <year> 1992. </year>
Reference: [55] <author> J. Hagar and J. Bieman. </author> <title> Adding formal specifications to a proven v&v process for system-critical flight software. In Proc. Workshop in Industrial-Strength Formal Spec. </title> <type> Tech. 95, </type> <year> 1995. </year>
Reference: [56] <author> Jon Hagar and James M. Bieman. </author> <title> Using formal specifications as test oracles for system critical software. </title> <address> AdaLetters, </address> <month> Nov </month> <year> 1996. </year> <note> Also published in IFAC '95. </note>
Reference: [57] <author> R. G. Hamlet. </author> <title> Testing programs with the aid of a compiler. </title> <journal> Trans. on Soft. </journal> <volume> Engr., </volume> <pages> pages 279-289, </pages> <year> 1977. </year>
Reference: [58] <author> R. W. </author> <title> Hamming. Numerical methods for scientists and engineers. </title> <publisher> McGraw-Hill, </publisher> <year> 1973. </year>
Reference: [59] <author> Rom Harre. </author> <title> The Principles of Scientific Thinking. </title> <publisher> The University of Chicago Press, </publisher> <year> 1970. </year>
Reference: [60] <author> William S. Hatcher. </author> <title> Foundations of Mathematics. </title> <editor> W. B. </editor> <publisher> Saunders, </publisher> <address> Philadelphia, </address> <year> 1968. </year>
Reference: [61] <author> L Hatton and A. Roberts. </author> <title> How accurate is scientific software. </title> <journal> Trans. on Soft. Engr., </journal> 20(10) 785-797, 1994. 
Reference: [62] <author> Les Hatton. </author> <title> Safer C: Developing Software for High-Integrity and Safety Critical Systems. </title> <publisher> McGraw-Hill, </publisher> <year> 1995. </year>
Reference: [63] <author> Les Hatton. </author> <title> The T experiments: Errors in scientific software. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 27-38, </pages> <month> Apr-Jun </month> <year> 1997. </year>
Reference: [64] <author> Wim H. Hesselink. </author> <title> Programs, Recursion and Unbounded Choice. </title> <booktitle> Number 27 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference: [65] <author> Arend Heyting. </author> <title> Intuitionism: an introduction. </title> <publisher> North-Holland, </publisher> <address> 3 edition, </address> <year> 1971. </year>
Reference: [66] <author> E.N. Houstis, J.R. Rice, S. Weerawarana, A.C. Catlin, P. Papachiou, K.Y. Wang, and M. Gai-tatzes. </author> <title> Parallel (//) ellpack: A problem solving environment for pde based applications on multi-computer platforms. </title> <type> Technical Report CSD-TR-96-070, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> November </month> <year> 1996. </year>
Reference: [67] <author> W. E. Howden. </author> <title> Applicability of software validation techniques to scientific programs. </title> <journal> Trans. on Prog. Lang and Sys., </journal> <pages> pages 307-320, </pages> <year> 1980. </year> <month> 17 </month>
Reference: [68] <author> William E. Howden. </author> <title> Validation of scientific pro-grams. </title> <journal> Computing Surveys, </journal> <volume> 14(2) </volume> <pages> 193-228, </pages> <month> June </month> <year> 1982. </year>
Reference: [69] <author> IEEE. </author> <title> IEEE Standard for Binary Floating-Point Arithmetic. </title> <address> ANSI/IEEE Std 754-1985. New York, NY: </address> <institution> Institute of Electrical and Electronics Engineers, </institution> <year> 1985. </year>
Reference: [70] <author> IEEE. </author> <title> Guide to engineering and scientific software. </title> <journal> IEEE-Spectrum, </journal> <volume> 29 </volume> <pages> 28-93, </pages> <year> 1992. </year>
Reference: [71] <author> Louis O. Kattsoff. </author> <title> A Philosophy of Mathematics. Books for Libraries, </title> <address> Freeport, NY, </address> <year> 1948 </year> <month> (reprint </month> <year> 1969). </year>
Reference: [72] <author> J. C. King. </author> <title> Symbolic execution and program testing. </title> <journal> Comm. ACM, </journal> <volume> 19(7) </volume> <pages> 385-394, </pages> <year> 1976. </year>
Reference: [73] <author> S. C. Kleene. </author> <title> Introduction to Metamathematics. </title> <publisher> North Holland Publishing Company, </publisher> <year> 1971. </year> <note> Original 1952. </note>
Reference: [74] <author> Morris Kline. </author> <title> Mathematics: The loss of certainty. </title> <publisher> Oxford University Press, </publisher> <year> 1980. </year>
Reference: [75] <author> Peter L. Knepell and Deborah C. Arangno. </author> <title> Simulation Validation: A Confidence Assessment Methodology. </title> <publisher> IEEE Computer Press, </publisher> <address> Los Alimitos, CA, </address> <year> 1993. </year>
Reference: [76] <author> J. C. Knight and N. G. Leveson. </author> <title> An experimental evaluation of the assumption of independence in multi-version programming. </title> <journal> Trans. on Soft. Engr., </journal> <volume> 10(1) </volume> <pages> 96-109, </pages> <year> 1986. </year>
Reference: [77] <author> D. E. Knuth. </author> <title> Seminumerical Algorithms of The Art of Computer Programming, chapter Accuracy of floating-point arithmetic, </title> <address> pages 195-210. </address> <publisher> Addison-Wesley, </publisher> <year> 1969. </year>
Reference: [78] <author> Keri-I Ko. </author> <title> Complexity Theory of Real Functions. </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference: [79] <author> A. Koenig. </author> <title> C Traps & Pitfalls. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [80] <author> A. Kolmogoroff. </author> <title> Zur Deutung der intuitionistischen Logik. </title> <journal> Mathmatische Zeitschrift, </journal> <volume> 33 </volume> <pages> 58-65, </pages> <year> 1932. </year>
Reference: [81] <author> Israel Koren. </author> <title> Computer Arithmetic Algorithms. </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year>
Reference: [82] <author> Thomas S. Kuhn. </author> <title> The structure of scientific revolutions. </title> <editor> In Otto Neurath, Rudolf Carnap, and Charles Morris, editors, </editor> <booktitle> International Encyclopedia of Unified Science, volume I-II. Unknown, </booktitle> <year> 1962. </year>
Reference: [83] <author> Ulrich W. Kulisch and Willard L. Miranker. </author> <title> Computer Arithmetic in Theory and Practice. </title> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference: [84] <author> Imre Lakatos. </author> <title> Proofs and Refutation. </title> <publisher> Cambridge University Press, </publisher> <year> 1976. </year>
Reference: [85] <author> Alex R. Larzelere II. </author> <title> Creating simulation capabilities. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> Jan.-Mar. </volume> <year> 1998. </year>
Reference: [86] <author> Leonard Lee. </author> <title> The Day the Phones Stopped. Primus-Donald I. Fine, </title> <publisher> Inc, </publisher> <address> New York, </address> <year> 1992. </year>
Reference: [87] <author> M. M. Lehman. </author> <title> Models in software development and evolution. In Software Process Modeling in Practice. </title> <publisher> Butterworth-Heinemann, </publisher> <address> London, </address> <year> 1993. </year>
Reference: [88] <author> N. Leveson. </author> <title> Software safety: What, why and how. </title> <journal> ACM Computing Surveys, </journal> <pages> pages 125-63, </pages> <year> 1986. </year>
Reference: [89] <author> B. Littlewood and L. Stringini. </author> <title> The risks of software. </title> <publisher> Scientific American, </publisher> <month> Nov </month> <year> 1992. </year> <pages> 38-43. </pages>
Reference: [90] <author> Jacques Loeckx and Kurt Sieber. </author> <title> The Foundations of Program Verification. </title> <publisher> Wiley Teubner Series in Computer Science. Wiley, </publisher> <year> 1984. </year>
Reference: [91] <author> Zohar Manna. </author> <title> Mathematical Theory of Computation. </title> <publisher> McGraw Hill, </publisher> <year> 1974. </year>
Reference: [92] <author> T. A. McCabe. </author> <title> A complexity measure. </title> <journal> Trans. on Soft. Engr., </journal> <volume> SE2(4):308-20, </volume> <year> 1976. </year>
Reference: [93] <author> G. J. Meyers. </author> <title> The Art of Software Testing. </title> <publisher> Wiley, </publisher> <year> 1979. </year> <note> QA76.6 .M888. </note>
Reference: [94] <author> Peter W. Michor. </author> <title> Functors and categories of Ba-nach spaces: tensor products, operator ideals and functors of Banach spaces. </title> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference: [95] <author> Mohammad Modarres. </author> <title> Reliability and Risk Analysis: What Every Engineer Should Know About Reliability and Risk Analysis. </title> <publisher> Marcel Dekker, </publisher> <year> 1993. </year>
Reference: [96] <author> R. P. Moody. </author> <booktitle> Is programming an art? ACM Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 19-20, </pages> <year> 1992. </year>
Reference: [97] <author> D. J. Murray-Smith. </author> <title> Enhanced environments for the development and validation of dynamic system models. </title> <booktitle> Mathematics and computers in simulation, </booktitle> <volume> 39(5), </volume> <year> 1995. </year>
Reference: [98] <author> G. F. Myers. </author> <title> The Art of Software Testing. </title> <publisher> Wiley Interscience, </publisher> <year> 1979. </year>
Reference: [99] <author> Peter G. Neumann. </author> <title> Computer Related Risks. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [100] <author> E. H. Page, B. S. Canova, and J. A. Tufarolo. </author> <title> A case study of verification, validation, and accreditation or advanced distributed simulation. </title> <journal> ACM transactions on modeling and computer simulation, </journal> <volume> 7(3), </volume> <year> 1997. </year>
Reference: [101] <author> Mark C. Paulk, Charles V. Weber, and Bill Cur-tis. </author> <title> he Capability Maturity Model : Guidelines for Improving the Software Process. </title> <booktitle> Series in Software Engineering. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [102] <author> Lawrence C. Paulson. </author> <title> Logic and computation : interactive proof with Cambridge LCF. </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference: [103] <author> Charles Perrow. </author> <title> Normal Accidents. </title> <publisher> Basic Books, </publisher> <year> 1984. </year>
Reference: [104] <author> S. Lawrence Pfleeger and L. Hatton. </author> <title> Investigating the influence of formal methods. </title> <journal> Computer, </journal> <volume> 30(2) </volume> <pages> 33-43, </pages> <year> 1997. </year>
Reference: [105] <author> Shari Lawrence Pfleeger. </author> <title> Measuring software reliability. </title> <journal> IEEE Spectrum, </journal> <volume> 29 </volume> <pages> 56-60, </pages> <month> Aug </month> <year> 1992. </year>
Reference: [106] <author> P. J. Plauger. </author> <title> The Standard C Library. </title> <publisher> Prentice-Hall, </publisher> <year> 1993. </year> <month> 18 </month>
Reference: [107] <author> Marian B. Pour-El. </author> <title> Abstract computability and its relation to the general purpose analog computer (some connections between logic, differential equations, and analog computers). </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> 199 </volume> <pages> 1-28, </pages> <year> 1974. </year>
Reference: [108] <author> Marian B. Pour-El and J. Ian Richards. </author> <title> Computability and noncomputability in classical analysis. </title> <journal> Trans. Amer. Math. Soc, </journal> <volume> 275 </volume> <pages> 539-560, </pages> <year> 1983. </year>
Reference: [109] <author> Marian B. Pour-El and J. Ian Richards. </author> <title> Noncom-putability in analysis and physics: a complete determination of the class of non-computable linear operators. </title> <journal> Adv. Math., </journal> <volume> 48 </volume> <pages> 44-74, </pages> <year> 1983. </year>
Reference: [110] <author> Marian B. Pour-El and J. Ian Richards. </author> <title> Computability in Analysis and Physics. Perspectives in Mathematical Logic. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [111] <author> J. K. Read and M. J. Hopper. </author> <title> Production, testing and documentation of mathematical software. </title> <editor> In M. A. Hennell and L. M. Delves, editors, </editor> <booktitle> Production and Assessment of Numerical Software, </booktitle> <pages> pages 19-39. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [112] <author> J.R. Rice and S. Rosen. </author> <title> Napss anumerical analysis problem solving system. </title> <booktitle> In Proc. ACM Nat'l. Conf, </booktitle> <pages> pages 51-56, </pages> <year> 1966. </year>
Reference: [113] <author> Terry Richardson. </author> <title> Total Quality Management Basics: A Primer for Technicians. </title> <publisher> Delmar Publishers, </publisher> <year> 1997. </year> <note> ISBN 0-8273-7192-6. </note>
Reference: [114] <author> I. Riddell and L. M. Delves. </author> <title> The numerical testing of integral equation routines. </title> <editor> In M. A. Hen-nell and L. M. Delves, editors, </editor> <booktitle> Production and Assessment of Numerical Software, </booktitle> <pages> pages 41-56. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: [115] <author> A. Robinson. </author> <title> Non-Standard Analysis. </title> <publisher> North-Holland, </publisher> <year> 1965. </year>
Reference: [116] <editor> C.T. Sennett. </editor> <booktitle> High-integrity software. </booktitle> <publisher> Plenum Press, </publisher> <year> 1989. </year>
Reference: [117] <author> Robert Skeel. </author> <title> Roundoff error and the patriot missile. </title> <booktitle> Science, </booktitle> <month> July </month> <year> 1992. </year>
Reference: [118] <author> P. H. Sterbenz. </author> <title> Floating Point Computations. </title> <publisher> Prentice-Hall, </publisher> <year> 1974. </year>
Reference: [119] <author> D. E. Stevenson. </author> <title> What is computational knowledge and how do we acquire it? submitted to Synthese. </title>
Reference: [120] <author> D E Stevenson. </author> <title> 1001 reasons for not proving programs correct: A survey. </title> <type> Technical report, </type> <institution> Computer Science Dept, Clemson University, steve@wayne.cs.clemson.edu, </institution> <year> 1990. </year> <booktitle> Presented at Computers and Philosophy Conference, </booktitle> <publisher> Stanford. </publisher>
Reference: [121] <author> D. E. Stevenson. </author> <title> Science, computational science, and computer science: At a crossroads. </title> <journal> Comm. ACM, </journal> <volume> 37(12) </volume> <pages> 85-96, </pages> <year> 1994. </year>
Reference: [122] <author> D. E. Stevenson. </author> <booktitle> Software engineering frontiers in computational science and engineering. In Proc. 33d Ann. Southeast Conf., </booktitle> <address> Clemson, SC, </address> <pages> pages 120-127., </pages> <month> March 17-18 </month> <year> 1995. </year>
Reference: [123] <author> D. E. Stevenson. </author> <title> How goes CSE? Thoughts on the IEEE CS workshop at Purdue. </title> <journal> IEEE Computational Science and Engineering, </journal> <pages> pages 49-54, </pages> <month> Apr-Jun </month> <year> 1997. </year>
Reference: [124] <author> D. E. Stevenson. </author> <title> What is computational knowledge and how do we acquire it? Submitted, </title> <booktitle> IFIP Working Conference on Programming Concepts and Methods (PROCOMET '98), </booktitle> <year> 1997. </year>
Reference: [125] <author> D. E. Stevenson. </author> <booktitle> The logical foundations of validation. In The Proceedings of the European Simulation Multiconference 1999, </booktitle> <address> Warsaw, Poland, </address> <month> June 1-5, </month> <year> 1999, </year> <note> page submitted, </note> <year> 1999. </year>
Reference: [126] <author> J. Stoer and R. </author> <title> Bulirsch. Introduction to numerical analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference: [127] <author> L. G. Stucki. </author> <title> Automatic generation of self-metric software. </title> <booktitle> In Proc. Symp. on Comp. Soft. Reliability, </booktitle> <pages> pages 94-100. </pages> <publisher> IEEE, </publisher> <year> 1973. </year>
Reference: [128] <author> Frederick Suppe. </author> <title> Introduction and afterword. </title> <editor> In Frederick Suppe, editor, </editor> <booktitle> The Structure of Scientific Theories: The Search for Philosophic Understanding of Scientific Theories, </booktitle> <pages> pages 3-244, 617-730, </pages> <address> Urbana, IL, 1977. </address> <publisher> University of Illinois Press. </publisher>
Reference: [129] <editor> Patrick Suppes. </editor> <booktitle> Models and Methods in the Philosophy of Science. </booktitle> <publisher> Kluwer Academic, </publisher> <year> 1993. </year>
Reference: [130] <author> P. J. L. Wallis. </author> <title> Portable Programming. </title> <publisher> Macmillan, </publisher> <year> 1982. </year>
Reference: [131] <author> S. Weerawarana, E.N. Houstis, J.R. Rice, A. Joshi, , and C.E. Houstis. </author> <title> Pythia expert system. </title> <journal> ACM Trans. Math. Soft., </journal> <volume> 23 </volume> <pages> 447-468, </pages> <year> 1997. </year>
Reference: [132] <author> J. H. Wilkinson. </author> <title> Rounding Errors in Algebraic Processes. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1963. </year>
Reference: [133] <author> Gregory V. Wilson. </author> <title> What should computer scientists teach to physical scientists and engineers. </title> <journal> IEEE Computational Science & Engineering, </journal> <pages> pages 46-62, </pages> <month> Summer </month> <year> 1996. </year> <note> Responses included. </note>

References-found: 184

