URL: http://www.eecis.udel.edu/~agrawal/papers/tpds1.ps
Refering-URL: http://www.eecis.udel.edu/~agrawal/pub.html
Root-URL: http://www.cis.udel.edu
Title: Coding Based Replication Schemes for Distributed Systems  
Author: Gagan Agrawal Pankaj Jalote 
Address: College Park, MD 20742  Kanpur, India  
Affiliation: Dept. of Computer Sc. University of Maryland  Dept. of Computer Sc. Engg. Indian Institute of Technology  
Abstract: Data is often replicated in distributed systems to improve availability and performance. This replication is expensive in terms of disk storage since the existing schemes generally require full files to be stored at each site. In this paper, we present schemes which significantly reduce the storage requirements in replication based systems. These schemes use the coding method suggested by Rabin to store replicated data. The first scheme that we present is a modification of the simple voting algorithm and its quorum requirements. We then show how some of the extensions of the voting algorithm can also be modified to get storage efficient schemes for managing such replication. We evaluate the availability offered by these schemes and show that the storage space required to achieve certain availability are significantly lower than the conventional schemes with full file replication. Since coding is used, these schemes also provide a high degree of data security. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El Abbadi, </author> <title> "Reducing storage for quorum consensus algorithms", </title> <booktitle> in proc. of Very Large Databases Conf. </booktitle> , <pages> pp. 419-430, </pages> <year> 1988. </year>
Reference-contexts: The only other known approaches to reducing storage requirements in replication based schemes are voting with witnesses suggested by Paris [19, 20] and the fragmentation based approach suggested by Agrawal and Abbadi <ref> [1, 2] </ref>. In Voting with Witnesses, some of the regular copies are replaced by witnesses. Witnesses store only the version number for that site but no data. They, therefore, occupy very little space.
Reference: [2] <author> D. Agrawal and A. El. Abbadi, </author> <title> "Storage efficient replicated databases", </title> <journal> IEEE Trans. on Data and Knowledge Engg., </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 342-351, </pages> <month> September </month> <year> 1990. </year> <month> 24 </month>
Reference-contexts: The only other known approaches to reducing storage requirements in replication based schemes are voting with witnesses suggested by Paris [19, 20] and the fragmentation based approach suggested by Agrawal and Abbadi <ref> [1, 2] </ref>. In Voting with Witnesses, some of the regular copies are replaced by witnesses. Witnesses store only the version number for that site but no data. They, therefore, occupy very little space.
Reference: [3] <author> D. Agrawal and A. El Abbadi, </author> <title> "Integrating security with fault tolerance in distributed databases", </title> <journal> in Computer Journal, </journal> <volume> vol. 33, no. 2, </volume> <pages> pp. 71-78, </pages> <month> Feb </month> <year> 1990. </year>
Reference-contexts: We also discuss how some of the other extensions to the voting algorithm, weighted voting [14] and the approach of coteries [13], can also be modified. Use of this coding in storing replicated data also provides a high degree of data security <ref> [3] </ref>. Since the file is stored in a coded form and only 1=m th fraction of the file is stored at one nodes. An unauthorized user has to break into at least m different nodes and decipher the coding in order to read the file. <p> Note that the smallest prime number greater than 255 is 257. So, the storage overhead associated with storing these overflown bytes, when l = 8, is less than one percent, which is negligible. This coding scheme has also been used for providing data security in replicated databases <ref> [3] </ref>. Also, in [10], a unix implementation of this coding scheme has been presented. <p> We believe that such a scheme would be hard to implement. Further, this propagation based scheme requires significant storage and communication overheads, the exact values of which are hard to assess. The use of Rabin's coding in replicated databases also gives a high degree of data security <ref> [3] </ref>. 23 Security of data in a replicated distributed system may be a real concern, because an unauthorized user may break into the data by simply breaking into the protection scheme at any of the N nodes where the data has been replicated.
Reference: [4] <author> G.Agrawal and P. Jalote, </author> <title> "An efficient protocol for voting in dist. </title> <journal> systems", </journal> <note> to be presented in 12 th Int. Conf. on Dist. Computing Sys., </note> <month> June </month> <year> 1992. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [5] <author> M.Ahamad and M.H.Amnar, </author> <title> "Performance characterization of quorum consensus algorithms for replicated data", </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol. 15, no. 36, </volume> <pages> pp. 492-496, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Many extensions to the voting method have been proposed [11, 4, 13, 19, 20, 21, 25]. Performance and reliability issues of these schemes have been studied in <ref> [5, 7, 8] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement. If the file is replicated at N nodes, the disk storage requirement increases N fold. <p> Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met.
Reference: [6] <author> G. Ciardo and J.K.Muppala, </author> <title> "Manual for SPNP Package version 3.0", </title> <institution> Duke University, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: Markov model for DVWC is shown in figure 7. 6.3 Results These markov chains were solved by giving a Generalized Stochastic Petri Net (GSPN) description of these and using the Stochastic Petri Net Package (SPNP) <ref> [6] </ref>. <p> Overall, we believe that the proposed scheme can be very useful in supporting replicated data in a storage efficient manner, in addition to providing data security. Acknowledgements The analysis presented in the section 6 of this paper was done with the help of SPNP <ref> [6] </ref>, a software for solving General Stochastic Petri Nets. This tool has been developed at Duke University. The authors are grateful to Deron Liang for having introduced them to this package.
Reference: [7] <author> D.Barbara and H.Garcia Molina, </author> <title> "Vulnerability of voting mechanisms", </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 187-213, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Many extensions to the voting method have been proposed [11, 4, 13, 19, 20, 21, 25]. Performance and reliability issues of these schemes have been studied in <ref> [5, 7, 8] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement. If the file is replicated at N nodes, the disk storage requirement increases N fold.
Reference: [8] <author> D.Barbara and H.Garcia-Molina, </author> <title> "Reliability of voting mechanisms",IEEE Trans. </title> <journal> on Computers,vol. </journal> <volume> 36, no. 10, </volume> <pages> pp. 1197-1208, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Many extensions to the voting method have been proposed [11, 4, 13, 19, 20, 21, 25]. Performance and reliability issues of these schemes have been studied in <ref> [5, 7, 8] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement. If the file is replicated at N nodes, the disk storage requirement increases N fold. <p> Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met.
Reference: [9] <author> P.Bernstein and N. Goodman, </author> <title> "An algorithm for concurrency control and recovery in replicated distributed databases", </title> <journal> ACM Trans on Database Systems, </journal> <volume> vol. 9, no. 4, </volume> <pages> pp. 596-615, </pages> <year> 1984. </year>
Reference: [10] <author> W.A. Burkhard and P. D. </author> <title> Stojadinovic "Storage Efficient Reliable Files", </title> <booktitle> in proc. of 1992 winter USENIX conf., </booktitle> <pages> pp. 69-77, </pages> <year> 1992. </year>
Reference-contexts: So, the storage overhead associated with storing these overflown bytes, when l = 8, is less than one percent, which is negligible. This coding scheme has also been used for providing data security in replicated databases [3]. Also, in <ref> [10] </ref>, a unix implementation of this coding scheme has been presented. Here, a file dispersal shell (FDS) has been developed which uses Rabin's coding for providing a storage efficient disk mirroring scheme. 4 Using Coding With Simple Voting This coding can be used to support replicated data in distributed systems.
Reference: [11] <author> D. Davcev and W.A. Burkhard, </author> <title> "Consistency and recovery control for replicated files", </title> <booktitle> in proc. of tenth ACM Sym. on OS principles, </booktitle> <year> 1985. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> This scheme is derived from the Dynamic Voting algorithm suggested by Jajodia and Mutchler [15, 16, 17]. The dynamic voting algorithm algorithm of Jajodia and Mutchler is, in turn, a modification of a previous replica control protocol suggested by Davcev and Burkhard <ref> [11] </ref>. 6.1 Dynamic voting protocols In the dynamic voting protocol, the quorum requirements for read and write operations have been modified to enhance availability in face of network partitions.
Reference: [12] <author> S.Davidson and H.Garcia Molina, </author> <title> "Consistency in partitioned networks", </title> <journal> ACM Computing surveys,vol. </journal> <volume> 17, no. 3, </volume> <pages> pp. 341-370, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction In a distributed system, data can be replicated to provide fault-tolerance against site failures and network partitions and to improve performance. This data replication requires a replica control algorithm to maintain consistency of the data. A survey of such methods can be seen in <ref> [12] </ref>. One such method for replica control is the weighted voting scheme suggested by Gifford [14]. In this algorithm, each node is assigned a number of votes.
Reference: [13] <author> H.Garcia Molina and D.Barbara, </author> <title> "How to assign votes in a distributed system", </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, no. 4, </volume> <pages> pp. 841-860, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> We also present how Dynamic Voting [17] is modified to obtain Dynamic Voting With Coding (DVWC). We also discuss how some of the other extensions to the voting algorithm, weighted voting [14] and the approach of coteries <ref> [13] </ref>, can also be modified. Use of this coding in storing replicated data also provides a high degree of data security [3]. Since the file is stored in a coded form and only 1=m th fraction of the file is stored at one nodes. <p> In <ref> [13] </ref>, it has been shown that for a homogeneous system with odd number of sites, assigning 1 vote to each site gives maximum availability. If the number of sites is even, then giving one of the nodes an extra vote helps in breaking ties (and improves availability). <p> Similarly during the write operations, not many other sites may be required to be included in the quorum, again the communication costs will be reduced. 7.2 The method of coteries The approach based on coteries in <ref> [13] </ref> is a generalization of the weighted voting method. Consider the set of nodes of the system. A coterie is defined to be a set of subsets of this set of nodes.
Reference: [14] <author> D.K.Gifford, </author> <title> "Weighted voting", </title> <booktitle> in proc. of 7th ACM sym. on OS principles, </booktitle> <pages> pp. 150-162, </pages> <year> 1979. </year>
Reference-contexts: This data replication requires a replica control algorithm to maintain consistency of the data. A survey of such methods can be seen in [12]. One such method for replica control is the weighted voting scheme suggested by Gifford <ref> [14] </ref>. In this algorithm, each node is assigned a number of votes. <p> We also present how Dynamic Voting [17] is modified to obtain Dynamic Voting With Coding (DVWC). We also discuss how some of the other extensions to the voting algorithm, weighted voting <ref> [14] </ref> and the approach of coteries [13], can also be modified. Use of this coding in storing replicated data also provides a high degree of data security [3]. Since the file is stored in a coded form and only 1=m th fraction of the file is stored at one nodes. <p> Whereas, changing the system from (m; n; N ) to (m; n; N + 1) may be an easier task, involving only change in the quorum requirements <ref> [14, 20] </ref>. The system will then be operating with lower n as compared to N . Moreover, the computational cost of determining the various CPFs increases as the number of distinct CPFs increases. Thus, we will prefer a system with a comparatively lower n as compared to N . <p> In the proposed scheme, adding (or deleting) one site from the system is simple, the system changes from (m; n; N ) to (m; n; N +1) (or, (m; n; N 1)), requiring only a change in the quorum requirements <ref> [14, 20] </ref>. In the fragmentation based scheme, if the size of the file is changed significantly, the fragments will need to created again, incurring significant overheads. The proposed scheme does not have this disadvantage.
Reference: [15] <author> S.Jajodia and D.Mutchler, </author> <title> "Dynamic voting", </title> <booktitle> in proc. of ACM SIGMOD, </booktitle> <pages> pp. 227-238, </pages> <year> 1987. </year>
Reference-contexts: Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met. <p> However, other replica control protocols can also be modified to manage such replications. In this section we present Dynamic Voting With Coding, a new scheme for managing coding based replication. This scheme is derived from the Dynamic Voting algorithm suggested by Jajodia and Mutchler <ref> [15, 16, 17] </ref>.
Reference: [16] <author> S. Jajodia and D. Mutchler, </author> <title> "Enhancements to the voting algorithm", </title> <booktitle> in proc. of 13th Int. Conf. on Very Large Databases, </booktitle> <pages> pp. 399-406, </pages> <year> 1987. </year>
Reference-contexts: However, other replica control protocols can also be modified to manage such replications. In this section we present Dynamic Voting With Coding, a new scheme for managing coding based replication. This scheme is derived from the Dynamic Voting algorithm suggested by Jajodia and Mutchler <ref> [15, 16, 17] </ref>.
Reference: [17] <author> S. Jajodia and D. Mutchler, </author> <title> "Dynamic voting algorithms", </title> <journal> ACM Trans. on Database Systems, </journal> <volume> vol. 15, no. 2, </volume> <pages> pp. 231-280, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: With the files being stored in a coded form, the read and write algorithms have to be redesigned. The first scheme that we present, Simple Voting With Coding (SVWC), is obtained by modifying the simple voting algorithm and the quorum requirements. We also present how Dynamic Voting <ref> [17] </ref> is modified to obtain Dynamic Voting With Coding (DVWC). We also discuss how some of the other extensions to the voting algorithm, weighted voting [14] and the approach of coteries [13], can also be modified. <p> This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in [5, 8, 15, 19, 20, 21]. Also, its has been shown 11 in <ref> [17] </ref> that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met. <p> However, other replica control protocols can also be modified to manage such replications. In this section we present Dynamic Voting With Coding, a new scheme for managing coding based replication. This scheme is derived from the Dynamic Voting algorithm suggested by Jajodia and Mutchler <ref> [15, 16, 17] </ref>. <p> We also assume that updates are much frequent than failures and recoveries so that whenever any update or failure occurs, an update arrives immediately with that topology. This is called frequent update assumption. This assumption was used by Jajodia and Mutchler for the original analysis of dynamic voting <ref> [17] </ref>. <p> &% &% &% 0,0 2,0 1,1 0,N-3 N-1,0 1,N-2 N (N-1) 4 3 (N-2) (N-3) 2 (N-2) (N-3) 2 (N-2) (N-3) 2 (N-2) (N-3) 2 2 2 2 2 2 : : : be quite reasonable for certain applications, else, it may be satisfied by the use of frequent polling <ref> [17] </ref>. We use a Markov model to compute the availability of these schemes. Under the above assumptions, the operation of dynamic voting is as follows.
Reference: [18] <author> L. Mirsky, </author> <title> An Introduction to Linear Algebra, </title> <publisher> Dover Publishers, </publisher> <year> 1982. </year>
Reference-contexts: One method of constructing this is the use of Vandermonde matrix <ref> [18] </ref>. Also note that the CPFs are constructed using modulo p arithmetic, where p &gt; 2 l . This may results in "bytes" in the computed CPFs which cannot be represented by a l bit sequence. This problem can be taken care of as follows. <p> This tool has been developed at Duke University. The authors are grateful to Deron Liang for having introduced them to this package. The authors also thank Walter Burkhard for suggesting the reference <ref> [18] </ref> for constructing n m-dimension linear vectors such that any m of them are linearly independent. The comments from the referees greatly helped in improving the presentation of this paper.
Reference: [19] <author> J.F.Paris, </author> <title> "Voting with witnesses: a consistency scheme for replicated files", </title> <booktitle> in proc. of sixth IEEE Int. Conf. on Dist. Computing Sys. </booktitle> , <pages> pp. 606-612, </pages> <year> 1986. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> The only other known approaches to reducing storage requirements in replication based schemes are voting with witnesses suggested by Paris <ref> [19, 20] </ref> and the fragmentation based approach suggested by Agrawal and Abbadi [1, 2]. In Voting with Witnesses, some of the regular copies are replaced by witnesses. Witnesses store only the version number for that site but no data. They, therefore, occupy very little space. <p> Witnesses store only the version number for that site but no data. They, therefore, occupy very little space. Witnesses can participate in read and write operations by sending their version number but read or write quorum must include at least one regular copies with the latest update. In <ref> [19] </ref>, it has been shown that replacing some of the regular copies with witnesses has only marginal effect on availability, while reducing the storage requirements. However, this reduction in storage requirements is marginal since if many regular copies are replaced by witnesses, then the availability does get effected severely. <p> Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met.
Reference: [20] <author> J.F.Paris, </author> <title> "Voting with a variable number of copies", </title> <booktitle> in proc. of sixteenth IEEE Fault-Tolerant Computing Sym., </booktitle> <pages> pp. 50-55, </pages> <year> 1986. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> The only other known approaches to reducing storage requirements in replication based schemes are voting with witnesses suggested by Paris <ref> [19, 20] </ref> and the fragmentation based approach suggested by Agrawal and Abbadi [1, 2]. In Voting with Witnesses, some of the regular copies are replaced by witnesses. Witnesses store only the version number for that site but no data. They, therefore, occupy very little space. <p> Whereas, changing the system from (m; n; N ) to (m; n; N + 1) may be an easier task, involving only change in the quorum requirements <ref> [14, 20] </ref>. The system will then be operating with lower n as compared to N . Moreover, the computational cost of determining the various CPFs increases as the number of distinct CPFs increases. Thus, we will prefer a system with a comparatively lower n as compared to N . <p> Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met. <p> In the proposed scheme, adding (or deleting) one site from the system is simple, the system changes from (m; n; N ) to (m; n; N +1) (or, (m; n; N 1)), requiring only a change in the quorum requirements <ref> [14, 20] </ref>. In the fragmentation based scheme, if the size of the file is changed significantly, the fragments will need to created again, incurring significant overheads. The proposed scheme does not have this disadvantage.
Reference: [21] <author> J.F.Paris, </author> <title> "Voting with bystanders", </title> <booktitle> in proc. of ninth Int. Conf. on Dist. Computing Systems, </booktitle> <pages> pp. 394-401, </pages> <year> 1989. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> If the file is replicated at N nodes, the disk storage requirement increases N fold. Just for maintaining availability of data against failure of one node at a time, the data has to be replicated at 3 nodes <ref> [21] </ref>, incurring three times the disk storage costs. In this paper, we present schemes for maintaining replicated files, that significantly reduce the amount of storage space required to maintain the files with a given availability. These schemes use the coding suggested by Rabin [23, 24] to store the files. <p> Further, we assume that no network partitions take place. This assumption is required to separate our analysis from numerous network topologies that may exist in a distributed system. This assumption has already been used for analysis in <ref> [5, 8, 15, 19, 20, 21] </ref>. Also, its has been shown 11 in [17] that the results on the availability are qualitatively the same when the analysis is done with or without considering the network partitions. For simplicity, we assume that operations take place only when MNQ is met.
Reference: [22] <author> C.Pu, J.D.Noe and A.Proudfoot, </author> <title> "Regeneration of replicated objects : a technique and its eden implementation", </title> <booktitle> in proc. of third IEEE Int. Conf. on Data Engg., </booktitle> <pages> pp. 175-187, </pages> <year> 1987. </year>
Reference: [23] <author> M. O.Rabin, </author> <title> "Efficient Dispersal of information for security, load balancing and fault-tolerance", </title> <publisher> TR-02-87, Harvard university,April 1987. </publisher>
Reference-contexts: In this paper, we present schemes for maintaining replicated files, that significantly reduce the amount of storage space required to maintain the files with a given availability. These schemes use the coding suggested by Rabin <ref> [23, 24] </ref> to store the files. In this coding a file F is encoded and broken into n parts, each of size jF j=m (m and n are parameters such that m n). <p> fragmented also changes. 3 Also, the way this fragmentation is done, this is likely to incur significant overheads if during a write operation, the size of the file gets changed significantly, since the fragments will need to be created again. 3 Coding Scheme In the coding scheme suggested by Rabin <ref> [23, 24] </ref>, a file F of size jF j is broken into n parts of size jF j=m such that any m of these n parts are sufficient to reconstruct the file, where, n m.
Reference: [24] <author> M.O.Rabin, </author> <title> "Efficient dispersal of information for security, load balancing and fault-tolerance", </title> <journal> Journal of the ACM, </journal> <volume> vol. 36, no. 2,pp. </volume> <pages> 335-348, </pages> <year> 1989. </year>
Reference-contexts: In this paper, we present schemes for maintaining replicated files, that significantly reduce the amount of storage space required to maintain the files with a given availability. These schemes use the coding suggested by Rabin <ref> [23, 24] </ref> to store the files. In this coding a file F is encoded and broken into n parts, each of size jF j=m (m and n are parameters such that m n). <p> fragmented also changes. 3 Also, the way this fragmentation is done, this is likely to incur significant overheads if during a write operation, the size of the file gets changed significantly, since the fragments will need to be created again. 3 Coding Scheme In the coding scheme suggested by Rabin <ref> [23, 24] </ref>, a file F of size jF j is broken into n parts of size jF j=m such that any m of these n parts are sufficient to reconstruct the file, where, n m.
Reference: [25] <author> R. van Renesse and A.S.Tannenbaum, </author> <title> "Voting with ghosts", </title> <booktitle> in proc. of Eighth IEEE Int. Conf. on Dist. Computing Sys., </booktitle> <pages> pp. 456-461, </pages> <year> 1988. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [11, 4, 13, 19, 20, 21, 25] </ref>. Performance and reliability issues of these schemes have been studied in [5, 7, 8]. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [26] <author> F.Schneider and Schlichting, </author> <title> "Fail-stop processors: an approach to designing fault-tolerant distributed systems", </title> <journal> ACM Trans. on Computer systems, </journal> <volume> vol. 1,no. 3, </volume> <pages> pp. 222-238, </pages> <month> August </month> <year> 1983. </year> <month> 26 </month>
Reference-contexts: A version number denoting the number of successful updates made on the CPF at that node is maintained at each node. We assume that the nodes can fail only by aborting the transaction <ref> [26] </ref>. We consider only the simplest form of voting, in which each node (which has exactly one CPF) is assigned one vote each. 4.1 Quorum Requirements Since coding is used for storing replicated data, the quorum requirements of SVWC are different from that of voting method.
References-found: 26

