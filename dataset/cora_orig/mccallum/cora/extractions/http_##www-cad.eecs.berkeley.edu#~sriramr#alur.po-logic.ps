URL: http://www-cad.eecs.berkeley.edu/~sriramr/alur.po-logic.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~sriramr/verisems97.html
Root-URL: 
Email: alur@ic.eecs.berkeley.edu  mcmillan@cadence.com  doron@research.bell-labs.com  Email: alur@ic.eecs.berkeley.edu  
Title: Deciding Global Partial-Order Properties  
Author: Rajeev Alur Ken McMillan Doron Peled Rajeev Alur 
Note: Submission Category: A Contact Author:  
Address: Berkeley  Cory Hall  Berkeley, CA 94720  
Affiliation: Bell Labs and UC  Cadence Berkeley Labs  Bell Labs  479  University of California  
Abstract: Model checking of asynchronous systems is traditionally based on the interleaving model, where an execution is modeled by a total order between atomic events. Recently, the use of partial order semantics, representing the causal order between events, is becoming popular. This paper considers the model checking problem for partial-order temporal logics. Solutions to this problem exist for partial order logics over local states. For the more general global logics that are interpreted over global states, only undecidability results have been proved. In this paper, we present a decision procedure for a partial order temporal logic over global states. We also sharpen the undecidability results by showing that a single until operator is sufficient for undecidability.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, K. McMillan and D. Peled. </author> <title> Model-checking of Correctness Conditions for Concurrent Objects, </title> <booktitle> LICS96, 11th IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1996, </year> <pages> 219-228, </pages> <address> New Brunswick, NJ, USA. </address>
Reference-contexts: This property, akin to serializability <ref> [1] </ref> will be expressed in our logic as (p 1 ^ p 2 ) ! 93 ((p 7 ^ p 2 ) _ (p 1 ^ p 8 )).
Reference: [2] <author> R. Alur, W. Penczek, and D. Peled. </author> <title> Model-checking of causality properties. </title> <booktitle> 10th Symposium on Logic in Computer Science, </booktitle> <pages> 90-100, </pages> <year> 1995. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings. <p> In local partial order logics, the truth of a formula is evaluated at a local state, and the temporal modalities relate causal precedences among local states. Examples of such logics include TrPtl [18] and Tlc <ref> [2] </ref>. In global partial order logics, the truth of a formula is evaluated in a global state, also called a configuration or a slice, which consists of a consistent set of local states. The temporal modalities of a global logic, such as Istl [6, 14], relate causal precedences among configurations. <p> In other words, by examining one linearization, the automaton needs to infer a property of all equivalent linearizations. This goal has already been met for local partial order logics TrPtl and Tlc <ref> [18, 2] </ref>. Unfortunately, the technique used in these constructions does not lead to similar constructions for global partial order logics. Some simple global specification formalisms were even shown to be undecidable [13, 8]. <p> Given a causal structure , the formulas of Istl are interpreted over configurations of . The interpretation of modalities is as in Ctl interpreted over the Kripke structure K . This is in contrast with the (local) logic Tlc <ref> [2] </ref> whose formulas are interpreted over states of and branching-time modalities are interpreted over itself. Let ' be a Istl-formula, be a causal structure, and fi be a configuration of . <p> From M , we first construct an automaton A M that accepts linearizations of the causal structures of M (see, for instance, <ref> [2] </ref> for more details). Then, we construct the automaton A :' that accepts the linearizations of the causal structures satisfying :'. The system M satisfies the specification ' iff the intersection of the languages of the two automata A M and A :' is empty.
Reference: [3] <author> W. Ebinger. </author> <title> Logical definability of trace languages. </title> <editor> In V. Diekert, G. Rozenberg (Eds.) </editor> <title> The Book of Traces, </title> <publisher> World Scientific, </publisher> <pages> 382-390, </pages> <year> 1995. </year>
Reference-contexts: We also refine the undecidability result of [13] by establishing that the modality 9U is sufficient, by itself, to render undecidability. The decidability for Istl 3 can also be established by translating its formulas to a first-order language of <ref> [3] </ref> that has variables ranging over local states, monadic predicates, and a binary partial-order relation. Alternatively, the 93 modality can be captured using asynchronous automata of [22], and complementation can be used to handle the dual. However, both these approaches lead to decision procedures of nonelementary complexity. <p> The formulas of L are interpreted over causal structures. When the relation is generated by the union of total orders x , one per each process, the set of linearizations of causal structures satisfying a formula of L is !-regular, and can be characterized by a Buchi automaton <ref> [3] </ref>. The !-regularity is retained even in presence of second-order quantification. The decidability for various partial-order logics can be established via translation to formulas of L. Since L provides quantification over local states, translation for local partial-order logics such as Tlc is obvious.
Reference: [4] <author> P. Godefroid and P. Wolper. </author> <title> A partial approach to model checking. </title> <booktitle> Information and Computation 110 (2), </booktitle> <pages> 305-326, </pages> <year> 1994. </year>
Reference-contexts: The partial-order equivalence among sequences can be exploited to reduce the state-space explosion problem: the cost of generating at least one representative per equivalence class is typically significantly less than the cost of generating all interleavings <ref> [19, 4, 11, 10] </ref>. This approach has been shown to be practically useful in the verification tool Spin [5]. <p> The complexity of model checking algorithm is linear in the size of the program automaton A M , and doubly exponential in the size of the specification '. Model checking using representatives outlined in <ref> [4, 11, 19] </ref> can now be used as a heuristic improvement. We know that the language of the automaton A :' is closed , that is, it does not distinguish among the linearizations of the same causal structure.
Reference: [5] <author> G. Holzmann and D. Peled. </author> <title> The state of SPIN. </title> <booktitle> 8th Conference on Computer-Aided Verification, </booktitle> <volume> LNCS 1102, </volume> <pages> 385-389, </pages> <year> 1996. </year>
Reference-contexts: This approach is supported, for instance, by the verifier Spin <ref> [5] </ref>. Partial order semantics, while used less frequently, offers a more intuitive representation of the executions of a concurrent systems and has attracted researchers in concurrency theory for many years [9, 16]. <p> This approach has been shown to be practically useful in the verification tool Spin <ref> [5] </ref>. If the specification could distinguish between two sequences of the same equivalence class, as is the case with Ltl, the above equivalence cannot be used: the same equivalence class may contain both a sequence that satisfies the specification and a sequence that does not.
Reference: [6] <author> S. Katz and D. Peled. </author> <title> Interleaving set temporal logic. </title> <booktitle> Theoretical Computer Science 75, </booktitle> <pages> 21-43, </pages> <year> 1992. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings. <p> In global partial order logics, the truth of a formula is evaluated in a global state, also called a configuration or a slice, which consists of a consistent set of local states. The temporal modalities of a global logic, such as Istl <ref> [6, 14] </ref>, relate causal precedences among configurations. Global partial order logics are strictly more general than the local ones. It should be noted that, in a partial order, unlike in a total order, there 1 are many ways to proceed from one (local or global) state to the next.
Reference: [7] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite-state concurrent programs satisfy their linear specification. </title> <booktitle> 11th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> 97-107, </pages> <year> 1984. </year>
Reference-contexts: To check whether the system satisfies an Ltl-formula ', the model-checking algorithm first constructs an !-automaton A :' that accepts all the satisfying models of :', and tests emptiness of the intersection of the languages of the two automata A M and A :' <ref> [20, 7] </ref>. This approach is supported, for instance, by the verifier Spin [5]. Partial order semantics, while used less frequently, offers a more intuitive representation of the executions of a concurrent systems and has attracted researchers in concurrency theory for many years [9, 16].
Reference: [8] <author> K. Lodaya, R. Parikh, R. Ramanujam, and P.S. Thiagarajan. </author> <title> A logical study of distributed transitions systems. </title> <booktitle> Information and Computation 119, </booktitle> <pages> 91-118, </pages> <year> 1985. </year>
Reference-contexts: This goal has already been met for local partial order logics TrPtl and Tlc [18, 2]. Unfortunately, the technique used in these constructions does not lead to similar constructions for global partial order logics. Some simple global specification formalisms were even shown to be undecidable <ref> [13, 8] </ref>. In this paper, we identify a global partial order logic for which the model checking problem is decidable by presenting a tableau construction. <p> Theorem 2 Satisfiability of an Istl 3; d formula is decidable is Expspace. 4.2 Undecidability of Istl U We show here that some natural extension to Istl 3 are undecidable. In [13] it was shown that Istl is undecidable (a similar proof for related temporal logics appears in <ref> [8] </ref>). We sharpen the result of [13] by showing that the until operator 9U is sufficient to prove undecidability.
Reference: [9] <author> A. Mazurkiewicz. </author> <title> Trace Theory. </title> <editor> In W. Brauer, W. Reisig, G. Rozenberg (eds.), </editor> <booktitle> Advances in Petri Nets 1986, </booktitle> <volume> LNCS 255, </volume> <pages> 279-324, </pages> <year> 1987. </year> <month> 15 </month>
Reference-contexts: This approach is supported, for instance, by the verifier Spin [5]. Partial order semantics, while used less frequently, offers a more intuitive representation of the executions of a concurrent systems and has attracted researchers in concurrency theory for many years <ref> [9, 16] </ref>. The partial order semantics does not distinguish among total-order executions that are equivalent up to reordering of independent events, thereby, resulting in a more abstract and faithful representation of concurrency.
Reference: [10] <author> K.L. McMillan. </author> <title> Using unfoldings to avoid the state explosion problem in the verification of asynchronous circuits. </title> <booktitle> 4th Conference on Computer-Aided Verification, </booktitle> <volume> LNCS 663, </volume> <pages> 164-177, </pages> <year> 1992. </year>
Reference-contexts: The partial-order equivalence among sequences can be exploited to reduce the state-space explosion problem: the cost of generating at least one representative per equivalence class is typically significantly less than the cost of generating all interleavings <ref> [19, 4, 11, 10] </ref>. This approach has been shown to be practically useful in the verification tool Spin [5].
Reference: [11] <author> D. Peled. </author> <title> Combining partial order reductions with on-the-fly model checking. </title> <booktitle> Proc. 6th Conference on Computer Aided Verification, </booktitle> <volume> LNCS 818, </volume> <pages> 377-390, </pages> <year> 1994. </year>
Reference-contexts: The partial-order equivalence among sequences can be exploited to reduce the state-space explosion problem: the cost of generating at least one representative per equivalence class is typically significantly less than the cost of generating all interleavings <ref> [19, 4, 11, 10] </ref>. This approach has been shown to be practically useful in the verification tool Spin [5]. <p> It is possible to refine the equivalence relation, providing more representatives at the expense of using a bigger state space <ref> [11] </ref>. The alternative solution is to use a specification logic that is directly interpreted over partial orders. This latter approach demands study of decision problems for partial order logics. <p> The complexity of model checking algorithm is linear in the size of the program automaton A M , and doubly exponential in the size of the specification '. Model checking using representatives outlined in <ref> [4, 11, 19] </ref> can now be used as a heuristic improvement. We know that the language of the automaton A :' is closed , that is, it does not distinguish among the linearizations of the same causal structure.
Reference: [12] <author> W. Penczek and R. Kuiper. </author> <title> Traces and logic. </title> <editor> In V. Diekert, G. Rozenberg (eds.) </editor> <title> The Book of Traces, </title> <publisher> World Scientific, </publisher> <pages> 307-390, </pages> <year> 1995. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings. <p> fragments are closed under boolean operations. 5 v ~ ~ ~ ~ v ~ -S S S S p 1 p 3 p 5 p 7 ff 1 ff 2 ff 3 p 2 p 4 p 6 p 8 fi 1 fi 2 fi 3 The following simple example <ref> [14, 12] </ref> is often used to demonstrate partial order specification.
Reference: [13] <author> W. Penczek. </author> <title> On undecidability of propositional temporal logics on trace systems. </title> <journal> Information Processing Letters 43, </journal> <pages> 147-153, </pages> <year> 1992. </year>
Reference-contexts: This goal has already been met for local partial order logics TrPtl and Tlc [18, 2]. Unfortunately, the technique used in these constructions does not lead to similar constructions for global partial order logics. Some simple global specification formalisms were even shown to be undecidable <ref> [13, 8] </ref>. In this paper, we identify a global partial order logic for which the model checking problem is decidable by presenting a tableau construction. <p> As indicated earlier, not all global states of the program need to be generated using partial order reductions. We also refine the undecidability result of <ref> [13] </ref> by establishing that the modality 9U is sufficient, by itself, to render undecidability. The decidability for Istl 3 can also be established by translating its formulas to a first-order language of [3] that has variables ranging over local states, monadic predicates, and a binary partial-order relation. <p> The details of the construction are left to the full paper. Theorem 2 Satisfiability of an Istl 3; d formula is decidable is Expspace. 4.2 Undecidability of Istl U We show here that some natural extension to Istl 3 are undecidable. In <ref> [13] </ref> it was shown that Istl is undecidable (a similar proof for related temporal logics appears in [8]). We sharpen the result of [13] by showing that the until operator 9U is sufficient to prove undecidability. <p> In <ref> [13] </ref> it was shown that Istl is undecidable (a similar proof for related temporal logics appears in [8]). We sharpen the result of [13] by showing that the until operator 9U is sufficient to prove undecidability. Our reduction, directly from Halting gives some intuition why a logic expressing models over sequences of cuts (global states of partial order executions) is undecidable. 13 Theorem 3 The logic Istl U is undecidable.
Reference: [14] <author> D. Peled and A. Pnueli. </author> <title> Proving partial order properties. </title> <booktitle> Theoretical Computer Science 126, </booktitle> <pages> 143-182, </pages> <year> 1994. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings. <p> In global partial order logics, the truth of a formula is evaluated in a global state, also called a configuration or a slice, which consists of a consistent set of local states. The temporal modalities of a global logic, such as Istl <ref> [6, 14] </ref>, relate causal precedences among configurations. Global partial order logics are strictly more general than the local ones. It should be noted that, in a partial order, unlike in a total order, there 1 are many ways to proceed from one (local or global) state to the next. <p> fragments are closed under boolean operations. 5 v ~ ~ ~ ~ v ~ -S S S S p 1 p 3 p 5 p 7 ff 1 ff 2 ff 3 p 2 p 4 p 6 p 8 fi 1 fi 2 fi 3 The following simple example <ref> [14, 12] </ref> is often used to demonstrate partial order specification.
Reference: [15] <author> S. Pinter and P. Wolper. </author> <title> A temporal logic for reasoning about partially ordered computations. </title> <booktitle> 3rd ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> 28-37, </pages> <year> 1984. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings.
Reference: [16] <author> V.R. Pratt. </author> <title> Modeling concurrency with partial orders. </title> <booktitle> Intl. J. of Parallel Programming 15 (1), </booktitle> <pages> 33-71, </pages> <year> 1986. </year>
Reference-contexts: This approach is supported, for instance, by the verifier Spin [5]. Partial order semantics, while used less frequently, offers a more intuitive representation of the executions of a concurrent systems and has attracted researchers in concurrency theory for many years <ref> [9, 16] </ref>. The partial order semantics does not distinguish among total-order executions that are equivalent up to reordering of independent events, thereby, resulting in a more abstract and faithful representation of concurrency.
Reference: [17] <author> W. J. Savitch. </author> <title> Relationship between nondeterministic and deterministic tape complexities. </title> <journal> J. on Computer and System Sciences, </journal> <volume> 4 </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: Emptiness of this automaton can be tested in time proportional to the number of Buchi conditions (O (n2 m )) and to the number of transitions of the automaton, which remains O (2 2 O (m+n) By a standard argument <ref> [17] </ref>, it is possible to establish that the decision procedure can be implemented in space exponential in the size of the input, and thus, the problem is in Expspace. In the case n = 1 our logic is equivalent to Ltl.
Reference: [18] <author> P.S. Thiagarajan. </author> <title> A trace based extension of linear time temporal logic. </title> <booktitle> Ninth Symposium on Logic in Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: In particular, the partial order model allows a more flexible definition of global states than the total order model. Some distributed algorithms take advantage of this view, for instance, to provide a sequential-like behavior. Logics over partial orders <ref> [6, 15, 14, 12, 18, 2] </ref> allow a direct representation of properties involving causality and concurrency, for example, serializability. These properties are hidden, and sometimes disappear completely when representing the executions as interleavings. <p> In local partial order logics, the truth of a formula is evaluated at a local state, and the temporal modalities relate causal precedences among local states. Examples of such logics include TrPtl <ref> [18] </ref> and Tlc [2]. In global partial order logics, the truth of a formula is evaluated in a global state, also called a configuration or a slice, which consists of a consistent set of local states. <p> In other words, by examining one linearization, the automaton needs to infer a property of all equivalent linearizations. This goal has already been met for local partial order logics TrPtl and Tlc <ref> [18, 2] </ref>. Unfortunately, the technique used in these constructions does not lead to similar constructions for global partial order logics. Some simple global specification formalisms were even shown to be undecidable [13, 8].
Reference: [19] <author> A. Valmari. </author> <title> A Stubborn attack on state explosion. </title> <booktitle> Proc. 2nd Conference on Computer-Aided Verification, </booktitle> <volume> LNCS 531, </volume> <pages> 156-165, </pages> <year> 1990. </year>
Reference-contexts: The partial-order equivalence among sequences can be exploited to reduce the state-space explosion problem: the cost of generating at least one representative per equivalence class is typically significantly less than the cost of generating all interleavings <ref> [19, 4, 11, 10] </ref>. This approach has been shown to be practically useful in the verification tool Spin [5]. <p> The complexity of model checking algorithm is linear in the size of the program automaton A M , and doubly exponential in the size of the specification '. Model checking using representatives outlined in <ref> [4, 11, 19] </ref> can now be used as a heuristic improvement. We know that the language of the automaton A :' is closed , that is, it does not distinguish among the linearizations of the same causal structure.
Reference: [20] <author> M.Y. Vardi and P. Wolper. </author> <title> An automata-theoretic approach to automatic program verification. </title> <booktitle> First Symposium on Logic in Computer Science, </booktitle> <pages> 332-344, </pages> <year> 1986. </year>
Reference-contexts: To check whether the system satisfies an Ltl-formula ', the model-checking algorithm first constructs an !-automaton A :' that accepts all the satisfying models of :', and tests emptiness of the intersection of the languages of the two automata A M and A :' <ref> [20, 7] </ref>. This approach is supported, for instance, by the verifier Spin [5]. Partial order semantics, while used less frequently, offers a more intuitive representation of the executions of a concurrent systems and has attracted researchers in concurrency theory for many years [9, 16].
Reference: [21] <author> T. Wilke and D. Peled. </author> <title> Stutter invariant temporal properties are expressible without the next-time operator. </title> <type> Manuscript, </type> <year> 1996. </year>
Reference: [22] <author> W. Zielonka. </author> <title> Notes on finite asynchronous automata. </title> <booktitle> R.A.I.R.O.-Informatique Theorique et Applications 21, </booktitle> <pages> 99-135, </pages> <year> 1987. </year> <month> 16 </month>
Reference-contexts: The decidability for Istl 3 can also be established by translating its formulas to a first-order language of [3] that has variables ranging over local states, monadic predicates, and a binary partial-order relation. Alternatively, the 93 modality can be captured using asynchronous automata of <ref> [22] </ref>, and complementation can be used to handle the dual. However, both these approaches lead to decision procedures of nonelementary complexity.
References-found: 22

