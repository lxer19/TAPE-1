URL: http://www.cs.unc.edu/~zhu/paper/oshl.ps.Z
Refering-URL: http://www.cs.unc.edu/~zhu/prover.html
Root-URL: http://www.cs.unc.edu
Email: fplaisted,zhug@cs.unc.edu  
Phone: Fax: (919)962-1799  
Title: Ordered Semantic Hyper Linking  
Author: David A. Plaisted and Yunshan Zhu 
Address: Chapel Hill, NC 27599-3175  
Affiliation: Computer Science Department University of North Carolina  
Note: To appear in the Proceedings of Fourteenth National Conference on Artificial Intelligence (AAAI-97)  
Abstract: In this paper, we present a novel first order theorem proving strategy ordered semantic hyper linking. Ordered semantic hyper linking (OSHL) is an instance-based refutational theorem proving strategy. It is sound and complete. OSHL has an efficient propositional decision procedure. It solves first order problems by reducing them to propositional problems. It uses natural semantics of an input problem to guide its search. It also incorporates term rewriting to handle equality. The propositional efficiency, semantic guidance and equality support allow OSHL to solve problems that are difficult for many other strategies. The efficiency of OSHL is supported by experimental study as well as complexity analysis. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Chang, C., and Lee, R. </author> <year> 1973. </year> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <address> New York: </address> <publisher> Academic Press. </publisher>
Reference-contexts: Background In this section, we define some concepts related to our future discussions. We also define orderings used in our implementation of the ordered semantic hyper linking strategy. We will assume a general knowledge of first order logic and refutational theorem proving. We refer readers to <ref> (Chang & Lee 1973) </ref> for a general introduction to these areas. A term is a well-formed expression containing function symbols, constant symbols, and variables, as, f (X; g (a)). An atom is a predicate symbol followed by a list of terms, as, p (X; g (a; b)).
Reference: <author> Chu, H., and Plaisted, D. </author> <year> 1994. </year> <title> Semantically guided first-order theorem proving using hyper-linking. </title> <booktitle> In Proceedings of the Twelfth International Conference on Automated Deduction, </booktitle> <pages> 192-206. </pages> <booktitle> Lecture Notes in Artificial Intelligence 814. </booktitle>
Reference-contexts: The semantics allowed in these provers were somewhat limited. CLIN (Lee & Plaisted 1992) uses a strategy based on clause linking. CLIN-S <ref> (Chu & Plaisted 1994) </ref> adds semantic support to clause linking. RRTP (Paramasivam & Plaisted 1997) generates instances using replacement rules and uses the propositional decision procedure in (Zhang & Stickel 1994) to detect propositional unsatisfiability. Ordered semantic hyper linking improves upon CLIN and CLIN-S. <p> We use I (s) to represent the element denoted by term s. We use I 0 to name the input semantics. A current semantics is represented as I 0 [EL], where EL stands for eligible literals. Some of these notations were also used in <ref> (Chu & Plaisted 1994) </ref>.
Reference: <author> Davis, M., and Putnam, H. </author> <year> 1960. </year> <title> A computing procedure for quantification theory. </title> <journal> Journal of the Association for Computing Machinery 7 </journal> <pages> 201-215. </pages>
Reference-contexts: The ground procedure of ordered semantic hyper linking is in essence similar to the Davis-Putnam method <ref> (Davis & Putnam 1960) </ref>. Both are modeling finding strategies, and prove unsatisfiability by exhausting all possible models. Both use case analysis to handle non-Horn clauses, although in somewhat different formats. By ordering the terms, ordered semantic hyper linking has a more systematic search than Davis-Putnam method.
Reference: <author> Gilmore, P. C. </author> <year> 1960. </year> <title> A proof method for quantification theory. </title> <journal> IBM Journal of Research and Development 4 </journal> <pages> 28-35. </pages>
Reference-contexts: OSHL might not be as efficient as the method of (Kautz, McAllester, & Selman 1996) on specific problems, but is perhaps more general. The history of instance-based theorem proving strategies traces back to <ref> (Gilmore 1960) </ref>.
Reference: <author> Kautz, H.; McAllester, D.; and Selman, B. </author> <year> 1996. </year> <title> Encoding plans in propositional logic. </title> <booktitle> In Proceedings of Knowledge Representation and Reasoning (KR-96). </booktitle>
Reference-contexts: The prover in (Zhang & Stickel 1994) is based on the Davis-Putnam method, and the prover in (Selman & Kautz 1993) is based on randomized local search. There are some also recent work in applying efficient propositional procedure in various domains. In <ref> (Kautz, McAllester, & Selman 1996) </ref>, planning problems are converted into propositional problems, and efficient propositional decision procedures are used to tackle those problems. Interestingly, that approach shares the same principle as OSHL and instance-based strategies in general. <p> In OSHL, the original problems are expressed in first order logic, the conversion to propositional problems is automatic, and the domain knowledge is represented in the form of input semantics. OSHL might not be as efficient as the method of <ref> (Kautz, McAllester, & Selman 1996) </ref> on specific problems, but is perhaps more general. The history of instance-based theorem proving strategies traces back to (Gilmore 1960).
Reference: <author> Lee, S.-J., and Plaisted, D. </author> <year> 1992. </year> <title> Eliminating duplication with the hyper-linking strategy. </title> <journal> Journal of Automated Reasoning 9(1) </journal> <pages> 25-42. </pages>
Reference-contexts: The semantics allowed in these provers were somewhat limited. CLIN <ref> (Lee & Plaisted 1992) </ref> uses a strategy based on clause linking. CLIN-S (Chu & Plaisted 1994) adds semantic support to clause linking. RRTP (Paramasivam & Plaisted 1997) generates instances using replacement rules and uses the propositional decision procedure in (Zhang & Stickel 1994) to detect propositional unsatisfiability.
Reference: <author> Lusk, E., and Overbeek, R. </author> <year> 1985. </year> <title> Non-horn problems. </title> <journal> Journal of Automated Reasoning 1 </journal> <pages> 103-114. </pages>
Reference-contexts: Natural semantics greatly reduces the number of instances generated by OSHL. e4, e5 and e6 show the effect of equality support in the prover. They, along with e1-e3, are a set of equality benchmark problems proposed by <ref> (Lusk & Overbeek 1985) </ref>. None of them can be solved without the equality support. In the current implementation, OSHL is not as efficient on pure equality problems as OTTER. Acknowledgments This research was partially supported by NSF grant CCR 9627316.
Reference: <author> McCune, W. </author> <year> 1990. </year> <title> Otter 2.0 (theorem prover). </title> <editor> In Stickel, M., ed., </editor> <booktitle> Proceedings of the 10th International Conference on Automated Deduction, </booktitle> <pages> 663-4. </pages>
Reference-contexts: OSHL allows any semantics that can be expressed as a ground decision procedure. OSHL imposes an ordering on all ground literals. The ordering allows OSHL to have a more systematic model generation strategy. OSHL also permits the use of term rewriting to handle equalities. We compare OSHL with OTTER <ref> (McCune 1990) </ref>, which is a state of the art resolution-based theorem prover. OT--TER is very efficient in handling Horn problems and UR resolvable problems. It is not as efficient for non-Horn problems. This is particularly evident on examples like the pigeon-hole problems.
Reference: <author> Paramasivam, M., and Plaisted, D. A. </author> <year> 1997. </year> <title> A Replacement Rule Theorem Prover. </title> <journal> Journal of Automated Reasoning Forthcoming. </journal>
Reference-contexts: The semantics allowed in these provers were somewhat limited. CLIN (Lee & Plaisted 1992) uses a strategy based on clause linking. CLIN-S (Chu & Plaisted 1994) adds semantic support to clause linking. RRTP <ref> (Paramasivam & Plaisted 1997) </ref> generates instances using replacement rules and uses the propositional decision procedure in (Zhang & Stickel 1994) to detect propositional unsatisfiability. Ordered semantic hyper linking improves upon CLIN and CLIN-S. CLIN-S restricts input semantics to be either finite or decidable.
Reference: <author> Plaisted, D., and Zhu, Y. </author> <year> 1997. </year> <title> The Propositional and First-Order Complexity of Theorem Proving Strategies. </title> <publisher> Vieweg. forthcoming. </publisher>
Reference-contexts: The semantics allowed in these provers were somewhat limited. CLIN (Lee & Plaisted 1992) uses a strategy based on clause linking. CLIN-S (Chu & Plaisted 1994) adds semantic support to clause linking. RRTP <ref> (Paramasivam & Plaisted 1997) </ref> generates instances using replacement rules and uses the propositional decision procedure in (Zhang & Stickel 1994) to detect propositional unsatisfiability. Ordered semantic hyper linking improves upon CLIN and CLIN-S. CLIN-S restricts input semantics to be either finite or decidable. <p> By Herbrand's theorem, c (S) is finite if S is unsatisfiable. We can analyze the complexity of OSHL by including, in the input string, c (S) represented in unary along with the input clause set S. We call it the complexity with respect to linear term size measure <ref> (Plaisted & Zhu 1997) </ref>. OSHL is double exponential with respect to the linear term size measure.
Reference: <author> Plaisted, D. </author> <year> 1994. </year> <title> The search efficiency of theorem proving strategies. </title> <booktitle> In Proceedings of the Twelfth International Conference on Automated Deduction, </booktitle> <pages> 57-71. </pages> <booktitle> Lecture Notes in Artificial Intelligence 814. </booktitle>
Reference-contexts: The semantics allowed in these provers were somewhat limited. CLIN (Lee & Plaisted 1992) uses a strategy based on clause linking. CLIN-S <ref> (Chu & Plaisted 1994) </ref> adds semantic support to clause linking. RRTP (Paramasivam & Plaisted 1997) generates instances using replacement rules and uses the propositional decision procedure in (Zhang & Stickel 1994) to detect propositional unsatisfiability. Ordered semantic hyper linking improves upon CLIN and CLIN-S. <p> We use I (s) to represent the element denoted by term s. We use I 0 to name the input semantics. A current semantics is represented as I 0 [EL], where EL stands for eligible literals. Some of these notations were also used in <ref> (Chu & Plaisted 1994) </ref>. <p> For the problem in Example 4, binary resolution will generate much more re-solvents than OSHL. Hyper-resolution greatly reduces the number of possible resolvents, but it still generates redundant clauses, and subsumption tests are needed to remove the redundant clauses. <ref> (Plaisted 1994) </ref> has studied the duplication in various propositional strategies. The ground procedure of ordered semantic hyper linking is in essence similar to the Davis-Putnam method (Davis & Putnam 1960). Both are modeling finding strategies, and prove unsatisfiability by exhausting all possible models.
Reference: <author> Selman, B., and Kautz, H. </author> <year> 1993. </year> <title> An empirical study of greedy local search for satisfiability testing. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence(AAAI-93). </booktitle>
Reference-contexts: All rights Reserved. procedure of ground literals. A natural semantics often greatly reduces the search space of OSHL. There has been some interest recently in studying propositional decision procedures. Although propositional satis-fiability test is an NP-complete problem, <ref> (Selman & Kautz 1993) </ref> has showed that many propositional problems can be solved quickly. Several efficient propositional provers have been implemented (Zhang & Stickel 1994) (Selman & Kautz 1993), and they perform very well on a wide range of problems. <p> There has been some interest recently in studying propositional decision procedures. Although propositional satis-fiability test is an NP-complete problem, <ref> (Selman & Kautz 1993) </ref> has showed that many propositional problems can be solved quickly. Several efficient propositional provers have been implemented (Zhang & Stickel 1994) (Selman & Kautz 1993), and they perform very well on a wide range of problems. The prover in (Zhang & Stickel 1994) is based on the Davis-Putnam method, and the prover in (Selman & Kautz 1993) is based on randomized local search. <p> Several efficient propositional provers have been implemented (Zhang & Stickel 1994) <ref> (Selman & Kautz 1993) </ref>, and they perform very well on a wide range of problems. The prover in (Zhang & Stickel 1994) is based on the Davis-Putnam method, and the prover in (Selman & Kautz 1993) is based on randomized local search. There are some also recent work in applying efficient propositional procedure in various domains. In (Kautz, McAllester, & Selman 1996), planning problems are converted into propositional problems, and efficient propositional decision procedures are used to tackle those problems.
Reference: <author> Slagle, J. R. </author> <year> 1967. </year> <title> Automatic theorem proving with re-namable and semantic resolution. </title> <journal> Journal of the ACM 14(4) </journal> <pages> 687-697. </pages>
Reference: <author> Sutcliffe, G.; Suttner, C.; and Yemenis, T. </author> <year> 1993. </year> <title> The TPTP problem library. </title> <type> Technical Report 93/11, </type> <institution> Department of Computer Science, James Cook University, Aus-tralia. </institution>
Reference-contexts: Although some hard problems can be solved using a trivial semantics, the prover performs best when a natural semantics is used. We generated natural semantics for many problems by hand. The process is easier than it sounds. For example, many of the GRP problems from TPTP library <ref> (Sutcliffe, Suttner, & Yemenis 1993) </ref> have the same set of axioms.
Reference: <author> Wang, T., and Bledsoe, W. </author> <year> 1987. </year> <title> Hierarchical deduction. </title> <journal> Journal of Automated Reasoning 3 </journal> <pages> 35-77. </pages>
Reference: <author> Zhang, H., and Stickel, M. E. </author> <year> 1994. </year> <title> Implementing the Davis-Putnam algorithm by tries. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Iowa. </institution>
Reference-contexts: There has been some interest recently in studying propositional decision procedures. Although propositional satis-fiability test is an NP-complete problem, (Selman & Kautz 1993) has showed that many propositional problems can be solved quickly. Several efficient propositional provers have been implemented <ref> (Zhang & Stickel 1994) </ref> (Selman & Kautz 1993), and they perform very well on a wide range of problems. The prover in (Zhang & Stickel 1994) is based on the Davis-Putnam method, and the prover in (Selman & Kautz 1993) is based on randomized local search. <p> Several efficient propositional provers have been implemented <ref> (Zhang & Stickel 1994) </ref> (Selman & Kautz 1993), and they perform very well on a wide range of problems. The prover in (Zhang & Stickel 1994) is based on the Davis-Putnam method, and the prover in (Selman & Kautz 1993) is based on randomized local search. There are some also recent work in applying efficient propositional procedure in various domains. <p> The semantics allowed in these provers were somewhat limited. CLIN (Lee & Plaisted 1992) uses a strategy based on clause linking. CLIN-S (Chu & Plaisted 1994) adds semantic support to clause linking. RRTP (Paramasivam & Plaisted 1997) generates instances using replacement rules and uses the propositional decision procedure in <ref> (Zhang & Stickel 1994) </ref> to detect propositional unsatisfiability. Ordered semantic hyper linking improves upon CLIN and CLIN-S. CLIN-S restricts input semantics to be either finite or decidable. OSHL allows any semantics that can be expressed as a ground decision procedure. OSHL imposes an ordering on all ground literals.
References-found: 16

