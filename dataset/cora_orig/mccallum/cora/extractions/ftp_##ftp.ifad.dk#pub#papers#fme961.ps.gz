URL: ftp://ftp.ifad.dk/pub/papers/fme961.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Phone: 2  
Title: Combining VDM-SL Specifications with C++ Code  
Author: Brigitte Frohlich and Peter Gorm Larsen 
Address: Graz, Munzgabenstr. 11/II, 8010 Graz, Austria  Denmark  
Affiliation: 1 University of Technology  IFAD (The Institute of Applied Computer Science), Forskerparken 10, 5230 Odense M,  
Abstract: Experience shows that it is not economically feasible to formally specify all parts of a system in an industrial application. Either one already has a number of existing components which are trusted and therefore desirable for reuse, or components are so simple that there is no gain in formally specifying their behavior. In both cases it may be felt that it is not worth spending time on developing a detailed formal specification of the entire system. This raises the question what tools should be provided for the analysis of the entire system in which actual code is combined with specifications. In this paper we propose an approach which enables integration of code into a formal specification for proto-typing facilities. The integration of code is supported by an extension to the IFAD VDM-SL Toolbox such that heterogeneous models can be interpreted.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Silberschatz A., Peterson J., and Galvin P. </author> <title> Operating System Concepts. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: of both parts are strongly related, we present both interfaces in two boxes below. implmodule MY_MATH exports functions MyCos : real -&gt; real; MySin : real -&gt; real values MyPI : real uselib mymath.lib end MY_MATH #include "metaiv.h" #include &lt;math.h&gt; Generic MyCos (Sequence sq) double rad; rad = Real (sq <ref> [1] </ref>); return (Real ( cos (rad) )); Generic MySin (Sequence sq) double rad; rad = Real (sq [1]); return (Real ( sin (rad) )); Generic MyPI (Sequence sq) return (Real (M_PI)); The part between implmodule MY MATH and end MY MATH is the definition of an implementation module and constitutes the <p> functions MyCos : real -&gt; real; MySin : real -&gt; real values MyPI : real uselib mymath.lib end MY_MATH #include "metaiv.h" #include &lt;math.h&gt; Generic MyCos (Sequence sq) double rad; rad = Real (sq <ref> [1] </ref>); return (Real ( cos (rad) )); Generic MySin (Sequence sq) double rad; rad = Real (sq [1]); return (Real ( sin (rad) )); Generic MyPI (Sequence sq) return (Real (M_PI)); The part between implmodule MY MATH and end MY MATH is the definition of an implementation module and constitutes the interface to VDM-SL. <p> If the other parts of the specification are also executable, a kind of integration test for the implementation is provided by executing the specification [6]. Dynamic linking postpones the linking of components until execution time <ref> [1] </ref>. Functions defined in shared libraries are linked and loaded if their objects are accessed during run-time. Shared libraries are "transparent" to the process using them. This means that an object in a shared library is added to the address space at the time of execution.
Reference: 2. <author> D.J. Andrews, H. Bruun, B.S. Hansen, P.G. Larsen, N. Plat, et al. </author> <title> Information Technology | Programming Languages, their Environments and System Software Interfaces | Vienna Development Method-Specification Language Part 1: Base language. ISO, </title> <year> 1995. </year>
Reference-contexts: Its specification language VDM-SL [7] is used during the specification and design phases of a software development project, and it supports the production of correct high quality software. VDM-SL is being standardized under the auspices of the International Standard Institution (ISO) <ref> [2] </ref>. It is currently a Committee Draft standard under ISO and it is expected that this draft will be accepted as a final standard soon. A modular extension to ISO VDM-SL is supported by the IFAD VDM-SL Toolbox [10, 21, 12].
Reference: 3. <author> E. Astesiano and M. Cerioli. </author> <title> Multiparadigm Specification Languages: A First At tempt at Foundations. </title> <editor> In J.F. ~ Groote D.J. ~ Andrews and C.A. Middelburg, editors, </editor> <booktitle> Semantics of Specification Languages, </booktitle> <pages> pages 168-185, </pages> <month> 25-27 October </month> <year> 1993, </year> <note> Utrecht Springer-Verlag 1994. </note>
Reference-contexts: This case was not considered in this work but is supported in the IPTES Project. 6 Related Work A number of researchers have worked on a common framework which can be used to combine different formalisms. This includes both theoretical work on the foundations <ref> [3] </ref> and more practical applications [27, 28]. Most of the existing work, however is focusing on how to combine different specification notations. In our work we wish to enable a heterogeneous combination of a specification language and an implementation language.
Reference: 4. <editor> D. Bjtner and C.B. Jones, editors. </editor> <title> Formal Specification and Software Develop ment. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1982. </year>
Reference-contexts: The intention is to provide a prototyping facility by which one can determine how the parts that have been specified interact with the coded parts. The Vienna Development Method (VDM) <ref> [16, 4] </ref> is one of the most mature formal methods, primarily intended for the formal specification and the subsequent development of functional aspects of software systems.
Reference: 5. <author> S. Kapplan C. Choopy. </author> <title> Mixing abstract and concret Modules: Specification, De velopment and Prototyping. </title> <booktitle> In 12th IEEE-ACM International Conference on Software Engineering, Nice 1990, </booktitle> <pages> pages 173-184, </pages> <year> 1990. </year>
Reference-contexts: In our work we wish to enable a heterogeneous combination of a specification language and an implementation language. In this area related work can be found in the Larch community [17]. An approach of mixed evaluation of an algebraic specification and implemented parts in code is given in <ref> [5] </ref>. The execution is obtained by applying rewriting techniques to the algebraic specifications and direct evaluation of implemented parts. The production of an executable model from a given VDM specification is presented in [25].
Reference: 6. <author> Christine Choppy. </author> <title> Formal Specifications, Prototyping and Integrations Tests. </title> <editor> In D. Simpson H.K. Nichols, editor, </editor> <booktitle> ESEC'87 1.st European Software Engineering Conference, Strasbourg, 1987, Lecture Notes in Computer Science 289, </booktitle> <pages> pages 172-179. </pages> <publisher> Springer Verlag, </publisher> <month> September </month> <year> 1987. </year>
Reference-contexts: If the other parts of the specification are also executable, a kind of integration test for the implementation is provided by executing the specification <ref> [6] </ref>. Dynamic linking postpones the linking of components until execution time [1]. Functions defined in shared libraries are linked and loaded if their objects are accessed during run-time. Shared libraries are "transparent" to the process using them.
Reference: 7. <author> John Dawes. </author> <title> The VDM-SL Reference Guide. </title> <publisher> Pitman, </publisher> <year> 1991. </year>
Reference-contexts: The Vienna Development Method (VDM) [16, 4] is one of the most mature formal methods, primarily intended for the formal specification and the subsequent development of functional aspects of software systems. Its specification language VDM-SL <ref> [7] </ref> is used during the specification and design phases of a software development project, and it supports the production of correct high quality software. VDM-SL is being standardized under the auspices of the International Standard Institution (ISO) [2].
Reference: 8. <author> Kees de Bruin. </author> <title> Towards an Interpreter for Full VDM-SL. </title> <type> Master's thesis, </type> <institution> Delft University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: The VDM-SL Specification The structuring concept of the module extension of VDM-SL which is used in the Toolbox enables a combination of modules based on import and export of constructs <ref> [8] </ref>. Modules can also be parameterized but we will not consider that possibility here. To combine modules, a module has to provide an interface to other modules including export of definitions which may be used by other modules.
Reference: 9. <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1990. </year>
Reference-contexts: By accessing an object defined in a shared library a pointer is returned, which must be casted to a function type. The type checking of C++ prohibits a cast to a function type which has a variable number of arguments <ref> [9] </ref>. A solution for this problem is provided by the usage of Meta-IV values. The interpreter process passes a Meta-IV sequence value to the interface, where the length of the sequence is equal to the arity of the function.
Reference: 10. <author> Rene Elmstrtm, Peter Gorm Larsen, and Poul Btgh Lassen. </author> <title> The IFAD VDM-SL Toolbox: A Practical Approach to Formal Specifications. </title> <journal> ACM Sigplan Notices, </journal> <volume> 29(9) </volume> <pages> 77-80, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: It is currently a Committee Draft standard under ISO and it is expected that this draft will be accepted as a final standard soon. A modular extension to ISO VDM-SL is supported by the IFAD VDM-SL Toolbox <ref> [10, 21, 12] </ref>. The Toolbox supports extensive type checking, L A T E X pretty-printing facilities, test coverage, code generation, interpretation and many debugging facilities. A large subset of IFAD VDM-SL is executable by the existing interpreter of the Toolbox.
Reference: 11. <author> B. Fischer, M. Kievernagel, and W. Struckmann. VCR: </author> <title> A VDM-based Soft ware Component Retrieval Tool. </title> <type> Technical Report 94-08, </type> <institution> Technische Universitat Braunsweig, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: This work shows the integration of a VDM specification into the KIDS Toolbox which is used for executing the specification [20]. Another work in the VDM community which is somewhat related is the specification of library components in a programming language <ref> [11] </ref>. However, there is a large number of industrial applications of formal methods, where only a part of the system has been formally specified (e.g. [15]) which could benefit from the approach presented in this paper.
Reference: 12. <author> The VDM-SL Tool Group. </author> <title> The IFAD VDM-SL Language. </title> <type> Technical report, </type> <institution> IFAD, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: It is currently a Committee Draft standard under ISO and it is expected that this draft will be accepted as a final standard soon. A modular extension to ISO VDM-SL is supported by the IFAD VDM-SL Toolbox <ref> [10, 21, 12] </ref>. The Toolbox supports extensive type checking, L A T E X pretty-printing facilities, test coverage, code generation, interpretation and many debugging facilities. A large subset of IFAD VDM-SL is executable by the existing interpreter of the Toolbox.
Reference: 13. <author> The VDM-SL Tool Group. </author> <title> The VDM C++ Library. </title> <type> Technical report, </type> <institution> IFAD, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: The code generator from the Toolbox also produces C++ code using this library. C++ is an object-oriented extension of C and this library uses inheritance to build a class hierarchy of general VDM values in C++ <ref> [13] </ref>. For historical reasons the objects from this VDM library have been called "Meta-IV values". 3 After this introduction we will present a small example illustrating the basic idea underlying our approach.
Reference: 14. <editor> Michael G. Hinchey and Jonathan P. Bowen, editors. </editor> <booktitle> Applications of Formal Meth ods. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction The successful introduction of formal methods into an industrial setting depends very much upon the choice of the parts of a given system that are subject to formal specification <ref> [14] </ref>. In the ConForm experiment it was concluded that formal specification is beneficial when either the functionality is simple but critical or the data structure or the functionality is complex [18].
Reference: 15. <author> Iain Houston and Steve King. </author> <title> CICS Project Report: Experiences and Results from the Use of Z in IBM. </title> <editor> In S. Prehn and W.J. Toetenel, editors, </editor> <booktitle> VDM'91 Formal Software Development Methods, </booktitle> <pages> pages 588-696. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Another work in the VDM community which is somewhat related is the specification of library components in a programming language [11]. However, there is a large number of industrial applications of formal methods, where only a part of the system has been formally specified (e.g. <ref> [15] </ref>) which could benefit from the approach presented in this paper. The idea of dynamically extending the functionality of a tool has already been used in the programming language community [24].
Reference: 16. <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <booktitle> Prentice-Hall In ternational, </booktitle> <address> Englewood Cliffs, New Jersey, </address> <note> second edition, </note> <year> 1990. </year>
Reference-contexts: The intention is to provide a prototyping facility by which one can determine how the parts that have been specified interact with the coded parts. The Vienna Development Method (VDM) <ref> [16, 4] </ref> is one of the most mature formal methods, primarily intended for the formal specification and the subsequent development of functional aspects of software systems.
Reference: 17. <author> J.J. Horning J.V. Guttag and J.M. Wing. </author> <title> Larch in Five Easy Pieces. </title> <type> Technical report, </type> <institution> Digital Systems Research Center, </institution> <month> July </month> <year> 1985. </year>
Reference-contexts: Most of the existing work, however is focusing on how to combine different specification notations. In our work we wish to enable a heterogeneous combination of a specification language and an implementation language. In this area related work can be found in the Larch community <ref> [17] </ref>. An approach of mixed evaluation of an algebraic specification and implemented parts in code is given in [5]. The execution is obtained by applying rewriting techniques to the algebraic specifications and direct evaluation of implemented parts.
Reference: 18. <author> Peter Gorm Larsen, John Fitzgerald, and Tom Brookes. </author> <title> Lessons Learned from Applying Formal Specification in Industry. </title> <note> Submitted to IEEE Software, </note> <month> August </month> <year> 1995. </year>
Reference-contexts: In the ConForm experiment it was concluded that formal specification is beneficial when either the functionality is simple but critical or the data structure or the functionality is complex <ref> [18] </ref>. The skill for selecting the most appropriate subsystems to be formally specified comes with experience in both formal specification and the given application domain. There is hardly any new input one can supply to meet this challenge.
Reference: 19. <author> Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> An Executable Subset of Meta-IV with Loose Specification. In VDM '91: Formal Software Development Methods. VDM Europe, </title> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1991. </year>
Reference-contexts: The context for the evaluation of a specification, which consists of one or more modules, is established by the combination of all related module values. 3.2 The Evaluation Model The IFAD VDM-SL interpreter uses an environment based evaluation model <ref> [19] </ref>. The main structure of the semantic domain is the environment (ENV L ) which is organized as a stack of function application environments (ENV ).
Reference: 20. <author> Yves Ledru. </author> <title> Proof-Based Development of Specifications with KIDS/VDM. </title> <editor> In M. Bertran M. Naftalin, T. Denvir, editor, FME'94: </editor> <booktitle> Industrial Benefit of Formal Methods, </booktitle> <pages> pages 214-232. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The production of an executable model from a given VDM specification is presented in [25]. This work shows the integration of a VDM specification into the KIDS Toolbox which is used for executing the specification <ref> [20] </ref>. Another work in the VDM community which is somewhat related is the specification of library components in a programming language [11].
Reference: 21. <author> Paul Mukherjee. </author> <title> Computer-aided Validation of Formal Specifications. </title> <journal> Software Engineering Journal, </journal> <pages> pages 133-140, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: It is currently a Committee Draft standard under ISO and it is expected that this draft will be accepted as a final standard soon. A modular extension to ISO VDM-SL is supported by the IFAD VDM-SL Toolbox <ref> [10, 21, 12] </ref>. The Toolbox supports extensive type checking, L A T E X pretty-printing facilities, test coverage, code generation, interpretation and many debugging facilities. A large subset of IFAD VDM-SL is executable by the existing interpreter of the Toolbox.
Reference: 22. <author> B. Stroustrup. </author> <title> The C++ Programming Language, 2nd edition. </title> <publisher> Addison Wesley Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: A reference to a function can be executed in C++ after dereferencing it <ref> [22] </ref>. 5 Different Communication Primitives The implementation of the interpreter has to provide a facility to execute functions which are defined in code. In case a function from an implementation module is applied, the Toolbox process knows the name of the function and can calculate the actual arguments.
Reference: 23. <author> SUN-OS. </author> <title> Programmer's Overview Utilities & Libraries. </title> <type> Technical report, </type> <institution> Sun Microsystems, Inc., </institution> <month> 27 March </month> <year> 1990. </year>
Reference-contexts: It is worth noting that the interface to code and the implemented code together form a shared library for each implementation module. The application of a shared library does not depend on process communication but requires operating system support <ref> [23] </ref>. The IFAD VDM-SL Toolbox is available for different operating systems which support dynamic linking in a similar way. The operating systems contain functions which provide a simple programmatic interface to handle dynamic linked libraries. These programmatic interfaces always contain an open function which provides access to the library.
Reference: 24. <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly and Associates, Inc, </publisher> <year> 1992. </year>
Reference-contexts: The idea of dynamically extending the functionality of a tool has already been used in the programming language community <ref> [24] </ref>. This concept is naturally a powerful feature which is desirable from a tool point of view. 7 Concluding Remarks In this paper we have presented an approach enabling users to dynamically extend tools supporting the interpretation of formal specification.
Reference: 25. <author> M.-H. Liegeois Y. Ledru. </author> <title> Integrating REFINE prototypes in a VDM development framework. </title> <booktitle> In Constructing Programs from Specifications, </booktitle> <pages> pages 236-258, </pages> <year> 1991. </year>
Reference-contexts: The execution is obtained by applying rewriting techniques to the algebraic specifications and direct evaluation of implemented parts. The production of an executable model from a given VDM specification is presented in <ref> [25] </ref>. This work shows the integration of a VDM specification into the KIDS Toolbox which is used for executing the specification [20]. Another work in the VDM community which is somewhat related is the specification of library components in a programming language [11].
Reference: 26. <author> Nabil Zakhama. </author> <title> Run-Time Adaptation System Target Code Procedures Activato (RTAS - TCPACT) - User's Guide. </title> <type> Technical report, </type> <institution> Telesystemes, </institution> <month> March </month> <year> 1993. </year> <note> IPTES Doc.id.: IPTES-TS-53-V2.1. </note>
Reference-contexts: There is also a considerable overhead for doing type conversions between the Toolbox process, the interface to C and the implemented code. An example of using pipes for interprocess communication in connection with the VDM-SL Toolbox is used in the IPTES Project <ref> [26] </ref>. In this case the data types are restricted to the VDM basic types and to sequences and tuples of it.
Reference: 27. <author> Pamela Zave. </author> <title> A Compositional Approach to Multiparadigm Programming. </title> <journal> IEEE Software, </journal> <pages> pages 15-25, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: This case was not considered in this work but is supported in the IPTES Project. 6 Related Work A number of researchers have worked on a common framework which can be used to combine different formalisms. This includes both theoretical work on the foundations [3] and more practical applications <ref> [27, 28] </ref>. Most of the existing work, however is focusing on how to combine different specification notations. In our work we wish to enable a heterogeneous combination of a specification language and an implementation language. In this area related work can be found in the Larch community [17].
Reference: 28. <author> Pamela Zave and Michael Jackson. </author> <title> Conjunction as Composition. </title> <journal> ACM Transac tions on Software Engineering and Methology, </journal> <volume> 2(4) </volume> <pages> 379-411, </pages> <month> October </month> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: This case was not considered in this work but is supported in the IPTES Project. 6 Related Work A number of researchers have worked on a common framework which can be used to combine different formalisms. This includes both theoretical work on the foundations [3] and more practical applications <ref> [27, 28] </ref>. Most of the existing work, however is focusing on how to combine different specification notations. In our work we wish to enable a heterogeneous combination of a specification language and an implementation language. In this area related work can be found in the Larch community [17].
References-found: 28

