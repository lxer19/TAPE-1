URL: http://www.eecs.umich.edu/mistic/papers/gogoi/mems.ps
Refering-URL: http://www.eecs.umich.edu/mistic/publications.html
Root-URL: http://www.cs.umich.edu
Title: THE AUTOMATIC SYNTHESIS OF PLANAR FABRICATION PROCESS FLOWS FOR SURFACE MICROMACHINED DEVICES  
Author: B. Gogoi, R. Yuen, and C. H. Mastrangelo 
Address: Ann Arbor, MI 48109-2122, USA  
Affiliation: Center for Integrated Sensors and Circuits Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: 1 A method which automatically generates fabrication sequences for surface micromachined structures starting from a two dimensional geometrical description is presented. This method translates the device geometry into layers and a mathematical representation of layer order. It is shown that all possible process sequences are extracted from the layer order in terms of fundamental processing steps like deposition, lithography, and etching using topological sorting techniques. In general, the fabrication sequence is not unique. Hence, an optimal sequence is selected from the set using a cost function based upon a database of materials and processes. A synthesis program that implements the sequencing algorithm and optimization was developed. The output of the synthesizer is a complete optimal fabrication sequence in human-readable form. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. M. Sze, </author> <title> VLSI Technology. </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1988. </year> <pages> Page 5 </pages>
Reference-contexts: INTRODUCTION Current computer simulation tools for planar mi-crofabrication such as SUPREM, SIMPL, MEMCAD, and OYSTER <ref> [1, 2, 3, 4] </ref> take a description of the fabrication process flow and a mask set of a device as inputs and generate accurate simulated representations of the finished device. These design tools are undoubtedly useful aids to the designer allowing him to correct potentially expensive mistakes before fabrication begins.
Reference: [2] <author> K. Lee, </author> <title> SIMPL-2 simulated profiles from the layout version 2. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1985. </year>
Reference-contexts: INTRODUCTION Current computer simulation tools for planar mi-crofabrication such as SUPREM, SIMPL, MEMCAD, and OYSTER <ref> [1, 2, 3, 4] </ref> take a description of the fabrication process flow and a mask set of a device as inputs and generate accurate simulated representations of the finished device. These design tools are undoubtedly useful aids to the designer allowing him to correct potentially expensive mistakes before fabrication begins.
Reference: [3] <author> S. D. Senturia, R. M. Harris, and et. al, </author> <title> "A computer-aided design system for microelectrome-chanical systems (MEMCAD)," </title> <journal> IEEE Journal of Microelectromechanical Sys., </journal> <volume> vol. 1, </volume> <pages> pp. 3-13, </pages> <year> 1992. </year>
Reference-contexts: INTRODUCTION Current computer simulation tools for planar mi-crofabrication such as SUPREM, SIMPL, MEMCAD, and OYSTER <ref> [1, 2, 3, 4] </ref> take a description of the fabrication process flow and a mask set of a device as inputs and generate accurate simulated representations of the finished device. These design tools are undoubtedly useful aids to the designer allowing him to correct potentially expensive mistakes before fabrication begins.
Reference: [4] <author> G. M. Koppelman, "OYSTER, </author> <title> a three-dimensional structural simulator for microelectromechanical design," </title> <journal> Sensors and Actuators, </journal> <volume> vol. 20, </volume> <pages> pp. 179-185, </pages> <year> 1989. </year>
Reference-contexts: INTRODUCTION Current computer simulation tools for planar mi-crofabrication such as SUPREM, SIMPL, MEMCAD, and OYSTER <ref> [1, 2, 3, 4] </ref> take a description of the fabrication process flow and a mask set of a device as inputs and generate accurate simulated representations of the finished device. These design tools are undoubtedly useful aids to the designer allowing him to correct potentially expensive mistakes before fabrication begins.
Reference: [5] <author> K. Weiler and P. Atherton, </author> <title> "Hidden surface removal using polygon area sorting," </title> <journal> SIGGRAPH, </journal> <volume> vol. 77, </volume> <pages> pp. 214-222, </pages> <year> 1977. </year>
Reference-contexts: The current version of the interface accepts manhattan structures. The interface checks that all input polygons are anchored (i.e. rest on other polygons) and automatically inserts sacrificial layers if required. The sacrificial layer geometry is determined using the clipping algorithm due to Weiler <ref> [5] </ref> because of its capability of handling both convex and concave polygons. The augmented graphical information is fed to the smashing algorithm which test for polygons which can Page 1 be represented by conformal layers of uniform thick-ness.
Reference: [6] <author> E. D. Dougherty and C. R. Giardina, </author> <booktitle> Mathematical Methods for Artificial Intelligence and Autonomous Systems. </booktitle> <address> Englewood Cliffs, N. </address> <publisher> J.: Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: The augmented graphical information is fed to the smashing algorithm which test for polygons which can Page 1 be represented by conformal layers of uniform thick-ness. The conformality test is performed by dilating <ref> [6] </ref> the bottom profile of each polygon and using it as a template for the top profile. If there is no match, then the polygon is nonconformal, and it is resolved into elemental polygons of constant thickness using scan-line algorithms described in Foley [7].
Reference: [7] <editor> J. D. Foley, A. van Dam, and et. al, </editor> <booktitle> Computer Graphics: Principles and Practice. </booktitle> <address> Reading, Mass.: </address> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: If there is no match, then the polygon is nonconformal, and it is resolved into elemental polygons of constant thickness using scan-line algorithms described in Foley <ref> [7] </ref>. The expanded set of polygons of constant thickness is the output of the polygon smasher. DIRECTED GRAPH AND PARTIAL ORDER REPRESENTATION The order of the output polygons from the geometry smasher can be represented as a directed acyclic graph (DAG).
Reference: [8] <author> A. Gill, </author> <title> Applied Algebra For The Computer Sciences. </title> <address> Englewood Cliffs. N.J.: </address> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference-contexts: Additional order relations are inferred from the transitive property of the DAG i.e. if node ab and node bc, then node ac. All these relations are included in the transitive closure matrix T <ref> [8] </ref>. T = i=1 where the sum and power are Boolean operations. In graph-theoretic terms, this is equivalent to economi Page 2 cally representing the path information in the directed graph [9, 10].
Reference: [9] <author> A. V. Aho, M. R. Garey, and J. D. Ullman, </author> <title> "The transitive reduction of a directed graph," </title> <journal> SIAM J. Comput., </journal> <volume> vol. 1, </volume> <pages> pp. 131-137, </pages> <year> 1972. </year>
Reference-contexts: All these relations are included in the transitive closure matrix T [8]. T = i=1 where the sum and power are Boolean operations. In graph-theoretic terms, this is equivalent to economi Page 2 cally representing the path information in the directed graph <ref> [9, 10] </ref>. The synthesis problem thus reduces to finding a sequence of nodes that includes all the polygons subject to these constraints. In mathematical terms, the DAG represents a partially ordered set (poset) of objects. The synthesis problem is equivalent to finding linear extensions of the poset. <p> A number of topological sorting algorithms based on the sequential computation approach are described in the literature [21, 22, 23, 24, 25, 26] as well as algorithms which consider the problem in terms of an acyclic graph <ref> [9, 27, 28] </ref> and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [10] <author> A. Pneuli, A. Lempel, and S. </author> <title> Even, "Transitive orientation of graphs and identification of permutation graphs," Can. </title> <journal> J. Math., </journal> <volume> vol. </volume> <pages> XXIII, pp. 160-175, </pages> <year> 1971. </year>
Reference-contexts: All these relations are included in the transitive closure matrix T [8]. T = i=1 where the sum and power are Boolean operations. In graph-theoretic terms, this is equivalent to economi Page 2 cally representing the path information in the directed graph <ref> [9, 10] </ref>. The synthesis problem thus reduces to finding a sequence of nodes that includes all the polygons subject to these constraints. In mathematical terms, the DAG represents a partially ordered set (poset) of objects. The synthesis problem is equivalent to finding linear extensions of the poset.
Reference: [11] <author> E. Szpilrajn, "Sur l'extension de l'ordre partiel," </author> <title> Fund. </title> <journal> Math, </journal> <volume> vol. 60, </volume> <pages> pp. 175-186, </pages> <year> 1930. </year>
Reference-contexts: The existence of linear extensions for a poset has been postulated by Szpilrajn <ref> [11] </ref> which is stated here - Any partial order on a set can be extended to a linear order of the same set. Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process.
Reference: [12] <author> N. Linial, </author> <title> "Hard enumeration problems in geometry and combinatorics," </title> <journal> SIAM. J. Alg. Disc. Meth., </journal> <volume> vol. 7, </volume> <pages> pp. 331-335, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12]. <p> For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions <ref> [12] </ref>. A reasonable upper estimate for n is N1 Y (N i C (i)) (3) where C (i) is the sum of upper and lower constraints of node i. In general, the number of sequences n is large. <p> The number of linear extensions of the poset P is n = N ! vol (B (P )) (4) where B (P ) is an N -dimensional convex polytope defined by the constraints of the poset, and vol is the polytope volume <ref> [12] </ref>. An estimate for Eq. (4) can be rapidly calculated using Monte-Carlo techniques [19, 20].
Reference: [13] <author> S. G. Mohanty, </author> <title> Lattice Path Countings and Applications. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12].
Reference: [14] <author> I. </author> <title> Rival, "Linear extensions of finite ordered sets," </title> <journal> Annals of Discrete Mathematics, </journal> <volume> vol. 23, </volume> <pages> pp. 355-370, </pages> <year> 1984. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12].
Reference: [15] <author> G. R. Brightwell, </author> <title> "Linear extensions of infinite posets," </title> <journal> Discrete Mathematics, </journal> <volume> vol. 70, </volume> <pages> pp. 113-136, </pages> <year> 1988. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12].
Reference: [16] <author> M. Pouzet and I. </author> <title> Rival, "Which ordered sets have a complete linear extension?," Can. </title> <journal> J. Math., </journal> <volume> vol. </volume> <pages> XXXIII, pp. 1245-1254, </pages> <year> 1981. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12].
Reference: [17] <author> V. Bouchitte and M. Habib, </author> <title> "Np-completeness properties about linear extensions," </title> <booktitle> Order, </booktitle> <volume> vol. 4, </volume> <pages> pp. 143-154, </pages> <year> 1987. </year>
Reference-contexts: Since any 2D device cross-section can be represented as a poset, any device structure can be fabricated using a planar process. The enumeration and generation of linear extensions has been studied extensively <ref> [12, 13, 14, 15, 16, 17] </ref>. For the general case, the counting of the number of linear extensions is a NP-complete problem [18]. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12].
Reference: [18] <author> G. R. Brightwell and P. Winkler, </author> <title> "Counting linear extensions is NP-complete," </title> <booktitle> in Proceedings of the Twenty Third Annual ACM Symposium, Theory of Computing, </booktitle> <pages> pp. 175-181, </pages> <year> 1991. </year>
Reference-contexts: The enumeration and generation of linear extensions has been studied extensively [12, 13, 14, 15, 16, 17]. For the general case, the counting of the number of linear extensions is a NP-complete problem <ref> [18] </ref>. However, for finite posets, estimates has been made for the enumeration of all the linear extensions [12]. A reasonable upper estimate for n is N1 Y (N i C (i)) (3) where C (i) is the sum of upper and lower constraints of node i.
Reference: [19] <author> M. Dyer, A. Frieze, and R. Kannan, </author> <title> "A random polynomial time algorithm for approximating the volume of convex bodies," </title> <booktitle> in Proceedings of the Twenty First Annual ACM Symposium, Theory of Computing, </booktitle> <pages> pp. 375-381, </pages> <year> 1989. </year>
Reference-contexts: An estimate for Eq. (4) can be rapidly calculated using Monte-Carlo techniques <ref> [19, 20] </ref>.
Reference: [20] <author> D. Applegate and R. Kannan, </author> <title> "Sampling and integration of near log-concave functions," </title> <booktitle> in Proceedings of the Twenty Third Annual ACM Symposium, Theory of Computing, </booktitle> <pages> pp. 156-163, </pages> <year> 1991. </year>
Reference-contexts: An estimate for Eq. (4) can be rapidly calculated using Monte-Carlo techniques <ref> [19, 20] </ref>.
Reference: [21] <author> A. D. Kalvin and Y. L. Varol, </author> <title> "On the generation of all topological sortings," </title> <journal> J. Algorithms, </journal> <volume> vol. 4, </volume> <pages> pp. 150-162, </pages> <year> 1983. </year>
Reference-contexts: In terms of the adjacency matrix A describing the partial ordering R on a finite, non empty set S, this is equivalent to finding the permutations of the rows and columns of A so that it becomes an upper triangular matrix <ref> [21] </ref>. Using the notation of Knuth [22], the sequencing problem is formally described with its equivalent representations. <p> A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [22] <author> D. E. Knuth and J. L. Szwarcfiter, </author> <title> "A structured program to generate all topological sorting arrangements," </title> <journal> Information Processing Letters, </journal> <volume> vol. 2, </volume> <pages> pp. 153-157, </pages> <year> 1974. </year>
Reference-contexts: In terms of the adjacency matrix A describing the partial ordering R on a finite, non empty set S, this is equivalent to finding the permutations of the rows and columns of A so that it becomes an upper triangular matrix [21]. Using the notation of Knuth <ref> [22] </ref>, the sequencing problem is formally described with its equivalent representations. <p> A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [23] <author> A. B. Kahn, </author> <title> "Topological sortings of large networks," </title> <journal> Comm. ACM, </journal> <volume> vol. 5, </volume> <pages> pp. 558-562, </pages> <year> 1962. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [24] <author> D. E. Knuth, </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> vol. </volume> <pages> 1. </pages> <address> Reading, Mass.: </address> <publisher> Addison-Wesley, </publisher> <year> 1968. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [25] <author> Y. L. Varol and D. Rotem, </author> <title> "An algorithm to generate all topological sorting arrangements," </title> <journal> The Computer Journal, </journal> <volume> vol. 24, </volume> <pages> pp. 83-84, </pages> <year> 1981. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [26] <author> G. </author> <title> Steiner, "An algorithm to generate the ideals of a partial order," </title> <journal> Operations Research Letters, </journal> <volume> vol. 5, </volume> <pages> pp. 317-320, </pages> <year> 1986. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature <ref> [21, 22, 23, 24, 25, 26] </ref> as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed. <p> Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one. The sequential algorithm due to Steiner <ref> [26] </ref> which generates all possible linear orders was implemented.
Reference: [27] <author> E. M. Reingold, J. Nievergelt, and N. Deo, </author> <title> Combinatorial Algorithms: Theory and Practice. </title> <editor> En-glewood Cliffs, N. J.: </editor> <publisher> Prentice-Hall, </publisher> <year> 1977. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature [21, 22, 23, 24, 25, 26] as well as algorithms which consider the problem in terms of an acyclic graph <ref> [9, 27, 28] </ref> and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [28] <author> R. Tarjan, </author> <title> "Finding dominators in directed graphs," </title> <journal> SIAM J. Comput., </journal> <volume> vol. 3, </volume> <pages> pp. 62-89, </pages> <year> 1974. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature [21, 22, 23, 24, 25, 26] as well as algorithms which consider the problem in terms of an acyclic graph <ref> [9, 27, 28] </ref> and triangulation of the adjacency matrix [29]. Parallel computation algorithms [30, 31, 32, 33] have also been developed.
Reference: [29] <author> A. Nijenhuis and H. S. Wilf, </author> <title> Combinatorial Algorithms. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: A number of topological sorting algorithms based on the sequential computation approach are described in the literature [21, 22, 23, 24, 25, 26] as well as algorithms which consider the problem in terms of an acyclic graph [9, 27, 28] and triangulation of the adjacency matrix <ref> [29] </ref>. Parallel computation algorithms [30, 31, 32, 33] have also been developed. Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one.
Reference: [30] <author> M. C. </author> <title> Er, "A parallel computation approach to topological sorting," </title> <journal> The Computer Journal, </journal> <volume> vol. 26, </volume> <pages> pp. 293-295, </pages> <year> 1983. </year>
Reference-contexts: Parallel computation algorithms <ref> [30, 31, 32, 33] </ref> have also been developed. Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one.
Reference: [31] <author> R. Tamassia and J. Vitter, </author> <title> "Parallel transitive closure and point location in planar structures," </title> <journal> Siam J. Comput., </journal> <volume> vol. 20, </volume> <pages> pp. 708-725, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Parallel computation algorithms <ref> [30, 31, 32, 33] </ref> have also been developed. Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one.
Reference: [32] <author> P. Chaudhuri, </author> <title> "Fast parallel algorithms for a class of graph problems," Jr. </title> <journal> Comb. Inf. and Syst. Sci., </journal> <volume> vol. 12, no. 1, </volume> <pages> pp. 51-65, </pages> <year> 1987. </year> <pages> Page 6 </pages>
Reference-contexts: Parallel computation algorithms <ref> [30, 31, 32, 33] </ref> have also been developed. Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one.
Reference: [33] <author> K. Culik and I. Fris, </author> <title> "Topological transformations as a tool in the design of systolic networks," </title> <journal> Theoretical Computer Science, </journal> <volume> vol. 37, </volume> <pages> pp. 183-216, </pages> <year> 1985. </year>
Reference-contexts: Parallel computation algorithms <ref> [30, 31, 32, 33] </ref> have also been developed. Since the number of topological sortings is a decreasing function of the number of relations in the par Page 3 tial order, it is practical to generate all the linear exten-sions and search for a particular one.
Reference: [34] <author> E. Welzl, </author> <title> "Constructing the visibility graph for n-line segments in O(n 2 ) time," </title> <journal> Information Processing Letters, </journal> <volume> vol. 20, </volume> <pages> pp. 167-171, </pages> <year> 1990. </year>
Reference-contexts: The last condition can be determined by examining the blocking graph of the layer sequence <ref> [34, 35] </ref>. As a first step in the extraction, all layers are converted to depositions. The above rules define partial order relations between the order of the depositions and the patterning and definition steps.
Reference: [35] <author> S. Foldes, I. Rival, and J. Urrutia, </author> <title> "Light sources, obstructions and spherical orders," </title> <journal> Discrete Mathematics, </journal> <volume> vol. 102, </volume> <pages> pp. 13-23, </pages> <year> 1992. </year>
Reference-contexts: The last condition can be determined by examining the blocking graph of the layer sequence <ref> [34, 35] </ref>. As a first step in the extraction, all layers are converted to depositions. The above rules define partial order relations between the order of the depositions and the patterning and definition steps.
Reference: [36] <author> M. D. Atkinson and H. W. Chang, </author> <title> "Computing the number of mergings with constraints," </title> <journal> Information Processing Letters, </journal> <volume> vol. 24, </volume> <pages> pp. 289-292, </pages> <year> 1987. </year>
Reference-contexts: For each deposition sequence, all linear extensions which include deposition, patterning, and definition are generated using the same sequencing algorithm used for the polygons. Since the depositions order is fixed by the layer order, this procedure is equivalent to merging of two ordered sets <ref> [36] </ref>. Because of visibility constraints, some of the flows generated by this procedure are not feasible. In the present implementation, invalid flows are discarded by a stack filter. The stack filter uses the fact that it is not possible to etch an underlying layer unless it is visible.
Reference: [37] <author> E. L. Lawler, </author> <title> "Sequencing jobs to minimize total weighted completion time subject to precedence constraints," </title> <journal> Ann. Discr. Math., </journal> <volume> vol. 2, </volume> <pages> pp. 75-90, </pages> <year> 1978. </year>
Reference-contexts: FLOW OPTIMIZATION The output of the synthesis algorithm is the design space of feasible solutions from which an optimal process flow can be selected. The optimization algorithm selects one of the flows that minimizes a defined cost function. This problem is similar to precedence constrained scheduling <ref> [37, 38, 39, 40] </ref>. The nature of the optimal solution is strongly dependent on the cost function. Currently, the flow optimization algorithm uses a three-step cost function determination that maximizes the process yield. In the Page 4 first step, the algorithm discards flows which have in-compatible materials.
Reference: [38] <author> L. S. aand K. R. Baker, </author> <title> "Dynamic programming solution of sequencing problems with precedence constraints," </title> <journal> Operations Research, </journal> <volume> vol. 26, </volume> <pages> pp. 444-449, </pages> <year> 1978. </year>
Reference-contexts: FLOW OPTIMIZATION The output of the synthesis algorithm is the design space of feasible solutions from which an optimal process flow can be selected. The optimization algorithm selects one of the flows that minimizes a defined cost function. This problem is similar to precedence constrained scheduling <ref> [37, 38, 39, 40] </ref>. The nature of the optimal solution is strongly dependent on the cost function. Currently, the flow optimization algorithm uses a three-step cost function determination that maximizes the process yield. In the Page 4 first step, the algorithm discards flows which have in-compatible materials.
Reference: [39] <author> K. D. Glazebrook and J. C. Gittins, </author> <title> "On single-machine scheduling with precedence relations and linear or discounted costs," </title> <journal> Operations Research, </journal> <volume> vol. 29, </volume> <pages> pp. 161-173, </pages> <month> Jan </month> <year> 1981. </year>
Reference-contexts: FLOW OPTIMIZATION The output of the synthesis algorithm is the design space of feasible solutions from which an optimal process flow can be selected. The optimization algorithm selects one of the flows that minimizes a defined cost function. This problem is similar to precedence constrained scheduling <ref> [37, 38, 39, 40] </ref>. The nature of the optimal solution is strongly dependent on the cost function. Currently, the flow optimization algorithm uses a three-step cost function determination that maximizes the process yield. In the Page 4 first step, the algorithm discards flows which have in-compatible materials.
Reference: [40] <author> G. </author> <title> Steiner, "On the complexity of dynamic programming for sequencing problems with precedence constraints," </title> <journal> Ann. Operations Research, </journal> <volume> vol. 26, </volume> <pages> pp. 103-123, </pages> <year> 1990. </year> <pages> Page 7 </pages>
Reference-contexts: FLOW OPTIMIZATION The output of the synthesis algorithm is the design space of feasible solutions from which an optimal process flow can be selected. The optimization algorithm selects one of the flows that minimizes a defined cost function. This problem is similar to precedence constrained scheduling <ref> [37, 38, 39, 40] </ref>. The nature of the optimal solution is strongly dependent on the cost function. Currently, the flow optimization algorithm uses a three-step cost function determination that maximizes the process yield. In the Page 4 first step, the algorithm discards flows which have in-compatible materials.
References-found: 40

