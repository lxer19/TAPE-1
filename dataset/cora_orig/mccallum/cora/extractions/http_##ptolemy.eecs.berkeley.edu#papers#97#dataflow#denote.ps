URL: http://ptolemy.eecs.berkeley.edu/papers/97/dataflow/denote.ps
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/dataflow/
Root-URL: 
Title: A DENOTATIONAL SEMANTICS FOR DATAFLOW WITH FIRING  
Phone: 94720  
Author: Edward A. Lee 
Note: Abstract  
Date: January 15, 1997  
Address: BERKELEY, CALIFORNIA 94720  Berkeley, CA  Berkeley, CA, USA 94720.  
Affiliation: DEPARTMENT OF ELECTRICAL ENGINEERING AND COMPUTER SCIENCE UNIVERSITY OF CALIFORNIA  Electronics Research Laboratory,  EECS, University of California,  
Pubnum: Technical Memorandum UCB/ERL M97/3,  
Abstract: Formal semantics for the dataow model of computation have centered around the version of data-ow known as Kahn process networks. These process networks, however, fail to capture an essential principle of dataow, proposed by Dennis and used in almost all practical implementations of data-ow, that of an actor firing. An actor firing is an indivisible quantum of computation. A set of firing rules give preconditions for a firing, and the firing consumes tokens from the input streams and produces tokens on the output streams. These notions are missing from Kahns model, and therefore have not been thoroughly studied in a formal setting. This paper bridges the gap, showing that sequences of firings define a continuous Kahn process as the least fixed point of an appropriately constructed functional. The firing rules are sets of prefixes with certain technical conditions to ensure determinacy. These conditions result in firing rules that are more general than the blocking reads of the Kahn-Mac-Queen implementation of Kahn process networks, and lead to a compositional dataow model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky, S. J. Gay, and R. Nagarajan, </author> <title> Interaction Categories and the Foundations of Typed Concurrent Programming, In: Deductive Program Design: </title> <booktitle> Proceedings of the 1994 Marktober dorf International Summer School, </booktitle> <editor> (M. Broy, ed.), </editor> <booktitle> NATO ASI Series F, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Lee : , : , : , and : . An alternative notation that might be more familiar to some readers would write , the tensor products in Abramskys interaction categories <ref> [1] </ref>. It is straightforward to show that is continuous over the CPO of functions. tity function. In this case, we can write , where : , : , and : . Alternatively, we can write this using the tensor product notation, , where : is the identity function. .
Reference: [2] <author> Arvind, L. Bic, T. Ungerer, </author> <title> Evolution of Data-Flow Computers, in Advanced Topics in Data Flow Computing, </title> <editor> ed. J.-L. Gaudiot and L. Bic, </editor> <booktitle> Prentice-Hall, 1991. F S S fi 1 0 0 0 0 , , ,[ ] 24 of 24 Edward A. Lee </booktitle>
Reference-contexts: This omission is problematic because although Kahn process networks in their general form have not found widespread use, Dennis dataow has, experimentally in computer architecture <ref> [2] </ref> and in production in signal processing software (see [10] and the references therein). This paper fills in this gap, showing that methods pioneered by Kahn extend naturally to Dennis dataow, embracing the notion of firing.
Reference: [3] <author> A. Benveniste, P. Caspi, P. Le Guernic, N. Halbwachs, </author> <title> Data-ow Synchronous Languages, </title> <editor> in J. W. de Bakker W.-P. de Roever, and G. Rozenberg, eds., </editor> <booktitle> A Decade of Concurrency Reections and Perspectives, Lecture Notes in Computer Science no. </booktitle> <volume> 803, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: 1. Introduction Three distinct variants of the dataow model of computation have emerged in the literature, Kahn process networks [8], Dennis dataow [7], and dataow synchronous languages <ref> [3] </ref>. The first two are closely related, while the third is quite different. This paper deals only with the first two, which have one key important difference. In Dennis dataow, a process consists of a sequence of atomic firings of actors.
Reference: [4] <author> G. Berry, </author> <title> Bottom-Up Computation of Recursive Programs, </title> <journal> Revue Franaise dAutomatique, Informatique et Recherche Oprationnelle, </journal> <volume> vol. 10, no. 3, </volume> <pages> pp. 47-82, </pages> <month> March, </month> <year> 1976. </year>
Reference-contexts: Otherwise, no token is consumed from the second input. The third corresponds to an actor that never consumes a token from the second input. The last corresponds to the famous Gustave function <ref> [4] </ref>. It is a particularly interesting set of firing rules because it cannot be implemented with the blocking reads of the Kahn-MacQueen implementation of Kahn process networks [9].
Reference: [5] <author> G. Birkhoff and S. MacLane, </author> <title> A survey of modern algebra, 4th ed., </title> <publisher> Macmillan, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: The poset with the prefix order is a CPO. These definitions are easy to generalize to , the set of -tuples of sequences. For and , if each corresponding element is a prefix, i.e. for each , where . Following Birkhoff and Mac Lane <ref> [5] </ref>, we define to be a set with a single element. With this definition, if is a CPO, so is for any . The tuple of empty signals is denoted , and is a prefix of every other tuple of signals of the dimension.
Reference: [6] <author> B. A. Davey and H. A. Priestly, </author> <title> Introduction to Lattices and Order, </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: Of course, we can define a related irreexive relation, denoted , where if and . A set S with an ordering relationship is called an ordered set. If the ordering relationship is partial (there exist such that neither nor , then S is called a partially-ordered set or poset <ref> [6] </ref>. Below, we use the symbol to denote the set of natural numbers, , the symbol to denote , and the symbol to denote . The ordered set is with the usual numeric ordering relation. A particularly useful partial ordering relation is called the prefix order. <p> This interpretation is the least-fixed-point semantics. A well-known fixed point theorem states that a continuous function : in a CPO has a least fixed point , (see <ref> [6] </ref>, page 89). By least fixed point we mean that for any such that , . Moreover, the theorem gives us a constructive way to find the least fixed point. Putting it into our context, suppose we have a continuous function : . <p> Since is a CPO, this chain has a LUB. The fixed-point theorem tells us that this LUB is the least fixed point of . This theorem is very similar to the so-called Knaster-Tarski fixed point theorem, which applies to complete lattices rather than CPOs <ref> [6] </ref>. For this reason, this approach to semantics is sometimes called Tarskian. The application of this theorem to semantics was pioneered by Scott [12] and Kahn [8]. Note that the constructive technique given by (6) might be a reasonable implementation of Kahn process networks. <p> Another fixed-point theorem deals with monotonic processes that are not necessarily continuous. This theorem states that a monotonic function on a CPO has a unique least fixed point, but gives no constructive way to find the least fixed point (see <ref> [6] </ref>, page 96). Fortunately, this lack of constructive solution is not a problem in practice since practical monotonic processes are invariably continuous, at least in the context of Kahn process networks. 2.5 PRACTICAL OPERATIONAL SEMANTICS SCHEDULING There are serious practical problems with choosing (6) as the operational semantics. <p> Lee 11 of 24 Following Davey and Priestley <ref> [6] </ref>, let denote the set of continuous functions mapping into ordered by the same pointwise prefix order. Clearly, . Moreover, is itself a CPO ([6], theorem 3.17), so it is called a sub-CPO of . <p> Then for any two functions : . Again, if , then (15) holds. Thus, (15) holds for any and such that , implying that is monotonic. Since the functional given in (14) is a monotonic function over a CPO, it has a least fixed point such that <ref> [6] </ref>. This least fixed point satisfies (13), so we take it to be the semantics of the dataow process. The existence of a least fixed point is reassuring, but we can go a step further and give a constructive procedure for finding that least fixed point. <p> In this case, = = = ( ( F))(s). (18) Thus, in both cases, ( F ) = ( F ), so is continuous. Since is continuous, not only does it have a least fixed point, but there is a constructive procedure for finding that least fixed point <ref> [6] </ref>. We start with the bottom of the poset, which in this case is the bottom function : that always returns , an -tuple of empty sequences. Let , , , etc. This forms a chain, and the LUB of this chain is the least fixed point of .
Reference: [7] <author> J. B. Dennis, </author> <title> First Version Data Flow Procedure Language, </title> <note> Technical Memo MAC TM61, </note> <month> May, </month> <year> 1975, </year> <institution> MIT Laboratory for Computer Science. </institution>
Reference-contexts: 1. Introduction Three distinct variants of the dataow model of computation have emerged in the literature, Kahn process networks [8], Dennis dataow <ref> [7] </ref>, and dataow synchronous languages [3]. The first two are closely related, while the third is quite different. This paper deals only with the first two, which have one key important difference. In Dennis dataow, a process consists of a sequence of atomic firings of actors.
Reference: [8] <author> G. Kahn, </author> <title> The Semantics of a Simple Language for Parallel Programming, </title> <booktitle> Proc. of the IFIP Congress 74, </booktitle> <publisher> North-Holland Publishing Co., </publisher> <year> 1974. </year>
Reference-contexts: 1. Introduction Three distinct variants of the dataow model of computation have emerged in the literature, Kahn process networks <ref> [8] </ref>, Dennis dataow [7], and dataow synchronous languages [3]. The first two are closely related, while the third is quite different. This paper deals only with the first two, which have one key important difference. In Dennis dataow, a process consists of a sequence of atomic firings of actors. <p> Feedback (a directed self-loop). F s 8 of 24 Edward A. Lee 2.4 LEAST FIXED POINT SEMANTICS There is an alternative interpretation due to Kahn <ref> [8] </ref> of a feedback composition that makes the example in figure 2 determinate. Under this interpretation, any composition of continuous processes is determinate. Moreover, this interpretation is consistent with execution policies typically used for such systems (their operational semantics), and hence is an entirely reasonable denotational semantics for the composition. <p> This theorem is very similar to the so-called Knaster-Tarski fixed point theorem, which applies to complete lattices rather than CPOs [6]. For this reason, this approach to semantics is sometimes called Tarskian. The application of this theorem to semantics was pioneered by Scott [12] and Kahn <ref> [8] </ref>. Note that the constructive technique given by (6) might be a reasonable implementation of Kahn process networks. Begin with all sequences empty, and start iteratively applying functions.
Reference: [9] <author> G. Kahn and D. B. MacQueen, </author> <title> Coroutines and Networks of Parallel Processes, Information Processing 77, </title> <editor> B. Gilchrist, editor, </editor> <publisher> North-Holland Publishing Co., </publisher> <year> 1977. </year>
Reference-contexts: For example, the composition in figure 1 (d) can be given by the functional : , where . More interestingly, such functionals make it possible to describe unbounded and data-dependent compositions of processes. A classic example, used by Kahn and MacQueen <ref> [9] </ref>, is the sieve of Era-tosthenese, which given the input sequence outputs the prime numbers. <p> The last corresponds to the famous Gustave function [4]. It is a particularly interesting set of firing rules because it cannot be implemented with the blocking reads of the Kahn-MacQueen implementation of Kahn process networks <ref> [9] </ref>. The following firing rules do not satisfy condition (4): . (23) Such would be the firing rules of the famous nondeterminate merge, a process that can consume a token on either input and copy it to its output.
Reference: [10] <author> E. A. Lee and T. M. Parks, </author> <title> Dataow Process Networks, </title> <booktitle> Proceedings of the IEEE, </booktitle> <month> May </month> <year> 1995. </year> <note> (http://ptolemy.eecs.berkeley.edu/papers/processNets) </note>
Reference-contexts: This paper deals only with the first two, which have one key important difference. In Dennis dataow, a process consists of a sequence of atomic firings of actors. Although Dennis dataow can be viewed as a special case of Kahn process networks <ref> [10] </ref>, the notion of firings has been absent from formal semantic models, which are most developed for Kahn process networks and dataow synchronous languages. <p> This omission is problematic because although Kahn process networks in their general form have not found widespread use, Dennis dataow has, experimentally in computer architecture [2] and in production in signal processing software (see <ref> [10] </ref> and the references therein). This paper fills in this gap, showing that methods pioneered by Kahn extend naturally to Dennis dataow, embracing the notion of firing. This is done by establishing the relationship between a firing function and the Kahn process made up of a sequence of such firings.
Reference: [11] <author> T. M. Parks, </author> <title> Bounded Scheduling of Process Networks, </title> <type> Technical Report UCB/ERL-95-105. PhD Dissertation. </type> <institution> EECS Department, University of California. Berkeley, </institution> <address> CA 94720, </address> <month> December </month> <year> 1995. </year> <note> (http://ptolemy.eecs.berkeley.edu/papers/parksThesis) </note>
Reference-contexts: In practice, we need to partially compute the functions, carefully controlling the length of the sequences. Sometimes it is possible to store only finite windows into potentially infinite sequences and execute a process network in bounded memory. For a complete and up-to-date exposition on these scheduling issues, see Parks <ref> [11] </ref>. 2.6 HIGHER-ORDER FUNCTIONS Using the fact that compositions like those in figure 1 preserve continuity, and that feedback as in figure 2 is determinate under a least-fixed-point semantics, we can conclude that arbitrary finite com s l F I= 0 1 10 of 24 Edward A. <p> In most practical scenarios, it is preferable to avoid producing them if they will never be consumed, despite the fact that this violates the denotational semantics, which state that the output of actor A is an infinite sequence. This problem is solved by Parks <ref> [11] </ref>, who shows that the obvious solution for the example in figure 5, demand-driven execution, does not solve the problem in general. 4.
Reference: [12] <author> D. Scott, </author> <title> Outline of a mathematical theory of computation, </title> <booktitle> Proc. of the 4th annual Princeton conf. on Information sciences and systems, </booktitle> <year> 1970, </year> <pages> 169-176. </pages>
Reference-contexts: This theorem is very similar to the so-called Knaster-Tarski fixed point theorem, which applies to complete lattices rather than CPOs [6]. For this reason, this approach to semantics is sometimes called Tarskian. The application of this theorem to semantics was pioneered by Scott <ref> [12] </ref> and Kahn [8]. Note that the constructive technique given by (6) might be a reasonable implementation of Kahn process networks. Begin with all sequences empty, and start iteratively applying functions.
Reference: [13] <author> J. E. Stoy, </author> <title> Denotational Semantics: The Scott-Strachey Approach to Programming Language The ory, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: A practical consequence of this analysis is a formal characterization of firing rules and firing functions that preserve determinacy. The semantics given here of dataow with firing (Dennis dataow) is denotational, in the sense of Scott and Strachey <ref> [13] </ref>, rather than operational, the usual semantics given. The denotational semantics is shown to be equivalent to a usual operational semantics, thus establishing full abstraction. 2.
Reference: [14] <author> G. Winskel, </author> <title> The Formal Semantics of Programming Languages, </title> <publisher> the MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1993. </year>
Reference-contexts: Lee 9 of 24 we have full abstraction. For a complete treatment of full abstraction, see Winskel <ref> [14] </ref>. Under this least-fixed-point semantics, the value of in figure 2 is , the empty signal, when . Under this semantics, this is the only sequence that satisfies the composite process, so the composite process is determinate.
References-found: 14

