URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/csdm.ps
Refering-URL: http://www.csc.ncsu.edu/eos/users/m/mfms/www/publications.html
Root-URL: http://www.csc.ncsu.edu
Title: GDR: A VISUALIZATION TOOL FOR GRAPH ALGORITHMS  
Author: MATTHIAS STALLMANN RANCE CLEAVELAND AND PRASHANT HEBBAR 
Abstract: This paper describes GDR, a tool for editing graphs and animating graph algorithms. The design of GDR emphasizes simplicity and the ability to interact with other tools. GDR has been used to implement classroom animations of graph algorithms and finite automata, and as a research tool for prototyping algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Abello, S. Sudarsky, J. Waller, and T. Veatch. </author> <title> AGE: An animated graph environment. </title> <booktitle> In Proc. DIMACS Workshop on Computational Support for Discrete Mathematics. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: However, GraphView was developed on the NeXT machine, and was thus not compatible with our hardware environment. This volume attests to the variety of graph editors/graph algorithm animators now available <ref> [1, 9, 10] </ref>.
Reference: [2] <author> B. Birgisson and G. E. Shannon. GraphView: </author> <title> An extensible interactive platform for manipulating and displaying graphs. </title> <type> Technical Report 295, </type> <institution> Computer Science Department, Indiana University, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: The development of GDR was undertaken because we felt that, among the available tools that had come to our attention (in Fall, 1989), only GraphView, developed by Birgisson and Shannon <ref> [2] </ref>, had the desired functionality. However, GraphView was developed on the NeXT machine, and was thus not compatible with our hardware environment. This volume attests to the variety of graph editors/graph algorithm animators now available [1, 9, 10].
Reference: [3] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: A semantics-based tool for the verification of finite-state systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: In contrast with other graphical design tools [11, 13], vtview provides a true abstraction and modularization mechanism while permitting bottom-up as well as top-down system design. As vtview is intended to be be interfaced with other tools (such as the Concurrency Workbench <ref> [3] </ref>) for analyzing and verifying concurrent systems, its design follows the same object-oriented design strategy as GDR. This ensures that programmers desiring to build systems that interface with vtview need not know the specifics of the data structures used to represent networks. vtview is also highly portable.
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Directed depth-first search. Our animation of depth-first search is based directly on the description of Cormen et al. <ref> [4] </ref> Unvisited vertices are white, vertices on the stack are "gray" (white with exposed label), and vertices whose visit is completed are black. Vertex labels show two numbers, the time stamps of the beginning and end of the visit (corresponding to preorder and postorder numbering).
Reference: [5] <author> G. Di Battista, P. Eades, and R. Tamassia. </author> <title> Algorithms for drawing graphs: An annotated bibliography. </title> <note> Available by anonymous ftp from wilma.cs.brown.edu: files /pub/gdbiblio.tex.Z and /pub/gdbiblio.ps.Z, </note> <month> March </month> <year> 1993. </year>
Reference-contexts: Tools that create aesthetically pleasing drawings from logical descriptions of graphs (see Di Battista et al. <ref> [5] </ref> for a survey) could interact with GDR via the GDR file mechanism described in the next subsection. 4.3. GDR files. GDR communicates with other programs via a simple ASCII file format that records all attributes of a graph.
Reference: [6] <author> J. Ebert. </author> <title> A versatile data structure for edge-oriented graph algorithms. </title> <journal> Communications of the ACM, </journal> <volume> 30(6):513 - 519, </volume> <year> 1987. </year>
Reference-contexts: Internal access to the graph occurs when the animation (the program compiled and linked with GDR) is executed via the RUN FILE menu command. The paradigm for accessing the graph is edge oriented <ref> [6] </ref>, meaning that each vertex has access to a list of its incident edges (and multiple edges and loops are allowed). GDR supplies definitions of vertex and edge types as well as procedures and macros for accessing various attributes. Routines that modify display attributes are the key to successful animations.
Reference: [7] <author> J. E. Hopcroft. </author> <title> An n log n algorithm for minimizing the states in a finite automaton. </title> <editor> In Z. Kohavi, editor, </editor> <booktitle> The Theory of Machines and Computations, </booktitle> <pages> pages 189-196. </pages> <publisher> Academic Press, </publisher> <year> 1971. </year>
Reference-contexts: DFA minimization. As an example of a more complicated animation (complicated only because the algorithm is non-trivial), the first author implemented a variant of the O (n log n) DFA minimization algorithm <ref> [7] </ref>. Implementation took about 12 hours total time and was greatly speeded up by the use of GDR as a debugging tool. The DFA minimization animation first prompts the user to either draw a DFA or read one from a file (pausing until the user signals completion).
Reference: [8] <author> B. W. Kernighan and P. J. Plauger. </author> <title> Software Tools. </title> <publisher> Addison-Wesley, </publisher> <year> 1976. </year>
Reference-contexts: Throughout this overview we have emphasized GDR's properties as a tool rather than a system. The overall vision we wish to articulate is analogous to that of the software tools for text processing developed by Kernighan and Plauger <ref> [8] </ref>. As a general-purpose text editor is central to any collection of text-processing tools, so the graph editing capabilities of GDR allow it to play an important role in the development of graph-processing tools.
Reference: [9] <author> M. S. Krishnamoorthy, A. Suess, M. Onghena, F. Oxaal, and T. Spencer. </author> <title> Improvements to GraphPack: A system to manipulate graphs and digraphs. </title> <booktitle> In Proc. DIMACS Workshop on Computational Support for Discrete Mathematics. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: However, GraphView was developed on the NeXT machine, and was thus not compatible with our hardware environment. This volume attests to the variety of graph editors/graph algorithm animators now available <ref> [1, 9, 10] </ref>.
Reference: [10] <author> V. J. Leung, M. B. Dillencourt, and A. L. Bliss. GraphTool: </author> <title> A tool for interactive design and manipulation of graphs and graph algorithms. </title> <booktitle> In Proc. DIMACS Workshop on Computational Support for Discrete Mathematics. </booktitle> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: However, GraphView was developed on the NeXT machine, and was thus not compatible with our hardware environment. This volume attests to the variety of graph editors/graph algorithm animators now available <ref> [1, 9, 10] </ref>.
Reference: [11] <author> J. Malhotra, S.A. Smolka, A. Giacalone, and R. Shapiro. Winston: </author> <title> A tool for hierarchical design and simulation of concurrent systems. </title> <booktitle> In Proceedings of the Workshop on Specification and Verification of Concurrent Systems, Stirling, </booktitle> <address> Scotland, </address> <year> 1988. </year>
Reference-contexts: Vtview. One spinoff tool based on GDR is vtview [15], a graphical editor that supports the modular design and analysis of concurrent systems such as communications protocols. The tool allows users to define hierarchically organized networks of finite-state machines. In contrast with other graphical design tools <ref> [11, 13] </ref>, vtview provides a true abstraction and modularization mechanism while permitting bottom-up as well as top-down system design.
Reference: [12] <author> J. C. Martin. </author> <title> Introduction to Languages and the Theory of Computation. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1991. </year>
Reference-contexts: At the end, the algorithm chooses a representative state from each class and redraws the automaton with only the representative states shown. Figures 3 and 4 show the animation for an example taken from the Martin text <ref> [12, p. 127] </ref>. In Figure 3, class 0 is about to be split into two classes.
Reference: [13] <author> V. Roy and R. de Simone. AUTO/Autograph. </author> <booktitle> In Computer-Aided Verification '90, </booktitle> <pages> pages 477-491, </pages> <year> 1990. </year>
Reference-contexts: Vtview. One spinoff tool based on GDR is vtview [15], a graphical editor that supports the modular design and analysis of concurrent systems such as communications protocols. The tool allows users to define hierarchically organized networks of finite-state machines. In contrast with other graphical design tools <ref> [11, 13] </ref>, vtview provides a true abstraction and modularization mechanism while permitting bottom-up as well as top-down system design.
Reference: [14] <author> M. Stallmann, R. Cleaveland, and P. Hebbar. </author> <title> GDR: A visualization tool for graph algorithms. </title> <type> Technical Report 91-27, </type> <institution> Department of Computer Science, North Carolina State University, </institution> <address> Raleigh NC 27695-8206, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: A detailed description of GDR can be found in our technical report <ref> [14] </ref>. Other information and source code can be obtained by contacting the first author (matt@euler.csc.ncsu.edu or Matt Stallmann@ncsu.edu).
Reference: [15] <author> Vikas Trehan. VTVIEW: </author> <title> A graphical editor for hierarchical networks of finite-state processes. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science, North Carolina State University, 1992. Department of Computer Science, North Carolina State University, Raleigh, North Carolina 27695-8206 E-mail address: </institution> <address> matt@euler.csc.ncsu.edu or Matt Stallmann@ncsu.edu 12 </address>
Reference-contexts: Others were conceived as the development of animations using GDR led us to envision new possibilities. 4.1. Vtview. One spinoff tool based on GDR is vtview <ref> [15] </ref>, a graphical editor that supports the modular design and analysis of concurrent systems such as communications protocols. The tool allows users to define hierarchically organized networks of finite-state machines.
References-found: 15

