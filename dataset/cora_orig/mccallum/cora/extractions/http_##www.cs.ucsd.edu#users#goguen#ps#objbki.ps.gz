URL: http://www.cs.ucsd.edu/users/goguen/ps/objbki.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/new.html
Root-URL: http://www.cs.ucsd.edu
Title: Software Engineering with OBJ: algebraic specification in practice  
Author: Edited by Joseph Goguen and Grant Malcolm 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> John D. Barrow. </author> <title> Pi in the Sky: counting, thinking and being. </title> <publisher> Penguin, </publisher> <year> 1992. </year>
Reference-contexts: Although some elements of this paradigm are already prefigured in the use of foops in toor [25], an object oriented environment for requirements tracing, much exciting work remains to be done. 2 These quotations from Leibniz are taken from a fascinating discussion of mathematical formalism in Barrow <ref> [1] </ref>. 4 The dismaying pattern of ongoing, and indeed escalating, software failure described earlier suggests that the real software crisis lies not so much in producing software as in producing software appropriate to the situation where it will actually be used.
Reference: [2] <author> Hurbert L. Dreyfus. </author> <title> What Computers Still Can't Do. </title> <publisher> MIT, </publisher> <year> 1992. </year>
Reference-contexts: Leibniz was not concerned merely with a language for formal reasoning in mathematics. Anticipating by more than three hundred years the kind of predictions that earned Artificial Intelligence a reputation for hyperbole <ref> [2] </ref>, Leibniz wrote more than three hundred years ago: I believe that a number of chosen men can complete the task within five years; within two years they will exhibit the common doctrines of life, that is, metaphysics and morals, in an irrefutable calculus 2 .
Reference: [3] <author> Derek Coleman et al. </author> <title> The Axis papers. </title> <type> Technical report, </type> <institution> Hewlett-Packard Labs, Bristol, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: It was later commercialized, renamed OBJ-Ex, and supported by Gerrard Software, a small UK firm; OBJ-Ex appears to be still in use withing the UK government. Meanwhile, Coleman and Gallimore moved from UMIST to Hewlett-Packard at Bristol, and developed another variant of OBJ, called Axis <ref> [3] </ref>, while the UMIST project came under the direction of Colin Walter. An OBJ users group was formed in the UK, and held a number of meetings with participation by many of the authors in this book. Two post-OBJ3 developments seem especially noteworthy.
Reference: [4] <author> Kokichi Futatsugi and Ataru Nakagawa. </author> <title> An overview of Cafe specification environment. </title> <booktitle> In Proceedings, </booktitle> <institution> ICFEM'97. University of Hiroshima, </institution> <year> 1997. </year>
Reference-contexts: As this is written, Maude is about to be released; it has a very efficient implementation and a number of interesting new features, including a logical foundation in order sorted membership logic, which is a significant extension of order sorted equational logic. The second system, called CafeOBJ <ref> [4] </ref>, is being implemented at JAIST (Japan Advanced Institute of Science and Technology) in Horuriku, Japan, under the direction of Professor Kokichi Futatsugi. This system includes features to handle both rewriting logic (as in Maude) and hidden sorted algebra [12], which provides powerful proof techniques for behavioral specification and verification.
Reference: [5] <author> W. Wyat Gibbs. </author> <title> Software's chronic crisis. </title> <publisher> Scientific American, </publisher> <pages> pages 72-81, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: sports data to the media at the 1996 Olympic Games in Atlanta, the self-destruction of the European satellite launch Ariane 5, costing $2 billion, the failure of United Airlines baggage delivery system at Denver International Airport, which delayed its opening by one and a half years costing about $15 million <ref> [5] </ref>, and cancellation of the $2 million Taurus system, which was supposed to bring the London Stock Exchange into the 20th century and instead led to a diminution of its power. What all these examples have in common is that they were too big to hide.
Reference: [6] <author> Joseph Goguen. </author> <title> Semantics of computation. </title> <editor> In Ernest Manes, editor, </editor> <booktitle> Proceedings, First International Symposium on Category Theory Applied to Computation and Control, </booktitle> <pages> pages 151-163. </pages> <publisher> Springer, </publisher> <address> 1975. San Fransisco, </address> <month> February </month> <year> 1974. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 25. </volume>
Reference-contexts: This insight made it possible to develop a mathematical theory of abstract data types as initial algebras [15, 16], as well as the somewhat earlier general theory of abstract syntax and compositional semantics <ref> [6] </ref>. The attempt to develop the computational side of abstract data types led to considering term rewriting theory, and indeed an early draft of [16] made extensive use of these ideas.
Reference: [7] <author> Joseph Goguen. </author> <title> Memories of ADJ. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 36 </volume> <pages> 96-102, </pages> <month> October </month> <year> 1989. </year> <title> Guest column in the `Algebraic Specification Column.' </title> <booktitle> Also in Current Trends in Theoretical Computer Science: Essays and Tutorials, World Scientific, </booktitle> <year> 1993, </year> <pages> pages 76-81. </pages>
Reference-contexts: However, term rewriting theory was still in a primitive state at that time, and a more abstract viewpoint was found expedient. Nevertheless, this early foray into term rewriting was an essential precondition for OBJ. (For more historical information on ADJ, see <ref> [7] </ref>.) This book grew out of a project to implement a new version of OBJ in the UK, and use it in a number of industrial experiments.
Reference: [8] <author> Joseph Goguen. </author> <title> Requirements engineering as the reconciliation of social and technical issues. </title> <editor> In Marina Jirotka and Joseph Goguen, editors, </editor> <booktitle> Requirements Engineering: Social and Technical Issues, </booktitle> <pages> pages 165-200. </pages> <publisher> Academic, </publisher> <year> 1994. </year>
Reference-contexts: To design and build effective software systems, the software engineer must master both the technical and the social aspects of the relevant information <ref> [8, 10] </ref>. Large complex software systems fail much more often than seems to be generally recognized. Perhaps the most common case is that a project is simply cancelled before completion; this may be due to time and/or cost overruns or other management difficulties that seem insurmountable. <p> At present, most research is directed at the initial stages of requirements analysis and capture, but recent work is also directed at investigating the relationships between the situated and formalistic aspects of software, such as the theory of situated abstract data types in <ref> [8] </ref>.
Reference: [9] <author> Joseph Goguen. </author> <title> Parameterized programming and software architecture. </title> <booktitle> In Proceedings, Reuse'96, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society, </publisher> <month> April </month> <year> 1996. </year>
Reference-contexts: Chapter 1 explains how OBJ's module features support what is called parameterized programming, which is particularly appropriate for large-grain specification, and provides facilities for prototyping at the system design level. It also provides support for reuse of code and designs <ref> [9] </ref>. Current research is directed to unifying the functional, logic, constraint and object paradigms in a way that takes better account of the situatedness of software [12].
Reference: [10] <author> Joseph Goguen and Luqi. </author> <title> Formal methods and social context in software development. </title> <editor> In Peter Mosses, Mogens Nielsen, and Michael Schwartzbach, editors, </editor> <booktitle> Proceedings, Sixth International Joint Conference on Theory and Practice of Software Development (TAPSOFT 95), </booktitle> <pages> pages 62-81. </pages> <publisher> Springer, </publisher> <year> 1995. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 915. </volume> <pages> 6 </pages>
Reference-contexts: To design and build effective software systems, the software engineer must master both the technical and the social aspects of the relevant information <ref> [8, 10] </ref>. Large complex software systems fail much more often than seems to be generally recognized. Perhaps the most common case is that a project is simply cancelled before completion; this may be due to time and/or cost overruns or other management difficulties that seem insurmountable.
Reference: [11] <author> Joseph Goguen and Grant Malcolm. </author> <title> Algebraic Semantics of Imperative Programs. </title> <publisher> MIT, </publisher> <year> 1996. </year>
Reference-contexts: In the same way that equational reasoning can be used to prove properties of numbers or sets, this allows designers to prove (using OBJ itself!) properties of their specifications. Many examples appear in our book, Algebraic Semantics of Imperative Programs <ref> [11] </ref>, along with the relevant mathematical theory, we hope in a relatively digestible form.
Reference: [12] <author> Joseph Goguen and Grant Malcolm. </author> <title> Extended abstract of a hidden agenda. </title> <editor> In James Albus, Alex Meystel, and Richard Quintero, editors, </editor> <booktitle> Proceedings, Conference on Intelligent Systems: A Semiotic Perspective, </booktitle> <pages> pages 159-167. </pages> <institution> National Inst. Standards and Technology, </institution> <address> 1996. Gaithersberg MD, </address> <month> October 20-23. </month>
Reference-contexts: The second system, called CafeOBJ [4], is being implemented at JAIST (Japan Advanced Institute of Science and Technology) in Horuriku, Japan, under the direction of Professor Kokichi Futatsugi. This system includes features to handle both rewriting logic (as in Maude) and hidden sorted algebra <ref> [12] </ref>, which provides powerful proof techniques for behavioral specification and verification. <p> It also provides support for reuse of code and designs [9]. Current research is directed to unifying the functional, logic, constraint and object paradigms in a way that takes better account of the situatedness of software <ref> [12] </ref>.
Reference: [13] <author> Joseph Goguen and Jose Meseguer. </author> <title> Eqlog: Equality, types, and generic modules for logic programming. </title> <editor> In Douglas DeGroot and Gary Lindstrom, editors, </editor> <booktitle> Logic Programming: Functions, Relations and Equations, </booktitle> <pages> pages 295-363. </pages> <publisher> Prentice Hall, </publisher> <year> 1986. </year> <title> An earlier version appears in Journal of Logic Programming, </title> <journal> Volume 1, </journal> <volume> Number 2, </volume> <pages> pages 179-210, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: The ensuing chapters show how this translates into practice. We also believe that the elegance of OBJ's declarative, algebraic approach makes it appropriate to many paradigms within software engineering. This approach has been extended to the logic paradigm in Eqlog <ref> [13] </ref>, and to the object paradigm in foops [14]. Chapter 1 explains how OBJ's module features support what is called parameterized programming, which is particularly appropriate for large-grain specification, and provides facilities for prototyping at the system design level. It also provides support for reuse of code and designs [9].
Reference: [14] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year> <journal> Preliminary version in SIGPLAN Notices, </journal> <volume> Volume 21, Number 10, </volume> <pages> pages 153-162, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: The ensuing chapters show how this translates into practice. We also believe that the elegance of OBJ's declarative, algebraic approach makes it appropriate to many paradigms within software engineering. This approach has been extended to the logic paradigm in Eqlog [13], and to the object paradigm in foops <ref> [14] </ref>. Chapter 1 explains how OBJ's module features support what is called parameterized programming, which is particularly appropriate for large-grain specification, and provides facilities for prototyping at the system design level. It also provides support for reuse of code and designs [9].
Reference: [15] <author> Joseph Goguen and James Thatcher. </author> <title> Initial algebra semantics. </title> <booktitle> In Proceedings, Fifteenth Symposium on Switching and Automata Theory, </booktitle> <pages> pages 63-77. </pages> <publisher> IEEE, </publisher> <year> 1974. </year>
Reference-contexts: Watson Research Center organized by Jim Thatcher was a great help, and the influence of Sanders Mac Lane was also important during this period. This insight made it possible to develop a mathematical theory of abstract data types as initial algebras <ref> [15, 16] </ref>, as well as the somewhat earlier general theory of abstract syntax and compositional semantics [6]. The attempt to develop the computational side of abstract data types led to considering term rewriting theory, and indeed an early draft of [16] made extensive use of these ideas.
Reference: [16] <author> Joseph Goguen, James Thatcher, and Eric Wagner. </author> <title> An initial algebra approach to the specification, correctness and implementation of abstract data types. </title> <editor> In Raymond Yeh, editor, </editor> <booktitle> Current Trends in Programming Methodology, IV, </booktitle> <pages> pages 80-149. </pages> <publisher> Prentice Hall, </publisher> <year> 1978. </year>
Reference-contexts: Watson Research Center organized by Jim Thatcher was a great help, and the influence of Sanders Mac Lane was also important during this period. This insight made it possible to develop a mathematical theory of abstract data types as initial algebras <ref> [15, 16] </ref>, as well as the somewhat earlier general theory of abstract syntax and compositional semantics [6]. The attempt to develop the computational side of abstract data types led to considering term rewriting theory, and indeed an early draft of [16] made extensive use of these ideas. <p> The attempt to develop the computational side of abstract data types led to considering term rewriting theory, and indeed an early draft of <ref> [16] </ref> made extensive use of these ideas. However, term rewriting theory was still in a primitive state at that time, and a more abstract viewpoint was found expedient.
Reference: [17] <author> Alasdair Gray. </author> <title> Unlikely Stories, Mostly. </title> <publisher> Penguin, </publisher> <year> 1984. </year>
Reference-contexts: Alasdair Gray's short story `The Crank that Turned the Revolution' <ref> [17] </ref> tells the cautionary tale of Vague McMenamy, a thoughtful and precocious child who would stand for long hours on the edge of the duck-pond wondering how to improve his Granny's ducks....
Reference: [18] <author> Lutz Hamel. </author> <title> Behavioural Verification and Implementation of an Optimizing Compiler for OBJ3. </title> <type> PhD thesis, </type> <institution> Oxford University Computing Lab, </institution> <year> 1996. </year>
Reference-contexts: The following chapters provide many more examples; a further example worth mentioning is the use of OBJ to specify and prove the correctness of an optimizing compiler <ref> [18] </ref>; this involves proving that one specification refines another, i.e., provides (at least) the same behavior. 1.4 OBJ has a Past and a Future Most of the relevant historical information can be found in Section 1.1 of Chapter 1 of this book.
Reference: [19] <author> Donald Knuth. </author> <title> The Art of Computer Programming, Volume 1: Fundamental Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1971. </year>
Reference-contexts: Perhaps the most important enabling event for OBJ was Goguen's gradual realization, during the period from 1968 to 1972, that Lawvere's characterization of the natural numbers as a certain initial algebra [20] could be extended to other data structures of interest to computer science; reading Knuth's compendium <ref> [19] </ref> in a seminar at the IBM T.J. Watson Research Center organized by Jim Thatcher was a great help, and the influence of Sanders Mac Lane was also important during this period.
Reference: [20] <author> F. William Lawvere. </author> <title> An elementary theory of the category of sets. </title> <booktitle> Proceedings, National Academy of Sciences, U.S.A., </booktitle> <volume> 52 </volume> <pages> 1506-1511, </pages> <year> 1964. </year>
Reference-contexts: Here we fill in some earlier and later developments, including some information about the origins of this book. Perhaps the most important enabling event for OBJ was Goguen's gradual realization, during the period from 1968 to 1972, that Lawvere's characterization of the natural numbers as a certain initial algebra <ref> [20] </ref> could be extended to other data structures of interest to computer science; reading Knuth's compendium [19] in a seminar at the IBM T.J. Watson Research Center organized by Jim Thatcher was a great help, and the influence of Sanders Mac Lane was also important during this period.
Reference: [21] <author> Grant Malcolm and Joseph Goguen. </author> <title> An executable course on the algebraic semantics of imperative programs. </title> <editor> In Michael Hinchey and C. Neville Dean, editors, </editor> <booktitle> Teaching and Learning Formal Methods, </booktitle> <pages> pages 161-179. </pages> <publisher> Academic, </publisher> <year> 1996. </year> <note> Chapter 10. </note>
Reference-contexts: Because of the clarity of its semantics, OBJ is also a useful educational tool, and it has been used at Oxford and other universities in courses on theorem proving and the semantics of imperative programs <ref> [21] </ref>.
Reference: [22] <author> Jose Meseguer. </author> <title> Conditional rewriting logic: Deduction, models and concurrency. </title> <editor> In Stephane Kaplan and Misuhiro Okada, editors, </editor> <booktitle> Conditional and Typed Rewriting Systems, </booktitle> <pages> pages 64-91. </pages> <publisher> Springer, </publisher> <year> 1991. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 516. </volume>
Reference-contexts: An OBJ users group was formed in the UK, and held a number of meetings with participation by many of the authors in this book. Two post-OBJ3 developments seem especially noteworthy. One is Maude [23], an extension of OBJ to rewriting logic <ref> [22] </ref>, which is particularly suited to specifying concurrent systems. This project is led by Dr. Jose Meseguer at SRI International in Menlo Park, California, where most of the original OBJ3 development was done, and indeed, Dr.
Reference: [23] <author> Jose Meseguer. </author> <title> A logical theory of concurrent objects and its realization in the Maude language. </title> <editor> In Gul Agha, Peter Wegner, and Aki Yonezawa, editors, </editor> <booktitle> Research Directions in Object-Based Concurrency. </booktitle> <publisher> MIT, </publisher> <year> 1993. </year> <note> Also Technical Report SRI-CSL-92-08, </note> <month> July </month> <year> 1992. </year>
Reference-contexts: An OBJ users group was formed in the UK, and held a number of meetings with participation by many of the authors in this book. Two post-OBJ3 developments seem especially noteworthy. One is Maude <ref> [23] </ref>, an extension of OBJ to rewriting logic [22], which is particularly suited to specifying concurrent systems. This project is led by Dr. Jose Meseguer at SRI International in Menlo Park, California, where most of the original OBJ3 development was done, and indeed, Dr.
Reference: [24] <author> Peter G. Neumann. </author> <title> Computer-Related Risks. </title> <publisher> ACM (Addison-Wesley), </publisher> <year> 1995. </year>
Reference-contexts: What all these examples have in common is that they were too big to hide. Much more information about computer system failures can be found in the Risks Forum run by Peter Neumann (see risks@csl.sri.com and <ref> [24] </ref>). Anyone who has worked in the software industry has seen numerous examples of projects that were over time, over cost, or failed to meet crucial requirements, and hence were cancelled, curtailed, diverted, replaced, or released anyway, with dire consequences.
Reference: [25] <author> Francisco Pinheiro and Joseph Goguen. </author> <title> An object-oriented tool for tracing requirements. </title> <journal> IEEE Software, </journal> <pages> pages 52-64, </pages> <month> March </month> <year> 1996. </year> <note> Special issue of papers from ICRE '96. 7 </note>
Reference-contexts: Current research is directed to unifying the functional, logic, constraint and object paradigms in a way that takes better account of the situatedness of software [12]. Although some elements of this paradigm are already prefigured in the use of foops in toor <ref> [25] </ref>, an object oriented environment for requirements tracing, much exciting work remains to be done. 2 These quotations from Leibniz are taken from a fascinating discussion of mathematical formalism in Barrow [1]. 4 The dismaying pattern of ongoing, and indeed escalating, software failure described earlier suggests that the real software crisis
References-found: 25

