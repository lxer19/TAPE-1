URL: http://www.cs.umn.edu/crisys/Publications/fse97.ps
Refering-URL: http://www.cs.umn.edu/crisys/pubs.htm
Root-URL: http://www.cs.umn.edu
Title: Reduction and Slicing of Hierarchical State Machines  
Author: Mats P.E. Heimdahl and Michael W. Whalen 
Keyword: TCAS II (Traffic alert and Collision Avoidance System II).  
Address: Minneapolis, MN 55455  
Affiliation: University of Minnesota, Institute of Technology Department of Computer Science, 4-192 EE/CS Bldg.  
Abstract: Formal specification languages are often criticized for being difficult to understand, difficult to use, and unacceptable by software practitioners. Notations based on state machines, such as, State-charts, Requirements State Machine Language (RSML), and SCR, are suitable for modeling of embedded systems and eliminate many of the main drawbacks of formal specification languages. Although a specification language can help eliminate accidental complexity, the inherent complexity of many of today's systems inevitably leads to large and complex specifications. Thus, there is a need for mechanisms to simplify a formal specification and present information to analysts and reviewers in digestible chunks. In this paper, we present a two tiered approach to slicing (or simplification) of hierarchical finite state machines. We allow an analyst to simplify a specification based on a scenario. The remaining behavior, called an interpretation of the specification, can then be sliced to extract the information effecting selected variables and transitions. To evaluate the effectiveness and utility of slicing in hierarchical state machines, we have implemented a prototype tool and applied our slicing approach to parts of a specification of a large avionics system called 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Chang and D.J. Richardson. </author> <title> Static and dynamic specification slicing. </title> <booktitle> In Proceedings of the Fourth Irvine Software Symposium, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Formal specifications provide a concise, mathematically well defined description that details the intended behavior of a system. Yet formal specifications often contain so much information that they overwhelm a reader and make the specifications less useful. Oda and Akari [14], and Chang and Richardson <ref> [1] </ref> have extended slicing to formal specifications expressed in Z. Their techniques were designed to help alleviate the readability problems in Z specifications. Both techniques are based on a traditional definition of slicing and calculates slices based on the use of a variable in a Z schema post-condition.
Reference: 2. <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <journal> Science of Com--puter Programming, </journal> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: Section 6 provides concluding remarks. 2 Requirements State Machine Language (RSML) RSML was developed as a requirements specification language for embedded systems. The language is based on hierarchical finite state machines and is similar to David Harel's Statecharts <ref> [2, 5] </ref>. For example, RSML supports parallelism, hierarchies, and guarded transitions which originated in Statecharts (Figure 1). One of the main design goals of RSML was readability and understandability by non computer professionals such as, in our case, pilots, air frame manufacturers, and FAA representatives.
Reference: 3. <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtull-Trauring, and M. Trakhtenbrot. Statemate: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> April </month> <year> 1990. </year>
Reference: 4. <author> D. Harel and A. Naamad. </author> <title> The STATEMATE semantics of Statecharts. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> vol-5(4):293-333, </volume> <month> October </month> <year> 1996. </year>
Reference: 5. <author> D. Harel and A. Pnueli. </author> <title> On the development of reactive systems. </title> <editor> In K.R. Apt, editor, </editor> <booktitle> Logics and Models of Concurrent Systems, </booktitle> <pages> pages 477-498. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Section 6 provides concluding remarks. 2 Requirements State Machine Language (RSML) RSML was developed as a requirements specification language for embedded systems. The language is based on hierarchical finite state machines and is similar to David Harel's Statecharts <ref> [2, 5] </ref>. For example, RSML supports parallelism, hierarchies, and guarded transitions which originated in Statecharts (Figure 1). One of the main design goals of RSML was readability and understandability by non computer professionals such as, in our case, pilots, air frame manufacturers, and FAA representatives.
Reference: 6. <author> M. P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and Consistency Analysis of State-Based Requirements. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 3-14, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The least disruptive vertical rate maneuver that will still achieve safe separation is selected. For a more complete description of TCAS II and how it was modeled using RSML the reader is referred to [13]. 4 Specification Slicing During our work with static analysis <ref> [6, 7] </ref> we identified questions regarding the behavior of TCAS II where some tool support to aid in answering the questions would have been helpful. The questions were seldom related to output variables.
Reference: 7. <author> M. P.E. Heimdahl and N.G. Leveson. </author> <title> Completeness and Consistency Analysis of State-Based Requirements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> TSE-22(6):363-377, </volume> <month> June </month> <year> 1996. </year>
Reference-contexts: Furthermore, we have developed a collection of automated analysis procedures that check an RSML specification for desirable properties such as completeness, consistency, and determinism <ref> [7] </ref> and we have explored the possibility of provably correct code generation from RSML specifications [11]. However, even if requirements specifications are readable, understandable, and can be shown to be complete and consistent, the sheer size and complexity of many systems make the specifications difficult to understand and review. <p> Thus, the next state relation F is a mapping C 7! C, where C (Conf ig fi V ). For a rigorous treatment of formal foundation of RSML the reader is referred to <ref> [7] </ref>. A detailed description of the graphical notation can be found in [13]. 3 Testbed Specification To evaluate the effectiveness of our approach and to better understand the effect of slicing on a large real world RSML specification, we applied our tool to the TCAS II RSML model. <p> The least disruptive vertical rate maneuver that will still achieve safe separation is selected. For a more complete description of TCAS II and how it was modeled using RSML the reader is referred to [13]. 4 Specification Slicing During our work with static analysis <ref> [6, 7] </ref> we identified questions regarding the behavior of TCAS II where some tool support to aid in answering the questions would have been helpful. The questions were seldom related to output variables. <p> Construction of Interpretations: As mentioned in Section 4, our slicing algorithms are based on a marking of the abstract syntax tree. In a previous investigation we developed an RSML parser as a part of an analysis environment for RSML <ref> [7] </ref>. This parser has been modified to allow us to mark the abstract syntax tree based on various slicing criteria. A reduction scenario is used to mark the infeasible columns in each and/or table. <p> However, extending the algorithm to handle the full range of predicates in the RSML syntax is not possible since the language allows both linear and non-linear arithmetic in predicate definitions. The interested reader is referred to <ref> [7] </ref> for a detailed discussion about how the expressive power of RSML effects static analysis. 4.2 Data Flow Slices To help answering the questions in Table 1, it is not enough to construct the interpretation of the specification under a reduction scenario.
Reference: 8. <author> C. L. Heitmeyer, , R.D. Jeffords, and B. L. Labaw. </author> <title> Consistency checking of SCR-style requirements specifications. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> vol-5(3):231-261, </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: For example, a table in an SCR specification typically spans multiple pages and table sizes of 14 pages or more are not uncommon <ref> [8] </ref>. In RSML, tables are used differently and the table sizes are kept much smaller so that tables always fit on one single page [13]. Nevertheless, a specification for a complex system will, due to inherent system complexity, inevitably grow large and through its size hinder readability. <p> The approach is general enough to apply to all languages based on state machines using guarded transitions. From our experiences in this investigation, we are convinced that specification slicing holds great potential in areas such as requirements development, requirements inspections, and visual requirements verification. Specification languages such as SCR <ref> [8] </ref> would benefit from the same simplification mechanisms and we strongly encourage tool developers to include such a mechanism in future versions of their tools.
Reference: 9. <author> C. L. Heitmeyer, B. L. Labaw, and D. Kiskis. </author> <title> Consistency checking of SCR-style requirements specifications. </title> <booktitle> In Proceedings of the International Symposium on Requirements Engineering, </booktitle> <month> March </month> <year> 1995. </year>
Reference: 10. <author> K. L. Heninger. </author> <title> Specifying software for complex systems: New techniques and their application. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 6(1) </volume> <pages> 2-13, </pages> <month> January </month> <year> 1980. </year>
Reference: 11. <author> D.J. Keenan and M.P.E. Heimdahl. </author> <title> Code generation from hierarchicl state machines. </title> <booktitle> In Proceedings of the International Symposium on Requirements Engineering, </booktitle> <year> 1997. </year>
Reference-contexts: Furthermore, we have developed a collection of automated analysis procedures that check an RSML specification for desirable properties such as completeness, consistency, and determinism [7] and we have explored the possibility of provably correct code generation from RSML specifications <ref> [11] </ref>. However, even if requirements specifications are readable, understandable, and can be shown to be complete and consistent, the sheer size and complexity of many systems make the specifications difficult to understand and review.
Reference: 12. <author> N. G. Leveson, M. P.E. Heimdahl, H. Hildreth, J. Reese, and R. Ortega. </author> <title> Experiences using Statecharts for a system requirements specification. </title> <booktitle> In Proceedings of the Sixth International Workshop on Software Specification and Design, </booktitle> <pages> pages 31-41, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction Formal specification languages are often criticized for being difficult to understand, difficult to use, and unacceptable by software practitioners. Notations based on state machines, such as, Statecharts [2-4], Requirements State Machine Language (RSML) <ref> [12, 13] </ref>, and SCR [8-10], are suitable for modeling of embedded systems and eliminate many of the main drawbacks of formal specification languages. State-based languages are based on familiar concepts, have intuitive syntax and semantics, and help in reducing the perceived complexity of a formal specification. <p> Nancy Leveson, developed a requirements specification language called the Requirements State Machine Language (RSML) suitable for the specification of safety-critical embedded control systems <ref> [12, 13] </ref>. To make RSML suitable as a requirements specification language usable by all stake-holders in a specification effort, the syntax and semantics of RSML were developed with readability, understandability, and ease of use in mind. <p> The usefulness of the language was demonstrated through the successful development of a requirements specification for a large commercial avionics system called TCAS II (Traffic alert and Collision Avoidance System II) <ref> [12, 13] </ref>. Furthermore, we have developed a collection of automated analysis procedures that check an RSML specification for desirable properties such as completeness, consistency, and determinism [7] and we have explored the possibility of provably correct code generation from RSML specifications [11].
Reference: 13. <author> N. G. Leveson, M. P.E. Heimdahl, H. Hildreth, and J. D. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(9) </volume> <pages> 694-707, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Formal specification languages are often criticized for being difficult to understand, difficult to use, and unacceptable by software practitioners. Notations based on state machines, such as, Statecharts [2-4], Requirements State Machine Language (RSML) <ref> [12, 13] </ref>, and SCR [8-10], are suitable for modeling of embedded systems and eliminate many of the main drawbacks of formal specification languages. State-based languages are based on familiar concepts, have intuitive syntax and semantics, and help in reducing the perceived complexity of a formal specification. <p> Nancy Leveson, developed a requirements specification language called the Requirements State Machine Language (RSML) suitable for the specification of safety-critical embedded control systems <ref> [12, 13] </ref>. To make RSML suitable as a requirements specification language usable by all stake-holders in a specification effort, the syntax and semantics of RSML were developed with readability, understandability, and ease of use in mind. <p> The usefulness of the language was demonstrated through the successful development of a requirements specification for a large commercial avionics system called TCAS II (Traffic alert and Collision Avoidance System II) <ref> [12, 13] </ref>. Furthermore, we have developed a collection of automated analysis procedures that check an RSML specification for desirable properties such as completeness, consistency, and determinism [7] and we have explored the possibility of provably correct code generation from RSML specifications [11]. <p> For example, a table in an SCR specification typically spans multiple pages and table sizes of 14 pages or more are not uncommon [8]. In RSML, tables are used differently and the table sizes are kept much smaller so that tables always fit on one single page <ref> [13] </ref>. Nevertheless, a specification for a complex system will, due to inherent system complexity, inevitably grow large and through its size hinder readability. <p> Thus, the next state relation F is a mapping C 7! C, where C (Conf ig fi V ). For a rigorous treatment of formal foundation of RSML the reader is referred to [7]. A detailed description of the graphical notation can be found in <ref> [13] </ref>. 3 Testbed Specification To evaluate the effectiveness of our approach and to better understand the effect of slicing on a large real world RSML specification, we applied our tool to the TCAS II RSML model. <p> The second step in selecting an RA is to select the strength of the advisory. The least disruptive vertical rate maneuver that will still achieve safe separation is selected. For a more complete description of TCAS II and how it was modeled using RSML the reader is referred to <ref> [13] </ref>. 4 Specification Slicing During our work with static analysis [6, 7] we identified questions regarding the behavior of TCAS II where some tool support to aid in answering the questions would have been helpful. The questions were seldom related to output variables.
Reference: 14. <author> T. Oda and K. Araki. </author> <title> Specification slicing in formal methods of software engineering. </title> <booktitle> In Proceedings of the Seventeenth International Computer Software and Applications Conference, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Formal specifications provide a concise, mathematically well defined description that details the intended behavior of a system. Yet formal specifications often contain so much information that they overwhelm a reader and make the specifications less useful. Oda and Akari <ref> [14] </ref>, and Chang and Richardson [1] have extended slicing to formal specifications expressed in Z. Their techniques were designed to help alleviate the readability problems in Z specifications.
Reference: 15. <author> A.M. Sloane and J. Holdsworth. </author> <title> Beyond traditional program slicing. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 180-186, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Thus, a slicing approach must be able to work with incomplete and inconsistent models. Sloane and Holdsworth extended the concept of slicing to a generalized marking of a program's abstract syntax tree <ref> [15] </ref>. This generalization allows (1) slicing of programs without statements and variables, and (2) slicing based on criteria other than the use of a variable at a given statement. Their approach enables slicing based on, for example, call graphs, object structure, and type dependencies.
Reference: 16. <author> J.M. Spivy. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: Consider the transition definition in Figure 2. This transition determines under which conditions an intruding aircraft can be downgraded from a 2 The states involved in threat classification are Other-traffic, Proximate-Traffic, Potential-Threat, and Threat. 3 The notation S / R is borrowed from Z <ref> [16] </ref> and defines a relation that relates a to b iff R relates a to b and a is a member of S. Reduction Scenario: Not-Reporting-Altitude A D Alt-Reporting s-101 in state No T Fig. 5. An intruder has stopped reporting altitude expressed as an and/or table.
Reference: 17. <author> M. Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: in our opinion, are the most viable formalism for the class of systems we are interested in, namely reactive embedded control systems. 1.2 Program Slicing Weiser introduced the concept of slicing as a means of simplifying programs to aid in debugging and identification of program fragments suitable for parallel execution <ref> [17] </ref>. A program slice is a projection of a program, which is smaller and potentially more comprehensible than the original program. Traditionally, program slicing is based on variables and statements. A slice consists of the statements that potentially effect the value of a particular variable at a given statement.
References-found: 17

