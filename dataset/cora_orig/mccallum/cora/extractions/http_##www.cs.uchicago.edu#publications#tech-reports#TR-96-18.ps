URL: http://www.cs.uchicago.edu/publications/tech-reports/TR-96-18.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: BuGS 1.0 User Guide  
Author: Bruce P. Ayati 
Keyword: Key words and phrases: second order nonlinear partial differential equations, single space dimension, implicit finite difference scheme.  
Note: AMS Subject Classifications(1991): 35G30, 65N06.  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> The compressed write routines are provided by Todd F. </editor> <title> Dupont and Mark Weber. </title>
Reference-contexts: The third part is the collection of problem dependent routines. These need to be modified for each problem. In addition, the header file, parameters.h, is dependent on the particular problem. 3.1 Classes Compressed Write Channel used for compression of the output <ref> [1] </ref>. class pair public: double x,y; pair (double a, double b)-x=a;y=b;-; -; class CmpChannel double last_point, last_value; double prev_point, prev_value; double lower_slope, upper_slope; double abs_tol, rel_tol; ofstream *output; char* name; int stuffs; static int num_comp_ch; public: CmpChannel (char* ch_name=0, double atol=1.e-20, double rtol=1.e-6); void reset (char* remark=0); ~CmpChannel (); void stuff <p> errorIndicator, interwoven& r, double& rr, int errorVect []); jacobian computes the automated approximation of the Jacobi matrix. void jacobian (double x [], double order [], interwoven& terms, double time,double dt, interwoven& tvariables, interwoven& dvariables, tridiag& a, int state []); The piecewise linear compressed write routine used to write a profile <ref> [1] </ref>. void write_prof ( CmpChannel & out , int len, double x [], interwoven& v, int var ); step executes the step doubling and carries information about the reduction in the residual. void step (double x [], double order [], interwoven& variables, interwoven& dvariables, interwoven& terms, double& time,double dt, double& dtold, <p> Must have UNK entries. order [0] = 10e-1; order <ref> [1] </ref> = 10e-1; order [2] = 10e-2; // Initial and final times. time = 0.0; tfinal = T_F; - 5.2 Discretizing the system of PDE's Write a residual function that computes the value of r, where r= ^ F ( ^ U ; ^ U t ), a dis-cretization of the <p> (dt)); out_pop_max &lt;< pair (time, max (variables,0)); out_pop_ave &lt;< pair (time, pwl_integral (N,x,variables,0)/(x [N-1]-x [0])); out_rep_ave &lt;< pair (time, pwl_integral (N,x,variables,1)/(x [N-1]-x [0])); 22 out_abs_ave &lt;< pair (time, pwl_integral (N,x,variables,2)/(x [N-1]-x [0])); out_front_position &lt;< pair (time, fpos); out_perror_position &lt;< pair (time, x [errorVect [0]]); out_rerror_position &lt;< pair (time, x [errorVect <ref> [1] </ref>]); out_aerror_position &lt;< pair (time, x [errorVect [2]]); if ( !firstTime )- out_time_error &lt;< pair (time,Alog10 (errorIndicator)); spaceErrorIndicator = pwl_slope_jump (N,x,variables,0); out_space_error &lt;< pair (time,Alog10 (spaceErrorIndicator)); - -// end time_output 5.4 Setting Parameters Set five parameters for every problem: N, the number of nodes in the spatial mesh; UNK, the number
Reference: [2] <author> John, F. </author> <title> 1982 Partial Differential Equations, </title> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: Must have UNK entries. order [0] = 10e-1; order [1] = 10e-1; order <ref> [2] </ref> = 10e-2; // Initial and final times. time = 0.0; tfinal = T_F; - 5.2 Discretizing the system of PDE's Write a residual function that computes the value of r, where r= ^ F ( ^ U ; ^ U t ), a dis-cretization of the operator F from Section <p> out_pop_ave &lt;< pair (time, pwl_integral (N,x,variables,0)/(x [N-1]-x [0])); out_rep_ave &lt;< pair (time, pwl_integral (N,x,variables,1)/(x [N-1]-x [0])); 22 out_abs_ave &lt;< pair (time, pwl_integral (N,x,variables,2)/(x [N-1]-x [0])); out_front_position &lt;< pair (time, fpos); out_perror_position &lt;< pair (time, x [errorVect [0]]); out_rerror_position &lt;< pair (time, x [errorVect [1]]); out_aerror_position &lt;< pair (time, x [errorVect <ref> [2] </ref>]); if ( !firstTime )- out_time_error &lt;< pair (time,Alog10 (errorIndicator)); spaceErrorIndicator = pwl_slope_jump (N,x,variables,0); out_space_error &lt;< pair (time,Alog10 (spaceErrorIndicator)); - -// end time_output 5.4 Setting Parameters Set five parameters for every problem: N, the number of nodes in the spatial mesh; UNK, the number of dependent variables in the problem; TERM_NUM,
Reference: [3] <author> Radhakrishnan, K., Hindmarsh, </author> <title> A.C. 1993 Description and Use of LSODE: the Livermore Solver for Ordinary Differential Equations, </title> <note> Lawerence Liver-more National Laboratory Report UCRL-ID-113855 or NASA Reference Publication 1327. </note>
Reference-contexts: Therefore, explicitly writing the Jacobi matrix is avoided <ref> [3] </ref>.
Reference: [4] <author> Stoer, J., Bulirsch, R. </author> <title> 1980 Introduction to Numerical Analysis, </title> <publisher> Springer-Verlag, </publisher> <address> New York. </address>
Reference-contexts: The sum of the reductions in the residual for all three steps must be less than r_tol. In 4, set the solution to 2ds, where d is the solution from taking two steps over the time interval and s is from a single step <ref> [4] </ref>. In 5, determine the new state of the system at each node by considering the previous state as well as the current values of the variables.
Reference: [5] <author> Stroustrup, B., </author> <title> 1991 The C++ Programming Language, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass. </address> <month> 24 </month>
References-found: 5

