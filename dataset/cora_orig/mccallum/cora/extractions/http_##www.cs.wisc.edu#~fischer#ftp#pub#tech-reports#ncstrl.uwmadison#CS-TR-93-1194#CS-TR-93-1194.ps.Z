URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1194/CS-TR-93-1194.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1194/
Root-URL: http://www.cs.wisc.edu
Email: mansha@cs.wisc.edu vernon@cs.wisc.edu  
Title: Comparison of Processor Allocation Policies for Parallel Systems  
Author: Rajesh K. Mansharamani and Mary K. Vernon 
Date: December 9, 1993  
Address: 1210 West Dayton Street Madison, WI 53706.  
Affiliation: Computer Sciences Department University of Wisconsin  
Abstract: The increasing use of parallel systems has led to the development of a number of multiprogrammed processor allocation policies. This paper analyzes the following four policies that have previously been shown to have high performance under specific workloads: adaptive static partitioning (ASP), dynamic first-come-first-serve (FCFS), preemptive smallest available parallelism first (PSAPF), and spatial equipartitioning (EQS). The results in this paper are derived for a general workload model that includes general distribution of available job parallelism, controlled correlation between cumulative processing demand and available parallelism, general demand distribution per class of jobs in the correlation model, and general deterministic job execution rates that represent synchronization and communication overheads as well as load imbalance for parallel programs. Under the assumption that jobs can dynamically and efficiently redistribute their work across the processors allocated to them previous interpolation approximations are used to estimate the mean response times of EQS and FCFS, and new interpolations are derived and validated for the mean response times of ASP and PSAPF. The interpolation approximations provide approximate mean response time formulas for each policy that directly yield key determinants of relative policy performance. The key determinants are used to delineate regions of the workload parameter space over which each of ASP, FCFS, EQS, and PSAPF performs best. The delineation provides a unification and generalization of previous results. fl This research was partially supported by the National Science Foundation under grants CCR-9024144 and CDA-9024618.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, R. Mansharamani, and M. Vernon. </author> <title> Response time bounds for parallel processor allocation policies. </title> <type> Technical Report # 1152, </type> <institution> Computer Sciences Department, University of Wisconsin-Madison, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: demand and parallelism, and linear speedups, FCFS, EQuiallocation (EQ) policies, and Preemptive Smallest Available Parallelism First (PSAPF) perform almost the same [14, 18]. * PSAPF is optimal for a workload with i.i.d. exponential task service times [13], and also for a workload with i.i.d. exponential job demands and linear speedups <ref> [1] </ref>, given that the scheduler has no information about job processing requirements. * Under specific hyperexponential demands and specific parallelism distributions, PSAPF has been observed to have high performance under a workload with high correlation between demand and paral lelism when coefficient of variation in job demand, C D , is <p> The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in <ref> [15, 13, 1] </ref>. Each of the policies is defined in the context of a global or central job queue. <p> one processor) D, (2) Available parallelism N 2 f1; 2; : : : ; P g, (3) Execution rate function (ERF) E : [0; P ] ! [0; N ], which is nondecreasing and has the following properties: E (x) &lt; x; 0 x N; (4) Correlation coefficient r 2 <ref> [0; 1] </ref> between available parallelism N and the random variable for mean demand of a job with available parallelism N . The system operates as follows. Upon arrival each job joins the central job queue. <p> Under the above workload assumptions the mean service time under arbitrary r 2 <ref> [0; 1] </ref> is given by S = E D fl (N ) + r 2 D E N The workload model defined above contains four simplifications each of which represents a trade-off between analytic tractability and the simplicity of the parameter space on the one hand, and generality of the model <p> For nondeterministic N, however, we expect PSAPF to perform differently than FCFS. In general, one can expect PSAPF to perform better than FCFS for three reasons. First, by delaying service of more parallel jobs, PSAPF tends to keep processor utilization high for a larger portion of each busy period <ref> [1] </ref>. Second, for correlated workloads PSAPF gives higher priority to jobs with smaller mean demands. Third, at high instantaneous load the overall efficiency is higher under PSAPF for sublinear fl because jobs that receive higher priority also execute more efficiently.
Reference: [2] <author> M. Bazaraa, and C. Shetty. </author> <title> Nonlinear Programming: Theory and Algorithms. </title> <publisher> John Wiley & Sons, </publisher> <address> New York 1979. </address>
Reference: [3] <author> A. Bondi, and J. Buzen. </author> <title> The Response Times of Priority Classes under Preemptive Resume in M/G/m Queues. Performance Evaluation Review 12, </title> <month> 3 (August </month> <year> 1984), </year> <pages> 195-201. </pages>
Reference-contexts: A known heuristic for obtaining performance estimates of PR for a multiserver system with sequential jobs is to compare PR with FCFS in a uniprocessor system and then map the comparison to the multiserver system (cf. <ref> [5, 3, 36] </ref>). <p> A known heuristic for obtaining performance estimates of PR for a multiserver system with sequential jobs is to compare PR with FCFS in a uniprocessor system and then map the comparison to the multiserver system (cf. [5, 3, 36]). For example, in <ref> [3] </ref>, Buzen and Bondi approximated the mean extra time (i.e., mean response time minus mean service time) of an M/G/c PR queue by X M=G=c P R X M=G=1 c F CF S where the M=G=1 c P R queue is obtained by replacing all c servers of the M=G=c P
Reference: [4] <author> A. Brooke, D. Kendrick, and A. Meerhaus. </author> <title> GAMS, a User's Guide. </title> <publisher> Scientific Press, </publisher> <address> Redwood City, CA, </address> <year> 1988. </year>
Reference: [5] <author> J. Buzen, and A. Bondi. </author> <title> The Response Time of Priority Classes under Preemptive Resume in M/M/m Queues. </title> <journal> Operations Research 31, </journal> <volume> 2 (1983), </volume> <pages> 456-465. </pages>
Reference-contexts: A known heuristic for obtaining performance estimates of PR for a multiserver system with sequential jobs is to compare PR with FCFS in a uniprocessor system and then map the comparison to the multiserver system (cf. <ref> [5, 3, 36] </ref>).
Reference: [6] <author> L. Dowdy. </author> <title> On the Partitioning of Multiprocessor Systems. </title> <type> Technical Report, </type> <institution> Vanderbilt University, Nashville, TN, </institution> <month> July </month> <year> 1988. </year>
Reference-contexts: P max p N C N CDF of N H High 0.9 1.0 90.10 0.33 M Moderate 0.1 1/(0.4P) 43.14 0.80 L Low 0.1 0.9 11.00 2.70 * To evaluate the impact of sublinear ERFs, the following parametric ERD will be considered, which is derived from an execution signature in <ref> [6] </ref>. fl (k) = k + fi At fi = 0 we get the flat ERD fl (k) 1. By increasing fi we obtain ERDs that are closer to linear as shown in Figure 2 until we obtain the linear ERD when fi = 1.
Reference: [7] <author> D. Ghosal, G. Serazzi, and S. Tripathi. </author> <title> The Processor Working Set and Its Use in Scheduling Multiprocessor Systems. </title> <journal> IEEE Transactions on Software Engineering 17, </journal> <month> 5 (May </month> <year> 1991), </year> <pages> 443-453. </pages>
Reference: [8] <author> A. Gupta, A. Tucker, and L. Stevens. </author> <title> Making Effective Use of Shared Memory Multiprocessors: The Process Control Approach. </title> <type> Technical Report, </type> <institution> Computer Sciences Department, Stanford University, Stanford, </institution> <address> CA, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: 2 * Under specific hyperexponential demands and specific parallelism distributions EQ has been observed to have high performance for both uncorrelated and highly correlated workloads when C D is moderate to high [14]. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads <ref> [39, 20, 8] </ref> and a particular workload that consists of a mixture of application types and has high C D [21, 22]. These results show particular policies to perform well over narrow regions of the parameter space but it is not clear whether or how the various results generalize. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1].
Reference: [9] <author> F. Kelly. </author> <title> Reversibility and Stochastic Networks. </title> <publisher> John Wiley & Sons, </publisher> <year> 1979. </year>
Reference-contexts: = 0) and R EQS (r = 1) can be directly derived from (9). 3.2.2 Exact solution for N = k The derivation for R EQS (N = k; r = 0) is based on the property that when N = k the EQS system reduces to a symmetric queue <ref> [9] </ref>, and it is shown in [19] that under the workload assumptions (, N = k, F D , r = 0, fl, E (j) = fl (j)) b ( P X (P ) i j=m+1 E (P=j) (P ) P Q P 1 ) 15 where m = bP=kc; =
Reference: [10] <author> L. Kleinrock. </author> <title> Queueing Systems, Vol I: Theory. </title> <publisher> John Wiley & Sons, </publisher> <address> New York 1975. </address>
Reference-contexts: X M=G=1 P F CF S is simply 2 (1 + C 2 D )=(2 (1 )) <ref> [10] </ref>, and approxima 19 tion (7) yields a closed form expression for X F CF S R F CF S S.
Reference: [11] <author> L. Kleinrock. </author> <title> Queueing Systems, </title> <booktitle> Vol II: Computer Applications. </booktitle> <publisher> John Wiley & Sons, </publisher> <address> New York 1976. </address>
Reference-contexts: X M=G=1 P F CF S is simply 2 (1 + C 2 D )=(2 (1 )) [10], and approxima 19 tion (7) yields a closed form expression for X F CF S R F CF S S. The analysis in <ref> [11] </ref> for an M/G/1 PR queue (under the given workload assumptions) yields, X M=G=1 P P R = k=1 1 k1 k D P ; where k = k X p i : (17) Thus, under the assumptions (; F N ; F u D ; r = 0; fl l
Reference: [12] <author> S. </author> <title> Leutenegger. Issues in Multiprogrammed Multiprocessor Sharing. </title> <type> Ph.D. Thesis, Technical Report #954, </type> <institution> Department of Computer Sciences, University of Wisconsin-Madison, </institution> <month> August </month> <year> 1990. </year> <month> 41 </month>
Reference-contexts: of power P 2.5 Workloads for Numerical Experiments The following distributions of N and functions fl are used to validate mean response time approximations in Section 4 and to experimentally compare specific policies in Section 5. 10 * The bounded-geometric distribution of N with parameters P max and p (see <ref> [14, 12] </ref>): N = &lt; P; with probability P max ; min (X; P ); with probability 1 P max ; where X = Geometric (p): It can be verified that across all bounded-geometric distributions with N the same, C N is maximum when p = 1 and is minimum when <p> Additional simulation data in <ref> [12] </ref> for the same assumptions shows PSAPF to perform better than EQ if C v &lt; 2 and worse if C v &gt; 2. [12] also shows cases with C v between 1 and 2 where PSAPF performs worse than EQ. Again these results are consistent with Figure 11. <p> Additional simulation data in <ref> [12] </ref> for the same assumptions shows PSAPF to perform better than EQ if C v &lt; 2 and worse if C v &gt; 2. [12] also shows cases with C v between 1 and 2 where PSAPF performs worse than EQ. Again these results are consistent with Figure 11. Now consider 0 &lt; r &lt; 1, which is the case in [33, 21, 22] where no quantitative measures of workload correlation are given.
Reference: [13] <author> S. Leutenegger, and R. Nelson. </author> <title> Analysis of Spatial and Temporal Scheduling Policies for Semi-Static and Dynamic Multiprocessor Environments. </title> <institution> Research Report-IBM T.J. Watson Research Center, Yorktown Heights, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: service times is less than 4 [37]. * Under exponential demands, no correlation between demand and parallelism, and linear speedups, FCFS, EQuiallocation (EQ) policies, and Preemptive Smallest Available Parallelism First (PSAPF) perform almost the same [14, 18]. * PSAPF is optimal for a workload with i.i.d. exponential task service times <ref> [13] </ref>, and also for a workload with i.i.d. exponential job demands and linear speedups [1], given that the scheduler has no information about job processing requirements. * Under specific hyperexponential demands and specific parallelism distributions, PSAPF has been observed to have high performance under a workload with high correlation between demand <p> The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in <ref> [15, 13, 1] </ref>. Each of the policies is defined in the context of a global or central job queue. <p> Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>. <p> Processor allocation to jobs can change upon job arrivals, job departures, and changes in job parallelism. This policy was proposed in [15] and also studied in <ref> [13, 14] </ref> under specific workloads. 2.2 Workload Model The goal is to have a simple workload model that is broadly applicable, uses a small number of parameters to characterize the essential features of parallel workloads with respect to scheduling disciplines, and is easy to analyze. <p> distributions of demand and parallelism. 16 Note that when fl is linear, all EQ policies have the same performance under the assumption of E (j) = fl (j). 38 Now consider the line r = 1, fl = fl l , and variable C v . * The results in <ref> [13] </ref> compare PSAPF, FCFS, EQ and several other policies for a workload with a fixed number of jobs having i.i.d. exponential task service times (for which C v &lt; 1 and r = 1) and linear task execution rates.
Reference: [14] <author> S. Leutenegger, and M. Vernon. </author> <title> The Performance of Multiprogrammed Multiprocessor Scheduling Policies. Performance Evaluation Review 18, </title> <month> 1 (May </month> <year> 1990), </year> <pages> 226-236. </pages>
Reference-contexts: higher performance than Round Robin Process and Processor Sharing when coefficient of variation of task service times is less than 4 [37]. * Under exponential demands, no correlation between demand and parallelism, and linear speedups, FCFS, EQuiallocation (EQ) policies, and Preemptive Smallest Available Parallelism First (PSAPF) perform almost the same <ref> [14, 18] </ref>. * PSAPF is optimal for a workload with i.i.d. exponential task service times [13], and also for a workload with i.i.d. exponential job demands and linear speedups [1], given that the scheduler has no information about job processing requirements. * Under specific hyperexponential demands and specific parallelism distributions, PSAPF <p> demand and paral lelism when coefficient of variation in job demand, C D , is low to moderate 2 * Under specific hyperexponential demands and specific parallelism distributions EQ has been observed to have high performance for both uncorrelated and highly correlated workloads when C D is moderate to high <ref> [14] </ref>. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads [39, 20, 8] and a particular workload that consists of a mixture of application types and has high C D [21, 22]. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>. <p> Processor allocation to jobs can change upon job arrivals, job departures, and changes in job parallelism. This policy was proposed in [15] and also studied in <ref> [13, 14] </ref> under specific workloads. 2.2 Workload Model The goal is to have a simple workload model that is broadly applicable, uses a small number of parameters to characterize the essential features of parallel workloads with respect to scheduling disciplines, and is easy to analyze. <p> of power P 2.5 Workloads for Numerical Experiments The following distributions of N and functions fl are used to validate mean response time approximations in Section 4 and to experimentally compare specific policies in Section 5. 10 * The bounded-geometric distribution of N with parameters P max and p (see <ref> [14, 12] </ref>): N = &lt; P; with probability P max ; min (X; P ); with probability 1 P max ; where X = Geometric (p): It can be verified that across all bounded-geometric distributions with N the same, C N is maximum when p = 1 and is minimum when <p> First consider the line for r = 0 and fl = fl l , and variable C v . * Two previous studies show that PSAPF, FCFS, and EQ have almost the same performance at (C v = 1; r = 0; fl l ) <ref> [14, 18] </ref>. <p> shown in Figure 11 for FCFS and EQS 16 and approximation (25) shows that R P SAP F R F CF S under these conditions. * For an uncorrelated workload (r = 0) with specific hyperexponential demand distributions (C v &gt; 1), specific distributions of N , and linear speedups, <ref> [14] </ref> shows that R EQ &lt; R P SAP F ; R F CF S . <p> This is consistent with Figure 11 which shows that in general for C v &lt; 1, r = 1, and fl = fl l , PSAPF is optimal among ASP, FCFS, EQ, and PSAPF. * The results in <ref> [14] </ref> show that R EQ &lt; R P SAP F for specific hyperexponential demands, specific parallelism distributions, full correlation (r = 1), and linear speedups. <p> Other results in the literature show that R P SAP F &lt; R F CF S for hyperexponential demands (C v &gt; 1), specific distributions of parallelism, and both r = 0 and r = 1 <ref> [15, 14] </ref>. The same result is shown in Section 5.2 for all distributions of demand with C v &gt; 1 and for all distributions of N .
Reference: [15] <author> S. Majumdar, D. Eager, and R. Bunt. </author> <title> Scheduling in Multiprogrammed Parallel Systems. Performance Evaluation Review 16, </title> <month> 1 (May </month> <year> 1988), </year> <pages> 104-113. </pages>
Reference-contexts: Equiallocation policies have been shown to have high performance under various workloads [39, 14, 20, 8, 33, 21, 22, 18]. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in <ref> [15] </ref> and shown to have high performance for specific workloads in [15, 13, 1]. Each of the policies is defined in the context of a global or central job queue. <p> The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in <ref> [15, 13, 1] </ref>. Each of the policies is defined in the context of a global or central job queue. <p> Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>. <p> Processor allocation to jobs can change upon job arrivals, job departures, and changes in job parallelism. This policy was proposed in <ref> [15] </ref> and also studied in [13, 14] under specific workloads. 2.2 Workload Model The goal is to have a simple workload model that is broadly applicable, uses a small number of parameters to characterize the essential features of parallel workloads with respect to scheduling disciplines, and is easy to analyze. <p> Other results in the literature show that R P SAP F &lt; R F CF S for hyperexponential demands (C v &gt; 1), specific distributions of parallelism, and both r = 0 and r = 1 <ref> [15, 14] </ref>. The same result is shown in Section 5.2 for all distributions of demand with C v &gt; 1 and for all distributions of N .
Reference: [16] <author> S. Majumdar, D. Eager, and R. Bunt. </author> <title> Characterisation of Programs for Scheduling in Multiprogrammed Parallel Systems. Performance Evaluation 13, </title> <booktitle> (1991), </booktitle> <pages> 109-130. </pages>
Reference: [17] <author> R. Mansharamani. </author> <title> Efficient Analysis of Parallel Processor Scheduling Policies. </title> <type> Ph.D. Thesis, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, WI, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: P; with probability P max ; min (X; P ); with probability 1 P max ; where X = Geometric (p): It can be verified that across all bounded-geometric distributions with N the same, C N is maximum when p = 1 and is minimum when P max = 0 <ref> [17] </ref>. We refer to these workloads as high C N and low C N workloads, respectively. The specific bounded-geometric distributions in Table 2, more details of which are given in [18], are used in the policy comparisons.
Reference: [18] <author> R. Mansharamani, and M. Vernon. </author> <title> Approximate Analysis of Parallel Processor Allocation Policies. </title> <type> Technical Report 1187, </type> <institution> Computer Sciences Department, University of Wisconsin, Madison, WI, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: higher performance than Round Robin Process and Processor Sharing when coefficient of variation of task service times is less than 4 [37]. * Under exponential demands, no correlation between demand and parallelism, and linear speedups, FCFS, EQuiallocation (EQ) policies, and Preemptive Smallest Available Parallelism First (PSAPF) perform almost the same <ref> [14, 18] </ref>. * PSAPF is optimal for a workload with i.i.d. exponential task service times [13], and also for a workload with i.i.d. exponential job demands and linear speedups [1], given that the scheduler has no information about job processing requirements. * Under specific hyperexponential demands and specific parallelism distributions, PSAPF <p> ASP, EQS, FCFS, and PSAPF, over a general workload model that we believe captures the essential features of parallel applications. The workload model used in this study is defined in <ref> [18, 19] </ref> and includes general distribution of available job parallelism 3 , controlled correlation between total job processing requirement (demand) and parallelism, general distribution of demand for each class of jobs in the correlation model, and general deterministic job execution rates that represent synchronization and communication overheads as well as load <p> Under the assumption that jobs can dynamically and efficiently redistribute their work across the processors allocated to them, we obtain mean response time estimates for each policy primarily using interpolation approximations, which were introduced in <ref> [18] </ref> and refined for the EQS policy in [19]. The approximate mean response time formulas that follow from the interpolations readily identify workload parameters that are key determinants of relative policy performance, and are used to evaluate policy performance as a function of these key parameters. <p> the processors. ffifl *fi e -b b b b b b e ee Parallel Jobs Job Queue ffifl *fi Processor 1 ffifl *fi Processor P J J J - - Below we define the processor allocation policies of interest (Section 2.1) and the workload model as it was defined in <ref> [18, 19] </ref> (Section 2.2). <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> We refer to these workloads as high C N and low C N workloads, respectively. The specific bounded-geometric distributions in Table 2, more details of which are given in <ref> [18] </ref>, are used in the policy comparisons. <p> Interpolation approximations are derived by obtaining accurate estimates of mean response time (either exact or approximate) at extreme values of system parameters and then interpolating among the endpoints. In this section we review interpolation approximations from <ref> [18] </ref> for R F CF S under (; F N ; F D ; r = 0; fl l ; E (j) = fl (j)) and from [19] for R EQS under (; F N ; F u D ; r; fl; E (j) = fl (j)). <p> The new approximations for R ASP and R P SAP F are validated in Section 4. 3.1 FCFS First an accurate interpolation approximation for R F CF S from <ref> [18] </ref> is reviewed that holds for (; F N ; F D ; r = 0; fl l ; E (j) = fl (j)). <p> r = 0 and fl l For the system (F CF S; ; F N ; F D ; r = 0; fl l ; E (j) = fl (j)) the following interpolation approximation on the pmf of N , p, is an accurate estimate for R F CF S <ref> [18] </ref>: R F CF S (F N ; r = 0) k=1 p k R F CF S (N = k; r = 0); under (; ; F u D ; ; fl l ; E (j) = fl (j)) E 2 ( P i D where the solution for R <p> In <ref> [18] </ref> mean response time estimates were provided for this system under the assumption that fl = fl l . The extension to general nondecreasing fl is straightforward 13 and uses the following reduction. First consider the case where k evenly divides P. <p> (j) = fl (j)): (13) where R ASP (N = 1) = R M=D=P D + p 2 (1 ) and D + ff ()R M=D=P ; 1 + (0:5 1=P ) P=2 + 0:5 P=2 : 3.4 PSAPF: r = 0 This section first reviews an interpolation approximation from <ref> [18] </ref> for R P SAP F under (; F N ; F D ; r = 0; fl l ; E (j) = fl (j)), then derives a more accurate approximation under the same workload assumptions, and finally provides solutions for constant N and general fl. <p> N is shown to provide reasonably accurate estimates of R P SAP F under (; F N ; F D ; r = 0; fl l ; E (j) = fl (j)) and is noted to be the same as the interpolation 18 approximation (7) for R F CF S <ref> [18] </ref>. <p> )(1 k ) 1 + C 2 2 D ) h p N +1)2 : (18) Note that the accuracy of approximation (18) can be improved by using a more accurate approximation for X F CF S in (16); however, the use of numerical analysis entails significant loss of insight <ref> [18] </ref>. 3.4.3 Analysis under Constant N When available parallelism is constant, i.e., N = k, PSAPF is identical to FCFS and approximation (8) is valid for the system (P SAP F; ; N = k; F D ; r = 0; fl) as well. <p> The approximation is more conservative (i.e., only very small negative relative errors have been observed) and more accurate than the PSAPF approximation in <ref> [18] </ref>. The maximum relative error occurred at C v = 5, N = 3=4P , and = 0:2 for both P=20 and P=100. In general, the largest errors at C v = 5 were observed for distributions of N with moderate to high N and low C N . <p> We can therefore conclude that for general workload conditions with r = 1, EQS outperforms PSAPF as long as C v &gt; 2. 14 Coupling the results from Figure 10 for r = 1 with the results from <ref> [18] </ref> for r = 0 we have the following relationships between R EQS and R P SAP F at the extreme ends of correlation. <p> First consider the line for r = 0 and fl = fl l , and variable C v . * Two previous studies show that PSAPF, FCFS, and EQ have almost the same performance at (C v = 1; r = 0; fl l ) <ref> [14, 18] </ref>.
Reference: [19] <author> R. Mansharamani, and M. Vernon. </author> <title> Performance Analysis of the EQuipartitioning Parallel Processor Allocation Policy. </title> <note> In preparation. </note>
Reference-contexts: ASP, EQS, FCFS, and PSAPF, over a general workload model that we believe captures the essential features of parallel applications. The workload model used in this study is defined in <ref> [18, 19] </ref> and includes general distribution of available job parallelism 3 , controlled correlation between total job processing requirement (demand) and parallelism, general distribution of demand for each class of jobs in the correlation model, and general deterministic job execution rates that represent synchronization and communication overheads as well as load <p> Under the assumption that jobs can dynamically and efficiently redistribute their work across the processors allocated to them, we obtain mean response time estimates for each policy primarily using interpolation approximations, which were introduced in [18] and refined for the EQS policy in <ref> [19] </ref>. The approximate mean response time formulas that follow from the interpolations readily identify workload parameters that are key determinants of relative policy performance, and are used to evaluate policy performance as a function of these key parameters. <p> the processors. ffifl *fi e -b b b b b b e ee Parallel Jobs Job Queue ffifl *fi Processor 1 ffifl *fi Processor P J J J - - Below we define the processor allocation policies of interest (Section 2.1) and the workload model as it was defined in <ref> [18, 19] </ref> (Section 2.2). <p> From <ref> [19] </ref> we also review constraints that exist among workload parameters (Section 2.3), and finally, we define the notation used throughout the remainder of the paper (Section 2.4). 2.1 Processor Allocation Policies As stated in Section 1 we compare the following processor allocation policies in this paper: ASP, FCFS, EQS, and PSAPF. <p> The ERD fl is said to be linear if fl (x) = x, for all 0 x P . * The mean demand of a job with available parallelism N is either independent of N or linearly correlated with N . We assume the following model from <ref> [19] </ref> in which the mean demand of a job with available parallelism N is given by N = &lt; D; with probability 1 r 2 ; c N; with probability r 2 : In the first case the demand is drawn from a general distribution, F u D , with mean <p> It is easy to see after unconditioning on N that c = D=N . Thus, the workload correlation is captured by the single parameter r, which is shown in <ref> [19] </ref> to be equal to the correlation coefficient between N and N , i.e., r = Corr ( N ; N ) E [ N N ] E [ N ] E [N ] ; N ; N 6= 0: (1) 5 The coefficient of variation of a random variable is <p> The implications of these assumptions are discussed further in <ref> [19] </ref>. <p> For a given N , the following constraints on C N are derived in <ref> [19] </ref>, 0 C N N (P + 1) P 2 1 : (4) The lower bound is attained when N is constant and integer-valued for all jobs, i.e., N = k, where k 2 f1; : : : ; P g. <p> The upper bound is attained when N has a two-point p.m.f. with nonzero mass only at 1 and P. The following constraints on S are derived in <ref> [19] </ref>. When r = 0 and fl is concave 6 , S is minimum when C N is minimum and S is maximum when C N is maximum. <p> 3 Approximate Analysis The goal is to solve for the performance of the FCFS, PSAPF, and ASP policies under general distributions of demand F u D and available parallelism F N , arbitrary correlation coefficient r, and any general ERD fl, as 11 was done for the EQS policy in <ref> [19] </ref>. However, the FCFS, ASP, and PSAPF policies are difficult to analyze under such completely general workload assumptions and therefore suitable restrictions are made below for the sake of analytic tractability. <p> In this section we review interpolation approximations from [18] for R F CF S under (; F N ; F D ; r = 0; fl l ; E (j) = fl (j)) and from <ref> [19] </ref> for R EQS under (; F N ; F u D ; r; fl; E (j) = fl (j)). <p> Note that both approximations (7) and (8) show that R F CF S increases linearly with C 2 D . 3.2 EQS Below is a summary of the mean response time solutions from <ref> [19] </ref> for the system (EQS; ; ; F u D ; r; fl; E (j) = fl (j)). First an accurate approximation under general F N (Section 3.2.1) and second the exact solution under constant N (Section 3.2.2), are reviewed. 3.2.1 Approximation for general N The results in [19] show that <p> solutions from <ref> [19] </ref> for the system (EQS; ; ; F u D ; r; fl; E (j) = fl (j)). First an accurate approximation under general F N (Section 3.2.1) and second the exact solution under constant N (Section 3.2.2), are reviewed. 3.2.1 Approximation for general N The results in [19] show that the normalized mean service time S n S=D is the key parallelism determinant of EQS performance under the workload (; F N ; F u D ; r; fl) and that R EQS increases linearly with S n . <p> (N = P; r = 0); under (; ; F u D ; ; fl; E (j) = fl (j)) (9) The mean response times R EQS (N = 1; r = 0) and R EQS (N = P; r = 0) are special cases of the exact solution in <ref> [19] </ref> for R EQS (N = k; r = 0), k = 1; 2; : : : ; P , which is reviewed below in Section 3.2.2. <p> 2 S n (r = 1) (see (2)), which results in, R EQS (r) (1 r 2 )R EQS (r = 0) + r 2 R EQS (r = 1); under (; F N ; F u D ; ; fl; E (j) = fl (j)); (10) as shown in <ref> [19] </ref>. <p> = 1) can be directly derived from (9). 3.2.2 Exact solution for N = k The derivation for R EQS (N = k; r = 0) is based on the property that when N = k the EQS system reduces to a symmetric queue [9], and it is shown in <ref> [19] </ref> that under the workload assumptions (, N = k, F D , r = 0, fl, E (j) = fl (j)) b ( P X (P ) i j=m+1 E (P=j) (P ) P Q P 1 ) 15 where m = bP=kc; = D=P; and b = 1 + <p> This general approach yields very accurate estimates of R EQS under the given workload conditions <ref> [19] </ref>. <p> We also observe that the minimum and maximum ratios increase with N for C v 2, due to the improvement in EQS performance with increase in average available parallelism when r = 1 <ref> [19] </ref>. Figure 10b plots similar ratios for = 0:9 and we note that the difference between PSAPF and EQS increases with an increase in . 36 Under sublinear execution rates the ratios of Figure 10 should be higher by virtue of Theorem 5.1.
Reference: [20] <author> C. McCann, R. Vaswani, and J. Zahorjan. </author> <title> A Dynamic Processor Allocation Policy for Multiprogrammed, Shared Memory Multiprocessors. </title> <journal> ACM Transactions on Computer Systems 11, </journal> <month> 2 (May </month> <year> 1993), </year> <pages> 146-178. </pages>
Reference-contexts: 2 * Under specific hyperexponential demands and specific parallelism distributions EQ has been observed to have high performance for both uncorrelated and highly correlated workloads when C D is moderate to high [14]. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads <ref> [39, 20, 8] </ref> and a particular workload that consists of a mixture of application types and has high C D [21, 22]. These results show particular policies to perform well over narrow regions of the parameter space but it is not clear whether or how the various results generalize. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1].
Reference: [21] <author> V. Naik, S. Setia, and M. Squillante. </author> <title> Scheduling of Large Scientific Applications on Distributed Memory Multiprocessor Systems. </title> <booktitle> Proceedings of the 6th SIAM Conference on Parallel Processing for Scientific Computation. </booktitle> <institution> IBM Research Report RC 18621, T. J. Watson Research Center, Yorktown Heights, </institution> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: uncorrelated and highly correlated workloads when C D is moderate to high [14]. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads [39, 20, 8] and a particular workload that consists of a mixture of application types and has high C D <ref> [21, 22] </ref>. These results show particular policies to perform well over narrow regions of the parameter space but it is not clear whether or how the various results generalize. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> This policy was first defined in [33] and its performance has been studied under several workload assumptions <ref> [34, 29, 21, 22] </ref>. FCFS The FCFS policy 4 allocates processors to jobs on a first-come-first-serve basis. Each job is allocated processors as they become available up to a maximum of its available parallelism. <p> Again these results are consistent with Figure 11. Now consider 0 &lt; r &lt; 1, which is the case in <ref> [33, 21, 22] </ref> where no quantitative measures of workload correlation are given. These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) [33] and under a specific mix of applications with C v &gt; 1 [21, 22]. <p> These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) [33] and under a specific mix of applications with C v &gt; 1 <ref> [21, 22] </ref>. The same result is shown in Section 5.1 and Figure 11 for all distributions of demand and parallelism.
Reference: [22] <author> V.Naik, S. Setia, and M. Squillante. </author> <title> Performance Analysis of Job Scheduling Policies in Parallel Supercomputing Environments. </title> <booktitle> Proceedings of Supercomputing'93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: uncorrelated and highly correlated workloads when C D is moderate to high [14]. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads [39, 20, 8] and a particular workload that consists of a mixture of application types and has high C D <ref> [21, 22] </ref>. These results show particular policies to perform well over narrow regions of the parameter space but it is not clear whether or how the various results generalize. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> This policy was first defined in [33] and its performance has been studied under several workload assumptions <ref> [34, 29, 21, 22] </ref>. FCFS The FCFS policy 4 allocates processors to jobs on a first-come-first-serve basis. Each job is allocated processors as they become available up to a maximum of its available parallelism. <p> Again these results are consistent with Figure 11. Now consider 0 &lt; r &lt; 1, which is the case in <ref> [33, 21, 22] </ref> where no quantitative measures of workload correlation are given. These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) [33] and under a specific mix of applications with C v &gt; 1 [21, 22]. <p> These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) [33] and under a specific mix of applications with C v &gt; 1 <ref> [21, 22] </ref>. The same result is shown in Section 5.1 and Figure 11 for all distributions of demand and parallelism.
Reference: [23] <author> R. Nelson. </author> <title> A Performance Evaluation of a General Parallel Processing Model. </title> <booktitle> Proceedings of ACM SIGMETRICS Conference; Performance Evaluation Review 18, </booktitle> <month> 1 (May </month> <year> 1990), </year> <pages> 13-26. </pages>
Reference-contexts: Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>.
Reference: [24] <author> R. Nelson. </author> <title> Matrix Geometric Solutions in Markov Models A Mathematical Tutorial. </title> <institution> Research Report - IBM T.J. Watson Research Center, Yorktown Heights, </institution> <month> April </month> <year> 1991. </year>
Reference-contexts: Setia and Tripathi [33] derive an exact solution for R ASP under exponential per class job demands and general job execution rates, which is based on matrix-geometric analysis <ref> [27, 24] </ref>. Two drawbacks of this exact analysis are that the underlying state space grows exponentially in the number of processors (making the analysis computationally prohibitive even for systems with 20 processors) and that the analysis does not yield direct insight into the dependence of R ASP on workload parameters. <p> In the validations was varied from 0.1 to 0.9. The approximations for R P SAP F for constant available parallelism were validated using exact matrix-geometric analysis <ref> [27, 24] </ref>. In all other cases, the approximations were validated using discrete event simulation. All simulation estimates of mean response time had 95% confidence intervals with less than 10% half-widths, and in nearly all cases the half-widths were less than 5%.
Reference: [25] <author> R. Nelson, and D. Towsley. </author> <title> A Performance Evaluation of Several Priority Policies for Parallel Processing Systems. </title> <type> COINS Technical Report 91-32, </type> <institution> Computer and Information Sciences, University of Massachusetts at Amherst, </institution> <month> May </month> <year> 1991. </year> <note> (To appear in JACM.) </note>
Reference: [26] <author> R. Nelson, D. Towsley, and A. Tantawi. </author> <title> Performance Analysis of Parallel Processing Systems. </title> <journal> IEEE Transactions on Software Engineering 14, </journal> <month> 4 (Apr. </month> <year> 1988), </year> <pages> 532-540. </pages>
Reference-contexts: Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>.
Reference: [27] <author> M. Neuts. </author> <title> Matrix-Geometric Solutions in Stochastic Models: An Algorithmic Approach. </title> <publisher> The John Hopkins University Press, </publisher> <year> 1981. </year>
Reference-contexts: Setia and Tripathi [33] derive an exact solution for R ASP under exponential per class job demands and general job execution rates, which is based on matrix-geometric analysis <ref> [27, 24] </ref>. Two drawbacks of this exact analysis are that the underlying state space grows exponentially in the number of processors (making the analysis computationally prohibitive even for systems with 20 processors) and that the analysis does not yield direct insight into the dependence of R ASP on workload parameters. <p> In the validations was varied from 0.1 to 0.9. The approximations for R P SAP F for constant available parallelism were validated using exact matrix-geometric analysis <ref> [27, 24] </ref>. In all other cases, the approximations were validated using discrete event simulation. All simulation estimates of mean response time had 95% confidence intervals with less than 10% half-widths, and in nearly all cases the half-widths were less than 5%.
Reference: [28] <author> A. Roberts, and D. Varberg. </author> <title> Convex Functions. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1973. </year>
Reference-contexts: Conversely, f is convex if f (ffx + (1 ff)y) fff (x) + (1 ff)f (y) <ref> [28] </ref>. Informally, a function is concave if the straight line joining any two points of the function lies on or below all function values between the two points, and is convex if the line lies on or above the function values. 9 fl = execution rate determinant.
Reference: [29] <author> E. Rosti, E. Smirni, L. Dowdy, G. Serazzi, and B. Carlson. </author> <title> Robust Partitioning Policies of Multiprocessor Systems. </title> <type> Technical Report, </type> <institution> Department of Computer Science, Vanderbilt University 1992. </institution> <note> To appear, in Performance Evaluation (Special issue on the performance modeling of parallel processing systems). 42 </note>
Reference-contexts: This policy was first defined in [33] and its performance has been studied under several workload assumptions <ref> [34, 29, 21, 22] </ref>. FCFS The FCFS policy 4 allocates processors to jobs on a first-come-first-serve basis. Each job is allocated processors as they become available up to a maximum of its available parallelism.
Reference: [30] <author> H. Sakasegawa. </author> <title> An approximation formula L q : = ff fi =(1 ). Annals of the Institute of Statistical Mathematics 29, </title> <booktitle> 1 (1977), </booktitle> <pages> 67-75. </pages>
Reference-contexts: (; N = k; F D ; r = 0; fl; E (j)) R F CF S (N = k; r = 0) = R M=G=c ; c = P=k; P mod k = 0: To compute R M=G=c we use the following approximation which is derived using Sakasegawa's approximation <ref> [30] </ref> for the mean number in a GI/G/c queue: R M=G=c S + p 1 - 1 + C 2 2 ; where - = S ; C S being the coefficient of variation in job service time, S.
Reference: [31] <author> C. Sauer, and K. M. Chandy. </author> <title> Computer System Performance Modeling. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference-contexts: On the other hand ASP is identical to FCFS when N = 1 and thus for exponential demands R ASP (N = 1) = R M=M=P F CF S . Since R M=M=P P S = R M=M=P F CF S <ref> [31] </ref>, R ASP = R EQS for C D = 1, r = 0, and S n = 1. 10 Next consider how these policies compare as job parallelism increases, that is, as S n decreases. <p> For C v between 1 and 2, the relative performance of EQS and PSAPF depends on the value of r and on the distribution of N . In general, workloads in general purpose computer systems have high variation in demand <ref> [31, pg16] </ref>,[38] 15 and in these systems we expect EQS to perform significantly better than PSAPF. 5.4 Generalization and Unification of Previous Work The policy comparisons for the ASP, EQS, FCFS, and PSAPF policies in Section 5.1-5.3 enable us to delineate regions of the parameter space under which each policy performs
Reference: [32] <author> M. Seager, and J. Stichnoth. </author> <title> Simulating the Scheduling of Parallel Supercomputer Applications. </title> <type> Technical Report, </type> <institution> User Systems Division, Lawrence Livermore National Laboratory, </institution> <month> September </month> <year> 1989. </year>
Reference: [33] <author> S. Setia, and Tripathi. </author> <title> An Analysis of Several Processor Partitioning Policies for Parallel Computers. </title> <type> Technical Report CS-TR-2684, </type> <institution> University of Maryland, College Park, MD, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The ASP policy has been identified in previous work as a high performance static allocation policy <ref> [33] </ref>. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads [39, 14, 20, 8, 33, 21, 22, 18]. The EQS policy is an idealized spatial equiallocation policy. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> For example, if there are five jobs waiting when a fully parallel job completes in a 100-processor system and the available parallelism per job is (50, 25, 100, 10, 10), then the allocation of processing power is (28, 25, 27, 10, 10). This policy was first defined in <ref> [33] </ref> and its performance has been studied under several workload assumptions [34, 29, 21, 22]. FCFS The FCFS policy 4 allocates processors to jobs on a first-come-first-serve basis. Each job is allocated processors as they become available up to a maximum of its available parallelism. <p> Setia and Tripathi <ref> [33] </ref> derive an exact solution for R ASP under exponential per class job demands and general job execution rates, which is based on matrix-geometric analysis [27, 24]. <p> The second trend is that 12 This observation does not concur with the observations of Setia and Tripathi <ref> [33] </ref> because we examine a system with P = 100 whereas they examined systems with P 10 in which it is less likely for a job to find an idle processor upon arrival. 13 As S n increases more and more of the probability mass shifts to lower values of parallelism <p> Again these results are consistent with Figure 11. Now consider 0 &lt; r &lt; 1, which is the case in <ref> [33, 21, 22] </ref> where no quantitative measures of workload correlation are given. These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) [33] and under a specific mix of applications with C v &gt; 1 [21, 22]. <p> Now consider 0 &lt; r &lt; 1, which is the case in [33, 21, 22] where no quantitative measures of workload correlation are given. These studies show that for particular workloads with sublinear ERFs, EQS outperforms ASP under exponential per class demands (C v = 1) <ref> [33] </ref> and under a specific mix of applications with C v &gt; 1 [21, 22]. The same result is shown in Section 5.1 and Figure 11 for all distributions of demand and parallelism.
Reference: [34] <author> S. Setia, and S. Tripathi. </author> <title> A Comparative Analysis of Static Processor Partitioning Policies for Parallel Computers. </title> <booktitle> Proceedings of the International Workshop on Modeling and Simulation of Computer and Telecommunication Systems (MASCOTS), </booktitle> <year> 1993. </year>
Reference-contexts: results concerning relative policy performance over numerous specific regions of the workload parameter space. 1 For example, * The Adaptive Static Partitioning (ASP) policy has been shown to have higher performance than several static allocation policies, under specific workload parameter values with exponential per class total job processing requirements (demands) <ref> [34] </ref>. * For a workload with independent and identically distributed (i.i.d.) generalized exponential task service times dynamic FCFS is shown to have higher performance than Round Robin Process and Processor Sharing when coefficient of variation of task service times is less than 4 [37]. * Under exponential demands, no correlation between <p> This policy was first defined in [33] and its performance has been studied under several workload assumptions <ref> [34, 29, 21, 22] </ref>. FCFS The FCFS policy 4 allocates processors to jobs on a first-come-first-serve basis. Each job is allocated processors as they become available up to a maximum of its available parallelism.
Reference: [35] <author> K. Sevcik. </author> <title> Application scheduling and processor allocation in multiprogrammed parallel processing systems. </title> <note> To appear in a special issue of Performance Evaluation. </note>
Reference: [36] <author> N. Tabet-Aouel, and D. Kouvatsos. </author> <title> On an Approximation to the Mean Response Times of Priority Classes in a Stable G/G/c/PR Queue. </title> <journal> Jnl. of the Operational Research Society 43, </journal> <month> 3 (Mar </month> <year> 1992), </year> <pages> 227-239. </pages>
Reference-contexts: A known heuristic for obtaining performance estimates of PR for a multiserver system with sequential jobs is to compare PR with FCFS in a uniprocessor system and then map the comparison to the multiserver system (cf. <ref> [5, 3, 36] </ref>). <p> Therefore, R k ;C k is equal to the mean response time of the k th priority class in this M=G=c P R queue. Tabetaeoul and Kouvatsos <ref> [36] </ref> derive an approximation for per class mean response times of a GI=G=c P R queue using a heuristic similar to (15). Using their heuristic we obtain the following 8 This general approach validates well not only for r = 1 but also for 0 r &lt; 1.
Reference: [37] <author> D. Towsley, C. Rommel, and J. Stankovic. </author> <title> Analysis of Fork-Join Program Response Times on Multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1, </journal> <month> 3 (July </month> <year> 1990), </year> <pages> 286-303. </pages>
Reference-contexts: per class total job processing requirements (demands) [34]. * For a workload with independent and identically distributed (i.i.d.) generalized exponential task service times dynamic FCFS is shown to have higher performance than Round Robin Process and Processor Sharing when coefficient of variation of task service times is less than 4 <ref> [37] </ref>. * Under exponential demands, no correlation between demand and parallelism, and linear speedups, FCFS, EQuiallocation (EQ) policies, and Preemptive Smallest Available Parallelism First (PSAPF) perform almost the same [14, 18]. * PSAPF is optimal for a workload with i.i.d. exponential task service times [13], and also for a workload with <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads <ref> [37] </ref>. Equiallocation policies have been shown to have high performance under various workloads [39, 14, 20, 8, 33, 21, 22, 18]. The EQS policy is an idealized spatial equiallocation policy. <p> Allocation of processing power for the five jobs in the above example is (50, 25, 25, 0, 0). This policy has been studied under different workload assumptions in previous literature <ref> [26, 15, 23, 14, 37, 13] </ref>. <p> The same result is shown in Section 5.2 for all distributions of demand with C v &gt; 1 and for all distributions of N . Finally, <ref> [37] </ref> shows FCFS to outperform Round Robin Process and Processor Sharing for i.i.d. generalized exponential task service times with coefficient of variation &lt; 4.
Reference: [38] <author> K. Trivedi. </author> <title> Probability and Statistics, with Reliability, Queueing and Computer Science Applications. </title> <publisher> Prentice-Hall, </publisher> <year> 1982, </year> <note> pg. 130. </note>
Reference: [39] <author> A. Tucker and A. Gupta. </author> <title> Process Control and Scheduling Issues for Multiprogrammed Shared-Memory Multiprocessors. </title> <booktitle> Proc. of the 12th ACM Symp. on Operating System Principles, </booktitle> <month> Dec. </month> <year> 1989, </year> <pages> 159-166. </pages>
Reference-contexts: 2 * Under specific hyperexponential demands and specific parallelism distributions EQ has been observed to have high performance for both uncorrelated and highly correlated workloads when C D is moderate to high [14]. * The spatial equipartitioning (EQS) policy is also shown to have high performance for specific measurement workloads <ref> [39, 20, 8] </ref> and a particular workload that consists of a mixture of application types and has high C D [21, 22]. These results show particular policies to perform well over narrow regions of the parameter space but it is not clear whether or how the various results generalize. <p> The ASP policy has been identified in previous work as a high performance static allocation policy [33]. The FCFS policy is very simple and has been shown to have high performance for specific workloads [37]. Equiallocation policies have been shown to have high performance under various workloads <ref> [39, 14, 20, 8, 33, 21, 22, 18] </ref>. The EQS policy is an idealized spatial equiallocation policy. Finally, 4 we examine the PSAPF policy that was proposed in [15] and shown to have high performance for specific workloads in [15, 13, 1]. <p> Ignoring variations in implementation details, the EQS policy was first defined in <ref> [39] </ref>. PSAPF Preemptive Smallest Available Parallelism First. The central job queue is a preemptive queue that is ordered in ascending order of available job parallelism. Jobs with the same available parallelism are served in first-come-first-serve order.
Reference: [40] <author> R. Vaswani and J. Zahorjan. </author> <title> The Implications of Cache Affinity on Processor Scheduling for Multipro-grammed, Shared Memory Multiprocessors. </title> <booktitle> Proc. of the 13th ACM Symposium on Operating System Principles, </booktitle> <month> October </month> <year> 1991, </year> <pages> 26-40. </pages>
Reference: [41] <author> J. Zahorjan, and C. McCann. </author> <title> Processor Scheduling in Shared Memory Multiprocessors. Performance Evaluation Review 18, </title> <month> 1 (May </month> <year> 1990), </year> <pages> 214-225. </pages>
Reference: [42] <author> S. Zhou, and T. Brecht. </author> <title> Processor-pool-based Scheduling for Large-Scale NUMA Multiprocessors. Performance Evaluation Review 19, </title> <month> 1 (May </month> <year> 1991), </year> <pages> 133-142. 43 </pages>
References-found: 42

