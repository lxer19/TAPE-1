URL: http://www.cse.ogi.edu/~lingliu/courses/cse515/superdb.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/courses/cse515/plan.html
Root-URL: http://www.cse.ogi.edu
Email: calton@cs.columbia.edu  
Phone: (212) 854-8110  
Title: The Superdatabase Architecture: Cooperative Heterogeneous Transactions  
Author: Calton Pu 
Keyword: cooperative heterogeneous transaction processing, heterogeneous concur-rency control, heterogeneous recovery, multidatabase serializability, open systems, database composability.  
Address: New York, NY 10027  
Affiliation: Department of Computer Science Columbia University  
Abstract: We propose the superdatabase (SDB) architecture to support atomic transactions across cooperative heterogeneous databases. The SDB is based on hierarchical composition of element databases (EDBs), enhanced by optimization and distribution. To support heterogeneous crash recovery, an SDB translates different commit agreement protocols without extra messages. To support heterogeneous concurrency control, an SDB groups different kinds of algorithms, such as two-phase locking, timestamps, and optimistic validation methods to guarantee global serializability with little concurrency loss and overhead. Integrating heterogeneous commit protocols, local concurrency control, and local recovery, the SDB consumes very little run-time overhead and few messages. The Harmony prototype implementation of SDB, composed of the Supernova SDB and four different EDBs, and the availability of modern "open system" TP monitors confirm the practicality and usefulness of SDB. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bayer, K. Elhardt, J. Heigert, and A. Reiser. </author> <title> Dynamic timestamp allocation for transactions in database systems. </title> <editor> In H. J. Schneider, editor, </editor> <booktitle> Distributed Data Bases. </booktitle> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: We can use SHRINK (T i ) as the O-element for EDBMSs using two-phase locking. Second, some databases use timestamp-based concurrency control methods. The timestamps used for serialization represent an explicit ordering, so they serve well as O-elements. Timestamp intervals <ref> [1] </ref> or multidimensional timestamps [21] can be passed as O-elements as well. The important thing is to capture the serialization order of committing local transactions. Third, optimistic validation methods also provide an explicit serialization order. <p> In this case, an improved certification algorithm sends all the O-elements together, and receives an answer from the EDBMS confirming or denying their serializability. 4.2.3 Timestamp-Based Algorithms Timestamp-based concurrency control algorithms can be divided into two subgroups: static (e.g., the basic timestamp method [2]) and dynamic (e.g., time-interval <ref> [1] </ref> and multi-dimensional timestamps [21]). The best way to avoid aborts for static methods is to have the SDBMS generate global timestamps and send them with the subtrans-actions. By sending globally ordered timestamps, we can guarantee the synchronization of subtransactions and prevent aborts due to differences in timestamps.
Reference: [2] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> first edition, </address> <year> 1987. </year>
Reference-contexts: The EDBMS should present an explicit serial ordering of its local transactions. This can be obtained in several ways, as explained in Section 3.4. We assume that EDBMSs do not serialize subtransactions into the past. This is satisfied by the recoverability property <ref> [2] </ref>. All of the practical databases are recoverable. For some specific cases, the SDBMS can handle exotic concurrency control methods, but they are beyond the scope of this paper. <p> The SDBMS assumes 3 In the discussion below, references on the Byzantine agreements can be found in several PODC Proceedings; the other protocols are described in the recent book by Bernstein et al. <ref> [2] </ref>. 7 the role of coordinator with respect to EDBMSs with asymmetric agreement protocols. The SDBMS collects one bit of commit/abort information from each asymmetric protocol and returns the decision. Two facts simplify the SDBMS's role in asymmetric protocols. First, we do not modify the protocols in any way. <p> This fact will be used in Section 4.2 to increase global concurrency at the cost of more complex and larger O-elements. The comparison between two O-elements is defined by the usual precede (denoted by ) relation in the partial ordering of local transactions <ref> [2] </ref>. If T 1 T 2 in the local serialization then O-element (T 1 ) O-element (T 2 ). <p> In this case, an improved certification algorithm sends all the O-elements together, and receives an answer from the EDBMS confirming or denying their serializability. 4.2.3 Timestamp-Based Algorithms Timestamp-based concurrency control algorithms can be divided into two subgroups: static (e.g., the basic timestamp method <ref> [2] </ref>) and dynamic (e.g., time-interval [1] and multi-dimensional timestamps [21]). The best way to avoid aborts for static methods is to have the SDBMS generate global timestamps and send them with the subtrans-actions.
Reference: [3] <editor> P.A. Bernstein and R.W. Taylor, editors. </editor> <booktitle> Proceedings of the Fourth International Workshop on High Performance Transaction Systems, Asilomar, </booktitle> <address> California, </address> <month> Septem-ber </month> <year> 1991. </year>
Reference-contexts: Section 4 summarizes the optimizations. The third contribution of SDB architecture is its simplicity and practicality, demonstrated by the implementation of the Harmony prototype at Columbia. Section 5 outlines current implementation status. The feasibility of SDB is further emphasized by the recent availability of "open system" TP monitors <ref> [3] </ref>, such as TopEnd from NCR and Tuxedo/T 1 from USL, capable of integrating different database backends. These TP monitors can be seen as a special case of SDB. <p> While we observe the limitations of standards, we also recognize their importance. For example, the way commercial products such as TopEnd and Tuxedo/T support heterogeneous backends is to follow the X/Open standard interface between the TP monitors and the backend resource managers <ref> [3] </ref>. Standards simplify the system integration work. But as we explore advanced technology inevitably we find heterogeneity. Therefore, we need to push the research on heterogeneity and interoperability further. Indeed, two reasons make the SDB work complementary to standards. <p> Nevertheless, we believe that these requirements, mild for distributed databases, can be feasibly incorporated into current and future database systems. This is confirmed by our own implementation experience (Section 5) and the current generation of open system TP Monitors <ref> [3, 32] </ref>. 2 The existence of a commit protocol implies some sophistication in recovery algorithms. This is the same for both HeTP and homogeneous distributed TP. 6 3.3 Hierarchical Recovery 3.3.1 Heterogeneous Hierarchical Commit The usual model of a distributed transaction contains a coordinator and a set of subtrans-actions. <p> Dan Duchamp of Columbia University, who wrote the original Camelot transaction manager. The current working version of Jake is about 900 lines of code, which has been rewritten three times. It is interesting to note that the successor to Camelot, the Encina TP monitor produced by Transarc Corp. <ref> [3] </ref>, is composable from the commit protocol point of view by supporting the X/Open standard. 21 Transaction Manager Tuxedo, TopEnd, Transarc XA Interface ? ? ? Resource Manager Sybase Informix Oracle 5.4 Evaluation The implementation of Supernova/Ultrix and the four EDBMSs showed the feasibility of the SDB architecture. <p> This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases [11]. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc <ref> [3] </ref>. Figure 3 shows the structure of these systems that follow the X/Open standard interface. For comparison with Figure 1, we have turned the X/Open figure 90 degrees, with the transaction manager at the top rather than on the side. <p> The marketplace has shown the advantages of changing the interface to achieve the interoperability offered by such EDBMSs. Many database backends such as Informix and Sybase export their two-phase commit protocol through the standard X/Open interface, so modern TP monitors such as TopEnd and Tuxedo/T <ref> [3] </ref> can integrate them as an SDBMS. Therefore, cooperative HeTP has been established as a viable and desirable way to do distributed transaction processing. We note this trend is not in opposition to multidatabase work (which assumes no cooperation), but complementary.
Reference: [4] <author> B. N. Bershad, D. T. Ching, E. D. Lazowska, J. Sanislo, and M. Schwartz. </author> <title> A remote procedure call facility for interconnecting heterogeneous computer systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(8):880-894, </volume> <month> August </month> <year> 1987. </year> <note> To be reprinted in Distributed Processing: Concepts and Structures, </note> <editor> ed. A.L. Ananda and B. Srinivasan, </editor> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The first contribution of SDB architecture is solving a difficult algorithmic heterogeneity problem. In contrast to data format heterogeneity (e.g., from EBCDIC to ASCII byte representation) and protocol heterogeneity (e.g., message translation in heterogeneous RPC <ref> [4] </ref>), where static translation suffices, algorithmic heterogeneity requires run-time dynamic integration of different programs implementing algorithms with varied data structures. The main HDB algorithmic heterogeneity problem is the integration of different concurrency control methods. <p> For example, Byzantine agreement protocols include node id in the message. In this case, the SDBMS may need to parse and generate messages correctly. Fortunately, this protocol heterogeneity problem is restricted to specific parameter translation, similar in nature but simpler than heterogeneous RPC <ref> [4] </ref>. This translation guarantees that the subtransactions of a supertransaction will either all commit or all abort. We first observe that the SDBMS does not change the commit protocols, so the correctness of each commit protocol guarantees that each subtransaction agrees with the SDBMS on the transaction outcome.
Reference: [5] <author> Y. Breitbart and A. Silberschatz. </author> <title> Multidatabase update issues. </title> <booktitle> In Proceedings of 1988 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 135-142, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Therefore, a major objection to the cooperative approach (the lack of EDBMSs that are cooperative) is being removed by the marketplace. One class of MDB work uses a form of group paradigm [9], making each site a group for synchronization. Breitbart et al. <ref> [5] </ref> propose the notion of site graph to guarantee global consistency. Site graphs limit transaction concurrency severely: their MDB may run one transfer transaction but not two concurrently between the same databases. Salem et al [27] have extended altruistic locking similarly. More recently, Vidyankar [33] used tree-structured site locking (non-two-phase).
Reference: [6] <author> Y. Breitbart, A. Silberschatz, and G. Thompson. </author> <title> Reliable transaction management in a multidatabase system. </title> <booktitle> In Proceedings of 1990 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 215-224, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In all cases the amount of concurrency allowed between sites is low. Another thrust of MDB research emphasizes asynchrony (sometimes called autonomy). One example of the asynchrony work is Breitbart et al. <ref> [6] </ref>, where they study the difficulties of implementing distributed transactions without a commit protocol. There are other difficult problems in the integration of autonomous MDBs, such as stronger notions of autonomy and weaker notions of consistency. <p> organizes an agreement protocol with subtransactions to guarantee a unanimous decision. (Of the published protocols, two-phase commit is the most commonly used for its low message overhead.) Without agreement protocols, it is very difficult to maintain the atomicity property of the supertransaction, since one sub-transaction may commit while another aborts <ref> [6] </ref>. From the HeTP point of view, the important observation is that the need for agreement on the transaction outcome is due to distribution, not heterogeneity. The distributed database system R fl [22] supports a tree-structured model of computation that refines the above flat coordinator/subtransactions model.
Reference: [7] <author> S. Ceri and S. Owicki. </author> <title> On the use of optimistic methods for concurrency control in distributed databases. </title> <booktitle> In Proceedings of the Sixth Berkeley Workshop on Distributed Data Management and Computer Networks, </booktitle> <pages> pages 117-129, </pages> <institution> University of California, Berkeley, </institution> <month> February </month> <year> 1982. </year> <institution> Lawrence Berkeley Laboratory. </institution>
Reference-contexts: The important thing is to capture the serialization order of committing local transactions. Third, optimistic validation methods also provide an explicit serialization order. Kung and Robinson [18] assign a serial transaction number after the write phase, which can be used directly as O-element. Ceri and Owicki <ref> [7] </ref> proposed a distributed algorithm in which a two-phase commit follows a successful validation. Taking a timestamp from a Lamport-style global clock [19] at commit time will capture the serial order of transactions. <p> Unfortunately, consistent replication is expensive and this approach then loses the low-overhead advantage of hierarchical SDB. Alternatively, we can circulate the concurrency control certification information among several sites. This approach is similar to existing distributed optimistic validation algorithms (for example, see <ref> [7] </ref>). Again, higher message overhead will be incurred. A reasonable compromise 18 would be a central root SDBMS for normal certification. Periodic checkpoints send the global wait-for-graph (history of O-vectors) to backup sites. If the root node crashes, one of the backups will take over to reconstruct the situation.
Reference: [8] <editor> W.W. Chu, editor. </editor> <booktitle> Special Issue on Distributed Database Systems, volume 75:5 of Proceedings of the IEEE. </booktitle> <publisher> IEEE Press, </publisher> <month> May </month> <year> 1987. </year>
Reference-contexts: The degree of heterogeneity, global atomicity, amount of concurrency preserved, and the low overhead of Supernova compares favorably with the HeTP systems reported in the literature <ref> [8, 11, 16, 26] </ref>. This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases [11]. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc [3].
Reference: [9] <author> A. El Abbadi and S. Toueg. </author> <title> The group paradigm for concurrency control protocol. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(3) </volume> <pages> 376-386, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Therefore, a major objection to the cooperative approach (the lack of EDBMSs that are cooperative) is being removed by the marketplace. One class of MDB work uses a form of group paradigm <ref> [9] </ref>, making each site a group for synchronization. Breitbart et al. [5] propose the notion of site graph to guarantee global consistency. Site graphs limit transaction concurrency severely: their MDB may run one transfer transaction but not two concurrently between the same databases.
Reference: [10] <author> A. Elmagarmid and W. Du. </author> <title> A paradigm for concurrency control in heterogeneous distributed database systems. </title> <booktitle> In Proceedings of the Sixth International Conference on Data Engineering, </booktitle> <pages> pages 37-46, </pages> <address> Los Angeles, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: Finally, their fifth condition refers to global deadlock detection, a problem for further research. A recent example of cooperative HeTP is the Pre-Specified Order approach by El-magarmid and Du <ref> [10] </ref>. Their idea is to give to the concurrency control mechanism a pre-specified order for each transaction submitted. This is a generalization of the basic-timestamp ordering. Their hierarchical structure can be seen as an instance of the SDB architecture, with a conservative Pre-Specified Order concurrency control throughout the system. <p> The transaction serialization information is larger and more diverse than the one-bit commit/abort decision. The SDB architecture does not impose a specific concurrency control algorithm for ensuring global serializability. For example, the Pre-Specified Order approach by Elmagarmid and Du <ref> [10] </ref> can be seen as a pessimistic way to achieve that goal. In this section, we describe an optimistic algorithm that minimizes the amount of information passed.
Reference: [11] <editor> A.K. Elmagarmid and C. Pu, editors. </editor> <title> Special Issue on Heterogeneous Databases, </title> <journal> volume 22:3 of ACM Computing Surveys. ACM, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: The degree of heterogeneity, global atomicity, amount of concurrency preserved, and the low overhead of Supernova compares favorably with the HeTP systems reported in the literature <ref> [8, 11, 16, 26] </ref>. This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases [11]. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc [3]. <p> This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases <ref> [11] </ref>. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc [3]. Figure 3 shows the structure of these systems that follow the X/Open standard interface.
Reference: [12] <author> K.P. Eswaran, J.N. Gray, R.A. Lorie, </author> <title> and I.L. Traiger. The notions of consistency and predicate locks in a database system. </title> <journal> Communications of ACM, </journal> 19(11) 624-633, November 1976. <volume> 25 </volume>
Reference-contexts: We start with two-phase locking. Transactions acquire all locks in a growing phase, and release them during a shrinking phase, in which no additional locks may be acquired. The moment between the growing phase phase and shrinking phase is called the transaction's lock point. Eswaran et al. <ref> [12] </ref> showed that two-phase locking guarantees serializability of transactions because SHRINK (T i ), a timestamp taken at the lock point of T i indicates T i 's place in the serialization regarding all transactions. We can use SHRINK (T i ) as the O-element for EDBMSs using two-phase locking.
Reference: [13] <author> D. Georgakopoulos and M. Rusinkiewicz. </author> <title> On serializability of multidatabase trans-actions through forced local conflitcs. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Since the write phase has yet to start, all following transactions will have a later timestamp. 6 One concern from the practical side is the need to modify existing EDBMSs to make the O-elements explicit. Georgakopoulos and Rusinkiewicz <ref> [13] </ref> have shown that it is possible to produce O-elements without modifying the EDBMS. Their idea is called forced local conflicts.
Reference: [14] <author> V. Gligor and G.L. Luckenbaugh. </author> <title> Interconnecting heterogeneneous database management systems. </title> <journal> Computer, </journal> <volume> 17(1) </volume> <pages> 33-43, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: This is the expected amount of cooperation in traditional distributed database work such as R fl [22]. The SDB architecture is cooperative. In this context, Gligor and Luckenbaugh <ref> [14] </ref> have discussed the recovery problem in HDBs, without describing specific algorithms. We discuss concrete recovery algorithms in Section 3.3.1. Gligor and Popescu-Zeletin [15] studied concurrency control in HDBs. They specified five conditions which should be satisfied by concurrency control mechanisms for HDBs.
Reference: [15] <author> V. Gligor and R. Popescu-Zeletin. </author> <title> Concurrency control issues in distributed heterogeneous database management systems. </title> <editor> In F.A. Schreiber and W. Litwin, editors, </editor> <booktitle> Distributed Data Sharing Systems, </booktitle> <pages> pages 43-56. </pages> <publisher> North Holland Publishing Company, </publisher> <year> 1985. </year> <booktitle> Proceedings of the International Symposium on Distributed Data Sharing Systems. </booktitle>
Reference-contexts: The SDB architecture is cooperative. In this context, Gligor and Luckenbaugh [14] have discussed the recovery problem in HDBs, without describing specific algorithms. We discuss concrete recovery algorithms in Section 3.3.1. Gligor and Popescu-Zeletin <ref> [15] </ref> studied concurrency control in HDBs. They specified five conditions which should be satisfied by concurrency control mechanisms for HDBs. The SDB shares conditions 1 and 3, which say that at each local element database (EDB), we have local serializability and run only one subtransaction per global transaction. <p> When we use "transaction", it is with respect to the database in which the transaction is running. Finally, we assume a supertransaction is translated into no more than one subtransaction for each EDB. This is a standard assumption made both in HeTP <ref> [15] </ref> and R fl . 5 3.2 Tree-Structured Superdatabase We start with a tree-structured SDB for two reasons. First, hierarchical organization minimizes the amount of data transfer in both size and number of messages.
Reference: [16] <author> A. Gupta, </author> <title> editor. Integration of Information Systems: Bridging Heterogeneous Databases. </title> <publisher> IEEE Press, </publisher> <year> 1989. </year>
Reference-contexts: The degree of heterogeneity, global atomicity, amount of concurrency preserved, and the low overhead of Supernova compares favorably with the HeTP systems reported in the literature <ref> [8, 11, 16, 26] </ref>. This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases [11]. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc [3].
Reference: [17] <author> D.R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Since this is a garbage collection problem, we can use simple heuristics, such as "when memory runs out, cut the history by half", or as far as SA allows. We note the similarity between this bound and the Global Virtual Time (GVT) in Time-Warp systems <ref> [17] </ref>. In Time-Warp style optimistic computations, once all nodes have passed GVT, the history before GVT can be garbage collected. Similarly, in SDB when all EDBs have passed O-vector (T 0 ), the history before it can be released. Finally we analyze the message overhead of certification.
Reference: [18] <author> H. T. Kung and John T. Robinson. </author> <title> On optimistic methods for concurrency control. </title> <journal> Transactions on Database Systems, </journal> <volume> 6(2) </volume> <pages> 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Timestamp intervals [1] or multidimensional timestamps [21] can be passed as O-elements as well. The important thing is to capture the serialization order of committing local transactions. Third, optimistic validation methods also provide an explicit serialization order. Kung and Robinson <ref> [18] </ref> assign a serial transaction number after the write phase, which can be used directly as O-element. Ceri and Owicki [7] proposed a distributed algorithm in which a two-phase commit follows a successful validation.
Reference: [19] <author> L. Lamport. </author> <title> Time, clocks and ordering of events in a distributed system. </title> <journal> Communications of ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Kung and Robinson [18] assign a serial transaction number after the write phase, which can be used directly as O-element. Ceri and Owicki [7] proposed a distributed algorithm in which a two-phase commit follows a successful validation. Taking a timestamp from a Lamport-style global clock <ref> [19] </ref> at commit time will capture the serial order of transactions. Since the write phase has yet to start, all following transactions will have a later timestamp. 6 One concern from the practical side is the need to modify existing EDBMSs to make the O-elements explicit.
Reference: [20] <author> T. Landers and R.L. Rosenberg. </author> <title> An overview of MULTIBASE. </title> <editor> In H.J. Schneider, editor, </editor> <booktitle> Distributed Data Bases. </booktitle> <publisher> North Holland Publishing Company, </publisher> <month> September </month> <year> 1982. </year> <booktitle> Proceedings of the Second International Symposium on Distributed Data Bases. </booktitle>
Reference-contexts: Early research on integrated heterogeneous databases has 2 been largely limited to query-only systems such as Multibase and Mermaid. Multi--base <ref> [20] </ref> is a retrieve-only system, developed at Computer Corporation of America. Through the DAPLEX functional language, Multibase provides uniform access to a CODASYL database and a hierarchical database. The focus of Multibase is on query optimization and reconciliation of data, not consistent update across databases.
Reference: [21] <author> P.J. Leu and B. Bhargava. </author> <title> Multidimensional timestamp protocols for concurrency control. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(12):1238-1253, </volume> <month> Decem-ber </month> <year> 1987. </year>
Reference-contexts: We can use SHRINK (T i ) as the O-element for EDBMSs using two-phase locking. Second, some databases use timestamp-based concurrency control methods. The timestamps used for serialization represent an explicit ordering, so they serve well as O-elements. Timestamp intervals [1] or multidimensional timestamps <ref> [21] </ref> can be passed as O-elements as well. The important thing is to capture the serialization order of committing local transactions. Third, optimistic validation methods also provide an explicit serialization order. <p> case, an improved certification algorithm sends all the O-elements together, and receives an answer from the EDBMS confirming or denying their serializability. 4.2.3 Timestamp-Based Algorithms Timestamp-based concurrency control algorithms can be divided into two subgroups: static (e.g., the basic timestamp method [2]) and dynamic (e.g., time-interval [1] and multi-dimensional timestamps <ref> [21] </ref>). The best way to avoid aborts for static methods is to have the SDBMS generate global timestamps and send them with the subtrans-actions. By sending globally ordered timestamps, we can guarantee the synchronization of subtransactions and prevent aborts due to differences in timestamps.
Reference: [22] <author> B. Lindsay, L.M. Haas, C. Mohan, P.F. Wilms, and R.A. Yost. </author> <title> Computation and communication in R fl : a distributed database manager. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 24-38, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Second, during the transition period from one technology to another, both the old and the new need to be running side by side; this requires the degree of integration beyond adherence to a standard. 2.2 Other Works in HDB R* <ref> [22] </ref> and ingres/star [23] have demonstrated physical distribution of fully functional homogeneous databases. Early research on integrated heterogeneous databases has 2 been largely limited to query-only systems such as Multibase and Mermaid. Multi--base [20] is a retrieve-only system, developed at Computer Corporation of America. <p> This is the expected amount of cooperation in traditional distributed database work such as R fl <ref> [22] </ref>. The SDB architecture is cooperative. In this context, Gligor and Luckenbaugh [14] have discussed the recovery problem in HDBs, without describing specific algorithms. We discuss concrete recovery algorithms in Section 3.3.1. Gligor and Popescu-Zeletin [15] studied concurrency control in HDBs. <p> From the HeTP point of view, the important observation is that the need for agreement on the transaction outcome is due to distribution, not heterogeneity. The distributed database system R fl <ref> [22] </ref> supports a tree-structured model of computation that refines the above flat coordinator/subtransactions model. Subtransactions in R fl are organized in a hierarchy, and the two-phase commit protocol is extended to cover the tree structure. At each level, the parent transaction serves as the coordinator.
Reference: [23] <author> R. McCord. INGRES/STAR: </author> <title> a distributed heterogeneous relational DBMS. </title> <booktitle> Vendor Presentation in SIGMOD, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: Second, during the transition period from one technology to another, both the old and the new need to be running side by side; this requires the degree of integration beyond adherence to a standard. 2.2 Other Works in HDB R* [22] and ingres/star <ref> [23] </ref> have demonstrated physical distribution of fully functional homogeneous databases. Early research on integrated heterogeneous databases has 2 been largely limited to query-only systems such as Multibase and Mermaid. Multi--base [20] is a retrieve-only system, developed at Computer Corporation of America.
Reference: [24] <author> C. Pu and S.W. Chen. </author> <title> Implementation of a prototype superdatabase. </title> <booktitle> In Proceedings of the Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Alabama, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: In contrast, transaction processing (TP) in HDBs (in short, heterogeneous transaction processing - HeTP) remained a challenge until mid-eighties. This paper describes the superdatabase (SDB) proposal [25] for HeTP, summarizes our implementation experience <ref> [24] </ref>, and evaluates the SDB in the context of HeTP evolution since SDB was introduced in 1987. The first contribution of SDB architecture is solving a difficult algorithmic heterogeneity problem.
Reference: [25] <author> Calton Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <editor> In Amar Gupta, editor, </editor> <booktitle> Integration of Information Systems: Bridging Heterogeneous Databases, </booktitle> <pages> pages 150-157. </pages> <publisher> IEEE Press, </publisher> <year> 1989. </year> <booktitle> Also appeared in Proceedings of Fourth International Conference on Data Engineering, 1988, </booktitle> <address> Los Angeles. </address> <month> 26 </month>
Reference-contexts: The work on HDB started in the seventies, focusing mostly on data model translation, query language translation, and schema integration. In contrast, transaction processing (TP) in HDBs (in short, heterogeneous transaction processing - HeTP) remained a challenge until mid-eighties. This paper describes the superdatabase (SDB) proposal <ref> [25] </ref> for HeTP, summarizes our implementation experience [24], and evaluates the SDB in the context of HeTP evolution since SDB was introduced in 1987. The first contribution of SDB architecture is solving a difficult algorithmic heterogeneity problem. <p> The overhead in Supernova is not measurable under these circumstances. Our current efforts focus on Harmony interfaces and portability, in particular, the addition of new protocols such as X/Open. 6 Conclusion When the superdatabase (SDB) architecture was first proposed <ref> [25] </ref> in 1986, the main objection to it was the need to change the interface to element databases (EDBs) to make the EDBMSs composable by the SDBMS. The marketplace has shown the advantages of changing the interface to achieve the interoperability offered by such EDBMSs.
Reference: [26] <editor> D.S. Reiner, editor. </editor> <title> Special Issue on Database Connectivity, </title> <journal> volume (13):2 of Quar--terly Bulletin of the IEEE Computer Socienty Technical Committee on Data Engineering. IEEE Computer Society, </journal> <month> June </month> <year> 1990. </year>
Reference-contexts: Although language and model translation as well as schema integration are important problems, we refer the reader to a recent survey by Sheth and Larson [28]. In addition, a recent issue of Data Engineering Bulletin on Database Connectivity <ref> [26] </ref> is devoted to the progress made in the area. <p> The degree of heterogeneity, global atomicity, amount of concurrency preserved, and the low overhead of Supernova compares favorably with the HeTP systems reported in the literature <ref> [8, 11, 16, 26] </ref>. This result is relevant given the relatively modest implementations reported in a recent special issue of Computing Surveys on Heterogeneous Databases [11]. Another demonstration of SDB architecture is the availability of open system commercial TP monitors such as TopEnd, Tuxedo/T, and Transarc [3].
Reference: [27] <author> K. Salem and H. Garcia-Molina. </author> <title> Altruistic locking: A strategy for coping with long lived transactions. </title> <type> Technical Report CS-TR-087-87, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> April </month> <year> 1987. </year>
Reference-contexts: Breitbart et al. [5] propose the notion of site graph to guarantee global consistency. Site graphs limit transaction concurrency severely: their MDB may run one transfer transaction but not two concurrently between the same databases. Salem et al <ref> [27] </ref> have extended altruistic locking similarly. More recently, Vidyankar [33] used tree-structured site locking (non-two-phase). All the proposals use site as a group; the difference is on how they order global transactions across groups. In all cases the amount of concurrency allowed between sites is low.
Reference: [28] <author> A. Sheth and J. Larson. </author> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Mermaid [31] has been developed at System Development Corporation. Unlike Multibase, Mermaid supports the relational view of data directly, through the ARIEL query language. Although language and model translation as well as schema integration are important problems, we refer the reader to a recent survey by Sheth and Larson <ref> [28] </ref>. In addition, a recent issue of Data Engineering Bulletin on Database Connectivity [26] is devoted to the progress made in the area.
Reference: [29] <author> A.Z. Spector, D.S. Thompson, R.F. Pausch, Eppinger J.L., D. Duchamp, R.P. Draves, D.S. Daniels, and J.J. Bloch. Camelot: </author> <title> A distributed transaction facility for Mach and the Internet an interim report. </title> <type> Technical Report CMU-CS-87-129, </type> <institution> Computer Science Department, Carnegie-Mellon University, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Current commercial version of Ingres already offers two-phase commit (as part of Ingres/Star). Some other products such as Oracle 7.0 already do the same [32]. Two candidates for "open" commit protocols are the LU 6.2 and the X/Open proposed standard. Camelot <ref> [29] </ref> is a reliable distributed transaction library developed at CMU to run on top of the Mach operating system. A Camelot application is composed of servers that support transactions invoked by clients.
Reference: [30] <author> M. Stonebraker, </author> <title> editor. </title> <journal> Special Issue on Database Prototype Systems, volume 2:1 of IEEE Transactions on Knowledge and Data Engineering. IEEE Computer Society, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: The total implementation effort of Harmony prototype is similar in magnitude to several of the prototypes reported in a recent special issue of IEEE Transactions on Knowledge and Data Engineering <ref> [30] </ref>. The degree of heterogeneity, global atomicity, amount of concurrency preserved, and the low overhead of Supernova compares favorably with the HeTP systems reported in the literature [8, 11, 16, 26].
Reference: [31] <author> M. Templeton, D. Brill, S. K. Dao, E. Lund, P. Ward, Chen A.L.P., and R. MacGre-gor. </author> <title> MERMAID | a frontend to distributed heterogeneous databases. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 75(5) </volume> <pages> 695-708, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Multi--base [20] is a retrieve-only system, developed at Computer Corporation of America. Through the DAPLEX functional language, Multibase provides uniform access to a CODASYL database and a hierarchical database. The focus of Multibase is on query optimization and reconciliation of data, not consistent update across databases. Mermaid <ref> [31] </ref> has been developed at System Development Corporation. Unlike Multibase, Mermaid supports the relational view of data directly, through the ARIEL query language. Although language and model translation as well as schema integration are important problems, we refer the reader to a recent survey by Sheth and Larson [28].
Reference: [32] <author> G. Thomas, G.R. Thompson, C-W. Chung, E. Barkmeyer, F. Carter, M. Templeton, S. Fox, and B. Hartman. </author> <title> Heterogeneous distributed database systems for production use. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 237-266, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Nevertheless, we believe that these requirements, mild for distributed databases, can be feasibly incorporated into current and future database systems. This is confirmed by our own implementation experience (Section 5) and the current generation of open system TP Monitors <ref> [3, 32] </ref>. 2 The existence of a commit protocol implies some sophistication in recovery algorithms. This is the same for both HeTP and homogeneous distributed TP. 6 3.3 Hierarchical Recovery 3.3.1 Heterogeneous Hierarchical Commit The usual model of a distributed transaction contains a coordinator and a set of subtrans-actions. <p> The total number of lines changed was about 2000 (out of a total of 100,000 lines). Current commercial version of Ingres already offers two-phase commit (as part of Ingres/Star). Some other products such as Oracle 7.0 already do the same <ref> [32] </ref>. Two candidates for "open" commit protocols are the LU 6.2 and the X/Open proposed standard. Camelot [29] is a reliable distributed transaction library developed at CMU to run on top of the Mach operating system. A Camelot application is composed of servers that support transactions invoked by clients.
Reference: [33] <author> K. Vidyasankar. </author> <title> A non-two-phase locking protocol for global concurrency control in distributed heterogeneous database systems. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, presumed 1990. </journal> <volume> Forthcoming. </volume> <pages> 27 </pages>
Reference-contexts: Breitbart et al. [5] propose the notion of site graph to guarantee global consistency. Site graphs limit transaction concurrency severely: their MDB may run one transfer transaction but not two concurrently between the same databases. Salem et al [27] have extended altruistic locking similarly. More recently, Vidyankar <ref> [33] </ref> used tree-structured site locking (non-two-phase). All the proposals use site as a group; the difference is on how they order global transactions across groups. In all cases the amount of concurrency allowed between sites is low. Another thrust of MDB research emphasizes asynchrony (sometimes called autonomy).
References-found: 33

