URL: http://www.cs.unm.edu/~kapur/abstracts/fsttcs97.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/fsttcs97.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  subu@mti.sgi.com  
Title: Mechanizing Verification of Arithmetic Circuits: SRT Division  
Author: Deepak Kapur and M. Subramaniam ?? 
Note: 2 Functional Verification  
Address: New York, Albany, NY 12222  Mountain View, CA 94040  
Affiliation: 1 Computer Science Department, State University of  Group, Silicon Graphics Inc.,  
Abstract: The use of a rewrite-based theorem prover for verifying properties of arithmetic circuits is discussed. A prover such as Rewrite Rule Laboratory (RRL) can be used effectively for establishing number-theoretic properties of adders, multipliers and dividers. Since verification of adders and multipliers has been discussed elsewhere in earlier papers, the focus in this paper is on a divider circuit. An SRT division circuit similar to the one used in the Intel Pentium processor is mechanically verified using RRL. The number-theoretic correctness of the division circuit is established from its equational specification. The proof is generated automatically, and follows easily using the inference procedures for contextual rewriting and a decision procedure for the quantifier-free theory of numbers (Presburger arithmetic) already implemented in RRL. Additional enhancements to rewrite-based provers such as RRL that would further facilitate verifying properties of circuits with structure similar to that of the SRT division circuit are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.E. Bryant, </author> <title> Bit-level Analysis of an SRT Divider Circuit. </title> <type> Tech. Rep. </type> <institution> CMU-CS-95-140, Carnegie Mellon University, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits [18, 2, 4, 13]. Bryant <ref> [1] </ref> discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit.
Reference: 2. <author> E.M. Clarke, S.M. German and X. Zhao, </author> <title> "Verifying the SRT division algorithm using theorem proving techniques," </title> <booktitle> Proc. Computer Aided Verification, 8th Intl. Conf. </booktitle> - <address> CAV'96, New Brunswick, July/August 1996, </address> <publisher> Springer LNCS 1102 (eds. Alur and Henzinger), </publisher> <pages> 111-122. </pages>
Reference-contexts: In this paper, we discuss how RRL can be used for reasoning about SRT division circuits. After reading <ref> [2] </ref> and [18], we first suspected that considerable user interaction with and guidance to RRL may be needed to verify the main properties of the circuit. <p> After reading [2] and [18], we first suspected that considerable user interaction with and guidance to RRL may be needed to verify the main properties of the circuit. The reported use of Mathematica and Maple in <ref> [2, 4] </ref> for reasoning about inequalities and real numbers, as well as the use of dependent types, table data structure, and other higher order features in [18] initially discouraged us from attempting a mechanical verification of the division circuit using RRL. <p> We subsequently discovered to our pleasant surprise that the proof reported in <ref> [2] </ref> could be easily found using RRL without any user guidance; a brief sketch of that proof is given in [5]. In fact, the mechanization of that proof was the easiest to do in RRL in contrast to the proofs of adders and multipliers in [8, 7]. <p> Later, we contrast this proof with our earlier proof attempt as well as proofs in <ref> [2, 18] </ref>. Four major features seemed to have contributed to RRL being effective in mechanization attempts for hardware verification. 1. Fast contextual rewriting and reasoning about equality [23]. 2. <p> The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in <ref> [4, 2, 18] </ref>. It is assumed that a normalization circuit for handling signs and exponents is correct. <p> This reduces the complexity of the quotient selection table, as well as allows the multiplication and the subtraction stage of an iteration to be overlapped with the quotient selection stage of a successive iteration. The radix 4 SRT divider in this paper uses the redundant signed-digit representation <ref> [2; 2] </ref>. 1/3 1 5/3 7/3 3 11/3 13/3 5 Divisor 1/3D 4/3D 8/3D qj = (0, 1) qj = (1, 2) 0 Remainder Shifted Partial Fig. 1. <p> The shifted partial remainder and the divisor form the axes of the plot which illustrates the shifted partial remainder ranges in which a quotient digit can be selected, without violating the bounds on the next partial remainder. The P-D plot for a radix 4 quotient with redundant digit set <ref> [2; 2] </ref> is given in Figure 1. As the reader would notice, when the partial remainder is in the range [5=3D; 8=3D], the quotient digit 2 is selected. The shaded regions represent quotient digits overlaps where more than one quotient digits selection is feasible. <p> The entries in the table are for the cases of the shifted truncated partial remainder and truncated divisor pairs which are not supposed to arise during the computations. 2.4 Divider Circuit A radix 4 SRT divider circuit using the signed digit representation <ref> [2; 2] </ref> is given in Figure 2. The registers divisor, remainder in the circuit hold the value of the divisor and the successive partial remainders respectively. <p> The specification defines nextqdigit on 768 pairs of indices. In our first proof attempt of the above SRT circuit as sketched in [5], we followed an approach similar to the one taken in <ref> [2] </ref> for specifying the quotient selection table. The table in that proof is not explicitly represented but is rather abstracted as a predicate defined using six boundary values denoting the endpoints of the partial remainder ranges for the choice of the five quotient digits [2; 2]. <p> The table in that proof is not explicitly represented but is rather abstracted as a predicate defined using six boundary values denoting the endpoints of the partial remainder ranges for the choice of the five quotient digits <ref> [2; 2] </ref>. For example, the quotient digit 2 is chosen whenever the partial remainder is in the range [b 1 ; b 2 ). <p> Similarly, other boundary values are specified. RRL was successful in obtaining a proof similar to the one reported in <ref> [2] </ref>. That proof has fewer cases but reasoning about each case is complex and more tedious, taking more cpu time, in contrast to the proof discussed later which has more cases but each case can be easily proved. <p> It establishes that the division circuit would converge to a correct quotient, and would not overflow. As discussed in section 2, to ensure this for a radix 4 SRT divider with a redundant quotient digit representation <ref> [2; 2] </ref>, it is necessary that the successive partial remainders be bounded as: 2=3 fl divisor P i 2=3 fl divisor: Since the partial remainder computation in every iteration is dependent on the quotient digit selected, this invariant also establishes the correctness of the quotient selection table based on the shifted <p> It is used by the prover for generating case analysis. For those pairs of truncated estimates used as indices to select a quotient digit in the range <ref> [2; 2] </ref>, the property that the partial remainder in the next iteration remains within the bounds, follows from the property that the partial remainder in the previous iteration is within the bounds. <p> A major noticeable difference between this proof and our earlier proof reported in [5] (as well as the proof in <ref> [2] </ref>) is that the second invariant is proved directly without using any assumptions. In contrast, the second invariant relied on two assumptions in our earlier proof, much like the proof in [2], These assumptions|the output of GALU is the truncation of the output of DALU, and the output of GALU along <p> major noticeable difference between this proof and our earlier proof reported in [5] (as well as the proof in <ref> [2] </ref>) is that the second invariant is proved directly without using any assumptions. In contrast, the second invariant relied on two assumptions in our earlier proof, much like the proof in [2], These assumptions|the output of GALU is the truncation of the output of DALU, and the output of GALU along with the truncated divisor select proper quotient digits from the quotient selection table|first had to be manually identified, and then proved separately, thus making the proof interactive. <p> In the above proof, these properties are automatically derived, and appropriately used to establish the second key invariant. Additionally, the new proof establishes the completeness of the indices of the table in [20]. This in contrast to our earlier proof (and the proof in <ref> [2] </ref>) where the rows in the table of [20] implicitly extend in both directions with the out-of-bounds values. 5.3 Detecting Errors in Quotient Digit Selection Table Despite our careful transcription of the table from [20], two errors were made in the table specification that was input into RRL. <p> But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits <ref> [18, 2, 4, 13] </ref>. Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. <p> Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. As reported in <ref> [2] </ref>, German and Clarke [4] formalized Taylor's description of SRT division circuit [20] as a set of algebraic relations on the real numbers. According to them, most of the hardware for the SRT algorithm could be described using linear inequalities. <p> They used Maple, a computer algebra system, to prove properties of the SRT circuit by reasoning about linear inequalities using its Simplex algorithm package. 6 We are however also guilty of not making the proof even simpler by using fractions instead of integers. This formalization was subsequently improved in <ref> [2] </ref> by Clarke, German and Zhao using the language of Analytica, a theorem prover built on top of Mathe-matica, another commercially available computer algebra system. To quote the authors, "Analytica is the first theorem prover to use symbolic computation techniques in a major way. ... <p> Perhaps, that is why Clarke et al had to use Analytica using Mathematica algorithms for symbolic manipulation and inequality reasoning, and the Analytica subpart built on Mathematica for logical reasoning. Even though it is claimed in <ref> [2] </ref> that the proof is "fully automatic" (p. 111 in [2]), the proof (especially, the proof of the second invariant regarding the boundedness of partial remainders) had to be decomposed manually and the two assumptions had to be discharged manually. <p> Perhaps, that is why Clarke et al had to use Analytica using Mathematica algorithms for symbolic manipulation and inequality reasoning, and the Analytica subpart built on Mathematica for logical reasoning. Even though it is claimed in <ref> [2] </ref> that the proof is "fully automatic" (p. 111 in [2]), the proof (especially, the proof of the second invariant regarding the boundedness of partial remainders) had to be decomposed manually and the two assumptions had to be discharged manually. Our first proof attempt discussed in [5] was essentially an exercise to determine how much of the Analytica proof [2] could <p> in <ref> [2] </ref>), the proof (especially, the proof of the second invariant regarding the boundedness of partial remainders) had to be decomposed manually and the two assumptions had to be discharged manually. Our first proof attempt discussed in [5] was essentially an exercise to determine how much of the Analytica proof [2] could be done automatically by RRL without having to use any symbolic computation algorithms of computer algebra systems. We mimiced the proof in [2] but making data dependency of various circuit components explicit on different data paths, as well as by identifying different assumptions made in the proof reported in <p> Our first proof attempt discussed in [5] was essentially an exercise to determine how much of the Analytica proof <ref> [2] </ref> could be done automatically by RRL without having to use any symbolic computation algorithms of computer algebra systems. We mimiced the proof in [2] but making data dependency of various circuit components explicit on different data paths, as well as by identifying different assumptions made in the proof reported in [2]. <p> We mimiced the proof in <ref> [2] </ref> but making data dependency of various circuit components explicit on different data paths, as well as by identifying different assumptions made in the proof reported in [2]. <p> No extensions had to be made to RRL. Further, the entire proof (including the proof of the second invariant involved over 96 cases) could be done in less than 15 minutes on a Sparc 5 Sun workstation. 7 No timing information is given in <ref> [2] </ref> for their proof using Analytica. A brief comparison of the above proof with the proof reported in [5] based on representing the table using boundary value predicates is discussed: 1. <p> Since the abstract representation of the quotient selection table using bound-ary value predicates in <ref> [5, 2] </ref> just considers the minimum and maximum values of a partial remainder for every quotient digit, thus losing information on other relations among entries, it is possible to certify erroneous tables correct. <p> Each subcase in that proof involves a formula with variables with linear constraints, and the reasoning is not as simple and easy. 4. The above proof of the second invariant is direct without making any assumptions. In our earlier proof (as in the proof in <ref> [2] </ref>), two assumptions had to be made, which were subsequently established. 5. The new proof takes less than 1 minute even with more subcases, in contrast to the earlier proof which took around 15 minutes using the same version of the prover on the same machine. <p> The proof reported in [18] using the PVS system is more general than the above proof as well as the proofs in <ref> [2, 5] </ref>. Its structure is essentially based on an earlier proof of Clarke and German [4]. First, a general theory of SRT division for arbitrary radix r and arbitrary redundant quotient digit range [a; a] is developed. <p> The salient features of the above proof are that 1. the formalization is much simpler than the ones reported in <ref> [2, 18] </ref>, 2. the quotient digit selection table is explicitly specified, in contrast to the specification of the table in [2] in terms of boundary value predicates, an abstraction that a human designer would have to perform, 3. the proof of the second key invariant about the circuit is simpler, making <p> The salient features of the above proof are that 1. the formalization is much simpler than the ones reported in [2, 18], 2. the quotient digit selection table is explicitly specified, in contrast to the specification of the table in <ref> [2] </ref> in terms of boundary value predicates, an abstraction that a human designer would have to perform, 3. the proof of the second key invariant about the circuit is simpler, making fewer assumptions than in the proof reported in [2], 4. the proof finding takes much less resources in contrast to <p> explicitly specified, in contrast to the specification of the table in <ref> [2] </ref> in terms of boundary value predicates, an abstraction that a human designer would have to perform, 3. the proof of the second key invariant about the circuit is simpler, making fewer assumptions than in the proof reported in [2], 4. the proof finding takes much less resources in contrast to other proofs (58 seconds of cpu time on a Sparc5 Sun with 64MB of memory), and 5. possible bugs in the quotient digit selection table can be easily identified.
Reference: 3. <author> M.D. Ercegovac and T. Lang, </author> <title> Division and Square Root: Digit Recurrence Algorithms and Implementations. </title> <publisher> Kluwer, </publisher> <year> 1994. </year>
Reference-contexts: SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature <ref> [20, 15, 16, 3] </ref>. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in [4, 2, 18].
Reference: 4. <author> S. </author> <title> German, Towards Automatic Verification of Arithmetic Hardware. </title> <booktitle> Lecture Notes, </booktitle> <year> 1995. </year>
Reference-contexts: After reading [2] and [18], we first suspected that considerable user interaction with and guidance to RRL may be needed to verify the main properties of the circuit. The reported use of Mathematica and Maple in <ref> [2, 4] </ref> for reasoning about inequalities and real numbers, as well as the use of dependent types, table data structure, and other higher order features in [18] initially discouraged us from attempting a mechanical verification of the division circuit using RRL. <p> The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in <ref> [4, 2, 18] </ref>. It is assumed that a normalization circuit for handling signs and exponents is correct. <p> But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits <ref> [18, 2, 4, 13] </ref>. Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. <p> As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. As reported in [2], German and Clarke <ref> [4] </ref> formalized Taylor's description of SRT division circuit [20] as a set of algebraic relations on the real numbers. According to them, most of the hardware for the SRT algorithm could be described using linear inequalities. <p> The proof reported in [18] using the PVS system is more general than the above proof as well as the proofs in [2, 5]. Its structure is essentially based on an earlier proof of Clarke and German <ref> [4] </ref>. First, a general theory of SRT division for arbitrary radix r and arbitrary redundant quotient digit range [a; a] is developed. Constraints on a quotient digit selection table are identified in terms of r; a and other parameters.
Reference: 5. <author> D. Kapur, </author> <title> "Rewriting, decision procedures and lemma speculation for automated hardware verification," </title> <booktitle> Proc. 10th Intl. Conf. Theorem Proving in Higher Order Logics, LNCS 1275 (eds. Gunter and Felty), </booktitle> <address> Murray Hill, NJ, </address> <month> Aug </month> <year> 1997, </year> <pages> 171-182. </pages>
Reference-contexts: We subsequently discovered to our pleasant surprise that the proof reported in [2] could be easily found using RRL without any user guidance; a brief sketch of that proof is given in <ref> [5] </ref>. In fact, the mechanization of that proof was the easiest to do in RRL in contrast to the proofs of adders and multipliers in [8, 7]. <p> The specification defines nextqdigit on 768 pairs of indices. In our first proof attempt of the above SRT circuit as sketched in <ref> [5] </ref>, we followed an approach similar to the one taken in [2] for specifying the quotient selection table. <p> It is assumed that the divider circuit is initialized appropriately with dividend/4 as the initial partial remainder, and with the initial quotient being zero. 3 nextparrem and nextquot were called, respectively, nrout and nquot in <ref> [5] </ref>. 4 In the circuit, addition/subtraction in GALU and DALU are selected based on the sign of the quotient digit. <p> The functions nextquot and nextparrem could have easily been specified as adding or subtracting based on the sign of the quotient digit, exactly mimicing such selection in the circuit; in fact, that is how nextquot, nextparrem were specified in our first proof attempt <ref> [5] </ref>. The proofs using such specifications can be found by RRL just as easily except that there are more subcases. The above formalization is more compact with the quotient sign not made explicit but instead being part of the quotient digit. <p> A major noticeable difference between this proof and our earlier proof reported in <ref> [5] </ref> (as well as the proof in [2]) is that the second invariant is proved directly without using any assumptions. <p> Our first proof attempt discussed in <ref> [5] </ref> was essentially an exercise to determine how much of the Analytica proof [2] could be done automatically by RRL without having to use any symbolic computation algorithms of computer algebra systems. <p> A brief comparison of the above proof with the proof reported in <ref> [5] </ref> based on representing the table using boundary value predicates is discussed: 1. <p> Since the abstract representation of the quotient selection table using bound-ary value predicates in <ref> [5, 2] </ref> just considers the minimum and maximum values of a partial remainder for every quotient digit, thus losing information on other relations among entries, it is possible to certify erroneous tables correct. <p> Even though the above proof has nearly 800 subcases, the proof of each subcase is much easier and a lot quicker to obtain as a subformula typically involves numeric constants that can be easily simplified and reasoned about. This is in contrast to the proof in <ref> [5] </ref> from the specification of the table using boundary value predicates which has 96 subcases. Each subcase in that proof involves a formula with variables with linear constraints, and the reasoning is not as simple and easy. 4. <p> The proof reported in [18] using the PVS system is more general than the above proof as well as the proofs in <ref> [2, 5] </ref>. Its structure is essentially based on an earlier proof of Clarke and German [4]. First, a general theory of SRT division for arbitrary radix r and arbitrary redundant quotient digit range [a; a] is developed. <p> A related issue is that of automatic generation/speculation of intermediate lemmas, as often behavioral specifications cannot be directly proved from circuit specifications. We have briefly discussed these issues in <ref> [5] </ref> Mechanizing verification of the SRT division circuit highlights additional issues related to representing and reasoning about data structures found useful in describing such circuits. The above proof involves reasoning about numeric constants while dealing with truncated partial remainders, truncated divisors as well as bounds on the partial remainder.
Reference: 6. <author> D. Kapur and X. Nie, </author> <title> "Reasoning about numbers in Tecton," </title> <booktitle> Proc. 8th Intl. Symp. Methodologies for Intelligent Systems, </booktitle> <address> (ISMIS'94), Charlotte, North Carolina, </address> <month> Oc-tober </month> <year> 1994, </year> <pages> 57-70. </pages>
Reference-contexts: Fast contextual rewriting and reasoning about equality [23]. 2. Decision procedures for numbers and freely constructed recursive data structures such as lists and sequences, and most importantly, their effective inte gration with contextual rewriting <ref> [6] </ref>. 3. Cover set method for mechanization of proofs by induction [24], and its integration with contextual rewriting and decision procedures. 4. Intermediate lemma speculation heuristics. In the next section, SRT division algorithm and circuit are informally explained, with a special focus on radix 4 SRT circuit.
Reference: 7. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanically verifying a family of multiplier circuits," </title> <booktitle> Proc. Computer Aided Verification, 8th Intl. Conf. </booktitle> - <address> CAV'96, New Brunswick, July/August 1996, </address> <publisher> Springer LNCS 1102 (eds. </publisher> <editor> Alur and Henzinger), </editor> <year> 1996, </year> <pages> 135-146. </pages>
Reference-contexts: We have also been interested in identifying extensions and enhancements to RRL which would make it better suited for this application. In [8] and <ref> [7] </ref>, we discussed how RRL had been used for verifying ripple-carry, carry-lookahead and carry-save adders, as well as a family of multipliers including Wallace-tree and Dadda multipliers. ? Partially supported by the National Science Foundation Grant no. <p> In fact, the mechanization of that proof was the easiest to do in RRL in contrast to the proofs of adders and multipliers in <ref> [8, 7] </ref>. We have recently found a much simpler and easier proof of the SRT division circuit by explicitly representing the quotient selection table. (It is widely believed that the bug in the Intel Pentium processor was in the quotient selection table.) In this paper, we discuss this new proof.
Reference: 8. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanical verification of adder circuits using powerlists," </title> <institution> Dept. of Computer Science Tech. </institution> <type> Report, </type> <institution> SUNY Albany, </institution> <month> November </month> <year> 1995. </year> <note> Accepted for publication in J. of Formal Methods in System Design. </note>
Reference-contexts: We have also been interested in identifying extensions and enhancements to RRL which would make it better suited for this application. In <ref> [8] </ref> and [7], we discussed how RRL had been used for verifying ripple-carry, carry-lookahead and carry-save adders, as well as a family of multipliers including Wallace-tree and Dadda multipliers. ? Partially supported by the National Science Foundation Grant no. <p> In fact, the mechanization of that proof was the easiest to do in RRL in contrast to the proofs of adders and multipliers in <ref> [8, 7] </ref>. We have recently found a much simpler and easier proof of the SRT division circuit by explicitly representing the quotient selection table. (It is widely believed that the bug in the Intel Pentium processor was in the quotient selection table.) In this paper, we discuss this new proof.
Reference: 9. <author> D. Kapur and M. Subramaniam, </author> <title> "Lemma discovery in automating induction," </title> <booktitle> Proc. Intl. Conf. on Automated Deduction, </booktitle> <editor> CADE-13, LNAI 1104 (eds. McRobbie and Slaney), </editor> <address> New Jersey, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: Currently, RRL implements a simple heuristic for generalizing conjectures by abstracting to new variables, common subexpressions appearing in a conjecture and satisfying certain criteria. New intermediate lemma speculation heuristics have been investigated in <ref> [9, 10] </ref>, and will be implemented, as we consider the intermediate lemma speculation research to be the most critical for automating proofs by induction. 4 Formalizing SRT Division in RRL The SRT divider in Figure 2 is equationally specified in RRL. We first discuss how quotient selection table is axiomatized. <p> The main inference method used was that of contextual rewriting integrated with the linear arithmetic procedure in RRL. No additional mechanism was found necessary. No extensions had to be made to RRL. Further, the entire proof <ref> (including the proof of the second invariant involved over 96 cases) </ref> could be done in less than 15 minutes on a Sparc 5 Sun workstation. 7 No timing information is given in [2] for their proof using Analytica.
Reference: 10. <author> D. Kapur and M. Subramaniam, </author> <title> "Intermediate lemma generation from circuit descriptions," under preparation, </title> <institution> State University of New York, Albany, </institution> <address> NY, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: Currently, RRL implements a simple heuristic for generalizing conjectures by abstracting to new variables, common subexpressions appearing in a conjecture and satisfying certain criteria. New intermediate lemma speculation heuristics have been investigated in <ref> [9, 10] </ref>, and will be implemented, as we consider the intermediate lemma speculation research to be the most critical for automating proofs by induction. 4 Formalizing SRT Division in RRL The SRT divider in Figure 2 is equationally specified in RRL. We first discuss how quotient selection table is axiomatized.
Reference: 11. <author> D. Kapur, and H. Zhang, </author> <title> "An overview of Rewrite Rule Laboratory (RRL)," </title> <journal> J. of Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <year> 1995, </year> <pages> 91-114. </pages>
Reference-contexts: Papers on these attempts have appeared in recent conferences such as CAV and FMCAD. Intrigued by these attempts and results, we decided to try our theorem prover Rewrite Rule Laboratory (RRL) <ref> [11] </ref> for hardware verification, with the main objective of exploring circuits and their properties that can be verified automatically in a push-button mode. We have also been interested in identifying extensions and enhancements to RRL which would make it better suited for this application. <p> The circuit is formalized in Section 4. 3 A Brief Overview of RRL Rewrite Rule Laboratory (RRL) <ref> [11] </ref> is different in its design philosophy from most proof checkers such as PVS, IMP, HOL, Isabelle, NUPRL, LP, in the sense it attempts to perform most inferences automatically without user guidance.
Reference: 12. <author> M. Leeser and J.O'Leary, </author> <title> "Verification of a subtractive radix-2 square root algorithm and implementation," </title> <booktitle> Proc. </booktitle> <address> ICCD'95, </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1995, </year> <pages> 526-531. </pages>
Reference-contexts: We believe that the above formalization as well as proof are much simpler than other formalizations of the related circuit in the literature. 6 Verkest et al [21] discussed a proof of a nonrestoring division algorithm using Boyer and Moore's prover. Lesser and O'Leary <ref> [12] </ref> discussed a circuit of subtractive radix-2 square root using the NuPRL system. Square root and division circuits are considered to be related to each other [20]. But circuits verified in [21, 12] are not based on the SRT method. <p> Lesser and O'Leary [12] discussed a circuit of subtractive radix-2 square root using the NuPRL system. Square root and division circuits are considered to be related to each other [20]. But circuits verified in <ref> [21, 12] </ref> are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits [18, 2, 4, 13].
Reference: 13. <author> P.S. Miner and J.F. Leathrum Jr., </author> <title> "Verification of IEEE compliant subtractive division algorithm," </title> <booktitle> Proc. </booktitle> <address> FMCAD'96, Palo Alto, CA, </address> <year> 1996. </year>
Reference-contexts: But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits <ref> [18, 2, 4, 13] </ref>. Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. <p> As reported in [18], the correctness proof of the table implementation itself took 3 hours of cpu time, with the whole proof taking much longer even with user's help. Miner and Leathrum's work <ref> [13] </ref> is a generalization of the proof in [18]; it formalized a subset of IEEE floating point standard, and uses it to do the proof for floating point arithmetic thus providing a formal link relating the SRT division algorithm, among other things, to the IEEE standard subject to IEEE compliant rounding.
Reference: 14. <author> J Moore, T. Lynch and M. Kaufmann, </author> <title> A Mechanically Checked Proof of the Correctness of the AMD5K86 Floating Point Division Algorithm. CL Inc. </title> <type> Technical Report, </type> <month> March </month> <year> 1996. </year>
Reference-contexts: Moore et al <ref> [14] </ref> reported a proof of correctness of the kernel of a microcoded floating point division algorithm implemented in AMD's 5K86 processor. The algorithm is defined in terms of floating point addition and multiplication. The proof is done using ACL2, a descendant of Boyer and Moore's prover.
Reference: 15. <author> S.F. Obermann and M.J. Flynn, </author> <title> An Analysis of Division Algorithms and Implementations. </title> <type> Technical Report CSL-TR-95-675, </type> <institution> Stanford University, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature <ref> [20, 15, 16, 3] </ref>. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in [4, 2, 18].
Reference: 16. <author> A.R. Omondi, </author> <title> Computer Arithmetic Systems: Algorithms, Architecture and Implementations, </title> <publisher> Prentice Hall 1994. </publisher>
Reference-contexts: SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature <ref> [20, 15, 16, 3] </ref>. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in [4, 2, 18].
Reference: 17. <author> J.E. Robertson, </author> <title> "A new class of digital division methods," </title> <journal> IRE Transactions on Electronic Computers, </journal> <year> 1958, </year> <pages> 218-222. </pages>
Reference-contexts: Section 7 concludes with some remarks on possible enhancements to RRL to make it better suited for verifying circuits using preprogrammed read-only-memory (rom). 2 SRT Division Algorithm and Circuit The basic principles underlying the SRT division algorithm are reviewed. SRT division algorithm proposed by Sweeney, Robertson <ref> [17] </ref> and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature [20, 15, 16, 3].
Reference: 18. <author> H. Ruess, N. Shankar and M.K. Srivas, </author> <title> "Modular verification of SRT division," </title> <booktitle> Proc. Computer Aided Verification, 8th Intl. Conf. </booktitle> - <address> CAV'96, New Brunswick, July/August 1996, </address> <publisher> Springer LNCS 1102 (eds. Alur and Henzinger), </publisher> <pages> 123-134. </pages>
Reference-contexts: In this paper, we discuss how RRL can be used for reasoning about SRT division circuits. After reading [2] and <ref> [18] </ref>, we first suspected that considerable user interaction with and guidance to RRL may be needed to verify the main properties of the circuit. <p> The reported use of Mathematica and Maple in [2, 4] for reasoning about inequalities and real numbers, as well as the use of dependent types, table data structure, and other higher order features in <ref> [18] </ref> initially discouraged us from attempting a mechanical verification of the division circuit using RRL. We subsequently discovered to our pleasant surprise that the proof reported in [2] could be easily found using RRL without any user guidance; a brief sketch of that proof is given in [5]. <p> Later, we contrast this proof with our earlier proof attempt as well as proofs in <ref> [2, 18] </ref>. Four major features seemed to have contributed to RRL being effective in mechanization attempts for hardware verification. 1. Fast contextual rewriting and reasoning about equality [23]. 2. <p> The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in <ref> [4, 2, 18] </ref>. It is assumed that a normalization circuit for handling signs and exponents is correct. <p> But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits <ref> [18, 2, 4, 13] </ref>. Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. <p> Bryant [1] discussed how BDDs can be used to perform a limited analysis of some of the invariants of the SRT circuit. As reported in <ref> [18] </ref>, Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. As reported in [2], German and Clarke [4] formalized Taylor's description of SRT division circuit [20] as a set of algebraic relations on the real numbers. <p> The new proof takes less than 1 minute even with more subcases, in contrast to the earlier proof which took around 15 minutes using the same version of the prover on the same machine. The proof reported in <ref> [18] </ref> using the PVS system is more general than the above proof as well as the proofs in [2, 5]. Its structure is essentially based on an earlier proof of Clarke and German [4]. <p> The constraints on the table are also instantiated on a specific quotient digit selection table. The specification and the proof are organized manually using sophisticated mechanisms of the PVS language which supports higher-order logic, dependent types, overloading, module facility, a special data type table <ref> [18] </ref>. The specification is developed with considerable human ingenuity, and the resulting proof is manually driven, even though parts of the proof can be done automatically using previously developed PVS tactics. As reported in [18], the correctness proof of the table implementation itself took 3 hours of cpu time, with the <p> PVS language which supports higher-order logic, dependent types, overloading, module facility, a special data type table <ref> [18] </ref>. The specification is developed with considerable human ingenuity, and the resulting proof is manually driven, even though parts of the proof can be done automatically using previously developed PVS tactics. As reported in [18], the correctness proof of the table implementation itself took 3 hours of cpu time, with the whole proof taking much longer even with user's help. Miner and Leathrum's work [13] is a generalization of the proof in [18]; it formalized a subset of IEEE floating point standard, and uses it <p> As reported in <ref> [18] </ref>, the correctness proof of the table implementation itself took 3 hours of cpu time, with the whole proof taking much longer even with user's help. Miner and Leathrum's work [13] is a generalization of the proof in [18]; it formalized a subset of IEEE floating point standard, and uses it to do the proof for floating point arithmetic thus providing a formal link relating the SRT division algorithm, among other things, to the IEEE standard subject to IEEE compliant rounding. <p> The salient features of the above proof are that 1. the formalization is much simpler than the ones reported in <ref> [2, 18] </ref>, 2. the quotient digit selection table is explicitly specified, in contrast to the specification of the table in [2] in terms of boundary value predicates, an abstraction that a human designer would have to perform, 3. the proof of the second key invariant about the circuit is simpler, making
Reference: 19. <author> K.D. Tocher, </author> <title> "Techniques of multiplication and division for automatic binary computers," </title> <journal> Quarterly Journal of Mechanics and Applied Mathematics, </journal> <volume> 11(3), </volume> <year> 1958. </year>
Reference-contexts: Section 7 concludes with some remarks on possible enhancements to RRL to make it better suited for verifying circuits using preprogrammed read-only-memory (rom). 2 SRT Division Algorithm and Circuit The basic principles underlying the SRT division algorithm are reviewed. SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher <ref> [19] </ref> has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature [20, 15, 16, 3].
Reference: 20. <author> G.S. Taylor, </author> <title> "Compatible hardware for division and square root," </title> <booktitle> Proc. 5th IEEE Symp. on Computer Architecture, </booktitle> <month> May </month> <year> 1981. </year>
Reference-contexts: SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation <ref> [20, 22] </ref>. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature [20, 15, 16, 3]. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. <p> SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation [20, 22]. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature <ref> [20, 15, 16, 3] </ref>. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder. The focus in this paper is on this part of the division circuit as in [4, 2, 18]. <p> The former reduces the number of iterations required to get the quotient, and the latter reduces the time taken in each iteration by speeding up the partial remainder computation. In <ref> [20] </ref>, tradeoffs between speed, radix choice, redundancy of quotient digits, are discussed. 2.1 Choosing Quotient Radix In an SRT divider using the radix 2, each iteration produces one quotient bit, and n iterations are required to produce a quotient of n bit accuracy. <p> Typically, radix 4 is used in practice, since it seems to provide a reasonable trade-off between the number of iterations and the time spent in each iteration <ref> [20] </ref>. Multiplication by quotient digits 0, 1, 2, and 3, can be performed by shifting and adding/subtracting. <p> For instance, a radix 4 SRT divider with the partial remainders and divisor of width n, n &gt; 8, it suffices to consider partial remainders up to 7 bits of accuracy and a divisor up to 4 bits of accuracy <ref> [20] </ref>. The quotient selection table implementing the P-D plot for radix 4 is reproduced above from [20]. Rows are indexed by the shifted truncated partial remainder g7g6g5g4:g3g2g1; columns are indexed by the truncated divisor f 1:f 2f 3f 4; table entries are the quotient digits. <p> divider with the partial remainders and divisor of width n, n &gt; 8, it suffices to consider partial remainders up to 7 bits of accuracy and a divisor up to 4 bits of accuracy <ref> [20] </ref>. The quotient selection table implementing the P-D plot for radix 4 is reproduced above from [20]. Rows are indexed by the shifted truncated partial remainder g7g6g5g4:g3g2g1; columns are indexed by the truncated divisor f 1:f 2f 3f 4; table entries are the quotient digits. <p> The hardware component QUO LOGIC stands for the quotient selection table, and it is typically implemented using an array of preprogrammed read-only-memory. The hardware component DALU is a full width ALU that computes the partial remainder at each iteration. The component GALU (the guess ALU <ref> [20] </ref>) is an 8-bit ALU that computes the approximate 8-bit partial remainder to be used for quotient selection. The components &lt;< 2 perform left shift by 4. <p> In the above proof, these properties are automatically derived, and appropriately used to establish the second key invariant. Additionally, the new proof establishes the completeness of the indices of the table in <ref> [20] </ref>. This in contrast to our earlier proof (and the proof in [2]) where the rows in the table of [20] implicitly extend in both directions with the out-of-bounds values. 5.3 Detecting Errors in Quotient Digit Selection Table Despite our careful transcription of the table from [20], two errors were made <p> Additionally, the new proof establishes the completeness of the indices of the table in <ref> [20] </ref>. This in contrast to our earlier proof (and the proof in [2]) where the rows in the table of [20] implicitly extend in both directions with the out-of-bounds values. 5.3 Detecting Errors in Quotient Digit Selection Table Despite our careful transcription of the table from [20], two errors were made in the table specification that was input into RRL. <p> of the table in <ref> [20] </ref>. This in contrast to our earlier proof (and the proof in [2]) where the rows in the table of [20] implicitly extend in both directions with the out-of-bounds values. 5.3 Detecting Errors in Quotient Digit Selection Table Despite our careful transcription of the table from [20], two errors were made in the table specification that was input into RRL. We discuss below how these bugs were detected using RRL since this could be illustrative of finding possible bugs in a quotient selection table. <p> Lesser and O'Leary [12] discussed a circuit of subtractive radix-2 square root using the NuPRL system. Square root and division circuits are considered to be related to each other <ref> [20] </ref>. But circuits verified in [21, 12] are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits [18, 2, 4, 13]. <p> As reported in [18], Bryant had to construct a checker-circuit much larger than the verified circuit to capture the specification of the verified circuit. As reported in [2], German and Clarke [4] formalized Taylor's description of SRT division circuit <ref> [20] </ref> as a set of algebraic relations on the real numbers. According to them, most of the hardware for the SRT algorithm could be described using linear inequalities.
Reference: 21. <author> D. Verkest, L. Claesen, and H. De Man, </author> <title> "A proof of the nonrestoring division algorithm and its implementation on an ALU," </title> <editor> J. </editor> <booktitle> Formal Methods in System Design, </booktitle> <volume> 4, </volume> <month> Jan. </month> <year> 1994, </year> <pages> 5-31. </pages>
Reference-contexts: We believe that the above formalization as well as proof are much simpler than other formalizations of the related circuit in the literature. 6 Verkest et al <ref> [21] </ref> discussed a proof of a nonrestoring division algorithm using Boyer and Moore's prover. Lesser and O'Leary [12] discussed a circuit of subtractive radix-2 square root using the NuPRL system. Square root and division circuits are considered to be related to each other [20]. <p> Lesser and O'Leary [12] discussed a circuit of subtractive radix-2 square root using the NuPRL system. Square root and division circuits are considered to be related to each other [20]. But circuits verified in <ref> [21, 12] </ref> are not based on the SRT method. Since Intel's Pentium bug was reported in the media, there has been a lot of interest in automated verification of the SRT divider circuits [18, 2, 4, 13].
Reference: 22. <author> T.E. Williams and M. Horowitz, </author> <title> "A 160nS 54-bit CMOS division implementation using self-timing and symmetrically overlapped SRT stages," </title> <booktitle> Proc. 10th IEEE Symp. on Computer Arithmetic, </booktitle> <year> 1991. </year>
Reference-contexts: SRT division algorithm proposed by Sweeney, Robertson [17] and Tocher [19] has been frequently used in commercial microprocessors due to its efficiency and ease of hardware implementation <ref> [20, 22] </ref>. Several expositions of the design of hardware divider circuits based on this algorithm appear in the literature [20, 15, 16, 3]. The SRT algorithm takes as input, two normalized fractions, the dividend and the positive divisor, and outputs the quotient and the remainder.
Reference: 23. <author> H. Zhang, </author> <title> "Implementing contextual rewriting," </title> <booktitle> Proc. 3rd Intl. Workshop on Conditional Term Rewriting Systems, </booktitle> <publisher> Springer LNCS 656 (eds. Remy and Rusinow-itch), </publisher> <year> 1992, </year> <pages> 363-377. </pages>
Reference-contexts: Later, we contrast this proof with our earlier proof attempt as well as proofs in [2, 18]. Four major features seemed to have contributed to RRL being effective in mechanization attempts for hardware verification. 1. Fast contextual rewriting and reasoning about equality <ref> [23] </ref>. 2. Decision procedures for numbers and freely constructed recursive data structures such as lists and sequences, and most importantly, their effective inte gration with contextual rewriting [6]. 3. Cover set method for mechanization of proofs by induction [24], and its integration with contextual rewriting and decision procedures. 4. <p> The correctness of circuit descriptions is established by proving various properties about these descriptions, and showing that they meet the behavioral specifications. After transforming definitions into terminating rewrite rules, RRL attempts to prove a conjecture by normalizing its two sides using contextual rewriting <ref> [23] </ref> and the decision procedures for discharging any hypotheses, if any, and checking whether the normal forms of the two sides of the conjecture are identical. If it succeeds, then the proof is said to have been obtained using equational reasoning and decision procedures.
Reference: 24. <author> H. Zhang, D. Kapur, </author> <title> and M.S. Krishnamoorthy, "A mechanizable induction principle for equational specifications," </title> <booktitle> Proc. 9th Intl. Conf. Automated Deduction (CADE), </booktitle> <publisher> Springer LNCS 310, </publisher> <editor> (eds. Lusk and Overbeek), </editor> <address> Chicago, </address> <year> 1988, </year> <pages> 250-265. </pages>
Reference-contexts: Fast contextual rewriting and reasoning about equality [23]. 2. Decision procedures for numbers and freely constructed recursive data structures such as lists and sequences, and most importantly, their effective inte gration with contextual rewriting [6]. 3. Cover set method for mechanization of proofs by induction <ref> [24] </ref>, and its integration with contextual rewriting and decision procedures. 4. Intermediate lemma speculation heuristics. In the next section, SRT division algorithm and circuit are informally explained, with a special focus on radix 4 SRT circuit. <p> If it succeeds, then the proof is said to have been obtained using equational reasoning and decision procedures. Otherwise, a proof by induction is attempted using the cover set method of generating induction schemes <ref> [24] </ref>.
Reference: 25. <editor> Proc. </editor> <booktitle> of Eighth Symp. of HOT Chips, IEEE Computer Society, </booktitle> <address> California, </address> <year> 1996. </year>
Reference-contexts: A better representation for numbers and reasoning support for rational number will be helpful in formalization floating point arithmetic and proving properties about floating point circuits. Such enhancements to RRL will help in verification of hardware implementations of sophisticated graphics and media processing algorithms <ref> [26, 25] </ref> which have widespread use. Many circuits including SRT divider rely on preprogrammed read-only-memory, for implementing tables for fast computation using look-ups.
Reference: 26. <editor> Proc. </editor> <booktitle> of Ninth Symp. of HOT Chips, IEEE Computer Society, </booktitle> <address> California, </address> <year> 1997. </year>
Reference-contexts: A better representation for numbers and reasoning support for rational number will be helpful in formalization floating point arithmetic and proving properties about floating point circuits. Such enhancements to RRL will help in verification of hardware implementations of sophisticated graphics and media processing algorithms <ref> [26, 25] </ref> which have widespread use. Many circuits including SRT divider rely on preprogrammed read-only-memory, for implementing tables for fast computation using look-ups.
References-found: 26

