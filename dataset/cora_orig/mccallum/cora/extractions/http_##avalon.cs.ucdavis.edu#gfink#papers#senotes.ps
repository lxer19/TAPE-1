URL: http://avalon.cs.ucdavis.edu/gfink/papers/senotes.ps
Refering-URL: http://avalon.cs.ucdavis.edu/gfink/research.html
Root-URL: http://www.cs.ucdavis.edu
Email: e-mail: gfink@cs.ucdavis.edu  e-mail: bishop@cs.ucdavis.edu  
Title: Property-Based Testing; A New Approach to Testing for Assurance  
Author: George Fink Matt Bishop 
Address: Davis  Davis  
Affiliation: Department of Computer Science University of California,  Department of Computer Science University of California,  
Abstract: The goal of software testing analysis is to validate that an implementation satisfies its specifications. Many errors in software are caused by generalizable flaws in the source code. Property-based testing assures that a given program is free of the specified generic flaws. Property-based testing uses property specifications and a data-flow analysis of the program to guide evaluation of test executions for correctness and completeness. 
Abstract-found: 1
Intro-found: 1
Reference: [AI91] <author> Derek Andrews and Darrel Ince. </author> <title> Practical Formal Methods with VDM. </title> <publisher> McGraw-Hill, </publisher> <year> 1991. </year>
Reference-contexts: Because property-based testing concentrates on generic flaws, it is ideal for focusing analysis late in the development cycle after program functionality has been established. Specifications state what a system should or should not do. Many specification languages support precise expression of requirements; examples are Z [Dil90] and VDM <ref> [AI91] </ref>. Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS [Ric94] allow this to be done automatically.
Reference: [CER] <institution> CERT advisory CA-88:01.ftpd.hole. </institution>
Reference-contexts: In the version of ftpd released with SunOS 3.2, a security flaw allows any user to gain permissions to read or write files owned by any user on the system (including root) <ref> [CER] </ref>. To do so, the user logs on with his or her normal user name and password. As a part of the correct authentication, a flag in the program is set. The flag records whether the user name has been authenticated.
Reference: [CPRZ89] <author> Lori A. Clarke, Andy Podgurski, Debra J. Richardson, and Steven J. Zeil. </author> <title> A formal evaluation of data flow path selection criteria. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(11) </volume> <pages> 1318-1331, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Property-based testing uses a new metric called Iterative Contexts, which strikes a balance between simple definition-use (def-use) pair metrics <ref> [Las90, Nta84, CPRZ89] </ref> and stronger but impractical path coverage metrics [RW85]. Testing to Validate Programs A test consists of a set of executions of a given program using different input data for each execution; its purpose is to determine if the program functions correctly. <p> They can be reused and also analyzed by independent means to assess their completeness 1 . Iterative Contexts The iterative contexts coverage metric is an ideal metric for satisfying property validation requirements. Iterative contexts are more powerful than other data-flow met-rics <ref> [Las90, Nta84, CPRZ89] </ref>, but are small enough so they can be satisfied by a reasonable test suite.
Reference: [CRS96] <author> Juei Chang, Debra J. Richardson, and Sriram Sankar. </author> <title> Structural specification-based testing with ADL. </title> <note> Submitted to ISSTA 1996 as a Regular Paper, </note> <year> 1996. </year>
Reference-contexts: Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS [Ric94] allow this to be done automatically. Further, specifications can guide the generation of test data; 1 ADL <ref> [CRS96] </ref>, TAOS [Ric94], and VDM [DF93] allow this as does the TASPEC language presented here. The advantage of using specifications is the formalism they establish for verifying proper (or improper) program behavior. Specifications are the basis of formal analytical tehcniques. <p> Finally, if there are any specifications of ftpd, the specifications can be used to generate test data. Generating test data from specifications is not specifically part of property-based testing, but other testing methodologies contain the necessary algorithms <ref> [CRS96, DF93] </ref>. The first method is simplest, because no extra work is required and the test suite is likely to be fairly complete. However, if these test cases aren't available, the analyst creates some test cases by reading the ftpd manual page.
Reference: [DF93] <author> Jeremy Dick and Alain Faivre. </author> <title> Automating the Generation and Sequencing of Test Cases from Model-Based Specifications, </title> <booktitle> chapter 4, </booktitle> <pages> pages 268-284. </pages> <booktitle> First International Symposium of Formal Methods Europe Proceedings. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS [Ric94] allow this to be done automatically. Further, specifications can guide the generation of test data; 1 ADL [CRS96], TAOS [Ric94], and VDM <ref> [DF93] </ref> allow this as does the TASPEC language presented here. The advantage of using specifications is the formalism they establish for verifying proper (or improper) program behavior. Specifications are the basis of formal analytical tehcniques. <p> Finally, if there are any specifications of ftpd, the specifications can be used to generate test data. Generating test data from specifications is not specifically part of property-based testing, but other testing methodologies contain the necessary algorithms <ref> [CRS96, DF93] </ref>. The first method is simplest, because no extra work is required and the test suite is likely to be fairly complete. However, if these test cases aren't available, the analyst creates some test cases by reading the ftpd manual page.
Reference: [Dil90] <author> Antoni Diller. </author> <title> Z: An Introduction to Formal Methods. </title> <publisher> John Wiley & Sons, </publisher> <year> 1990. </year>
Reference-contexts: Because property-based testing concentrates on generic flaws, it is ideal for focusing analysis late in the development cycle after program functionality has been established. Specifications state what a system should or should not do. Many specification languages support precise expression of requirements; examples are Z <ref> [Dil90] </ref> and VDM [AI91]. Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS [Ric94] allow this to be done automatically.
Reference: [DO91] <author> Richard A. DeMillo and A. Jefferson Offutt. </author> <title> Constraint-based automatic test data generation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(9) </volume> <pages> 900-910, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Future versions of the Tester's Assistant may be able to automate some of the steps in generating test data for gaps in coverage using techniques based upon symbolic execution <ref> [DO91] </ref>. Correctness evaluation During each test execution, a file records the activated TASPEC primitives. The TASPEC evaluation engine processes this data and compares it with the property specification.
Reference: [FHBL95] <author> George Fink, Michael Helmke, Matt Bishop, and Karl Levitt. </author> <title> An interface language between specifications and testing. </title> <type> Technical Report CSE-95-15, </type> <institution> University of California, Davis, </institution> <year> 1995. </year>
Reference-contexts: In order to do this, the actual program must be tested at the source code level, not some higher-level description of the program. However, to validate high-level properties, the properties must be formalized, and the results of the testing related formally to the properties. Property-based testing <ref> [FL94, FKAL94, FHBL95, Fin95] </ref> is a testing methodology that addresses this need. The specification of one or more properties drives the testing process, which assures that the given program meets the stated property.
Reference: [Fin95] <author> George Fink. </author> <title> Discovering security and safety flaws using property-based testing. </title> <type> PhD thesis, </type> <institution> UC Davis, </institution> <year> 1995. </year>
Reference-contexts: In order to do this, the actual program must be tested at the source code level, not some higher-level description of the program. However, to validate high-level properties, the properties must be formalized, and the results of the testing related formally to the properties. Property-based testing <ref> [FL94, FKAL94, FHBL95, Fin95] </ref> is a testing methodology that addresses this need. The specification of one or more properties drives the testing process, which assures that the given program meets the stated property. <p> The program is sliced [Wei84] and code irrelevant to the property disregarded. The Tester's Assistant automatically translates the TASPEC specification into a test oracle that will check the correctness of program executions with respect to the desired property. A new path-based code coverage metric called "iterative contexts" <ref> [Fin95, Fin96] </ref> efficiently captures the slice-based computations in the program. Property-based testing speaks to the following questions: 1. What is to be accomplished or established via testing? 2. What test data should be used? 3. When has enough testing been carried out? 4.
Reference: [Fin96] <author> George Fink. </author> <title> Iterative contexts, a complete and practical data-flow coverage metric. </title> <note> In preparation, </note> <year> 1996. </year>
Reference-contexts: The program is sliced [Wei84] and code irrelevant to the property disregarded. The Tester's Assistant automatically translates the TASPEC specification into a test oracle that will check the correctness of program executions with respect to the desired property. A new path-based code coverage metric called "iterative contexts" <ref> [Fin95, Fin96] </ref> efficiently captures the slice-based computations in the program. Property-based testing speaks to the following questions: 1. What is to be accomplished or established via testing? 2. What test data should be used? 3. When has enough testing been carried out? 4.
Reference: [FKAL94] <author> George Fink, Calvin Ko, Myla Archer, and Karl Levitt. </author> <title> Towards a property-based testing environment with applications to security-critical software. </title> <booktitle> In Proceedings of the 4th Irvine Software Symposium, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: In order to do this, the actual program must be tested at the source code level, not some higher-level description of the program. However, to validate high-level properties, the properties must be formalized, and the results of the testing related formally to the properties. Property-based testing <ref> [FL94, FKAL94, FHBL95, Fin95] </ref> is a testing methodology that addresses this need. The specification of one or more properties drives the testing process, which assures that the given program meets the stated property.
Reference: [FL94] <author> George Fink and Karl Levitt. </author> <title> Property-based testing of privileged programs. </title> <booktitle> In Tenth Annual Computer Security Applications Conference, </booktitle> <pages> pages 154-163. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: In order to do this, the actual program must be tested at the source code level, not some higher-level description of the program. However, to validate high-level properties, the properties must be formalized, and the results of the testing related formally to the properties. Property-based testing <ref> [FL94, FKAL94, FHBL95, Fin95] </ref> is a testing methodology that addresses this need. The specification of one or more properties drives the testing process, which assures that the given program meets the stated property.
Reference: [GH93] <author> John V. Guttag and James J. Horning. </author> <title> Larch: Langauges and Tools for Formal Specification. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Specifications state what a system should or should not do. Many specification languages support precise expression of requirements; examples are Z [Dil90] and VDM [AI91]. Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch <ref> [GH93] </ref> and TAOS [Ric94] allow this to be done automatically. Further, specifications can guide the generation of test data; 1 ADL [CRS96], TAOS [Ric94], and VDM [DF93] allow this as does the TASPEC language presented here.
Reference: [Hel95] <author> Michael Helmke. </author> <title> A semi-formal approach to the validation of requirements traceability from Z to C. </title> <type> Master's thesis, </type> <institution> UC Davis, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Translations between other specification languages and TASPEC can provide additional flexibility to the specification and testing phases of development. Helmke shows how translations from Z to TASPEC can assist in requirements traceability <ref> [Hel95] </ref>. Execution Monitors Automatic high-level execution monitors derived automatically from property specifications in TASPEC become test oracles that assess the correctness of executions. Location specifiers produce primitive events for the specification state and the execution monitor processes these elements to raise higher-level events.
Reference: [Las90] <author> Janusz Laski. </author> <title> Data flow testing in STAD. </title> <journal> Journal of Systems Software, </journal> <volume> 12 </volume> <pages> 3-14, </pages> <year> 1990. </year>
Reference-contexts: Property-based testing uses a new metric called Iterative Contexts, which strikes a balance between simple definition-use (def-use) pair metrics <ref> [Las90, Nta84, CPRZ89] </ref> and stronger but impractical path coverage metrics [RW85]. Testing to Validate Programs A test consists of a set of executions of a given program using different input data for each execution; its purpose is to determine if the program functions correctly. <p> They can be reused and also analyzed by independent means to assess their completeness 1 . Iterative Contexts The iterative contexts coverage metric is an ideal metric for satisfying property validation requirements. Iterative contexts are more powerful than other data-flow met-rics <ref> [Las90, Nta84, CPRZ89] </ref>, but are small enough so they can be satisfied by a reasonable test suite. <p> into the Tester's Assistant, and distributing the tools to gain a wider evaluation base. * Property specification: specifying generic flaws and features of protocol implementions of TCP and NFS, for example. * Evaluation of iterative contexts: performing empirical comparisons between iterative contexts and other simi lar metrics such as L-contexts <ref> [Las90] </ref>. * Case studies: gaining more experience using the methodology of property-based testing and understand ing how it can be applied to different problems. 6 Acknowledgments Part of this work has been supported by DARPA, under contract USNN00014-94-1-0065.
Reference: [LBMC93] <author> Carl E. Landwehr, Alan R. Bull, John P. Mc-Dermott, and William S. Choi. </author> <title> A taxonomy of computer program security flaws, with examples. </title> <type> Technical Report NRL/FR/5542-93-9591, </type> <institution> Naval Research Laboratory, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: A successful test validates that properties are not violated; if these properties form the security policy for the system, then the system is secure. Property-based testing uses a security model of the system, as well as a library of generic flaws (such as <ref> [LBMC93, Spa92] </ref>) specified in TASPEC, to produce a test process, whereby the target program can be certified to be free of certain types of flaws. Concluding remarks and future work Property-based testing defines a formalized framework for testing.
Reference: [Nta84] <author> Simeon C. Ntafos. </author> <title> On required element testing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(6):795-803, </volume> <month> November </month> <year> 1984. </year>
Reference-contexts: Property-based testing uses a new metric called Iterative Contexts, which strikes a balance between simple definition-use (def-use) pair metrics <ref> [Las90, Nta84, CPRZ89] </ref> and stronger but impractical path coverage metrics [RW85]. Testing to Validate Programs A test consists of a set of executions of a given program using different input data for each execution; its purpose is to determine if the program functions correctly. <p> They can be reused and also analyzed by independent means to assess their completeness 1 . Iterative Contexts The iterative contexts coverage metric is an ideal metric for satisfying property validation requirements. Iterative contexts are more powerful than other data-flow met-rics <ref> [Las90, Nta84, CPRZ89] </ref>, but are small enough so they can be satisfied by a reasonable test suite.
Reference: [Ric94] <author> Debra Richardson. TAOS: </author> <title> Testing with analysis and oracle support. </title> <booktitle> In Proceedings of the 1994 International Symposium on Software Testing and Analysis, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Specifications state what a system should or should not do. Many specification languages support precise expression of requirements; examples are Z [Dil90] and VDM [AI91]. Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS <ref> [Ric94] </ref> allow this to be done automatically. Further, specifications can guide the generation of test data; 1 ADL [CRS96], TAOS [Ric94], and VDM [DF93] allow this as does the TASPEC language presented here. The advantage of using specifications is the formalism they establish for verifying proper (or improper) program behavior. <p> Treating specficiations as bounds of program behavior suggests that test oracles can be derived from specifications; some specification languages like Larch [GH93] and TAOS <ref> [Ric94] </ref> allow this to be done automatically. Further, specifications can guide the generation of test data; 1 ADL [CRS96], TAOS [Ric94], and VDM [DF93] allow this as does the TASPEC language presented here. The advantage of using specifications is the formalism they establish for verifying proper (or improper) program behavior. Specifications are the basis of formal analytical tehcniques.
Reference: [RW85] <author> Sandra Rapps and Elaine J. Weyuker. </author> <title> Selecting software test data using data flow information. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 11(4) </volume> <pages> 367-375, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Property-based testing uses a new metric called Iterative Contexts, which strikes a balance between simple definition-use (def-use) pair metrics [Las90, Nta84, CPRZ89] and stronger but impractical path coverage metrics <ref> [RW85] </ref>. Testing to Validate Programs A test consists of a set of executions of a given program using different input data for each execution; its purpose is to determine if the program functions correctly.
Reference: [Spa89] <author> Eugene. H. Spafford. </author> <title> The internet worm: Crisis and aftermath. </title> <journal> Communications of the ACM, </journal> <pages> pages 678-687, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Security flaws are still being discovered in computer programs that have been in use for many years. Many of the flaws are caused by the same basic recurring faults [Spa92]. For example, the Internet worm <ref> [Spa89] </ref> exploited errors in Unix network programs. Examination of the flaws which caused the errors revealed them to be of an elementary nature. It is time for a concerted effort to try to prevent such flaws from occurring.
Reference: [Spa92] <author> Eugene H. Spafford. </author> <title> Common system vulnerabilities. Workshop on Future Directions in Intrusion and Misuses Detection, </title> <year> 1992. </year>
Reference-contexts: Applications to Computer Security Assuring that computer programs and systems are secure is an important and difficult problem. Security flaws are still being discovered in computer programs that have been in use for many years. Many of the flaws are caused by the same basic recurring faults <ref> [Spa92] </ref>. For example, the Internet worm [Spa89] exploited errors in Unix network programs. Examination of the flaws which caused the errors revealed them to be of an elementary nature. It is time for a concerted effort to try to prevent such flaws from occurring. <p> A successful test validates that properties are not violated; if these properties form the security policy for the system, then the system is secure. Property-based testing uses a security model of the system, as well as a library of generic flaws (such as <ref> [LBMC93, Spa92] </ref>) specified in TASPEC, to produce a test process, whereby the target program can be certified to be free of certain types of flaws. Concluding remarks and future work Property-based testing defines a formalized framework for testing.
Reference: [Wei84] <author> Mark Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-375, </volume> <month> July </month> <year> 1984. </year> <month> 7 </month>
Reference-contexts: First, the analyst specifies the target property in a low-level specification language called TASPEC (Tester's Assistant SPECification language). The program is sliced <ref> [Wei84] </ref> and code irrelevant to the property disregarded. The Tester's Assistant automatically translates the TASPEC specification into a test oracle that will check the correctness of program executions with respect to the desired property.
References-found: 22

