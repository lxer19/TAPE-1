URL: ftp://cse.ogi.edu/pub/dsrg/HOPE/icse95.ps.Z
Refering-URL: http://www.cse.ogi.edu/~crispin/
Root-URL: http://www.cse.ogi.edu
Title: Optimistic Language Constructs  
Author: Hanan Lutfiyya and Crispin Cowan 
Date: November 15, 1994  
Address: Ontario London, Ont. N6A 5B7 CANADA  
Affiliation: Department of Computer Science The University of Western  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> David F. Bacon and Robert E. Strom. </author> <title> Optimistic Parallelization of Communicating Sequential Processes. </title> <month> April </month> <year> 1991. </year>
Reference-contexts: Typically, in distributed programming, we will make concurrent sequences of actions that will not interfere. However, many circumstances arise in distributed systems where two sequences may not interfere for "most" runs. Non-interference can be guessed with high probability, even though it cannot be statically guaranteed. For example <ref> [1] </ref>, assume that we have two actions labelled S 1 and S 2 which are both remote procedure calls (RPCs) and that communication delays are long relative to the speed of computation.
Reference: [2] <author> Rajive L. Bagrodia and Wen-Toh Liao. Maisie: </author> <title> A Language for the Design of Efficient Discrete-Event Simulations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(4) </volume> <pages> 225-238, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation <ref> [2, 8, 11, 18, 21] </ref>. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [3] <author> H.E. </author> <title> Bal and A.S. </title> <booktitle> Tannenbaum. Programming Languages for Distributed Systems". </booktitle> <volume> 21(3) </volume> <pages> 261-322, </pages> <year> 1989. </year>
Reference: [4] <author> Crispin Cowan. </author> <title> Optimistic Replication in HOPE. </title> <booktitle> In Proceedings of the 1992 CAS Conference, </booktitle> <pages> pages 269-282, </pages> <address> Toronto, Ontario, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication <ref> [4, 9, 14, 17, 20] </ref>, concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [5] <author> Crispin Cowan. </author> <title> Optimistic Programming in PVM. </title> <booktitle> In Proceedings of the 2nd PVM User's Group Meeting, </booktitle> <institution> Oak Ridge, TN, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: We have written a formal semantics of the HOPE language constructs [6], defined algorithms and modules needed and showed that the algorithms satisfy the formal semantics as well as have an implementation of the HOPE language constructs into C <ref> [5] </ref>. The message passing facilities were provided by PVM. 5 Conclusion We have written a formal semantics of the HOPE language constructs, defined algorithms and modules needed and showed that the algorithms satisfy the formal semantics as well as have a prototype of the HOPE language constructs into C.
Reference: [6] <author> Crispin Cowan and Hanan Lutfiyya. </author> <title> Formal Semantics for Expressing Optimism. </title> <type> Report 414, </type> <institution> Computer Science Department, </institution> <address> UWO, London, On-tario, </address> <month> March </month> <year> 1994. </year> <note> Submitted for review, and available via FTP from ftp.csd.uwo.ca:/pub/csd-technical-reports/414/report414.ps.Z. 5 </note>
Reference-contexts: If any such dependency is ever detected, then x is denied. Asserting free of (x) ensures an execution in which the asserting process is causally free of all events dependent on the AID x. We have written a formal semantics of the HOPE language constructs <ref> [6] </ref>, defined algorithms and modules needed and showed that the algorithms satisfy the formal semantics as well as have an implementation of the HOPE language constructs into C [5].
Reference: [7] <author> Crispin Cowan, Hanan Lutfiyya, and Mike Bauer. </author> <title> Increasing Concurrency Through Optimism: A Reason for HOPE. </title> <booktitle> In Proceedings of the 1994 ACM Computer Science Conference, </booktitle> <pages> pages 218-225, </pages> <address> Phoenix, Arizona, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Currently, there are researchers in non-monotonic reasoning and numerical analysis who are interested in applying optimistic techniques to increase performance of the programs. 4 Optimistic Constructs We have developed a set of language constructs <ref> [7] </ref> for the expression of optimism called HOPE (Hopefully Optimistic Programming Environment).
Reference: [8] <author> Richard M. Fujimoto. </author> <title> The Virtual Time Machine. </title> <journal> Computer Architecture News, </journal> <volume> 19(1) </volume> <pages> 35-44, </pages> <month> March </month> <year> 1991. </year> <booktitle> Re-printed from the Symposium on Parallel Algorithms and Architectures 1990. </booktitle>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation <ref> [2, 8, 11, 18, 21] </ref>. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [9] <author> Arthur P. Goldberg. </author> <title> Optimistic Algorithms for Distributed Transparent Process Replication. </title> <type> PhD thesis, </type> <institution> University of California at Los Angeles, </institution> <year> 1991. </year> <note> (UCLA Tech. Report CSD-910050). </note>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication <ref> [4, 9, 14, 17, 20] </ref>, concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [10] <author> Maurice Herlihy. </author> <title> Apologizing Versus Asking Permission: Optimistic Concurrency Control for Abstract Data Types. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(1) </volume> <pages> 96-124, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control <ref> [10, 12, 15, 22] </ref>, and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [11] <author> D. Jefferson. </author> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(7) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation <ref> [2, 8, 11, 18, 21] </ref>. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [12] <author> D. Jefferson and A. Motro. </author> <title> The Time Warp Mechanism for Database Concurrency Control. </title> <type> Report Technical Report TR-84-302, </type> <institution> University of Southern California, </institution> <month> January </month> <year> 1984. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control <ref> [10, 12, 15, 22] </ref>, and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [13] <author> D.B. Johnson and W. Zwaenepoel. </author> <title> Recovery in Distributed Systems using Optimistic Message Logging and Checkpointing. </title> <journal> J. Algorithms, </journal> <volume> 11(3) </volume> <pages> 462-491, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance <ref> [19, 13] </ref>, replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance.
Reference: [14] <author> Puneet Kumar. </author> <title> Coping with Conflicts in an Optimistically Replicated File System. </title> <booktitle> In 1990 Workshop on the Management of Replicated Data, </booktitle> <pages> pages 60-64, </pages> <address> Houston, TX, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication <ref> [4, 9, 14, 17, 20] </ref>, concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [15] <author> H.T. Kung and John T. Robinson. </author> <title> On Optimistic Methods for Concurrency Control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 6(2) </volume> <pages> 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control <ref> [10, 12, 15, 22] </ref>, and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [16] <author> L. Lamport. </author> <title> Time, clocks and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <year> 1978. </year>
Reference-contexts: In most runs, the value returned is OK. Second, depending on communication delays, S 1 's call to Z could arrive before S 2 's call to Z, which clearly violates the happens-before relationship <ref> [16] </ref>. All of this indicates that S 1 and S 2 will interfere in "some" runs. In a pessimistic approach S 1 and S 2 are made sequential in some piece which we will assume is a process X. However, in this example non-interference can be assumed for most runs.
Reference: [17] <author> Gerald J. Popek, Richard G. Guy, Jr. Thomas W. Page, and John S. Heidemann. </author> <title> Replication in Ficus Distribued Files Systems. </title> <booktitle> In 1990 Workshop on the Management of Replicated Data, </booktitle> <pages> pages 5-10, </pages> <address> Houston, TX, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication <ref> [4, 9, 14, 17, 20] </ref>, concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [18] <author> B. R. Preiss, W. M. Loucks, and V. C. Hamacher. </author> <title> A Unified Modelling Methodology for Performance Evaluation of Distributed Discrete Event Simulation Mechanisms. </title> <booktitle> In Winter Simulation Conference, </booktitle> <year> 1988. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation <ref> [2, 8, 11, 18, 21] </ref>. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [19] <author> R.E. Strom and S. Yemini. </author> <title> Optimistic Recovery in Distributed Systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(3) </volume> <pages> 204-226, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance <ref> [19, 13] </ref>, replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance.
Reference: [20] <author> P. Triantafillou and D.J. Taylor. </author> <title> A New Paradigm for High Availability and Efficiency in Replicated and Distributed Databases. </title> <booktitle> In 2nd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 136-143, </pages> <month> December </month> <year> 1990. </year> <month> 6 </month>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication <ref> [4, 9, 14, 17, 20] </ref>, concurrency control [10, 12, 15, 22], and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [21] <author> Brian Unger, John Cleary, Alan Dewar, and Zhong e Xiao. </author> <title> Multi-lingual Optimistic Distributed Simulator. </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> 7(2) </volume> <pages> 121-151, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control [10, 12, 15, 22], and discrete event simulation <ref> [2, 8, 11, 18, 21] </ref>. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
Reference: [22] <author> Philip Yu and Daniel M. Dias. </author> <title> Analysis fo Hybrid Concurrency Control Schemes for a High Data Contention Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2) </volume> <pages> 118-129, </pages> <month> February </month> <year> 1992. </year> <month> 7 </month>
Reference-contexts: Optimistic programs have been used in a variety of applications such as fault tolerance [19, 13], replication [4, 9, 14, 17, 20], concurrency control <ref> [10, 12, 15, 22] </ref>, and discrete event simulation [2, 8, 11, 18, 21]. In these applications optimism was used for decreasing response time and hence performance. However, optimism has not been generally exploited because of the difficulty in writing optimistic algorithms.
References-found: 22

