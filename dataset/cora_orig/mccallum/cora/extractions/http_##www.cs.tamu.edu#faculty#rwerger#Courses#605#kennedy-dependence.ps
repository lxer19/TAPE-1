URL: http://www.cs.tamu.edu/faculty/rwerger/Courses/605/kennedy-dependence.ps
Refering-URL: http://www.cs.tamu.edu/faculty/rwerger/Courses/605/
Root-URL: http://www.cs.tamu.edu
Title: Practical Dependence Testing  
Author: Gina Goff Ken Kennedy Chau-Wen Tseng 
Note: Center for Research on Parallel Computation  In Proceedings of the SIGPLAN Conference on Programming Language Design and Implementation, Toronto, CA, June 1991.  
Date: November 1990  
Address: 90103  P.O. Box 1892 Houston, TX 77251-1892  
Affiliation: CRPC-TR  Rice University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. R. Allen. </author> <title> Dependence Analysis for Subscripted Variables and Its Application to Program Transformations. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> April </month> <year> 1983. </year>
Reference-contexts: Since several different values of ff and fi may satisfy the dependence equations, a set of distance and direction vectors may be needed to completely describe the dependence. Direction vectors, first introduced by Wolfe [53], are useful for calculating the level of loop-carried dependences <ref> [1, 4, 25] </ref>. A dependence is carried by the outermost loop for which the direction in the direction vector is not `='. For instance, the direction vector (&lt;; =; &gt;) for the dependence above shows the dependence is carried on the i loop. <p> For the sake of simplicity, we will ignore output dependences in this and all future examples. 2.2 Separability When testing multidimensional arrays, we say that a subscript position is separable if its indices do not occur in the other subscripts <ref> [1, 10] </ref>. If two different subscripts contain the same index, we say they are coupled [38]. For example, in the loop below, DO 10 i DO 10 k the first subscript is separable, but the second and third are coupled because they both contain the index j. <p> We know from linear algebra that systems of equations with distinct variables may be solved independently, and their solutions merged to form an exact solution set. Previous tests have used this property for array references consisting of only separable SIV subscripts <ref> [1, 23, 34, 36, 42] </ref>. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts [38]. <p> Strong SIV Subscripts An SIV subscript for index i is said to be strong if it has the form hai + c 1 ; ai 0 + c 2 i; i.e., if it is linear and the coefficients of the two occurrences of the index i are constant and equal <ref> [1, 10] </ref>. For strong SIV subscripts, we define the dependence distance as: d = i 0 i = a Then a dependence exists if and only if d is an integer and j d j U L, where U and L are the loop upper and lower bounds. <p> To determine whether dependences exist, we simply need to check that the resulting value i is within the loop bounds, and is either an integer or has a non-integer part equal to 1=2. Weak-crossing SIV subscripts cause crossing dependences, loop-carried dependences whose endpoints all cross iteration i <ref> [1, 4] </ref>. These dependences may be eliminated using the loop splitting transformation [28]. <p> If the result of the intersection is the empty set, no dependence is possible. Constraint intersection has been employed for both direction vectors [53] and coupled SIV subscripts <ref> [1, 10] </ref>. The version employed by the Delta test is equivalent to an exact multiple subscript SIV test. Dependence distances are the easiest to intersect; a simple comparison suffices. If all distances are not equal, then no dependences exist. <p> The first version of PFC [3, 25] employed subscript-by-subscript testing using the Banerjee-GCD test extended to calculate the level, minimum distance, and interchange information for each dependence. This strategy proved very useful for PFC's layered vectorization algorithm. In the mid-eighties, Randy Allen and others implemented the strong SIV test <ref> [1] </ref> that was applied to each subscript if all the subscripts were SIV and separable| this change dramatically improved the efficiency of dependence testing. Both the strong SIV and Banerjee tests were enhanced to deal with symbolic additive constants.
Reference: [2] <author> J. R. Allen. </author> <title> Unifying vectorization, parallelization, and optimization: The Ardent compiler. </title> <editor> In L. Kartashev and S. Kar-tashev, editors, </editor> <booktitle> Proceedings of the Third International Conference on Supercomputing, </booktitle> <year> 1988. </year>
Reference-contexts: We assume that all auxiliary induction variables have been detected and replaced by linear functions of the loop indices <ref> [2, 3, 5, 52] </ref>. In addition, we will use the term subscript to refer to one of the subscripted positions in a pair of array references; i.e., the pair of subscripts in some dimension of the two array references. <p> In the few cases where our tests are inapplicable, we can afford applying more expensive tests since their cost may be effectively amortized. Experience has shown that dependence analysis can be highly useful for both scalar and parallel compilers <ref> [2, 11, 33] </ref>. We feel that the dependence tests described in this paper make dependence analysis more efficient and hence practical for every compiler. 9 Acknowledgements As with most research, the suite of dependence tests we have described in this paper owes much to the contributions of others.
Reference: [3] <author> J. R. Allen and K. Kennedy. </author> <title> PFC: A program to convert Fortran to parallel form. </title> <editor> In K. Hwang, editor, </editor> <booktitle> Supercomputers: Design and Applications, </booktitle> <pages> pages 186-203. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Silver Spring, MD, </address> <year> 1984. </year>
Reference-contexts: We assume that all auxiliary induction variables have been detected and replaced by linear functions of the loop indices <ref> [2, 3, 5, 52] </ref>. In addition, we will use the term subscript to refer to one of the subscripted positions in a pair of array references; i.e., the pair of subscripts in some dimension of the two array references. <p> If any test yields independence, no dependences exist. 6. Otherwise merge all the direction vectors computed in the previous steps into a single set of direction vectors for the two references. This algorithm is implemented in both PFC, an automatic vectorizing and parallelizing compiler <ref> [3, 4] </ref>, and ParaScope, a parallel programming environment [12, 27, 28]. Our dependence testing algorithm takes advantage of separability by classifying all subscripts in a pair of array references as separable or part of some minimal coupled group. <p> Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops [27, 36, 54], including upper triangular loops skewed by loop normalization <ref> [3, 53] </ref>. <p> The first version of PFC <ref> [3, 25] </ref> employed subscript-by-subscript testing using the Banerjee-GCD test extended to calculate the level, minimum distance, and interchange information for each dependence. This strategy proved very useful for PFC's layered vectorization algorithm.
Reference: [4] <author> J. R. Allen and K. Kennedy. </author> <title> Automatic translation of Fortran programs to vector form. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 9(4) </volume> <pages> 491-542, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Since several different values of ff and fi may satisfy the dependence equations, a set of distance and direction vectors may be needed to completely describe the dependence. Direction vectors, first introduced by Wolfe [53], are useful for calculating the level of loop-carried dependences <ref> [1, 4, 25] </ref>. A dependence is carried by the outermost loop for which the direction in the direction vector is not `='. For instance, the direction vector (&lt;; =; &gt;) for the dependence above shows the dependence is carried on the i loop. <p> Carried dependences are important because they determine which loops cannot be executed in parallel without synchronization. Direction vectors are also useful in determining whether loop interchange is legal and profitable <ref> [4, 25, 53] </ref>. Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. <p> If any test yields independence, no dependences exist. 6. Otherwise merge all the direction vectors computed in the previous steps into a single set of direction vectors for the two references. This algorithm is implemented in both PFC, an automatic vectorizing and parallelizing compiler <ref> [3, 4] </ref>, and ParaScope, a parallel programming environment [12, 27, 28]. Our dependence testing algorithm takes advantage of separability by classifying all subscripts in a pair of array references as separable or part of some minimal coupled group. <p> To determine whether dependences exist, we simply need to check that the resulting value i is within the loop bounds, and is either an integer or has a non-integer part equal to 1=2. Weak-crossing SIV subscripts cause crossing dependences, loop-carried dependences whose endpoints all cross iteration i <ref> [1, 4] </ref>. These dependences may be eliminated using the loop splitting transformation [28]. <p> We evaluate the resulting expressions to calculate the minimal and maximal values for the loop index, then repeat for the next inner loop. This algorithm returns the maximal range for each index, all that is needed for SIV tests. 4.4 MIV Tests The Banerjee-GCD test <ref> [4, 8, 25, 55] </ref> may be employed to construct all legal direction vectors for linear subscripts containing multiple indices. In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces.
Reference: [5] <author> Z. Ammarguellat and W. Harrison. </author> <title> Automatic recognition of induction variables and recurrence relations by abstract interpretation. </title> <booktitle> In Proceedings of the SIGPLAN '90 Conference on Program Language Design and Implementation, </booktitle> <address> White Plains, NY, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: We assume that all auxiliary induction variables have been detected and replaced by linear functions of the loop indices <ref> [2, 3, 5, 52] </ref>. In addition, we will use the term subscript to refer to one of the subscripted positions in a pair of array references; i.e., the pair of subscripts in some dimension of the two array references.
Reference: [6] <author> U. Banerjee. </author> <title> Data dependence in ordinary programs. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> November </month> <year> 1976. </year> <note> Report No. 76-837. </note>
Reference-contexts: If only separable MIV subscripts remain, the Delta test is limited by the precision of the single subscript tests applied to each subscript. Research has shown that the Banerjee-GCD test is usually exact for single subscripts <ref> [6, 30, 37] </ref>, so the Delta test is also likely to be exact for these cases. There are three sources of imprecision for the Delta test. <p> Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions <ref> [6, 25] </ref>. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. <p> Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. Research has shown that Banerjee's inequalities are exact in many common cases <ref> [6, 30, 37] </ref>, though results have not yet been extended for direction vectors or complex iteration spaces. The I-test developed by Kong et al: integrates the GCD and Banerjee tests and can usually prove integer solutions [31].
Reference: [7] <author> U. Banerjee. </author> <title> Speedup of ordinary programs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1979. </year> <note> Report No. 79-989. </note>
Reference-contexts: Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe <ref> [7, 53] </ref> developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. <p> Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions <ref> [7] </ref>. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces.
Reference: [8] <author> U. Banerjee. </author> <title> Dependence Analysis for Supercomputing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference-contexts: However, because of its expense, few if any scalar compilers perform dependence analysis. Parallelizing compilers have traditionally relied on two dependence tests to detect data dependences between pairs of array references: Banerjee's inequalities and the GCD test <ref> [8, 55] </ref>. However, these tests are usually more general than necessary. This paper presents empirical results showing that most array references in scientific Fortran programs are fairly simple. For these simple references, we demonstrate a suite of highly exact yet efficient dependence tests. <p> In practice most dependence tests, such as Banerjee's inequalities <ref> [8] </ref>, seek efficient approximate solutions. Exact tests, on the other hand, are dependence tests that will detect dependences if and only if they exist. 1.5 Indices and Subscripts In this paper we will use the term index to mean the index variable for some loop surrounding both of the references. <p> The ZIV test can be easily extended for symbolic expressions. Simply form the expression representing the difference between the two subscript expressions. If the difference simplifies to a non-zero constant, we have proved independence. 4.2 SIV Tests A number of authors, notably Banerjee, Cohagan, and Wolfe <ref> [8, 14, 55] </ref>, have published a Single-Index exact test for linear SIV subscripts based on finding all solutions to a simple Diophantine equation in two variables. Here we present a new exact test based on the idea of treating the most commonly occurring SIV subscripts as special cases. <p> We evaluate the resulting expressions to calculate the minimal and maximal values for the loop index, then repeat for the next inner loop. This algorithm returns the maximal range for each index, all that is needed for SIV tests. 4.4 MIV Tests The Banerjee-GCD test <ref> [4, 8, 25, 55] </ref> may be employed to construct all legal direction vectors for linear subscripts containing multiple indices. In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. <p> In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. PFC employs a special version of the Banerjee-GCD test enhanced for triangular loop nests <ref> [8, 26] </ref>. We note a special case of MIV subscripts called RDIV (Restricted Double Index Variable) subscripts that have form ha 1 i + c 1 ; a 2 j + c 2 i. They are similar to SIV subscripts, except that i and j are distinct indices. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces. <p> The Delta test may be viewed as a restricted form of the -test that trades generality for greater efficiency and precision. Multidimensional GCD Banerjee's multidimensional GCD test checks for simultaneous unconstrained integer solutions in multidimensional arrays <ref> [8] </ref>. It applies Gaussian elimination modified for integers to create a compact system where all integer points provide integer solutions to the original dependence system. It can also be extended to provide an exact test for distance vectors [56].
Reference: [9] <author> M. Burke and R. Cytron. </author> <title> Interprocedural dependence analysis and parallelization. </title> <booktitle> In Proceedings of the SIGPLAN '86 Symposium on Compiler Construction, </booktitle> <address> Palo Alto, CA, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: As a result, distance vectors must have the form (d; d), and the only valid direction vectors are (&lt;; &gt;) and (=; =). The direction vector (&gt;; &lt;) may be ignored since it is equivalent to a reversed dependence with direction vector (&lt;; &gt;) <ref> [9] </ref>. All dependences are thus carried on the outer loop; the inner loop may be executed in parallel. 5.4 Precision and Complexity The precision of the Delta test depends on the nature of the coupled subscripts being tested. The SIV tests applied in the first phase are exact. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces. <p> Klappholz and Kong have extended Banerjee's inequalities to do the same [29]. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and linearization <ref> [9, 20] </ref>; they proved inaccurate in many cases. True multiple subscript tests provide precision at the expense of efficiency by considering all subscripts simultaneously. In comparison, the Delta test propagates constraints incrementally as needed.
Reference: [10] <author> D. Callahan. </author> <title> Dependence testing in PFC: Weak separability. Supercomputer Software Newsletter 2, </title> <institution> Dept. of Computer Science, Rice University, </institution> <month> August </month> <year> 1986. </year>
Reference-contexts: For the sake of simplicity, we will ignore output dependences in this and all future examples. 2.2 Separability When testing multidimensional arrays, we say that a subscript position is separable if its indices do not occur in the other subscripts <ref> [1, 10] </ref>. If two different subscripts contain the same index, we say they are coupled [38]. For example, in the loop below, DO 10 i DO 10 k the first subscript is separable, but the second and third are coupled because they both contain the index j. <p> Strong SIV Subscripts An SIV subscript for index i is said to be strong if it has the form hai + c 1 ; ai 0 + c 2 i; i.e., if it is linear and the coefficients of the two occurrences of the index i are constant and equal <ref> [1, 10] </ref>. For strong SIV subscripts, we define the dependence distance as: d = i 0 i = a Then a dependence exists if and only if d is an integer and j d j U L, where U and L are the loop upper and lower bounds. <p> However, we also find it helpful to view the problem geometrically, where the dependence equation: a 1 i + c 1 = a 2 i 0 + c 2 describes a line in the two dimensional plane with i and i 0 as the axes <ref> [10] </ref>. The weak SIV test can then be formulated as determining whether the line derived from the dependence equation intersects with any integer points in the space bounded by the loop upper and lower bounds, as shown in Figure 2. <p> If the result of the intersection is the empty set, no dependence is possible. Constraint intersection has been employed for both direction vectors [53] and coupled SIV subscripts <ref> [1, 10] </ref>. The version employed by the Delta test is equivalent to an exact multiple subscript SIV test. Dependence distances are the easiest to intersect; a simple comparison suffices. If all distances are not equal, then no dependences exist. <p> Both the strong SIV and Banerjee tests were enhanced to deal with symbolic additive constants. Some simultaneity was also added for multidimensional arrays by comparing dependence distances for each index. David Callahan later extended PFC to handle weak SIV subscripts and general constraint intersection <ref> [10] </ref>. In addition, he proposed the RDIV constraint propagation algorithm and conducted an initial study on the complexity of array subscripts. Paul Havlak extended PFC's ability to test subscripts containing symbolic expressions, and assisted in developing the symbolic test described in Section 4.5.
Reference: [11] <author> D. Callahan, S. Carr, and K. Kennedy. </author> <title> Improving register allocation for subscripted variables. </title> <booktitle> In Proceedings of the SIGPLAN '90 Conference on Program Language Design and Implementation, </booktitle> <address> White Plains, NY, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: To exploit parallelism and the memory hierarchy effectively for these machines, compilers must be able to analyze data dependences precisely for array references in loop nests. Even for a single microprocessor, optimizations utilizing dependence information can result in integer factor speedups for scientific codes <ref> [11] </ref>. However, because of its expense, few if any scalar compilers perform dependence analysis. Parallelizing compilers have traditionally relied on two dependence tests to detect data dependences between pairs of array references: Banerjee's inequalities and the GCD test [8, 55]. However, these tests are usually more general than necessary. <p> They may be used to guide optimizations to exploit parallelism [23, 27, 36, 51, 54] or the memory hierarchy <ref> [11, 19, 43] </ref>. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. If dependences may exist, it tries to characterize them in some manner, usually as a minimal complete set of distance and direction vectors. <p> However, the Delta test can easily propagate distance constraints for i from the first subscript into the second subscript to derive the distance vectors (1; 1) and (0; 1). This dependence information may then be used to guide further optimizations such as loop interchange, loop blocking, or scalar replacement <ref> [11, 51, 55] </ref>. 5.3.2 Restricted DIV Constraints In the previous section we showed how SIV constraints may be propagated. Propagating MIV constraints is expensive in the general case. However, we present a method to handle an important special case consisting of coupled RDIV subscripts (discussed in Section 4.4). <p> In the few cases where our tests are inapplicable, we can afford applying more expensive tests since their cost may be effectively amortized. Experience has shown that dependence analysis can be highly useful for both scalar and parallel compilers <ref> [2, 11, 33] </ref>. We feel that the dependence tests described in this paper make dependence analysis more efficient and hence practical for every compiler. 9 Acknowledgements As with most research, the suite of dependence tests we have described in this paper owes much to the contributions of others.
Reference: [12] <author> D. Callahan, K. Cooper, R. Hood, K. Kennedy, and L. Tor-czon. </author> <title> ParaScope: A parallel programming environment. </title> <journal> The International Journal of Supercomputer Applications, </journal> <volume> 2(4) </volume> <pages> 84-99, </pages> <month> Winter </month> <year> 1988. </year>
Reference-contexts: Otherwise merge all the direction vectors computed in the previous steps into a single set of direction vectors for the two references. This algorithm is implemented in both PFC, an automatic vectorizing and parallelizing compiler [3, 4], and ParaScope, a parallel programming environment <ref> [12, 27, 28] </ref>. Our dependence testing algorithm takes advantage of separability by classifying all subscripts in a pair of array references as separable or part of some minimal coupled group. A coupled group is minimal if it cannot be partitioned into two non-empty subgroups with distinct sets of indices.
Reference: [13] <author> D. Callahan, J. Dongarra, and D. Levine. </author> <title> Vectorizing compilers: A test suite and results. </title> <booktitle> In Proceedings of Supercomputing '88, </booktitle> <address> Orlando, FL, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: Weak-crossing SIV subscripts cause crossing dependences, loop-carried dependences whose endpoints all cross iteration i [1, 4]. These dependences may be eliminated using the loop splitting transformation [28]. For instance, consider the following loop from the Callahan-Dongarra-Levine vector test suite <ref> [13] </ref>: DO 10 i = 1, N The weak-crossing SIV test determines that dependences exist between the definition and use of A, and that they all cross iteration (N + 1)=2.
Reference: [14] <author> W. Cohagan. </author> <title> Vector optimization for the ASC. </title> <booktitle> In Proceedings of the Seventh Annual Princeton Conference on Information Sciences and Systems, </booktitle> <address> Princeton, NJ, </address> <month> March </month> <year> 1973. </year>
Reference-contexts: The ZIV test can be easily extended for symbolic expressions. Simply form the expression representing the difference between the two subscript expressions. If the difference simplifies to a non-zero constant, we have proved independence. 4.2 SIV Tests A number of authors, notably Banerjee, Cohagan, and Wolfe <ref> [8, 14, 55] </ref>, have published a Single-Index exact test for linear SIV subscripts based on finding all solutions to a simple Diophantine equation in two variables. Here we present a new exact test based on the idea of treating the most commonly occurring SIV subscripts as special cases. <p> Cohagan <ref> [14] </ref> described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25].
Reference: [15] <author> S. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proceedings of Third Annual ACM Symposium on Theory of Computing, </booktitle> <address> New York, NY, </address> <year> 1971. </year>
Reference-contexts: Otherwise the validity of any optimizations based on dependence information is not guaranteed. 1.4 Exact Tests When array subscripts are linear expressions of the loop index variables, dependence testing is equivalent to the problem of finding integer solutions to systems of linear Diophantine equations, an NP-complete problem <ref> [15, 17] </ref>. In practice most dependence tests, such as Banerjee's inequalities [8], seek efficient approximate solutions.
Reference: [16] <author> G. Cybenko, L. Kipp, L. Pointer, and D. Kuck. </author> <title> Supercomputer performance evaluation and the Perfect benchmarks. </title> <booktitle> In Proceedings of the 1990 ACM International Conference on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: * MIV tests (GCD, triangular Banerjee) * Delta test (constraint intersection, propagation of distance constraints only) For this study we measured the number times each dependence test was applied by PFC when processing four groups of Fortran programs: RiCEPS (Rice Compiler Evaluation Program Suite), the Perfect and SPEC benchmark suites <ref> [16, 49] </ref>, and two math libraries, eis-pack and linpack. Explanation Table 1 provides the number of lines and subroutines for each program, a histogram of the number of array dimensions for each pair of array references tested, as well as the number of separable, coupled, and nonlinear subscripts pairs found.
Reference: [17] <author> G. Dantzig. </author> <title> Linear Programming and Extensions. </title> <publisher> Prince-ton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1963. </year>
Reference-contexts: Otherwise the validity of any optimizations based on dependence information is not guaranteed. 1.4 Exact Tests When array subscripts are linear expressions of the loop index variables, dependence testing is equivalent to the problem of finding integer solutions to systems of linear Diophantine equations, an NP-complete problem <ref> [15, 17] </ref>. In practice most dependence tests, such as Banerjee's inequalities [8], seek efficient approximate solutions.
Reference: [18] <author> P. Feautrier. </author> <title> Parametric integer programming. </title> <journal> Opera--tionnelle/Operations Research, </journal> <volume> 22(3) </volume> <pages> 243-268, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: the fact that they combine high precision and efficiency by targeting a simple yet common subset of all possible subscripts. 7.1 Integer and Linear Programming Since testing linear subscript functions for dependence is equivalent to finding simultaneous integer solutions within loop limits, one approach is to employ integer programming methods <ref> [18, 44] </ref>. Linear programming techniques such as Shostak's loop residue [46] or Kar-markar's method [24] are also applicable, though integer solutions are not guaranteed.
Reference: [19] <author> D. Gannon, W. Jalby, and K. Gallivan. </author> <title> Strategies for cache and local memory management by global program transformations. </title> <booktitle> In Proceedings of the First International Conference on Supercomputing. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Athens, Greece, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: They may be used to guide optimizations to exploit parallelism [23, 27, 36, 51, 54] or the memory hierarchy <ref> [11, 19, 43] </ref>. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. If dependences may exist, it tries to characterize them in some manner, usually as a minimal complete set of distance and direction vectors.
Reference: [20] <author> M. Girkar and C. Polychronopoulos. </author> <title> Compiling issues for supercomputers. </title> <booktitle> In Proceedings of Supercomputing '88, </booktitle> <address> Or-lando, FL, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: Klappholz and Kong have extended Banerjee's inequalities to do the same [29]. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and linearization <ref> [9, 20] </ref>; they proved inaccurate in many cases. True multiple subscript tests provide precision at the expense of efficiency by considering all subscripts simultaneously. In comparison, the Delta test propagates constraints incrementally as needed.
Reference: [21] <author> T. Gross and P. Steenkiste. </author> <title> Structured dataflow analysis for arrays and its use in an optimizing compiler. </title> <journal> Software| Practice and Experience, </journal> <volume> 20(2) </volume> <pages> 133-155, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: The I-test developed by Kong et al: integrates the GCD and Banerjee tests and can usually prove integer solutions [31]. Gross and Steenkiste propose an efficient interval analysis method for calculating dependences for arrays <ref> [21] </ref>. Unfortunately their method does not handle coupled subscripts, and is unsuitable for most loop transformations since distance and direction vectors are not calculated. Lichnewsky and Thomasset describe symbolic dependence testing in the vatil vec-torizer [39]. Haghighat and Polychronopoulos propose a flow analysis framework to aid symbolic tests [22].
Reference: [22] <author> M. Haghighat and C. Polychronopoulos. </author> <title> Symbolic dependence analysis for high performance parallelizing compilers. </title> <booktitle> In Proceedings of the Third Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Irvine, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Unfortunately their method does not handle coupled subscripts, and is unsuitable for most loop transformations since distance and direction vectors are not calculated. Lichnewsky and Thomasset describe symbolic dependence testing in the vatil vec-torizer [39]. Haghighat and Polychronopoulos propose a flow analysis framework to aid symbolic tests <ref> [22] </ref>. Execution conditions may also be used to refine dependence tests. Wolfe's All-Equals test checks for loop-independent dependences invalidated by control flow within the loop [53]. Lu and Chen's subdomain test incorporates information about indices from conditionals within the loop body [40].
Reference: [23] <author> R. Heuft and W. Little. </author> <title> Improved time and parallel processor bounds for Fortran-like loops. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(1):78-81, </volume> <month> January </month> <year> 1982. </year>
Reference-contexts: Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism <ref> [23, 27, 36, 51, 54] </ref> or the memory hierarchy [11, 19, 43]. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. <p> We know from linear algebra that systems of equations with distinct variables may be solved independently, and their solutions merged to form an exact solution set. Previous tests have used this property for array references consisting of only separable SIV subscripts <ref> [1, 23, 34, 36, 42] </ref>. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts [38].
Reference: [24] <author> N. Karmarkar. </author> <title> A new polynomial-time algorithm for linear programming. </title> <booktitle> In Proceedings of the 16th Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1984. </year>
Reference-contexts: Linear programming techniques such as Shostak's loop residue [46] or Kar-markar's method <ref> [24] </ref> are also applicable, though integer solutions are not guaranteed.
Reference: [25] <author> K. Kennedy. </author> <title> Automatic translation of Fortran programs to vector form. </title> <type> Technical Report 476-029-4, </type> <institution> Dept. of Mathematical Sciences, Rice University, </institution> <month> October </month> <year> 1980. </year>
Reference-contexts: Since several different values of ff and fi may satisfy the dependence equations, a set of distance and direction vectors may be needed to completely describe the dependence. Direction vectors, first introduced by Wolfe [53], are useful for calculating the level of loop-carried dependences <ref> [1, 4, 25] </ref>. A dependence is carried by the outermost loop for which the direction in the direction vector is not `='. For instance, the direction vector (&lt;; =; &gt;) for the dependence above shows the dependence is carried on the i loop. <p> Carried dependences are important because they determine which loops cannot be executed in parallel without synchronization. Direction vectors are also useful in determining whether loop interchange is legal and profitable <ref> [4, 25, 53] </ref>. Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. <p> We evaluate the resulting expressions to calculate the minimal and maximal values for the loop index, then repeat for the next inner loop. This algorithm returns the maximal range for each index, all that is needed for SIV tests. 4.4 MIV Tests The Banerjee-GCD test <ref> [4, 8, 25, 55] </ref> may be employed to construct all legal direction vectors for linear subscripts containing multiple indices. In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. <p> Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions <ref> [6, 25] </ref>. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces. <p> The first version of PFC <ref> [3, 25] </ref> employed subscript-by-subscript testing using the Banerjee-GCD test extended to calculate the level, minimum distance, and interchange information for each dependence. This strategy proved very useful for PFC's layered vectorization algorithm.
Reference: [26] <author> K. Kennedy. </author> <title> Triangular Banerjee inequality. Supercomputer Software Newsletter 8, </title> <institution> Dept. of Computer Science, Rice University, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. PFC employs a special version of the Banerjee-GCD test enhanced for triangular loop nests <ref> [8, 26] </ref>. We note a special case of MIV subscripts called RDIV (Restricted Double Index Variable) subscripts that have form ha 1 i + c 1 ; a 2 j + c 2 i. They are similar to SIV subscripts, except that i and j are distinct indices. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces.
Reference: [27] <author> K. Kennedy, K. S. M c Kinley, and C. Tseng. </author> <title> Analysis and transformation in the ParaScope Editor. </title> <booktitle> In Proceedings of the 1991 ACM International Conference on Supercomputing, </booktitle> <address> Cologne, Germany, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism <ref> [23, 27, 36, 51, 54] </ref> or the memory hierarchy [11, 19, 43]. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. <p> Otherwise merge all the direction vectors computed in the previous steps into a single set of direction vectors for the two references. This algorithm is implemented in both PFC, an automatic vectorizing and parallelizing compiler [3, 4], and ParaScope, a parallel programming environment <ref> [12, 27, 28] </ref>. Our dependence testing algorithm takes advantage of separability by classifying all subscripts in a pair of array references as separable or part of some minimal coupled group. A coupled group is minimal if it cannot be partitioned into two non-empty subgroups with distinct sets of indices. <p> The GCD test can now detect independence since the GCD of the coefficients of all the indices is 2, which does not divide evenly into the constant term 5. Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops <ref> [27, 36, 54] </ref>, including upper triangular loops skewed by loop normalization [3, 53].
Reference: [28] <author> K. Kennedy, K. S. M c Kinley, and C. Tseng. </author> <title> Interactive parallel programming using the ParaScope Editor. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 2(3) </volume> <pages> 329-341, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Otherwise merge all the direction vectors computed in the previous steps into a single set of direction vectors for the two references. This algorithm is implemented in both PFC, an automatic vectorizing and parallelizing compiler [3, 4], and ParaScope, a parallel programming environment <ref> [12, 27, 28] </ref>. Our dependence testing algorithm takes advantage of separability by classifying all subscripts in a pair of array references as separable or part of some minimal coupled group. A coupled group is minimal if it cannot be partitioned into two non-empty subgroups with distinct sets of indices. <p> In scientific codes, i is usually the first or last iteration of the loop, eliminating one possible direction vector for the dependence. More importantly, weak-zero dependences caused by the first or last loop iteration may be eliminated by applying the loop peeling transformation <ref> [28] </ref>. <p> Weak-crossing SIV subscripts cause crossing dependences, loop-carried dependences whose endpoints all cross iteration i [1, 4]. These dependences may be eliminated using the loop splitting transformation <ref> [28] </ref>. For instance, consider the following loop from the Callahan-Dongarra-Levine vector test suite [13]: DO 10 i = 1, N The weak-crossing SIV test determines that dependences exist between the definition and use of A, and that they all cross iteration (N + 1)=2.
Reference: [29] <author> D. Klappholz and X. Kong. </author> <title> Extending the Banerjee-Wolfe test to handle execution conditions. </title> <type> Technical Report 9101, </type> <institution> Dept. of EE/CS, Stevens Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: Wolfe's All-Equals test checks for loop-independent dependences invalidated by control flow within the loop [53]. Lu and Chen's subdomain test incorporates information about indices from conditionals within the loop body [40]. Klappholz and Kong have extended Banerjee's inequalities to do the same <ref> [29] </ref>. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and linearization [9, 20]; they proved inaccurate in many cases. True multiple subscript tests provide precision at the expense of efficiency by considering all subscripts simultaneously.
Reference: [30] <author> D. Klappholz, K. Psarris, and X. Kong. </author> <title> On the perfect accuracy of an approximate subscript analysis test. </title> <booktitle> In Proceedings of the 1990 ACM International Conference on Supercomputing, </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: If only separable MIV subscripts remain, the Delta test is limited by the precision of the single subscript tests applied to each subscript. Research has shown that the Banerjee-GCD test is usually exact for single subscripts <ref> [6, 30, 37] </ref>, so the Delta test is also likely to be exact for these cases. There are three sources of imprecision for the Delta test. <p> Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. Research has shown that Banerjee's inequalities are exact in many common cases <ref> [6, 30, 37] </ref>, though results have not yet been extended for direction vectors or complex iteration spaces. The I-test developed by Kong et al: integrates the GCD and Banerjee tests and can usually prove integer solutions [31].
Reference: [31] <author> X. Kong, D. Klappholz, and K. Psarris. </author> <title> The I test: A new test for subscript data dependence. </title> <booktitle> In Proceedings of the 1990 International Conference on Parallel Processing, </booktitle> <address> St. Charles, IL, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces. The I-test developed by Kong et al: integrates the GCD and Banerjee tests and can usually prove integer solutions <ref> [31] </ref>. Gross and Steenkiste propose an efficient interval analysis method for calculating dependences for arrays [21]. Unfortunately their method does not handle coupled subscripts, and is unsuitable for most loop transformations since distance and direction vectors are not calculated.
Reference: [32] <author> D. Kuck. </author> <title> The Structure of Computers and Computations, Volume 1. </title> <publisher> John Wiley and Sons, </publisher> <address> New York, NY, </address> <year> 1978. </year>
Reference-contexts: We say that a data dependence exists between two statements S 1 and S 2 if there is a path from S 1 to S 2 and both statements access the same location in memory. There are four types of data dependence <ref> [32, 33] </ref>: True (flow) dependence occurs when S 1 writes a memory location that S 2 later reads. Anti dependence occurs when S 1 reads a memory location that S 2 later writes. Output dependence occurs when S 1 writes a memory location that S 2 later writes.
Reference: [33] <author> D. Kuck, R. Kuhn, D. Padua, B. Leasure, and M. J. Wolfe. </author> <title> Dependence graphs and compiler optimizations. </title> <booktitle> In Conference Record of the Eighth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <address> Williamsburg, VA, </address> <month> January </month> <year> 1981. </year>
Reference-contexts: We say that a data dependence exists between two statements S 1 and S 2 if there is a path from S 1 to S 2 and both statements access the same location in memory. There are four types of data dependence <ref> [32, 33] </ref>: True (flow) dependence occurs when S 1 writes a memory location that S 2 later reads. Anti dependence occurs when S 1 reads a memory location that S 2 later writes. Output dependence occurs when S 1 writes a memory location that S 2 later writes. <p> In the few cases where our tests are inapplicable, we can afford applying more expensive tests since their cost may be effectively amortized. Experience has shown that dependence analysis can be highly useful for both scalar and parallel compilers <ref> [2, 11, 33] </ref>. We feel that the dependence tests described in this paper make dependence analysis more efficient and hence practical for every compiler. 9 Acknowledgements As with most research, the suite of dependence tests we have described in this paper owes much to the contributions of others.
Reference: [34] <author> D. Kuck, Y. Muraoka, and S. Chen. </author> <title> On the number of operations simultaneously executable in Fortran-like programs and their resulting speedup. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-21(12):1293-1310, </volume> <month> December </month> <year> 1972. </year>
Reference-contexts: Carried dependences are important because they determine which loops cannot be executed in parallel without synchronization. Direction vectors are also useful in determining whether loop interchange is legal and profitable [4, 25, 53]. Distance vectors, first used by Kuck and Muraoka <ref> [34, 42] </ref>, are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism [23, 27, 36, 51, 54] or the memory hierarchy [11, 19, 43]. <p> We know from linear algebra that systems of equations with distinct variables may be solved independently, and their solutions merged to form an exact solution set. Previous tests have used this property for array references consisting of only separable SIV subscripts <ref> [1, 23, 34, 36, 42] </ref>. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts [38]. <p> Unfortunately, while integer and linear programming techniques are suitable for solving large systems of equations, their high initialization costs and implementation complexity make them less desirable for dependence testing. 7.2 Single Subscript Tests The earliest work on dependence tests concentrated on deriving distance vectors from strong SIV subscripts <ref> [34, 36, 42] </ref>. Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25].
Reference: [35] <author> R. Kuhn. </author> <title> Optimization and Interconnection Complexity for: Parallel Processors, Single-Stage Networks, and Decision Trees. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1980. </year>
Reference-contexts: In comparison, the Delta test propagates constraints incrementally as needed. Fourier-Motzkin Elimination Many of the earliest multiple subscript tests utilized Fourier-Motzkin elimination, a linear programming method based on pairwise comparison of linear inequalities. Kuhn <ref> [35] </ref> and Triolet et al: [48] represent array accesses in convex regions that may be intersected using Fourier-Motzkin elimination. Regions may also be used to summarize memory accesses for entire segments of the program. These techniques are flexible but expensive.
Reference: [36] <author> L. Lamport. </author> <title> The parallel execution of DO loops. </title> <journal> Communications of the ACM, </journal> <volume> 17(2) </volume> <pages> 83-93, </pages> <month> February </month> <year> 1974. </year>
Reference-contexts: Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism <ref> [23, 27, 36, 51, 54] </ref> or the memory hierarchy [11, 19, 43]. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. <p> We know from linear algebra that systems of equations with distinct variables may be solved independently, and their solutions merged to form an exact solution set. Previous tests have used this property for array references consisting of only separable SIV subscripts <ref> [1, 23, 34, 36, 42] </ref>. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts [38]. <p> The GCD test can now detect independence since the GCD of the coefficients of all the indices is 2, which does not divide evenly into the constant term 5. Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops <ref> [27, 36, 54] </ref>, including upper triangular loops skewed by loop normalization [3, 53]. <p> Unfortunately, while integer and linear programming techniques are suitable for solving large systems of equations, their high initialization costs and implementation complexity make them less desirable for dependence testing. 7.2 Single Subscript Tests The earliest work on dependence tests concentrated on deriving distance vectors from strong SIV subscripts <ref> [34, 36, 42] </ref>. Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25].
Reference: [37] <author> Z. Li and P. Yew. </author> <title> Some results on exact data dependence analysis. </title> <editor> In D. Gelernter, A. Nicolau, and D. Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing. </booktitle> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: If only separable MIV subscripts remain, the Delta test is limited by the precision of the single subscript tests applied to each subscript. Research has shown that the Banerjee-GCD test is usually exact for single subscripts <ref> [6, 30, 37] </ref>, so the Delta test is also likely to be exact for these cases. There are three sources of imprecision for the Delta test. <p> Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information [4, 8, 9, 25, 26, 53]. Research has shown that Banerjee's inequalities are exact in many common cases <ref> [6, 30, 37] </ref>, though results have not yet been extended for direction vectors or complex iteration spaces. The I-test developed by Kong et al: integrates the GCD and Banerjee tests and can usually prove integer solutions [31]. <p> However, there is no obvious method to extend the -test to prove the existence of simultaneous integer solutions. The -test is exact for two dimensions if unconstrained integer solutions exist and the coefficients of index variables are all 1, 0 or 1 <ref> [37] </ref>. However, even with these restrictions it is not exact for three or more coupled dimensions. The Delta test may be viewed as a restricted form of the -test that trades generality for greater efficiency and precision.
Reference: [38] <author> Z. Li, P. Yew, and C. Zhu. </author> <title> Data dependence analysis on multi-dimensional array references. </title> <booktitle> In Proceedings of the 1989 ACM International Conference on Supercomputing, </booktitle> <address> Crete, Greece, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: If two different subscripts contain the same index, we say they are coupled <ref> [38] </ref>. For example, in the loop below, DO 10 i DO 10 k the first subscript is separable, but the second and third are coupled because they both contain the index j. ZIV subscripts are vacuously separable because they contain no indices. <p> Previous tests have used this property for array references consisting of only separable SIV subscripts [1, 23, 34, 36, 42]. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts <ref> [38] </ref>. <p> Some recent research has focused on overcoming this deficiency <ref> [38, 50, 56] </ref>. In this section we present the Delta test, a multiple subscript test designed to be exact yet efficient for common coupled subscripts. Figure 3 presents an overview of the Delta test algorithm. <p> The constraint propagation algorithm is an incremental adaptation of the -test heuristic for selecting linear combinations of subscript expressions. It has also been extended to efficiently handle constraints from SIV tests and linearly dependent subscripts <ref> [38] </ref>. Below we present some more examples of the Delta test. Multiple Passes The Delta test algorithm iterates if MIV subscripts are reduced to SIV subscripts, since they may produce new constraints. <p> Finally, the Delta test does not propagate constraints from general MIV subscripts. As a result, coupled MIV subscripts may remain at the end of the Delta test. More general but expensive multiple subscript dependence tests such as the or Power tests may be used in these cases <ref> [38, 56] </ref>. Since each subscript in the coupled group is tested at most once, the complexity of the Delta test is linear in the number of subscripts. <p> However, Schrijver states that in combinatorial problems where coefficients tend to be 1, 0, or 1, the simplex algorithm is slow and will cycle for certain pivot rules [44]. -test Li et al: present the -test, a multidimensional version of Banerjee's inequalities that checks for simultaneous constrained real-valued solutions <ref> [38] </ref>. The - test forms linear combinations of subscripts that eliminate one or more instances of indices, then tests the result using Banerjee's inequalities. Simultaneous real-valued solutions exist if and only if Banerjee's inequalities finds solutions in all the linear combinations generated. <p> comparison, the Power and Delta tests can detect and discard linearly dependent subscripts as part of their basic algorithm. 7.4 Empirical Studies Li et al: showed that for coupled subscripts, multiple subscript tests may detect independence in up to 36% more cases than subscript-by-subscript tests in libraries such as eispack <ref> [38] </ref>. Our results for eispack demonstrate that the Delta test is as effective in testing coupled subscripts. A comprehensive empirical study of array subscripts and conventional dependence tests was performed by Shen et al: [45]. <p> The presence of a single MIV subscript in a multidimensional array would cause PFC to fall back on subscript-by-subscript testing with the Banerjee-GCD tests. The introduction of the -test <ref> [38] </ref> motivated us to reexamine PFC's test strategy, exposing the obvious mistake. Some additional work led to the current form of the Delta test.
Reference: [39] <author> A. Lichnewsky and F. Thomasset. </author> <title> Introducing symbolic problem solving techniques in the dependencetesting phases of a vectorizer. </title> <booktitle> In Proceedings of the Second International Conference on Supercomputing, </booktitle> <address> St. Malo, France, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Gross and Steenkiste propose an efficient interval analysis method for calculating dependences for arrays [21]. Unfortunately their method does not handle coupled subscripts, and is unsuitable for most loop transformations since distance and direction vectors are not calculated. Lichnewsky and Thomasset describe symbolic dependence testing in the vatil vec-torizer <ref> [39] </ref>. Haghighat and Polychronopoulos propose a flow analysis framework to aid symbolic tests [22]. Execution conditions may also be used to refine dependence tests. Wolfe's All-Equals test checks for loop-independent dependences invalidated by control flow within the loop [53].
Reference: [40] <author> L. Lu and M. Chen. </author> <title> Subdomain dependence test for massive parallelism. </title> <booktitle> In Proceedings of Supercomputing '90, </booktitle> <address> New York, NY, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Execution conditions may also be used to refine dependence tests. Wolfe's All-Equals test checks for loop-independent dependences invalidated by control flow within the loop [53]. Lu and Chen's subdomain test incorporates information about indices from conditionals within the loop body <ref> [40] </ref>. Klappholz and Kong have extended Banerjee's inequalities to do the same [29]. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and linearization [9, 20]; they proved inaccurate in many cases.
Reference: [41] <author> F. McMahon. </author> <title> The Livermore Fortran Kernels: A computer test of the numerical performance range. </title> <type> Technical Report UCRL-53745, </type> <institution> Lawrence Livermore National Laboratory, </institution> <year> 1986. </year>
Reference-contexts: Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops [27, 36, 54], including upper triangular loops skewed by loop normalization [3, 53]. Consider the following simplified kernel from the Livermore Loops <ref> [41] </ref>: DO 10 i = 1, N 10 A (i,j) = A (i-1,j) + A (i,j-1) Since all subscripts are separable, the strong SIV test can be applied to calculate distance vectors of (1; 0) and (0; 1) for the dependences in the loop nest.
Reference: [42] <author> Y. Muraoka. </author> <title> Parallelism Exposure and Exploitation in Programs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1971. </year> <note> Report No. 71-424. </note>
Reference-contexts: Carried dependences are important because they determine which loops cannot be executed in parallel without synchronization. Direction vectors are also useful in determining whether loop interchange is legal and profitable [4, 25, 53]. Distance vectors, first used by Kuck and Muraoka <ref> [34, 42] </ref>, are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism [23, 27, 36, 51, 54] or the memory hierarchy [11, 19, 43]. <p> We know from linear algebra that systems of equations with distinct variables may be solved independently, and their solutions merged to form an exact solution set. Previous tests have used this property for array references consisting of only separable SIV subscripts <ref> [1, 23, 34, 36, 42] </ref>. More recently, Li et al: formalized and applied this method in the -test to array references also containing MIV or coupled subscripts [38]. <p> Unfortunately, while integer and linear programming techniques are suitable for solving large systems of equations, their high initialization costs and implementation complexity make them less desirable for dependence testing. 7.2 Single Subscript Tests The earliest work on dependence tests concentrated on deriving distance vectors from strong SIV subscripts <ref> [34, 36, 42] </ref>. Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe [7, 53] developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25].
Reference: [43] <author> A. Porterfield. </author> <title> Software Methods for Improvement of Cache Performance. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: They may be used to guide optimizations to exploit parallelism [23, 27, 36, 51, 54] or the memory hierarchy <ref> [11, 19, 43] </ref>. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. If dependences may exist, it tries to characterize them in some manner, usually as a minimal complete set of distance and direction vectors.
Reference: [44] <author> A. Schrijver. </author> <title> Theory of Linear and Integer Programming. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, Great Britain, </address> <year> 1986. </year>
Reference-contexts: In general the algorithm may only eliminate one occurrence of an index. This results in improved precision when testing coupled groups, but is not exact. If desired, additional precision may be gained by utilizing the constraint to reduce the range of the remaining index, as in Fourier-Motzkin Elimination <ref> [44] </ref>. The constraint propagation algorithm is an incremental adaptation of the -test heuristic for selecting linear combinations of subscript expressions. It has also been extended to efficiently handle constraints from SIV tests and linearly dependent subscripts [38]. Below we present some more examples of the Delta test. <p> the fact that they combine high precision and efficiency by targeting a simple yet common subset of all possible subscripts. 7.1 Integer and Linear Programming Since testing linear subscript functions for dependence is equivalent to finding simultaneous integer solutions within loop limits, one approach is to employ integer programming methods <ref> [18, 44] </ref>. Linear programming techniques such as Shostak's loop residue [46] or Kar-markar's method [24] are also applicable, though integer solutions are not guaranteed. <p> The sim plex algorithm has worst case exponential complexity, but takes only linear time for most linear programming problems. However, Schrijver states that in combinatorial problems where coefficients tend to be 1, 0, or 1, the simplex algorithm is slow and will cycle for certain pivot rules <ref> [44] </ref>. -test Li et al: present the -test, a multidimensional version of Banerjee's inequalities that checks for simultaneous constrained real-valued solutions [38]. The - test forms linear combinations of subscripts that eliminate one or more instances of indices, then tests the result using Banerjee's inequalities.
Reference: [45] <author> Z. Shen, Z. Li, and P. Yew. </author> <title> An empirical study of Fortran programs for parallelizing compilers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(3) </volume> <pages> 356-364, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Our results for eispack demonstrate that the Delta test is as effective in testing coupled subscripts. A comprehensive empirical study of array subscripts and conventional dependence tests was performed by Shen et al: <ref> [45] </ref>. Our study focuses on the complexity of subscripted references and the effective-ness of our partition-based dependence tests.
Reference: [46] <author> R. Shostak. </author> <title> Deciding linear inequalities by computing loop residues. </title> <journal> Journal of the ACM, </journal> <volume> 28(4) </volume> <pages> 769-779, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Linear programming techniques such as Shostak's loop residue <ref> [46] </ref> or Kar-markar's method [24] are also applicable, though integer solutions are not guaranteed.
Reference: [47] <author> R. Triolet. </author> <title> Interprocedural analysis for program restructuring with Parafrase. </title> <journal> CSRD Rpt. </journal> <volume> No. </volume> <pages> 538, </pages> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: Regions may also be used to summarize memory accesses for entire segments of the program. These techniques are flexible but expensive. Triolet found that using Fourier-Motzkin elimination for dependence testing takes from 22 to 28 times longer than conventional dependence tests <ref> [47] </ref>. Constraint-Matrix The Constraint-Matrix test developed by Wallace is a simplex algorithm modified for integer programming [50]. Its precision and expense are difficult to ascertain since it halts after an arbitrary number of iterations to avoid cycling.
Reference: [48] <author> R. Triolet, F. Irigoin, and P. Feautrier. </author> <title> Direct parallelization of CALL statements. </title> <booktitle> In Proceedings of the SIGPLAN '86 Symposium on Compiler Construction, </booktitle> <address> Palo Alto, CA, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: In comparison, the Delta test propagates constraints incrementally as needed. Fourier-Motzkin Elimination Many of the earliest multiple subscript tests utilized Fourier-Motzkin elimination, a linear programming method based on pairwise comparison of linear inequalities. Kuhn [35] and Triolet et al: <ref> [48] </ref> represent array accesses in convex regions that may be intersected using Fourier-Motzkin elimination. Regions may also be used to summarize memory accesses for entire segments of the program. These techniques are flexible but expensive.
Reference: [49] <author> J. Uniejewski. </author> <title> SPEC Benchmark Suite: designed for today's advanced systems. </title> <journal> SPEC Newsletter Volume 1, </journal> <note> Issue 1, SPEC, Fall 1989. </note>
Reference-contexts: More importantly, weak-zero dependences caused by the first or last loop iteration may be eliminated by applying the loop peeling transformation [28]. For instance, consider the following simplified loop in the program tomcatv from the SPEC benchmark suite <ref> [49] </ref>: DO 10 i = 1, N The weak-zero SIV test can determine that the use of Y (1; N ) causes a loop-carried true dependence from the first iteration to all other iterations. <p> * MIV tests (GCD, triangular Banerjee) * Delta test (constraint intersection, propagation of distance constraints only) For this study we measured the number times each dependence test was applied by PFC when processing four groups of Fortran programs: RiCEPS (Rice Compiler Evaluation Program Suite), the Perfect and SPEC benchmark suites <ref> [16, 49] </ref>, and two math libraries, eis-pack and linpack. Explanation Table 1 provides the number of lines and subroutines for each program, a histogram of the number of array dimensions for each pair of array references tested, as well as the number of separable, coupled, and nonlinear subscripts pairs found.
Reference: [50] <author> D. Wallace. </author> <title> Dependence of multi-dimensional array references. </title> <booktitle> In Proceedings of the Second International Conference on Supercomputing, </booktitle> <address> St. Malo, France, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Some recent research has focused on overcoming this deficiency <ref> [38, 50, 56] </ref>. In this section we present the Delta test, a multiple subscript test designed to be exact yet efficient for common coupled subscripts. Figure 3 presents an overview of the Delta test algorithm. <p> These techniques are flexible but expensive. Triolet found that using Fourier-Motzkin elimination for dependence testing takes from 22 to 28 times longer than conventional dependence tests [47]. Constraint-Matrix The Constraint-Matrix test developed by Wallace is a simplex algorithm modified for integer programming <ref> [50] </ref>. Its precision and expense are difficult to ascertain since it halts after an arbitrary number of iterations to avoid cycling. The sim plex algorithm has worst case exponential complexity, but takes only linear time for most linear programming problems.
Reference: [51] <author> M. E. Wolf and M. Lam. </author> <title> Maximizing parallelism via loop transformations. </title> <booktitle> In Proceedings of the Third Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Irvine, CA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism <ref> [23, 27, 36, 51, 54] </ref> or the memory hierarchy [11, 19, 43]. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. <p> However, the Delta test can easily propagate distance constraints for i from the first subscript into the second subscript to derive the distance vectors (1; 1) and (0; 1). This dependence information may then be used to guide further optimizations such as loop interchange, loop blocking, or scalar replacement <ref> [11, 51, 55] </ref>. 5.3.2 Restricted DIV Constraints In the previous section we showed how SIV constraints may be propagated. Propagating MIV constraints is expensive in the general case. However, we present a method to handle an important special case consisting of coupled RDIV subscripts (discussed in Section 4.4).
Reference: [52] <author> M. J. Wolfe. </author> <title> Techniques for improving the inherent parallelism in programs. </title> <type> Master's thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: We assume that all auxiliary induction variables have been detected and replaced by linear functions of the loop indices <ref> [2, 3, 5, 52] </ref>. In addition, we will use the term subscript to refer to one of the subscripted positions in a pair of array references; i.e., the pair of subscripts in some dimension of the two array references.
Reference: [53] <author> M. J. Wolfe. </author> <title> Optimizing Supercompilers for Supercomputers. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1982. </year>
Reference-contexts: Since several different values of ff and fi may satisfy the dependence equations, a set of distance and direction vectors may be needed to completely describe the dependence. Direction vectors, first introduced by Wolfe <ref> [53] </ref>, are useful for calculating the level of loop-carried dependences [1, 4, 25]. A dependence is carried by the outermost loop for which the direction in the direction vector is not `='. <p> Carried dependences are important because they determine which loops cannot be executed in parallel without synchronization. Direction vectors are also useful in determining whether loop interchange is legal and profitable <ref> [4, 25, 53] </ref>. Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. <p> ZIV subscripts are vacuously separable because they contain no indices. Separability is important because multidimensional array references can cause imprecision in dependence testing. One suggested approach, called subscript-by-subscript testing, is to test each subscript separately and intersect the resulting sets of direction vectors <ref> [53] </ref>. However, this method provides a conservative approximation to the set of directions within a coupled group| it may yield direction vectors that do not exist. For instance, consider the following loop: DO 10 i A subscript-by-subscript test would yield the single direction vector (&lt;). <p> If the result of the intersection is the empty set, no dependence is possible. Constraint intersection has been employed for both direction vectors <ref> [53] </ref> and coupled SIV subscripts [1, 10]. The version employed by the Delta test is equivalent to an exact multiple subscript SIV test. Dependence distances are the easiest to intersect; a simple comparison suffices. If all distances are not equal, then no dependences exist. <p> Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops [27, 36, 54], including upper triangular loops skewed by loop normalization <ref> [3, 53] </ref>. <p> Cohagan [14] described a test that an-alyzes general SIV subscripts symbolically. Banerjee and Wolfe <ref> [7, 53] </ref> developed the current form of the Single-Index exact test. For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. <p> For MIV subscripts, the GCD test may be used to check unconstrained integer solutions [6, 25]. Baner-jee's inequalities provide a useful general-purpose single subscript test for constrained real solutions [7]. It has also been adapted to provide many different types of dependence information <ref> [4, 8, 9, 25, 26, 53] </ref>. Research has shown that Banerjee's inequalities are exact in many common cases [6, 30, 37], though results have not yet been extended for direction vectors or complex iteration spaces. <p> Lichnewsky and Thomasset describe symbolic dependence testing in the vatil vec-torizer [39]. Haghighat and Polychronopoulos propose a flow analysis framework to aid symbolic tests [22]. Execution conditions may also be used to refine dependence tests. Wolfe's All-Equals test checks for loop-independent dependences invalidated by control flow within the loop <ref> [53] </ref>. Lu and Chen's subdomain test incorporates information about indices from conditionals within the loop body [40]. Klappholz and Kong have extended Banerjee's inequalities to do the same [29]. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and <p> loop <ref> [53] </ref>. Lu and Chen's subdomain test incorporates information about indices from conditionals within the loop body [40]. Klappholz and Kong have extended Banerjee's inequalities to do the same [29]. 7.3 Multiple Subscript Tests Early approaches to impose simultaneity in testing multidimensional arrays include intersecting direction vectors from each dimension [53] and linearization [9, 20]; they proved inaccurate in many cases. True multiple subscript tests provide precision at the expense of efficiency by considering all subscripts simultaneously. In comparison, the Delta test propagates constraints incrementally as needed.
Reference: [54] <author> M. J. Wolfe. </author> <title> Loop skewing: The wavefront method revisited. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 15(4) </volume> <pages> 279-293, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Distance vectors, first used by Kuck and Muraoka [34, 42], are more precise versions of direction vectors that specify the actual distance in loop iterations between two accesses to the same memory location. They may be used to guide optimizations to exploit parallelism <ref> [23, 27, 36, 51, 54] </ref> or the memory hierarchy [11, 19, 43]. Dependence testing thus has two goals. First, it tries to disprove dependence between pairs of subscripted references to the same array variable. <p> The GCD test can now detect independence since the GCD of the coefficients of all the indices is 2, which does not divide evenly into the constant term 5. Distance Vectors The Delta test is particularly useful for analyzing dependences in skewed loops <ref> [27, 36, 54] </ref>, including upper triangular loops skewed by loop normalization [3, 53].
Reference: [55] <author> M. J. Wolfe. </author> <title> Optimizing Supercompilers for Supercomputers. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: However, because of its expense, few if any scalar compilers perform dependence analysis. Parallelizing compilers have traditionally relied on two dependence tests to detect data dependences between pairs of array references: Banerjee's inequalities and the GCD test <ref> [8, 55] </ref>. However, these tests are usually more general than necessary. This paper presents empirical results showing that most array references in scientific Fortran programs are fairly simple. For these simple references, we demonstrate a suite of highly exact yet efficient dependence tests. <p> The ZIV test can be easily extended for symbolic expressions. Simply form the expression representing the difference between the two subscript expressions. If the difference simplifies to a non-zero constant, we have proved independence. 4.2 SIV Tests A number of authors, notably Banerjee, Cohagan, and Wolfe <ref> [8, 14, 55] </ref>, have published a Single-Index exact test for linear SIV subscripts based on finding all solutions to a simple Diophantine equation in two variables. Here we present a new exact test based on the idea of treating the most commonly occurring SIV subscripts as special cases. <p> We evaluate the resulting expressions to calculate the minimal and maximal values for the loop index, then repeat for the next inner loop. This algorithm returns the maximal range for each index, all that is needed for SIV tests. 4.4 MIV Tests The Banerjee-GCD test <ref> [4, 8, 25, 55] </ref> may be employed to construct all legal direction vectors for linear subscripts containing multiple indices. In most cases the test can also determine the minimal dependence distance for the carrier loop. Since the literature in this area is extensive, we will not discuss it further here. <p> They are similar to SIV subscripts, except that i and j are distinct indices. By observing different loop bounds for i and j, SIV tests may also be extended to exactly test RDIV subscripts <ref> [55] </ref>. 4.5 Symbolic Tests As we have pointed out in the text, we can perform dependence testing in a natural way for subscripts with loop-invariant symbolic additive constants. <p> However, the Delta test can easily propagate distance constraints for i from the first subscript into the second subscript to derive the distance vectors (1; 1) and (0; 1). This dependence information may then be used to guide further optimizations such as loop interchange, loop blocking, or scalar replacement <ref> [11, 51, 55] </ref>. 5.3.2 Restricted DIV Constraints In the previous section we showed how SIV constraints may be propagated. Propagating MIV constraints is expensive in the general case. However, we present a method to handle an important special case consisting of coupled RDIV subscripts (discussed in Section 4.4).
Reference: [56] <author> M. J. Wolfe and C. Tseng. </author> <title> The Power test for data dependence. </title> <type> Technical Report CS/E 90-015, </type> <institution> Dept. of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> August </month> <year> 1990. </year> <note> To appear in IEEE Transactions on Parallel and Distributed Systems. </note>
Reference-contexts: Some recent research has focused on overcoming this deficiency <ref> [38, 50, 56] </ref>. In this section we present the Delta test, a multiple subscript test designed to be exact yet efficient for common coupled subscripts. Figure 3 presents an overview of the Delta test algorithm. <p> Finally, the Delta test does not propagate constraints from general MIV subscripts. As a result, coupled MIV subscripts may remain at the end of the Delta test. More general but expensive multiple subscript dependence tests such as the or Power tests may be used in these cases <ref> [38, 56] </ref>. Since each subscript in the coupled group is tested at most once, the complexity of the Delta test is linear in the number of subscripts. <p> It applies Gaussian elimination modified for integers to create a compact system where all integer points provide integer solutions to the original dependence system. It can also be extended to provide an exact test for distance vectors <ref> [56] </ref>. Power Test Wolfe and Tseng's Power test gains great precision by applying loop bounds using Fourier-Motzkin elimination to the dense system resulting from the multidimensional GCD test [56]. <p> It can also be extended to provide an exact test for distance vectors <ref> [56] </ref>. Power Test Wolfe and Tseng's Power test gains great precision by applying loop bounds using Fourier-Motzkin elimination to the dense system resulting from the multidimensional GCD test [56]. The Power test is expensive, but is also flexible and well-suited for providing precise dependence information such as direction vectors in imperfectly nested loops, loops with complex bounds, and non-direction vector constraints. Both the Constraint-Matrix and -tests require that a pretest be used to eliminate linearly dependent subscripts.
References-found: 56

