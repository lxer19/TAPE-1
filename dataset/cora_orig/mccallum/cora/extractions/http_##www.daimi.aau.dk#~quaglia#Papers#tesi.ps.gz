URL: http://www.daimi.aau.dk/~quaglia/Papers/tesi.ps.gz
Refering-URL: http://www.daimi.aau.dk/~quaglia/papers.html
Root-URL: http://www.daimi.aau.dk
Phone: TEL: +39-50-887001 FAX: +39-50-887226  
Title: The -calculus with explicit substitutions  
Degree: DOTTORATO DI RICERCA IN  
Date: 1996  
Note: Ph.D. Thesis: TD-09/96  March  E MAIL: quaglia@di.unipi.it  
Address: Pisa-Genova-Udine  Corso Italia 40, 56100 Pisa, Italy.  
Affiliation: UNIVERSIT A DEGLI STUDI DI PISA DIPARTIMENTO DI INFORMATICA  INFORMATICA Universita di  ADDR:  
Abstract: Paola Quaglia Abstract. The aim of this work is to describe the prototypical mobility expressed by the -calculus within a CCS-like approach to process algebras. Many versions of -calculus bisimulation equivalence are found in the literature: late - both strong and weak - bisimilarity and full congruence, early both strong and weak - bisimilarity and full congruence, and open congruence. In this thesis, all the above -calculus semantics are characterized by means of specialized transition systems over which the usual definitions of strong and o-forgetting bisimulations can be applied. Analogous characterizations do hold for branching and progressing both late and early - bisimulations. The goal is achieved by introducing suitable constructors for both the explicit handling of name substitutions and the explicit instantiation of names. The operational interpretation of those operators ensures that input parameters can always be actualized by a finite number of names. Except for the unguarded behaviour of the replication operator, the above feature allows -calculus processes to be modelled by finitely branching structures. This is generally not the case for name-passing calculi, which naturally force infinitary reasoning on the semantics of even- finite processes. So, our results might be particularly useful in the perspective of verifying mobile systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky. </author> <title> A Domain Equation for Bisimulation. </title> <journal> Information and Computation, </journal> <volume> 92(2) </volume> <pages> 161-218, </pages> <year> 1991. </year>
Reference: [2] <author> L. Aceto. </author> <title> On "axiomatising finite concurrent processes". </title> <journal> SIAM Journal of Computing, </journal> <volume> 23(4) </volume> <pages> 852-863, </pages> <year> 1994. </year>
Reference-contexts: Notice that, while U and V are axiom schemata with an infinite number of possible instantiations, in every instantiation the summation 0 is extended only to a finite number of summands. Referring to [38], Luca Aceto discussed in <ref> [2] </ref> the problems given raise by the interplay between the auxiliary constructs for expanding parallel compositions and the second Milner's o -law.
Reference: [3] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS Rules into Equations. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 113-124, </pages> <year> 1992. </year>
Reference: [4] <author> L. Aceto, B. Bloom, and F. Vaandrager. </author> <title> Turning SOS Rules into Equations. </title> <journal> Information and Computation, </journal> <volume> 111(1) </volume> <pages> 1-52, </pages> <year> 1994. </year> <note> Full version of [3]. </note>
Reference-contexts: This is shown to be of both pragmatic and theoretical interest. The algorithms for CCS automated verification tools may be reused (e.g. [77, 50, 21]), and axiomatic characterizations are aided by the possibility of applying both general theorems of the format-based theory (e.g. those proved in <ref> [25, 4] </ref>) and known relationships between the equational systems for strong bisimilarity and for o -forgetting bisimilarities. 2.2 Basic common features The main common feature of all the transition systems which we will define is the explicit handling of name instantiation via the introduction of a suitable combinator. <p> Analogously, when the considered specification is respectful of a specific format, a given algorithm <ref> [4] </ref> can be applied to define head-normalizing axiom systems. The finite fragment of the symbolic operational semantics of Tab. 2.1 (that is, all the rules but the one for the bang operator) fits in a simple generalization of the 2.6. <p> Namely we must define the satisfaction requirement over structured labels. As a result of the above observation, we can state a head-normalizing axiom system for the terms of the transition system of Tab. 2.1 just by exploiting the procedure presented in <ref> [4] </ref>. This only requires looking at the syntactic structure of the inference rules. 2.6.1 Auxiliary axiom system We exploit in the following the procedure introduced in [4] for extracting from SOS rules a head-normalizing axiom system. <p> we can state a head-normalizing axiom system for the terms of the transition system of Tab. 2.1 just by exploiting the procedure presented in <ref> [4] </ref>. This only requires looking at the syntactic structure of the inference rules. 2.6.1 Auxiliary axiom system We exploit in the following the procedure introduced in [4] for extracting from SOS rules a head-normalizing axiom system. The first step of the mentioned procedure consists in breaking down, by means of auxiliary operators, each (smooth and not distinctive) process constructor f whose operational behaviour is described by more than one inference rule. <p> Also, the syntactic structure of the inference rules describing the operational semantics fits with a standard SOS format. So, axiomatic characterizations are aided by the possibility of applying general results of the format-based theory <ref> [4] </ref> and known relationships among strong equivalence and o -forgetting bisimulations [59, 96, 72]. The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus.
Reference: [5] <author> R. Amadio. </author> <title> On the reduction of CHOCS bisimulation to -calculus bisimula-tion. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th International Conference on Concurrency Theory, CONCUR '93, volume 715 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [6] <editor> D. Austry and G. Boudol. Algebre de processus et synchronisations. </editor> <booktitle> Theoretical Computer Science, </booktitle> <volume> 30(1) </volume> <pages> 91-131, </pages> <year> 1984. </year>
Reference: [7] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process Algebra for Synchronous Communication. </title> <journal> Information and Control, </journal> <volume> 60 </volume> <pages> 109-137, </pages> <year> 1984. </year>
Reference-contexts: A -calculus process is written :: P where ` :: ' is a binary state operator <ref> [7, 8] </ref> and is an environment keeping track of the associations among names, and P is a process built up by the -calculus syntax plus a new kind of prefixes. The syntax of the right component of the process :: P is formally defined as follows. <p> A similar strategy handles the expansion law of the parallel composition, where the required auxiliary operators are the ACP <ref> [7] </ref> merge operators. 52 Chapter 2. The -calculus The procedure goes on imposing on smooth and distinctive operators distributive, action and inaction equations. Distributive laws describe the interplay between the non-deterministic choice operator and the other operators (e.g. ( y )(P + Q) = ( y )P +( y )Q).
Reference: [8] <author> J.A. Bergstra and J.W. Klop. </author> <title> Algebra of communicating processes with abstraction. </title> <journal> Theoretical Computer Science, </journal> <volume> 37(1) </volume> <pages> 77-121, </pages> <year> 1985. </year>
Reference-contexts: A -calculus process is written :: P where ` :: ' is a binary state operator <ref> [7, 8] </ref> and is an environment keeping track of the associations among names, and P is a process built up by the -calculus syntax plus a new kind of prefixes. The syntax of the right component of the process :: P is formally defined as follows.
Reference: [9] <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation Can't Be Traced: Preliminary Report. </title> <booktitle> In Proc. 15th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 229-239, </pages> <year> 1988. </year> <note> 173 174 BIBLIOGRAPHY </note>
Reference: [10] <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation Can't Be Traced. </title> <journal> Journal of the ACM, </journal> <volume> 42(1) </volume> <pages> 232-268, </pages> <year> 1995. </year> <note> Full version of [9]. </note>
Reference-contexts: By `general' we mean that once a result has been proven (e.g. strong bisimulation is a congruence <ref> [25, 10, 37] </ref>) it becomes reusable for all the individual languages whose operational semantics fit in the studied format. Analogously, when the considered specification is respectful of a specific format, a given algorithm [4] can be applied to define head-normalizing axiom systems.
Reference: [11] <author> M. Boreale and R. De Nicola. </author> <title> Testing Equivalence for Mobile Processes. </title> <booktitle> In Proc. 3rd International Conference on Concurrency Theory, CONCUR '92, volume 630 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [12] <author> M. Boreale and R.. De Nicola. </author> <title> A Symbolic Semantics for the -calculus. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> Proc. 5th International Conference on Concurrency Theory, CONCUR '94, volume 836 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: As a consequence, each of the transition systems which we will take under consideration is a standard labelled transition system, and the behaviours of -calculus processes are compared relying on CCS-like relations of bisimulation. In this respect our approach is rather different than those proposed in <ref> [42, 89, 12] </ref>, where the operational use of conditional labels shows up in the definition of bisimulations which are got as closures on top of families of indexed relations.
Reference: [13] <author> M. Boreale and R. De Nicola. </author> <title> Testing Equivalence for Mobile Processes. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 279-303, </pages> <year> 1995. </year> <note> Full version of [11]. </note>
Reference-contexts: Our formulation of the open semantics is closely related to the one defined in [89]. In both cases the instantiation of any name input objects included is delayed until the name is actually used. This confirms once again that, just like the testing equivalence <ref> [13, 47] </ref>, the open semantics does not naturally splits into a late and an early paradigm. Dealing with the open semantics seems to be mainly a matter of imposing adequate constraints on name substitutions.
Reference: [14] <author> M. Boreale and D. Sangiorgi. </author> <title> A fully abstract semantics for causality in the pi-calculus. </title> <type> Report ECS-LFCS-94-297, </type> <institution> Laboratory for Foundations of Computer Science, Computer Science Department, Edinburgh University, </institution> <year> 1994. </year> <note> An extract appeared in the Proc. of STACS '95, LNCS 900. </note>
Reference: [15] <author> A. Bouali, S. Gnesi, and S. Larosa. </author> <title> The Integration Project for the JACK Environment. </title> <journal> EATCS Bulletin, </journal> <volume> 54, </volume> <year> 1994. </year>
Reference-contexts: The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed [68, 31] at the limited price of integrating the already settled JACK package system <ref> [15] </ref>. In the following, we want to point out a general remark on our approach. Each of the characterizations of P i Q involves closely paired -calculus agents.
Reference: [16] <author> G. Boudol, I. Castellani, M. Hennessy, and A. Kiehn. </author> <title> Observing Localities (Extended Abstract). </title> <editor> In A. Tarlecki, editor, </editor> <booktitle> Proc. 16th International Symp. on Mathematical Foundations of Computer Science, MFCS '91, volume 520 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [17] <author> G. Boudol, I. Castellani, M. Hennessy, and A. Kiehn. </author> <title> Observing localities. </title> <journal> Theoretical Computer Science, </journal> <volume> 114(1) </volume> <pages> 31-61, </pages> <year> 1993. </year> <note> Full version of [16]. </note>
Reference: [18] <author> S.D. Brookes, C.A.R. Hoare, and A.W. Roscoe. </author> <title> A Theory of Communicating Sequential Processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference: [19] <author> I. Castellani. </author> <title> Observing Distribution in Processes. </title> <editor> In A.M. Borzyszkowski and S. Sokolowski, editors, </editor> <booktitle> Proc. 18th International Symp. on Mathematical Foundations of Computer Science, MFCS '93, volume 711 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> BIBLIOGRAPHY 175 </note>
Reference: [20] <author> R. Cleaveland and M. Hennessy. </author> <title> Priorities in Process Algebras. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 58-77, </pages> <year> 1990. </year>
Reference-contexts: The next compulsory- move of the process 0 :: y:P 0 is the instantiation of the inputted name y. Notice that the operational description guarantees instantiations to have priority over any other action even when the inputting agent is underneath a parallel composition <ref> [20] </ref>. For instance, the derivation 60 Chapter 3.
Reference: [21] <author> R. Cleaveland, J. Parrow, and B. Steffen. </author> <title> The Concurrency Workbench: A Semantics-Based Tool for the Verification of Concurrent Systems. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 36-72, </pages> <year> 1993. </year>
Reference-contexts: We present a framework for uniformly reasoning about the -calculus semantics in terms of ordinary bisimulations. This is shown to be of both pragmatic and theoretical interest. The algorithms for CCS automated verification tools may be reused (e.g. <ref> [77, 50, 21] </ref>), and axiomatic characterizations are aided by the possibility of applying both general theorems of the format-based theory (e.g. those proved in [25, 4]) and known relationships between the equational systems for strong bisimilarity and for o -forgetting bisimilarities. 2.2 Basic common features The main common feature of all
Reference: [22] <author> M. Dam. </author> <title> On the Decidability of Process Equivalence for the -Calculus. In V.S. </title> <editor> Alagar and M. Nivat, editors, </editor> <booktitle> Proc. 4th International Conference on Algebraic Methodology and Software Technology, volume 936 of Lecture Notes in Computer Science, </booktitle> <pages> pages 169-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [23] <author> P. Darondeau and P. Degano. </author> <title> Causal trees. </title> <editor> In G. Ausiello, M. Dezani-Ciancaglini, and S. Ronchi Della Rocca, editors, </editor> <booktitle> Proc. 16th International Colloquium on Automata, Languages and Programming, volume 372 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference: [24] <author> R. De Nicola. </author> <title> Extensional Equivalences for Transition Systems. </title> <journal> Acta Infor-matica, </journal> <volume> 24 </volume> <pages> 211-237, </pages> <year> 1987. </year>
Reference-contexts: Operational semantics are generally too intensional, i.e. they discriminate also behaviours which should reasonably be considered interchangeable. Then, more abstract semantics are got by introducing equivalences which identify those processes behaving the same w.r.t. fixed notions of observation <ref> [24] </ref>. A large number of such equivalences have been proposed, each of them stressing a distinct peculiarity of process behaviour. In the following, we recall the definitions of the most assessed equivalence rela 17 18 Chapter 1.
Reference: [25] <author> R. De Simone. </author> <title> Higher level synchronizing devices in MEIJE-SCCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 37(3) </volume> <pages> 245-267, </pages> <year> 1985. </year>
Reference-contexts: This is shown to be of both pragmatic and theoretical interest. The algorithms for CCS automated verification tools may be reused (e.g. [77, 50, 21]), and axiomatic characterizations are aided by the possibility of applying both general theorems of the format-based theory (e.g. those proved in <ref> [25, 4] </ref>) and known relationships between the equational systems for strong bisimilarity and for o -forgetting bisimilarities. 2.2 Basic common features The main common feature of all the transition systems which we will define is the explicit handling of name instantiation via the introduction of a suitable combinator. <p> By `general' we mean that once a result has been proven (e.g. strong bisimulation is a congruence <ref> [25, 10, 37] </ref>) it becomes reusable for all the individual languages whose operational semantics fit in the studied format. Analogously, when the considered specification is respectful of a specific format, a given algorithm [4] can be applied to define head-normalizing axiom systems. <p> The finite fragment of the symbolic operational semantics of Tab. 2.1 (that is, all the rules but the one for the bang operator) fits in a simple generalization of the 2.6. On the format of symbolic rules 51 De Simone format <ref> [25] </ref> where labels of transitions are elements of an algebra with several operations (see Tab 2.2) rather than elements of a monoid of actions.
Reference: [26] <author> P. Degano, R. De Nicola, and U. Montanari. </author> <title> On the Consistency of "Truly Concurrent" Operational and Denotational Semantics. </title> <booktitle> In Proc. 3rd IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 133-141, </pages> <year> 1988. </year>
Reference: [27] <author> P. Degano, R. De Nicola, and U. Montanari. </author> <title> A partial ordering semantics for CCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 75 </volume> <pages> 223-262, </pages> <year> 1990. </year>
Reference: [28] <author> P.P. Degano and C. Priami. </author> <title> Proved Trees. </title> <booktitle> In Proc. 19th International Colloquium on Automata, Languages and Programming, volume 623 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [29] <author> U. Engberg and M. Nielsen. </author> <title> A Calculus of Communicating Systems with Label-passing. </title> <type> Technical Report DAIMI-PB-208, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1986. </year> <note> 176 BIBLIOGRAPHY </note>
Reference: [30] <author> G.-L. Ferrari, R. Gorrieri, and U. Montanari. </author> <title> An Extended Expansion Theorem. </title> <editor> In S. Abramsky and T.S.E. Maibaum, editors, </editor> <booktitle> Proc. 3rd International Joint Conference on Theory and Practice of Software Development, TAP-SOFT '91, volume 494 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: The symbolic operational semantics is reported in Tab. 2.1. Transition labels are equipped with some operations, so they form an observation algebra <ref> [30] </ref>. The algebra is defined in Tab 2.2. Notice that the execution of the new prefixes y results in the actions [y] which, although resembling the concretions of [63], have no counterpart in the -calculus. Also, differently from the -calculus, communication is characterized by a single inference rule. <p> Action laws describe the interactions of all the operators with prefixing. Here, we need to extend action laws to the case of the generalized prefixing !:P (see <ref> [30] </ref>). Action laws cause auxiliary operators to be pushed as deep as possible inside terms (e.g. ( y )(!:P ) = y (!):(y)P ). Finally, the so called inaction equations identify as the inactive process any expression having no outgoing transition (e.g. ( y ) nil = nil ).
Reference: [31] <author> G.-L. Ferrari, G. Modoni, and P. Quaglia. </author> <title> Towards a Semantic-Based Verification Environment for the -calculus. </title> <booktitle> In Proc. 5th Italian Conference on Theoretical Computer Science, </booktitle> <year> 1995. </year>
Reference-contexts: The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed <ref> [68, 31] </ref> at the limited price of integrating the already settled JACK package system [15]. In the following, we want to point out a general remark on our approach. Each of the characterizations of P i Q involves closely paired -calculus agents.
Reference: [32] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> A -calculus with Explicit Substitutions: the Late Semantics. </title> <editor> In I. Privara, B. Rovan, and P. Ruzicka, editors, </editor> <booktitle> Proc. 19th International Symp. on Mathematical Foundations of Computer Science, MFCS '94, volume 841 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-351. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [33] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> A -calculus with Explicit Substitutions. </title> <note> Extended version of [32], to appear in TCS, </note> <year> 1995. </year>
Reference-contexts: Late ground -calculus semantics are characterized in terms of the corresponding CCS-like bisimilarities of suitable -processes. The -calculus transition system presented in this chapter already appeared in [34]. It generalizes the semantic model proposed in <ref> [33] </ref>. In the latter paper, the strong late ground -calculus bisimilarity was given a characterization in terms of ordinary strong equivalence, but the approach did not allow a natural extension to the treatment of o -forgetting bisimulation relations.
Reference: [34] <author> G.-L. Ferrari, U. Montanari, and P. Quaglia. </author> <title> The Weak Late -calculus Semantics as Observation Equivalence. </title> <editor> In I. Lee and S.A. Smolka, editors, </editor> <booktitle> Proc. 6th International Conference on Concurrency Theory, CONCUR '95, volume 962 of Lecture Notes in Computer Science, </booktitle> <pages> pages 57-71. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: This allows us to prove that the two late calculi coincide in a precise sense. Late ground -calculus semantics are characterized in terms of the corresponding CCS-like bisimilarities of suitable -processes. The -calculus transition system presented in this chapter already appeared in <ref> [34] </ref>. It generalizes the semantic model proposed in [33]. In the latter paper, the strong late ground -calculus bisimilarity was given a characterization in terms of ordinary strong equivalence, but the approach did not allow a natural extension to the treatment of o -forgetting bisimulation relations.
Reference: [35] <author> S.J. Gay. </author> <title> A Sort Inference Algorithm for the Polyadic -Calculus. </title> <booktitle> In Proc. 20th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 429-438, </pages> <year> 1993. </year>
Reference: [36] <author> A. Giacalone, P. Mishra, and S. Prasad. </author> <title> FACILE: A Symmetric Integration of Concurrent and Functional Programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2) </volume> <pages> 121-160, </pages> <year> 1989. </year>
Reference-contexts: So, the little autonomy of -calculus processes seems to be an unavoidable price to pay when reducing the intrinsically infinitary interpretation of input actions to a finite model. The applicability of the presented framework to either value-passing or higher-order or integrated functional-concurrent languages <ref> [36, 94, 92, 84, 93] </ref> still remains to be investigated. The first, obvious, attempt to the specification of such languages in a CCS-like setting consists in taking advantage of both their encodings into the -calculus and the translation of -terms into -processes.
Reference: [37] <author> J.F. Groote and F. Vaandrager. </author> <title> Structured Operational Semantics and Bisim-ulation as a Congruence. </title> <journal> Information and Computation, </journal> <volume> 100(2) </volume> <pages> 202-260, </pages> <year> 1992. </year>
Reference-contexts: By `general' we mean that once a result has been proven (e.g. strong bisimulation is a congruence <ref> [25, 10, 37] </ref>) it becomes reusable for all the individual languages whose operational semantics fit in the studied format. Analogously, when the considered specification is respectful of a specific format, a given algorithm [4] can be applied to define head-normalizing axiom systems.
Reference: [38] <author> M. Hennessy. </author> <title> Axiomatising finite concurrent processes. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17(5) </volume> <pages> 997-1017, </pages> <year> 1988. </year> <note> BIBLIOGRAPHY 177 </note>
Reference-contexts: Notice that, while U and V are axiom schemata with an infinite number of possible instantiations, in every instantiation the summation 0 is extended only to a finite number of summands. Referring to <ref> [38] </ref>, Luca Aceto discussed in [2] the problems given raise by the interplay between the auxiliary constructs for expanding parallel compositions and the second Milner's o -law.
Reference: [39] <author> M. Hennessy and A. Ingolfsdottir. </author> <title> A Theory of Communicating Processes with Value-Passing. </title> <journal> Information and Computation, </journal> <volume> 107(2) </volume> <pages> 202-236, </pages> <year> 1993. </year>
Reference-contexts: Such an interpretation naturally fits with the early paradigm, while late modellings of value-passing appeared only later <ref> [65, 39] </ref>. Nevertheless, late strategies seem to subsume the early ones. For instance, the relationship between the late and the early -calculus puts some evidence on the fact that the early paradigm can be dealt with as a special instance of the more general late view.
Reference: [40] <author> M. Hennessy and H. Lin. </author> <title> Proof Systems for Message-Passing Process Algebras. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th International Conference on Concurrency Theory, CONCUR '93, volume 715 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [41] <author> M. Hennessy and H. Lin. </author> <title> Proof Systems for Message-Passing Process Algebras. </title> <type> Technical Report 5/93, </type> <institution> Computer Science, University of Sussex, </institution> <year> 1993. </year> <note> Full version of [40]. </note>
Reference-contexts: Just like the equational theory for ground bisimilarity which was investigated in the same paper, the system makes use of the mismatching construct. In [52], introducing a specialized transition system, the weak late bisimilarity was axiomatized in terms of an alternative behavioural equivalence, the so-called symbolic bisimulation <ref> [41, 42] </ref>.
Reference: [42] <author> M. Hennessy and H. Lin. </author> <title> Symbolic Bisimulations. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 353-389, </pages> <year> 1995. </year>
Reference-contexts: Just like the equational theory for ground bisimilarity which was investigated in the same paper, the system makes use of the mismatching construct. In [52], introducing a specialized transition system, the weak late bisimilarity was axiomatized in terms of an alternative behavioural equivalence, the so-called symbolic bisimulation <ref> [41, 42] </ref>. <p> As a consequence, each of the transition systems which we will take under consideration is a standard labelled transition system, and the behaviours of -calculus processes are compared relying on CCS-like relations of bisimulation. In this respect our approach is rather different than those proposed in <ref> [42, 89, 12] </ref>, where the operational use of conditional labels shows up in the definition of bisimulations which are got as closures on top of families of indexed relations.
Reference: [43] <author> M. Hennessy and R. Milner. </author> <title> Algebraic Laws for Nondeterminism and Con-currency. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 137-161, </pages> <year> 1985. </year>
Reference-contexts: Namely, replacing bisimilar processes P and Q into any CCS-context C [ ] results in bisimilar agents C [P ] and C [Q]. A complete axiom system for strong bisimulation over a recursion-free language appeared in <ref> [43] </ref>. Omitting the usual rules for reflexivity, symmetry, and substitutivity of equality, that system consists of the axioms in Tab. 1.1, plus an expansion law which interprets all the operators in terms of the prefixing and of the choice constructs. 1.1. <p> We first review the weak bisimulation and the weak (or observational ) congruence. Definition 1.2 (weak bisimulation and weak or observational congruence <ref> [43, 59] </ref>) A binary symmetric relation S over processes is a weak bisimulation if P S Q implies that if P . P 0 then for some Q 0 , Q bff P is weak bisimilar to Q, written P Q, if P S Q for some weak bisimulation S. <p> The axiomatization of weak congruence over a recursion-free language is got by adding the axiom system for strong bisimulation with the three o -laws in Tab. 1.2 <ref> [43, 60] </ref>. Both branching and progressing bisimulation refine weak congruence. The first one aims to equate processes with as close as possible branching capabilities. As the execution of arbitrarily many o -moves potentially disregards external choices, when matching the strong move P ff . <p> Then the thesis follows. (ii) It is enough to show that the sub-theory of A L consisting in C1 0 C4 0 is complete for terms in hnf. The proof follows the guidelines of the well-known result of <ref> [43] </ref>. 2 3.4 Encodings The main theorems of the present chapter are coincidence results of the shape P _ i L Q iff N :: P i j L N :: Q where N = fn (P; Q) and _ i L and i j L range over late ground -calculus <p> Then, either the completeness of (A a ; A E ) or the proofs of the results relative to the other equivalences are applications of standard techniques <ref> [43, 59, 96, 72] </ref>. The proof that (A a ; A E ) is head-normalizing is carried out as follows. Suppose to consider the term :: P , with P i ! i :P i being the normal form of the process P .
Reference: [44] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference: [45] <author> C.E. Hewitt, P. Bishop, and R. Steiger. </author> <title> A universal modular actor formalism for artificial intelligence. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence., </booktitle> <pages> pages 235-245, </pages> <year> 1973. </year>
Reference: [46] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference: [47] <author> A. Ingolfsdottir. </author> <title> Late and early semantics coincide for testing. </title> <type> Report 93-2008, </type> <institution> Department of Mathematics and Computer Science, Aalborg University Centre, </institution> <year> 1993. </year> <note> To appear in Theoretical Computer Science. </note>
Reference-contexts: Our formulation of the open semantics is closely related to the one defined in [89]. In both cases the instantiation of any name input objects included is delayed until the name is actually used. This confirms once again that, just like the testing equivalence <ref> [13, 47] </ref>, the open semantics does not naturally splits into a late and an early paradigm. Dealing with the open semantics seems to be mainly a matter of imposing adequate constraints on name substitutions.
Reference: [48] <author> C.B. Jones. </author> <title> A pi-calculus Semantics for an Object-Based Design Notation. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th International Conference on Concurrency Theory, CONCUR '93, volume 715 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [49] <author> B. Jonsson and J. Parrow. </author> <title> Deciding Bisimulation Equivalences for a Class of Non-Finite-State Programs. </title> <journal> Information and Computation, </journal> <volume> 107(2) </volume> <pages> 272-302, </pages> <year> 1993. </year> <note> 178 BIBLIOGRAPHY </note>
Reference-contexts: V V V V V V V ** N + (y; newD ( N )) :: Q ** N + (y; N (x)) :: nil N + (y; N (z)) :: Q o N + (y; newD ( N )) :: nil N + (y; N (z)) :: nil in <ref> [49] </ref> in order to gain a compact representation of data values. Also notice that at any time during execution only finitely many constants are active. This implies that finite -processes can be always represented by labelled trees which are finitely branching.
Reference: [50] <author> P.C. Kanellakis and S.A. Smolka. </author> <title> CCS Expressions, Finite State Processes, and Three Problems of Equivalence. </title> <journal> Information and Computation, </journal> <volume> 86(1) </volume> <pages> 43-68, </pages> <year> 1990. </year>
Reference-contexts: We present a framework for uniformly reasoning about the -calculus semantics in terms of ordinary bisimulations. This is shown to be of both pragmatic and theoretical interest. The algorithms for CCS automated verification tools may be reused (e.g. <ref> [77, 50, 21] </ref>), and axiomatic characterizations are aided by the possibility of applying both general theorems of the format-based theory (e.g. those proved in [25, 4]) and known relationships between the equational systems for strong bisimilarity and for o -forgetting bisimilarities. 2.2 Basic common features The main common feature of all
Reference: [51] <author> D.E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The art of computer programming. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1973. </year> <note> Second edition. </note>
Reference-contexts: We adopted here the same notation used in <ref> [51] </ref>.) The number n grows much more than 2 n .
Reference: [52] <author> H. Lin. </author> <title> Complete Inference Systems for Weak Bisimulation Equivalences in the -Calculus. </title> <editor> In P.D. Mosses, M. Nielsen, and M.I. Schwartzbach, editors, </editor> <booktitle> Proc. 6th International Joint Conference CAAP/FASE, TAPSOFT '95, volume 915 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A complete axiom system for strong late bisimilarity of finite processes was defined in [79]. Just like the equational theory for ground bisimilarity which was investigated in the same paper, the system makes use of the mismatching construct. In <ref> [52] </ref>, introducing a specialized transition system, the weak late bisimilarity was axiomatized in terms of an alternative behavioural equivalence, the so-called symbolic bisimulation [41, 42].
Reference: [53] <author> X. Liu and D. Walker. </author> <title> Confluence of Processes and Systems of Objects. </title> <editor> In P.D. Mosses, M. Nielsen, and M.I. Schwartzbach, editors, </editor> <booktitle> Proc. 6th International Joint Conference CAAP/FASE, TAPSOFT '95, volume 915 of Lecture Notes in Computer Science, </booktitle> <pages> pages 217-231. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [54] <author> X. Liu and D. Walker. </author> <title> A Polymorphic Type System for the Polyadic - calculus. </title> <editor> In I. Lee and S.A. Smolka, editors, </editor> <booktitle> Proc. 6th International Conference on Concurrency Theory, CONCUR '95, volume 962 of Lecture Notes in Computer Science, </booktitle> <pages> pages 103-116. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [55] <author> J. McCarthy. </author> <title> Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part 1. </title> <journal> Communications of the ACM, </journal> <volume> 3, </volume> <year> 1960. </year>
Reference-contexts: The satisfability of C is checked by means of a boolean evaluation function whose definition is stated in Tab. 2.6 in McCarthy style <ref> [55] </ref>. Whenever the requirements expressed by C are not met in the environment , the above rule cannot be applied.
Reference: [56] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: The thesis ends up with Chapter 7 where some concluding remarks are collected. For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like <ref> [56, 59] </ref>) bisimulation semantics and of the -calculus [65]. The late [65], the early [66], and the open [89] -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. <p> E ; T 1; T 2 ` N :: P = N :: Q Proof: By Theorem 4.4 and Theorem 4.10. 2 4.5 Concluding remarks The first attempt to the interpretation of value-passing can be probably dated back to the translation of full CCS into pure CCS with infinite summations <ref> [56] </ref>. Such an interpretation naturally fits with the early paradigm, while late modellings of value-passing appeared only later [65, 39]. Nevertheless, late strategies seem to subsume the early ones.
Reference: [57] <author> R. Milner. </author> <title> Calculi for synchrony and asynchrony. </title> <journal> Theoretical Computer Science, </journal> <volume> 25 </volume> <pages> 267-310, </pages> <year> 1983. </year>
Reference-contexts: Also, we assume . to be a labelled transition relation among processes. For historical reasons, we start by reviewing the definition of strong bisimulation <ref> [78, 57] </ref>. For the two processes P and Q to be strong bisimilar, each transition from P must be mimicked by a transition from Q and vice-versa, leading again to equivalent derivatives P 0 and Q 0 . Definition 1.1 (strong bisimulation [78, 57]) A binary symmetric relation S over processes <p> start by reviewing the definition of strong bisimulation <ref> [78, 57] </ref>. For the two processes P and Q to be strong bisimilar, each transition from P must be mimicked by a transition from Q and vice-versa, leading again to equivalent derivatives P 0 and Q 0 . Definition 1.1 (strong bisimulation [78, 57]) A binary symmetric relation S over processes is a strong bisimulation if P S Q implies that if P .
Reference: [58] <author> R. Milner. </author> <title> Process constructors and interpretations. </title> <booktitle> In Information Processing, Proc. IFIP 10th World Computer Congress, </booktitle> <address> Dublin, Ireland, </address> <year> 1986. </year>
Reference-contexts: This is meant to label transitions which cannot be influenced by interactions with the external environment <ref> [58] </ref>. As in CCS, we call o such a silent action. Equivalence relations coarser than strong bisimulation build on the intuition that, in view of the `un-reactive' nature of o , o -steps may be absorbed by observable moves.
Reference: [59] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The thesis ends up with Chapter 7 where some concluding remarks are collected. For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like <ref> [56, 59] </ref>) bisimulation semantics and of the -calculus [65]. The late [65], the early [66], and the open [89] -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. <p> We first review the weak bisimulation and the weak (or observational ) congruence. Definition 1.2 (weak bisimulation and weak or observational congruence <ref> [43, 59] </ref>) A binary symmetric relation S over processes is a weak bisimulation if P S Q implies that if P . P 0 then for some Q 0 , Q bff P is weak bisimilar to Q, written P Q, if P S Q for some weak bisimulation S. <p> Once got this result, the other items can be shown by using the techniques exploited in <ref> [59] </ref>, in [96], and in [72], resp.. For instance, the proof of the completeness of (A a ; A L ; A w ) passes through a saturation lemma which states that if S ae ==. <p> Then, either the completeness of (A a ; A E ) or the proofs of the results relative to the other equivalences are applications of standard techniques <ref> [43, 59, 96, 72] </ref>. The proof that (A a ; A E ) is head-normalizing is carried out as follows. Suppose to consider the term :: P , with P i ! i :P i being the normal form of the process P . <p> Also, the syntactic structure of the inference rules describing the operational semantics fits with a standard SOS format. So, axiomatic characterizations are aided by the possibility of applying general results of the format-based theory [4] and known relationships among strong equivalence and o -forgetting bisimulations <ref> [59, 96, 72] </ref>. The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed [68, 31] at the limited price of integrating the already settled JACK package system [15].
Reference: [60] <author> R. Milner. </author> <title> A Complete Axiomatisation for Observational Congruence of Finite-State Behaviours. </title> <journal> Information and Computation, </journal> <volume> 81(2) </volume> <pages> 227-247, </pages> <year> 1989. </year> <note> BIBLIOGRAPHY 179 </note>
Reference-contexts: The axiomatization of weak congruence over a recursion-free language is got by adding the axiom system for strong bisimulation with the three o -laws in Tab. 1.2 <ref> [43, 60] </ref>. Both branching and progressing bisimulation refine weak congruence. The first one aims to equate processes with as close as possible branching capabilities. As the execution of arbitrarily many o -moves potentially disregards external choices, when matching the strong move P ff .
Reference: [61] <author> R. Milner. </author> <title> Weak bisimilarity: congruences and equivalences. </title> <booktitle> Unpublished notes, </booktitle> <year> 1990. </year>
Reference-contexts: We now turn to the weak semantics, and recall the definitions of both weak late ground bisimulation and weak late ground equality <ref> [61, 89] </ref>. Analogously to the observational semantics of CCS-like languages, the last equivalence, in order to guarantee substitutivity in choice contexts, requires a silent action to be matched by at least one silent move. Definition 1.10 (weak late ground bisimulation and weak late ground equality [61, 89]) A binary symmetric relation <p> and weak late ground equality <ref> [61, 89] </ref>. Analogously to the observational semantics of CCS-like languages, the last equivalence, in order to guarantee substitutivity in choice contexts, requires a silent action to be matched by at least one silent move. Definition 1.10 (weak late ground bisimulation and weak late ground equality [61, 89]) A binary symmetric relation S is a weak late ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 fn (P; Q), then for some Q 0 , Q bff and P 0 S Q 0 x <p> This can be shown making use of an example due to Davide Sangiorgi [89]. The example is a variant of a case study presented by Robin Milner in <ref> [61] </ref>. <p> Definition 1.13 (strong late bisimulation and weak late bisimulation <ref> [65, 61] </ref>) - P and Q are strong late bisimilar, written P L Q, if P oe _ L Qoe for all substitutions oe - P and Q are weak late bisimilar, written P ' L Q, if P oe _ ' L Qoe for all substi tutions oe 2 The <p> Contrary to the late semantics, the notion of strong early bisimilarity can be extended to the weak case in the obvious way. Definition 1.16 (weak early ground bisimulation and weak early ground equality <ref> [61] </ref>) A binary symmetric relation S is a weak early ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 fn (P; Q), then for some Q 0 , Q bff and P 0 S Q 0 1.2. <p> This can be shown by using the same processes considered in Ex. 1.12. As it is the case for late semantics, the non-ground versions of early equivalences are defined by requiring bisimilarity over all substitutions. Definition 1.17 (strong early bisimulation and weak early bisimulation <ref> [66, 61] </ref>) - P and Q are strong early bisimilar, written P E Q, if P oe _ E Qoe for all substitutions oe - P and Q are weak early bisimilar, written P ' E Q, if P oe _ ' E Qoe for all substitutions oe 2 Analogously to
Reference: [62] <author> R. Milner. </author> <title> Functions as processes. </title> <journal> Journal of Mathematical Structures in Computer Science, </journal> <volume> 2(2) </volume> <pages> 119-141, </pages> <year> 1992. </year>
Reference: [63] <author> R. Milner. </author> <title> The Polyadic -Calculus: a Tutorial. In F.L. </title> <editor> Bauer, W. Brauer, and H. Schwichtenberg, editors, </editor> <booktitle> Logic and Algebra of Specification, </booktitle> <pages> pages 203-246. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: P ::= nil j o:P j x (y):P j y:P j xy:P j [x = y]P j P + P j P j P j (y)P j !P Prefixes y, which resemble the abstraction operator of <ref> [63] </ref>, are the only novelty w.r.t. the -calculus syntax. They act as formal binders and their operational role is to call for an actual instantiation of the name y. <p> Transition labels are equipped with some operations, so they form an observation algebra [30]. The algebra is defined in Tab 2.2. Notice that the execution of the new prefixes y results in the actions [y] which, although resembling the concretions of <ref> [63] </ref>, have no counterpart in the -calculus. Also, differently from the -calculus, communication is characterized by a single inference rule. More precisely, we avoided to use the Close rule which describes the 2.4.
Reference: [64] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal Logics for Mobile Processes. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> Proc. 2nd International Conference on Concurrency Theory, CONCUR '91, volume 527 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [65] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A Calculus of Mobile Processes, Part I and II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference-contexts: The thesis ends up with Chapter 7 where some concluding remarks are collected. For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like [56, 59]) bisimulation semantics and of the -calculus <ref> [65] </ref>. The late [65], the early [66], and the open [89] -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. <p> The thesis ends up with Chapter 7 where some concluding remarks are collected. For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like [56, 59]) bisimulation semantics and of the -calculus <ref> [65] </ref>. The late [65], the early [66], and the open [89] -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. Familiarity with CCS-like process algebras, although not necessary, will be helpful for the reader. 1.1 CCS-like semantics The operational semantics of process description languages (like e.g. <p> Example 1.7 The weak congruent processes ff:o:fi: nil and ff:fi: nil are not progressing equivalent. In fact o:fi: nil fi: nil but o:fi: nil 6 c fi: nil . 2 1.2 The -calculus The -calculus <ref> [65] </ref> is an instance of value-passing process algebra where values are channel names. The interaction paradigm allows to describe the behaviour of mobile systems, i.e. systems whose interconnection topology is dynamically changing. Name communication gives the calculus a great probably still under-investigated expressive power. <p> The parameter of any input action is a placeholder for something to be received, and can become substituted by an arbitrary name. Then, mimicking an input action requires some care of the degree of non-determinism in the actual instantiation of the placeholder. The late semantics <ref> [65] </ref> gives input actions a functional operational intuition. When inputting, a process becomes a function of the actual transmitted name. So, the input clause of the definition of strong late ground bisimulation claims that the derivatives of the inputting processes continue to simulate for all instantiations of the formal parameter. <p> When inputting, a process becomes a function of the actual transmitted name. So, the input clause of the definition of strong late ground bisimulation claims that the derivatives of the inputting processes continue to simulate for all instantiations of the formal parameter. Definition 1.8 (strong late ground bisimulation <ref> [65] </ref>) A binary symmetric relation S is a strong late ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 fn (P; Q), then for some Q 0 , Q ff and P 0 S Q 0 x (y) <p> both the constant function y:o: nil (given raise by the move P x (y) constant function y: nil (originated by P x (y) Equational theories for strong late ground bisimilarity, which are shown to be complete over finite processes, were presented both in the original paper on the - calculus <ref> [65] </ref>, and in [79]. The two axiomatizations essentially differ for the use 1.2. The -calculus 27 in [79] of a mismatching construct which allows to test for name inequality. <p> Definition 1.13 (strong late bisimulation and weak late bisimulation <ref> [65, 61] </ref>) - P and Q are strong late bisimilar, written P L Q, if P oe _ L Qoe for all substitutions oe - P and Q are weak late bisimilar, written P ' L Q, if P oe _ ' L Qoe for all substi tutions oe 2 The <p> If ys 2 R 1 oe then the thesis by ind. hyp., since only restriction rules are applied If ys 2 f x 1 ; : : : ; x n g then by ind. hyp., letting P 1 j ff P r1 (see <ref> [65] </ref>), one gets P r1 xsys ! P 0 1 ] oe 0 oe). Then, by the freshness of ys it 3.4. <p> Such an interpretation naturally fits with the early paradigm, while late modellings of value-passing appeared only later <ref> [65, 39] </ref>. Nevertheless, late strategies seem to subsume the early ones. For instance, the relationship between the late and the early -calculus puts some evidence on the fact that the early paradigm can be dealt with as a special instance of the more general late view. <p> As we shall see, the number of necessary substitutions may be further on diminished. Recall that, if a process R may execute an action ff transforming into R 0 , then, up to ff-equivalence, Roe can perform ffoe and become R 0 oe <ref> [65] </ref>. Moreover, by equating names, the substitution oe may increase the performance capabilities of R (we already tackled this issue when speaking about the mismatching operator, see Ch. 1, page 27).
Reference: [66] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> Modal logics for mobile processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 114(1) </volume> <pages> 149-171, </pages> <year> 1993. </year> <note> Full version of [64]. </note>
Reference-contexts: The thesis ends up with Chapter 7 where some concluding remarks are collected. For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like [56, 59]) bisimulation semantics and of the -calculus [65]. The late [65], the early <ref> [66] </ref>, and the open [89] -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. Familiarity with CCS-like process algebras, although not necessary, will be helpful for the reader. 1.1 CCS-like semantics The operational semantics of process description languages (like e.g. <p> The more liberal early view allows an input transition to be matched by distinct moves, depending on the actual transmitted parameter. Then, the input clause of early ground bisimulation <ref> [66] </ref> only requires that for each received name there is a matching transition. Definition 1.14 (strong early ground bisimulation [66]) A binary symmetric relation S is a strong early ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 <p> The more liberal early view allows an input transition to be matched by distinct moves, depending on the actual transmitted parameter. Then, the input clause of early ground bisimulation <ref> [66] </ref> only requires that for each received name there is a matching transition. Definition 1.14 (strong early ground bisimulation [66]) A binary symmetric relation S is a strong early ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 fn (P; Q), then for some Q 0 , Q ff and P 0 S Q 0 x (y) <p> This can be shown by using the same processes considered in Ex. 1.12. As it is the case for late semantics, the non-ground versions of early equivalences are defined by requiring bisimilarity over all substitutions. Definition 1.17 (strong early bisimulation and weak early bisimulation <ref> [66, 61] </ref>) - P and Q are strong early bisimilar, written P E Q, if P oe _ E Qoe for all substitutions oe - P and Q are weak early bisimilar, written P ' E Q, if P oe _ ' E Qoe for all substitutions oe 2 Analogously to <p> As a final remark about early semantics, we want to point out that the early paradigm considers the act of committing on the input channel and the choice of the 32 Chapter 1. Preliminaries actual parameter as one single atomic event. Indeed, in <ref> [66] </ref> the early semantics was given an alternative characterization in terms of strong bisimulation over the specialized early transition system. The early -calculus transition system is obtained by replacing the Com rule in Tab. 1.3 with the two rules in Tab. 1.4. <p> Then _ E = and _ E = and _ ' E = c . Proof: The coincidence of _ E and was proved in <ref> [66] </ref> relying on the relationship between the late and the early transition relations. In the following, let us denote them by ! L and by ! E , respectively. The result shown in [66] establishes that, for all ff 6= xy, P ! E P 0 iff P ! L P <p> Proof: The coincidence of _ E and was proved in <ref> [66] </ref> relying on the relationship between the late and the early transition relations. In the following, let us denote them by ! L and by ! E , respectively. The result shown in [66] establishes that, for all ff 6= xy, P ! E P 0 iff P ! L P 0 . <p> We already noticed that, but for input actions, the relations . j L and . j E coincides. An analogous liaison does hold <ref> [66] </ref> between the late and the early - calculus transition relations. The above observation allows us to re-use the constructions and the encodings presented in Ch. 3.
Reference: [67] <author> R. Milner and D. Sangiorgi. </author> <title> Barbed Bisimulation. </title> <booktitle> In Proc. 19th International Colloquium on Automata, Languages and Programming, volume 623 of Lecture Notes in Computer Science, </booktitle> <pages> pages 685-695. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The characterization proposed in [89] relies on the definition of a symbolic transition system where labels encode the minimal requirement on substitutions for the 170 Chapter 6. Revised non-groundness and open semantics computation to go on. The result presented in [99] is much in the spirit of barbed semantics <ref> [67] </ref> and the characterization is achieved by adding to the -calculus syntax a distinction-indexed family of operators. Those constructors are meant to collect limitations on the structure of the contexts which are used for checking process equivalence.
Reference: [68] <institution> G.E. Modoni. Un ambiente per la verifica di processi mobili. Tesi di Laurea in Scienze dell'Informazione, Universita degli Studi di Pisa, </institution> <year> 1995. </year>
Reference-contexts: The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed <ref> [68, 31] </ref> at the limited price of integrating the already settled JACK package system [15]. In the following, we want to point out a general remark on our approach. Each of the characterizations of P i Q involves closely paired -calculus agents.
Reference: [69] <author> U. Montanari. </author> <title> Networks of Constraints: Fundamental Properties and Applications to Picture Processing. </title> <journal> Information Sciences, </journal> <volume> 7 </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: Non-ground environments 143 As a consequence of the above discussion, the obligations of the symbolic semantics must sometimes be considered as actual constraints <ref> [69, 90, 91] </ref>. This, in turn, implies that the evaluation of obligations is not any longer a boolean predicate, but it rather yields a relation to be added with the environment.
Reference: [70] <author> U. Montanari and M. Pistore. </author> <title> Checking Bisimilarity for Finitary -calculus. </title> <editor> In I. Lee and S.A. Smolka, editors, </editor> <booktitle> Proc. 6th International Conference on Concurrency Theory, CONCUR '95, volume 962 of Lecture Notes in Computer Science, </booktitle> <pages> pages 42-56. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Adopting the terminology of <ref> [70] </ref> the free names of Q 1 are `inactive': they have absolutely no way to interview in any bisimilarity reasoning. From the above discussion we gain the intuition that free names can more properly and more efficiently be dealt with as variables and can be instantiated following a by-need discipline.
Reference: [71] <author> U. Montanari and V. Sassone. </author> <title> CCS dynamic bisimulation is progressing. </title> <editor> In A. Tarlecki, editor, </editor> <booktitle> Proc. 16th International Symp. on Mathematical Foundations of Computer Science, MFCS '91, volume 520 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <note> 180 BIBLIOGRAPHY </note>
Reference: [72] <author> U. Montanari and V. Sassone. </author> <title> Dynamic congruence vs. progressing bisim-ulation for CCS. </title> <note> Fundamenta Informaticae, XVI:171-199, 1992. Extended version of [71]. </note>
Reference-contexts: Precisely, ff:(o:(P + Q) + P ) T2 C ff:(o:(P + Q) + (P + Q)) = ff:o:(P + Q) = ff:(P + Q). We now recall progressing bisimulation, the largest weak bisimulation which is also an observational congruence. Definition 1.6 (progressing bisimulation <ref> [72] </ref>) A binary symmetric relation S over processes is a progressing bisimulation if P S Q implies that if P . <p> P 0 then for some Q 0 , Q ff P is progressing bisimilar to Q, written P p Q, if P S Q for some progressing bisimulation S. 2 A complete axiomatization of progressing equivalence of finite processes was pre sented in <ref> [72] </ref>. It differs from that of the observational congruence only for disre garding the first o -law (T 1 in Tab. 1.2). Example 1.7 The weak congruent processes ff:o:fi: nil and ff:fi: nil are not progressing equivalent. <p> Once got this result, the other items can be shown by using the techniques exploited in [59], in [96], and in <ref> [72] </ref>, resp.. For instance, the proof of the completeness of (A a ; A L ; A w ) passes through a saturation lemma which states that if S ae ==. <p> Then, either the completeness of (A a ; A E ) or the proofs of the results relative to the other equivalences are applications of standard techniques <ref> [43, 59, 96, 72] </ref>. The proof that (A a ; A E ) is head-normalizing is carried out as follows. Suppose to consider the term :: P , with P i ! i :P i being the normal form of the process P . <p> Also, the syntactic structure of the inference rules describing the operational semantics fits with a standard SOS format. So, axiomatic characterizations are aided by the possibility of applying general results of the format-based theory [4] and known relationships among strong equivalence and o -forgetting bisimulations <ref> [59, 96, 72] </ref>. The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed [68, 31] at the limited price of integrating the already settled JACK package system [15].
Reference: [73] <author> U. Montanari and D. Yankelevich. </author> <title> A Parametric Approach to Localities. </title> <booktitle> In Proc. 19th International Colloquium on Automata, Languages and Programming, volume 623 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [74] <author> M. Nielsen and C. Clausen. </author> <title> Bisimulation for Models in Concurrency. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> Proc. 5th International Conference on Concurrency Theory, CONCUR '94, volume 836 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [75] <author> M. Nielsen and C. Clausen. </author> <title> Games and logics for a noninterleaving bisim-ulation. </title> <journal> Nordic Journal of Computing, </journal> <volume> 2(2) </volume> <pages> 221-249, </pages> <year> 1995. </year> <note> Full version of [74]. </note>
Reference: [76] <author> F. Orava and J. Parrow. </author> <title> An Algebraic Verification of a Mobile Network. </title> <journal> Formal Aspects of Computing, </journal> <volume> 4(6) </volume> <pages> 497-543, </pages> <year> 1992. </year>
Reference: [77] <author> R. Paige and R.E. Tarjan. </author> <title> Three partition refinement algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 16(6) </volume> <pages> 973-989, </pages> <year> 1987. </year>
Reference-contexts: We present a framework for uniformly reasoning about the -calculus semantics in terms of ordinary bisimulations. This is shown to be of both pragmatic and theoretical interest. The algorithms for CCS automated verification tools may be reused (e.g. <ref> [77, 50, 21] </ref>), and axiomatic characterizations are aided by the possibility of applying both general theorems of the format-based theory (e.g. those proved in [25, 4]) and known relationships between the equational systems for strong bisimilarity and for o -forgetting bisimilarities. 2.2 Basic common features The main common feature of all
Reference: [78] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> In Proc. 5th GI-Conference, volume 104 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Also, we assume . to be a labelled transition relation among processes. For historical reasons, we start by reviewing the definition of strong bisimulation <ref> [78, 57] </ref>. For the two processes P and Q to be strong bisimilar, each transition from P must be mimicked by a transition from Q and vice-versa, leading again to equivalent derivatives P 0 and Q 0 . Definition 1.1 (strong bisimulation [78, 57]) A binary symmetric relation S over processes <p> start by reviewing the definition of strong bisimulation <ref> [78, 57] </ref>. For the two processes P and Q to be strong bisimilar, each transition from P must be mimicked by a transition from Q and vice-versa, leading again to equivalent derivatives P 0 and Q 0 . Definition 1.1 (strong bisimulation [78, 57]) A binary symmetric relation S over processes is a strong bisimulation if P S Q implies that if P .
Reference: [79] <author> J. Parrow and D. Sangiorgi. </author> <title> Algebraic Theories for Name-Passing Calculi. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 174-197, </pages> <year> 1995. </year>
Reference-contexts: function y:o: nil (given raise by the move P x (y) constant function y: nil (originated by P x (y) Equational theories for strong late ground bisimilarity, which are shown to be complete over finite processes, were presented both in the original paper on the - calculus [65], and in <ref> [79] </ref>. The two axiomatizations essentially differ for the use 1.2. The -calculus 27 in [79] of a mismatching construct which allows to test for name inequality. <p> nil (originated by P x (y) Equational theories for strong late ground bisimilarity, which are shown to be complete over finite processes, were presented both in the original paper on the - calculus [65], and in <ref> [79] </ref>. The two axiomatizations essentially differ for the use 1.2. The -calculus 27 in [79] of a mismatching construct which allows to test for name inequality. The mismatching [x 6= y]P behaves just the opposite of [x = y]P , i.e. as the conditional `if x 6= y then P else nil '. <p> The above property is crucial to the -calculus mathematical theory. So, the mismatching operator cannot be added with the -calculus syntax in a completely harmless way. Nevertheless, the use of mismatching gives the axiom system of <ref> [79] </ref> great generality and flexibility, e.g. the early semantics is characterized by adding the late system with one single law. We now turn to the weak semantics, and recall the definitions of both weak late ground bisimulation and weak late ground equality [61, 89]. <p> The resulting equivalence L , is then preserved by name substitutions, but not by non-deterministic choice contexts. A complete axiom system for strong late bisimilarity of finite processes was defined in <ref> [79] </ref>. Just like the equational theory for ground bisimilarity which was investigated in the same paper, the system makes use of the mismatching construct. In [52], introducing a specialized transition system, the weak late bisimilarity was axiomatized in terms of an alternative behavioural equivalence, the so-called symbolic bisimulation [41, 42]. <p> Then P _ E Q. 2 The strong early ground bisimilarity of finite processes was axiomatized in <ref> [79] </ref>. Contrary to the late semantics, the notion of strong early bisimilarity can be extended to the weak case in the obvious way. <p> An axiomatization of strong early bisimilarity, which was proved to be complete over finite processes, was defined in <ref> [79] </ref>. As a final remark about early semantics, we want to point out that the early paradigm considers the act of committing on the input channel and the choice of the 32 Chapter 1. Preliminaries actual parameter as one single atomic event.
Reference: [80] <author> B.C. Pierce and D. Sangiorgi. </author> <title> Typing and Subtyping for Mobile Processes. </title> <booktitle> In Proc. 8th IEEE Symp. on Logic in Computer Science, </booktitle> <pages> pages 376-385, </pages> <year> 1993. </year>
Reference: [81] <author> B.C. Pierce and D.N. Turner. </author> <title> Pict: A Programming Language Based on the -calculus. </title> <year> 1995. </year>
Reference: [82] <author> G. D. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DAIMI-FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year> <note> BIBLIOGRAPHY 181 </note>
Reference-contexts: Also, branching and progressing -calculus semantics, both late and early, are introduced. Familiarity with CCS-like process algebras, although not necessary, will be helpful for the reader. 1.1 CCS-like semantics The operational semantics of process description languages (like e.g. CCS) is usually defined in the style of Plotkin <ref> [82] </ref>. The behaviour of any process (or agent) P is described in terms of the transitional relation, say ., defined by a set of axioms and inference rules, a so-called labelled transition system. <p> So, for instance, in order to keep away the capture of the name y, the application of the substitution fy=xg to the process (y)xy: nil results in (w)yw: nil with w 6= y. The -calculus operational semantics is defined inductively, in the style of <ref> [82] </ref>, by the rules shown in Tab. 1.3 together with additional symmetric rules for the binary operators of non-deterministic choice and parallel composition. Most of the rules are similar to the corresponding rules of CCS. This is surely the case for Tau, Out, Sum, Par, Com, and Res. <p> P j Q ! P j Q 0 ! ! 0 P j Q ! P 0 j Q 0 ! (y)P ! P 0 ! (y)P ! (y)P 0 ! P 0 ! Table 2.1: symbolic operational semantics 2.4 Symbolic operational semantics We first define, in the style of <ref> [82] </ref>, the low level transition relation between -calculus processes. The operational semantics is called symbolic. In fact, requirements on names are not checked and name instantiation is not applied to processes, but rather recorded by transition labels (ranged over by !, ! 0 ; : : :).
Reference: [83] <author> D. Sangiorgi. </author> <title> The Lazy Lambda Calculus in a Concurrency Scenario. </title> <booktitle> In Proc. 7th IEEE Symp. on Logic in Computer Science, </booktitle> <year> 1992. </year>
Reference: [84] <author> D. Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms. </title> <type> PhD thesis, </type> <institution> Laboratory for Foundations of Computer Science, Computer Science Department, Edinburgh University, </institution> <year> 1993. </year> <note> Report ECS-LFCS-93-266. </note>
Reference-contexts: The interaction paradigm allows to describe the behaviour of mobile systems, i.e. systems whose interconnection topology is dynamically changing. Name communication gives the calculus a great probably still under-investigated expressive power. For instance, it was remarkably shown <ref> [84] </ref> that process-passing calculi, which express mobility at higher order, can be naturally encoded in the -calculus. 22 Chapter 1. Preliminaries The -calculus and its most assessed semantics are recalled in the following. Also, new o -forgetting bisimulations are proposed. <p> So, the little autonomy of -calculus processes seems to be an unavoidable price to pay when reducing the intrinsically infinitary interpretation of input actions to a finite model. The applicability of the presented framework to either value-passing or higher-order or integrated functional-concurrent languages <ref> [36, 94, 92, 84, 93] </ref> still remains to be investigated. The first, obvious, attempt to the specification of such languages in a CCS-like setting consists in taking advantage of both their encodings into the -calculus and the translation of -terms into -processes.
Reference: [85] <author> D. Sangiorgi. </author> <title> From -calculus to Higher-order -calculus and back. </title> <editor> In M.-C. Gaudel and J.-P. Jouannaud, editors, </editor> <booktitle> Proc. 4th International Joint Conference on Theory and Practice of Software Development, TAPSOFT '93, volume 668 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [86] <author> D. Sangiorgi. </author> <title> A Theory of Bisimulation for the -calculus. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th International Conference on Concurrency Theory, CONCUR '93, volume 715 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [87] <author> D. Sangiorgi. </author> <title> The Lazy Lambda Calculus in a Concurrency Scenario. </title> <journal> Information and Computation, </journal> <volume> 111(1), </volume> <year> 1994. </year> <note> Full version of [83]. </note>
Reference: [88] <author> D. Sangiorgi. </author> <title> Locality and Non-interleaving Semantics in calculi for mobile processes. </title> <type> Report ECS-LFCS-94-282, </type> <institution> Laboratory for Foundations of Computer Science, Computer Science Department, Edinburgh University, </institution> <year> 1994. </year> <note> To appear in Theoretical Computer Science. </note>
Reference: [89] <author> D. Sangiorgi. </author> <title> A Theory of Bisimulation for the -calculus. </title> <journal> Acta Informatica, </journal> <volume> 33(1) </volume> <pages> 69-97, </pages> <year> 1996. </year> <note> Full version of [86]. </note>
Reference-contexts: For the easy of cross referencing an index is appended. Chapter 1 Preliminaries This chapter contains an overview of both ordinary (CCS-like [56, 59]) bisimulation semantics and of the -calculus [65]. The late [65], the early [66], and the open <ref> [89] </ref> -calculus bisimulations are recalled. Also, branching and progressing -calculus semantics, both late and early, are introduced. Familiarity with CCS-like process algebras, although not necessary, will be helpful for the reader. 1.1 CCS-like semantics The operational semantics of process description languages (like e.g. <p> We now turn to the weak semantics, and recall the definitions of both weak late ground bisimulation and weak late ground equality <ref> [61, 89] </ref>. Analogously to the observational semantics of CCS-like languages, the last equivalence, in order to guarantee substitutivity in choice contexts, requires a silent action to be matched by at least one silent move. Definition 1.10 (weak late ground bisimulation and weak late ground equality [61, 89]) A binary symmetric relation <p> and weak late ground equality <ref> [61, 89] </ref>. Analogously to the observational semantics of CCS-like languages, the last equivalence, in order to guarantee substitutivity in choice contexts, requires a silent action to be matched by at least one silent move. Definition 1.10 (weak late ground bisimulation and weak late ground equality [61, 89]) A binary symmetric relation S is a weak late ground bisimulation if P S Q implies that if P ! P 0 with ff 6= x (y) and bn (ff) =2 fn (P; Q), then for some Q 0 , Q bff and P 0 S Q 0 x <p> This can be shown making use of an example due to Davide Sangiorgi <ref> [89] </ref>. The example is a variant of a case study presented by Robin Milner in [61]. <p> if P ! L P 00 then 8w9Q 00 : Q x (y) P 00 fw=yg S Q 00 fw=yg The coincidence of _ E and and the coincidence of _ ' E and c can be proved using the same intermediate result. 2 1.2.5 Open semantics The open bisimulation <ref> [89] </ref> builds on the intuition of moving name instantiation inside the definition of bisimulation, so to immediately capture the flavour of non-groundness. 1.2. The -calculus 33 Definition 1.19 (open bisimulation [89]) A binary symmetric relation S is an open bisimulation if P S Q implies that for all name substitutions oe <p> _ ' E and c can be proved using the same intermediate result. 2 1.2.5 Open semantics The open bisimulation <ref> [89] </ref> builds on the intuition of moving name instantiation inside the definition of bisimulation, so to immediately capture the flavour of non-groundness. 1.2. The -calculus 33 Definition 1.19 (open bisimulation [89]) A binary symmetric relation S is an open bisimulation if P S Q implies that for all name substitutions oe if P oe ! P 0 with bn (ff) =2 fn (P oe; Qoe), then for some Q 0 , Qoe ff P 0 S Q 0 P is open <p> For instance [x = y]ff:P ([x=y];ff) ! P . The specialized notion of bisimulation involves (essentially) only checks on the minimal substitution induced by the first component of labels. The complete axiomatization of open bisimilarity of finite processes was presented in <ref> [89] </ref>. The open congruence is strictly finer than all the late equivalences, which in turn are finer than the corresponding early ones. The relationship among the equivalences considered so far is summarized in Tab. 1.5 , where any arrow stays for strict inclusion. 34 Chapter 1. <p> The above observations make clear that even defining a tree representation for - calculus terms may be quite hard. Indeed, up-to-date, -calculus processes were only visualized relying on the so-called conditional trees <ref> [89] </ref>. They are trees whose branches, besides being labelled by actions, may also be labelled by predicates on names (e.g. x = y). The aim of our work is to describe the prototypical mobility expressed by the - calculus within a possibly finitary CCS-like approach to process algebras. <p> As a consequence, each of the transition systems which we will take under consideration is a standard labelled transition system, and the behaviours of -calculus processes are compared relying on CCS-like relations of bisimulation. In this respect our approach is rather different than those proposed in <ref> [42, 89, 12] </ref>, where the operational use of conditional labels shows up in the definition of bisimulations which are got as closures on top of families of indexed relations. <p> As far as we know, the treatment of the late and of the early non-ground bisim-ilarities via a call-by-need name instantiation strategy is a novelty w.r.t. the - calculus literature. By contrast, the open semantics was already given alternative and more efficient formulations <ref> [89, 99] </ref>. The characterization proposed in [89] relies on the definition of a symbolic transition system where labels encode the minimal requirement on substitutions for the 170 Chapter 6. Revised non-groundness and open semantics computation to go on. <p> As far as we know, the treatment of the late and of the early non-ground bisim-ilarities via a call-by-need name instantiation strategy is a novelty w.r.t. the - calculus literature. By contrast, the open semantics was already given alternative and more efficient formulations [89, 99]. The characterization proposed in <ref> [89] </ref> relies on the definition of a symbolic transition system where labels encode the minimal requirement on substitutions for the 170 Chapter 6. Revised non-groundness and open semantics computation to go on. <p> Those constructors are meant to collect limitations on the structure of the contexts which are used for checking process equivalence. In both <ref> [89] </ref> and [99] the extensional semantics is expressed in terms of a family of indexed bisimulation relations. On the contrary, in the open -calculus, environments allow to make requirements on names concrete, so that strong bisimulation can be used to equate processes. <p> On the contrary, in the open -calculus, environments allow to make requirements on names concrete, so that strong bisimulation can be used to equate processes. Our formulation of the open semantics is closely related to the one defined in <ref> [89] </ref>. In both cases the instantiation of any name input objects included is delayed until the name is actually used. This confirms once again that, just like the testing equivalence [13, 47], the open semantics does not naturally splits into a late and an early paradigm.
Reference: [90] <author> V.A. Saraswat. </author> <title> Concurrent Constraint Programming. </title> <booktitle> In Proc. 17th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 232-245, </pages> <year> 1990. </year>
Reference-contexts: Non-ground environments 143 As a consequence of the above discussion, the obligations of the symbolic semantics must sometimes be considered as actual constraints <ref> [69, 90, 91] </ref>. This, in turn, implies that the evaluation of obligations is not any longer a boolean predicate, but it rather yields a relation to be added with the environment.
Reference: [91] <author> V.A. Saraswat, M. Rinard, and P. Panangaden. </author> <title> Semantic foundations of concurrent constraint programming. </title> <booktitle> In Proc. 18th Annual ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 333-352, </pages> <year> 1991. </year>
Reference-contexts: Non-ground environments 143 As a consequence of the above discussion, the obligations of the symbolic semantics must sometimes be considered as actual constraints <ref> [69, 90, 91] </ref>. This, in turn, implies that the evaluation of obligations is not any longer a boolean predicate, but it rather yields a relation to be added with the environment.
Reference: [92] <author> B. Thomsen. </author> <title> Plain CHOCS. A Second Generation Calculus for Higher Order Processes. </title> <journal> Acta Informatica, </journal> <volume> 30(1) </volume> <pages> 1-59, </pages> <year> 1993. </year> <note> 182 BIBLIOGRAPHY </note>
Reference-contexts: So, the little autonomy of -calculus processes seems to be an unavoidable price to pay when reducing the intrinsically infinitary interpretation of input actions to a finite model. The applicability of the presented framework to either value-passing or higher-order or integrated functional-concurrent languages <ref> [36, 94, 92, 84, 93] </ref> still remains to be investigated. The first, obvious, attempt to the specification of such languages in a CCS-like setting consists in taking advantage of both their encodings into the -calculus and the translation of -terms into -processes.
Reference: [93] <author> B. Thomsen. </author> <title> A Theory of Higher Order Communicating Systems. </title> <journal> Information and Computation, </journal> <volume> 116(1) </volume> <pages> 38-57, </pages> <year> 1995. </year>
Reference-contexts: So, the little autonomy of -calculus processes seems to be an unavoidable price to pay when reducing the intrinsically infinitary interpretation of input actions to a finite model. The applicability of the presented framework to either value-passing or higher-order or integrated functional-concurrent languages <ref> [36, 94, 92, 84, 93] </ref> still remains to be investigated. The first, obvious, attempt to the specification of such languages in a CCS-like setting consists in taking advantage of both their encodings into the -calculus and the translation of -terms into -processes.
Reference: [94] <author> B. Thomsen, L. Leth, and A. Giacalone. </author> <title> Some Issues in the Semantics of Facile Distributed Programming. </title> <booktitle> In Proc. REX Workshop on Semantics: Foundations and Applications, volume 666 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: So, the little autonomy of -calculus processes seems to be an unavoidable price to pay when reducing the intrinsically infinitary interpretation of input actions to a finite model. The applicability of the presented framework to either value-passing or higher-order or integrated functional-concurrent languages <ref> [36, 94, 92, 84, 93] </ref> still remains to be investigated. The first, obvious, attempt to the specification of such languages in a CCS-like setting consists in taking advantage of both their encodings into the -calculus and the translation of -terms into -processes.
Reference: [95] <author> I. Ulidowski. </author> <title> Axiomatisations of Weak Equivalences for De Simone Languages. </title> <editor> In I. Lee and S.A. Smolka, editors, </editor> <booktitle> Proc. 6th International Conference on Concurrency Theory, CONCUR '95, volume 962 of Lecture Notes in Computer Science, </booktitle> <pages> pages 219-233. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [96] <author> R.J. van Glabbeek and W.P. Weijland. </author> <title> Branching time and abstraction in bisimulation semantics (extended abstract). </title> <booktitle> In Information Processing, Proc. IFIP 11th World Computer Congress, </booktitle> <address> San Francisco, </address> <pages> pages 613-618, </pages> <year> 1989. </year>
Reference-contexts: As the execution of arbitrarily many o -moves potentially disregards external choices, when matching the strong move P ff . P 0 with a double-arrow step Q ff branching bisimulation clause asks for intermediate bisimulation checks. Definition 1.4 (branching bisimulation <ref> [96] </ref>) A binary symmetric relation S over processes is a branching bisimulation if P S Q implies that if P . P 0 then either ff = o and P 0 S Q or for some Q 1 , Q 2 , Q 0 , Q ==. <p> The -calculus 21 It was proven in <ref> [96] </ref>, that branching bisimulation can be characterized by the following o -laws: (H1) ff:o:P = ff:P Then, axiomatizing branching bisimulation only requires to add the system for strong bisimulation with the laws T 1 and T 2 of Tab. 1.2. <p> Once got this result, the other items can be shown by using the techniques exploited in [59], in <ref> [96] </ref>, and in [72], resp.. For instance, the proof of the completeness of (A a ; A L ; A w ) passes through a saturation lemma which states that if S ae ==. <p> Then, either the completeness of (A a ; A E ) or the proofs of the results relative to the other equivalences are applications of standard techniques <ref> [43, 59, 96, 72] </ref>. The proof that (A a ; A E ) is head-normalizing is carried out as follows. Suppose to consider the term :: P , with P i ! i :P i being the normal form of the process P . <p> Also, the syntactic structure of the inference rules describing the operational semantics fits with a standard SOS format. So, axiomatic characterizations are aided by the possibility of applying general results of the format-based theory [4] and known relationships among strong equivalence and o -forgetting bisimulations <ref> [59, 96, 72] </ref>. The automated verification of late and early bisimilarities of -calculus terms was shown to take advantage of the theoretical results about -calculus. A semantic-based verification environment for the -calculus was developed [68, 31] at the limited price of integrating the already settled JACK package system [15].
Reference: [97] <author> V.T. Vasconcelos and K. Honda. </author> <title> Principal typing schemes in a polyadic - calculus. </title> <editor> In E. Best, editor, </editor> <booktitle> Proc. 4th International Conference on Concur-rency Theory, CONCUR '93, volume 715 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [98] <author> C. Verhoef. </author> <title> A congruence theorem for structured operational semantics with predicates and negative premises. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> Proc. 5th International Conference on Concurrency Theory, CONCUR '94, volume 836 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [99] <author> D. Walker. </author> <title> On Bisimulation in the -calculus. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> Proc. 5th International Conference on Concurrency Theory, CONCUR '94, volume 836 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: As far as we know, the treatment of the late and of the early non-ground bisim-ilarities via a call-by-need name instantiation strategy is a novelty w.r.t. the - calculus literature. By contrast, the open semantics was already given alternative and more efficient formulations <ref> [89, 99] </ref>. The characterization proposed in [89] relies on the definition of a symbolic transition system where labels encode the minimal requirement on substitutions for the 170 Chapter 6. Revised non-groundness and open semantics computation to go on. <p> The characterization proposed in [89] relies on the definition of a symbolic transition system where labels encode the minimal requirement on substitutions for the 170 Chapter 6. Revised non-groundness and open semantics computation to go on. The result presented in <ref> [99] </ref> is much in the spirit of barbed semantics [67] and the characterization is achieved by adding to the -calculus syntax a distinction-indexed family of operators. Those constructors are meant to collect limitations on the structure of the contexts which are used for checking process equivalence. In both [89] and [99] <p> <ref> [99] </ref> is much in the spirit of barbed semantics [67] and the characterization is achieved by adding to the -calculus syntax a distinction-indexed family of operators. Those constructors are meant to collect limitations on the structure of the contexts which are used for checking process equivalence. In both [89] and [99] the extensional semantics is expressed in terms of a family of indexed bisimulation relations. On the contrary, in the open -calculus, environments allow to make requirements on names concrete, so that strong bisimulation can be used to equate processes.

References-found: 99

