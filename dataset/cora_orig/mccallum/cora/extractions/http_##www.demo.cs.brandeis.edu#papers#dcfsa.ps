URL: http://www.demo.cs.brandeis.edu/papers/dcfsa.ps
Refering-URL: http://www.demo.cs.brandeis.edu/papers/long.html
Root-URL: http://www.cs.brandeis.edu
Title: Chapter 1 A Scalable Divide-and-Conquer Parallel Algorithm for Finite State Automata and Its Applications  
Author: Z. George Mou Sevan G. Ficici 
Abstract: Finite state automata (FSA) have been used to model dynamic systems found in many areas. They are also the building blocks of cellular automata. We present a new scalable divide-and-conquer alogrithm for the parallel simulation of FSAs that is fast and efficient, regardless of the relation between input size and the number of processors, and discuss its application to sequential circuit and queuing system analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. E. Ladner and M. J. Fischer, </author> <title> "Parallel Prefix Computation," </title> <journal> JACM, </journal> <volume> (27/4), </volume> <pages> 831-838. </pages>
Reference-contexts: The insight needed to overcome this seemingly inherent limitation is that each input symbol can be viewed as a function, mapping one state to another, thus reducing the problem to one of applying a parallel reduction or scan using functional composition as the binary operator <ref> [1] </ref>, [4]. To simulate a finite state automaton M operating on input string I of length n by p processors, I is first evenly partitioned over the p processors. The algorithm proceeds in three stages.
Reference: [2] <author> Z. G. Mou and M. Goodman, </author> <title> "A Comparison of Communication Costs for Three Parallel Programming Paradigms on Hypercube and Mesh Architectures", </title> <booktitle> Proc. 5th SIAM Conf. on Parallel Processing, </booktitle> <pages> 491-500. </pages>
Reference-contexts: thus: T (n) = O (nm=p + m log (p) + k (n 1=k 1))(1) Switching between optimal serial and parallel methods gives our algorithm superior performace compared to the use of recursive doubling or odd-even reduction throughout, neither of which have optimal mappings on any k 2 dimensional mesh <ref> [2] </ref>. Particularly, when n = O (p), odd-even reduction has a larger constant factor. 2 Applications Sequential circuits are readily described as FSAs. Thus, the algorithm provides a simulator where the parallelism is unaffected by the vagaries of a circuit's structure.
Reference: [3] <author> Z. G. Mou and P. Hudak, </author> <title> "An Algebraic Model for Divide-and-Conquer and Its Parallelism", </title> <journal> The Journal of Supercomputing, </journal> <volume> (2/3), </volume> <pages> 257-278. </pages>
Reference-contexts: Next, the resultant p composite functions are further composed by fl This work was partially supported by NSF grant CCR-89 43333. y Dept. of Comp. Science, National Center for Complex Systems, Brandeis University, Waltham, MA. 1 2 Mou and Ficici divide-and-conquer (DC) <ref> [3] </ref>. The computation for this global scan takes O (m log (p)) time on any parallel machine, whereas the communication time depends on the topology of the machine.
Reference: [4] <author> W. D. Hillis and G. L. Steele, Jr., </author> <title> "Data Parallel Algorithms", </title> <journal> CACM, </journal> <volume> (29/12), </volume> <pages> 1170-1183. </pages> <note> 4 Mou and Ficici </note>
Reference-contexts: The insight needed to overcome this seemingly inherent limitation is that each input symbol can be viewed as a function, mapping one state to another, thus reducing the problem to one of applying a parallel reduction or scan using functional composition as the binary operator [1], <ref> [4] </ref>. To simulate a finite state automaton M operating on input string I of length n by p processors, I is first evenly partitioned over the p processors. The algorithm proceeds in three stages.
Reference: [5] <author> Z. G. Mou and X. Wang, </author> <title> "Optimal Mappings of m Dimensional FFT Communication to k Dimensional Mesh for Arbitrary m and k", </title> <booktitle> Lecture Notes in Comp. Science, </booktitle> <volume> (694), </volume> <pages> 104-119. </pages>
Reference-contexts: The computation for this global scan takes O (m log (p)) time on any parallel machine, whereas the communication time depends on the topology of the machine. Optimal DC mappings exist such that commumication cost is exactly equal to the diameter of the network <ref> [5] </ref>, which in the case of a k dimensional mesh is k (p 1=k 1). Finally, each processor accumulates the composite functions applied to it during the DC scan, and adjusts the first (n=p) 1 composite functions of its local segment accordingly.
References-found: 5

