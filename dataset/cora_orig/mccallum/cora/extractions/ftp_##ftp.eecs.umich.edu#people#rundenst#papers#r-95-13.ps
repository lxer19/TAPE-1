URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-95-13.ps
Refering-URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/INDEX.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: [ywh j jning j rundenst] @eecs.umich.edu  
Title: Route Guidance Support in Intelligent Transportation Systems: An Encoded Path View Approach  
Author: Yun-Wu Huangy, Ning Jingz, and Elke A. Rundensteinery 
Keyword: Index Terms View Materialization, Encoded Path Structure, Route Guidance, Path Retrieval, Map Databases, Cycle Detection.  
Address: Ann Arbor, MI 48109  Changsha, Hunan, P.R. China  
Affiliation: University of Michigan  Department of Electrical Engineering and Computer Science University of Michigan,  Department of Electrical Engineering Changsha Institute of Technology,  
Pubnum: Technical Report 1995.  
Abstract: Efficient path computation necessary for route guidance has been identified as one of the key requirements for Intelligent Transportation Systems (ITS) applications. While the current ITS literature has focused on the application of search algorithms (typically, heuristic A* algorithms) to provide for compute-on-demand path finding, we propose an encoded path view approach that precomputes optimal paths. Advantages of our approach include (1) route search is efficient and less dependent on system load, (2) alternative paths are materialized in addition to the optimal paths, simplifying the process of global optimization, (3) the storage overhead is manageable and less than for the full enumeration of all possible paths. In this paper, we present algorithms for incrementally updating the encoded path view structure in response to weight changes on the traffic links of the underlying network. Despite non-optimal paths also being materialized, our algorithms are designed to operate on cyclic planar graphs | given that ITS maps typically correspond to highly interconnected grid structures. In this paper, we show that while our approach does not encode all paths, it omits some non-optimal paths to resolve cycle ambivalence and will recover them once they become optimal. Proofs of correctness and of complexity are also given. We demonstrate the potential of our approach by presenting experimental results of evaluating our approach both on randomly generated as well as on real city map data. Our experiments furthermore compare the proposed approach against more conventional path searching algorithms, which correspond to the state-of-the-art for route guidance in ITS. fl This work was supported in part by the University of Michigan ITS Center of Excellence grant (DTFH61-93-X-00017-Sub) sponsored by the U.S. Department of Transportation and by the Michigan Department of Transportation. Ning Jing, on leave from the Changsha Institute of Technology, is currently visiting the University of Michigan and likes to thank the State Education Commission of P.R. China. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rakesh Agrawal, H. V. Jagadish, </author> <title> "Efficient Search in Very Large Databases," </title> <booktitle> Proc. of the 14th VLDB Conf., </booktitle> <address> Los Angeles, California, </address> <year> 1988, </year> <pages> pp. 407 - 418. </pages>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [2] <author> Rakesh Agrawal and H. V. Jagadish, </author> <title> "Materialization and Incremental Update of Path Information", </title> <booktitle> IEEE 5th Int. Conf. on Data Engineering, </booktitle> <year> 1989, </year> <pages> pp. 374 - 383. </pages>
Reference-contexts: The encoded structure <ref> [2] </ref>, a materialized view approach, is a compromise between space and retrieval efficiency. It encodes only the destination and the next hop leading to the destination. <p> Third, we present an extended set of experiments, now also including real city map data. In the next section, we introduce our path encoding structure using a graph model initially proposed by <ref> [2] </ref>, extend it under ITS context, and establish the view tables for the structure. In Section 3, we present incremental update algorithms and prove their correctness and complexity. In Section 4, we outline suggested optimizations, such as batching of updates, alternative path filtering, etc. Section 5 describes experimental results. <p> The encoded path view is a compromise between retrieval efficiency and storage requirement. In this section, we discuss terminology for ITS maps, review a graph model we use to capture ITS map informations, present the encoded structure <ref> [2] </ref>, describe the path retrieval and the space and computation cost for the path retrieval. 2.1 Basic Definitions ITS Maps and Its Graph Representation. <p> Although a fully materialized path view is efficient (constant) in path retrieval, it requires an unrealistically large exponential amount of storage. The encoded path view can store the same information with much less storage and with only linear increase in path retrieval time <ref> [2] </ref>. The key idea of this approach is to distribute partial encodings of best paths throughout the network, such that the materialized paths can be shared by different nodes along the path fragments. <p> Maintaining alternative paths provides the foundation of global traffic optimization, since the TMC has at its fingertips all possible paths as well as their related costs. Handling Cyclic Maps. The encoded path view algorithms initially introduced in <ref> [2] </ref> work on cyclic graphs only for the best path problem. And for encoding more than best paths, acyclic graphs are implied. We relax this restriction and allow the underlying road map graph to be cyclic. <p> We also use cycle detection to eliminate potentially cyclic paths. The encoded path view research presented in this paper is based on the encoding approach of materialized paths proposed by Agrawal and Jagadish <ref> [2] </ref>. They have shown (using simulation) that this encoding structure has an acceptable storage overhead compared to maintaining all possible paths. Although they also presented algorithms in encoding and maintaining the encoded structures in [2], our approach differs from theirs in three ways. <p> this paper is based on the encoding approach of materialized paths proposed by Agrawal and Jagadish <ref> [2] </ref>. They have shown (using simulation) that this encoding structure has an acceptable storage overhead compared to maintaining all possible paths. Although they also presented algorithms in encoding and maintaining the encoded structures in [2], our approach differs from theirs in three ways. First, their algorithms assume that either the underlying graphs are acyclic or the path problem is cycle-indifferent [2]. Our algorithms do not keep these assumptions because ITS graphs are cyclic and computing alternative paths is not cycle-indifferent. <p> Although they also presented algorithms in encoding and maintaining the encoded structures in <ref> [2] </ref>, our approach differs from theirs in three ways. First, their algorithms assume that either the underlying graphs are acyclic or the path problem is cycle-indifferent [2]. Our algorithms do not keep these assumptions because ITS graphs are cyclic and computing alternative paths is not cycle-indifferent.
Reference: [3] <author> Rakesh Agrawal, Shaul Dar and H. V. Jagadish, </author> <title> "Direct Transitive Closure Algorithms: Design and Performance Evaluation," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 15, No. 3, </volume> <month> Sep. </month> <year> 1990, </year> <pages> pp. 427 - 458. </pages>
Reference-contexts: Shehar et al. [19] have compared compute-on-demand algorithms such as A* on an ITS network under a DBMS environment and found that the elapsed time of searching longer paths is unrealistically high, e.g. in the thousands of second. Ioannidis el al. [15] and Agrawal et al. <ref> [3] </ref> also proposed disk-based transitive closure algorithms that solve well-formed path problems. However, their experiment results showed that for the best path problem, the performance of their algorithms deteriorate dramatically when the node number of the cyclic graphs reaches 300. <p> Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes. <p> Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community [1, 3, 4, 5, 6, 13, 14, 15]. While their works focus on secondary storage solutions, the benchmark studies in <ref> [3, 15] </ref> showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [4] <author> Rakesh Agrawal, H. V. Jagadish, </author> <title> "Hybrid Transitive Closure Algorithms," </title> <booktitle> Proc. of the 16th VLDB Conf., </booktitle> <address> Brisbane, Australia, </address> <year> 1990, </year> <pages> pp. 326 - 334. </pages>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes. <p> If Shekar et al.'s finding in [19] demonstrates that the current database technology can not satisfy the real-time constraint for ITS path query, the results in <ref> [4, 15] </ref> predict that the database technology in the near future will not either. For this reason, we must explore the main memory solution in order to satisfy the stringent time requirement on ITS path query computation.
Reference: [5] <author> Giorgio Ausiello, Giuseppe F. </author> <title> Italiano, "Incremental Algorithms for Minimal Length Paths," </title> <journal> Journal of Algorithms, </journal> <volume> 12, </volume> <year> 1991, </year> <pages> pp. 615 - 638. </pages>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [6] <author> F. Bancilhon, </author> <title> "Naive Evaluation of Recursively Defined Relations", In On Knowledge Base Management Systems Integrating Database and AI systems, </title> <editor> M. Brodie and J, Mylopoulos, Eds., </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985 </year>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [7] <author> R. E. Bellman, </author> <title> "On a routing problem", </title> <journal> Quart. Appl. Math. </journal> <volume> 16, </volume> <year> 1958, </year> <pages> pp. 87 - 90. </pages>
Reference: [8] <author> T. Cormen, C. Leiserson, and R. L. Rivest, </author> <title> "Introduction to Algorithms", </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The algorithms that compute an o-d pair transitive closure are known to require high (O (n 2 )) computation cost <ref> [8] </ref>. The materialized path view, on the other hand, precomputes best paths for all o-d pairs. The best paths are retrieved by looking up in the materialized view, eliminating the need for the search algorithms. <p> In ITS, d is usually a small constant between 2 and 5. Total storage required for the encoded path view thus is O (d fl n 2 ). The computation complexity of the conventional single source and destination best path algorithm is O (n 2 ) <ref> [8] </ref>. By iteratively querying the destination tables associated with each node along the path, the path retrieval 6 complexity for the encoded path view is O (n) assuming constant lookup tables. <p> Classic algorithms such as the W arshall and W arren 0 s algorithms [23, 22], Dijkstra 0 s algorithm [9], breadth-first search algorithm <ref> [8] </ref>, depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem. <p> Classic algorithms such as the W arshall and W arren 0 s algorithms [23, 22], Dijkstra 0 s algorithm [9], breadth-first search algorithm <ref> [8] </ref>, depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem. <p> Classic algorithms such as the W arshall and W arren 0 s algorithms [23, 22], Dijkstra 0 s algorithm [9], breadth-first search algorithm <ref> [8] </ref>, depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem. ITS maps are cyclic and typically strongly connected, making the problem of reachability and the problems that presume the underlying graphs to be acyclic non-issues.
Reference: [9] <author> E. W. Dijkstra, </author> <title> "A Note on Two Problems in Connection with Graphs", </title> <journal> Numer. </journal> <month> March, </month> <year> 1959, </year> <pages> pp. 269 - 271. </pages>
Reference-contexts: Classic algorithms such as the W arshall and W arren 0 s algorithms [23, 22], Dijkstra 0 s algorithm <ref> [9] </ref>, breadth-first search algorithm [8], depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem.
Reference: [10] <author> Max J. Egenhofer, </author> <title> "What's Special about Spatial? Database Requirements for Vehicle Navigation in Geographic Space", </title> <booktitle> Proc. of the 1993 ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <year> 1993, </year> <pages> pp. 398 - 402. </pages>
Reference: [11] <author> Yun-Wu Huang, Ning Jing, and Elke A. Rundensteiner, </author> <title> "A Semi-Materialized View Approach for Route Maintenance in Intelligent Vehicle Highway Systems," </title> <booktitle> The Second ACM Workshop on Geographic Information Systems, </booktitle> <address> Washington, D.C., </address> <month> Nov. </month> <year> 1994. </year> <title> 7 There are several on-going projects involving the UM ITS center to commence more broad coverage of pilot sites with ITS technology however, a comprehensive coverage of a city region has not yet been achieved at this time. </title> <type> 26 </type>
Reference-contexts: Our cycle detection, while efficient, does not guarantee that all paths are being encoded. We will prove that only paths with undesirable (clearly not optimal) path weights are omitted. 1.5 Paper Outline Our initial idea of using encoded path view structures for ITS has been reported in a workshop <ref> [11] </ref>. We now go beyond this work in several aspects. First, we now present proofs of correctness as well as complexity analysis for our update algorithms. Second, we introduce several optimization strategies we explored to reduce storage costs and path view updating performances, e.g., alternative path filtering.
Reference: [12] <editor> UM ITS Center, </editor> <booktitle> ITS RCE meeting reviews, </booktitle> <year> 1994. </year>
Reference-contexts: Such an instruction-based ITS technology has been deployed for a pilot study by an automobile rental company in Orlando, Florida <ref> [12] </ref>. 1.3 Path Computation: Compute-On-Demand versus Materialized Path View Path computation is time-critical in route guidance because a lengthy turnaround time may cause the best path information to become inapplicable and TMC's management of traffic congestion unreliable. This poses a stringent requirement on algorithms that perform the path search.
Reference: [13] <author> Y. E. Ioannidis, </author> <title> "On the Computation of the Transitive Closure of Relational Operators," </title> <booktitle> Proc. 12th Int'l Conf. VLDB, </booktitle> <month> Aug. </month> <year> 1986, </year> <pages> pp. 403 - 411. </pages>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [14] <author> Y. E. Ioannidis and R. Ramakrishnan, </author> <title> "An Efficient Transitive Closure Algorithm," </title> <booktitle> Proc. 14th Int'l Conf. VLDB, </booktitle> <address> Aug.-Sep. </address> <year> 1988, </year> <pages> pp. 382 - 394. </pages>
Reference-contexts: Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes.
Reference: [15] <author> Yannis Ioannidis, Raghu Ramakrishnan, and Linda Winger, </author> <title> "Transitive Closure Algorithms Based on Graph Traversal," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 18, No. 3, </volume> <month> Sep. </month> <year> 1993, </year> <pages> pp. </pages> <address> 512 -576. </address>
Reference-contexts: Shehar et al. [19] have compared compute-on-demand algorithms such as A* on an ITS network under a DBMS environment and found that the elapsed time of searching longer paths is unrealistically high, e.g. in the thousands of second. Ioannidis el al. <ref> [15] </ref> and Agrawal et al. [3] also proposed disk-based transitive closure algorithms that solve well-formed path problems. However, their experiment results showed that for the best path problem, the performance of their algorithms deteriorate dramatically when the node number of the cyclic graphs reaches 300. <p> Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community <ref> [1, 3, 4, 5, 6, 13, 14, 15] </ref>. While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes. <p> Recently, there has been a body of literature on transitive closure computation and recursive query processing in the database community [1, 3, 4, 5, 6, 13, 14, 15]. While their works focus on secondary storage solutions, the benchmark studies in <ref> [3, 15] </ref> showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes. <p> If Shekar et al.'s finding in [19] demonstrates that the current database technology can not satisfy the real-time constraint for ITS path query, the results in <ref> [4, 15] </ref> predict that the database technology in the near future will not either. For this reason, we must explore the main memory solution in order to satisfy the stringent time requirement on ITS path query computation.
Reference: [16] <author> Chi-Kang Lee, </author> <title> "A Multiple-Path Routing Strategy for Vehicle Route Guidance Systems," </title> <journal> Transportation Research, </journal> <volume> Vol. 2, No. 3, </volume> <year> 1994, </year> <pages> pp. 185 - 195. </pages>
Reference-contexts: To provide a realistic solution, our algorithms are hence implemented in main memory. The main memory approach is feasible because modern computers can be equipped with large amount of RAM 3 and the content of the RAM can be backed by batteries. Lee in <ref> [16] </ref> showed that the multiple-path approach is superior to the single-path approach in route guidance, validating the advantages of multiple-path based global optimization. We adopt this approach by materializing more than the optimal paths. <p> Lee in <ref> [16] </ref> showed that a multiple-path routing strategy is superior to a single-path solution. This means assigning different paths to path queries of the same o-d pair results in better total combined travel time for all vehicles in a ITS system.
Reference: [17] <institution> Loral Federal Systems, "IVHS Architecture Phase One Final Report", Sponsored by Federal Highway Administration, DTFH61-93-C-00211, </institution> <year> 1994. </year>
Reference-contexts: With the first phase of this project completed, reports are now available by all four teams of these ITS architectures [20]. They range from completely decentralized systems to centralized ones. Members of the University of Michigan Center of Excellence ITS, which were part of the IBM/Loral team <ref> [17] </ref>, were investigating the centralized solution and its ramifications 1 . Results reported in this paper hence focus on providing solutions to the route guidance problem in the context of a centralized ITS architecture [17]. 1.2 Route Guidance in Centralized ITS 1 In the second round of ITS architecture development, the <p> of the University of Michigan Center of Excellence ITS, which were part of the IBM/Loral team <ref> [17] </ref>, were investigating the centralized solution and its ramifications 1 . Results reported in this paper hence focus on providing solutions to the route guidance problem in the context of a centralized ITS architecture [17]. 1.2 Route Guidance in Centralized ITS 1 In the second round of ITS architecture development, the Loral team has been selected as one of the two teams to continue development of their proposed centralized architecture. 1 In a centralized ITS 2 , route guidance is accomplished in four steps: 1. <p> In a direction-based route guidance system, the TMC transmits only the direction or instruction that leads to the next intersection (or beacon in a beacon-based architecture) along the best path <ref> [17] </ref>. The vehicle, having no knowledge of the entire path, navigates by following directions received from the TMC continuously.
Reference: [18] <author> Ning Jing, Xiong Jiang, MeeSook Hyun, Xu Chen, </author> <title> "Implementing the Semi-Materialized Path View approach Using Illustra," </title> <institution> University of Michigan, </institution> <type> Internal Report, </type> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Our initial experiments on persistent systems, such as Illustra and Gemstone, resulted non-surprisingly in 5 IBM RS6000 34H is comparable with SUN Sparc-10 in computing power. 17 unacceptable performance characteristics <ref> [18] </ref>. This corresponds to results obtained by other researchers.
Reference: [19] <author> Shashi Shekar, Asekhar Kohli, and Mark Coyle, </author> <title> "Path Computation Algorithms for Advanced Traveller Information Systems," </title> <booktitle> IEEE 9th Int. Conf. on Data Engineering, </booktitle> <year> 1993, </year> <pages> pp. 31 - 39. </pages>
Reference-contexts: This poses a stringent requirement on algorithms that perform the path search. Heuristic algorithms such as A fl have been proposed to improve computation time for ITS <ref> [19, 21] </ref>. In this paper, we will refer to using these algorithms as the compute-on-demand approach. Compute-on-demand is typically chosen as the basic approach for path-based route guidance systems. <p> This dictates that the encoded path views be updated frequently in order to reflect the most current traffic conditions. We have developed algorithms for incrementally updating the materialized path view structure in response to weight changes on the traffic links for an underlying (possibly cyclic) network. Shehar et al. <ref> [19] </ref> have compared compute-on-demand algorithms such as A* on an ITS network under a DBMS environment and found that the elapsed time of searching longer paths is unrealistically high, e.g. in the thousands of second. <p> This corresponds to results obtained by other researchers. For example, a recent papering in the Conference on Data Engineering <ref> [19] </ref> found that A fl type search takes more than 30 minutes to compute a path in a map of 900 nodes if the map data is managed using a DBMS. <p> The saving ratio increases as the percentage of ITS vehicles among all vehicles increases. We are thus motivated to develop algorithms that compute more than one best path for each o-d pair. This strategy provides a potential solution to the ITS global optimization problem. Shekar et al. <ref> [19] </ref> have also studied the path computation problem for ITS applications. Their ITS route guidance system however assumes a decentralized architecture where the search for the best path is conducted in each ITS vehicle. <p> While their works focus on secondary storage solutions, the benchmark studies in [3, 15] showed that the I/O in computing all-pair shortest paths becomes intolerable when the underlying graphs are cyclic with more than 300 nodes. If Shekar et al.'s finding in <ref> [19] </ref> demonstrates that the current database technology can not satisfy the real-time constraint for ITS path query, the results in [4, 15] predict that the database technology in the near future will not either. <p> While single origin-destination pair search algorithms, such as A fl , are the de facto solutions for decentralized ITS systems <ref> [19] </ref>, for centralized approach, we propose an encoded path view approach that materializes both the best paths and alternative paths between all pairs in an ITS map.
Reference: [20] <institution> U.S. Department of Transportation and Intelligent Vehicle-Highway Society of America, "Interim Report of IVHS Architecture Development Program", </institution> <year> 1994, </year> <pages> pp. 3. </pages>
Reference-contexts: To improve efficiency and safety, a number of key services required of ITS systems have been identified by the U.S. Department Of Transportation (DOT) and IVHS America <ref> [20] </ref>. Among these services, route guidance is an important feature of `Travel and Traffic Management' that helps in reducing traffic congestion, minimizing travel time, and in conserving energy. An efficient and reliable route guidance system is therefore critical to the success of the development of ITS technology. <p> Recently, DOT had sponsored four major industrial and academic teams for developing target ITS architectures. With the first phase of this project completed, reports are now available by all four teams of these ITS architectures <ref> [20] </ref>. They range from completely decentralized systems to centralized ones. Members of the University of Michigan Center of Excellence ITS, which were part of the IBM/Loral team [17], were investigating the centralized solution and its ramifications 1 .
Reference: [21] <author> Toneluh A. Yang, Shashi Shekhar, Babak Hamidzadeh, and P. A. Hancock, </author> <title> "Path Planning and Evaluation in IVHS Databases," </title> <address> VNIS, </address> <year> 1991, </year> <pages> pp. 283 - 290. </pages>
Reference-contexts: This poses a stringent requirement on algorithms that perform the path search. Heuristic algorithms such as A fl have been proposed to improve computation time for ITS <ref> [19, 21] </ref>. In this paper, we will refer to using these algorithms as the compute-on-demand approach. Compute-on-demand is typically chosen as the basic approach for path-based route guidance systems.
Reference: [22] <author> H.S. Warren, </author> <title> "A Modification of Warshall's Algorithm for the Transitive Closure of Biary Relations," </title> <journal> Commun. ACM, </journal> <volume> 18, 4, </volume> <year> 1975, </year> <pages> pp. 218 - 220 </pages>
Reference-contexts: Classic algorithms such as the W arshall and W arren 0 s algorithms <ref> [23, 22] </ref>, Dijkstra 0 s algorithm [9], breadth-first search algorithm [8], depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem.
Reference: [23] <author> S. Warshall, </author> <title> "A Theorem on Boolean Matrices," </title> <journal> JACM, </journal> <volume> 9, 1, </volume> <year> 1962, </year> <pages> pp. 11 - 12 27 </pages>
Reference-contexts: Classic algorithms such as the W arshall and W arren 0 s algorithms <ref> [23, 22] </ref>, Dijkstra 0 s algorithm [9], breadth-first search algorithm [8], depth-first-search algorithm [8], and heuristic A fl algorithm [8], have been the subjects of studies and targets for comparison. For ITS route guidance, the most critical path problem is the shortest path problem.
References-found: 23

