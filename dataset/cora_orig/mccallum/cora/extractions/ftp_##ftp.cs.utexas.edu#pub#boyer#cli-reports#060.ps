URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/060.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: 
Title: A Formal Introduction to a Simple HDL  
Author: Bishop C. Brock and Warren A. Hunt, Jr. 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: brock@cli.com, hunt@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 60 July 31, 1990  
Abstract: This paper appears in the proceedings of the Formal Methods for VLSI Design Workshop held in Denmark in July 1990. This work was supported in part at Computational Logic, Inc., by the Defense Advanced Research Projects Agency, ARPA Orders 6082 and 9151. The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., the Defense Advanced Research Projects Agency or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bishop C. Brock and Warren A. Hunt, Jr. </author> <title> The Formalization of a Simple HDL. </title> <booktitle> In Proceedings of the IFIP TC10/WG10.2/WG10.5 Workshop on Applied Formal Methods for Correct VLSI Design, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Our adder generator selects an "appropriate" adder based on our cost function. Note that any other scheme could have been substituted to select which adder is specified. 9 An ALU Generator We have verified a circuit box generator function for an n-bit ALU <ref> [1] </ref>. There are two parts to the ALU verification: the proof that the top-level Boolean ALU specification implements mathematical functions and the proof that the HDL circuit generated implements the top-level Boolean ALU specification.
Reference: [2] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction The formalization of a hierarchical, occurrence-oriented, combinational hardware description language (HDL) has been accomplished using the Boyer-Moore logic. Circuits are represented as Boyer-Moore list constants, and the Boyer-Moore logic <ref> [2] </ref> is used to define the semantics and syntax of our circuit constants. Instead of verifying each circuit directly, we often prove the correctness of functions which synthesize circuit constants. We employ the Boyer-Moore theorem prover to mechanically manage our database of definitions and to check our proofs. <p> We use the Boyer-Moore logic to recognize well-formed HDL expressions and to provide a semantics for our HDL. Here we give a quick introduction to the Boyer-Moore logic and present some examples of its use. The Boyer-Moore logic <ref> [2] </ref> is a quantifier-free, first-order predicate calculus with equality. Recursive functions may be defined, provided they terminate. Logic formulas are written in a prefix-style, Lisp-like notation. The basic logic includes several built-in data types: Booleans, natural numbers, lists, literal atoms, and integers. Additional data types can be defined. <p> Constants are written using the LISP quote notation. The following statements 1 The semantics for OR, EQUAL, T, and F are described in Boyer and Moore's book, A Computational Logic Handbook <ref> [2] </ref>; see this book for a complete introduction to the Boyer-Moore logic and theorem prover. 2 The definitions of APPEND and many other simple functions are standard in the Boyer-Moore theorem prover.
Reference: [3] <author> Geoffrey M. Brown and Miriam E. Lesser. </author> <title> From Programs to Transistors: Verifying Hardware Synthesis Tools. In Workshop on Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects., </journal> <pages> pages 128-150, </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference: [4] <author> Randal E. Bryant. </author> <title> Verification of Synchronous Circuits by Symbolic Logic Simulation. In Hardware Specification, Verification and Synthesis: </title> <journal> Mathematical Aspects., </journal> <pages> pages 14-24, </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference: [5] <author> Avra Cohn. </author> <title> Correctness Properties of the VIPER Block Model: </title> <booktitle> The Second Level. In Current Trends in Hardware Verification and Automatic Theorem Proving, </booktitle> <pages> pages 1-91, </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference: [6] <author> W. J. Cullyer and C. H. Pygott. </author> <title> Application of Formal Methods to the VIPER Microprocessor. </title> <booktitle> IEE Proceedings, </booktitle> <volume> 134, Pt. E(3):133-141, </volume> <month> May </month> <year> 1987. </year>
Reference: [7] <author> Diederik Verkest, Luc Claesen, and Hugo De Man. </author> <title> The Use of the Boyer-Moore Theorem Prover for Correctness Proofs of Parameterized Hardware Modules. </title> <booktitle> In Proceedings of the IFIP TC10/WG10.2/WG10.5 Workshop on Applied Formal Methods for Correct VLSI Design, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference: [8] <author> Editors: Larry Saunders and Ronald Waxman. </author> <title> IEEE Standard VHDL Language Reference Manual. </title> <booktitle> The Institute of Electrical and Electronics Engineers, </booktitle> <year> 1988. </year>
Reference-contexts: Instead of attempting to define our own HDL, we could have attempted to formally define an existing HDL, e.g., VHDL <ref> [8] </ref>. However, before attempting to formalize a complex language, we wanted to explore the subtleties of defining an HDL without the constraints imposed by an existing language. For example, we did not want to spend time worrying over whether we have the "correct" syntax; any unambiguous syntax will do.
Reference: [9] <author> Joesph A. Goguen. </author> <title> OBJ as a Theorem Prover with Applications to Hardware Verification. </title> <booktitle> In Current Trends in Hardware Verification and Automatic Theorem Proving, </booktitle> <pages> pages 218-267, </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference: [10] <author> M. Gordon. </author> <title> HOL: A Proof Generating System for Higher-Order Logic. </title> <type> Technical Report 103, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <year> 1987. </year>
Reference: [11] <author> M.J.C. Gordon. </author> <title> Why Higher-Order Logic is a Good Formalism for Specifying and Verifying Hardware. </title> <type> Technical Report 77, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> September </month> <year> 1985. </year>
References-found: 11

