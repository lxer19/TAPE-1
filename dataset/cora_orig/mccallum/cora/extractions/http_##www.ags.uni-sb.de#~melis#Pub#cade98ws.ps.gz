URL: http://www.ags.uni-sb.de/~melis/Pub/cade98ws.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Email: melis@cs.uni-sb.de  
Title: Proof Planning with Multiple Strategies  
Author: Erica Melis 
Address: D-66041 Saarbrucken, Germany  
Affiliation: Universitat des Saarlandes, FB Informatik  
Abstract: This paper addresses the integration of several planning strategies as a way to cope with otherwise intractable search spaces in proof planning. It discusses why it is reasonable to employ several refinement strategies and shows that it can be even necessary in order to find a proof plan at all. Motivated by our experiences in proof planning, the paper introduces new refinement strategies. Since choosing among strategies requires additional control some exemplary control knowledge that can be employed in proof planning is presented.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Autexier and D. Hutter. </author> <title> Equational proof-planning by dynamic abstraction. In M.P. </title> <editor> Bonacina and U. Furbach, editors, </editor> <booktitle> Proceedings of FTP97, </booktitle> <year> 1997. </year>
Reference-contexts: In the example, the original f (a) that does not belong to the common expression xfl is abstracted. If the current goal (essentially) is an equational formula and if the lhs and rhs differ in the occurring function symbols, then prefer the abstraction to maximal symbol multisets described in <ref> [1] </ref>. This abstraction takes the multisets of symbols occurring in a formula and removes those symbols that define others. In subproblem sub 1 in the example, f 2 is a maximal symbol in (6) and f is a maximal symbol in (1). <p> There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in [17, 6, 10]. More specifically, abstraction in theorem proving is addressed, e.g., in Plaisted's classical paper [15]; Hutter and Autexier <ref> [1] </ref> propose concrete abstractions for equational theorem proving, e.g., maximal symbols multiset used in our example above.
Reference: 2. <author> C. Benzmueller, L. Cheikhrouhou, D. Fehrer, A. Fiedler, X. Huang, M. Kerber, M. Kohlhase, K. Konrad, A. Meier, E. Melis, W. Schaarschmidt, J. Siekmann, and V. Sorge. </author> <title> OMEGA: Towards a mathematical assistant. </title> <editor> In W. McCune, editor, </editor> <booktitle> Proceedings of CADE-14, </booktitle> <pages> pages 252-255, </pages> <year> 1997. </year>
Reference-contexts: A proof planning state is a set of sequents ` F 2 rather than literals, where is a set of predicate 2 meaning F is derivable from logic formulae and F is a formula. In the proof planner OMEGA <ref> [2] </ref>, a planning state is a set of sequents 3 that is divided into open goals and assumptions. A partial plan is a tuple (T; ; B; Aux), where T is a set of steps that are instantiated operators. <p> This is similar to the framework in [9] that was developed for a different purpose. All strategies refine one and the same proof plan data structure <ref> [2] </ref> in OMEGA. Table 1 shows the top-level procedure of the planner. Termination check is as usual. A strategy is selected according to the control knowledge. The control-knowledge is represented by control-rules in OMEGA. The selected strategy refines the partial plan .
Reference: 3. <author> A. Bundy. </author> <title> The use of explicit plans to guide inductive proofs. </title> <editor> In E. Lusk and R. Overbeek, editors, </editor> <booktitle> Proceedings of CADE-9, </booktitle> <pages> pages 111-120, </pages> <year> 1988. </year>
Reference-contexts: We think that these new ideas can be beneficial for planning tasks in other realistic domains with large search spaces too. 2 Proof Planning Proof planning as introduced by <ref> [3] </ref> uses operators that encapsulate mathematical methods, such as induction, diagonalization, refutation. The resulting proof plans are abstract representations of calculus proofs because the steps in a plan are more complex than calculus steps such as resolution.
Reference: 4. <author> T.A. Estlin, S.A. Chien, and X. Wang. </author> <title> An argument for a hybrid htn/operator-based approac to planning. </title> <editor> In S. Steel and R. Alami, editors, </editor> <booktitle> Recent Advances in AI Planning. 4th European Conference on Planning, ECP'97, volume 1348 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 182-194. </pages> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: In planning, a unifying general planning framework was introduced by [8, 9] in order to compare and evaluate different strategies that are the basis for different planners. [18] empirically substantiated the need for different search heuristics in BSS for efficient planning in different domains. <ref> [4] </ref> argue for combining HTN and operator-based planning strategies for representational reasons. [?] investigate which of two (single) strategies least committment and fewest alternatives first (FAF) is more efficient. They suggest that FAF is likely to be more efficient and can be computed in constant time.
Reference: 5. <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: The resulting proof plans are abstract representations of calculus proofs because the steps in a plan are more complex than calculus steps such as resolution. In terms of AI-planning the basic approach to proof planning is essentially that of classical state-space planning in artificial intelligence <ref> [5] </ref>. A proof planning state is a set of sequents ` F 2 rather than literals, where is a set of predicate 2 meaning F is derivable from logic formulae and F is a formula.
Reference: 6. <author> F. Giunchiglia and T. Walsh. </author> <title> A theory of abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 323-390, </pages> <year> 1992. </year>
Reference-contexts: There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in <ref> [17, 6, 10] </ref>. More specifically, abstraction in theorem proving is addressed, e.g., in Plaisted's classical paper [15]; Hutter and Autexier [1] propose concrete abstractions for equational theorem proving, e.g., maximal symbols multiset used in our example above.
Reference: 7. <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-253, </pages> <year> 1992. </year>
Reference-contexts: Here, most importantly, each strategy can contribute to finding a plan at all. Note that a multi-strategy-planning that has the strategy CBP at its disposal is a generalization of case-based planning approaches that combine case-based and generative planning, e.g. <ref> [20, 7] </ref>. These approaches use the fix control that first case-based planning is chosen and then the remaining open subgoals are closed by generative planning.
Reference: 8. <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, special issue on Planning and Scheduling, </journal> <volume> 76 </volume> <pages> 167-238, </pages> <year> 1995. </year>
Reference-contexts: Therefore, the need of and our approach to multi-strategy planning is applicable and useful for other realistic planning domains as well. 5.1 Related Work Our work builds on ideas from planning, problem solving, and theorem proving. In planning, a unifying general planning framework was introduced by <ref> [8, 9] </ref> in order to compare and evaluate different strategies that are the basis for different planners. [18] empirically substantiated the need for different search heuristics in BSS for efficient planning in different domains. [4] argue for combining HTN and operator-based planning strategies for representational reasons. [?] investigate which of two
Reference: 9. <author> S. Kambhampati and B. Srivastava. </author> <title> Universal classical planner: An algorithm for unifying state-space and plan-space planning. </title> <editor> In M. Ghallab and A. Milani, editors, </editor> <booktitle> New Directions in AI Planning, </booktitle> <pages> pages 61-78. </pages> <year> 1996. </year>
Reference-contexts: For a definition see <ref> [9] </ref>. the goal L2 is replaced by a subgoal L1 if an equational assumption (L0) from the planning state can be used to rewrite L2, i.e., if there is a substitution that unifies one side of the equation with a term t 2 in L2. <p> It has illustrated abstract planning and island refinement. 4 Realizing Multiple-Strategy Proof Planning In order to flexibly control the choices of strategies, we use a planner that can call different refinement strategies. This is similar to the framework in <ref> [9] </ref> that was developed for a different purpose. All strategies refine one and the same proof plan data structure [2] in OMEGA. Table 1 shows the top-level procedure of the planner. Termination check is as usual. A strategy is selected according to the control knowledge. <p> Therefore, the need of and our approach to multi-strategy planning is applicable and useful for other realistic planning domains as well. 5.1 Related Work Our work builds on ideas from planning, problem solving, and theorem proving. In planning, a unifying general planning framework was introduced by <ref> [8, 9] </ref> in order to compare and evaluate different strategies that are the basis for different planners. [18] empirically substantiated the need for different search heuristics in BSS for efficient planning in different domains. [4] argue for combining HTN and operator-based planning strategies for representational reasons. [?] investigate which of two
Reference: 10. <author> C. A. Knoblock. </author> <title> Automatically generating abstractions for planning. </title> <journal> Artificial Intelligence, </journal> <volume> 68 </volume> <pages> 243-302, </pages> <year> 1994. </year>
Reference-contexts: There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in <ref> [17, 6, 10] </ref>. More specifically, abstraction in theorem proving is addressed, e.g., in Plaisted's classical paper [15]; Hutter and Autexier [1] propose concrete abstractions for equational theorem proving, e.g., maximal symbols multiset used in our example above.
Reference: 11. <author> R.E. Korf. </author> <title> Planning as search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33 </volume> <pages> 65-88, </pages> <year> 1987. </year>
Reference-contexts: Introducing an island step into the partial plan and in particular knowing its associated intermediate state, reduces the search space because the problem is reduced to two subproblems as described in <ref> [11] </ref>. Moreover, the smaller gaps may provide enough information for determining a lemma or at least a schematic version of a lemma 5 whose meta-variables can be instantiated in due course.
Reference: 12. <author> G. Kreisel. </author> <title> Mathematical logic. </title> <editor> In T. Saaty, editor, </editor> <booktitle> Lectures on Modern Mathe--matics, </booktitle> <volume> volume 3, </volume> <pages> pages 95-195. </pages> <editor> J. </editor> <publisher> Wiley & Sons, </publisher> <year> 1965. </year>
Reference-contexts: In principle, this search cannot be avoided because the cut rule, i.e., the backwardly applied rule ;B`A `B `A ; is not avoidable in general, and infinitely many lemmata B can exist. For a theo retical analysis see <ref> [12] </ref>. As mentioned above, proof planning in OMEGA originally employed the strategies backward state-space (BSS), forward state-space (FSS), expansion of operators (HTN), and precondition abstraction (PA) with a fix control. There are at least two reasons for improvement.
Reference: 13. <author> E. Melis. </author> <title> A model of analogy-driven proof-plan construction. </title> <booktitle> In Proceedings of IJCAI-95, </booktitle> <pages> pages 182-189, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: Termination check is as usual. A strategy is selected according to the control knowledge. The control-knowledge is represented by control-rules in OMEGA. The selected strategy refines the partial plan . Case-based refinement is realized in OMEGA by analogy-driven proof plan construction <ref> [13] </ref>. 6 The precondition is simplified because the lhs really is F 0 (x fl F 2 ) for meta-variables F 0 ; F 2 because of the corresponding abstract precondition p. 7 Actually, the postcondition of ApplyEquation (f 2 (xflY ) = xflf 2 (Y )) is F 0 =
Reference: 14. <author> S. Minton, C. Knoblock, D. Koukka, Y. Gil, R. Joseph, and J. Carbonell. </author> <title> PRODIGY 2.0: The Manual and Tutorial. </title> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, </institution> <year> 1989. </year> <month> CMU-CS-89-146. </month>
Reference-contexts: For pre (s) = fpg, the auxiliary constraint abs (g 2 ; p) is introduced. 4.2 Control Knowledge in Proof Planning In OMEGA, the planning is controlled by the interpretation of control rules similar to those in Prodigy <ref> [14] </ref>. Control-rules contain meta-predicates that can describe the planning history, the state, resources, constraints.
Reference: 15. <author> D. Plaisted. </author> <title> Theorem proving with abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <pages> 47-108, </pages> <year> 1981. </year>
Reference-contexts: There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in [17, 6, 10]. More specifically, abstraction in theorem proving is addressed, e.g., in Plaisted's classical paper <ref> [15] </ref>; Hutter and Autexier [1] propose concrete abstractions for equational theorem proving, e.g., maximal symbols multiset used in our example above.
Reference: 16. <author> D. Ruby and D. Kibler. </author> <title> Learning subgoal sequences for planning. </title> <booktitle> In Proceedings of IJCAI-89, </booktitle> <pages> pages 609-614, </pages> <year> 1989. </year>
Reference-contexts: They suggest that FAF is likely to be more efficient and can be computed in constant time. While our approach to island-refinement is based on a proper language abstraction of the goal and assumptions, island search does not necessarily involve abstraction, see e.g., <ref> [16] </ref> on stepping stones. There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in [17, 6, 10].
Reference: 17. <author> E.D. Sacerdoti. </author> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2) </volume> <pages> 115-135, </pages> <year> 1974. </year>
Reference-contexts: The planner continues to search for operators applicable to a subgoal and terminates when a solution is found. More elaborate versions of proof planning can already employ the refinement strategies expansion of abstract operators (also known as task reduction [19]) and precondition abstraction (also known as state abstraction <ref> [17] </ref>) with the following fixed control: When a solution is found, each abstract operator is expanded. When an operator is expanded, the previously ignored preconditions become open goals. Eventually, planning and recursive expansion of operators yield a calculus-level proof, e.g., a Natural Deduction (ND)-proof. <p> There is a variety of approaches to abstraction. Problem abstraction to guide problem solving and planning has, for instance, been addressed in <ref> [17, 6, 10] </ref>. More specifically, abstraction in theorem proving is addressed, e.g., in Plaisted's classical paper [15]; Hutter and Autexier [1] propose concrete abstractions for equational theorem proving, e.g., maximal symbols multiset used in our example above.
Reference: 18. <author> P. Stone, M.M. Veloso, and J. Blythe. </author> <title> The need for different domain-independent heuristics. </title> <booktitle> In Proceedings of the Second International Conference on AI Planning, </booktitle> <year> 1994. </year>
Reference-contexts: In planning, a unifying general planning framework was introduced by [8, 9] in order to compare and evaluate different strategies that are the basis for different planners. <ref> [18] </ref> empirically substantiated the need for different search heuristics in BSS for efficient planning in different domains. [4] argue for combining HTN and operator-based planning strategies for representational reasons. [?] investigate which of two (single) strategies least committment and fewest alternatives first (FAF) is more efficient.
Reference: 19. <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proceedings of IJCAI-77, </booktitle> <pages> pages 888-893. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1977. </year>
Reference-contexts: The planner continues to search for operators applicable to a subgoal and terminates when a solution is found. More elaborate versions of proof planning can already employ the refinement strategies expansion of abstract operators (also known as task reduction <ref> [19] </ref>) and precondition abstraction (also known as state abstraction [17]) with the following fixed control: When a solution is found, each abstract operator is expanded. When an operator is expanded, the previously ignored preconditions become open goals.
Reference: 20. <author> M.M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer, </publisher> <address> Berlin, New York, </address> <year> 1994. </year>
Reference-contexts: Here, most importantly, each strategy can contribute to finding a plan at all. Note that a multi-strategy-planning that has the strategy CBP at its disposal is a generalization of case-based planning approaches that combine case-based and generative planning, e.g. <ref> [20, 7] </ref>. These approaches use the fix control that first case-based planning is chosen and then the remaining open subgoals are closed by generative planning.
References-found: 20

