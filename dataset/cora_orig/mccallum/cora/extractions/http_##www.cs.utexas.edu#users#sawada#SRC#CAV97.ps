URL: http://www.cs.utexas.edu/users/sawada/SRC/CAV97.ps
Refering-URL: http://www.cs.utexas.edu/users/sawada/
Root-URL: 
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> M. Agaard, M. Leeser, </author> <title> Reasoning About Pipelines with Structural Hazards, Pipelined Microprocessors, Theorem Provers in Circuit Design : theory, practice, and experience, </title> <booktitle> Lecture Notes in Computer Science 901, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995, </year> <pages> page 13-32. </pages>
Reference-contexts: Tahar and Kumar [12] verified that their DLX implementation does not have RAW hazards and other pipeline conflicts, but they didn't verify the equivalence between their ISA and micro-architecture. Agaard and Leeser <ref> [1] </ref> proposed a framework for pipeline verification focusing on structural hazards, which is similar in character to what we describe here; however, they did not mechanize its application.
Reference: 2. <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: The scheduling registers shown in Fig. 2 keep track of the instructions in the execution units, and the issuing logic refers to them when deciding whether it can issue an instruction. Using the ACL2 logic <ref> [2, 9] </ref>, we have defined a ISA-level next-state function, ISA-state-step (), as an instruction interpreter and a micro-architectural next-state function, micro-state-step (), as a clock-by-clock cycle interpreter. The control of the pipeline is specified concretely, while the data-path is specified with abstract functions.
Reference: 3. <author> J. R. Burch, D. L. Dill: </author> <title> Automatic Verification of Pipelined Microprocessor Control, </title> <editor> In D. Dill Editor, </editor> <booktitle> Computer Aided Verification, Lecture Notes in Computer Science 818, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994, </year> <pages> page 68-80. </pages>
Reference-contexts: Skewed abstraction functions are often complex, and they are vulnerable to minor design modifications because skewed abstraction functions are defined with the expectation that very specific timing properties are preserved between pipeline events. Instead of defining an artificially-constructed skewed abstraction function, Burch and Dill <ref> [3] </ref> proposed a correctness criterion where they first flush the pipeline of the micro-architecture by stalling and then map the resulting micro-architectural state to an ISA-state. Diagram (a) in Fig. 1 shows their correctness criterion. <p> It is also applicable to pipelined machines with out-of-order execution without any modification. Burch and Dill's automated verification procedure <ref> [3] </ref> is effective in verifying their correctness criteria for processors with a simple pipeline control logic, because it treats the data-path symbolically and only verifies the control.
Reference: 4. <author> J. R. Burch. </author> <title> Techniques for verifying superscalar microprocessors. </title> <booktitle> In Design Automation Conference, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Various studies have been done to improve the capability of the technique [8, 14]. Especially, [14] decomposed Diagram (a) to simpler diagrams, which were used in superscalar verification in <ref> [4] </ref>. However, it is still difficult to see how we can apply Fig. 1. Pipeline Correctness Criteria the procedure to the verification of complex micro-architectural designs used in today's microprocessors.
Reference: 5. <author> D. Cyrluk. </author> <title> Microprocessor verification in PVS: A methodology and simple example, </title> <type> Technical Report SRI-CSL-93-12, </type> <institution> SRI Computer Science Laboratory, </institution> <month> Dec. </month> <year> 1993 </year>
Reference-contexts: proof techniques to commercial designs is the failure of current formal approaches to address the verification of today's processors with modern performance optimizations, including superscalar super-pipelining, out-of-order execution, and speculative execution. 2 Background There have been a number of earlier efforts to verify pipelined microprocessor designs with interactive theorem provers <ref> [5, 10, 11, 13] </ref>. Typically in these projects, they show the equivalence of an instruction-set architecture (ISA) and a corresponding micro-architectural design. An ISA is a non-pipelined abstract machine which specifies the effects of individual instructions, while a micro-architectural design exposes the pipeline structure of an actual machine implementation.
Reference: 6. <author> J. Hennessey, D. Patterson, </author> <title> Computer Architecture a Quantitative Approach, </title> <publisher> Mor-gan Kaufmann Publishers, Inc., </publisher> <year> 1996. </year>
Reference-contexts: To achieve this goal, we designed an example microprocessor which features out-of-order instruction completion, speculative instruction fetch, and dynamic resolution of read-after-write (RAW) dependencies (also called true dependencies) and write-after-write (WAW) dependencies (also called antidepen-dencies) <ref> [6, 8] </ref>. Our method employs a technique we call a Micro-Architectural Execution Trace Table (MAETT). With the help of the MAETT, we define various properties of our pipelined implementation, and incrementally prove that each of them holds for all the reachable pipeline states.
Reference: 7. <author> W. A. Hunt, Jr., B. Brock, </author> <title> A Formal HDL and Its Use in the FM9001 Verification. In C.A.R. </title> <editor> Hoare and M.J.C. Gordon, editors, </editor> <title> Mechanized Reasoning and Hardware Design, page 35-48. </title> <booktitle> Prentice-Hall International Series in Computer Science, </booktitle> <address> Engle wood Cliffs, N.J., </address> <year> 1992 </year>
Reference-contexts: The correctness for our pipelined implementation is then proved from these pipeline properties. Our motivation is to permit the verification of complex pipelined microprocessor implementations. Although some measure of success has been achieved <ref> [7] </ref>, formal verification has not been widely applied to the micro-architectural design of general-purpose microprocessors.
Reference: 8. <author> R. B. Jones, D. L. Dill, J. R. Burch, </author> <title> Efficient Validity Checking for Processor Verification, </title> <booktitle> 1995 IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 2-6. </pages>
Reference-contexts: To achieve this goal, we designed an example microprocessor which features out-of-order instruction completion, speculative instruction fetch, and dynamic resolution of read-after-write (RAW) dependencies (also called true dependencies) and write-after-write (WAW) dependencies (also called antidepen-dencies) <ref> [6, 8] </ref>. Our method employs a technique we call a Micro-Architectural Execution Trace Table (MAETT). With the help of the MAETT, we define various properties of our pipelined implementation, and incrementally prove that each of them holds for all the reachable pipeline states. <p> However, the procedure can fail for large and complex processor designs, because the number of examined cases explodes as the control part becomes complicated. Various studies have been done to improve the capability of the technique <ref> [8, 14] </ref>. Especially, [14] decomposed Diagram (a) to simpler diagrams, which were used in superscalar verification in [4]. However, it is still difficult to see how we can apply Fig. 1. Pipeline Correctness Criteria the procedure to the verification of complex micro-architectural designs used in today's microprocessors.
Reference: 9. <author> M. Kaufmann, J S. Moore, ACL2: </author> <title> An Industrial Strength Version of Nqthm, </title> <booktitle> Proceedings of the Eleventh Annual Conference on Computer Assurance (COMPASS-96), </booktitle> <publisher> pages 23-34 , IEEE Computer Society Press, </publisher> <month> June </month> <year> 1996. </year>
Reference-contexts: The scheduling registers shown in Fig. 2 keep track of the instructions in the execution units, and the issuing logic refers to them when deciding whether it can issue an instruction. Using the ACL2 logic <ref> [2, 9] </ref>, we have defined a ISA-level next-state function, ISA-state-step (), as an instruction interpreter and a micro-architectural next-state function, micro-state-step (), as a clock-by-clock cycle interpreter. The control of the pipeline is specified concretely, while the data-path is specified with abstract functions.
Reference: 10. <author> M. Srivas, M. Bickford, </author> <title> Formal Verification of a Pipelined Microprocessor, </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1990, </year> <pages> page 52-64. </pages>
Reference-contexts: proof techniques to commercial designs is the failure of current formal approaches to address the verification of today's processors with modern performance optimizations, including superscalar super-pipelining, out-of-order execution, and speculative execution. 2 Background There have been a number of earlier efforts to verify pipelined microprocessor designs with interactive theorem provers <ref> [5, 10, 11, 13] </ref>. Typically in these projects, they show the equivalence of an instruction-set architecture (ISA) and a corresponding micro-architectural design. An ISA is a non-pipelined abstract machine which specifies the effects of individual instructions, while a micro-architectural design exposes the pipeline structure of an actual machine implementation.
Reference: 11. <author> M. K. Srivas, S. P. Miller, </author> <title> Formal Verification of a Commercial Microprocessor, </title> <type> Technical Report SRI-CSL-95-12, </type> <institution> SRI Computer Science Laboratory, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: proof techniques to commercial designs is the failure of current formal approaches to address the verification of today's processors with modern performance optimizations, including superscalar super-pipelining, out-of-order execution, and speculative execution. 2 Background There have been a number of earlier efforts to verify pipelined microprocessor designs with interactive theorem provers <ref> [5, 10, 11, 13] </ref>. Typically in these projects, they show the equivalence of an instruction-set architecture (ISA) and a corresponding micro-architectural design. An ISA is a non-pipelined abstract machine which specifies the effects of individual instructions, while a micro-architectural design exposes the pipeline structure of an actual machine implementation. <p> In many cases, however, a pipeline state may not be directly mapped to an ISA state because of the latency of pipeline events. One way to avoid this problem is to define a skewed <ref> [11] </ref> abstraction function, which relates multiple pipeline states to a single ISA state. Skewed abstraction functions are often complex, and they are vulnerable to minor design modifications because skewed abstraction functions are defined with the expectation that very specific timing properties are preserved between pipeline events.
Reference: 12. <author> S. Tahar, R. Kumar, </author> <title> Formal Verification of Pipeline Conflicts in RISC Processors, </title> <booktitle> Proc. European Design Automation Conference (EURO-DAC94), </booktitle> <address> Grenoble, France, September 1994, </address> <publisher> IEEE Computer Society Press. </publisher> <pages> page 285-289. </pages>
Reference-contexts: In the verification of our example pipelined machine, we incrementally verify various pipeline properties first, from which we can prove our correctness criteria. An examples of such properties will be given in Sec. 3.2 Several earlier projects have focused on the verification of pipeline properties. Tahar and Kumar <ref> [12] </ref> verified that their DLX implementation does not have RAW hazards and other pipeline conflicts, but they didn't verify the equivalence between their ISA and micro-architecture.
Reference: 13. <author> P. J. Windley, M. L. </author> <title> Coe, A Correctness Model for Pipelined Microprocessors, Theorem Provers in Circuit Design : theory, practice, and experience, </title> <booktitle> Lecture Notes in Computer Science 901, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995, </year> <pages> page 33-51. </pages>
Reference-contexts: proof techniques to commercial designs is the failure of current formal approaches to address the verification of today's processors with modern performance optimizations, including superscalar super-pipelining, out-of-order execution, and speculative execution. 2 Background There have been a number of earlier efforts to verify pipelined microprocessor designs with interactive theorem provers <ref> [5, 10, 11, 13] </ref>. Typically in these projects, they show the equivalence of an instruction-set architecture (ISA) and a corresponding micro-architectural design. An ISA is a non-pipelined abstract machine which specifies the effects of individual instructions, while a micro-architectural design exposes the pipeline structure of an actual machine implementation.
Reference: 14. <author> P. J. Windley, J. R. Burch: </author> <title> Mechanically Checking a Lemma Used in an Automatic Verification Tool, Formal Methods in Computer-Aided Design, </title> <booktitle> Lecture Notes in Computer Science 1166, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996, </year> <title> page 362-376. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: However, the procedure can fail for large and complex processor designs, because the number of examined cases explodes as the control part becomes complicated. Various studies have been done to improve the capability of the technique <ref> [8, 14] </ref>. Especially, [14] decomposed Diagram (a) to simpler diagrams, which were used in superscalar verification in [4]. However, it is still difficult to see how we can apply Fig. 1. Pipeline Correctness Criteria the procedure to the verification of complex micro-architectural designs used in today's microprocessors. <p> However, the procedure can fail for large and complex processor designs, because the number of examined cases explodes as the control part becomes complicated. Various studies have been done to improve the capability of the technique [8, 14]. Especially, <ref> [14] </ref> decomposed Diagram (a) to simpler diagrams, which were used in superscalar verification in [4]. However, it is still difficult to see how we can apply Fig. 1. Pipeline Correctness Criteria the procedure to the verification of complex micro-architectural designs used in today's microprocessors.
References-found: 14

