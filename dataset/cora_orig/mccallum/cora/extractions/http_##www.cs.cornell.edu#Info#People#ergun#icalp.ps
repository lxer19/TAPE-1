URL: http://www.cs.cornell.edu/Info/People/ergun/icalp.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/ergun/research.html
Root-URL: 
Email: (codenotti@imc.pi.cnr.it)  ravig@cs.cornell.edu)  (psgemme@cs.sandia.gov)  
Phone: 2  3  
Title: Checking Properties of Polynomials (Extended Abstract)  
Author: Bruno Codenotti, Funda Ergun, Peter Gemmell, and S Ravi Kumar IMC-CNR, Via S. Maria 
Affiliation: Cornell University,  Sandia National Labs,  
Address: 46, 56126-Pisa, Italy.  Ithaca, NY 14853. (fergun,  Albuquerque, NM 87185.  
Abstract: In this paper we show how to construct efficient checkers for programs that supposedly compute properties of polynomials. The properties we consider are roots, norms, and other analytic/algebraic functions of polynomials. In our model, both the program and the polynomial p are available to the checker each as a black box. We show how to check programs that compute a specific root (e.g., the largest) or a subset of roots of the given polynomial. The checkers, in addition to never computing the root(s) themselves, strive to minimize both the running time (preferably o(deg 2 p)) and the number of black box evaluations of p (preferably o(deg p)). We obtain deterministic checkers when a separation bound between the roots is known and probabilistic checkers when the roots can be arbitrarily close. We then extend the checkers to handle the situations when the program returns an approximation to the root and when the evaluation of the polynomial p is approximate. Our results translate into efficient checkers for matrix spectra computations both in the exact and approximate settings, operating in the library model of [BLR93]. Next we show that the usual characterization of norms using the triangle inequality is not suited for self-testing in the exact case, but surprisingly, could be used in the approximate case. Our results are complementary to most of the existing results on testing polynomials. The testers in the latter have the goal of determining whether a program computes a polynomial of given degree, whereas we are interested in checking the properties of a given polynomial. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC + 93] <author> S. Ar, M. Blum, B. Codenotti, and P. </author> <title> Gemmell. Checking approximate computations over the reals. </title> <booktitle> Proc. 25th STOC, </booktitle> <pages> pp. 786-795, </pages> <year> 1993. </year>
Reference-contexts: Our result, which applies to norms defined on any domain, is intriguing because most of the current techniques for testing use an exact characterization to build an exact tester and an approximate characterization (where the equalities are relaxed to approximations, see <ref> [ABC + 93, EKR96] </ref> for further exposition) to build an approximate tester. The exact characterization for norms is too lenient to lead to an exact tester, however, surprisingly, is strong enough for an approximate one (even without resorting to an approximate characterization). <p> We exploit the fact that the eigenvalues of a matrix are the roots of its characteristic polynomial. The characteristic polynomial is evaluated using a library program for the determinant that has been tested, for instance using the exact checker of [Kan90] or the approximate checker of <ref> [ABC + 93] </ref>. Several vital parameters in control theory (e.g., stability of a system) are related to the location of the roots of certain polynomials. Programs that compute these parameters are very common in practice [BCL82]; our checkers could be used to check such programs. <p> Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. Approximate testers for several linear algebra computations can be found in <ref> [ABC + 93] </ref>. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. We consider properties f of polynomials p. In this context, we assume that properties are relations such as those binding p to one or more of its roots.
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verifica tion and hardness of approximation problems. </title> <booktitle> Proc. 33rd FOCS, </booktitle> <pages> pp. 14-23, </pages> <year> 1992. </year>
Reference-contexts: The second and fourth authors are also supported by the NSF Career Award CCR-9624552, the Alfred P. Sloan Research Award, and the NSF grant DMI-91157199. have practical value as tools for efficient verification of the correctness of programs. Furthermore, they have been applied to develop efficient probabilistically checkable proofs <ref> [ALM + 92] </ref>. In this paper we investigate the problem of checking and testing (both in the exact and approximate cases) programs that compute properties (i.e., functions or relations) of polynomials.
Reference: [AS92] <author> S. Arora and S. Safra. </author> <title> Probabilistic checking of proofs: A new characteri zation of NP. </title> <booktitle> Proc. 33rd FOCS, </booktitle> <pages> pp. 2-13, </pages> <year> 1992. </year>
Reference-contexts: Here, the authors lay down some concrete requirements for an efficient testing of such programs. The setting proposed, however, is very different from ours and is mostly heuristic and informal. A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact <ref> [GLR + 91, AS92, GLR + 91, RS96] </ref> and approximate [EKR96] settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. <p> In the specific case of vector p-norms on R n , which are of the form jxj p = ( P n i ) 1=p , the problem reduces to the well-studied problem of multivariate degree-testing <ref> [AS92, RS96] </ref>. In fact, matrix spectral norms can be checked using our techniques in Section 3 and Section 4. In the more general case of checking whether the function is close to any norm, we show that the properties characterizing a norm are not usable for exact self-testing.
Reference: [Blu88] <author> M. Blum. </author> <title> Designing programs to check their work. </title> <type> TR 88-009, ICSI, </type> <year> 1988. </year>
Reference: [BK89] <author> M. Blum and S. Kannan. </author> <title> Program correctness checking ... and the design of programs that check their work. </title> <booktitle> Proc. 21st STOC, </booktitle> <pages> pp. 86-97, </pages> <year> 1989. </year>
Reference-contexts: Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in <ref> [Fre79, BK89, Kan90, BLR93] </ref>. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. We consider properties f of polynomials p.
Reference: [BLR93] <author> M. Blum, M. Luby, and R. Rubinfeld. </author> <title> Self-testing/correcting with applica tions to numerical problems. </title> <journal> JCSS, </journal> <volume> 47(3) </volume> <pages> 549-595, </pages> <year> 1993. </year>
Reference-contexts: Our checkers for root-finding problems only assume an oracle access to the polynomial p. Note that this is a weaker requirement than the availability of an explicit representation of p. This model lets us view the checkers for matrix spectra computations in the library setting of <ref> [BLR93] </ref>. In this framework, checkers call already tested programs in the library, counting each call as a unit time call. Such calls naturally correspond to the evaluation of the polynomial in our model. Consequently, it is imperative that the number of evaluations of p be minimized. <p> A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact [GLR + 91, AS92, GLR + 91, RS96] and approximate [EKR96] settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in <ref> [BLR93, Erg95] </ref>. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. <p> Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in <ref> [Fre79, BK89, Kan90, BLR93] </ref>. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. We consider properties f of polynomials p. <p> the standard checking model in that p is available as an oracle rather than in an explicit form. (It is often unrealistic or less efficient to assume that an explicit representation of p is available to T .) We will see that this model (i) captures the library setting of <ref> [BLR93] </ref> and helps us build efficient checkers, (ii) is useful in our applications to checking matrix spectra computations, and (iii) elegantly extends our checkers to the approximate setting. Variations of the Model. <p> In this paper, we will call a checker for the second scenario an approximate checker. Self-Testing, Self-Correcting, Checking, and Libraries. Self-testing ensures that equals the target function f (from a function family F ) on most inputs. A self-tester usually has two stages <ref> [BLR93] </ref>: (i) testing if is a member of F (the property test) and (ii) testing if is the specific member, i.e., f (the equality test). Self-correction involves taking a that is correct on most inputs and converting it into a program that is correct on all inputs. <p> A self-tester together with a self-corrector gives a result-checker. In the library setting, a collection of previously checked programs is used to build checkers for new functions. For details see <ref> [BLR93] </ref>. Mathematical Notation. We consider polynomials over a field F. Let R denote the real numbers and C denote the complex numbers. Let F n [x] denote the ring of polynomials of degree n with coefficients from F. <p> Checking norm (ax) + norm (bx) = norm ((a + b)x) for x; jxj = 1 will determine if norm is scalable along x (this is the linearity test of <ref> [BLR93] </ref>). By performing this test at many x, we can ensure that norm is scalable for many x. Therefore, for the rest of this discussion, we can assume that norm is scalable. 8i 2 R, define the "concentric" contours C i = fx j norm (x) = ig.
Reference: [BCL82] <author> B. Buchberger, G.E. Collins, and R. Loos. </author> <title> Computer Algebra Symbolic and Algebraic Computation. </title> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Several vital parameters in control theory (e.g., stability of a system) are related to the location of the roots of certain polynomials. Programs that compute these parameters are very common in practice <ref> [BCL82] </ref>; our checkers could be used to check such programs. Another application of property testing of polynomials is in verifying parts of computational algebra systems. We have taken an initial step in this direction but many interesting questions remain. Previous and Related Work. <p> (x i ) = i=0 a i x i ; a n = 1: Then, it easily follows that p 0 (x) = i=1 j6=i (x j ). g (x): We will use g (x) to denote p 0 (x)=p (x) = P n inf ; max : Cauchy's inequality <ref> [BCL82] </ref> gives bounds on the roots of p as inf = ja n j=(ja n j + max n1 i=1 fja i jg=ja 0 j = sup . ffi: A separation bound between the roots of p is given by [BCL82] as ffi = min i 6= j j i j <p> (x) = P n inf ; max : Cauchy's inequality <ref> [BCL82] </ref> gives bounds on the roots of p as inf = ja n j=(ja n j + max n1 i=1 fja i jg=ja 0 j = sup . ffi: A separation bound between the roots of p is given by [BCL82] as ffi = min i 6= j j i j j &gt; 3n (n+1)=2 kpk 1n disc (p), where the discriminant disc (p) = j i6=j ( i j )j = j res (p; p 0 )j and kpk 2 = i=0 ja i j 2 [Z93].
Reference: [Con78] <author> J.B. Conway. </author> <title> Functions of One Complex Variable. </title> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: Improved Checkers for R max : ffi known. For the rest of this section, we will take either F = C or F = R. We use the following theorems from complex analysis (see <ref> [Con78] </ref>). Let n (C; z) be the number of times C "winds" around the point z 2 C . Theorem 4 Cauchy's Residue Theorem. Let G be an open subset of the plane and f : G ! C an analytic function.
Reference: [Erg95] <author> F. Ergun. </author> <title> Testing multivariate linear functions: Overcoming the generator bottleneck. </title> <booktitle> Proc. 27th STOC, </booktitle> <pages> pp. 407-416, </pages> <year> 1995. </year>
Reference-contexts: A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact [GLR + 91, AS92, GLR + 91, RS96] and approximate [EKR96] settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in <ref> [BLR93, Erg95] </ref>. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model.
Reference: [Fre79] <author> R. Freivalds. </author> <title> Fast probabilistic algorithms. </title> <booktitle> Proc. 8th MFCS, </booktitle> <volume> LNCS 74, </volume> <pages> pp. 57-69, </pages> <year> 1979. </year>
Reference-contexts: Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in <ref> [Fre79, BK89, Kan90, BLR93] </ref>. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. We consider properties f of polynomials p.
Reference: [EKR96] <author> F. Ergun, S. Ravi Kumar, and R. Rubinfeld. </author> <title> Approximate checking of poly nomials and functional equations. </title> <note> Proc. 37th FOCS, To appear. </note>
Reference-contexts: Our result, which applies to norms defined on any domain, is intriguing because most of the current techniques for testing use an exact characterization to build an exact tester and an approximate characterization (where the equalities are relaxed to approximations, see <ref> [ABC + 93, EKR96] </ref> for further exposition) to build an approximate tester. The exact characterization for norms is too lenient to lead to an exact tester, however, surprisingly, is strong enough for an approximate one (even without resorting to an approximate characterization). <p> The setting proposed, however, is very different from ours and is mostly heuristic and informal. A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact [GLR + 91, AS92, GLR + 91, RS96] and approximate <ref> [EKR96] </ref> settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. Approximate testers for several linear algebra computations can be found in [ABC + 93].
Reference: [GLR + 91] <author> P. Gemmell, R. Lipton, R. Rubinfeld, M. Sudan, and A. Wigderson. </author> <title> Self testing/correcting for polynomials and for approximate functions. </title> <booktitle> Proc. 23rd STOC, </booktitle> <pages> pp. 32-42, </pages> <year> 1991. </year>
Reference-contexts: Here, the authors lay down some concrete requirements for an efficient testing of such programs. The setting proposed, however, is very different from ours and is mostly heuristic and informal. A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact <ref> [GLR + 91, AS92, GLR + 91, RS96] </ref> and approximate [EKR96] settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93].
Reference: [GGR96] <author> O. Goldreich, S. Goldwasser, and D. Ron. </author> <title> Property testing and its connec tion to learning and approximation. </title> <booktitle> Proc. 37th FOCS, </booktitle> <pages> pp. 339-348, </pages> <year> 1996. </year>
Reference-contexts: Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in <ref> [GGR96] </ref>. 2 Preliminaries Our Model. We consider properties f of polynomials p. In this context, we assume that properties are relations such as those binding p to one or more of its roots.
Reference: [GV89] <author> G.H. Golub and C. Van Loan. </author> <title> Matrix Computations. </title> <publisher> Johns Hopkins U. Press, </publisher> <year> 1989. </year>
Reference-contexts: The most natural way of checking ~ R 1 would be by checking that kA ~ x ~ xk &lt; *, for a certain threshold *, and passing ~ 1 if the above inequality is satisfied. Unfortunately, from perturbation theory <ref> [GV89] </ref> we have that the value of * above can be small, but j j be as large as *=jy H xj, where y H is a unit length left eigenvector of A (y H A = y H ), assuming to be a simple eigenvalue. <p> The correctness of this construction is from the definition of singular values (see <ref> [GV89] </ref>). 7 Further Work All of our checkers are assumed to perform exact arithmetic. This assumption is not always true in practice. It will be interesting to design checkers when the checker's numerical errors are critical. Many issues are still unresolved in the case of ~p.
Reference: [JT75] <author> M.A. Jenkins and J.F. Traub. </author> <title> Principles for testing polynomial zero-finding programs. </title> <journal> ACM Trans. on Mathematical Software, </journal> <volume> 1 </volume> <pages> 26-34, </pages> <year> 1975. </year>
Reference-contexts: Another application of property testing of polynomials is in verifying parts of computational algebra systems. We have taken an initial step in this direction but many interesting questions remain. Previous and Related Work. The problem of testing root-finding programs is considered as early as 1975 in <ref> [JT75] </ref>. Here, the authors lay down some concrete requirements for an efficient testing of such programs. The setting proposed, however, is very different from ours and is mostly heuristic and informal.
Reference: [Kan90] <author> S. Kannan. </author> <title> Program Result Checking with Applications. </title> <type> PhD thesis, </type> <institution> U. of California at Berkeley, </institution> <year> 1990. </year>
Reference-contexts: We exploit the fact that the eigenvalues of a matrix are the roots of its characteristic polynomial. The characteristic polynomial is evaluated using a library program for the determinant that has been tested, for instance using the exact checker of <ref> [Kan90] </ref> or the approximate checker of [ABC + 93]. Several vital parameters in control theory (e.g., stability of a system) are related to the location of the roots of certain polynomials. <p> Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in <ref> [Fre79, BK89, Kan90, BLR93] </ref>. Approximate testers for several linear algebra computations can be found in [ABC + 93]. Testing graph properties is considered in [GGR96]. 2 Preliminaries Our Model. We consider properties f of polynomials p.
Reference: [Lip91] <author> R. Lipton. </author> <title> New directions in testing. </title> <booktitle> Proc. DIMACS Workshop on Dis tributed Computing and Cryptography, </booktitle> <pages> pp. 191-202, </pages> <year> 1991. </year>
Reference: [Mar66] <author> M. Marden. </author> <title> Geometry of Polynomials. </title> <publisher> AMS, </publisher> <year> 1966. </year>
Reference: [PTV92] <author> W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. </author> <title> Flannery. </title> <editor> Nu merical Recipes in C. </editor> <address> Cambridge U. </address> <publisher> Press, </publisher> <year> 1992. </year>
Reference: [RS96] <author> R. Rubinfeld and M. Sudan. </author> <title> Robust characterizations of polynomials and their applications to program testing. </title> <journal> SICOMP, </journal> <volume> 25(2) </volume> <pages> 252-271, </pages> <year> 1996. </year>
Reference-contexts: Here, the authors lay down some concrete requirements for an efficient testing of such programs. The setting proposed, however, is very different from ours and is mostly heuristic and informal. A number of papers deal with testing whether a program is computing a low-degree polynomial in the exact <ref> [GLR + 91, AS92, GLR + 91, RS96] </ref> and approximate [EKR96] settings. Testing certain polynomial functions like polynomial multiplication and FFT is investigated in [BLR93, Erg95]. Checkers for several linear algebra computations like matrix rank, determinant, matrix multiplication are given in [Fre79, BK89, Kan90, BLR93]. <p> In the specific case of vector p-norms on R n , which are of the form jxj p = ( P n i ) 1=p , the problem reduces to the well-studied problem of multivariate degree-testing <ref> [AS92, RS96] </ref>. In fact, matrix spectral norms can be checked using our techniques in Section 3 and Section 4. In the more general case of checking whether the function is close to any norm, we show that the properties characterizing a norm are not usable for exact self-testing.
Reference: [Wil65] <author> J. H. Wilkinson. </author> <title> The Algebraic Eigenvalue Problem. </title> <publisher> Clarendon Press, </publisher> <year> 1966. </year>
Reference: [Z93] <author> R.E. Zippel. </author> <title> Effective Polynomial Computation. </title> <publisher> Kluwer Academic Press, </publisher> <year> 1993. </year>
Reference-contexts: In these cases, we provide checkers for some of the problems. Next we consider programs that claim to compute some (unspecified) norm on the domain (Section 5). There are several norms for polynomials (see <ref> [Z93] </ref>); the goal is to test whether there exists a norm that agrees with the program on most inputs. We show that the standard characterization of norms (using triangle inequality) cannot be used to construct exact testers. <p> is given by [BCL82] as ffi = min i 6= j j i j j &gt; 3n (n+1)=2 kpk 1n disc (p), where the discriminant disc (p) = j i6=j ( i j )j = j res (p; p 0 )j and kpk 2 = i=0 ja i j 2 <ref> [Z93] </ref>. Here, resultant res (p; q) = i=1 q ( i ) where i is a root of p. Some of our checkers assume that a lower bound on ffi is known. Problem Definitions.
References-found: 22

