URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-242.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Title: Event Delivery Abstractions for Mobile Computing  
Author: B. R. Badrinath Girish Welling 
Address: New Brunswick, NJ 08903  New Brunswick, NJ 08903  
Affiliation: Dept. of Computer Science Rutgers University  Dept. of Computer Science Rutgers University  
Abstract: An application intended for a mobile computing environment is different from more traditional ones in that it is more event driven. The reason is that mobile computing is associated with constraints, both in terms of mobile host hardware and the network environment. The effect of these constraints is complicated by the fact that the environment in which a mobile host operates changes as it moves. An application in such an environment will have to metamorphose as changes occur, in order to make the best possible use of the constrained environment and thus provide the best possible quality of service to a user. We choose to model these changes in the environment as events which are delivered to each application that is interested. This paper describes a language level abstraction to deliver events along with the run-time support required. The idea itself is not restricted to the mobile computing environment: it could be used in all such environments where an application may be interested in altering its behavior in response to changes in the state of its environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steve Kleiman and Joe Eykholt. </author> <title> Interrupts as threads. </title> <booktitle> In Operating Systems Review Vol. </booktitle> <volume> 29, No. 2, </volume> <month> April </month> <year> 1995. </year>
Reference-contexts: This is similar to the interrupt handling mechanism in Solaris 2, where unlike earlier versions of Solaris (and SunOS), an interrupt handler executes on pre-allocated interrupt threads maintained specifically for interrupt handling <ref> [1] </ref>. The method signature in our abstraction specifies formal parameters through which event-specific information is provided as actual parameters. The task of an event handler implementor is now reduced to defining an object of the required type and providing the appropriate methods to handle the events.
Reference: [2] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Since the event-handler had been defined as a virtual function in the base class, control is passed to the actual event-handler in the derived class when the event occurs. The reader is referred to <ref> [2] </ref> for a complete description on the concept of virtual functions. We have chosen the C++ language binding [2] for our implementation because of (i) the availability of the GNU C++ compiler, (ii) the fact that C++ can easily be integrated with existing libraries and (iii) the acceptance of C++ in <p> The reader is referred to <ref> [2] </ref> for a complete description on the concept of virtual functions. We have chosen the C++ language binding [2] for our implementation because of (i) the availability of the GNU C++ compiler, (ii) the fact that C++ can easily be integrated with existing libraries and (iii) the acceptance of C++ in the program development community.
Reference: [3] <author> Brian Noble, Morgan Price, and M. Satya-narayanan. </author> <title> A programming interface for application-aware adaptation in mobile computing. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Our experience shows us that one peculiarity of the mobile computing environment is the necessity for an application to react to changes in the environment. This fact seems to be agreed upon by other researchers as well. Noble, Price and Satyanarayanan <ref> [3] </ref> from CMU talk about application-aware adaptation for file access. Zenel and Duchamp [4] from Columbia talk about application level communication filtering to reduce wireless traffic. Neuman, Augart and Upasani [5] from ISI, USC discuss the role of directory services in support of location-independent computing.
Reference: [4] <author> Bruce Zenel and Dan Duchamp. </author> <title> Intelligent communication filtering for limited bandwidth environments. </title> <booktitle> In 5th Workshop on Hot Topics in Operating Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: This fact seems to be agreed upon by other researchers as well. Noble, Price and Satyanarayanan [3] from CMU talk about application-aware adaptation for file access. Zenel and Duchamp <ref> [4] </ref> from Columbia talk about application level communication filtering to reduce wireless traffic. Neuman, Augart and Upasani [5] from ISI, USC discuss the role of directory services in support of location-independent computing. Each of these require the monitoring of mobility related events of some form and reacting to them.
Reference: [5] <author> Clifford Neuman, Steven Augart, and Shan-taprasad Upasani. </author> <title> Using prospero to support integrated location-independent computing. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: This fact seems to be agreed upon by other researchers as well. Noble, Price and Satyanarayanan [3] from CMU talk about application-aware adaptation for file access. Zenel and Duchamp [4] from Columbia talk about application level communication filtering to reduce wireless traffic. Neuman, Augart and Upasani <ref> [5] </ref> from ISI, USC discuss the role of directory services in support of location-independent computing. Each of these require the monitoring of mobility related events of some form and reacting to them. All of them involve run-time support to aid in this task.
Reference: [6] <author> Terri Watson. </author> <title> Application design for wireless computing. </title> <booktitle> In IEEE Workshop on Mobile Computing, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: In this paper, we try and abstract out the functionality required to make an application aware of changes associated with the mobile environment. Terri Watson from University of Washington, Seattle presents strategies for designing applications for a wireless environment <ref> [6] </ref>. Among the design strategies suggested are expose network costs, utilize workstation resources, and adapt to variations in network connectivity. Each of these strategies require an application to be aware of an aspect of the environment and then react to a change in it.
Reference: [7] <author> Bill N. Schilit, Marvin M. Theimer, and Brent B. Welch. </author> <title> Customizing mobile applications. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Our event delivery abstractions provide a uniform mechanism for this and can be the basis for implementing all such strategies. Schilit, Theimer and Welch from Xerox PARC describe a system <ref> [7, 8] </ref> for a dynamically changing environment where applications need to be dynamically customized. A high level RPC based service is provided to obtain current environment related information synchronously and a change in this environment though a callback.
Reference: [8] <author> Bill Schilit, Norman Adams, and Roy Want. </author> <booktitle> Context-aware computing applications. In IEEE Workshop on Mobile Computing, </booktitle> <month> De-cember </month> <year> 1994. </year>
Reference-contexts: Our event delivery abstractions provide a uniform mechanism for this and can be the basis for implementing all such strategies. Schilit, Theimer and Welch from Xerox PARC describe a system <ref> [7, 8] </ref> for a dynamically changing environment where applications need to be dynamically customized. A high level RPC based service is provided to obtain current environment related information synchronously and a change in this environment though a callback.
Reference: [9] <author> Jim Waldo, Ann Wollarth, Geoff Wyant, and Sam Kendall. </author> <title> Events in an rpc based distributed system. </title> <booktitle> In Proceedings of the Winter 1995 USENIX Conference, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: The idea of delivering events associated with change in the state of remote objects in a distributed system is described by Jim Waldo and others <ref> [9] </ref> from Sun Microsystems Laboratories. The motivation is to extend the RPC paradigm to provide a callback mechanism in the form of an event. Our approach is more restrictive and is tuned to detecting changes in the local state of a mobile environment.
Reference: [10] <author> Michael Bender et al. </author> <title> Unix for nomads: Making Unix support mobile computing. </title> <booktitle> In Proceedings of the USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The focus is on providing a platform independent method of delivering such changes in the form of events. Michael Bender and others from SUN Mi-crosystems suggest various enhancements to the operating system to support nomadic computing <ref> [10] </ref>. Among these are kernel changes to support power management and system state checkpoint-ing, and drivers and other kernel support for the PCMCIA bus standard.
Reference: [11] <author> Gabriel Montenegro and Steve Drach. </author> <title> System isolation and network fast-fail capability in solaris. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Gabriel Montenegro and Steve Drach, also from SUN Microsystems argue that the approach of making an application aware of the characteristics of the underlying communication mechanism is 13 expensive and time consuming <ref> [11] </ref>. They sug-gest an alternative, implemented entirely within Solaris 2.4, where network operations which are guaranteed to fail do so fast. In doing so, however, they still needed to make changes to network service modules and some utilities.
Reference: [12] <author> L. B. Huston and P. Honeyman. </author> <title> Partially connected operation. </title> <booktitle> In Proceedings of the 2nd USENIX Symposium on Mobile & Location-Independent Computing, </booktitle> <month> April </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: This policy is simple to implement using our event delivery abstractions, and can be very easily altered if necessary. Other environment dependent policies such as those described by Huston and Honeyman <ref> [12] </ref> can also be easily implemented using our event delivery abstractions. The event delivery abstractions proposed in this paper give an application the basic mechanism to be aware of the mobile computing environment.
References-found: 12

