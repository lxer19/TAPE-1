URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/tr.outbox/MIT-LCS-TR-605.ps.gz
Refering-URL: ftp://ftp-pubs.lcs.mit.edu/pub/lcs-pubs/listings/tr600.html
Root-URL: 
Title: A Timing Analysis and Optimization System for Level-Clocked Circuitry  
Author: by Marios Christos C. Papaefthymiou 
Degree: (1990) Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Doctor of Philosophy at the  All rights reserved. Author  Certified by Charles E. Leiserson Professor of Computer Science and Engineering Thesis Supervisor Accepted by Frederic R. Morgenthaler Chairman, Departmental Committee on Graduate Students  
Date: September 1993  August 28, 1993  
Address: (1988)  
Affiliation: B.S., Electrical Engineering California Institute of Technology  S.M., Electrical Engineering and Computer Science Massachusetts Institute of Technology  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1993.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> V. D. Agrawal. </author> <title> Synchronous path analysis in MOS circuit simulator. </title> <booktitle> In Proc. 19th Design Automation Conference, </booktitle> <pages> pages 629-635, </pages> <month> June </month> <year> 1982. </year>
Reference-contexts: Therefore, Step 4 correctly computes an optimally retimed G r . 1.5. RETIMING OF CIRCUITRY THAT INCLUDES NON-UNIT DELAYS 25 Opt-Retiming (G) 1 for each edge u e do w 0 (e) minfw (e); jV jd max g 2 Binary search <ref> [1; jV jd max ] </ref> for smallest integer n, fl n = dR (C fl (G 0 ))e such that G 0 d=n has no negative edge-weight cycles. 3 Binary search [n; n + d max 1] for smallest integer period that can be achieved by a retiming r of G. <p> OPTIMIZING EDGE-TRIGGERED CIRCUITRY Approx-Retiming (G) 1 for each edge u e do w 0 (e) minfw (e); jV jd max g 2 Binary search <ref> [1; jV jd max ] </ref> for smallest integer n, fl n = dR (C fl (G 0 ))e such that G 0 d=n has no negative edge-weight cycles. 3 for each vertex v 2 V do r (v) dlength of single-source shortest-path s ; v in G 0 d=ne 4 for <p> In Steps 1 and 2, the algorithm computes the maximum delay-to-registers ratio dR (C fl (G 0 ))e of the circuit G 0 = hV; E; d; w 0 i with w 0 (e) jV jd max . This ratio equals the smallest integer n in the interval <ref> [1; jV jd max ] </ref> of possible ratios that does not induce negative edge-weight cycles in the graph G 0 d=n = (V; E; w 0 d=n) with edge-weight w 0 (e) d (v)=n for each edge u ! v 2 E [25]. <p> Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis. <p> Unlike the simplified definition presented above, the definition of G CX from [20] makes reference to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers <ref> [1; 0; 1; 2; : : :] </ref>. The integer argument k and the integer result are indexes into the infinite sequence of maximal time intervals over which the clocks of the circuit maintain a constant value.
Reference: [2] <author> M. Blum, R. W. Floyd, V. Pratt, R. L. Rivest, and R. E. Tarjan. </author> <title> Time bounds for selection. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7(4) </volume> <pages> 448-461, </pages> <year> 1973. </year>
Reference-contexts: The computation of () in Step 1 requires O (V 2 E) time. Each iteration of the binary search in Step 2 requires O (V E + V 2 lg V ) time. Since the median of a set of n elements can be found in O (n) time <ref> [2, 10, 18] </ref>, and since the binary search halves the number of periods under consideration at each iteration, Step 2 completes in O (lg V ) X 2 i + O (V E + V 2 lg V ) = O (V 3 + (V E + V 2 lg V <p> Unlike the simplified definition presented above, the definition of G CX from [20] makes reference to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers <ref> [1; 0; 1; 2; : : :] </ref>. The integer argument k and the integer result are indexes into the infinite sequence of maximal time intervals over which the clocks of the circuit maintain a constant value.
Reference: [3] <author> T. Burks, K. Sakallah, and T. Mudge. </author> <title> Multiphase retiming using minT c . t 92 ACM Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </title> <month> March </month> <year> 1992. </year>
Reference-contexts: They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Algorithms for retiming single-phase, level-clocked circuitry have appeared in [52]. Retiming heuristics were given in <ref> [3] </ref>. Early versions of our work appear in [21, 46]. 2.2 Constraints for Proper Timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. <p> The concept of replacing each edge-triggered latch by a pair of back-to-back level-clocked latches, and then using retiming for speed optimization has been mentioned in <ref> [3, 21, 32] </ref>. The potential of level-clocking for reducing the number of storage elements has been mentioned in [32]. The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in [55].
Reference: [4] <author> J. J. Cherry. Pearl: </author> <title> a CMOS timing analyzer. </title> <booktitle> In Proc. 25th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 148-153, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Our Algorithm MPP for minimum clock period pipelining of combinational circuitry is illustrated in Figure 1-7. Step 1 of the algorithm computes the delay of the longest path v in ; v out in O (E) steps by traversing the vertices of G in topological sort order <ref> [5] </ref>. Step 2 binary searches an interval of d max + 1 integers for the minimum achievable clock period min (G). In each iteration of the search, the O (E)-time Algorithm MLP generates a pipelined circuit that achieves the clock period under consideration with the minimum possible latency. <p> Lemma 15 Algorithm TV terminates in O (V E) time. Proof. The circuit transformation of Step 1 can be computed in O (E) time. We can implement Step 2 to run in O (V E) time as follows. First, we compute in O (E) time a topological sort <ref> [5, Section 23.4] </ref> of all edges e 2 E with w (e) = 0. <p> Step 3 checks O (V 2 ) constraints in O (V 2 ) time. Finally, Step 4 can be performed in O (V E) time using the Bellman-Ford algorithm <ref> [5, Section 25.3] </ref>. Thus, the total running time of Algorithm TV is O (V E). 2 2.3. VERIFYING PROPER CIRCUIT TIMING 43 TV (G; ) 1. Modify G by replacing w (e) on each edge e 2 E with (w (e) mod 2) + 2 if w (e) 4. 2. <p> Lemma 21 Algorithm NCSA terminates in O (V E) time. Proof. The single-source shortest-paths problem in Step 1 and the single-destination shortest-paths problem in Step 2 can be solved in O (V E) time using the Bellman-Ford algorithm <ref> [5] </ref>. The minimization in Step 3 requires O (V ) time, and the minimization in Step 4 requires O (V 2 ) time. Therefore, the total running time of the algorithm is O (V E). 2 The following lemma proves the correctness of Algorithm NCSA. <p> It produces as output the minimum ffi (u) such that G is properly timed by if we decrease the propagation delay d (u) by ffi (u). V 2 lg V ) time using Johnson's algorithm <ref> [5] </ref>. The minimizations in Steps 2 and 4 require O (V 2 ) time. <p> Define R (v) for all v 2 V H as the length of a shortest (least-weight) path in H from v to t, which is well-defined if H contains no negative-weight cycles <ref> [5, Chapter 25] </ref>, a fact that we shall prove shortly. Assuming that H contains no negative-weight cycles, we can prove Inequalities (2.22), (2.23), and (2.24) by relying on the following basic inequality of shortest paths [5, Chapter 25]: for every edge u e ! v in E H . <p> in H from v to t, which is well-defined if H contains no negative-weight cycles <ref> [5, Chapter 25] </ref>, a fact that we shall prove shortly. Assuming that H contains no negative-weight cycles, we can prove Inequalities (2.22), (2.23), and (2.24) by relying on the following basic inequality of shortest paths [5, Chapter 25]: for every edge u e ! v in E H . <p> Proof. To compute the constraints in line 1 of the algorithm, we need to compute the shortest-paths between every pair of vertices in G. This computation can be performed in O (V E+V 2 lg V ) time using Johnson's algorithm for all-pairs shortest-paths <ref> [5, Section 26.3] </ref>. 66 CHAPTER 2. ANALYZING AND OPTIMIZING LEVEL-CLOCKED CIRCUITRY To implement the set Q , we can use a FIFO queue and a flag for each constraint that indicates whether the constraint is in the queue. <p> A fully polynomial-time approximation scheme <ref> [5] </ref> is an optimization algorithm that takes, in addition to its other input parameters, a parameter * &gt; 0 specifying a relative error. <p> Shortest-paths computations are repeatedly employed in almost all functions of Tim. We have implemented two single-source shortest-paths algorithms. The first is an algorithm by Bellman and Ford that runs in O (V E) time and solves the shortest-paths problem on graphs with real edge-weights <ref> [5] </ref>. We use this algorithm before all-pairs shortest-paths computations in order to compute graphs with identical shortest-paths and nonnegative edge-weights, because shortest-paths can be computed more efficiently on such graphs. The second shortest-paths algorithm that we have implemented is Dijkstra's algorithm for graphs with nonnegative edge-weights [5]. <p> graphs with real edge-weights <ref> [5] </ref>. We use this algorithm before all-pairs shortest-paths computations in order to compute graphs with identical shortest-paths and nonnegative edge-weights, because shortest-paths can be computed more efficiently on such graphs. The second shortest-paths algorithm that we have implemented is Dijkstra's algorithm for graphs with nonnegative edge-weights [5]. The running time of this algorithm depends on the implementation of the priority queue it employs. We tried three priority queues. The first one was a simple array, in which case the theoretical running time of the algorithm is O (V 2 ).
Reference: [6] <author> M. R. Dagenais and N. C. Rumin. </author> <title> Automatic determination of optimal clocking parameters in synchronous MOS VLSI circuits. </title> <booktitle> In Advanced Research in VLSI: Proc. of the 5th MIT Conference, </booktitle> <pages> pages 19-33, </pages> <year> 1988. </year>
Reference-contexts: We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies [9, 49, 57], or been uncharacterized with respect to worst-case running time <ref> [6, 51] </ref>. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. <p> Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [7] <author> G. B. Dantzig, W. O. Blattner, and M. R. Rao. </author> <title> Finding a cycle in a graph with minimum cost to time ratio with application to a ship routing problem. Theory of Graphs, 1967. </title> <editor> P. Rosenstiehl, editor, Dunod, Paris, and Gordon and Breach, </editor> <address> New York, </address> <pages> pp. 77-84. </pages>
Reference-contexts: This lower bound can be found by solving a "tramp steamer" problem. The tramp steamer problem (also known as the minimum cost-to-time ratio cycle problem) was formulated in <ref> [7] </ref> as follows.
Reference: [8] <author> S. Even and A. Litman. </author> <title> On the capabilities of systolic systems. </title> <booktitle> 3rd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: As a special case of these general bounds we have that the maximum delay-to-register ratio in any unit-delay circuit characterizes exactly the minimum clock period achievable by retiming. (The result for the special case of unit-delay circuitry has been claimed independently in <ref> [8] </ref>.) Our tight bounds yield asymptotically more efficient algorithms for several important problems related to retiming, such as minimum clock-period retiming, retiming for approximately minimum clock-period, and minimum clock-period pipelining. The remainder of this chapter is structured as follows.
Reference: [9] <author> J. P. Fishburn. </author> <title> Clock skew optimization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(7) </volume> <pages> 945-951, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [9, 49, 57] </ref>, or been uncharacterized with respect to worst-case running time [6, 51]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [10] <author> R. W. Floyd and R. L. Rivest. </author> <title> Expected time bounds for selection. </title> <journal> Communications of the ACM, </journal> <volume> 18(3) </volume> <pages> 165-172, </pages> <year> 1975. </year>
Reference-contexts: The computation of () in Step 1 requires O (V 2 E) time. Each iteration of the binary search in Step 2 requires O (V E + V 2 lg V ) time. Since the median of a set of n elements can be found in O (n) time <ref> [2, 10, 18] </ref>, and since the binary search halves the number of periods under consideration at each iteration, Step 2 completes in O (lg V ) X 2 i + O (V E + V 2 lg V ) = O (V 3 + (V E + V 2 lg V
Reference: [11] <author> M. Fredman and R. E. Tarjan. </author> <title> Fibonacci heaps and their uses in improved network optimization problems. </title> <booktitle> Proc. of the 25th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 338-346, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: We used this implementation in the beginning until we debugged our programs. The array was soon a limiting factor in the performance of our tool, and so we implemented two additional data structures: a Fibonacci heap <ref> [11] </ref> that yields an O (E +V lg V ) running time, and a binary heap that yields an O (E lg V ) running time.
Reference: [12] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM J. Computing, </journal> <month> October </month> <year> 1989. </year> <note> 123 124 BIBLIOGRAPHY </note>
Reference-contexts: This result improves the O (V E lg V ) bound from [31]. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph <ref> [12, 39] </ref>. In Section 1.5, we present algorithms for the general case, in which circuits include combinational logic blocks of non-unit delay. Specifically, Subsection 1.5.1 describes an O (V E lg d max )-time algorithm for minimum clock period retiming. <p> The shortest-paths lengths in Step 3 can also be computed in O (V 1=2 E lg V ) time, using an O (V 1=2 E lg (V W ))-time algorithm for shortest-paths by Gabow and Tarjan <ref> [12] </ref>. <p> Gabow and Tarjan have given an O (V 1=2 E lg (V W ))-time algorithm for the single-source shortest-paths problem, where W is the maximum edge-weight in the graph <ref> [12] </ref>. Thus, the binary search in Step 2 can be performed in O (V 1=2 E lg 2 (V d max )) time, since w 0 (e) jV jd max for every edge e 2 E. <p> Steps 2 and 3 complete in O (V 1=2 E lg 2 (V d max )) time, since negative edge-weight cycles can be detected in O (V 1=2 E lg (V d max )) time using the single-source shortest-paths algorithm by Gabow and Tarjan <ref> [12] </ref>.
Reference: [13] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: This contradiction completes the proof. 2 The set of constraints defined in Lemma 30 form a mixed-integer linear programming problem. Although mixed-integer linear programming is in general NP-hard <ref> [13] </ref>, the simple form of the constraints in the lemma allows the problem to be solved efficiently. In particular, Inequalities (2.21), (2.22), (2.23), and (2.24) constitute a mixed-integer linear programming problem of the following form. <p> this definition of DD (u; v; i) for efficieny reasons: computing DD (u; v; i) as defined requires O (V 2 E) steps, whereas computing DD (u; v; i) over simple paths is an intractable problem, since even finding a simple path with any given number of edges is intractable <ref> [13] </ref>. It is straightforward to verify, however, that no incorrect or redundant constraints are generated when DD (u; v; i) is defined as in Equation (2.35). If DD (u; v; i) is attained for a simple path, then Inequality (2.34) is one of the constraints defined by Inequality (2.33).
Reference: [14] <author> L. A. Glasser and D. W. Dobberpuhl. </author> <title> The Design and Analysis of VLSI Circuits. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: of time between a falling edge of the first phase and the next rising edge of the second phase, which generally must be long enough to overcome various engineering constraints, such as setup and hold times, the nonzero durations required for clock signals to rise and fall, and clock skew <ref> [14, 58] </ref>. The duty cycle and gap of the second phase are, similarly, denoted by 1 and fl 1 , respectively. The ratio = 1 = 0 is the duty ratio of the clocking scheme. <p> In this chapter we give an efficient algorithm to verify the proper timing of circuits that employ two-phase clocking schemes, and we present several other algorithms for optimizing their clock periods. Since an edge-triggered latch can be implemented by two back-to-back level-clocked latches <ref> [14] </ref> our algorithms also provide an automatic way to take edge-triggered circuits and transform them into faster level-clocked ones. At the end of this chapter, we generalize most of our algorithms to level-clocked circuits that employ more than two clock phases. <p> first step of this procedure was to replace each edge-triggered latch by a pair of back-to-back level-clocked latches that are clocked by a two-phase, nonoverlapping clocking scheme, as shown in Figure 4-1. (In fact, it is common in VLSI to implement edge-triggered latches by a pair of back-to-back level-clocked latches <ref> [14, 58] </ref>.) The two-phase circuit that results after this conversion has the same clock period and the same number of storage elements as the original edge-triggered circuit, assuming that each edge-triggered latch counts as two level-clocked latches.
Reference: [15] <author> M. D. Grigoriadis. </author> <title> An efficient implementation of the network simplex method. </title> <journal> Mathematical Programming Study, </journal> <volume> 26 </volume> <pages> 83-111, </pages> <year> 1986. </year>
Reference-contexts: The practical efficiency of the latch count minimization algorithm will possibly improve by using a simplex-based algorithm to solve the minimum-cost flow problem. Even though simplex-based algorithms for minimum-cost flow are not guaranteed to run in polynomial time, they have been shown to perform particularly well in practice <ref> [15] </ref>. Another operation in Tim with potential for easy improvement is retiming with symmetric clocking schemes. The current implementation of Tim employs the general retiming algorithm Retime even when the clocking schemes are symmetric.
Reference: [16] <author> M. Hartmann and J. Orlin. </author> <title> Finding minimum cost to time ratio cycles with small integral transit times. </title> <type> Technical Report UNC/OR/TR/91-19, </type> <institution> University of North Carolina, Chapel Hill, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: If t (e) 0 for all e 2 E, then the algorithm from <ref> [16] </ref> can solve the tramp steamer problem in O (T E) time, where T = u2V maxft (e) : u e The following lemma relates the constraints determined by Inequality (2.8) to the tramp steamer problem. <p> By Inequality (2.8), we have d (c) (w (c)=2), and hence w (c) P P = 2 e2c s (e) e2c t (e) The proof for the other direction of the claim is similar. Using the algorithm for the tramp steamer problem given in <ref> [16] </ref>, the cycle constraints can be checked in O (V E) time. In order to obtain this running time, we must guarantee that the transit time of any path with jV j edges is O (V ).
Reference: [17] <author> R. B. Hitchcock. </author> <title> Timing verification and the timing analysis program. </title> <booktitle> In Proc. 19th Design Automation Conference, </booktitle> <pages> pages 594-604, </pages> <month> June </month> <year> 1982. </year>
Reference: [18] <author> C. A. R. Hoare. </author> <title> Algorithm 63 (partition) and algorithm 65 (find). </title> <journal> Communications of the ACM, </journal> <volume> 4(7) </volume> <pages> 321-322, </pages> <year> 1961. </year>
Reference-contexts: The computation of () in Step 1 requires O (V 2 E) time. Each iteration of the binary search in Step 2 requires O (V E + V 2 lg V ) time. Since the median of a set of n elements can be found in O (n) time <ref> [2, 10, 18] </ref>, and since the binary search halves the number of periods under consideration at each iteration, Step 2 completes in O (lg V ) X 2 i + O (V E + V 2 lg V ) = O (V 3 + (V E + V 2 lg V
Reference: [19] <author> A. T. Ishii. </author> <title> Timing in Level-Clocked Circuits. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> November </month> <year> 1991. </year> <note> Available as MIT/LCS/TR-522. </note>
Reference-contexts: Each latch is clocked either by 0 or 1 . A general framework for the timing verification of level-clocked circuits appears in <ref> [19, 20] </ref>. An example of a two-phase, level-clocked circuit is shown in Figure 2-2 (a). The integers in the vertices signify propagation delays. <p> This notion of proper timing is "structural", in the sense that we require that a circuit operate correctly regardless of the functions computed by the functional elements. This requirement avoids potential difficulties with computational intractability. The semantics of proper timing are studied in <ref> [19] </ref>. Ishii and Leiserson [20] give a set of "-constraints" that serve as necessary and sufficient conditions for the proper timing of a general class of level-clocked circuits. For two-phase circuits, this general formulation reduces to a much simpler set of necessary and sufficient conditions.
Reference: [20] <author> A. T. Ishii and C. E. Leiserson. </author> <title> A timing analysis of level-clocked circuitry. </title> <booktitle> In Advanced Research in VLSI: Proc. of the Sixth MIT Conference, </booktitle> <pages> pages 113-130. </pages> <publisher> MIT Press, </publisher> <month> April </month> <year> 1990. </year>
Reference-contexts: Each latch is clocked either by 0 or 1 . A general framework for the timing verification of level-clocked circuits appears in <ref> [19, 20] </ref>. An example of a two-phase, level-clocked circuit is shown in Figure 2-2 (a). The integers in the vertices signify propagation delays. <p> We give an O (V E)-time algorithm that verifies whether a level-clocked circuit is properly timed by a given two-phase clocking scheme. This result improves the O (E 2 ) bound obtained when the general algorithm from <ref> [20] </ref> is applied to the special case of two-phase, level-clocked circuits. (The bound in [20] is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. <p> This result improves the O (E 2 ) bound obtained when the general algorithm from <ref> [20] </ref> is applied to the special case of two-phase, level-clocked circuits. (The bound in [20] is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. Translating to the model presented here yields the O (E 2 ) bound. The algorithm in [20] applies to more general circuits and <p> two-phase, level-clocked circuits. (The bound in <ref> [20] </ref> is also O (V E), but the circuit model used in that paper represented both functional elements and latches as vertices, and interconnections between them as edges. Translating to the model presented here yields the O (E 2 ) bound. The algorithm in [20] applies to more general circuits and timing 2.1. INTRODUCTION 35 0 and 1 are equal, as is shown in part (e) of the figure, the clock period of circuit (a) cannot be made smaller than 36. <p> The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied. We then precisely characterize the timing constraints that need to be satisfied by a properly timed circuit. These constraints are based on the general formulation from <ref> [20] </ref>, but they are substantially simpler due to the additional structure inherent in two-phase, level-clocked circuits. Since we represent circuits in terms of graphs, we first define some graph notations. <p> This notion of proper timing is "structural", in the sense that we require that a circuit operate correctly regardless of the functions computed by the functional elements. This requirement avoids potential difficulties with computational intractability. The semantics of proper timing are studied in [19]. Ishii and Leiserson <ref> [20] </ref> give a set of "-constraints" that serve as necessary and sufficient conditions for the proper timing of a general class of level-clocked circuits. For two-phase circuits, this general formulation reduces to a much simpler set of necessary and sufficient conditions. <p> Figure 2-4 gives an O (V E)- time algorithm TV for the timing verification problem. This bound improves the O (E 2 ) bound that one obtains by applying the general verification algorithm in <ref> [20] </ref> to two-phase circuits. We analyze the running time of Algorithm TV and then prove its correctness. We first prove a bound on the running time of Algorithm TV. Lemma 15 Algorithm TV terminates in O (V E) time. Proof. <p> Nonsimple multiphase circuits also exhibit many subtleties. A path in such circuits may pass through latches in an arbitrary order, rather than the canonical order assumed in a simple multiphase circuit. Though the proper timing of such circuits can be verified using the analysis and algorithms from <ref> [20] </ref>, the timing optimization of such circuits is possibly more complex. Whether these problems have efficient solutions is a topic for further research. <p> Appendix A A.1 Constraints for Proper Timing In this appendix we prove Proposition 13, the fundamental premise of the algorithms in this thesis. The proof relies on <ref> [20] </ref>, and a complete understanding of the proof requires familiarity with the material in that paper. For convenience, however, we give a brief description of the notions of "computational expansions," "proper timing," and "-constraints" that are the basis of the proof. In this appendix, we adopt the circuit representation of [20]. <p> <ref> [20] </ref>, and a complete understanding of the proof requires familiarity with the material in that paper. For convenience, however, we give a brief description of the notions of "computational expansions," "proper timing," and "-constraints" that are the basis of the proof. In this appendix, we adopt the circuit representation of [20]. In that representation, a circuit is a graph G = hV; Ei, where each vertex v 2 V represents either a functional element or a level-clocked latch, and each functional element and level-clocked latch is represented by a distinct element of V . <p> We generally denote by v t a copy of v 2 V that exists due to a change in the output of v, that is caused by a clock transition that occurs at time t. The results of <ref> [20] </ref> are based on the observation that there exists a strong correlation between the operation of G and the operation of the corresponding computational expansion G CX . <p> Furthermore, each v t 2 V CX has associated with it an up-time of t and a down-time of t + (v) . This definition of G CX differs from the definition that appears in <ref> [20] </ref>. The two definitions are equivalent for two-phase circuits, however, as we show later in Lemma 56. <p> Intuitively, a level-clocked circuit is properly timed if whenever a latch holds a value (i.e., whenever its clock input is Low), it holds the same value it would in an identical circuit in which all functional elements have zero propagation delay. Ishii and Leiserson <ref> [20] </ref> show that a level-clocked circuit is properly timed if and only if its computational expansion is properly timed. <p> Conversely, they show that if, for all paths between latches in the computational expansion, the propagation time does not exceed this "up-to-down" time, then the circuit is properly timed (see Theorem 4.1 of <ref> [20] </ref>). The infinite set of linear inequalities that compare up-to-down times with propagation delays is called the set of -constraints for the circuit. <p> Proof. Since there is a one-to-one correspondence between circuit components in a two-phase, level-clocked circuit and vertices in the graph representation from <ref> [20] </ref>, and t (p) is exactly equal to the value denoted by the expression "t 00 t" in Lemma 55, the proposition follows from Lemma 55 and Theorem 4.1 from [20]. 2 All that remains to be shown is that the definition of G CX is, in fact, equivalent to the <p> there is a one-to-one correspondence between circuit components in a two-phase, level-clocked circuit and vertices in the graph representation from <ref> [20] </ref>, and t (p) is exactly equal to the value denoted by the expression "t 00 t" in Lemma 55, the proposition follows from Lemma 55 and Theorem 4.1 from [20]. 2 All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [20]. Unlike the simplified definition presented above, the definition of G CX from [20] makes reference to a base-step function b B <p> value denoted by the expression "t 00 t" in Lemma 55, the proposition follows from Lemma 55 and Theorem 4.1 from <ref> [20] </ref>. 2 All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [20]. Unlike the simplified definition presented above, the definition of G CX from [20] makes reference to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers [1; 0; 1; 2; : : :]. <p> follows from Lemma 55 and Theorem 4.1 from <ref> [20] </ref>. 2 All that remains to be shown is that the definition of G CX is, in fact, equivalent to the definition of the computational expansion that appears in [20]. Unlike the simplified definition presented above, the definition of G CX from [20] makes reference to a base-step function b B that maps pairs (v; k), where v 2 V and k = 1; 0; 1; 2; : : :, to the integers [1; 0; 1; 2; : : :]. <p> If b B (v; i) &lt; i, then the value output by v changes because of a clock transition that occured at a step earlier than i. Given a circuit G = hV; Ei, the computational expansion <ref> [20] </ref> is defined to be hV CX ; E CX i, where V CX = fv k : v 2 V and b B (v; k) = kg, and 8 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; <p> The definition is somewhat complex, due to the fact that the definition from <ref> [20] </ref> applies to a more general class of circuits. The following lemma shows, however, that for two-phase, level-clocked circuits, this definition is equivalent to the definition presented in the beginning of this appendix.
Reference: [21] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Advanced Research in VLSI and Parallel Systems: Proc. of the 1992 Brown/MIT Conference. </booktitle> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Algorithms for retiming single-phase, level-clocked circuitry have appeared in [52]. Retiming heuristics were given in [3]. Early versions of our work appear in <ref> [21, 46] </ref>. 2.2 Constraints for Proper Timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied. <p> The concept of replacing each edge-triggered latch by a pair of back-to-back level-clocked latches, and then using retiming for speed optimization has been mentioned in <ref> [3, 21, 32] </ref>. The potential of level-clocking for reducing the number of storage elements has been mentioned in [32]. The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in [55]. <p> A similar pattern is revealed for almost all of our test circuits. This phenomenon can be justified as follows. The maximum delay-to-register ratio R is a lower bound on the clock period of both the edge-triggered and the level-clocked circuit <ref> [21, 43] </ref>. Consequently, the longest combinational delay in the circuits is at least R under any transformation that does not change the number of latches around the cycles in the circuit.
Reference: [22] <author> A. T. Ishii, C. E. Leiserson, and M. C. Papaefthymiou. </author> <title> Polynomial algorithms for optimizing two-phase, </title> <address> level-clocked circuitry. </address> <year> 1992. </year> <type> Unpublished Manuscript. </type>
Reference: [23] <author> N. P. Jouppi. </author> <title> Timing analysis for NMOS VLSI. </title> <booktitle> In Proc. 20th Design Automation Conference, </booktitle> <pages> pages 411-418, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [24] <author> R. M. Karp. </author> <title> A characterization of the minimum cycle mean in a digraph. </title> <journal> Discrete Mathematics, </journal> <volume> 23 </volume> <pages> 309-311, </pages> <year> 1978. </year>
Reference: [25] <author> E. L. Lawler. </author> <title> Combinatorial Optimization, Networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [25, 41] </ref>, and provides a method for solving Problem DC. <p> Theorem 2 implies that a retimed circuit with clock period no greater than c can be computed in O (V 3 ) steps by applying the O (V E)-time shortest-paths algorithm by Bellman and Ford <ref> [25, page 74] </ref> on the dense constraint graph G c . <p> equals the smallest integer n in the interval [1; jV jd max ] of possible ratios that does not induce negative edge-weight cycles in the graph G 0 d=n = (V; E; w 0 d=n) with edge-weight w 0 (e) d (v)=n for each edge u ! v 2 E <ref> [25] </ref>. Step 3 of the algorithm binary searches the integers in the interval [dR (C fl (G 0 ))e ; dR (C fl (G 0 ))e + d max 1] for the minimum achievable clock period min (G). <p> Algorithm Opt-Retiming runs in O (V E lg d max ) time. Step 1 completes in O (E) time. Negative-weight cycles in Step 2 can be detected by solving a single-source shortest-paths problem on the edge-weighted graph G 0 d=n <ref> [25] </ref>. Gabow and Tarjan have given an O (V 1=2 E lg (V W ))-time algorithm for the single-source shortest-paths problem, where W is the maximum edge-weight in the graph [12].
Reference: [26] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees and Hypercubes. </title> <publisher> Morgan Kaufman, </publisher> <year> 1992. </year>
Reference: [27] <author> C. E. Leiserson. </author> <title> Area-efficient VLSI Computation. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1981. </year> <title> Published in book form by the MIT Press, </title> <address> Cambridge, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: Chapter 1 Optimizing Edge-Triggered Circuitry 1.1 Introduction This chapter describes algorithms for optimizing edge-triggered circuitry, that is, synchronous circuits built of functional elements and globally clocked registers. Retiming, which was introduced in <ref> [27, 28, 29] </ref> and treated in [31], is a well-known design automation technique which transforms a given edge-triggered circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. A highlight of the research presented in this chapter is the asymptotically fastest algorithm known to date for retiming unit-delay circuitry. We model a synchronous circuit according to <ref> [27, 28, 29] </ref> by a circuit graph G = hV; E; d; wi. A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v.
Reference: [28] <author> C. E. Leiserson, F. M. Rose, and J. B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> 3rd Caltech Conference on VLSI, </booktitle> <year> 1983. </year> <editor> R. Bryant, </editor> <publisher> ed., </publisher> <pages> pp. 87-116. BIBLIOGRAPHY 125 </pages>
Reference-contexts: Chapter 1 Optimizing Edge-Triggered Circuitry 1.1 Introduction This chapter describes algorithms for optimizing edge-triggered circuitry, that is, synchronous circuits built of functional elements and globally clocked registers. Retiming, which was introduced in <ref> [27, 28, 29] </ref> and treated in [31], is a well-known design automation technique which transforms a given edge-triggered circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. A highlight of the research presented in this chapter is the asymptotically fastest algorithm known to date for retiming unit-delay circuitry. We model a synchronous circuit according to <ref> [27, 28, 29] </ref> by a circuit graph G = hV; E; d; wi. A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v. <p> Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [28, 29, 31, 33, 45] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [52]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming. <p> The second step of the procedure was to use the "retiming" transformation to relocate the storage elements of the two-phase circuit that resulted from the first step. Retiming relocates storage elements in both edge-triggered and level-clocked circuitry without changing its functionality <ref> [28, 29, 31] </ref>. In addition, retiming is a "universal" transformation for speeding up circuits, in the sense that any other functionality-preserving transformation that did better than retiming would depend on the functionality of the gates in the circuit [29].
Reference: [29] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing synchronous systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <year> 1983. </year>
Reference-contexts: Chapter 1 Optimizing Edge-Triggered Circuitry 1.1 Introduction This chapter describes algorithms for optimizing edge-triggered circuitry, that is, synchronous circuits built of functional elements and globally clocked registers. Retiming, which was introduced in <ref> [27, 28, 29] </ref> and treated in [31], is a well-known design automation technique which transforms a given edge-triggered circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> We exploit these bounds to obtain asymptotically improved algorithms for several important problems related to retiming. A highlight of the research presented in this chapter is the asymptotically fastest algorithm known to date for retiming unit-delay circuitry. We model a synchronous circuit according to <ref> [27, 28, 29] </ref> by a circuit graph G = hV; E; d; wi. A vertex v 2 V corresponds to a functional element of the circuit, and an edge u e ! v 2 E corresponds to a wire between the functional elements u and v. <p> Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [28, 29, 31, 33, 45] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [52]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming. <p> RETIMING WITH SYMMETRIC CLOCKING SCHEMES 55 a symmetric clocking scheme = h; fl; ; fli, compute a retiming of G which is properly timed by , or else determine that no such retiming exists. Like several previous retiming algorithms <ref> [29, 52] </ref>, our algorithm casts retiming for a symmetric clocking scheme as a mixed-integer linear program. The retiming transformation relocates the latches in a circuit G without changing the functionality of the circuit. <p> The second step of the procedure was to use the "retiming" transformation to relocate the storage elements of the two-phase circuit that resulted from the first step. Retiming relocates storage elements in both edge-triggered and level-clocked circuitry without changing its functionality <ref> [28, 29, 31] </ref>. In addition, retiming is a "universal" transformation for speeding up circuits, in the sense that any other functionality-preserving transformation that did better than retiming would depend on the functionality of the gates in the circuit [29]. <p> In addition, retiming is a "universal" transformation for speeding up circuits, in the sense that any other functionality-preserving transformation that did better than retiming would depend on the functionality of the gates in the circuit <ref> [29] </ref>. Figure 4-2 illustrates the retiming operation for a gate in a circuit. Observe that retiming can change the clock period as well as the number of storage elements in a circuit.
Reference: [30] <author> C. E. Leiserson and J. B. Saxe. </author> <title> A mixed-integer programming problem which is efficiently solvable. </title> <journal> Journal of Algorithms, </journal> <volume> 9 </volume> <pages> 114-128, </pages> <year> 1988. </year>
Reference-contexts: (i; j) for all (i; j) 2 E, and that x i 2 Z for all i 2 V I , or determine that no feasible vector exists. 2 Problem MI can be solved in O (V E + V 2 lg V ) time by applying Algorithm MILP from <ref> [30] </ref>. Thus, we obtain the following theorem. <p> It produces as output a retiming r such that G r is properly timed by , or else it determines that no such retiming is possible. Proof. Algorithm RwSCS in Figure 2-9 solves the retiming problem with symmetric phases. It simply applies Algorithm MILP from <ref> [30] </ref> to the constraints in Lemma 30. <p> constraints described by Inequalities (2.21), (2.22), (2.23), and (2.24): r (u) r (v) w (e) for all u ! v 2 E R (u) R (v) w (e) k e r (v) R (v) k As with the two-phase constraints, these constraints can be solved using the algorithm MILP from <ref> [30] </ref>. Retiming (with arbitrary clocking schemes). Even when clock phases are not symmetric, we can retime to achieve a given simple k-phase clocking scheme in O (kV 3 ) time. For simple multiphase circuits, inequalities analogous to Inequalities (2.29) and (2.30) can be formulated as simple summations.
Reference: [31] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Retiming synchronous circuitry. </title> <journal> Algorithmica, </journal> <volume> 6(1), </volume> <year> 1991. </year> <note> Also available as MIT/LCS/TM-372. </note>
Reference-contexts: Chapter 1 Optimizing Edge-Triggered Circuitry 1.1 Introduction This chapter describes algorithms for optimizing edge-triggered circuitry, that is, synchronous circuits built of functional elements and globally clocked registers. Retiming, which was introduced in [27, 28, 29] and treated in <ref> [31] </ref>, is a well-known design automation technique which transforms a given edge-triggered circuit into a faster circuit, that is, one with a shorter clock period, by relocating the registers of the given circuit while preserving its functionality. <p> In Section 1.4, we give an O (V 1=2 E lg V )-time algorithm that retimes any unit-delay circuit to achieve the minimum possible clock period min (G). This result improves the O (V E lg V ) bound from <ref> [31] </ref>. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph [12, 39]. <p> Assuming that the maximum propagation delay d max of the circuit components grows subpolynomially with the size of the circuit, our algorithm is asymptotically more efficient than the previously known schemes <ref> [31] </ref>. Subsection 1.5.2 presents an O (V 1=2 E lg 2 (V d max ))-time procedure for retim-ing a circuit with a clock period that does not exceed the minimum by more than an additive factor of d max 1. <p> This result improves the O (V E lg V ) bound that can be obtained by applying the general algorithms from <ref> [31] </ref>, and it is optimal within a constant multiplicative factor for circuitry with unit-delay functional elements. 1.2 Retiming and Shortest Paths In this section we define some notation and terminology needed in this chapter. We formulate retiming according to [31] as a set of difference constraints, and we introduce the notion <p> bound that can be obtained by applying the general algorithms from <ref> [31] </ref>, and it is optimal within a constant multiplicative factor for circuitry with unit-delay functional elements. 1.2 Retiming and Shortest Paths In this section we define some notation and terminology needed in this chapter. We formulate retiming according to [31] as a set of difference constraints, and we introduce the notion of the constraint graph. Finally, we exhibit the relation between retiming and the existence of single-source shortest-paths in the constraint graph. <p> There are potentially O (V 2 ) inequalities of the form (1.2), one for each pair of vertices in G, and they can be computed in O (V E + V 2 lg V ) steps <ref> [31] </ref>. The constraints (1.1) and (1.2) in Theorem 1 are linear inequalities involving only differences of the unknowns r (v). Therefore, the retiming problem can be expressed in the following general form. <p> An asymptotically faster algorithm which runs in O (V E) time appears in <ref> [31] </ref>. 1.3 Characterization of Minimum Clock Period min (G) 1.3.1 Bounds on min (G) In this section we characterize the minimum clock period min (G) that can be obtained by retiming a given circuit G = hV; E; d; wi in terms of the maximum delay-to-register ratio of the cycles in <p> optimal retiming of G 0 , since a retiming that achieves a given clock period c can be computed for any unit-delay circuit G by rounding-up the shortest-paths lengths in the graph G 1=c = (V; E; w 1=c) with edge-weight w (e) 1=c for each edge e 2 E <ref> [31] </ref>. Now, since w 0 (e) w (e) for every edge e 2 E, a retiming of G 0 with clock period (G 0 r ) is also a retiming of G with clock period (G r ) = (G 0 r ). <p> An O (V E lg V )-time algorithm that binary searches the O (V 2 )-size set of all possible clock periods for the minimum feasible one appears in <ref> [31] </ref>. Our procedure binary searches an interval with only d max possible clock periods, and it is more efficient than that in [31], assuming that d max grows subpolynomially with respect to the number of functional elements in the circuit. 1 This W should not be confused with W (u; v) <p> O (V E lg V )-time algorithm that binary searches the O (V 2 )-size set of all possible clock periods for the minimum feasible one appears in <ref> [31] </ref>. Our procedure binary searches an interval with only d max possible clock periods, and it is more efficient than that in [31], assuming that d max grows subpolynomially with respect to the number of functional elements in the circuit. 1 This W should not be confused with W (u; v) in Theorem 1. 26 CHAPTER 1. <p> Thus, the binary search in Step 2 can be performed in O (V 1=2 E lg 2 (V d max )) time, since w 0 (e) jV jd max for every edge e 2 E. Step 3 utilizes the O (V E) retiming algorithm by Leiserson and Saxe <ref> [31] </ref> to test whether a potential clock period is feasible. Thus, a retiming that achieves min (G) is computed in O (V E lg d max ) time, and the optimally retimed circuit is computed in Step 4 in O (E) time. <p> Our result improves the O (V E lg V ) bound that can be obtained by applying the general retiming algorithm from <ref> [31] </ref>, and it is optimal within a constant multiplicative factor for unit-delay circuitry. In contrast to the algorithm in [31] that computes all possible clock periods, our algorithm exploits the special structure of a combinational circuit to identify an interval of d max integers that contains the optimal period. <p> Our result improves the O (V E lg V ) bound that can be obtained by applying the general retiming algorithm from <ref> [31] </ref>, and it is optimal within a constant multiplicative factor for unit-delay circuitry. In contrast to the algorithm in [31] that computes all possible clock periods, our algorithm exploits the special structure of a combinational circuit to identify an interval of d max integers that contains the optimal period. <p> Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [28, 29, 31, 33, 45] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [52]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming. <p> With precharged gates, retiming and clock tuning still have efficient algorithmic solutions, but there are many subtleties that arise in the formulation of the constraints. The incorporation of functional elements where the propagation delay may differ for different input-output pairs (the "nonuniform propagation delay" model from <ref> [31] </ref>) changes the time complexities of our algorithms, but the essential algorithms remain unchanged. When minimum propagation delays (sometimes called "contamination" delays) are incorporated in the model, the output of a functional element does not become invalid until some specified minimum amount of time after an input changes. <p> TIM: A TIMING PACKAGE FOR LEVEL-CLOCKED CIRCUITRY Our implementation works on a modified circuit graph that takes into account latch sharing. The construction of this graph is identical to the construction presented in <ref> [31] </ref> for retiming of edge-triggered circuitry. <p> The second step of the procedure was to use the "retiming" transformation to relocate the storage elements of the two-phase circuit that resulted from the first step. Retiming relocates storage elements in both edge-triggered and level-clocked circuitry without changing its functionality <ref> [28, 29, 31] </ref>. In addition, retiming is a "universal" transformation for speeding up circuits, in the sense that any other functionality-preserving transformation that did better than retiming would depend on the functionality of the gates in the circuit [29].
Reference: [32] <author> B. Lockyear and C. Ebeling. </author> <title> Optimal retiming of multi-phase, </title> <booktitle> level-clocked circuits. In Advanced Research in VLSI and Parallel Systems: Proc. of the 1992 Brown/MIT Conference. </booktitle> <publisher> MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: Appendix A.1 provides a proof that the conditions we give for the proper timing of a two-phase, level-clocked circuit are correct. 2.2. CONSTRAINTS FOR PROPER TIMING 39 In independent work, Lockyear and Ebeling <ref> [32] </ref> have also obtained algorithms for re-timing multiphase, level-clocked circuits. Their results include a polynomial-time algorithm for the symmetric retiming problem. They use this algorithm as a subroutine to solve the retiming and symmetric tuning problem. <p> The approximation scheme for the simultaneous clock tuning and retiming of two-phase circuits can also be generalized, but the resulting polynomial running time is impractically large. Some of the results in this section are similar to results obtained independently by Lockyear and Ebeling <ref> [32] </ref>. <p> The concept of replacing each edge-triggered latch by a pair of back-to-back level-clocked latches, and then using retiming for speed optimization has been mentioned in <ref> [3, 21, 32] </ref>. The potential of level-clocking for reducing the number of storage elements has been mentioned in [32]. The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in [55]. <p> The concept of replacing each edge-triggered latch by a pair of back-to-back level-clocked latches, and then using retiming for speed optimization has been mentioned in [3, 21, 32]. The potential of level-clocking for reducing the number of storage elements has been mentioned in <ref> [32] </ref>. The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in [55]. Retiming for speed has been studied in the context of single-phase level-clocked circuits in [52].
Reference: [33] <author> S. Malik, E. Sentovich, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming and resynthesis: Optimizing sequential networks with combinational techniques. </title> <booktitle> In Proc. of the Hawaii International Conference on System Sciences, </booktitle> <year> 1990. </year>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [28, 29, 31, 33, 45] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [52]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming.
Reference: [34] <author> T. M. McWilliams. </author> <title> Verification of timing constraints on large digital systems. </title> <booktitle> In Proc. 17th Design Automation Conference, </booktitle> <pages> pages 139-147, </pages> <month> June </month> <year> 1980. </year>
Reference: [35] <author> C. A. Mead and L. A. Conway. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1980. </year>
Reference-contexts: In order to avoid problems with race conditions, it is common for level-clocked circuits to adopt clocking disciplines which involve multiple clock waveforms, or "phases". In a two-phase clocking scheme <ref> [35] </ref>, two clocking waveforms, or phases, denoted 0 and 1 , are employed, as is shown in Figure 2-1. Formally, we denote a two-phase clocking scheme by a 4-tuple = h 0 ; fl 0 ; 1 ; fl 1 i of strictly positive real numbers.
Reference: [36] <author> N. Megiddo. </author> <title> Linear programming in linear time when the dimension is fixed. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 31(1):114 - 127, </volume> <year> 1984. </year>
Reference-contexts: ANALYZING AND OPTIMIZING LEVEL-CLOCKED CIRCUITRY techniques [41]. If the number of phases is assumed to be fixed, then the problem can be solved in O (kV 2 ) steps, that is, in a number of steps proportional to the number of constraints for proper timing <ref> [36] </ref>. Certain special cases can be handled without resorting to general linear programming. For example, a circuit with a three-phase, nonoverlapping clock can be tuned in O (V E) time using the three-dimensional linear programming algorithm of Megiddo [37]. Retiming with symmetric clocking schemes.
Reference: [37] <author> N. Megiddo. </author> <title> Partitioning with two lines in the plane. </title> <journal> Journal of Algorithms, </journal> <volume> 6:430 - 433, </volume> <year> 1985. </year>
Reference-contexts: By linear programming theory [41], the optimal clock period fl can be obtained at a point ( fl 0 ; fl ) corresponding to the intersection of these O (V ) constraints. Megiddo's algorithm <ref> [37] </ref> can solve such a two-dimensional linear program in O (V ) time. Alternatively, one can first compute the O (V 2 ) intersections among Inequalities (2.13) and (2.14), 0 0, and fl 0 fl 1 0 0 (the nonhorizontal constraints). <p> Certain special cases can be handled without resorting to general linear programming. For example, a circuit with a three-phase, nonoverlapping clock can be tuned in O (V E) time using the three-dimensional linear programming algorithm of Megiddo <ref> [37] </ref>. Retiming with symmetric clocking schemes. When clock phases are symmetric, simple k-phase circuits can be retimed to achieve a given clock period in O (V E + V 2 lg V ) time, independent of k.
Reference: [38] <author> J. B. Orlin. </author> <title> A faster strongly polynomial minimum cost flow algorithm. </title> <booktitle> Proc. of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 377-387, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: for every pair of vertices u; v 2 V such that u e ! v and there exists an I/O latch on the wire e. 3.4.5 Retiming for Minimum Latch Count Tim's retiming algorithm for minimum latch count is an implementation of Orlin's capacity scaling algorithm for computing minimum-cost flows <ref> [38] </ref>, and it terminates in O (V 3 ) steps. 98 CHAPTER 3. TIM: A TIMING PACKAGE FOR LEVEL-CLOCKED CIRCUITRY Our implementation works on a modified circuit graph that takes into account latch sharing.
Reference: [39] <author> J. B. Orlin and R. K. Ahuja. </author> <title> New scaling algorithms for the assignment and minimum cycle mean problem. </title> <type> Technical Report 2019-88, </type> <institution> MIT Sloan School of Management, </institution> <year> 1988. </year>
Reference-contexts: This result improves the O (V E lg V ) bound from [31]. Our algorithm is based on the exact characterization of min (G) as well as on scaling algorithms for finding single-source shortest-paths and the minimum cycle-mean in a graph <ref> [12, 39] </ref>. In Section 1.5, we present algorithms for the general case, in which circuits include combinational logic blocks of non-unit delay. Specifically, Subsection 1.5.1 describes an O (V E lg d max )-time algorithm for minimum clock period retiming. <p> Ahuja and Orlin <ref> [39] </ref> have presented an algorithm for computing the minimum cycle-mean of a graph in O (V 1=2 E lg (V W )) steps, where W is the maximum edge-weight in the graph. 1 Since w 0 (e) jV j for every edge e 2 E, we can use this algorithm in
Reference: [40] <author> J. K. Ousterhout. </author> <title> Switch-level timing verifier for digital MOS VLSI. </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> CAD-4:336-349, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [41] <author> C. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: Determine a set of integer feasible values for the unknowns x (u) or determine that no such set exists. 2 The following theorem is classic in the field of combinatorial optimization <ref> [25, 41] </ref>, and provides a method for solving Problem DC. <p> Thus, all the constraints can be phrased as linear inequalities in 0 and , as is shown in Figure 2-8. By linear programming theory <ref> [41] </ref>, the optimal clock period fl can be obtained at a point ( fl 0 ; fl ) corresponding to the intersection of these O (V ) constraints. Megiddo's algorithm [37] can solve such a two-dimensional linear program in O (V ) time. <p> Theorem 42 The retiming problem for minimum latch count can be solved in O (V 3 lg V ) time. Proof. The retiming problem for minimum latch count is reduced to the dual of an un-capacitated minimum-cost flow problem <ref> [41] </ref> on the graph defined by Inequalities (2.19) and (2.20). The cost of each edge equals the right-hand side of the corresponding inequality. The demand/supply of each vertex v equals the difference between the number of edges coming into v and the number of edges coming out of v. <p> Linear programming still suffices to solve the problem, however. Each i becomes a variable in a linear program, which can be solved with standard 90 CHAPTER 2. ANALYZING AND OPTIMIZING LEVEL-CLOCKED CIRCUITRY techniques <ref> [41] </ref>. If the number of phases is assumed to be fixed, then the problem can be solved in O (kV 2 ) steps, that is, in a number of steps proportional to the number of constraints for proper timing [36].
Reference: [42] <author> M. C. Papaefthymiou. </author> <title> On retiming synchronous circuitry and mixed-integer optimization. </title> <type> Master's thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1990. </year> <note> Available as MIT/LCS/TR-486. </note>
Reference: [43] <author> M. C. Papaefthymiou. </author> <title> Understanding retiming through maximum average-weight cycles. </title> <booktitle> 3rd ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: A similar pattern is revealed for almost all of our test circuits. This phenomenon can be justified as follows. The maximum delay-to-register ratio R is a lower bound on the clock period of both the edge-triggered and the level-clocked circuit <ref> [21, 43] </ref>. Consequently, the longest combinational delay in the circuits is at least R under any transformation that does not change the number of latches around the cycles in the circuit.
Reference: [44] <author> M. C. Papaefthymiou. </author> <title> Sensitivity analysis of synchronous circuitry. </title> <type> Unpublished manuscript, </type> <month> August </month> <year> 1992. </year> <note> 126 BIBLIOGRAPHY </note>
Reference: [45] <author> M. C. Papaefthymiou. </author> <title> Understanding retiming through maximum average-delay cycles. </title> <journal> Mathematical Systems Theory, </journal> <note> 1993. To appear. A preliminary version of the paper appeared in the proceedings of the 3rd ACM Symposium on Parallel Algorithms and Architectures, </note> <month> July </month> <year> 1991. </year>
Reference-contexts: Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. Retiming has been well studied in the context of edge-triggered circuits <ref> [28, 29, 31, 33, 45] </ref> and has been the subject of study in the context of single-phase, level-clocked circuits [52]. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming.
Reference: [46] <author> M. C. Papaefthymiou, C. E. Leiserson, and A. T. Ishii. </author> <title> Optimizing two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 1991 MIT Student Workshop on VLSI and Parallel Systems, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Algorithms for retiming single-phase, level-clocked circuitry have appeared in [52]. Retiming heuristics were given in [3]. Early versions of our work appear in <ref> [21, 46] </ref>. 2.2 Constraints for Proper Timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. The section begins with a formal definition of the set of level-clocked circuits to which our results can be applied.
Reference: [47] <author> M. C. Papaefthymiou and K. H. Randall. </author> <title> Edge-triggering vs. two-phase level-clocking. </title> <booktitle> In Research on Integrated Systems: Proceedings of the 1993 Symposium, </booktitle> <month> March </month> <year> 1993. </year>
Reference-contexts: Edge-Triggering vs. Level-Clocking In Chapter 4 we present an empirical comparison of edge-triggered and two-phase, level-clocked circuitry in terms of speed and storage elements requirements. An earlier version of this work appeared in <ref> [47] </ref>. Level-clocked circuitry that employs a two-phase, nonoverlapping clocking scheme has the theoretical potential to operate up to twice as fast as edge-triggered circuitry. <p> ANALYZING AND OPTIMIZING LEVEL-CLOCKED CIRCUITRY software package for two-phase, level-clocked circuitry that we describe in Chapter 3 [48]. We have already used Tim to compare empirically two-phase, level-clocked circuits and edge-triggered circuits in terms of speed and number of storage elements <ref> [47] </ref>. Tim provides interactive feedback to designers. For example, rather than simply reporting the minimum clock period of a circuit, it performs a "sensitivity analysis" that reports the extent to which noncritical propagation delays can be increased without affecting the clock period.
Reference: [48] <author> M. C. Papaefthymiou and K. H. Randall. Tim: </author> <title> a timing package for two-phase, </title> <booktitle> level-clocked circuitry. In Proceedings of the 30th ACM/IEEE Design Automation Conference, </booktitle> <month> June </month> <year> 1993. </year> <note> Also available as an MIT VLSI Memo 92-693, </note> <month> October </month> <year> 1992. </year>
Reference-contexts: Tim: A Timing Package for Level-Clocked Circuitry In Chapter 3 we describe Tim, a versatile and efficient tool for verifying and optimizing the timing of two-phase, level-clocked circuitry. An earlier version of this work appeared in <ref> [48] </ref>. Tim is based on the algorithms that we present in Chapter 2 and performs a wide variety of functions such as timing verification, sensitivity analysis, clock tuning, retiming and clock tuning for maximum speed of operation, and retiming for minimum number of latches. <p> Most of the algorithms described in this chapter have been implemented in Tim, a 38 CHAPTER 2. ANALYZING AND OPTIMIZING LEVEL-CLOCKED CIRCUITRY software package for two-phase, level-clocked circuitry that we describe in Chapter 3 <ref> [48] </ref>. We have already used Tim to compare empirically two-phase, level-clocked circuits and edge-triggered circuits in terms of speed and number of storage elements [47]. Tim provides interactive feedback to designers.
Reference: [49] <author> N. Park and A. C. Parker. </author> <title> Theory of clocking for maximum execution overlap of high-speed digital systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(6) </volume> <pages> 678-690, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [9, 49, 57] </ref>, or been uncharacterized with respect to worst-case running time [6, 51]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [50] <author> K. H. Randall. </author> <title> Edge-triggering vs. level-clocking. </title> <type> Bachelor's thesis, </type> <institution> Massachusetts Institute of Technology., </institution> <year> 1993. </year>
Reference-contexts: If every fanout wire of each gate in the circuit has the same output, then it can be shown that retiming for minimum number of latches with maximal latch-sharing can be solved in O (V 3 ) time <ref> [50] </ref>. This algorithm is more efficient than the algorithm for the general problem, because it solves a minimum-cost flow problem on a graph with unit 2.9. APPROXIMATION SCHEMES FOR MINIMUM-PERIOD RETIMING 69 demands and supplies.
Reference: [51] <author> K. A. Sakallah, T. N. Mudge, and O. A. Olukotun. </author> <title> checkT c and minT c : Timing verification and optimal clocking of synchronous digital circuits. </title> <booktitle> In Digest of Technical Papers of the 1990 IEEE International Conference on CAD, </booktitle> <pages> pages 552-555, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies [9, 49, 57], or been uncharacterized with respect to worst-case running time <ref> [6, 51] </ref>. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit. <p> Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [52] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Retiming of circuits with single phase level-sensitive latches. </title> <booktitle> In International Conference on Computer Design, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: Retiming has been well studied in the context of edge-triggered circuits [28, 29, 31, 33, 45] and has been the subject of study in the context of single-phase, level-clocked circuits <ref> [52] </ref>. We extend the retiming technique to encompass the optimization of two-phase, level-clocked circuits. We consider three problems related to retiming. <p> They use this algorithm as a subroutine to solve the retiming and symmetric tuning problem. They also determine a set of constraints for the retiming problem, and they describe a Bellman-Ford-like algorithm for solving the constraints. Algorithms for retiming single-phase, level-clocked circuitry have appeared in <ref> [52] </ref>. Retiming heuristics were given in [3]. Early versions of our work appear in [21, 46]. 2.2 Constraints for Proper Timing In this section we give necessary and sufficient conditions for a two-phase, level-clocked circuit to be properly timed by a given clocking scheme. <p> RETIMING WITH SYMMETRIC CLOCKING SCHEMES 55 a symmetric clocking scheme = h; fl; ; fli, compute a retiming of G which is properly timed by , or else determine that no such retiming exists. Like several previous retiming algorithms <ref> [29, 52] </ref>, our algorithm casts retiming for a symmetric clocking scheme as a mixed-integer linear program. The retiming transformation relocates the latches in a circuit G without changing the functionality of the circuit. <p> The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in [55]. Retiming for speed has been studied in the context of single-phase level-clocked circuits in <ref> [52] </ref>. Despite the large amount of work in this area, our contribution is (we believe) the first attempt to quantify empirically the performance differences of edge-triggering and two-phase clocking. The remainder of this chapter has three sections.
Reference: [53] <author> N. Shenoy, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Graph algorithms for clock schedule optimization. </title> <booktitle> In Digest of Technical Papers of the 1992 IEEE/ACM International Conference on CAD, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: A polynomial-time algorithm for the timing verification problem when minimum propagation delays are included in the circuit model has appeared in [56]. A polynomial-time algorithm for the clock tuning problem with minimum propagation delays has appeared in <ref> [53] </ref>. We believe that many of our optimization algorithms can be generalized to handle such circuits in polynomial time. This is a topic of current research. Two generalizations of our work which seem more problematic are the handling of gated clocks and nonsimple multiphase clocking disciplines.
Reference: [54] <author> T. G. Szymanski. LEADOUT: </author> <title> A static timing analyzer for MOS circuits. </title> <booktitle> In Digest of Technical Papers of the 1986 IEEE International Conference on CAD, </booktitle> <pages> pages 130-133, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: Copies of the software have been available over the Internet since June 1993 and can be obtained by sending a request to marios@lcs.mit.edu. Several tools have been developed for analyzing the timing of circuitry that contains level-clocked latches <ref> [1, 4, 6, 23, 40, 51, 54] </ref>. These tools perform timing verification and enable the user to minimize the overall clock period by tuning various parameters of the clocking schemes. Our tool provides the designer with two additional features: retiming and sensitivity analysis.
Reference: [55] <author> T. G. Szymanski. </author> <title> Computing optimal clock schedules. </title> <booktitle> In Proc. 29th ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 399-404, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The potential of level-clocking for reducing the number of storage elements has been mentioned in [32]. The 102 CHAPTER 4. EDGE-TRIGGERING VS. LEVEL-CLOCKING idea of using latches instead of edge-triggered latches has been also used in <ref> [55] </ref>. Retiming for speed has been studied in the context of single-phase level-clocked circuits in [52]. Despite the large amount of work in this area, our contribution is (we believe) the first attempt to quantify empirically the performance differences of edge-triggering and two-phase clocking.
Reference: [56] <author> T. G. Szymanski and N. Shenoy. </author> <title> Verifying clock schedules. </title> <booktitle> In Digest of Technical Papers of the 1992 IEEE/ACM International Conference on CAD, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: A polynomial-time algorithm for the timing verification problem when minimum propagation delays are included in the circuit model has appeared in <ref> [56] </ref>. A polynomial-time algorithm for the clock tuning problem with minimum propagation delays has appeared in [53]. We believe that many of our optimization algorithms can be generalized to handle such circuits in polynomial time. This is a topic of current research.
Reference: [57] <author> S. H. Unger and C. J. Tan. </author> <title> Clocking schemes for high speed digital systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(10):880-895, </volume> <month> October </month> <year> 1986. </year>
Reference-contexts: We assume that the gaps fl 0 and fl 1 must be kept fixed and only the duty cycles of the phases can be adjusted. We give an O (V E)-time algorithm to solve the tuning problem. Previous algorithms for tuning have either addressed other types of clocking methodologies <ref> [9, 49, 57] </ref>, or been uncharacterized with respect to worst-case running time [6, 51]. Another way to optimize a circuit is by retiming: a method for relocating latches within the circuit without affecting the functionality of the circuit.
Reference: [58] <author> S. A. Ward and R. H. Halstead, Jr. </author> <title> Computation Structures. </title> <publisher> McGraw-Hill, MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: of time between a falling edge of the first phase and the next rising edge of the second phase, which generally must be long enough to overcome various engineering constraints, such as setup and hold times, the nonzero durations required for clock signals to rise and fall, and clock skew <ref> [14, 58] </ref>. The duty cycle and gap of the second phase are, similarly, denoted by 1 and fl 1 , respectively. The ratio = 1 = 0 is the duty ratio of the clocking scheme. <p> first step of this procedure was to replace each edge-triggered latch by a pair of back-to-back level-clocked latches that are clocked by a two-phase, nonoverlapping clocking scheme, as shown in Figure 4-1. (In fact, it is common in VLSI to implement edge-triggered latches by a pair of back-to-back level-clocked latches <ref> [14, 58] </ref>.) The two-phase circuit that results after this conversion has the same clock period and the same number of storage elements as the original edge-triggered circuit, assuming that each edge-triggered latch counts as two level-clocked latches.
References-found: 58

