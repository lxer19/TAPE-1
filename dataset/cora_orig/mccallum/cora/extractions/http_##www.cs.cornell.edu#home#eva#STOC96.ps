URL: http://www.cs.cornell.edu/home/eva/STOC96.ps
Refering-URL: http://www.cs.cornell.edu/home/eva/eva.html
Root-URL: 
Email: rabani@cs.technion.ac.il eva@cs.cornell.edu  
Title: Distributed Packet Switching in Arbitrary Networks high dilation to O(C) (log n) O(log n) D
Author: Yuval Rabani Eva Tardos poly(log n). Borodin et al. 
Date: May 22-24, 1996.  
Note: relatively  Research supported in part by a Packard Fellowship and an NSF PYI award, by NSF through grant DMS 9505155, and ONR through grant N00014-96-1-0050. To appear in the Twenty-Eighth ACM Symposium on  
Address: Haifa 32000, Israel Ithaca, NY, 14853  Philadelphia, PA,  
Affiliation: The Technion Cornell University  Theory of Computing,  
Abstract: In a seminal paper Leighton, Maggs, and Rao consider the packet scheduling problem when a single packet has to traverse each path. They show that there exists a schedule where each packet reaches its destination in O(C + D) steps, where C is the congestion and D is the dilation. The proof relies on the Lovasz Local Lemma, and hence is not algorithmic. In a followup paper Leighton and Maggs use an algorithmic version of the Local Lemma due to Beck to give centralized algorithms for the problem. Leighton, Maggs, and Rao also give a distributed randomized algorithm where all packets reach their destinations with high probability in O(C + D log n) steps. In this paper we develop techniques to guarantee the high probability of delivering packets without resorting to the Lovasz Local Lemma. We improve the distributed algorithm for problems with We extend the techniques to handle the case of infinite streams of regularly scheduled packets along every path. Here we measure the congestion on an edge e by the sum of the rates of the packet streams that use the edge, denoted by (e). We require that for some small constant * &gt; 0, for every edge e, (e) 1 *. In this case we use the parameter R = max i r i , the maximum distance between packets of the same stream, instead of the congestion C above. We notice that maxfR; Dg is a worst case lower bound on the maximum delay of a packet. We also extend the results to a model of packet traf fl Supported in part by the NSF PYI award of Eva Tardos. Part of this work was performed while visiting the School of OR&IE at Cornell, and while a postdoctoral fellow at the University of Toronto Computer Science Department. Work at the Technion supported in part by the Ruth and David Moskowitz Academic Lecturship award. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Albanese, J. Blomer, J. Edmonds, M. Luby, and M. Sudan. </author> <title> Priority encoding transmission. </title> <booktitle> In Proc. 35th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <month> November </month> <year> 1994, </year> <pages> pages 604-612. </pages>
Reference-contexts: Dropping packets appears to be essential to maintaining simultaneously good response time and near maximum throughput for the network. There are many techniques known to limit the degradation of the quality of the transmission due to limited loss of packets (see, e.g., Albanese et al <ref> [1] </ref>).
Reference: [2] <author> N. Alon and J.H. Spencer. </author> <title> The Probabilistic Method. </title> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference-contexts: Let the set sizes be N 1 , N 2 , : : :, N m . Let S i denote the number of variables in set i that are 1. Set fi i = ffiN=kN i 2e. Using Chernoff bounds (see <ref> [2, Appendix A] </ref>), we get Pr [S i &gt; fi i pN i ] &lt; e fi i pN i Summing over the sets, and using fi i N i = ffiN=k, gives the lemma.
Reference: [3] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing. </title> <booktitle> In Proc. of the 23rd Ann. ACM Symp. on Theory of Computing, </booktitle> <address> San Diego, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: At a high level, communication in an ATM network is established by allocating a virtual circuit that reserves resources along a path connecting the communicating nodes. Recently, there has been significant progress in the design of algorithms for virtual circuit routing <ref> [3, 4] </ref>, as well as their implementation in practice [9]. However, at a lower level, a virtual circuit is simply a stream of packets carrying encoded video or other transmissions.
Reference: [4] <author> B. Awerbuch, Y. Azar, and S. Plotkin. </author> <title> Throughput competitive on-line routing. </title> <booktitle> In Proc. of the 34th Ann. Symp. on Foundations of Computer Science, </booktitle> <address> Palo Alto, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: At a high level, communication in an ATM network is established by allocating a virtual circuit that reserves resources along a path connecting the communicating nodes. Recently, there has been significant progress in the design of algorithms for virtual circuit routing <ref> [3, 4] </ref>, as well as their implementation in practice [9]. However, at a lower level, a virtual circuit is simply a stream of packets carrying encoded video or other transmissions.
Reference: [5] <author> J. Beck. </author> <title> An algorithmic approach to the Lovasz Local Lemma. Random Structures and Algorithms, </title> <booktitle> 2(4) </booktitle> <pages> 367-378, </pages> <year> 1991. </year>
Reference-contexts: Therefore, this result is tight up to constant factors. The proof relies on 1 the Lovasz Local Lemma [8, 14], and hence is not algo-rithmic. In a followup paper Leighton and Maggs [11] use an algorithmic version of the Local Lemma due to Beck <ref> [5] </ref> to give centralized algorithms for the problem.
Reference: [6] <author> A. Borodin, J. Kleinberg, P. Raghavan, M. Sudan, and D.P. Williamson. </author> <title> Adversarial queueing theory. </title> <booktitle> In these proceedings. </booktitle>
Reference-contexts: We consider a model of packet traffic for handling bursty communication. The model is motivated by the new adversarial model suggested by Borodin et al <ref> [6] </ref> in the context of studying stability of greedy queueing strategies in various networks. The model we study generalizes their model to allow short periods of overload. A parameter L upper bounds the length of period during which an edge may be overloaded.
Reference: [7] <author> R.L. Brooks. </author> <title> On colouring the nodes of a network. </title> <journal> Proc. Cambridge Philos. Soc., </journal> <volume> 37 </volume> <pages> 194-197, </pages> <year> 1941. </year>
Reference-contexts: Let ffi 1. Then, Pr [ P X i &gt; 4effipN ] &lt; 4ek2 ffipN=k . Proof. By Brooks' theorem <ref> [7] </ref> the dependency graph can be partitioned into at most k + 1 independent sets, and therefore into m 4ek independent sets, each of size at most N=2ek. Let the set sizes be N 1 , N 2 , : : :, N m .
Reference: [8] <author> P. Erd-os and L. Lovasz. </author> <title> Problems and results on 3-chromatic hypergraphs and some related questions. </title> <editor> In A. Hajnal et al., eds., </editor> <title> Infinite and Finite Sets. </title> <publisher> North Holland, </publisher> <year> 1975, </year> <pages> pages 609-628. </pages>
Reference-contexts: Notice that if all packets enter the network at the same time, then maxfC; Dg is a lower bound on the time it takes to deliver all packets. Therefore, this result is tight up to constant factors. The proof relies on 1 the Lovasz Local Lemma <ref> [8, 14] </ref>, and hence is not algo-rithmic. In a followup paper Leighton and Maggs [11] use an algorithmic version of the Local Lemma due to Beck [5] to give centralized algorithms for the problem.
Reference: [9] <author> R. Gawlick, A. Kamath, S. Plotkin, and K. Ra-makrishnan. </author> <title> Routing and admission control in general topology networks. </title> <type> Technical report no. </type> <institution> STAN-CS-TR-95-1548, Stanford University, </institution> <year> 1995. </year>
Reference-contexts: Recently, there has been significant progress in the design of algorithms for virtual circuit routing [3, 4], as well as their implementation in practice <ref> [9] </ref>. However, at a lower level, a virtual circuit is simply a stream of packets carrying encoded video or other transmissions. These packets have to be scheduled in a way that will facilitate timely and reliable communication to all concurrent users of the network.
Reference: [10] <author> F.T. Leighton. </author> <title> Methods for message routing in parallel machines. </title> <booktitle> In Proc. of the 24th Ann. ACM Symp. on the Theory of Computing, </booktitle> <month> May </month> <year> 1992, </year> <pages> pages 77-96. </pages>
Reference-contexts: A solution to this problem consists of two distinct (though by no means independent) parts: a selection of paths for the packets, and a schedule of the motion of packets along their selected paths. These problems have been extensively studied, mostly in the context of specific network topologies (see <ref> [10] </ref>). In this paper we study the issue of scheduling the motion of packets for a given selection of paths in an arbitrary network.
Reference: [11] <author> F.T. Leighton and B.M. Maggs. </author> <title> Fast algorithms for finding O(congestion + dilation) packet routing schedules. </title> <booktitle> In Proc. of the 28th Hawaii International Conference on System Sciences, January 1995, </booktitle> <volume> vol 2, </volume> <pages> pages 555-563. </pages>
Reference-contexts: Therefore, this result is tight up to constant factors. The proof relies on 1 the Lovasz Local Lemma [8, 14], and hence is not algo-rithmic. In a followup paper Leighton and Maggs <ref> [11] </ref> use an algorithmic version of the Local Lemma due to Beck [5] to give centralized algorithms for the problem. <p> We give algorithms that provide tradeoffs between the first three parameters and the delay. Such tradeoffs seem intuitively necessary in a distributed setting. Our techniques The main idea of the algorithm follows the lines of the papers of Leighton, Maggs, Ranade, and Rao <ref> [12, 13, 11] </ref>. In the simple randomized algorithm of [12] each path selects a delay of at most O (C= log n) uniformly and independently at random. <p> The resulting schedule takes D O (log n) time to traverse a path of length D, so with the initial O (C) delay, the length of the resulting schedule is O (C + D log n). The centralized algorithm of <ref> [12, 11] </ref> uses the idea of inserting an initial random delay iteratively. <p> Now they divide each path into O (log n) long subpaths, and add delays in front of each of the subpaths. In order to argue that these extra delays decrease the congestion to O (log log n), they need to use the Lovasz Local Lemma <ref> [12, 11] </ref>. Chernoff bounds used in the analysis of the initial larger delays would not yield a strong enough guarantee. Rather than showing the desired high probability bound, Chernoff bounds would imply that the probability of an edge getting congested is at most 1=poly (log n). <p> This version of the result will be used in the next section. We remark that a similar variant of the Leighton, Maggs, Rao <ref> [12, 11] </ref> schedule can be obtained: for any constant * &gt; 0 there is a schedule for the periodic packet routing problem where all packets get delivered to their destination in (1 + *)C + O (D + log n), where the constant hidden in the big-Oh depends on *. 3
Reference: [12] <author> F.T. Leighton, B.M. Maggs, and S.B. Rao. </author> <title> Packet routing and job-shop scheduling in O(congestion + dilation) steps. </title> <journal> Combinatorica, </journal> <volume> 14(2) </volume> <pages> 167-186, </pages> <year> 1994. </year>
Reference-contexts: In each step switches move packets queued at incoming edges to queues on outgoing edges, subject to the constraint that at most one packet may traverse any single edge each step. Routing individual packets In a seminal paper Leighton, Maggs, and Rao <ref> [12] </ref> consider the packet scheduling problem when a single packet has to traverse each path. <p> In a distributed algorithm nodes (switches) must make their decisions independently, based on the packets they see, without the use of a centralized scheduler. Leighton et al. <ref> [12] </ref> state as a challenging open problem to improve their universal distributed algorithm to O (C + D). In this paper we make a step towards resolving this open problem by improving the length of the schedule for the case of large dilation D. <p> We give algorithms that provide tradeoffs between the first three parameters and the delay. Such tradeoffs seem intuitively necessary in a distributed setting. Our techniques The main idea of the algorithm follows the lines of the papers of Leighton, Maggs, Ranade, and Rao <ref> [12, 13, 11] </ref>. In the simple randomized algorithm of [12] each path selects a delay of at most O (C= log n) uniformly and independently at random. <p> Such tradeoffs seem intuitively necessary in a distributed setting. Our techniques The main idea of the algorithm follows the lines of the papers of Leighton, Maggs, Ranade, and Rao [12, 13, 11]. In the simple randomized algorithm of <ref> [12] </ref> each path selects a delay of at most O (C= log n) uniformly and independently at random. <p> The resulting schedule takes D O (log n) time to traverse a path of length D, so with the initial O (C) delay, the length of the resulting schedule is O (C + D log n). The centralized algorithm of <ref> [12, 11] </ref> uses the idea of inserting an initial random delay iteratively. <p> Now they divide each path into O (log n) long subpaths, and add delays in front of each of the subpaths. In order to argue that these extra delays decrease the congestion to O (log log n), they need to use the Lovasz Local Lemma <ref> [12, 11] </ref>. Chernoff bounds used in the analysis of the initial larger delays would not yield a strong enough guarantee. Rather than showing the desired high probability bound, Chernoff bounds would imply that the probability of an edge getting congested is at most 1=poly (log n). <p> We develop an algorithm that schedules all packets with high probability (w.h.p.), i.e., the probability of the schedule failing can be bounded by any inverse polynomial in n. Following the general outline of Leighton, Maggs, and Rao <ref> [12] </ref> we consider schedules of packets that might not be feasible, i.e., there might be more than a single packet traversing an edge at a time step. The congestion of the schedule is the maximum number of packets that traverse an edge at the same time. <p> The congestion of an edge in a T -frame is the number of packets that traverse the edge during the T -frame. The congestion of a T -frame is the maximum congestion of an edge in this frame. Leighton, Maggs and Rao <ref> [12] </ref> obtain the O (C + D) long schedule by repeated refinements. <p> Rather than refining the schedule iteratively, we have to refine it recursively. If C &gt; log n then we start similarly to the first step of the distributed algorithm of Leighton, Maggs and Rao <ref> [12] </ref> to find a schedule with T log n. The main part of the algorithm is a recursive procedure. The procedure assumes we have a parameter T O (log n), and a non-feasible schedule divided into T -frames. <p> These get scheduled in the second phase (the catchup track), which also involves recursive calls. Some packets may fail both phases. These are reported to the calling procedure as dumped packets. We will use the first step of the distributed algorithm of Leighton, Maggs and Rao <ref> [12] </ref> to create a schedule divided into T log n size frames, so that all frames have congestion at most for a parameter that will be defined later. <p> The next lemma states that this results in a schedule with the desired property with high probability. The proof uses Chernoff bounds and is exactly analogous to the proof of the 3 distributed Leighton-Maggs-Rao <ref> [12] </ref> algorithm. <p> This version of the result will be used in the next section. We remark that a similar variant of the Leighton, Maggs, Rao <ref> [12, 11] </ref> schedule can be obtained: for any constant * &gt; 0 there is a schedule for the periodic packet routing problem where all packets get delivered to their destination in (1 + *)C + O (D + log n), where the constant hidden in the big-Oh depends on *. 3
Reference: [13] <author> F.T. Leighton, B.M. Maggs, A.G. Ranade, and S.B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <journal> J. Alg., </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <year> 1994. </year>
Reference-contexts: Rao also give a distributed randomized algorithm where all packets reach their destinations with high probability in O (C + D log n) steps, using O (log n) size queues. (They call the algorithm on-line, rather than distributed.) For the special case of levelled networks, Leighton, Maggs, Ranade, and Rao <ref> [13] </ref> give an O (C +D+log n) steps distributed algorithm. In a distributed algorithm nodes (switches) must make their decisions independently, based on the packets they see, without the use of a centralized scheduler. <p> We give algorithms that provide tradeoffs between the first three parameters and the delay. Such tradeoffs seem intuitively necessary in a distributed setting. Our techniques The main idea of the algorithm follows the lines of the papers of Leighton, Maggs, Ranade, and Rao <ref> [12, 13, 11] </ref>. In the simple randomized algorithm of [12] each path selects a delay of at most O (C= log n) uniformly and independently at random.
Reference: [14] <author> J. Spencer. </author> <title> Ten Lectures on the Probabilistic Method. </title> <publisher> SIAM, </publisher> <year> 1987. </year> <month> 10 </month>
Reference-contexts: Notice that if all packets enter the network at the same time, then maxfC; Dg is a lower bound on the time it takes to deliver all packets. Therefore, this result is tight up to constant factors. The proof relies on 1 the Lovasz Local Lemma <ref> [8, 14] </ref>, and hence is not algo-rithmic. In a followup paper Leighton and Maggs [11] use an algorithmic version of the Local Lemma due to Beck [5] to give centralized algorithms for the problem.
References-found: 14

