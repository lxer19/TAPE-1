URL: ftp://ftp.csd.uu.se/pub/papers/reports/0079.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: svenolof@csd.uu.se  bengt@docs.uu.se  
Title: Concurrent Constraint Programming: A Fixpoint Semantics for Non-Terminating Computations  
Author: Sven-Olof Nystrom P. O. Bengt Jonsson P. O. 
Address: Box 311, S-751 05 Uppsala, Sweden  Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department, Uppsala University  Department of Computer Systems, Uppsala University  
Note: Indeterminate  This article was published in the proceedings of the 1993 international symposium on logic programming.  
Abstract: UPMAIL Technical Report No. 79 14 July, 1994 Abstract This paper presents a semantics for non-deterministic concurrent constraint programming languages. The semantics address the issues of giving an adequate treatment of non-terminating computations, in particular with fairness and liveness, and giving a compositional semantics, where the meaning of a recursively defined program is obtained as a fixpoint. We present a simple concurrent constraint programming language with a reduction rule semantics, which is augmented with fairness requirements. We specify how traces are obtained from fair computations of a program. The operational semantics of a program is defined as the set of traces of the program. We show that this trace semantics can be defined compositionally. The trace semantics is transformed into a continuous fixpoint semantics, using the framework of Lehmann's category-theoretic constructions, and present a general schema for defining continuous operators on the semantic domain. A simple abstraction operator is defined, and is proved to give a fully abstract semantics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abramsky, </author> <title> On semantic foundations for applicative multiprogramming, </title> <booktitle> Proceedings of the Tenth ICALP , Springer LCNS 154, </booktitle> <pages> 1-14, </pages> <address> New York 1983. </address>
Reference-contexts: The advantage of using categories lies in the fact that they can convey more information about the described programs, and that this extra information can be used to obtain continuous operators and fixpoints, even in the presence of fairness. Lehmann's ideas have previously been used by Abramsky <ref> [1] </ref> to give a semantics for an applicative language and by Panangaden and Russell [8] for a simple imperative sequential language with unbounded nondeterminism. In this paper, we apply Lehmann's ideas to a trace-based semantics for a concurrent language. The contents of this paper are the following. <p> For powerdomains, his solution takes advantage of the fact that two objects can have more than one arrow between them, and that thus an arrow can contain information about the way in which one object is an approximation of another. Lehmann's construction has previously been used by Abramsky <ref> [1] </ref> and by Panangaden and Russell [8] to model unbounded indeterminacy. Lehmann also showed how various domain-theoretic constructions (like sums, products, function spaces and least fixpoints of domain equations) had counterparts in category-theory. However, in this paper we will only consider powerdomains of partially ordered sets.
Reference: [2] <author> K. R. Apt, G.D. Plotkin, </author> <title> Countable nondeterminism and random assignment, </title> <journal> JACM , 33(4) </journal> <pages> 724-767, </pages> <year> 1986. </year>
Reference-contexts: Previous research on fixpoint semantics has provided methods to handle either non-terminating behavior of deterministic programs, or finite behaviors of nondeterministic programs. It is difficult to handle both non-terminating behavior and nondeterminism, in particular in the presence of fairness. For instance, Apt and Plotkin <ref> [2] </ref> have shown that it is impossible to have a continuous, least fixed-point, fully abstract semantics using domain theory. Earlier works [3, 10] have shown that the operational semantics of concurrent constraint programming languages can be formulated rather easily using structural operational semantics.
Reference: [3] <author> F.S. de Boer, C. Palamidessi, </author> <title> A fully abstract model for concurrent con-straint programming, </title> <booktitle> Proceedings of the International Joint Conference on Theory and Practice of Software Development, </booktitle> <publisher> Springer LNCS 493, </publisher> <pages> 296-319, </pages> <year> 1991. </year>
Reference-contexts: It is difficult to handle both non-terminating behavior and nondeterminism, in particular in the presence of fairness. For instance, Apt and Plotkin [2] have shown that it is impossible to have a continuous, least fixed-point, fully abstract semantics using domain theory. Earlier works <ref> [3, 10] </ref> have shown that the operational semantics of concurrent constraint programming languages can be formulated rather easily using structural operational semantics. For example, Boer and Palamidessi [3] have presented a fully abstract structural operational semantics for non-recursive programs, which descibes finite behavior. <p> Earlier works [3, 10] have shown that the operational semantics of concurrent constraint programming languages can be formulated rather easily using structural operational semantics. For example, Boer and Palamidessi <ref> [3] </ref> have presented a fully abstract structural operational semantics for non-recursive programs, which descibes finite behavior. For a deterministic concurrent constraint language Saraswat, Rinard, and Panangaden [10] have presented a semantics quite similar to Kahn's semantics [4], which handles finite and infinite computations in a uniform manner.
Reference: [4] <author> G. Kahn, </author> <title> The semantics of a simple language for parallel programming, </title> <booktitle> Proceedings of IFIP Congress 74 , North-Holland, </booktitle> <pages> 471-475, </pages> <year> 1974. </year>
Reference-contexts: For example, Boer and Palamidessi [3] have presented a fully abstract structural operational semantics for non-recursive programs, which descibes finite behavior. For a deterministic concurrent constraint language Saraswat, Rinard, and Panangaden [10] have presented a semantics quite similar to Kahn's semantics <ref> [4] </ref>, which handles finite and infinite computations in a uniform manner. They also generalize this semantics to a non-deterministic language. However, this semantics can only describe finite behaviors, and is thus unable to capture aspects pertaining to fairness or liveness.
Reference: [5] <author> D. J. Lehmann, </author> <title> Categories for fixed-point semantics, </title> <booktitle> 17th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> 122-126, </pages> <year> 1976. </year>
Reference-contexts: They also generalize this semantics to a non-deterministic language. However, this semantics can only describe finite behaviors, and is thus unable to capture aspects pertaining to fairness or liveness. In this paper, we will adopt category theoretic methods developed by Lehmann <ref> [5, 6] </ref>. A category can be seen as a generalization of a cpo, since any cpo is also a category. <p> Plotkin and Smyth proposed various orderings but it does not seem possible to find a partial order for a powerdomain that has all desired properties. Lehmann <ref> [5, 6] </ref> suggested a different approach. Instead of using partially ordered sets as domains, he proposed the use of (a class of) categories. Since any partially ordered set can be seen as a category, this is a rather straightforward generalization.
Reference: [6] <author> D. J. Lehmann, </author> <title> Categories for Fixed-point Semantics, </title> <type> PhD thesis, </type> <institution> He-brew University of Jerusalem, </institution> <year> 1976. </year>
Reference-contexts: They also generalize this semantics to a non-deterministic language. However, this semantics can only describe finite behaviors, and is thus unable to capture aspects pertaining to fairness or liveness. In this paper, we will adopt category theoretic methods developed by Lehmann <ref> [5, 6] </ref>. A category can be seen as a generalization of a cpo, since any cpo is also a category. <p> Plotkin and Smyth proposed various orderings but it does not seem possible to find a partial order for a powerdomain that has all desired properties. Lehmann <ref> [5, 6] </ref> suggested a different approach. Instead of using partially ordered sets as domains, he proposed the use of (a class of) categories. Since any partially ordered set can be seen as a category, this is a rather straightforward generalization.
Reference: [7] <author> M. Maher, </author> <title> Logic semantics for a class of committed-choice programs, </title> <booktitle> 4th International Conference on Logic Programming, </booktitle> <publisher> MIT Press 1987. </publisher>
Reference-contexts: 1 Introduction The concurrent constraint programming languages <ref> [7, 10] </ref> provide a simple and powerful model of asynchronous concurrent computation. The main feature of constraint programming is that the store is seen as a constraint on the range of values that variables can assume, rather than as a particular mapping from variables to values.
Reference: [8] <author> P. Panangaden, J. R. Russell, </author> <title> A category-theoretic semantics for unbounded nondeterminacy, </title> <booktitle> Mathematical Foundations of Programming Semantics, Proceedings, </booktitle> <publisher> 1989 , Springer LNCS 442, </publisher> <year> 1990. </year>
Reference-contexts: Lehmann's ideas have previously been used by Abramsky [1] to give a semantics for an applicative language and by Panangaden and Russell <ref> [8] </ref> for a simple imperative sequential language with unbounded nondeterminism. In this paper, we apply Lehmann's ideas to a trace-based semantics for a concurrent language. The contents of this paper are the following. We present a simple concurrent constraint programming language similar to that presented in [10]. <p> Lehmann's construction has previously been used by Abramsky [1] and by Panangaden and Russell <ref> [8] </ref> to model unbounded indeterminacy. Lehmann also showed how various domain-theoretic constructions (like sums, products, function spaces and least fixpoints of domain equations) had counterparts in category-theory. However, in this paper we will only consider powerdomains of partially ordered sets. <p> Lehmann also showed how various domain-theoretic constructions (like sums, products, function spaces and least fixpoints of domain equations) had counterparts in category-theory. However, in this paper we will only consider powerdomains of partially ordered sets. The following presentation of Lehmann's powerdomain construction follows the one in <ref> [8] </ref>. Given a complete partially ordered set (B; ), the construction of the categorical powerdomain, CP (B), is as follows. An object of CP (B) is a multiset of elements of B (it is assumed that repeated elements of a multiset can somehow be distinguished).
Reference: [9] <author> G. D. Plotkin, </author> <title> A powerdomain construction, </title> <journal> SIAM J. of Computing, </journal> <volume> 5(3) </volume> <pages> 452-487, </pages> <year> 1976. </year>
Reference-contexts: R, d i+1 = I X 4. r (t) = fi 2 r (u) j d i+1 = d i , or there is no j &lt; i such that j 2 R n r (u)g. 7 Powerdomains In the search for domains suitable for the treatment of indeterminacy, Plotkin <ref> [9] </ref> and Smyth [12] introduced powerdomains as the domain-theoretic analogues to powersets. Plotkin examined and dismissed one very simple power-domain construction; the representation of the powerdomain of the domain D as the function space D ! ftruth valuesg.
Reference: [10] <author> V. A. Saraswat, M. Rinard, P. Panangaden, </author> <title> Semantic foundations of concurrent constraint programming, </title> <booktitle> Proceedings of the 8'th ACM Symposium on Principles of Programming languages, </booktitle> <pages> 333-352, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The concurrent constraint programming languages <ref> [7, 10] </ref> provide a simple and powerful model of asynchronous concurrent computation. The main feature of constraint programming is that the store is seen as a constraint on the range of values that variables can assume, rather than as a particular mapping from variables to values. <p> It is difficult to handle both non-terminating behavior and nondeterminism, in particular in the presence of fairness. For instance, Apt and Plotkin [2] have shown that it is impossible to have a continuous, least fixed-point, fully abstract semantics using domain theory. Earlier works <ref> [3, 10] </ref> have shown that the operational semantics of concurrent constraint programming languages can be formulated rather easily using structural operational semantics. For example, Boer and Palamidessi [3] have presented a fully abstract structural operational semantics for non-recursive programs, which descibes finite behavior. <p> For example, Boer and Palamidessi [3] have presented a fully abstract structural operational semantics for non-recursive programs, which descibes finite behavior. For a deterministic concurrent constraint language Saraswat, Rinard, and Panangaden <ref> [10] </ref> have presented a semantics quite similar to Kahn's semantics [4], which handles finite and infinite computations in a uniform manner. They also generalize this semantics to a non-deterministic language. However, this semantics can only describe finite behaviors, and is thus unable to capture aspects pertaining to fairness or liveness. <p> In this paper, we apply Lehmann's ideas to a trace-based semantics for a concurrent language. The contents of this paper are the following. We present a simple concurrent constraint programming language similar to that presented in <ref> [10] </ref>. A reduction rule semantics of the language is given using structurally defined reduction rules. The semantics is augmented with fairness requirements. We specify how traces are obtained from fair computations of a program. The operational semantics of a program is defined as the set of traces of the program. <p> details of the construction of the constraints, but only refer to D c , D, the function I X Y (and the properties of this function), and the other operations which come with cpo's. 3 The language We will describe a concurrent constraint language, similar to that presented by Saraswat <ref> [10] </ref>. We assume a set NAME of procedure symbols p; q; : : :. The syntax of an agent A is given as follows. A ::= c j i2S A tell constraint, written c, is assumed to be a member of D c . <p> the subtrace relation is not a partial order, that is, two traces may be subtraces of each other without being equal, however, if t u then t is a subtrace of u. 1 Saraswat et al. used this type of functions for a similar purpose and called them closure operators <ref> [10] </ref>. We chose the term consequence operator to avoid any confusion with the syntactic construct. For a set of traces p, let bpc = ft 0 j t 0 is a subtrace of t 2 pg: The idea is that bc should serve as an abstraction operation.
Reference: [11] <author> D. S. Scott, </author> <title> Domains for denotational semantics, </title> <publisher> ICALP'82 , Springer LNCS 140, </publisher> <pages> 577-613, </pages> <year> 1982. </year>
Reference: [12] <author> M. B. Smyth, </author> <title> Powerdomains, </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 16 </volume> <pages> 23-36, </pages> <year> 1978. </year>
Reference-contexts: = I X 4. r (t) = fi 2 r (u) j d i+1 = d i , or there is no j &lt; i such that j 2 R n r (u)g. 7 Powerdomains In the search for domains suitable for the treatment of indeterminacy, Plotkin [9] and Smyth <ref> [12] </ref> introduced powerdomains as the domain-theoretic analogues to powersets. Plotkin examined and dismissed one very simple power-domain construction; the representation of the powerdomain of the domain D as the function space D ! ftruth valuesg.
References-found: 12

