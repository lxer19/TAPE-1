URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-42.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: flinda,hansbg@cs.ruu.nl  
Title: Comparing Loop Cutsets and Clique Trees in Probabilistic Inference  
Author: Linda C. van der Gaag Hans L. Bodlaender 
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Department of Computer Science, Utrecht University  
Abstract: More and more knowledge-based systems are being developed that employ the framework of Bayesian belief networks for reasoning with uncertainty. Such systems generally use for probabilistic inference either the algorithm of J. Pearl or the algorithm of S.L. Lauritzen and D.J. Spiegelhalter. These algorithms build on different graphical structures for their underlying computational architecture. By comparing these structures we examine the complexity properties of the two algorithms and show that Lauritzen and Spiegelhalter's algorithm has at most the same computational complexity as Pearl's algorithm.
Abstract-found: 1
Intro-found: 1
Reference: [BG96] <author> A. Becker and D. Geiger. </author> <title> Optimization of Pearl's method of conditioning and greedy-like approximation algorithms for the vertex feedback set problem. </title> <journal> Artificial Intelligence, </journal> <volume> vol. 83, </volume> <year> 1996, </year> <pages> pp. 167 - 188. </pages>
Reference-contexts: An efficient heuristic algorithm exists, however, that finds a loop cutset for a multiply connected digraph with at most twice the minimal number of vertices needed to cut all loops in the graph <ref> [BG96] </ref>. 4 3.2 Lauritzen and Spiegelhalter's algorithm In Lauritzen and Spiegelhalter's algorithm for probabilistic inference, the digraph of a belief network is not exploited directly as a computational architecture as it is in Pearl's algorithm.
Reference: [Bod93] <author> H.L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <journal> Acta Cybernetica, </journal> <volume> vol. 11, </volume> <year> 1993, </year> <pages> pp. 1 - 23. </pages>
Reference-contexts: The problem of finding for a digraph such a clique tree is known to be NP-hard [Wen90]; we would like to note that the problem is closely related to the well-studied problem of determining treewidth of a graph <ref> [Bod93] </ref>. For finding a clique tree for an acyclic digraph, various efficient heuristic algorithms are available [RTL76, TY84, Kj91].
Reference: [Coo90] <author> G.F. Cooper. </author> <title> The computational complexity of probabilistic inference using Bayesian belief networks. </title> <journal> Artificial Intelligence, </journal> <volume> vol. 42, </volume> <year> 1990, </year> <pages> pp. 393 - 405. </pages>
Reference-contexts: For belief networks without any topological restrictions, probabilistic inference is known to be NP-hard <ref> [Coo90] </ref>. Several different algorithms have been designed for probabilistic inference with a Bayesian belief network, each having a worst-case computational complexity that is exponential in the number of vertices in a network's digraph. The best known are the algorithm of J. Pearl [Pea88] and the algorithm of S.L.
Reference: [Gol80] <author> M.C. Golumbic. </author> <title> Algorithmic Graph Theory and Perfect Graphs, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1980. </year>
Reference-contexts: Instead, the digraph is first transformed into an undirected triangulated graph, that is, an undirected graph in which no cycle of length four or more exists without a shortcut <ref> [Gol80] </ref>. Definition 3.3 Let G = (V; A) be an acyclic digraph.
Reference: [Jen96] <author> F.V. Jensen. </author> <title> An Introduction to Bayesian Networks, </title> <publisher> UCL Press, </publisher> <address> London, </address> <year> 1996. </year>
Reference-contexts: Note that for any vertex, its original set of predecessors is included in the same (maximal) clique of H as the vertex itself. 2 From a belief network's triangulated moral graph, a clique tree, or junction tree, is constructed <ref> [Jen96] </ref>. A clique tree is a tree in which the vertices represent the (maximal) cliques of the graph it is constructed from; the intersections between the cliques give rise to the tree's edges. Definition 3.5 Let G = (V; A) be an acyclic digraph. <p> In general, a triangulated moral graph allows various different clique trees. For constructing a clique tree from a triangulated graph efficient algorithms are available <ref> [Pea88, Jen96] </ref>; details of these algorithms are not relevant for the present paper. Example 3.6 Consider once more the digraph G from Figure 1.
Reference: [Kj91] <author> U. Kjrulff. </author> <title> Optimal decomposition of probabilistic networks by simulated annealing. </title> <journal> Statistics and Computing, </journal> <volume> vol. 2, </volume> <year> 1991, </year> <pages> pp. 7 - 17. </pages>
Reference-contexts: For finding a clique tree for an acyclic digraph, various efficient heuristic algorithms are available <ref> [RTL76, TY84, Kj91] </ref>. These algorithms, however, do not exhibit any optimality properties. 4 Comparing loop cutsets and clique trees In the previous section, we have illustrated that the two best-known algorithms for probabilistic inference with a belief network build on different graphical structures: the algorithm of J.
Reference: [LS88] <author> S.L. Lauritzen and D.J. Spiegelhalter. </author> <title> Local computations with probabilities on graphical structures and their application to expert systems. </title> <journal> Journal of the Royal Statistical Society, Series B, </journal> <volume> vol. 50, </volume> <year> 1988, </year> <pages> pp. 157 - 224. </pages>
Reference-contexts: The best known are the algorithm of J. Pearl [Pea88] and the algorithm of S.L. Lauritzen and D.J. Spiegelhalter <ref> [LS88] </ref>. These algorithms build on different computational architectures that are constructed from the digraph of a belief network. Pearl's algorithm builds on a digraph more or less directly, after having `cut' all its loops by appropriate vertices. <p> Since a belief network uniquely defines a joint probability distribution, it provides for computing any probability of interest. Several different algorithms have been designed for this purpose. The best known among these are the algorithm of J. Pearl [Pea88] and the algorithm of S.L. Lauritzen and D.J. Spiegelhalter <ref> [LS88] </ref>. We review these algorithms along with their complexity properties. 3.1 Pearl's algorithm Pearl's basic algorithm for probabilistic inference takes the digraph of a belief network for its computational architecture. The vertices in the graph are viewed as autonomous objects and the arcs as bi-directional communication channels.
Reference: [Nea90] <author> R.E. </author> <title> Neapolitan. Probabilistic Reasoning in Expert Systems. Theory and Algorithms, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: In practical applications, however, very rarely a belief network with a digraph of in-degree (n) is found. The conclusion with regard to the algorithms' computational complexity mentioned above, may seem to contradict earlier results reported in the literature <ref> [SC91, Nea90] </ref>. These results pertain to the digraph G shown in Figure 7. Upon constructing a triangulated moral graph for G, a clique tree may be yielded that comprises a clique with as many as ( n) vertices, dependent on the heuristic algorithm used for this purpose [SC91, Nea90]. <p> in the literature <ref> [SC91, Nea90] </ref>. These results pertain to the digraph G shown in Figure 7. Upon constructing a triangulated moral graph for G, a clique tree may be yielded that comprises a clique with as many as ( n) vertices, dependent on the heuristic algorithm used for this purpose [SC91, Nea90]. Building on this particular clique tree for its computational architecture, the algorithm of Lauritzen and Spiegelhalter takes exponential time. Now, an example loop cutset for G is the set L = fv 1 g, having size one.
Reference: [Pea88] <author> J. Pearl. </author> <title> Probabilistic Reasoning in Intelligent Systems. Networks of Plausible Inference, </title> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction For reasoning with uncertainty in knowledge-based systems, the framework of Bayesian belief networks is rapidly gaining in popularity <ref> [Pea88] </ref>. The framework provides a powerful formalism for representing a joint probability distribution on a set of statistical variables and offers algorithms for probabilistic inference. <p> Several different algorithms have been designed for probabilistic inference with a Bayesian belief network, each having a worst-case computational complexity that is exponential in the number of vertices in a network's digraph. The best known are the algorithm of J. Pearl <ref> [Pea88] </ref> and the algorithm of S.L. Lauritzen and D.J. Spiegelhalter [LS88]. These algorithms build on different computational architectures that are constructed from the digraph of a belief network. Pearl's algorithm builds on a digraph more or less directly, after having `cut' all its loops by appropriate vertices. <p> In a belief network, the independences among the variables discerned and the numerical quantities involved in a distribution are represented separately <ref> [Pea88] </ref>. Independences among variables are represented by an acyclic directed graph. In this digraph, each vertex v i models a statistical variable that can take one of a finite set of values. <p> Since a belief network uniquely defines a joint probability distribution, it provides for computing any probability of interest. Several different algorithms have been designed for this purpose. The best known among these are the algorithm of J. Pearl <ref> [Pea88] </ref> and the algorithm of S.L. Lauritzen and D.J. Spiegelhalter [LS88]. We review these algorithms along with their complexity properties. 3.1 Pearl's algorithm Pearl's basic algorithm for probabilistic inference takes the digraph of a belief network for its computational architecture. <p> Through the communication channels the vertices send each other messages providing information about the represented probability distribution. Each vertex is able to compute the probabilities of its values from the probabilities stored in its memory and the information it receives from its neighbours <ref> [Pea88] </ref>. When a vertex' true value becomes known, the messages this vertex sends to its neighbours are updated to reflect the evidence, forcing its neighbours to compute updated messages in turn. The impact of evidence thus spreads throughout the graph by message-passing between neighbours. <p> For these networks, message-passing is supplemented with a method called loop-cutset conditioning <ref> [Pea88, SC90] </ref>. The basic idea of this method is to cut all cyclic chains, or loops, in the digraph so as to let it behave as if it were singly connected. Definition 3.1 Let G = (V; A) be an acyclic digraph. <p> In general, a triangulated moral graph allows various different clique trees. For constructing a clique tree from a triangulated graph efficient algorithms are available <ref> [Pea88, Jen96] </ref>; details of these algorithms are not relevant for the present paper. Example 3.6 Consider once more the digraph G from Figure 1.
Reference: [RTL76] <author> D.J. Rose, R.E. Tarjan, and G.S. Lueker. </author> <title> Algorithmic aspects of vertex elimination on graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 5, </volume> <year> 1976, </year> <pages> pp. 266 - 283. </pages>
Reference-contexts: For finding a clique tree for an acyclic digraph, various efficient heuristic algorithms are available <ref> [RTL76, TY84, Kj91] </ref>. These algorithms, however, do not exhibit any optimality properties. 4 Comparing loop cutsets and clique trees In the previous section, we have illustrated that the two best-known algorithms for probabilistic inference with a belief network build on different graphical structures: the algorithm of J.
Reference: [SAS94] <author> R.D. Shachter, S.K. Andersen, and P. Szolovits. </author> <title> Global conditioning for probabilistic inference in belief networks. </title> <booktitle> Proceedings of the Tenth Conference on Uncertainty in Artificial Intelligence, </booktitle> <year> 1994, </year> <pages> pp. 514 - 522. </pages>
Reference-contexts: In this paper, we examine the algorithm of Pearl and the algorithm of Lauritzen and Spiegelhalter as to their complexity properties. To this end, we build on an earlier result relating the two algorithms <ref> [SAS94] </ref>. By comparing the graphical structures underlying the algorithms' computational architectures, we show that Lauritzen and Spiegelhalter's algorithm has at most the same complexity as Pearl's algorithm. <p> Proof. The property stated in the proposition is proved by demonstrating the construction of a clique tree having the desired property from an acyclic digraph and associated loop cutset; the presented construction is derived to a large extent from the clique-tree construction for global conditioning <ref> [SAS94] </ref>. We consider the digraph G and its loop cutset L. From G, we construct the digraph G 0 = (V; A 0 ) by deleting the outgoing arcs of all vertices from L.
Reference: [SC90] <author> H.J. Suermondt and G.F. Cooper. </author> <title> Probabilistic inference in multiply connected belief networks using loop cutsets. </title> <journal> International Journal of Approximate Reasoning, </journal> <volume> vol. 4, </volume> <year> 1990, </year> <pages> pp. 283 - 306. </pages>
Reference-contexts: For these networks, message-passing is supplemented with a method called loop-cutset conditioning <ref> [Pea88, SC90] </ref>. The basic idea of this method is to cut all cyclic chains, or loops, in the digraph so as to let it behave as if it were singly connected. Definition 3.1 Let G = (V; A) be an acyclic digraph. <p> Since the computational complexity of Pearl's algorithm relates exponentially to loop-cutset size, the best loop cutset to use in practical applications is a loop cutset with a minimal number of vertices. The problem of finding for a multiply connected digraph a smallest loop cutset is known to be NP-hard <ref> [SC90] </ref>.
Reference: [SC91] <author> H.J. Suermondt and G.F. Cooper. </author> <title> A combination of exact algorithms for inference on Bayesian belief networks. </title> <journal> International Journal of Approximate Reasoning, </journal> <volume> vol. 5, </volume> <year> 1991, </year> <pages> pp. 521 - 542. </pages>
Reference-contexts: In practical applications, however, very rarely a belief network with a digraph of in-degree (n) is found. The conclusion with regard to the algorithms' computational complexity mentioned above, may seem to contradict earlier results reported in the literature <ref> [SC91, Nea90] </ref>. These results pertain to the digraph G shown in Figure 7. Upon constructing a triangulated moral graph for G, a clique tree may be yielded that comprises a clique with as many as ( n) vertices, dependent on the heuristic algorithm used for this purpose [SC91, Nea90]. <p> in the literature <ref> [SC91, Nea90] </ref>. These results pertain to the digraph G shown in Figure 7. Upon constructing a triangulated moral graph for G, a clique tree may be yielded that comprises a clique with as many as ( n) vertices, dependent on the heuristic algorithm used for this purpose [SC91, Nea90]. Building on this particular clique tree for its computational architecture, the algorithm of Lauritzen and Spiegelhalter takes exponential time. Now, an example loop cutset for G is the set L = fv 1 g, having size one. <p> That is, there exist belief networks comprising a digraph for which a clique tree can be constructed in which the maximal clique size is bounded by a constant, yet for which no loop cutset of constant size exists. We give an example of such a digraph, taken from <ref> [SC91] </ref>. Example 4.3 Consider the digraph G shown in Figure 8. For this digraph, a clique tree exists in which all cliques include three vertices.
Reference: [TY84] <author> R.E. Tarjan and M. Yannakakis. </author> <title> Simple linear-time algorithms to test chordality of graphs, test acyclicity of hypergraphs, and selectively reduce acyclic hypergraphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> vol. 13, </volume> <year> 1984, </year> <pages> pp. 566 - 579. </pages>
Reference-contexts: For finding a clique tree for an acyclic digraph, various efficient heuristic algorithms are available <ref> [RTL76, TY84, Kj91] </ref>. These algorithms, however, do not exhibit any optimality properties. 4 Comparing loop cutsets and clique trees In the previous section, we have illustrated that the two best-known algorithms for probabilistic inference with a belief network build on different graphical structures: the algorithm of J.
Reference: [Wen90] <author> W.X. Wen. </author> <title> Optimal decomposition of belief networks. </title> <booktitle> Proceedings of the Sixth Workshop on Uncertainty in Artificial Intelligence, </booktitle> <address> Cambridge, Massachusetts, </address> <year> 1990, </year> <pages> pp. 245 - 256. 11 </pages>
Reference-contexts: The problem of finding for a digraph such a clique tree is known to be NP-hard <ref> [Wen90] </ref>; we would like to note that the problem is closely related to the well-studied problem of determining treewidth of a graph [Bod93]. For finding a clique tree for an acyclic digraph, various efficient heuristic algorithms are available [RTL76, TY84, Kj91].
References-found: 15

