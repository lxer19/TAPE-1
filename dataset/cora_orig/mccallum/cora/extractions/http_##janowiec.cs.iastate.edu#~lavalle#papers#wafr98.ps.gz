URL: http://janowiec.cs.iastate.edu/~lavalle/papers/wafr98.ps.gz
Refering-URL: http://janowiec.cs.iastate.edu/~lavalle/
Root-URL: http://www.cs.iastate.edu
Title: Numerical Computation of Optimal Navigation Functions on a Simplicial Complex  
Author: Steven M. LaValle, 
Address: Ames, IA, USA  
Affiliation: Iowa State University,  
Abstract: This paper presents a general approach to computing optimal feedback motion strategies for a holonomic or nonholonomic robot in a static workspace. The proposed algorithm synthesizes a numerical navigation function defined by interpolation in a simplicial complex. The computation progresses much in the same way as Dijkstra's algorithm for graphs; however, the proposed approach applies to continuous spaces with geometric and nonholonomic constraints. By choosing a simplicial complex representation instead of a straightforward grid, the number of interpolation operations (which are required for continuous-state, numerical dynamic programming) is reduced from 2 n to n + 1, in which n is the dimension of the configuration space. Some preliminary findings are discussed for an implementation of the algorithm for the case of a two-dimensional configuration space. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J.-C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Nonholonomic path planning for pushing a disk among obstacles. </title> <booktitle> In IEEE Int. Conf. </booktitle> <institution> Robot. & Autom., </institution> <year> 1997. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [26]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [6, 17, 29], push planning <ref> [1, 23] </ref>). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both. <p> For example, if C = &lt; 2 , the interpolation can be computed as k+1 (x k+1 ) fffiL fl k+1 [i; j] + (1 ff)fiL fl ff (1 fi)L fl k+1 [i + 1; j + 1] in which ff; fi 2 <ref> [0; 1] </ref> are coefficients that express the normalized distance to the neighbors. Convergence properties of the quantization and interpolation are discussed in [4, 5]. Interpolation represents an important step that overcomes the problems of measuring Man-hattan distance due to quantization. The obstacle constraints must also be taken into account.
Reference: [2] <author> J. Barraquand, B. Langlois, and J. C. Latombe. </author> <title> Numerical potential field techniques for robot path planning. </title> <journal> IEEE Trans. Syst., Man, Cybern., </journal> <volume> 22(2) </volume> <pages> 224-241, </pages> <year> 1992. </year>
Reference-contexts: In addition, one is often willing to exchange strong guarantees on performance (such as completeness) if the result is to obtain a method that is more broadly applicable. This philosophy shift was once seen in path planning research. Approaches such as the randomized potential field planner <ref> [2] </ref> or the randomized roadmap planner [11], offer weaker statements regarding the performance (i.e., probabilistic completeness as opposed to completeness); however, their general applicability and practical efficiency has stimulated their use in a variety of applications.
Reference: [3] <author> J. Barraquand and J.-C. Latombe. </author> <title> Nonholonomic multibody mobile robots: Controllability and motion planning in the presence of obstacles. </title> <journal> Algorithmica, </journal> <volume> 10 </volume> <pages> 121-155, </pages> <year> 1993. </year>
Reference-contexts: Relationship to Barraquand-Latombe approach The proposed approach shares similarities with the nonholonomic planning approach used in <ref> [3, 24] </ref>, which involves a branch-and-bound exploration from an initial configuration, using a discretized approximation of time and the set of possible control inputs. Each exploration step is achieved by applying a control input and integrating the system equation over a small time to obtain a new configuration.
Reference: [4] <author> R. E. Bellman. </author> <title> Dynamic Programming. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1957. </year> <editor> S. M. </editor> <publisher> LaValle </publisher>
Reference-contexts: Bellman's principle of optimality provides a powerful constraint on the solution structure <ref> [4] </ref>, which directly Computation of Optimal Navigation Functions leads to a numerical computation approach. With a discrete-time model, a difference equation is obtained that relates successive cost-to-go functions. This difference equation will now be derived. <p> Convergence properties of the quantization and interpolation are discussed in <ref> [4, 5] </ref>. Interpolation represents an important step that overcomes the problems of measuring Man-hattan distance due to quantization. The obstacle constraints must also be taken into account.
Reference: [5] <author> D. P. Bertsekas. </author> <title> Convergence in discretization procedures in dynamic programming. </title> <journal> IEEE Trans. Autom. Control, </journal> <volume> 20(3) </volume> <pages> 415-419, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: Convergence properties of the quantization and interpolation are discussed in <ref> [4, 5] </ref>. Interpolation represents an important step that overcomes the problems of measuring Man-hattan distance due to quantization. The obstacle constraints must also be taken into account.
Reference: [6] <author> L. G. Bushnell, D. M. Tilbury, and S. S. Sastry. </author> <title> Steering three-input nonholonomic systems: the fire truck example. </title> <journal> Int. J. Robot. Res., </journal> <volume> 14(4) </volume> <pages> 366-381, </pages> <year> 1995. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [26]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [6, 17, 29] </ref>, push planning [1, 23]). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both.
Reference: [7] <author> H. S. M. Coxeter. </author> <title> Regular Polytopes. </title> <publisher> Dover Publications, </publisher> <address> New York, NY, </address> <year> 1973. </year>
Reference-contexts: Ideally, one would like to construct a simplicial complex such that all d-dimensional sim-plexes are regular polytopes; however, as shown in <ref> [7] </ref>, this is impossible, even in &lt; 3 (e.g., &lt; 3 cannot be tiled with identical tetrahedra, each of which having all faces be equilateral triangles).
Reference: [8] <author> M. Erdmann. </author> <title> An exploration of nonprehensile two-palm manipulation using two zebra robots. </title> <editor> In J.-P. Laumond and M. Overmars, editors, </editor> <booktitle> Algorithms for Robotic Motion and Manipulation, </booktitle> <pages> pages 239-254. </pages> <editor> A K Peters, </editor> <address> Wellesley, MA, </address> <year> 1997. </year>
Reference-contexts: Two applications are worth considering at the outset: 1) optimal planning for car-like robots, and 2) optimal push planning for a robot that pushes rigid bodies on a planar surface. Our approach is expected to be particularly useful for applications that involve unpredictability, such as nonpre-hensile manipulation <ref> [8] </ref>. For example, imagine pushing a box with a mobile robot that makes points contact. A vision system can be used to monitor the posi tion of the box, and the motion of the robot should be adjusted during execution to guide the box to the goal.
Reference: [9] <author> J. Hershberger and S. Suri. </author> <title> Efficient computation of Euclidean shortest paths in the plane. </title> <booktitle> In Proc. 34th Annual IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 508-517, </pages> <year> 1995. </year>
Reference-contexts: Instead of a graph or a grid, a simplicial complex is constructed; this is used to represent a continuous cost-to-go function (or navigation function) which serves the same purpose as the costs that are placed on vertices in Dijkstra's algorithm. Another related approach is the "continuous Dijkstra paradigm" <ref> [9, 25] </ref>, which is used to efficiently compute holonomic shortest paths in a 2D polygonal environment by identifying critical events that correspond to a propagating wavefront of level-set curves that measure distance from a goal position. <p> The action space was quantized into 32 and 360 orientations; the cost-to-go for each quantized value is computed, to numerically evaluate (9). For this particular two-dimensional problem, one could evaluate (9) more efficiently, or even use methods similar to those in <ref> [9, 25] </ref>. The purpose of these experiments, however, is to estimate how the algorithm will perform when it is given more challenging problems in higher-dimensional configuration spaces.
Reference: [10] <author> A. Isidori. </author> <title> Nonlinear Control Systems. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Incorporating nonholonomic constraints Let _x represent the velocity of the robot in the configuration space. The nonholonomic constraints can be represented using control-theoretic notation as _x = f (x (t); u (t)) <ref> [10] </ref>. The case of _x (t) = u (t) corresponds to a holonomic planning problem. Suppose that any control input is allowed if it satisfies kuk = 1 or u = 0. This implies that one can move the robot in any allowable direction at a local tangent space.
Reference: [11] <author> L. E. Kavraki. </author> <title> Random Networks in Configuration Space for Fast Path Planning. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1994. </year>
Reference-contexts: This philosophy shift was once seen in path planning research. Approaches such as the randomized potential field planner [2] or the randomized roadmap planner <ref> [11] </ref>, offer weaker statements regarding the performance (i.e., probabilistic completeness as opposed to completeness); however, their general applicability and practical efficiency has stimulated their use in a variety of applications.
Reference: [12] <author> L. E. Kavraki. </author> <title> Computation of configuration-space obstacles using the Fast Fourier Transform. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 11(3) </volume> <pages> 408-413, </pages> <year> 1995. </year>
Reference-contexts: The constraints can be directly evaluated each time to determine whether each x k+1 lies in the free space, or a bitmap representation of the configuration space can be used for quick evaluations (an efficient algorithm for building a bitmap representation of C free is given in <ref> [12] </ref>). Note that L fl K represents the cost of the optimal one-stage strategy from each configuration x K . More generally, L fl Ki represents the cost of the optimal (i + 1)- stage strategy from each configuration x Ki .
Reference: [13] <author> R. E. Larson. </author> <title> A survey of dynamic programming computational procedures. </title> <journal> IEEE Trans. Autom. Control, </journal> <volume> 12(6) </volume> <pages> 767-774, </pages> <month> December </month> <year> 1967. </year>
Reference-contexts: Such generalization can be made using the unified mathematical framework presented in [19]. Relationship to Dijkstra's algorithm The computational approach offered in this paper is built from the principle of optimality as it appears in optimal control theory <ref> [13] </ref>, and is closely related to the level set method in [28]. It also shares similarities with Dijk-stra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph). <p> The optimal motions are executed by selecting actions using L fl as a navigation function, as discussed in Section 3. Two basic methods are described. The first method is derived from numerical dynamic programming techniques presented in optimal control literature S. M. LaValle <ref> [13, 14] </ref>. The method described here and several extensions were implemented and tested on many problems in [18, 20, 21]. The purpose of describing it here is to provide a basis of comparison for the new method, for which a description soon follows.
Reference: [14] <author> R. E. Larson and J. L. Casti. </author> <title> Principles of Dynamic Programming, Part II. </title> <publisher> Dekker, </publisher> <address> New York, NY, </address> <year> 1982. </year>
Reference-contexts: The optimal motions are executed by selecting actions using L fl as a navigation function, as discussed in Section 3. Two basic methods are described. The first method is derived from numerical dynamic programming techniques presented in optimal control literature S. M. LaValle <ref> [13, 14] </ref>. The method described here and several extensions were implemented and tested on many problems in [18, 20, 21]. The purpose of describing it here is to provide a basis of comparison for the new method, for which a description soon follows.
Reference: [15] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: By setting the control input as u (t) = dh dt , the original path can be obtained. For nonholonomic problems, one will only be allowed to move the robot through a function of the form _x = f (x (t); u (t)). For example, as described in <ref> [15] </ref>, p. 432, the equations for the nonholonomic car robot can be expressed as _x = v cos (), _y = v sin (), and _ = v L tan (), in which v is the speed of the rear axle midpoint, L is the distance between the front and rear
Reference: [16] <author> J.-C. Latombe, A. Lazanas, and S. Shekhar. </author> <title> Robot motion planning with uncertainty in control and sensing. </title> <journal> Artif. Intell., </journal> <volume> 52 </volume> <pages> 1-47, </pages> <year> 1991. </year>
Reference-contexts: In other words, P re (C) gives the set of configurations from which the set C is reachable in a single stage. This is a familiar construction in motion planning under uncertainty <ref> [22, 16] </ref>, and the computation of P re (C) might be straightforward or extremely challenging, depending on the particular motion model. Initially, it is assumed that lub (p) = 1 if p 62 G.
Reference: [17] <author> J.-P. Laumond, P. E. Jacobs, M. Taix, and R. M. Murray. </author> <title> A motion planner for nonholonomic mobile robots. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 10(5) </volume> <pages> 577-593, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [26]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [6, 17, 29] </ref>, push planning [1, 23]). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both.
Reference: [18] <author> S. M. LaValle. </author> <title> A Game-Theoretic Framework for Robot Motion Planning. </title> <type> PhD thesis, </type> <institution> University of Illi-nois, Urbana, IL, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Two basic methods are described. The first method is derived from numerical dynamic programming techniques presented in optimal control literature S. M. LaValle [13, 14]. The method described here and several extensions were implemented and tested on many problems in <ref> [18, 20, 21] </ref>. The purpose of describing it here is to provide a basis of comparison for the new method, for which a description soon follows. <p> An optimal strategy can be computed by successively building approximate representations of the cost-to-go functions <ref> [18] </ref>. The most straightforward way to represent a cost-to-go function is to specify its values at each location in a discretized grid. The first step is to construct a representation of L fl K+1 . <p> It can furthermore be extended in a variety of ways to handle complications such as stochastic predictability uncertainty <ref> [18] </ref>. In spite of these successes, its computational complexity usually limits its practical applicability to problems that have two or three degrees of freedom. <p> For a small set of problems, it has been observed that the new computation method computes optimal navigation functions between 40 and 80 times faster than the method described in <ref> [18] </ref>. Three example problems are shown in Figures 4.a, 5.a, and 6.a. Figures 4.b, 5.b, and 6.b show level set contours of the optimal navigation function that was obtained using 80 fi 80 control points.
Reference: [19] <author> S. M. LaValle. </author> <title> Robot motion planning: A game-theoretic foundation. </title> <booktitle> In Proc. 2nd Int'l Workshop on the Algorithmic Foundations of Robotics, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: This computational approach is also intended as a step toward a more general approach that can additionally handle complications such as stochastic or nondeterministic uncertainty in sensing and predictability, multiple robots, and dynamics. Such generalization can be made using the unified mathematical framework presented in <ref> [19] </ref>. Relationship to Dijkstra's algorithm The computational approach offered in this paper is built from the principle of optimality as it appears in optimal control theory [13], and is closely related to the level set method in [28]. <p> A navigation function would be ideal in this case because a feedback motion strategy is directly obtained, as opposed to forcing the robot to follow a particular trajectory. In the longer term it will be interesting to attempt generalizations of the algorithm. As argued in <ref> [19] </ref>, one powerful advantage of a unified mathematical framework for motion planning problems is the relative ease of obtaining generalizations. It is expected that this will indeed be the case for the algorithm presented in this paper.
Reference: [20] <author> S. M. LaValle and S. A. Hutchinson. </author> <title> An objective-based framework for motion planning under sensing and control uncertainties. </title> <journal> International Journal of Robotics Research, </journal> <volume> 17(1) </volume> <pages> 19-42, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: Two basic methods are described. The first method is derived from numerical dynamic programming techniques presented in optimal control literature S. M. LaValle [13, 14]. The method described here and several extensions were implemented and tested on many problems in <ref> [18, 20, 21] </ref>. The purpose of describing it here is to provide a basis of comparison for the new method, for which a description soon follows. <p> The technique might also apply to problems that involve stochastic uncertainty in predictability, which can dramatically improve computational performance for problems such as computing optimal manipulation strategies under uncertainty <ref> [20] </ref>, or planning in a partially-predictable environment [21]. Acknowledgments I thank Prashanth Konkimalla for his help with the implementation. I also thank Tammy Verstraete for making corrections to this manuscript.
Reference: [21] <author> S. M. LaValle and R. Sharma. </author> <title> On motion planning in changing, partially-predictable environments. </title> <journal> International Journal of Robotics Research, </journal> <volume> 16(6) </volume> <pages> 775-805, </pages> <month> December </month> <year> 1997. </year>
Reference-contexts: Two basic methods are described. The first method is derived from numerical dynamic programming techniques presented in optimal control literature S. M. LaValle [13, 14]. The method described here and several extensions were implemented and tested on many problems in <ref> [18, 20, 21] </ref>. The purpose of describing it here is to provide a basis of comparison for the new method, for which a description soon follows. <p> The technique might also apply to problems that involve stochastic uncertainty in predictability, which can dramatically improve computational performance for problems such as computing optimal manipulation strategies under uncertainty [20], or planning in a partially-predictable environment <ref> [21] </ref>. Acknowledgments I thank Prashanth Konkimalla for his help with the implementation. I also thank Tammy Verstraete for making corrections to this manuscript.
Reference: [22] <author> T. Lozano-Perez, M. T. Mason, and R. H. Taylor. </author> <title> Automatic systhesis of fine-motion strategies for robots. </title> <journal> Int. J. Robot. Res., </journal> <volume> 3(1) </volume> <pages> 3-24, </pages> <year> 1984. </year>
Reference-contexts: In other words, P re (C) gives the set of configurations from which the set C is reachable in a single stage. This is a familiar construction in motion planning under uncertainty <ref> [22, 16] </ref>, and the computation of P re (C) might be straightforward or extremely challenging, depending on the particular motion model. Initially, it is assumed that lub (p) = 1 if p 62 G.
Reference: [23] <author> K. M. Lynch and M. T. Mason. </author> <title> Stable pushing: Mechanics, controllability, and planning. In Algorithmic Foundations of Robotics. </title> <editor> A. K. Peters, </editor> <address> Boston, </address> <year> 1995. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [26]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [6, 17, 29], push planning <ref> [1, 23] </ref>). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both. <p> Using the notation in this paper, ( _x; _y; _ ) becomes _x, and (v; ) becomes u. Other nonholonomic models, such as those used for push planning in <ref> [23] </ref> can be encoded in this way. The function f can be considered as a kind of interface between the user and the robot.
Reference: [24] <author> K. M. Lynch and M. T. Mason. </author> <title> Stable pushing: Mechanics, controllability, and planning. </title> <journal> Int. J. Robot. Res., </journal> <volume> 15(6) </volume> <pages> 533-556, </pages> <year> 1996. </year>
Reference-contexts: Relationship to Barraquand-Latombe approach The proposed approach shares similarities with the nonholonomic planning approach used in <ref> [3, 24] </ref>, which involves a branch-and-bound exploration from an initial configuration, using a discretized approximation of time and the set of possible control inputs. Each exploration step is achieved by applying a control input and integrating the system equation over a small time to obtain a new configuration.
Reference: [25] <author> J. S. B. Mitchell. </author> <title> Shortest paths among obstacles in the plane. </title> <journal> Int. J. Comput. Geom. & Appl., </journal> <volume> 6(3) </volume> <pages> 309-332, </pages> <year> 1996. </year>
Reference-contexts: Instead of a graph or a grid, a simplicial complex is constructed; this is used to represent a continuous cost-to-go function (or navigation function) which serves the same purpose as the costs that are placed on vertices in Dijkstra's algorithm. Another related approach is the "continuous Dijkstra paradigm" <ref> [9, 25] </ref>, which is used to efficiently compute holonomic shortest paths in a 2D polygonal environment by identifying critical events that correspond to a propagating wavefront of level-set curves that measure distance from a goal position. <p> The action space was quantized into 32 and 360 orientations; the cost-to-go for each quantized value is computed, to numerically evaluate (9). For this particular two-dimensional problem, one could evaluate (9) more efficiently, or even use methods similar to those in <ref> [9, 25] </ref>. The purpose of these experiments, however, is to estimate how the algorithm will perform when it is given more challenging problems in higher-dimensional configuration spaces.
Reference: [26] <author> E. Rimon and D. E. Koditschek. </author> <title> Exact robot navigation using artificial potential fields. </title> <journal> IEEE Trans. Robot. & Autom., </journal> <volume> 8(5) </volume> <pages> 501-518, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: This corresponds to a feedback motion strategy, which is computed using the method presented in this paper. Arguments for directly incorporating feedback in the form of a navigation function were also made in <ref> [26] </ref>. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems [6, 17, 29], push planning [1, 23]). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both. <p> Thus from any location in the configuration space, the robot will have the appropriate action during the execution of the optimal strategy. This section presents the concept of cost-to-go functions, which are used as a navigation function in the sense proposed in <ref> [26] </ref>. Instead of building a direct representation of the feedback strategy, the proposed approach uses a cost-to-go function as an intermediate representation from which the appropriate action can quickly be obtained. <p> Instead of precomput-ing a path, the solution takes the form of a navigation function, as considered in <ref> [26] </ref>. Two improvements are made over the previous approach to the problem of numerically computing optimal cost-to-go functions: 1) The solution can be obtained in a single iteration over the configuration space; 2) the number of interpolation steps have been reduced from 2 n to n + 1.
Reference: [27] <author> J. J. Rotman. </author> <title> Introduction to Algebraic Topology. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: In two dimensions, a triangulation is obtained. For an n-dimensional configuration space, a simplicial complex is constructed <ref> [27] </ref>. Every d-dimensional simplex has d+1 faces, each of which are (d 1)-dimensional simplexes. Furthermore, for every pair, S 1 , S 2 , of i-dimensional simplexes in the simplicial complex, either S 1 " S 2 = ; or S 1 and S 2 share an (i 1)-dimensional face.
Reference: [28] <author> J. A. Sethian. </author> <title> Level set methods : Evolving interfaces in geometry, fluid mechanics, </title> <booktitle> computer vision, and materials science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1996. </year>
Reference-contexts: Such generalization can be made using the unified mathematical framework presented in [19]. Relationship to Dijkstra's algorithm The computational approach offered in this paper is built from the principle of optimality as it appears in optimal control theory [13], and is closely related to the level set method in <ref> [28] </ref>. It also shares similarities with Dijk-stra's algorithm for computing single-source shortest paths in a graph; however, in our case a continuous configuration space must be considered (as opposed to a graph).
Reference: [29] <author> P. Svestka and M. H. Overmars. </author> <title> Coordinated motion planning for multiple car-like robots using probabilistic roadmaps. </title> <booktitle> In IEEE Int. Conf. Robot. & Autom., </booktitle> <pages> pages 1631-1636, </pages> <year> 1995. </year>
Reference-contexts: Arguments for directly incorporating feedback in the form of a navigation function were also made in [26]. Furthermore, applications continue to appear that involve the challenge of incorporating nonholonomic constraints on the system velocities (e.g., wheeled-robot systems <ref> [6, 17, 29] </ref>, push planning [1, 23]). The focus of this paper is on motion planning problems that require either feedback solutions, nonholo-nomic analysis, or both.
References-found: 29

