URL: http://www.cs.mu.oz.au/tr_db/mu_93_29.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Efficient Object-Oriented Programming in Prolog  
Author: Peter Schachte Georges Saab 
Date: 93/29  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Almgren, et al. </author> <title> The Sicstus Prolog Library Manual. </title> <institution> Swedish Institute of Computer Science. Kista, Sweden, </institution> <year> 1993. </year>
Reference-contexts: Since this time several new packages have become available, including L&O [4], Sicstus Objects <ref> [1] </ref>, Quintec Objects [10] and OL (P)[3].
Reference: [2] <author> G. Booch. </author> <title> Object Oriented Design with Applications. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc. </publisher> <address> Readwood City, CA, </address> <year> 1991. </year>
Reference-contexts: a clause send (C (Addr), Msg) :- send C (Msg, C (Addr)). and for each message named N of arity A defined for class C, there is a clause 1 For more information on the benefits of object-oriented programming, please see a dedicated text such as Rumbaugh [11] or Booch <ref> [2] </ref> 2 The packages that we had access to when we began this project in 1990 were Quintus ProWindows [6], ProTalk [8], and Prolog++[13]. Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects [10] and OL (P)[3].
Reference: [3] <author> M. Fromhertz. </author> <note> OL(P) version 1.1. Available for anonymous ftp from parcftp@parc.xerox.com (13.1.64.94) in /pub/ol. Xerox PARC, </note> <institution> Palo Alto, </institution> <year> 1993. </year>
Reference: [4] <author> F. McCabe. </author> <title> Logic and Objects. </title> <publisher> Prentice Hall International(UK) Ltd. </publisher> <address> Hemel Hempstead, UK, </address> <year> 1992. </year>
Reference-contexts: Since this time several new packages have become available, including L&O <ref> [4] </ref>, Sicstus Objects [1], Quintec Objects [10] and OL (P)[3].
Reference: [5] <author> Quintus. </author> <title> The Quintus Prolog Reference Manual. </title> <publisher> Quintus Corporation. </publisher> <address> Palo Alto, CA, </address> <year> 1991. </year>
Reference: [6] <author> Quintus. </author> <title> The Quintus ProWindows Reference Manual. </title> <publisher> Quintus Corporation. </publisher> <address> Palo Alto, CA, </address> <year> 1991. </year>
Reference-contexts: arity A defined for class C, there is a clause 1 For more information on the benefits of object-oriented programming, please see a dedicated text such as Rumbaugh [11] or Booch [2] 2 The packages that we had access to when we began this project in 1990 were Quintus ProWindows <ref> [6] </ref>, ProTalk [8], and Prolog++[13]. Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects [10] and OL (P)[3].
Reference: [7] <author> Quintus. </author> <title> The ProXT Reference Manual. </title> <publisher> Quintus Corporation. </publisher> <address> Palo Alto, CA, </address> <year> 1991. </year>
Reference-contexts: This example builds the GUI for an application which allows us to change its color scheme by popping up a color chooser. In order to create and manipulate the interface this example uses ProXT <ref> [7] </ref>, an interface to OSF Motif and the X toolkit (Xt). 5.2.1 Application Description The color chooser is a non-modal dialog which has a frame displaying the currently selected color, three sliders which control the Red, Green, and Blue amounts in the selected color, and an OK button which allows us
Reference: [8] <author> Quintus. </author> <title> Quintus ProTALK 1.0 User's Guide. Library documentation supplement to [5] delivered with Quintus Prolog. </title> <publisher> Quintus Corporation. </publisher> <address> Palo Alto, CA, </address> <year> 1989. </year> <month> 23 </month>
Reference-contexts: defined for class C, there is a clause 1 For more information on the benefits of object-oriented programming, please see a dedicated text such as Rumbaugh [11] or Booch [2] 2 The packages that we had access to when we began this project in 1990 were Quintus ProWindows [6], ProTalk <ref> [8] </ref>, and Prolog++[13]. Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects [10] and OL (P)[3]. It has not yet been possible to compare these systems with the classes package. 3 Examples of of these sorts of systems include ProTalk [8] and Prolog++[13]. <p> [6], ProTalk <ref> [8] </ref>, and Prolog++[13]. Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects [10] and OL (P)[3]. It has not yet been possible to compare these systems with the classes package. 3 Examples of of these sorts of systems include ProTalk [8] and Prolog++[13]. 1 send C (N (X 1 ,: : : ,X A ), Obj) :- send C N (X 1 , : : : , X A , Obj). as well as clauses for send C N/A+1 implementing the method.
Reference: [9] <author> Quintus. </author> <title> The Structs Package. Library documentation supplement to [5] delivered with Quintus Prolog. </title> <publisher> Quintus Corporation. </publisher> <address> Palo Alto, CA, </address> <year> 1991. </year>
Reference-contexts: We wanted efficiency approaching that of a C++ program, and were willing to declare the types of the data stored in each object's slots. Quintus has a package, the "structs" package <ref> [9] </ref>, which allows one to declare C language data structures, and to access and set members of these data structures.
Reference: [10] <author> B. </author> <title> Rivers. Quintec Objects. Quintec Software, </title> <publisher> Ltd. Oxford, </publisher> <year> 1990. </year>
Reference-contexts: Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects <ref> [10] </ref> and OL (P)[3].
Reference: [11] <author> J. Rumbaugh, et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, Inc. </publisher> <address> New Jersey, </address> <year> 1992. </year>
Reference-contexts: class C, there's a clause send (C (Addr), Msg) :- send C (Msg, C (Addr)). and for each message named N of arity A defined for class C, there is a clause 1 For more information on the benefits of object-oriented programming, please see a dedicated text such as Rumbaugh <ref> [11] </ref> or Booch [2] 2 The packages that we had access to when we began this project in 1990 were Quintus ProWindows [6], ProTalk [8], and Prolog++[13]. Since this time several new packages have become available, including L&O [4], Sicstus Objects [1], Quintec Objects [10] and OL (P)[3].
Reference: [12] <author> G. Steele, Jr. </author> <title> Common Lisp: The Language. </title> <publisher> Digital Press, </publisher> <address> USA, </address> <year> 1984. </year>
Reference-contexts: This has been a controversial change. Some may find it confusing to have different kinds of messages. Others have commented that there should only be two kinds of messages: send and get. Still, this approach is somewhat reminiscent of Common Lisp's setf macro <ref> [12] </ref>, which has proved to be very popular and convenient. Furthermore, the classes package itself does not force one to use all of these kinds of messages, but it does encourage it by generating a get and a put method for every slot that is not declared private.
Reference: [13] <author> P. Vasey, et al. </author> <title> Prolog++ Programming Reference Manual. </title> <booktitle> Logic Programming Associates. </booktitle> <address> London, UK, </address> <year> 1990. </year> <month> 24 </month>
References-found: 13

